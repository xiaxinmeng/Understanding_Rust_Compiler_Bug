{"sha": "07e018dfef2f3f213a649181009623200b9f488c", "node_id": "C_kwDOAAsO6NoAKDA3ZTAxOGRmZWYyZjNmMjEzYTY0OTE4MTAwOTYyMzIwMGI5ZjQ4OGM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-07T21:26:02Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-12T13:50:32Z"}, "message": "Run existing async in traits tests using -Zlower-impl-trait-in-trait-to-assoc-ty", "tree": {"sha": "db8e75d810702a7fa496585cf26b6067e2840329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db8e75d810702a7fa496585cf26b6067e2840329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07e018dfef2f3f213a649181009623200b9f488c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQN2KgACgkQgTGiTgx5\n76+QJA/+PlmFI9eu+dzlEbMRvOjgAxLHsmsdFtwmumA8LdMOb5gCN4GPoWECOOWD\nchJNBKXI1vi7FdcivU1iT4OJPdbUj9jWkEjRn6bWf36RfYh6hi53PtU22EbiBOYI\nr0k0PgZlEamZpTWqp2VrqR63wRC+loMURGQtbeSExw8Wo+7jjZE6K7c6Gn8tdWwR\nzglsHuEVM5Gc/LN7bdaHNqiqgg0Si3/0X6sRce25uTLInn4Ma8Q3/4xpVxUOt/MW\nsI5R8SZx4qYktt9w0lQA24BRvqbYbkFKcVStusWA9GPIBSN9ML/716505NxLF666\npZ4MavbXqZ7iz97OyBQN4adIuU4yhPz3BAdURnUgn9kUHDqwWeIUlg+i8oNKncAA\nHeNm5/upwefcaTqZzsTCmTR1MLmArgyIOBED3TTHs4b6Di2zChMvgwqqx/vGFLqP\nSCEUTzdCqQgQhD6xIuMbSQfRWk/IvvUqgAYc2T1msSGgYa/Dty7xa7S3bObt/QtD\n+JivBvXMrNExTiRwYioNqt4E4RSe3zvz66wTq7MGUVUbkRZHsaBWKbWiSe9tYAle\n3WKcNQELCuoyLjFxQSiII9zZ23OBHRA8onAgR0U/Hz6EBR9pBgx1a0C+yOJWzYdu\n3nLJu4rkrFDJVcCXjW4sXwK/9++kYkDwGSCrXkOoT/mkplyTvZg=\n=Lyru\n-----END PGP SIGNATURE-----", "payload": "tree db8e75d810702a7fa496585cf26b6067e2840329\nparent 8a5574bf62825d5302cd89428d9bae76e93b3311\nauthor Santiago Pastorino <spastorino@gmail.com> 1678224362 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678629032 -0300\n\nRun existing async in traits tests using -Zlower-impl-trait-in-trait-to-assoc-ty\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07e018dfef2f3f213a649181009623200b9f488c", "html_url": "https://github.com/rust-lang/rust/commit/07e018dfef2f3f213a649181009623200b9f488c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07e018dfef2f3f213a649181009623200b9f488c/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5574bf62825d5302cd89428d9bae76e93b3311", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5574bf62825d5302cd89428d9bae76e93b3311", "html_url": "https://github.com/rust-lang/rust/commit/8a5574bf62825d5302cd89428d9bae76e93b3311"}], "stats": {"total": 155, "additions": 145, "deletions": 10}, "files": [{"sha": "89ca4039bce9120da804cab91ee7ca3b96aca955", "filename": "tests/ui/async-await/in-trait/async-associated-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(impl_trait_projections)]"}, {"sha": "cdecb02bfad1e53d773eeb13fc3b4eefe4baa2da", "filename": "tests/ui/async-await/in-trait/async-associated-types2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "b5ace9ada4f806317dc92930f80caea86b4bd773", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.current.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,11 +1,11 @@\n error[E0053]: method `foo` has an incompatible type for trait\n-  --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:17:28\n    |\n LL |     async fn foo(&self) -> i32 {\n    |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found future\n    |\n note: type in trait\n-  --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:13:22\n    |\n LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr"}, {"sha": "b5ace9ada4f806317dc92930f80caea86b4bd773", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.next.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.next.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -0,0 +1,17 @@\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:17:28\n+   |\n+LL |     async fn foo(&self) -> i32 {\n+   |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found future\n+   |\n+note: type in trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:13:22\n+   |\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected signature `fn(&i32) -> Pin<Box<dyn Future<Output = i32>>>`\n+              found signature `fn(&i32) -> impl Future<Output = i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "7b53379b24b784cd49d90eb2ee9f76038637a7ac", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "6c0b5859186b5d096037e84948fcf2f3c4d8fbbe", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.current.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,5 @@\n error: method `foo` should be async because the method from the trait is async\n-  --> $DIR/async-example-desugared-boxed.rs:15:5\n+  --> $DIR/async-example-desugared-boxed.rs:17:5\n    |\n LL |     async fn foo(&self) -> i32;\n    |     --------------------------- required because the trait method is async", "previous_filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.stderr"}, {"sha": "6c0b5859186b5d096037e84948fcf2f3c4d8fbbe", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.next.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -0,0 +1,11 @@\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/async-example-desugared-boxed.rs:17:5\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "916488ffafaf45a3d9c30fd9bfd3b05b3f055e54", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "edac0b374a3259ade7e9ae67f5e47e940ffbd241", "filename": "tests/ui/async-await/in-trait/async-example-desugared-extra.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "934f7643dd1c9c43fe077cc843724dbb5dacd11d", "filename": "tests/ui/async-await/in-trait/async-example-desugared-in-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "0d2551ab84f959063191d25a9fff68ba13d27a08", "filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.current.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,5 @@\n error: method `foo` should be async because the method from the trait is async\n-  --> $DIR/async-example-desugared-manual.rs:23:5\n+  --> $DIR/async-example-desugared-manual.rs:25:5\n    |\n LL |     async fn foo(&self) -> i32;\n    |     --------------------------- required because the trait method is async", "previous_filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.stderr"}, {"sha": "0d2551ab84f959063191d25a9fff68ba13d27a08", "filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.next.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -0,0 +1,11 @@\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/async-example-desugared-manual.rs:25:5\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> MyFuture {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4883828d32fef979507020e6b9313910e5839e3f", "filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "214171b2e2cba01403af4c80f75c4e6418e7b646", "filename": "tests/ui/async-await/in-trait/async-example-desugared.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "67b491f19d2694227a9562d9d6f9085657dd779a", "filename": "tests/ui/async-await/in-trait/async-recursive-generic.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.current.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/async-recursive-generic.rs:11:48\n+  --> $DIR/async-recursive-generic.rs:13:48\n    |\n LL |     async fn foo_recursive(&self, n: usize) -> T {\n    |                                                ^ recursive `async fn`", "previous_filename": "tests/ui/async-await/in-trait/async-recursive-generic.stderr"}, {"sha": "67b491f19d2694227a9562d9d6f9085657dd779a", "filename": "tests/ui/async-await/in-trait/async-recursive-generic.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.next.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive-generic.rs:13:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> T {\n+   |                                                ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "64c6ba15c0cf0d9f528e89065e99ebc93ce86e27", "filename": "tests/ui/async-await/in-trait/async-recursive-generic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "85af27e3746536f686dc9f521b8d35138c6530c0", "filename": "tests/ui/async-await/in-trait/async-recursive.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.current.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/async-recursive.rs:11:48\n+  --> $DIR/async-recursive.rs:13:48\n    |\n LL |     async fn foo_recursive(&self, n: usize) -> i32 {\n    |                                                ^^^ recursive `async fn`", "previous_filename": "tests/ui/async-await/in-trait/async-recursive.stderr"}, {"sha": "85af27e3746536f686dc9f521b8d35138c6530c0", "filename": "tests/ui/async-await/in-trait/async-recursive.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.next.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive.rs:13:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> i32 {\n+   |                                                ^^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "d928909e3ae5bc7f25b2a84203a8905b56cbf3f4", "filename": "tests/ui/async-await/in-trait/async-recursive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "5a05b080c3e57590d587d7ac00469d592f4b45d6", "filename": "tests/ui/async-await/in-trait/bad-signatures.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,11 +1,11 @@\n error: expected identifier, found keyword `self`\n-  --> $DIR/bad-signatures.rs:7:23\n+  --> $DIR/bad-signatures.rs:9:23\n    |\n LL |     async fn bar(&abc self);\n    |                       ^^^^ expected identifier, found keyword\n \n error: expected one of `:`, `@`, or `|`, found keyword `self`\n-  --> $DIR/bad-signatures.rs:7:23\n+  --> $DIR/bad-signatures.rs:9:23\n    |\n LL |     async fn bar(&abc self);\n    |                  -----^^^^\n@@ -14,7 +14,7 @@ LL |     async fn bar(&abc self);\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bad-signatures.rs:3:12\n+  --> $DIR/bad-signatures.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/bad-signatures.stderr"}, {"sha": "5a05b080c3e57590d587d7ac00469d592f4b45d6", "filename": "tests/ui/async-await/in-trait/bad-signatures.next.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -0,0 +1,26 @@\n+error: expected identifier, found keyword `self`\n+  --> $DIR/bad-signatures.rs:9:23\n+   |\n+LL |     async fn bar(&abc self);\n+   |                       ^^^^ expected identifier, found keyword\n+\n+error: expected one of `:`, `@`, or `|`, found keyword `self`\n+  --> $DIR/bad-signatures.rs:9:23\n+   |\n+LL |     async fn bar(&abc self);\n+   |                  -----^^^^\n+   |                  |    |\n+   |                  |    expected one of `:`, `@`, or `|`\n+   |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-signatures.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "e0093be8cb33fdb3a44d7b75c4115f359f48982e", "filename": "tests/ui/async-await/in-trait/bad-signatures.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete"}, {"sha": "30843473defc77dac6578d54a4b12459d35ac461", "filename": "tests/ui/async-await/in-trait/early-bound-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "1c5a68c2a5adfb6be7e82c48e0c4604629627e53", "filename": "tests/ui/async-await/in-trait/early-bound-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "1a7495149899a4b1df38de5e4cdd1e7793e60462", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.current.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,5 @@\n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n-  --> $DIR/fn-not-async-err2.rs:13:22\n+  --> $DIR/fn-not-async-err2.rs:15:22\n    |\n LL |     fn foo(&self) -> impl Future<Output = i32> {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/fn-not-async-err2.stderr"}, {"sha": "1a7495149899a4b1df38de5e4cdd1e7793e60462", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.next.stderr?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -0,0 +1,12 @@\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n+  --> $DIR/fn-not-async-err2.rs:15:22\n+   |\n+LL |     fn foo(&self) -> impl Future<Output = i32> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "5fdb7296aaf97d2133ace7c2f033dc6b96e8ca34", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "45ada1d84c320cb574d1c3f81dac0b1377b5322a", "filename": "tests/ui/async-await/in-trait/implied-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "ced30b7e4e4b99866ff146301ff57365bbec0e80", "filename": "tests/ui/async-await/in-trait/issue-102138.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "f3fdfa3459aeaf3949b3bde0385618c66a66205d", "filename": "tests/ui/async-await/in-trait/issue-102219.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e018dfef2f3f213a649181009623200b9f488c/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs?ref=07e018dfef2f3f213a649181009623200b9f488c", "patch": "@@ -1,6 +1,8 @@\n // compile-flags:--crate-type=lib\n // edition:2021\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}]}