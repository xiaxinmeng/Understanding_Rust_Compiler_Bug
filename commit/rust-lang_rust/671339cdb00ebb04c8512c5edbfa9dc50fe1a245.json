{"sha": "671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "node_id": "C_kwDOAAsO6NoAKDY3MTMzOWNkYjAwZWJiMDRjODUxMmM1ZWRiZmE5ZGM1MGZlMWEyNDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-10T11:32:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-10T11:32:01Z"}, "message": "Rollup merge of #108960 - compiler-errors:no-body-def-id, r=cjgillot\n\nRemove `body_def_id` from `Inherited`\n\nWe can just use the body id from the obligation cause.\n\nFollow-up to #108945, only my commit is relevant.\n\nr? `@cjgillot` cc `@spastorino`", "tree": {"sha": "64e2e71e2589e73628ecf1281f5ebfcf3f1c4490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64e2e71e2589e73628ecf1281f5ebfcf3f1c4490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkCxUxCRBK7hj4Ov3rIwAA2QAIALCFKZ/N0Zzh/DhIoBLykDm1\n6Yhgv5Hoh/gd13UmSutt6jim/r4YfkjpX42M08ceDeNVYoYh/n+U2W2hz92ENHeD\nALAjh+nMEu7ZUYMOMeWKCA4qvflfEHkxMX1V2ZUUnBKDemWuB4cpTVdK/Nf5xsy0\nOxPOqRZcJxk3zswqWmDwxtD4cZUV0u3qqtJ+HFNeaOOFPwpAAX2/tfXZyWGFFwIA\ny4iOPWlXxmFBMGYva4nfFrN2HBBtyKyn8k4aKsDMDpmlbg9RLIhcj01A92/gK0rV\nB6tRHzU0myStMCLSMpAtljlnrzcZfxrRnLIvGD2+Dsav+e8jJgdpXbdUj9UqFSs=\n=9Qd6\n-----END PGP SIGNATURE-----\n", "payload": "tree 64e2e71e2589e73628ecf1281f5ebfcf3f1c4490\nparent 65db3cb794cdde6010e1ab0a9a92b681c4aca34e\nparent fd34549686d7640f3e21d079bd0e6fb71cb06e3d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678447921 +0100\ncommitter GitHub <noreply@github.com> 1678447921 +0100\n\nRollup merge of #108960 - compiler-errors:no-body-def-id, r=cjgillot\n\nRemove `body_def_id` from `Inherited`\n\nWe can just use the body id from the obligation cause.\n\nFollow-up to #108945, only my commit is relevant.\n\nr? `@cjgillot` cc `@spastorino`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "html_url": "https://github.com/rust-lang/rust/commit/671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65db3cb794cdde6010e1ab0a9a92b681c4aca34e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65db3cb794cdde6010e1ab0a9a92b681c4aca34e", "html_url": "https://github.com/rust-lang/rust/commit/65db3cb794cdde6010e1ab0a9a92b681c4aca34e"}, {"sha": "fd34549686d7640f3e21d079bd0e6fb71cb06e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd34549686d7640f3e21d079bd0e6fb71cb06e3d", "html_url": "https://github.com/rust-lang/rust/commit/fd34549686d7640f3e21d079bd0e6fb71cb06e3d"}], "stats": {"total": 139, "additions": 55, "deletions": 84}, "files": [{"sha": "748c8b9e4420ca389123bd3a706a7582685427b3", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -325,7 +325,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         if errors.is_empty() {\n             definition_ty\n         } else {\n-            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n             self.tcx.ty_error(reported)\n         }\n     }"}, {"sha": "61c4d28bdfa367c43234bd51b2b33544a48113ff", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -769,7 +769,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n                         let errors = ocx.select_all_or_error();\n                         if !errors.is_empty() {\n-                            infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+                            infcx.err_ctxt().report_fulfillment_errors(&errors);\n                         }\n                     }\n "}, {"sha": "14dc9d8918000bdbfbbdba6e5108821f5f01e680", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -444,7 +444,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors);\n     }\n     match origin {\n         // Checked when type checking the function containing them.\n@@ -1545,6 +1545,6 @@ pub(super) fn check_generator_obligations(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let errors = fulfillment_cx.select_all_or_error(&infcx);\n     debug!(?errors);\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors);\n     }\n }"}, {"sha": "5e2781925e66ecd48eb7867096228e33c876f376", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -320,7 +320,7 @@ fn compare_method_predicate_entailment<'tcx>(\n                 });\n             }\n             CheckImpliedWfMode::Skip => {\n-                let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+                let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n                 return Err(reported);\n             }\n         }\n@@ -720,7 +720,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n     // RPITs.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n         return Err(reported);\n     }\n \n@@ -1731,7 +1731,7 @@ pub(super) fn compare_impl_const_raw(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        return Err(infcx.err_ctxt().report_fulfillment_errors(&errors, None));\n+        return Err(infcx.err_ctxt().report_fulfillment_errors(&errors));\n     }\n \n     let outlives_environment = OutlivesEnvironment::new(param_env);\n@@ -1831,7 +1831,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n         return Err(reported);\n     }\n \n@@ -2044,7 +2044,7 @@ pub(super) fn check_type_bounds<'tcx>(\n     // version.\n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n         return Err(reported);\n     }\n "}, {"sha": "71050864ce0c514a2f914eb6a38cae8e4b521c0f", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -111,7 +111,7 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n \n     let errors = wfcx.select_all_or_error();\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors);\n         return;\n     }\n "}, {"sha": "5e8f69677cf3dc9cd81469d43c6dc846eced363e", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -345,7 +345,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n                     }),\n                 );\n                 if !errors.is_empty() {\n-                    infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+                    infcx.err_ctxt().report_fulfillment_errors(&errors);\n                 }\n \n                 // Finally, resolve all regions.\n@@ -585,7 +585,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n         predicate_for_trait_def(tcx, param_env, cause, trait_def_id, 0, [source, target]);\n     let errors = traits::fully_solve_obligation(&infcx, predicate);\n     if !errors.is_empty() {\n-        infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        infcx.err_ctxt().report_fulfillment_errors(&errors);\n     }\n \n     // Finally, resolve all regions."}, {"sha": "58dd03811f78cf04ed5245ea8ec1114105860452", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -174,7 +174,7 @@ fn get_impl_substs(\n \n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n-        ocx.infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+        ocx.infcx.err_ctxt().report_fulfillment_errors(&errors);\n         return None;\n     }\n "}, {"sha": "7abdde2c892d784f525756c5551810c1a902d810", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -176,7 +176,7 @@ fn require_same_types<'tcx>(\n     match &errors[..] {\n         [] => true,\n         errors => {\n-            infcx.err_ctxt().report_fulfillment_errors(errors, None);\n+            infcx.err_ctxt().report_fulfillment_errors(errors);\n             false\n         }\n     }\n@@ -309,7 +309,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         ocx.register_bound(cause, param_env, norm_return_ty, term_did);\n         let errors = ocx.select_all_or_error();\n         if !errors.is_empty() {\n-            infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+            infcx.err_ctxt().report_fulfillment_errors(&errors);\n             error = true;\n         }\n         // now we can take the return type of the given main function"}, {"sha": "2075537cad71fd8d075f3fad64e6d28e7e815a7b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -581,7 +581,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if !errors.is_empty() {\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut errors);\n-            self.err_ctxt().report_fulfillment_errors(&errors, Some(self.inh.body_def_id));\n+            self.err_ctxt().report_fulfillment_errors(&errors);\n         }\n     }\n \n@@ -594,7 +594,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if !result.is_empty() {\n             mutate_fulfillment_errors(&mut result);\n             self.adjust_fulfillment_errors_for_expr_obligation(&mut result);\n-            self.err_ctxt().report_fulfillment_errors(&result, Some(self.inh.body_def_id));\n+            self.err_ctxt().report_fulfillment_errors(&result);\n         }\n     }\n \n@@ -1411,13 +1411,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             let e = self.tainted_by_errors().unwrap_or_else(|| {\n                 self.err_ctxt()\n-                    .emit_inference_failure_err(\n-                        Some(self.inh.body_def_id),\n-                        sp,\n-                        ty.into(),\n-                        E0282,\n-                        true,\n-                    )\n+                    .emit_inference_failure_err(self.body_id, sp, ty.into(), E0282, true)\n                     .emit()\n             });\n             let err = self.tcx.ty_error(e);"}, {"sha": "07fa7c55df660af1a7cd33c1e8c977d466c726e1", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -58,8 +58,6 @@ pub struct Inherited<'tcx> {\n     pub(super) deferred_generator_interiors:\n         RefCell<Vec<(LocalDefId, hir::BodyId, Ty<'tcx>, hir::GeneratorKind)>>,\n \n-    pub(super) body_def_id: LocalDefId,\n-\n     /// Whenever we introduce an adjustment from `!` into a type variable,\n     /// we record that type variable here. This is later used to inform\n     /// fallback. See the `fallback` module for details.\n@@ -80,7 +78,6 @@ impl<'tcx> Deref for Inherited<'tcx> {\n /// without using `Rc` or something similar.\n pub struct InheritedBuilder<'tcx> {\n     infcx: infer::InferCtxtBuilder<'tcx>,\n-    def_id: LocalDefId,\n     typeck_results: RefCell<ty::TypeckResults<'tcx>>,\n }\n \n@@ -93,7 +90,6 @@ impl<'tcx> Inherited<'tcx> {\n                 .infer_ctxt()\n                 .ignoring_regions()\n                 .with_opaque_type_inference(DefiningAnchor::Bind(hir_owner.def_id)),\n-            def_id,\n             typeck_results: RefCell::new(ty::TypeckResults::new(hir_owner)),\n         }\n     }\n@@ -104,17 +100,12 @@ impl<'tcx> InheritedBuilder<'tcx> {\n     where\n         F: FnOnce(&Inherited<'tcx>) -> R,\n     {\n-        let def_id = self.def_id;\n-        f(&Inherited::new(self.infcx.build(), def_id, self.typeck_results))\n+        f(&Inherited::new(self.infcx.build(), self.typeck_results))\n     }\n }\n \n impl<'tcx> Inherited<'tcx> {\n-    fn new(\n-        infcx: InferCtxt<'tcx>,\n-        def_id: LocalDefId,\n-        typeck_results: RefCell<ty::TypeckResults<'tcx>>,\n-    ) -> Self {\n+    fn new(infcx: InferCtxt<'tcx>, typeck_results: RefCell<ty::TypeckResults<'tcx>>) -> Self {\n         let tcx = infcx.tcx;\n \n         Inherited {\n@@ -129,7 +120,6 @@ impl<'tcx> Inherited<'tcx> {\n             deferred_asm_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             diverging_type_vars: RefCell::new(Default::default()),\n-            body_def_id: def_id,\n             infer_var_info: RefCell::new(Default::default()),\n         }\n     }"}, {"sha": "af588b16d593b38259358f4a2984fddc2c3f9c1b", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -748,7 +748,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                 .infcx\n                 .err_ctxt()\n                 .emit_inference_failure_err(\n-                    Some(self.tcx.hir().body_owner_def_id(self.body.id())),\n+                    self.tcx.hir().body_owner_def_id(self.body.id()),\n                     self.span.to_span(self.tcx),\n                     p.into(),\n                     E0282,"}, {"sha": "bde16fad82162c05dc5dee317a9ced70626fbdc9", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -386,7 +386,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     #[instrument(level = \"debug\", skip(self, error_code))]\n     pub fn emit_inference_failure_err(\n         &self,\n-        body_def_id: Option<LocalDefId>,\n+        body_def_id: LocalDefId,\n         failure_span: Span,\n         arg: GenericArg<'tcx>,\n         error_code: TypeAnnotationNeeded,\n@@ -403,9 +403,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         };\n \n         let mut local_visitor = FindInferSourceVisitor::new(&self, typeck_results, arg);\n-        if let Some(body_def_id) = body_def_id\n-            && let Some(body_id) = self.tcx.hir().maybe_body_owned_by(body_def_id)\n-        {\n+        if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(\n+            self.tcx.typeck_root_def_id(body_def_id.to_def_id()).expect_local(),\n+        ) {\n             let expr = self.tcx.hir().body(body_id).value;\n             local_visitor.visit_expr(expr);\n         }"}, {"sha": "2dfebfcb904f15b07dabade1c092128a7b4afd1c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -124,11 +124,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n             + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n         <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n \n-    fn report_fulfillment_errors(\n-        &self,\n-        errors: &[FulfillmentError<'tcx>],\n-        body_def_id: Option<LocalDefId>,\n-    ) -> ErrorGuaranteed;\n+    fn report_fulfillment_errors(&self, errors: &[FulfillmentError<'tcx>]) -> ErrorGuaranteed;\n \n     fn report_overflow_obligation<T>(\n         &self,\n@@ -386,11 +382,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n }\n \n impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n-    fn report_fulfillment_errors(\n-        &self,\n-        errors: &[FulfillmentError<'tcx>],\n-        body_def_id: Option<LocalDefId>,\n-    ) -> ErrorGuaranteed {\n+    fn report_fulfillment_errors(&self, errors: &[FulfillmentError<'tcx>]) -> ErrorGuaranteed {\n         #[derive(Debug)]\n         struct ErrorDescriptor<'tcx> {\n             predicate: ty::Predicate<'tcx>,\n@@ -467,7 +459,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         for from_expansion in [false, true] {\n             for (error, suppressed) in iter::zip(errors, &is_suppressed) {\n                 if !suppressed && error.obligation.cause.span.from_expansion() == from_expansion {\n-                    self.report_fulfillment_error(error, body_def_id);\n+                    self.report_fulfillment_error(error);\n                 }\n             }\n         }\n@@ -1491,11 +1483,7 @@ trait InferCtxtPrivExt<'tcx> {\n     // `error` occurring implies that `cond` occurs.\n     fn error_implies(&self, cond: ty::Predicate<'tcx>, error: ty::Predicate<'tcx>) -> bool;\n \n-    fn report_fulfillment_error(\n-        &self,\n-        error: &FulfillmentError<'tcx>,\n-        body_def_id: Option<LocalDefId>,\n-    );\n+    fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>);\n \n     fn report_projection_error(\n         &self,\n@@ -1558,11 +1546,7 @@ trait InferCtxtPrivExt<'tcx> {\n         trait_ref_and_ty: ty::Binder<'tcx, (ty::TraitPredicate<'tcx>, Ty<'tcx>)>,\n     ) -> PredicateObligation<'tcx>;\n \n-    fn maybe_report_ambiguity(\n-        &self,\n-        obligation: &PredicateObligation<'tcx>,\n-        body_def_id: Option<LocalDefId>,\n-    );\n+    fn maybe_report_ambiguity(&self, obligation: &PredicateObligation<'tcx>);\n \n     fn predicate_can_apply(\n         &self,\n@@ -1644,11 +1628,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n-    fn report_fulfillment_error(\n-        &self,\n-        error: &FulfillmentError<'tcx>,\n-        body_def_id: Option<LocalDefId>,\n-    ) {\n+    fn report_fulfillment_error(&self, error: &FulfillmentError<'tcx>) {\n         match error.code {\n             FulfillmentErrorCode::CodeSelectionError(ref selection_error) => {\n                 self.report_selection_error(\n@@ -1661,7 +1641,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 self.report_projection_error(&error.obligation, e);\n             }\n             FulfillmentErrorCode::CodeAmbiguity => {\n-                self.maybe_report_ambiguity(&error.obligation, body_def_id);\n+                self.maybe_report_ambiguity(&error.obligation);\n             }\n             FulfillmentErrorCode::CodeSubtypeError(ref expected_found, ref err) => {\n                 self.report_mismatched_types(\n@@ -2226,11 +2206,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n-    fn maybe_report_ambiguity(\n-        &self,\n-        obligation: &PredicateObligation<'tcx>,\n-        body_def_id: Option<LocalDefId>,\n-    ) {\n+    fn maybe_report_ambiguity(&self, obligation: &PredicateObligation<'tcx>) {\n         // Unable to successfully determine, probably means\n         // insufficient type information, but could mean\n         // ambiguous impls. The latter *ought* to be a\n@@ -2272,7 +2248,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n                     if let None = self.tainted_by_errors() {\n                         self.emit_inference_failure_err(\n-                            body_def_id,\n+                            obligation.cause.body_id,\n                             span,\n                             trait_ref.self_ty().skip_binder().into(),\n                             ErrorCode::E0282,\n@@ -2300,7 +2276,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n                 let mut err = if let Some(subst) = subst {\n                     self.emit_inference_failure_err(\n-                        body_def_id,\n+                        obligation.cause.body_id,\n                         span,\n                         subst,\n                         ErrorCode::E0283,\n@@ -2352,7 +2328,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 self.report_similar_impl_candidates(\n                                     impl_candidates,\n                                     trait_ref,\n-                                    body_def_id.unwrap_or(obligation.cause.body_id),\n+                                    obligation.cause.body_id,\n                                     &mut err,\n                                     false,\n                                 );\n@@ -2374,10 +2350,9 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     self.suggest_fully_qualified_path(&mut err, def_id, span, trait_ref.def_id());\n                 }\n \n-                if let (Some(body_def_id), Some(ty::subst::GenericArgKind::Type(_))) =\n-                    (body_def_id, subst.map(|subst| subst.unpack()))\n+                if let Some(ty::subst::GenericArgKind::Type(_)) = subst.map(|subst| subst.unpack())\n                 {\n-                    let body_id = self.tcx.hir().body_owned_by(body_def_id);\n+                    let body_id = self.tcx.hir().body_owned_by(obligation.cause.body_id);\n                     let mut expr_finder = FindExprBySpan::new(span);\n                     expr_finder.visit_expr(&self.tcx.hir().body(body_id).value);\n \n@@ -2473,7 +2448,13 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     return;\n                 }\n \n-                self.emit_inference_failure_err(body_def_id, span, arg, ErrorCode::E0282, false)\n+                self.emit_inference_failure_err(\n+                    obligation.cause.body_id,\n+                    span,\n+                    arg,\n+                    ErrorCode::E0282,\n+                    false,\n+                )\n             }\n \n             ty::PredicateKind::Subtype(data) => {\n@@ -2487,7 +2468,13 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let SubtypePredicate { a_is_expected: _, a, b } = data;\n                 // both must be type variables, or the other would've been instantiated\n                 assert!(a.is_ty_var() && b.is_ty_var());\n-                self.emit_inference_failure_err(body_def_id, span, a.into(), ErrorCode::E0282, true)\n+                self.emit_inference_failure_err(\n+                    obligation.cause.body_id,\n+                    span,\n+                    a.into(),\n+                    ErrorCode::E0282,\n+                    true,\n+                )\n             }\n             ty::PredicateKind::Clause(ty::Clause::Projection(data)) => {\n                 if predicate.references_error() || self.tainted_by_errors().is_some() {\n@@ -2501,7 +2488,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     .find(|g| g.has_non_region_infer());\n                 if let Some(subst) = subst {\n                     let mut err = self.emit_inference_failure_err(\n-                        body_def_id,\n+                        obligation.cause.body_id,\n                         span,\n                         subst,\n                         ErrorCode::E0284,\n@@ -2530,7 +2517,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let subst = data.walk().find(|g| g.is_non_region_infer());\n                 if let Some(subst) = subst {\n                     let err = self.emit_inference_failure_err(\n-                        body_def_id,\n+                        obligation.cause.body_id,\n                         span,\n                         subst,\n                         ErrorCode::E0284,"}, {"sha": "bfeda88a6d40ce2817b9ddf778e643eb610c7318", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671339cdb00ebb04c8512c5edbfa9dc50fe1a245/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=671339cdb00ebb04c8512c5edbfa9dc50fe1a245", "patch": "@@ -210,7 +210,7 @@ fn do_normalize_predicates<'tcx>(\n     let predicates = match fully_normalize(&infcx, cause, elaborated_env, predicates) {\n         Ok(predicates) => predicates,\n         Err(errors) => {\n-            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors);\n             return Err(reported);\n         }\n     };"}]}