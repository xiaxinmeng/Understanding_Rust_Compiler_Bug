{"sha": "b4eff16e0c943ef8250c0d49e1bc5501ee11467b", "node_id": "C_kwDOAAsO6NoAKGI0ZWZmMTZlMGM5NDNlZjgyNTBjMGQ0OWUxYmM1NTAxZWUxMTQ2N2I", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-27T19:55:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-27T19:56:00Z"}, "message": "ensure we don't compare provenance", "tree": {"sha": "046e2eb94a78c958e17a392715b6b95aaa1842ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/046e2eb94a78c958e17a392715b6b95aaa1842ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4eff16e0c943ef8250c0d49e1bc5501ee11467b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4eff16e0c943ef8250c0d49e1bc5501ee11467b", "html_url": "https://github.com/rust-lang/rust/commit/b4eff16e0c943ef8250c0d49e1bc5501ee11467b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4eff16e0c943ef8250c0d49e1bc5501ee11467b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8212484f848439fc61b1f2d50de2444459da59", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8212484f848439fc61b1f2d50de2444459da59", "html_url": "https://github.com/rust-lang/rust/commit/bb8212484f848439fc61b1f2d50de2444459da59"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "0862b3b17c6d7744aa0ca1c274d485d3fc09fc3b", "filename": "src/machine.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4eff16e0c943ef8250c0d49e1bc5501ee11467b/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4eff16e0c943ef8250c0d49e1bc5501ee11467b/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b4eff16e0c943ef8250c0d49e1bc5501ee11467b", "patch": "@@ -126,7 +126,7 @@ impl fmt::Display for MiriMemoryKind {\n }\n \n /// Pointer provenance.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Debug, Clone, Copy)]\n pub enum Provenance {\n     Concrete {\n         alloc_id: AllocId,\n@@ -136,6 +136,24 @@ pub enum Provenance {\n     Wildcard,\n }\n \n+// This needs to be `Eq`+`Hash` because the `Machine` trait needs that because validity checking\n+// *might* be recursive and then it has to track which places have already been visited.\n+// However, comparing provenance is meaningless, since `Wildcard` might be any provenance -- and of\n+// course we don't actually do recursive checking.\n+// We could change `RefTracking` to strip provenance for its `seen` set but that type is generic so that is quite annoying.\n+// Instead owe add the required instances but make them panic.\n+impl PartialEq for Provenance {\n+    fn eq(&self, _other: &Self) -> bool {\n+        panic!(\"Provenance must not be compared\")\n+    }\n+}\n+impl Eq for Provenance {}\n+impl std::hash::Hash for Provenance {\n+    fn hash<H: std::hash::Hasher>(&self, _state: &mut H) {\n+        panic!(\"Provenance must not be hashed\")\n+    }\n+}\n+\n /// The \"extra\" information a pointer has over a regular AllocId.\n #[derive(Copy, Clone, PartialEq)]\n pub enum ProvenanceExtra {"}]}