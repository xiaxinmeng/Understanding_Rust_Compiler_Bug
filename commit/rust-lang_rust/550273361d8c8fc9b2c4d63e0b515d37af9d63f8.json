{"sha": "550273361d8c8fc9b2c4d63e0b515d37af9d63f8", "node_id": "C_kwDOAAsO6NoAKDU1MDI3MzM2MWQ4YzhmYzliMmM0ZDYzZTBiNTE1ZDM3YWY5ZDYzZjg", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-04-27T17:28:27Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-04-28T10:31:19Z"}, "message": "std: simplify UNIX parker timeouts", "tree": {"sha": "8c5d0a7e29a4d25a849f70d1cbead3a74477967d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c5d0a7e29a4d25a849f70d1cbead3a74477967d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/550273361d8c8fc9b2c4d63e0b515d37af9d63f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmJqbSMACgkQcE4BSbAZ\nSzwhqg//dPExyq8DxmG82TOPMKKnVtAILqbTsoiZAs9iBKsKC5eplchT9jYYb2rH\n8MWw6/0WKVgOe/JoCDI1KIt+hLOKJFU7Nn4uefrX7Y49l0sbkMkf4b5Pe9iIKJlJ\nsIu29GsxAG50RGip1YYpOv1qdH1y/270DR1VXrm82QVHt6OrLdHwFwnWnuLgOq2+\nJPQf+ieaaK0iOsdoGklDNZ4P3srIF0gbJ+NPJIypJAP/obopLBSX+1a0kaXhkJwI\nR3HiiTpVmvLNNnfKbUy8KoqNUpe7R0uu3t9yPwDwWaTj5LO+6nY4/kmqMpC0LrUM\ndZRPFT23Fe+ssmx7J+rERHtHh+TJvQizm90/sQ1cA7d7+nEITVt68jO11GQSdMoX\nU/Wh0rh0Hnz5Xp+hBBz+X8hTZhqR5NNvzxpgkpD1SHz3zZWKBQburyvs4MZ5DaZp\nYI7jnRqZ6THEOYqZNb3Y5VPsmkaQ6yA3oG9ru8yINfhMPyttLnPmawT4GnhXdcGR\nefYMCOKKXhju+WKOAgYIZTF0lgTYcaB8hcMG5Ir/vRQtANuYk6+D1g6WwvSNA8ec\nysqhE6oP5D/6glel8GCHXhk3DSZp8muYkqnv/AiOHY59+K1BaqoRuqFCpwyFkmH1\n24GlzE1Jkg2Rsf9N8iViuHSw2k6wrq4keDZ+tPdgITtTc67aQ5M=\n=/Y1R\n-----END PGP SIGNATURE-----", "payload": "tree 8c5d0a7e29a4d25a849f70d1cbead3a74477967d\nparent 54daf496e2e957a9f69aa88bf6c42520a2dbfa02\nauthor joboet <jonasboettiger@icloud.com> 1651080507 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1651141879 +0200\n\nstd: simplify UNIX parker timeouts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/550273361d8c8fc9b2c4d63e0b515d37af9d63f8", "html_url": "https://github.com/rust-lang/rust/commit/550273361d8c8fc9b2c4d63e0b515d37af9d63f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/550273361d8c8fc9b2c4d63e0b515d37af9d63f8/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54daf496e2e957a9f69aa88bf6c42520a2dbfa02", "url": "https://api.github.com/repos/rust-lang/rust/commits/54daf496e2e957a9f69aa88bf6c42520a2dbfa02", "html_url": "https://github.com/rust-lang/rust/commit/54daf496e2e957a9f69aa88bf6c42520a2dbfa02"}], "stats": {"total": 80, "additions": 21, "deletions": 59}, "files": [{"sha": "fd83f2f73d6d66d8ccff49bf8265e5fe5946dc3d", "filename": "library/std/src/sys/unix/thread_parker.rs", "status": "modified", "additions": 19, "deletions": 57, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/550273361d8c8fc9b2c4d63e0b515d37af9d63f8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550273361d8c8fc9b2c4d63e0b515d37af9d63f8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parker.rs?ref=550273361d8c8fc9b2c4d63e0b515d37af9d63f8", "patch": "@@ -41,52 +41,18 @@ unsafe fn wait(cond: *mut libc::pthread_cond_t, lock: *mut libc::pthread_mutex_t\n const TIMESPEC_MAX: libc::timespec =\n     libc::timespec { tv_sec: <libc::time_t>::MAX, tv_nsec: 1_000_000_000 - 1 };\n \n-fn saturating_cast_to_time_t(value: u64) -> libc::time_t {\n-    if value > <libc::time_t>::MAX as u64 { <libc::time_t>::MAX } else { value as libc::time_t }\n-}\n-\n-// This implementation is used on systems that support pthread_condattr_setclock\n-// where we configure the condition variable to use the monotonic clock (instead of\n-// the default system clock). This approach avoids all problems that result\n-// from changes made to the system time.\n-#[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"espidf\")))]\n unsafe fn wait_timeout(\n     cond: *mut libc::pthread_cond_t,\n     lock: *mut libc::pthread_mutex_t,\n     dur: Duration,\n ) {\n-    use crate::mem;\n-\n-    let mut now: libc::timespec = mem::zeroed();\n-    let r = libc::clock_gettime(libc::CLOCK_MONOTONIC, &mut now);\n-    assert_eq!(r, 0);\n-    // Nanosecond calculations can't overflow because both values are below 1e9.\n-    let nsec = dur.subsec_nanos() + now.tv_nsec as u32;\n-    let sec = saturating_cast_to_time_t(dur.as_secs())\n-        .checked_add((nsec / 1_000_000_000) as libc::time_t)\n-        .and_then(|s| s.checked_add(now.tv_sec));\n-    let nsec = nsec % 1_000_000_000;\n-    let timeout =\n-        sec.map(|s| libc::timespec { tv_sec: s, tv_nsec: nsec as _ }).unwrap_or(TIMESPEC_MAX);\n-    let r = libc::pthread_cond_timedwait(cond, lock, &timeout);\n-    assert!(r == libc::ETIMEDOUT || r == 0);\n-}\n+    // Use the system clock on systems that do not support pthread_condattr_setclock.\n+    // This unfortunately results in problems when the system time changes.\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"espidf\"))]\n+    let (now, dur) = {\n+        use super::time::SystemTime;\n+        use crate::cmp::min;\n \n-// This implementation is modeled after libcxx's condition_variable\n-// https://github.com/llvm-mirror/libcxx/blob/release_35/src/condition_variable.cpp#L46\n-// https://github.com/llvm-mirror/libcxx/blob/release_35/include/__mutex_base#L367\n-#[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"espidf\"))]\n-unsafe fn wait_timeout(\n-    cond: *mut libc::pthread_cond_t,\n-    lock: *mut libc::pthread_mutex_t,\n-    mut dur: Duration,\n-) {\n-    use crate::ptr;\n-\n-    // 1000 years\n-    let max_dur = Duration::from_secs(1000 * 365 * 86400);\n-\n-    if dur > max_dur {\n         // OSX implementation of `pthread_cond_timedwait` is buggy\n         // with super long durations. When duration is greater than\n         // 0x100_0000_0000_0000 seconds, `pthread_cond_timedwait`\n@@ -98,23 +64,19 @@ unsafe fn wait_timeout(\n         // To work around this issue, and possible bugs of other OSes, timeout\n         // is clamped to 1000 years, which is allowable per the API of `park_timeout`\n         // because of spurious wakeups.\n-        dur = max_dur;\n-    }\n-\n-    let mut sys_now = libc::timeval { tv_sec: 0, tv_usec: 0 };\n-    let r = libc::gettimeofday(&mut sys_now, ptr::null_mut());\n-    debug_assert_eq!(r, 0);\n-    let nsec = dur.subsec_nanos() as libc::c_long + (sys_now.tv_usec * 1000) as libc::c_long;\n-    let extra = (nsec / 1_000_000_000) as libc::time_t;\n-    let nsec = nsec % 1_000_000_000;\n-    let seconds = saturating_cast_to_time_t(dur.as_secs());\n-    let timeout = sys_now\n-        .tv_sec\n-        .checked_add(extra)\n-        .and_then(|s| s.checked_add(seconds))\n-        .map(|s| libc::timespec { tv_sec: s, tv_nsec: nsec })\n-        .unwrap_or(TIMESPEC_MAX);\n-    // And wait!\n+        let dur = min(dur, Duration::from_secs(1000 * 365 * 86400));\n+        let now = SystemTime::now().t;\n+        (now, dur)\n+    };\n+    // Use the monotonic clock on other systems.\n+    #[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"espidf\")))]\n+    let (now, dur) = {\n+        use super::time::Timespec;\n+\n+        (Timespec::now(libc::CLOCK_MONOTONIC), dur)\n+    };\n+\n+    let timeout = now.checked_add_duration(&dur).map(|t| t.t).unwrap_or(TIMESPEC_MAX);\n     let r = libc::pthread_cond_timedwait(cond, lock, &timeout);\n     debug_assert!(r == libc::ETIMEDOUT || r == 0);\n }"}, {"sha": "d43ceec9c8a59528d617e20f0054455f4b5fadc7", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/550273361d8c8fc9b2c4d63e0b515d37af9d63f8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/550273361d8c8fc9b2c4d63e0b515d37af9d63f8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=550273361d8c8fc9b2c4d63e0b515d37af9d63f8", "patch": "@@ -132,7 +132,7 @@ mod inner {\n \n     #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n     pub struct SystemTime {\n-        t: Timespec,\n+        pub(in crate::sys::unix) t: Timespec,\n     }\n \n     pub const UNIX_EPOCH: SystemTime = SystemTime { t: Timespec::zero() };\n@@ -279,7 +279,7 @@ mod inner {\n \n     #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n     pub struct SystemTime {\n-        t: Timespec,\n+        pub(in crate::sys::unix) t: Timespec,\n     }\n \n     pub const UNIX_EPOCH: SystemTime = SystemTime { t: Timespec::zero() };"}]}