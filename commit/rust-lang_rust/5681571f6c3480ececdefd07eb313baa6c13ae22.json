{"sha": "5681571f6c3480ececdefd07eb313baa6c13ae22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ODE1NzFmNmMzNDgwZWNlY2RlZmQwN2ViMzEzYmFhNmMxM2FlMjI=", "commit": {"author": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-05-04T01:35:07Z"}, "committer": {"name": "Young-il Choi", "email": "duddlf.choi@samsung.com", "date": "2013-05-04T01:35:07Z"}, "message": "compiletest: remove --host and cleanup", "tree": {"sha": "6eb68929fd034243dfb1c3dd0d169f91c0de2ce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eb68929fd034243dfb1c3dd0d169f91c0de2ce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5681571f6c3480ececdefd07eb313baa6c13ae22", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5681571f6c3480ececdefd07eb313baa6c13ae22", "html_url": "https://github.com/rust-lang/rust/commit/5681571f6c3480ececdefd07eb313baa6c13ae22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5681571f6c3480ececdefd07eb313baa6c13ae22/comments", "author": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yichoi", "id": 3222276, "node_id": "MDQ6VXNlcjMyMjIyNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3222276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yichoi", "html_url": "https://github.com/yichoi", "followers_url": "https://api.github.com/users/yichoi/followers", "following_url": "https://api.github.com/users/yichoi/following{/other_user}", "gists_url": "https://api.github.com/users/yichoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/yichoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yichoi/subscriptions", "organizations_url": "https://api.github.com/users/yichoi/orgs", "repos_url": "https://api.github.com/users/yichoi/repos", "events_url": "https://api.github.com/users/yichoi/events{/privacy}", "received_events_url": "https://api.github.com/users/yichoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84bdd05accba00254e999e1d73b963cca3388d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/84bdd05accba00254e999e1d73b963cca3388d33", "html_url": "https://github.com/rust-lang/rust/commit/84bdd05accba00254e999e1d73b963cca3388d33"}], "stats": {"total": 291, "additions": 145, "deletions": 146}, "files": [{"sha": "35ced32f1f2e93838a7765f9f935744566e9fa3a", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5681571f6c3480ececdefd07eb313baa6c13ae22/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5681571f6c3480ececdefd07eb313baa6c13ae22/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=5681571f6c3480ececdefd07eb313baa6c13ae22", "patch": "@@ -497,9 +497,8 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3))\t\t\t\t\\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3))\t\t\t\\\n         --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n-        --aux-base $$(S)src/test/auxiliary/\t\t\t\t\t\\\n+        --aux-base $$(S)src/test/auxiliary/                 \\\n         --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n-        --host $(CFG_BUILD_TRIPLE)                          \\\n         --target $(2)                                       \\\n         --adb-path=$(CFG_ADB)                          \\\n         --adb-test-dir=$(CFG_ADB_TEST_DIR)                  \\"}, {"sha": "38289f6274180a63c401d0f1754e9481f2f25f75", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5681571f6c3480ececdefd07eb313baa6c13ae22/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5681571f6c3480ececdefd07eb313baa6c13ae22/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=5681571f6c3480ececdefd07eb313baa6c13ae22", "patch": "@@ -64,10 +64,7 @@ pub struct config {\n     // Run tests using the new runtime\n     newrt: bool,\n \n-    // Host System to be built\n-    host: ~str,\n-\n-    // Target System to be executed\n+    // Target system to be tested\n     target: ~str,\n \n     // Extra parameter to run adb on arm-linux-androideabi\n@@ -76,8 +73,8 @@ pub struct config {\n     // Extra parameter to run test sute on arm-linux-androideabi\n     adb_test_dir: ~str,\n \n-    // check if can be run or not\n-    flag_runnable: bool,\n+    // status whether android device available or not\n+    adb_device_status: bool,\n \n     // Explain what's going on\n     verbose: bool"}, {"sha": "3fb6937819ee39b0f0fe883a9493895521f5b978", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5681571f6c3480ececdefd07eb313baa6c13ae22/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5681571f6c3480ececdefd07eb313baa6c13ae22/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=5681571f6c3480ececdefd07eb313baa6c13ae22", "patch": "@@ -61,7 +61,6 @@ pub fn parse_config(args: ~[~str]) -> config {\n           getopts::optopt(~\"logfile\"),\n           getopts::optflag(~\"jit\"),\n           getopts::optflag(~\"newrt\"),\n-          getopts::optopt(~\"host\"),\n           getopts::optopt(~\"target\"),\n           getopts::optopt(~\"adb-path\"),\n           getopts::optopt(~\"adb-test-dir\")\n@@ -98,25 +97,18 @@ pub fn parse_config(args: ~[~str]) -> config {\n         rustcflags: getopts::opt_maybe_str(matches, ~\"rustcflags\"),\n         jit: getopts::opt_present(matches, ~\"jit\"),\n         newrt: getopts::opt_present(matches, ~\"newrt\"),\n-        host: opt_str(getopts::opt_maybe_str(matches, ~\"host\")),\n         target: opt_str(getopts::opt_maybe_str(matches, ~\"target\")),\n         adb_path: opt_str(getopts::opt_maybe_str(matches, ~\"adb-path\")),\n         adb_test_dir: opt_str(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")),\n-        flag_runnable:\n-            if (getopts::opt_maybe_str(matches, ~\"host\") ==\n-                getopts::opt_maybe_str(matches, ~\"target\")) { true }\n-            else {\n-                match getopts::opt_maybe_str(matches, ~\"target\") {\n-                    Some(~\"arm-linux-androideabi\") => {\n-                        if (opt_str(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")) !=\n-                            ~\"(none)\" &&\n-                            opt_str(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")) !=\n-                            ~\"\") { true }\n-                        else { false }\n-                    }\n-                    _ => { true }\n-                }\n-            },\n+        adb_device_status:\n+            if (opt_str(getopts::opt_maybe_str(matches, ~\"target\")) ==\n+                ~\"arm-linux-androideabi\") {\n+                if (opt_str(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")) !=\n+                    ~\"(none)\" &&\n+                    opt_str(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")) !=\n+                    ~\"\") { true }\n+                else { false }\n+            } else { false },\n         verbose: getopts::opt_present(matches, ~\"verbose\")\n     }\n }\n@@ -137,11 +129,10 @@ pub fn log_config(config: config) {\n     logv(c, fmt!(\"rustcflags: %s\", opt_str(config.rustcflags)));\n     logv(c, fmt!(\"jit: %b\", config.jit));\n     logv(c, fmt!(\"newrt: %b\", config.newrt));\n-    logv(c, fmt!(\"host: %s\", config.host));\n     logv(c, fmt!(\"target: %s\", config.target));\n     logv(c, fmt!(\"adb_path: %s\", config.adb_path));\n     logv(c, fmt!(\"adb_test_dir: %s\", config.adb_test_dir));\n-    logv(c, fmt!(\"flag_runnable: %b\", config.flag_runnable));\n+    logv(c, fmt!(\"adb_device_status: %b\", config.adb_device_status));\n     logv(c, fmt!(\"verbose: %b\", config.verbose));\n     logv(c, fmt!(\"\\n\"));\n }"}, {"sha": "07b439174be33e82a1cb0f48b4c2368a9e676f1c", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 131, "deletions": 119, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/5681571f6c3480ececdefd07eb313baa6c13ae22/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5681571f6c3480ececdefd07eb313baa6c13ae22/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=5681571f6c3480ececdefd07eb313baa6c13ae22", "patch": "@@ -77,18 +77,19 @@ fn run_rfail_test(config: config, props: TestProps, testfile: &Path) {\n         fatal_ProcRes(~\"run-fail test isn't valgrind-clean!\", ProcRes);\n     }\n \n-    if (config.host == config.target) {\n-        check_correct_failure_status(ProcRes);\n-        check_error_patterns(props, testfile, ProcRes);\n-    } else {\n-        match (config.target, config.flag_runnable) {\n+    match config.target {\n \n-            (~\"arm-linux-androideabi\", false) => { }\n-            _ => {\n+        ~\"arm-linux-androideabi\" => {\n+            if (config.adb_device_status) {\n                 check_correct_failure_status(ProcRes);\n                 check_error_patterns(props, testfile, ProcRes);\n             }\n         }\n+\n+        _=> {\n+            check_correct_failure_status(ProcRes);\n+            check_error_patterns(props, testfile, ProcRes);\n+        }\n     }\n }\n \n@@ -494,99 +495,21 @@ fn exec_compiled_test(config: config, props: TestProps,\n         props.exec_env\n     };\n \n-    if (config.host == config.target) {\n-        compose_and_run(config, testfile,\n-                        make_run_args(config, props, testfile),\n-                        env,\n-                        config.run_lib_path, None)\n-    } else {\n-        let args = make_run_args(config, props, testfile);\n-        let cmdline = make_cmdline(~\"\", args.prog, args.args);\n-\n-        match (config.target, config.flag_runnable) {\n-\n-            (~\"arm-linux-androideabi\", true) => {\n-\n-                // get bare program string\n-                let mut tvec = ~[];\n-                let tstr = args.prog;\n-                for str::each_split_char(tstr, '/') |ts| { tvec.push(ts.to_owned()) }\n-                let prog_short = tvec.pop();\n-\n-                // copy to target\n-                let copy_result = procsrv::run(~\"\", config.adb_path,\n-                    ~[~\"push\", args.prog, config.adb_test_dir],\n-                    ~[(~\"\",~\"\")], Some(~\"\"));\n-\n-                if config.verbose {\n-                    io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n-                        config.target, args.prog,\n-                        copy_result.out, copy_result.err));\n-                }\n-\n-                // execute program\n-                logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n-\n-                // NOTE: adb shell dose not forward stdout and stderr of internal result\n-                //       to stdout and stderr seperately but to stdout only\n-                let mut newargs_out = ~[];\n-                let mut newargs_err = ~[];\n-                let subargs = args.args;\n-                newargs_out.push(~\"shell\");\n-                newargs_err.push(~\"shell\");\n-\n-                let mut newcmd_out = ~\"\";\n-                let mut newcmd_err = ~\"\";\n-\n-                newcmd_out.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n-                    config.adb_test_dir, config.adb_test_dir, prog_short));\n-\n-                newcmd_err.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n-                    config.adb_test_dir, config.adb_test_dir, prog_short));\n-\n-                for vec::each(subargs) |tv| {\n-                    newcmd_out.push_str(\" \");\n-                    newcmd_err.push_str(\" \");\n-                    newcmd_out.push_str(tv.to_owned());\n-                    newcmd_err.push_str(tv.to_owned());\n-                }\n-\n-                newcmd_out.push_str(\" 2>/dev/null\");\n-                newcmd_err.push_str(\" 1>/dev/null\");\n-\n-                newargs_out.push(newcmd_out);\n-                newargs_err.push(newcmd_err);\n-\n-                let exe_result_out = procsrv::run(~\"\", config.adb_path,\n-                    newargs_out, ~[(~\"\",~\"\")], Some(~\"\"));\n-                let exe_result_err = procsrv::run(~\"\", config.adb_path,\n-                    newargs_err, ~[(~\"\",~\"\")], Some(~\"\"));\n+    match config.target {\n \n-                dump_output(config, testfile, exe_result_out.out, exe_result_err.out);\n-\n-                match exe_result_err.out {\n-                    ~\"\" => ProcRes {status: exe_result_out.status, stdout: exe_result_out.out,\n-                        stderr: exe_result_err.out, cmdline: cmdline },\n-                    _   => ProcRes {status: 101, stdout: exe_result_out.out,\n-                        stderr: exe_result_err.out, cmdline: cmdline }\n-                }\n-            }\n-\n-            (~\"arm-linux-androideabi\", false) => {\n-                match config.mode {\n-                    mode_run_fail => ProcRes {status: 101, stdout: ~\"\",\n-                                             stderr: ~\"\", cmdline: cmdline},\n-                    _             => ProcRes {status: 0, stdout: ~\"\",\n-                                             stderr: ~\"\", cmdline: cmdline}\n-                }\n+        ~\"arm-linux-androideabi\" => {\n+            if (config.adb_device_status) {\n+                _arm_exec_compiled_test(config, props, testfile)\n+            } else {\n+                _dummy_exec_compiled_test(config, props, testfile)\n             }\n+        }\n \n-            _=> {\n-                compose_and_run(config, testfile,\n-                                make_run_args(config, props, testfile),\n-                                env,\n-                                config.run_lib_path, None)\n-            }\n+        _=> {\n+            compose_and_run(config, testfile,\n+                            make_run_args(config, props, testfile),\n+                            env,\n+                            config.run_lib_path, None)\n         }\n     }\n }\n@@ -618,32 +541,16 @@ fn compose_and_run_compiler(\n                      abs_ab.to_str()),\n                 auxres);\n         }\n-        if (config.host != config.target)\n-        {\n-            match (config.target, config.flag_runnable) {\n-\n-                (~\"arm-linux-androideabi\", true) => {\n-\n-                    let tstr = aux_output_dir_name(config, testfile).to_str();\n-\n-                    for os::list_dir_path(&Path(tstr)).each |file| {\n \n-                        if (file.filetype() == Some(~\".so\")) {\n+        match config.target {\n \n-                            let copy_result = procsrv::run(~\"\", config.adb_path,\n-                                ~[~\"push\", file.to_str(), config.adb_test_dir],\n-                                ~[(~\"\",~\"\")], Some(~\"\"));\n-\n-                            if config.verbose {\n-                                io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n-                                    config.target, file.to_str(),\n-                                    copy_result.out, copy_result.err));\n-                            }\n-                        }\n-                    }\n+            ~\"arm-linux-androideabi\" => {\n+                if (config.adb_device_status) {\n+                    _arm_push_aux_shared_library(config, testfile);\n                 }\n-                _=> ()\n             }\n+\n+            _=> { }\n         }\n     }\n \n@@ -829,3 +736,108 @@ stderr:\\n\\\n     io::stdout().write_str(msg);\n     fail!();\n }\n+\n+fn _arm_exec_compiled_test(config: config, props: TestProps,\n+                      testfile: &Path) -> ProcRes {\n+\n+    let args = make_run_args(config, props, testfile);\n+    let cmdline = make_cmdline(~\"\", args.prog, args.args);\n+\n+    // get bare program string\n+    let mut tvec = ~[];\n+    let tstr = args.prog;\n+    for str::each_split_char(tstr, '/') |ts| { tvec.push(ts.to_owned()) }\n+    let prog_short = tvec.pop();\n+\n+    // copy to target\n+    let copy_result = procsrv::run(~\"\", config.adb_path,\n+        ~[~\"push\", args.prog, config.adb_test_dir],\n+        ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+    if config.verbose {\n+        io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n+            config.target, args.prog,\n+            copy_result.out, copy_result.err));\n+    }\n+\n+    // execute program\n+    logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n+\n+    // adb shell dose not forward stdout and stderr of internal result\n+    // to stdout and stderr seperately but to stdout only\n+    let mut newargs_out = ~[];\n+    let mut newargs_err = ~[];\n+    let subargs = args.args;\n+    newargs_out.push(~\"shell\");\n+    newargs_err.push(~\"shell\");\n+\n+    let mut newcmd_out = ~\"\";\n+    let mut newcmd_err = ~\"\";\n+\n+    newcmd_out.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n+        config.adb_test_dir, config.adb_test_dir, prog_short));\n+\n+    newcmd_err.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n+        config.adb_test_dir, config.adb_test_dir, prog_short));\n+\n+    for vec::each(subargs) |tv| {\n+        newcmd_out.push_str(\" \");\n+        newcmd_err.push_str(\" \");\n+        newcmd_out.push_str(tv.to_owned());\n+        newcmd_err.push_str(tv.to_owned());\n+    }\n+\n+    newcmd_out.push_str(\" 2>/dev/null\");\n+    newcmd_err.push_str(\" 1>/dev/null\");\n+\n+    newargs_out.push(newcmd_out);\n+    newargs_err.push(newcmd_err);\n+\n+    let exe_result_out = procsrv::run(~\"\", config.adb_path,\n+        newargs_out, ~[(~\"\",~\"\")], Some(~\"\"));\n+    let exe_result_err = procsrv::run(~\"\", config.adb_path,\n+        newargs_err, ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+    dump_output(config, testfile, exe_result_out.out, exe_result_err.out);\n+\n+    match exe_result_err.out {\n+        ~\"\" => ProcRes {status: exe_result_out.status, stdout: exe_result_out.out,\n+            stderr: exe_result_err.out, cmdline: cmdline },\n+        _   => ProcRes {status: 101, stdout: exe_result_out.out,\n+            stderr: exe_result_err.out, cmdline: cmdline }\n+    }\n+}\n+\n+fn _dummy_exec_compiled_test(config: config, props: TestProps,\n+                      testfile: &Path) -> ProcRes {\n+\n+    let args = make_run_args(config, props, testfile);\n+    let cmdline = make_cmdline(~\"\", args.prog, args.args);\n+\n+    match config.mode {\n+        mode_run_fail => ProcRes {status: 101, stdout: ~\"\",\n+                                 stderr: ~\"\", cmdline: cmdline},\n+        _             => ProcRes {status: 0, stdout: ~\"\",\n+                                 stderr: ~\"\", cmdline: cmdline}\n+    }\n+}\n+\n+fn _arm_push_aux_shared_library(config: config, testfile: &Path) {\n+    let tstr = aux_output_dir_name(config, testfile).to_str();\n+\n+    for os::list_dir_path(&Path(tstr)).each |file| {\n+\n+        if (file.filetype() == Some(~\".so\")) {\n+\n+            let copy_result = procsrv::run(~\"\", config.adb_path,\n+                ~[~\"push\", file.to_str(), config.adb_test_dir],\n+                ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+            if config.verbose {\n+                io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n+                    config.target, file.to_str(),\n+                    copy_result.out, copy_result.err));\n+            }\n+        }\n+    }\n+}"}]}