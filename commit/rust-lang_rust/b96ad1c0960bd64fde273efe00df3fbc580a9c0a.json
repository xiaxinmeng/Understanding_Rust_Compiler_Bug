{"sha": "b96ad1c0960bd64fde273efe00df3fbc580a9c0a", "node_id": "C_kwDOAAsO6NoAKGI5NmFkMWMwOTYwYmQ2NGZkZTI3M2VmZTAwZGYzZmJjNTgwYTljMGE", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-11-02T05:47:48Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-11-02T05:47:48Z"}, "message": "return const_error when ty has errors", "tree": {"sha": "68748b0ca3c7ff27702bfa7bb9689d24b4c8bc81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68748b0ca3c7ff27702bfa7bb9689d24b4c8bc81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96ad1c0960bd64fde273efe00df3fbc580a9c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96ad1c0960bd64fde273efe00df3fbc580a9c0a", "html_url": "https://github.com/rust-lang/rust/commit/b96ad1c0960bd64fde273efe00df3fbc580a9c0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96ad1c0960bd64fde273efe00df3fbc580a9c0a/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b55ac39fa633d0983fad014469e1036669bf28", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b55ac39fa633d0983fad014469e1036669bf28", "html_url": "https://github.com/rust-lang/rust/commit/33b55ac39fa633d0983fad014469e1036669bf28"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "21e6ab13a5950da3c68ab72eef5d674507672f68", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b96ad1c0960bd64fde273efe00df3fbc580a9c0a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96ad1c0960bd64fde273efe00df3fbc580a9c0a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=b96ad1c0960bd64fde273efe00df3fbc580a9c0a", "patch": "@@ -501,6 +501,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n+                        if ty.references_error() {\n+                            return tcx.const_error(ty).into();\n+                        }\n                         if !infer_args && has_default {\n                             tcx.bound_const_param_default(param.def_id)\n                                 .subst(tcx, substs.unwrap())"}, {"sha": "ea3cac605b156a403543b8d76657f226fe072df9", "filename": "src/test/ui/consts/issue-103790.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b96ad1c0960bd64fde273efe00df3fbc580a9c0a/src%2Ftest%2Fui%2Fconsts%2Fissue-103790.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96ad1c0960bd64fde273efe00df3fbc580a9c0a/src%2Ftest%2Fui%2Fconsts%2Fissue-103790.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-103790.rs?ref=b96ad1c0960bd64fde273efe00df3fbc580a9c0a", "patch": "@@ -0,0 +1,10 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+struct S<const S: (), const S: S = { S }>;\n+//~^ ERROR the name `S` is already used for a generic parameter in this item's generic parameters\n+//~| ERROR missing generics for struct `S`\n+//~| ERROR cycle detected when computing type of `S::S`\n+//~| ERROR cycle detected when computing type of `S`\n+\n+fn main() {}"}, {"sha": "41b0816dc32af8dd4b7fc8a6d52d443b0ed0a200", "filename": "src/test/ui/consts/issue-103790.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b96ad1c0960bd64fde273efe00df3fbc580a9c0a/src%2Ftest%2Fui%2Fconsts%2Fissue-103790.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b96ad1c0960bd64fde273efe00df3fbc580a9c0a/src%2Ftest%2Fui%2Fconsts%2Fissue-103790.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-103790.stderr?ref=b96ad1c0960bd64fde273efe00df3fbc580a9c0a", "patch": "@@ -0,0 +1,65 @@\n+error[E0403]: the name `S` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/issue-103790.rs:4:29\n+   |\n+LL | struct S<const S: (), const S: S = { S }>;\n+   |                -            ^ already used\n+   |                |\n+   |                first use of `S`\n+\n+error[E0107]: missing generics for struct `S`\n+  --> $DIR/issue-103790.rs:4:32\n+   |\n+LL | struct S<const S: (), const S: S = { S }>;\n+   |                                ^ expected at least 1 generic argument\n+   |\n+note: struct defined here, with at least 1 generic parameter: `S`\n+  --> $DIR/issue-103790.rs:4:8\n+   |\n+LL | struct S<const S: (), const S: S = { S }>;\n+   |        ^ -----------\n+help: add missing generic argument\n+   |\n+LL | struct S<const S: (), const S: S<S> = { S }>;\n+   |                                ~~~~\n+\n+error[E0391]: cycle detected when computing type of `S::S`\n+  --> $DIR/issue-103790.rs:4:32\n+   |\n+LL | struct S<const S: (), const S: S = { S }>;\n+   |                                ^\n+   |\n+   = note: ...which immediately requires computing type of `S::S` again\n+note: cycle used when computing type of `S`\n+  --> $DIR/issue-103790.rs:4:1\n+   |\n+LL | struct S<const S: (), const S: S = { S }>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0391]: cycle detected when computing type of `S`\n+  --> $DIR/issue-103790.rs:4:1\n+   |\n+LL | struct S<const S: (), const S: S = { S }>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing type of `S::S`...\n+  --> $DIR/issue-103790.rs:4:32\n+   |\n+LL | struct S<const S: (), const S: S = { S }>;\n+   |                                ^\n+   = note: ...which again requires computing type of `S`, completing the cycle\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/issue-103790.rs:1:1\n+   |\n+LL | / #![feature(generic_const_exprs)]\n+LL | | #![allow(incomplete_features)]\n+LL | |\n+LL | | struct S<const S: (), const S: S = { S }>;\n+...  |\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0107, E0391, E0403.\n+For more information about an error, try `rustc --explain E0107`."}]}