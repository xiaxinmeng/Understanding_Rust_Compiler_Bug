{"sha": "a563e1191841160e0399e24da14fe731b1fa463c", "node_id": "C_kwDOAAsO6NoAKGE1NjNlMTE5MTg0MTE2MGUwMzk5ZTI0ZGExNGZlNzMxYjFmYTQ2M2M", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-01T14:19:47Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-20T17:18:13Z"}, "message": "Update Cranelift to 0.93.0\n\nCloses #1352", "tree": {"sha": "718d7d7769cd3f8f34d02c5a1ce54b33877a48d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/718d7d7769cd3f8f34d02c5a1ce54b33877a48d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a563e1191841160e0399e24da14fe731b1fa463c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a563e1191841160e0399e24da14fe731b1fa463c", "html_url": "https://github.com/rust-lang/rust/commit/a563e1191841160e0399e24da14fe731b1fa463c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a563e1191841160e0399e24da14fe731b1fa463c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c3c7207b78c07b195d17868963b0ae1e10d95d", "url": "https://api.github.com/repos/rust-lang/rust/commits/10c3c7207b78c07b195d17868963b0ae1e10d95d", "html_url": "https://github.com/rust-lang/rust/commit/10c3c7207b78c07b195d17868963b0ae1e10d95d"}], "stats": {"total": 338, "additions": 40, "deletions": 298}, "files": [{"sha": "4762d6dee158a6bfcf8679c10786ef90ce57bedc", "filename": "Cargo.lock", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a563e1191841160e0399e24da14fe731b1fa463c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a563e1191841160e0399e24da14fe731b1fa463c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a563e1191841160e0399e24da14fe731b1fa463c", "patch": "@@ -57,18 +57,18 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2f3d54eab028f5805ae3b26fd60eca3f3a9cfb76b989d9bab173be3f61356cc3\"\n+checksum = \"91b18cf92869a6ae85cde3af4bc4beb6154efa8adef03b18db2ad413d5bce3a2\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2be1d5f2c3cca1efb691844bc1988b89c77291f13f778499a3f3c0cf49c0ed61\"\n+checksum = \"567d9f6e919bac076f39b902a072686eaf9e6d015baa34d10a61b85105b7af59\"\n dependencies = [\n  \"arrayvec\",\n  \"bumpalo\",\n@@ -87,30 +87,30 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3f9b1b1089750ce4005893af7ee00bb08a2cf1c9779999c0f7164cbc8ad2e0d2\"\n+checksum = \"1e72b2d5ec8917b2971fe83850187373d0a186db4748a7c23a5f48691b8d92bb\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cc5fbaec51de47297fd7304986fd53c8c0030abbe69728a60d72e1c63559318d\"\n+checksum = \"3461c0e0c2ebbeb92533aacb27e219289f60dc84134ef34fbf2d77c9eddf07ef\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dab984c94593f876090fae92e984bdcc74d9b1acf740ab5f79036001c65cba13\"\n+checksum = \"af684f7f7b01427b1942c7102673322a51b9d6f261e9663dc5e5595786775531\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6e0cb3102d21a2fe5f3210af608748ddd0cd09825ac12d42dc56ed5ed8725fe0\"\n+checksum = \"7d361ed0373cf5f086b49c499aa72227b646a64f899f32e34312f97c0fadff75\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -120,15 +120,15 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-isle\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"72101dd1f441d629735143c41e00b3428f9267738176983ef588ff43382af0a0\"\n+checksum = \"cef4f8f3984d772c199a48896d2fb766f96301bf71b371e03a2b99f4f3b7b931\"\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6557f8ce44d498777f2495aa58d9692a4a37d6f84aa445750d666cef770b6a5c\"\n+checksum = \"9c9909222db472fcc98d9e4e7192fa9d064dac63a3fa657df8c6daae86fb2604\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -145,19 +145,19 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"88807e1c0c47ec02fe433333ccbe56b480425418b1470e333205e11650697d72\"\n+checksum = \"68689b83e52e605ba48652882d3fccc2e2e136abf139eb64ae667888ba0d52f8\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c22b0d9fcbe3fc5a1af9e7021b44ce42b930bcefac446ce22e02e8f9a0d67120\"\n+checksum = \"f98e4e99a353703475d5acb402b9c13482d41d8a4008b352559bd560afb90363\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"libc\",\n@@ -166,9 +166,9 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.92.0\"\n+version = \"0.93.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"341375758d7c3fedc0b5315f552e6f0feac46baf87c450a15e9455ef47c2b261\"\n+checksum = \"b7a006ce1d8dd11df67567d8673e5920f3a56441812aed52a007ffce8f1b20e9\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -333,6 +333,7 @@ dependencies = [\n  \"cranelift-frontend\",\n  \"cranelift-jit\",\n  \"cranelift-module\",\n+ \"cranelift-native\",\n  \"cranelift-object\",\n  \"gimli\",\n  \"indexmap\",\n@@ -381,9 +382,9 @@ checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n \n [[package]]\n name = \"wasmtime-jit-icache-coherence\"\n-version = \"5.0.0\"\n+version = \"6.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"08fcba5ebd96da2a9f0747ab6337fe9788adfb3f63fa2c180520d665562d257e\"\n+checksum = \"ec1fd0f0dd79e7cc0f55b102e320d7c77ab76cd272008a8fd98e25b5777e2636\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\","}, {"sha": "0e64fba6bec8db017c3b5f85d2918404a4fc96d1", "filename": "Cargo.toml", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a563e1191841160e0399e24da14fe731b1fa463c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a563e1191841160e0399e24da14fe731b1fa463c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=a563e1191841160e0399e24da14fe731b1fa463c", "patch": "@@ -15,14 +15,12 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { version = \"0.92\", features = [\"unwind\", \"all-arch\"] }\n-cranelift-frontend = { version = \"0.92\" }\n-cranelift-module = { version = \"0.92\" }\n-# NOTE vendored as src/cranelift_native.rs\n-# FIXME revert back to the external crate with Cranelift 0.93\n-#cranelift-native = { version = \"0.92\" }\n-cranelift-jit = { version = \"0.92\", optional = true }\n-cranelift-object = { version = \"0.92\" }\n+cranelift-codegen = { version = \"0.93\", features = [\"unwind\", \"all-arch\"] }\n+cranelift-frontend = { version = \"0.93\" }\n+cranelift-module = { version = \"0.93\" }\n+cranelift-native = { version = \"0.93\" }\n+cranelift-jit = { version = \"0.93\", optional = true }\n+cranelift-object = { version = \"0.93\" }\n target-lexicon = \"0.12.0\"\n gimli = { version = \"0.26.0\", default-features = false, features = [\"write\"]}\n object = { version = \"0.29.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }"}, {"sha": "898b94ba4c807533416c612624f9825e42901901", "filename": "src/base.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a563e1191841160e0399e24da14fe731b1fa463c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563e1191841160e0399e24da14fe731b1fa463c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a563e1191841160e0399e24da14fe731b1fa463c", "patch": "@@ -365,11 +365,10 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 fx.bcx.set_cold_block(failure);\n \n                 if *expected {\n-                    fx.bcx.ins().brz(cond, failure, &[]);\n+                    fx.bcx.ins().brif(cond, target, &[], failure, &[]);\n                 } else {\n-                    fx.bcx.ins().brnz(cond, failure, &[]);\n+                    fx.bcx.ins().brif(cond, failure, &[], target, &[]);\n                 };\n-                fx.bcx.ins().jump(target, &[]);\n \n                 fx.bcx.switch_to_block(failure);\n                 fx.bcx.ins().nop();\n@@ -425,11 +424,9 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                         }\n                     } else {\n                         if test_zero {\n-                            fx.bcx.ins().brz(discr, then_block, &[]);\n-                            fx.bcx.ins().jump(else_block, &[]);\n+                            fx.bcx.ins().brif(discr, else_block, &[], then_block, &[]);\n                         } else {\n-                            fx.bcx.ins().brnz(discr, then_block, &[]);\n-                            fx.bcx.ins().jump(else_block, &[]);\n+                            fx.bcx.ins().brif(discr, then_block, &[], else_block, &[]);\n                         }\n                     }\n                 } else {\n@@ -751,8 +748,7 @@ fn codegen_stmt<'tcx>(\n \n                         fx.bcx.switch_to_block(loop_block);\n                         let done = fx.bcx.ins().icmp_imm(IntCC::Equal, index, times as i64);\n-                        fx.bcx.ins().brnz(done, done_block, &[]);\n-                        fx.bcx.ins().jump(loop_block2, &[]);\n+                        fx.bcx.ins().brif(done, done_block, &[], loop_block2, &[]);\n \n                         fx.bcx.switch_to_block(loop_block2);\n                         let to = lval.place_index(fx, index);"}, {"sha": "6c4efca442448a700d77e946edb926ab02e8ced9", "filename": "src/cranelift_native.rs", "status": "removed", "additions": 0, "deletions": 248, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/10c3c7207b78c07b195d17868963b0ae1e10d95d/src%2Fcranelift_native.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c3c7207b78c07b195d17868963b0ae1e10d95d/src%2Fcranelift_native.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcranelift_native.rs?ref=10c3c7207b78c07b195d17868963b0ae1e10d95d", "patch": "@@ -1,248 +0,0 @@\n-// Vendored from https://github.com/bytecodealliance/wasmtime/blob/b58a197d33f044193c3d608010f5e6ec394ac07e/cranelift/native/src/lib.rs\n-// which is licensed as\n-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n-// unlike rustc_codegen_cranelift itself. Also applies a small change to remove #![cfg_attr] that\n-// rust's CI complains about and to fix formatting to match rustc.\n-// FIXME revert back to the external crate with Cranelift 0.93\n-#![allow(warnings)]\n-\n-//! Performs autodetection of the host for the purposes of running\n-//! Cranelift to generate code to run on the same machine.\n-\n-#![deny(missing_docs, trivial_numeric_casts, unused_extern_crates, unstable_features)]\n-#![warn(unused_import_braces)]\n-\n-use cranelift_codegen::isa;\n-use target_lexicon::Triple;\n-\n-/// Return an `isa` builder configured for the current host\n-/// machine, or `Err(())` if the host machine is not supported\n-/// in the current configuration.\n-pub fn builder() -> Result<isa::Builder, &'static str> {\n-    builder_with_options(true)\n-}\n-\n-/// Return an `isa` builder configured for the current host\n-/// machine, or `Err(())` if the host machine is not supported\n-/// in the current configuration.\n-///\n-/// Selects the given backend variant specifically; this is\n-/// useful when more than oen backend exists for a given target\n-/// (e.g., on x86-64).\n-pub fn builder_with_options(infer_native_flags: bool) -> Result<isa::Builder, &'static str> {\n-    let mut isa_builder = isa::lookup(Triple::host()).map_err(|err| match err {\n-        isa::LookupError::SupportDisabled => \"support for architecture disabled at compile time\",\n-        isa::LookupError::Unsupported => \"unsupported architecture\",\n-    })?;\n-\n-    #[cfg(target_arch = \"x86_64\")]\n-    {\n-        use cranelift_codegen::settings::Configurable;\n-\n-        if !std::is_x86_feature_detected!(\"sse2\") {\n-            return Err(\"x86 support requires SSE2\");\n-        }\n-\n-        if !infer_native_flags {\n-            return Ok(isa_builder);\n-        }\n-\n-        // These are temporarily enabled by default (see #3810 for\n-        // more) so that a default-constructed `Flags` can work with\n-        // default Wasmtime features. Otherwise, the user must\n-        // explicitly use native flags or turn these on when on x86-64\n-        // platforms to avoid a configuration panic. In order for the\n-        // \"enable if detected\" logic below to work, we must turn them\n-        // *off* (differing from the default) and then re-enable below\n-        // if present.\n-        isa_builder.set(\"has_sse3\", \"false\").unwrap();\n-        isa_builder.set(\"has_ssse3\", \"false\").unwrap();\n-        isa_builder.set(\"has_sse41\", \"false\").unwrap();\n-        isa_builder.set(\"has_sse42\", \"false\").unwrap();\n-\n-        if std::is_x86_feature_detected!(\"sse3\") {\n-            isa_builder.enable(\"has_sse3\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"ssse3\") {\n-            isa_builder.enable(\"has_ssse3\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"sse4.1\") {\n-            isa_builder.enable(\"has_sse41\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"sse4.2\") {\n-            isa_builder.enable(\"has_sse42\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"popcnt\") {\n-            isa_builder.enable(\"has_popcnt\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"avx\") {\n-            isa_builder.enable(\"has_avx\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"avx2\") {\n-            isa_builder.enable(\"has_avx2\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"fma\") {\n-            isa_builder.enable(\"has_fma\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"bmi1\") {\n-            isa_builder.enable(\"has_bmi1\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"bmi2\") {\n-            isa_builder.enable(\"has_bmi2\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"avx512bitalg\") {\n-            isa_builder.enable(\"has_avx512bitalg\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"avx512dq\") {\n-            isa_builder.enable(\"has_avx512dq\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"avx512f\") {\n-            isa_builder.enable(\"has_avx512f\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"avx512vl\") {\n-            isa_builder.enable(\"has_avx512vl\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"avx512vbmi\") {\n-            isa_builder.enable(\"has_avx512vbmi\").unwrap();\n-        }\n-        if std::is_x86_feature_detected!(\"lzcnt\") {\n-            isa_builder.enable(\"has_lzcnt\").unwrap();\n-        }\n-    }\n-\n-    #[cfg(target_arch = \"aarch64\")]\n-    {\n-        use cranelift_codegen::settings::Configurable;\n-\n-        if !infer_native_flags {\n-            return Ok(isa_builder);\n-        }\n-\n-        if std::arch::is_aarch64_feature_detected!(\"lse\") {\n-            isa_builder.enable(\"has_lse\").unwrap();\n-        }\n-\n-        if std::arch::is_aarch64_feature_detected!(\"paca\") {\n-            isa_builder.enable(\"has_pauth\").unwrap();\n-        }\n-\n-        if cfg!(target_os = \"macos\") {\n-            // Pointer authentication is always available on Apple Silicon.\n-            isa_builder.enable(\"sign_return_address\").unwrap();\n-            // macOS enforces the use of the B key for return addresses.\n-            isa_builder.enable(\"sign_return_address_with_bkey\").unwrap();\n-        }\n-    }\n-\n-    // There is no is_s390x_feature_detected macro yet, so for now\n-    // we use getauxval from the libc crate directly.\n-    #[cfg(all(target_arch = \"s390x\", target_os = \"linux\"))]\n-    {\n-        use cranelift_codegen::settings::Configurable;\n-\n-        if !infer_native_flags {\n-            return Ok(isa_builder);\n-        }\n-\n-        let v = unsafe { libc::getauxval(libc::AT_HWCAP) };\n-        const HWCAP_S390X_VXRS_EXT2: libc::c_ulong = 32768;\n-        if (v & HWCAP_S390X_VXRS_EXT2) != 0 {\n-            isa_builder.enable(\"has_vxrs_ext2\").unwrap();\n-            // There is no separate HWCAP bit for mie2, so assume\n-            // that any machine with vxrs_ext2 also has mie2.\n-            isa_builder.enable(\"has_mie2\").unwrap();\n-        }\n-    }\n-\n-    // `is_riscv_feature_detected` is nightly only for now, use\n-    // getauxval from the libc crate directly as a temporary measure.\n-    #[cfg(all(target_arch = \"riscv64\", target_os = \"linux\"))]\n-    {\n-        use cranelift_codegen::settings::Configurable;\n-\n-        if !infer_native_flags {\n-            return Ok(isa_builder);\n-        }\n-\n-        let v = unsafe { libc::getauxval(libc::AT_HWCAP) };\n-\n-        const HWCAP_RISCV_EXT_A: libc::c_ulong = 1 << (b'a' - b'a');\n-        const HWCAP_RISCV_EXT_C: libc::c_ulong = 1 << (b'c' - b'a');\n-        const HWCAP_RISCV_EXT_D: libc::c_ulong = 1 << (b'd' - b'a');\n-        const HWCAP_RISCV_EXT_F: libc::c_ulong = 1 << (b'f' - b'a');\n-        const HWCAP_RISCV_EXT_M: libc::c_ulong = 1 << (b'm' - b'a');\n-        const HWCAP_RISCV_EXT_V: libc::c_ulong = 1 << (b'v' - b'a');\n-\n-        if (v & HWCAP_RISCV_EXT_A) != 0 {\n-            isa_builder.enable(\"has_a\").unwrap();\n-        }\n-\n-        if (v & HWCAP_RISCV_EXT_C) != 0 {\n-            isa_builder.enable(\"has_c\").unwrap();\n-        }\n-\n-        if (v & HWCAP_RISCV_EXT_D) != 0 {\n-            isa_builder.enable(\"has_d\").unwrap();\n-        }\n-\n-        if (v & HWCAP_RISCV_EXT_F) != 0 {\n-            isa_builder.enable(\"has_f\").unwrap();\n-\n-            // TODO: There doesn't seem to be a bit associated with this extension\n-            // rust enables it with the `f` extension:\n-            // https://github.com/rust-lang/stdarch/blob/790411f93c4b5eada3c23abb4c9a063fb0b24d99/crates/std_detect/src/detect/os/linux/riscv.rs#L43\n-            isa_builder.enable(\"has_zicsr\").unwrap();\n-        }\n-\n-        if (v & HWCAP_RISCV_EXT_M) != 0 {\n-            isa_builder.enable(\"has_m\").unwrap();\n-        }\n-\n-        if (v & HWCAP_RISCV_EXT_V) != 0 {\n-            isa_builder.enable(\"has_v\").unwrap();\n-        }\n-\n-        // TODO: ZiFencei does not have a bit associated with it\n-        // TODO: Zbkb does not have a bit associated with it\n-    }\n-\n-    // squelch warnings about unused mut/variables on some platforms.\n-    drop(&mut isa_builder);\n-    drop(infer_native_flags);\n-\n-    Ok(isa_builder)\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::builder;\n-    use cranelift_codegen::isa::CallConv;\n-    use cranelift_codegen::settings;\n-\n-    #[test]\n-    fn test() {\n-        if let Ok(isa_builder) = builder() {\n-            let flag_builder = settings::builder();\n-            let isa = isa_builder.finish(settings::Flags::new(flag_builder)).unwrap();\n-\n-            if cfg!(all(target_os = \"macos\", target_arch = \"aarch64\")) {\n-                assert_eq!(isa.default_call_conv(), CallConv::AppleAarch64);\n-            } else if cfg!(any(unix, target_os = \"nebulet\")) {\n-                assert_eq!(isa.default_call_conv(), CallConv::SystemV);\n-            } else if cfg!(windows) {\n-                assert_eq!(isa.default_call_conv(), CallConv::WindowsFastcall);\n-            }\n-\n-            if cfg!(target_pointer_width = \"64\") {\n-                assert_eq!(isa.pointer_bits(), 64);\n-            } else if cfg!(target_pointer_width = \"32\") {\n-                assert_eq!(isa.pointer_bits(), 32);\n-            } else if cfg!(target_pointer_width = \"16\") {\n-                assert_eq!(isa.pointer_bits(), 16);\n-            }\n-        }\n-    }\n-}\n-\n-/// Version number of this crate.\n-pub const VERSION: &str = env!(\"CARGO_PKG_VERSION\");"}, {"sha": "034b4e8072cc588787b76fcfc5add316217c747f", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a563e1191841160e0399e24da14fe731b1fa463c/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563e1191841160e0399e24da14fe731b1fa463c/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=a563e1191841160e0399e24da14fe731b1fa463c", "patch": "@@ -279,9 +279,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 fx.tcx.sess.span_warn(span, \"Index argument for `simd_extract` is not a constant\");\n                 let trap_block = fx.bcx.create_block();\n                 let true_ = fx.bcx.ins().iconst(types::I8, 1);\n-                fx.bcx.ins().brnz(true_, trap_block, &[]);\n                 let ret_block = fx.get_block(target);\n-                fx.bcx.ins().jump(ret_block, &[]);\n+                fx.bcx.ins().brif(true_, trap_block, &[], ret_block, &[]);\n                 fx.bcx.switch_to_block(trap_block);\n                 crate::trap::trap_unimplemented(\n                     fx,\n@@ -825,8 +824,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let next = fx.bcx.create_block();\n                 let res_lane = fx.bcx.append_block_param(next, lane_clif_ty);\n \n-                fx.bcx.ins().brnz(mask_lane, if_enabled, &[]);\n-                fx.bcx.ins().jump(if_disabled, &[]);\n+                fx.bcx.ins().brif(mask_lane, if_enabled, &[], if_disabled, &[]);\n                 fx.bcx.seal_block(if_enabled);\n                 fx.bcx.seal_block(if_disabled);\n \n@@ -864,8 +862,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let if_enabled = fx.bcx.create_block();\n                 let next = fx.bcx.create_block();\n \n-                fx.bcx.ins().brnz(mask_lane, if_enabled, &[]);\n-                fx.bcx.ins().jump(next, &[]);\n+                fx.bcx.ins().brif(mask_lane, if_enabled, &[], next, &[]);\n                 fx.bcx.seal_block(if_enabled);\n \n                 fx.bcx.switch_to_block(if_enabled);"}, {"sha": "dd2fc1b1bb475dc8403a9d846b7a0c8b1662a59a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a563e1191841160e0399e24da14fe731b1fa463c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a563e1191841160e0399e24da14fe731b1fa463c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a563e1191841160e0399e24da14fe731b1fa463c", "patch": "@@ -57,8 +57,6 @@ mod compiler_builtins;\n mod concurrency_limiter;\n mod config;\n mod constant;\n-// FIXME revert back to the external crate with Cranelift 0.93\n-mod cranelift_native;\n mod debuginfo;\n mod discriminant;\n mod driver;\n@@ -246,7 +244,7 @@ fn target_triple(sess: &Session) -> target_lexicon::Triple {\n     }\n }\n \n-fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::TargetIsa + 'static> {\n+fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Arc<dyn isa::TargetIsa + 'static> {\n     use target_lexicon::BinaryFormat;\n \n     let target_triple = crate::target_triple(sess);"}]}