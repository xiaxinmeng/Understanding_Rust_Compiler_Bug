{"sha": "18c0369688d5854ea67dbe29cfac3cc8380cb20e", "node_id": "C_kwDOAAsO6NoAKDE4YzAzNjk2ODhkNTg1NGVhNjdkYmUyOWNmYWMzY2M4MzgwY2IyMGU", "commit": {"author": {"name": "Yacin Tmimi", "email": "yacintmimi@gmail.com", "date": "2022-01-11T01:45:27Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-03-09T03:51:23Z"}, "message": "Improve mod resolution error for mods with multiple candidate files\n\nFixes 5167\n\nWhen ``a.rs`` and ``a/mod.rs`` are both present we would emit an error\nmessage telling the user that the module couldn't be found. However,\nthis behavior is misleading because we're dealing with an ambiguous\nmodule path, not a \"file not found\" error.\n\nIs the file ``a.rs`` or is it ``a/mod.rs``? Rustfmt can't decide, and\nthe user needs to resolve this ambiguity themselves.\n\nNow, the error message displayed to the user is in line with what they\nwould see if they went to compile their code with these conflicting\nmodule names.", "tree": {"sha": "34d15a4d4d4b252e4c627d1a84241bf292ade34d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34d15a4d4d4b252e4c627d1a84241bf292ade34d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c0369688d5854ea67dbe29cfac3cc8380cb20e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c0369688d5854ea67dbe29cfac3cc8380cb20e", "html_url": "https://github.com/rust-lang/rust/commit/18c0369688d5854ea67dbe29cfac3cc8380cb20e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c0369688d5854ea67dbe29cfac3cc8380cb20e/comments", "author": {"login": "ytmimi", "id": 29028348, "node_id": "MDQ6VXNlcjI5MDI4MzQ4", "avatar_url": "https://avatars.githubusercontent.com/u/29028348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ytmimi", "html_url": "https://github.com/ytmimi", "followers_url": "https://api.github.com/users/ytmimi/followers", "following_url": "https://api.github.com/users/ytmimi/following{/other_user}", "gists_url": "https://api.github.com/users/ytmimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ytmimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ytmimi/subscriptions", "organizations_url": "https://api.github.com/users/ytmimi/orgs", "repos_url": "https://api.github.com/users/ytmimi/repos", "events_url": "https://api.github.com/users/ytmimi/events{/privacy}", "received_events_url": "https://api.github.com/users/ytmimi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58de4142c525cc50824dab1cf199dc967c88356f", "url": "https://api.github.com/repos/rust-lang/rust/commits/58de4142c525cc50824dab1cf199dc967c88356f", "html_url": "https://github.com/rust-lang/rust/commit/58de4142c525cc50824dab1cf199dc967c88356f"}], "stats": {"total": 94, "additions": 88, "deletions": 6}, "files": [{"sha": "49c99403974e1176b74a4eb62af075e958b594ee", "filename": "src/modules.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/18c0369688d5854ea67dbe29cfac3cc8380cb20e/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c0369688d5854ea67dbe29cfac3cc8380cb20e/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=18c0369688d5854ea67dbe29cfac3cc8380cb20e", "patch": "@@ -81,6 +81,7 @@ pub struct ModuleResolutionError {\n     pub(crate) kind: ModuleResolutionErrorKind,\n }\n \n+/// Defines variants similar to those of [rustc_expand::module::ModError]\n #[derive(Debug, Error)]\n pub(crate) enum ModuleResolutionErrorKind {\n     /// Find a file that cannot be parsed.\n@@ -89,6 +90,12 @@ pub(crate) enum ModuleResolutionErrorKind {\n     /// File cannot be found.\n     #[error(\"{file} does not exist\")]\n     NotFound { file: PathBuf },\n+    /// File a.rs and a/mod.rs both exist\n+    #[error(\"file for module found at both {default_path:?} and {secondary_path:?}\")]\n+    MultipleCandidates {\n+        default_path: PathBuf,\n+        secondary_path: PathBuf,\n+    },\n }\n \n #[derive(Clone)]\n@@ -444,12 +451,31 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 }\n                 Ok(Some(SubModKind::MultiExternal(mods_outside_ast)))\n             }\n-            Err(_) => Err(ModuleResolutionError {\n-                module: mod_name.to_string(),\n-                kind: ModuleResolutionErrorKind::NotFound {\n-                    file: self.directory.path.clone(),\n-                },\n-            }),\n+            Err(e) => match e {\n+                ModError::FileNotFound(_, default_path, _secondary_path) => {\n+                    Err(ModuleResolutionError {\n+                        module: mod_name.to_string(),\n+                        kind: ModuleResolutionErrorKind::NotFound { file: default_path },\n+                    })\n+                }\n+                ModError::MultipleCandidates(_, default_path, secondary_path) => {\n+                    Err(ModuleResolutionError {\n+                        module: mod_name.to_string(),\n+                        kind: ModuleResolutionErrorKind::MultipleCandidates {\n+                            default_path,\n+                            secondary_path,\n+                        },\n+                    })\n+                }\n+                ModError::ParserError(_)\n+                | ModError::CircularInclusion(_)\n+                | ModError::ModInBlock(_) => Err(ModuleResolutionError {\n+                    module: mod_name.to_string(),\n+                    kind: ModuleResolutionErrorKind::ParseError {\n+                        file: self.directory.path.clone(),\n+                    },\n+                }),\n+            },\n         }\n     }\n "}, {"sha": "87ab8fbf20abd87f8a390f75a12fbf6c7e7eae25", "filename": "src/parse/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18c0369688d5854ea67dbe29cfac3cc8380cb20e/src%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c0369688d5854ea67dbe29cfac3cc8380cb20e/src%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fsession.rs?ref=18c0369688d5854ea67dbe29cfac3cc8380cb20e", "patch": "@@ -163,8 +163,11 @@ impl ParseSess {\n             |e| {\n                 // If resloving a module relative to {dir_path}/{symbol} fails because a file\n                 // could not be found, then try to resolve the module relative to {dir_path}.\n+                // If we still can't find the module after searching for it in {dir_path},\n+                // surface the original error.\n                 if matches!(e, ModError::FileNotFound(..)) && relative.is_some() {\n                     rustc_expand::module::default_submod_path(&self.parse_sess, id, None, dir_path)\n+                        .map_err(|_| e)\n                 } else {\n                     Err(e)\n                 }"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/mod-resolver/issue-5167/src/a.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa.rs?ref=18c0369688d5854ea67dbe29cfac3cc8380cb20e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/mod-resolver/issue-5167/src/a/mod.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Fa%2Fmod.rs?ref=18c0369688d5854ea67dbe29cfac3cc8380cb20e"}, {"sha": "f21af614da057799f1daff3eae932ab1a1505ea6", "filename": "tests/mod-resolver/issue-5167/src/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fissue-5167%2Fsrc%2Flib.rs?ref=18c0369688d5854ea67dbe29cfac3cc8380cb20e", "patch": "@@ -0,0 +1 @@\n+mod a;"}, {"sha": "2a63c961be8fc3a9b1426c7fe161759c0bc9a5bb", "filename": "tests/mod-resolver/module-not-found/bad_path_attribute/lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fmodule-not-found%2Fbad_path_attribute%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fmodule-not-found%2Fbad_path_attribute%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fmodule-not-found%2Fbad_path_attribute%2Flib.rs?ref=18c0369688d5854ea67dbe29cfac3cc8380cb20e", "patch": "@@ -0,0 +1,3 @@\n+// module resolution fails because the path does not exist.\n+#[path = \"path/to/does_not_exist.rs\"]\n+mod a;"}, {"sha": "4a1eac8965ded13bed593c52e47ea1521b187af2", "filename": "tests/mod-resolver/module-not-found/relative_module/a.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Fa.rs?ref=18c0369688d5854ea67dbe29cfac3cc8380cb20e", "patch": "@@ -0,0 +1,2 @@\n+// module resolution fails because `./a/b.rs` does not exist\n+mod b;"}, {"sha": "f21af614da057799f1daff3eae932ab1a1505ea6", "filename": "tests/mod-resolver/module-not-found/relative_module/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fmodule-not-found%2Frelative_module%2Flib.rs?ref=18c0369688d5854ea67dbe29cfac3cc8380cb20e", "patch": "@@ -0,0 +1 @@\n+mod a;"}, {"sha": "d9d9e1e3c90877a4a3d73ed258a9120051c69858", "filename": "tests/mod-resolver/module-not-found/sibling_module/lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fmodule-not-found%2Fsibling_module%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Fmod-resolver%2Fmodule-not-found%2Fsibling_module%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fmodule-not-found%2Fsibling_module%2Flib.rs?ref=18c0369688d5854ea67dbe29cfac3cc8380cb20e", "patch": "@@ -0,0 +1,2 @@\n+// module resolution fails because `./a.rs` does not exist\n+mod a;"}, {"sha": "450051d2fec617165fcfe6e02677caf78538782e", "filename": "tests/rustfmt/main.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Frustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c0369688d5854ea67dbe29cfac3cc8380cb20e/tests%2Frustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustfmt%2Fmain.rs?ref=18c0369688d5854ea67dbe29cfac3cc8380cb20e", "patch": "@@ -113,3 +113,47 @@ fn rustfmt_usage_text() {\n     let (stdout, _) = rustfmt(&args);\n     assert!(stdout.contains(\"Format Rust code\\n\\nusage: rustfmt [options] <file>...\"));\n }\n+\n+#[test]\n+fn mod_resolution_error_multiple_candidate_files() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/5167\n+    let default_path = Path::new(\"tests/mod-resolver/issue-5167/src/a.rs\");\n+    let secondary_path = Path::new(\"tests/mod-resolver/issue-5167/src/a/mod.rs\");\n+    let error_message = format!(\n+        \"file for module found at both {:?} and {:?}\",\n+        default_path.canonicalize().unwrap(),\n+        secondary_path.canonicalize().unwrap(),\n+    );\n+\n+    let args = [\"tests/mod-resolver/issue-5167/src/lib.rs\"];\n+    let (_stdout, stderr) = rustfmt(&args);\n+    assert!(stderr.contains(&error_message))\n+}\n+\n+#[test]\n+fn mod_resolution_error_sibling_module_not_found() {\n+    let args = [\"tests/mod-resolver/module-not-found/sibling_module/lib.rs\"];\n+    let (_stdout, stderr) = rustfmt(&args);\n+    // Module resolution fails because we're unable to find `a.rs` in the same directory as lib.rs\n+    assert!(stderr.contains(\"a.rs does not exist\"))\n+}\n+\n+#[test]\n+fn mod_resolution_error_relative_module_not_found() {\n+    let args = [\"tests/mod-resolver/module-not-found/relative_module/lib.rs\"];\n+    let (_stdout, stderr) = rustfmt(&args);\n+    // The file `./a.rs` and directory `./a` both exist.\n+    // Module resolution fails becuase we're unable to find `./a/b.rs`\n+    #[cfg(not(windows))]\n+    assert!(stderr.contains(\"a/b.rs does not exist\"));\n+    #[cfg(windows)]\n+    assert!(stderr.contains(\"a\\\\b.rs does not exist\"));\n+}\n+\n+#[test]\n+fn mod_resolution_error_path_attribute_does_not_exist() {\n+    let args = [\"tests/mod-resolver/module-not-found/bad_path_attribute/lib.rs\"];\n+    let (_stdout, stderr) = rustfmt(&args);\n+    // The path attribute points to a file that does not exist\n+    assert!(stderr.contains(\"does_not_exist.rs does not exist\"));\n+}"}]}