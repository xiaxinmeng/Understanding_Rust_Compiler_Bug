{"sha": "2efb0cd4b2240c878c36112a5ec207837c15928a", "node_id": "C_kwDOAAsO6NoAKDJlZmIwY2Q0YjIyNDBjODc4YzM2MTEyYTVlYzIwNzgzN2MxNTkyOGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-04T07:26:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-04T07:26:56Z"}, "message": "Auto merge of #103954 - matthiaskrgr:rollup-tskpxnj, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #103825 (Remove let_underscore_must_use from list of uplifted lints)\n - #103884 (Add visit_fn_ret_ty to hir intravisit)\n - #103892 (Properly render asyncness for trait fns without default body)\n - #103905 (rustdoc: remove redundant mobile CSS `.sidebar-elems { background }`)\n - #103912 (Add howto for adding new targets)\n - #103915 (Improve use of ErrorGuaranteed and code cleanup)\n - #103930 (Move some tests from `src/test/ui` to more reasonable places)\n - #103931 (Add note to RELEASES.md regarding issue 102754.)\n - #103938 (rustdoc: clean up hardcoded CSS border color on search results)\n - #103940 (rustdoc: remove no-op CSS `#main-content > .item-info { margin-top: 0 }`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6cb69b27c999395050c0567735753cda5788c2a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb69b27c999395050c0567735753cda5788c2a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2efb0cd4b2240c878c36112a5ec207837c15928a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2efb0cd4b2240c878c36112a5ec207837c15928a", "html_url": "https://github.com/rust-lang/rust/commit/2efb0cd4b2240c878c36112a5ec207837c15928a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2efb0cd4b2240c878c36112a5ec207837c15928a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15d7556de9babe4c1d8f367de1b827494782bd92", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d7556de9babe4c1d8f367de1b827494782bd92", "html_url": "https://github.com/rust-lang/rust/commit/15d7556de9babe4c1d8f367de1b827494782bd92"}, {"sha": "923d907a75e079fc878db1ba4189df7433fcc331", "url": "https://api.github.com/repos/rust-lang/rust/commits/923d907a75e079fc878db1ba4189df7433fcc331", "html_url": "https://github.com/rust-lang/rust/commit/923d907a75e079fc878db1ba4189df7433fcc331"}], "stats": {"total": 208, "additions": 125, "deletions": 83}, "files": [{"sha": "5c1990bb6c97bca9952a7bdefe4151cf24511a56", "filename": "RELEASES.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -6,7 +6,7 @@ Language\n - [Error on `as` casts of enums with `#[non_exhaustive]` variants](https://github.com/rust-lang/rust/pull/92744/)\n - [Stabilize `let else`](https://github.com/rust-lang/rust/pull/93628/)\n - [Stabilize generic associated types (GATs)](https://github.com/rust-lang/rust/pull/96709/)\n-- [Add lints `let_underscore_drop`, `let_underscore_lock`, and `let_underscore_must_use` from Clippy](https://github.com/rust-lang/rust/pull/97739/)\n+- [Add lints `let_underscore_drop` and `let_underscore_lock` from Clippy](https://github.com/rust-lang/rust/pull/97739/)\n - [Stabilize `break`ing from arbitrary labeled blocks (\"label-break-value\")](https://github.com/rust-lang/rust/pull/99332/)\n - [Uninitialized integers, floats, and raw pointers are now considered immediate UB](https://github.com/rust-lang/rust/pull/98919/).\n   Usage of `MaybeUninit` is the correct way to work with uninitialized memory.\n@@ -87,6 +87,9 @@ Compatibility Notes\n   This strengthens the forward compatibility lint deprecated_cfg_attr_crate_type_name to deny.\n - [`llvm-has-rust-patches` allows setting the build system to treat the LLVM as having Rust-specific patches](https://github.com/rust-lang/rust/pull/101072)\n   This option may need to be set for distributions that are building Rust with a patched LLVM via `llvm-config`, not the built-in LLVM.\n+- Combining three or more languages (e.g. Objective C, C++ and Rust) into one binary may hit linker limitations when using `lld`. For more information, see [issue 102754][102754].\n+\n+[102754]: https://github.com/rust-lang/rust/issues/102754\n \n Internal Changes\n ----------------"}, {"sha": "dd00678aa0ceaf0dac275d7fa7f1a48147aa9a16", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -4,7 +4,7 @@\n use rustc_hir::def::Namespace;\n use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter};\n-use rustc_middle::ty::{ConstInt, DelaySpanBugEmitted, Ty};\n+use rustc_middle::ty::{ConstInt, Ty};\n use rustc_middle::{mir, ty};\n use rustc_target::abi::{self, Abi, Align, HasDataLayout, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n@@ -567,7 +567,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => {\n                         throw_inval!(TooGeneric)\n                     }\n-                    ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n+                    ty::ConstKind::Error(reported) => {\n                         throw_inval!(AlreadyReported(reported))\n                     }\n                     ty::ConstKind::Unevaluated(uv) => {"}, {"sha": "f48bcd9080966dafe2d693b828bb04aee3aafc69", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -45,11 +45,10 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n         // There's not really any point in promoting errorful MIR.\n         //\n         // This does not include MIR that failed const-checking, which we still try to promote.\n-        if body.return_ty().references_error() {\n-            tcx.sess.delay_span_bug(body.span, \"PromoteTemps: MIR had errors\");\n+        if let Err(_) = body.return_ty().error_reported() {\n+            debug!(\"PromoteTemps: MIR had errors\");\n             return;\n         }\n-\n         if body.source.promoted.is_some() {\n             return;\n         }"}, {"sha": "3ef58d7d70570031b01e8ed3173ef237b242c07a", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -358,6 +358,9 @@ pub trait Visitor<'v>: Sized {\n     fn visit_where_predicate(&mut self, predicate: &'v WherePredicate<'v>) {\n         walk_where_predicate(self, predicate)\n     }\n+    fn visit_fn_ret_ty(&mut self, ret_ty: &'v FnRetTy<'v>) {\n+        walk_fn_ret_ty(self, ret_ty)\n+    }\n     fn visit_fn_decl(&mut self, fd: &'v FnDecl<'v>) {\n         walk_fn_decl(self, fd)\n     }\n@@ -903,7 +906,7 @@ pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &\n     for ty in function_declaration.inputs {\n         visitor.visit_ty(ty)\n     }\n-    walk_fn_ret_ty(visitor, &function_declaration.output)\n+    visitor.visit_fn_ret_ty(&function_declaration.output)\n }\n \n pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FnRetTy<'v>) {"}, {"sha": "7747ae14a24b2d33826c9509746c4548d796f7cc", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -1979,7 +1979,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n \n                     err.emit()\n-                } else if let Some(reported) = qself_ty.error_reported() {\n+                } else if let Err(reported) = qself_ty.error_reported() {\n                     reported\n                 } else {\n                     // Don't print `TyErr` to the user."}, {"sha": "71c932d747bca7de4f888e463f175e353c761f1d", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -23,9 +23,7 @@ pub(crate) fn orphan_check_impl(\n     impl_def_id: LocalDefId,\n ) -> Result<(), ErrorGuaranteed> {\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n-    if let Some(err) = trait_ref.error_reported() {\n-        return Err(err);\n-    }\n+    trait_ref.error_reported()?;\n \n     let ret = do_orphan_check_impl(tcx, trait_ref, impl_def_id);\n     if tcx.trait_is_auto(trait_ref.def_id) {"}, {"sha": "7d3129f7ea730567e0bbaefbdc263ca0c27c5f5f", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -94,10 +94,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"pointer_kind({:?}, {:?})\", t, span);\n \n         let t = self.resolve_vars_if_possible(t);\n-\n-        if let Some(reported) = t.error_reported() {\n-            return Err(reported);\n-        }\n+        t.error_reported()?;\n \n         if self.type_is_sized_modulo_regions(self.param_env, t, span) {\n             return Ok(Some(PointerKind::Thin));\n@@ -222,8 +219,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         // inference is more completely known.\n         match cast_ty.kind() {\n             ty::Dynamic(_, _, ty::Dyn) | ty::Slice(..) => {\n-                let reported = check.report_cast_to_unsized_type(fcx);\n-                Err(reported)\n+                Err(check.report_cast_to_unsized_type(fcx))\n             }\n             _ => Ok(check),\n         }\n@@ -614,10 +610,11 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n     }\n \n     fn report_cast_to_unsized_type(&self, fcx: &FnCtxt<'a, 'tcx>) -> ErrorGuaranteed {\n-        if let Some(reported) =\n-            self.cast_ty.error_reported().or_else(|| self.expr_ty.error_reported())\n-        {\n-            return reported;\n+        if let Err(err) = self.cast_ty.error_reported() {\n+            return err;\n+        }\n+        if let Err(err) = self.expr_ty.error_reported() {\n+            return err;\n         }\n \n         let tstr = fcx.ty_to_string(self.cast_ty);"}, {"sha": "cccedc9ec6ea952c8020f12a8daca1a7b31fee7d", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -262,7 +262,7 @@ pub fn ancestors<'tcx>(\n \n     if let Some(reported) = specialization_graph.has_errored {\n         Err(reported)\n-    } else if let Some(reported) = tcx.type_of(start_from_impl).error_reported() {\n+    } else if let Err(reported) = tcx.type_of(start_from_impl).error_reported() {\n         Err(reported)\n     } else {\n         Ok(Ancestors {"}, {"sha": "e5bcd5fb27aa715baaa2b8ec22cf775631862a1b", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -1,7 +1,7 @@\n //! A subset of a mir body used for const evaluatability checking.\n use crate::mir;\n use crate::ty::visit::TypeVisitable;\n-use crate::ty::{self, DelaySpanBugEmitted, EarlyBinder, SubstsRef, Ty, TyCtxt};\n+use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use std::cmp;\n@@ -43,7 +43,7 @@ impl<'tcx> AbstractConst<'tcx> {\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n         match ct.kind() {\n             ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv),\n-            ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => Err(reported),\n+            ty::ConstKind::Error(reported) => Err(reported),\n             _ => Ok(None),\n         }\n     }"}, {"sha": "c1c613f6c602ed3d01017c3aacd74163de0f5368", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -69,7 +69,7 @@ pub enum ConstKind<'tcx> {\n \n     /// A placeholder for a const which could not be computed; this is\n     /// propagated to avoid useless error messages.\n-    Error(ty::DelaySpanBugEmitted),\n+    Error(ErrorGuaranteed),\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]"}, {"sha": "fc3b071684999a6649d4ef6ea650aaa547433bf5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -117,7 +117,7 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type BoundTy = ty::BoundTy;\n     type PlaceholderType = ty::PlaceholderType;\n     type InferTy = InferTy;\n-    type DelaySpanBugEmitted = DelaySpanBugEmitted;\n+    type ErrorGuaranteed = ErrorGuaranteed;\n     type PredicateKind = ty::PredicateKind<'tcx>;\n     type AllocId = crate::mir::interpret::AllocId;\n \n@@ -128,15 +128,6 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type PlaceholderRegion = ty::PlaceholderRegion;\n }\n \n-/// A type that is not publicly constructable. This prevents people from making [`TyKind::Error`]s\n-/// except through the error-reporting functions on a [`tcx`][TyCtxt].\n-#[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n-pub struct DelaySpanBugEmitted {\n-    pub reported: ErrorGuaranteed,\n-    _priv: (),\n-}\n-\n type InternedSet<'tcx, T> = ShardedHashMap<InternedInSet<'tcx, T>, ()>;\n \n pub struct CtxtInterners<'tcx> {\n@@ -1303,7 +1294,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[track_caller]\n     pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        self.mk_ty(Error(DelaySpanBugEmitted { reported, _priv: () }))\n+        self.mk_ty(Error(reported))\n     }\n \n     /// Like [TyCtxt::ty_error] but for constants.\n@@ -1325,10 +1316,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         msg: &str,\n     ) -> Const<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        self.mk_const(ty::ConstS {\n-            kind: ty::ConstKind::Error(DelaySpanBugEmitted { reported, _priv: () }),\n-            ty,\n-        })\n+        self.mk_const(ty::ConstS { kind: ty::ConstKind::Error(reported), ty })\n     }\n \n     pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {"}, {"sha": "27090c62d21ed135d895f4c702651ea280a006e3", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -80,7 +80,7 @@ pub use self::consts::{\n };\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n-    CtxtInterners, DeducedParamAttrs, DelaySpanBugEmitted, FreeRegionInfo, GeneratorDiagnosticData,\n+    CtxtInterners, DeducedParamAttrs, FreeRegionInfo, GeneratorDiagnosticData,\n     GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n     UserTypeAnnotationIndex,\n };"}, {"sha": "23cd93d6af40c1d8c8ff373135fd8a8c458f952a", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -240,7 +240,6 @@ TrivialTypeTraversalAndLiftImpls! {\n     Field,\n     interpret::Scalar,\n     rustc_target::abi::Size,\n-    ty::DelaySpanBugEmitted,\n     rustc_type_ir::DebruijnIndex,\n     ty::BoundVar,\n     ty::Placeholder<ty::BoundVar>,"}, {"sha": "f0e9f990a8115e8f00bc7cefc9fc68b0408bab81", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -95,11 +95,11 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n     fn references_error(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_ERROR)\n     }\n-    fn error_reported(&self) -> Option<ErrorGuaranteed> {\n+    fn error_reported(&self) -> Result<(), ErrorGuaranteed> {\n         if self.references_error() {\n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n+            Err(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n         } else {\n-            None\n+            Ok(())\n         }\n     }\n     fn has_non_region_param(&self) -> bool {"}, {"sha": "384d03106b1e8c1cc67760bbfdf3345a741bb859", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -122,7 +122,7 @@ mod rustc {\n \n             let c = c.eval(tcx, param_env);\n \n-            if let Some(err) = c.error_reported() {\n+            if let Err(err) = c.error_reported() {\n                 return Some(Self {\n                     alignment: true,\n                     lifetimes: true,"}, {"sha": "99d3bda6ebfff7308b01b3acd4aaa3410013aab7", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -413,7 +413,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n /// Check if a function is async.\n fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     let node = tcx.hir().get_by_def_id(def_id.expect_local());\n-    if let Some(fn_kind) = node.fn_kind() { fn_kind.asyncness() } else { hir::IsAsync::NotAsync }\n+    node.fn_sig().map_or(hir::IsAsync::NotAsync, |sig| sig.header.asyncness)\n }\n \n /// Don't call this directly: use ``tcx.conservative_is_privately_uninhabited`` instead."}, {"sha": "7c3eb4efbc9844e73bda2a14e876414b7277609c", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -45,7 +45,7 @@ pub trait Interner {\n     type BoundTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type PlaceholderType: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type InferTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n-    type DelaySpanBugEmitted: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n+    type ErrorGuaranteed: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type PredicateKind: Clone + Debug + Hash + PartialEq + Eq;\n     type AllocId: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n "}, {"sha": "02cbb2e858f80ac0943792604990d8e8c15727d9", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -217,7 +217,7 @@ pub enum TyKind<I: Interner> {\n \n     /// A placeholder for a type which could not be computed; this is\n     /// propagated to avoid useless error messages.\n-    Error(I::DelaySpanBugEmitted),\n+    Error(I::ErrorGuaranteed),\n }\n \n impl<I: Interner> TyKind<I> {\n@@ -626,7 +626,7 @@ impl<I: Interner> fmt::Debug for TyKind<I> {\n // This is manually implemented because a derive would require `I: Encodable`\n impl<I: Interner, E: TyEncoder> Encodable<E> for TyKind<I>\n where\n-    I::DelaySpanBugEmitted: Encodable<E>,\n+    I::ErrorGuaranteed: Encodable<E>,\n     I::AdtDef: Encodable<E>,\n     I::SubstsRef: Encodable<E>,\n     I::DefId: Encodable<E>,\n@@ -645,7 +645,6 @@ where\n     I::BoundTy: Encodable<E>,\n     I::PlaceholderType: Encodable<E>,\n     I::InferTy: Encodable<E>,\n-    I::DelaySpanBugEmitted: Encodable<E>,\n     I::PredicateKind: Encodable<E>,\n     I::AllocId: Encodable<E>,\n {\n@@ -744,7 +743,7 @@ where\n // This is manually implemented because a derive would require `I: Decodable`\n impl<I: Interner, D: TyDecoder<I = I>> Decodable<D> for TyKind<I>\n where\n-    I::DelaySpanBugEmitted: Decodable<D>,\n+    I::ErrorGuaranteed: Decodable<D>,\n     I::AdtDef: Decodable<D>,\n     I::SubstsRef: Decodable<D>,\n     I::DefId: Decodable<D>,\n@@ -763,7 +762,6 @@ where\n     I::BoundTy: Decodable<D>,\n     I::PlaceholderType: Decodable<D>,\n     I::InferTy: Decodable<D>,\n-    I::DelaySpanBugEmitted: Decodable<D>,\n     I::PredicateKind: Decodable<D>,\n     I::AllocId: Decodable<D>,\n {\n@@ -829,7 +827,7 @@ where\n     I::ParamTy: HashStable<CTX>,\n     I::PlaceholderType: HashStable<CTX>,\n     I::InferTy: HashStable<CTX>,\n-    I::DelaySpanBugEmitted: HashStable<CTX>,\n+    I::ErrorGuaranteed: HashStable<CTX>,\n {\n     #[inline]\n     fn hash_stable("}, {"sha": "df9131ce84afda1444f50c637c0d2796d735e921", "filename": "src/doc/rustc/src/target-tier-policy.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Fdoc%2Frustc%2Fsrc%2Ftarget-tier-policy.md", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Fdoc%2Frustc%2Fsrc%2Ftarget-tier-policy.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftarget-tier-policy.md?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -3,6 +3,7 @@\n ## Table of Contents\n \n * [General](#general)\n+* [Adding a new target](#adding-a-new-target)\n * [Tier 3 target policy](#tier-3-target-policy)\n * [Tier 2 target policy](#tier-2-target-policy)\n   * [Tier 2 with host tools](#tier-2-with-host-tools)\n@@ -104,6 +105,30 @@ indicates something entirely optional, and does not indicate guidance or\n recommendations. This language is based on [IETF RFC\n 2119](https://tools.ietf.org/html/rfc2119).\n \n+## Adding a new target\n+\n+New targets typically start as Tier 3 and then can be promoted later.\n+To propose addition of a new target, open a pull request on [`rust-lang/rust`]:\n+\n+- Copy the [Tier 3 target policy](#tier-3-target-policy) to the description\n+  and fill it out, see [example][tier3example].\n+- Add a new description for the target in `src/doc/rustc/src/platform-support`\n+  using the [template][platform_template].\n+- Add the target to the [SUMMARY.md][summary] (allows wildcards) and\n+  [platform-support.md][platformsupport] (must name all targets verbatim).\n+  Link to the created description page.\n+- Ensure the pull request is assigned to a member of the [Rust compiler team][rust_compiler_team] by commenting:\n+  ```text\n+  r? compiler-team\n+  ```\n+\n+[tier3example]: https://github.com/rust-lang/rust/pull/94872\n+[platform_template]: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support/TEMPLATE.md\n+[summary]: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/SUMMARY.md\n+[platformsupport]: https://github.com/rust-lang/rust/blob/master/src/doc/rustc/src/platform-support.md\n+[rust_compiler_team]: https://www.rust-lang.org/governance/teams/compiler\n+[`rust-lang/rust`]: https://github.com/rust-lang/rust\n+\n ## Tier 3 target policy\n \n At this tier, the Rust project provides no official support for a target, so we"}, {"sha": "c5abf42c09678f8a9d37bc88f6efca2e05820302", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -880,7 +880,7 @@ fn clean_fn_or_proc_macro<'tcx>(\n             ProcMacroItem(ProcMacro { kind, helpers })\n         }\n         None => {\n-            let mut func = clean_function(cx, sig, generics, body_id);\n+            let mut func = clean_function(cx, sig, generics, FunctionArgs::Body(body_id));\n             clean_fn_decl_legacy_const_generics(&mut func, attrs);\n             FunctionItem(func)\n         }\n@@ -917,16 +917,28 @@ fn clean_fn_decl_legacy_const_generics(func: &mut Function, attrs: &[ast::Attrib\n     }\n }\n \n+enum FunctionArgs<'tcx> {\n+    Body(hir::BodyId),\n+    Names(&'tcx [Ident]),\n+}\n+\n fn clean_function<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     sig: &hir::FnSig<'tcx>,\n     generics: &hir::Generics<'tcx>,\n-    body_id: hir::BodyId,\n+    args: FunctionArgs<'tcx>,\n ) -> Box<Function> {\n     let (generics, decl) = enter_impl_trait(cx, |cx| {\n         // NOTE: generics must be cleaned before args\n         let generics = clean_generics(generics, cx);\n-        let args = clean_args_from_types_and_body_id(cx, sig.decl.inputs, body_id);\n+        let args = match args {\n+            FunctionArgs::Body(body_id) => {\n+                clean_args_from_types_and_body_id(cx, sig.decl.inputs, body_id)\n+            }\n+            FunctionArgs::Names(names) => {\n+                clean_args_from_types_and_names(cx, sig.decl.inputs, names)\n+            }\n+        };\n         let mut decl = clean_fn_decl_with_args(cx, sig.decl, args);\n         if sig.header.is_async() {\n             decl.output = decl.sugared_async_return_type();\n@@ -1051,18 +1063,12 @@ fn clean_trait_item<'tcx>(trait_item: &hir::TraitItem<'tcx>, cx: &mut DocContext\n             ),\n             hir::TraitItemKind::Const(ty, None) => TyAssocConstItem(clean_ty(ty, cx)),\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n-                let m = clean_function(cx, sig, trait_item.generics, body);\n+                let m = clean_function(cx, sig, trait_item.generics, FunctionArgs::Body(body));\n                 MethodItem(m, None)\n             }\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Required(names)) => {\n-                let (generics, decl) = enter_impl_trait(cx, |cx| {\n-                    // NOTE: generics must be cleaned before args\n-                    let generics = clean_generics(trait_item.generics, cx);\n-                    let args = clean_args_from_types_and_names(cx, sig.decl.inputs, names);\n-                    let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n-                    (generics, decl)\n-                });\n-                TyMethodItem(Box::new(Function { decl, generics }))\n+                let m = clean_function(cx, sig, trait_item.generics, FunctionArgs::Names(names));\n+                TyMethodItem(m)\n             }\n             hir::TraitItemKind::Type(bounds, Some(default)) => {\n                 let generics = enter_impl_trait(cx, |cx| clean_generics(trait_item.generics, cx));\n@@ -1099,7 +1105,7 @@ pub(crate) fn clean_impl_item<'tcx>(\n                 AssocConstItem(clean_ty(ty, cx), default)\n             }\n             hir::ImplItemKind::Fn(ref sig, body) => {\n-                let m = clean_function(cx, sig, impl_.generics, body);\n+                let m = clean_function(cx, sig, impl_.generics, FunctionArgs::Body(body));\n                 let defaultness = cx.tcx.impl_defaultness(impl_.owner_id);\n                 MethodItem(m, Some(defaultness))\n             }"}, {"sha": "3a4bfc1a7405de8d2b3ebc0c68d7caf80d751fb5", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -694,13 +694,10 @@ impl Item {\n                     asyncness: hir::IsAsync::NotAsync,\n                 }\n             }\n-            ItemKind::FunctionItem(_) | ItemKind::MethodItem(_, _) => {\n+            ItemKind::FunctionItem(_) | ItemKind::MethodItem(_, _) | ItemKind::TyMethodItem(_) => {\n                 let def_id = self.item_id.as_def_id().unwrap();\n                 build_fn_header(def_id, tcx, tcx.asyncness(def_id))\n             }\n-            ItemKind::TyMethodItem(_) => {\n-                build_fn_header(self.item_id.as_def_id().unwrap(), tcx, hir::IsAsync::NotAsync)\n-            }\n             _ => return None,\n         };\n         Some(header)"}, {"sha": "54f6e1ed4d51525a3e7a44ef4c69ea08e0486a3e", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -677,7 +677,6 @@ pre, .rustdoc.source .example-wrap {\n }\n \n #main-content > .item-info {\n-\tmargin-top: 0;\n \tmargin-left: 0;\n }\n \n@@ -894,7 +893,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \t/* A little margin ensures the browser's outlining of focused links has room to display. */\n \tmargin-left: 2px;\n \tmargin-right: 2px;\n-\tborder-bottom: 1px solid #aaa3;\n+\tborder-bottom: 1px solid var(--border-color);\n }\n \n .search-results > a > div {\n@@ -1796,7 +1795,6 @@ in storage.js\n \n \t.sidebar-elems {\n \t\tmargin-top: 1em;\n-\t\tbackground-color: var(--sidebar-background-color);\n \t}\n \n \t.content {\n@@ -1875,7 +1873,6 @@ in storage.js\n \n \t/* Display an alternating layout on tablets and phones */\n \t.search-results > a {\n-\t\tborder-bottom: 1px solid #aaa9;\n \t\tpadding: 5px 0px;\n \t}\n \t.search-results .result-name, .search-results div.desc {"}, {"sha": "37d7b03a099587d53dea11568dd4260305fa847d", "filename": "src/test/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -75,6 +75,12 @@ assert-css: (\n     {\"color\": \"rgb(0, 150, 207)\"},\n )\n \n+// Checking the color of the bottom border.\n+assert-css: (\n+    \".search-results > a\",\n+    {\"border-bottom-color\": \"rgb(92, 103, 115)\"}\n+)\n+\n // Checking the color of \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n@@ -181,6 +187,12 @@ assert-css: (\n     {\"color\": \"rgb(221, 221, 221)\"},\n )\n \n+// Checking the color of the bottom border.\n+assert-css: (\n+    \".search-results > a\",\n+    {\"border-bottom-color\": \"rgb(224, 224, 224)\"}\n+)\n+\n // Checking the color for \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n@@ -272,6 +284,12 @@ assert-css: (\n     {\"color\": \"rgb(0, 0, 0)\"},\n )\n \n+// Checking the color of the bottom border.\n+assert-css: (\n+    \".search-results > a\",\n+    {\"border-bottom-color\": \"rgb(224, 224, 224)\"}\n+)\n+\n // Checking the color for \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\","}, {"sha": "2578bc8f7a1668375716a28ad5744448e0dc2245", "filename": "src/test/rustdoc/async-trait-sig.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Frustdoc%2Fasync-trait-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Frustdoc%2Fasync-trait-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-trait-sig.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -0,0 +1,14 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+pub trait Foo {\n+    // @has async_trait_sig/trait.Foo.html '//h4[@class=\"code-header\"]' \"async fn bar() -> i32\"\n+    async fn bar() -> i32;\n+\n+    // @has async_trait_sig/trait.Foo.html '//h4[@class=\"code-header\"]' \"async fn baz() -> i32\"\n+    async fn baz() -> i32 {\n+        1\n+    }\n+}"}, {"sha": "bb3a5c94d419b41eb2400a8b67e0f65144b14c5a", "filename": "src/test/ui/macros/attr-from-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Fmacros%2Fattr-from-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Fmacros%2Fattr-from-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fattr-from-macro.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "previous_filename": "src/test/ui/attr-from-macro.rs"}, {"sha": "9b388675c80bf1fcc362172000e6890aadc85290", "filename": "src/test/ui/macros/auxiliary/attr-from-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fattr-from-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fattr-from-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fattr-from-macro.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "previous_filename": "src/test/ui/auxiliary/attr-from-macro.rs"}, {"sha": "9e490e27ad17df34a21c18ac29ceae61d154b9e6", "filename": "src/test/ui/repr/align-with-extern-c-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frepr%2Falign-with-extern-c-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frepr%2Falign-with-extern-c-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Falign-with-extern-c-fn.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "previous_filename": "src/test/ui/align-with-extern-c-fn.rs"}, {"sha": "1ddf127172e659fb8fb7c020b948934bb20afc3f", "filename": "src/test/ui/repr/aligned_enum_cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frepr%2Faligned_enum_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frepr%2Faligned_enum_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Faligned_enum_cast.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "previous_filename": "src/test/ui/aligned_enum_cast.rs"}, {"sha": "fdd14fc2dbe72dda5b95ce28f9b6b18b3ec46664", "filename": "src/test/ui/repr/repr_c_int_align.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frepr%2Frepr_c_int_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frepr%2Frepr_c_int_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr_c_int_align.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "previous_filename": "src/test/ui/repr_c_int_align.rs"}, {"sha": "c0e13a5f5f031c66336b0b4a6234a96276083eb4", "filename": "src/test/ui/rfcs/rfc1623-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frfcs%2Frfc1623-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frfcs%2Frfc1623-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc1623-2.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "previous_filename": "src/test/ui/rfc1623.rs"}, {"sha": "d183eaaa6236ee8553bf5ecb2110e382b749e9ba", "filename": "src/test/ui/rfcs/rfc1623-2.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frfcs%2Frfc1623-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frfcs%2Frfc1623-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc1623-2.stderr?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:28:8\n+  --> $DIR/rfc1623-2.rs:28:8\n    |\n LL |     f: &id,\n    |        ^^^ one type is more general than the other\n@@ -8,7 +8,7 @@ LL |     f: &id,\n               found trait `Fn<(&Foo<'_>,)>`\n \n error[E0308]: mismatched types\n-  --> $DIR/rfc1623.rs:28:8\n+  --> $DIR/rfc1623-2.rs:28:8\n    |\n LL |     f: &id,\n    |        ^^^ one type is more general than the other\n@@ -17,7 +17,7 @@ LL |     f: &id,\n               found trait `Fn<(&Foo<'_>,)>`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:28:8\n+  --> $DIR/rfc1623-2.rs:28:8\n    |\n LL |     f: &id,\n    |        ^^^ implementation of `FnOnce` is not general enough\n@@ -26,7 +26,7 @@ LL |     f: &id,\n    = note: ...but it actually implements `FnOnce<(&'2 Foo<'_>,)>`, for some specific lifetime `'2`\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/rfc1623.rs:28:8\n+  --> $DIR/rfc1623-2.rs:28:8\n    |\n LL |     f: &id,\n    |        ^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/rfc1623.stderr"}, {"sha": "26fa6fdb57f95a90482c357a4d926c331bd7c7db", "filename": "src/test/ui/rfcs/rfc1623-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frfcs%2Frfc1623-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frfcs%2Frfc1623-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc1623-3.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "previous_filename": "src/test/ui/rfc1623-2.rs"}, {"sha": "77fc3f0412ebfa210d02faf1832b108e8e3ef082", "filename": "src/test/ui/rfcs/rfc1623-3.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frfcs%2Frfc1623-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftest%2Fui%2Frfcs%2Frfc1623-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc1623-3.stderr?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/rfc1623-2.rs:8:42\n+  --> $DIR/rfc1623-3.rs:8:42\n    |\n LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n    |                             ---  ---     ^ expected named lifetime parameter\n@@ -12,7 +12,7 @@ LL | static NON_ELIDABLE_FN: &for<'a> fn(&'a u8, &'a u8) -> &'a u8 =\n    |                          +++++++     ++      ++         ++\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/rfc1623-2.rs:10:39\n+  --> $DIR/rfc1623-3.rs:10:39\n    |\n LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n    |                          ---  ---     ^ expected named lifetime parameter\n@@ -24,7 +24,7 @@ LL |     &(non_elidable as for<'a> fn(&'a u8, &'a u8) -> &'a u8);\n    |                       +++++++     ++      ++         ++\n \n error[E0605]: non-primitive cast: `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {non_elidable}` as `for<'a, 'b> fn(&'a u8, &'b u8) -> &u8`\n-  --> $DIR/rfc1623-2.rs:10:6\n+  --> $DIR/rfc1623-3.rs:10:6\n    |\n LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast", "previous_filename": "src/test/ui/rfc1623-2.stderr"}, {"sha": "6bf7d8206a5765fa8fc104d6fab62671072dede5", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efb0cd4b2240c878c36112a5ec207837c15928a/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=2efb0cd4b2240c878c36112a5ec207837c15928a", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 948;\n+const ROOT_ENTRY_LIMIT: usize = 941;\n const ISSUES_ENTRY_LIMIT: usize = 2117;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}]}