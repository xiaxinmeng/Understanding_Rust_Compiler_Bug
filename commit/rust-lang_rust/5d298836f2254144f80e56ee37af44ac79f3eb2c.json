{"sha": "5d298836f2254144f80e56ee37af44ac79f3eb2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMjk4ODM2ZjIyNTQxNDRmODBlNTZlZTM3YWY0NGFjNzlmM2ViMmM=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-06-11T16:12:19Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-06-11T16:48:43Z"}, "message": "Move some libs to self-contained directory", "tree": {"sha": "a74845981fae7e3e10f5e107c247bc0ea743cdd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a74845981fae7e3e10f5e107c247bc0ea743cdd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d298836f2254144f80e56ee37af44ac79f3eb2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d298836f2254144f80e56ee37af44ac79f3eb2c", "html_url": "https://github.com/rust-lang/rust/commit/5d298836f2254144f80e56ee37af44ac79f3eb2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d298836f2254144f80e56ee37af44ac79f3eb2c/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "961974fe0348f479255f9e95b5924419c2c15a77", "url": "https://api.github.com/repos/rust-lang/rust/commits/961974fe0348f479255f9e95b5924419c2c15a77", "html_url": "https://github.com/rust-lang/rust/commit/961974fe0348f479255f9e95b5924419c2c15a77"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "4b739da91ce1393afdc01a743bd879c9c0ea191d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5d298836f2254144f80e56ee37af44ac79f3eb2c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d298836f2254144f80e56ee37af44ac79f3eb2c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5d298836f2254144f80e56ee37af44ac79f3eb2c", "patch": "@@ -172,7 +172,14 @@ fn copy_self_contained_objects(\n     compiler: &Compiler,\n     target: Interned<String>,\n ) -> Vec<(PathBuf, DependencyType)> {\n-    let libdir = builder.sysroot_libdir(*compiler, target);\n+    // cfg(bootstrap)\n+    // Remove when upgrading bootstrap compiler.\n+    let libdir_self_contained = if compiler.stage == 0 {\n+        builder.sysroot_libdir(*compiler, target).to_path_buf()\n+    } else {\n+        builder.sysroot_libdir(*compiler, target).join(\"self-contained\")\n+    };\n+    t!(fs::create_dir_all(&libdir_self_contained));\n     let mut target_deps = vec![];\n \n     // Copies the CRT objects.\n@@ -207,7 +214,7 @@ fn copy_self_contained_objects(\n     } else if target.contains(\"windows-gnu\") {\n         for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n             let src = compiler_file(builder, builder.cc(target), target, obj);\n-            let target = libdir.join(obj);\n+            let target = libdir_self_contained.join(obj);\n             builder.copy(&src, &target);\n             target_deps.push((target, DependencyType::TargetSelfContained));\n         }\n@@ -844,14 +851,17 @@ pub fn add_to_sysroot(\n     sysroot_host_dst: &Path,\n     stamp: &Path,\n ) {\n+    let self_contained_dst = &sysroot_dst.join(\"self-contained\");\n     t!(fs::create_dir_all(&sysroot_dst));\n     t!(fs::create_dir_all(&sysroot_host_dst));\n+    t!(fs::create_dir_all(&self_contained_dst));\n     for (path, dependency_type) in builder.read_stamp_file(stamp) {\n-        if dependency_type == DependencyType::Host {\n-            builder.copy(&path, &sysroot_host_dst.join(path.file_name().unwrap()));\n-        } else {\n-            builder.copy(&path, &sysroot_dst.join(path.file_name().unwrap()));\n-        }\n+        let dst = match dependency_type {\n+            DependencyType::Host => sysroot_host_dst,\n+            DependencyType::Target => sysroot_dst,\n+            DependencyType::TargetSelfContained => self_contained_dst,\n+        };\n+        builder.copy(&path, &dst.join(path.file_name().unwrap()));\n     }\n }\n "}, {"sha": "08737d9a0474e1bf7543b9b152aaa61591deff14", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5d298836f2254144f80e56ee37af44ac79f3eb2c/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d298836f2254144f80e56ee37af44ac79f3eb2c/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=5d298836f2254144f80e56ee37af44ac79f3eb2c", "patch": "@@ -321,7 +321,12 @@ fn make_win_dist(\n     );\n \n     //Copy platform libs to platform-specific lib directory\n-    let target_lib_dir = plat_root.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\");\n+    let target_lib_dir = plat_root\n+        .join(\"lib\")\n+        .join(\"rustlib\")\n+        .join(target_triple)\n+        .join(\"lib\")\n+        .join(\"self-contained\");\n     fs::create_dir_all(&target_lib_dir).expect(\"creating target_lib_dir failed\");\n     for src in target_libs {\n         builder.copy_to_folder(&src, &target_lib_dir);\n@@ -650,9 +655,13 @@ fn skip_host_target_lib(builder: &Builder<'_>, compiler: Compiler) -> bool {\n /// Copy stamped files into an image's `target/lib` directory.\n fn copy_target_libs(builder: &Builder<'_>, target: &str, image: &Path, stamp: &Path) {\n     let dst = image.join(\"lib/rustlib\").join(target).join(\"lib\");\n+    let self_contained_dst = dst.join(\"self-contained\");\n     t!(fs::create_dir_all(&dst));\n+    t!(fs::create_dir_all(&self_contained_dst));\n     for (path, dependency_type) in builder.read_stamp_file(stamp) {\n-        if dependency_type != DependencyType::Host || builder.config.build == target {\n+        if dependency_type == DependencyType::TargetSelfContained {\n+            builder.copy(&path, &self_contained_dst.join(path.file_name().unwrap()));\n+        } else if dependency_type == DependencyType::Target || builder.config.build == target {\n             builder.copy(&path, &dst.join(path.file_name().unwrap()));\n         }\n     }"}, {"sha": "c57b01dff2801782522e80f1fc8f414c36f7f404", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d298836f2254144f80e56ee37af44ac79f3eb2c/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d298836f2254144f80e56ee37af44ac79f3eb2c/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=5d298836f2254144f80e56ee37af44ac79f3eb2c", "patch": "@@ -1075,6 +1075,10 @@ fn get_object_file_path(sess: &Session, name: &str) -> PathBuf {\n     if file_path.exists() {\n         return file_path;\n     }\n+    let file_path = fs.get_lib_path().join(\"self-contained\").join(name);\n+    if file_path.exists() {\n+        return file_path;\n+    }\n     for search_path in fs.search_paths() {\n         let file_path = search_path.dir.join(name);\n         if file_path.exists() {\n@@ -1470,6 +1474,9 @@ fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session) {\n     // The location of crates will be determined as needed.\n     let lib_path = sess.target_filesearch(PathKind::All).get_lib_path();\n     cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n+\n+    let lib_path = sess.target_filesearch(PathKind::All).get_lib_path().join(\"self-contained\");\n+    cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n }\n \n /// Add options making relocation sections in the produced ELF files read-only"}]}