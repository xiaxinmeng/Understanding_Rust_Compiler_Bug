{"sha": "89483b0b83015b11011ea0c3864e94c880e82aae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NDgzYjBiODMwMTViMTEwMTFlYTBjMzg2NGU5NGM4ODBlODJhYWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-07T08:44:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-07T18:12:29Z"}, "message": "rt: Remove check_stack_alignment\n\nThis function does not do what it tries to do and it is expensive", "tree": {"sha": "2f0fb8e93915f8d7c818ee822288f61010c0e1f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f0fb8e93915f8d7c818ee822288f61010c0e1f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89483b0b83015b11011ea0c3864e94c880e82aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89483b0b83015b11011ea0c3864e94c880e82aae", "html_url": "https://github.com/rust-lang/rust/commit/89483b0b83015b11011ea0c3864e94c880e82aae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89483b0b83015b11011ea0c3864e94c880e82aae/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8c16df153a236edf047fe60bf76b98e95611655", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c16df153a236edf047fe60bf76b98e95611655", "html_url": "https://github.com/rust-lang/rust/commit/d8c16df153a236edf047fe60bf76b98e95611655"}], "stats": {"total": 34, "additions": 0, "deletions": 34}, "files": [{"sha": "20cafa3dffbf56ed50e5c2e34e4373537703eeef", "filename": "src/rt/arch/i386/record_sp.S", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89483b0b83015b11011ea0c3864e94c880e82aae/src%2Frt%2Farch%2Fi386%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/89483b0b83015b11011ea0c3864e94c880e82aae/src%2Frt%2Farch%2Fi386%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Frecord_sp.S?ref=89483b0b83015b11011ea0c3864e94c880e82aae", "patch": "@@ -4,18 +4,15 @@\n #define RECORD_SP_LIMIT    _record_sp_limit\n #define GET_SP_LIMIT       _get_sp_limit\n #define GET_SP             _get_sp\n-#define CHECK_STACK        _check_stack_alignment\n #else\n #define RECORD_SP_LIMIT    record_sp_limit\n #define GET_SP_LIMIT       get_sp_limit\n #define GET_SP             get_sp\n-#define CHECK_STACK        check_stack_alignment\n #endif\n \n .globl RECORD_SP_LIMIT\n .globl GET_SP_LIMIT\n .globl GET_SP\n-.globl CHECK_STACK\n \n #if defined(__linux__) || defined(__FreeBSD__)\n RECORD_SP_LIMIT:\n@@ -61,10 +58,3 @@ GET_SP_LIMIT:\n GET_SP:\n \tmovl %esp, %eax\n \tret\n-\n-// This will segfault if not called on a 16-byte boundary\n-CHECK_STACK:\n-\tsubl $28, %esp\n-\tmovaps %xmm0, (%esp)\n-\taddl $28, %esp\n-\tret"}, {"sha": "0999e19f32885013613abdb9a0b4851fd975d8f5", "filename": "src/rt/arch/x86_64/record_sp.S", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89483b0b83015b11011ea0c3864e94c880e82aae/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/89483b0b83015b11011ea0c3864e94c880e82aae/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S?ref=89483b0b83015b11011ea0c3864e94c880e82aae", "patch": "@@ -4,18 +4,15 @@\n #define RECORD_SP_LIMIT    _record_sp_limit\n #define GET_SP_LIMIT       _get_sp_limit\n #define GET_SP             _get_sp\n-#define CHECK_STACK        _check_stack_alignment\n #else\n #define RECORD_SP_LIMIT    record_sp_limit\n #define GET_SP_LIMIT       get_sp_limit\n #define GET_SP             get_sp\n-#define CHECK_STACK        check_stack_alignment\n #endif\n \n .globl RECORD_SP_LIMIT\n .globl GET_SP_LIMIT\n .globl GET_SP\n-.globl CHECK_STACK\n \n #if defined(__linux__)\n RECORD_SP_LIMIT:\n@@ -53,10 +50,3 @@ GET_SP_LIMIT:\n GET_SP:\n \tmovq %rsp, %rax\n \tret\n-\n-// This will segfault if not called on a 16-byte boundary\n-CHECK_STACK:\n-\tsubq $24, %rsp\n-\tmovaps %xmm0, (%rsp)\n-\taddq $24, %rsp\n-\tret"}, {"sha": "11f52df70ba1e15b4acae1770b7ac8950102ba2f", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89483b0b83015b11011ea0c3864e94c880e82aae/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/89483b0b83015b11011ea0c3864e94c880e82aae/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=89483b0b83015b11011ea0c3864e94c880e82aae", "patch": "@@ -28,24 +28,10 @@\n         (task)->name, (task));\n #endif\n \n-// This is called to ensure we've set up our rust stacks\n-// correctly. Strategically placed at entry to upcalls because they begin on\n-// the rust stack and happen frequently enough to catch most stack changes,\n-// including at the beginning of all landing pads.\n-// FIXME: Enable this for windows\n-#if (defined __linux__ || defined __APPLE__ || defined __FreeBSD__) \\\n-    && (defined(GCC_VERSION) && GCC_VERSION > 40300)\n-extern \"C\" void\n-check_stack_alignment() __attribute__ ((aligned (16)));\n-#else\n-static void check_stack_alignment() { }\n-#endif\n-\n #define UPCALL_SWITCH_STACK(A, F) call_upcall_on_c_stack((void*)A, (void*)F)\n \n inline void\n call_upcall_on_c_stack(void *args, void *fn_ptr) {\n-    check_stack_alignment();\n     rust_task *task = rust_get_current_task();\n     task->call_on_c_stack(args, fn_ptr);\n }"}]}