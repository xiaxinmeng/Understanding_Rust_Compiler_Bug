{"sha": "6da912e2a1f8ef5df8e0669713d15258a039325f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYTkxMmUyYTFmOGVmNWRmOGUwNjY5NzEzZDE1MjU4YTAzOTMyNWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-26T14:50:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-26T14:50:31Z"}, "message": "Merge branch 'explain' of https://github.com/estebank/rust into rollup", "tree": {"sha": "6c7b5669eeac5041bdfa6a0dc3246d90b73368d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c7b5669eeac5041bdfa6a0dc3246d90b73368d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6da912e2a1f8ef5df8e0669713d15258a039325f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6da912e2a1f8ef5df8e0669713d15258a039325f", "html_url": "https://github.com/rust-lang/rust/commit/6da912e2a1f8ef5df8e0669713d15258a039325f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6da912e2a1f8ef5df8e0669713d15258a039325f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95942155da62e80f59b425a290a6eff502787ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/95942155da62e80f59b425a290a6eff502787ded", "html_url": "https://github.com/rust-lang/rust/commit/95942155da62e80f59b425a290a6eff502787ded"}, {"sha": "2b737334961916daee73ea018eea877f389ad0dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b737334961916daee73ea018eea877f389ad0dc", "html_url": "https://github.com/rust-lang/rust/commit/2b737334961916daee73ea018eea877f389ad0dc"}], "stats": {"total": 275, "additions": 231, "deletions": 44}, "files": [{"sha": "b9546143a054b32af67f2b88bf2ddd72cf5edfe5", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -1167,6 +1167,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"treat all errors that occur as bugs\"),\n     external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n           \"show macro backtraces even for non-local macros\"),\n+    teach: bool = (false, parse_bool, [TRACKED],\n+          \"show extended diagnostic help\"),\n     continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n           \"attempt to recover from parse errors (experimental)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n@@ -1664,8 +1666,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     let mut debugging_opts = build_debugging_options(matches, error_format);\n \n     if !debugging_opts.unstable_options && error_format == ErrorOutputType::Json(true) {\n-        early_error(ErrorOutputType::Json(false),\n-                    \"--error-format=pretty-json is unstable\");\n+        early_error(ErrorOutputType::Json(false), \"--error-format=pretty-json is unstable\");\n     }\n \n     let mut output_types = BTreeMap::new();"}, {"sha": "2765239d5e6494cc0c1d84dae5307164ba3b2025", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -860,6 +860,10 @@ impl Session {\n         // scientific.\n         16\n     }\n+\n+    pub fn teach(&self, code: &DiagnosticId) -> bool {\n+        self.opts.debugging_opts.teach && !self.parse_sess.span_diagnostic.code_emitted(code)\n+    }\n }\n \n pub fn build_session(sopts: config::Options,"}, {"sha": "2e654fe9929a6af7801755994f0dcc8147c29043", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -27,7 +27,7 @@ pub struct Diagnostic {\n     pub suggestions: Vec<CodeSuggestion>,\n }\n \n-#[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum DiagnosticId {\n     Error(String),\n     Lint(String),\n@@ -281,6 +281,10 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn get_code(&self) -> Option<DiagnosticId> {\n+        self.code.clone()\n+    }\n+\n     pub fn message(&self) -> String {\n         self.message.iter().map(|i| i.0.to_owned()).collect::<String>()\n     }"}, {"sha": "3d50c95d3f4f9857d542155d2518474ca84fcaff", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -259,6 +259,11 @@ pub struct Handler {\n     delayed_span_bug: RefCell<Option<Diagnostic>>,\n     tracked_diagnostics: RefCell<Option<Vec<Diagnostic>>>,\n \n+    // This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n+    // emitting the same diagnostic with extended help (`--teach`) twice, which\n+    // would be uneccessary repetition.\n+    tracked_diagnostic_codes: RefCell<FxHashSet<DiagnosticId>>,\n+\n     // This set contains a hash of every diagnostic that has been emitted by\n     // this handler. These hashes is used to avoid emitting the same error\n     // twice.\n@@ -317,6 +322,7 @@ impl Handler {\n             continue_after_error: Cell::new(true),\n             delayed_span_bug: RefCell::new(None),\n             tracked_diagnostics: RefCell::new(None),\n+            tracked_diagnostic_codes: RefCell::new(FxHashSet()),\n             emitted_diagnostics: RefCell::new(FxHashSet()),\n         }\n     }\n@@ -589,13 +595,25 @@ impl Handler {\n         (ret, diagnostics)\n     }\n \n+    /// `true` if a diagnostic with this code has already been emitted in this handler.\n+    ///\n+    /// Used to suppress emitting the same error multiple times with extended explanation when\n+    /// calling `-Zteach`.\n+    pub fn code_emitted(&self, code: &DiagnosticId) -> bool {\n+        self.tracked_diagnostic_codes.borrow().contains(code)\n+    }\n+\n     fn emit_db(&self, db: &DiagnosticBuilder) {\n         let diagnostic = &**db;\n \n         if let Some(ref mut list) = *self.tracked_diagnostics.borrow_mut() {\n             list.push(diagnostic.clone());\n         }\n \n+        if let Some(ref code) = diagnostic.code {\n+            self.tracked_diagnostic_codes.borrow_mut().insert(code.clone());\n+        }\n+\n         let diagnostic_hash = {\n             use std::hash::Hash;\n             let mut hasher = StableHasher::new();"}, {"sha": "48bd7b14fc96ab69439bbf7325900b5589497df3", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -281,10 +281,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                                 .emit();\n             }\n             CastError::SizedUnsizedCast => {\n-                type_error_struct!(fcx.tcx.sess, self.span, self.expr_ty, E0607,\n-                                 \"cannot cast thin pointer `{}` to fat pointer `{}`\",\n-                                 self.expr_ty,\n-                                 fcx.ty_to_string(self.cast_ty)).emit();\n+                use structured_errors::{SizedUnsizedCastError, StructuredDiagnostic};\n+                SizedUnsizedCastError::new(&fcx.tcx.sess,\n+                                           self.span,\n+                                           self.expr_ty,\n+                                           fcx.ty_to_string(self.cast_ty))\n+                    .diagnostic().emit();\n             }\n             CastError::UnknownCastPtrKind |\n             CastError::UnknownExprPtrKind => {"}, {"sha": "6147743437b8e638b5be3ad4814dcb3d27f2a0ea", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -103,6 +103,7 @@ use rustc::ty::maps::Providers;\n use rustc::ty::util::{Representability, IntTypeExt};\n use rustc::ty::layout::LayoutOf;\n use errors::{DiagnosticBuilder, DiagnosticId};\n+\n use require_c_abi_if_variadic;\n use session::{CompileIncomplete, config, Session};\n use TypeAndSubsts;\n@@ -2599,9 +2600,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // arguments which we skipped above.\n         if variadic {\n             fn variadic_error<'tcx>(s: &Session, span: Span, t: Ty<'tcx>, cast_ty: &str) {\n-                type_error_struct!(s, span, t, E0617,\n-                                   \"can't pass `{}` to variadic function, cast to `{}`\",\n-                                   t, cast_ty).emit();\n+                use structured_errors::{VariadicError, StructuredDiagnostic};\n+                VariadicError::new(s, span, t, cast_ty).diagnostic().emit();\n             }\n \n             for arg in args.iter().skip(expected_arg_count) {"}, {"sha": "bd7e200d620e6f07baa4c17b18ed6a0e421b6d17", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -123,16 +123,17 @@ use std::iter;\n // registered before they are used.\n mod diagnostics;\n \n+mod astconv;\n mod check;\n mod check_unused;\n-mod astconv;\n+mod coherence;\n mod collect;\n mod constrained_type_params;\n+mod structured_errors;\n mod impl_wf_check;\n-mod coherence;\n+mod namespace;\n mod outlives;\n mod variance;\n-mod namespace;\n \n pub struct TypeAndSubsts<'tcx> {\n     substs: &'tcx Substs<'tcx>,"}, {"sha": "afcdc7575a3cbe1c36cfc3528aea4481db0d2369", "filename": "src/librustc_typeck/structured_errors.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -0,0 +1,150 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::session::Session;\n+use syntax_pos::Span;\n+use errors::{DiagnosticId, DiagnosticBuilder};\n+use rustc::ty::{Ty, TypeFoldable};\n+\n+pub trait StructuredDiagnostic<'tcx> {\n+    fn session(&self) -> &Session;\n+\n+    fn code(&self) -> DiagnosticId;\n+\n+    fn common(&self) -> DiagnosticBuilder<'tcx>;\n+\n+    fn diagnostic(&self) -> DiagnosticBuilder<'tcx> {\n+        let err = self.common();\n+        if self.session().teach(&self.code()) {\n+            self.extended(err)\n+        } else {\n+            self.regular(err)\n+        }\n+    }\n+\n+    fn regular(&self, err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err\n+    }\n+\n+    fn extended(&self, err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err\n+    }\n+}\n+\n+pub struct VariadicError<'tcx> {\n+    sess: &'tcx Session,\n+    span: Span,\n+    t: Ty<'tcx>,\n+    cast_ty: &'tcx str,\n+}\n+\n+impl<'tcx> VariadicError<'tcx> {\n+    pub fn new(sess: &'tcx Session,\n+               span: Span,\n+               t: Ty<'tcx>,\n+               cast_ty: &'tcx str) -> VariadicError<'tcx> {\n+        VariadicError { sess, span, t, cast_ty }\n+    }\n+}\n+\n+impl<'tcx> StructuredDiagnostic<'tcx> for VariadicError<'tcx> {\n+    fn session(&self) -> &Session { self.sess }\n+\n+    fn code(&self) -> DiagnosticId {\n+        __diagnostic_used!(E0617);\n+        DiagnosticId::Error(\"E0617\".to_owned())\n+    }\n+\n+    fn common(&self) -> DiagnosticBuilder<'tcx> {\n+        let mut err = if self.t.references_error() {\n+            self.sess.diagnostic().struct_dummy()\n+        } else {\n+            self.sess.struct_span_fatal_with_code(\n+                self.span,\n+                &format!(\"can't pass `{}` to variadic function\", self.t),\n+                self.code(),\n+            )\n+        };\n+        if let Ok(snippet) = self.sess.codemap().span_to_snippet(self.span) {\n+            err.span_suggestion(self.span,\n+                                &format!(\"cast the value to `{}`\", self.cast_ty),\n+                                format!(\"{} as {}\", snippet, self.cast_ty));\n+        } else {\n+            err.help(&format!(\"cast the value to `{}`\", self.cast_ty));\n+        }\n+        err\n+    }\n+\n+    fn extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err.note(&format!(\"certain types, like `{}`, must be cast before passing them to a \\\n+                           variadic function, because of arcane ABI rules dictated by the C \\\n+                           standard\",\n+                          self.t));\n+        err\n+    }\n+}\n+\n+pub struct SizedUnsizedCastError<'tcx> {\n+    sess: &'tcx Session,\n+    span: Span,\n+    expr_ty: Ty<'tcx>,\n+    cast_ty: String,\n+}\n+\n+impl<'tcx> SizedUnsizedCastError<'tcx> {\n+    pub fn new(sess: &'tcx Session,\n+               span: Span,\n+               expr_ty: Ty<'tcx>,\n+               cast_ty: String) -> SizedUnsizedCastError<'tcx> {\n+        SizedUnsizedCastError { sess, span, expr_ty, cast_ty }\n+    }\n+}\n+\n+impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCastError<'tcx> {\n+    fn session(&self) -> &Session { self.sess }\n+\n+    fn code(&self) -> DiagnosticId {\n+        __diagnostic_used!(E0607);\n+        DiagnosticId::Error(\"E0607\".to_owned())\n+    }\n+\n+    fn common(&self) -> DiagnosticBuilder<'tcx> {\n+        if self.expr_ty.references_error() {\n+            self.sess.diagnostic().struct_dummy()\n+        } else {\n+            self.sess.struct_span_fatal_with_code(\n+                self.span,\n+                &format!(\"cannot cast thin pointer `{}` to fat pointer `{}`\",\n+                         self.expr_ty,\n+                         self.cast_ty),\n+                self.code(),\n+            )\n+        }\n+    }\n+\n+    fn extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err.help(\n+            \"Thin pointers are \\\"simple\\\" pointers: they are purely a reference to a\n+memory address.\n+\n+Fat pointers are pointers referencing \\\"Dynamically Sized Types\\\" (also\n+called DST). DST don't have a statically known size, therefore they can\n+only exist behind some kind of pointers that contain additional\n+information. Slices and trait objects are DSTs. In the case of slices,\n+the additional information the fat pointer holds is their size.\n+\n+To fix this error, don't try to cast directly between thin and fat\n+pointers.\n+\n+For more information about casts, take a look at The Book:\n+https://doc.rust-lang.org/book/first-edition/casting-between-types.html\");\n+        err\n+    }\n+}"}, {"sha": "9375fd9cade355fcbc6abab29c773d65afe23ccf", "filename": "src/test/compile-fail/E0617.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Ftest%2Fcompile-fail%2FE0617.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Ftest%2Fcompile-fail%2FE0617.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0617.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -17,16 +17,22 @@ extern {\n fn main() {\n     unsafe {\n         printf(::std::ptr::null(), 0f32);\n-        //~^ ERROR can't pass `f32` to variadic function, cast to `c_double` [E0617]\n+        //~^ ERROR can't pass `f32` to variadic function\n+        //~| HELP cast the value to `c_double`\n         printf(::std::ptr::null(), 0i8);\n-        //~^ ERROR can't pass `i8` to variadic function, cast to `c_int` [E0617]\n+        //~^ ERROR can't pass `i8` to variadic function\n+        //~| HELP cast the value to `c_int`\n         printf(::std::ptr::null(), 0i16);\n-        //~^ ERROR can't pass `i16` to variadic function, cast to `c_int` [E0617]\n+        //~^ ERROR can't pass `i16` to variadic function\n+        //~| HELP cast the value to `c_int`\n         printf(::std::ptr::null(), 0u8);\n-        //~^ ERROR can't pass `u8` to variadic function, cast to `c_uint` [E0617]\n+        //~^ ERROR can't pass `u8` to variadic function\n+        //~| HELP cast the value to `c_uint`\n         printf(::std::ptr::null(), 0u16);\n-        //~^ ERROR can't pass `u16` to variadic function, cast to `c_uint` [E0617]\n+        //~^ ERROR can't pass `u16` to variadic function\n+        //~| HELP cast the value to `c_uint`\n         printf(::std::ptr::null(), printf);\n-        //~^ ERROR can't pass `unsafe extern \"C\" fn(*const i8, ...) {printf}` to variadic function, cast to `unsafe extern \"C\" fn(*const i8, ...)` [E0617]\n+        //~^ ERROR can't pass `unsafe extern \"C\" fn(*const i8, ...) {printf}` to variadic function\n+        //~| HELP cast the value to `unsafe extern \"C\" fn(*const i8, ...)`\n     }\n }"}, {"sha": "bf9f8ecbc8097c6eecb47cfb7c1f00b145d295e0", "filename": "src/test/compile-fail/issue-32201.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Ftest%2Fcompile-fail%2Fissue-32201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Ftest%2Fcompile-fail%2Fissue-32201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32201.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -17,6 +17,7 @@ fn bar(_: *const u8) {}\n fn main() {\n     unsafe {\n         foo(0, bar);\n-        //~^ ERROR can't pass `fn(*const u8) {bar}` to variadic function, cast to `fn(*const u8)`\n+        //~^ ERROR can't pass `fn(*const u8) {bar}` to variadic function\n+        //~| HELP cast the value to `fn(*const u8)`\n     }\n }"}, {"sha": "9807952c636e1dfc521914861abee0a75bd99154", "filename": "src/test/ui/variadic-ffi-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Ftest%2Fui%2Fvariadic-ffi-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Ftest%2Fui%2Fvariadic-ffi-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariadic-ffi-3.rs?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -31,11 +31,11 @@ fn main() {\n         //~| expected type `extern \"C\" fn(isize, u8, ...)`\n         //~| found type `extern \"C\" fn(isize, u8) {bar}`\n \n-        foo(1, 2, 3f32); //~ ERROR can't pass `f32` to variadic function, cast to `c_double`\n-        foo(1, 2, true); //~ ERROR can't pass `bool` to variadic function, cast to `c_int`\n-        foo(1, 2, 1i8); //~ ERROR can't pass `i8` to variadic function, cast to `c_int`\n-        foo(1, 2, 1u8); //~ ERROR can't pass `u8` to variadic function, cast to `c_uint`\n-        foo(1, 2, 1i16); //~ ERROR can't pass `i16` to variadic function, cast to `c_int`\n-        foo(1, 2, 1u16); //~ ERROR can't pass `u16` to variadic function, cast to `c_uint`\n+        foo(1, 2, 3f32); //~ ERROR can't pass `f32` to variadic function\n+        foo(1, 2, true); //~ ERROR can't pass `bool` to variadic function\n+        foo(1, 2, 1i8); //~ ERROR can't pass `i8` to variadic function\n+        foo(1, 2, 1u8); //~ ERROR can't pass `u8` to variadic function\n+        foo(1, 2, 1i16); //~ ERROR can't pass `i16` to variadic function\n+        foo(1, 2, 1u16); //~ ERROR can't pass `u16` to variadic function\n     }\n }"}, {"sha": "54275fbc4f29f70fdfbf50812884f259547c05e7", "filename": "src/test/ui/variadic-ffi-3.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Ftest%2Fui%2Fvariadic-ffi-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6da912e2a1f8ef5df8e0669713d15258a039325f/src%2Ftest%2Fui%2Fvariadic-ffi-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariadic-ffi-3.stderr?ref=6da912e2a1f8ef5df8e0669713d15258a039325f", "patch": "@@ -34,41 +34,41 @@ error[E0308]: mismatched types\n    = note: expected type `extern \"C\" fn(isize, u8, ...)`\n               found type `extern \"C\" fn(isize, u8) {bar}`\n \n-error[E0617]: can't pass `f32` to variadic function, cast to `c_double`\n+error[E0617]: can't pass `f32` to variadic function\n   --> $DIR/variadic-ffi-3.rs:34:19\n    |\n-34 |         foo(1, 2, 3f32); //~ ERROR can't pass `f32` to variadic function, cast to `c_double`\n-   |                   ^^^^\n+34 |         foo(1, 2, 3f32); //~ ERROR can't pass `f32` to variadic function\n+   |                   ^^^^ help: cast the value to `c_double`: `3f32 as c_double`\n \n-error[E0617]: can't pass `bool` to variadic function, cast to `c_int`\n+error[E0617]: can't pass `bool` to variadic function\n   --> $DIR/variadic-ffi-3.rs:35:19\n    |\n-35 |         foo(1, 2, true); //~ ERROR can't pass `bool` to variadic function, cast to `c_int`\n-   |                   ^^^^\n+35 |         foo(1, 2, true); //~ ERROR can't pass `bool` to variadic function\n+   |                   ^^^^ help: cast the value to `c_int`: `true as c_int`\n \n-error[E0617]: can't pass `i8` to variadic function, cast to `c_int`\n+error[E0617]: can't pass `i8` to variadic function\n   --> $DIR/variadic-ffi-3.rs:36:19\n    |\n-36 |         foo(1, 2, 1i8); //~ ERROR can't pass `i8` to variadic function, cast to `c_int`\n-   |                   ^^^\n+36 |         foo(1, 2, 1i8); //~ ERROR can't pass `i8` to variadic function\n+   |                   ^^^ help: cast the value to `c_int`: `1i8 as c_int`\n \n-error[E0617]: can't pass `u8` to variadic function, cast to `c_uint`\n+error[E0617]: can't pass `u8` to variadic function\n   --> $DIR/variadic-ffi-3.rs:37:19\n    |\n-37 |         foo(1, 2, 1u8); //~ ERROR can't pass `u8` to variadic function, cast to `c_uint`\n-   |                   ^^^\n+37 |         foo(1, 2, 1u8); //~ ERROR can't pass `u8` to variadic function\n+   |                   ^^^ help: cast the value to `c_uint`: `1u8 as c_uint`\n \n-error[E0617]: can't pass `i16` to variadic function, cast to `c_int`\n+error[E0617]: can't pass `i16` to variadic function\n   --> $DIR/variadic-ffi-3.rs:38:19\n    |\n-38 |         foo(1, 2, 1i16); //~ ERROR can't pass `i16` to variadic function, cast to `c_int`\n-   |                   ^^^^\n+38 |         foo(1, 2, 1i16); //~ ERROR can't pass `i16` to variadic function\n+   |                   ^^^^ help: cast the value to `c_int`: `1i16 as c_int`\n \n-error[E0617]: can't pass `u16` to variadic function, cast to `c_uint`\n+error[E0617]: can't pass `u16` to variadic function\n   --> $DIR/variadic-ffi-3.rs:39:19\n    |\n-39 |         foo(1, 2, 1u16); //~ ERROR can't pass `u16` to variadic function, cast to `c_uint`\n-   |                   ^^^^\n+39 |         foo(1, 2, 1u16); //~ ERROR can't pass `u16` to variadic function\n+   |                   ^^^^ help: cast the value to `c_uint`: `1u16 as c_uint`\n \n error: aborting due to 10 previous errors\n "}]}