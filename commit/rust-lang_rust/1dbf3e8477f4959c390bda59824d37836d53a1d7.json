{"sha": "1dbf3e8477f4959c390bda59824d37836d53a1d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYmYzZTg0NzdmNDk1OWMzOTBiZGE1OTgyNGQzNzgzNmQ1M2ExZDc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-10T15:29:34Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-10T15:29:34Z"}, "message": "Minimal comment for visit.rs", "tree": {"sha": "c98630822bb657735176de36e13149b7bbab159a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c98630822bb657735176de36e13149b7bbab159a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dbf3e8477f4959c390bda59824d37836d53a1d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbf3e8477f4959c390bda59824d37836d53a1d7", "html_url": "https://github.com/rust-lang/rust/commit/1dbf3e8477f4959c390bda59824d37836d53a1d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dbf3e8477f4959c390bda59824d37836d53a1d7/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97576bd14995705eea1dea6cfe21295f91aa358d", "url": "https://api.github.com/repos/rust-lang/rust/commits/97576bd14995705eea1dea6cfe21295f91aa358d", "html_url": "https://github.com/rust-lang/rust/commit/97576bd14995705eea1dea6cfe21295f91aa358d"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "0d7db393cd0d9216e60cedb913877dd36fee08ce", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dbf3e8477f4959c390bda59824d37836d53a1d7/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbf3e8477f4959c390bda59824d37836d53a1d7/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=1dbf3e8477f4959c390bda59824d37836d53a1d7", "patch": "@@ -4,9 +4,15 @@ import std::option::some;\n import std::option::none;\n import util::common::span;\n \n+// Context-passing AST walker. Each overridden visit method has full control\n+// over what happens with its node, it can do its own traversal of the node's\n+// children (potentially passing in different contexts to each), call\n+// visit::visit_* to apply the default traversal algorithm (again, it can\n+// override the context), or prevent deeper traversal by doing nothing.\n+\n // Lots of redundant indirection and refcounting. Our typesystem doesn't do\n // circular types, so the visitor record can not hold functions that take\n-// visitors. A tag breaks the cycle.\n+// visitors. A vt tag is used to break the cycle.\n tag vt[E] { vtor(visitor[E]); }\n fn vt[E](&vt[E] x) -> visitor[E] {\n     alt (x) { case (vtor(?v)) { ret v; } }"}]}