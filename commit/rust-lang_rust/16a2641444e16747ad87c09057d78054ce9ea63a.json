{"sha": "16a2641444e16747ad87c09057d78054ce9ea63a", "node_id": "C_kwDOAAsO6NoAKDE2YTI2NDE0NDRlMTY3NDdhZDg3YzA5MDU3ZDc4MDU0Y2U5ZWE2M2E", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-25T17:18:19Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T17:45:59Z"}, "message": "Remove all usages of iconst.i128\n\nSupport was removed from Cranelift", "tree": {"sha": "0fa5916a4f5669290e87b33157b1b84737b5e278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa5916a4f5669290e87b33157b1b84737b5e278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16a2641444e16747ad87c09057d78054ce9ea63a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16a2641444e16747ad87c09057d78054ce9ea63a", "html_url": "https://github.com/rust-lang/rust/commit/16a2641444e16747ad87c09057d78054ce9ea63a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16a2641444e16747ad87c09057d78054ce9ea63a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6768d0dd72ddde27f7b297f1eec8e58b9eeaaedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6768d0dd72ddde27f7b297f1eec8e58b9eeaaedc", "html_url": "https://github.com/rust-lang/rust/commit/6768d0dd72ddde27f7b297f1eec8e58b9eeaaedc"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "5091c5a9fedacbb7f4dda7b4d5ab7f086f17d1d7", "filename": "src/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16a2641444e16747ad87c09057d78054ce9ea63a/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a2641444e16747ad87c09057d78054ce9ea63a/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=16a2641444e16747ad87c09057d78054ce9ea63a", "patch": "@@ -149,7 +149,7 @@ pub(crate) fn clif_int_or_float_cast(\n         }\n \n         let is_not_nan = fx.bcx.ins().fcmp(FloatCC::Equal, from, from);\n-        let zero = fx.bcx.ins().iconst(to_ty, 0);\n+        let zero = type_zero_value(&mut fx.bcx, to_ty);\n         fx.bcx.ins().select(is_not_nan, val, zero)\n     } else if from_ty.is_float() && to_ty.is_float() {\n         // float -> float"}, {"sha": "2dcd42fbd8f431833ac46b414c539e40c828f0e8", "filename": "src/common.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16a2641444e16747ad87c09057d78054ce9ea63a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a2641444e16747ad87c09057d78054ce9ea63a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=16a2641444e16747ad87c09057d78054ce9ea63a", "patch": "@@ -167,6 +167,15 @@ pub(crate) fn codegen_icmp_imm(\n     }\n }\n \n+pub(crate) fn type_zero_value(bcx: &mut FunctionBuilder<'_>, ty: Type) -> Value {\n+    if ty == types::I128 {\n+        let zero = bcx.ins().iconst(types::I64, 0);\n+        bcx.ins().iconcat(zero, zero)\n+    } else {\n+        bcx.ins().iconst(ty, 0)\n+    }\n+}\n+\n pub(crate) fn type_min_max_value(\n     bcx: &mut FunctionBuilder<'_>,\n     ty: Type,"}, {"sha": "3cbf313adf0df5a69887cdb1f0516245f2b23232", "filename": "src/discriminant.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16a2641444e16747ad87c09057d78054ce9ea63a/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a2641444e16747ad87c09057d78054ce9ea63a/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=16a2641444e16747ad87c09057d78054ce9ea63a", "patch": "@@ -278,8 +278,14 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n                 fx.bcx.ins().iadd(tagged_discr, delta)\n             };\n \n-            let untagged_variant =\n-                fx.bcx.ins().iconst(cast_to, i64::from(untagged_variant.as_u32()));\n+            let untagged_variant = if cast_to == types::I128 {\n+                let zero = fx.bcx.ins().iconst(types::I64, 0);\n+                let untagged_variant =\n+                    fx.bcx.ins().iconst(types::I64, i64::from(untagged_variant.as_u32()));\n+                fx.bcx.ins().iconcat(untagged_variant, zero)\n+            } else {\n+                fx.bcx.ins().iconst(cast_to, i64::from(untagged_variant.as_u32()))\n+            };\n             let discr = fx.bcx.ins().select(is_niche, tagged_discr, untagged_variant);\n             let res = CValue::by_val(discr, dest_layout);\n             dest.write_cvalue(fx, res);"}, {"sha": "14f5e9187399fac76f2a64d0147f2f647a904929", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16a2641444e16747ad87c09057d78054ce9ea63a/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16a2641444e16747ad87c09057d78054ce9ea63a/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=16a2641444e16747ad87c09057d78054ce9ea63a", "patch": "@@ -713,7 +713,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n             let res_type =\n                 Type::int_with_byte_size(u16::try_from(expected_bytes).unwrap()).unwrap();\n-            let mut res = fx.bcx.ins().iconst(res_type, 0);\n+            let mut res = type_zero_value(&mut fx.bcx, res_type);\n \n             let lanes = match fx.tcx.sess.target.endian {\n                 Endian::Big => Box::new(0..lane_count) as Box<dyn Iterator<Item = u64>>,"}]}