{"sha": "85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZGE5OGRiNGFlMjI4ZjhiM2QxYjFlYmY3MDJiMGZlYTk5YmQ3ZTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-10T22:16:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-12T23:33:06Z"}, "message": "continue to annotate functions as unsafe where neccessary", "tree": {"sha": "ffb141dc35ef1d93eebe1800a9322c5d55361898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb141dc35ef1d93eebe1800a9322c5d55361898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6", "html_url": "https://github.com/rust-lang/rust/commit/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2cd33df72cfe9648b668d8822a785dc81bee908", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2cd33df72cfe9648b668d8822a785dc81bee908", "html_url": "https://github.com/rust-lang/rust/commit/f2cd33df72cfe9648b668d8822a785dc81bee908"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "fbf1f4b78813db8c8b59682f1d91edeef28c9ee3", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6", "patch": "@@ -43,7 +43,7 @@ fn llvm_err(sess: session::session, msg: str) {\n     }\n }\n \n-fn link_intrinsics(sess: session::session, llmod: ModuleRef) {\n+fn link_intrinsics(sess: session::session, llmod: ModuleRef) unsafe {\n     let path = alt filesearch::search(\n         sess.filesearch(),\n         bind filesearch::pick_file(\"intrinsics.bc\", _)) {\n@@ -90,7 +90,8 @@ mod write {\n         } else { stem = str::substr(output_path, 0u, dot_pos as uint); }\n         ret stem + \".\" + extension;\n     }\n-    fn run_passes(sess: session::session, llmod: ModuleRef, output: str) {\n+    fn run_passes(sess: session::session, llmod: ModuleRef, output: str)\n+       unsafe {\n         let opts = sess.get_opts();\n         if opts.time_llvm_passes { llvm::LLVMRustEnableTimePasses(); }\n         link_intrinsics(sess, llmod);"}, {"sha": "8a6464cc1cfdc20cce9d5828e00f588bbb719123", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6", "patch": "@@ -925,7 +925,7 @@ fn type_to_str(names: type_names, ty: TypeRef) -> str {\n }\n \n fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n-   str {\n+   str unsafe {\n \n     if names.type_has_name(ty) { ret names.get_name(ty); }\n \n@@ -1003,7 +1003,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n     }\n }\n \n-fn float_width(llt: TypeRef) -> uint {\n+fn float_width(llt: TypeRef) -> uint unsafe {\n     ret alt llvm::LLVMGetTypeKind(llt) {\n           1 { 32u }\n           2 { 64u }\n@@ -1013,64 +1013,62 @@ fn float_width(llt: TypeRef) -> uint {\n         };\n }\n \n-fn fn_ty_param_tys(fn_ty: TypeRef) -> [TypeRef] {\n+fn fn_ty_param_tys(fn_ty: TypeRef) -> [TypeRef] unsafe {\n     let args = vec::init_elt(0 as TypeRef, llvm::LLVMCountParamTypes(fn_ty));\n-    unsafe {\n-        llvm::LLVMGetParamTypes(fn_ty, vec::to_ptr(args));\n-    }\n+    llvm::LLVMGetParamTypes(fn_ty, vec::to_ptr(args));\n     ret args;\n }\n \n \n /* Memory-managed interface to target data. */\n \n-resource target_data_res(TD: TargetDataRef) {\n+resource target_data_res(TD: TargetDataRef) unsafe {\n     llvm::LLVMDisposeTargetData(TD);\n }\n \n type target_data = {lltd: TargetDataRef, dtor: @target_data_res};\n \n-fn mk_target_data(string_rep: str) -> target_data {\n+fn mk_target_data(string_rep: str) -> target_data unsafe {\n     let lltd =\n         str::as_buf(string_rep, {|buf| llvm::LLVMCreateTargetData(buf) });\n     ret {lltd: lltd, dtor: @target_data_res(lltd)};\n }\n \n /* Memory-managed interface to pass managers. */\n \n-resource pass_manager_res(PM: PassManagerRef) {\n+resource pass_manager_res(PM: PassManagerRef) unsafe {\n     llvm::LLVMDisposePassManager(PM);\n }\n \n type pass_manager = {llpm: PassManagerRef, dtor: @pass_manager_res};\n \n-fn mk_pass_manager() -> pass_manager {\n+fn mk_pass_manager() -> pass_manager unsafe {\n     let llpm = llvm::LLVMCreatePassManager();\n     ret {llpm: llpm, dtor: @pass_manager_res(llpm)};\n }\n \n /* Memory-managed interface to object files. */\n \n-resource object_file_res(ObjectFile: ObjectFileRef) {\n+resource object_file_res(ObjectFile: ObjectFileRef) unsafe {\n     llvm::LLVMDisposeObjectFile(ObjectFile);\n }\n \n type object_file = {llof: ObjectFileRef, dtor: @object_file_res};\n \n-fn mk_object_file(llmb: MemoryBufferRef) -> object_file {\n+fn mk_object_file(llmb: MemoryBufferRef) -> object_file unsafe {\n     let llof = llvm::LLVMCreateObjectFile(llmb);\n     ret {llof: llof, dtor: @object_file_res(llof)};\n }\n \n /* Memory-managed interface to section iterators. */\n \n-resource section_iter_res(SI: SectionIteratorRef) {\n+resource section_iter_res(SI: SectionIteratorRef) unsafe {\n     llvm::LLVMDisposeSectionIterator(SI);\n }\n \n type section_iter = {llsi: SectionIteratorRef, dtor: @section_iter_res};\n \n-fn mk_section_iter(llof: ObjectFileRef) -> section_iter {\n+fn mk_section_iter(llof: ObjectFileRef) -> section_iter unsafe {\n     let llsi = llvm::LLVMGetSections(llof);\n     ret {llsi: llsi, dtor: @section_iter_res(llsi)};\n }"}, {"sha": "6a74d044bfb1dbc022ef11a78b6c48c268fae5d1", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6", "patch": "@@ -70,7 +70,7 @@ fn run(handle: handle, lib_path: str, prog: str, args: [str],\n     ret {status: status, out: output, err: errput};\n }\n \n-fn writeclose(fd: int, s: option::t<str>) {\n+fn writeclose(fd: int, s: option::t<str>) unsafe {\n     if option::is_some(s) {\n         let writer = io::new_writer(io::fd_buf_writer(fd, option::none));\n         writer.write_str(option::get(s));"}, {"sha": "ac829f90e5ff776acadaea5b8830280c4c053dc0", "filename": "src/test/stdtest/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Ftest%2Fstdtest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Ftest%2Fstdtest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fptr.rs?ref=85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6", "patch": "@@ -5,7 +5,7 @@ import std::unsafe;\n type pair = {mutable fst: int, mutable snd: int};\n \n #[test]\n-fn test() {\n+fn test() unsafe {\n     let p = {mutable fst: 10, mutable snd: 20};\n     let pptr: *mutable pair = ptr::addr_of(p);\n     let iptr: *mutable int = unsafe::reinterpret_cast(pptr);"}, {"sha": "15bcf4e53200786a40d36146ec7d617864ad8097", "filename": "src/test/stdtest/run.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Ftest%2Fstdtest%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Ftest%2Fstdtest%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Frun.rs?ref=85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6", "patch": "@@ -23,7 +23,7 @@ fn test_leaks() {\n fn test_leaks() { }\n \n #[test]\n-fn test_pipes() {\n+fn test_pipes() unsafe {\n     let pipe_in = os::pipe();\n     let pipe_out = os::pipe();\n     let pipe_err = os::pipe();\n@@ -45,14 +45,14 @@ fn test_pipes() {\n     log actual;\n     assert (expected == actual);\n \n-    fn writeclose(fd: int, s: str) {\n+    fn writeclose(fd: int, s: str) unsafe {\n         let writer = io::new_writer(io::fd_buf_writer(fd, option::none));\n         writer.write_str(s);\n \n         os::libc::close(fd);\n     }\n \n-    fn readclose(fd: int) -> str {\n+    fn readclose(fd: int) -> str unsafe {\n         // Copied from run::program_output\n         let file = os::fd_FILE(fd);\n         let reader = io::new_reader(io::FILE_buf_reader(file, option::none));\n@@ -67,7 +67,7 @@ fn test_pipes() {\n }\n \n #[test]\n-fn waitpid() {\n+fn waitpid() unsafe {\n     let pid = run::spawn_process(\"false\", [], 0, 0, 0);\n     let status = run::waitpid(pid);\n     assert status == 1;"}, {"sha": "547adba7bf56e9f34ab592087855a0b4fbd373a3", "filename": "src/test/stdtest/sys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Ftest%2Fstdtest%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6/src%2Ftest%2Fstdtest%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsys.rs?ref=85da98db4ae228f8b3d1b1ebf702b0fea99bd7e6", "patch": "@@ -1,4 +1,4 @@\n import std::sys;\n \n #[test]\n-fn last_os_error() { log sys::rustrt::last_os_error(); }\n+fn last_os_error() unsafe { log sys::rustrt::last_os_error(); }"}]}