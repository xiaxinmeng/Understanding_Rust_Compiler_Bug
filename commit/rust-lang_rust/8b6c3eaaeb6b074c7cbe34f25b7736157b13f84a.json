{"sha": "8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNmMzZWFhZWI2YjA3NGM3Y2JlMzRmMjViNzczNjE1N2IxM2Y4NGE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-07T12:17:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-07T12:17:28Z"}, "message": "Merge #9164\n\n9164: internal: Reduce the number of direct fields in `CompletionContext` some more r=Veykril a=Veykril\n\nDoesn't make the code much simpler yet.\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "0fa5ba3bf62566d296441ccb414f294aa2cb343c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa5ba3bf62566d296441ccb414f294aa2cb343c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvg5YCRBK7hj4Ov3rIwAAaDUIABqR0i1zZUOFL4dQku2VJ+E/\n+GhLdrA/KY0Vm3C4RDLqe95vz/wWbchZwH7+/9VyQWldKzaL5UHgCElXyEi72KAA\nr+IH1wf4mL+ixsUbt5hPrS41XPZX5u3OzXCyHIXosoiQDOBrJdRCeqZpfvo6G4du\nn0NWq1D92zkt8RMKBeIbul7gt3rIQh8wIGMSJ6+iDaisjsmxtdpBo16YkQXWokk8\nv+CY/Wj8IYK835uUeseN2aguJ6+fUtOQ10OfWxiwbj0/j9bkiprGIgs5mMF6s+qT\n2D2Z3yekORV8PG9TwLnmlSK33SdZqPPdqizOV8G24WCrFibJ7w0MYbegZHaadc8=\n=lQ7o\n-----END PGP SIGNATURE-----\n", "payload": "tree 0fa5ba3bf62566d296441ccb414f294aa2cb343c\nparent 5f7fc5ae68ff5debead06e377153e100b6e9951d\nparent 4eabcb2c01209065a231e616ba646ba63f68f00d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623068248 +0000\ncommitter GitHub <noreply@github.com> 1623068248 +0000\n\nMerge #9164\n\n9164: internal: Reduce the number of direct fields in `CompletionContext` some more r=Veykril a=Veykril\n\nDoesn't make the code much simpler yet.\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "html_url": "https://github.com/rust-lang/rust/commit/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f7fc5ae68ff5debead06e377153e100b6e9951d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7fc5ae68ff5debead06e377153e100b6e9951d", "html_url": "https://github.com/rust-lang/rust/commit/5f7fc5ae68ff5debead06e377153e100b6e9951d"}, {"sha": "4eabcb2c01209065a231e616ba646ba63f68f00d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eabcb2c01209065a231e616ba646ba63f68f00d", "html_url": "https://github.com/rust-lang/rust/commit/4eabcb2c01209065a231e616ba646ba63f68f00d"}], "stats": {"total": 183, "additions": 108, "deletions": 75}, "files": [{"sha": "8ad57a0692aa2ba2f266ee0805f80bc094efb747", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -4,7 +4,7 @@ use either::Either;\n use hir::{HasVisibility, ScopeDef};\n use rustc_hash::FxHashSet;\n \n-use crate::{context::CompletionContext, Completions};\n+use crate::{context::CompletionContext, patterns::ImmediateLocation, Completions};\n \n /// Complete dot accesses, i.e. fields or methods.\n pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -18,7 +18,7 @@ pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n         _ => return,\n     };\n \n-    if ctx.is_call {\n+    if matches!(ctx.completion_location, Some(ImmediateLocation::MethodCall { .. })) {\n         cov_mark::hit!(test_no_struct_field_completion_for_method_call);\n     } else {\n         complete_fields(ctx, &receiver_ty, |field, ty| match field {\n@@ -33,7 +33,7 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.config.enable_self_on_the_fly {\n         return;\n     }\n-    if !ctx.is_trivial_path || ctx.is_path_disallowed() {\n+    if !ctx.is_trivial_path() || ctx.is_path_disallowed() {\n         return;\n     }\n     ctx.scope.process_all_names(&mut |name, def| {"}, {"sha": "7bf47bf7571eac73477bde674d613c433f3b7b93", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -161,13 +161,13 @@ pub(crate) fn position_for_import<'a>(\n ) -> Option<&'a SyntaxNode> {\n     Some(match import_candidate {\n         Some(ImportCandidate::Path(_)) => ctx.name_ref_syntax.as_ref()?.syntax(),\n-        Some(ImportCandidate::TraitAssocItem(_)) => ctx.path_qual.as_ref()?.syntax(),\n+        Some(ImportCandidate::TraitAssocItem(_)) => ctx.path_qual()?.syntax(),\n         Some(ImportCandidate::TraitMethod(_)) => ctx.dot_receiver()?.syntax(),\n         None => ctx\n             .name_ref_syntax\n             .as_ref()\n             .map(|name_ref| name_ref.syntax())\n-            .or_else(|| ctx.path_qual.as_ref().map(|path| path.syntax()))\n+            .or_else(|| ctx.path_qual().map(|path| path.syntax()))\n             .or_else(|| ctx.dot_receiver().map(|expr| expr.syntax()))?,\n     })\n }\n@@ -190,7 +190,7 @@ fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAs\n         };\n         let assets_for_path = ImportAssets::for_fuzzy_path(\n             current_module,\n-            ctx.path_qual.clone(),\n+            ctx.path_qual().cloned(),\n             fuzzy_name,\n             &ctx.sema,\n             approximate_node,"}, {"sha": "0ca97a0e44d80d33c9eb1e080fb9ffa4cb1000cf", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -19,11 +19,12 @@ pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n     };\n \n     if ctx.use_item_syntax.is_some() {\n-        if ctx.path_qual.is_none() {\n+        let qual = ctx.path_qual();\n+        if qual.is_none() {\n             kw_completion(\"crate::\").add_to(acc);\n         }\n         kw_completion(\"self\").add_to(acc);\n-        if iter::successors(ctx.path_qual.clone(), |p| p.qualifier())\n+        if iter::successors(qual.cloned(), |p| p.qualifier())\n             .all(|p| p.segment().and_then(|s| s.super_token()).is_some())\n         {\n             kw_completion(\"super::\").add_to(acc);\n@@ -128,7 +129,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     }\n \n     if ctx.in_loop_body {\n-        if ctx.can_be_stmt {\n+        if ctx.can_be_stmt() {\n             add_keyword(\"continue\", \"continue;\");\n             add_keyword(\"break\", \"break;\");\n         } else {\n@@ -137,7 +138,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         }\n     }\n \n-    if !ctx.is_trivial_path {\n+    if !ctx.is_trivial_path() {\n         return;\n     }\n     let fn_def = match &ctx.function_def {\n@@ -147,7 +148,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n \n     add_keyword(\n         \"return\",\n-        match (ctx.can_be_stmt, fn_def.ret_type().is_some()) {\n+        match (ctx.can_be_stmt(), fn_def.ret_type().is_some()) {\n             (true, true) => \"return $0;\",\n             (true, false) => \"return;\",\n             (false, true) => \"return $0\","}, {"sha": "86eb2171424bab8a72e873085ba551ea3d23a4bb", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n \n     let (dot_receiver, receiver_is_ambiguous_float_literal) = match &ctx.completion_location {\n-        Some(ImmediateLocation::MethodCall { receiver: Some(it) }) => (it, false),\n+        Some(ImmediateLocation::MethodCall { receiver: Some(it), .. }) => (it, false),\n         Some(ImmediateLocation::FieldAccess {\n             receiver: Some(it),\n             receiver_is_ambiguous_float_literal,"}, {"sha": "c072de7b57bd39ad4568bced7f5125956659d1f2", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -10,8 +10,8 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n     if ctx.is_path_disallowed() || ctx.expects_item() {\n         return;\n     }\n-    let path = match &ctx.path_qual {\n-        Some(path) => path.clone(),\n+    let path = match ctx.path_qual() {\n+        Some(path) => path,\n         None => return,\n     };\n "}, {"sha": "59a338e7bb14973cd4d809715fd4a2f10ec93223", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -14,15 +14,15 @@ fn snippet(ctx: &CompletionContext, cap: SnippetCap, label: &str, snippet: &str)\n }\n \n pub(crate) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !(ctx.is_trivial_path && ctx.function_def.is_some()) {\n+    if !(ctx.is_trivial_path() && ctx.function_def.is_some()) {\n         return;\n     }\n     let cap = match ctx.config.snippet_cap {\n         Some(it) => it,\n         None => return,\n     };\n \n-    if ctx.can_be_stmt {\n+    if ctx.can_be_stmt() {\n         snippet(ctx, cap, \"pd\", \"eprintln!(\\\"$0 = {:?}\\\", $0);\").add_to(acc);\n         snippet(ctx, cap, \"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n     }"}, {"sha": "f321ed52bd07baaf4a93854c98c1a44576114562", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -5,7 +5,7 @@ use hir::ScopeDef;\n use crate::{CompletionContext, Completions};\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_trivial_path {\n+    if !ctx.is_trivial_path() {\n         return;\n     }\n     if ctx.is_path_disallowed() || ctx.expects_item() {"}, {"sha": "20e033d314f1f4b40c97bcd640e7b9c9f1781030", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 71, "deletions": 49, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -29,6 +29,28 @@ pub(crate) enum PatternRefutability {\n     Irrefutable,\n }\n \n+#[derive(Debug)]\n+pub(crate) struct PathCompletionContext {\n+    /// If this is a call with () already there\n+    call_kind: Option<CallKind>,\n+    /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n+    pub(super) is_trivial_path: bool,\n+    /// If not a trivial path, the prefix (qualifier).\n+    pub(super) path_qual: Option<ast::Path>,\n+    pub(super) is_path_type: bool,\n+    pub(super) has_type_args: bool,\n+    /// `true` if we are a statement or a last expr in the block.\n+    pub(super) can_be_stmt: bool,\n+    /// `true` if we expect an expression at the cursor position.\n+    pub(super) is_expr: bool,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub(crate) enum CallKind {\n+    Pat,\n+    Mac,\n+    Expr,\n+}\n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n@@ -68,24 +90,9 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) prev_sibling: Option<ImmediatePrevSibling>,\n     pub(super) attribute_under_caret: Option<ast::Attr>,\n \n+    pub(super) path_context: Option<PathCompletionContext>,\n     /// FIXME: `ActiveParameter` is string-based, which is very very wrong\n     pub(super) active_parameter: Option<ActiveParameter>,\n-    /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n-    pub(super) is_trivial_path: bool,\n-    /// If not a trivial path, the prefix (qualifier).\n-    pub(super) path_qual: Option<ast::Path>,\n-    /// `true` if we are a statement or a last expr in the block.\n-    pub(super) can_be_stmt: bool,\n-    /// `true` if we expect an expression at the cursor position.\n-    pub(super) is_expr: bool,\n-    /// If this is a call (method or function) in particular, i.e. the () are already there.\n-    pub(super) is_call: bool,\n-    /// Like `is_call`, but for tuple patterns.\n-    pub(super) is_pattern_call: bool,\n-    /// If this is a macro call, i.e. the () are already there.\n-    pub(super) is_macro_call: bool,\n-    pub(super) is_path_type: bool,\n-    pub(super) has_type_args: bool,\n     pub(super) locals: Vec<(String, Local)>,\n \n     pub(super) previous_token: Option<SyntaxToken>,\n@@ -149,15 +156,7 @@ impl<'a> CompletionContext<'a> {\n             is_label_ref: false,\n             is_param: false,\n             is_pat_or_const: None,\n-            is_trivial_path: false,\n-            path_qual: None,\n-            can_be_stmt: false,\n-            is_expr: false,\n-            is_call: false,\n-            is_pattern_call: false,\n-            is_macro_call: false,\n-            is_path_type: false,\n-            has_type_args: false,\n+            path_context: None,\n             previous_token: None,\n             in_loop_body: false,\n             completion_location: None,\n@@ -250,14 +249,14 @@ impl<'a> CompletionContext<'a> {\n     pub(crate) fn has_dot_receiver(&self) -> bool {\n         matches!(\n             &self.completion_location,\n-            Some(ImmediateLocation::FieldAccess { receiver, .. }) | Some(ImmediateLocation::MethodCall { receiver })\n+            Some(ImmediateLocation::FieldAccess { receiver, .. }) | Some(ImmediateLocation::MethodCall { receiver,.. })\n                 if receiver.is_some()\n         )\n     }\n \n     pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n         match &self.completion_location {\n-            Some(ImmediateLocation::MethodCall { receiver })\n+            Some(ImmediateLocation::MethodCall { receiver, .. })\n             | Some(ImmediateLocation::FieldAccess { receiver, .. }) => receiver.as_ref(),\n             _ => None,\n         }\n@@ -275,11 +274,6 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.completion_location, Some(ImmediateLocation::ItemList))\n     }\n \n-    //         fn expects_value(&self) -> bool {\n-    pub(crate) fn expects_expression(&self) -> bool {\n-        self.is_expr\n-    }\n-\n     pub(crate) fn has_block_expr_parent(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::BlockExpr))\n     }\n@@ -316,6 +310,26 @@ impl<'a> CompletionContext<'a> {\n         ) || self.attribute_under_caret.is_some()\n     }\n \n+    pub(crate) fn expects_expression(&self) -> bool {\n+        self.path_context.as_ref().map_or(false, |it| it.is_expr)\n+    }\n+\n+    pub(crate) fn path_call_kind(&self) -> Option<CallKind> {\n+        self.path_context.as_ref().and_then(|it| it.call_kind)\n+    }\n+\n+    pub(crate) fn is_trivial_path(&self) -> bool {\n+        self.path_context.as_ref().map_or(false, |it| it.is_trivial_path)\n+    }\n+\n+    pub(crate) fn path_qual(&self) -> Option<&ast::Path> {\n+        self.path_context.as_ref().and_then(|it| it.path_qual.as_ref())\n+    }\n+\n+    pub(crate) fn can_be_stmt(&self) -> bool {\n+        self.path_context.as_ref().map_or(false, |it| it.can_be_stmt)\n+    }\n+\n     fn fill_impl_def(&mut self) {\n         self.impl_def = self\n             .sema\n@@ -568,22 +582,32 @@ impl<'a> CompletionContext<'a> {\n         };\n \n         if let Some(segment) = ast::PathSegment::cast(parent) {\n+            let path_ctx = self.path_context.get_or_insert(PathCompletionContext {\n+                call_kind: None,\n+                is_trivial_path: false,\n+                path_qual: None,\n+                has_type_args: false,\n+                is_path_type: false,\n+                can_be_stmt: false,\n+                is_expr: false,\n+            });\n             let path = segment.parent_path();\n-            self.is_call = path\n-                .syntax()\n-                .parent()\n-                .and_then(ast::PathExpr::cast)\n-                .and_then(|it| it.syntax().parent().and_then(ast::CallExpr::cast))\n-                .is_some();\n-            self.is_macro_call = path.syntax().parent().and_then(ast::MacroCall::cast).is_some();\n-            self.is_pattern_call =\n-                path.syntax().parent().and_then(ast::TupleStructPat::cast).is_some();\n \n-            self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n-            self.has_type_args = segment.generic_arg_list().is_some();\n+            if let Some(p) = path.syntax().parent() {\n+                path_ctx.call_kind = match_ast! {\n+                    match p {\n+                        ast::PathExpr(it) => it.syntax().parent().and_then(ast::CallExpr::cast).map(|_| CallKind::Expr),\n+                        ast::MacroCall(_it) => Some(CallKind::Mac),\n+                        ast::TupleStructPat(_it) => Some(CallKind::Pat),\n+                        _ => None\n+                    }\n+                };\n+            }\n+            path_ctx.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n+            path_ctx.has_type_args = segment.generic_arg_list().is_some();\n \n             if let Some(path) = path_or_use_tree_qualifier(&path) {\n-                self.path_qual = path\n+                path_ctx.path_qual = path\n                     .segment()\n                     .and_then(|it| {\n                         find_node_with_range::<ast::PathSegment>(\n@@ -601,11 +625,11 @@ impl<'a> CompletionContext<'a> {\n                 }\n             }\n \n-            self.is_trivial_path = true;\n+            path_ctx.is_trivial_path = true;\n \n             // Find either enclosing expr statement (thing with `;`) or a\n             // block. If block, check that we are the last expr.\n-            self.can_be_stmt = name_ref\n+            path_ctx.can_be_stmt = name_ref\n                 .syntax()\n                 .ancestors()\n                 .find_map(|node| {\n@@ -621,10 +645,8 @@ impl<'a> CompletionContext<'a> {\n                     None\n                 })\n                 .unwrap_or(false);\n-            self.is_expr = path.syntax().parent().and_then(ast::PathExpr::cast).is_some();\n+            path_ctx.is_expr = path.syntax().parent().and_then(ast::PathExpr::cast).is_some();\n         }\n-        self.is_call |=\n-            matches!(self.completion_location, Some(ImmediateLocation::MethodCall { .. }));\n     }\n }\n "}, {"sha": "251d76fe9a928cdac249d62b74676483a4ffb48f", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -4,7 +4,7 @@ use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{\n     algo::non_trivia_sibling,\n-    ast::{self, LoopBodyOwner},\n+    ast::{self, ArgListOwner, LoopBodyOwner},\n     match_ast, AstNode, Direction, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n@@ -39,6 +39,7 @@ pub(crate) enum ImmediateLocation {\n     // Original file ast node\n     MethodCall {\n         receiver: Option<ast::Expr>,\n+        has_parens: bool,\n     },\n     // Original file ast node\n     FieldAccess {\n@@ -204,6 +205,7 @@ pub(crate) fn determine_location(\n                     .receiver()\n                     .map(|e| e.syntax().text_range())\n                     .and_then(|r| find_node_with_range(original_file, r)),\n+                has_parens: it.arg_list().map_or(false, |it| it.l_paren_token().is_some())\n             },\n             _ => return None,\n         }"}, {"sha": "750694432ea1790d494eb406483c29024ead5d02", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -275,8 +275,12 @@ impl<'a> Render<'a> {\n         };\n \n         // Add `<>` for generic types\n-        if self.ctx.completion.is_path_type\n-            && !self.ctx.completion.has_type_args\n+        if self\n+            .ctx\n+            .completion\n+            .path_context\n+            .as_ref()\n+            .map_or(false, |it| it.is_path_type && !it.has_type_args)\n             && self.ctx.completion.config.add_call_parenthesis\n         {\n             if let Some(cap) = self.ctx.snippet_cap() {"}, {"sha": "c54752d30b4aedf1d6a9ddac556232d99b3506b7", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -2,7 +2,7 @@\n \n use itertools::Itertools;\n \n-use crate::{item::Builder, CompletionContext};\n+use crate::{context::CallKind, item::Builder, patterns::ImmediateLocation, CompletionContext};\n \n #[derive(Debug)]\n pub(super) enum Params {\n@@ -32,10 +32,12 @@ impl Builder {\n             cov_mark::hit!(no_parens_in_use_item);\n             return false;\n         }\n-        if ctx.is_pattern_call {\n-            return false;\n-        }\n-        if ctx.is_call {\n+        if matches!(ctx.path_call_kind(), Some(CallKind::Expr) | Some(CallKind::Pat))\n+            | matches!(\n+                ctx.completion_location,\n+                Some(ImmediateLocation::MethodCall { has_parens: true, .. })\n+            )\n+        {\n             return false;\n         }\n "}, {"sha": "429d937c8ea875a433d45b1632c8ce4b00a53d0f", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=8b6c3eaaeb6b074c7cbe34f25b7736157b13f84a", "patch": "@@ -5,6 +5,7 @@ use ide_db::SymbolKind;\n use syntax::display::macro_label;\n \n use crate::{\n+    context::CallKind,\n     item::{CompletionItem, CompletionKind, ImportEdit},\n     render::RenderContext,\n };\n@@ -68,7 +69,8 @@ impl<'a> MacroRender<'a> {\n     }\n \n     fn needs_bang(&self) -> bool {\n-        self.ctx.completion.use_item_syntax.is_none() && !self.ctx.completion.is_macro_call\n+        self.ctx.completion.use_item_syntax.is_none()\n+            && !matches!(self.ctx.completion.path_call_kind(), Some(CallKind::Mac))\n     }\n \n     fn label(&self) -> String {"}]}