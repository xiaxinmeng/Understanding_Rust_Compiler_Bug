{"sha": "3ecde6f5db72c0a99824ec91f57411442026141d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlY2RlNmY1ZGI3MmMwYTk5ODI0ZWM5MWY1NzQxMTQ0MjAyNjE0MWQ=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-08T15:01:53Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-12T12:34:29Z"}, "message": "Directly intern allocations so that we can write a `Lift` impl for them", "tree": {"sha": "2318ab57058cf015b3cf4f9b620065558c3d87d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2318ab57058cf015b3cf4f9b620065558c3d87d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ecde6f5db72c0a99824ec91f57411442026141d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ecde6f5db72c0a99824ec91f57411442026141d", "html_url": "https://github.com/rust-lang/rust/commit/3ecde6f5db72c0a99824ec91f57411442026141d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ecde6f5db72c0a99824ec91f57411442026141d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "914df2a493a0f14e1b74db8618016c4de2feedce", "url": "https://api.github.com/repos/rust-lang/rust/commits/914df2a493a0f14e1b74db8618016c4de2feedce", "html_url": "https://github.com/rust-lang/rust/commit/914df2a493a0f14e1b74db8618016c4de2feedce"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "7fbd75ca165dff43e6b79853eb5f0f50b0236ba5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3ecde6f5db72c0a99824ec91f57411442026141d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ecde6f5db72c0a99824ec91f57411442026141d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3ecde6f5db72c0a99824ec91f57411442026141d", "patch": "@@ -94,6 +94,8 @@ pub struct CtxtInterners<'tcx> {\n     projs: InternedSet<'tcx, List<ProjectionKind>>,\n     place_elems: InternedSet<'tcx, List<PlaceElem<'tcx>>>,\n     const_: InternedSet<'tcx, Const<'tcx>>,\n+    /// Const allocations.\n+    allocation: InternedSet<'tcx, Allocation>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -111,6 +113,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n             projs: Default::default(),\n             place_elems: Default::default(),\n             const_: Default::default(),\n+            allocation: Default::default(),\n         }\n     }\n \n@@ -1013,9 +1016,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes\n     const_stability_interner: ShardedHashMap<&'tcx attr::ConstStability, ()>,\n \n-    /// Stores the value of constants (and deduplicates the actual memory)\n-    allocation_interner: ShardedHashMap<&'tcx Allocation, ()>,\n-\n     /// Stores memory for globals (statics/consts).\n     pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,\n \n@@ -1058,7 +1058,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn intern_const_alloc(self, alloc: Allocation) -> &'tcx Allocation {\n-        self.allocation_interner.intern(alloc, |alloc| self.arena.alloc(alloc))\n+        self.interners\n+            .allocation\n+            .intern(alloc, |alloc| Interned(self.interners.arena.alloc(alloc)))\n+            .0\n     }\n \n     /// Allocates a read-only byte or string literal for `mir::interpret`.\n@@ -1174,7 +1177,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             layout_interner: Default::default(),\n             stability_interner: Default::default(),\n             const_stability_interner: Default::default(),\n-            allocation_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n             output_filenames: Arc::new(output_filenames.clone()),\n         }\n@@ -1610,6 +1612,7 @@ macro_rules! nop_list_lift {\n nop_lift! {type_; Ty<'a> => Ty<'tcx>}\n nop_lift! {region; Region<'a> => Region<'tcx>}\n nop_lift! {const_; &'a Const<'a> => &'tcx Const<'tcx>}\n+nop_lift! {allocation; &'a Allocation => &'tcx Allocation}\n nop_lift! {predicate; &'a PredicateInner<'a> => &'tcx PredicateInner<'tcx>}\n \n nop_list_lift! {type_list; Ty<'a> => Ty<'tcx>}\n@@ -1900,7 +1903,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     \"Const Stability interner: #{}\",\n                     self.0.const_stability_interner.len()\n                 )?;\n-                writeln!(fmt, \"Allocation interner: #{}\", self.0.allocation_interner.len())?;\n+                writeln!(fmt, \"Allocation interner: #{}\", self.0.interners.allocation.len())?;\n                 writeln!(fmt, \"Layout interner: #{}\", self.0.layout_interner.len())?;\n \n                 Ok(())\n@@ -2001,6 +2004,26 @@ impl<'tcx> Borrow<Const<'tcx>> for Interned<'tcx, Const<'tcx>> {\n     }\n }\n \n+impl<'tcx> Borrow<Allocation> for Interned<'tcx, Allocation> {\n+    fn borrow<'a>(&'a self) -> &'a Allocation {\n+        &self.0\n+    }\n+}\n+\n+impl<'tcx> PartialEq for Interned<'tcx, Allocation> {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.0 == other.0\n+    }\n+}\n+\n+impl<'tcx> Eq for Interned<'tcx, Allocation> {}\n+\n+impl<'tcx> Hash for Interned<'tcx, Allocation> {\n+    fn hash<H: Hasher>(&self, s: &mut H) {\n+        self.0.hash(s)\n+    }\n+}\n+\n macro_rules! direct_interners {\n     ($($name:ident: $method:ident($ty:ty),)+) => {\n         $(impl<'tcx> PartialEq for Interned<'tcx, $ty> {"}]}