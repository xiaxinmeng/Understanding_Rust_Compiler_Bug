{"sha": "8cef018d52fe71824498a4c8f9e1ece074083586", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZWYwMThkNTJmZTcxODI0NDk4YTRjOGY5ZTFlY2UwNzQwODM1ODY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-27T18:56:48Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-27T18:56:48Z"}, "message": "Comments and formatting", "tree": {"sha": "fec5c21d30ffcf3ffe0f81c7d0c4cbcd2d56712c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fec5c21d30ffcf3ffe0f81c7d0c4cbcd2d56712c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cef018d52fe71824498a4c8f9e1ece074083586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cef018d52fe71824498a4c8f9e1ece074083586", "html_url": "https://github.com/rust-lang/rust/commit/8cef018d52fe71824498a4c8f9e1ece074083586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cef018d52fe71824498a4c8f9e1ece074083586/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43b4373a23c88557f74c3e3f8b9d8761cc078a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b4373a23c88557f74c3e3f8b9d8761cc078a18", "html_url": "https://github.com/rust-lang/rust/commit/43b4373a23c88557f74c3e3f8b9d8761cc078a18"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "774bc9df1141ed6f7885ab24d878f6fe682c09e3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8cef018d52fe71824498a4c8f9e1ece074083586/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cef018d52fe71824498a4c8f9e1ece074083586/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8cef018d52fe71824498a4c8f9e1ece074083586", "patch": "@@ -198,6 +198,7 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n         true\n     }\n \n+    // Returns tuple (is_public, is_exported) for a type\n     fn is_public_exported_ty(&self, ty: &hir::Ty) -> (bool, bool) {\n         if let hir::TyPath(..) = ty.node {\n             match self.tcx.def_map.borrow().get(&ty.id).unwrap().full_def() {\n@@ -216,6 +217,7 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n         }\n     }\n \n+    // Returns tuple (is_public, is_exported) for a trait\n     fn is_public_exported_trait(&self, trait_ref: &hir::TraitRef) -> (bool, bool) {\n         let did = self.tcx.trait_ref_to_def_id(trait_ref);\n         if let Some(node_id) = self.tcx.map.as_local_node_id(did) {\n@@ -226,8 +228,12 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n     }\n \n     fn maybe_insert_id(&mut self, id: ast::NodeId) {\n-        if self.prev_public { self.public_items.insert(id); }\n-        if self.prev_exported { self.exported_items.insert(id); }\n+        if self.prev_public {\n+            self.public_items.insert(id);\n+        }\n+        if self.prev_exported {\n+            self.exported_items.insert(id);\n+        }\n     }\n }\n \n@@ -269,7 +275,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     self.maybe_insert_id(variant.node.data.id());\n                     for field in variant.node.data.fields() {\n                         // Variant fields are always public\n-                        if self.prev_public { self.public_items.insert(field.node.id); }\n+                        if self.prev_public {\n+                            self.public_items.insert(field.node.id);\n+                        }\n                         // FIXME: Make fields exported (requires fixing resulting ICEs)\n                         // if self.prev_exported { self.exported_items.insert(field.node.id); }\n                     }\n@@ -285,8 +293,12 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n \n                 for impl_item in impl_items {\n                     if impl_item.vis == hir::Public {\n-                        if public_ty { self.public_items.insert(impl_item.id); }\n-                        if exported_ty { self.exported_items.insert(impl_item.id); }\n+                        if public_ty {\n+                            self.public_items.insert(impl_item.id);\n+                        }\n+                        if exported_ty {\n+                            self.exported_items.insert(impl_item.id);\n+                        }\n                     }\n                 }\n             }\n@@ -309,21 +321,33 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 let (public_ty, _exported_ty) = self.is_public_exported_ty(&ty);\n                 let (public_trait, exported_trait) = self.is_public_exported_trait(trait_ref);\n \n-                if public_ty && public_trait { self.public_items.insert(item.id); }\n-                if exported_trait { self.exported_items.insert(item.id); }\n+                if public_ty && public_trait {\n+                    self.public_items.insert(item.id);\n+                }\n+                if exported_trait {\n+                    self.exported_items.insert(item.id);\n+                }\n \n                 for impl_item in impl_items {\n-                    if public_ty && public_trait { self.public_items.insert(impl_item.id); }\n-                    if exported_trait { self.exported_items.insert(impl_item.id); }\n+                    if public_ty && public_trait {\n+                        self.public_items.insert(impl_item.id);\n+                    }\n+                    if exported_trait {\n+                        self.exported_items.insert(impl_item.id);\n+                    }\n                 }\n             }\n \n             // Default trait impls are exported for public traits\n             hir::ItemDefaultImpl(_, ref trait_ref) => {\n                 let (public_trait, exported_trait) = self.is_public_exported_trait(trait_ref);\n \n-                if public_trait { self.public_items.insert(item.id); }\n-                if exported_trait { self.exported_items.insert(item.id); }\n+                if public_trait {\n+                    self.public_items.insert(item.id);\n+                }\n+                if exported_trait {\n+                    self.exported_items.insert(item.id);\n+                }\n             }\n \n             // Default methods on traits are all public so long as the trait\n@@ -342,7 +366,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                 for field in def.fields() {\n                     // Struct fields can be public or private, so lets check\n                     if field.node.kind.visibility() == hir::Public {\n-                        if self.prev_public { self.public_items.insert(field.node.id); }\n+                        if self.prev_public {\n+                            self.public_items.insert(field.node.id);\n+                        }\n                         // FIXME: Make fields exported (requires fixing resulting ICEs)\n                         // if self.prev_exported { self.exported_items.insert(field.node.id); }\n                     }\n@@ -369,8 +395,12 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     let exported = self.prev_exported && foreign_item.vis == hir::Public ||\n                                    self.reexports.contains(&foreign_item.id);\n \n-                    if public { self.public_items.insert(foreign_item.id); }\n-                    if exported { self.exported_items.insert(foreign_item.id); }\n+                    if public {\n+                        self.public_items.insert(foreign_item.id);\n+                    }\n+                    if exported {\n+                        self.exported_items.insert(foreign_item.id);\n+                    }\n                 }\n             }\n "}]}