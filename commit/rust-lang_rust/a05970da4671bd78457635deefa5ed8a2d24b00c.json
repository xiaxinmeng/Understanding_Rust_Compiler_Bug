{"sha": "a05970da4671bd78457635deefa5ed8a2d24b00c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNTk3MGRhNDY3MWJkNzg0NTc2MzVkZWVmYTVlZDhhMmQyNGIwMGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-12T17:34:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-12T17:34:47Z"}, "message": "Merge #2788\n\n2788: Fix file_structure()  to recognize macro_rules! r=flodiebold a=ruabmbua\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/2774.\r\n\r\nNot sure what to do about classifying macro definitions. Maybe make all macro invocations a function invocation?\n\nCo-authored-by: Roland Ruckerbauer <roland.rucky@gmail.com>", "tree": {"sha": "621b44a5a65722c2563ee87a0b1f1fbd1245745a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/621b44a5a65722c2563ee87a0b1f1fbd1245745a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a05970da4671bd78457635deefa5ed8a2d24b00c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeG1i3CRBK7hj4Ov3rIwAAdHIIAKn6NQ4xPpKbTcs+DuKO4/I+\nPeMxd5n/ninQKeMvyBF/eNpEI6+waQJW5E+UbRABdHVggc8xUSKthvZZ8EMuE/M9\nBtw8Kf5gafHVkW8eSuZAs+5v7av0d5vkFMqWkGzPiT8yB1oZN580QBQ3L/JJAUGK\nC9Fa0DvnumgEc9YRWcUNzHoMtJ3R0gR3zquo2xPsznv6tiIlmLUdEB/dx4xKzKSu\ne9BU+khwMoYVx1YWd7yge7GWNom578rtqvqZLZu5Nqi+K5G6DBiB/cBlfe7J9RK9\nYmnyIR9vvXCFx1xaSL7axs01oFW3cugTY/5JMfRRrBO4Ba3RVigbO1gvQtF59ug=\n=GnLc\n-----END PGP SIGNATURE-----\n", "payload": "tree 621b44a5a65722c2563ee87a0b1f1fbd1245745a\nparent d0b52e5d84b8c371b74d4d5d43f45be91f103d12\nparent 20b8d283ae7d18faaa8aec86e029a573e755a1dd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1578850487 +0000\ncommitter GitHub <noreply@github.com> 1578850487 +0000\n\nMerge #2788\n\n2788: Fix file_structure()  to recognize macro_rules! r=flodiebold a=ruabmbua\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/2774.\r\n\r\nNot sure what to do about classifying macro definitions. Maybe make all macro invocations a function invocation?\n\nCo-authored-by: Roland Ruckerbauer <roland.rucky@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a05970da4671bd78457635deefa5ed8a2d24b00c", "html_url": "https://github.com/rust-lang/rust/commit/a05970da4671bd78457635deefa5ed8a2d24b00c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a05970da4671bd78457635deefa5ed8a2d24b00c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b52e5d84b8c371b74d4d5d43f45be91f103d12", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b52e5d84b8c371b74d4d5d43f45be91f103d12", "html_url": "https://github.com/rust-lang/rust/commit/d0b52e5d84b8c371b74d4d5d43f45be91f103d12"}, {"sha": "20b8d283ae7d18faaa8aec86e029a573e755a1dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/20b8d283ae7d18faaa8aec86e029a573e755a1dd", "html_url": "https://github.com/rust-lang/rust/commit/20b8d283ae7d18faaa8aec86e029a573e755a1dd"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "944cc79df13a2aaa5b5cc439785289f361c9e7ca", "filename": "crates/ra_ide/src/display/structure.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a05970da4671bd78457635deefa5ed8a2d24b00c/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a05970da4671bd78457635deefa5ed8a2d24b00c/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs?ref=a05970da4671bd78457635deefa5ed8a2d24b00c", "patch": "@@ -151,11 +151,11 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                 Some(node)\n             },\n             ast::MacroCall(it) => {\n-                let first_token = it.syntax().first_token().unwrap();\n-                if first_token.text().as_str() != \"macro_rules\" {\n-                    return None;\n+                match it.path().and_then(|it| it.segment()).and_then(|it| it.name_ref()) {\n+                    Some(path_segment) if path_segment.text() == \"macro_rules\"\n+                    => decl(it),\n+                    _ => None,\n                 }\n-                decl(it)\n             },\n             _ => None,\n         }\n@@ -198,6 +198,16 @@ macro_rules! mc {\n     () => {}\n }\n \n+#[macro_export]\n+macro_rules! mcexp {\n+    () => {}\n+}\n+\n+/// Doc comment\n+macro_rules! mcexp {\n+    () => {}\n+}\n+\n #[deprecated]\n fn obsolete() {}\n \n@@ -372,11 +382,29 @@ fn very_obsolete() {}\n                 detail: None,\n                 deprecated: false,\n             },\n+            StructureNode {\n+                parent: None,\n+                label: \"mcexp\",\n+                navigation_range: [334; 339),\n+                node_range: [305; 356),\n+                kind: MACRO_CALL,\n+                detail: None,\n+                deprecated: false,\n+            },\n+            StructureNode {\n+                parent: None,\n+                label: \"mcexp\",\n+                navigation_range: [387; 392),\n+                node_range: [358; 409),\n+                kind: MACRO_CALL,\n+                detail: None,\n+                deprecated: false,\n+            },\n             StructureNode {\n                 parent: None,\n                 label: \"obsolete\",\n-                navigation_range: [322; 330),\n-                node_range: [305; 335),\n+                navigation_range: [428; 436),\n+                node_range: [411; 441),\n                 kind: FN_DEF,\n                 detail: Some(\n                     \"fn()\",\n@@ -386,8 +414,8 @@ fn very_obsolete() {}\n             StructureNode {\n                 parent: None,\n                 label: \"very_obsolete\",\n-                navigation_range: [375; 388),\n-                node_range: [337; 393),\n+                navigation_range: [481; 494),\n+                node_range: [443; 499),\n                 kind: FN_DEF,\n                 detail: Some(\n                     \"fn()\","}]}