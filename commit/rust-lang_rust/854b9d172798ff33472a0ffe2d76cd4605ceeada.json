{"sha": "854b9d172798ff33472a0ffe2d76cd4605ceeada", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NGI5ZDE3Mjc5OGZmMzM0NzJhMGZmZTJkNzZjZDQ2MDVjZWVhZGE=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-31T09:26:24Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-31T09:41:29Z"}, "message": "Collect links into a single vector", "tree": {"sha": "5d97bfbe87b4cb410d9480017532569fb287ea67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d97bfbe87b4cb410d9480017532569fb287ea67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/854b9d172798ff33472a0ffe2d76cd4605ceeada", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/854b9d172798ff33472a0ffe2d76cd4605ceeada", "html_url": "https://github.com/rust-lang/rust/commit/854b9d172798ff33472a0ffe2d76cd4605ceeada", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/854b9d172798ff33472a0ffe2d76cd4605ceeada/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4317de008408945bb873155d67439579b12b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4317de008408945bb873155d67439579b12b6c", "html_url": "https://github.com/rust-lang/rust/commit/cb4317de008408945bb873155d67439579b12b6c"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "f0dd552f82cee0923bc548c789884bfe2757f306", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/854b9d172798ff33472a0ffe2d76cd4605ceeada/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/854b9d172798ff33472a0ffe2d76cd4605ceeada/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=854b9d172798ff33472a0ffe2d76cd4605ceeada", "patch": "@@ -25,6 +25,7 @@ use rustc_session::lint;\n use rustc_span::edition::Edition;\n use rustc_span::Span;\n use std::borrow::Cow;\n+use std::cell::RefCell;\n use std::collections::VecDeque;\n use std::default::Default;\n use std::fmt::Write;\n@@ -1132,8 +1133,7 @@ crate fn markdown_links(md: &str) -> Vec<(String, Range<usize>)> {\n         return vec![];\n     }\n \n-    let mut links = vec![];\n-    let mut shortcut_links = vec![];\n+    let links = RefCell::new(vec![]);\n \n     let locate = |s: &str, fallback: Range<usize>| unsafe {\n         let s_start = s.as_ptr();\n@@ -1152,7 +1152,7 @@ crate fn markdown_links(md: &str) -> Vec<(String, Range<usize>)> {\n     let mut push = |link: BrokenLink<'_>| {\n         // FIXME: use `link.span` instead of `locate`\n         // (doing it now includes the `[]` as well as the text)\n-        shortcut_links.push((link.reference.to_owned(), locate(link.reference, link.span)));\n+        links.borrow_mut().push((link.reference.to_owned(), locate(link.reference, link.span)));\n         None\n     };\n     let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut push)).into_offset_iter();\n@@ -1165,16 +1165,14 @@ crate fn markdown_links(md: &str) -> Vec<(String, Range<usize>)> {\n     for ev in iter {\n         if let Event::Start(Tag::Link(_, dest, _)) = ev.0 {\n             debug!(\"found link: {}\", dest);\n-            links.push(match dest {\n+            links.borrow_mut().push(match dest {\n                 CowStr::Borrowed(s) => (s.to_owned(), locate(s, ev.1)),\n                 s @ (CowStr::Boxed(..) | CowStr::Inlined(..)) => (s.into_string(), ev.1),\n             });\n         }\n     }\n \n-    links.append(&mut shortcut_links);\n-\n-    links\n+    links.into_inner()\n }\n \n #[derive(Debug)]"}]}