{"sha": "f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzQyZmZiM2NhM2Y1NjQxYjU1ZWNkYzY0ODFmNWNkODBmMzM4ZDY=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-11-10T22:19:37Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-11-10T22:42:09Z"}, "message": "Simplify trans/exprs.rs DefStatic considerably", "tree": {"sha": "86830a9edb97913585f74f93cd25fa1d8b9cdcfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86830a9edb97913585f74f93cd25fa1d8b9cdcfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6", "html_url": "https://github.com/rust-lang/rust/commit/f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21deb18bfd2d84c8230b906f455007957013766e", "url": "https://api.github.com/repos/rust-lang/rust/commits/21deb18bfd2d84c8230b906f455007957013766e", "html_url": "https://github.com/rust-lang/rust/commit/21deb18bfd2d84c8230b906f455007957013766e"}], "stats": {"total": 25, "additions": 2, "deletions": 23}, "files": [{"sha": "ac3e3beeac83c72baec56b911fcb09a3c4a4473b", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6", "patch": "@@ -1221,6 +1221,6 @@ pub fn get_static_val<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     if let Some(node_id) = ccx.tcx().map.as_local_node_id(did) {\n         base::get_item_val(ccx, node_id)\n     } else {\n-        base::trans_external_path(ccx, did, ty)\n+        base::get_extern_const(ccx, did, ty)\n     }\n }"}, {"sha": "f408bb595a2b7a802b5c2c1dc51b7b95d57571e2", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=f1342ffb3ca3f5641b55ecdc6481f5cd80f338d6", "patch": "@@ -941,29 +941,8 @@ fn trans_def<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             DatumBlock::new(bcx, datum.to_expr_datum())\n         }\n         def::DefStatic(did, _) => {\n-            // There are two things that may happen here:\n-            //  1) If the static item is defined in this crate, it will be\n-            //     translated using `get_item_val`, and we return a pointer to\n-            //     the result.\n-            //  2) If the static item is defined in another crate then we add\n-            //     (or reuse) a declaration of an external global, and return a\n-            //     pointer to that.\n             let const_ty = expr_ty(bcx, ref_expr);\n-\n-            // For external constants, we don't inline.\n-            let val = if let Some(node_id) = bcx.tcx().map.as_local_node_id(did) {\n-                // Case 1.\n-\n-                // The LLVM global has the type of its initializer,\n-                // which may not be equal to the enum's type for\n-                // non-C-like enums.\n-                let val = base::get_item_val(bcx.ccx(), node_id);\n-                let pty = type_of::type_of(bcx.ccx(), const_ty).ptr_to();\n-                PointerCast(bcx, val, pty)\n-            } else {\n-                // Case 2.\n-                base::get_extern_const(bcx.ccx(), did, const_ty)\n-            };\n+            let val = get_static_val(bcx.ccx(), did, const_ty);\n             let lval = Lvalue::new(\"expr::trans_def\");\n             DatumBlock::new(bcx, Datum::new(val, const_ty, LvalueExpr(lval)))\n         }"}]}