{"sha": "c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMjgxYjQxZWNhZWMwMzdmMmUyZDdmZDc1Y2QwYzcxNGRhZTNmN2M=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-25T16:14:50Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-01-13T19:17:19Z"}, "message": "check_match: fix handling of privately uninhabited types\n\nthe match-checking code used to use TyErr for signaling \"unknown,\ninhabited\" types for a long time. It had been switched to using the\nexact type in #38069, to handle uninhabited types.\n\nHowever, in #39980, we discovered that we still needed the \"unknown\ninhabited\" logic, but I used `()` instead of `TyErr` to handle that.\nRevert to using `TyErr` to fix that problem.", "tree": {"sha": "787fb1247f6d77bb90ac793e3d256c12a97992b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/787fb1247f6d77bb90ac793e3d256c12a97992b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c", "html_url": "https://github.com/rust-lang/rust/commit/c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6072a7b3835f1875e81c9fd27799f9b20a0770c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6072a7b3835f1875e81c9fd27799f9b20a0770c", "html_url": "https://github.com/rust-lang/rust/commit/e6072a7b3835f1875e81c9fd27799f9b20a0770c"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "e52ea26bf81fe26f0a502d0cae899d40c0ed88ee", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c", "patch": "@@ -561,19 +561,25 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n ///   (1) all_constructors will only return constructors that are statically\n ///       possible. eg. it will only return Ok for Result<T, !>\n ///\n-/// Whether a vector `v` of patterns is 'useful' in relation to a set of such\n-/// vectors `m` is defined as there being a set of inputs that will match `v`\n-/// but not any of the sets in `m`.\n+/// This finds whether a (row) vector `v` of patterns is 'useful' in relation\n+/// to a set of such vectors `m` is defined as there being a set of inputs\n+/// that will match `v` but not any of the sets in `m`.\n+///\n+/// All the patterns at each column of the `matrix ++ v` matrix must\n+/// have the same type, except that wildcard (PatternKind::Wild) patterns\n+/// with type TyErr are also allowed, even if the \"type of the column\"\n+/// is not TyErr. That is used to represent private fields, as using their\n+/// real type would assert that they are inhabited.\n ///\n /// This is used both for reachability checking (if a pattern isn't useful in\n /// relation to preceding patterns, it is not reachable) and exhaustiveness\n /// checking (if a wildcard pattern is useful in relation to a matrix, the\n /// matrix isn't exhaustive).\n pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-                           matrix: &Matrix<'p, 'tcx>,\n-                           v: &[&'p Pattern<'tcx>],\n-                           witness: WitnessPreference)\n-                           -> Usefulness<'tcx> {\n+                                       matrix: &Matrix<'p, 'tcx>,\n+                                       v: &[&'p Pattern<'tcx>],\n+                                       witness: WitnessPreference)\n+                                       -> Usefulness<'tcx> {\n     let &Matrix(ref rows) = matrix;\n     debug!(\"is_useful({:?}, {:?})\", matrix, v);\n \n@@ -596,6 +602,9 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n     let pcx = PatternContext {\n+        // () is used to represent an unknown type in this context. If\n+        // one of the fields has a known type, use it instead (other\n+        // than that, all types should be equal modulo normalization).\n         ty: rows.iter().map(|r| r[0].ty).find(|ty| !ty.references_error())\n             .unwrap_or(v[0].ty),\n         max_slice_length: max_slice_length(cx, rows.iter().map(|r| r[0]).chain(Some(v[0])))\n@@ -861,13 +870,13 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n                     if is_visible {\n                         field.ty(cx.tcx, substs)\n                     } else {\n-                        // Treat all non-visible fields as nil. They\n+                        // Treat all non-visible fields as TyErr. They\n                         // can't appear in any other pattern from\n                         // this match (because they are private),\n                         // so their type does not matter - but\n                         // we don't want to know they are\n                         // uninhabited.\n-                        cx.tcx.mk_nil()\n+                        cx.tcx.types.err\n                     }\n                 }).collect()\n             }"}, {"sha": "2a82c6dd4381976ed92b74d549eacdb3b0f4436c", "filename": "src/test/run-pass/issue-46964.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c/src%2Ftest%2Frun-pass%2Fissue-46964.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c/src%2Ftest%2Frun-pass%2Fissue-46964.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-46964.rs?ref=c1281b41ecaec037f2e2d7fd75cd0c714dae3f7c", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod my_mod {\n+    #[derive(Clone, Copy, Eq, PartialEq, PartialOrd, Ord, Hash)]\n+    pub struct Name<'a> {\n+        source: &'a str,\n+    }\n+\n+    pub const JSON: Name = Name { source: \"JSON\" };\n+}\n+\n+pub fn crash() -> bool {\n+  match (my_mod::JSON, None) {\n+    (_, Some(my_mod::JSON)) => true,\n+    (my_mod::JSON, None) => true,\n+    _ => false,\n+  }\n+}\n+\n+fn main() {}"}]}