{"sha": "2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNDFjMGQxOTRkZGJmNzc0MmFhYzJkNGZmMmIwOTQyYWE5OGY5NmU=", "commit": {"author": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2018-10-20T17:07:17Z"}, "committer": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2018-10-20T17:16:23Z"}, "message": "Rename InferTy::CanonicalTy to BoundTy and add DebruijnIndex to variant type", "tree": {"sha": "b5140e1f8f9531039a59c765269440205552ffde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5140e1f8f9531039a59c765269440205552ffde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "html_url": "https://github.com/rust-lang/rust/commit/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/comments", "author": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "url": "https://api.github.com/repos/rust-lang/rust/commits/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301", "html_url": "https://github.com/rust-lang/rust/commit/2581bdc143b90bcfc81e82a62c7bb4a6ae2c1301"}], "stats": {"total": 70, "additions": 43, "deletions": 27}, "files": [{"sha": "642eb11006649f5e0b3e3cb63bbff5c60d6f9ac3", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -915,7 +915,7 @@ impl_stable_hash_for!(enum ty::InferTy {\n     FreshTy(a),\n     FreshIntTy(a),\n     FreshFloatTy(a),\n-    CanonicalTy(a),\n+    BoundTy(a),\n });\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>>"}, {"sha": "2b085a3407ccc40f453da1af6f17ab6d2fd370ac", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -23,7 +23,7 @@ use infer::InferCtxt;\n use std::sync::atomic::Ordering;\n use ty::fold::{TypeFoldable, TypeFolder};\n use ty::subst::Kind;\n-use ty::{self, BoundTyIndex, Lift, List, Ty, TyCtxt, TypeFlags};\n+use ty::{self, BoundTy, BoundTyIndex, Lift, List, Ty, TyCtxt, TypeFlags};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -283,7 +283,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                 bug!(\"encountered a fresh type during canonicalization\")\n             }\n \n-            ty::Infer(ty::CanonicalTy(_)) => {\n+            ty::Infer(ty::BoundTy(_)) => {\n                 bug!(\"encountered a canonical type during canonicalization\")\n             }\n \n@@ -393,7 +393,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     /// or returns an existing variable if `kind` has already been\n     /// seen. `kind` is expected to be an unbound variable (or\n     /// potentially a free region).\n-    fn canonical_var(&mut self, info: CanonicalVarInfo, kind: Kind<'tcx>) -> BoundTyIndex {\n+    fn canonical_var(&mut self, info: CanonicalVarInfo, kind: Kind<'tcx>) -> BoundTy {\n         let Canonicalizer {\n             variables,\n             query_state,\n@@ -408,7 +408,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         // avoid allocations in those cases. We also don't use `indices` to\n         // determine if a kind has been seen before until the limit of 8 has\n         // been exceeded, to also avoid allocations for `indices`.\n-        if !var_values.spilled() {\n+        let var = if !var_values.spilled() {\n             // `var_values` is stack-allocated. `indices` isn't used yet. Do a\n             // direct linear search of `var_values`.\n             if let Some(idx) = var_values.iter().position(|&k| k == kind) {\n@@ -442,15 +442,21 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n                 assert_eq!(variables.len(), var_values.len());\n                 BoundTyIndex::new(variables.len() - 1)\n             })\n+        };\n+\n+        BoundTy {\n+            level: ty::INNERMOST,\n+            var,\n         }\n     }\n \n     fn canonical_var_for_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         let info = CanonicalVarInfo {\n             kind: CanonicalVarKind::Region,\n         };\n-        let cvar = self.canonical_var(info, r.into());\n-        self.tcx().mk_region(ty::ReCanonical(cvar))\n+        let b = self.canonical_var(info, r.into());\n+        debug_assert_eq!(ty::INNERMOST, b.level);\n+        self.tcx().mk_region(ty::ReCanonical(b.var))\n     }\n \n     /// Given a type variable `ty_var` of the given kind, first check\n@@ -466,8 +472,9 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             let info = CanonicalVarInfo {\n                 kind: CanonicalVarKind::Ty(ty_kind),\n             };\n-            let cvar = self.canonical_var(info, ty_var.into());\n-            self.tcx().mk_infer(ty::InferTy::CanonicalTy(cvar))\n+            let b = self.canonical_var(info, ty_var.into());\n+            debug_assert_eq!(ty::INNERMOST, b.level);\n+            self.tcx().mk_infer(ty::InferTy::BoundTy(b))\n         }\n     }\n }"}, {"sha": "38788186eb0710ddb6ccbd8262aa58a0cbcf1fb4", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -417,9 +417,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             match result_value.unpack() {\n                 UnpackedKind::Type(result_value) => {\n                     // e.g., here `result_value` might be `?0` in the example above...\n-                    if let ty::Infer(ty::InferTy::CanonicalTy(index)) = result_value.sty {\n+                    if let ty::Infer(ty::InferTy::BoundTy(b)) = result_value.sty {\n                         // in which case we would set `canonical_vars[0]` to `Some(?U)`.\n-                        opt_values[index] = Some(*original_value);\n+                        opt_values[b.var] = Some(*original_value);\n                     }\n                 }\n                 UnpackedKind::Lifetime(result_value) => {"}, {"sha": "03441c3dee35e2ba40c49fb6b7e12bbe19fa3afa", "filename": "src/librustc/infer/canonical/substitute.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -85,10 +85,11 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for CanonicalVarValuesSubst<'cx, 'g\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match t.sty {\n-            ty::Infer(ty::InferTy::CanonicalTy(c)) => {\n-                match self.var_values.var_values[c].unpack() {\n+            ty::Infer(ty::InferTy::BoundTy(b)) => {\n+                debug_assert_eq!(ty::INNERMOST, b.level);\n+                match self.var_values.var_values[b.var].unpack() {\n                     UnpackedKind::Type(ty) => ty,\n-                    r => bug!(\"{:?} is a type but value is {:?}\", c, r),\n+                    r => bug!(\"{:?} is a type but value is {:?}\", b, r),\n                 }\n             }\n             _ => {"}, {"sha": "1647f259db9fb27e855ae0db4fe08cdb39480104", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                 t\n             }\n \n-            ty::Infer(ty::CanonicalTy(..)) =>\n+            ty::Infer(ty::BoundTy(..)) =>\n                 bug!(\"encountered canonical ty during freshening\"),\n \n             ty::Generator(..) |"}, {"sha": "49f3717935493ef4bf99765864174bc347e3e23f", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -2421,7 +2421,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n             ty::UnnormalizedProjection(..)\n-            | ty::Infer(ty::CanonicalTy(_))\n+            | ty::Infer(ty::BoundTy(_))\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n             | ty::Infer(ty::FreshFloatTy(_)) => {\n@@ -2506,7 +2506,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::UnnormalizedProjection(..)\n-            | ty::Infer(ty::CanonicalTy(_))\n+            | ty::Infer(ty::BoundTy(_))\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))\n             | ty::Infer(ty::FreshFloatTy(_)) => {\n@@ -2549,7 +2549,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             | ty::Param(..)\n             | ty::Foreign(..)\n             | ty::Projection(..)\n-            | ty::Infer(ty::CanonicalTy(_))\n+            | ty::Infer(ty::BoundTy(_))\n             | ty::Infer(ty::TyVar(_))\n             | ty::Infer(ty::FreshTy(_))\n             | ty::Infer(ty::FreshIntTy(_))"}, {"sha": "ed6e372fe7637d21427081b9994c1d10f970c44a", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -217,7 +217,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n             ty::Infer(ty::IntVar(_)) => \"integral variable\".into(),\n             ty::Infer(ty::FloatVar(_)) => \"floating-point variable\".into(),\n-            ty::Infer(ty::CanonicalTy(_)) |\n+            ty::Infer(ty::BoundTy(_)) |\n             ty::Infer(ty::FreshTy(_)) => \"fresh type\".into(),\n             ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),"}, {"sha": "a7b21688fbeb3ab1f0e3a4dc6db32a9da5318e39", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -122,7 +122,7 @@ impl FlagComputation {\n                     ty::FreshTy(_) |\n                     ty::FreshIntTy(_) |\n                     ty::FreshFloatTy(_) |\n-                    ty::CanonicalTy(_) => {\n+                    ty::BoundTy(_) => {\n                         self.add_flags(TypeFlags::HAS_CANONICAL_VARS);\n                     }\n "}, {"sha": "5602ce479c8dca75fc75d1ee44e1770796a4a725", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -63,7 +63,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n \n use hir;\n \n-pub use self::sty::{Binder, BoundTyIndex, DebruijnIndex, INNERMOST};\n+pub use self::sty::{Binder, BoundTy, BoundTyIndex, DebruijnIndex, INNERMOST};\n pub use self::sty::{FnSig, GenSig, PolyFnSig, PolyGenSig};\n pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};"}, {"sha": "828915838701570a97b0a615d6f556c66ac579ea", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -1217,14 +1217,22 @@ pub enum InferTy {\n     FreshIntTy(u32),\n     FreshFloatTy(u32),\n \n-    /// Canonicalized type variable, used only when preparing a trait query.\n-    CanonicalTy(BoundTyIndex),\n+    /// Bound type variable, used only when preparing a trait query.\n+    BoundTy(BoundTy),\n }\n \n newtype_index! {\n     pub struct BoundTyIndex { .. }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+pub struct BoundTy {\n+    pub level: DebruijnIndex,\n+    pub var: BoundTyIndex,\n+}\n+\n+impl_stable_hash_for!(struct BoundTy { level, var });\n+\n /// A `ProjectionPredicate` for an `ExistentialTraitRef`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ExistentialProjection<'tcx> {\n@@ -1919,7 +1927,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n             ty::Infer(ty::TyVar(_)) => false,\n \n-            ty::Infer(ty::CanonicalTy(_)) |\n+            ty::Infer(ty::BoundTy(_)) |\n             ty::Infer(ty::FreshTy(_)) |\n             ty::Infer(ty::FreshIntTy(_)) |\n             ty::Infer(ty::FreshFloatTy(_)) =>"}, {"sha": "02b5d36ecce6ea0dab9088b61e202d5438116a64", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -556,7 +556,7 @@ impl CanonicalUserSubsts<'tcx> {\n         self.value.substs.iter().zip(BoundTyIndex::new(0)..).all(|(kind, cvar)| {\n             match kind.unpack() {\n                 UnpackedKind::Type(ty) => match ty.sty {\n-                    ty::Infer(ty::CanonicalTy(cvar1)) => cvar == cvar1,\n+                    ty::Infer(ty::BoundTy(ref b)) => cvar == b.var,\n                     _ => false,\n                 },\n "}, {"sha": "709b844526529dbbcf4fe6c6e9f196481d986075", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=2f41c0d194ddbf7742aac2d4ff2b0942aa98f96e", "patch": "@@ -984,7 +984,7 @@ define_print! {\n                     ty::TyVar(_) => write!(f, \"_\"),\n                     ty::IntVar(_) => write!(f, \"{}\", \"{integer}\"),\n                     ty::FloatVar(_) => write!(f, \"{}\", \"{float}\"),\n-                    ty::CanonicalTy(_) => write!(f, \"_\"),\n+                    ty::BoundTy(_) => write!(f, \"_\"),\n                     ty::FreshTy(v) => write!(f, \"FreshTy({})\", v),\n                     ty::FreshIntTy(v) => write!(f, \"FreshIntTy({})\", v),\n                     ty::FreshFloatTy(v) => write!(f, \"FreshFloatTy({})\", v)\n@@ -996,7 +996,7 @@ define_print! {\n                 ty::TyVar(ref v) => write!(f, \"{:?}\", v),\n                 ty::IntVar(ref v) => write!(f, \"{:?}\", v),\n                 ty::FloatVar(ref v) => write!(f, \"{:?}\", v),\n-                ty::CanonicalTy(v) => write!(f, \"?{:?}\", v.index()),\n+                ty::BoundTy(v) => write!(f, \"?{:?}\", v.var.index()),\n                 ty::FreshTy(v) => write!(f, \"FreshTy({:?})\", v),\n                 ty::FreshIntTy(v) => write!(f, \"FreshIntTy({:?})\", v),\n                 ty::FreshFloatTy(v) => write!(f, \"FreshFloatTy({:?})\", v)"}]}