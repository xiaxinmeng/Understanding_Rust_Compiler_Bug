{"sha": "98fea6847026508e6f9a87bdf9850b064778adf3", "node_id": "C_kwDOAAsO6NoAKDk4ZmVhNjg0NzAyNjUwOGU2ZjlhODdiZGY5ODUwYjA2NDc3OGFkZjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-12T19:44:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-12T19:44:51Z"}, "message": "Rollup merge of #109029 - compiler-errors:parse-gating, r=jackh726\n\nGate usages of `dyn*` and const closures in macros\n\nWe silently accepted `dyn*` and const closures in macros as long as they didn't expand to anything containing these experimental features, unlike other gated features such as `for<'a>` binders on closures, etc. Let's not do that, to make sure nobody begins relying on this.", "tree": {"sha": "223509192fe8c38002484c9e2d02219efa87b317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/223509192fe8c38002484c9e2d02219efa87b317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98fea6847026508e6f9a87bdf9850b064778adf3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDiuzCRBK7hj4Ov3rIwAANR0IAKNTofBOwWGgBpq7e5JTVmug\nyorJUKKoUARrIEwpCDDlMuI3yCoa5QofcwINFo9jEJfg2jeTTveS6YrtI1SfAcnj\nBBcpY8nbNe9L2QPUr8kOc6z4Jd3v0+fn6vh72YciFVZ6uggIokczk6GsFI5MJy0M\n/MkpFxlb8qbR9/GhK/QxcJRJqYYOow9DBiAr4HYpFqBixzyJsM+B/xFLWkFsiWIh\nqJTKr+eetKZ/09t9XJUDXkwSfdqWsuiNBFDUEgYKtP123MsoZU2Z7CYvNdDmiNk3\nDlhbVz2vTTd1evs9nd9D1QijujSnf4Kw9NQOoHJt+zvCVQrHiwnTeb+w2wLi7Qg=\n=IU5F\n-----END PGP SIGNATURE-----\n", "payload": "tree 223509192fe8c38002484c9e2d02219efa87b317\nparent b28775cdcb718f9b3455b7661b3a7ae3f63f6511\nparent c3159b851a90d3071a97cfb84416f09058c1733a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678650291 +0100\ncommitter GitHub <noreply@github.com> 1678650291 +0100\n\nRollup merge of #109029 - compiler-errors:parse-gating, r=jackh726\n\nGate usages of `dyn*` and const closures in macros\n\nWe silently accepted `dyn*` and const closures in macros as long as they didn't expand to anything containing these experimental features, unlike other gated features such as `for<'a>` binders on closures, etc. Let's not do that, to make sure nobody begins relying on this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98fea6847026508e6f9a87bdf9850b064778adf3", "html_url": "https://github.com/rust-lang/rust/commit/98fea6847026508e6f9a87bdf9850b064778adf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98fea6847026508e6f9a87bdf9850b064778adf3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b28775cdcb718f9b3455b7661b3a7ae3f63f6511", "url": "https://api.github.com/repos/rust-lang/rust/commits/b28775cdcb718f9b3455b7661b3a7ae3f63f6511", "html_url": "https://github.com/rust-lang/rust/commit/b28775cdcb718f9b3455b7661b3a7ae3f63f6511"}, {"sha": "c3159b851a90d3071a97cfb84416f09058c1733a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3159b851a90d3071a97cfb84416f09058c1733a", "html_url": "https://github.com/rust-lang/rust/commit/c3159b851a90d3071a97cfb84416f09058c1733a"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "9af25e5cae2866f4f3d163cfa63da95f3f72a3db", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -337,9 +337,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span, \"the `!` type is experimental\");\n             }\n-            ast::TyKind::TraitObject(_, ast::TraitObjectSyntax::DynStar, ..) => {\n-                gate_feature_post!(&self, dyn_star, ty.span, \"dyn* trait objects are unstable\");\n-            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty)\n@@ -425,14 +422,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::TryBlock(_) => {\n                 gate_feature_post!(&self, try_blocks, e.span, \"`try` expression is experimental\");\n             }\n-            ast::ExprKind::Closure(box ast::Closure { constness: ast::Const::Yes(_), .. }) => {\n-                gate_feature_post!(\n-                    &self,\n-                    const_closures,\n-                    e.span,\n-                    \"const closures are experimental\"\n-                );\n-            }\n             _ => {}\n         }\n         visit::walk_expr(self, e)\n@@ -594,6 +583,8 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(inline_const_pat, \"inline-const in pattern position is experimental\");\n     gate_all!(associated_const_equality, \"associated const equality is incomplete\");\n     gate_all!(yeet_expr, \"`do yeet` expression is experimental\");\n+    gate_all!(dyn_star, \"`dyn*` trait objects are experimental\");\n+    gate_all!(const_closures, \"const closures are experimental\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "1d12dd4709475283dba73e11bc348f72704002ac", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -2105,7 +2105,7 @@ impl<'a> Parser<'a> {\n             ClosureBinder::NotPresent\n         };\n \n-        let constness = self.parse_closure_constness(Case::Sensitive);\n+        let constness = self.parse_closure_constness();\n \n         let movability =\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };"}, {"sha": "3251dd6d0c6fbff002a555cc41b25afd11d0b8a3", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -1196,9 +1196,13 @@ impl<'a> Parser<'a> {\n         self.parse_constness_(case, false)\n     }\n \n-    /// Parses constness for closures\n-    fn parse_closure_constness(&mut self, case: Case) -> Const {\n-        self.parse_constness_(case, true)\n+    /// Parses constness for closures (case sensitive, feature-gated)\n+    fn parse_closure_constness(&mut self) -> Const {\n+        let constness = self.parse_constness_(Case::Sensitive, true);\n+        if let Const::Yes(span) = constness {\n+            self.sess.gated_spans.gate(sym::const_closures, span);\n+        }\n+        constness\n     }\n \n     fn parse_constness_(&mut self, case: Case, is_closure: bool) -> Const {"}, {"sha": "3d9d2cc62e3851c810de5b0bba579f8db7f47c20", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -624,10 +624,12 @@ impl<'a> Parser<'a> {\n     ///\n     /// Note that this does *not* parse bare trait objects.\n     fn parse_dyn_ty(&mut self, impl_dyn_multi: &mut bool) -> PResult<'a, TyKind> {\n+        let lo = self.token.span;\n         self.bump(); // `dyn`\n \n         // parse dyn* types\n         let syntax = if self.eat(&TokenKind::BinOp(token::Star)) {\n+            self.sess.gated_spans.gate(sym::dyn_star, lo.to(self.prev_token.span));\n             TraitObjectSyntax::DynStar\n         } else {\n             TraitObjectSyntax::Dyn"}, {"sha": "41eed71cdc30a9696868235d7cca4157a165704a", "filename": "tests/ui/dyn-star/feature-gate-dyn_star.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -3,7 +3,7 @@\n /// dyn* is not necessarily the final surface syntax (if we have one at all),\n /// but for now we will support it to aid in writing tests independently.\n pub fn dyn_star_parameter(_: &dyn* Send) {\n-    //~^ dyn* trait objects are unstable\n+    //~^ `dyn*` trait objects are experimental\n }\n \n fn main() {}"}, {"sha": "342e71c3a3a92c4f1ac08791beae092fd236280f", "filename": "tests/ui/dyn-star/feature-gate-dyn_star.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: dyn* trait objects are unstable\n+error[E0658]: `dyn*` trait objects are experimental\n   --> $DIR/feature-gate-dyn_star.rs:5:31\n    |\n LL | pub fn dyn_star_parameter(_: &dyn* Send) {\n-   |                               ^^^^^^^^^\n+   |                               ^^^^\n    |\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = help: add `#![feature(dyn_star)]` to the crate attributes to enable"}, {"sha": "a747987bd2483d4d6ee95c716f1a263b3b153e27", "filename": "tests/ui/dyn-star/gated-span.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Fgated-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Fgated-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fgated-span.rs?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! t {\n+    ($t:ty) => {}\n+}\n+\n+t!(dyn* Send);\n+//~^ ERROR `dyn*` trait objects are experimental\n+\n+fn main() {}"}, {"sha": "626b6cd1b7f0ede6cd325aaebcd2bb036cc57024", "filename": "tests/ui/dyn-star/gated-span.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Fgated-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Fgated-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fgated-span.stderr?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `dyn*` trait objects are experimental\n+  --> $DIR/gated-span.rs:5:4\n+   |\n+LL | t!(dyn* Send);\n+   |    ^^^^\n+   |\n+   = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n+   = help: add `#![feature(dyn_star)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2d28f516ab5a76236a9d431e231a1c4b7654c3d0", "filename": "tests/ui/dyn-star/no-explicit-dyn-star-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.rs?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -4,8 +4,8 @@ fn make_dyn_star() {\n     let i = 42usize;\n     let dyn_i: dyn* Debug = i as dyn* Debug;\n     //~^ ERROR casting `usize` as `dyn* Debug` is invalid\n-    //~| ERROR dyn* trait objects are unstable\n-    //~| ERROR dyn* trait objects are unstable\n+    //~| ERROR `dyn*` trait objects are experimental\n+    //~| ERROR `dyn*` trait objects are experimental\n }\n \n fn main() {"}, {"sha": "78af9c7a3895f425c83877ce2a5469611b219b13", "filename": "tests/ui/dyn-star/no-explicit-dyn-star-cast.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fno-explicit-dyn-star-cast.stderr?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -1,17 +1,17 @@\n-error[E0658]: dyn* trait objects are unstable\n+error[E0658]: `dyn*` trait objects are experimental\n   --> $DIR/no-explicit-dyn-star-cast.rs:5:16\n    |\n LL |     let dyn_i: dyn* Debug = i as dyn* Debug;\n-   |                ^^^^^^^^^^\n+   |                ^^^^\n    |\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = help: add `#![feature(dyn_star)]` to the crate attributes to enable\n \n-error[E0658]: dyn* trait objects are unstable\n+error[E0658]: `dyn*` trait objects are experimental\n   --> $DIR/no-explicit-dyn-star-cast.rs:5:34\n    |\n LL |     let dyn_i: dyn* Debug = i as dyn* Debug;\n-   |                                  ^^^^^^^^^^\n+   |                                  ^^^^\n    |\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = help: add `#![feature(dyn_star)]` to the crate attributes to enable"}, {"sha": "d1c93ab9f95af42c09cc1fc2da0160d713e0f7a7", "filename": "tests/ui/rfc-2632-const-trait-impl/gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.rs?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -1,5 +1,13 @@\n // gate-test-const_closures\n+\n fn main() {\n     (const || {})();\n     //~^ ERROR: const closures are experimental\n }\n+\n+macro_rules! e {\n+    ($e:expr) => {}\n+}\n+\n+e!((const || {}));\n+//~^ ERROR const closures are experimental"}, {"sha": "11cc2cd569a4358c1b4d0941ea0eb3ecbe0d8057", "filename": "tests/ui/rfc-2632-const-trait-impl/gate.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98fea6847026508e6f9a87bdf9850b064778adf3/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fgate.stderr?ref=98fea6847026508e6f9a87bdf9850b064778adf3", "patch": "@@ -1,12 +1,21 @@\n error[E0658]: const closures are experimental\n-  --> $DIR/gate.rs:3:6\n+  --> $DIR/gate.rs:4:6\n    |\n LL |     (const || {})();\n-   |      ^^^^^^^^^^^\n+   |      ^^^^^\n    |\n    = note: see issue #106003 <https://github.com/rust-lang/rust/issues/106003> for more information\n    = help: add `#![feature(const_closures)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: const closures are experimental\n+  --> $DIR/gate.rs:12:5\n+   |\n+LL | e!((const || {}));\n+   |     ^^^^^\n+   |\n+   = note: see issue #106003 <https://github.com/rust-lang/rust/issues/106003> for more information\n+   = help: add `#![feature(const_closures)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}