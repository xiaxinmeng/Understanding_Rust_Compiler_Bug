{"sha": "1335b3da5a80fa4b74b25642e1bb651388bac3a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMzViM2RhNWE4MGZhNGI3NGIyNTY0MmUxYmI2NTEzODhiYWMzYTg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-02-09T18:19:52Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-02-09T23:04:41Z"}, "message": "Add fetch_nand.\n\ncc #13226 (the tracking issue)", "tree": {"sha": "8916fa05f761c107c1bf8590fd34e8592f1c0279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8916fa05f761c107c1bf8590fd34e8592f1c0279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1335b3da5a80fa4b74b25642e1bb651388bac3a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1335b3da5a80fa4b74b25642e1bb651388bac3a8", "html_url": "https://github.com/rust-lang/rust/commit/1335b3da5a80fa4b74b25642e1bb651388bac3a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1335b3da5a80fa4b74b25642e1bb651388bac3a8/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcda48a30b21e46b81a7989deb30a3ba85fb918", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcda48a30b21e46b81a7989deb30a3ba85fb918", "html_url": "https://github.com/rust-lang/rust/commit/3bcda48a30b21e46b81a7989deb30a3ba85fb918"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "f22862ae701903457c177c9e1737325d8fd22592", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1335b3da5a80fa4b74b25642e1bb651388bac3a8/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1335b3da5a80fa4b74b25642e1bb651388bac3a8/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=1335b3da5a80fa4b74b25642e1bb651388bac3a8", "patch": "@@ -945,6 +945,7 @@ macro_rules! atomic_int {\n      $stable_debug:meta,\n      $stable_access:meta,\n      $stable_from:meta,\n+     $stable_nand:meta,\n      $s_int_type:expr, $int_ref:expr,\n      $int_type:ident $atomic_type:ident $atomic_init:ident) => {\n         /// An integer type which can be safely shared between threads.\n@@ -1325,6 +1326,29 @@ macro_rules! atomic_int {\n                 unsafe { atomic_and(self.v.get(), val, order) }\n             }\n \n+            /// Bitwise \"nand\" with the current value.\n+            ///\n+            /// Performs a bitwise \"nand\" operation on the current value and the argument `val`, and\n+            /// sets the new value to the result.\n+            ///\n+            /// Returns the previous value.\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_nand)]\n+            ///\n+            /// use std::sync::atomic::{AtomicIsize, Ordering};\n+            ///\n+            /// let foo = AtomicIsize::new(0xf731);\n+            /// assert_eq!(foo.fetch_nand(0x137f, Ordering::SeqCst), 0xf731);\n+            /// assert_eq!(foo.load(Ordering::SeqCst), !(0xf731 & 0x137f));\n+            #[inline]\n+            #[$stable_nand]\n+            pub fn fetch_nand(&self, val: $int_type, order: Ordering) -> $int_type {\n+                unsafe { atomic_nand(self.v.get(), val, order) }\n+            }\n+\n             /// Bitwise \"or\" with the current value.\n             ///\n             /// Performs a bitwise \"or\" operation on the current value and the argument `val`, and\n@@ -1377,6 +1401,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"atomic_nand\", issue = \"13226\"),\n     \"i8\", \"../../../std/primitive.i8.html\",\n     i8 AtomicI8 ATOMIC_I8_INIT\n }\n@@ -1387,6 +1412,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"atomic_nand\", issue = \"13226\"),\n     \"u8\", \"../../../std/primitive.u8.html\",\n     u8 AtomicU8 ATOMIC_U8_INIT\n }\n@@ -1397,6 +1423,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"atomic_nand\", issue = \"13226\"),\n     \"i16\", \"../../../std/primitive.i16.html\",\n     i16 AtomicI16 ATOMIC_I16_INIT\n }\n@@ -1407,6 +1434,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"atomic_nand\", issue = \"13226\"),\n     \"u16\", \"../../../std/primitive.u16.html\",\n     u16 AtomicU16 ATOMIC_U16_INIT\n }\n@@ -1417,6 +1445,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"atomic_nand\", issue = \"13226\"),\n     \"i32\", \"../../../std/primitive.i32.html\",\n     i32 AtomicI32 ATOMIC_I32_INIT\n }\n@@ -1427,6 +1456,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"atomic_nand\", issue = \"13226\"),\n     \"u32\", \"../../../std/primitive.u32.html\",\n     u32 AtomicU32 ATOMIC_U32_INIT\n }\n@@ -1437,6 +1467,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"atomic_nand\", issue = \"13226\"),\n     \"i64\", \"../../../std/primitive.i64.html\",\n     i64 AtomicI64 ATOMIC_I64_INIT\n }\n@@ -1447,6 +1478,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    unstable(feature = \"atomic_nand\", issue = \"13226\"),\n     \"u64\", \"../../../std/primitive.u64.html\",\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n@@ -1457,6 +1489,7 @@ atomic_int!{\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n     stable(feature = \"atomic_from\", since = \"1.23.0\"),\n+    unstable(feature = \"atomic_nand\", issue = \"13226\"),\n     \"isize\", \"../../../std/primitive.isize.html\",\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n@@ -1467,6 +1500,7 @@ atomic_int!{\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n     stable(feature = \"atomic_from\", since = \"1.23.0\"),\n+    unstable(feature = \"atomic_nand\", issue = \"13226\"),\n     \"usize\", \"../../../std/primitive.usize.html\",\n     usize AtomicUsize ATOMIC_USIZE_INIT\n }\n@@ -1609,6 +1643,18 @@ unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     }\n }\n \n+#[inline]\n+unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+    match order {\n+        Acquire => intrinsics::atomic_nand_acq(dst, val),\n+        Release => intrinsics::atomic_nand_rel(dst, val),\n+        AcqRel => intrinsics::atomic_nand_acqrel(dst, val),\n+        Relaxed => intrinsics::atomic_nand_relaxed(dst, val),\n+        SeqCst => intrinsics::atomic_nand(dst, val),\n+        __Nonexhaustive => panic!(\"invalid memory ordering\"),\n+    }\n+}\n+\n #[inline]\n unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {"}, {"sha": "f634fabe50399ebb595c00b29d57ec273f4cd6d8", "filename": "src/libcore/tests/atomic.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1335b3da5a80fa4b74b25642e1bb651388bac3a8/src%2Flibcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1335b3da5a80fa4b74b25642e1bb651388bac3a8/src%2Flibcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fatomic.rs?ref=1335b3da5a80fa4b74b25642e1bb651388bac3a8", "patch": "@@ -48,6 +48,13 @@ fn uint_and() {\n     assert_eq!(x.load(SeqCst), 0xf731 & 0x137f);\n }\n \n+#[test]\n+fn uint_nand() {\n+    let x = AtomicUsize::new(0xf731);\n+    assert_eq!(x.fetch_nand(0x137f, SeqCst), 0xf731);\n+    assert_eq!(x.load(SeqCst), !(0xf731 & 0x137f));\n+}\n+\n #[test]\n fn uint_or() {\n     let x = AtomicUsize::new(0xf731);\n@@ -69,6 +76,13 @@ fn int_and() {\n     assert_eq!(x.load(SeqCst), 0xf731 & 0x137f);\n }\n \n+#[test]\n+fn int_nand() {\n+    let x = AtomicIsize::new(0xf731);\n+    assert_eq!(x.fetch_nand(0x137f, SeqCst), 0xf731);\n+    assert_eq!(x.load(SeqCst), !(0xf731 & 0x137f));\n+}\n+\n #[test]\n fn int_or() {\n     let x = AtomicIsize::new(0xf731);"}, {"sha": "9e90313bc0e9efeb27bb4a04def98ae2968f5194", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1335b3da5a80fa4b74b25642e1bb651388bac3a8/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1335b3da5a80fa4b74b25642e1bb651388bac3a8/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=1335b3da5a80fa4b74b25642e1bb651388bac3a8", "patch": "@@ -42,6 +42,7 @@\n #![feature(try_from)]\n #![feature(try_trait)]\n #![feature(exact_chunks)]\n+#![feature(atomic_nand)]\n \n extern crate core;\n extern crate test;"}]}