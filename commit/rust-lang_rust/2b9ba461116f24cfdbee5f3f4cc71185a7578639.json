{"sha": "2b9ba461116f24cfdbee5f3f4cc71185a7578639", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiOWJhNDYxMTE2ZjI0Y2ZkYmVlNWYzZjRjYzcxMTg1YTc1Nzg2Mzk=", "commit": {"author": {"name": "Petar Dambovaliev", "email": "petar.atanasov.1987@gmail.com", "date": "2020-12-12T22:08:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-12T22:08:04Z"}, "message": "fix indefinite article in cell.rs", "tree": {"sha": "15ac2dfbef1cc58fea5aa579fd94ecaeac4c1023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15ac2dfbef1cc58fea5aa579fd94ecaeac4c1023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b9ba461116f24cfdbee5f3f4cc71185a7578639", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf1T9ECRBK7hj4Ov3rIwAAdHIIAIuYiwGpWdjMtUtuUwp+vRva\nleVnwMasaBnSfUqn+govIxUM6Yl9sc1RkGPBNKpwEq6x/dM+bPfC8xYT4sVnDJd9\nEUEICS7tlFpcIAPB8rj/QTa0e0Dgceil+FRYW/gr//R6+74VYzsVsbWVE5YvyEM6\nu6R2I+6gy5h41vWkjOzBPnlvG/rWdVr1FSk5x2+xRB5JRzlcF/oEmEWhSfr0QdjE\ne54iZJlW9+2pI6RhhPz2ZOm8krVTCJkUl86ybIsnGGBvS3ah+yzAnTjCu3SnIThb\ncBvAkuqyYvDfwtWQpTHUI/V9krJ//RT85WQ/o79mB59u/8TV3UmZwuChWG6rRdo=\n=3cVH\n-----END PGP SIGNATURE-----\n", "payload": "tree 15ac2dfbef1cc58fea5aa579fd94ecaeac4c1023\nparent b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18\nauthor Petar Dambovaliev <petar.atanasov.1987@gmail.com> 1607810884 +0100\ncommitter GitHub <noreply@github.com> 1607810884 +0100\n\nfix indefinite article in cell.rs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b9ba461116f24cfdbee5f3f4cc71185a7578639", "html_url": "https://github.com/rust-lang/rust/commit/2b9ba461116f24cfdbee5f3f4cc71185a7578639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b9ba461116f24cfdbee5f3f4cc71185a7578639/comments", "author": {"login": "petar-dambovaliev", "id": 18395154, "node_id": "MDQ6VXNlcjE4Mzk1MTU0", "avatar_url": "https://avatars.githubusercontent.com/u/18395154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petar-dambovaliev", "html_url": "https://github.com/petar-dambovaliev", "followers_url": "https://api.github.com/users/petar-dambovaliev/followers", "following_url": "https://api.github.com/users/petar-dambovaliev/following{/other_user}", "gists_url": "https://api.github.com/users/petar-dambovaliev/gists{/gist_id}", "starred_url": "https://api.github.com/users/petar-dambovaliev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petar-dambovaliev/subscriptions", "organizations_url": "https://api.github.com/users/petar-dambovaliev/orgs", "repos_url": "https://api.github.com/users/petar-dambovaliev/repos", "events_url": "https://api.github.com/users/petar-dambovaliev/events{/privacy}", "received_events_url": "https://api.github.com/users/petar-dambovaliev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18", "html_url": "https://github.com/rust-lang/rust/commit/b7ebc6b0c1ba3c27ebb17c0b496ece778ef11e18"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "c5751922d2a89675064c87d534b152deeae2e799", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b9ba461116f24cfdbee5f3f4cc71185a7578639/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b9ba461116f24cfdbee5f3f4cc71185a7578639/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=2b9ba461116f24cfdbee5f3f4cc71185a7578639", "patch": "@@ -1532,7 +1532,7 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n /// `UnsafeCell<T>` is a type that wraps some `T` and indicates unsafe interior operations on the\n /// wrapped type. Types with an `UnsafeCell<T>` field are considered to have an 'unsafe interior'.\n /// The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered\n-/// mutable. In general, transmuting an `&T` type into an `&mut T` is considered undefined behavior.\n+/// mutable. In general, transmuting a `&T` type into a `&mut T` is considered undefined behavior.\n ///\n /// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n /// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably"}]}