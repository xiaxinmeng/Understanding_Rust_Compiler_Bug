{"sha": "bcb161def7dbef64aebe698c42373d13b44a1c53", "node_id": "C_kwDOAAsO6NoAKGJjYjE2MWRlZjdkYmVmNjRhZWJlNjk4YzQyMzczZDEzYjQ0YTFjNTM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-09T16:55:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-14T19:52:42Z"}, "message": "Wrap the whole LocalInfo in ClearCrossCrate.", "tree": {"sha": "fc2f5ec048a3de96ac50aead6fcccab1247369b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc2f5ec048a3de96ac50aead6fcccab1247369b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb161def7dbef64aebe698c42373d13b44a1c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb161def7dbef64aebe698c42373d13b44a1c53", "html_url": "https://github.com/rust-lang/rust/commit/bcb161def7dbef64aebe698c42373d13b44a1c53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb161def7dbef64aebe698c42373d13b44a1c53/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5", "html_url": "https://github.com/rust-lang/rust/commit/2e7034ebf7f57066c260b680c5e9dfcf04ca4cd5"}], "stats": {"total": 276, "additions": 134, "deletions": 142}, "files": [{"sha": "efa75668fac6e2abef50af14e406d3690f0e3478", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -2482,15 +2482,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let (place_description, assigned_span) = match local_decl {\n             Some(LocalDecl {\n                 local_info:\n-                    Some(box LocalInfo::User(\n-                        ClearCrossCrate::Clear\n-                        | ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n+                    ClearCrossCrate::Set(\n+                        box LocalInfo::User(BindingForm::Var(VarBindingForm {\n                             opt_match_place: None,\n                             ..\n-                        })),\n-                    ))\n-                    | Some(box LocalInfo::StaticRef { .. })\n-                    | None,\n+                        }))\n+                        | box LocalInfo::StaticRef { .. }\n+                        | box LocalInfo::Boring,\n+                    ),\n                 ..\n             })\n             | None => (self.describe_any_place(place.as_ref()), assigned_span),"}, {"sha": "611abb01238b80ecab7e9c74c81ead0b2a053e62", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -196,10 +196,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         if self.body.local_decls[local].is_ref_for_guard() {\n                             continue;\n                         }\n-                        if let Some(box LocalInfo::StaticRef { def_id, .. }) =\n-                            &self.body.local_decls[local].local_info\n+                        if let LocalInfo::StaticRef { def_id, .. } =\n+                            *self.body.local_decls[local].local_info()\n                         {\n-                            buf.push_str(self.infcx.tcx.item_name(*def_id).as_str());\n+                            buf.push_str(self.infcx.tcx.item_name(def_id).as_str());\n                             ok = Ok(());\n                             continue;\n                         }"}, {"sha": "3662bec0c76360cc9be71fb33f5f0e34f4c4d97c", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -102,14 +102,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         //\n                         // opt_match_place is None for let [mut] x = ... statements,\n                         // whether or not the right-hand side is a place expression\n-                        if let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n-                            VarBindingForm {\n-                                opt_match_place: Some((opt_match_place, match_span)),\n-                                binding_mode: _,\n-                                opt_ty_info: _,\n-                                pat_span: _,\n-                            },\n-                        )))) = local_decl.local_info\n+                        if let LocalInfo::User(BindingForm::Var(VarBindingForm {\n+                            opt_match_place: Some((opt_match_place, match_span)),\n+                            binding_mode: _,\n+                            opt_ty_info: _,\n+                            pat_span: _,\n+                        })) = *local_decl.local_info()\n                         {\n                             let stmt_source_info = self.body.source_info(location);\n                             self.append_binding_error(\n@@ -478,9 +476,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let mut suggestions: Vec<(Span, String, String)> = Vec::new();\n         for local in binds_to {\n             let bind_to = &self.body.local_decls[*local];\n-            if let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n-                VarBindingForm { pat_span, .. },\n-            )))) = bind_to.local_info\n+            if let LocalInfo::User(BindingForm::Var(VarBindingForm { pat_span, .. })) =\n+                *bind_to.local_info()\n             {\n                 let Ok(pat_snippet) =\n                     self.infcx.tcx.sess.source_map().span_to_snippet(pat_span) else { continue; };"}, {"sha": "bad08451adf08cc9abb0d0beed37446a21d83636", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 38, "deletions": 54, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::{\n     hir::place::PlaceBase,\n-    mir::{self, BindingForm, ClearCrossCrate, Local, LocalDecl, LocalInfo, LocalKind, Location},\n+    mir::{self, BindingForm, Local, LocalDecl, LocalInfo, LocalKind, Location},\n };\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n@@ -105,8 +105,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     reason = String::new();\n                 } else {\n                     item_msg = access_place_desc;\n-                    let local_info = &self.body.local_decls[local].local_info;\n-                    if let Some(box LocalInfo::StaticRef { def_id, .. }) = *local_info {\n+                    let local_info = self.body.local_decls[local].local_info();\n+                    if let LocalInfo::StaticRef { def_id, .. } = *local_info {\n                         let static_name = &self.infcx.tcx.item_name(def_id);\n                         reason = format!(\", as `{static_name}` is an immutable static item\");\n                     } else {\n@@ -305,15 +305,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     ..\n                 }) = &self.body[location.block].statements.get(location.statement_index)\n                 {\n-                    match decl.local_info {\n-                        Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n-                            mir::VarBindingForm {\n-                                binding_mode: ty::BindingMode::BindByValue(Mutability::Not),\n-                                opt_ty_info: Some(sp),\n-                                opt_match_place: _,\n-                                pat_span: _,\n-                            },\n-                        )))) => {\n+                    match *decl.local_info() {\n+                        LocalInfo::User(BindingForm::Var(mir::VarBindingForm {\n+                            binding_mode: ty::BindingMode::BindByValue(Mutability::Not),\n+                            opt_ty_info: Some(sp),\n+                            opt_match_place: _,\n+                            pat_span: _,\n+                        })) => {\n                             if suggest {\n                                 err.span_note(sp, \"the binding is already a mutable borrow\");\n                             }\n@@ -346,10 +344,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     }\n                 } else if decl.mutability.is_not() {\n                     if matches!(\n-                        decl.local_info,\n-                        Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(\n-                            hir::ImplicitSelfKind::MutRef\n-                        ),)))\n+                        decl.local_info(),\n+                        LocalInfo::User(BindingForm::ImplicitSelf(hir::ImplicitSelfKind::MutRef))\n                     ) {\n                         err.note(\n                             \"as `Self` may be unsized, this call attempts to take `&mut &mut self`\",\n@@ -482,22 +478,18 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 match self.local_names[local] {\n                     Some(name) if !local_decl.from_compiler_desugaring() => {\n-                        let label = match local_decl.local_info.as_deref().unwrap() {\n-                            LocalInfo::User(ClearCrossCrate::Set(\n-                                mir::BindingForm::ImplicitSelf(_),\n-                            )) => {\n+                        let label = match *local_decl.local_info() {\n+                            LocalInfo::User(mir::BindingForm::ImplicitSelf(_)) => {\n                                 let (span, suggestion) =\n                                     suggest_ampmut_self(self.infcx.tcx, local_decl);\n                                 Some((true, span, suggestion))\n                             }\n \n-                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n-                                mir::VarBindingForm {\n-                                    binding_mode: ty::BindingMode::BindByValue(_),\n-                                    opt_ty_info,\n-                                    ..\n-                                },\n-                            ))) => {\n+                            LocalInfo::User(mir::BindingForm::Var(mir::VarBindingForm {\n+                                binding_mode: ty::BindingMode::BindByValue(_),\n+                                opt_ty_info,\n+                                ..\n+                            })) => {\n                                 // check if the RHS is from desugaring\n                                 let opt_assignment_rhs_span =\n                                     self.body.find_assignments(local).first().map(|&location| {\n@@ -534,16 +526,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                                 self.infcx.tcx,\n                                                 local_decl,\n                                                 opt_assignment_rhs_span,\n-                                                *opt_ty_info,\n+                                                opt_ty_info,\n                                             )\n                                         } else {\n-                                            match local_decl.local_info.as_deref() {\n-                                                Some(LocalInfo::User(ClearCrossCrate::Set(\n-                                                    mir::BindingForm::Var(mir::VarBindingForm {\n-                                                        opt_ty_info: None,\n-                                                        ..\n-                                                    }),\n-                                                ))) => {\n+                                            match local_decl.local_info() {\n+                                                LocalInfo::User(mir::BindingForm::Var(\n+                                                    mir::VarBindingForm {\n+                                                        opt_ty_info: None, ..\n+                                                    },\n+                                                )) => {\n                                                     let (span, sugg) = suggest_ampmut_self(\n                                                         self.infcx.tcx,\n                                                         local_decl,\n@@ -555,7 +546,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                                     self.infcx.tcx,\n                                                     local_decl,\n                                                     opt_assignment_rhs_span,\n-                                                    *opt_ty_info,\n+                                                    opt_ty_info,\n                                                 ),\n                                             }\n                                         };\n@@ -564,21 +555,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                 }\n                             }\n \n-                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n-                                mir::VarBindingForm {\n-                                    binding_mode: ty::BindingMode::BindByReference(_),\n-                                    ..\n-                                },\n-                            ))) => {\n+                            LocalInfo::User(mir::BindingForm::Var(mir::VarBindingForm {\n+                                binding_mode: ty::BindingMode::BindByReference(_),\n+                                ..\n+                            })) => {\n                                 let pattern_span = local_decl.source_info.span;\n                                 suggest_ref_mut(self.infcx.tcx, pattern_span)\n                                     .map(|replacement| (true, pattern_span, replacement))\n                             }\n \n-                            LocalInfo::User(ClearCrossCrate::Clear) => {\n-                                bug!(\"saw cleared local state\")\n-                            }\n-\n                             _ => unreachable!(),\n                         };\n \n@@ -1151,20 +1136,19 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n pub fn mut_borrow_of_mutable_ref(local_decl: &LocalDecl<'_>, local_name: Option<Symbol>) -> bool {\n     debug!(\"local_info: {:?}, ty.kind(): {:?}\", local_decl.local_info, local_decl.ty.kind());\n \n-    match local_decl.local_info.as_deref() {\n+    match *local_decl.local_info() {\n         // Check if mutably borrowing a mutable reference.\n-        Some(LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n-            mir::VarBindingForm {\n-                binding_mode: ty::BindingMode::BindByValue(Mutability::Not), ..\n-            },\n-        )))) => matches!(local_decl.ty.kind(), ty::Ref(_, _, hir::Mutability::Mut)),\n-        Some(LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::ImplicitSelf(kind)))) => {\n+        LocalInfo::User(mir::BindingForm::Var(mir::VarBindingForm {\n+            binding_mode: ty::BindingMode::BindByValue(Mutability::Not),\n+            ..\n+        })) => matches!(local_decl.ty.kind(), ty::Ref(_, _, hir::Mutability::Mut)),\n+        LocalInfo::User(mir::BindingForm::ImplicitSelf(kind)) => {\n             // Check if the user variable is a `&mut self` and we can therefore\n             // suggest removing the `&mut`.\n             //\n             // Deliberately fall into this case for all implicit self types,\n             // so that we don't fall in to the next case with them.\n-            *kind == hir::ImplicitSelfKind::MutRef\n+            kind == hir::ImplicitSelfKind::MutRef\n         }\n         _ if Some(kw::SelfLower) == local_name => {\n             // Otherwise, check if the name is the `self` keyword - in which case"}, {"sha": "8f1e14365d7061f5ba85375fa72ba2d0bc9b74b2", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -1180,10 +1180,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         }\n                     }\n                     Some(l)\n-                        if matches!(\n-                            body.local_decls[l].local_info,\n-                            Some(box LocalInfo::AggregateTemp)\n-                        ) =>\n+                        if matches!(body.local_decls[l].local_info(), LocalInfo::AggregateTemp) =>\n                     {\n                         ConstraintCategory::Usage\n                     }"}, {"sha": "f775b47966786b157552b067b474272d7cbfd71d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -643,7 +643,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 if base_ty.is_unsafe_ptr() {\n                     if proj_base.is_empty() {\n                         let decl = &self.body.local_decls[place_local];\n-                        if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {\n+                        if let LocalInfo::StaticRef { def_id, .. } = *decl.local_info() {\n                             let span = decl.source_info.span;\n                             self.check_static(def_id, span);\n                             return;"}, {"sha": "b9725029276e920d45a60b213c1b1a7dba2fb4b9", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -572,6 +572,13 @@ impl<T> ClearCrossCrate<T> {\n         }\n     }\n \n+    pub fn as_mut(&mut self) -> ClearCrossCrate<&mut T> {\n+        match self {\n+            ClearCrossCrate::Clear => ClearCrossCrate::Clear,\n+            ClearCrossCrate::Set(v) => ClearCrossCrate::Set(v),\n+        }\n+    }\n+\n     pub fn assert_crate_local(self) -> T {\n         match self {\n             ClearCrossCrate::Clear => bug!(\"unwrapping cross-crate data\"),\n@@ -760,7 +767,7 @@ pub struct LocalDecl<'tcx> {\n     pub mutability: Mutability,\n \n     // FIXME(matthewjasper) Don't store in this in `Body`\n-    pub local_info: Option<Box<LocalInfo<'tcx>>>,\n+    pub local_info: ClearCrossCrate<Box<LocalInfo<'tcx>>>,\n \n     /// `true` if this is an internal local.\n     ///\n@@ -890,7 +897,7 @@ pub enum LocalInfo<'tcx> {\n     /// The `BindingForm` is solely used for local diagnostics when generating\n     /// warnings/errors when compiling the current crate, and therefore it need\n     /// not be visible across crates.\n-    User(ClearCrossCrate<BindingForm<'tcx>>),\n+    User(BindingForm<'tcx>),\n     /// A temporary created that references the static with the given `DefId`.\n     StaticRef { def_id: DefId, is_thread_local: bool },\n     /// A temporary created that references the const with the given `DefId`\n@@ -902,9 +909,15 @@ pub enum LocalInfo<'tcx> {\n     DerefTemp,\n     /// A temporary created for borrow checking.\n     FakeBorrow,\n+    /// A local without anything interesting about it.\n+    Boring,\n }\n \n impl<'tcx> LocalDecl<'tcx> {\n+    pub fn local_info(&self) -> &LocalInfo<'tcx> {\n+        &**self.local_info.as_ref().assert_crate_local()\n+    }\n+\n     /// Returns `true` only if local is a binding that can itself be\n     /// made mutable via the addition of the `mut` keyword, namely\n     /// something like the occurrences of `x` in:\n@@ -914,14 +927,14 @@ impl<'tcx> LocalDecl<'tcx> {\n     pub fn can_be_made_mutable(&self) -> bool {\n         matches!(\n             self.local_info,\n-            Some(box LocalInfo::User(ClearCrossCrate::Set(\n+            ClearCrossCrate::Set(box LocalInfo::User(\n                 BindingForm::Var(VarBindingForm {\n                     binding_mode: ty::BindingMode::BindByValue(_),\n                     opt_ty_info: _,\n                     opt_match_place: _,\n                     pat_span: _,\n                 }) | BindingForm::ImplicitSelf(ImplicitSelfKind::Imm),\n-            )))\n+            ))\n         )\n     }\n \n@@ -931,22 +944,22 @@ impl<'tcx> LocalDecl<'tcx> {\n     pub fn is_nonref_binding(&self) -> bool {\n         matches!(\n             self.local_info,\n-            Some(box LocalInfo::User(ClearCrossCrate::Set(\n+            ClearCrossCrate::Set(box LocalInfo::User(\n                 BindingForm::Var(VarBindingForm {\n                     binding_mode: ty::BindingMode::BindByValue(_),\n                     opt_ty_info: _,\n                     opt_match_place: _,\n                     pat_span: _,\n                 }) | BindingForm::ImplicitSelf(_),\n-            )))\n+            ))\n         )\n     }\n \n     /// Returns `true` if this variable is a named variable or function\n     /// parameter declared by the user.\n     #[inline]\n     pub fn is_user_variable(&self) -> bool {\n-        matches!(self.local_info, Some(box LocalInfo::User(_)))\n+        matches!(self.local_info, ClearCrossCrate::Set(box LocalInfo::User(_)))\n     }\n \n     /// Returns `true` if this is a reference to a variable bound in a `match`\n@@ -955,29 +968,31 @@ impl<'tcx> LocalDecl<'tcx> {\n     pub fn is_ref_for_guard(&self) -> bool {\n         matches!(\n             self.local_info,\n-            Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::RefForGuard)))\n+            ClearCrossCrate::Set(box LocalInfo::User(BindingForm::RefForGuard))\n         )\n     }\n \n     /// Returns `Some` if this is a reference to a static item that is used to\n     /// access that static.\n     pub fn is_ref_to_static(&self) -> bool {\n-        matches!(self.local_info, Some(box LocalInfo::StaticRef { .. }))\n+        matches!(self.local_info, ClearCrossCrate::Set(box LocalInfo::StaticRef { .. }))\n     }\n \n     /// Returns `Some` if this is a reference to a thread-local static item that is used to\n     /// access that static.\n     pub fn is_ref_to_thread_local(&self) -> bool {\n         match self.local_info {\n-            Some(box LocalInfo::StaticRef { is_thread_local, .. }) => is_thread_local,\n+            ClearCrossCrate::Set(box LocalInfo::StaticRef { is_thread_local, .. }) => {\n+                is_thread_local\n+            }\n             _ => false,\n         }\n     }\n \n     /// Returns `true` if this is a DerefTemp\n     pub fn is_deref_temp(&self) -> bool {\n         match self.local_info {\n-            Some(box LocalInfo::DerefTemp) => return true,\n+            ClearCrossCrate::Set(box LocalInfo::DerefTemp) => return true,\n             _ => (),\n         }\n         return false;\n@@ -1001,7 +1016,7 @@ impl<'tcx> LocalDecl<'tcx> {\n     pub fn with_source_info(ty: Ty<'tcx>, source_info: SourceInfo) -> Self {\n         LocalDecl {\n             mutability: Mutability::Mut,\n-            local_info: None,\n+            local_info: ClearCrossCrate::Set(Box::new(LocalInfo::Boring)),\n             internal: false,\n             is_block_tail: None,\n             ty,"}, {"sha": "eb860c04de203a559de2a79cfa992f27456aff62", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -72,12 +72,12 @@ impl<'tcx> MirPatch<'tcx> {\n         &mut self,\n         ty: Ty<'tcx>,\n         span: Span,\n-        local_info: Option<Box<LocalInfo<'tcx>>>,\n+        local_info: LocalInfo<'tcx>,\n     ) -> Local {\n         let index = self.next_local;\n         self.next_local += 1;\n         let mut new_decl = LocalDecl::new(ty, span).internal();\n-        new_decl.local_info = local_info;\n+        **new_decl.local_info.as_mut().assert_crate_local() = local_info;\n         self.new_locals.push(new_decl);\n         Local::new(index as usize)\n     }"}, {"sha": "4249a47621c6dab3a5b2bc3177606624f5f004e7", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -20,7 +20,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<Operand<'tcx>> {\n         let local_scope = self.local_scope();\n-        self.as_operand(block, Some(local_scope), expr, None, NeedsTemporary::Maybe)\n+        self.as_operand(block, Some(local_scope), expr, LocalInfo::Boring, NeedsTemporary::Maybe)\n     }\n \n     /// Returns an operand suitable for use until the end of the current scope expression and\n@@ -102,7 +102,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         mut block: BasicBlock,\n         scope: Option<region::Scope>,\n         expr: &Expr<'tcx>,\n-        local_info: Option<Box<LocalInfo<'tcx>>>,\n+        local_info: LocalInfo<'tcx>,\n         needs_temporary: NeedsTemporary,\n     ) -> BlockAnd<Operand<'tcx>> {\n         let this = self;\n@@ -124,8 +124,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             Category::Constant | Category::Place | Category::Rvalue(..) => {\n                 let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));\n-                if this.local_decls[operand].local_info.is_none() {\n-                    this.local_decls[operand].local_info = local_info;\n+                let decl_info = this.local_decls[operand].local_info.as_mut().assert_crate_local();\n+                if let LocalInfo::Boring = **decl_info {\n+                    **decl_info = local_info;\n                 }\n                 block.and(Operand::Move(Place::from(operand)))\n             }\n@@ -178,6 +179,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n-        this.as_operand(block, scope, expr, None, NeedsTemporary::Maybe)\n+        this.as_operand(block, scope, expr, LocalInfo::Boring, NeedsTemporary::Maybe)\n     }\n }"}, {"sha": "b8115f5aa186027c9267109f54e7a2cda0ff84fa", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -63,7 +63,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             block,\n                             scope,\n                             &this.thir[value],\n-                            None,\n+                            LocalInfo::Boring,\n                             NeedsTemporary::No\n                         )\n                     );\n@@ -73,18 +73,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Binary { op, lhs, rhs } => {\n                 let lhs = unpack!(\n                     block =\n-                        this.as_operand(block, scope, &this.thir[lhs], None, NeedsTemporary::Maybe)\n+                        this.as_operand(block, scope, &this.thir[lhs], LocalInfo::Boring, NeedsTemporary::Maybe)\n                 );\n                 let rhs = unpack!(\n                     block =\n-                        this.as_operand(block, scope, &this.thir[rhs], None, NeedsTemporary::No)\n+                        this.as_operand(block, scope, &this.thir[rhs], LocalInfo::Boring, NeedsTemporary::No)\n                 );\n                 this.build_binary_op(block, op, expr_span, expr.ty, lhs, rhs)\n             }\n             ExprKind::Unary { op, arg } => {\n                 let arg = unpack!(\n                     block =\n-                        this.as_operand(block, scope, &this.thir[arg], None, NeedsTemporary::No)\n+                        this.as_operand(block, scope, &this.thir[arg], LocalInfo::Boring, NeedsTemporary::No)\n                 );\n                 // Check for -MIN on signed integers\n                 if this.check_overflow && op == UnOp::Neg && expr.ty.is_signed() {\n@@ -259,7 +259,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 } else {\n                     let ty = source.ty;\n                     let source = unpack!(\n-                        block = this.as_operand(block, scope, source, None, NeedsTemporary::No)\n+                        block = this.as_operand(block, scope, source, LocalInfo::Boring, NeedsTemporary::No)\n                     );\n                     (source, ty)\n                 };\n@@ -272,7 +272,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Pointer { cast, source } => {\n                 let source = unpack!(\n                     block =\n-                        this.as_operand(block, scope, &this.thir[source], None, NeedsTemporary::No)\n+                        this.as_operand(block, scope, &this.thir[source], LocalInfo::Boring, NeedsTemporary::No)\n                 );\n                 block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n             }\n@@ -314,7 +314,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 block,\n                                 scope,\n                                 &this.thir[f],\n-                                None,\n+                                LocalInfo::Boring,\n                                 NeedsTemporary::Maybe\n                             )\n                         )\n@@ -335,7 +335,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 block,\n                                 scope,\n                                 &this.thir[f],\n-                                None,\n+                                LocalInfo::Boring,\n                                 NeedsTemporary::Maybe\n                             )\n                         )\n@@ -423,7 +423,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                                 block,\n                                                 scope,\n                                                 upvar,\n-                                                None,\n+                                                LocalInfo::Boring,\n                                                 NeedsTemporary::Maybe\n                                             )\n                                         )\n@@ -502,7 +502,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Some(Category::Rvalue(RvalueFunc::AsRvalue) | Category::Constant)\n                 ));\n                 let operand =\n-                    unpack!(block = this.as_operand(block, scope, expr, None, NeedsTemporary::No));\n+                    unpack!(block = this.as_operand(block, scope, expr, LocalInfo::Boring, NeedsTemporary::No));\n                 block.and(Rvalue::Use(operand))\n             }\n         }\n@@ -622,7 +622,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         } else {\n             // For a non-const, we may need to generate an appropriate `Drop`\n             let value_operand =\n-                unpack!(block = this.as_operand(block, scope, value, None, NeedsTemporary::No));\n+                unpack!(block = this.as_operand(block, scope, value, LocalInfo::Boring, NeedsTemporary::No));\n             if let Operand::Move(to_drop) = value_operand {\n                 let success = this.cfg.start_new_block();\n                 this.cfg.terminate("}, {"sha": "f978a920f43ae341997fe7fb509fd58d5ff33475", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -58,17 +58,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 ExprKind::StaticRef { def_id, .. } => {\n                     assert!(!this.tcx.is_thread_local_static(def_id));\n                     local_decl.internal = true;\n-                    local_decl.local_info =\n-                        Some(Box::new(LocalInfo::StaticRef { def_id, is_thread_local: false }));\n+                    **local_decl.local_info.as_mut().assert_crate_local() =\n+                        LocalInfo::StaticRef { def_id, is_thread_local: false };\n                 }\n                 ExprKind::ThreadLocalRef(def_id) => {\n                     assert!(this.tcx.is_thread_local_static(def_id));\n                     local_decl.internal = true;\n-                    local_decl.local_info =\n-                        Some(Box::new(LocalInfo::StaticRef { def_id, is_thread_local: true }));\n+                    **local_decl.local_info.as_mut().assert_crate_local() =\n+                        LocalInfo::StaticRef { def_id, is_thread_local: true };\n                 }\n                 ExprKind::NamedConst { def_id, .. } | ExprKind::ConstParam { def_id, .. } => {\n-                    local_decl.local_info = Some(Box::new(LocalInfo::ConstRef { def_id }));\n+                    **local_decl.local_info.as_mut().assert_crate_local() = LocalInfo::ConstRef { def_id };\n                 }\n                 _ => {}\n             }"}, {"sha": "ebe8ea25ad3af04001fa781cac4d75868e1d8a5d", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -328,15 +328,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fields_map: FxHashMap<_, _> = fields\n                     .into_iter()\n                     .map(|f| {\n-                        let local_info = Box::new(LocalInfo::AggregateTemp);\n                         (\n                             f.name,\n                             unpack!(\n                                 block = this.as_operand(\n                                     block,\n                                     Some(scope),\n                                     &this.thir[f.expr],\n-                                    Some(local_info),\n+                                    LocalInfo::AggregateTemp,\n                                     NeedsTemporary::Maybe,\n                                 )\n                             ),\n@@ -526,7 +525,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         block,\n                         Some(scope),\n                         &this.thir[value],\n-                        None,\n+                        LocalInfo::Boring,\n                         NeedsTemporary::No\n                     )\n                 );"}, {"sha": "43d4a72390f3bdefac3feaea3f2f7267b8cc5f25", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -607,9 +607,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     // };\n                     // ```\n                     if let Some(place) = initializer.try_to_place(self) {\n-                        let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                        let LocalInfo::User(BindingForm::Var(\n                             VarBindingForm { opt_match_place: Some((ref mut match_place, _)), .. },\n-                        )))) = self.local_decls[local].local_info else {\n+                        )) = **self.local_decls[local].local_info.as_mut().assert_crate_local() else {\n                             bug!(\"Let binding to non-user variable.\")\n                         };\n                         *match_place = Some(place);\n@@ -1754,7 +1754,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fake_borrow_ty = tcx.mk_imm_ref(tcx.lifetimes.re_erased, fake_borrow_deref_ty);\n                 let mut fake_borrow_temp = LocalDecl::new(fake_borrow_ty, temp_span);\n                 fake_borrow_temp.internal = self.local_decls[matched_place.local].internal;\n-                fake_borrow_temp.local_info = Some(Box::new(LocalInfo::FakeBorrow));\n+                fake_borrow_temp.local_info = ClearCrossCrate::Set(Box::new(LocalInfo::FakeBorrow));\n                 let fake_borrow_temp = self.local_decls.push(fake_borrow_temp);\n \n                 (matched_place, fake_borrow_temp)\n@@ -2225,7 +2225,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             source_info,\n             internal: false,\n             is_block_tail: None,\n-            local_info: Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+            local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(BindingForm::Var(\n                 VarBindingForm {\n                     binding_mode,\n                     // hypothetically, `visit_primary_bindings` could try to unzip\n@@ -2236,7 +2236,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     opt_match_place,\n                     pat_span,\n                 },\n-            ))))),\n+            )))),\n         };\n         let for_arm_body = self.local_decls.push(local);\n         self.var_debug_info.push(VarDebugInfo {\n@@ -2254,9 +2254,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 source_info,\n                 internal: false,\n                 is_block_tail: None,\n-                local_info: Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(\n-                    BindingForm::RefForGuard,\n-                )))),\n+                local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(BindingForm::RefForGuard))),\n             });\n             self.var_debug_info.push(VarDebugInfo {\n                 name,"}, {"sha": "6814fd4cb35e0c1dd17c691271f14f5a3d27afa2", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -876,20 +876,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 } => {\n                     self.local_decls[local].mutability = mutability;\n                     self.local_decls[local].source_info.scope = self.source_scope;\n-                    self.local_decls[local].local_info = if let Some(kind) = param.self_kind {\n-                        Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(\n+                    **self.local_decls[local].local_info.as_mut().assert_crate_local() = if let Some(kind) = param.self_kind {\n+                        LocalInfo::User(\n                             BindingForm::ImplicitSelf(kind),\n-                        ))))\n+                        )\n                     } else {\n                         let binding_mode = ty::BindingMode::BindByValue(mutability);\n-                        Some(Box::new(LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                        LocalInfo::User(BindingForm::Var(\n                             VarBindingForm {\n                                 binding_mode,\n                                 opt_ty_info: param.ty_span,\n                                 opt_match_place: Some((None, span)),\n                                 pat_span: span,\n                             },\n-                        )))))\n+                        ))\n                     };\n                     self.var_indices.insert(var, LocalsForNode::One(local));\n                 }"}, {"sha": "3d32c586554d50fe11235385bf7faec831636c84", "filename": "compiler/rustc_mir_transform/src/check_const_item_mutation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_const_item_mutation.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -24,7 +24,7 @@ struct ConstMutationChecker<'a, 'tcx> {\n \n impl<'tcx> ConstMutationChecker<'_, 'tcx> {\n     fn is_const_item(&self, local: Local) -> Option<DefId> {\n-        if let Some(box LocalInfo::ConstRef { def_id }) = self.body.local_decls[local].local_info {\n+        if let LocalInfo::ConstRef { def_id } = *self.body.local_decls[local].local_info() {\n             Some(def_id)\n         } else {\n             None"}, {"sha": "c4d058e8ecbf6adee41c2a15df285dcd58dc50f5", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -182,7 +182,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             // If the projection root is an artificial local that we introduced when\n             // desugaring `static`, give a more specific error message\n             // (avoid the general \"raw pointer\" clause below, that would only be confusing).\n-            if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {\n+            if let LocalInfo::StaticRef { def_id, .. } = *decl.local_info() {\n                 if self.tcx.is_mutable_static(def_id) {\n                     self.require_unsafe(\n                         UnsafetyViolationKind::General,"}, {"sha": "b8a5b92be4a6a1e78c5722366a71eca187625402", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -40,7 +40,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefChecker<'tcx> {\n                     let temp = self.patcher.new_internal_with_info(\n                         ty,\n                         self.local_decls[p_ref.local].source_info.span,\n-                        Some(Box::new(LocalInfo::DerefTemp)),\n+                        LocalInfo::DerefTemp,\n                     );\n \n                     // We are adding current p_ref's projections to our"}, {"sha": "e6875fad3068d8777e7f53a38c0c3ff78768558f", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -924,13 +924,19 @@ fn compute_layout<'tcx>(\n         debug!(?decl);\n \n         let ignore_for_traits = if tcx.sess.opts.unstable_opts.drop_tracking_mir {\n+            // Do not `assert_crate_local` here, as post-borrowck cleanup may have already cleared\n+            // the information. This is alright, since `ignore_for_traits` is only relevant when\n+            // this code runs on pre-cleanup MIR, and `ignore_for_traits = false` is the safer\n+            // default.\n             match decl.local_info {\n                 // Do not include raw pointers created from accessing `static` items, as those could\n                 // well be re-created by another access to the same static.\n-                Some(box LocalInfo::StaticRef { is_thread_local, .. }) => !is_thread_local,\n+                ClearCrossCrate::Set(box LocalInfo::StaticRef { is_thread_local, .. }) => {\n+                    !is_thread_local\n+                }\n                 // Fake borrows are only read by fake reads, so do not have any reality in\n                 // post-analysis MIR.\n-                Some(box LocalInfo::FakeBorrow) => true,\n+                ClearCrossCrate::Set(box LocalInfo::FakeBorrow) => true,\n                 _ => false,\n             }\n         } else {"}, {"sha": "bdf1de468b398072eebe6dccd518d3d652bc9e7a", "filename": "tests/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcb161def7dbef64aebe698c42373d13b44a1c53/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bcb161def7dbef64aebe698c42373d13b44a1c53/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=bcb161def7dbef64aebe698c42373d13b44a1c53", "patch": "@@ -12,7 +12,6 @@\n       let mut _7: !;                       // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n       let mut _8: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n       let _9: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      let mut _16: i32;                    // in scope 0 at $SRC_DIR/core/src/result.rs:LL:COL\n       scope 1 {\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           scope 2 {\n@@ -23,7 +22,7 @@\n                   scope 9 {\n                       debug e => _14;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n                       scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                          debug t => _16;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                          debug t => _14;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                       }\n                   }\n               }\n@@ -90,10 +89,7 @@\n           StorageLive(_14);                // scope 2 at $DIR/separate_const_switch.rs:+1:8: +1:10\n           _14 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _16 = move _14;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _15 = move _16;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          _15 = move _14;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n           _0 = Result::<i32, i32>::Err(move _15); // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageDead(_14);                // scope 2 at $DIR/separate_const_switch.rs:+1:8: +1:10"}]}