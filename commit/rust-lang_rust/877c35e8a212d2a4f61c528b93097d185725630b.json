{"sha": "877c35e8a212d2a4f61c528b93097d185725630b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3N2MzNWU4YTIxMmQyYTRmNjFjNTI4YjkzMDk3ZDE4NTcyNTYzMGI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-02T13:14:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-13T12:19:18Z"}, "message": "Remove now redundant NodeId from Variant", "tree": {"sha": "0daa2d8362d2ee6ac531c132e016373f1b22d7a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0daa2d8362d2ee6ac531c132e016373f1b22d7a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/877c35e8a212d2a4f61c528b93097d185725630b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/877c35e8a212d2a4f61c528b93097d185725630b", "html_url": "https://github.com/rust-lang/rust/commit/877c35e8a212d2a4f61c528b93097d185725630b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/877c35e8a212d2a4f61c528b93097d185725630b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "495566ee61174066014b928fffd182834c1eb214", "url": "https://api.github.com/repos/rust-lang/rust/commits/495566ee61174066014b928fffd182834c1eb214", "html_url": "https://github.com/rust-lang/rust/commit/495566ee61174066014b928fffd182834c1eb214"}], "stats": {"total": 199, "additions": 88, "deletions": 111}, "files": [{"sha": "3d45c52171fa07ceb5ef53a6fc1c69a2a266ddd1", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -134,7 +134,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n             ItemEnum(ref enum_definition, _) => {\n                 for v in &enum_definition.variants {\n                     let variant_def_index =\n-                        self.insert_def(v.node.id,\n+                        self.insert_def(v.node.def.id,\n                                         NodeVariant(&**v),\n                                         DefPathData::EnumVariant(v.node.name));\n "}, {"sha": "f66d9a9b3991e93915656f3ea874d95a3e0008cd", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -665,10 +665,10 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n                         s: &hir::StructDef,\n                         name: ast::Name,\n                         g: &hir::Generics,\n-                        id: ast::NodeId) {\n-        run_lints!(self, check_struct_def, late_passes, s, name, g, id);\n+                        item_id: ast::NodeId) {\n+        run_lints!(self, check_struct_def, late_passes, s, name, g, item_id);\n         hir_visit::walk_struct_def(self, s);\n-        run_lints!(self, check_struct_def_post, late_passes, s, name, g, id);\n+        run_lints!(self, check_struct_def_post, late_passes, s, name, g, item_id);\n     }\n \n     fn visit_struct_field(&mut self, s: &hir::StructField) {\n@@ -678,10 +678,10 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n         })\n     }\n \n-    fn visit_variant(&mut self, v: &hir::Variant, g: &hir::Generics) {\n+    fn visit_variant(&mut self, v: &hir::Variant, g: &hir::Generics, item_id: ast::NodeId) {\n         self.with_lint_attrs(&v.node.attrs, |cx| {\n             run_lints!(cx, check_variant, late_passes, v, g);\n-            hir_visit::walk_variant(cx, v, g);\n+            hir_visit::walk_variant(cx, v, g, item_id);\n             run_lints!(cx, check_variant_post, late_passes, v, g);\n         })\n     }\n@@ -814,10 +814,10 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n                         s: &ast::StructDef,\n                         ident: ast::Ident,\n                         g: &ast::Generics,\n-                        id: ast::NodeId) {\n-        run_lints!(self, check_struct_def, early_passes, s, ident, g, id);\n+                        item_id: ast::NodeId) {\n+        run_lints!(self, check_struct_def, early_passes, s, ident, g, item_id);\n         ast_visit::walk_struct_def(self, s);\n-        run_lints!(self, check_struct_def_post, early_passes, s, ident, g, id);\n+        run_lints!(self, check_struct_def_post, early_passes, s, ident, g, item_id);\n     }\n \n     fn visit_struct_field(&mut self, s: &ast::StructField) {\n@@ -827,10 +827,10 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n         })\n     }\n \n-    fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics) {\n+    fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics, item_id: ast::NodeId) {\n         self.with_lint_attrs(&v.node.attrs, |cx| {\n             run_lints!(cx, check_variant, early_passes, v, g);\n-            ast_visit::walk_variant(cx, v, g);\n+            ast_visit::walk_variant(cx, v, g, item_id);\n             run_lints!(cx, check_variant_post, early_passes, v, g);\n         })\n     }"}, {"sha": "75cc04a98c66ffdffa7ae842746d24c088281b15", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -1019,7 +1019,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         encode_attributes(rbml_w, &item.attrs);\n         encode_repr_attrs(rbml_w, ecx, &item.attrs);\n         for v in &enum_definition.variants {\n-            encode_variant_id(rbml_w, ecx.tcx.map.local_def_id(v.node.id));\n+            encode_variant_id(rbml_w, ecx.tcx.map.local_def_id(v.node.def.id));\n         }\n         encode_inlined_item(ecx, rbml_w, InlinedItemRef::Item(item));\n         encode_path(rbml_w, path);"}, {"sha": "152f2e92490be626aaa7b95881d68a2d0ae4384b", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n                         let mut recursion_visitor =\n                             CheckItemRecursionVisitor::new(self, &variant.span);\n                         recursion_visitor.populate_enum_discriminants(enum_def);\n-                        recursion_visitor.visit_variant(variant, generics);\n+                        recursion_visitor.visit_variant(variant, generics, it.id);\n                     }\n                 }\n             }\n@@ -168,7 +168,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n         let mut discriminant_map = self.discriminant_map.borrow_mut();\n         match enum_definition.variants.first() {\n             None => { return; }\n-            Some(variant) if discriminant_map.contains_key(&variant.node.id) => {\n+            Some(variant) if discriminant_map.contains_key(&variant.node.def.id) => {\n                 return;\n             }\n             _ => {}\n@@ -177,7 +177,7 @@ impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> {\n         // Go through all the variants.\n         let mut variant_stack: Vec<ast::NodeId> = Vec::new();\n         for variant in enum_definition.variants.iter().rev() {\n-            variant_stack.push(variant.node.id);\n+            variant_stack.push(variant.node.def.id);\n             // When we find an expression, every variant currently on the stack\n             // is affected by that expression.\n             if let Some(ref expr) = variant.node.disr_expr {\n@@ -201,14 +201,14 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n     }\n \n     fn visit_enum_def(&mut self, enum_definition: &'ast hir::EnumDef,\n-                      generics: &'ast hir::Generics) {\n+                      generics: &'ast hir::Generics, item_id: ast::NodeId) {\n         self.populate_enum_discriminants(enum_definition);\n-        visit::walk_enum_def(self, enum_definition, generics);\n+        visit::walk_enum_def(self, enum_definition, generics, item_id);\n     }\n \n     fn visit_variant(&mut self, variant: &'ast hir::Variant,\n-                     _: &'ast hir::Generics) {\n-        let variant_id = variant.node.id;\n+                     _: &'ast hir::Generics, _: ast::NodeId) {\n+        let variant_id = variant.node.def.id;\n         let maybe_expr;\n         if let Some(get_expr) = self.discriminant_map.borrow().get(&variant_id) {\n             // This is necessary because we need to let the `discriminant_map`\n@@ -269,9 +269,10 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckItemRecursionVisitor<'a, 'ast> {\n                                 self.ast_map.expect_item(enum_node_id).node\n                             {\n                                 self.populate_enum_discriminants(enum_def);\n+                                let enum_id = self.ast_map.as_local_node_id(enum_id).unwrap();\n                                 let variant_id = self.ast_map.as_local_node_id(variant_id).unwrap();\n                                 let variant = self.ast_map.expect_variant(variant_id);\n-                                self.visit_variant(variant, generics);\n+                                self.visit_variant(variant, generics, enum_id);\n                             } else {\n                                 self.sess.span_bug(e.span,\n                                                    \"`check_static_recursion` found \\"}, {"sha": "550094d2746b3c2e794eeef9d32530abbbeaaae9", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -63,7 +63,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n     fn variant_expr<'a>(variants: &'a [P<hir::Variant>], id: ast::NodeId)\n                         -> Option<&'a Expr> {\n         for variant in variants {\n-            if variant.node.id == id {\n+            if variant.node.def.id == id {\n                 return variant.node.disr_expr.as_ref().map(|e| &**e);\n             }\n         }"}, {"sha": "c243e30e9f92d13468209762185abc56846cc874", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -339,7 +339,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n         }\n         match item.node {\n             hir::ItemEnum(ref enum_def, _) if allow_dead_code => {\n-                self.worklist.extend(enum_def.variants.iter().map(|variant| variant.node.id));\n+                self.worklist.extend(enum_def.variants.iter().map(|variant| variant.node.def.id));\n             }\n             hir::ItemTrait(_, _, _, ref trait_items) => {\n                 for trait_item in trait_items {\n@@ -466,7 +466,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     }\n \n     fn should_warn_about_variant(&mut self, variant: &hir::Variant_) -> bool {\n-        !self.symbol_is_live(variant.id, None)\n+        !self.symbol_is_live(variant.def.id, None)\n             && !has_allow_dead_code_or_lang_attr(&variant.attrs)\n     }\n \n@@ -542,7 +542,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n                 hir::ItemEnum(ref enum_def, _) => {\n                     for variant in &enum_def.variants {\n                         if self.should_warn_about_variant(&variant.node) {\n-                            self.warn_dead_code(variant.node.id, variant.span,\n+                            self.warn_dead_code(variant.node.def.id, variant.span,\n                                                 variant.node.name, \"variant\");\n                         }\n                     }"}, {"sha": "5a83899e02b6bdf4a9769e18c74de47c2c7d4d4b", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -207,9 +207,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n                       |v| visit::walk_impl_item(v, ii), true);\n     }\n \n-    fn visit_variant(&mut self, var: &Variant, g: &'v Generics) {\n-        self.annotate(var.node.id, true, &var.node.attrs, var.span,\n-                      |v| visit::walk_variant(v, var, g), true)\n+    fn visit_variant(&mut self, var: &Variant, g: &'v Generics, item_id: NodeId) {\n+        self.annotate(var.node.def.id, true, &var.node.attrs, var.span,\n+                      |v| visit::walk_variant(v, var, g, item_id), true)\n     }\n \n     fn visit_struct_field(&mut self, s: &StructField) {"}, {"sha": "57b52eae8efb78c2e1f83f62c71b16484f8beeda", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -301,18 +301,17 @@ mod svh_visitor {\n     }\n \n     impl<'a, 'v> Visitor<'v> for StrictVersionHashVisitor<'a> {\n-        fn visit_struct_def(&mut self, s: &StructDef, name: Name,\n-                            g: &Generics, _: NodeId) {\n+        fn visit_struct_def(&mut self, s: &StructDef, name: Name, g: &Generics, _: NodeId) {\n             SawStructDef(name.as_str()).hash(self.st);\n             visit::walk_generics(self, g);\n             visit::walk_struct_def(self, s)\n         }\n \n-        fn visit_variant(&mut self, v: &Variant, g: &Generics) {\n+        fn visit_variant(&mut self, v: &Variant, g: &Generics, item_id: NodeId) {\n             SawVariant.hash(self.st);\n             // walk_variant does not call walk_generics, so do it here.\n             visit::walk_generics(self, g);\n-            visit::walk_variant(self, v, g)\n+            visit::walk_variant(self, v, g, item_id)\n         }\n \n         // All of the remaining methods just record (in the hash"}, {"sha": "409b037d92214fd6aaf0cb2dc0a1575c0f0b9fb9", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -435,9 +435,8 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod { abi, items }: ForeignMod,\n }\n \n pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned {node: Variant_ {id, name, attrs, def, disr_expr}, span}| Spanned {\n+    v.map(|Spanned {node: Variant_ {name, attrs, def, disr_expr}, span}| Spanned {\n         node: Variant_ {\n-            id: fld.new_id(id),\n             name: name,\n             attrs: fold_attrs(attrs, fld),\n             def: fld.fold_struct_def(def),"}, {"sha": "04b54ab47c64ca8b88e82648f6ff70cc8505d117", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -1030,7 +1030,6 @@ pub struct Variant_ {\n     pub name: Name,\n     pub attrs: Vec<Attribute>,\n     pub def: P<StructDef>,\n-    pub id: NodeId,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n }"}, {"sha": "9633fbf6732f8de42bbaf7c409da0f859daedd9a", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -264,7 +264,6 @@ pub fn lower_foreign_mod(_lctx: &LoweringContext, fm: &ForeignMod) -> hir::Forei\n pub fn lower_variant(_lctx: &LoweringContext, v: &Variant) -> P<hir::Variant> {\n     P(Spanned {\n         node: hir::Variant_ {\n-            id: v.node.id,\n             name: v.node.name.name,\n             attrs: v.node.attrs.clone(),\n             def: lower_struct_def(_lctx, &v.node.def),"}, {"sha": "540ca575c15fcaad7b060bb0c9161d68902bd133", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -194,11 +194,6 @@ impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O>\n                     }\n                 }\n             }\n-            ItemEnum(ref enum_definition, _) => {\n-                for variant in &enum_definition.variants {\n-                    self.operation.visit_id(variant.node.id)\n-                }\n-            }\n             _ => {}\n         }\n \n@@ -290,8 +285,7 @@ impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O>\n                         struct_def: &StructDef,\n                         _: Name,\n                         _: &hir::Generics,\n-                        id: NodeId) {\n-        self.operation.visit_id(id);\n+                        _: NodeId) {\n         self.operation.visit_id(struct_def.id);\n         visit::walk_struct_def(self, struct_def);\n     }"}, {"sha": "4af60c905e4c81ed397913cf8e61ab82787eb949", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -118,14 +118,13 @@ pub trait Visitor<'v> : Sized {\n     fn visit_struct_field(&mut self, s: &'v StructField) {\n         walk_struct_field(self, s)\n     }\n-    fn visit_enum_def(&mut self, enum_definition: &'v EnumDef, generics: &'v Generics) {\n-        walk_enum_def(self, enum_definition, generics)\n+    fn visit_enum_def(&mut self, enum_definition: &'v EnumDef,\n+                      generics: &'v Generics, item_id: NodeId) {\n+        walk_enum_def(self, enum_definition, generics, item_id)\n     }\n-\n-    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics) {\n-        walk_variant(self, v, g)\n+    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics, item_id: NodeId) {\n+        walk_variant(self, v, g, item_id)\n     }\n-\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n@@ -293,7 +292,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemEnum(ref enum_definition, ref type_parameters) => {\n             visitor.visit_generics(type_parameters);\n-            visitor.visit_enum_def(enum_definition, type_parameters)\n+            visitor.visit_enum_def(enum_definition, type_parameters, item.id)\n         }\n         ItemDefaultImpl(_, ref trait_ref) => {\n             visitor.visit_trait_ref(trait_ref)\n@@ -310,7 +309,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemStruct(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_struct_def(struct_definition, item.name, generics, item.id)\n+            visitor.visit_struct_def(struct_definition, item.name, generics, item.id);\n         }\n         ItemTrait(_, ref generics, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n@@ -323,17 +322,19 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n \n pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n                                          enum_definition: &'v EnumDef,\n-                                         generics: &'v Generics) {\n+                                         generics: &'v Generics,\n+                                         item_id: NodeId) {\n     for variant in &enum_definition.variants {\n-        visitor.visit_variant(variant, generics);\n+        visitor.visit_variant(variant, generics, item_id);\n     }\n }\n \n pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         variant: &'v Variant,\n-                                        generics: &'v Generics) {\n+                                        generics: &'v Generics,\n+                                        item_id: NodeId) {\n     visitor.visit_name(variant.span, variant.node.name);\n-    visitor.visit_struct_def(&variant.node.def, variant.node.name, generics, variant.node.id);\n+    visitor.visit_struct_def(&variant.node.def, variant.node.name, generics, item_id);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n }"}, {"sha": "c9889ee47a6b38ce8855c7db08e080bb99d46ebd", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -428,14 +428,14 @@ impl LateLintPass for MissingDoc {\n     }\n \n     fn check_struct_def(&mut self, _: &LateContext, _: &hir::StructDef,\n-                        _: ast::Name, _: &hir::Generics, id: ast::NodeId) {\n-        self.struct_def_stack.push(id);\n+                        _: ast::Name, _: &hir::Generics, item_id: ast::NodeId) {\n+        self.struct_def_stack.push(item_id);\n     }\n \n     fn check_struct_def_post(&mut self, _: &LateContext, _: &hir::StructDef,\n-                             _: ast::Name, _: &hir::Generics, id: ast::NodeId) {\n+                             _: ast::Name, _: &hir::Generics, item_id: ast::NodeId) {\n         let popped = self.struct_def_stack.pop().expect(\"empty struct_def_stack\");\n-        assert!(popped == id);\n+        assert!(popped == item_id);\n     }\n \n     fn check_crate(&mut self, cx: &LateContext, krate: &hir::Crate) {\n@@ -527,7 +527,7 @@ impl LateLintPass for MissingDoc {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext, v: &hir::Variant, _: &hir::Generics) {\n-        self.check_missing_docs_attrs(cx, Some(v.node.id), &v.node.attrs, v.span, \"a variant\");\n+        self.check_missing_docs_attrs(cx, Some(v.node.def.id), &v.node.attrs, v.span, \"a variant\");\n         assert!(!self.in_variant);\n         self.in_variant = true;\n     }"}, {"sha": "b5436fb922a2cc7c7fe1e23978df9daedc65a213", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -82,7 +82,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n                     // The parent is considered the enclosing enum because the\n                     // enum will dictate the privacy visibility of this variant\n                     // instead.\n-                    self.parents.insert(variant.node.id, item.id);\n+                    self.parents.insert(variant.node.def.id, item.id);\n                 }\n             }\n \n@@ -129,11 +129,11 @@ impl<'v> Visitor<'v> for ParentVisitor {\n     }\n \n     fn visit_struct_def(&mut self, s: &hir::StructDef, _: ast::Name,\n-                        _: &'v hir::Generics, n: ast::NodeId) {\n+                        _: &'v hir::Generics, item_id: ast::NodeId) {\n         // Struct constructors are parented to their struct definitions because\n         // they essentially are the struct definitions.\n         if s.kind != hir::VariantKind::Dict {\n-            self.parents.insert(s.id, n);\n+            self.parents.insert(s.id, item_id);\n         }\n \n         // While we have the id of the struct definition, go ahead and parent\n@@ -233,8 +233,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             // public all variants are public unless they're explicitly priv\n             hir::ItemEnum(ref def, _) if public_first => {\n                 for variant in &def.variants {\n-                    self.exported_items.insert(variant.node.id);\n-                    self.public_items.insert(variant.node.id);\n+                    self.exported_items.insert(variant.node.def.id);\n+                    self.public_items.insert(variant.node.def.id);\n                 }\n             }\n \n@@ -1430,10 +1430,10 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n         visit::walk_ty(self, t)\n     }\n \n-    fn visit_variant(&mut self, v: &hir::Variant, g: &hir::Generics) {\n-        if self.exported_items.contains(&v.node.id) {\n+    fn visit_variant(&mut self, v: &hir::Variant, g: &hir::Generics, item_id: ast::NodeId) {\n+        if self.exported_items.contains(&v.node.def.id) {\n             self.in_variant = true;\n-            visit::walk_variant(self, v, g);\n+            visit::walk_variant(self, v, g, item_id);\n             self.in_variant = false;\n         }\n     }"}, {"sha": "9f19e178a0dd707f4920844dc7e26b050912f4af", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -590,7 +590,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         let is_exported = match variant.node.def.kind {\n             hir::VariantKind::Dict => {\n                 // Not adding fields for variants as they are not accessed with a self receiver\n-                let variant_def_id = self.ast_map.local_def_id(variant.node.id);\n+                let variant_def_id = self.ast_map.local_def_id(variant.node.def.id);\n                 self.structs.insert(variant_def_id, Vec::new());\n                 true\n             }\n@@ -603,10 +603,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         // variants are always treated as importable to allow them to be glob\n         // used\n         child.define_value(DefVariant(item_id,\n-                                      self.ast_map.local_def_id(variant.node.id), is_exported),\n+                                      self.ast_map.local_def_id(variant.node.def.id), is_exported),\n                            variant.span, DefModifiers::PUBLIC | DefModifiers::IMPORTABLE);\n         child.define_type(DefVariant(item_id,\n-                                     self.ast_map.local_def_id(variant.node.id), is_exported),\n+                                     self.ast_map.local_def_id(variant.node.def.id), is_exported),\n                           variant.span, DefModifiers::PUBLIC | DefModifiers::IMPORTABLE);\n     }\n "}, {"sha": "9c7054e592ccfa6c48447eb485e749991fce5fff", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -491,7 +491,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         }\n         visit::walk_poly_trait_ref(self, tref, m);\n     }\n-    fn visit_variant(&mut self, variant: &hir::Variant, generics: &Generics) {\n+    fn visit_variant(&mut self, variant: &hir::Variant, generics: &Generics, item_id: ast::NodeId) {\n         execute_callback!(hir_map::Node::NodeVariant(variant), self);\n         if let Some(ref dis_expr) = variant.node.disr_expr {\n             // resolve the discriminator expr as a constant\n@@ -501,7 +501,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         }\n \n         // `visit::walk_variant` without the discriminant expression.\n-        self.visit_struct_def(&variant.node.def, variant.node.name, generics, variant.node.id);\n+        self.visit_struct_def(&variant.node.def, variant.node.name, generics, item_id);\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem) {\n         execute_callback!(hir_map::Node::NodeForeignItem(foreign_item), self);"}, {"sha": "c366872362020917f56acc36388457fad6f6be26", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -503,15 +503,15 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n             self.fmt.struct_variant_str(variant.span,\n                                         self.span.span_for_first_ident(variant.span),\n-                                        variant.node.id,\n+                                        variant.node.def.id,\n                                         variant.node.def.id,\n                                         &qualname,\n                                         &enum_data.qualname,\n                                         &val,\n                                         enum_data.id);\n \n             for field in &variant.node.def.fields {\n-                self.process_struct_field_def(field, variant.node.id);\n+                self.process_struct_field_def(field, variant.node.def.id);\n                 self.visit_ty(&*field.node.ty);\n             }\n         }"}, {"sha": "0ba4ba3e604ee5fe43c5d49f4ad33d8a4e1605d2", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -110,8 +110,8 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n                     let ty_vs = &ccx.tcx().lookup_adt_def(parent_id).variants;\n                     assert_eq!(ast_vs.len(), ty_vs.len());\n                     for (ast_v, ty_v) in ast_vs.iter().zip(ty_vs.iter()) {\n-                        if ty_v.did == fn_id { my_id = ast_v.node.id; }\n-                        ccx.external().borrow_mut().insert(ty_v.did, Some(ast_v.node.id));\n+                        if ty_v.did == fn_id { my_id = ast_v.node.def.id; }\n+                        ccx.external().borrow_mut().insert(ty_v.did, Some(ast_v.node.def.id));\n                     }\n                 }\n                 hir::ItemStruct(ref struct_def, _) => {"}, {"sha": "decc269442d81a31f1bf3d6bcdcfbc58ea868548", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -1075,7 +1075,7 @@ fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         // an item.\n         convert_variant_ctor(\n             ccx.tcx,\n-            variant.node.id,\n+            variant.node.def.id,\n             ty_variant,\n             scheme.clone(),\n             predicates.clone()\n@@ -1206,7 +1206,7 @@ fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                   disr: ty::Disr)\n                                   -> ty::VariantDefData<'tcx, 'tcx>\n     {\n-        let did = tcx.map.local_def_id(v.node.id);\n+        let did = tcx.map.local_def_id(v.node.def.id);\n         let name = v.node.name;\n         convert_struct_variant(tcx, did, name, disr, &v.node.def)\n     }"}, {"sha": "59ff7f53f873317c7189ac034a3d95944ab9c0e2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -1853,7 +1853,7 @@ impl Clean<Item> for doctree::Variant {\n             source: self.whence.clean(cx),\n             visibility: None,\n             stability: self.stab.clean(cx),\n-            def_id: cx.map.local_def_id(self.id),\n+            def_id: cx.map.local_def_id(self.def.id),\n             inner: VariantItem(Variant {\n                 kind: struct_def_to_variant_kind(&self.def, cx),\n             }),"}, {"sha": "06b1e93e604b5c0d92d56914b101b97f37f83aa2", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -120,7 +120,6 @@ pub struct Variant {\n     pub name: Name,\n     pub attrs: Vec<ast::Attribute>,\n     pub def: P<hir::StructDef>,\n-    pub id: ast::NodeId,\n     pub stab: Option<attr::Stability>,\n     pub whence: Span,\n }"}, {"sha": "78c56b934272a4f58d4c490707b92120d411f685", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -111,8 +111,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             variants: def.variants.iter().map(|v| Variant {\n                 name: v.node.name,\n                 attrs: v.node.attrs.clone(),\n-                stab: self.stability(v.node.id),\n-                id: v.node.id,\n+                stab: self.stability(v.node.def.id),\n                 def: v.node.def.clone(),\n                 whence: v.span,\n             }).collect(),"}, {"sha": "53246963dc882bf3a95d5e6e6292fdd42d40e25f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -1586,7 +1586,6 @@ pub struct Variant_ {\n     pub name: Ident,\n     pub attrs: Vec<Attribute>,\n     pub def: P<StructDef>,\n-    pub id: NodeId,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n }"}, {"sha": "592770ea4825cde8c1a40e2f0667546458ad523e", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -360,11 +360,6 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n                     }\n                 }\n             }\n-            ItemEnum(ref enum_definition, _) => {\n-                for variant in &enum_definition.variants {\n-                    self.operation.visit_id(variant.node.id)\n-                }\n-            }\n             _ => {}\n         }\n \n@@ -461,8 +456,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n                         struct_def: &StructDef,\n                         _: ast::Ident,\n                         _: &ast::Generics,\n-                        id: NodeId) {\n-        self.operation.visit_id(id);\n+                        _: NodeId) {\n         self.operation.visit_id(struct_def.id);\n         visit::walk_struct_def(self, struct_def);\n     }"}, {"sha": "744f83467d601a0abcabbd2057d326a36ebda860", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -140,11 +140,10 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n                 if !(cx.in_cfg)(&v.node.attrs) {\n                     None\n                 } else {\n-                    Some(v.map(|Spanned {node: ast::Variant_ {id, name, attrs, def,\n+                    Some(v.map(|Spanned {node: ast::Variant_ {name, attrs, def,\n                                                               disr_expr}, span}| {\n                         Spanned {\n                             node: ast::Variant_ {\n-                                id: id,\n                                 name: name,\n                                 attrs: attrs,\n                                 def: fold_struct(cx, def),"}, {"sha": "706a16d1f02282d87c628611fa9d034a49f59bea", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -1011,7 +1011,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                    def: P(ast::StructDef { fields: fields,\n                                            id: ast::DUMMY_NODE_ID,\n                                            kind: kind }),\n-                   id: ast::DUMMY_NODE_ID,\n                    disr_expr: None,\n                })\n     }"}, {"sha": "7da09f5188356171af64d8c9197ab2b729b8f4e2", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -450,9 +450,8 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n }\n \n pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned {node: Variant_ {id, name, attrs, def, disr_expr}, span}| Spanned {\n+    v.map(|Spanned {node: Variant_ {name, attrs, def, disr_expr}, span}| Spanned {\n         node: Variant_ {\n-            id: fld.new_id(id),\n             name: name,\n             attrs: fold_attrs(attrs, fld),\n             def: fld.fold_struct_def(def),"}, {"sha": "09ca20653ed533df16559cbf0bbdf320bef1746b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -5176,7 +5176,6 @@ impl<'a> Parser<'a> {\n                 name: ident,\n                 attrs: variant_attrs,\n                 def: struct_def,\n-                id: ast::DUMMY_NODE_ID,\n                 disr_expr: disr_expr,\n             };\n             variants.push(P(spanned(vlo, self.last_span.hi, vr)));"}, {"sha": "5535064c8eca29e62ee83b75aa3a8c29ecdee175", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -3122,7 +3122,6 @@ mod tests {\n             def: P(ast::StructDef { fields: Vec::new(),\n                                     id: ast::DUMMY_NODE_ID,\n                                     kind: ast::VariantKind::Unit }),\n-            id: 0,\n             disr_expr: None,\n         });\n "}, {"sha": "6dc59b390f60b2640b4518ea76b67ab4a191448d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877c35e8a212d2a4f61c528b93097d185725630b/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=877c35e8a212d2a4f61c528b93097d185725630b", "patch": "@@ -85,12 +85,12 @@ pub trait Visitor<'v> : Sized {\n     }\n     fn visit_struct_field(&mut self, s: &'v StructField) { walk_struct_field(self, s) }\n     fn visit_enum_def(&mut self, enum_definition: &'v EnumDef,\n-                      generics: &'v Generics) {\n-        walk_enum_def(self, enum_definition, generics)\n+                      generics: &'v Generics, item_id: NodeId) {\n+        walk_enum_def(self, enum_definition, generics, item_id)\n+    }\n+    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics, item_id: NodeId) {\n+        walk_variant(self, v, g, item_id)\n     }\n-\n-    fn visit_variant(&mut self, v: &'v Variant, g: &'v Generics) { walk_variant(self, v, g) }\n-\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n@@ -271,7 +271,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemEnum(ref enum_definition, ref type_parameters) => {\n             visitor.visit_generics(type_parameters);\n-            visitor.visit_enum_def(enum_definition, type_parameters)\n+            visitor.visit_enum_def(enum_definition, type_parameters, item.id)\n         }\n         ItemDefaultImpl(_, ref trait_ref) => {\n             visitor.visit_trait_ref(trait_ref)\n@@ -288,10 +288,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemStruct(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_struct_def(struct_definition,\n-                                     item.ident,\n-                                     generics,\n-                                     item.id)\n+            visitor.visit_struct_def(struct_definition, item.ident, generics, item.id);\n         }\n         ItemTrait(_, ref generics, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n@@ -305,17 +302,19 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n \n pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n                                          enum_definition: &'v EnumDef,\n-                                         generics: &'v Generics) {\n+                                         generics: &'v Generics,\n+                                         item_id: NodeId) {\n     for variant in &enum_definition.variants {\n-        visitor.visit_variant(variant, generics);\n+        visitor.visit_variant(variant, generics, item_id);\n     }\n }\n \n pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         variant: &'v Variant,\n-                                        generics: &'v Generics) {\n+                                        generics: &'v Generics,\n+                                        item_id: NodeId) {\n     visitor.visit_ident(variant.span, variant.node.name);\n-    visitor.visit_struct_def(&variant.node.def, variant.node.name, generics, variant.node.id);\n+    visitor.visit_struct_def(&variant.node.def, variant.node.name, generics, item_id);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n }"}]}