{"sha": "0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NDVlNGE5MjAwYTljOTcxZjhiNWY5NWFhOWE0MzllYTBjMjAxMTY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-22T12:44:16Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-23T09:49:47Z"}, "message": "Support [rust_stack] annotation on native functions (crudely)", "tree": {"sha": "be7a9b9f697ffe007460898137d8aafd204c6e63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be7a9b9f697ffe007460898137d8aafd204c6e63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "html_url": "https://github.com/rust-lang/rust/commit/0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "894b7469d6902bba571024cc0f39c1521156d7a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/894b7469d6902bba571024cc0f39c1521156d7a3", "html_url": "https://github.com/rust-lang/rust/commit/894b7469d6902bba571024cc0f39c1521156d7a3"}], "stats": {"total": 84, "additions": 53, "deletions": 31}, "files": [{"sha": "7bc2687ba3ca1878691029753f73a1c05d2aabdb", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "patch": "@@ -141,7 +141,6 @@ fn recv_<T: send>(p: *rust_port) -> T {\n     let yieldp = ptr::addr_of(yield);\n     let mut res;\n     res = rusti::init::<T>();\n-    log(debug, ptr::addr_of(res));\n     rustrt::port_recv(ptr::addr_of(res) as *uint, p, yieldp);\n \n     if yield != 0u {"}, {"sha": "b2ec75e530fef7d1150a15cf653739d487981506", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "patch": "@@ -13,7 +13,9 @@ import libc::c_void;\n #[nolink]\n #[abi = \"cdecl\"]\n native mod libc_ {\n+    #[rust_stack]\n     fn memcpy(dest: *c_void, src: *c_void, n: libc::size_t) -> *c_void;\n+    #[rust_stack]\n     fn memmove(dest: *c_void, src: *c_void, n: libc::size_t) -> *c_void;\n }\n "}, {"sha": "2cdd24fb746b5d34a2645a32b50482778914d7d2", "filename": "src/libcore/task.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "patch": "@@ -442,7 +442,7 @@ fn yield() {\n \n     let task_ = rustrt::rust_get_task();\n     let mut killed = false;\n-    rusti::task_yield(task_, killed);\n+    rustrt::rust_task_yield(task_, killed);\n     if killed && !failing() {\n         fail \"killed\";\n     }\n@@ -533,12 +533,10 @@ fn spawn_raw(opts: task_opts, +f: fn~()) unsafe {\n \n }\n \n-#[abi = \"rust-intrinsic\"]\n-native mod rusti {\n-    fn task_yield(task: *rust_task, &killed: bool);\n-}\n-\n native mod rustrt {\n+    #[rust_stack]\n+    fn rust_task_yield(task: *rust_task, &killed: bool);\n+\n     fn rust_get_sched_id() -> sched_id;\n     fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n "}, {"sha": "c535491ba34e080732fdde952f6792b1adbe138c", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "patch": "@@ -34,11 +34,4 @@ mod tests {\n     fn test_reinterpret_cast() unsafe {\n         assert reinterpret_cast(1) == 1u;\n     }\n-\n-    #[test]\n-    #[should_fail]\n-    #[ignore(cfg(target_os = \"win32\"))]\n-    fn test_reinterpret_cast_wrong_size() unsafe {\n-        let _i: uint = reinterpret_cast(0u8);\n-    }\n }"}, {"sha": "0252802d6a7d6e412b254227f0cfa15a2ecdbff7", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "patch": "@@ -2625,7 +2625,7 @@ enum call_args {\n //  - new_fn_ctxt\n //  - trans_args\n fn trans_args(cx: block, llenv: ValueRef, args: call_args, fn_ty: ty::t,\n-              dest: dest, generic_intrinsic: bool)\n+              dest: dest, always_valid_retptr: bool)\n     -> {bcx: block, args: [ValueRef], retslot: ValueRef} {\n     let _icx = cx.insn_ctxt(\"trans_args\");\n     let mut temp_cleanups = [];\n@@ -2639,7 +2639,7 @@ fn trans_args(cx: block, llenv: ValueRef, args: call_args, fn_ty: ty::t,\n     // Arg 0: Output pointer.\n     let llretslot = alt dest {\n       ignore {\n-        if ty::type_is_nil(retty) && !generic_intrinsic {\n+        if ty::type_is_nil(retty) && !always_valid_retptr {\n             llvm::LLVMGetUndef(T_ptr(T_nil()))\n         } else {\n             let {bcx: cx, val} = alloc_ty(bcx, retty);"}, {"sha": "be10c8d0e78c551cf9fc3c64c1f33ce59866079b", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0545e4a9200a9c971f8b5f95aa9a439ea0c20116/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=0545e4a9200a9c971f8b5f95aa9a439ea0c20116", "patch": "@@ -652,24 +652,50 @@ fn trans_native_mod(ccx: @crate_ctxt,\n         }\n \n         let lname = link_name(native_item);\n-        // Declare the \"prototype\" for the base function F:\n-        let llbasefn = alt tys.x86_64_tys {\n-            some(x86_64) {\n-                decl_x86_64_fn(x86_64) {|fnty|\n-                    decl_fn(ccx.llmod, lname, cc, fnty)\n-                }\n-            }\n-            _ {\n-                let llbasefnty = T_fn(tys.arg_tys, tys.ret_ty);\n-                decl_fn(ccx.llmod, lname, cc, llbasefnty)\n-            }\n-        };\n+        let llbasefn = base_fn(ccx, lname, tys, cc);\n         // Name the shim function\n         let shim_name = lname + \"__c_stack_shim\";\n         ret build_shim_fn_(ccx, shim_name, llbasefn, tys, cc,\n                            build_args, build_ret);\n     }\n \n+    fn base_fn(ccx: @crate_ctxt, lname: str, tys: @c_stack_tys,\n+               cc: lib::llvm::CallConv) -> ValueRef {\n+        // Declare the \"prototype\" for the base function F:\n+        alt tys.x86_64_tys {\n+          some(x86_64) {\n+            decl_x86_64_fn(x86_64) {|fnty|\n+                decl_fn(ccx.llmod, lname, cc, fnty)\n+            }\n+          }\n+          _ {\n+            let llbasefnty = T_fn(tys.arg_tys, tys.ret_ty);\n+            decl_fn(ccx.llmod, lname, cc, llbasefnty)\n+          }\n+        }\n+    }\n+\n+    // FIXME this is very shaky and probably gets ABIs wrong all over\n+    // the place\n+    fn build_direct_fn(ccx: @crate_ctxt, decl: ValueRef,\n+                       item: @ast::native_item, tys: @c_stack_tys,\n+                       cc: lib::llvm::CallConv) {\n+        let fcx = new_fn_ctxt(ccx, [], decl, none);\n+        let bcx = top_scope_block(fcx, none), lltop = bcx.llbb;\n+        let llbasefn = base_fn(ccx, link_name(item), tys, cc);\n+        let ty = ty::lookup_item_type(ccx.tcx,\n+                                      ast_util::local_def(item.id)).ty;\n+        let args = vec::from_fn(ty::ty_fn_args(ty).len(), {|i|\n+            get_param(decl, i + first_real_arg)\n+        });\n+        let retval = Call(bcx, llbasefn, args);\n+        if !ty::type_is_nil(ty::ty_fn_ret(ty)) {\n+            Store(bcx, retval, fcx.llretptr);\n+        }\n+        build_return(bcx);\n+        finish_fn(fcx, lltop);\n+    }\n+\n     fn build_wrap_fn(ccx: @crate_ctxt,\n                      tys: @c_stack_tys,\n                      llshimfn: ValueRef,\n@@ -717,10 +743,14 @@ fn trans_native_mod(ccx: @crate_ctxt,\n       alt native_item.node {\n         ast::native_item_fn(fn_decl, _) {\n           let id = native_item.id;\n-          let tys = c_stack_tys(ccx, id);\n           let llwrapfn = get_item_val(ccx, id);\n-          let llshimfn = build_shim_fn(ccx, native_item, tys, cc);\n-          build_wrap_fn(ccx, tys, llshimfn, llwrapfn);\n+          let tys = c_stack_tys(ccx, id);\n+          if attr::attrs_contains_name(native_item.attrs, \"rust_stack\") {\n+              build_direct_fn(ccx, llwrapfn, native_item, tys, cc);\n+          } else {\n+              let llshimfn = build_shim_fn(ccx, native_item, tys, cc);\n+              build_wrap_fn(ccx, tys, llshimfn, llwrapfn);\n+          }\n         }\n       }\n     }"}]}