{"sha": "ecfcd2a305dfe360f4fbf1776a49d7fc04de3322", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZmNkMmEzMDVkZmUzNjBmNGZiZjE3NzZhNDlkN2ZjMDRkZTMzMjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-21T03:08:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-21T03:08:28Z"}, "message": "Auto merge of #26416 - retep998:error-debug, r=sfackler\n\nFixes https://github.com/rust-lang/rust/issues/26408\r\n\r\nExample output when using `Result::unwrap`:\r\n```\r\nthread '<main>' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: \"The system cannot find the file specified.\\r\\n\" } }', src/libcore\\result.rs:731\r\n```\r\n\r\nThis could technically be considered a breaking change for any code that depends on the format of the `Debug` output for `io::Error` but I sincerely hope nobody wrote code like that.", "tree": {"sha": "5737232235c6400e72d4e1f43e9159c3ada79af2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5737232235c6400e72d4e1f43e9159c3ada79af2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecfcd2a305dfe360f4fbf1776a49d7fc04de3322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecfcd2a305dfe360f4fbf1776a49d7fc04de3322", "html_url": "https://github.com/rust-lang/rust/commit/ecfcd2a305dfe360f4fbf1776a49d7fc04de3322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecfcd2a305dfe360f4fbf1776a49d7fc04de3322/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d6e79001083140a5697565b498d67c90e0a5ff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6e79001083140a5697565b498d67c90e0a5ff7", "html_url": "https://github.com/rust-lang/rust/commit/7d6e79001083140a5697565b498d67c90e0a5ff7"}, {"sha": "c8aec53db73182f453621c284131ef028d0ae064", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8aec53db73182f453621c284131ef028d0ae064", "html_url": "https://github.com/rust-lang/rust/commit/c8aec53db73182f453621c284131ef028d0ae064"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "a66789bf2873dc01b08e86e6ad6fd745a6ceee6e", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ecfcd2a305dfe360f4fbf1776a49d7fc04de3322/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecfcd2a305dfe360f4fbf1776a49d7fc04de3322/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=ecfcd2a305dfe360f4fbf1776a49d7fc04de3322", "patch": "@@ -37,7 +37,6 @@ pub struct Error {\n     repr: Repr,\n }\n \n-#[derive(Debug)]\n enum Repr {\n     Os(i32),\n     Custom(Box<Custom>),\n@@ -240,6 +239,17 @@ impl Error {\n     }\n }\n \n+impl fmt::Debug for Repr {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        match self {\n+            &Repr::Os(ref code) =>\n+                fmt.debug_struct(\"Os\").field(\"code\", code)\n+                   .field(\"message\", &sys::os::error_string(*code)).finish(),\n+            &Repr::Custom(ref c) => fmt.debug_tuple(\"Custom\").field(c).finish(),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Error {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n@@ -282,6 +292,16 @@ mod test {\n     use error;\n     use error::Error as error_Error;\n     use fmt;\n+    use sys::os::error_string;\n+\n+    #[test]\n+    fn test_debug_error() {\n+        let code = 6;\n+        let msg = error_string(code);\n+        let err = Error { repr: super::Repr::Os(code) };\n+        let expected = format!(\"Error {{ repr: Os {{ code: {:?}, message: {:?} }} }}\", code, msg);\n+        assert_eq!(format!(\"{:?}\", err), expected);\n+    }\n \n     #[test]\n     fn test_downcasting() {"}]}