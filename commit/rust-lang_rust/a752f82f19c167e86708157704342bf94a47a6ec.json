{"sha": "a752f82f19c167e86708157704342bf94a47a6ec", "node_id": "C_kwDOAAsO6NoAKGE3NTJmODJmMTljMTY3ZTg2NzA4MTU3NzA0MzQyYmY5NGE0N2E2ZWM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-06-13T13:03:00Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-06-13T13:29:29Z"}, "message": "Ignore impl items because they can be duplicated in case of generic impl", "tree": {"sha": "69161cf8fd6fa28dcef906b19e053df1e739499f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69161cf8fd6fa28dcef906b19e053df1e739499f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a752f82f19c167e86708157704342bf94a47a6ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a752f82f19c167e86708157704342bf94a47a6ec", "html_url": "https://github.com/rust-lang/rust/commit/a752f82f19c167e86708157704342bf94a47a6ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a752f82f19c167e86708157704342bf94a47a6ec/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2aa18d7467e212c4e961378b1061628abdb358", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2aa18d7467e212c4e961378b1061628abdb358", "html_url": "https://github.com/rust-lang/rust/commit/ae2aa18d7467e212c4e961378b1061628abdb358"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "0964b757e74f5cbd9966aa8937200782ccc8df0b", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a752f82f19c167e86708157704342bf94a47a6ec/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a752f82f19c167e86708157704342bf94a47a6ec/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=a752f82f19c167e86708157704342bf94a47a6ec", "patch": "@@ -181,15 +181,44 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         let name = item.name;\n         let item_id = item.item_id;\n         if let Some(mut new_item) = self.convert_item(item) {\n-            if let types::ItemEnum::Trait(ref mut t) = new_item.inner {\n-                t.implementations = self.get_trait_implementors(item_id.expect_def_id())\n-            } else if let types::ItemEnum::Struct(ref mut s) = new_item.inner {\n-                s.impls = self.get_impls(item_id.expect_def_id())\n-            } else if let types::ItemEnum::Enum(ref mut e) = new_item.inner {\n-                e.impls = self.get_impls(item_id.expect_def_id())\n-            } else if let types::ItemEnum::Union(ref mut u) = new_item.inner {\n-                u.impls = self.get_impls(item_id.expect_def_id())\n-            }\n+            let can_be_ignored = match new_item.inner {\n+                types::ItemEnum::Trait(ref mut t) => {\n+                    t.implementations = self.get_trait_implementors(item_id.expect_def_id());\n+                    false\n+                }\n+                types::ItemEnum::Struct(ref mut s) => {\n+                    s.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n+                types::ItemEnum::Enum(ref mut e) => {\n+                    e.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n+                types::ItemEnum::Union(ref mut u) => {\n+                    u.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n+\n+                types::ItemEnum::Method(_)\n+                | types::ItemEnum::AssocConst { .. }\n+                | types::ItemEnum::AssocType { .. } => true,\n+                types::ItemEnum::Module(_)\n+                | types::ItemEnum::ExternCrate { .. }\n+                | types::ItemEnum::Import(_)\n+                | types::ItemEnum::StructField(_)\n+                | types::ItemEnum::Variant(_)\n+                | types::ItemEnum::Function(_)\n+                | types::ItemEnum::TraitAlias(_)\n+                | types::ItemEnum::Impl(_)\n+                | types::ItemEnum::Typedef(_)\n+                | types::ItemEnum::OpaqueTy(_)\n+                | types::ItemEnum::Constant(_)\n+                | types::ItemEnum::Static(_)\n+                | types::ItemEnum::ForeignType\n+                | types::ItemEnum::Macro(_)\n+                | types::ItemEnum::ProcMacro(_)\n+                | types::ItemEnum::PrimitiveType(_) => false,\n+            };\n             let removed = self\n                 .index\n                 .borrow_mut()\n@@ -199,7 +228,11 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             // to make sure the items are unique. The main place this happens is when an item, is\n             // reexported in more than one place. See `rustdoc-json/reexport/in_root_and_mod`\n             if let Some(old_item) = removed {\n-                assert_eq!(old_item, new_item);\n+                // In case of generic implementations (like `impl<T> Trait for T {}`), all the\n+                // inner items will be duplicated so we can ignore if they are slightly different.\n+                if !can_be_ignored {\n+                    assert_eq!(old_item, new_item);\n+                }\n             }\n         }\n "}]}