{"sha": "f8ca5764c36feab162893cd16b567d87edd4cf8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4Y2E1NzY0YzM2ZmVhYjE2Mjg5M2NkMTZiNTY3ZDg3ZWRkNGNmOGU=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-22T01:14:25Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-26T03:03:25Z"}, "message": "Add tests for `HtmlWithLimit`", "tree": {"sha": "cc320f9baae435e1b06441b441d08ac80d74aaae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc320f9baae435e1b06441b441d08ac80d74aaae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8ca5764c36feab162893cd16b567d87edd4cf8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ca5764c36feab162893cd16b567d87edd4cf8e", "html_url": "https://github.com/rust-lang/rust/commit/f8ca5764c36feab162893cd16b567d87edd4cf8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8ca5764c36feab162893cd16b567d87edd4cf8e/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d18936a731fa1d2bf49073bd0f059129ef1b0ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d18936a731fa1d2bf49073bd0f059129ef1b0ef1", "html_url": "https://github.com/rust-lang/rust/commit/d18936a731fa1d2bf49073bd0f059129ef1b0ef1"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "ecf41f7afa7e361496430758ea9a1426c669c0b3", "filename": "src/librustdoc/html/length_limit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8ca5764c36feab162893cd16b567d87edd4cf8e/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ca5764c36feab162893cd16b567d87edd4cf8e/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs?ref=f8ca5764c36feab162893cd16b567d87edd4cf8e", "patch": "@@ -98,3 +98,6 @@ impl HtmlWithLimit {\n         }\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "5a006d44d58c571d23c1c8efb927f6315ac8441c", "filename": "src/librustdoc/html/length_limit/tests.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/f8ca5764c36feab162893cd16b567d87edd4cf8e/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ca5764c36feab162893cd16b567d87edd4cf8e/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs?ref=f8ca5764c36feab162893cd16b567d87edd4cf8e", "patch": "@@ -0,0 +1,117 @@\n+use super::*;\n+\n+#[test]\n+fn empty() {\n+    assert_eq!(HtmlWithLimit::new(0).finish(), \"\");\n+    assert_eq!(HtmlWithLimit::new(60).finish(), \"\");\n+}\n+\n+#[test]\n+fn basic() {\n+    let mut buf = HtmlWithLimit::new(60);\n+    buf.push(\"Hello \");\n+    buf.open_tag(\"em\");\n+    buf.push(\"world\");\n+    buf.close_tag();\n+    buf.push(\"!\");\n+    assert_eq!(buf.finish(), \"Hello <em>world</em>!\");\n+}\n+\n+#[test]\n+fn no_tags() {\n+    let mut buf = HtmlWithLimit::new(60);\n+    buf.push(\"Hello\");\n+    buf.push(\" world!\");\n+    assert_eq!(buf.finish(), \"Hello world!\");\n+}\n+\n+#[test]\n+fn limit_0() {\n+    let mut buf = HtmlWithLimit::new(0);\n+    buf.push(\"Hello \");\n+    buf.open_tag(\"em\");\n+    buf.push(\"world\");\n+    buf.close_tag();\n+    buf.push(\"!\");\n+    assert_eq!(buf.finish(), \"\");\n+}\n+\n+#[test]\n+fn exactly_limit() {\n+    let mut buf = HtmlWithLimit::new(12);\n+    buf.push(\"Hello \");\n+    buf.open_tag(\"em\");\n+    buf.push(\"world\");\n+    buf.close_tag();\n+    buf.push(\"!\");\n+    assert_eq!(buf.finish(), \"Hello <em>world</em>!\");\n+}\n+\n+#[test]\n+fn multiple_nested_tags() {\n+    let mut buf = HtmlWithLimit::new(60);\n+    buf.open_tag(\"p\");\n+    buf.push(\"This is a \");\n+    buf.open_tag(\"em\");\n+    buf.push(\"paragraph\");\n+    buf.open_tag(\"strong\");\n+    buf.push(\"!\");\n+    buf.close_tag();\n+    buf.close_tag();\n+    buf.close_tag();\n+    assert_eq!(buf.finish(), \"<p>This is a <em>paragraph<strong>!</strong></em></p>\");\n+}\n+\n+#[test]\n+fn forgot_to_close_tags() {\n+    let mut buf = HtmlWithLimit::new(60);\n+    buf.open_tag(\"p\");\n+    buf.push(\"This is a \");\n+    buf.open_tag(\"em\");\n+    buf.push(\"paragraph\");\n+    buf.open_tag(\"strong\");\n+    buf.push(\"!\");\n+    assert_eq!(buf.finish(), \"<p>This is a <em>paragraph<strong>!</strong></em></p>\");\n+}\n+\n+#[test]\n+fn past_the_limit() {\n+    let mut buf = HtmlWithLimit::new(20);\n+    buf.open_tag(\"p\");\n+    (0..10).try_for_each(|n| {\n+        buf.open_tag(\"strong\");\n+        buf.push(\"word#\")?;\n+        buf.push(&n.to_string())?;\n+        buf.close_tag();\n+        ControlFlow::CONTINUE\n+    });\n+    buf.close_tag();\n+    assert_eq!(\n+        buf.finish(),\n+        \"<p>\\\n+             <strong>word#0</strong>\\\n+             <strong>word#1</strong>\\\n+             <strong>word#2</strong>\\\n+             </p>\"\n+    );\n+}\n+\n+#[test]\n+fn quickly_past_the_limit() {\n+    let mut buf = HtmlWithLimit::new(6);\n+    buf.open_tag(\"p\");\n+    buf.push(\"Hello\");\n+    buf.push(\" World\");\n+    // intentionally not closing <p> before finishing\n+    assert_eq!(buf.finish(), \"<p>Hello</p>\");\n+}\n+\n+#[test]\n+#[should_panic = \"called `Option::unwrap()` on a `None` value\"]\n+fn close_too_many() {\n+    let mut buf = HtmlWithLimit::new(60);\n+    buf.open_tag(\"p\");\n+    buf.push(\"Hello\");\n+    buf.close_tag();\n+    buf.close_tag();\n+}"}, {"sha": "eca75ef013aae89ea567c29552b16541de9c5799", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8ca5764c36feab162893cd16b567d87edd4cf8e/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ca5764c36feab162893cd16b567d87edd4cf8e/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=f8ca5764c36feab162893cd16b567d87edd4cf8e", "patch": "@@ -225,6 +225,7 @@ fn test_short_markdown_summary() {\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n+    t(\"\", \"\");\n     t(\"hello [Rust](https://www.rust-lang.org) :)\", \"hello Rust :)\");\n     t(\"*italic*\", \"<em>italic</em>\");\n     t(\"**bold**\", \"<strong>bold</strong>\");\n@@ -264,6 +265,7 @@ fn test_plain_text_summary() {\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n+    t(\"\", \"\");\n     t(\"hello [Rust](https://www.rust-lang.org) :)\", \"hello Rust :)\");\n     t(\"**bold**\", \"bold\");\n     t(\"Multi-line\\nsummary\", \"Multi-line summary\");"}]}