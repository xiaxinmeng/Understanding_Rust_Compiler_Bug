{"sha": "d422baa30c415e6aed786f1953b0ac1b7d840dc1", "node_id": "C_kwDOAAsO6NoAKGQ0MjJiYWEzMGM0MTVlNmFlZDc4NmYxOTUzYjBhYzFiN2Q4NDBkYzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T13:25:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-10T13:25:27Z"}, "message": "Auto merge of #8796 - nsunderland1:master, r=giraffate\n\nNew lint: [`derive_partial_eq_without_eq`]\n\nIntroduces a new lint, [`derive_partial_eq_without_eq`].\n\nSee: #1781 (doesn't close it though).\n\nchangelog: add lint [`derive_partial_eq_without_eq`]", "tree": {"sha": "f564723a87002b1c5937812b756ee744b2fa93b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f564723a87002b1c5937812b756ee744b2fa93b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d422baa30c415e6aed786f1953b0ac1b7d840dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d422baa30c415e6aed786f1953b0ac1b7d840dc1", "html_url": "https://github.com/rust-lang/rust/commit/d422baa30c415e6aed786f1953b0ac1b7d840dc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d422baa30c415e6aed786f1953b0ac1b7d840dc1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a11a499d425fd79fb8aec4cac7f454e3f5f7e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a11a499d425fd79fb8aec4cac7f454e3f5f7e83", "html_url": "https://github.com/rust-lang/rust/commit/1a11a499d425fd79fb8aec4cac7f454e3f5f7e83"}, {"sha": "fe84ff336055412f0df8a2e625eaf46c6701e574", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe84ff336055412f0df8a2e625eaf46c6701e574", "html_url": "https://github.com/rust-lang/rust/commit/fe84ff336055412f0df8a2e625eaf46c6701e574"}], "stats": {"total": 397, "additions": 359, "deletions": 38}, "files": [{"sha": "47aaae9c1986b1486bf4b73a87531a28301a72d7", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -3350,6 +3350,7 @@ Released 2018-09-13\n [`derivable_impls`]: https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord\n+[`derive_partial_eq_without_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq\n [`disallowed_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_methods\n [`disallowed_script_idents`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_script_idents\n [`disallowed_types`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_types"}, {"sha": "e9cc4f299431384ce01f1f37c791ce8547d07b28", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -17,7 +17,7 @@ const GENERATED_FILE_COMMENT: &str = \"// This file was generated by `cargo dev u\n \n const DOCS_LINK: &str = \"https://rust-lang.github.io/rust-clippy/master/index.html\";\n \n-#[derive(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq, Eq)]\n pub enum UpdateMode {\n     Check,\n     Change,\n@@ -372,7 +372,7 @@ fn exit_with_failure() {\n }\n \n /// Lint data parsed from the Clippy source code.\n-#[derive(Clone, PartialEq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n struct Lint {\n     name: String,\n     group: String,\n@@ -414,7 +414,7 @@ impl Lint {\n     }\n }\n \n-#[derive(Clone, PartialEq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n struct DeprecatedLint {\n     name: String,\n     reason: String,"}, {"sha": "28c77ea40ef77ff5e022428fe57a36a25d51f579", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -123,7 +123,7 @@ struct Conversion<'a> {\n }\n \n /// The kind of conversion that is checked\n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum ConversionType {\n     SignedToUnsigned,\n     SignedToSigned,"}, {"sha": "a4757ebd8c794b4687484de87dcfab9b40137d47", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,8 +1,9 @@\n-use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::paths;\n use clippy_utils::ty::{implements_trait, is_copy};\n use clippy_utils::{is_automatically_derived, is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n+use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n     BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n@@ -156,11 +157,44 @@ declare_clippy_lint! {\n     \"deriving `serde::Deserialize` on a type that has methods using `unsafe`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for types that derive `PartialEq` and could implement `Eq`.\n+    ///\n+    /// ### Why is this bad?\n+    /// If a type `T` derives `PartialEq` and all of its members implement `Eq`,\n+    /// then `T` can always implement `Eq`. Implementing `Eq` allows `T` to be used\n+    /// in APIs that require `Eq` types. It also allows structs containing `T` to derive\n+    /// `Eq` themselves.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// #[derive(PartialEq)]\n+    /// struct Foo {\n+    ///     i_am_eq: i32,\n+    ///     i_am_eq_too: Vec<String>,\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[derive(PartialEq, Eq)]\n+    /// struct Foo {\n+    ///     i_am_eq: i32,\n+    ///     i_am_eq_too: Vec<String>,\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub DERIVE_PARTIAL_EQ_WITHOUT_EQ,\n+    style,\n+    \"deriving `PartialEq` on a type that can implement `Eq`, without implementing `Eq`\"\n+}\n+\n declare_lint_pass!(Derive => [\n     EXPL_IMPL_CLONE_ON_COPY,\n     DERIVE_HASH_XOR_EQ,\n     DERIVE_ORD_XOR_PARTIAL_ORD,\n-    UNSAFE_DERIVE_DESERIALIZE\n+    UNSAFE_DERIVE_DESERIALIZE,\n+    DERIVE_PARTIAL_EQ_WITHOUT_EQ\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Derive {\n@@ -179,6 +213,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n \n             if is_automatically_derived {\n                 check_unsafe_derive_deserialize(cx, item, trait_ref, ty);\n+                check_partial_eq_without_eq(cx, item.span, trait_ref, ty);\n             } else {\n                 check_copy_clone(cx, item, trait_ref, ty);\n             }\n@@ -419,3 +454,36 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n         self.cx.tcx.hir()\n     }\n }\n+\n+/// Implementation of the `DERIVE_PARTIAL_EQ_WITHOUT_EQ` lint.\n+fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_ref: &TraitRef<'_>, ty: Ty<'tcx>) {\n+    if_chain! {\n+        if let ty::Adt(adt, substs) = ty.kind();\n+        if let Some(eq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::Eq);\n+        if let Some(def_id) = trait_ref.trait_def_id();\n+        if cx.tcx.is_diagnostic_item(sym::PartialEq, def_id);\n+        if !implements_trait(cx, ty, eq_trait_def_id, substs);\n+        then {\n+            // If all of our fields implement `Eq`, we can implement `Eq` too\n+            for variant in adt.variants() {\n+                for field in &variant.fields {\n+                    let ty = field.ty(cx.tcx, substs);\n+\n+                    if !implements_trait(cx, ty, eq_trait_def_id, substs) {\n+                        return;\n+                    }\n+                }\n+            }\n+\n+            span_lint_and_sugg(\n+                cx,\n+                DERIVE_PARTIAL_EQ_WITHOUT_EQ,\n+                span.ctxt().outer_expn_data().call_site,\n+                \"you are deriving `PartialEq` and can implement `Eq`\",\n+                \"consider deriving `Eq` as well\",\n+                \"PartialEq, Eq\".to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+        }\n+    }\n+}"}, {"sha": "fca5e109509d4be9c21b29de1f1c47f48d98cae8", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -46,6 +46,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(derivable_impls::DERIVABLE_IMPLS),\n     LintId::of(derive::DERIVE_HASH_XOR_EQ),\n     LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n+    LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n     LintId::of(disallowed_methods::DISALLOWED_METHODS),\n     LintId::of(disallowed_types::DISALLOWED_TYPES),\n     LintId::of(doc::MISSING_SAFETY_DOC),"}, {"sha": "7489f53fd3c37cd870b5bd04182ae12b52623446", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -113,6 +113,7 @@ store.register_lints(&[\n     derivable_impls::DERIVABLE_IMPLS,\n     derive::DERIVE_HASH_XOR_EQ,\n     derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n+    derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ,\n     derive::EXPL_IMPL_CLONE_ON_COPY,\n     derive::UNSAFE_DERIVE_DESERIALIZE,\n     disallowed_methods::DISALLOWED_METHODS,"}, {"sha": "62f26d821a0d6840cc1e02ab404899f50efa8551", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -16,6 +16,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(comparison_chain::COMPARISON_CHAIN),\n     LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n     LintId::of(dereference::NEEDLESS_BORROW),\n+    LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n     LintId::of(disallowed_methods::DISALLOWED_METHODS),\n     LintId::of(disallowed_types::DISALLOWED_TYPES),\n     LintId::of(doc::MISSING_SAFETY_DOC),"}, {"sha": "4801a84eb92ced8d1ac9b10a8e8e4e7d7cd8215b", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -13,7 +13,7 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_typeck::hir_ty_to_ty;\n use std::iter::Iterator;\n \n-#[derive(Debug, PartialEq)]\n+#[derive(Debug, PartialEq, Eq)]\n enum IncrementVisitorVarState {\n     Initial,  // Not examined yet\n     IncrOnce, // Incremented exactly once, may be a loop counter"}, {"sha": "cfeee4d0c70916816e058b07f1ebb8e8e84c1ef4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -2835,7 +2835,7 @@ const TRAIT_METHODS: [ShouldImplTraitCase; 30] = [\n     ShouldImplTraitCase::new(\"std::ops::Sub\", \"sub\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n ];\n \n-#[derive(Clone, Copy, PartialEq, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n enum SelfKind {\n     Value,\n     Ref,"}, {"sha": "90651a6ba045888935fa1b6a29294e191d775662", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -271,7 +271,7 @@ enum IterUsageKind {\n     NextTuple,\n }\n \n-#[derive(Debug, PartialEq)]\n+#[derive(Debug, PartialEq, Eq)]\n enum UnwrapKind {\n     Unwrap,\n     QuestionMark,"}, {"sha": "3fb5415ce02999b93ecb171475fca4712a287b17", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::ast::{Lit, LitFloatType, LitIntType, LitKind};\n use std::iter;\n \n-#[derive(Debug, PartialEq, Copy, Clone)]\n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub enum Radix {\n     Binary,\n     Octal,"}, {"sha": "f682b280c1b804c4ee1660255cd050094f37cc3f", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -37,7 +37,7 @@ fn main() {\n \n use std::cmp::{Ordering, PartialEq, PartialOrd};\n \n-#[derive(PartialEq, PartialOrd)]\n+#[derive(PartialEq, Eq, PartialOrd)]\n pub struct U(u64);\n \n impl PartialEq<u32> for U {"}, {"sha": "f6d3a8fa3f0d71168ad939ae72a76329f601290a", "filename": "tests/ui/assign_ops2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -24,7 +24,7 @@ fn main() {\n \n use std::ops::{Mul, MulAssign};\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct Wrap(i64);\n \n impl Mul<i64> for Wrap {"}, {"sha": "abd059c2308012426364e7f87015e1cad3460d8c", "filename": "tests/ui/cmp_owned/asymmetric_partial_eq.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.fixed?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, clippy::redundant_clone)] // See #5700\n+#![allow(unused, clippy::redundant_clone, clippy::derive_partial_eq_without_eq)] // See #5700\n \n // Define the types in each module to avoid trait impls leaking between modules.\n macro_rules! impl_types {"}, {"sha": "020ef5f840bd52add76fb847d98b2c62ea5bd38a", "filename": "tests/ui/cmp_owned/asymmetric_partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, clippy::redundant_clone)] // See #5700\n+#![allow(unused, clippy::redundant_clone, clippy::derive_partial_eq_without_eq)] // See #5700\n \n // Define the types in each module to avoid trait impls leaking between modules.\n macro_rules! impl_types {"}, {"sha": "b28c4378e33c642289cd054be4f1be856d9fbad2", "filename": "tests/ui/cmp_owned/with_suggestion.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.fixed?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -45,7 +45,7 @@ impl ToOwned for Foo {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Bar;\n \n impl PartialEq<Foo> for Bar {\n@@ -61,7 +61,7 @@ impl std::borrow::Borrow<Foo> for Bar {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Baz;\n \n impl ToOwned for Baz {"}, {"sha": "c1089010fe109fb351a176ee542f89dfe4985441", "filename": "tests/ui/cmp_owned/with_suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwith_suggestion.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -45,7 +45,7 @@ impl ToOwned for Foo {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Bar;\n \n impl PartialEq<Foo> for Bar {\n@@ -61,7 +61,7 @@ impl std::borrow::Borrow<Foo> for Bar {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Baz;\n \n impl ToOwned for Baz {"}, {"sha": "738d082339a149cc6136ddd4a8f5cdacd16fbc8a", "filename": "tests/ui/cmp_owned/without_suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -26,7 +26,7 @@ impl ToOwned for Foo {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Baz;\n \n impl ToOwned for Baz {\n@@ -36,7 +36,7 @@ impl ToOwned for Baz {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Bar;\n \n impl PartialEq<Foo> for Bar {"}, {"sha": "a2a60a169153400d9a439745024f47ddc768a762", "filename": "tests/ui/crashes/ice-6254.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcrashes%2Fice-6254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcrashes%2Fice-6254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6254.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -2,6 +2,7 @@\n // panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())',\n // compiler/rustc_mir_build/src/thir/pattern/_match.rs:2030:5\n \n+#[allow(clippy::derive_partial_eq_without_eq)]\n #[derive(PartialEq)]\n struct Foo(i32);\n const FOO_REF_REF: &&Foo = &&Foo(42);"}, {"sha": "f37ab2e9b0c795987c0d00fb44d0827d52ced2cd", "filename": "tests/ui/crashes/ice-6254.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fcrashes%2Fice-6254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6254.stderr?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,5 +1,5 @@\n error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/ice-6254.rs:12:9\n+  --> $DIR/ice-6254.rs:13:9\n    |\n LL |         FOO_REF_REF => {},\n    |         ^^^^^^^^^^^"}, {"sha": "813ddc5664642733f1a786a8a0bde0497dd19573", "filename": "tests/ui/derive_hash_xor_eq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fderive_hash_xor_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fderive_hash_xor_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_hash_xor_eq.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,3 +1,5 @@\n+#![allow(clippy::derive_partial_eq_without_eq)]\n+\n #[derive(PartialEq, Hash)]\n struct Foo;\n "}, {"sha": "e5184bd1407c0417e655d12f3668157c2f699bb2", "filename": "tests/ui/derive_hash_xor_eq.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fderive_hash_xor_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fderive_hash_xor_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_hash_xor_eq.stderr?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,12 +1,12 @@\n error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n-  --> $DIR/derive_hash_xor_eq.rs:10:10\n+  --> $DIR/derive_hash_xor_eq.rs:12:10\n    |\n LL | #[derive(Hash)]\n    |          ^^^^\n    |\n    = note: `#[deny(clippy::derive_hash_xor_eq)]` on by default\n note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:13:1\n+  --> $DIR/derive_hash_xor_eq.rs:15:1\n    |\n LL | / impl PartialEq for Bar {\n LL | |     fn eq(&self, _: &Bar) -> bool {\n@@ -17,13 +17,13 @@ LL | | }\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n-  --> $DIR/derive_hash_xor_eq.rs:19:10\n+  --> $DIR/derive_hash_xor_eq.rs:21:10\n    |\n LL | #[derive(Hash)]\n    |          ^^^^\n    |\n note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:22:1\n+  --> $DIR/derive_hash_xor_eq.rs:24:1\n    |\n LL | / impl PartialEq<Baz> for Baz {\n LL | |     fn eq(&self, _: &Baz) -> bool {\n@@ -34,30 +34,30 @@ LL | | }\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n-  --> $DIR/derive_hash_xor_eq.rs:31:1\n+  --> $DIR/derive_hash_xor_eq.rs:33:1\n    |\n LL | / impl std::hash::Hash for Bah {\n LL | |     fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}\n LL | | }\n    | |_^\n    |\n note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:28:10\n+  --> $DIR/derive_hash_xor_eq.rs:30:10\n    |\n LL | #[derive(PartialEq)]\n    |          ^^^^^^^^^\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n-  --> $DIR/derive_hash_xor_eq.rs:49:5\n+  --> $DIR/derive_hash_xor_eq.rs:51:5\n    |\n LL | /     impl Hash for Foo3 {\n LL | |         fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}\n LL | |     }\n    | |_____^\n    |\n note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:46:14\n+  --> $DIR/derive_hash_xor_eq.rs:48:14\n    |\n LL |     #[derive(PartialEq)]\n    |              ^^^^^^^^^"}, {"sha": "7d4d1b3b64906b4fdc64bcea3c44fef0b44c4a46", "filename": "tests/ui/derive_partial_eq_without_eq.fixed", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fderive_partial_eq_without_eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fderive_partial_eq_without_eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.fixed?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -0,0 +1,98 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::derive_partial_eq_without_eq)]\n+\n+// Don't warn on structs that aren't PartialEq\n+struct NotPartialEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq can be derived but is missing\n+#[derive(Debug, PartialEq, Eq)]\n+struct MissingEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq is derived\n+#[derive(PartialEq, Eq)]\n+struct NotMissingEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq is manually implemented\n+#[derive(PartialEq)]\n+struct ManualEqImpl {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+impl Eq for ManualEqImpl {}\n+\n+// Cannot be Eq because f32 isn't Eq\n+#[derive(PartialEq)]\n+struct CannotBeEq {\n+    foo: u32,\n+    bar: f32,\n+}\n+\n+// Don't warn if PartialEq is manually implemented\n+struct ManualPartialEqImpl {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+impl PartialEq for ManualPartialEqImpl {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.foo == other.foo && self.bar == other.bar\n+    }\n+}\n+\n+// Generic fields should be properly checked for Eq-ness\n+#[derive(PartialEq)]\n+struct GenericNotEq<T: Eq, U: PartialEq> {\n+    foo: T,\n+    bar: U,\n+}\n+\n+#[derive(PartialEq, Eq)]\n+struct GenericEq<T: Eq, U: Eq> {\n+    foo: T,\n+    bar: U,\n+}\n+\n+#[derive(PartialEq, Eq)]\n+struct TupleStruct(u32);\n+\n+#[derive(PartialEq, Eq)]\n+struct GenericTupleStruct<T: Eq>(T);\n+\n+#[derive(PartialEq)]\n+struct TupleStructNotEq(f32);\n+\n+#[derive(PartialEq, Eq)]\n+enum Enum {\n+    Foo(u32),\n+    Bar { a: String, b: () },\n+}\n+\n+#[derive(PartialEq, Eq)]\n+enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n+    Foo(T),\n+    Bar { a: U, b: V },\n+}\n+\n+#[derive(PartialEq)]\n+enum EnumNotEq {\n+    Foo(u32),\n+    Bar { a: String, b: f32 },\n+}\n+\n+// Ensure that rustfix works properly when `PartialEq` has other derives on either side\n+#[derive(Debug, PartialEq, Eq, Clone)]\n+struct RustFixWithOtherDerives;\n+\n+fn main() {}"}, {"sha": "ab4e1df1ca4084f2c94d491ed6edd012d989b162", "filename": "tests/ui/derive_partial_eq_without_eq.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fderive_partial_eq_without_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fderive_partial_eq_without_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -0,0 +1,98 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::derive_partial_eq_without_eq)]\n+\n+// Don't warn on structs that aren't PartialEq\n+struct NotPartialEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq can be derived but is missing\n+#[derive(Debug, PartialEq)]\n+struct MissingEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq is derived\n+#[derive(PartialEq, Eq)]\n+struct NotMissingEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq is manually implemented\n+#[derive(PartialEq)]\n+struct ManualEqImpl {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+impl Eq for ManualEqImpl {}\n+\n+// Cannot be Eq because f32 isn't Eq\n+#[derive(PartialEq)]\n+struct CannotBeEq {\n+    foo: u32,\n+    bar: f32,\n+}\n+\n+// Don't warn if PartialEq is manually implemented\n+struct ManualPartialEqImpl {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+impl PartialEq for ManualPartialEqImpl {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.foo == other.foo && self.bar == other.bar\n+    }\n+}\n+\n+// Generic fields should be properly checked for Eq-ness\n+#[derive(PartialEq)]\n+struct GenericNotEq<T: Eq, U: PartialEq> {\n+    foo: T,\n+    bar: U,\n+}\n+\n+#[derive(PartialEq)]\n+struct GenericEq<T: Eq, U: Eq> {\n+    foo: T,\n+    bar: U,\n+}\n+\n+#[derive(PartialEq)]\n+struct TupleStruct(u32);\n+\n+#[derive(PartialEq)]\n+struct GenericTupleStruct<T: Eq>(T);\n+\n+#[derive(PartialEq)]\n+struct TupleStructNotEq(f32);\n+\n+#[derive(PartialEq)]\n+enum Enum {\n+    Foo(u32),\n+    Bar { a: String, b: () },\n+}\n+\n+#[derive(PartialEq)]\n+enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n+    Foo(T),\n+    Bar { a: U, b: V },\n+}\n+\n+#[derive(PartialEq)]\n+enum EnumNotEq {\n+    Foo(u32),\n+    Bar { a: String, b: f32 },\n+}\n+\n+// Ensure that rustfix works properly when `PartialEq` has other derives on either side\n+#[derive(Debug, PartialEq, Clone)]\n+struct RustFixWithOtherDerives;\n+\n+fn main() {}"}, {"sha": "bf55165890a5a14a36d91a9e26dcde5f2d9b1cf2", "filename": "tests/ui/derive_partial_eq_without_eq.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fderive_partial_eq_without_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fderive_partial_eq_without_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_partial_eq_without_eq.stderr?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -0,0 +1,46 @@\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:13:17\n+   |\n+LL | #[derive(Debug, PartialEq)]\n+   |                 ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+   |\n+   = note: `-D clippy::derive-partial-eq-without-eq` implied by `-D warnings`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:61:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:67:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:70:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:76:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:82:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:95:17\n+   |\n+LL | #[derive(Debug, PartialEq, Clone)]\n+   |                 ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "47bf25e409bd26e9a0ebc7f66da008474a2552a9", "filename": "tests/ui/equatable_if_let.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fequatable_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fequatable_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.fixed?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_variables, dead_code)]\n+#![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n use std::cmp::Ordering;"}, {"sha": "d498bca2455bd971afc750e34b5b90f0202301c7", "filename": "tests/ui/equatable_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fequatable_if_let.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_variables, dead_code)]\n+#![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n use std::cmp::Ordering;"}, {"sha": "3d271104361b68d7e08aba96f09d33541eba2de7", "filename": "tests/ui/unit_cmp.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.rs?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,5 +1,9 @@\n #![warn(clippy::unit_cmp)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::derive_partial_eq_without_eq\n+)]\n \n #[derive(PartialEq)]\n pub struct ContainsUnit(()); // should be fine"}, {"sha": "41cf19ae685ed6efbbb4ccd3110b2756a152852f", "filename": "tests/ui/unit_cmp.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d422baa30c415e6aed786f1953b0ac1b7d840dc1/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=d422baa30c415e6aed786f1953b0ac1b7d840dc1", "patch": "@@ -1,5 +1,5 @@\n error: ==-comparison of unit values detected. This will always be true\n-  --> $DIR/unit_cmp.rs:12:8\n+  --> $DIR/unit_cmp.rs:16:8\n    |\n LL |       if {\n    |  ________^\n@@ -12,7 +12,7 @@ LL | |     } {}\n    = note: `-D clippy::unit-cmp` implied by `-D warnings`\n \n error: >-comparison of unit values detected. This will always be false\n-  --> $DIR/unit_cmp.rs:18:8\n+  --> $DIR/unit_cmp.rs:22:8\n    |\n LL |       if {\n    |  ________^\n@@ -23,7 +23,7 @@ LL | |     } {}\n    | |_____^\n \n error: `assert_eq` of unit values detected. This will always succeed\n-  --> $DIR/unit_cmp.rs:24:5\n+  --> $DIR/unit_cmp.rs:28:5\n    |\n LL | /     assert_eq!(\n LL | |         {\n@@ -35,7 +35,7 @@ LL | |     );\n    | |_____^\n \n error: `debug_assert_eq` of unit values detected. This will always succeed\n-  --> $DIR/unit_cmp.rs:32:5\n+  --> $DIR/unit_cmp.rs:36:5\n    |\n LL | /     debug_assert_eq!(\n LL | |         {\n@@ -47,7 +47,7 @@ LL | |     );\n    | |_____^\n \n error: `assert_ne` of unit values detected. This will always fail\n-  --> $DIR/unit_cmp.rs:41:5\n+  --> $DIR/unit_cmp.rs:45:5\n    |\n LL | /     assert_ne!(\n LL | |         {\n@@ -59,7 +59,7 @@ LL | |     );\n    | |_____^\n \n error: `debug_assert_ne` of unit values detected. This will always fail\n-  --> $DIR/unit_cmp.rs:49:5\n+  --> $DIR/unit_cmp.rs:53:5\n    |\n LL | /     debug_assert_ne!(\n LL | |         {"}]}