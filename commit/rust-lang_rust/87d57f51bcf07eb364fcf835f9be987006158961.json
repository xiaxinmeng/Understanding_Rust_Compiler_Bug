{"sha": "87d57f51bcf07eb364fcf835f9be987006158961", "node_id": "C_kwDOAAsO6NoAKDg3ZDU3ZjUxYmNmMDdlYjM2NGZjZjgzNWY5YmU5ODcwMDYxNTg5NjE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-12-20T10:31:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-09T13:17:13Z"}, "message": "Rename checkOnSave settings to flycheck", "tree": {"sha": "849e176500ae5fe4d0fe91ee9f22167dba7640d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/849e176500ae5fe4d0fe91ee9f22167dba7640d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87d57f51bcf07eb364fcf835f9be987006158961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87d57f51bcf07eb364fcf835f9be987006158961", "html_url": "https://github.com/rust-lang/rust/commit/87d57f51bcf07eb364fcf835f9be987006158961", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87d57f51bcf07eb364fcf835f9be987006158961/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25717af4aa82da8ef9c93ff3428bd929e4b3dfe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/25717af4aa82da8ef9c93ff3428bd929e4b3dfe8", "html_url": "https://github.com/rust-lang/rust/commit/25717af4aa82da8ef9c93ff3428bd929e4b3dfe8"}], "stats": {"total": 597, "additions": 302, "deletions": 295}, "files": [{"sha": "25bfa0c28edd92a747cd7a841256c30cb4a09cd6", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 87, "deletions": 93, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/87d57f51bcf07eb364fcf835f9be987006158961/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d57f51bcf07eb364fcf835f9be987006158961/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=87d57f51bcf07eb364fcf835f9be987006158961", "patch": "@@ -124,65 +124,8 @@ config_data! {\n         /// Unsets `#[cfg(test)]` for the specified crates.\n         cargo_unsetTest: Vec<String>     = \"[\\\"core\\\"]\",\n \n-        /// Check all targets and tests (`--all-targets`).\n-        checkOnSave_allTargets: bool                     = \"true\",\n-        /// Cargo command to use for `cargo check`.\n-        checkOnSave_command: String                      = \"\\\"check\\\"\",\n-        /// Run specified `cargo check` command for diagnostics on save.\n-        checkOnSave_enable: bool                         = \"true\",\n-        /// Extra arguments for `cargo check`.\n-        checkOnSave_extraArgs: Vec<String>               = \"[]\",\n-        /// Extra environment variables that will be set when running `cargo check`.\n-        /// Extends `#rust-analyzer.cargo.extraEnv#`.\n-        checkOnSave_extraEnv: FxHashMap<String, String> = \"{}\",\n-        /// List of features to activate. Defaults to\n-        /// `#rust-analyzer.cargo.features#`.\n-        ///\n-        /// Set to `\"all\"` to pass `--all-features` to Cargo.\n-        checkOnSave_features: Option<CargoFeaturesDef>      = \"null\",\n-        /// Specifies the working directory for running checks.\n-        /// - \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n-        // FIXME: Ideally we would support this in some way\n-        ///   This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n-        /// - \"root\": run checks in the project's root directory.\n-        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n-        /// is set.\n-        checkOnSave_invocationLocation: InvocationLocation = \"\\\"workspace\\\"\",\n-        /// Specifies the invocation strategy to use when running the checkOnSave command.\n-        /// If `per_workspace` is set, the command will be executed for each workspace.\n-        /// If `once` is set, the command will be executed once.\n-        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n-        /// is set.\n-        checkOnSave_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n-        /// Whether to pass `--no-default-features` to Cargo. Defaults to\n-        /// `#rust-analyzer.cargo.noDefaultFeatures#`.\n-        checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n-        /// Override the command rust-analyzer uses instead of `cargo check` for\n-        /// diagnostics on save. The command is required to output json and\n-        /// should therefore include `--message-format=json` or a similar option.\n-        ///\n-        /// If you're changing this because you're using some tool wrapping\n-        /// Cargo, you might also want to change\n-        /// `#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n-        ///\n-        /// If there are multiple linked projects, this command is invoked for\n-        /// each of them, with the working directory being the project root\n-        /// (i.e., the folder containing the `Cargo.toml`).\n-        ///\n-        /// An example command would be:\n-        ///\n-        /// ```bash\n-        /// cargo check --workspace --message-format=json --all-targets\n-        /// ```\n-        /// .\n-        checkOnSave_overrideCommand: Option<Vec<String>> = \"null\",\n-        /// Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n-        ///\n-        /// Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n-        /// `[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n-        ///\n-        /// Aliased as `\"checkOnSave.targets\"`.\n-        checkOnSave_target | checkOnSave_targets: Option<CheckOnSaveTargets>           = \"null\",\n+        /// Run the flycheck command for diagnostics on save.\n+        checkOnSave | checkOnSave_enable: bool                         = \"true\",\n \n         /// Toggles the additional completions that automatically add imports when completed.\n         /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n@@ -268,6 +211,64 @@ config_data! {\n         /// Controls file watching implementation.\n         files_watcher: FilesWatcherDef = \"\\\"client\\\"\",\n \n+        /// Check all targets and tests (`--all-targets`).\n+        flycheck_allTargets | checkOnSave_allTargets: bool                  = \"true\",\n+        /// Cargo command to use for `cargo check`.\n+        flycheck_command | checkOnSave_command: String                      = \"\\\"check\\\"\",\n+        /// Extra arguments for `cargo check`.\n+        flycheck_extraArgs | checkOnSave_extraArgs: Vec<String>             = \"[]\",\n+        /// Extra environment variables that will be set when running `cargo check`.\n+        /// Extends `#rust-analyzer.cargo.extraEnv#`.\n+        flycheck_extraEnv | checkOnSave_extraEnv: FxHashMap<String, String> = \"{}\",\n+        /// List of features to activate. Defaults to\n+        /// `#rust-analyzer.cargo.features#`.\n+        ///\n+        /// Set to `\"all\"` to pass `--all-features` to Cargo.\n+        flycheck_features | checkOnSave_features: Option<CargoFeaturesDef>  = \"null\",\n+        /// Specifies the working directory for running checks.\n+        /// - \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n+        // FIXME: Ideally we would support this in some way\n+        ///   This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n+        /// - \"root\": run checks in the project's root directory.\n+        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+        /// is set.\n+        flycheck_invocationLocation | checkOnSave_invocationLocation: InvocationLocation = \"\\\"workspace\\\"\",\n+        /// Specifies the invocation strategy to use when running the checkOnSave command.\n+        /// If `per_workspace` is set, the command will be executed for each workspace.\n+        /// If `once` is set, the command will be executed once.\n+        /// This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+        /// is set.\n+        flycheck_invocationStrategy | checkOnSave_invocationStrategy: InvocationStrategy = \"\\\"per_workspace\\\"\",\n+        /// Whether to pass `--no-default-features` to Cargo. Defaults to\n+        /// `#rust-analyzer.cargo.noDefaultFeatures#`.\n+        flycheck_noDefaultFeatures | checkOnSave_noDefaultFeatures: Option<bool>         = \"null\",\n+        /// Override the command rust-analyzer uses instead of `cargo check` for\n+        /// diagnostics on save. The command is required to output json and\n+        /// should therefore include `--message-format=json` or a similar option.\n+        ///\n+        /// If you're changing this because you're using some tool wrapping\n+        /// Cargo, you might also want to change\n+        /// `#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n+        ///\n+        /// If there are multiple linked projects, this command is invoked for\n+        /// each of them, with the working directory being the project root\n+        /// (i.e., the folder containing the `Cargo.toml`).\n+        ///\n+        /// An example command would be:\n+        ///\n+        /// ```bash\n+        /// cargo check --workspace --message-format=json --all-targets\n+        /// ```\n+        /// .\n+        flycheck_overrideCommand | checkOnSave_overrideCommand: Option<Vec<String>>             = \"null\",\n+        /// Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n+        ///\n+        /// Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n+        /// `[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n+        ///\n+        /// Aliased as `\"checkOnSave.targets\"`.\n+        flycheck_targets | checkOnSave_targets | checkOnSave_target: Option<CheckOnSaveTargets> = \"null\",\n+\n         /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n         /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n@@ -786,9 +787,9 @@ impl Config {\n \n     fn validate(&self, error_sink: &mut Vec<(String, serde_json::Error)>) {\n         use serde::de::Error;\n-        if self.data.checkOnSave_command.is_empty() {\n+        if self.data.flycheck_command.is_empty() {\n             error_sink.push((\n-                \"/checkOnSave/command\".to_string(),\n+                \"/flycheck/command\".to_string(),\n                 serde_json::Error::custom(\"expected a non-empty string\"),\n             ));\n         }\n@@ -1033,7 +1034,7 @@ impl Config {\n \n     pub fn check_on_save_extra_env(&self) -> FxHashMap<String, String> {\n         let mut extra_env = self.data.cargo_extraEnv.clone();\n-        extra_env.extend(self.data.checkOnSave_extraEnv.clone());\n+        extra_env.extend(self.data.flycheck_extraEnv.clone());\n         extra_env\n     }\n \n@@ -1145,21 +1146,21 @@ impl Config {\n     }\n \n     pub fn flycheck(&self) -> FlycheckConfig {\n-        match &self.data.checkOnSave_overrideCommand {\n+        match &self.data.flycheck_overrideCommand {\n             Some(args) if !args.is_empty() => {\n                 let mut args = args.clone();\n                 let command = args.remove(0);\n                 FlycheckConfig::CustomCommand {\n                     command,\n                     args,\n                     extra_env: self.check_on_save_extra_env(),\n-                    invocation_strategy: match self.data.checkOnSave_invocationStrategy {\n+                    invocation_strategy: match self.data.flycheck_invocationStrategy {\n                         InvocationStrategy::Once => flycheck::InvocationStrategy::Once,\n                         InvocationStrategy::PerWorkspace => {\n                             flycheck::InvocationStrategy::PerWorkspace\n                         }\n                     },\n-                    invocation_location: match self.data.checkOnSave_invocationLocation {\n+                    invocation_location: match self.data.flycheck_invocationLocation {\n                         InvocationLocation::Root => {\n                             flycheck::InvocationLocation::Root(self.root_path.clone())\n                         }\n@@ -1168,42 +1169,42 @@ impl Config {\n                 }\n             }\n             Some(_) | None => FlycheckConfig::CargoCommand {\n-                command: self.data.checkOnSave_command.clone(),\n+                command: self.data.flycheck_command.clone(),\n                 target_triples: self\n                     .data\n-                    .checkOnSave_target\n+                    .flycheck_targets\n                     .clone()\n                     .and_then(|targets| match &targets.0[..] {\n                         [] => None,\n                         targets => Some(targets.into()),\n                     })\n                     .unwrap_or_else(|| self.data.cargo_target.clone().into_iter().collect()),\n-                all_targets: self.data.checkOnSave_allTargets,\n+                all_targets: self.data.flycheck_allTargets,\n                 no_default_features: self\n                     .data\n-                    .checkOnSave_noDefaultFeatures\n+                    .flycheck_noDefaultFeatures\n                     .unwrap_or(self.data.cargo_noDefaultFeatures),\n                 all_features: matches!(\n-                    self.data.checkOnSave_features.as_ref().unwrap_or(&self.data.cargo_features),\n+                    self.data.flycheck_features.as_ref().unwrap_or(&self.data.cargo_features),\n                     CargoFeaturesDef::All\n                 ),\n                 features: match self\n                     .data\n-                    .checkOnSave_features\n+                    .flycheck_features\n                     .clone()\n                     .unwrap_or_else(|| self.data.cargo_features.clone())\n                 {\n                     CargoFeaturesDef::All => vec![],\n                     CargoFeaturesDef::Selected(it) => it,\n                 },\n-                extra_args: self.data.checkOnSave_extraArgs.clone(),\n+                extra_args: self.data.flycheck_extraArgs.clone(),\n                 extra_env: self.check_on_save_extra_env(),\n             },\n         }\n     }\n \n     pub fn check_on_save(&self) -> bool {\n-        self.data.checkOnSave_enable\n+        self.data.checkOnSave\n     }\n \n     pub fn runnables(&self) -> RunnablesConfig {\n@@ -1862,25 +1863,27 @@ fn get_field<T: DeserializeOwned>(\n     alias: Option<&'static str>,\n     default: &str,\n ) -> T {\n-    let default = serde_json::from_str(default).unwrap();\n     // XXX: check alias first, to work-around the VS Code where it pre-fills the\n     // defaults instead of sending an empty object.\n     alias\n         .into_iter()\n         .chain(iter::once(field))\n-        .find_map(move |field| {\n+        .filter_map(move |field| {\n             let mut pointer = field.replace('_', \"/\");\n             pointer.insert(0, '/');\n-            json.pointer_mut(&pointer).and_then(|it| match serde_json::from_value(it.take()) {\n-                Ok(it) => Some(it),\n-                Err(e) => {\n-                    tracing::warn!(\"Failed to deserialize config field at {}: {:?}\", pointer, e);\n-                    error_sink.push((pointer, e));\n-                    None\n-                }\n-            })\n+            json.pointer_mut(&pointer)\n+                .map(|it| serde_json::from_value(it.take()).map_err(|e| (e, pointer)))\n+        })\n+        .find(Result::is_ok)\n+        .and_then(|res| match res {\n+            Ok(it) => Some(it),\n+            Err((e, pointer)) => {\n+                tracing::warn!(\"Failed to deserialize config field at {}: {:?}\", pointer, e);\n+                error_sink.push((pointer, e));\n+                None\n+            }\n         })\n-        .unwrap_or(default)\n+        .unwrap_or_else(|| serde_json::from_str(default).unwrap())\n }\n \n fn schema(fields: &[(&'static str, &'static str, &[&str], &str)]) -> serde_json::Value {\n@@ -1964,15 +1967,6 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n             \"type\": [\"null\", \"array\"],\n             \"items\": { \"type\": \"string\" },\n         },\n-        \"MergeBehaviorDef\" => set! {\n-            \"type\": \"string\",\n-            \"enum\": [\"none\", \"crate\", \"module\"],\n-            \"enumDescriptions\": [\n-                \"Do not merge imports at all.\",\n-                \"Merge imports from the same crate into a single `use` statement.\",\n-                \"Merge imports from the same module into a single `use` statement.\"\n-            ],\n-        },\n         \"ExprFillDefaultDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": [\"todo\", \"default\"],"}, {"sha": "38b70219cb2e927a81b7f3f1cfc3af7cd1596d66", "filename": "crates/rust-analyzer/src/config/patch_old_style.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/87d57f51bcf07eb364fcf835f9be987006158961/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87d57f51bcf07eb364fcf835f9be987006158961/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs?ref=87d57f51bcf07eb364fcf835f9be987006158961", "patch": "@@ -4,6 +4,9 @@ use serde_json::{json, Value};\n /// This function patches the json config to the new expected keys.\n /// That is we try to load old known config keys here and convert them to the new ones.\n /// See https://github.com/rust-lang/rust-analyzer/pull/12010\n+///\n+/// We already have an alias system for simple cases, but if we make structural changes\n+/// the alias infra fails down.\n pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n     let copy = json.clone();\n \n@@ -105,9 +108,9 @@ pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n         merge(json, json!({ \"cargo\": { \"features\": \"all\" } }));\n     }\n \n-    // checkOnSave_allFeatures, checkOnSave_features -> checkOnSave_features\n+    // checkOnSave_allFeatures, checkOnSave_features -> flycheck_features\n     if let Some(Value::Bool(true)) = copy.pointer(\"/checkOnSave/allFeatures\") {\n-        merge(json, json!({ \"checkOnSave\": { \"features\": \"all\" } }));\n+        merge(json, json!({ \"flycheck\": { \"features\": \"all\" } }));\n     }\n \n     // completion_addCallArgumentSnippets completion_addCallParenthesis -> completion_callable_snippets\n@@ -121,6 +124,16 @@ pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n         (_, _) => return,\n     };\n     merge(json, json!({ \"completion\": { \"callable\": {\"snippets\": res }} }));\n+\n+    // We need to do this due to the checkOnSave_enable -> checkOnSave change, as that key now can either be an object or a bool\n+    // checkOnSave_* -> flycheck_*\n+    if let Some(Value::Object(obj)) = copy.pointer(\"/checkOnSave\") {\n+        // checkOnSave_enable -> checkOnSave\n+        if let Some(b @ Value::Bool(_)) = obj.get(\"enable\") {\n+            merge(json, json!({ \"checkOnSave\": b }));\n+        }\n+        merge(json, json!({ \"flycheck\": obj }));\n+    }\n }\n \n fn merge(dst: &mut Value, src: Value) {"}, {"sha": "e6da4f38ab4e53de7649478537969fca208c2db5", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 88, "deletions": 88, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/87d57f51bcf07eb364fcf835f9be987006158961/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/87d57f51bcf07eb364fcf835f9be987006158961/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=87d57f51bcf07eb364fcf835f9be987006158961", "patch": "@@ -109,96 +109,10 @@ Compilation target override (target triple).\n --\n Unsets `#[cfg(test)]` for the specified crates.\n --\n-[[rust-analyzer.checkOnSave.allTargets]]rust-analyzer.checkOnSave.allTargets (default: `true`)::\n+[[rust-analyzer.checkOnSave]]rust-analyzer.checkOnSave (default: `true`)::\n +\n --\n-Check all targets and tests (`--all-targets`).\n---\n-[[rust-analyzer.checkOnSave.command]]rust-analyzer.checkOnSave.command (default: `\"check\"`)::\n-+\n---\n-Cargo command to use for `cargo check`.\n---\n-[[rust-analyzer.checkOnSave.enable]]rust-analyzer.checkOnSave.enable (default: `true`)::\n-+\n---\n-Run specified `cargo check` command for diagnostics on save.\n---\n-[[rust-analyzer.checkOnSave.extraArgs]]rust-analyzer.checkOnSave.extraArgs (default: `[]`)::\n-+\n---\n-Extra arguments for `cargo check`.\n---\n-[[rust-analyzer.checkOnSave.extraEnv]]rust-analyzer.checkOnSave.extraEnv (default: `{}`)::\n-+\n---\n-Extra environment variables that will be set when running `cargo check`.\n-Extends `#rust-analyzer.cargo.extraEnv#`.\n---\n-[[rust-analyzer.checkOnSave.features]]rust-analyzer.checkOnSave.features (default: `null`)::\n-+\n---\n-List of features to activate. Defaults to\n-`#rust-analyzer.cargo.features#`.\n-\n-Set to `\"all\"` to pass `--all-features` to Cargo.\n---\n-[[rust-analyzer.checkOnSave.invocationLocation]]rust-analyzer.checkOnSave.invocationLocation (default: `\"workspace\"`)::\n-+\n---\n-Specifies the working directory for running checks.\n-- \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n-  This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n-- \"root\": run checks in the project's root directory.\n-This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n-is set.\n---\n-[[rust-analyzer.checkOnSave.invocationStrategy]]rust-analyzer.checkOnSave.invocationStrategy (default: `\"per_workspace\"`)::\n-+\n---\n-Specifies the invocation strategy to use when running the checkOnSave command.\n-If `per_workspace` is set, the command will be executed for each workspace.\n-If `once` is set, the command will be executed once.\n-This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n-is set.\n---\n-[[rust-analyzer.checkOnSave.noDefaultFeatures]]rust-analyzer.checkOnSave.noDefaultFeatures (default: `null`)::\n-+\n---\n-Whether to pass `--no-default-features` to Cargo. Defaults to\n-`#rust-analyzer.cargo.noDefaultFeatures#`.\n---\n-[[rust-analyzer.checkOnSave.overrideCommand]]rust-analyzer.checkOnSave.overrideCommand (default: `null`)::\n-+\n---\n-Override the command rust-analyzer uses instead of `cargo check` for\n-diagnostics on save. The command is required to output json and\n-should therefore include `--message-format=json` or a similar option.\n-\n-If you're changing this because you're using some tool wrapping\n-Cargo, you might also want to change\n-`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n-\n-If there are multiple linked projects, this command is invoked for\n-each of them, with the working directory being the project root\n-(i.e., the folder containing the `Cargo.toml`).\n-\n-An example command would be:\n-\n-```bash\n-cargo check --workspace --message-format=json --all-targets\n-```\n-.\n---\n-[[rust-analyzer.checkOnSave.target]]rust-analyzer.checkOnSave.target (default: `null`)::\n-+\n---\n-Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n-\n-Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n-`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n-\n-Aliased as `\"checkOnSave.targets\"`.\n+Run the flycheck command for diagnostics on save.\n --\n [[rust-analyzer.completion.autoimport.enable]]rust-analyzer.completion.autoimport.enable (default: `true`)::\n +\n@@ -327,6 +241,92 @@ also need to add the folders to Code's `files.watcherExclude`.\n --\n Controls file watching implementation.\n --\n+[[rust-analyzer.flycheck.allTargets]]rust-analyzer.flycheck.allTargets (default: `true`)::\n++\n+--\n+Check all targets and tests (`--all-targets`).\n+--\n+[[rust-analyzer.flycheck.command]]rust-analyzer.flycheck.command (default: `\"check\"`)::\n++\n+--\n+Cargo command to use for `cargo check`.\n+--\n+[[rust-analyzer.flycheck.extraArgs]]rust-analyzer.flycheck.extraArgs (default: `[]`)::\n++\n+--\n+Extra arguments for `cargo check`.\n+--\n+[[rust-analyzer.flycheck.extraEnv]]rust-analyzer.flycheck.extraEnv (default: `{}`)::\n++\n+--\n+Extra environment variables that will be set when running `cargo check`.\n+Extends `#rust-analyzer.cargo.extraEnv#`.\n+--\n+[[rust-analyzer.flycheck.features]]rust-analyzer.flycheck.features (default: `null`)::\n++\n+--\n+List of features to activate. Defaults to\n+`#rust-analyzer.cargo.features#`.\n+\n+Set to `\"all\"` to pass `--all-features` to Cargo.\n+--\n+[[rust-analyzer.flycheck.invocationLocation]]rust-analyzer.flycheck.invocationLocation (default: `\"workspace\"`)::\n++\n+--\n+Specifies the working directory for running checks.\n+- \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n+  This falls back to \"root\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\n+- \"root\": run checks in the project's root directory.\n+This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+is set.\n+--\n+[[rust-analyzer.flycheck.invocationStrategy]]rust-analyzer.flycheck.invocationStrategy (default: `\"per_workspace\"`)::\n++\n+--\n+Specifies the invocation strategy to use when running the checkOnSave command.\n+If `per_workspace` is set, the command will be executed for each workspace.\n+If `once` is set, the command will be executed once.\n+This config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\n+is set.\n+--\n+[[rust-analyzer.flycheck.noDefaultFeatures]]rust-analyzer.flycheck.noDefaultFeatures (default: `null`)::\n++\n+--\n+Whether to pass `--no-default-features` to Cargo. Defaults to\n+`#rust-analyzer.cargo.noDefaultFeatures#`.\n+--\n+[[rust-analyzer.flycheck.overrideCommand]]rust-analyzer.flycheck.overrideCommand (default: `null`)::\n++\n+--\n+Override the command rust-analyzer uses instead of `cargo check` for\n+diagnostics on save. The command is required to output json and\n+should therefore include `--message-format=json` or a similar option.\n+\n+If you're changing this because you're using some tool wrapping\n+Cargo, you might also want to change\n+`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n+\n+If there are multiple linked projects, this command is invoked for\n+each of them, with the working directory being the project root\n+(i.e., the folder containing the `Cargo.toml`).\n+\n+An example command would be:\n+\n+```bash\n+cargo check --workspace --message-format=json --all-targets\n+```\n+.\n+--\n+[[rust-analyzer.flycheck.targets]]rust-analyzer.flycheck.targets (default: `null`)::\n++\n+--\n+Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n+\n+Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n+`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n+\n+Aliased as `\"checkOnSave.targets\"`.\n+--\n [[rust-analyzer.highlightRelated.breakPoints.enable]]rust-analyzer.highlightRelated.breakPoints.enable (default: `true`)::\n +\n --"}, {"sha": "4fe829382dd9120d6858f280e1301b43663159d6", "filename": "editors/code/package.json", "status": "modified", "additions": 112, "deletions": 112, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/87d57f51bcf07eb364fcf835f9be987006158961/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/87d57f51bcf07eb364fcf835f9be987006158961/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=87d57f51bcf07eb364fcf835f9be987006158961", "patch": "@@ -556,121 +556,11 @@\n                         \"type\": \"string\"\n                     }\n                 },\n-                \"rust-analyzer.checkOnSave.allTargets\": {\n-                    \"markdownDescription\": \"Check all targets and tests (`--all-targets`).\",\n+                \"rust-analyzer.checkOnSave\": {\n+                    \"markdownDescription\": \"Run the flycheck command for diagnostics on save.\",\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.checkOnSave.command\": {\n-                    \"markdownDescription\": \"Cargo command to use for `cargo check`.\",\n-                    \"default\": \"check\",\n-                    \"type\": \"string\"\n-                },\n-                \"rust-analyzer.checkOnSave.enable\": {\n-                    \"markdownDescription\": \"Run specified `cargo check` command for diagnostics on save.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n-                \"rust-analyzer.checkOnSave.extraArgs\": {\n-                    \"markdownDescription\": \"Extra arguments for `cargo check`.\",\n-                    \"default\": [],\n-                    \"type\": \"array\",\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    }\n-                },\n-                \"rust-analyzer.checkOnSave.extraEnv\": {\n-                    \"markdownDescription\": \"Extra environment variables that will be set when running `cargo check`.\\nExtends `#rust-analyzer.cargo.extraEnv#`.\",\n-                    \"default\": {},\n-                    \"type\": \"object\"\n-                },\n-                \"rust-analyzer.checkOnSave.features\": {\n-                    \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`.\\n\\nSet to `\\\"all\\\"` to pass `--all-features` to Cargo.\",\n-                    \"default\": null,\n-                    \"anyOf\": [\n-                        {\n-                            \"type\": \"string\",\n-                            \"enum\": [\n-                                \"all\"\n-                            ],\n-                            \"enumDescriptions\": [\n-                                \"Pass `--all-features` to cargo\"\n-                            ]\n-                        },\n-                        {\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"type\": \"string\"\n-                            }\n-                        },\n-                        {\n-                            \"type\": \"null\"\n-                        }\n-                    ]\n-                },\n-                \"rust-analyzer.checkOnSave.invocationLocation\": {\n-                    \"markdownDescription\": \"Specifies the working directory for running checks.\\n- \\\"workspace\\\": run checks for workspaces in the corresponding workspaces' root directories.\\n    This falls back to \\\"root\\\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\\n- \\\"root\\\": run checks in the project's root directory.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n-                    \"default\": \"workspace\",\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"workspace\",\n-                        \"root\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"The command will be executed in the corresponding workspace root.\",\n-                        \"The command will be executed in the project root.\"\n-                    ]\n-                },\n-                \"rust-analyzer.checkOnSave.invocationStrategy\": {\n-                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace` is set, the command will be executed for each workspace.\\nIf `once` is set, the command will be executed once.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n-                    \"default\": \"per_workspace\",\n-                    \"type\": \"string\",\n-                    \"enum\": [\n-                        \"per_workspace\",\n-                        \"once\"\n-                    ],\n-                    \"enumDescriptions\": [\n-                        \"The command will be executed for each workspace.\",\n-                        \"The command will be executed once.\"\n-                    ]\n-                },\n-                \"rust-analyzer.checkOnSave.noDefaultFeatures\": {\n-                    \"markdownDescription\": \"Whether to pass `--no-default-features` to Cargo. Defaults to\\n`#rust-analyzer.cargo.noDefaultFeatures#`.\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"boolean\"\n-                    ]\n-                },\n-                \"rust-analyzer.checkOnSave.overrideCommand\": {\n-                    \"markdownDescription\": \"Override the command rust-analyzer uses instead of `cargo check` for\\ndiagnostics on save. The command is required to output json and\\nshould therefore include `--message-format=json` or a similar option.\\n\\nIf you're changing this because you're using some tool wrapping\\nCargo, you might also want to change\\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\\n\\nIf there are multiple linked projects, this command is invoked for\\neach of them, with the working directory being the project root\\n(i.e., the folder containing the `Cargo.toml`).\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"array\"\n-                    ],\n-                    \"items\": {\n-                        \"type\": \"string\"\n-                    }\n-                },\n-                \"rust-analyzer.checkOnSave.target\": {\n-                    \"markdownDescription\": \"Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\\n\\nCan be a single target, e.g. `\\\"x86_64-unknown-linux-gnu\\\"` or a list of targets, e.g.\\n`[\\\"aarch64-apple-darwin\\\", \\\"x86_64-apple-darwin\\\"]`.\\n\\nAliased as `\\\"checkOnSave.targets\\\"`.\",\n-                    \"default\": null,\n-                    \"anyOf\": [\n-                        {\n-                            \"type\": \"null\"\n-                        },\n-                        {\n-                            \"type\": \"string\"\n-                        },\n-                        {\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"type\": \"string\"\n-                            }\n-                        }\n-                    ]\n-                },\n                 \"rust-analyzer.completion.autoimport.enable\": {\n                     \"markdownDescription\": \"Toggles the additional completions that automatically add imports when completed.\\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\",\n                     \"default\": true,\n@@ -812,6 +702,116 @@\n                         \"Use server-side file watching\"\n                     ]\n                 },\n+                \"rust-analyzer.flycheck.allTargets\": {\n+                    \"markdownDescription\": \"Check all targets and tests (`--all-targets`).\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.flycheck.command\": {\n+                    \"markdownDescription\": \"Cargo command to use for `cargo check`.\",\n+                    \"default\": \"check\",\n+                    \"type\": \"string\"\n+                },\n+                \"rust-analyzer.flycheck.extraArgs\": {\n+                    \"markdownDescription\": \"Extra arguments for `cargo check`.\",\n+                    \"default\": [],\n+                    \"type\": \"array\",\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n+                \"rust-analyzer.flycheck.extraEnv\": {\n+                    \"markdownDescription\": \"Extra environment variables that will be set when running `cargo check`.\\nExtends `#rust-analyzer.cargo.extraEnv#`.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n+                \"rust-analyzer.flycheck.features\": {\n+                    \"markdownDescription\": \"List of features to activate. Defaults to\\n`#rust-analyzer.cargo.features#`.\\n\\nSet to `\\\"all\\\"` to pass `--all-features` to Cargo.\",\n+                    \"default\": null,\n+                    \"anyOf\": [\n+                        {\n+                            \"type\": \"string\",\n+                            \"enum\": [\n+                                \"all\"\n+                            ],\n+                            \"enumDescriptions\": [\n+                                \"Pass `--all-features` to cargo\"\n+                            ]\n+                        },\n+                        {\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"type\": \"string\"\n+                            }\n+                        },\n+                        {\n+                            \"type\": \"null\"\n+                        }\n+                    ]\n+                },\n+                \"rust-analyzer.flycheck.invocationLocation\": {\n+                    \"markdownDescription\": \"Specifies the working directory for running checks.\\n- \\\"workspace\\\": run checks for workspaces in the corresponding workspaces' root directories.\\n    This falls back to \\\"root\\\" if `#rust-analyzer.cargo.checkOnSave.invocationStrategy#` is set to `once`.\\n- \\\"root\\\": run checks in the project's root directory.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n+                    \"default\": \"workspace\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"workspace\",\n+                        \"root\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"The command will be executed in the corresponding workspace root.\",\n+                        \"The command will be executed in the project root.\"\n+                    ]\n+                },\n+                \"rust-analyzer.flycheck.invocationStrategy\": {\n+                    \"markdownDescription\": \"Specifies the invocation strategy to use when running the checkOnSave command.\\nIf `per_workspace` is set, the command will be executed for each workspace.\\nIf `once` is set, the command will be executed once.\\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\\nis set.\",\n+                    \"default\": \"per_workspace\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"per_workspace\",\n+                        \"once\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"The command will be executed for each workspace.\",\n+                        \"The command will be executed once.\"\n+                    ]\n+                },\n+                \"rust-analyzer.flycheck.noDefaultFeatures\": {\n+                    \"markdownDescription\": \"Whether to pass `--no-default-features` to Cargo. Defaults to\\n`#rust-analyzer.cargo.noDefaultFeatures#`.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"boolean\"\n+                    ]\n+                },\n+                \"rust-analyzer.flycheck.overrideCommand\": {\n+                    \"markdownDescription\": \"Override the command rust-analyzer uses instead of `cargo check` for\\ndiagnostics on save. The command is required to output json and\\nshould therefore include `--message-format=json` or a similar option.\\n\\nIf you're changing this because you're using some tool wrapping\\nCargo, you might also want to change\\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\\n\\nIf there are multiple linked projects, this command is invoked for\\neach of them, with the working directory being the project root\\n(i.e., the folder containing the `Cargo.toml`).\\n\\nAn example command would be:\\n\\n```bash\\ncargo check --workspace --message-format=json --all-targets\\n```\\n.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"array\"\n+                    ],\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    }\n+                },\n+                \"rust-analyzer.flycheck.targets\": {\n+                    \"markdownDescription\": \"Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\\n\\nCan be a single target, e.g. `\\\"x86_64-unknown-linux-gnu\\\"` or a list of targets, e.g.\\n`[\\\"aarch64-apple-darwin\\\", \\\"x86_64-apple-darwin\\\"]`.\\n\\nAliased as `\\\"checkOnSave.targets\\\"`.\",\n+                    \"default\": null,\n+                    \"anyOf\": [\n+                        {\n+                            \"type\": \"null\"\n+                        },\n+                        {\n+                            \"type\": \"string\"\n+                        },\n+                        {\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"type\": \"string\"\n+                            }\n+                        }\n+                    ]\n+                },\n                 \"rust-analyzer.highlightRelated.breakPoints.enable\": {\n                     \"markdownDescription\": \"Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\",\n                     \"default\": true,"}]}