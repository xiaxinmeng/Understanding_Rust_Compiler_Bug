{"sha": "95a5a0ed16171cfab039c3b59f45a6e4a93075fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YTVhMGVkMTYxNzFjZmFiMDM5YzNiNTlmNDVhNmU0YTkzMDc1ZmE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-09-08T21:49:51Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-09-08T21:49:51Z"}, "message": "Add `TargetOptions::min_global_align`, with s390x at 16-bit\n\nThe SystemZ `LALR` instruction provides PC-relative addressing for\nglobals, but only to *even* addresses, so other compilers make sure that\nsuch globals are always 2-byte aligned.  In Clang, this is modeled with\n`TargetInfo::MinGlobalAlign`, and `TargetOptions::min_global_align` now\nserves the same purpose for rustc.\n\nIn Clang, the only targets that set this are SystemZ, Lanai, and NVPTX,\nand the latter two don't have targets in rust master.", "tree": {"sha": "f860f3df7ee187b0d9ab738c7b0f3c128c1712dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f860f3df7ee187b0d9ab738c7b0f3c128c1712dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95a5a0ed16171cfab039c3b59f45a6e4a93075fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95a5a0ed16171cfab039c3b59f45a6e4a93075fa", "html_url": "https://github.com/rust-lang/rust/commit/95a5a0ed16171cfab039c3b59f45a6e4a93075fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95a5a0ed16171cfab039c3b59f45a6e4a93075fa/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dead08cb331343b84564628b139b657f93548320", "url": "https://api.github.com/repos/rust-lang/rust/commits/dead08cb331343b84564628b139b657f93548320", "html_url": "https://github.com/rust-lang/rust/commit/dead08cb331343b84564628b139b657f93548320"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "301cf3f8c8208d0019ba55fbd43477ad9f9e1c36", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95a5a0ed16171cfab039c3b59f45a6e4a93075fa/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a5a0ed16171cfab039c3b59f45a6e4a93075fa/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=95a5a0ed16171cfab039c3b59f45a6e4a93075fa", "patch": "@@ -425,6 +425,9 @@ pub struct TargetOptions {\n \n     /// Whether or not stack probes (__rust_probestack) are enabled\n     pub stack_probes: bool,\n+\n+    /// The minimum alignment for global symbols.\n+    pub min_global_align: Option<u64>,\n }\n \n impl Default for TargetOptions {\n@@ -486,6 +489,7 @@ impl Default for TargetOptions {\n             crt_static_default: false,\n             crt_static_respected: false,\n             stack_probes: false,\n+            min_global_align: None,\n         }\n     }\n }\n@@ -724,6 +728,7 @@ impl Target {\n         key!(crt_static_default, bool);\n         key!(crt_static_respected, bool);\n         key!(stack_probes, bool);\n+        key!(min_global_align, Option<u64>);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -914,6 +919,7 @@ impl ToJson for Target {\n         target_option_val!(crt_static_default);\n         target_option_val!(crt_static_respected);\n         target_option_val!(stack_probes);\n+        target_option_val!(min_global_align);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "aad9effacd440460898b21f105a3818b2b314ef9", "filename": "src/librustc_back/target/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95a5a0ed16171cfab039c3b59f45a6e4a93075fa/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a5a0ed16171cfab039c3b59f45a6e4a93075fa/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs?ref=95a5a0ed16171cfab039c3b59f45a6e4a93075fa", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     // see #36994\n     base.exe_allocation_crate = None;\n+    base.min_global_align = Some(16);\n \n     Ok(Target {\n         llvm_target: \"s390x-unknown-linux-gnu\".to_string(),"}, {"sha": "bad8a8655d0938cc5625bc9e0dfed2c1de2a362d", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/95a5a0ed16171cfab039c3b59f45a6e4a93075fa/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a5a0ed16171cfab039c3b59f45a6e4a93075fa/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=95a5a0ed16171cfab039c3b59f45a6e4a93075fa", "patch": "@@ -26,6 +26,7 @@ use rustc::ty;\n \n use rustc::hir;\n \n+use std::cmp;\n use std::ffi::{CStr, CString};\n use syntax::ast;\n use syntax::attr;\n@@ -42,6 +43,25 @@ pub fn bitcast(val: ValueRef, ty: Type) -> ValueRef {\n     }\n }\n \n+fn set_global_alignment(ccx: &CrateContext,\n+                        gv: ValueRef,\n+                        mut align: machine::llalign) {\n+    // The target may require greater alignment for globals than the type does.\n+    // Note: GCC and Clang also allow `__attribute__((aligned))` on variables,\n+    // which can force it to be smaller.  Rust doesn't support this yet.\n+    if let Some(min) = ccx.sess().target.target.options.min_global_align {\n+        match ty::layout::Align::from_bits(min, min) {\n+            Ok(min) => align = cmp::max(align, min.abi() as machine::llalign),\n+            Err(err) => {\n+                ccx.sess().err(&format!(\"invalid minimum global alignment: {}\", err));\n+            }\n+        }\n+    }\n+    unsafe {\n+        llvm::LLVMSetAlignment(gv, align);\n+    }\n+}\n+\n pub fn addr_of_mut(ccx: &CrateContext,\n                    cv: ValueRef,\n                    align: machine::llalign,\n@@ -53,7 +73,7 @@ pub fn addr_of_mut(ccx: &CrateContext,\n             bug!(\"symbol `{}` is already defined\", name);\n         });\n         llvm::LLVMSetInitializer(gv, cv);\n-        llvm::LLVMSetAlignment(gv, align);\n+        set_global_alignment(ccx, gv, align);\n         llvm::LLVMRustSetLinkage(gv, llvm::Linkage::InternalLinkage);\n         SetUnnamedAddr(gv, true);\n         gv\n@@ -276,7 +296,7 @@ pub fn trans_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             ccx.statics_to_rauw().borrow_mut().push((g, new_g));\n             new_g\n         };\n-        llvm::LLVMSetAlignment(g, ccx.align_of(ty));\n+        set_global_alignment(ccx, g, ccx.align_of(ty));\n         llvm::LLVMSetInitializer(g, v);\n \n         // As an optimization, all shared statics which do not have interior"}]}