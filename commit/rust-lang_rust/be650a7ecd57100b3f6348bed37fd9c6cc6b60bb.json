{"sha": "be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNjUwYTdlY2Q1NzEwMGIzZjYzNDhiZWQzN2ZkOWM2Y2M2YjYwYmI=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-09T05:01:19Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-12T08:30:17Z"}, "message": "Add a bunch of revisions\n\nThis adds a bunch of revisions to const-generic tests", "tree": {"sha": "6a373e2ab26fa6a6bc46c5bcea591040060b5068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a373e2ab26fa6a6bc46c5bcea591040060b5068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "html_url": "https://github.com/rust-lang/rust/commit/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "html_url": "https://github.com/rust-lang/rust/commit/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3"}], "stats": {"total": 343, "additions": 305, "deletions": 38}, "files": [{"sha": "ffaab51f766d8d8b264c03f9096935041fc9a7cc", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.full.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.full.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,14 @@\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:10:23\n+   |\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n+\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:12:15\n+   |\n+LL | impl<const P: *const u32> Const<P> {\n+   |               ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "dc4bb8b0f042a3870d7b79429c9b81d29b688698", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.min.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,20 @@\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:10:23\n+   |\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param-deref.rs:12:15\n+   |\n+LL | impl<const P: *const u32> Const<P> {\n+   |               ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a506153187b0c3be5bef469e49f65daf665ae442", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,5 +1,9 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Assert that cannot use const generics as ptrs and cannot deref them.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n const A: u32 = 3;\n "}, {"sha": "d317aa0f585cf9c616ae74b02b5f952ee24a5faa", "filename": "src/test/ui/const-generics/raw-ptr-const-param.full.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.full.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,8 @@\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param.rs:7:23\n+   |\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f387974a21aca244c54cea61cb9731069401782e", "filename": "src/test/ui/const-generics/raw-ptr-const-param.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.min.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,11 @@\n+error: using raw pointers as const generic parameters is forbidden\n+  --> $DIR/raw-ptr-const-param.rs:7:23\n+   |\n+LL | struct Const<const P: *const u32>;\n+   |                       ^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "36e593aa210223d8a85eb1a9f35298c5f5ee117e", "filename": "src/test/ui/const-generics/raw-ptr-const-param.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,5 +1,8 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const P: *const u32>; //~ ERROR: using raw pointers as const generic parameters\n "}, {"sha": "17c374b82c7e9cc70bf20152d5f026a2f6c8cf46", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![allow(incomplete_features)]\n \n struct ConstString<const T: &'static str>;\n struct ConstBytes<const T: &'static [u8]>;"}, {"sha": "7016d78be732b314e7b82bdf41653061ff380cc2", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,12 +1,3 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/slice-const-param-mismatch.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n error[E0308]: mismatched types\n   --> $DIR/slice-const-param-mismatch.rs:9:35\n    |\n@@ -40,6 +31,6 @@ LL |     let _: ConstBytes<b\"AAA\"> = ConstBytes::<b\"BBB\">;\n    = note: expected struct `ConstBytes<b\"AAA\">`\n               found struct `ConstBytes<b\"BBB\">`\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "e2ffc67c3579cd10f736d1a94caa06e57b54eb93", "filename": "src/test/ui/const-generics/slice-const-param.min.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,20 @@\n+error: using `&'static str` as const generic parameters is forbidden\n+  --> $DIR/slice-const-param.rs:8:40\n+   |\n+LL | pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n+   |                                        ^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: using `&'static [u8]` as const generic parameters is forbidden\n+  --> $DIR/slice-const-param.rs:13:41\n+   |\n+LL | pub fn function_with_bytes<const BYTES: &'static [u8]>() -> &'static [u8] {\n+   |                                         ^^^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1b6d2f6216c44d27afdfa498eade3cea06c5bb43", "filename": "src/test/ui/const-generics/slice-const-param.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,13 +1,17 @@\n-// run-pass\n+//[full] run-pass\n+// revisions: min full\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n+    //[min]~^ ERROR using `&'static str` as const\n     STRING\n }\n \n pub fn function_with_bytes<const BYTES: &'static [u8]>() -> &'static [u8] {\n+    //[min]~^ ERROR using `&'static [u8]` as const\n     BYTES\n }\n "}, {"sha": "9734d2e41cb595df2d3a6607ce4857b65a3db432", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.full.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.full.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,12 @@\n+error[E0573]: expected type, found const parameter `C`\n+  --> $DIR/struct-with-invalid-const-param.rs:8:23\n+   |\n+LL | struct S<const C: u8>(C);\n+   | ----------------------^--\n+   | |                     |\n+   | |                     help: a struct with a similar name exists: `S`\n+   | similarly named struct `S` defined here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0573`."}, {"sha": "9734d2e41cb595df2d3a6607ce4857b65a3db432", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.min.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.min.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,12 @@\n+error[E0573]: expected type, found const parameter `C`\n+  --> $DIR/struct-with-invalid-const-param.rs:8:23\n+   |\n+LL | struct S<const C: u8>(C);\n+   | ----------------------^--\n+   | |                     |\n+   | |                     help: a struct with a similar name exists: `S`\n+   | similarly named struct `S` defined here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0573`."}, {"sha": "f0122ace3aec3a5c97e71a69d918c5a79b299746", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,5 +1,9 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Checks that a const param cannot be stored in a struct.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct S<const C: u8>(C); //~ ERROR expected type, found const parameter\n "}, {"sha": "b66d79845f971581f821b702ea1e88a8790c1bcf", "filename": "src/test/ui/const-generics/trait-const-args.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Ftrait-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Ftrait-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftrait-const-args.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,6 +1,9 @@\n // check-pass\n-#![allow(incomplete_features)]\n-#![feature(const_generics)]\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const N: usize>;\n trait Foo<const N: usize> {}"}, {"sha": "e041e9709d0ec56204caad2ebd7505736f22b63a", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n use std::mem::MaybeUninit;\n "}, {"sha": "f424fd03341fec6945058f72f9aa72c277ab21ce", "filename": "src/test/ui/const-generics/type_of_anon_const.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_of_anon_const.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n trait T<const A: usize> {\n     fn l<const N: bool>() -> usize;"}, {"sha": "2c5af9e65f827a8b57b2348da2e69a35b6417a4c", "filename": "src/test/ui/const-generics/uninferred-consts.full.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.full.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/uninferred-consts.rs:14:5\n+   |\n+LL |     Foo.foo();\n+   |     ^^^^^^^^^\n+   |\n+   = note: unable to infer the value of a const parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "2c5af9e65f827a8b57b2348da2e69a35b6417a4c", "filename": "src/test/ui/const-generics/uninferred-consts.min.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.min.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/uninferred-consts.rs:14:5\n+   |\n+LL |     Foo.foo();\n+   |     ^^^^^^^^^\n+   |\n+   = note: unable to infer the value of a const parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "4d643721c8a936c00971c1c28ae847d86c568f69", "filename": "src/test/ui/const-generics/uninferred-consts.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,5 +1,9 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Test if emits error if cannot properly infer constant.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n // taken from https://github.com/rust-lang/rust/issues/70507#issuecomment-615268893\n struct Foo;"}, {"sha": "983f46ce8e352bedb7f5bd78790222dadb307232", "filename": "src/test/ui/const-generics/unknown_adt.full.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.full.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `UnknownStruct` in this scope\n+  --> $DIR/unknown_adt.rs:10:12\n+   |\n+LL |     let _: UnknownStruct<7>;\n+   |            ^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "983f46ce8e352bedb7f5bd78790222dadb307232", "filename": "src/test/ui/const-generics/unknown_adt.min.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.min.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `UnknownStruct` in this scope\n+  --> $DIR/unknown_adt.rs:10:12\n+   |\n+LL |     let _: UnknownStruct<7>;\n+   |            ^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "a803800dcbef1db3a7708140da4da26121d0c7d3", "filename": "src/test/ui/const-generics/unknown_adt.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,5 +1,10 @@\n-#![feature(const_generics)]\n-#![allow(incomplete_features)]\n+// Checks errors when there is an abstract data type.\n+// revisions: full min\n+\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n fn main() {\n     let _: UnknownStruct<7>;"}, {"sha": "3c305167b4b64d12bbc5525b2cab68b7eeaf1f6c", "filename": "src/test/ui/const-generics/unused-const-param.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,7 +1,9 @@\n // check-pass\n+// revisions: full min\n \n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n struct A<const N: usize>; // ok\n "}, {"sha": "cd3d9fda8b9dadb9fb0ac2a95e45e1a703f38be1", "filename": "src/test/ui/const-generics/unused_braces.full.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.fixed?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// run-rustfix\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+#![warn(unused_braces)]\n+\n+\n+struct A<const N: usize>;\n+\n+fn main() {\n+    let _: A<7>; // ok\n+    let _: A< 7 >; //~ WARN unnecessary braces\n+    let _: A<{ 3 + 5 }>; // ok\n+}"}, {"sha": "1752779a60a3a7e23a00d41046a88af094b75aa9", "filename": "src/test/ui/const-generics/unused_braces.full.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.full.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,14 @@\n+warning: unnecessary braces around const expression\n+  --> $DIR/unused_braces.rs:15:14\n+   |\n+LL |     let _: A<{ 7 }>;\n+   |              ^^^^^ help: remove these braces\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused_braces.rs:8:9\n+   |\n+LL | #![warn(unused_braces)]\n+   |         ^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cd3d9fda8b9dadb9fb0ac2a95e45e1a703f38be1", "filename": "src/test/ui/const-generics/unused_braces.min.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.fixed?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+// run-rustfix\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+#![warn(unused_braces)]\n+\n+\n+struct A<const N: usize>;\n+\n+fn main() {\n+    let _: A<7>; // ok\n+    let _: A< 7 >; //~ WARN unnecessary braces\n+    let _: A<{ 3 + 5 }>; // ok\n+}"}, {"sha": "1752779a60a3a7e23a00d41046a88af094b75aa9", "filename": "src/test/ui/const-generics/unused_braces.min.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.min.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,14 @@\n+warning: unnecessary braces around const expression\n+  --> $DIR/unused_braces.rs:15:14\n+   |\n+LL |     let _: A<{ 7 }>;\n+   |              ^^^^^ help: remove these braces\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused_braces.rs:8:9\n+   |\n+LL | #![warn(unused_braces)]\n+   |         ^^^^^^^^^^^^^\n+\n+warning: 1 warning emitted\n+"}, {"sha": "31c4caf7ab8509037adfcc07f7e6fbb8f6413b54", "filename": "src/test/ui/const-generics/unused_braces.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,10 +1,12 @@\n // check-pass\n // run-rustfix\n+// revisions: full min\n \n-#![allow(incomplete_features)]\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n #![warn(unused_braces)]\n \n-#![feature(const_generics)]\n \n struct A<const N: usize>;\n "}, {"sha": "4af48fa1590907a37ee96c93833d965719e467f5", "filename": "src/test/ui/const-generics/wf-misc.full.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.full.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,18 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/wf-misc.rs:9:12\n+   |\n+LL |     let _: [u8; N + 1];\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/wf-misc.rs:17:12\n+   |\n+LL |     let _: Const::<{N + 1}>;\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f2acb8fc06e93812976e6dd91f7679eb394224ea", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -0,0 +1,18 @@\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/wf-misc.rs:9:17\n+   |\n+LL |     let _: [u8; N + 1];\n+   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/wf-misc.rs:17:21\n+   |\n+LL |     let _: Const::<{N + 1}>;\n+   |                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e6f7a9963e8f11735cf5cc69e59af15f340de7bc", "filename": "src/test/ui/const-generics/wf-misc.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be650a7ecd57100b3f6348bed37fd9c6cc6b60bb/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs?ref=be650a7ecd57100b3f6348bed37fd9c6cc6b60bb", "patch": "@@ -1,16 +1,22 @@\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n+// Tests miscellaneous well-formedness examples.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n \n pub fn arr_len<const N: usize>() {\n     let _: [u8; N + 1];\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n }\n \n struct Const<const N: usize>;\n \n pub fn func_call<const N: usize>() {\n     let _: Const::<{N + 1}>;\n-    //~^ ERROR constant expression depends on a generic parameter\n+    //[full]~^ ERROR constant expression depends on a generic parameter\n+    //[min]~^^ ERROR generic parameters must not be used inside of non trivial\n }\n \n fn main() {}"}]}