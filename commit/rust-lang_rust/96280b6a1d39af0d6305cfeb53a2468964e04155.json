{"sha": "96280b6a1d39af0d6305cfeb53a2468964e04155", "node_id": "C_kwDOAAsO6NoAKDk2MjgwYjZhMWQzOWFmMGQ2MzA1Y2ZlYjUzYTI0Njg5NjRlMDQxNTU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-14T02:59:54Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-14T02:59:54Z"}, "message": "Remove `addr_of` argument from `create_struct_pattern_fields`.\n\nBecause it's always false.", "tree": {"sha": "9b6ea04b2af438b1c073cee55a141e1a35db9f77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b6ea04b2af438b1c073cee55a141e1a35db9f77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96280b6a1d39af0d6305cfeb53a2468964e04155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96280b6a1d39af0d6305cfeb53a2468964e04155", "html_url": "https://github.com/rust-lang/rust/commit/96280b6a1d39af0d6305cfeb53a2468964e04155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96280b6a1d39af0d6305cfeb53a2468964e04155/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9985f4611b0d52e7faf6fc68adcdbced786871a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9985f4611b0d52e7faf6fc68adcdbced786871a9", "html_url": "https://github.com/rust-lang/rust/commit/9985f4611b0d52e7faf6fc68adcdbced786871a9"}], "stats": {"total": 12, "additions": 3, "deletions": 9}, "files": [{"sha": "73cf1989341e84642962402899106ee3002fa554", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96280b6a1d39af0d6305cfeb53a2468964e04155/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96280b6a1d39af0d6305cfeb53a2468964e04155/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=96280b6a1d39af0d6305cfeb53a2468964e04155", "patch": "@@ -1063,9 +1063,7 @@ impl<'a> MethodDef<'a> {\n             // Packed and not copy. Need to use ref patterns.\n             let prefixes: Vec<_> =\n                 (0..selflike_args.len()).map(|i| format!(\"__self_{}\", i)).collect();\n-            let addr_of = false;\n-            let selflike_fields =\n-                trait_.create_struct_pattern_fields(cx, struct_def, &prefixes, addr_of);\n+            let selflike_fields = trait_.create_struct_pattern_fields(cx, struct_def, &prefixes);\n             let mut body = mk_body(cx, selflike_fields);\n \n             let struct_path = cx.path(span, vec![Ident::new(kw::SelfUpper, type_ident.span)]);\n@@ -1251,9 +1249,7 @@ impl<'a> MethodDef<'a> {\n                 // A single arm has form (&VariantK, &VariantK, ...) => BodyK\n                 // (see \"Final wrinkle\" note below for why.)\n \n-                let addr_of = false; // because enums can't be repr(packed)\n-                let fields =\n-                    trait_.create_struct_pattern_fields(cx, &variant.data, &prefixes, addr_of);\n+                let fields = trait_.create_struct_pattern_fields(cx, &variant.data, &prefixes);\n \n                 let sp = variant.span.with_ctxt(trait_.span.ctxt());\n                 let variant_path = cx.path(sp, vec![type_ident, variant.ident]);\n@@ -1516,15 +1512,13 @@ impl<'a> TraitDef<'a> {\n         cx: &mut ExtCtxt<'_>,\n         struct_def: &'a VariantData,\n         prefixes: &[String],\n-        addr_of: bool,\n     ) -> Vec<FieldInfo> {\n         self.create_fields(struct_def, |i, _struct_field, sp| {\n             prefixes\n                 .iter()\n                 .map(|prefix| {\n                     let ident = self.mk_pattern_ident(prefix, i);\n-                    let expr = cx.expr_path(cx.path_ident(sp, ident));\n-                    if addr_of { cx.expr_addr_of(sp, expr) } else { expr }\n+                    cx.expr_path(cx.path_ident(sp, ident))\n                 })\n                 .collect()\n         })"}]}