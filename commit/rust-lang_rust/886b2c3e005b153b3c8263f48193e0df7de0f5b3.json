{"sha": "886b2c3e005b153b3c8263f48193e0df7de0f5b3", "node_id": "C_kwDOAAsO6NoAKDg4NmIyYzNlMDA1YjE1M2IzYzgyNjNmNDgxOTNlMGRmN2RlMGY1YjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-03T22:37:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-03T22:37:53Z"}, "message": "Auto merge of #107650 - compiler-errors:rollup-4pntchf, r=compiler-errors\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #106887 (Make const/fn return params more suggestable)\n - #107519 (Add type alias for raw OS errors)\n - #107551 ( Replace `ConstFnMutClosure` with const closures )\n - #107595 (Retry opening proc-macro DLLs a few times on Windows.)\n - #107615 (Replace nbsp in all rustdoc code blocks)\n - #107621 (Intern external constraints in new solver)\n - #107631 (loudly tell people when they change `Cargo.lock`)\n - #107632 (Clarifying that .map() returns None if None.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4bd560ab45691d951ce6a3b70229091e093a69b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd560ab45691d951ce6a3b70229091e093a69b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/886b2c3e005b153b3c8263f48193e0df7de0f5b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/886b2c3e005b153b3c8263f48193e0df7de0f5b3", "html_url": "https://github.com/rust-lang/rust/commit/886b2c3e005b153b3c8263f48193e0df7de0f5b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/886b2c3e005b153b3c8263f48193e0df7de0f5b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "658fad6c5506f41c35b64fb1a22ceb0992697ff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/658fad6c5506f41c35b64fb1a22ceb0992697ff3", "html_url": "https://github.com/rust-lang/rust/commit/658fad6c5506f41c35b64fb1a22ceb0992697ff3"}, {"sha": "13bd75f425f084d63817336db5ca433bc0655786", "url": "https://api.github.com/repos/rust-lang/rust/commits/13bd75f425f084d63817336db5ca433bc0655786", "html_url": "https://github.com/rust-lang/rust/commit/13bd75f425f084d63817336db5ca433bc0655786"}], "stats": {"total": 640, "additions": 391, "deletions": 249}, "files": [{"sha": "3d5f189e233bb5f8f87753898f1bd89ba3f4c8cd", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -2945,12 +2945,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     if r.is_erased() { tcx.lifetimes.re_static } else { r }\n                 });\n                 let span = ast_ty.span;\n-                tcx.sess.emit_err(TypeofReservedKeywordUsed {\n-                    span,\n-                    ty,\n-                    opt_sugg: Some((span, Applicability::MachineApplicable))\n-                        .filter(|_| ty.is_suggestable(tcx, false)),\n-                });\n+                let (ty, opt_sugg) = if let Some(ty) = ty.make_suggestable(tcx, false) {\n+                    (ty, Some((span, Applicability::MachineApplicable)))\n+                } else {\n+                    (ty, None)\n+                };\n+                tcx.sess.emit_err(TypeofReservedKeywordUsed { span, ty, opt_sugg });\n \n                 ty\n             }"}, {"sha": "80426c239ac8b8f9ab6506324aa685e10583197c", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -1199,28 +1199,22 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n             visitor.visit_ty(ty);\n             let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n             let ret_ty = fn_sig.output();\n-            if ret_ty.is_suggestable(tcx, false) {\n+            if let Some(ret_ty) = ret_ty.make_suggestable(tcx, false) {\n                 diag.span_suggestion(\n                     ty.span,\n                     \"replace with the correct return type\",\n                     ret_ty,\n                     Applicability::MachineApplicable,\n                 );\n-            } else if matches!(ret_ty.kind(), ty::FnDef(..)) {\n-                let fn_sig = ret_ty.fn_sig(tcx);\n-                if fn_sig\n-                    .skip_binder()\n-                    .inputs_and_output\n-                    .iter()\n-                    .all(|t| t.is_suggestable(tcx, false))\n-                {\n-                    diag.span_suggestion(\n-                        ty.span,\n-                        \"replace with the correct return type\",\n-                        fn_sig,\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n+            } else if matches!(ret_ty.kind(), ty::FnDef(..))\n+                && let Some(fn_sig) = ret_ty.fn_sig(tcx).make_suggestable(tcx, false)\n+            {\n+                diag.span_suggestion(\n+                    ty.span,\n+                    \"replace with the correct return type\",\n+                    fn_sig,\n+                    Applicability::MachineApplicable,\n+                );\n             } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, hir_id, def_id) {\n                 diag.span_suggestion(\n                     ty.span,\n@@ -1280,9 +1274,7 @@ fn suggest_impl_trait<'tcx>(\n             let trait_name = tcx.item_name(trait_def_id);\n             let args_tuple = substs.type_at(1);\n             let ty::Tuple(types) = *args_tuple.kind() else { return None; };\n-            if !types.is_suggestable(tcx, false) {\n-                return None;\n-            }\n+            let types = types.make_suggestable(tcx, false)?;\n             let maybe_ret =\n                 if item_ty.is_unit() { String::new() } else { format!(\" -> {item_ty}\") };\n             Some(format!(\n@@ -1337,7 +1329,7 @@ fn suggest_impl_trait<'tcx>(\n         // FIXME(compiler-errors): We may benefit from resolving regions here.\n         if ocx.select_where_possible().is_empty()\n             && let item_ty = infcx.resolve_vars_if_possible(item_ty)\n-            && item_ty.is_suggestable(tcx, false)\n+            && let Some(item_ty) = item_ty.make_suggestable(tcx, false)\n             && let Some(sugg) = formatter(tcx, infcx.resolve_vars_if_possible(substs), trait_def_id, assoc_item_def_id, item_ty)\n         {\n             return Some(sugg);"}, {"sha": "c5522c94874dd3c3421e3a20e6f71f67be3d7780", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 14, "deletions": 33, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -8,7 +8,9 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable};\n+use rustc_middle::ty::{\n+    self, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -845,37 +847,23 @@ fn infer_placeholder_type<'a>(\n ) -> Ty<'a> {\n     // Attempts to make the type nameable by turning FnDefs into FnPtrs.\n     struct MakeNameable<'tcx> {\n-        success: bool,\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> MakeNameable<'tcx> {\n-        fn new(tcx: TyCtxt<'tcx>) -> Self {\n-            MakeNameable { success: true, tcx }\n-        }\n-    }\n-\n     impl<'tcx> TypeFolder<'tcx> for MakeNameable<'tcx> {\n         fn tcx(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }\n \n         fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-            if !self.success {\n-                return ty;\n-            }\n-\n-            match ty.kind() {\n+            let ty = match *ty.kind() {\n                 ty::FnDef(def_id, substs) => {\n-                    self.tcx.mk_fn_ptr(self.tcx.fn_sig(*def_id).subst(self.tcx, substs))\n+                    self.tcx.mk_fn_ptr(self.tcx.fn_sig(def_id).subst(self.tcx, substs))\n                 }\n-                // FIXME: non-capturing closures should also suggest a function pointer\n-                ty::Closure(..) | ty::Generator(..) => {\n-                    self.success = false;\n-                    ty\n-                }\n-                _ => ty.super_fold_with(self),\n-            }\n+                _ => ty,\n+            };\n+\n+            ty.super_fold_with(self)\n         }\n     }\n \n@@ -898,15 +886,11 @@ fn infer_placeholder_type<'a>(\n                     suggestions.clear();\n                 }\n \n-                // Suggesting unnameable types won't help.\n-                let mut mk_nameable = MakeNameable::new(tcx);\n-                let ty = mk_nameable.fold_ty(ty);\n-                let sugg_ty = if mk_nameable.success { Some(ty) } else { None };\n-                if let Some(sugg_ty) = sugg_ty {\n+                if let Some(ty) = ty.make_suggestable(tcx, false) {\n                     err.span_suggestion(\n                         span,\n                         &format!(\"provide a type for the {item}\", item = kind),\n-                        format!(\"{colon} {sugg_ty}\"),\n+                        format!(\"{colon} {ty}\"),\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n@@ -923,15 +907,12 @@ fn infer_placeholder_type<'a>(\n             let mut diag = bad_placeholder(tcx, vec![span], kind);\n \n             if !ty.references_error() {\n-                let mut mk_nameable = MakeNameable::new(tcx);\n-                let ty = mk_nameable.fold_ty(ty);\n-                let sugg_ty = if mk_nameable.success { Some(ty) } else { None };\n-                if let Some(sugg_ty) = sugg_ty {\n+                if let Some(ty) = ty.make_suggestable(tcx, false) {\n                     diag.span_suggestion(\n                         span,\n                         \"replace with the correct type\",\n-                        sugg_ty,\n-                        Applicability::MaybeIncorrect,\n+                        ty,\n+                        Applicability::MachineApplicable,\n                     );\n                 } else {\n                     with_forced_trimmed_paths!(diag.span_note("}, {"sha": "11d47053ade798276348c8517953493e27d18cc6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -687,7 +687,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return true;\n             }\n             &hir::FnRetTy::DefaultReturn(span) if expected.is_unit() => {\n-                if found.is_suggestable(self.tcx, false) {\n+                if let Some(found) = found.make_suggestable(self.tcx, false) {\n                     err.subdiagnostic(AddReturnTypeSuggestion::Add { span, found: found.to_string() });\n                     return true;\n                 } else if let ty::Closure(_, substs) = found.kind()"}, {"sha": "ba72aefe39c169f7472b3860dca791fe644b5e5d", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -490,9 +490,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                             if let Some(output_def_id) = output_def_id\n                                                 && let Some(trait_def_id) = trait_def_id\n                                                 && self.tcx.parent(output_def_id) == trait_def_id\n-                                                && output_ty.is_suggestable(self.tcx, false)\n+                                                && let Some(output_ty) = output_ty.make_suggestable(self.tcx, false)\n                                             {\n-                                                Some((\"Output\", *output_ty))\n+                                                Some((\"Output\", output_ty))\n                                             } else {\n                                                 None\n                                             }"}, {"sha": "44d6c587da3dfce7a336daa6ce1a9828c0d03fff", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -33,6 +33,7 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n use proc_macro::bridge::client::ProcMacro;\n use std::ops::Fn;\n use std::path::Path;\n+use std::time::Duration;\n use std::{cmp, env};\n \n #[derive(Clone)]\n@@ -689,8 +690,7 @@ impl<'a> CrateLoader<'a> {\n     ) -> Result<&'static [ProcMacro], CrateError> {\n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(path);\n-        let lib = unsafe { libloading::Library::new(path) }\n-            .map_err(|err| CrateError::DlOpen(err.to_string()))?;\n+        let lib = load_dylib(&path, 5).map_err(|err| CrateError::DlOpen(err))?;\n \n         let sym_name = self.sess.generate_proc_macro_decls_symbol(stable_crate_id);\n         let sym = unsafe { lib.get::<*const &[ProcMacro]>(sym_name.as_bytes()) }\n@@ -1093,3 +1093,41 @@ fn alloc_error_handler_spans(sess: &Session, krate: &ast::Crate) -> Vec<Span> {\n     visit::walk_crate(&mut f, krate);\n     f.spans\n }\n+\n+// On Windows the compiler would sometimes intermittently fail to open the\n+// proc-macro DLL with `Error::LoadLibraryExW`. It is suspected that something in the\n+// system still holds a lock on the file, so we retry a few times before calling it\n+// an error.\n+fn load_dylib(path: &Path, max_attempts: usize) -> Result<libloading::Library, String> {\n+    assert!(max_attempts > 0);\n+\n+    let mut last_error = None;\n+\n+    for attempt in 0..max_attempts {\n+        match unsafe { libloading::Library::new(&path) } {\n+            Ok(lib) => {\n+                if attempt > 0 {\n+                    debug!(\n+                        \"Loaded proc-macro `{}` after {} attempts.\",\n+                        path.display(),\n+                        attempt + 1\n+                    );\n+                }\n+                return Ok(lib);\n+            }\n+            Err(err) => {\n+                // Only try to recover from this specific error.\n+                if !matches!(err, libloading::Error::LoadLibraryExW { .. }) {\n+                    return Err(err.to_string());\n+                }\n+\n+                last_error = Some(err);\n+                std::thread::sleep(Duration::from_millis(100));\n+                debug!(\"Failed to load proc-macro `{}`. Retrying.\", path.display());\n+            }\n+        }\n+    }\n+\n+    debug!(\"Failed to load proc-macro `{}` even after {} attempts.\", path.display(), max_attempts);\n+    Err(format!(\"{} (retried {} times)\", last_error.unwrap(), max_attempts))\n+}"}, {"sha": "2ba7ec5b151929ebd00d96a0f2d7355778f43f0a", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -112,6 +112,7 @@ macro_rules! arena_types {\n \n             [decode] trait_impl_trait_tys: rustc_data_structures::fx::FxHashMap<rustc_hir::def_id::DefId, rustc_middle::ty::Ty<'tcx>>,\n             [] bit_set_u32: rustc_index::bit_set::BitSet<u32>,\n+            [] external_constraints: rustc_middle::traits::solve::ExternalConstraintsData<'tcx>,\n         ]);\n     )\n }"}, {"sha": "75525059e90de739e50f6737626fc42877c4c853", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -5,6 +5,7 @@\n mod chalk;\n pub mod query;\n pub mod select;\n+pub mod solve;\n pub mod specialization_graph;\n mod structural_impls;\n pub mod util;"}, {"sha": "63f9c32f0a74b2ff4c5bfa8d7e4817947015e2e1", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -0,0 +1,55 @@\n+use std::ops::ControlFlow;\n+\n+use rustc_data_structures::intern::Interned;\n+\n+use crate::ty::{FallibleTypeFolder, Ty, TypeFoldable, TypeFolder, TypeVisitable, TypeVisitor};\n+\n+#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n+pub struct ExternalConstraints<'tcx>(pub(crate) Interned<'tcx, ExternalConstraintsData<'tcx>>);\n+\n+impl<'tcx> std::ops::Deref for ExternalConstraints<'tcx> {\n+    type Target = ExternalConstraintsData<'tcx>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &*self.0\n+    }\n+}\n+\n+/// Additional constraints returned on success.\n+#[derive(Debug, PartialEq, Eq, Clone, Hash, Default)]\n+pub struct ExternalConstraintsData<'tcx> {\n+    // FIXME: implement this.\n+    pub regions: (),\n+    pub opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ExternalConstraints<'tcx> {\n+    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n+        Ok(FallibleTypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n+            regions: (),\n+            opaque_types: self\n+                .opaque_types\n+                .iter()\n+                .map(|opaque| opaque.try_fold_with(folder))\n+                .collect::<Result<_, F::Error>>()?,\n+        }))\n+    }\n+\n+    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+        TypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n+            regions: (),\n+            opaque_types: self.opaque_types.iter().map(|opaque| opaque.fold_with(folder)).collect(),\n+        })\n+    }\n+}\n+\n+impl<'tcx> TypeVisitable<'tcx> for ExternalConstraints<'tcx> {\n+    fn visit_with<V: TypeVisitor<'tcx>>(\n+        &self,\n+        visitor: &mut V,\n+    ) -> std::ops::ControlFlow<V::BreakTy> {\n+        self.regions.visit_with(visitor)?;\n+        self.opaque_types.visit_with(visitor)?;\n+        ControlFlow::Continue(())\n+    }\n+}"}, {"sha": "9205a8a0ffed801859efae523f76cceaa6aa4b60", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -17,6 +17,7 @@ use crate::mir::{\n };\n use crate::thir::Thir;\n use crate::traits;\n+use crate::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, Const, ConstData, DefIdTree, FloatTy, FloatVar,\n@@ -148,6 +149,7 @@ pub struct CtxtInterners<'tcx> {\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n     layout: InternedSet<'tcx, LayoutS<VariantIdx>>,\n     adt_def: InternedSet<'tcx, AdtDefData>,\n+    external_constraints: InternedSet<'tcx, ExternalConstraintsData<'tcx>>,\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n@@ -169,6 +171,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n             bound_variable_kinds: Default::default(),\n             layout: Default::default(),\n             adt_def: Default::default(),\n+            external_constraints: Default::default(),\n         }\n     }\n \n@@ -1449,6 +1452,7 @@ direct_interners! {\n     const_allocation: intern_const_alloc(Allocation): ConstAllocation -> ConstAllocation<'tcx>,\n     layout: intern_layout(LayoutS<VariantIdx>): Layout -> Layout<'tcx>,\n     adt_def: intern_adt_def(AdtDefData): AdtDef -> AdtDef<'tcx>,\n+    external_constraints: intern_external_constraints(ExternalConstraintsData<'tcx>): ExternalConstraints -> ExternalConstraints<'tcx>,\n }\n \n macro_rules! slice_interners {"}, {"sha": "cd9b927014077190b973197824728c565181329c", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 91, "deletions": 4, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -3,8 +3,9 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    visit::TypeVisitable, AliasTy, Const, ConstKind, DefIdTree, InferConst, InferTy, Opaque,\n-    PolyTraitPredicate, Projection, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n+    visit::TypeVisitable, AliasTy, Const, ConstKind, DefIdTree, FallibleTypeFolder, InferConst,\n+    InferTy, Opaque, PolyTraitPredicate, Projection, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n+    TypeSuperVisitable, TypeVisitor,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -76,7 +77,7 @@ impl<'tcx> Ty<'tcx> {\n     }\n }\n \n-pub trait IsSuggestable<'tcx> {\n+pub trait IsSuggestable<'tcx>: Sized {\n     /// Whether this makes sense to suggest in a diagnostic.\n     ///\n     /// We filter out certain types and constants since they don't provide\n@@ -87,15 +88,21 @@ pub trait IsSuggestable<'tcx> {\n     /// Only if `infer_suggestable` is true, we consider type and const\n     /// inference variables to be suggestable.\n     fn is_suggestable(self, tcx: TyCtxt<'tcx>, infer_suggestable: bool) -> bool;\n+\n+    fn make_suggestable(self, tcx: TyCtxt<'tcx>, infer_suggestable: bool) -> Option<Self>;\n }\n \n impl<'tcx, T> IsSuggestable<'tcx> for T\n where\n-    T: TypeVisitable<'tcx>,\n+    T: TypeVisitable<'tcx> + TypeFoldable<'tcx>,\n {\n     fn is_suggestable(self, tcx: TyCtxt<'tcx>, infer_suggestable: bool) -> bool {\n         self.visit_with(&mut IsSuggestableVisitor { tcx, infer_suggestable }).is_continue()\n     }\n+\n+    fn make_suggestable(self, tcx: TyCtxt<'tcx>, infer_suggestable: bool) -> Option<T> {\n+        self.try_fold_with(&mut MakeSuggestableFolder { tcx, infer_suggestable }).ok()\n+    }\n }\n \n pub fn suggest_arbitrary_trait_bound<'tcx>(\n@@ -509,3 +516,83 @@ impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n         c.super_visit_with(self)\n     }\n }\n+\n+pub struct MakeSuggestableFolder<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    infer_suggestable: bool,\n+}\n+\n+impl<'tcx> FallibleTypeFolder<'tcx> for MakeSuggestableFolder<'tcx> {\n+    type Error = ();\n+\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n+        let t = match *t.kind() {\n+            Infer(InferTy::TyVar(_)) if self.infer_suggestable => t,\n+\n+            FnDef(def_id, substs) => {\n+                self.tcx.mk_fn_ptr(self.tcx.fn_sig(def_id).subst(self.tcx, substs))\n+            }\n+\n+            // FIXME(compiler-errors): We could replace these with infer, I guess.\n+            Closure(..)\n+            | Infer(..)\n+            | Generator(..)\n+            | GeneratorWitness(..)\n+            | Bound(_, _)\n+            | Placeholder(_)\n+            | Error(_) => {\n+                return Err(());\n+            }\n+\n+            Alias(Opaque, AliasTy { def_id, .. }) => {\n+                let parent = self.tcx.parent(def_id);\n+                if let hir::def::DefKind::TyAlias | hir::def::DefKind::AssocTy = self.tcx.def_kind(parent)\n+                    && let Alias(Opaque, AliasTy { def_id: parent_opaque_def_id, .. }) = *self.tcx.type_of(parent).kind()\n+                    && parent_opaque_def_id == def_id\n+                {\n+                    t\n+                } else {\n+                    return Err(());\n+                }\n+            }\n+\n+            Param(param) => {\n+                // FIXME: It would be nice to make this not use string manipulation,\n+                // but it's pretty hard to do this, since `ty::ParamTy` is missing\n+                // sufficient info to determine if it is synthetic, and we don't\n+                // always have a convenient way of getting `ty::Generics` at the call\n+                // sites we invoke `IsSuggestable::is_suggestable`.\n+                if param.name.as_str().starts_with(\"impl \") {\n+                    return Err(());\n+                }\n+\n+                t\n+            }\n+\n+            _ => t,\n+        };\n+\n+        t.try_super_fold_with(self)\n+    }\n+\n+    fn try_fold_const(&mut self, c: Const<'tcx>) -> Result<Const<'tcx>, ()> {\n+        let c = match c.kind() {\n+            ConstKind::Infer(InferConst::Var(_)) if self.infer_suggestable => c,\n+\n+            ConstKind::Infer(..)\n+            | ConstKind::Bound(..)\n+            | ConstKind::Placeholder(..)\n+            | ConstKind::Error(..) => {\n+                return Err(());\n+            }\n+\n+            _ => c,\n+        };\n+\n+        c.try_super_fold_with(self)\n+    }\n+}"}, {"sha": "8a0019bc0127c9df4ee2e224d30567bf194d4992", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -105,7 +105,7 @@ pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n /// the infallible methods of this trait to ensure that the two APIs\n /// are coherent.\n pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n+    fn tcx(&self) -> TyCtxt<'tcx>;\n \n     fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>\n     where"}, {"sha": "28347b137f37c3eb92bbbe344c7a66783b8361ef", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -2109,7 +2109,7 @@ impl<'a> Parser<'a> {\n             ClosureBinder::NotPresent\n         };\n \n-        let constness = self.parse_constness(Case::Sensitive);\n+        let constness = self.parse_closure_constness(Case::Sensitive);\n \n         let movability =\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };"}, {"sha": "0cb88f3c3a91697726fd3cde44b7774a7cea8c3d", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -732,9 +732,10 @@ impl<'a> Parser<'a> {\n     fn check_const_closure(&self) -> bool {\n         self.is_keyword_ahead(0, &[kw::Const])\n             && self.look_ahead(1, |t| match &t.kind {\n-                token::Ident(kw::Move | kw::Static | kw::Async, _)\n-                | token::OrOr\n-                | token::BinOp(token::Or) => true,\n+                // async closures do not work with const closures, so we do not parse that here.\n+                token::Ident(kw::Move | kw::Static, _) | token::OrOr | token::BinOp(token::Or) => {\n+                    true\n+                }\n                 _ => false,\n             })\n     }\n@@ -1198,8 +1199,18 @@ impl<'a> Parser<'a> {\n \n     /// Parses constness: `const` or nothing.\n     fn parse_constness(&mut self, case: Case) -> Const {\n-        // Avoid const blocks to be parsed as const items\n-        if self.look_ahead(1, |t| t != &token::OpenDelim(Delimiter::Brace))\n+        self.parse_constness_(case, false)\n+    }\n+\n+    /// Parses constness for closures\n+    fn parse_closure_constness(&mut self, case: Case) -> Const {\n+        self.parse_constness_(case, true)\n+    }\n+\n+    fn parse_constness_(&mut self, case: Case, is_closure: bool) -> Const {\n+        // Avoid const blocks and const closures to be parsed as const items\n+        if (self.check_const_closure() == is_closure)\n+            && self.look_ahead(1, |t| t != &token::OpenDelim(Delimiter::Brace))\n             && self.eat_keyword_case(kw::Const, case)\n         {\n             Const::Yes(self.prev_token.uninterpolated_span())"}, {"sha": "e4725c0a1b7326895344eeb0a31dcefe967ca4e7", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -24,7 +24,8 @@ use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::Obligation;\n use rustc_middle::infer::canonical::Certainty as OldCertainty;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::traits::solve::{ExternalConstraints, ExternalConstraintsData};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_middle::ty::{\n     CoercePredicate, RegionOutlivesPredicate, SubtypePredicate, ToPredicate, TypeOutlivesPredicate,\n };\n@@ -72,8 +73,7 @@ impl<'tcx, P> From<Obligation<'tcx, P>> for Goal<'tcx, P> {\n         Goal { param_env: obligation.param_env, predicate: obligation.predicate }\n     }\n }\n-\n-#[derive(Debug, PartialEq, Eq, Clone, Hash, TypeFoldable, TypeVisitable)]\n+#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n pub struct Response<'tcx> {\n     pub var_values: CanonicalVarValues<'tcx>,\n     /// Additional constraints returned by this query.\n@@ -121,14 +121,6 @@ pub enum MaybeCause {\n     Overflow,\n }\n \n-/// Additional constraints returned on success.\n-#[derive(Debug, PartialEq, Eq, Clone, Hash, TypeFoldable, TypeVisitable, Default)]\n-pub struct ExternalConstraints<'tcx> {\n-    // FIXME: implement this.\n-    regions: (),\n-    opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n-}\n-\n type CanonicalGoal<'tcx, T = ty::Predicate<'tcx>> = Canonical<'tcx, Goal<'tcx, T>>;\n type CanonicalResponse<'tcx> = Canonical<'tcx, Response<'tcx>>;\n /// The result of evaluating a canonical query.\n@@ -218,15 +210,14 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 EvalCtxt { infcx, var_values, search_graph, in_projection_eq_hack: false };\n             let result = ecx.compute_goal(goal);\n \n-            // FIXME: `Response` should be `Copy`\n-            if search_graph.try_finalize_goal(tcx, canonical_goal, result.clone()) {\n+            if search_graph.try_finalize_goal(tcx, canonical_goal, result) {\n                 return result;\n             }\n         }\n     }\n \n     fn make_canonical_response(&self, certainty: Certainty) -> QueryResult<'tcx> {\n-        let external_constraints = take_external_constraints(self.infcx)?;\n+        let external_constraints = compute_external_query_constraints(self.infcx)?;\n \n         Ok(self.infcx.canonicalize_response(Response {\n             var_values: self.var_values,\n@@ -461,18 +452,18 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n }\n \n #[instrument(level = \"debug\", skip(infcx), ret)]\n-fn take_external_constraints<'tcx>(\n+fn compute_external_query_constraints<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n ) -> Result<ExternalConstraints<'tcx>, NoSolution> {\n     let region_obligations = infcx.take_registered_region_obligations();\n     let opaque_types = infcx.take_opaque_types_for_query_response();\n-    Ok(ExternalConstraints {\n+    Ok(infcx.tcx.intern_external_constraints(ExternalConstraintsData {\n         // FIXME: Now that's definitely wrong :)\n         //\n         // Should also do the leak check here I think\n         regions: drop(region_obligations),\n         opaque_types,\n-    })\n+    }))\n }\n \n fn instantiate_canonical_query_response<'tcx>(\n@@ -492,7 +483,10 @@ fn instantiate_canonical_query_response<'tcx>(\n                     Certainty::Yes => OldCertainty::Proven,\n                     Certainty::Maybe(_) => OldCertainty::Ambiguous,\n                 },\n-                opaque_types: resp.external_constraints.opaque_types,\n+                // FIXME: This to_owned makes me sad, but we should eventually impl\n+                // `instantiate_query_response_and_region_obligations` separately\n+                // instead of piggybacking off of the old implementation.\n+                opaque_types: resp.external_constraints.opaque_types.to_owned(),\n                 value: resp.certainty,\n             }),\n         ) else { bug!(); };\n@@ -510,7 +504,10 @@ pub(super) fn response_no_constraints<'tcx>(\n         variables: goal.variables,\n         value: Response {\n             var_values: CanonicalVarValues::make_identity(tcx, goal.variables),\n-            external_constraints: Default::default(),\n+            // FIXME: maybe we should store the \"no response\" version in tcx, like\n+            // we do for tcx.types and stuff.\n+            external_constraints: tcx\n+                .intern_external_constraints(ExternalConstraintsData::default()),\n             certainty,\n         },\n     })"}, {"sha": "86b13c05f76aa16a7706601514b6dd1ea5327ce9", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/cache.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -95,8 +95,7 @@ impl<'tcx> ProvisionalCache<'tcx> {\n     }\n \n     pub(super) fn provisional_result(&self, entry_index: EntryIndex) -> QueryResult<'tcx> {\n-        // FIXME: Responses should probably be `Copy` as well\n-        self.entries[entry_index].response.clone()\n+        self.entries[entry_index].response\n     }\n }\n "}, {"sha": "f290e5baf9dd3c21ccdd9c4f979daea388d8e459", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -22,7 +22,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::const_closure::ConstFnMutClosure;\n use crate::marker::Destruct;\n \n use self::Ordering::*;\n@@ -1291,17 +1290,7 @@ where\n     F: ~const Destruct,\n     K: ~const Destruct,\n {\n-    const fn imp<T, F: ~const FnMut(&T) -> K, K: ~const Ord>(\n-        f: &mut F,\n-        (v1, v2): (&T, &T),\n-    ) -> Ordering\n-    where\n-        T: ~const Destruct,\n-        K: ~const Destruct,\n-    {\n-        f(v1).cmp(&f(v2))\n-    }\n-    max_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n+    max_by(v1, v2, const |v1, v2| f(v1).cmp(&f(v2)))\n }\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types"}, {"sha": "97900a4862f5653fc49c537fdc95c3690d71d9a0", "filename": "library/core/src/const_closure.rs", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/658fad6c5506f41c35b64fb1a22ceb0992697ff3/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/658fad6c5506f41c35b64fb1a22ceb0992697ff3/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=658fad6c5506f41c35b64fb1a22ceb0992697ff3", "patch": "@@ -1,78 +0,0 @@\n-use crate::marker::Destruct;\n-use crate::marker::Tuple;\n-\n-/// Struct representing a closure with mutably borrowed data.\n-///\n-/// Example:\n-/// ```no_build\n-/// #![feature(const_mut_refs)]\n-/// use crate::const_closure::ConstFnMutClosure;\n-/// const fn imp(state: &mut i32, (arg,): (i32,)) -> i32 {\n-///   *state += arg;\n-///   *state\n-/// }\n-/// let mut i = 5;\n-/// let mut cl = ConstFnMutClosure::new(&mut i, imp);\n-///\n-/// assert!(7 == cl(2));\n-/// assert!(8 == cl(1));\n-/// ```\n-pub(crate) struct ConstFnMutClosure<CapturedData, Function> {\n-    /// The Data captured by the Closure.\n-    /// Must be either a (mutable) reference or a tuple of (mutable) references.\n-    pub data: CapturedData,\n-    /// The Function of the Closure, must be: Fn(CapturedData, ClosureArgs) -> ClosureReturn\n-    pub func: Function,\n-}\n-impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<&'a mut CapturedData, Function> {\n-    /// Function for creating a new closure.\n-    ///\n-    /// `data` is the a mutable borrow of data that is captured from the environment.\n-    /// If you want Data to be a tuple of mutable Borrows, the struct must be constructed manually.\n-    ///\n-    /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n-    ///   and return the return value of the closure.\n-    pub(crate) const fn new<ClosureArguments, ClosureReturnValue>(\n-        data: &'a mut CapturedData,\n-        func: Function,\n-    ) -> Self\n-    where\n-        Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n-    {\n-        Self { data, func }\n-    }\n-}\n-\n-macro_rules! impl_fn_mut_tuple {\n-    ($($var:ident)*) => {\n-        #[allow(unused_parens)]\n-        impl<'a, $($var,)* ClosureArguments: Tuple, Function, ClosureReturnValue> const\n-            FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n-        where\n-            Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue+ ~const Destruct,\n-        {\n-            type Output = ClosureReturnValue;\n-\n-            extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n-            self.call_mut(args)\n-            }\n-        }\n-        #[allow(unused_parens)]\n-        impl<'a, $($var,)* ClosureArguments: Tuple, Function, ClosureReturnValue> const\n-            FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n-        where\n-            Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue,\n-        {\n-            extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n-                #[allow(non_snake_case)]\n-                let ($($var),*) = &mut self.data;\n-                (self.func)(($($var),*), args)\n-            }\n-        }\n-    };\n-}\n-impl_fn_mut_tuple!(A);\n-impl_fn_mut_tuple!(A B);\n-impl_fn_mut_tuple!(A B C);\n-impl_fn_mut_tuple!(A B C D);\n-impl_fn_mut_tuple!(A B C D E);"}, {"sha": "af786609757b1325d85c166a3a382929bba74634", "filename": "library/core/src/iter/adapters/array_chunks.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Farray_chunks.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -1,5 +1,4 @@\n use crate::array;\n-use crate::const_closure::ConstFnMutClosure;\n use crate::iter::{ByRefSized, FusedIterator, Iterator, TrustedRandomAccessNoCoerce};\n use crate::mem::{self, MaybeUninit};\n use crate::ops::{ControlFlow, NeverShortCircuit, Try};\n@@ -189,13 +188,12 @@ where\n     I: Iterator,\n {\n     #[inline]\n-    default fn fold<B, F>(mut self, init: B, mut f: F) -> B\n+    default fn fold<B, F>(mut self, init: B, f: F) -> B\n     where\n         Self: Sized,\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        let fold = ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp);\n-        self.try_fold(init, fold).0\n+        self.try_fold(init, NeverShortCircuit::wrap_mut_2(f)).0\n     }\n }\n "}, {"sha": "477e7117c3ea125973252685d8bded87ab93686f", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -1,7 +1,4 @@\n-use crate::{\n-    const_closure::ConstFnMutClosure,\n-    ops::{NeverShortCircuit, Try},\n-};\n+use crate::ops::{NeverShortCircuit, Try};\n \n /// Like `Iterator::by_ref`, but requiring `Sized` so it can forward generics.\n ///\n@@ -39,13 +36,12 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn fold<B, F>(self, init: B, mut f: F) -> B\n+    fn fold<B, F>(self, init: B, f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n         // `fold` needs ownership, so this can't forward directly.\n-        I::try_fold(self.0, init, ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp))\n-            .0\n+        I::try_fold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n     }\n \n     #[inline]\n@@ -76,17 +72,12 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n     }\n \n     #[inline]\n-    fn rfold<B, F>(self, init: B, mut f: F) -> B\n+    fn rfold<B, F>(self, init: B, f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n         // `rfold` needs ownership, so this can't forward directly.\n-        I::try_rfold(\n-            self.0,\n-            init,\n-            ConstFnMutClosure::new(&mut f, NeverShortCircuit::wrap_mut_2_imp),\n-        )\n-        .0\n+        I::try_rfold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n     }\n \n     #[inline]"}, {"sha": "00f57fbcc6162abd5e591edc85766a7711153225", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -362,15 +362,13 @@ macro_rules! impl_fold_via_try_fold {\n     };\n     (@internal $fold:ident -> $try_fold:ident) => {\n         #[inline]\n-        fn $fold<AAA, FFF>(mut self, init: AAA, mut fold: FFF) -> AAA\n+        fn $fold<AAA, FFF>(mut self, init: AAA, fold: FFF) -> AAA\n         where\n             FFF: FnMut(AAA, Self::Item) -> AAA,\n         {\n-            use crate::const_closure::ConstFnMutClosure;\n             use crate::ops::NeverShortCircuit;\n \n-            let fold = ConstFnMutClosure::new(&mut fold, NeverShortCircuit::wrap_mut_2_imp);\n-            self.$try_fold(init, fold).0\n+            self.$try_fold(init, NeverShortCircuit::wrap_mut_2(fold)).0\n         }\n     };\n }"}, {"sha": "dc0702c467a4ea1d3c69d2ce21504c114a91fc13", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -376,8 +376,6 @@ mod bool;\n mod tuple;\n mod unit;\n \n-mod const_closure;\n-\n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]\n pub mod primitive;\n "}, {"sha": "9108fc63045250d5369d2d63d4fc6581cc18ad9e", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -379,13 +379,18 @@ pub(crate) type ChangeOutputType<T, V> = <<T as Try>::Residual as Residual<V>>::\n pub(crate) struct NeverShortCircuit<T>(pub T);\n \n impl<T> NeverShortCircuit<T> {\n-    /// Implementation for building `ConstFnMutClosure` for wrapping the output of a ~const FnMut in a `NeverShortCircuit`.\n     #[inline]\n-    pub const fn wrap_mut_2_imp<A, B, F: ~const FnMut(A, B) -> T>(\n-        f: &mut F,\n-        (a, b): (A, B),\n-    ) -> NeverShortCircuit<T> {\n-        NeverShortCircuit(f(a, b))\n+    pub fn wrap_mut_2<A, B>(\n+        mut f: impl ~const FnMut(A, B) -> T,\n+    ) -> impl ~const FnMut(A, B) -> Self {\n+        cfg_if! {\n+            if #[cfg(bootstrap)] {\n+                #[allow(unused_parens)]\n+                (const move |a, b| NeverShortCircuit(f(a, b)))\n+            } else {\n+                const move |a, b| NeverShortCircuit(f(a, b))\n+            }\n+        }\n     }\n }\n "}, {"sha": "5d5e95590344ad44672d7c57295cb052f2b32d1f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -943,7 +943,7 @@ impl<T> Option<T> {\n     // Transforming contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.\n+    /// Maps an `Option<T>` to `Option<U>` by applying a function to a contained value (if `Some`) or returns `None` (if `None`).\n     ///\n     /// # Examples\n     ///\n@@ -955,8 +955,10 @@ impl<T> Option<T> {\n     /// let maybe_some_string = Some(String::from(\"Hello, World!\"));\n     /// // `Option::map` takes self *by value*, consuming `maybe_some_string`\n     /// let maybe_some_len = maybe_some_string.map(|s| s.len());\n-    ///\n     /// assert_eq!(maybe_some_len, Some(13));\n+    ///\n+    /// let x: Option<&str> = None;\n+    /// assert_eq!(x.map(|s| s.len()), None);\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "324d698eaeb1d129a772f7bb31db616aee342b62", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -88,12 +88,23 @@ impl From<alloc::ffi::NulError> for Error {\n // doesn't accidentally get printed.\n #[cfg_attr(test, derive(Debug))]\n enum ErrorData<C> {\n-    Os(i32),\n+    Os(RawOsError),\n     Simple(ErrorKind),\n     SimpleMessage(&'static SimpleMessage),\n     Custom(C),\n }\n \n+/// The type of raw OS error codes returned by [`Error::raw_os_error`].\n+///\n+/// This is an [`i32`] on all currently supported platforms, but platforms\n+/// added in the future (such as UEFI) may use a different primitive type like\n+/// [`usize`]. Use `as`or [`into`] conversions where applicable to ensure maximum\n+/// portability.\n+///\n+/// [`into`]: Into::into\n+#[unstable(feature = \"raw_os_error_ty\", issue = \"none\")]\n+pub type RawOsError = i32;\n+\n // `#[repr(align(4))]` is probably redundant, it should have that value or\n // higher already. We include it just because repr_bitpacked.rs's encoding\n // requires an alignment >= 4 (note that `#[repr(align)]` will not reduce the\n@@ -579,7 +590,7 @@ impl Error {\n     #[must_use]\n     #[inline]\n     pub fn last_os_error() -> Error {\n-        Error::from_raw_os_error(sys::os::errno() as i32)\n+        Error::from_raw_os_error(sys::os::errno())\n     }\n \n     /// Creates a new instance of an [`Error`] from a particular OS error code.\n@@ -610,7 +621,7 @@ impl Error {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n     #[inline]\n-    pub fn from_raw_os_error(code: i32) -> Error {\n+    pub fn from_raw_os_error(code: RawOsError) -> Error {\n         Error { repr: Repr::new_os(code) }\n     }\n \n@@ -646,7 +657,7 @@ impl Error {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]\n     #[inline]\n-    pub fn raw_os_error(&self) -> Option<i32> {\n+    pub fn raw_os_error(&self) -> Option<RawOsError> {\n         match self.repr.data() {\n             ErrorData::Os(i) => Some(i),\n             ErrorData::Custom(..) => None,"}, {"sha": "f94f88bac417ef1d1c9086263bda11a6ba5ce382", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -102,7 +102,7 @@\n //! to use a pointer type to store something that may hold an integer, some of\n //! the time.\n \n-use super::{Custom, ErrorData, ErrorKind, SimpleMessage};\n+use super::{Custom, ErrorData, ErrorKind, RawOsError, SimpleMessage};\n use alloc::boxed::Box;\n use core::marker::PhantomData;\n use core::mem::{align_of, size_of};\n@@ -172,7 +172,7 @@ impl Repr {\n     }\n \n     #[inline]\n-    pub(super) fn new_os(code: i32) -> Self {\n+    pub(super) fn new_os(code: RawOsError) -> Self {\n         let utagged = ((code as usize) << 32) | TAG_OS;\n         // Safety: `TAG_OS` is not zero, so the result of the `|` is not 0.\n         let res = Self(unsafe { NonNull::new_unchecked(ptr::invalid_mut(utagged)) }, PhantomData);\n@@ -250,7 +250,7 @@ where\n     let bits = ptr.as_ptr().addr();\n     match bits & TAG_MASK {\n         TAG_OS => {\n-            let code = ((bits as i64) >> 32) as i32;\n+            let code = ((bits as i64) >> 32) as RawOsError;\n             ErrorData::Os(code)\n         }\n         TAG_SIMPLE => {\n@@ -374,6 +374,9 @@ static_assert!((TAG_MASK + 1).is_power_of_two());\n static_assert!(align_of::<SimpleMessage>() >= TAG_MASK + 1);\n static_assert!(align_of::<Custom>() >= TAG_MASK + 1);\n \n+// `RawOsError` must be an alias for `i32`.\n+const _: fn(RawOsError) -> i32 = |os| os;\n+\n static_assert!(@usize_eq: TAG_MASK & TAG_SIMPLE_MESSAGE, TAG_SIMPLE_MESSAGE);\n static_assert!(@usize_eq: TAG_MASK & TAG_CUSTOM, TAG_CUSTOM);\n static_assert!(@usize_eq: TAG_MASK & TAG_OS, TAG_OS);"}, {"sha": "093fde33757eb6e8cfe694b7ef36b07004319a38", "filename": "library/std/src/io/error/repr_unpacked.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_unpacked.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -2,7 +2,7 @@\n //! non-64bit targets, where the packed 64 bit representation wouldn't work, and\n //! would have no benefit.\n \n-use super::{Custom, ErrorData, ErrorKind, SimpleMessage};\n+use super::{Custom, ErrorData, ErrorKind, RawOsError, SimpleMessage};\n use alloc::boxed::Box;\n \n type Inner = ErrorData<Box<Custom>>;\n@@ -18,7 +18,7 @@ impl Repr {\n         Self(Inner::Custom(b))\n     }\n     #[inline]\n-    pub(super) fn new_os(code: i32) -> Self {\n+    pub(super) fn new_os(code: RawOsError) -> Self {\n         Self(Inner::Os(code))\n     }\n     #[inline]"}, {"sha": "36d52aef03cb7b211f382af9136817c0b2f667b9", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -71,7 +71,7 @@ fn test_const() {\n \n #[test]\n fn test_os_packing() {\n-    for code in -20i32..20i32 {\n+    for code in -20..20 {\n         let e = Error::from_raw_os_error(code);\n         assert_eq!(e.raw_os_error(), Some(code));\n         assert_matches!("}, {"sha": "5907ba5d5fbf3ab8dd8495cd2619aa25f5b7de09", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -262,6 +262,8 @@ use crate::sys_common::memchr;\n \n #[stable(feature = \"bufwriter_into_parts\", since = \"1.56.0\")]\n pub use self::buffered::WriterPanicked;\n+#[unstable(feature = \"raw_os_error_ty\", issue = \"none\")]\n+pub use self::error::RawOsError;\n pub(crate) use self::stdio::attempt_print_to_stderr;\n #[unstable(feature = \"internal_output_capture\", issue = \"none\")]\n #[doc(no_inline, hidden)]"}, {"sha": "74cdf9b9b798550c8373ba40e3b0d49ec88e4568", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -208,15 +208,15 @@ impl clean::GenericParamDef {\n                     if f.alternate() {\n                         write!(f, \": {:#}\", print_generic_bounds(bounds, cx))?;\n                     } else {\n-                        write!(f, \":&nbsp;{}\", print_generic_bounds(bounds, cx))?;\n+                        write!(f, \": {}\", print_generic_bounds(bounds, cx))?;\n                     }\n                 }\n \n                 if let Some(ref ty) = default {\n                     if f.alternate() {\n                         write!(f, \" = {:#}\", ty.print(cx))?;\n                     } else {\n-                        write!(f, \"&nbsp;=&nbsp;{}\", ty.print(cx))?;\n+                        write!(f, \" = {}\", ty.print(cx))?;\n                     }\n                 }\n \n@@ -226,14 +226,14 @@ impl clean::GenericParamDef {\n                 if f.alternate() {\n                     write!(f, \"const {}: {:#}\", self.name, ty.print(cx))?;\n                 } else {\n-                    write!(f, \"const {}:&nbsp;{}\", self.name, ty.print(cx))?;\n+                    write!(f, \"const {}: {}\", self.name, ty.print(cx))?;\n                 }\n \n                 if let Some(default) = default {\n                     if f.alternate() {\n                         write!(f, \" = {:#}\", default)?;\n                     } else {\n-                        write!(f, \"&nbsp;=&nbsp;{}\", default)?;\n+                        write!(f, \" = {}\", default)?;\n                     }\n                 }\n \n@@ -354,12 +354,12 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n             let mut br_with_padding = String::with_capacity(6 * indent + 28);\n             br_with_padding.push_str(\"<br>\");\n             for _ in 0..indent + 4 {\n-                br_with_padding.push_str(\"&nbsp;\");\n+                br_with_padding.push_str(\" \");\n             }\n             let where_preds = where_preds.to_string().replace(\"<br>\", &br_with_padding);\n \n             if ending == Ending::Newline {\n-                let mut clause = \"&nbsp;\".repeat(indent.saturating_sub(1));\n+                let mut clause = \" \".repeat(indent.saturating_sub(1));\n                 write!(clause, \"<span class=\\\"where fmt-newline\\\">where{where_preds},</span>\")?;\n                 clause\n             } else {\n@@ -368,7 +368,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n                     format!(\"<br><span class=\\\"where\\\">where{where_preds}</span>\")\n                 } else {\n                     let mut clause = br_with_padding;\n-                    clause.truncate(clause.len() - 4 * \"&nbsp;\".len());\n+                    clause.truncate(clause.len() - 4);\n                     write!(clause, \"<span class=\\\"where\\\">where{where_preds}</span>\")?;\n                     clause\n                 }\n@@ -1391,8 +1391,8 @@ impl clean::FnDecl {\n \n         let declaration_len = header_len + args_plain.len() + arrow_plain.len();\n         let output = if declaration_len > 80 {\n-            let full_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent + 4));\n-            let close_pad = format!(\"<br>{}\", \"&nbsp;\".repeat(indent));\n+            let full_pad = format!(\"<br>{}\", \" \".repeat(indent + 4));\n+            let close_pad = format!(\"<br>{}\", \" \".repeat(indent));\n             format!(\n                 \"({pad}{args}{close}){arrow}\",\n                 pad = if self.inputs.values.is_empty() { \"\" } else { &full_pad },\n@@ -1611,7 +1611,7 @@ impl clean::TypeBinding {\n                         if f.alternate() {\n                             write!(f, \": {:#}\", print_generic_bounds(bounds, cx))?;\n                         } else {\n-                            write!(f, \":&nbsp;{}\", print_generic_bounds(bounds, cx))?;\n+                            write!(f, \": {}\", print_generic_bounds(bounds, cx))?;\n                         }\n                     }\n                 }"}, {"sha": "9a7a08ab80684b2d68b3b6e0a3b3da610b0dffb0", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -1157,7 +1157,7 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n fn print_tuple_struct_fields(w: &mut Buffer, cx: &Context<'_>, s: &[clean::Item]) {\n     for (i, ty) in s.iter().enumerate() {\n         if i > 0 {\n-            w.write_str(\",&nbsp;\");\n+            w.write_str(\", \");\n         }\n         match *ty.kind {\n             clean::StrippedItem(box clean::StructFieldItem(_)) => w.write_str(\"_\"),\n@@ -1297,7 +1297,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                                 \"<div class=\\\"sub-variant-field\\\">\\\n                                  <span id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n                                      <a href=\\\"#{id}\\\" class=\\\"anchor field\\\">\u00a7</a>\\\n-                                     <code>{f}:&nbsp;{t}</code>\\\n+                                     <code>{f}: {t}</code>\\\n                                  </span>\",\n                                 id = id,\n                                 f = field.name.unwrap(),"}, {"sha": "a1e91118303c23ee77ef77f61f183de22226d5e1", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -184,6 +184,7 @@ h4.code-header {\n \tfont-weight: 600;\n \tmargin: 0;\n \tpadding: 0;\n+\twhite-space: pre-wrap;\n }\n \n #crate-search,\n@@ -642,6 +643,7 @@ pre, .rustdoc.source .example-wrap {\n .fn .where,\n .where.fmt-newline {\n \tdisplay: block;\n+\twhite-space: pre-wrap;\n \tfont-size: 0.875rem;\n }\n "}, {"sha": "e8f4f6000457dcaee93238ded6d67463ecf74304", "filename": "tests/rustdoc/doc-notable_trait.some-struct-new.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Frustdoc%2Fdoc-notable_trait.some-struct-new.html", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Frustdoc%2Fdoc-notable_trait.some-struct-new.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdoc-notable_trait.some-struct-new.html?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -1 +1 @@\n-<script type=\"text/json\" id=\"notable-traits-data\">{\"SomeStruct\":\"&lt;h3&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.SomeStruct.html\\\" title=\\\"struct doc_notable_trait::SomeStruct\\\"&gt;SomeStruct&lt;/a&gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.SomeStruct.html\\\" title=\\\"struct doc_notable_trait::SomeStruct\\\"&gt;SomeStruct&lt;/a&gt;&lt;/span&gt;\",\"Wrapper&lt;Self&gt;\":\"&lt;h3&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl&amp;lt;T:&amp;nbsp;&lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt;&amp;gt; &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/span&gt;\"}</script>\n\\ No newline at end of file\n+<script type=\"text/json\" id=\"notable-traits-data\">{\"SomeStruct\":\"&lt;h3&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.SomeStruct.html\\\" title=\\\"struct doc_notable_trait::SomeStruct\\\"&gt;SomeStruct&lt;/a&gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.SomeStruct.html\\\" title=\\\"struct doc_notable_trait::SomeStruct\\\"&gt;SomeStruct&lt;/a&gt;&lt;/span&gt;\",\"Wrapper&lt;Self&gt;\":\"&lt;h3&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl&amp;lt;T: &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt;&amp;gt; &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/span&gt;\"}</script>\n\\ No newline at end of file"}, {"sha": "e7909669b150a2720e172d0079f428f88ff9199f", "filename": "tests/rustdoc/doc-notable_trait.wrap-me.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Frustdoc%2Fdoc-notable_trait.wrap-me.html", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Frustdoc%2Fdoc-notable_trait.wrap-me.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdoc-notable_trait.wrap-me.html?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -1 +1 @@\n-<script type=\"text/json\" id=\"notable-traits-data\">{\"Wrapper&lt;Self&gt;\":\"&lt;h3&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl&amp;lt;T:&amp;nbsp;&lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt;&amp;gt; &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/span&gt;\"}</script>\n\\ No newline at end of file\n+<script type=\"text/json\" id=\"notable-traits-data\">{\"Wrapper&lt;Self&gt;\":\"&lt;h3&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl&amp;lt;T: &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt;&amp;gt; &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/span&gt;\"}</script>\n\\ No newline at end of file"}, {"sha": "065ce757de1abadba4e9a9187a9cfdfee33b61de", "filename": "tests/rustdoc/whitespace-after-where-clause.enum2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -1,4 +1,4 @@\n-<pre class=\"rust item-decl\"><code>pub enum Cow2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<pre class=\"rust item-decl\"><code>pub enum Cow2&lt;'a, B: ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "c647e8d71218edd764f2f2b7af317431777a14b2", "filename": "tests/rustdoc/whitespace-after-where-clause.struct2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -1,4 +1,4 @@\n-<pre class=\"rust item-decl\"><code>pub struct Struct2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<pre class=\"rust item-decl\"><code>pub struct Struct2&lt;'a, B: ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a B</a>,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "66ad30c92001f520aee5d7a561f24e008c4b5988", "filename": "tests/rustdoc/whitespace-after-where-clause.union2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -1,3 +1,3 @@\n-<pre class=\"rust item-decl\"><code>pub union Union2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<pre class=\"rust item-decl\"><code>pub union Union2&lt;'a, B: ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     /* private fields */\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "10af39b70074882ef906f592ac57975f4df7beba", "filename": "tests/ui/parser/recover-quantified-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-quantified-closure.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -7,6 +7,6 @@ fn main() {\n enum Foo { Bar }\n fn foo(x: impl Iterator<Item = Foo>) {\n     for <Foo>::Bar in x {}\n-    //~^ ERROR expected one of `const`, `move`, `static`, `|`\n+    //~^ ERROR expected one of `move`, `static`, `|`\n     //~^^ ERROR `for<...>` binders for closures are experimental\n }"}, {"sha": "39eec80f658ad9344ab64a8091c32381806b2b81", "filename": "tests/ui/parser/recover-quantified-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-quantified-closure.stderr?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `const`, `move`, `static`, `|`, or `||`, found `::`\n+error: expected one of `move`, `static`, `|`, or `||`, found `::`\n   --> $DIR/recover-quantified-closure.rs:9:14\n    |\n LL |     for <Foo>::Bar in x {}\n-   |              ^^ expected one of `const`, `move`, `static`, `|`, or `||`\n+   |              ^^ expected one of `move`, `static`, `|`, or `||`\n \n error[E0658]: `for<...>` binders for closures are experimental\n   --> $DIR/recover-quantified-closure.rs:2:5"}, {"sha": "2c99d8bf1c6776899f51bec5ee735810fbafceb6", "filename": "tests/ui/rfc-2632-const-trait-impl/const-closure-parse-not-item.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-parse-not-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-parse-not-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closure-parse-not-item.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(const_trait_impl, const_closures)]\n+#![allow(incomplete_features)]\n+\n+const fn test() -> impl ~const Fn() {\n+    const move || {}\n+}\n+\n+fn main() {}"}, {"sha": "abb9ef9177432ad3954b2b1620ff34abfa4d281e", "filename": "tests/ui/suggestions/suggest-fn-ptr-for-fn-item-in-fn-ret.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Fsuggestions%2Fsuggest-fn-ptr-for-fn-item-in-fn-ret.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Fsuggestions%2Fsuggest-fn-ptr-for-fn-item-in-fn-ret.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-fn-ptr-for-fn-item-in-fn-ret.fixed?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+struct Wrapper<T>(T);\n+\n+fn bar() -> Wrapper<fn()> { Wrapper(foo) }\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+\n+fn foo() {}\n+\n+fn main() {}"}, {"sha": "d2a79c3869418369482c59790875c4b84e0a68c1", "filename": "tests/ui/suggestions/suggest-fn-ptr-for-fn-item-in-fn-ret.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Fsuggestions%2Fsuggest-fn-ptr-for-fn-item-in-fn-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Fsuggestions%2Fsuggest-fn-ptr-for-fn-item-in-fn-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-fn-ptr-for-fn-item-in-fn-ret.rs?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+struct Wrapper<T>(T);\n+\n+fn bar() -> _ { Wrapper(foo) }\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+\n+fn foo() {}\n+\n+fn main() {}"}, {"sha": "347a038525b60bf281ddd473605c9c421436f09e", "filename": "tests/ui/suggestions/suggest-fn-ptr-for-fn-item-in-fn-ret.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Fsuggestions%2Fsuggest-fn-ptr-for-fn-item-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/tests%2Fui%2Fsuggestions%2Fsuggest-fn-ptr-for-fn-item-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-fn-ptr-for-fn-item-in-fn-ret.stderr?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -0,0 +1,12 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-fn-ptr-for-fn-item-in-fn-ret.rs:7:13\n+   |\n+LL | fn bar() -> _ { Wrapper(foo) }\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace with the correct return type: `Wrapper<fn()>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "d54d80c5adb5f14ba72dd8bf70bf549bf90997f1", "filename": "triagebot.toml", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/886b2c3e005b153b3c8263f48193e0df7de0f5b3/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/886b2c3e005b153b3c8263f48193e0df7de0f5b3/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=886b2c3e005b153b3c8263f48193e0df7de0f5b3", "patch": "@@ -250,7 +250,8 @@ new_pr = true\n \n [autolabel.\"WG-trait-system-refactor\"]\n trigger_files = [\n-    \"compiler/rustc_trait_selection/src/solve\"\n+    \"compiler/rustc_trait_selection/src/solve\",\n+    \"compiler/rustc_middle/src/traits/solve.rs\"\n ]\n \n [notify-zulip.\"I-prioritize\"]\n@@ -459,6 +460,14 @@ These commits modify **compiler targets**.\n [mentions.\"src/doc/style-guide\"]\n cc = [\"@rust-lang/style\"]\n \n+[mentions.\"Cargo.lock\"]\n+message = \"\"\"\n+These commits modify the `Cargo.lock` file. Random changes to `Cargo.lock` can be introduced when switching branches and rebasing PRs. \n+This was probably unintentional and should be reverted before this PR is merged. \n+\n+If this was intentional then you can ignore this comment.\n+\"\"\"\n+\n [assign]\n warn_non_default_branch = true\n contributing_url = \"https://rustc-dev-guide.rust-lang.org/contributing.html\""}]}