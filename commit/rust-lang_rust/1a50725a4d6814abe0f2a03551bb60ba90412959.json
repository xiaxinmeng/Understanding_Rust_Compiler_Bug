{"sha": "1a50725a4d6814abe0f2a03551bb60ba90412959", "node_id": "C_kwDOAAsO6NoAKDFhNTA3MjVhNGQ2ODE0YWJlMGYyYTAzNTUxYmI2MGJhOTA0MTI5NTk", "commit": {"author": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-06-19T00:24:22Z"}, "committer": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-11-16T04:31:56Z"}, "message": "refactor is_param_bound", "tree": {"sha": "008e6329f2b8ffd43640810b967634bb9797a68b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/008e6329f2b8ffd43640810b967634bb9797a68b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a50725a4d6814abe0f2a03551bb60ba90412959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a50725a4d6814abe0f2a03551bb60ba90412959", "html_url": "https://github.com/rust-lang/rust/commit/1a50725a4d6814abe0f2a03551bb60ba90412959", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a50725a4d6814abe0f2a03551bb60ba90412959/comments", "author": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9fcbda389adfffd72405905de67be1aa444820f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9fcbda389adfffd72405905de67be1aa444820f", "html_url": "https://github.com/rust-lang/rust/commit/c9fcbda389adfffd72405905de67be1aa444820f"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "e00c5789fe9c780951482eee5a77c574917a2236", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a50725a4d6814abe0f2a03551bb60ba90412959/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a50725a4d6814abe0f2a03551bb60ba90412959/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1a50725a4d6814abe0f2a03551bb60ba90412959", "patch": "@@ -647,6 +647,22 @@ pub struct WhereBoundPredicate<'hir> {\n     pub bounds: GenericBounds<'hir>,\n }\n \n+impl WhereBoundPredicate<'hir> {\n+    /// Returns `true` if `param_def_id` matches the `bounded_ty` of this predicate.\n+    pub fn is_param_bound(&self, param_def_id: DefId) -> bool {\n+        let path = match self.bounded_ty.kind {\n+            TyKind::Path(QPath::Resolved(None, path)) => path,\n+            _ => return false,\n+        };\n+        match path.res {\n+            Res::Def(DefKind::TyParam, def_id) | Res::SelfTy(Some(def_id), None) => {\n+                def_id == param_def_id\n+            }\n+            _ => false,\n+        }\n+    }\n+}\n+\n /// A lifetime predicate (e.g., `'a: 'b + 'c`).\n #[derive(Debug, HashStable_Generic)]\n pub struct WhereRegionPredicate<'hir> {"}, {"sha": "f8df0e2595973ea54800a053bcd71a742b00bdf5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1a50725a4d6814abe0f2a03551bb60ba90412959/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a50725a4d6814abe0f2a03551bb60ba90412959/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1a50725a4d6814abe0f2a03551bb60ba90412959", "patch": "@@ -14,7 +14,6 @@ use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::GenericParam;\n@@ -2017,13 +2016,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 hir::WherePredicate::BoundPredicate(bp) => Some(bp),\n                 _ => None,\n             })\n-            .flat_map(|bp| match bp.bounded_ty.kind {\n-                hir::TyKind::Path(hir::QPath::Resolved(\n-                    None,\n-                    &hir::Path { res: Res::Def(DefKind::TyParam, def_id), .. },\n-                )) if def_id == param_def_id => bp.bounds,\n-                _ => &[][..],\n-            })\n+            .filter(|bp| bp.is_param_bound(param_def_id))\n+            .flat_map(|bp| bp.bounds)\n             .any(|bound| bound.trait_ref().and_then(|tr| tr.trait_def_id()) == sized_trait);\n         if explicitly_sized {\n             return;"}, {"sha": "2f427305782c5806918db038dddf419c76a263ce", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1a50725a4d6814abe0f2a03551bb60ba90412959/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a50725a4d6814abe0f2a03551bb60ba90412959/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1a50725a4d6814abe0f2a03551bb60ba90412959", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorKind, DefKind, Res};\n+use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n@@ -668,6 +668,7 @@ impl ItemCtxt<'tcx> {\n             })\n             .flat_map(|b| predicates_from_bound(self, ty, b));\n \n+        let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n         let from_where_clauses = ast_generics\n             .where_clause\n             .predicates\n@@ -677,7 +678,7 @@ impl ItemCtxt<'tcx> {\n                 _ => None,\n             })\n             .flat_map(|bp| {\n-                let bt = if is_param(self.tcx, bp.bounded_ty, param_id) {\n+                let bt = if bp.is_param_bound(param_def_id) {\n                     Some(ty)\n                 } else if !only_self_bounds.0 {\n                     Some(self.to_ty(bp.bounded_ty))\n@@ -714,23 +715,6 @@ impl ItemCtxt<'tcx> {\n     }\n }\n \n-/// Tests whether this is the AST for a reference to the type\n-/// parameter with ID `param_id`. We use this so as to avoid running\n-/// `ast_ty_to_ty`, because we want to avoid triggering an all-out\n-/// conversion of the type to avoid inducing unnecessary cycles.\n-fn is_param(tcx: TyCtxt<'_>, ast_ty: &hir::Ty<'_>, param_id: hir::HirId) -> bool {\n-    if let hir::TyKind::Path(hir::QPath::Resolved(None, path)) = ast_ty.kind {\n-        match path.res {\n-            Res::SelfTy(Some(def_id), None) | Res::Def(DefKind::TyParam, def_id) => {\n-                def_id == tcx.hir().local_def_id(param_id).to_def_id()\n-            }\n-            _ => false,\n-        }\n-    } else {\n-        false\n-    }\n-}\n-\n fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n     let it = tcx.hir().item(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id());"}]}