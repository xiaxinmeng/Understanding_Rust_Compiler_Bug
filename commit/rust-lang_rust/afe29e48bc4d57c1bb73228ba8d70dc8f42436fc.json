{"sha": "afe29e48bc4d57c1bb73228ba8d70dc8f42436fc", "node_id": "C_kwDOAAsO6NoAKGFmZTI5ZTQ4YmM0ZDU3YzFiYjczMjI4YmE4ZDcwZGM4ZjQyNDM2ZmM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-10-05T09:23:57Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-10-05T12:32:06Z"}, "message": "split steps for generating the standalone docs and the shared assets\n\nBefore this commit, the step to generate the standalone docs (which\nincluded the index page and other HTML files at the root of the\ndocumentation) was bundled with the code copying files needed by\nmultiple pieces of documentation. This means it wasn't possible to avoid\ngenerating the standalone docs.\n\nThis commit splits the step into two, allowing the standalone docs\ngeneration to be excluded while still building the rest of the docs.", "tree": {"sha": "2023ccdc53a3609bdd85e08c351e9b863c7e3833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2023ccdc53a3609bdd85e08c351e9b863c7e3833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afe29e48bc4d57c1bb73228ba8d70dc8f42436fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmM9eUYACgkQzXazX3c0\ndp5STQ//aWQUp0ie4PhPWtkhH9ypScFGvASz++d+IgXfaB8boi1PsMlZIKNIRIGY\n39i6wQbmN6YJlqC8KRN2drfoerpfefbcMDT7djrphqSOjwRMzSSuB61xIonipLJP\n91jf65oMn4/tPODshfCVDuk/icQ9uF0NiaWbCxhLl15hlwVhlWReWnFCMFWcICdj\nvEmRafDoubk90eQQ3m5bR+Mf6Y+Bzc3LP1j6+GpxWjw6KjhWeEJXz1JtyfRhgiDN\npaaiEb3dY0TvP76SfbH+NqOjtvnu8mGty5JJ0SKW1U+nf84HOe4nG0FryxYr81ii\nsVvot+xYAWBz6M7w8I7ePz/PpgcNp3ugogzP/gQJc6ai9qxh3DMMXqbMYXy2V9Ie\nTF2fWDKOszntXkzPO60qoK6paNcGi6P2zy2Iz+GWbFLgJXqcg+SjfqajNk7lZm6i\nbmSb6nYtMLvXg23IViZmSe7HolHfTnUqijeifTJtPo+udn8pfzKDPu/rDWz8kZ8q\n8GzTJQVTmB+p73UZyijpj1HgyGzlMRT9/XA9WH3y3OMy1PbmHjAcldf9np/NMBcM\n7ECjBygX1nOH/1vy4BQZMqL0QmN/B2MLQpA/N/b9UHbOczXs4UCArY5aYEIQQRuo\n7QDHSXiE3LD+jN6I0k4YJKDgWAHd0G9gVj5mppRBAeRuNOWQUxU=\n=1XDv\n-----END PGP SIGNATURE-----", "payload": "tree 2023ccdc53a3609bdd85e08c351e9b863c7e3833\nparent dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1664961837 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1664973126 +0200\n\nsplit steps for generating the standalone docs and the shared assets\n\nBefore this commit, the step to generate the standalone docs (which\nincluded the index page and other HTML files at the root of the\ndocumentation) was bundled with the code copying files needed by\nmultiple pieces of documentation. This means it wasn't possible to avoid\ngenerating the standalone docs.\n\nThis commit splits the step into two, allowing the standalone docs\ngeneration to be excluded while still building the rest of the docs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afe29e48bc4d57c1bb73228ba8d70dc8f42436fc", "html_url": "https://github.com/rust-lang/rust/commit/afe29e48bc4d57c1bb73228ba8d70dc8f42436fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afe29e48bc4d57c1bb73228ba8d70dc8f42436fc/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "html_url": "https://github.com/rust-lang/rust/commit/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "b286c79a30307151fbf1000dbcf98708224d9789", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/afe29e48bc4d57c1bb73228ba8d70dc8f42436fc/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe29e48bc4d57c1bb73228ba8d70dc8f42436fc/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=afe29e48bc4d57c1bb73228ba8d70dc8f42436fc", "patch": "@@ -227,7 +227,7 @@ impl Step for TheBook {\n         }\n \n         // build the version info page and CSS\n-        builder.ensure(Standalone { compiler, target });\n+        let shared_assets = builder.ensure(SharedAssets { target });\n \n         // build the redirect pages\n         builder.info(&format!(\"Documenting book redirect pages ({})\", target));\n@@ -236,7 +236,7 @@ impl Step for TheBook {\n             let path = file.path();\n             let path = path.to_str().unwrap();\n \n-            invoke_rustdoc(builder, compiler, target, path);\n+            invoke_rustdoc(builder, compiler, &shared_assets, target, path);\n         }\n \n         if builder.was_invoked_explicitly::<Self>(Kind::Doc) {\n@@ -250,6 +250,7 @@ impl Step for TheBook {\n fn invoke_rustdoc(\n     builder: &Builder<'_>,\n     compiler: Compiler,\n+    shared_assets: &SharedAssetsPaths,\n     target: TargetSelection,\n     markdown: &str,\n ) {\n@@ -259,7 +260,6 @@ fn invoke_rustdoc(\n \n     let header = builder.src.join(\"src/doc/redirect.inc\");\n     let footer = builder.src.join(\"src/doc/footer.inc\");\n-    let version_info = out.join(\"version_info.html\");\n \n     let mut cmd = builder.rustdoc_cmd(compiler);\n \n@@ -268,7 +268,7 @@ fn invoke_rustdoc(\n     cmd.arg(\"--html-after-content\")\n         .arg(&footer)\n         .arg(\"--html-before-content\")\n-        .arg(&version_info)\n+        .arg(&shared_assets.version_info)\n         .arg(\"--html-in-header\")\n         .arg(&header)\n         .arg(\"--markdown-no-toc\")\n@@ -324,21 +324,11 @@ impl Step for Standalone {\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n+        let version_info = builder.ensure(SharedAssets { target: self.target }).version_info;\n+\n         let favicon = builder.src.join(\"src/doc/favicon.inc\");\n         let footer = builder.src.join(\"src/doc/footer.inc\");\n         let full_toc = builder.src.join(\"src/doc/full-toc.inc\");\n-        t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n-\n-        let version_input = builder.src.join(\"src/doc/version_info.html.template\");\n-        let version_info = out.join(\"version_info.html\");\n-\n-        if !builder.config.dry_run && !up_to_date(&version_input, &version_info) {\n-            let info = t!(fs::read_to_string(&version_input))\n-                .replace(\"VERSION\", &builder.rust_release())\n-                .replace(\"SHORT_HASH\", builder.rust_info.sha_short().unwrap_or(\"\"))\n-                .replace(\"STAMP\", builder.rust_info.sha().unwrap_or(\"\"));\n-            t!(fs::write(&version_info, &info));\n-        }\n \n         for file in t!(fs::read_dir(builder.src.join(\"src/doc\"))) {\n             let file = t!(file);\n@@ -400,6 +390,45 @@ impl Step for Standalone {\n     }\n }\n \n+#[derive(Debug, Clone)]\n+pub struct SharedAssetsPaths {\n+    pub version_info: PathBuf,\n+}\n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct SharedAssets {\n+    target: TargetSelection,\n+}\n+\n+impl Step for SharedAssets {\n+    type Output = SharedAssetsPaths;\n+    const DEFAULT: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        // Other tasks depend on this, no need to execute it on its own\n+        run.never()\n+    }\n+\n+    // Generate shared resources used by other pieces of documentation.\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let out = builder.doc_out(self.target);\n+\n+        let version_input = builder.src.join(\"src\").join(\"doc\").join(\"version_info.html.template\");\n+        let version_info = out.join(\"version_info.html\");\n+        if !builder.config.dry_run && !up_to_date(&version_input, &version_info) {\n+            let info = t!(fs::read_to_string(&version_input))\n+                .replace(\"VERSION\", &builder.rust_release())\n+                .replace(\"SHORT_HASH\", builder.rust_info.sha_short().unwrap_or(\"\"))\n+                .replace(\"STAMP\", builder.rust_info.sha().unwrap_or(\"\"));\n+            t!(fs::write(&version_info, &info));\n+        }\n+\n+        builder.copy(&builder.src.join(\"src\").join(\"doc\").join(\"rust.css\"), &out.join(\"rust.css\"));\n+\n+        SharedAssetsPaths { version_info }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n     pub stage: u32,"}]}