{"sha": "59c755227d3f6903095cf03bce5e76b7747138ec", "node_id": "C_kwDOAAsO6NoAKDU5Yzc1NTIyN2QzZjY5MDMwOTVjZjAzYmNlNWU3NmI3NzQ3MTM4ZWM", "commit": {"author": {"name": "rainy-me", "email": "github@yue.coffee", "date": "2021-10-13T22:16:42Z"}, "committer": {"name": "rainy-me", "email": "github@yue.coffee", "date": "2021-10-13T22:16:42Z"}, "message": "Provide navigations to parent modules", "tree": {"sha": "6dedd378a20b91162865c250a234cc48d2cd5235", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dedd378a20b91162865c250a234cc48d2cd5235"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59c755227d3f6903095cf03bce5e76b7747138ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59c755227d3f6903095cf03bce5e76b7747138ec", "html_url": "https://github.com/rust-lang/rust/commit/59c755227d3f6903095cf03bce5e76b7747138ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59c755227d3f6903095cf03bce5e76b7747138ec/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa0771719c0ec8a9104896ce9fdc99e95c1805e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa0771719c0ec8a9104896ce9fdc99e95c1805e", "html_url": "https://github.com/rust-lang/rust/commit/aaa0771719c0ec8a9104896ce9fdc99e95c1805e"}], "stats": {"total": 77, "additions": 58, "deletions": 19}, "files": [{"sha": "a55901a8f7524046982902c16fd9a5e1e4687fb9", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/59c755227d3f6903095cf03bce5e76b7747138ec/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c755227d3f6903095cf03bce5e76b7747138ec/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=59c755227d3f6903095cf03bce5e76b7747138ec", "patch": "@@ -1,6 +1,6 @@\n //! See [`CargoWorkspace`].\n \n-use std::convert::TryInto;\n+use std::convert::{TryFrom, TryInto};\n use std::iter;\n use std::path::PathBuf;\n use std::{ops, process::Command};\n@@ -400,6 +400,39 @@ impl CargoWorkspace {\n         }\n     }\n \n+    pub fn parent_manifests(&self, manifest_path: &ManifestPath) -> Option<Vec<ManifestPath>> {\n+        let mut found = false;\n+        let parent_manifests = self\n+            .packages()\n+            .filter_map(|pkg| {\n+                if !found && &self[pkg].manifest == manifest_path {\n+                    found = true\n+                }\n+                self[pkg].dependencies.iter().find_map(|dep| {\n+                    if &self[dep.pkg].manifest == manifest_path {\n+                        return Some(self[pkg].manifest.clone());\n+                    }\n+                    None\n+                })\n+            })\n+            .collect::<Vec<ManifestPath>>();\n+\n+        // some packages has this pkg as dep. return their manifests\n+        if parent_manifests.len() > 0 {\n+            return Some(parent_manifests);\n+        }\n+\n+        // this pkg is inside this cargo workspace, fallback to workspace root\n+        if found {\n+            return Some(vec![\n+                ManifestPath::try_from(self.workspace_root().join(\"Cargo.toml\")).ok()?\n+            ]);\n+        }\n+\n+        // not in this workspace\n+        None\n+    }\n+\n     fn is_unique(&self, name: &str) -> bool {\n         self.packages.iter().filter(|(_, v)| v.name == name).count() == 1\n     }"}, {"sha": "0105496ba2adb98b5177cbb102f6cc40fc41e43f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/59c755227d3f6903095cf03bce5e76b7747138ec/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c755227d3f6903095cf03bce5e76b7747138ec/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=59c755227d3f6903095cf03bce5e76b7747138ec", "patch": "@@ -3,6 +3,7 @@\n //! `ide` crate.\n \n use std::{\n+    convert::TryFrom,\n     io::Write as _,\n     process::{self, Stdio},\n };\n@@ -26,10 +27,11 @@ use lsp_types::{\n     SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, SymbolTag,\n     TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n-use project_model::{ProjectWorkspace, TargetKind};\n+use project_model::{ManifestPath, ProjectWorkspace, TargetKind};\n use serde_json::json;\n use stdx::{format_to, never};\n use syntax::{algo, ast, AstNode, TextRange, TextSize, T};\n+use vfs::AbsPathBuf;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n@@ -606,28 +608,30 @@ pub(crate) fn handle_parent_module(\n     let _p = profile::span(\"handle_parent_module\");\n     if let Ok(file_path) = &params.text_document.uri.to_file_path() {\n         if file_path.file_name().unwrap_or_default() == \"Cargo.toml\" {\n-            // search parent workspace and collect a list of `LocationLink`path,\n-            // since cargo.toml doesn't have file_id\n+            // search workspaces for parent packages or fallback to workspace root\n+            let abs_path_buf = match AbsPathBuf::try_from(file_path.to_path_buf()).ok() {\n+                Some(abs_path_buf) => abs_path_buf,\n+                None => return Ok(None),\n+            };\n+\n+            let manifest_path = match ManifestPath::try_from(abs_path_buf).ok() {\n+                Some(manifest_path) => manifest_path,\n+                None => return Ok(None),\n+            };\n+\n             let links: Vec<LocationLink> = snap\n                 .workspaces\n                 .iter()\n                 .filter_map(|ws| match ws {\n-                    ProjectWorkspace::Cargo { cargo, .. } => cargo\n-                        .packages()\n-                        .find(|&pkg| cargo[pkg].manifest.as_ref() == file_path)\n-                        .and_then(|_| Some(cargo)),\n+                    ProjectWorkspace::Cargo { cargo, .. } => cargo.parent_manifests(&manifest_path),\n                     _ => None,\n                 })\n-                .map(|ws| {\n-                    let target_cargo_toml_path = ws.workspace_root().join(\"Cargo.toml\");\n-                    let target_cargo_toml_url =\n-                        to_proto::url_from_abs_path(&target_cargo_toml_path);\n-                    LocationLink {\n-                        origin_selection_range: None,\n-                        target_uri: target_cargo_toml_url,\n-                        target_range: Range::default(),\n-                        target_selection_range: Range::default(),\n-                    }\n+                .flatten()\n+                .map(|parent_manifest_path| LocationLink {\n+                    origin_selection_range: None,\n+                    target_uri: to_proto::url_from_abs_path(&parent_manifest_path),\n+                    target_range: Range::default(),\n+                    target_selection_range: Range::default(),\n                 })\n                 .collect::<_>();\n             return Ok(Some(links.into()));"}, {"sha": "c9385361f88c9eabc203aa0cfb45848940608238", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59c755227d3f6903095cf03bce5e76b7747138ec/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/59c755227d3f6903095cf03bce5e76b7747138ec/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=59c755227d3f6903095cf03bce5e76b7747138ec", "patch": "@@ -189,12 +189,14 @@ export function parentModule(ctx: Ctx): Cmd {\n         const client = ctx.client;\n         if (!editor || !client) return;\n         if (!(isRustDocument(editor.document) || isCargoTomlDocument(editor.document))) return;\n+\n         const locations = await client.sendRequest(ra.parentModule, {\n             textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n             position: client.code2ProtocolConverter.asPosition(\n                 editor.selection.active,\n             ),\n         });\n+        if (!locations) return;\n \n         if (locations.length === 1) {\n             const loc = locations[0];"}, {"sha": "90796e611e69e48d3e1f8511efc9c523a3d93018", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59c755227d3f6903095cf03bce5e76b7747138ec/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/59c755227d3f6903095cf03bce5e76b7747138ec/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=59c755227d3f6903095cf03bce5e76b7747138ec", "patch": "@@ -62,7 +62,7 @@ export interface MatchingBraceParams {\n }\n export const matchingBrace = new lc.RequestType<MatchingBraceParams, lc.Position[], void>(\"experimental/matchingBrace\");\n \n-export const parentModule = new lc.RequestType<lc.TextDocumentPositionParams, lc.LocationLink[], void>(\"experimental/parentModule\");\n+export const parentModule = new lc.RequestType<lc.TextDocumentPositionParams, lc.LocationLink[] | null, void>(\"experimental/parentModule\");\n \n export interface JoinLinesParams {\n     textDocument: lc.TextDocumentIdentifier;"}]}