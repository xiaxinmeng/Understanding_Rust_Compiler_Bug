{"sha": "dab0e75911b44618c594cda02141ff2102041772", "node_id": "C_kwDOAAsO6NoAKGRhYjBlNzU5MTFiNDQ2MThjNTk0Y2RhMDIxNDFmZjIxMDIwNDE3NzI", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-03T21:05:19Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:05Z"}, "message": "remove DiagnosticItemCollector\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "58723ad1f67cdd85e10444dd410516d263e2312d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58723ad1f67cdd85e10444dd410516d263e2312d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab0e75911b44618c594cda02141ff2102041772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab0e75911b44618c594cda02141ff2102041772", "html_url": "https://github.com/rust-lang/rust/commit/dab0e75911b44618c594cda02141ff2102041772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab0e75911b44618c594cda02141ff2102041772/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52f833a254ddfa786f34944bc31c205b51e28ecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/52f833a254ddfa786f34944bc31c205b51e28ecb", "html_url": "https://github.com/rust-lang/rust/commit/52f833a254ddfa786f34944bc31c205b51e28ecb"}], "stats": {"total": 67, "additions": 28, "deletions": 39}, "files": [{"sha": "e6b69d8986cf83e07e7e4622de0e1402699866d0", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 28, "deletions": 39, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/dab0e75911b44618c594cda02141ff2102041772/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab0e75911b44618c594cda02141ff2102041772/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=dab0e75911b44618c594cda02141ff2102041772", "patch": "@@ -10,49 +10,22 @@\n //! * Compiler internal types like `Ty` and `TyCtxt`\n \n use rustc_ast as ast;\n-use rustc_hir as hir;\n use rustc_hir::diagnostic_items::DiagnosticItems;\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};\n \n-struct DiagnosticItemCollector<'tcx> {\n+fn observe_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    diagnostic_items: DiagnosticItems,\n-}\n-\n-impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        self.observe_item(item.def_id);\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        self.observe_item(trait_item.def_id);\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n-        self.observe_item(impl_item.def_id);\n-    }\n-\n-    fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n-        self.observe_item(foreign_item.def_id);\n-    }\n-}\n-\n-impl<'tcx> DiagnosticItemCollector<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx>) -> DiagnosticItemCollector<'tcx> {\n-        DiagnosticItemCollector { tcx, diagnostic_items: DiagnosticItems::default() }\n-    }\n-\n-    fn observe_item(&mut self, def_id: LocalDefId) {\n-        let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-        let attrs = self.tcx.hir().attrs(hir_id);\n-        if let Some(name) = extract(attrs) {\n-            // insert into our table\n-            collect_item(self.tcx, &mut self.diagnostic_items, name, def_id.to_def_id());\n-        }\n+    diagnostic_items: &mut DiagnosticItems,\n+    def_id: LocalDefId,\n+) {\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+    let attrs = tcx.hir().attrs(hir_id);\n+    if let Some(name) = extract(attrs) {\n+        // insert into our table\n+        collect_item(tcx, diagnostic_items, name, def_id.to_def_id());\n     }\n }\n \n@@ -95,12 +68,28 @@ fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> DiagnosticItems\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     // Initialize the collector.\n-    let mut collector = DiagnosticItemCollector::new(tcx);\n+    let mut diagnostic_items = DiagnosticItems::default();\n \n     // Collect diagnostic items in this crate.\n-    tcx.hir().visit_all_item_likes(&mut collector);\n+    let crate_items = tcx.hir_crate_items(());\n+\n+    for id in crate_items.items() {\n+        observe_item(tcx, &mut diagnostic_items, id.def_id);\n+    }\n+\n+    for id in crate_items.trait_items() {\n+        observe_item(tcx, &mut diagnostic_items, id.def_id);\n+    }\n+\n+    for id in crate_items.impl_items() {\n+        observe_item(tcx, &mut diagnostic_items, id.def_id);\n+    }\n+\n+    for id in crate_items.foreign_items() {\n+        observe_item(tcx, &mut diagnostic_items, id.def_id);\n+    }\n \n-    collector.diagnostic_items\n+    diagnostic_items\n }\n \n /// Traverse and collect all the diagnostic items in all crates."}]}