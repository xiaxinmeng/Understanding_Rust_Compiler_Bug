{"sha": "fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNzlhNzQwMjAwNjFkY2JiNDRkZTRiY2IxYjY1OTBjYjNiZGEzNWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-06T23:39:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-06T23:39:28Z"}, "message": "Rollup merge of #63163 - bravomikekilo:master, r=cramertj\n\nadd a pair of whitespace after remove parentheses\n\nfix [issue-63156](https://github.com/rust-lang/rust/issues/63156).\nadd a pair of whitespace after remove parentheses.", "tree": {"sha": "b790dae68eee70142cc26410bdf420edbb6be640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b790dae68eee70142cc26410bdf420edbb6be640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdSg+wCRBK7hj4Ov3rIwAAdHIIAJf4uim48k7ZiU2rt8tyhw0C\nTFJEYhTzlJq4HWI6rHI7M38SwdWmXuINJSEo+EBbK8TC4P1QX/BZgfpXkauzgJCq\nQbvp37Bxw1DiyK0qccnG4aUTi1xvERql9Hlub2aRxSFBgETgTMp5DPZrPrzkFfSH\n7MqwX6iW/o6D4TXqDjpnuWeMU6OdvKJrS13AxU6FxIvIenlg7c5NYtUR8M8Jiy1s\nIPhxKKTHxEeL6IgGdNyEO3GpPzjB9XWObRDxPXQDg4p6Txu06WmlzzhqAR9jjWU9\nuC64Xxg8TdcHSUrOZ40JLvf8z/kwk5FB8uiVl3OFLRV010evYAgbWAs72TNrlqc=\n=ZFyL\n-----END PGP SIGNATURE-----\n", "payload": "tree b790dae68eee70142cc26410bdf420edbb6be640\nparent fb1f57e0e5a78a803f1356813c8b70c5bc465efa\nparent 3a95c716dcd0a846ae09725f4bdfab519c5743b8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565134768 +0200\ncommitter GitHub <noreply@github.com> 1565134768 +0200\n\nRollup merge of #63163 - bravomikekilo:master, r=cramertj\n\nadd a pair of whitespace after remove parentheses\n\nfix [issue-63156](https://github.com/rust-lang/rust/issues/63156).\nadd a pair of whitespace after remove parentheses.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "html_url": "https://github.com/rust-lang/rust/commit/fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb1f57e0e5a78a803f1356813c8b70c5bc465efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1f57e0e5a78a803f1356813c8b70c5bc465efa", "html_url": "https://github.com/rust-lang/rust/commit/fb1f57e0e5a78a803f1356813c8b70c5bc465efa"}, {"sha": "3a95c716dcd0a846ae09725f4bdfab519c5743b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a95c716dcd0a846ae09725f4bdfab519c5743b8", "html_url": "https://github.com/rust-lang/rust/commit/3a95c716dcd0a846ae09725f4bdfab519c5743b8"}], "stats": {"total": 957, "additions": 916, "deletions": 41}, "files": [{"sha": "6a3dfdbe316848797e492169d2a75ce2e62d3d3b", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 83, "deletions": 27, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "patch": "@@ -15,7 +15,7 @@ use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n use syntax::symbol::Symbol;\n use syntax::util::parser;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, BytePos};\n \n use rustc::hir;\n \n@@ -353,31 +353,46 @@ declare_lint! {\n declare_lint_pass!(UnusedParens => [UNUSED_PARENS]);\n \n impl UnusedParens {\n+\n+    fn is_expr_parens_necessary(inner: &ast::Expr, followed_by_block: bool) -> bool {\n+        followed_by_block && match inner.node {\n+            ast::ExprKind::Ret(_) | ast::ExprKind::Break(..) => true,\n+            _ => parser::contains_exterior_struct_lit(&inner),\n+        }\n+    }\n+\n     fn check_unused_parens_expr(&self,\n-                                cx: &EarlyContext<'_>,\n-                                value: &ast::Expr,\n-                                msg: &str,\n-                                followed_by_block: bool) {\n+                                     cx: &EarlyContext<'_>,\n+                                     value: &ast::Expr,\n+                                     msg: &str,\n+                                     followed_by_block: bool,\n+                                     left_pos: Option<BytePos>,\n+                                     right_pos: Option<BytePos>) {\n         match value.node {\n             ast::ExprKind::Paren(ref inner) => {\n-                let necessary = followed_by_block && match inner.node {\n-                    ast::ExprKind::Ret(_) | ast::ExprKind::Break(..) => true,\n-                    _ => parser::contains_exterior_struct_lit(&inner),\n-                };\n-                if !necessary {\n+                if !Self::is_expr_parens_necessary(inner, followed_by_block) {\n                     let expr_text = if let Ok(snippet) = cx.sess().source_map()\n                         .span_to_snippet(value.span) {\n                             snippet\n                         } else {\n                             pprust::expr_to_string(value)\n                         };\n-                    Self::remove_outer_parens(cx, value.span, &expr_text, msg);\n+                    let keep_space = (\n+                        left_pos.map(|s| s >= value.span.lo()).unwrap_or(false),\n+                        right_pos.map(|s| s <= value.span.hi()).unwrap_or(false),\n+                    );\n+                    Self::remove_outer_parens(cx, value.span, &expr_text, msg, keep_space);\n                 }\n             }\n             ast::ExprKind::Let(_, ref expr) => {\n                 // FIXME(#60336): Properly handle `let true = (false && true)`\n                 // actually needing the parenthesis.\n-                self.check_unused_parens_expr(cx, expr, \"`let` head expression\", followed_by_block);\n+                self.check_unused_parens_expr(\n+                    cx, expr,\n+                    \"`let` head expression\",\n+                    followed_by_block,\n+                    None, None\n+                );\n             }\n             _ => {}\n         }\n@@ -394,11 +409,15 @@ impl UnusedParens {\n                 } else {\n                     pprust::pat_to_string(value)\n                 };\n-            Self::remove_outer_parens(cx, value.span, &pattern_text, msg);\n+            Self::remove_outer_parens(cx, value.span, &pattern_text, msg, (false, false));\n         }\n     }\n \n-    fn remove_outer_parens(cx: &EarlyContext<'_>, span: Span, pattern: &str, msg: &str) {\n+    fn remove_outer_parens(cx: &EarlyContext<'_>,\n+                           span: Span,\n+                           pattern: &str,\n+                           msg: &str,\n+                           keep_space: (bool, bool)) {\n         let span_msg = format!(\"unnecessary parentheses around {}\", msg);\n         let mut err = cx.struct_span_lint(UNUSED_PARENS, span, &span_msg);\n         let mut ate_left_paren = false;\n@@ -424,11 +443,27 @@ impl UnusedParens {\n                     },\n                     _ => false,\n                 }\n-            }).to_owned();\n+            });\n+\n+        let replace = {\n+            let mut replace = if keep_space.0 {\n+                let mut s = String::from(\" \");\n+                s.push_str(parens_removed);\n+                s\n+            } else {\n+                String::from(parens_removed)\n+            };\n+\n+            if keep_space.1 {\n+                replace.push(' ');\n+            }\n+            replace\n+        };\n+\n         err.span_suggestion_short(\n             span,\n             \"remove these parentheses\",\n-            parens_removed,\n+            replace,\n             Applicability::MachineApplicable,\n         );\n         err.emit();\n@@ -438,14 +473,35 @@ impl UnusedParens {\n impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n         use syntax::ast::ExprKind::*;\n-        let (value, msg, followed_by_block) = match e.node {\n-            If(ref cond, ..) => (cond, \"`if` condition\", true),\n-            While(ref cond, ..) => (cond, \"`while` condition\", true),\n-            ForLoop(_, ref cond, ..) => (cond, \"`for` head expression\", true),\n-            Match(ref head, _) => (head, \"`match` head expression\", true),\n-            Ret(Some(ref value)) => (value, \"`return` value\", false),\n-            Assign(_, ref value) => (value, \"assigned value\", false),\n-            AssignOp(.., ref value) => (value, \"assigned value\", false),\n+        let (value, msg, followed_by_block, left_pos, right_pos) = match e.node {\n+            If(ref cond, ref block, ..) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(2);\n+                let right = block.span.lo();\n+                (cond, \"`if` condition\", true, Some(left), Some(right))\n+            }\n+\n+            While(ref cond, ref block, ..) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(5);\n+                let right = block.span.lo();\n+                (cond, \"`while` condition\", true, Some(left), Some(right))\n+            },\n+\n+            ForLoop(_, ref cond, ref block, ..) => {\n+                (cond, \"`for` head expression\", true, None, Some(block.span.lo()))\n+            }\n+\n+            Match(ref head, _) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(5);\n+                (head, \"`match` head expression\", true, Some(left), None)\n+            }\n+\n+            Ret(Some(ref value)) => {\n+                let left = e.span.lo() + syntax_pos::BytePos(3);\n+                (value, \"`return` value\", false, Some(left), None)\n+            }\n+\n+            Assign(_, ref value) => (value, \"assigned value\", false, None, None),\n+            AssignOp(.., ref value) => (value, \"assigned value\", false, None, None),\n             // either function/method call, or something this lint doesn't care about\n             ref call_or_other => {\n                 let (args_to_check, call_kind) = match *call_or_other {\n@@ -467,12 +523,12 @@ impl EarlyLintPass for UnusedParens {\n                 }\n                 let msg = format!(\"{} argument\", call_kind);\n                 for arg in args_to_check {\n-                    self.check_unused_parens_expr(cx, arg, &msg, false);\n+                    self.check_unused_parens_expr(cx, arg, &msg, false, None, None);\n                 }\n                 return;\n             }\n         };\n-        self.check_unused_parens_expr(cx, &value, msg, followed_by_block);\n+        self.check_unused_parens_expr(cx, &value, msg, followed_by_block, left_pos, right_pos);\n     }\n \n     fn check_pat(&mut self, cx: &EarlyContext<'_>, p: &ast::Pat) {\n@@ -492,7 +548,7 @@ impl EarlyLintPass for UnusedParens {\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n         if let ast::StmtKind::Local(ref local) = s.node {\n             if let Some(ref value) = local.init {\n-                self.check_unused_parens_expr(cx, &value, \"assigned value\", false);\n+                self.check_unused_parens_expr(cx, &value, \"assigned value\", false, None, None);\n             }\n         }\n     }"}, {"sha": "427407119102cb7ab36586a652bc5176c6f2fe18", "filename": "src/test/ui/lint/unused_parens_json_suggestion.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed?ref=fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: --error-format pretty-json -Zunstable-options\n+// build-pass (FIXME(62277): could be check-pass?)\n+// run-rustfix\n+\n+// The output for humans should just highlight the whole span without showing\n+// the suggested replacement, but we also want to test that suggested\n+// replacement only removes one set of parentheses, rather than na\u00efvely\n+// stripping away any starting or ending parenthesis characters\u2014hence this\n+// test of the JSON error format.\n+\n+#![warn(unused_parens)]\n+#![allow(unreachable_code)]\n+\n+fn main() {\n+    // We want to suggest the properly-balanced expression `1 / (2 + 3)`, not\n+    // the malformed `1 / (2 + 3`\n+    let _a = 1 / (2 + 3);\n+    f();\n+}\n+\n+fn f() -> bool {\n+    loop {\n+        if (break { return true }) {\n+        }\n+    }\n+    false\n+}"}, {"sha": "87192503986c44123c96763361c6d84f016889d2", "filename": "src/test/ui/lint/unused_parens_json_suggestion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs?ref=fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: --error-format pretty-json -Zunstable-options\n // build-pass (FIXME(62277): could be check-pass?)\n+// run-rustfix\n \n // The output for humans should just highlight the whole span without showing\n // the suggested replacement, but we also want to test that suggested\n@@ -8,6 +9,7 @@\n // test of the JSON error format.\n \n #![warn(unused_parens)]\n+#![allow(unreachable_code)]\n \n fn main() {\n     // We want to suggest the properly-balanced expression `1 / (2 + 3)`, not"}, {"sha": "256c7555c908bd25ba2c09fd635b31fcaac741df", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "patch": "@@ -8,10 +8,10 @@\n   \"spans\": [\n     {\n       \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-      \"byte_start\": 611,\n-      \"byte_end\": 624,\n-      \"line_start\": 15,\n-      \"line_end\": 15,\n+      \"byte_start\": 654,\n+      \"byte_end\": 667,\n+      \"line_start\": 17,\n+      \"line_end\": 17,\n       \"column_start\": 14,\n       \"column_end\": 27,\n       \"is_primary\": true,\n@@ -36,10 +36,10 @@\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-          \"byte_start\": 457,\n-          \"byte_end\": 470,\n-          \"line_start\": 10,\n-          \"line_end\": 10,\n+          \"byte_start\": 472,\n+          \"byte_end\": 485,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n           \"column_start\": 9,\n           \"column_end\": 22,\n           \"is_primary\": true,\n@@ -66,10 +66,10 @@\n       \"spans\": [\n         {\n           \"file_name\": \"$DIR/unused_parens_json_suggestion.rs\",\n-          \"byte_start\": 611,\n-          \"byte_end\": 624,\n-          \"line_start\": 15,\n-          \"line_end\": 15,\n+          \"byte_start\": 654,\n+          \"byte_end\": 667,\n+          \"line_start\": 17,\n+          \"line_end\": 17,\n           \"column_start\": 14,\n           \"column_end\": 27,\n           \"is_primary\": true,\n@@ -91,13 +91,13 @@\n     }\n   ],\n   \"rendered\": \"warning: unnecessary parentheses around assigned value\n-  --> $DIR/unused_parens_json_suggestion.rs:15:14\n+  --> $DIR/unused_parens_json_suggestion.rs:17:14\n    |\n LL |     let _a = (1 / (2 + 3));\n    |              ^^^^^^^^^^^^^ help: remove these parentheses\n    |\n note: lint level defined here\n-  --> $DIR/unused_parens_json_suggestion.rs:10:9\n+  --> $DIR/unused_parens_json_suggestion.rs:11:9\n    |\n LL | #![warn(unused_parens)]\n    |         ^^^^^^^^^^^^^"}, {"sha": "2459eb1ac5cb866e14a06ef2edfe15cc324021bf", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.fixed", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed?ref=fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "patch": "@@ -0,0 +1,62 @@\n+// compile-flags: --error-format pretty-json -Zunstable-options\n+// build-pass\n+// run-rustfix\n+\n+// The output for humans should just highlight the whole span without showing\n+// the suggested replacement, but we also want to test that suggested\n+// replacement only removes one set of parentheses, rather than na\u00efvely\n+// stripping away any starting or ending parenthesis characters\u2014hence this\n+// test of the JSON error format.\n+\n+#![warn(unused_parens)]\n+#![allow(unreachable_code)]\n+\n+fn main() {\n+\n+    let _b = false;\n+\n+    if _b {\n+        println!(\"hello\");\n+    }\n+\n+    f();\n+\n+}\n+\n+fn f() -> bool {\n+    let c = false;\n+\n+    if c {\n+        println!(\"next\");\n+    }\n+\n+    if c {\n+        println!(\"prev\");\n+    }\n+\n+    while false && true {\n+        if c {\n+            println!(\"norm\");\n+        }\n+\n+    }\n+\n+    while true && false {\n+        for _ in 0 .. 3 {\n+            println!(\"e~\")\n+        }\n+    }\n+\n+    for _ in 0 .. 3 {\n+        while true && false {\n+            println!(\"e~\")\n+        }\n+    }\n+\n+\n+    loop {\n+        if (break { return true }) {\n+        }\n+    }\n+    false\n+}"}, {"sha": "0e9869b67d590a120044456d143ca8d322086dec", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs?ref=fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "patch": "@@ -0,0 +1,62 @@\n+// compile-flags: --error-format pretty-json -Zunstable-options\n+// build-pass\n+// run-rustfix\n+\n+// The output for humans should just highlight the whole span without showing\n+// the suggested replacement, but we also want to test that suggested\n+// replacement only removes one set of parentheses, rather than na\u00efvely\n+// stripping away any starting or ending parenthesis characters\u2014hence this\n+// test of the JSON error format.\n+\n+#![warn(unused_parens)]\n+#![allow(unreachable_code)]\n+\n+fn main() {\n+\n+    let _b = false;\n+\n+    if (_b) {\n+        println!(\"hello\");\n+    }\n+\n+    f();\n+\n+}\n+\n+fn f() -> bool {\n+    let c = false;\n+\n+    if(c) {\n+        println!(\"next\");\n+    }\n+\n+    if (c){\n+        println!(\"prev\");\n+    }\n+\n+    while (false && true){\n+        if (c) {\n+            println!(\"norm\");\n+        }\n+\n+    }\n+\n+    while(true && false) {\n+        for _ in (0 .. 3){\n+            println!(\"e~\")\n+        }\n+    }\n+\n+    for _ in (0 .. 3) {\n+        while (true && false) {\n+            println!(\"e~\")\n+        }\n+    }\n+\n+\n+    loop {\n+        if (break { return true }) {\n+        }\n+    }\n+    false\n+}"}, {"sha": "b4eab200dd0163d98f03ff43b5a8fe3d0fd42709", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.stderr", "status": "added", "additions": 666, "deletions": 0, "changes": 666, "blob_url": "https://github.com/rust-lang/rust/blob/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb79a74020061dcbb44de4bcb1b6590cb3bda35c/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr?ref=fb79a74020061dcbb44de4bcb1b6590cb3bda35c", "patch": "@@ -0,0 +1,666 @@\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 521,\n+      \"byte_end\": 525,\n+      \"line_start\": 18,\n+      \"line_end\": 18,\n+      \"column_start\": 8,\n+      \"column_end\": 12,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    if (_b) {\",\n+          \"highlight_start\": 8,\n+          \"highlight_end\": 12\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"lint level defined here\",\n+      \"code\": null,\n+      \"level\": \"note\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 435,\n+          \"byte_end\": 448,\n+          \"line_start\": 11,\n+          \"line_end\": 11,\n+          \"column_start\": 9,\n+          \"column_end\": 22,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"#![warn(unused_parens)]\",\n+              \"highlight_start\": 9,\n+              \"highlight_end\": 22\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": null,\n+          \"suggestion_applicability\": null,\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    },\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 521,\n+          \"byte_end\": 525,\n+          \"line_start\": 18,\n+          \"line_end\": 18,\n+          \"column_start\": 8,\n+          \"column_end\": 12,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    if (_b) {\",\n+              \"highlight_start\": 8,\n+              \"highlight_end\": 12\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"_b\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:18:8\n+   |\n+LL |     if (_b) {\n+   |        ^^^^ help: remove these parentheses\n+   |\n+note: lint level defined here\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:11:9\n+   |\n+LL | #![warn(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 618,\n+      \"byte_end\": 621,\n+      \"line_start\": 29,\n+      \"line_end\": 29,\n+      \"column_start\": 7,\n+      \"column_end\": 10,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    if(c) {\",\n+          \"highlight_start\": 7,\n+          \"highlight_end\": 10\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 618,\n+          \"byte_end\": 621,\n+          \"line_start\": 29,\n+          \"line_end\": 29,\n+          \"column_start\": 7,\n+          \"column_end\": 10,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    if(c) {\",\n+              \"highlight_start\": 7,\n+              \"highlight_end\": 10\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \" c\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:29:7\n+   |\n+LL |     if(c) {\n+   |       ^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 664,\n+      \"byte_end\": 667,\n+      \"line_start\": 33,\n+      \"line_end\": 33,\n+      \"column_start\": 8,\n+      \"column_end\": 11,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    if (c){\",\n+          \"highlight_start\": 8,\n+          \"highlight_end\": 11\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 664,\n+          \"byte_end\": 667,\n+          \"line_start\": 33,\n+          \"line_end\": 33,\n+          \"column_start\": 8,\n+          \"column_end\": 11,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    if (c){\",\n+              \"highlight_start\": 8,\n+              \"highlight_end\": 11\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"c \",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:33:8\n+   |\n+LL |     if (c){\n+   |        ^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `while` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 712,\n+      \"byte_end\": 727,\n+      \"line_start\": 37,\n+      \"line_end\": 37,\n+      \"column_start\": 11,\n+      \"column_end\": 26,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    while (false && true){\",\n+          \"highlight_start\": 11,\n+          \"highlight_end\": 26\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 712,\n+          \"byte_end\": 727,\n+          \"line_start\": 37,\n+          \"line_end\": 37,\n+          \"column_start\": 11,\n+          \"column_end\": 26,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    while (false && true){\",\n+              \"highlight_start\": 11,\n+              \"highlight_end\": 26\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"false && true \",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:37:11\n+   |\n+LL |     while (false && true){\n+   |           ^^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `if` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 740,\n+      \"byte_end\": 743,\n+      \"line_start\": 38,\n+      \"line_end\": 38,\n+      \"column_start\": 12,\n+      \"column_end\": 15,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"        if (c) {\",\n+          \"highlight_start\": 12,\n+          \"highlight_end\": 15\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 740,\n+          \"byte_end\": 743,\n+          \"line_start\": 38,\n+          \"line_end\": 38,\n+          \"column_start\": 12,\n+          \"column_end\": 15,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"        if (c) {\",\n+              \"highlight_start\": 12,\n+              \"highlight_end\": 15\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"c\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `if` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:38:12\n+   |\n+LL |         if (c) {\n+   |            ^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `while` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 803,\n+      \"byte_end\": 818,\n+      \"line_start\": 44,\n+      \"line_end\": 44,\n+      \"column_start\": 10,\n+      \"column_end\": 25,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    while(true && false) {\",\n+          \"highlight_start\": 10,\n+          \"highlight_end\": 25\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 803,\n+          \"byte_end\": 818,\n+          \"line_start\": 44,\n+          \"line_end\": 44,\n+          \"column_start\": 10,\n+          \"column_end\": 25,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    while(true && false) {\",\n+              \"highlight_start\": 10,\n+              \"highlight_end\": 25\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \" true && false\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:44:10\n+   |\n+LL |     while(true && false) {\n+   |          ^^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `for` head expression\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 838,\n+      \"byte_end\": 846,\n+      \"line_start\": 45,\n+      \"line_end\": 45,\n+      \"column_start\": 18,\n+      \"column_end\": 26,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"        for _ in (0 .. 3){\",\n+          \"highlight_start\": 18,\n+          \"highlight_end\": 26\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 838,\n+          \"byte_end\": 846,\n+          \"line_start\": 45,\n+          \"line_end\": 45,\n+          \"column_start\": 18,\n+          \"column_end\": 26,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"        for _ in (0 .. 3){\",\n+              \"highlight_start\": 18,\n+              \"highlight_end\": 26\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"0 .. 3 \",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `for` head expression\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:45:18\n+   |\n+LL |         for _ in (0 .. 3){\n+   |                  ^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `for` head expression\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 905,\n+      \"byte_end\": 913,\n+      \"line_start\": 50,\n+      \"line_end\": 50,\n+      \"column_start\": 14,\n+      \"column_end\": 22,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"    for _ in (0 .. 3) {\",\n+          \"highlight_start\": 14,\n+          \"highlight_end\": 22\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 905,\n+          \"byte_end\": 913,\n+          \"line_start\": 50,\n+          \"line_end\": 50,\n+          \"column_start\": 14,\n+          \"column_end\": 22,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"    for _ in (0 .. 3) {\",\n+              \"highlight_start\": 14,\n+              \"highlight_end\": 22\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"0 .. 3\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `for` head expression\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:50:14\n+   |\n+LL |     for _ in (0 .. 3) {\n+   |              ^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}\n+{\n+  \"message\": \"unnecessary parentheses around `while` condition\",\n+  \"code\": {\n+    \"code\": \"unused_parens\",\n+    \"explanation\": null\n+  },\n+  \"level\": \"warning\",\n+  \"spans\": [\n+    {\n+      \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+      \"byte_start\": 930,\n+      \"byte_end\": 945,\n+      \"line_start\": 51,\n+      \"line_end\": 51,\n+      \"column_start\": 15,\n+      \"column_end\": 30,\n+      \"is_primary\": true,\n+      \"text\": [\n+        {\n+          \"text\": \"        while (true && false) {\",\n+          \"highlight_start\": 15,\n+          \"highlight_end\": 30\n+        }\n+      ],\n+      \"label\": null,\n+      \"suggested_replacement\": null,\n+      \"suggestion_applicability\": null,\n+      \"expansion\": null\n+    }\n+  ],\n+  \"children\": [\n+    {\n+      \"message\": \"remove these parentheses\",\n+      \"code\": null,\n+      \"level\": \"help\",\n+      \"spans\": [\n+        {\n+          \"file_name\": \"$DIR/unused_parens_remove_json_suggestion.rs\",\n+          \"byte_start\": 930,\n+          \"byte_end\": 945,\n+          \"line_start\": 51,\n+          \"line_end\": 51,\n+          \"column_start\": 15,\n+          \"column_end\": 30,\n+          \"is_primary\": true,\n+          \"text\": [\n+            {\n+              \"text\": \"        while (true && false) {\",\n+              \"highlight_start\": 15,\n+              \"highlight_end\": 30\n+            }\n+          ],\n+          \"label\": null,\n+          \"suggested_replacement\": \"true && false\",\n+          \"suggestion_applicability\": \"MachineApplicable\",\n+          \"expansion\": null\n+        }\n+      ],\n+      \"children\": [],\n+      \"rendered\": null\n+    }\n+  ],\n+  \"rendered\": \"warning: unnecessary parentheses around `while` condition\n+  --> $DIR/unused_parens_remove_json_suggestion.rs:51:15\n+   |\n+LL |         while (true && false) {\n+   |               ^^^^^^^^^^^^^^^ help: remove these parentheses\n+\n+\"\n+}"}]}