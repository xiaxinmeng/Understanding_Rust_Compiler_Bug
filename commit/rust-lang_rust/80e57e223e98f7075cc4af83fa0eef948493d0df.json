{"sha": "80e57e223e98f7075cc4af83fa0eef948493d0df", "node_id": "C_kwDOAAsO6NoAKDgwZTU3ZTIyM2U5OGY3MDc1Y2M0YWY4M2ZhMGVlZjk0ODQ5M2QwZGY", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-02-16T04:05:24Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-03-24T05:31:57Z"}, "message": "Reduce rightward drift", "tree": {"sha": "be18bf695900dcb19680fd9235b98a12913e4eda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be18bf695900dcb19680fd9235b98a12913e4eda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e57e223e98f7075cc4af83fa0eef948493d0df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e57e223e98f7075cc4af83fa0eef948493d0df", "html_url": "https://github.com/rust-lang/rust/commit/80e57e223e98f7075cc4af83fa0eef948493d0df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e57e223e98f7075cc4af83fa0eef948493d0df/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d915606d50c273b084bf71bff1f31e347f0ccdee", "url": "https://api.github.com/repos/rust-lang/rust/commits/d915606d50c273b084bf71bff1f31e347f0ccdee", "html_url": "https://github.com/rust-lang/rust/commit/d915606d50c273b084bf71bff1f31e347f0ccdee"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "89cb1c89f819096e86228c13873b321c421ed177", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/80e57e223e98f7075cc4af83fa0eef948493d0df/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e57e223e98f7075cc4af83fa0eef948493d0df/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=80e57e223e98f7075cc4af83fa0eef948493d0df", "patch": "@@ -1255,41 +1255,40 @@ impl<'a> Parser<'a> {\n         );\n         err.span_label(op_span, &format!(\"not a valid {} operator\", kind.fixity));\n \n-        if let ExprKind::Path(_, path) = &base.kind {\n-            if let [segment] = path.segments.as_slice() {\n-                let ident = segment.ident;\n-                // (pre, post)\n-                let spans = match kind.fixity {\n-                    UnaryFixity::Pre => (op_span, ident.span.shrink_to_hi()),\n-                    UnaryFixity::Post => (ident.span.shrink_to_lo(), op_span),\n-                };\n+        let help_base_case = |mut err: DiagnosticBuilder<'_>, base| {\n+            err.help(&format!(\"use `{}= 1` instead\", kind.op.chr()));\n+            err.emit();\n+            Ok(base)\n+        };\n \n-                if !ident.is_reserved() {\n-                    if kind.standalone {\n-                        return self.inc_dec_standalone_recovery(base, err, kind, ident, spans);\n-                    } else {\n-                        match kind.fixity {\n-                            UnaryFixity::Pre => {\n-                                return self.prefix_inc_dec_suggest_and_recover(\n-                                    base, err, kind, ident, spans,\n-                                );\n-                            }\n-                            UnaryFixity::Post => {\n-                                return self.postfix_inc_dec_suggest_and_recover(\n-                                    base, err, kind, ident, spans,\n-                                );\n-                            }\n-                        }\n-                    }\n+        let ExprKind::Path(_, path) = &base.kind\n+            else { return help_base_case(err, base) };\n+        let [segment] = path.segments.as_slice()\n+            else { return help_base_case(err, base) };\n+        let ident = segment.ident;\n+\n+        // (pre, post)\n+        let spans = match kind.fixity {\n+            UnaryFixity::Pre => (op_span, ident.span.shrink_to_hi()),\n+            UnaryFixity::Post => (ident.span.shrink_to_lo(), op_span),\n+        };\n+\n+        if ident.is_reserved() {\n+            return help_base_case(err, base);\n+        }\n+\n+        if kind.standalone {\n+            self.inc_dec_standalone_recovery(base, err, kind, ident, spans)\n+        } else {\n+            match kind.fixity {\n+                UnaryFixity::Pre => {\n+                    self.prefix_inc_dec_suggest_and_recover(base, err, kind, ident, spans)\n+                }\n+                UnaryFixity::Post => {\n+                    self.postfix_inc_dec_suggest_and_recover(base, err, kind, ident, spans)\n                 }\n             }\n         }\n-\n-        // base case\n-        err.help(&format!(\"use `{}= 1` instead\", kind.op.chr()));\n-        err.emit();\n-\n-        Ok(base)\n     }\n \n     fn prefix_inc_dec_suggest_and_recover("}]}