{"sha": "c2890ed426aaef4b680848e793a2a741e517a6cc", "node_id": "C_kwDOAAsO6NoAKGMyODkwZWQ0MjZhYWVmNGI2ODA4NDhlNzkzYTJhNzQxZTUxN2E2Y2M", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-21T15:22:13Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-21T21:21:04Z"}, "message": "Add overlap mode", "tree": {"sha": "e382d647fea9a634fef0149362d4c70124759a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e382d647fea9a634fef0149362d4c70124759a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2890ed426aaef4b680848e793a2a741e517a6cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmHrI8AACgkQgTGiTgx5\n769eCg/+MVz9MbbFblIZ7t9SX3pcO2O2oNKEXKb3O7H2UAgsnBRxEY+z6P2ZE8fC\nbwJTGvPR0J3KxKVvsmLUrJptIkPzn93ppvYRUHH4EkZd7ROK8kpiNvYsgp8Nq6LS\n0ASzCANxWCVwj8u648EfMj5Fg7MEkHxBs0sr8fOTvPh4pUm9Mahyf5D5FzKRGruS\njpQlWaO+SNUZ0e+ak6M5DwxG/O6cuLLZZQlnH0uQF7tqe2TcQU+f07IeqCs9iLsJ\nagP6XV3KzZ4rojHt5piFDnWDY3pD/rPp01zt4K/wYpoJApSGft1hgwYfkDY4pTHb\nZ32v1XNvThQV5oZOx/Sdk11gIveR2zbLgCwnvN2OPeqzYyuv+bwddJUonmlldQKa\n4AcMOoqD+C2GSocUpuLg6Yjq7CjcSANqWkOO/Lp3T4S5ynhcclKTjhGsYPNVt+pi\nUMUTm+N+AyQ4Q5nxZOKmYc0Swpl0jsHXhhDL17ChAtod95QYQFeTX2i9fp6TC168\nJ2opF5/hKL3Qovv58aNpqXrxE2p129C0439DKeqADoxA93GQuhmUy0sjpQ0rFt2x\nPTLCeTgZKgVK7+ZpY30lQT0fCIFzKFtXvztzDasHK6WK/sZjUHcW3WdXpyXDCkl8\nEw/nCliBqW25X3xFR1rgPLUTsJcHg93pPVVbaIG9b+7qEI7C6ow=\n=O9bu\n-----END PGP SIGNATURE-----", "payload": "tree e382d647fea9a634fef0149362d4c70124759a01\nparent b2a45f064514e06908564153014f8860b8b206d2\nauthor Santiago Pastorino <spastorino@gmail.com> 1642778533 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1642800064 -0300\n\nAdd overlap mode\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2890ed426aaef4b680848e793a2a741e517a6cc", "html_url": "https://github.com/rust-lang/rust/commit/c2890ed426aaef4b680848e793a2a741e517a6cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2890ed426aaef4b680848e793a2a741e517a6cc/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2a45f064514e06908564153014f8860b8b206d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2a45f064514e06908564153014f8860b8b206d2", "html_url": "https://github.com/rust-lang/rust/commit/b2a45f064514e06908564153014f8860b8b206d2"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "170740d2cbdc1f8282cd256bae050d2ac068d7d4", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c2890ed426aaef4b680848e793a2a741e517a6cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2890ed426aaef4b680848e793a2a741e517a6cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=c2890ed426aaef4b680848e793a2a741e517a6cc", "patch": "@@ -135,6 +135,25 @@ fn with_fresh_ty_vars<'cx, 'tcx>(\n     header\n }\n \n+enum OverlapMode {\n+    Stable,\n+    Strict,\n+}\n+\n+fn overlap_mode<'tcx>(tcx: TyCtxt<'tcx>, impl1_def_id: DefId, impl2_def_id: DefId) -> OverlapMode {\n+    if tcx.has_attr(impl1_def_id, sym::rustc_strict_coherence)\n+        != tcx.has_attr(impl2_def_id, sym::rustc_strict_coherence)\n+    {\n+        bug!(\"Use strict coherence on both impls\",);\n+    }\n+\n+    if tcx.has_attr(impl1_def_id, sym::rustc_strict_coherence) {\n+        OverlapMode::Strict\n+    } else {\n+        OverlapMode::Stable\n+    }\n+}\n+\n /// Can both impl `a` and impl `b` be satisfied by a common type (including\n /// where-clauses)? If so, returns an `ImplHeader` that unifies the two impls.\n fn overlap<'cx, 'tcx>(\n@@ -169,10 +188,8 @@ fn overlap_within_probe<'cx, 'tcx>(\n     let impl1_header = with_fresh_ty_vars(selcx, param_env, impl1_def_id);\n     let impl2_header = with_fresh_ty_vars(selcx, param_env, impl2_def_id);\n \n-    let strict_coherence = tcx.has_attr(impl1_def_id, sym::rustc_strict_coherence)\n-        && tcx.has_attr(impl2_def_id, sym::rustc_strict_coherence);\n-\n-    if stable_disjoint(selcx, param_env, &impl1_header, impl2_header, strict_coherence) {\n+    let overlap_mode = overlap_mode(tcx, impl1_def_id, impl2_def_id);\n+    if stable_disjoint(selcx, param_env, &impl1_header, impl2_header, overlap_mode) {\n         return None;\n     }\n \n@@ -200,7 +217,7 @@ fn stable_disjoint<'cx, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     impl1_header: &ty::ImplHeader<'tcx>,\n     impl2_header: ty::ImplHeader<'tcx>,\n-    strict_coherence: bool,\n+    overlap_mode: OverlapMode,\n ) -> bool {\n     debug!(\"overlap: impl1_header={:?}\", impl1_header);\n     debug!(\"overlap: impl2_header={:?}\", impl2_header);\n@@ -258,10 +275,11 @@ fn stable_disjoint<'cx, 'tcx>(\n         .find(|o| {\n             // if both impl headers are set to strict coherence it means that this will be accepted\n             // only if it's stated that T: !Trait. So only prove that the negated obligation holds.\n-            if strict_coherence {\n-                strict_check(selcx, o)\n-            } else {\n-                loose_check(selcx, o) || tcx.features().negative_impls && strict_check(selcx, o)\n+            match overlap_mode {\n+                OverlapMode::Stable => {\n+                    loose_check(selcx, o) || tcx.features().negative_impls && strict_check(selcx, o)\n+                }\n+                OverlapMode::Strict => strict_check(selcx, o),\n             }\n         });\n     // FIXME: the call to `selcx.predicate_may_hold_fatal` above should be ported"}]}