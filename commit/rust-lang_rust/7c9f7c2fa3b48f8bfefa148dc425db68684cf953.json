{"sha": "7c9f7c2fa3b48f8bfefa148dc425db68684cf953", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOWY3YzJmYTNiNDhmOGJmZWZhMTQ4ZGM0MjVkYjY4Njg0Y2Y5NTM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-07T16:01:12Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:34Z"}, "message": "Args first, then params", "tree": {"sha": "30e9a24a2a00e966f19f369db94f0fb092cc4366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e9a24a2a00e966f19f369db94f0fb092cc4366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c9f7c2fa3b48f8bfefa148dc425db68684cf953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9f7c2fa3b48f8bfefa148dc425db68684cf953", "html_url": "https://github.com/rust-lang/rust/commit/7c9f7c2fa3b48f8bfefa148dc425db68684cf953", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c9f7c2fa3b48f8bfefa148dc425db68684cf953/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d3d4b1a19f57c57caa1803bc05b5619eb0df964", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d3d4b1a19f57c57caa1803bc05b5619eb0df964", "html_url": "https://github.com/rust-lang/rust/commit/9d3d4b1a19f57c57caa1803bc05b5619eb0df964"}], "stats": {"total": 50, "additions": 15, "deletions": 35}, "files": [{"sha": "30f1ed1317ddbb62f30b807f97768df5a4d6f616", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7c9f7c2fa3b48f8bfefa148dc425db68684cf953/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9f7c2fa3b48f8bfefa148dc425db68684cf953/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7c9f7c2fa3b48f8bfefa148dc425db68684cf953", "patch": "@@ -196,8 +196,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     /// corresponding to a set of generic parameters.\n     pub fn create_substs_for_generic_args<'a, 'b, A, P, I>(\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-        span: Span,\n-        err_if_invalid: bool,\n         def_id: DefId,\n         parent_substs: &[Kind<'tcx>],\n         has_self: bool,\n@@ -279,48 +277,36 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 let mut progress_arg = true;\n                 match (next_arg, next_param) {\n                     (Some(arg), Some(param)) => {\n-                        match (&param.kind, arg) {\n-                            (GenericParamDefKind::Lifetime, GenericArg::Lifetime(_)) => {\n+                        match (arg, &param.kind) {\n+                            (GenericArg::Lifetime(_), GenericParamDefKind::Lifetime) => {\n                                 push_kind(&mut substs, provided_kind(param, arg));\n                                 next_param = params.next();\n                             }\n-                            (GenericParamDefKind::Lifetime, GenericArg::Type(_)) => {\n-                                // We expected a lifetime argument, but got a type\n-                                // argument. That means we're inferring the lifetimes.\n-                                push_kind(&mut substs, inferred_kind(None, param, infer_types));\n-                                next_param = params.next();\n-                                progress_arg = false;\n-                            }\n-                            (GenericParamDefKind::Type { .. }, GenericArg::Type(_)) => {\n-                                push_kind(&mut substs, provided_kind(param, arg));\n-                                next_param = params.next();\n-                            }\n-                            (GenericParamDefKind::Type { .. }, GenericArg::Lifetime(_)) => {\n+                            (GenericArg::Lifetime(_), GenericParamDefKind::Type { .. }) => {\n                                 // We expected a type argument, but got a lifetime\n                                 // argument. This is an error, but we need to handle it\n                                 // gracefully so we can report sensible errors. In this\n                                 // case, we're simply going to infer the remaining\n                                 // arguments.\n-                                if err_if_invalid {\n-                                    tcx.sess.delay_span_bug(span,\n-                                        \"found a GenericArg::Lifetime where a \\\n-                                            GenericArg::Type was expected\");\n-                                }\n-                                // Exhaust the iterator.\n-                                while next_arg.is_some() {\n-                                    next_arg = args.next();\n-                                }\n+                                args.by_ref().for_each(drop); // Exhaust the iterator.\n+                            }\n+                            (GenericArg::Type(_), GenericParamDefKind::Type { .. }) => {\n+                                push_kind(&mut substs, provided_kind(param, arg));\n+                                next_param = params.next();\n+                            }\n+                            (GenericArg::Type(_), GenericParamDefKind::Lifetime) => {\n+                                // We expected a lifetime argument, but got a type\n+                                // argument. That means we're inferring the lifetimes.\n+                                push_kind(&mut substs, inferred_kind(None, param, infer_types));\n+                                next_param = params.next();\n+                                progress_arg = false;\n                             }\n                         }\n                     }\n                     (Some(_), None) => {\n                         // We should never be able to reach this point with well-formed input.\n                         // Getting to this point means the user supplied more arguments than\n                         // there are parameters.\n-                        if err_if_invalid {\n-                            tcx.sess.delay_span_bug(span,\n-                                \"GenericArg did not have matching GenericParamDef\");\n-                        }\n                     }\n                     (None, Some(param)) => {\n                         // If there are fewer arguments than parameters, it means\n@@ -428,8 +414,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n \n         let substs = Self::create_substs_for_generic_args(\n             self.tcx(),\n-            span,\n-            false,\n             def_id,\n             &[][..],\n             self_ty.is_some(),"}, {"sha": "739c2013950c86876aaf37f21b18196ff83e0bb5", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c9f7c2fa3b48f8bfefa148dc425db68684cf953/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9f7c2fa3b48f8bfefa148dc425db68684cf953/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=7c9f7c2fa3b48f8bfefa148dc425db68684cf953", "patch": "@@ -325,8 +325,6 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n         AstConv::create_substs_for_generic_args(\n             self.tcx,\n-            self.span,\n-            false,\n             pick.item.def_id,\n             parent_substs,\n             false,"}, {"sha": "f37ea8191223124c100eb3e90308b9d333c2060f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c9f7c2fa3b48f8bfefa148dc425db68684cf953/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9f7c2fa3b48f8bfefa148dc425db68684cf953/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7c9f7c2fa3b48f8bfefa148dc425db68684cf953", "patch": "@@ -4957,8 +4957,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let substs = AstConv::create_substs_for_generic_args(\n             self.tcx,\n-            span,\n-            true,\n             def_id,\n             &[][..],\n             has_self,"}]}