{"sha": "8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "node_id": "C_kwDOAAsO6NoAKDhhOTdiNDgxMmE3YTQ2YmI1MjA2NDg3YzI0NTViOWM1YmZjYmQxYjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-22T20:48:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-22T20:48:33Z"}, "message": "Auto merge of #106054 - matthiaskrgr:rollup-38epsfh, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #105567 (KCFI test: Also support LLVM 16 output)\n - #105847 (Ensure param-env is const before calling `eval_to_valtree`)\n - #105983 (Add a missing early return in drop tracking `handle_uninhabited_return`)\n - #106027 (rustdoc: simplify CSS and DOM for more-scraped-examples)\n - #106035 (Migrate search tab title color to CSS variable)\n - #106037 (Add regression test for #94293)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "07729f9a28b88920d82e17528075cb9d5022b7cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07729f9a28b88920d82e17528075cb9d5022b7cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "html_url": "https://github.com/rust-lang/rust/commit/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca80b9a81d495f543cdc122fa330c7f68fff3a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cca80b9a81d495f543cdc122fa330c7f68fff3a8", "html_url": "https://github.com/rust-lang/rust/commit/cca80b9a81d495f543cdc122fa330c7f68fff3a8"}, {"sha": "ee43f34700304e73d4e58fc643186717f1851659", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee43f34700304e73d4e58fc643186717f1851659", "html_url": "https://github.com/rust-lang/rust/commit/ee43f34700304e73d4e58fc643186717f1851659"}], "stats": {"total": 250, "additions": 211, "deletions": 39}, "files": [{"sha": "fcc6f8ea85282673c6f790d08ab13af0a85520f0", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -577,8 +577,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Unevaluated(uv) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;\n                 let cid = GlobalId { instance, promoted: None };\n-                self.ctfe_query(span, |tcx| tcx.eval_to_valtree(self.param_env.and(cid)))?\n-                    .unwrap_or_else(|| bug!(\"unable to create ValTree for {uv:?}\"))\n+                self.ctfe_query(span, |tcx| {\n+                    tcx.eval_to_valtree(self.param_env.with_const().and(cid))\n+                })?\n+                .unwrap_or_else(|| bug!(\"unable to create ValTree for {uv:?}\"))\n             }\n             ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n                 span_bug!(self.cur_span(), \"unexpected ConstKind in ctfe: {val:?}\")"}, {"sha": "16806fdba4fbc2113c766be2ed489c032b5f1fda", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -233,6 +233,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n             self.tcx()\n                 .sess\n                 .delay_span_bug(expr.span, format!(\"could not resolve infer vars in `{ty}`\"));\n+            return;\n         }\n         let ty = self.tcx().erase_regions(ty);\n         let m = self.tcx().parent_module(expr.hir_id).to_def_id();"}, {"sha": "8bccf68029aa338c5ea69af74fdcc7a2b50f0b08", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -3005,8 +3005,7 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n                   </summary>\\\n                   <div class=\\\"hide-more\\\">Hide additional examples</div>\\\n                   <div class=\\\"more-scraped-examples\\\">\\\n-                    <div class=\\\"toggle-line\\\"><div class=\\\"toggle-line-inner\\\"></div></div>\\\n-                    <div class=\\\"more-scraped-examples-inner\\\">\"\n+                    <div class=\\\"toggle-line\\\"><div class=\\\"toggle-line-inner\\\"></div></div>\"\n         );\n \n         // Only generate inline code for MAX_FULL_EXAMPLES number of examples. Otherwise we could\n@@ -3030,7 +3029,7 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n             write!(w, \"</ul></div>\");\n         }\n \n-        write!(w, \"</div></div></details>\");\n+        write!(w, \"</div></details>\");\n     }\n \n     write!(w, \"</div>\");"}, {"sha": "3ea83cc41ef7e1d633d791f5e19320f8e6ba5966", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -1281,6 +1281,7 @@ a.test-arrow:hover {\n #titles > button > div.count {\n \tdisplay: inline-block;\n \tfont-size: 1rem;\n+\tcolor: var(--search-tab-title-count-color);\n }\n \n #src-sidebar-toggle {\n@@ -1991,20 +1992,15 @@ in storage.js\n }\n \n .more-scraped-examples {\n-\tmargin-left: 5px;\n-\tdisplay: flex;\n-\tflex-direction: row;\n-}\n-\n-.more-scraped-examples-inner {\n-\t/* 20px is width of toggle-line + toggle-line-inner */\n-\twidth: calc(100% - 20px);\n+\tmargin-left: 25px;\n+\tposition: relative;\n }\n \n .toggle-line {\n-\talign-self: stretch;\n-\tmargin-right: 10px;\n-\tmargin-top: 5px;\n+\tposition: absolute;\n+\ttop: 5px;\n+\tbottom: 0;\n+\tright: calc(100% + 10px);\n \tpadding: 0 4px;\n \tcursor: pointer;\n }"}, {"sha": "1355ae9c2bacd0bf63a32fef684ef34595c15fc1", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -45,6 +45,7 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--search-color: #fff;\n \t--search-results-alias-color: #c5c5c5;\n \t--search-results-grey-color: #999;\n+\t--search-tab-title-count-color: #888;\n \t--stab-background-color: #314559;\n \t--stab-code-color: #e6e1cf;\n \t--code-highlight-kw-color: #ff7733;\n@@ -175,10 +176,6 @@ pre, .rustdoc.source .example-wrap {\n \tborder-bottom: 1px solid rgba(242, 151, 24, 0.3);\n }\n \n-#titles > button > div.count {\n-\tcolor: #888;\n-}\n-\n /* rules that this theme does not need to set, here to satisfy the rule checker */\n /* note that a lot of these are partially set in some way (meaning they are set\n individually rather than as a group) */"}, {"sha": "84449542f22bf960d3d9d293e06beb1f4764cda6", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -40,6 +40,7 @@\n \t--search-color: #111;\n \t--search-results-alias-color: #fff;\n \t--search-results-grey-color: #ccc;\n+\t--search-tab-title-count-color: #888;\n \t--stab-background-color: #314559;\n \t--stab-code-color: #e6e1cf;\n \t--code-highlight-kw-color: #ab8ac1;\n@@ -96,10 +97,6 @@\n \tbackground-color: #353535;\n }\n \n-#titles > button > div.count {\n-\tcolor: #888;\n-}\n-\n .scraped-example-list .scrape-help {\n \tborder-color: #aaa;\n \tcolor: #eee;"}, {"sha": "68dc0ce539b053c522d08496da285db81c8e8b23", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -40,6 +40,7 @@\n \t--search-color: #000;\n \t--search-results-alias-color: #000;\n \t--search-results-grey-color: #999;\n+\t--search-tab-title-count-color: #888;\n \t--stab-background-color: #fff5d6;\n \t--stab-code-color: #000;\n \t--code-highlight-kw-color: #8959a8;\n@@ -93,10 +94,6 @@\n \tborder-top-color: #0089ff;\n }\n \n-#titles > button > div.count {\n-\tcolor: #888;\n-}\n-\n .scraped-example-list .scrape-help {\n \tborder-color: #555;\n \tcolor: #333;"}, {"sha": "8e0d02550ee94a5fa859adb0edcd5c511c452965", "filename": "src/test/codegen/sanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-kcfi-emit-kcfi-operand-bundle-itanium-cxx-abi.rs?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -20,24 +20,21 @@ impl Copy for i32 {}\n \n pub fn foo(f: fn(i32) -> i32, arg: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}foo\n-    // FIXME(rcvalle): Change <unknown kind #36> to !kcfi_type when Rust is updated to LLVM 16\n-    // CHECK-SAME: {{.*}}!<unknown kind #36> ![[TYPE1:[0-9]+]]\n+    // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE1:[0-9]+]]\n     // CHECK: call i32 %f(i32 %arg){{.*}}[ \"kcfi\"(i32 -1666898348) ]\n     f(arg)\n }\n \n pub fn bar(f: fn(i32, i32) -> i32, arg1: i32, arg2: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}bar\n-    // FIXME(rcvalle): Change <unknown kind #36> to !kcfi_type when Rust is updated to LLVM 16\n-    // CHECK-SAME: {{.*}}!<unknown kind #36> ![[TYPE2:[0-9]+]]\n+    // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE2:[0-9]+]]\n     // CHECK: call i32 %f(i32 %arg1, i32 %arg2){{.*}}[ \"kcfi\"(i32 -1789026986) ]\n     f(arg1, arg2)\n }\n \n pub fn baz(f: fn(i32, i32, i32) -> i32, arg1: i32, arg2: i32, arg3: i32) -> i32 {\n     // CHECK-LABEL: define{{.*}}baz\n-    // FIXME(rcvalle): Change <unknown kind #36> to !kcfi_type when Rust is updated to LLVM 16\n-    // CHECK-SAME: {{.*}}!<unknown kind #36> ![[TYPE3:[0-9]+]]\n+    // CHECK-SAME: {{.*}}!{{<unknown kind #36>|kcfi_type}} ![[TYPE3:[0-9]+]]\n     // CHECK: call i32 %f(i32 %arg1, i32 %arg2, i32 %arg3){{.*}}[ \"kcfi\"(i32 1248878270) ]\n     f(arg1, arg2, arg3)\n }"}, {"sha": "fde9a0ab0bc3095f09164a131de10da405c82983", "filename": "src/test/rustdoc-gui/scrape-examples-layout.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-layout.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-layout.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fscrape-examples-layout.goml?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -10,26 +10,26 @@ assert-property-false: (\n // Check that examples with very long lines have the same width as ones that don't.\n store-property: (\n     clientWidth,\n-    \".more-scraped-examples .scraped-example:nth-child(1) .code-wrapper .src-line-numbers\",\n+    \".more-scraped-examples .scraped-example:nth-child(2) .code-wrapper .src-line-numbers\",\n     \"clientWidth\"\n )\n \n assert-property: (\n-    \".more-scraped-examples .scraped-example:nth-child(2) .code-wrapper .src-line-numbers\",\n+    \".more-scraped-examples .scraped-example:nth-child(3) .code-wrapper .src-line-numbers\",\n     {\"clientWidth\": |clientWidth|}\n )\n \n assert-property: (\n-    \".more-scraped-examples .scraped-example:nth-child(3) .code-wrapper .src-line-numbers\",\n+    \".more-scraped-examples .scraped-example:nth-child(4) .code-wrapper .src-line-numbers\",\n     {\"clientWidth\": |clientWidth|}\n )\n \n assert-property: (\n-    \".more-scraped-examples .scraped-example:nth-child(4) .code-wrapper .src-line-numbers\",\n+    \".more-scraped-examples .scraped-example:nth-child(5) .code-wrapper .src-line-numbers\",\n     {\"clientWidth\": |clientWidth|}\n )\n \n assert-property: (\n-    \".more-scraped-examples .scraped-example:nth-child(5) .code-wrapper .src-line-numbers\",\n+    \".more-scraped-examples .scraped-example:nth-child(6) .code-wrapper .src-line-numbers\",\n     {\"clientWidth\": |clientWidth|}\n )"}, {"sha": "d124045608c126f3246e504d414787f6d506acdd", "filename": "src/test/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -66,6 +66,11 @@ reload:\n \n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n+assert-css: (\n+    \"#titles > button > div.count\",\n+    {\"color\": \"rgb(136, 136, 136)\"},\n+    ALL,\n+)\n assert-css: (\n     \"//*[@class='desc'][text()='Just a normal struct.']\",\n     {\"color\": \"rgb(197, 197, 197)\"},\n@@ -178,6 +183,11 @@ reload:\n \n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n+assert-css: (\n+    \"#titles > button > div.count\",\n+    {\"color\": \"rgb(136, 136, 136)\"},\n+    ALL,\n+)\n assert-css: (\n     \"//*[@class='desc'][text()='Just a normal struct.']\",\n     {\"color\": \"rgb(221, 221, 221)\"},\n@@ -275,6 +285,11 @@ reload:\n \n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n+assert-css: (\n+    \"#titles > button > div.count\",\n+    {\"color\": \"rgb(136, 136, 136)\"},\n+    ALL,\n+)\n assert-css: (\n     \"//*[@class='desc'][text()='Just a normal struct.']\",\n     {\"color\": \"rgb(0, 0, 0)\"},"}, {"sha": "713c5d89a93006afd757dd0dc4117533720cae1e", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-94293.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94293.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94293.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94293.rs?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+#![deny(const_evaluatable_unchecked)]\n+\n+pub struct If<const CONDITION: bool>;\n+pub trait True {}\n+impl True for If<true> {}\n+\n+pub struct FixedI8<const FRAC: u32> {\n+    pub bits: i8,\n+}\n+\n+impl<const FRAC_LHS: u32, const FRAC_RHS: u32> PartialEq<FixedI8<FRAC_RHS>> for FixedI8<FRAC_LHS>\n+where\n+    If<{ FRAC_RHS <= 8 }>: True,\n+{\n+    fn eq(&self, _rhs: &FixedI8<FRAC_RHS>) -> bool {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<const FRAC: u32> PartialEq<i8> for FixedI8<FRAC> {\n+    fn eq(&self, rhs: &i8) -> bool {\n+        let rhs_as_fixed = FixedI8::<0> { bits: *rhs };\n+        PartialEq::eq(self, &rhs_as_fixed)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "315b0cf0fd6bfd4639fb8832955f83ac4f37d468", "filename": "src/test/ui/consts/issue-104396.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.rs?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -0,0 +1,36 @@\n+// compile-flags: -Zmir-opt-level=3\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+//~^ WARN the feature `generic_const_exprs` is incomplete\n+\n+#[inline(always)]\n+fn from_fn_1<const N: usize, F: FnMut(usize) -> f32>(mut f: F) -> [f32; N] {\n+    let mut result = [0.0; N];\n+    let mut i = 0;\n+    while i < N {\n+        result[i] = f(i);\n+        i += 1;\n+    }\n+    result\n+}\n+\n+pub struct TestArray<const N: usize>\n+where\n+    [(); N / 2]:,\n+{\n+    array: [f32; N / 2],\n+}\n+\n+impl<const N: usize> TestArray<N>\n+where\n+    [(); N / 2]:,\n+{\n+    fn from_fn_2<F: FnMut(usize) -> f32>(f: F) -> Self {\n+        Self { array: from_fn_1(f) }\n+    }\n+}\n+\n+fn main() {\n+    TestArray::<4>::from_fn_2(|i| 0.0);\n+}"}, {"sha": "5856bee09a3fc09539fe44f4b1bf2a00af4f6aae", "filename": "src/test/ui/consts/issue-104396.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-104396.stderr?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-104396.rs:4:12\n+   |\n+LL | #![feature(generic_const_exprs)]\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a6589348d301eed4fab5fa461a68a89d616624df", "filename": "src/test/ui/generator/unresolved-ct-var-drop-tracking.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fui%2Fgenerator%2Funresolved-ct-var-drop-tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fui%2Fgenerator%2Funresolved-ct-var-drop-tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Funresolved-ct-var-drop-tracking.rs?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -0,0 +1,15 @@\n+// incremental\n+// edition:2021\n+// compile-flags: -Zdrop-tracking\n+\n+fn main() {\n+    let _ = async {\n+        let s = std::array::from_fn(|_| ()).await;\n+        //~^ ERROR `[(); _]` is not a future\n+        //~| ERROR type inside `async` block must be known in this context\n+        //~| ERROR type inside `async` block must be known in this context\n+        //~| ERROR type inside `async` block must be known in this context\n+        //~| ERROR type inside `async` block must be known in this context\n+        //~| ERROR type inside `async` block must be known in this context\n+    };\n+}"}, {"sha": "9e1fed54c548a5e3d5e2cb0f70997241a0fdb082", "filename": "src/test/ui/generator/unresolved-ct-var-drop-tracking.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fui%2Fgenerator%2Funresolved-ct-var-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9/src%2Ftest%2Fui%2Fgenerator%2Funresolved-ct-var-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Funresolved-ct-var-drop-tracking.stderr?ref=8a97b4812a7a46bb5206487c2455b9c5bfcbd1b9", "patch": "@@ -0,0 +1,78 @@\n+error[E0277]: `[(); _]` is not a future\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                 ---------------------------^^^^^^\n+   |                 |                          |\n+   |                 |                          `[(); _]` is not a future\n+   |                 |                          help: remove the `.await`\n+   |                 this call returns `[(); _]`\n+   |\n+   = help: the trait `Future` is not implemented for `[(); _]`\n+   = note: [(); _] must be a future or must implement `IntoFuture` to be awaited\n+   = note: required for `[(); _]` to implement `IntoFuture`\n+\n+error[E0698]: type inside `async` block must be known in this context\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:17\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n+   |\n+note: the type is part of the `async` block because of this `await`\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                                            ^^^^^^\n+\n+error[E0698]: type inside `async` block must be known in this context\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:17\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n+   |\n+note: the type is part of the `async` block because of this `await`\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                                            ^^^^^^\n+\n+error[E0698]: type inside `async` block must be known in this context\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:17\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n+   |\n+note: the type is part of the `async` block because of this `await`\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                                            ^^^^^^\n+\n+error[E0698]: type inside `async` block must be known in this context\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:17\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n+   |\n+note: the type is part of the `async` block because of this `await`\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                                            ^^^^^^\n+\n+error[E0698]: type inside `async` block must be known in this context\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:17\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                 ^^^^^^^^^^^^^^^^^^^ cannot infer the value of const parameter `N` declared on the function `from_fn`\n+   |\n+note: the type is part of the `async` block because of this `await`\n+  --> $DIR/unresolved-ct-var-drop-tracking.rs:7:44\n+   |\n+LL |         let s = std::array::from_fn(|_| ()).await;\n+   |                                            ^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0277, E0698.\n+For more information about an error, try `rustc --explain E0277`."}]}