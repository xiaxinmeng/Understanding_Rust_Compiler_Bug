{"sha": "dcccb47cb80c2038a162ecadc1dd095d1e491961", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjY2NiNDdjYjgwYzIwMzhhMTYyZWNhZGMxZGQwOTVkMWU0OTE5NjE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-11T19:28:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-11T19:28:30Z"}, "message": "Rollup merge of #75036 - lzutao:pat, r=cuviper\n\nPrefer pattern matching over indexing\n\nQuite a bit nicer IMO.\n\nr? @cuviper", "tree": {"sha": "90a30fb3cc8fd7df8eec5bebcf2eddbce2389c46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90a30fb3cc8fd7df8eec5bebcf2eddbce2389c46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcccb47cb80c2038a162ecadc1dd095d1e491961", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfMvFfCRBK7hj4Ov3rIwAAdHIIADgU/rM7g9JnfJYiUW9DJZO4\nf+YHbMRRKSjJEGepVip4OsDeJUvy4plkZP9/S+vSAIlX1zYI5roXygHt22HjYd/3\nXS/osuB/Zfz63SiGV1TlDt/rqwyhRkCAVV0pfAgHsx4c0VKU4p7zwTutIeSHEnrh\nx/v+fDBKdktHJVYyK7cqYWbfy4PVvBF51CSwttCVq8PkulIeaUcRjv+DJMLv1yer\nWzmYUrsZEPuZzZC+EZDPCcOv5qy9L6SMOQ/mvOElyqei82lK04n/oyWlL4laCQW9\npBYuj+VBH2oceI6twcWR2nphAERT0691/CtU7xnXK6Y8oN9dolQZezV5yFTcnZE=\n=oxDl\n-----END PGP SIGNATURE-----\n", "payload": "tree 90a30fb3cc8fd7df8eec5bebcf2eddbce2389c46\nparent cbe7c5ce705896d4e22bf6096590bc1f17993b78\nparent e8ea6e59f088708a3450334319c251a24b2f9c23\nauthor Tyler Mandry <tmandry@gmail.com> 1597174110 -0700\ncommitter GitHub <noreply@github.com> 1597174110 -0700\n\nRollup merge of #75036 - lzutao:pat, r=cuviper\n\nPrefer pattern matching over indexing\n\nQuite a bit nicer IMO.\n\nr? @cuviper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcccb47cb80c2038a162ecadc1dd095d1e491961", "html_url": "https://github.com/rust-lang/rust/commit/dcccb47cb80c2038a162ecadc1dd095d1e491961", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcccb47cb80c2038a162ecadc1dd095d1e491961/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe7c5ce705896d4e22bf6096590bc1f17993b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe7c5ce705896d4e22bf6096590bc1f17993b78", "html_url": "https://github.com/rust-lang/rust/commit/cbe7c5ce705896d4e22bf6096590bc1f17993b78"}, {"sha": "e8ea6e59f088708a3450334319c251a24b2f9c23", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ea6e59f088708a3450334319c251a24b2f9c23", "html_url": "https://github.com/rust-lang/rust/commit/e8ea6e59f088708a3450334319c251a24b2f9c23"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "ccaacbf1a58a9fbf3f0d45239f325f45e1fd4610", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dcccb47cb80c2038a162ecadc1dd095d1e491961/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcccb47cb80c2038a162ecadc1dd095d1e491961/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=dcccb47cb80c2038a162ecadc1dd095d1e491961", "patch": "@@ -767,10 +767,8 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_compatible(&self) -> Ipv6Addr {\n-        let octets = self.octets();\n-        Ipv6Addr::from([\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, octets[0], octets[1], octets[2], octets[3],\n-        ])\n+        let [a, b, c, d] = self.octets();\n+        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a, b, c, d])\n     }\n \n     /// Converts this address to an IPv4-mapped [IPv6 address].\n@@ -789,10 +787,8 @@ impl Ipv4Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv6_mapped(&self) -> Ipv6Addr {\n-        let octets = self.octets();\n-        Ipv6Addr::from([\n-            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFF, 0xFF, octets[0], octets[1], octets[2], octets[3],\n-        ])\n+        let [a, b, c, d] = self.octets();\n+        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFF, 0xFF, a, b, c, d])\n     }\n }\n \n@@ -1498,11 +1494,12 @@ impl Ipv6Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv4(&self) -> Option<Ipv4Addr> {\n-        match self.segments() {\n-            [0, 0, 0, 0, 0, f, g, h] if f == 0 || f == 0xffff => {\n-                Some(Ipv4Addr::new((g >> 8) as u8, g as u8, (h >> 8) as u8, h as u8))\n-            }\n-            _ => None,\n+        if let [0, 0, 0, 0, 0, 0 | 0xffff, ab, cd] = self.segments() {\n+            let [a, b] = ab.to_be_bytes();\n+            let [c, d] = cd.to_be_bytes();\n+            Some(Ipv4Addr::new(a, b, c, d))\n+        } else {\n+            None\n         }\n     }\n "}]}