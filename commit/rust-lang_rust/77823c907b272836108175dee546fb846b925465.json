{"sha": "77823c907b272836108175dee546fb846b925465", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ODIzYzkwN2IyNzI4MzYxMDgxNzVkZWU1NDZmYjg0NmI5MjU0NjU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-12T00:05:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-16T16:33:54Z"}, "message": "extra: add tests for test::MetricMap, MetricDiff, ratchet.", "tree": {"sha": "e386c4b6b04aa611f8830507a5f478ccb5f4632e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e386c4b6b04aa611f8830507a5f478ccb5f4632e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77823c907b272836108175dee546fb846b925465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77823c907b272836108175dee546fb846b925465", "html_url": "https://github.com/rust-lang/rust/commit/77823c907b272836108175dee546fb846b925465", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77823c907b272836108175dee546fb846b925465/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "274e7a4e4999fe4e59a8ab0d71555f7f3eea3d6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/274e7a4e4999fe4e59a8ab0d71555f7f3eea3d6f", "html_url": "https://github.com/rust-lang/rust/commit/274e7a4e4999fe4e59a8ab0d71555f7f3eea3d6f"}], "stats": {"total": 110, "additions": 105, "deletions": 5}, "files": [{"sha": "98338b4eaedfb145d01e9bfc87650db3483a2e5c", "filename": "src/libextra/test.rs", "status": "modified", "additions": 105, "deletions": 5, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/77823c907b272836108175dee546fb846b925465/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77823c907b272836108175dee546fb846b925465/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=77823c907b272836108175dee546fb846b925465", "patch": "@@ -98,6 +98,7 @@ pub struct Metric {\n pub struct MetricMap(TreeMap<~str,Metric>);\n \n /// Analysis of a single change in metric\n+#[deriving(Eq)]\n pub enum MetricChange {\n     LikelyNoise,\n     MetricAdded,\n@@ -774,8 +775,13 @@ impl MetricMap {\n         json::to_pretty_writer(f, &self.to_json());\n     }\n \n-    /// Compare against another MetricMap\n-    pub fn compare_to_old(&self, old: MetricMap,\n+    /// Compare against another MetricMap. Optionally compare all\n+    /// measurements in the maps using the provided `noise_pct` as a\n+    /// percentage of each value to consider noise. If `None`, each\n+    /// measurement's noise threshold is independently chosen as the\n+    /// maximum of that measurement's recorded noise quantity in either\n+    /// map.\n+    pub fn compare_to_old(&self, old: &MetricMap,\n                           noise_pct: Option<f64>) -> MetricDiff {\n         let mut diff : MetricDiff = TreeMap::new();\n         for old.iter().advance |(k, vold)| {\n@@ -790,7 +796,7 @@ impl MetricMap {\n                     if delta.abs() < noise {\n                         LikelyNoise\n                     } else {\n-                        let pct = delta.abs() / v.value * 100.0;\n+                        let pct = delta.abs() / vold.value * 100.0;\n                         if vold.noise < 0.0 {\n                             // When 'noise' is negative, it means we want\n                             // to see deltas that go up over time, and can\n@@ -857,7 +863,7 @@ impl MetricMap {\n             MetricMap::new()\n         };\n \n-        let diff : MetricDiff = self.compare_to_old(old, pct);\n+        let diff : MetricDiff = self.compare_to_old(&old, pct);\n         let ok = do diff.iter().all() |(_, v)| {\n             match *v {\n                 Regression(_) => false,\n@@ -1006,13 +1012,16 @@ pub mod bench {\n mod tests {\n     use test::{TrFailed, TrIgnored, TrOk, filter_tests, parse_opts,\n                TestDesc, TestDescAndFn,\n+               Metric, MetricMap, MetricAdded, MetricRemoved,\n+               Improvement, Regression, LikelyNoise,\n                StaticTestName, DynTestName, DynTestFn};\n     use test::{TestOpts, run_test};\n \n     use std::either;\n     use std::comm::{stream, SharedChan};\n-    use std::option;\n     use std::vec;\n+    use tempfile;\n+    use std::os;\n \n     #[test]\n     pub fn do_not_run_ignored_tests() {\n@@ -1208,4 +1217,95 @@ mod tests {\n             }\n         }\n     }\n+\n+    #[test]\n+    pub fn test_metricmap_compare() {\n+        let mut m1 = MetricMap::new();\n+        let mut m2 = MetricMap::new();\n+        m1.insert_metric(\"in-both-noise\", 1000.0, 200.0);\n+        m2.insert_metric(\"in-both-noise\", 1100.0, 200.0);\n+\n+        m1.insert_metric(\"in-first-noise\", 1000.0, 2.0);\n+        m2.insert_metric(\"in-second-noise\", 1000.0, 2.0);\n+\n+        m1.insert_metric(\"in-both-want-downwards-but-regressed\", 1000.0, 10.0);\n+        m2.insert_metric(\"in-both-want-downwards-but-regressed\", 2000.0, 10.0);\n+\n+        m1.insert_metric(\"in-both-want-downwards-and-improved\", 2000.0, 10.0);\n+        m2.insert_metric(\"in-both-want-downwards-and-improved\", 1000.0, 10.0);\n+\n+        m1.insert_metric(\"in-both-want-upwards-but-regressed\", 2000.0, -10.0);\n+        m2.insert_metric(\"in-both-want-upwards-but-regressed\", 1000.0, -10.0);\n+\n+        m1.insert_metric(\"in-both-want-upwards-and-improved\", 1000.0, -10.0);\n+        m2.insert_metric(\"in-both-want-upwards-and-improved\", 2000.0, -10.0);\n+\n+        let diff1 = m2.compare_to_old(&m1, None);\n+\n+        assert_eq!(*(diff1.find(&~\"in-both-noise\").get()), LikelyNoise);\n+        assert_eq!(*(diff1.find(&~\"in-first-noise\").get()), MetricRemoved);\n+        assert_eq!(*(diff1.find(&~\"in-second-noise\").get()), MetricAdded);\n+        assert_eq!(*(diff1.find(&~\"in-both-want-downwards-but-regressed\").get()), Regression(100.0));\n+        assert_eq!(*(diff1.find(&~\"in-both-want-downwards-and-improved\").get()), Improvement(50.0));\n+        assert_eq!(*(diff1.find(&~\"in-both-want-upwards-but-regressed\").get()), Regression(50.0));\n+        assert_eq!(*(diff1.find(&~\"in-both-want-upwards-and-improved\").get()), Improvement(100.0));\n+        assert_eq!(diff1.len(), 7);\n+\n+        let diff2 = m2.compare_to_old(&m1, Some(200.0));\n+\n+        assert_eq!(*(diff2.find(&~\"in-both-noise\").get()), LikelyNoise);\n+        assert_eq!(*(diff2.find(&~\"in-first-noise\").get()), MetricRemoved);\n+        assert_eq!(*(diff2.find(&~\"in-second-noise\").get()), MetricAdded);\n+        assert_eq!(*(diff2.find(&~\"in-both-want-downwards-but-regressed\").get()), LikelyNoise);\n+        assert_eq!(*(diff2.find(&~\"in-both-want-downwards-and-improved\").get()), LikelyNoise);\n+        assert_eq!(*(diff2.find(&~\"in-both-want-upwards-but-regressed\").get()), LikelyNoise);\n+        assert_eq!(*(diff2.find(&~\"in-both-want-upwards-and-improved\").get()), LikelyNoise);\n+        assert_eq!(diff2.len(), 7);\n+    }\n+\n+    pub fn ratchet_test() {\n+\n+        let dpth = tempfile::mkdtemp(&os::tmpdir(),\n+                                     \"test-ratchet\").expect(\"missing test for ratchet\");\n+        let pth = dpth.push(\"ratchet.json\");\n+\n+        let mut m1 = MetricMap::new();\n+        m1.insert_metric(\"runtime\", 1000.0, 2.0);\n+        m1.insert_metric(\"throughput\", 50.0, 2.0);\n+\n+        let mut m2 = MetricMap::new();\n+        m2.insert_metric(\"runtime\", 1100.0, 2.0);\n+        m2.insert_metric(\"throughput\", 50.0, 2.0);\n+\n+        m1.save(&pth);\n+\n+        // Ask for a ratchet that should fail to advance.\n+        let (diff1, ok1) = m2.ratchet(&pth, None);\n+        assert_eq!(ok1, false);\n+        assert_eq!(diff1.len(), 2);\n+        assert_eq!(*(diff1.find(&~\"runtime\").get()), Regression(10.0));\n+        assert_eq!(*(diff1.find(&~\"throughput\").get()), LikelyNoise);\n+\n+        // Check that it was not rewritten.\n+        let m3 = MetricMap::load(&pth);\n+        assert_eq!(m3.len(), 2);\n+        assert_eq!(*(m3.find(&~\"runtime\").get()), Metric { value: 1000.0, noise: 2.0 });\n+        assert_eq!(*(m3.find(&~\"throughput\").get()), Metric { value: 50.0, noise: 2.0 });\n+\n+        // Ask for a ratchet with an explicit noise-percentage override,\n+        // that should advance.\n+        let (diff2, ok2) = m2.ratchet(&pth, Some(10.0));\n+        assert_eq!(ok2, true);\n+        assert_eq!(diff2.len(), 2);\n+        assert_eq!(*(diff2.find(&~\"runtime\").get()), LikelyNoise);\n+        assert_eq!(*(diff2.find(&~\"throughput\").get()), LikelyNoise);\n+\n+        // Check that it was rewritten.\n+        let m4 = MetricMap::load(&pth);\n+        assert_eq!(m4.len(), 2);\n+        assert_eq!(*(m4.find(&~\"runtime\").get()), Metric { value: 1100.0, noise: 2.0 });\n+        assert_eq!(*(m4.find(&~\"throughput\").get()), Metric { value: 50.0, noise: 2.0 });\n+\n+        os::remove_dir_recursive(&dpth);\n+    }\n }"}]}