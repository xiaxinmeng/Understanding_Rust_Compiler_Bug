{"sha": "435b540607554ea11fa3d3c71b8b6b17df75f806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNWI1NDA2MDc1NTRlYTExZmEzZDNjNzFiOGI2YjE3ZGY3NWY4MDY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-29T16:14:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-04T11:20:05Z"}, "message": "Update hotplug codegen backend test", "tree": {"sha": "27a6136986066138511509ed9b425765b0f38a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a6136986066138511509ed9b425765b0f38a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/435b540607554ea11fa3d3c71b8b6b17df75f806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/435b540607554ea11fa3d3c71b8b6b17df75f806", "html_url": "https://github.com/rust-lang/rust/commit/435b540607554ea11fa3d3c71b8b6b17df75f806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/435b540607554ea11fa3d3c71b8b6b17df75f806/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d5c79497ce4cfeb3a29c74d3ad646a1a4117369", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5c79497ce4cfeb3a29c74d3ad646a1a4117369", "html_url": "https://github.com/rust-lang/rust/commit/7d5c79497ce4cfeb3a29c74d3ad646a1a4117369"}], "stats": {"total": 21, "additions": 3, "deletions": 18}, "files": [{"sha": "443e2df357fb408fc30a30293718ffb2764ecff3", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/435b540607554ea11fa3d3c71b8b6b17df75f806/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/435b540607554ea11fa3d3c71b8b6b17df75f806/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=435b540607554ea11fa3d3c71b8b6b17df75f806", "patch": "@@ -1,4 +1,5 @@\n #![feature(rustc_private)]\n+#![deny(warnings)]\n \n extern crate rustc_codegen_ssa;\n extern crate rustc_errors;\n@@ -15,44 +16,28 @@ use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::{CodegenResults, CrateInfo};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::ErrorReported;\n-use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n-use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::OutputFilenames;\n use rustc_session::Session;\n-use rustc_target::spec::Target;\n use std::any::Any;\n-use std::path::Path;\n \n struct TheBackend;\n \n impl CodegenBackend for TheBackend {\n-    fn metadata_loader(&self) -> Box<MetadataLoaderDyn> {\n-        Box::new(rustc_codegen_ssa::back::metadata::DefaultMetadataLoader)\n-    }\n-\n-    fn provide(&self, providers: &mut Providers) {}\n-    fn provide_extern(&self, providers: &mut Providers) {}\n-\n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n         metadata: EncodedMetadata,\n         _need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n-        use rustc_hir::def_id::LOCAL_CRATE;\n-\n         Box::new(CodegenResults {\n-            crate_name: tcx.crate_name(LOCAL_CRATE),\n             modules: vec![],\n             allocator_module: None,\n             metadata_module: None,\n             metadata,\n-            windows_subsystem: None,\n             linker_info: LinkerInfo::new(tcx, \"fake_target_cpu\".to_string()),\n             crate_info: CrateInfo::new(tcx),\n         })\n@@ -77,7 +62,7 @@ impl CodegenBackend for TheBackend {\n     ) -> Result<(), ErrorReported> {\n         use rustc_session::{config::CrateType, output::out_filename};\n         use std::io::Write;\n-        let crate_name = codegen_results.crate_name;\n+        let crate_name = codegen_results.crate_info.local_crate_name;\n         for &crate_type in sess.opts.crate_types.iter() {\n             if crate_type != CrateType::Rlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));"}]}