{"sha": "52e7f67128fdaf604e4563eb6445fdd69d42c91e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZTdmNjcxMjhmZGFmNjA0ZTQ1NjNlYjY0NDVmZGQ2OWQ0MmM5MWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-14T10:27:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-14T10:29:43Z"}, "message": "Move impls_future to Type, where it belongs", "tree": {"sha": "ef22688ef7d1486ac4f084ead6bcb7e69d520b65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef22688ef7d1486ac4f084ead6bcb7e69d520b65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52e7f67128fdaf604e4563eb6445fdd69d42c91e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52e7f67128fdaf604e4563eb6445fdd69d42c91e", "html_url": "https://github.com/rust-lang/rust/commit/52e7f67128fdaf604e4563eb6445fdd69d42c91e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52e7f67128fdaf604e4563eb6445fdd69d42c91e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0358f5fdebb7f462e72aaf77eea8c842709127fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0358f5fdebb7f462e72aaf77eea8c842709127fc", "html_url": "https://github.com/rust-lang/rust/commit/0358f5fdebb7f462e72aaf77eea8c842709127fc"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "3461183506584d1fda3d951142ac35b0d8e97c0e", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52e7f67128fdaf604e4563eb6445fdd69d42c91e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e7f67128fdaf604e4563eb6445fdd69d42c91e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=52e7f67128fdaf604e4563eb6445fdd69d42c91e", "patch": "@@ -21,8 +21,8 @@ use hir_expand::{\n     MacroDefId,\n };\n use hir_ty::{\n-    autoderef, display::HirFormatter, expr::ExprValidator, ApplicationTy, Canonical, InEnvironment,\n-    TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk,\n+    autoderef, display::HirFormatter, expr::ExprValidator, method_resolution::implements_trait,\n+    ApplicationTy, Canonical, InEnvironment, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk,\n };\n use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;\n@@ -878,6 +878,22 @@ impl Type {\n         }\n     }\n \n+    /// Checks that particular type `ty` implements `std::future::Future`.\n+    /// This function is used in `.await` syntax completion.\n+    pub fn impls_future(&self, db: &impl HirDatabase) -> bool {\n+        let krate = self.krate;\n+\n+        let std_future_trait =\n+            db.lang_item(krate, \"future_trait\".into()).and_then(|it| it.as_trait());\n+        let std_future_trait = match std_future_trait {\n+            Some(it) => it,\n+            None => return false,\n+        };\n+\n+        let canonical_ty = Canonical { value: self.ty.value.clone(), num_vars: 0 };\n+        implements_trait(&canonical_ty, db, self.ty.environment.clone(), krate, std_future_trait)\n+    }\n+\n     // FIXME: this method is broken, as it doesn't take closures into account.\n     pub fn as_callable(&self) -> Option<CallableDef> {\n         Some(self.ty.value.as_callable()?.0)"}, {"sha": "3df48842d3b121b75df45b634d571913b0dadf67", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/52e7f67128fdaf604e4563eb6445fdd69d42c91e/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e7f67128fdaf604e4563eb6445fdd69d42c91e/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=52e7f67128fdaf604e4563eb6445fdd69d42c91e", "patch": "@@ -21,10 +21,7 @@ use hir_def::{\n use hir_expand::{\n     hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile, MacroCallId, MacroCallKind,\n };\n-use hir_ty::{\n-    method_resolution::{self, implements_trait},\n-    Canonical, InEnvironment, InferenceResult, TraitEnvironment, Ty,\n-};\n+use hir_ty::{method_resolution, Canonical, InEnvironment, InferenceResult, TraitEnvironment, Ty};\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode},\n@@ -395,25 +392,6 @@ impl SourceAnalyzer {\n         )\n     }\n \n-    /// Checks that particular type `ty` implements `std::future::Future`.\n-    /// This function is used in `.await` syntax completion.\n-    pub fn impls_future(&self, db: &impl HirDatabase, ty: Type) -> bool {\n-        let krate = match self.resolver.krate() {\n-            Some(krate) => krate,\n-            None => return false,\n-        };\n-\n-        let std_future_trait =\n-            db.lang_item(krate, \"future_trait\".into()).and_then(|it| it.as_trait());\n-        let std_future_trait = match std_future_trait {\n-            Some(it) => it,\n-            None => return false,\n-        };\n-\n-        let canonical_ty = Canonical { value: ty.ty.value, num_vars: 0 };\n-        implements_trait(&canonical_ty, db, &self.resolver, krate, std_future_trait)\n-    }\n-\n     pub fn expand(\n         &self,\n         db: &impl HirDatabase,"}, {"sha": "55435e6eafe0d786c61cd2b576cdee29a2d56f0a", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52e7f67128fdaf604e4563eb6445fdd69d42c91e/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e7f67128fdaf604e4563eb6445fdd69d42c91e/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=52e7f67128fdaf604e4563eb6445fdd69d42c91e", "patch": "@@ -465,7 +465,7 @@ fn transform_receiver_ty(\n pub fn implements_trait(\n     ty: &Canonical<Ty>,\n     db: &impl HirDatabase,\n-    resolver: &Resolver,\n+    env: Arc<TraitEnvironment>,\n     krate: CrateId,\n     trait_: TraitId,\n ) -> bool {\n@@ -474,7 +474,6 @@ pub fn implements_trait(\n         // anyway, but currently Chalk doesn't implement `dyn/impl Trait` yet\n         return true;\n     }\n-    let env = TraitEnvironment::lower(db, resolver);\n     let goal = generic_implements_goal(db, env, trait_, ty.clone());\n     let solution = db.trait_solve(krate.into(), goal);\n "}, {"sha": "9ab43644e1c98c1ac024cef7a8a4b8daa6c08aa1", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52e7f67128fdaf604e4563eb6445fdd69d42c91e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e7f67128fdaf604e4563eb6445fdd69d42c91e/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=52e7f67128fdaf604e4563eb6445fdd69d42c91e", "patch": "@@ -27,7 +27,7 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n     complete_methods(acc, ctx, &receiver_ty);\n \n     // Suggest .await syntax for types that implement Future trait\n-    if ctx.analyzer.impls_future(ctx.db, receiver_ty) {\n+    if receiver_ty.impls_future(ctx.db) {\n         CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), \"await\")\n             .detail(\"expr.await\")\n             .insert_text(\"await\")"}]}