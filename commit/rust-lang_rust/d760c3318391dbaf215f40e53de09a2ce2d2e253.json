{"sha": "d760c3318391dbaf215f40e53de09a2ce2d2e253", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NjBjMzMxODM5MWRiYWYyMTVmNDBlNTNkZTA5YTJjZTJkMmUyNTM=", "commit": {"author": {"name": "Falk H\u00fcffner", "email": "falk@hueffner.de", "date": "2021-09-05T15:09:21Z"}, "committer": {"name": "Falk H\u00fcffner", "email": "falk@hueffner.de", "date": "2021-09-05T15:09:21Z"}, "message": "Change return type for T::{log,log2,log10} to u32. The value is at\nmost 128, and this is consistent with using u32 for small values\nelsewhere (e.g. BITS, count_ones, leading_zeros).", "tree": {"sha": "4a092b6114119560315f17e21bfe7e1952cc57b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a092b6114119560315f17e21bfe7e1952cc57b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d760c3318391dbaf215f40e53de09a2ce2d2e253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d760c3318391dbaf215f40e53de09a2ce2d2e253", "html_url": "https://github.com/rust-lang/rust/commit/d760c3318391dbaf215f40e53de09a2ce2d2e253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d760c3318391dbaf215f40e53de09a2ce2d2e253/comments", "author": null, "committer": null, "parents": [{"sha": "7e1e3eb5e19c7d1a4eabe4da22bf2aa085772766", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1e3eb5e19c7d1a4eabe4da22bf2aa085772766", "html_url": "https://github.com/rust-lang/rust/commit/7e1e3eb5e19c7d1a4eabe4da22bf2aa085772766"}], "stats": {"total": 64, "additions": 29, "deletions": 35}, "files": [{"sha": "e4599067f85f7328cc54286fec615c8ad5becc30", "filename": "library/core/src/num/int_log10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d760c3318391dbaf215f40e53de09a2ce2d2e253/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d760c3318391dbaf215f40e53de09a2ce2d2e253/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=d760c3318391dbaf215f40e53de09a2ce2d2e253", "patch": "@@ -116,8 +116,8 @@ mod unchecked {\n \n macro_rules! impl_checked {\n     ($T:ident) => {\n-        pub const fn $T(val: $T) -> Option<$T> {\n-            if val > 0 { Some(unchecked::$T(val) as $T) } else { None }\n+        pub const fn $T(val: $T) -> Option<u32> {\n+            if val > 0 { Some(unchecked::$T(val)) } else { None }\n         }\n     };\n }"}, {"sha": "77643290cc455fb16813480c08b029b61846a622", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d760c3318391dbaf215f40e53de09a2ce2d2e253/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d760c3318391dbaf215f40e53de09a2ce2d2e253/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=d760c3318391dbaf215f40e53de09a2ce2d2e253", "patch": "@@ -2026,7 +2026,7 @@ macro_rules! int_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log(self, base: Self) -> Self {\n+        pub const fn log(self, base: Self) -> u32 {\n             match self.checked_log(base) {\n                 Some(n) => n,\n                 None => {\n@@ -2060,7 +2060,7 @@ macro_rules! int_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log2(self) -> Self {\n+        pub const fn log2(self) -> u32 {\n             match self.checked_log2() {\n                 Some(n) => n,\n                 None => {\n@@ -2094,7 +2094,7 @@ macro_rules! int_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log10(self) -> Self {\n+        pub const fn log10(self) -> u32 {\n             match self.checked_log10() {\n                 Some(n) => n,\n                 None => {\n@@ -2125,7 +2125,7 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                         without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log(self, base: Self) -> Option<Self> {\n+        pub const fn checked_log(self, base: Self) -> Option<u32> {\n             if self <= 0 || base <= 1 {\n                 None\n             } else {\n@@ -2161,12 +2161,12 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                         without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log2(self) -> Option<Self> {\n+        pub const fn checked_log2(self) -> Option<u32> {\n             if self <= 0 {\n                 None\n             } else {\n                 // SAFETY: We just checked that this number is positive\n-                let log = (Self::BITS - 1) as Self - unsafe { intrinsics::ctlz_nonzero(self) };\n+                let log = (Self::BITS - 1) - unsafe { intrinsics::ctlz_nonzero(self) as u32 };\n                 Some(log)\n             }\n         }\n@@ -2185,11 +2185,8 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                         without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log10(self) -> Option<Self> {\n-            match int_log10::$ActualT(self as $ActualT) {\n-                Some(s) => Some(s as Self),\n-                None => None,\n-            }\n+        pub const fn checked_log10(self) -> Option<u32> {\n+            int_log10::$ActualT(self as $ActualT)\n         }\n \n         /// Computes the absolute value of `self`."}, {"sha": "46e64c33b84d77cb7f207abc3f132db3b7fa2cd5", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d760c3318391dbaf215f40e53de09a2ce2d2e253/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d760c3318391dbaf215f40e53de09a2ce2d2e253/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=d760c3318391dbaf215f40e53de09a2ce2d2e253", "patch": "@@ -660,7 +660,7 @@ macro_rules! uint_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log(self, base: Self) -> Self {\n+        pub const fn log(self, base: Self) -> u32 {\n             match self.checked_log(base) {\n                 Some(n) => n,\n                 None => {\n@@ -694,7 +694,7 @@ macro_rules! uint_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log2(self) -> Self {\n+        pub const fn log2(self) -> u32 {\n             match self.checked_log2() {\n                 Some(n) => n,\n                 None => {\n@@ -728,7 +728,7 @@ macro_rules! uint_impl {\n         #[track_caller]\n         #[rustc_inherit_overflow_checks]\n         #[allow(arithmetic_overflow)]\n-        pub const fn log10(self) -> Self {\n+        pub const fn log10(self) -> u32 {\n             match self.checked_log10() {\n                 Some(n) => n,\n                 None => {\n@@ -759,7 +759,7 @@ macro_rules! uint_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                         without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log(self, base: Self) -> Option<Self> {\n+        pub const fn checked_log(self, base: Self) -> Option<u32> {\n             if self <= 0 || base <= 1 {\n                 None\n             } else {\n@@ -795,12 +795,12 @@ macro_rules! uint_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                         without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log2(self) -> Option<Self> {\n+        pub const fn checked_log2(self) -> Option<u32> {\n             if self <= 0 {\n                 None\n             } else {\n                 // SAFETY: We just checked that this number is positive\n-                let log = (Self::BITS - 1) as Self - unsafe { intrinsics::ctlz_nonzero(self) };\n+                let log = (Self::BITS - 1) - unsafe { intrinsics::ctlz_nonzero(self) as u32 };\n                 Some(log)\n             }\n         }\n@@ -819,11 +819,8 @@ macro_rules! uint_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                         without modifying the original\"]\n         #[inline]\n-        pub const fn checked_log10(self) -> Option<Self> {\n-            match int_log10::$ActualT(self as $ActualT) {\n-                Some(s) => Some(s as Self),\n-                None => None,\n-            }\n+        pub const fn checked_log10(self) -> Option<u32> {\n+            int_log10::$ActualT(self as $ActualT)\n         }\n \n         /// Checked negation. Computes `-self`, returning `None` unless `self =="}, {"sha": "1517e8a952f93b525c90027d248cc609e80a23d7", "filename": "library/core/tests/num/int_log.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d760c3318391dbaf215f40e53de09a2ce2d2e253/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d760c3318391dbaf215f40e53de09a2ce2d2e253/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_log.rs?ref=d760c3318391dbaf215f40e53de09a2ce2d2e253", "patch": "@@ -26,10 +26,10 @@ fn checked_log() {\n         assert_eq!(i.checked_log(4), None);\n     }\n     for i in 1..=i16::MAX {\n-        assert_eq!(i.checked_log(13), Some((i as f32).log(13.0) as i16));\n+        assert_eq!(i.checked_log(13), Some((i as f32).log(13.0) as u32));\n     }\n     for i in 1..=u16::MAX {\n-        assert_eq!(i.checked_log(13), Some((i as f32).log(13.0) as u16));\n+        assert_eq!(i.checked_log(13), Some((i as f32).log(13.0) as u32));\n     }\n }\n \n@@ -46,27 +46,27 @@ fn checked_log2() {\n     assert_eq!(0i16.checked_log2(), None);\n \n     for i in 1..=u8::MAX {\n-        assert_eq!(i.checked_log2(), Some((i as f32).log2() as u8));\n+        assert_eq!(i.checked_log2(), Some((i as f32).log2() as u32));\n     }\n     for i in 1..=u16::MAX {\n         // Guard against Android's imprecise f32::log2 implementation.\n         if i != 8192 && i != 32768 {\n-            assert_eq!(i.checked_log2(), Some((i as f32).log2() as u16));\n+            assert_eq!(i.checked_log2(), Some((i as f32).log2() as u32));\n         }\n     }\n     for i in i8::MIN..=0 {\n         assert_eq!(i.checked_log2(), None);\n     }\n     for i in 1..=i8::MAX {\n-        assert_eq!(i.checked_log2(), Some((i as f32).log2() as i8));\n+        assert_eq!(i.checked_log2(), Some((i as f32).log2() as u32));\n     }\n     for i in i16::MIN..=0 {\n         assert_eq!(i.checked_log2(), None);\n     }\n     for i in 1..=i16::MAX {\n         // Guard against Android's imprecise f32::log2 implementation.\n         if i != 8192 {\n-            assert_eq!(i.checked_log2(), Some((i as f32).log2() as i16));\n+            assert_eq!(i.checked_log2(), Some((i as f32).log2() as u32));\n         }\n     }\n }\n@@ -75,9 +75,9 @@ fn checked_log2() {\n #[test]\n #[cfg(not(target_os = \"android\"))]\n fn checked_log2_not_android() {\n-    assert_eq!(8192u16.checked_log2(), Some((8192f32).log2() as u16));\n-    assert_eq!(32768u16.checked_log2(), Some((32768f32).log2() as u16));\n-    assert_eq!(8192i16.checked_log2(), Some((8192f32).log2() as i16));\n+    assert_eq!(8192u16.checked_log2(), Some((8192f32).log2() as u32));\n+    assert_eq!(32768u16.checked_log2(), Some((32768f32).log2() as u32));\n+    assert_eq!(8192i16.checked_log2(), Some((8192f32).log2() as u32));\n }\n \n #[test]\n@@ -91,10 +91,10 @@ fn checked_log10() {\n         assert_eq!(i.checked_log10(), None);\n     }\n     for i in 1..=i16::MAX {\n-        assert_eq!(i.checked_log10(), Some((i as f32).log10() as i16));\n+        assert_eq!(i.checked_log10(), Some((i as f32).log10() as u32));\n     }\n     for i in 1..=u16::MAX {\n-        assert_eq!(i.checked_log10(), Some((i as f32).log10() as u16));\n+        assert_eq!(i.checked_log10(), Some((i as f32).log10() as u32));\n     }\n }\n "}]}