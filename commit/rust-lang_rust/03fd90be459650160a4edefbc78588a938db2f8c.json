{"sha": "03fd90be459650160a4edefbc78588a938db2f8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZmQ5MGJlNDU5NjUwMTYwYTRlZGVmYmM3ODU4OGE5MzhkYjJmOGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-23T18:00:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-23T18:00:59Z"}, "message": "auto merge of #16612 : nham/rust/twoway_searcher_fix, r=alexcrichton\n\nThere is a check in TwoWaySearcher::new to determine whether the needle is periodic. This is needed because during searching when a match fails, we cannot advance the position by the entire length of the needle when it is periodic, but can only advance by the length of the period.\r\n\r\nThe reason \"bananas\".contains(\"nana\") (and similar searches) were returning false was because the periodicity check was wrong.\r\n\r\nCloses #16589\r\n\r\nAlso, thanks to @Gankro, who came up with many buggy examples.", "tree": {"sha": "aba5af2841c7862a894de3bff3e65ef7206336d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aba5af2841c7862a894de3bff3e65ef7206336d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03fd90be459650160a4edefbc78588a938db2f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03fd90be459650160a4edefbc78588a938db2f8c", "html_url": "https://github.com/rust-lang/rust/commit/03fd90be459650160a4edefbc78588a938db2f8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03fd90be459650160a4edefbc78588a938db2f8c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e3209ab4a7e256730d7c6733f2d800a5dbfdaef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3209ab4a7e256730d7c6733f2d800a5dbfdaef", "html_url": "https://github.com/rust-lang/rust/commit/3e3209ab4a7e256730d7c6733f2d800a5dbfdaef"}, {"sha": "9a43492f59bfc38ed819e361c3cf99aa7b972e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a43492f59bfc38ed819e361c3cf99aa7b972e15", "html_url": "https://github.com/rust-lang/rust/commit/9a43492f59bfc38ed819e361c3cf99aa7b972e15"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "859a651d14cd3f894308589e9150cba08483cfee", "filename": "src/libcore/str.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03fd90be459650160a4edefbc78588a938db2f8c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fd90be459650160a4edefbc78588a938db2f8c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=03fd90be459650160a4edefbc78588a938db2f8c", "patch": "@@ -419,6 +419,8 @@ struct TwoWaySearcher {\n     memory: uint\n }\n \n+// This is the Two-Way search algorithm, which was introduced in the paper:\n+// Crochemore, M., Perrin, D., 1991, Two-way string-matching, Journal of the ACM 38(3):651-675.\n impl TwoWaySearcher {\n     fn new(needle: &[u8]) -> TwoWaySearcher {\n         let (critPos1, period1) = TwoWaySearcher::maximal_suffix(needle, false);\n@@ -437,7 +439,14 @@ impl TwoWaySearcher {\n         let byteset = needle.iter()\n                             .fold(0, |a, &b| (1 << ((b & 0x3f) as uint)) | a);\n \n-        if needle.slice_to(critPos) == needle.slice_from(needle.len() - critPos) {\n+\n+        // The logic here (calculating critPos and period, the final if statement to see which\n+        // period to use for the TwoWaySearcher) is essentially an implementation of the\n+        // \"small-period\" function from the paper (p. 670)\n+        //\n+        // In the paper they check whether `needle.slice_to(critPos)` is a suffix of\n+        // `needle.slice(critPos, critPos + period)`, which is precisely what this does\n+        if needle.slice_to(critPos) == needle.slice(period, period + critPos) {\n             TwoWaySearcher {\n                 critPos: critPos,\n                 period: period,\n@@ -508,6 +517,9 @@ impl TwoWaySearcher {\n         }\n     }\n \n+    // returns (i, p) where i is the \"critical position\", the starting index of\n+    // of maximal suffix, and p is the period of the suffix\n+    // see p. 668 of the paper\n     #[inline]\n     fn maximal_suffix(arr: &[u8], reversed: bool) -> (uint, uint) {\n         let mut left = -1; // Corresponds to i in the paper"}, {"sha": "be2275dcd4a0266ba277cf7065347262abacdbac", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03fd90be459650160a4edefbc78588a938db2f8c/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fd90be459650160a4edefbc78588a938db2f8c/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=03fd90be459650160a4edefbc78588a938db2f8c", "patch": "@@ -8,7 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn check_contains_all_substrings(s: &str) {\n+    assert!(s.contains(\"\"));\n+    for i in range(0, s.len()) {\n+        for j in range(i+1, s.len() + 1) {\n+            assert!(s.contains(s.slice(i, j)));\n+        }\n+    }\n+}\n+\n #[test]\n fn strslice_issue_16589() {\n     assert!(\"bananas\".contains(\"nana\"));\n+\n+    // prior to the fix for #16589, x.contains(\"abcdabcd\") returned false\n+    // test all substrings for good measure\n+    check_contains_all_substrings(\"012345678901234567890123456789bcdabcdabcd\");\n+}\n+\n+\n+#[test]\n+fn test_strslice_contains() {\n+    let x = \"There are moments, Jeeves, when one asks oneself, 'Do trousers matter?'\";\n+    check_contains_all_substrings(x);\n }"}]}