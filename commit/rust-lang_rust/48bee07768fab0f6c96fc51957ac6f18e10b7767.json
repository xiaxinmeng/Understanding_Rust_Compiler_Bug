{"sha": "48bee07768fab0f6c96fc51957ac6f18e10b7767", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YmVlMDc3NjhmYWIwZjZjOTZmYzUxOTU3YWM2ZjE4ZTEwYjc3Njc=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2019-01-16T02:02:28Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2019-01-16T02:02:28Z"}, "message": "make the contribution doc reference the guide more; deduplication", "tree": {"sha": "95afe8f22b2858cd8847898a5a4cede97bfb59a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95afe8f22b2858cd8847898a5a4cede97bfb59a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48bee07768fab0f6c96fc51957ac6f18e10b7767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48bee07768fab0f6c96fc51957ac6f18e10b7767", "html_url": "https://github.com/rust-lang/rust/commit/48bee07768fab0f6c96fc51957ac6f18e10b7767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48bee07768fab0f6c96fc51957ac6f18e10b7767/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ea6e50c1534a23cb51375552c14568db9ee130", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ea6e50c1534a23cb51375552c14568db9ee130", "html_url": "https://github.com/rust-lang/rust/commit/14ea6e50c1534a23cb51375552c14568db9ee130"}], "stats": {"total": 250, "additions": 21, "deletions": 229}, "files": [{"sha": "9924055ca45ea0053a89e8613ef4e524f550da63", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 21, "deletions": 229, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/48bee07768fab0f6c96fc51957ac6f18e10b7767/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/48bee07768fab0f6c96fc51957ac6f18e10b7767/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=48bee07768fab0f6c96fc51957ac6f18e10b7767", "patch": "@@ -19,9 +19,16 @@ hop on [#rust-internals][pound-rust-internals].\n \n As a reminder, all contributors are expected to follow our [Code of Conduct][coc].\n \n+The [rustc-guide] is your friend! It describes how the compiler works and how\n+to contribute to it in more detail than this document.\n+\n+If this is your first time contributing, the [walkthrough] chapter of the guide\n+can give you a good example of how a typical contribution would go.\n+\n [pound-rust-internals]: https://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-internals\n [internals]: https://internals.rust-lang.org\n [coc]: https://www.rust-lang.org/conduct.html\n+[walkthrough]: https://rust-lang.github.io/rustc-guide/walkthrough.html\n \n ## Feature Requests\n [feature-requests]: #feature-requests\n@@ -89,222 +96,14 @@ $ RUST_BACKTRACE=1 rustc ...\n ```\n \n ## The Build System\n-[the-build-system]: #the-build-system\n-\n-Rust's build system allows you to bootstrap the compiler, run tests &\n-benchmarks, generate documentation, install a fresh build of Rust, and more.\n-It's your best friend when working on Rust, allowing you to compile & test\n-your contributions before submission.\n-\n-The build system lives in [the `src/bootstrap` directory][bootstrap] in the\n-project root. Our build system is itself written in Rust and is based on Cargo\n-to actually build all the compiler's crates. If you have questions on the build\n-system internals, try asking in [`#rust-internals`][pound-rust-internals].\n-\n-[bootstrap]: https://github.com/rust-lang/rust/tree/master/src/bootstrap/\n-\n-### Configuration\n-[configuration]: #configuration\n-\n-Before you can start building the compiler you need to configure the build for\n-your system. In most cases, that will just mean using the defaults provided\n-for Rust.\n-\n-To change configuration, you must copy the file `config.toml.example`\n-to `config.toml` in the directory from which you will be running the build, and\n-change the settings provided.\n-\n-There are large number of options provided in this config file that will alter the\n-configuration used in the build process. Some options to note:\n-\n-#### `[llvm]`:\n-- `assertions = true` = This enables LLVM assertions, which makes LLVM misuse cause an assertion failure instead of weird misbehavior. This also slows down the compiler's runtime by ~20%.\n-- `ccache = true` - Use ccache when building llvm\n-\n-#### `[build]`:\n-- `compiler-docs = true` - Build compiler documentation\n-\n-#### `[rust]`:\n-- `debuginfo = true` - Build a compiler with debuginfo. Makes building rustc slower, but then you can use a debugger to debug `rustc`.\n-- `debuginfo-lines = true` - An alternative to `debuginfo = true` that doesn't let you use a debugger, but doesn't make building rustc slower and still gives you line numbers in backtraces.\n-- `debuginfo-tools = true` - Build the extended tools with debuginfo.\n-- `debug-assertions = true` - Makes the log output of `debug!` work.\n-- `optimize = false` - Disable optimizations to speed up compilation of stage1 rust, but makes the stage1 compiler x100 slower.\n-\n-For more options, the `config.toml` file contains commented out defaults, with\n-descriptions of what each option will do.\n-\n-Note: Previously the `./configure` script was used to configure this\n-project. It can still be used, but it's recommended to use a `config.toml`\n-file. If you still have a `config.mk` file in your directory - from\n-`./configure` - you may need to delete it for `config.toml` to work.\n-\n-### Building\n-[building]: #building\n-\n-A default configuration requires around 3.5 GB of disk space, whereas building a debug configuration may require more than 30 GB.\n \n-Dependencies\n-- [build dependencies](README.md#building-from-source)\n-- `gdb` 6.2.0 minimum, 7.1 or later recommended for test builds\n+For info on how to configure and build the compiler, please see [this\n+chapter][rustcguidebuild] of the rustc-guide. This chapter contains info for\n+contributions to the compiler and the standard library. It also lists some\n+really useful commands to the build system (`./x.py`), which could save you a\n+lot of time.\n \n-The build system uses the `x.py` script to control the build process. This script\n-is used to build, test, and document various parts of the compiler. You can\n-execute it as:\n-\n-```sh\n-python x.py build\n-```\n-\n-On some systems you can also use the shorter version:\n-\n-```sh\n-./x.py build\n-```\n-\n-To learn more about the driver and top-level targets, you can execute:\n-\n-```sh\n-python x.py --help\n-```\n-\n-The general format for the driver script is:\n-\n-```sh\n-python x.py <command> [<directory>]\n-```\n-\n-Some example commands are `build`, `test`, and `doc`. These will build, test,\n-and document the specified directory. The second argument, `<directory>`, is\n-optional and defaults to working over the entire compiler. If specified,\n-however, only that specific directory will be built. For example:\n-\n-```sh\n-# build the entire compiler\n-python x.py build\n-\n-# build all documentation\n-python x.py doc\n-\n-# run all test suites\n-python x.py test\n-\n-# build only the standard library\n-python x.py build src/libstd\n-\n-# test only one particular test suite\n-python x.py test src/test/rustdoc\n-\n-# build only the stage0 libcore library\n-python x.py build src/libcore --stage 0\n-```\n-\n-You can explore the build system through the various `--help` pages for each\n-subcommand. For example to learn more about a command you can run:\n-\n-```\n-python x.py build --help\n-```\n-\n-To learn about all possible rules you can execute, run:\n-\n-```\n-python x.py build --help --verbose\n-```\n-\n-Note: Previously `./configure` and `make` were used to build this project.\n-They are still available, but `x.py` is the recommended build system.\n-\n-### Useful commands\n-[useful-commands]: #useful-commands\n-\n-Some common invocations of `x.py` are:\n-\n-- `x.py build --help` - show the help message and explain the subcommand\n-- `x.py build src/libtest --stage 1` - build up to (and including) the first\n-  stage. For most cases we don't need to build the stage2 compiler, so we can\n-  save time by not building it. The stage1 compiler is a fully functioning\n-  compiler and (probably) will be enough to determine if your change works as\n-  expected.\n-- `x.py build src/rustc --stage 1` - This will build just rustc, without libstd.\n-  This is the fastest way to recompile after you changed only rustc source code.\n-  Note however that the resulting rustc binary won't have a stdlib to link\n-  against by default. You can build libstd once with `x.py build src/libstd`,\n-  but it is only guaranteed to work if recompiled, so if there are any issues\n-  recompile it.\n-- `x.py test` - build the full compiler & run all tests (takes a while). This\n-  is what gets run by the continuous integration system against your pull\n-  request. You should run this before submitting to make sure your tests pass\n-  & everything builds in the correct manner.\n-- `x.py test src/libstd --stage 1` - test the standard library without\n-  recompiling stage 2.\n-- `x.py test src/test/run-pass --test-args TESTNAME` - Run a matching set of\n-  tests.\n-  - `TESTNAME` should be a substring of the tests to match against e.g. it could\n-    be the fully qualified test name, or just a part of it.\n-    `TESTNAME=collections::hash::map::test_map::test_capacity_not_less_than_len`\n-    or `TESTNAME=test_capacity_not_less_than_len`.\n-- `x.py test src/test/run-pass --stage 1 --test-args <substring-of-test-name>` -\n-  Run a single rpass test with the stage1 compiler (this will be quicker than\n-  running the command above as we only build the stage1 compiler, not the entire\n-  thing).  You can also leave off the directory argument to run all stage1 test\n-  types.\n-- `x.py test src/libcore --stage 1` - Run stage1 tests in `libcore`.\n-- `x.py test src/tools/tidy` - Check that the source code is in compliance with\n-  Rust's style guidelines. There is no official document describing Rust's full\n-  guidelines as of yet, but basic rules like 4 spaces for indentation and no\n-  more than 99 characters in a single line should be kept in mind when writing\n-  code.\n-\n-### Using your local build\n-[using-local-build]: #using-local-build\n-\n-If you use Rustup to manage your rust install, it has a feature called [\"custom\n-toolchains\"][toolchain-link] that you can use to access your newly-built compiler\n-without having to install it to your system or user PATH. If you've run `python\n-x.py build`, then you can add your custom rustc to a new toolchain like this:\n-\n-[toolchain-link]: https://github.com/rust-lang-nursery/rustup.rs#working-with-custom-toolchains-and-local-builds\n-\n-```\n-rustup toolchain link <name> build/<host-triple>/stage2\n-```\n-\n-Where `<host-triple>` is the build triple for the host (the triple of your\n-computer, by default), and `<name>` is the name for your custom toolchain. (If you\n-added `--stage 1` to your build command, the compiler will be in the `stage1`\n-folder instead.) You'll only need to do this once - it will automatically point\n-to the latest build you've done.\n-\n-Once this is set up, you can use your custom toolchain just like any other. For\n-example, if you've named your toolchain `local`, running `cargo +local build` will\n-compile a project with your custom rustc, setting `rustup override set local` will\n-override the toolchain for your current directory, and `cargo +local doc` will use\n-your custom rustc and rustdoc to generate docs. (If you do this with a `--stage 1`\n-build, you'll need to build rustdoc specially, since it's not normally built in\n-stage 1. `python x.py build --stage 1 src/libstd src/tools/rustdoc` will build\n-rustdoc and libstd, which will allow rustdoc to be run with that toolchain.)\n-\n-### Out-of-tree builds\n-[out-of-tree-builds]: #out-of-tree-builds\n-\n-Rust's `x.py` script fully supports out-of-tree builds - it looks for\n-the Rust source code from the directory `x.py` was found in, but it\n-reads the `config.toml` configuration file from the directory it's\n-run in, and places all build artifacts within a subdirectory named `build`.\n-\n-This means that if you want to do an out-of-tree build, you can just do it:\n-```\n-$ cd my/build/dir\n-$ cp ~/my-config.toml config.toml # Or fill in config.toml otherwise\n-$ path/to/rust/x.py build\n-...\n-$ # This will use the Rust source code in `path/to/rust`, but build\n-$ # artifacts will now be in ./build\n-```\n-\n-It's absolutely fine to have multiple build directories with different\n-`config.toml` configurations using the same code.\n+[rustcguidebuild]: https://rust-lang.github.io/rustc-guide/how-to-build-and-run.html\n \n ## Pull Requests\n [pull-requests]: #pull-requests\n@@ -320,26 +119,13 @@ bring those changes into the source repository.\n \n Please make pull requests against the `master` branch.\n \n-Compiling all of `./x.py test` can take a while. When testing your pull request,\n-consider using one of the more specialized `./x.py` targets to cut down on the\n-amount of time you have to wait. You need to have built the compiler at least\n-once before running these will work, but that\u2019s only one full build rather than\n-one each time.\n-\n-    $ python x.py test --stage 1\n-\n-is one such example, which builds just `rustc`, and then runs the tests. If\n-you\u2019re adding something to the standard library, try\n-\n-    $ python x.py test src/libstd --stage 1\n-\n Please make sure your pull request is in compliance with Rust's style\n guidelines by running\n \n     $ python x.py test src/tools/tidy\n \n Make this check before every pull request (and every new commit in a pull\n-request) ; you can add [git hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)\n+request); you can add [git hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)\n before every push to make sure you never forget to make this check.\n \n All pull requests are reviewed by another person. We have a bot,\n@@ -532,6 +318,12 @@ to check small fixes. For example, `rustdoc src/doc/reference.md` will render\n reference to `doc/reference.html`. The CSS might be messed up, but you can\n verify that the HTML is right.\n \n+Additionally, contributions to the [rustc-guide] are always welcome. Contributions\n+can be made directly at [the\n+rust-lang/rustc-guide](https://github.com/rust-lang/rustc-guide) repo. The issue\n+tracker in that repo is also a great way to find things that need doing. There\n+are issues for beginners and advanced compiler devs alike!\n+\n ## Issue Triage\n [issue-triage]: #issue-triage\n \n@@ -627,7 +419,7 @@ For people new to Rust, and just starting to contribute, or even for\n more seasoned developers, some useful places to look for information\n are:\n \n-* The [rustc guide] contains information about how various parts of the compiler work\n+* The [rustc guide] contains information about how various parts of the compiler work and how to contribute to the compiler\n * [Rust Forge][rustforge] contains additional documentation, including write-ups of how to achieve common tasks\n * The [Rust Internals forum][rif], a place to ask questions and\n   discuss Rust's internals"}]}