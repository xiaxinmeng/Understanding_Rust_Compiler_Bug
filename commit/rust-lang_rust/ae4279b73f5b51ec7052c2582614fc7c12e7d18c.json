{"sha": "ae4279b73f5b51ec7052c2582614fc7c12e7d18c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNDI3OWI3M2Y1YjUxZWM3MDUyYzI1ODI2MTRmYzdjMTJlN2QxOGM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-28T17:08:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-28T17:08:08Z"}, "message": "Merge #9420\n\n9420: fix: Make hover on attribute paths work again r=Veykril a=Veykril\n\nUnfortunately not (yet) unit-testable I believe\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d7971bb9ee9b6056a7181995b65e8eeb59670cb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7971bb9ee9b6056a7181995b65e8eeb59670cb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae4279b73f5b51ec7052c2582614fc7c12e7d18c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg2gH4CRBK7hj4Ov3rIwAAPjcIAH8JdMClzBvt5QXU3cjm1lSw\nRWZctRh+lYc+B2Trq3uS8J21QDfRkb7Vuvf7APV4pBNKBf9LT2Ka5Efa0RC5uKUB\nIoQal6C29goTTVYVfHL+MO3YoedJXlroFfGxiQO961AKHt8YejMAyUF8zgGGRA7d\nZth+CyerQeQCSlpKxTvS9ThoXjW5h51BN0dvqoKQDi1qieWwQ5lQbCVN7sgqEof3\nz5DsBMNPXiLgVR0submULpQjG/v9SnW/mQsoqOaI/XZSxgdlb40RgiiP/xsK/ved\nX2MaynOXXnigi0wDAz6Yk8A7/omh2Kb8Po3BUPJJheBhumJfLyJXcdsdAgZ2io4=\n=v0bF\n-----END PGP SIGNATURE-----\n", "payload": "tree d7971bb9ee9b6056a7181995b65e8eeb59670cb0\nparent 9ef62b0ccd64cb48c85acfdba497badecc6f89c3\nparent 9957220dfe973554c1d4901713748c9f225a8311\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624900088 +0000\ncommitter GitHub <noreply@github.com> 1624900088 +0000\n\nMerge #9420\n\n9420: fix: Make hover on attribute paths work again r=Veykril a=Veykril\n\nUnfortunately not (yet) unit-testable I believe\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae4279b73f5b51ec7052c2582614fc7c12e7d18c", "html_url": "https://github.com/rust-lang/rust/commit/ae4279b73f5b51ec7052c2582614fc7c12e7d18c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae4279b73f5b51ec7052c2582614fc7c12e7d18c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ef62b0ccd64cb48c85acfdba497badecc6f89c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef62b0ccd64cb48c85acfdba497badecc6f89c3", "html_url": "https://github.com/rust-lang/rust/commit/9ef62b0ccd64cb48c85acfdba497badecc6f89c3"}, {"sha": "9957220dfe973554c1d4901713748c9f225a8311", "url": "https://api.github.com/repos/rust-lang/rust/commits/9957220dfe973554c1d4901713748c9f225a8311", "html_url": "https://github.com/rust-lang/rust/commit/9957220dfe973554c1d4901713748c9f225a8311"}], "stats": {"total": 90, "additions": 48, "deletions": 42}, "files": [{"sha": "cd4c4bd308add0e6a6565102f602458cecd4d972", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ae4279b73f5b51ec7052c2582614fc7c12e7d18c/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4279b73f5b51ec7052c2582614fc7c12e7d18c/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=ae4279b73f5b51ec7052c2582614fc7c12e7d18c", "patch": "@@ -11,7 +11,10 @@ use ide_db::{\n };\n use itertools::Itertools;\n use stdx::format_to;\n-use syntax::{algo, ast, match_ast, AstNode, AstToken, Direction, SyntaxKind::*, SyntaxToken, T};\n+use syntax::{\n+    algo, ast, display::fn_as_proc_macro_label, match_ast, AstNode, AstToken, Direction,\n+    SyntaxKind::*, SyntaxToken, T,\n+};\n \n use crate::{\n     display::{macro_label, TryToNav},\n@@ -166,6 +169,7 @@ pub(crate) fn hover(\n \n     let node = token\n         .ancestors()\n+        .take_while(|it| !ast::Item::can_cast(it.kind()))\n         .find(|n| ast::Expr::can_cast(n.kind()) || ast::Pat::can_cast(n.kind()))?;\n \n     let ty = match_ast! {\n@@ -409,16 +413,13 @@ fn hover_for_definition(\n ) -> Option<Markup> {\n     let mod_path = definition_mod_path(db, &def);\n     let (label, docs) = match def {\n-        Definition::Macro(it) => match &it.source(db)?.value {\n-            Either::Left(mac) => {\n-                let label = macro_label(mac);\n-                (label, it.attrs(db).docs())\n-            }\n-            Either::Right(_) => {\n-                // FIXME\n-                return None;\n-            }\n-        },\n+        Definition::Macro(it) => (\n+            match &it.source(db)?.value {\n+                Either::Left(mac) => macro_label(mac),\n+                Either::Right(mac_fn) => fn_as_proc_macro_label(mac_fn),\n+            },\n+            it.attrs(db).docs(),\n+        ),\n         Definition::Field(def) => label_and_docs(db, def),\n         Definition::ModuleDef(it) => match it {\n             hir::ModuleDef::Module(it) => label_and_docs(db, it),"}, {"sha": "dfeee777d692ce5c87df66d3c15d1fb2c078902f", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae4279b73f5b51ec7052c2582614fc7c12e7d18c/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4279b73f5b51ec7052c2582614fc7c12e7d18c/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=ae4279b73f5b51ec7052c2582614fc7c12e7d18c", "patch": "@@ -1308,24 +1308,6 @@ fn test$0() {\n         );\n     }\n \n-    #[test]\n-    fn test_attr_matches_proc_macro_fn() {\n-        check(\n-            r#\"\n-#[proc_macro_attribute]\n-fn my_proc_macro() {}\n-\n-#[my_proc_macro$0]\n-fn test() {}\n-\"#,\n-            expect![[r#\"\n-                my_proc_macro Function FileId(0) 0..45 27..40\n-\n-                FileId(0) 49..62\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn test_const_in_pattern() {\n         check("}, {"sha": "452d87fe75ebae8d7598e3d2d7b8b7630274ece2", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ae4279b73f5b51ec7052c2582614fc7c12e7d18c/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4279b73f5b51ec7052c2582614fc7c12e7d18c/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=ae4279b73f5b51ec7052c2582614fc7c12e7d18c", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    db::HirDatabase, Crate, Field, GenericParam, HasAttrs, HasVisibility, Impl, Label, Local,\n-    MacroDef, Module, ModuleDef, Name, PathResolution, Semantics, Visibility,\n+    db::HirDatabase, Crate, Field, GenericParam, HasVisibility, Impl, Label, Local, MacroDef,\n+    Module, ModuleDef, Name, PathResolution, Semantics, Visibility,\n };\n use syntax::{\n     ast::{self, AstNode, PathSegmentKind},\n@@ -385,15 +385,22 @@ impl NameRefClass {\n             }\n \n             if let Some(resolved) = sema.resolve_path(&path) {\n-                if path.syntax().ancestors().find_map(ast::Attr::cast).is_some() {\n-                    if let PathResolution::Def(ModuleDef::Function(func)) = resolved {\n-                        if func.attrs(sema.db).by_key(\"proc_macro_attribute\").exists() {\n-                            return Some(NameRefClass::Definition(resolved.into()));\n+                return if path.syntax().ancestors().find_map(ast::Attr::cast).is_some() {\n+                    match resolved {\n+                        // Don't wanna collide with builtin attributes here like `test` hence guard\n+                        PathResolution::Def(module @ ModuleDef::Module(_))\n+                            if path.parent_path().is_some() =>\n+                        {\n+                            Some(NameRefClass::Definition(Definition::ModuleDef(module)))\n                         }\n+                        PathResolution::Macro(mac) if mac.kind() == hir::MacroKind::Attr => {\n+                            Some(NameRefClass::Definition(Definition::Macro(mac)))\n+                        }\n+                        _ => None,\n                     }\n                 } else {\n-                    return Some(NameRefClass::Definition(resolved.into()));\n-                }\n+                    Some(NameRefClass::Definition(resolved.into()))\n+                };\n             }\n         }\n "}, {"sha": "2422da23f493fe2d23675337e3513dadb5cf5aa1", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ae4279b73f5b51ec7052c2582614fc7c12e7d18c/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae4279b73f5b51ec7052c2582614fc7c12e7d18c/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=ae4279b73f5b51ec7052c2582614fc7c12e7d18c", "patch": "@@ -77,19 +77,35 @@ pub fn type_label(node: &ast::TypeAlias) -> String {\n }\n \n pub fn macro_label(node: &ast::Macro) -> String {\n-    let name = node.name().map(|name| name.syntax().text().to_string()).unwrap_or_default();\n+    let name = node.name();\n+    let mut s = String::new();\n     match node {\n         ast::Macro::MacroRules(node) => {\n             let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export] \" } else { \"\" };\n-            format!(\"{}macro_rules! {}\", vis, name)\n+            format_to!(s, \"{}macro_rules!\", vis);\n         }\n         ast::Macro::MacroDef(node) => {\n-            let mut s = String::new();\n             if let Some(vis) = node.visibility() {\n                 format_to!(s, \"{} \", vis);\n             }\n-            format_to!(s, \"macro {}\", name);\n-            s\n+            format_to!(s, \"macro\");\n         }\n     }\n+    if let Some(name) = name {\n+        format_to!(s, \" {}\", name);\n+    }\n+    s\n+}\n+\n+pub fn fn_as_proc_macro_label(node: &ast::Fn) -> String {\n+    let name = node.name();\n+    let mut s = String::new();\n+    if let Some(vis) = node.visibility() {\n+        format_to!(s, \"{} \", vis);\n+    }\n+    format_to!(s, \"macro\");\n+    if let Some(name) = name {\n+        format_to!(s, \" {}\", name);\n+    }\n+    s\n }"}]}