{"sha": "1cd30e7b32df602cf455d34ff8042079b8e082a3", "node_id": "C_kwDOAAsO6NoAKDFjZDMwZTdiMzJkZjYwMmNmNDU1ZDM0ZmY4MDQyMDc5YjhlMDgyYTM", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-07-05T21:31:18Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-07-11T21:20:37Z"}, "message": "move else block into the `Local` struct", "tree": {"sha": "8e1718add47e77e23a2895a900767a5e44f38f25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1718add47e77e23a2895a900767a5e44f38f25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cd30e7b32df602cf455d34ff8042079b8e082a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAmLMlCUACgkQPNdIZH7v\nY1kbmA/8Cob9vRR4p5VB4Wl9yr3sF/PWsPWI6Nzr8/kb5ogS0f4ZuBv8FrH3iKsT\nqxy0ZNu+pGy7tOWzEgpdg4buPB0WjU9WvI9DVdISaqC999ywWooPh/G3SYsS0HkJ\nA0fqaLakmO6WZ+kZfL+15nRFMxYJpDucbnvGRQ3r8MkSPdjP6AnbJeWr9u9aCDRW\n24BZss7SG8Y7NVaas0xNOhH3lGoMutr/TQSQs2ooPa5GKtdokCVsd3ibZbV/HA5H\ntjofBKxBmIl22AjGbeQf3VgD7SiHcEM62DZvMOU6uuZfh2OB+CdJAFX43Ive2o5R\nXqwV1Z5OzduV7eoNsdJ4Q0fuFOyYyfzC2aVBInvRqxe/FIYIw5oN7MzpQx0w1jR+\nnCe6TtMTW2MBBXM5mMwYDV5kF89gFDouAcI96T/6vPO60Gha+sDTez9FpLtvye9O\n9BKbwif1vbFqqgmrRPHE78R4gn5ZgtbJSWSGJWCQED9Jz3tabCjIR5xlPI5YcT8a\nNAvI3f9sIBeQAjPh+fb4AX7fqk4ydx7fN2UirB3244ubzngE/8nGVFE4QGAnmuJ+\nGQi8vOvxHmbEtLwRoitE9AU3sHgy4OaB9iaUHn4C5Qvaa913esXCfX/+Oq7tKTF+\nALBUTZj+V/LQ28SeQBCwIdxi0CL43y0KsConx9xx3pj/sq9pjPg=\n=H/Ba\n-----END PGP SIGNATURE-----", "payload": "tree 8e1718add47e77e23a2895a900767a5e44f38f25\nparent 6c529ded8674b89c46052da92399227c3b764c6a\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1657056678 +0200\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1657574437 +0200\n\nmove else block into the `Local` struct\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd30e7b32df602cf455d34ff8042079b8e082a3", "html_url": "https://github.com/rust-lang/rust/commit/1cd30e7b32df602cf455d34ff8042079b8e082a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cd30e7b32df602cf455d34ff8042079b8e082a3/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c529ded8674b89c46052da92399227c3b764c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c529ded8674b89c46052da92399227c3b764c6a", "html_url": "https://github.com/rust-lang/rust/commit/6c529ded8674b89c46052da92399227c3b764c6a"}], "stats": {"total": 269, "additions": 138, "deletions": 131}, "files": [{"sha": "09fcdfc1c9716cba32c2684e1bd2ce0ea1cc00d7", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     };\n                     let local = self.lower_local(local);\n                     self.alias_attrs(hir_id, local.hir_id);\n-                    let kind = hir::StmtKind::Local(local, els);\n+                    let kind = hir::StmtKind::Local(local);\n                     let span = self.lower_span(s.span);\n                     stmts.push(hir::Stmt { hir_id, kind, span });\n                 }\n@@ -105,10 +105,24 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let init = l.kind.init().map(|init| self.lower_expr(init));\n         let hir_id = self.lower_node_id(l.id);\n         let pat = self.lower_pat(&l.pat);\n+        let els = if let LocalKind::InitElse(_, els) = &l.kind {\n+            if !self.sess.features_untracked().let_else {\n+                feature_err(\n+                    &self.sess.parse_sess,\n+                    sym::let_else,\n+                    l.span,\n+                    \"`let...else` statements are unstable\",\n+                )\n+                .emit();\n+            }\n+            Some(self.lower_block(els, false))\n+        } else {\n+            None\n+        };\n         let span = self.lower_span(l.span);\n         let source = hir::LocalSource::Normal;\n         self.lower_attrs(hir_id, &l.attrs);\n-        self.arena.alloc(hir::Local { hir_id, ty, pat, init, span, source })\n+        self.arena.alloc(hir::Local { hir_id, ty, pat, init, els, span, source })\n     }\n \n     fn lower_block_check_mode(&mut self, b: &BlockCheckMode) -> hir::BlockCheckMode {"}, {"sha": "ddd54f7c2089dd906154b67b7bf6133a8cef3d6e", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -284,10 +284,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_local(&mut self, l: &'hir Local<'hir>, e: Option<&'hir Block<'hir>>) {\n+    fn visit_local(&mut self, l: &'hir Local<'hir>) {\n         self.insert(l.span, l.hir_id, Node::Local(l));\n         self.with_parent(l.hir_id, |this| {\n-            intravisit::walk_local(this, l, e);\n+            intravisit::walk_local(this, l);\n         })\n     }\n "}, {"sha": "4da3096f7c3aa9fecea17274ea678f2b1d84597f", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -2146,8 +2146,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             debug_assert!(!a.is_empty());\n             self.attrs.insert(hir_id.local_id, a);\n         }\n-        let local = hir::Local { hir_id, init, pat, source, span: self.lower_span(span), ty: None };\n-        self.stmt(span, hir::StmtKind::Local(self.arena.alloc(local), None))\n+        let local = hir::Local {\n+            hir_id,\n+            init,\n+            pat,\n+            els: None,\n+            source,\n+            span: self.lower_span(span),\n+            ty: None,\n+        };\n+        self.stmt(span, hir::StmtKind::Local(self.arena.alloc(local)))\n     }\n \n     fn block_expr(&mut self, expr: &'hir hir::Expr<'hir>) -> &'hir hir::Block<'hir> {"}, {"sha": "c8a0ed3951100c1dbe50e78c2e38ebed4dbbc9a7", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -1297,7 +1297,7 @@ pub struct Stmt<'hir> {\n pub enum StmtKind<'hir> {\n     /// A local (`let`) binding.\n     /// FIXME: bundle the last two components into another `struct`\n-    Local(&'hir Local<'hir>, Option<&'hir Block<'hir>>),\n+    Local(&'hir Local<'hir>),\n \n     /// An item binding.\n     Item(ItemId),\n@@ -1317,6 +1317,8 @@ pub struct Local<'hir> {\n     pub ty: Option<&'hir Ty<'hir>>,\n     /// Initializer expression to set the value, if any.\n     pub init: Option<&'hir Expr<'hir>>,\n+    /// Else block for a `let...else` binding.\n+    pub els: Option<&'hir Block<'hir>>,\n     pub hir_id: HirId,\n     pub span: Span,\n     /// Can be `ForLoopDesugar` if the `let` statement is part of a `for` loop"}, {"sha": "ef1a30e142cf62beabf9b72da80c8260666b7455", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -310,8 +310,8 @@ pub trait Visitor<'v>: Sized {\n     fn visit_foreign_item(&mut self, i: &'v ForeignItem<'v>) {\n         walk_foreign_item(self, i)\n     }\n-    fn visit_local(&mut self, l: &'v Local<'v>, els: Option<&'v Block<'v>>) {\n-        walk_local(self, l, els)\n+    fn visit_local(&mut self, l: &'v Local<'v>) {\n+        walk_local(self, l)\n     }\n     fn visit_block(&mut self, b: &'v Block<'v>) {\n         walk_block(self, b)\n@@ -466,17 +466,13 @@ pub fn walk_body<'v, V: Visitor<'v>>(visitor: &mut V, body: &'v Body<'v>) {\n     visitor.visit_expr(&body.value);\n }\n \n-pub fn walk_local<'v, V: Visitor<'v>>(\n-    visitor: &mut V,\n-    local: &'v Local<'v>,\n-    els: Option<&'v Block<'v>>,\n-) {\n+pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local<'v>) {\n     // Intentionally visiting the expr first - the initialization expr\n     // dominates the local's definition.\n     walk_list!(visitor, visit_expr, &local.init);\n     visitor.visit_id(local.hir_id);\n     visitor.visit_pat(&local.pat);\n-    if let Some(els) = els {\n+    if let Some(els) = local.els {\n         visitor.visit_block(els);\n     }\n     walk_list!(visitor, visit_ty, &local.ty);\n@@ -1063,7 +1059,7 @@ pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block<'v>) {\n pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt<'v>) {\n     visitor.visit_id(statement.hir_id);\n     match &statement.kind {\n-        StmtKind::Local(ref local, els) => visitor.visit_local(local, *els),\n+        StmtKind::Local(ref local) => visitor.visit_local(local),\n         StmtKind::Item(item) => visitor.visit_nested_item(*item),\n         StmtKind::Expr(ref expression) | StmtKind::Semi(ref expression) => {\n             visitor.visit_expr(expression)"}, {"sha": "e3c97ec357e876808e221f01d6d6992bedc8936f", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -915,8 +915,8 @@ impl<'a> State<'a> {\n     pub fn print_stmt(&mut self, st: &hir::Stmt<'_>) {\n         self.maybe_print_comment(st.span.lo());\n         match st.kind {\n-            hir::StmtKind::Local(loc, els) => {\n-                self.print_local(loc.init, els, |this| this.print_local_decl(loc));\n+            hir::StmtKind::Local(loc) => {\n+                self.print_local(loc.init, loc.els, |this| this.print_local_decl(loc));\n             }\n             hir::StmtKind::Item(item) => self.ann.nested(self, Nested::Item(item)),\n             hir::StmtKind::Expr(expr) => {\n@@ -2305,7 +2305,7 @@ fn expr_requires_semi_to_be_stmt(e: &hir::Expr<'_>) -> bool {\n /// seen the semicolon, and thus don't need another.\n fn stmt_ends_with_semi(stmt: &hir::StmtKind<'_>) -> bool {\n     match *stmt {\n-        hir::StmtKind::Local(_, _) => true,\n+        hir::StmtKind::Local(_) => true,\n         hir::StmtKind::Item(_) => false,\n         hir::StmtKind::Expr(e) => expr_requires_semi_to_be_stmt(e),\n         hir::StmtKind::Semi(..) => false,"}, {"sha": "a0ec7f4fc6f84ffd4255dbd1d5d218716f10e74d", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n-use hir::{Block, LocalSource};\n+use hir::LocalSource;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -953,8 +953,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n         self.infcx.tcx.hir()\n     }\n \n-    fn visit_local(&mut self, local: &'tcx Local<'tcx>, els: Option<&'tcx Block<'tcx>>) {\n-        intravisit::walk_local(self, local, els);\n+    fn visit_local(&mut self, local: &'tcx Local<'tcx>) {\n+        intravisit::walk_local(self, local);\n \n         if let Some(ty) = self.opt_node_type(local.hir_id) {\n             if self.generic_arg_contains_target(ty.into()) {"}, {"sha": "27f67207209dd81cc275b3f1cb9a7e0bac5c5860", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -251,10 +251,10 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         }\n     }\n \n-    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>, e: Option<&'tcx hir::Block<'tcx>>) {\n+    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n         self.with_lint_attrs(l.hir_id, |cx| {\n-            lint_callback!(cx, check_local, l, e);\n-            hir_visit::walk_local(cx, l, e);\n+            lint_callback!(cx, check_local, l);\n+            hir_visit::walk_local(cx, l);\n         })\n     }\n "}, {"sha": "00e96f20d1aaaec4ecd24c2349ecad72949e58da", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -783,9 +783,9 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n         })\n     }\n \n-    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>, e: Option<&'tcx hir::Block<'tcx>>) {\n+    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n         self.with_lint_attrs(l.hir_id, |builder| {\n-            intravisit::walk_local(builder, l, e);\n+            intravisit::walk_local(builder, l);\n         })\n     }\n "}, {"sha": "b1b4229b1f73864d8ffbdfe3c3017e0ab060e13b", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -24,7 +24,7 @@ macro_rules! late_lint_methods {\n             fn check_foreign_item_post(a: &$hir hir::ForeignItem<$hir>);\n             fn check_item(a: &$hir hir::Item<$hir>);\n             fn check_item_post(a: &$hir hir::Item<$hir>);\n-            fn check_local(a: &$hir hir::Local<$hir>, b: Option<&$hir hir::Block<$hir>>);\n+            fn check_local(a: &$hir hir::Local<$hir>);\n             fn check_block(a: &$hir hir::Block<$hir>);\n             fn check_block_post(a: &$hir hir::Block<$hir>);\n             fn check_stmt(a: &$hir hir::Stmt<$hir>);"}, {"sha": "3e99ba5742a4bd0e5b63a9b30370a1506b811707", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -789,7 +789,7 @@ impl<'hir> Map<'hir> {\n                 | Node::ForeignItem(_)\n                 | Node::TraitItem(_)\n                 | Node::ImplItem(_)\n-                | Node::Stmt(Stmt { kind: StmtKind::Local(_, _), .. }) => break,\n+                | Node::Stmt(Stmt { kind: StmtKind::Local(_), .. }) => break,\n                 Node::Expr(expr @ Expr { kind: ExprKind::If(..) | ExprKind::Match(..), .. }) => {\n                     return Some(expr);\n                 }"}, {"sha": "4079470c2551816031c05938e5968e11ea602c47", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -66,15 +66,15 @@ impl<'tcx> Cx<'tcx> {\n                         // ignore for purposes of the MIR\n                         None\n                     }\n-                    hir::StmtKind::Local(local, els) => {\n+                    hir::StmtKind::Local(local) => {\n                         let remainder_scope = region::Scope {\n                             id: block_id,\n                             data: region::ScopeData::Remainder(region::FirstStatementIndex::new(\n                                 index,\n                             )),\n                         };\n \n-                        let else_block = els.map(|els| self.mirror_block(els));\n+                        let else_block = local.els.map(|els| self.mirror_block(els));\n \n                         let mut pattern = self.pattern_from_hir(local.pat);\n                         debug!(?pattern);"}, {"sha": "5bd1fad0bcb9f9cbbe1e9ec2edfff178451afd97", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -75,10 +75,11 @@ impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, '_, 'tcx> {\n         }\n     }\n \n-    fn visit_local(&mut self, loc: &'tcx hir::Local<'tcx>, els: Option<&'tcx hir::Block<'tcx>>) {\n-        intravisit::walk_local(self, loc, els);\n-        if let Some(init) = &loc.init && els.is_some() {\n-            self.check_let(&loc.pat, &init, loc.span);\n+    fn visit_local(&mut self, loc: &'tcx hir::Local<'tcx>) {\n+        intravisit::walk_local(self, loc);\n+        let els = loc.els;\n+        if let Some(init) = loc.init && els.is_some() {\n+            self.check_let(&loc.pat, init, loc.span);\n         }\n \n         let (msg, sp) = match loc.source {\n@@ -1135,7 +1136,7 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n \n     let parent_parent = hir.get_parent_node(parent);\n     let parent_parent_node = hir.get(parent_parent);\n-    if let hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_, Some(_)), span, .. }) =\n+    if let hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_), span, .. }) =\n         parent_parent_node\n     {\n         return LetSource::LetElse(*span);"}, {"sha": "d0723c68a77e8158269a0f0831359d9d7fea4804", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -2311,7 +2311,7 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n         // When checking statements ignore expressions, they will be checked later.\n-        if let hir::StmtKind::Local(ref l, _) = stmt.kind {\n+        if let hir::StmtKind::Local(ref l) = stmt.kind {\n             self.check_attributes(l.hir_id, stmt.span, Target::Statement, None);\n         }\n         intravisit::walk_stmt(self, stmt)"}, {"sha": "a3be827a7ccec3a5f4a1aa16a6dac1bbfdd115cb", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -131,9 +131,9 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_foreign_item(self, i)\n     }\n \n-    fn visit_local(&mut self, l: &'v hir::Local<'v>, e: Option<&'v hir::Block<'v>>) {\n+    fn visit_local(&mut self, l: &'v hir::Local<'v>) {\n         self.record(\"Local\", Id::Node(l.hir_id), l);\n-        hir_visit::walk_local(self, l, e)\n+        hir_visit::walk_local(self, l)\n     }\n \n     fn visit_block(&mut self, b: &'v hir::Block<'v>) {"}, {"sha": "eed3e1579a2313fc6bd67de639bb633d4250f8c7", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -366,12 +366,12 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n         lsets.warn_about_unused_args(body, entry_ln);\n     }\n \n-    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>, els: Option<&'tcx hir::Block<'tcx>>) {\n+    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n         self.add_from_pat(&local.pat);\n-        if els.is_some() {\n+        if local.els.is_some() {\n             self.add_live_node_for_node(local.hir_id, ExprNode(local.span, local.hir_id));\n         }\n-        intravisit::walk_local(self, local, els);\n+        intravisit::walk_local(self, local);\n     }\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n@@ -788,7 +788,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     fn propagate_through_stmt(&mut self, stmt: &hir::Stmt<'_>, succ: LiveNode) -> LiveNode {\n         match stmt.kind {\n-            hir::StmtKind::Local(ref local, els) => {\n+            hir::StmtKind::Local(ref local) => {\n                 // Note: we mark the variable as defined regardless of whether\n                 // there is an initializer.  Initially I had thought to only mark\n                 // the live variable as defined if it was initialized, and then we\n@@ -803,7 +803,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 // initialization, which is mildly more complex than checking\n                 // once at the func header but otherwise equivalent.\n \n-                if let Some(els) = els {\n+                if let Some(els) = local.els {\n                     // Eventually, `let pat: ty = init else { els };` is mostly equivalent to\n                     // `let (bindings, ...) = match init { pat => (bindings, ...), _ => els };`\n                     // except that extended lifetime applies at the `init` location.\n@@ -1341,14 +1341,14 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n // Checking for error conditions\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>, els: Option<&'tcx hir::Block<'tcx>>) {\n+    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n         self.check_unused_vars_in_pat(&local.pat, None, |spans, hir_id, ln, var| {\n             if local.init.is_some() {\n                 self.warn_about_dead_assign(spans, hir_id, ln, var);\n             }\n         });\n \n-        intravisit::walk_local(self, local, els);\n+        intravisit::walk_local(self, local);\n     }\n \n     fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {"}, {"sha": "5560d44aa0d52f5428252a3dd2f1fa2fa06b76ba", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -1275,15 +1275,15 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         intravisit::walk_pat(self, pattern);\n     }\n \n-    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>, els: Option<&'tcx hir::Block<'tcx>>) {\n+    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n         if let Some(init) = local.init {\n             if self.check_expr_pat_type(init.hir_id, init.span) {\n                 // Do not report duplicate errors for `let x = y`.\n                 return;\n             }\n         }\n \n-        intravisit::walk_local(self, local, els);\n+        intravisit::walk_local(self, local);\n     }\n \n     // Check types in item interfaces."}, {"sha": "a4175f4c5f37731a9e8cc0aa679760cf16130038", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -1414,14 +1414,14 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n         intravisit::walk_stmt(self, s)\n     }\n \n-    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>, e: Option<&'tcx hir::Block<'tcx>>) {\n+    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n         self.process_macro_use(l.span);\n         self.process_var_decl(&l.pat);\n \n         // Just walk the initializer, the else branch and type (don't want to walk the pattern again).\n         walk_list!(self, visit_ty, &l.ty);\n         walk_list!(self, visit_expr, &l.init);\n-        walk_list!(self, visit_block, e);\n+        walk_list!(self, visit_block, l.els);\n     }\n \n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {"}, {"sha": "b08fc482186029fbbe3f818e6e11353ac39bd371", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -734,7 +734,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let hir_id = hir.local_def_id_to_hir_id(def_id.as_local()?);\n         let parent_node = hir.get_parent_node(hir_id);\n         match hir.find(parent_node) {\n-            Some(hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(local, _), .. })) => {\n+            Some(hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(local), .. })) => {\n                 get_name(err, &local.pat.kind)\n             }\n             // Different to previous arm because one is `&hir::Local` and the other"}, {"sha": "097b9c3f0f706e33ce68f84d7bda12449efc42e4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -1218,13 +1218,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Type check a `let` statement.\n-    pub fn check_decl_local(\n-        &self,\n-        local: &'tcx hir::Local<'tcx>,\n-        els: Option<&'tcx hir::Block<'tcx>>,\n-    ) {\n+    pub fn check_decl_local(&self, local: &'tcx hir::Local<'tcx>) {\n         self.check_decl(local.into());\n-        if let Some(blk) = els {\n+        if let Some(blk) = local.els {\n             let previous_diverges = self.diverges.get();\n             let else_ty = self.check_block_with_expected(blk, NoExpectation);\n             let cause = self.cause(blk.span, ObligationCauseCode::LetElse);\n@@ -1251,8 +1247,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let old_has_errors = self.has_errors.replace(false);\n \n         match stmt.kind {\n-            hir::StmtKind::Local(l, e) => {\n-                self.check_decl_local(l, e);\n+            hir::StmtKind::Local(l) => {\n+                self.check_decl_local(l);\n             }\n             // Ignore for now.\n             hir::StmtKind::Item(_) => {}\n@@ -1411,7 +1407,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                             source:\n                                                                 hir::LocalSource::AssignDesugar(_),\n                                                             ..\n-                                                        }, _),\n+                                                        }),\n                                                     ..\n                                                 },\n                                                 hir::Stmt {"}, {"sha": "859fc91f517cbb764fcfa872670ed490a41ce8f8", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -99,9 +99,9 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n     // Add explicitly-declared locals.\n-    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>, els: Option<&'tcx hir::Block<'tcx>>) {\n+    fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n         self.declare(local.into());\n-        intravisit::walk_local(self, local, els)\n+        intravisit::walk_local(self, local)\n     }\n \n     fn visit_let_expr(&mut self, let_expr: &'tcx hir::Let<'tcx>) {"}, {"sha": "a1a92c62ad22f070af9be63604a71e45329dc3e6", "filename": "compiler/rustc_typeck/src/check/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregion.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -796,8 +796,8 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n         resolve_expr(self, ex);\n     }\n-    fn visit_local(&mut self, l: &'tcx Local<'tcx>, e: Option<&'tcx Block<'tcx>>) {\n-        resolve_local(self, Some(&l.pat), l.init, e)\n+    fn visit_local(&mut self, l: &'tcx Local<'tcx>) {\n+        resolve_local(self, Some(&l.pat), l.init, l.els)\n     }\n }\n "}, {"sha": "41d241f84aceaf7f7e098d9b40706a2587479ee6", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -321,8 +321,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n         intravisit::walk_pat(self, p);\n     }\n \n-    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>, e: Option<&'tcx hir::Block<'tcx>>) {\n-        intravisit::walk_local(self, l, e);\n+    fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n+        intravisit::walk_local(self, l);\n         let var_ty = self.fcx.local_ty(l.span, l.hir_id).decl_ty;\n         let var_ty = self.resolve(var_ty, &l.span);\n         self.write_ty_to_typeck_results(l.hir_id, var_ty);"}, {"sha": "a344404b97057fa7d5987771e810e7860d1c8645", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -453,11 +453,11 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n     fn walk_stmt(&mut self, stmt: &hir::Stmt<'_>) {\n         match stmt.kind {\n-            hir::StmtKind::Local(hir::Local { pat, init: Some(expr), .. }, els) => {\n-                self.walk_local(expr, pat, els, |_| {})\n+            hir::StmtKind::Local(hir::Local { pat, init: Some(expr), els, .. }) => {\n+                self.walk_local(expr, pat, *els, |_| {})\n             }\n \n-            hir::StmtKind::Local(_, _) => {}\n+            hir::StmtKind::Local(_) => {}\n \n             hir::StmtKind::Item(_) => {\n                 // We don't visit nested items in this visitor,"}, {"sha": "4bcbeacf9feb59abd13704dcfcaf163bb31a4628", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -505,7 +505,7 @@ fn is_relevant_block(cx: &LateContext<'_>, typeck_results: &ty::TypeckResults<'_\n             .as_ref()\n             .map_or(false, |e| is_relevant_expr(cx, typeck_results, e)),\n         |stmt| match &stmt.kind {\n-            StmtKind::Local(_, _) => true,\n+            StmtKind::Local(_) => true,\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => is_relevant_expr(cx, typeck_results, expr),\n             StmtKind::Item(_) => false,\n         },"}, {"sha": "1deff9684a140abedbe5d1da5facb0f7bba1486f", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -324,7 +324,7 @@ impl BlockEq {\n \n /// If the statement is a local, checks if the bound names match the expected list of names.\n fn eq_binding_names(s: &Stmt<'_>, names: &[(HirId, Symbol)]) -> bool {\n-    if let StmtKind::Local(l, _) = s.kind {\n+    if let StmtKind::Local(l) = s.kind {\n         let mut i = 0usize;\n         let mut res = true;\n         l.pat.each_binding_or_first(&mut |_, _, _, name| {\n@@ -349,7 +349,7 @@ fn eq_stmts(\n     eq: &mut HirEqInterExpr<'_, '_, '_>,\n     moved_bindings: &mut Vec<(HirId, Symbol)>,\n ) -> bool {\n-    (if let StmtKind::Local(l, _) = stmt.kind {\n+    (if let StmtKind::Local(l) = stmt.kind {\n         let old_count = moved_bindings.len();\n         l.pat.each_binding_or_first(&mut |_, id, _, name| {\n             moved_bindings.push((id, name.name));\n@@ -435,7 +435,7 @@ fn scan_block_for_eq(cx: &LateContext<'_>, _conds: &[&Expr<'_>], block: &Block<'\n                 // Clear out all locals seen at the end so far. None of them can be moved.\n                 let stmts = &blocks[0].stmts;\n                 for stmt in &stmts[stmts.len() - init..=stmts.len() - offset] {\n-                    if let StmtKind::Local(l, _) = stmt.kind {\n+                    if let StmtKind::Local(l) = stmt.kind {\n                         l.pat.each_binding_or_first(&mut |_, id, _, _| {\n                             eq.locals.remove(&id);\n                         });"}, {"sha": "d99a1aa2969461a40153b91b10933b57b264e794", "filename": "src/tools/clippy/clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n             // checked and the name of the bound variable\n             let (local, variant, binding_name, binding_type, span) = if_chain! {\n                 // only take `let ...` statements\n-                if let StmtKind::Local(local, _) = stmt.kind;\n+                if let StmtKind::Local(local) = stmt.kind;\n                 if let Some(expr) = local.init;\n                 if !any_parent_is_automatically_derived(cx.tcx, expr.hir_id);\n                 if !expr.span.from_expansion();"}, {"sha": "fb418a3251f588c4cc58dbb5d8da10c88ffc96bf", "filename": "src/tools/clippy/clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         match stmt.kind {\n-            StmtKind::Local(local, _) => {\n+            StmtKind::Local(local) => {\n                 if local.ty.is_some() {\n                     self.ty_bounds.push(TyBound::Any);\n                 } else {"}, {"sha": "27743a0ebec7e59dc688de5547043a4b2b60e95b", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -386,7 +386,7 @@ impl<'tcx> Visitor<'tcx> for InsertSearcher<'_, 'tcx> {\n                 }\n             },\n             StmtKind::Expr(e) => self.visit_expr(e),\n-            StmtKind::Local(l, _) => {\n+            StmtKind::Local(l) => {\n                 self.visit_pat(l.pat);\n                 if let Some(e) = l.init {\n                     self.allow_insert_closure &= !self.in_tail_pos;"}, {"sha": "5bf4313b41a49ae062fa7e8faf6f55ef83f52b9b", "filename": "src/tools/clippy/clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -116,7 +116,7 @@ fn look_in_block<'tcx, 'hir>(cx: &LateContext<'tcx>, kind: &'tcx ExprKind<'hir>)\n     if_chain! {\n         if let ExprKind::Block(block, _label @ None) = kind;\n         if let Block {\n-            stmts: [Stmt { kind: StmtKind::Local(local, _), .. }],\n+            stmts: [Stmt { kind: StmtKind::Local(local), .. }],\n             expr: Some(expr_end_of_block),\n             rules: BlockCheckMode::DefaultBlock,\n             .."}, {"sha": "56bbbbbc819e5aa58020185a6ddee98dc0be15d0", "filename": "src/tools/clippy/clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_if_seq.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n         while let Some(stmt) = it.next() {\n             if_chain! {\n                 if let Some(expr) = it.peek();\n-                if let hir::StmtKind::Local(local, _) = stmt.kind;\n+                if let hir::StmtKind::Local(local) = stmt.kind;\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.kind;\n                 if let hir::StmtKind::Expr(if_) = expr.kind;\n                 if let hir::ExprKind::If(hir::Expr { kind: hir::ExprKind::DropTemps(cond), ..}, then, else_) = if_.kind;"}, {"sha": "176787497ebf2e655f93ba77b15e1c41436aa87a", "filename": "src/tools/clippy/clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::{is_must_use_ty, match_type};\n use clippy_utils::{is_must_use_func_call, paths};\n use if_chain::if_chain;\n-use rustc_hir::{Block, Local, PatKind};\n+use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -109,7 +109,7 @@ const SYNC_GUARD_PATHS: [&[&str]; 6] = [\n ];\n \n impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>, _: Option<&Block<'_>>) {\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>) {\n         if in_external_macro(cx.tcx.sess, local.span) {\n             return;\n         }"}, {"sha": "ddaffc751880db30251f01d8c246af8c9d8568d6", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -76,7 +76,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n     if let ExprKind::Block(block, _) = expr.kind {\n         for stmt in block.stmts {\n             if_chain! {\n-                if let StmtKind::Local(local, _) = stmt.kind;\n+                if let StmtKind::Local(local) = stmt.kind;\n                 if let PatKind::Binding(_, id, ..) = local.pat.kind;\n                 if let Some(init_expr) = local.init;\n                 if let ExprKind::MethodCall(method_name, &[ref iter_source], ..) = init_expr.kind;\n@@ -276,7 +276,7 @@ fn get_expr_and_hir_id_from_stmt<'v>(stmt: &'v Stmt<'v>) -> Option<(&'v Expr<'v>\n     match stmt.kind {\n         StmtKind::Expr(expr) | StmtKind::Semi(expr) => Some((expr, None)),\n         StmtKind::Item(..) => None,\n-        StmtKind::Local(Local { init, pat, .. }, _) => {\n+        StmtKind::Local(Local { init, pat, .. }) => {\n             if let PatKind::Binding(_, hir_id, ..) = pat.kind {\n                 init.map(|init_expr| (init_expr, Some(hir_id)))\n             } else {"}, {"sha": "32de20f6531fec3a88f63c815972274447c3c503", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -104,7 +104,7 @@ fn never_loop_expr_seq<'a, T: Iterator<Item = &'a Expr<'a>>>(es: &mut T, main_lo\n fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     match stmt.kind {\n         StmtKind::Semi(e, ..) | StmtKind::Expr(e, ..) => Some(e),\n-        StmtKind::Local(local, _) => local.init,\n+        StmtKind::Local(local) => local.init,\n         StmtKind::Item(..) => None,\n     }\n }"}, {"sha": "4801a84eb92ced8d1ac9b10a8e8e4e7d7cd8215b", "filename": "src/tools/clippy/clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc_ast::ast::{LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, Visitor};\n-use rustc_hir::{BinOpKind, Block, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n+use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, Ty};\n@@ -148,7 +148,7 @@ impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn visit_local(&mut self, l: &'tcx Local<'_>, e: Option<&'tcx Block<'_>>) {\n+    fn visit_local(&mut self, l: &'tcx Local<'_>) {\n         // Look for declarations of the variable\n         if_chain! {\n             if l.pat.hir_id == self.var_id;\n@@ -166,7 +166,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n             }\n         }\n \n-        walk_local(self, l, e);\n+        walk_local(self, l);\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {"}, {"sha": "ca617859db49d713ea5fe3ffa4fc0aaa52e0f771", "filename": "src/tools/clippy/clippy_lints/src/loops/while_let_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -11,7 +11,7 @@ use rustc_lint::LateContext;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n     let (init, has_trailing_exprs) = match (loop_block.stmts, loop_block.expr) {\n         ([stmt, stmts @ ..], expr) => {\n-            if let StmtKind::Local(&Local { init: Some(e), .. }, None) | StmtKind::Semi(e) | StmtKind::Expr(e) = stmt.kind {\n+            if let StmtKind::Local(&Local { init: Some(e), els: None, .. }) | StmtKind::Semi(e) | StmtKind::Expr(e) = stmt.kind {\n                 (e, !stmts.is_empty() || expr.is_some())\n             } else {\n                 return;"}, {"sha": "a57159750664fc0eafe052a1fc21724049d4bd0e", "filename": "src/tools/clippy/clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{def::Res, Block, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n+use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::{symbol::sym, Symbol};\n@@ -283,7 +283,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n         used_after: bool,\n     }\n     impl<'a, 'b, 'tcx> Visitor<'tcx> for NestedLoopVisitor<'a, 'b, 'tcx> {\n-        fn visit_local(&mut self, l: &'tcx Local<'_>, _: Option<&'tcx Block<'_>>) {\n+        fn visit_local(&mut self, l: &'tcx Local<'_>) {\n             if !self.after_loop {\n                 l.pat.each_binding_or_first(&mut |_, id, _, _| {\n                     if id == self.local_id {"}, {"sha": "663246b4c8622f69a9ff4f4399eed77b31215d24", "filename": "src/tools/clippy/clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -144,7 +144,7 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_>, expr: &'a hir::Expr<'_>) ->\n                     // If block only contains statements,\n                     // reduce `{ X; }` to `X` or `X;`\n                     match inner_stmt.kind {\n-                        hir::StmtKind::Local(local, _) => Some(local.span),\n+                        hir::StmtKind::Local(local) => Some(local.span),\n                         hir::StmtKind::Expr(e) => Some(e.span),\n                         hir::StmtKind::Semi(..) => Some(inner_stmt.span),\n                         hir::StmtKind::Item(..) => None,"}, {"sha": "3077b999f4ee445f72716412911a1238eb2d4276", "filename": "src/tools/clippy/clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::source::{snippet_opt, span_starts_with, walk_span_to_context};\n use clippy_utils::{higher, in_constant, meets_msrv, msrvs};\n-use rustc_hir::{Arm, Block, Expr, ExprKind, Local, MatchSource, Pat};\n+use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -1040,14 +1040,9 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n         }\n     }\n \n-    fn check_local(\n-        &mut self,\n-        cx: &LateContext<'tcx>,\n-        local: &'tcx Local<'_>,\n-        els: Option<&'tcx Block<'_>>,\n-    ) {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n         self.infallible_destructuring_match_linted |=\n-            els.is_none() && infallible_destructuring_match::check(cx, local);\n+            local.els.is_none() && infallible_destructuring_match::check(cx, local);\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {"}, {"sha": "4ac738272d08523c53f925100eafe8143173701e", "filename": "src/tools/clippy/clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -220,7 +220,7 @@ fn indirect_usage<'tcx>(\n         init: Some(init_expr),\n         hir_id: local_hir_id,\n         ..\n-    }, _) = stmt.kind\n+    }) = stmt.kind\n     {\n         let mut path_to_binding = None;\n         expr_visitor(cx, |expr| {"}, {"sha": "be7df08d89f0521de6f2bd871d415ded2e639c2d", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -161,7 +161,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         if_chain! {\n             if !in_external_macro(cx.tcx.sess, stmt.span);\n-            if let StmtKind::Local(local, _) = stmt.kind;\n+            if let StmtKind::Local(local) = stmt.kind;\n             if let PatKind::Binding(an, .., name, None) = local.pat.kind;\n             if let Some(init) = local.init;\n             if an == BindingAnnotation::Ref || an == BindingAnnotation::RefMut;"}, {"sha": "a2419c277e9c27d2b270961e6c860c99f306ffe3", "filename": "src/tools/clippy/clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for EvalOrderDependence {\n     }\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         match stmt.kind {\n-            StmtKind::Local(local, _) => {\n+            StmtKind::Local(local) => {\n                 if let Local { init: Some(e), .. } = local {\n                     DivergenceVisitor { cx }.visit_expr(e);\n                 }\n@@ -273,7 +273,7 @@ fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt<'_>) -\n         StmtKind::Expr(expr) | StmtKind::Semi(expr) => check_expr(vis, expr),\n         // If the declaration is of a local variable, check its initializer\n         // expression if it has one. Otherwise, keep going.\n-        StmtKind::Local(local, _) => local\n+        StmtKind::Local(local) => local\n             .init\n             .as_ref()\n             .map_or(StopEarly::KeepGoing, |expr| check_expr(vis, expr)),"}, {"sha": "4db103bbc1305ace26d744ecfb4d53113dc8dab9", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -101,12 +101,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n         }\n     }\n \n-    fn check_local(\n-        &mut self,\n-        cx: &LateContext<'_>,\n-        local: &hir::Local<'_>,\n-        _: Option<&hir::Block<'_>>,\n-    ) {\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &hir::Local<'_>) {\n         if let hir::PatKind::Wild = local.pat.kind {\n             return;\n         }"}, {"sha": "ff2999b1f4a51da2137295baa6ad007c06348322", "filename": "src/tools/clippy/clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -92,7 +92,7 @@ fn contains_let(cond: &Expr<'_>) -> bool {\n }\n \n fn stmt_needs_ordered_drop(cx: &LateContext<'_>, stmt: &Stmt<'_>) -> bool {\n-    let StmtKind::Local(local, _) = stmt.kind else { return false };\n+    let StmtKind::Local(local) = stmt.kind else { return false };\n     !local.pat.walk_short(|pat| {\n         if let PatKind::Binding(.., None) = pat.kind {\n             !needs_ordered_drop(cx, cx.typeck_results().pat_ty(pat))\n@@ -367,7 +367,7 @@ fn check<'tcx>(\n }\n \n impl<'tcx> LateLintPass<'tcx> for NeedlessLateInit {\n-    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>, _: Option<&'tcx Block<'tcx>>) {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n         let mut parents = cx.tcx.hir().parent_iter(local.hir_id);\n         if_chain! {\n             if let Local {"}, {"sha": "819646bb6780e98099d405f0a1bd8993de003393", "filename": "src/tools/clippy/clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -88,11 +88,11 @@ fn check_no_effect(cx: &LateContext<'_>, stmt: &Stmt<'_>) -> bool {\n             span_lint_hir(cx, NO_EFFECT, expr.hir_id, stmt.span, \"statement with no effect\");\n             return true;\n         }\n-    } else if let StmtKind::Local(local, els) = stmt.kind {\n+    } else if let StmtKind::Local(local) = stmt.kind {\n         if_chain! {\n             if !is_lint_allowed(cx, NO_EFFECT_UNDERSCORE_BINDING, local.hir_id);\n             if let Some(init) = local.init;\n-            if els.is_none();\n+            if local.els.is_none();\n             if !local.pat.span.from_expansion();\n             if has_no_effect(cx, init);\n             if let PatKind::Binding(_, _, ident, _) = local.pat.kind;"}, {"sha": "677ac998b56825741e2df8dd8a751c8c53bff432", "filename": "src/tools/clippy/clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -261,13 +261,13 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n         match s.kind {\n             StmtKind::Local(Local {\n                 pat, init: Some(init), ..\n-            }, _) => {\n+            }) => {\n                 self.visit_pat_expr(pat, init, false);\n             },\n             StmtKind::Item(_) | StmtKind::Expr(_) | StmtKind::Semi(_) => {\n                 walk_stmt(self, s);\n             },\n-            StmtKind::Local(_, _) => {},\n+            StmtKind::Local(_) => {},\n         }\n         self.ret_vars.clear();\n     }"}, {"sha": "a4d265111f9aee26d241d913d790c19bb0949740", "filename": "src/tools/clippy/clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -83,7 +83,7 @@ declare_lint_pass!(PatternTypeMismatch => [PATTERN_TYPE_MISMATCH]);\n \n impl<'tcx> LateLintPass<'tcx> for PatternTypeMismatch {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n-        if let StmtKind::Local(local, _) = stmt.kind {\n+        if let StmtKind::Local(local) = stmt.kind {\n             if in_external_macro(cx.sess(), local.pat.span) {\n                 return;\n             }"}, {"sha": "9538a8104739ee544e516c3997f1f52884b5bfea", "filename": "src/tools/clippy/clippy_lints/src/read_zero_byte_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fread_zero_byte_vec.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for ReadZeroByteVec {\n         for (idx, stmt) in block.stmts.iter().enumerate() {\n             if !stmt.span.from_expansion()\n                 // matches `let v = Vec::new();`\n-                && let StmtKind::Local(local, _) = stmt.kind\n+                && let StmtKind::Local(local) = stmt.kind\n                 && let Local { pat, init: Some(init), .. } = local\n                 && let PatKind::Binding(_, _, ident, _) = pat.kind\n                 && let Some(vec_init_kind) = get_vec_init_kind(cx, init)"}, {"sha": "65ed798867d19f7b9ccd6400159f74bc01da223d", "filename": "src/tools/clippy/clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n \n         for w in block.stmts.windows(2) {\n             if_chain! {\n-                if let hir::StmtKind::Local(local, _) = w[0].kind;\n+                if let hir::StmtKind::Local(local) = w[0].kind;\n                 if let Option::Some(t) = local.init;\n                 if let hir::ExprKind::Closure { .. } = t.kind;\n                 if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind;"}, {"sha": "1d9a2abf7066c8819b61a42faacde644a72eb94a", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         if_chain! {\n             if let Some(retexpr) = block.expr;\n             if let Some(stmt) = block.stmts.iter().last();\n-            if let StmtKind::Local(local, _) = &stmt.kind;\n+            if let StmtKind::Local(local) = &stmt.kind;\n             if local.ty.is_none();\n             if cx.tcx.hir().attrs(local.hir_id).is_empty();\n             if let Some(initexpr) = &local.init;"}, {"sha": "2c8aa17e80dbdeb3fa5c3a33c91fce560f450e7d", "filename": "src/tools/clippy/clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for SlowVectorInit {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         // Matches statements which initializes vectors. For example: `let mut vec = Vec::with_capacity(10)`\n         if_chain! {\n-            if let StmtKind::Local(local, _) = stmt.kind;\n+            if let StmtKind::Local(local) = stmt.kind;\n             if let PatKind::Binding(BindingAnnotation::Mutable, local_id, _, None) = local.pat.kind;\n             if let Some(init) = local.init;\n             if let Some(len_arg) = Self::is_vec_with_capacity(cx, init);"}, {"sha": "1885f3ca414dfe9dbef2a600fc961cf4f6b9ebb5", "filename": "src/tools/clippy/clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fswap.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -141,7 +141,7 @@ fn check_manual_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n     for w in block.stmts.windows(3) {\n         if_chain! {\n             // let t = foo();\n-            if let StmtKind::Local(tmp, _) = w[0].kind;\n+            if let StmtKind::Local(tmp) = w[0].kind;\n             if let Some(tmp_init) = tmp.init;\n             if let PatKind::Binding(.., ident, None) = tmp.pat.kind;\n "}, {"sha": "353a6f6b899ea3e743ed57982b8acd130d185e14", "filename": "src/tools/clippy/clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -12,7 +12,7 @@ mod vec_box;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    Block, Body, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitItem,\n+    Body, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitItem,\n     TraitItemKind, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -406,7 +406,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         }\n     }\n \n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>, _: Option<&Block<'_>>) {\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>) {\n         if let Some(ty) = local.ty {\n             self.check_ty(\n                 cx,"}, {"sha": "9f4c5555f11b7c20489ef384432a6e2e0ebc958b", "filename": "src/tools/clippy/clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funinit_vec.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> VecLocation<'tcx> {\n /// or `self` expression for `Vec::reserve()`.\n fn extract_init_or_reserve_target<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'tcx>) -> Option<TargetVec<'tcx>> {\n     match stmt.kind {\n-        StmtKind::Local(local, _) => {\n+        StmtKind::Local(local) => {\n             if_chain! {\n                 if let Some(init_expr) = local.init;\n                 if let PatKind::Binding(_, hir_id, _, None) = local.pat.kind;"}, {"sha": "cf509455aad0aeea766170e78a53aedc94377699", "filename": "src/tools/clippy/clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::{self, Ty, TypeVisitable, TypeSuperVisitable, TypeVisitor}\n use super::LET_UNIT_VALUE;\n \n pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n-    if let StmtKind::Local(local, _) = stmt.kind\n+    if let StmtKind::Local(local) = stmt.kind\n         && let Some(init) = local.init\n         && !local.pat.span.from_expansion()\n         && !in_external_macro(cx.sess(), stmt.span)"}, {"sha": "2c8820eb7e1a1faed0639c47926992c5e8136d2d", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -685,7 +685,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n         }\n \n         match stmt.value.kind {\n-            StmtKind::Local(local, _) => {\n+            StmtKind::Local(local) => {\n                 bind!(self, local);\n                 kind!(\"Local({local})\");\n                 self.option(field!(local.init), \"init\", |init| {"}, {"sha": "35db45e2b0c9921b97672f6322e48a870f658190", "filename": "src/tools/clippy/clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for VecInitThenPush {\n         self.searcher = None;\n     }\n \n-    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>, _: Option<&'tcx Block<'tcx>>) {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n         if let Some(init_expr) = local.init\n             && let PatKind::Binding(BindingAnnotation::Mutable, id, name, None) = local.pat.kind\n             && !in_external_macro(cx.sess(), local.span)"}, {"sha": "942f14ddd3d51337637ded33c8dde63aeb84744b", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -102,7 +102,7 @@ pub struct HirEqInterExpr<'a, 'b, 'tcx> {\n impl HirEqInterExpr<'_, '_, '_> {\n     pub fn eq_stmt(&mut self, left: &Stmt<'_>, right: &Stmt<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n-            (&StmtKind::Local(l, le), &StmtKind::Local(r, re)) => {\n+            (&StmtKind::Local(l, ), &StmtKind::Local(r, )) => {\n                 // This additional check ensures that the type of the locals are equivalent even if the init\n                 // expression or type have some inferred parts.\n                 if let Some((typeck_lhs, typeck_rhs)) = self.inner.maybe_typeck_results {\n@@ -117,7 +117,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 // these only get added if the init and type is equal.\n                 both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                     && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))\n-                    && both(&le, &re, |l, r| self.eq_block(l, r))\n+                    && both(&l.els, &r.els, |l, r| self.eq_block(l, r))\n                     && self.eq_pat(l.pat, r.pat)\n             },\n             (&StmtKind::Expr(l), &StmtKind::Expr(r)) | (&StmtKind::Semi(l), &StmtKind::Semi(r)) => self.eq_expr(l, r),\n@@ -922,12 +922,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&b.kind).hash(&mut self.s);\n \n         match &b.kind {\n-            StmtKind::Local(local, els) => {\n+            StmtKind::Local(local, ) => {\n                 self.hash_pat(local.pat);\n                 if let Some(init) = local.init {\n                     self.hash_expr(init);\n                 }\n-                if let Some(els) = els {\n+                if let Some(els) = local.els {\n                     self.hash_block(els);\n                 }\n             },"}, {"sha": "1b32f0aaeb8df141c79a18a389109c772873768d", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cd30e7b32df602cf455d34ff8042079b8e082a3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=1cd30e7b32df602cf455d34ff8042079b8e082a3", "patch": "@@ -1826,7 +1826,7 @@ pub fn is_expr_used_or_unified(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n                             ..\n                         },\n                         ..\n-                    }, _),\n+                    }),\n                 ..\n             }),\n             _"}]}