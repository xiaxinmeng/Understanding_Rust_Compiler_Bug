{"sha": "61bfe3653b3dd792db589457a7c91a31c3dfa83b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYmZlMzY1M2IzZGQ3OTJkYjU4OTQ1N2E3YzkxYTMxYzNkZmE4M2I=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-09-19T08:31:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-19T08:31:33Z"}, "message": "Rollup merge of #89021 - WaffleLapkin:separate_error_for_dyn_trait_in_const_fn, r=estebank\n\nAdd a separate error for `dyn Trait` in `const fn`\n\nPreviously \"trait bounds other than `Sized` on const fn parameters are unstable\" error was used for both trait bounds (`<T: Trait>`) and trait objects (`dyn Trait`). This was pretty confusing.\n\nThis PR adds a separate error for trait objects: \"trait objects in const fn are unstable\". The error for trait bounds is otherwise intact.\n\nThis is follow up to #88907\n\nr? ``@estebank``\n\n``@rustbot`` label: +A-diagnostics", "tree": {"sha": "7907e432b1d6af30664a32e79a95f154e20498f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7907e432b1d6af30664a32e79a95f154e20498f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61bfe3653b3dd792db589457a7c91a31c3dfa83b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRvVlCRBK7hj4Ov3rIwAAf7cIAAPcF6wEJWI+mLyhapg1g9s2\nvdnojuA7frQpbcwo9bXjgGB4zF5pzZF34P/zTIJOAXJ5TlSNAlHDWnbL2ZvqO/lx\nYx0VGiZxOay1+ds/+t2jP+iQaz7a3W1dWu29FDYB+dPG+LGIAnedVZRMggLtDpEh\nVe8C2h5jhc/kNCc01dyKnkMpXYfQ/lZBIvBNlXCi6w7WUNcNPu1S9U8fp/jc+2XJ\nLRonjLXertVUnRVI9/gZmigKslbJmnT9xA6pYtjxjxzT9xN4fBoObH/TIsXMgzRC\nOkMH2yg+hJgpUbiaHDaAe//39xg0Zmz3Yq+kvO9oNA1qs858RcAW5LK7akkbrm0=\n=bvcE\n-----END PGP SIGNATURE-----\n", "payload": "tree 7907e432b1d6af30664a32e79a95f154e20498f0\nparent 91c5e7cbb6f136b2f2529cb9da1421ccac874fee\nparent f84000d9bc93f7c09243144d1a729448da3d714d\nauthor Yuki Okushi <jtitor@2k36.org> 1632040293 +0900\ncommitter GitHub <noreply@github.com> 1632040293 +0900\n\nRollup merge of #89021 - WaffleLapkin:separate_error_for_dyn_trait_in_const_fn, r=estebank\n\nAdd a separate error for `dyn Trait` in `const fn`\n\nPreviously \"trait bounds other than `Sized` on const fn parameters are unstable\" error was used for both trait bounds (`<T: Trait>`) and trait objects (`dyn Trait`). This was pretty confusing.\n\nThis PR adds a separate error for trait objects: \"trait objects in const fn are unstable\". The error for trait bounds is otherwise intact.\n\nThis is follow up to #88907\n\nr? ``@estebank``\n\n``@rustbot`` label: +A-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61bfe3653b3dd792db589457a7c91a31c3dfa83b", "html_url": "https://github.com/rust-lang/rust/commit/61bfe3653b3dd792db589457a7c91a31c3dfa83b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61bfe3653b3dd792db589457a7c91a31c3dfa83b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91c5e7cbb6f136b2f2529cb9da1421ccac874fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/91c5e7cbb6f136b2f2529cb9da1421ccac874fee", "html_url": "https://github.com/rust-lang/rust/commit/91c5e7cbb6f136b2f2529cb9da1421ccac874fee"}, {"sha": "f84000d9bc93f7c09243144d1a729448da3d714d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84000d9bc93f7c09243144d1a729448da3d714d", "html_url": "https://github.com/rust-lang/rust/commit/f84000d9bc93f7c09243144d1a729448da3d714d"}], "stats": {"total": 85, "additions": 62, "deletions": 23}, "files": [{"sha": "9eec930f59e525cf5212e02cbadbf2226cd2bcb2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61bfe3653b3dd792db589457a7c91a31c3dfa83b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bfe3653b3dd792db589457a7c91a31c3dfa83b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=61bfe3653b3dd792db589457a7c91a31c3dfa83b", "patch": "@@ -384,11 +384,11 @@ impl Checker<'mir, 'tcx> {\n                         match pred.skip_binder() {\n                             ty::ExistentialPredicate::AutoTrait(_)\n                             | ty::ExistentialPredicate::Projection(_) => {\n-                                self.check_op(ops::ty::TraitBound(kind))\n+                                self.check_op(ops::ty::DynTrait(kind))\n                             }\n                             ty::ExistentialPredicate::Trait(trait_ref) => {\n                                 if Some(trait_ref.def_id) != self.tcx.lang_items().sized_trait() {\n-                                    self.check_op(ops::ty::TraitBound(kind))\n+                                    self.check_op(ops::ty::DynTrait(kind))\n                                 }\n                             }\n                         }"}, {"sha": "1d0ee949a221b8df1ff9fe29abfb079d6fb066e0", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/61bfe3653b3dd792db589457a7c91a31c3dfa83b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bfe3653b3dd792db589457a7c91a31c3dfa83b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=61bfe3653b3dd792db589457a7c91a31c3dfa83b", "patch": "@@ -599,7 +599,7 @@ pub mod ty {\n         }\n \n         fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-            let mut builder = feature_err(\n+            let mut err = feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_fn_trait_bound,\n                 span,\n@@ -608,12 +608,51 @@ pub mod ty {\n \n             match ccx.fn_sig() {\n                 Some(fn_sig) if !fn_sig.span.contains(span) => {\n-                    builder.span_label(fn_sig.span, \"function declared as const here\");\n+                    err.span_label(fn_sig.span, \"function declared as const here\");\n                 }\n                 _ => {}\n             }\n \n-            builder\n+            err\n+        }\n+    }\n+\n+    #[derive(Debug)]\n+    pub struct DynTrait(pub mir::LocalKind);\n+    impl NonConstOp for DynTrait {\n+        fn importance(&self) -> DiagnosticImportance {\n+            match self.0 {\n+                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n+                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n+                    DiagnosticImportance::Primary\n+                }\n+            }\n+        }\n+\n+        fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+            if ccx.const_kind() != hir::ConstContext::ConstFn {\n+                Status::Allowed\n+            } else {\n+                Status::Unstable(sym::const_fn_trait_bound)\n+            }\n+        }\n+\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+            let mut err = feature_err(\n+                &ccx.tcx.sess.parse_sess,\n+                sym::const_fn_trait_bound,\n+                span,\n+                \"trait objects in const fn are unstable\",\n+            );\n+\n+            match ccx.fn_sig() {\n+                Some(fn_sig) if !fn_sig.span.contains(span) => {\n+                    err.span_label(fn_sig.span, \"function declared as const here\");\n+                }\n+                _ => {}\n+            }\n+\n+            err\n         }\n     }\n "}, {"sha": "19c08b621442522b7d5ef316655d5476432312f5", "filename": "src/test/ui/consts/const_fn_trait_bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.rs?ref=61bfe3653b3dd792db589457a7c91a31c3dfa83b", "patch": "@@ -8,9 +8,9 @@\n const fn test1<T: std::ops::Add>() {}\n //[stock]~^ trait bounds\n const fn test2(_x: &dyn Send) {}\n-//[stock]~^ trait bounds\n+//[stock]~^ trait objects in const fn are unstable\n const fn test3() -> &'static dyn Send { loop {} }\n-//[stock]~^ trait bounds\n+//[stock]~^ trait objects in const fn are unstable\n \n \n #[rustc_error]"}, {"sha": "d652b5268a8bf3594c8743eab58ca184713245d2", "filename": "src/test/ui/consts/const_fn_trait_bound.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr?ref=61bfe3653b3dd792db589457a7c91a31c3dfa83b", "patch": "@@ -7,7 +7,7 @@ LL | const fn test1<T: std::ops::Add>() {}\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/const_fn_trait_bound.rs:10:16\n    |\n LL | const fn test2(_x: &dyn Send) {}\n@@ -16,7 +16,7 @@ LL | const fn test2(_x: &dyn Send) {}\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/const_fn_trait_bound.rs:12:21\n    |\n LL | const fn test3() -> &'static dyn Send { loop {} }"}, {"sha": "10347a02074ec56221053f5d095b13be2a1aac23", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=61bfe3653b3dd792db589457a7c91a31c3dfa83b", "patch": "@@ -130,16 +130,16 @@ const fn no_apit(_x: impl std::fmt::Debug) {}\n //~^ ERROR trait bounds other than `Sized`\n //~| ERROR destructor\n const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n-//~^ ERROR trait bounds other than `Sized`\n+//~^ ERROR trait objects in const fn are unstable\n const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-//~^ ERROR trait bounds other than `Sized`\n+//~^ ERROR trait objects in const fn are unstable\n \n const fn no_unsafe() { unsafe {} }\n \n const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-//~^ ERROR trait bounds other than `Sized`\n-//~| ERROR trait bounds other than `Sized`\n-//~| ERROR trait bounds other than `Sized`\n+//~^ ERROR trait objects in const fn are unstable\n+//~| ERROR trait objects in const fn are unstable\n+//~| ERROR trait objects in const fn are unstable\n \n const fn no_fn_ptrs(_x: fn()) {}\n //~^ ERROR function pointer"}, {"sha": "1e275d77bac672e1820f3fd31d0c66f9fdae589a", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=61bfe3653b3dd792db589457a7c91a31c3dfa83b", "patch": "@@ -279,7 +279,7 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                  |\n    |                  constant functions cannot evaluate destructors\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn.rs:132:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n@@ -288,7 +288,7 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn.rs:134:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n@@ -297,7 +297,7 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn.rs:139:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n@@ -308,7 +308,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn.rs:139:42\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n@@ -319,7 +319,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn.rs:139:42\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }"}, {"sha": "1ab8253b414a3b7333052a6a44d3ff66fbbfceba", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs?ref=61bfe3653b3dd792db589457a7c91a31c3dfa83b", "patch": "@@ -7,9 +7,9 @@ struct Hide(HasDyn);\n const fn no_inner_dyn_trait(_x: Hide) {}\n const fn no_inner_dyn_trait2(x: Hide) {\n     x.0.field;\n-//~^ ERROR trait bounds other than `Sized`\n+//~^ ERROR trait objects in const fn are unstable\n }\n const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-//~^ ERROR trait bounds other than `Sized`\n+//~^ ERROR trait objects in const fn are unstable\n \n fn main() {}"}, {"sha": "6eec1df5aeca7ba9fb942827b42f7078ff287237", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61bfe3653b3dd792db589457a7c91a31c3dfa83b/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=61bfe3653b3dd792db589457a7c91a31c3dfa83b", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn_dyn.rs:9:5\n    |\n LL | const fn no_inner_dyn_trait2(x: Hide) {\n@@ -9,7 +9,7 @@ LL |     x.0.field;\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0658]: trait objects in const fn are unstable\n   --> $DIR/min_const_fn_dyn.rs:12:66\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }"}]}