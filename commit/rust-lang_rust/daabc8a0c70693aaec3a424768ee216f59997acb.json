{"sha": "daabc8a0c70693aaec3a424768ee216f59997acb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYWJjOGEwYzcwNjkzYWFlYzNhNDI0NzY4ZWUyMTZmNTk5OTdhY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-15T01:53:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-15T01:53:03Z"}, "message": "Auto merge of #25421 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #25404, #25405, #25407, #25408, #25410, #25412, #25413, #25414, #25418, #25420\n- Failed merges:", "tree": {"sha": "7fb4fcb75011f0c40d49f87eb65da2d4470574a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb4fcb75011f0c40d49f87eb65da2d4470574a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daabc8a0c70693aaec3a424768ee216f59997acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daabc8a0c70693aaec3a424768ee216f59997acb", "html_url": "https://github.com/rust-lang/rust/commit/daabc8a0c70693aaec3a424768ee216f59997acb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daabc8a0c70693aaec3a424768ee216f59997acb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2792855fe60eb086b02522ead11affdf646379e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2792855fe60eb086b02522ead11affdf646379e3", "html_url": "https://github.com/rust-lang/rust/commit/2792855fe60eb086b02522ead11affdf646379e3"}, {"sha": "6df13d4d886361776ebd8173c60adb4161d315b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df13d4d886361776ebd8173c60adb4161d315b7", "html_url": "https://github.com/rust-lang/rust/commit/6df13d4d886361776ebd8173c60adb4161d315b7"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "3c64e0b14de42e1b2758b729510b2470b2467dcd", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -6,7 +6,7 @@ and more cores, yet many programmers aren't prepared to fully utilize them.\n \n Rust's memory safety features also apply to its concurrency story too. Even\n concurrent Rust programs must be memory safe, having no data races. Rust's type\n-system is up to the thread, and gives you powerful ways to reason about\n+system is up to the task, and gives you powerful ways to reason about\n concurrent code at compile time.\n \n Before we talk about the concurrency features that come with Rust, it's important"}, {"sha": "87877f02fac606d069a61f346fa770795bd5eb0d", "filename": "src/doc/trpl/dining-philosophers.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -73,6 +73,9 @@ a name is all we need. We choose the [`String`][string] type for the name,\n rather than `&str`. Generally speaking, working with a type which owns its\n data is easier than working with one that uses references.\n \n+[struct]: structs.html\n+[string]: strings.html\n+\n Let\u2019s continue:\n \n ```rust"}, {"sha": "01905caf5ec0dd9734a2d297f700e73c9b38a60b", "filename": "src/doc/trpl/enums.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fenums.md", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fenums.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fenums.md?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -55,9 +55,6 @@ fn process_color_change(msg: Message) {\n }\n ```\n \n-Both variants are named `Digit`, but since they\u2019re scoped to the `enum` name\n-there's no ambiguity.\n-\n Not supporting these operations may seem rather limiting, but it\u2019s a limitation\n which we can overcome. There are two ways: by implementing equality ourselves,\n or by pattern matching variants with [`match`][match] expressions, which you\u2019ll\n@@ -66,3 +63,4 @@ equality yet, but we\u2019ll find out in the [`traits`][traits] section.\n \n [match]: match.html\n [if-let]: if-let.html\n+[traits]: traits.html"}, {"sha": "e113ce934497626d05436f021681c89683712a7e", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -213,12 +213,12 @@ The next part will use this handle to get input from the user:\n ```\n \n Here, we call the [`read_line()`][read_line] method on our handle.\n-[Method][method]s are like associated functions, but are only available on a\n+[Methods][method] are like associated functions, but are only available on a\n particular instance of a type, rather than the type itself. We\u2019re also passing\n one argument to `read_line()`: `&mut guess`.\n \n [read_line]: ../std/io/struct.Stdin.html#method.read_line\n-[method]: methods.html\n+[method]: method-syntax.html\n \n Remember how we bound `guess` above? We said it was mutable. However,\n `read_line` doesn\u2019t take a `String` as an argument: it takes a `&mut String`."}, {"sha": "113e218883b34c4b089d02eaf82fd7863f4e1848", "filename": "src/doc/trpl/match.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmatch.md?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -97,4 +97,4 @@ Unlike the previous uses of `match`, you can\u2019t use the normal `if`\n statement to do this. You can use the [`if let`][if-let] statement,\n which can be seen as an abbreviated form of `match`.\n \n-[if-let][if-let.html]\n+[if-let]: if-let.html"}, {"sha": "7186c65cdf424e0ec291e6c90d8c63e52389b74e", "filename": "src/doc/trpl/mutability.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmutability.md?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -35,7 +35,7 @@ let y = &mut x;\n \n `y` is an immutable binding to a mutable reference, which means that you can\u2019t\n bind `y` to something else (`y = &mut z`), but you can mutate the thing that\u2019s\n-bound to `y`. (`*y = 5`) A subtle distinction.\n+bound to `y` (`*y = 5`). A subtle distinction.\n \n Of course, if you need both:\n "}, {"sha": "93df0f19e8eeb087283649842bcb5f64273c3247", "filename": "src/doc/trpl/patterns.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fpatterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fpatterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpatterns.md?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -66,7 +66,7 @@ match x {\n }\n ```\n \n-This prints `something else`\n+This prints `something else`.\n \n # Bindings\n \n@@ -152,7 +152,7 @@ match x {\n }\n ```\n \n-This prints `Got an int!`\n+This prints `Got an int!`.\n \n # ref and ref mut\n "}, {"sha": "5729aeefbac9cdb39c88c80e3472dd950e14202b", "filename": "src/doc/trpl/structs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstructs.md?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -196,3 +196,5 @@ useful. For instance, a library may ask you to create a structure that\n implements a certain [trait][trait] to handle events. If you don\u2019t have\n any data you need to store in the structure, you can just create a\n unit-like struct.\n+\n+[trait]: traits.html"}, {"sha": "c47dbd9789354ec60cc2886ec150cda60ef331bc", "filename": "src/doc/trpl/the-stack-and-the-heap.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fthe-stack-and-the-heap.md?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -430,7 +430,7 @@ Next, `foo()` calls `bar()` with `x` and `z`:\n |  2<sup>30</sup>      |      | 20                   |\n | (2<sup>30</sup>) - 1 |      | 5                    |\n | ...                  | ...  | ...                  |\n-| 10                   | e    | 4                    |\n+| 10                   | e    | 9                    |\n | 9                    | d    | (2<sup>30</sup>) - 1 |\n | 8                    | c    | 5                    |\n | 7                    | b    | 4                    |\n@@ -455,7 +455,7 @@ At the end of `bar()`, it calls `baz()`:\n | ...                  | ...  | ...                  |\n | 12                   | g    | 100                  |\n | 11                   | f    | 4                    |\n-| 10                   | e    | 4                    |\n+| 10                   | e    | 9                    |\n | 9                    | d    | (2<sup>30</sup>) - 1 |\n | 8                    | c    | 5                    |\n | 7                    | b    | 4                    |\n@@ -477,7 +477,7 @@ After `baz()` is over, we get rid of `f` and `g`:\n |  2<sup>30</sup>      |      | 20                   |\n | (2<sup>30</sup>) - 1 |      | 5                    |\n | ...                  | ...  | ...                  |\n-| 10                   | e    | 4                    |\n+| 10                   | e    | 9                    |\n | 9                    | d    | (2<sup>30</sup>) - 1 |\n | 8                    | c    | 5                    |\n | 7                    | b    | 4                    |"}, {"sha": "a56c546b5516f1584f5c77f41b2fdded3924889c", "filename": "src/doc/trpl/while-loops.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fwhile-loops.md", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Fdoc%2Ftrpl%2Fwhile-loops.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fwhile-loops.md?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -3,7 +3,7 @@\n Rust also has a `while` loop. It looks like this:\n \n ```{rust}\n-let mut x = 5; // mut x: u32\n+let mut x = 5; // mut x: i32\n let mut done = false; // mut done: bool\n \n while !done {"}, {"sha": "198627ad2fc3a266b9e491a08ca17514c3d5aafe", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -396,6 +396,7 @@ macro_rules! utf8_acc_cont_byte {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Borrow<str> for String {\n+    #[inline]\n     fn borrow(&self) -> &str { &self[..] }\n }\n "}, {"sha": "2e48cde18f361fbb84d2e9911900277a411ac786", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daabc8a0c70693aaec3a424768ee216f59997acb/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=daabc8a0c70693aaec3a424768ee216f59997acb", "patch": "@@ -40,7 +40,7 @@\n //! [`result`](result/index.html) modules define optional and\n //! error-handling types, `Option` and `Result`. The\n //! [`iter`](iter/index.html) module defines Rust's iterator trait,\n-//! [`Iterater`](iter/trait.Iterator.html), which works with the `for`\n+//! [`Iterator`](iter/trait.Iterator.html), which works with the `for`\n //! loop to access collections.\n //!\n //! The common container type, `Vec`, a growable vector backed by an array,"}]}