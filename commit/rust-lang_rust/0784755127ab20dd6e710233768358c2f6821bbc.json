{"sha": "0784755127ab20dd6e710233768358c2f6821bbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ODQ3NTUxMjdhYjIwZGQ2ZTcxMDIzMzc2ODM1OGMyZjY4MjFiYmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-03T14:25:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-03T14:25:06Z"}, "message": "Rollup merge of #60467 - nnethercote:less-symbol-interning, r=davidtwco\n\nAvoid repeated interning of static strings.\n\n`file_metadata_raw` interns the strings `\"<unknown>\"` and `\"\"` very\nfrequently. This commit avoids that, which reduces the number of symbols\ninterned significantly and reduces instruction counts by up to 0.5% on\nsome workloads.", "tree": {"sha": "ec4a9a0fae6217983c45a633b4a2d8f0dd44c1de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec4a9a0fae6217983c45a633b4a2d8f0dd44c1de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0784755127ab20dd6e710233768358c2f6821bbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJczE9DCRBK7hj4Ov3rIwAAdHIIAIPWVvgvKvDJKR/ruFiJhG0D\ndSxDBsZ1J5TkfYNKZzSJhuE3Jc6L/ivSadUkZyQWDIFiy3QuoZeTh4UORrrGm9r5\nlbmEmDS8WIj9XnGk4ts9rKTJDe/x070piAcwz+6kSyp3DQbUoFBHYfrBZ6q+1qmW\nRZxiwz65JH7c9gMnHuUXvDFkJK5ui4VH2FZLoKs3Zpc9lHpujz/f12AwTRyOcR0i\nu4ZVVmTtF+s02WxQVpn7SZu1jjNoaw8Ax6p2iYhyb7JTmsA5MojDvLsOtIifPlmw\nJXpdlNCxPgz/MXHosKh9MAW6y+KFn89ilFbKpmSsIOSN6Pb7Xrp1GaE1Ov1j6Mo=\n=4Vql\n-----END PGP SIGNATURE-----\n", "payload": "tree ec4a9a0fae6217983c45a633b4a2d8f0dd44c1de\nparent 3fe5fac96da689e55f18c83de17a062b95ad9566\nparent 6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556893506 +0200\ncommitter GitHub <noreply@github.com> 1556893506 +0200\n\nRollup merge of #60467 - nnethercote:less-symbol-interning, r=davidtwco\n\nAvoid repeated interning of static strings.\n\n`file_metadata_raw` interns the strings `\"<unknown>\"` and `\"\"` very\nfrequently. This commit avoids that, which reduces the number of symbols\ninterned significantly and reduces instruction counts by up to 0.5% on\nsome workloads.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0784755127ab20dd6e710233768358c2f6821bbc", "html_url": "https://github.com/rust-lang/rust/commit/0784755127ab20dd6e710233768358c2f6821bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0784755127ab20dd6e710233768358c2f6821bbc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe5fac96da689e55f18c83de17a062b95ad9566", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe5fac96da689e55f18c83de17a062b95ad9566", "html_url": "https://github.com/rust-lang/rust/commit/3fe5fac96da689e55f18c83de17a062b95ad9566"}, {"sha": "6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa", "html_url": "https://github.com/rust-lang/rust/commit/6ef39e69eac42e1cc86ec8eeb1b85c6b3a8784fa"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "0d67865d7170849e8c2c22cbc44fa1cd9afd0378", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0784755127ab20dd6e710233768358c2f6821bbc/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0784755127ab20dd6e710233768358c2f6821bbc/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=0784755127ab20dd6e710233768358c2f6821bbc", "patch": "@@ -784,26 +784,30 @@ pub fn file_metadata(cx: &CodegenCx<'ll, '_>,\n            file_name,\n            defining_crate);\n \n-    let directory = if defining_crate == LOCAL_CRATE {\n-        &cx.sess().working_dir.0\n+    let file_name = &file_name.to_string();\n+    let file_name_symbol = Symbol::intern(file_name);\n+    if defining_crate == LOCAL_CRATE {\n+        let directory = &cx.sess().working_dir.0.to_string_lossy();\n+        file_metadata_raw(cx, file_name, Some(file_name_symbol),\n+                          directory, Some(Symbol::intern(directory)))\n     } else {\n         // If the path comes from an upstream crate we assume it has been made\n         // independent of the compiler's working directory one way or another.\n-        Path::new(\"\")\n-    };\n-\n-    file_metadata_raw(cx, &file_name.to_string(), &directory.to_string_lossy())\n+        file_metadata_raw(cx, file_name, Some(file_name_symbol), \"\", None)\n+    }\n }\n \n pub fn unknown_file_metadata(cx: &CodegenCx<'ll, '_>) -> &'ll DIFile {\n-    file_metadata_raw(cx, \"<unknown>\", \"\")\n+    file_metadata_raw(cx, \"<unknown>\", None, \"\", None)\n }\n \n fn file_metadata_raw(cx: &CodegenCx<'ll, '_>,\n                      file_name: &str,\n-                     directory: &str)\n+                     file_name_symbol: Option<Symbol>,\n+                     directory: &str,\n+                     directory_symbol: Option<Symbol>)\n                      -> &'ll DIFile {\n-    let key = (Symbol::intern(file_name), Symbol::intern(directory));\n+    let key = (file_name_symbol, directory_symbol);\n \n     if let Some(file_metadata) = debug_context(cx).created_files.borrow().get(&key) {\n         return *file_metadata;"}, {"sha": "f3070a03b4ed523520abd34f1de0a648300edbfd", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0784755127ab20dd6e710233768358c2f6821bbc/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0784755127ab20dd6e710233768358c2f6821bbc/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=0784755127ab20dd6e710233768358c2f6821bbc", "patch": "@@ -63,7 +63,7 @@ pub struct CrateDebugContext<'a, 'tcx> {\n     llcontext: &'a llvm::Context,\n     llmod: &'a llvm::Module,\n     builder: &'a mut DIBuilder<'a>,\n-    created_files: RefCell<FxHashMap<(Symbol, Symbol), &'a DIFile>>,\n+    created_files: RefCell<FxHashMap<(Option<Symbol>, Option<Symbol>), &'a DIFile>>,\n     created_enum_disr_types: RefCell<FxHashMap<(DefId, layout::Primitive), &'a DIType>>,\n \n     type_map: RefCell<TypeMap<'a, 'tcx>>,"}]}