{"sha": "0ddfae5ba2d0104a33f3a7162571b761458f0464", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZGZhZTViYTJkMDEwNGEzM2YzYTcxNjI1NzFiNzYxNDU4ZjA0NjQ=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2018-08-04T06:36:54Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2018-08-04T06:36:54Z"}, "message": "Change tracking issue from #49792 to #51919\n\nThe old issue has already been in FCP, a new issue was opened for the\nnew API.", "tree": {"sha": "d167853be9aad255324e8899798fb1cfe01390be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d167853be9aad255324e8899798fb1cfe01390be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ddfae5ba2d0104a33f3a7162571b761458f0464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddfae5ba2d0104a33f3a7162571b761458f0464", "html_url": "https://github.com/rust-lang/rust/commit/0ddfae5ba2d0104a33f3a7162571b761458f0464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ddfae5ba2d0104a33f3a7162571b761458f0464/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a04b2cda0bf2f6f8c5c0a483b8f3356bde1cbd80", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04b2cda0bf2f6f8c5c0a483b8f3356bde1cbd80", "html_url": "https://github.com/rust-lang/rust/commit/a04b2cda0bf2f6f8c5c0a483b8f3356bde1cbd80"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "6e2fbf6f84f0f48a63832f877f69d78256362187", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ddfae5ba2d0104a33f3a7162571b761458f0464/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ddfae5ba2d0104a33f3a7162571b761458f0464/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=0ddfae5ba2d0104a33f3a7162571b761458f0464", "patch": "@@ -1903,7 +1903,7 @@ $EndFeature, \"\n         /// let bytes = 0x12345678i32.to_be_bytes();\n         /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);\n         /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n         #[inline]\n         pub fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_be().to_ne_bytes()\n@@ -1920,7 +1920,7 @@ $EndFeature, \"\n         /// let bytes = 0x12345678i32.to_le_bytes();\n         /// assert_eq!(bytes, [0x78, 0x56, 0x34, 0x12]);\n         /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n         #[inline]\n         pub fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             self.to_le().to_ne_bytes()\n@@ -1944,7 +1944,7 @@ $EndFeature, \"\n         /// let bytes = i32::min_value().to_be().to_ne_bytes();\n         /// assert_eq!(bytes, [0x80, 0, 0, 0]);\n         /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n         #[inline]\n         pub fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             unsafe { mem::transmute(self) }\n@@ -1961,7 +1961,7 @@ $EndFeature, \"\n         /// let int = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);\n         /// assert_eq!(int, 0x12_34_56_78);\n         /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n         #[inline]\n         pub fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_be(Self::from_ne_bytes(bytes))\n@@ -1978,7 +1978,7 @@ $EndFeature, \"\n         /// let int = i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]);\n         /// assert_eq!(int, 0x78_56_34_12);\n         /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n         #[inline]\n         pub fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2002,7 +2002,7 @@ $EndFeature, \"\n         /// let int = i32::from_be(i32::from_ne_bytes([0x80, 0, 0, 0]));\n         /// assert_eq!(int, i32::min_value());\n         /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n         #[inline]\n         pub fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             unsafe { mem::transmute(bytes) }\n@@ -3589,7 +3589,7 @@ $EndFeature, \"\n         /// let bytes = 0x1234_5678_u32.to_be().to_bytes();\n         /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);\n         /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n         #[inline]\n         pub fn to_bytes(self) -> [u8; mem::size_of::<Self>()] {\n             unsafe { mem::transmute(self) }\n@@ -3611,7 +3611,7 @@ $EndFeature, \"\n         /// let int = u32::from_be(u32::from_bytes([0x12, 0x34, 0x56, 0x78]));\n         /// assert_eq!(int, 0x1234_5678_u32);\n         /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"49792\")]\n+        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n         #[inline]\n         pub fn from_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n             unsafe { mem::transmute(bytes) }"}]}