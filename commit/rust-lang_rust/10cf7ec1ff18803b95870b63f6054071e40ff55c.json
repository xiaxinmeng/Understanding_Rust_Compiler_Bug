{"sha": "10cf7ec1ff18803b95870b63f6054071e40ff55c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwY2Y3ZWMxZmYxODgwM2I5NTg3MGI2M2Y2MDU0MDcxZTQwZmY1NWM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-24T10:57:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-24T10:57:07Z"}, "message": "Merge pull request #144 from oli-obk/vtable_refactor2\n\nmove all code accessing vtable internals into the `trait` module", "tree": {"sha": "ae7f820d8d0275a4bc885aee7e39c1500998b485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae7f820d8d0275a4bc885aee7e39c1500998b485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10cf7ec1ff18803b95870b63f6054071e40ff55c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10cf7ec1ff18803b95870b63f6054071e40ff55c", "html_url": "https://github.com/rust-lang/rust/commit/10cf7ec1ff18803b95870b63f6054071e40ff55c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10cf7ec1ff18803b95870b63f6054071e40ff55c/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c502bb827cc53b0c9dcbd52e6ca9ef36642b557c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c502bb827cc53b0c9dcbd52e6ca9ef36642b557c", "html_url": "https://github.com/rust-lang/rust/commit/c502bb827cc53b0c9dcbd52e6ca9ef36642b557c"}, {"sha": "1a697f9bba595020e129bbe2f316df5dea02cdf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a697f9bba595020e129bbe2f316df5dea02cdf0", "html_url": "https://github.com/rust-lang/rust/commit/1a697f9bba595020e129bbe2f316df5dea02cdf0"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "f334e9e7685de51ea7e625948c1d70d51b1b6fd0", "filename": "src/terminator/drop.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10cf7ec1ff18803b95870b63f6054071e40ff55c/src%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cf7ec1ff18803b95870b63f6054071e40ff55c/src%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fdrop.rs?ref=10cf7ec1ff18803b95870b63f6054071e40ff55c", "patch": "@@ -178,14 +178,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Lvalue::Ptr { ptr, extra: LvalueExtra::Vtable(vtable) } => (ptr, vtable),\n                     _ => bug!(\"expected an lvalue with a vtable\"),\n                 };\n-                let drop_fn = self.memory.read_ptr(vtable)?;\n-                // some values don't need to call a drop impl, so the value is null\n-                if drop_fn != Pointer::from_int(0) {\n-                    let real_ty = self.memory.get_fn(drop_fn.alloc_id)?.expect_drop_glue_real_ty()?;\n+                if let Some(real_ty) = self.read_drop_type_from_vtable(vtable)? {\n                     self.drop(Lvalue::from_ptr(ptr), real_ty, drop)?;\n-                } else {\n-                    // just a sanity check\n-                    assert_eq!(drop_fn.offset, 0);\n                 }\n             }\n "}, {"sha": "ab8539be3154b3f88fed8a7742298cac2b3bd893", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10cf7ec1ff18803b95870b63f6054071e40ff55c/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cf7ec1ff18803b95870b63f6054071e40ff55c/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=10cf7ec1ff18803b95870b63f6054071e40ff55c", "patch": "@@ -418,7 +418,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         ty: ty::Ty<'tcx>,\n         value: Value,\n     ) -> EvalResult<'tcx, (u64, u64)> {\n-        let pointer_size = self.memory.pointer_size();\n         if let Some(size) = self.type_size(ty)? {\n             Ok((size as u64, self.type_align(ty)? as u64))\n         } else {\n@@ -481,9 +480,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 ty::TyDynamic(..) => {\n                     let (_, vtable) = value.expect_ptr_vtable_pair(&self.memory)?;\n                     // the second entry in the vtable is the dynamic size of the object.\n-                    let size = self.memory.read_usize(vtable.offset(pointer_size))?;\n-                    let align = self.memory.read_usize(vtable.offset(pointer_size * 2))?;\n-                    Ok((size, align))\n+                    self.read_size_and_align_from_vtable(vtable)\n                 }\n \n                 ty::TySlice(_) | ty::TyStr => {"}, {"sha": "733095322d0029e23625d8505b18d745ac33ad22", "filename": "src/traits.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/10cf7ec1ff18803b95870b63f6054071e40ff55c/src%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10cf7ec1ff18803b95870b63f6054071e40ff55c/src%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftraits.rs?ref=10cf7ec1ff18803b95870b63f6054071e40ff55c", "patch": "@@ -285,6 +285,27 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(vtable)\n     }\n \n+    pub fn read_drop_type_from_vtable(&self, vtable: Pointer) -> EvalResult<'tcx, Option<Ty<'tcx>>> {\n+        let drop_fn = self.memory.read_ptr(vtable)?;\n+\n+        // just a sanity check\n+        assert_eq!(drop_fn.offset, 0);\n+\n+        // some values don't need to call a drop impl, so the value is null\n+        if drop_fn == Pointer::from_int(0) {\n+            Ok(None)\n+        } else {\n+            self.memory.get_fn(drop_fn.alloc_id)?.expect_drop_glue_real_ty().map(Some)\n+        }\n+    }\n+\n+    pub fn read_size_and_align_from_vtable(&self, vtable: Pointer) -> EvalResult<'tcx, (u64, u64)> {\n+        let pointer_size = self.memory.pointer_size();\n+        let size = self.memory.read_usize(vtable.offset(pointer_size))?;\n+        let align = self.memory.read_usize(vtable.offset(pointer_size * 2))?;\n+        Ok((size, align))\n+    }\n+\n     fn get_vtable_methods(&mut self, impl_id: DefId, substs: &'tcx Substs<'tcx>) -> Vec<Option<ImplMethod<'tcx>>> {\n         debug!(\"get_vtable_methods(impl_id={:?}, substs={:?}\", impl_id, substs);\n "}]}