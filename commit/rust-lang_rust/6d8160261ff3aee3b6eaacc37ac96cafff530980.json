{"sha": "6d8160261ff3aee3b6eaacc37ac96cafff530980", "node_id": "C_kwDOAAsO6NoAKDZkODE2MDI2MWZmM2FlZTNiNmVhYWNjMzdhYzk2Y2FmZmY1MzA5ODA", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-03T14:01:39Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-17T08:37:39Z"}, "message": "set correct default value for cc and cxx on android", "tree": {"sha": "168fdd331e0ca2ef3853acade4173f078231fa34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/168fdd331e0ca2ef3853acade4173f078231fa34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d8160261ff3aee3b6eaacc37ac96cafff530980", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmN18tMACgkQzXazX3c0\ndp7mJg//Xh//crfQlaqYXubq7N2zBLpaGT4U2wrJqkahx1smUqEu3M7pO7enM0zm\nYzM6kv6DaWmtuPDUAyuHc1jW7ZyvDjGrvp+yQfuRT1ibZd7odU17wZYmgv2UJTDU\nRuReGeU7UYpVJloK2PMNOTUjMNuFR4a8ji56cvYWkKIsIhZwBIX+U3RF/Gh9kZec\nCxJfbUFxZnHlWZkU+8TFzEhqii/aQdAOwC7v4nauDzHMQod5bz8uptBP3a9o4cdi\nwvYgsnYNTLr9UfkP1JmJwZooi1+L0DiU8PGUaHM5dbLYY4v4q8GEvlZb7/sVrhje\n6AGLOStkUpDGb23V6Kg9wHny2nq0k2sbaJXYi73Z9uXn87LRZ9FAeN9GhW8PWf43\nPMybrIWGAXbC2KKFDgHLgQQji+GD850XV1vqY6YNipZ/ouEXVg+4TwA0XFiVHB3+\npJfLpNRI6IA4S107KHKJvJcczsaN50OW+/IC8oQP+3IPNseJTwGo3P4Fr16ymgFk\nEEBpv9drGx1AOh46f3wyG5GwCfLq6g6/mXft3km4NZtgC4hpNQH+vh4tY+fgSoSv\nosqi1fT5DKi1VtFDF0+fBjB6hsRbt6rZU5sqpQJjuUklLAyf4QPG5qUgXLfKXAMJ\nT1RwnMWRMy8qW0zvnbPCGXyYguNt4bWez+WFfHLSdhmArRxcfmQ=\n=j4sd\n-----END PGP SIGNATURE-----", "payload": "tree 168fdd331e0ca2ef3853acade4173f078231fa34\nparent 09340e3c575d6bd5c4137ef5f31807c4f2c787d7\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1667484099 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1668674259 +0100\n\nset correct default value for cc and cxx on android\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8160261ff3aee3b6eaacc37ac96cafff530980", "html_url": "https://github.com/rust-lang/rust/commit/6d8160261ff3aee3b6eaacc37ac96cafff530980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d8160261ff3aee3b6eaacc37ac96cafff530980/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09340e3c575d6bd5c4137ef5f31807c4f2c787d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/09340e3c575d6bd5c4137ef5f31807c4f2c787d7", "html_url": "https://github.com/rust-lang/rust/commit/09340e3c575d6bd5c4137ef5f31807c4f2c787d7"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "65c882fb801e5b736e8958cc7b5fcf381a67a0b5", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6d8160261ff3aee3b6eaacc37ac96cafff530980/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8160261ff3aee3b6eaacc37ac96cafff530980/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=6d8160261ff3aee3b6eaacc37ac96cafff530980", "patch": "@@ -168,23 +168,7 @@ fn set_compiler(\n         // compiler already takes into account the triple in question.\n         t if t.contains(\"android\") => {\n             if let Some(ndk) = config.and_then(|c| c.ndk.as_ref()) {\n-                let mut triple_iter = target.triple.split(\"-\");\n-                let triple_translated = if let Some(arch) = triple_iter.next() {\n-                    let arch_new = match arch {\n-                        \"arm\" | \"armv7\" | \"armv7neon\" | \"thumbv7\" | \"thumbv7neon\" => \"armv7a\",\n-                        other => other,\n-                    };\n-                    std::iter::once(arch_new).chain(triple_iter).collect::<Vec<&str>>().join(\"-\")\n-                } else {\n-                    target.triple.to_string()\n-                };\n-\n-                // API 19 is the earliest API level supported by NDK r25b but AArch64 and x86_64 support\n-                // begins at API level 21.\n-                let api_level =\n-                    if t.contains(\"aarch64\") || t.contains(\"x86_64\") { \"21\" } else { \"19\" };\n-                let compiler = format!(\"{}{}-{}\", triple_translated, api_level, compiler.clang());\n-                cfg.compiler(ndk.join(\"bin\").join(compiler));\n+                cfg.compiler(ndk_compiler(compiler, &*target.triple, ndk));\n             }\n         }\n \n@@ -236,8 +220,28 @@ fn set_compiler(\n     }\n }\n \n+pub(crate) fn ndk_compiler(compiler: Language, triple: &str, ndk: &Path) -> PathBuf {\n+    let mut triple_iter = triple.split(\"-\");\n+    let triple_translated = if let Some(arch) = triple_iter.next() {\n+        let arch_new = match arch {\n+            \"arm\" | \"armv7\" | \"armv7neon\" | \"thumbv7\" | \"thumbv7neon\" => \"armv7a\",\n+            other => other,\n+        };\n+        std::iter::once(arch_new).chain(triple_iter).collect::<Vec<&str>>().join(\"-\")\n+    } else {\n+        triple.to_string()\n+    };\n+\n+    // API 19 is the earliest API level supported by NDK r25b but AArch64 and x86_64 support\n+    // begins at API level 21.\n+    let api_level =\n+        if triple.contains(\"aarch64\") || triple.contains(\"x86_64\") { \"21\" } else { \"19\" };\n+    let compiler = format!(\"{}{}-{}\", triple_translated, api_level, compiler.clang());\n+    ndk.join(\"bin\").join(compiler)\n+}\n+\n /// The target programming language for a native compiler.\n-enum Language {\n+pub(crate) enum Language {\n     /// The compiler is targeting C.\n     C,\n     /// The compiler is targeting C++."}, {"sha": "a1d0dac7e98a08701a0cc126d80faca486284242", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d8160261ff3aee3b6eaacc37ac96cafff530980/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8160261ff3aee3b6eaacc37ac96cafff530980/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=6d8160261ff3aee3b6eaacc37ac96cafff530980", "patch": "@@ -16,6 +16,7 @@ use std::str::FromStr;\n use crate::builder::TaskPath;\n use crate::cache::{Interned, INTERNER};\n use crate::channel::{self, GitInfo};\n+use crate::cc_detect::{ndk_compiler, Language};\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n use crate::util::{exe, output, t};\n@@ -1237,8 +1238,12 @@ impl Config {\n                 if let Some(s) = cfg.no_std {\n                     target.no_std = s;\n                 }\n-                target.cc = cfg.cc.map(PathBuf::from);\n-                target.cxx = cfg.cxx.map(PathBuf::from);\n+                target.cc = cfg.cc.map(PathBuf::from).or_else(|| {\n+                    target.ndk.as_ref().map(|ndk| ndk_compiler(Language::C, &triple, ndk))\n+                });\n+                target.cxx = cfg.cxx.map(PathBuf::from).or_else(|| {\n+                    target.ndk.as_ref().map(|ndk| ndk_compiler(Language::CPlusPlus, &triple, ndk))\n+                });\n                 target.ar = cfg.ar.map(PathBuf::from);\n                 target.ranlib = cfg.ranlib.map(PathBuf::from);\n                 target.linker = cfg.linker.map(PathBuf::from);"}]}