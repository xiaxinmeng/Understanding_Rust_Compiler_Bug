{"sha": "dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMDc0YWI0ZWVkY2IwOGNhOGExODYxZmMxZTYyZjEyNWUyM2ZhOGI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-11T12:58:06Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-11T15:22:43Z"}, "message": "Rename #[on_unimplemented] -> #[rustc_on_unimplemented]", "tree": {"sha": "0ed19f72f53874fbf7dc9e481ab8e8e96310ca1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed19f72f53874fbf7dc9e481ab8e8e96310ca1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b", "html_url": "https://github.com/rust-lang/rust/commit/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "add20bbb6dae07fddc80bc46f53296fbf5679f27", "url": "https://api.github.com/repos/rust-lang/rust/commits/add20bbb6dae07fddc80bc46f53296fbf5679f27", "html_url": "https://github.com/rust-lang/rust/commit/add20bbb6dae07fddc80bc46f53296fbf5679f27"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "c88f3553e6b5506beb73d4419d73db2c2ff20e5e", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b", "patch": "@@ -101,8 +101,8 @@ pub trait Iterator {\n \n /// Conversion from an `Iterator`\n #[stable]\n-#[on_unimplemented=\"a collection of type `{Self}` cannot be \\\n-                    built from an iterator over elements of type `{A}`\"]\n+#[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be \\\n+                          built from an iterator over elements of type `{A}`\"]\n pub trait FromIterator<A> {\n     /// Build a container with elements from an external iterator.\n     fn from_iter<T: Iterator<Item=A>>(iterator: T) -> Self;"}, {"sha": "8ed177c82a8f7c70749990544ef4c4e3e42f59a2", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b", "patch": "@@ -666,7 +666,7 @@ impl LintPass for UnusedAttributes {\n             \"must_use\",\n             \"stable\",\n             \"unstable\",\n-            \"on_unimplemented\",\n+            \"rustc_on_unimplemented\",\n \n             // FIXME: #19470 this shouldn't be needed forever\n             \"old_orphan_check\","}, {"sha": "da3b5f635e13b6faf13776d57dc4cc58ce160d1d", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b", "patch": "@@ -71,7 +71,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     let def_id = trait_ref.def_id;\n     let mut report = None;\n     ty::each_attr(infcx.tcx, def_id, |item| {\n-        if item.check_name(\"on_unimplemented\") {\n+        if item.check_name(\"rustc_on_unimplemented\") {\n             let err_sp = if item.meta().span == DUMMY_SP {\n                 span\n             } else {\n@@ -99,7 +99,8 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                 None => {\n                                     infcx.tcx.sess\n                                          .span_err(err_sp,\n-                                                   format!(\"the #[on_unimplemented] attribute on \\\n+                                                   format!(\"the #[rustc_on_unimplemented] \\\n+                                                            attribute on \\\n                                                             trait definition for {} refers to \\\n                                                             non-existent type parameter {}\",\n                                                            trait_str, s)\n@@ -111,10 +112,12 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                             _ => {\n                                 infcx.tcx.sess\n                                      .span_err(err_sp,\n-                                               format!(\"the #[on_unimplemented] attribute on \\\n+                                               format!(\"the #[rustc_on_unimplemented] \\\n+                                                        attribute on \\\n                                                         trait definition for {} must have named \\\n                                                         format arguments, \\\n-                                                        eg `#[on_unimplemented = \\\"foo {{T}}\\\"]`\",\n+                                                        eg `#[rustc_on_unimplemented = \\\n+                                                        \\\"foo {{T}}\\\"]`\",\n                                                        trait_str).as_slice());\n                                 errored = true;\n                                 None\n@@ -128,9 +131,9 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                 }\n             } else {\n                 infcx.tcx.sess.span_err(err_sp,\n-                                        format!(\"the #[on_unimplemented] attribute on \\\n+                                        format!(\"the #[rustc_on_unimplemented] attribute on \\\n                                                  trait definition for {} must have a value, \\\n-                                                 eg `#[on_unimplemented = \\\"foo\\\"]`\",\n+                                                 eg `#[rustc_on_unimplemented = \\\"foo\\\"]`\",\n                                                  trait_str).as_slice());\n             }\n             false\n@@ -173,7 +176,7 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                 \"the trait `{}` is not implemented for the type `{}`\",\n                                 trait_ref.user_string(infcx.tcx),\n                                 trait_ref.self_ty().user_string(infcx.tcx)).as_slice());\n-                        // Check if it has a custom \"#[on_unimplemented]\" error message,\n+                        // Check if it has a custom \"#[rustc_on_unimplemented]\" error message,\n                         // report with that message if it does\n                         let custom_note = report_on_unimplemented(infcx, &*trait_ref.0,\n                                                                   obligation.cause.span);"}, {"sha": "7513d50deeac0c96cd3ba490d7c00e71af096aa4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b", "patch": "@@ -783,7 +783,7 @@ fn check_trait_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                generics: &ast::Generics,\n                                item: &ast::Item) {\n     if let Some(ref attr) = item.attrs.iter().find(|&: a| {\n-        a.check_name(\"on_unimplemented\")\n+        a.check_name(\"rustc_on_unimplemented\")\n     }) {\n         if let Some(ref istring) = attr.value_str() {\n             let mut parser = Parser::new(istring.get());\n@@ -819,7 +819,7 @@ fn check_trait_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         } else {\n             ccx.tcx.sess.span_err(attr.span,\n                                   \"this attribute must have a value, \\\n-                                   eg `#[on_unimplemented = \\\"foo\\\"]`\")\n+                                   eg `#[rustc_on_unimplemented = \\\"foo\\\"]`\")\n         }\n     }\n }"}, {"sha": "ec825c1304331cc0703886154dff14ee3d9b7565", "filename": "src/test/compile-fail/on-unimplemented-bad-anno.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented-bad-anno.rs?ref=dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b", "patch": "@@ -11,19 +11,19 @@\n \n #[allow(unused)]\n \n-#[on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n+#[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n trait Foo<Bar, Baz, Quux>{}\n \n-#[on_unimplemented=\"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"]\n+#[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"]\n trait MyFromIterator<A> {\n     /// Build a container with elements from an external iterator.\n     fn my_from_iter<T: Iterator<Item=A>>(iterator: T) -> Self;\n }\n \n-#[on_unimplemented] //~ ERROR this attribute must have a value\n+#[rustc_on_unimplemented] //~ ERROR this attribute must have a value\n trait BadAnnotation1 {}\n \n-#[on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{C}>`\"]\n+#[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{C}>`\"]\n //~^ ERROR there is no type parameter C on trait BadAnnotation2\n trait BadAnnotation2<A,B> {}\n "}, {"sha": "7d579fb340a988ff9c380798bfddb17298e005fe", "filename": "src/test/compile-fail/on-unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fon-unimplemented.rs?ref=dd074ab4eedcb08ca8a1861fc1e62f125e23fa8b", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n // ignore-tidy-linelength\n \n-#[on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n+#[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}`\"]\n trait Foo<Bar, Baz, Quux>{}\n \n fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n \n }\n \n-#[on_unimplemented=\"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"]\n+#[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"]\n trait MyFromIterator<A> {\n     /// Build a container with elements from an external iterator.\n     fn my_from_iter<T: Iterator<Item=A>>(iterator: T) -> Self;"}]}