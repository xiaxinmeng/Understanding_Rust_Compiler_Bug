{"sha": "f39c29d0bc0e58d76e2289dc52038770797a8f38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOWMyOWQwYmMwZTU4ZDc2ZTIyODlkYzUyMDM4NzcwNzk3YThmMzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-11-03T23:18:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-11-21T21:18:08Z"}, "message": "unicode: Rename is_XID_start to is_xid_start, is_XID_continue to is_xid_continue", "tree": {"sha": "acebe53ed356d92664a3e76969d7405b5cab9be2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acebe53ed356d92664a3e76969d7405b5cab9be2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f39c29d0bc0e58d76e2289dc52038770797a8f38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f39c29d0bc0e58d76e2289dc52038770797a8f38", "html_url": "https://github.com/rust-lang/rust/commit/f39c29d0bc0e58d76e2289dc52038770797a8f38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f39c29d0bc0e58d76e2289dc52038770797a8f38/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76ddd2b1547dd461d0487233a0a19674292c976e", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ddd2b1547dd461d0487233a0a19674292c976e", "html_url": "https://github.com/rust-lang/rust/commit/76ddd2b1547dd461d0487233a0a19674292c976e"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "d3bee557220bf77d60c2f6d60dd76be5a39295b9", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f39c29d0bc0e58d76e2289dc52038770797a8f38/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39c29d0bc0e58d76e2289dc52038770797a8f38/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=f39c29d0bc0e58d76e2289dc52038770797a8f38", "patch": "@@ -383,7 +383,7 @@ impl<'a> Parser<'a> {\n     /// characters.\n     fn word(&mut self) -> &'a str {\n         let start = match self.cur.clone().next() {\n-            Some((pos, c)) if c.is_XID_start() => {\n+            Some((pos, c)) if c.is_xid_start() => {\n                 self.cur.next();\n                 pos\n             }\n@@ -392,7 +392,7 @@ impl<'a> Parser<'a> {\n         let mut end;\n         loop {\n             match self.cur.clone().next() {\n-                Some((_, c)) if c.is_XID_continue() => {\n+                Some((_, c)) if c.is_xid_continue() => {\n                     self.cur.next();\n                 }\n                 Some((pos, _)) => { end = pos; break }"}, {"sha": "3715256e3ec2be857107118321f4be110a725a99", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f39c29d0bc0e58d76e2289dc52038770797a8f38/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39c29d0bc0e58d76e2289dc52038770797a8f38/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=f39c29d0bc0e58d76e2289dc52038770797a8f38", "patch": "@@ -271,7 +271,7 @@ pub fn sanitize(s: &str) -> String {\n     // Underscore-qualify anything that didn't start as an ident.\n     if result.len() > 0u &&\n         result.as_bytes()[0] != '_' as u8 &&\n-        ! (result.as_bytes()[0] as char).is_XID_start() {\n+        ! (result.as_bytes()[0] as char).is_xid_start() {\n         return format!(\"_{}\", result.as_slice());\n     }\n "}, {"sha": "2a5972bb3d90b11d0fc6711ccda4d409f9805b85", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f39c29d0bc0e58d76e2289dc52038770797a8f38/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39c29d0bc0e58d76e2289dc52038770797a8f38/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f39c29d0bc0e58d76e2289dc52038770797a8f38", "patch": "@@ -299,8 +299,8 @@ impl Collector {\n             // we use these headings as test names, so it's good if\n             // they're valid identifiers.\n             let name = name.chars().enumerate().map(|(i, c)| {\n-                    if (i == 0 && c.is_XID_start()) ||\n-                        (i != 0 && c.is_XID_continue()) {\n+                    if (i == 0 && c.is_xid_start()) ||\n+                        (i != 0 && c.is_xid_continue()) {\n                         c\n                     } else {\n                         '_'"}, {"sha": "a88029e087b155959b9e24bc405719595c09b671", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f39c29d0bc0e58d76e2289dc52038770797a8f38/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39c29d0bc0e58d76e2289dc52038770797a8f38/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=f39c29d0bc0e58d76e2289dc52038770797a8f38", "patch": "@@ -692,7 +692,7 @@ impl<'a> StringReader<'a> {\n         // integer literal followed by field/method access or a range pattern\n         // (`0..2` and `12.foo()`)\n         if self.curr_is('.') && !self.nextch_is('.') && !self.nextch().unwrap_or('\\0')\n-                                                             .is_XID_start() {\n+                                                             .is_xid_start() {\n             // might have stuff after the ., and if it does, it needs to start\n             // with a number\n             self.bump();\n@@ -1385,7 +1385,7 @@ fn ident_start(c: Option<char>) -> bool {\n     (c >= 'a' && c <= 'z')\n         || (c >= 'A' && c <= 'Z')\n         || c == '_'\n-        || (c > '\\x7f' && c.is_XID_start())\n+        || (c > '\\x7f' && c.is_xid_start())\n }\n \n fn ident_continue(c: Option<char>) -> bool {\n@@ -1395,7 +1395,7 @@ fn ident_continue(c: Option<char>) -> bool {\n         || (c >= 'A' && c <= 'Z')\n         || (c >= '0' && c <= '9')\n         || c == '_'\n-        || (c > '\\x7f' && c.is_XID_continue())\n+        || (c > '\\x7f' && c.is_xid_continue())\n }\n \n #[cfg(test)]"}, {"sha": "1c4c4d4c4be4d527bd836444825fe00810766da6", "filename": "src/libunicode/u_char.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f39c29d0bc0e58d76e2289dc52038770797a8f38/src%2Flibunicode%2Fu_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39c29d0bc0e58d76e2289dc52038770797a8f38/src%2Flibunicode%2Fu_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_char.rs?ref=f39c29d0bc0e58d76e2289dc52038770797a8f38", "patch": "@@ -167,17 +167,36 @@ pub trait UnicodeChar {\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to ID_Start but modified for closure under NFKx.\n     #[allow(non_snake_case)]\n+    #[deprecated = \"use is_xid_start\"]\n     fn is_XID_start(self) -> bool;\n \n+    /// Returns whether the specified character satisfies the 'XID_Start'\n+    /// Unicode property.\n+    ///\n+    /// 'XID_Start' is a Unicode Derived Property specified in\n+    /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n+    /// mostly similar to ID_Start but modified for closure under NFKx.\n+    #[allow(non_snake_case)]\n+    fn is_xid_start(self) -> bool;\n+\n     /// Returns whether the specified `char` satisfies the 'XID_Continue'\n     /// Unicode property.\n     ///\n     /// 'XID_Continue' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n     #[allow(non_snake_case)]\n+    #[deprecated = \"use is_xid_continue\"]\n     fn is_XID_continue(self) -> bool;\n \n+    /// Returns whether the specified `char` satisfies the 'XID_Continue'\n+    /// Unicode property.\n+    ///\n+    /// 'XID_Continue' is a Unicode Derived Property specified in\n+    /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n+    /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n+    #[allow(non_snake_case)]\n+    fn is_xid_continue(self) -> bool;\n \n     /// Indicates whether a character is in lowercase.\n     ///\n@@ -267,10 +286,16 @@ impl UnicodeChar for char {\n         }\n     }\n \n+    #[deprecated = \"use is_xid_start\"]\n     fn is_XID_start(self) -> bool { derived_property::XID_Start(self) }\n \n+    #[deprecated = \"use is_xid_continue\"]\n     fn is_XID_continue(self) -> bool { derived_property::XID_Continue(self) }\n \n+    fn is_xid_start(self) -> bool { derived_property::XID_Start(self) }\n+\n+    fn is_xid_continue(self) -> bool { derived_property::XID_Continue(self) }\n+\n     fn is_lowercase(self) -> bool {\n         match self {\n             'a' ... 'z' => true,"}]}