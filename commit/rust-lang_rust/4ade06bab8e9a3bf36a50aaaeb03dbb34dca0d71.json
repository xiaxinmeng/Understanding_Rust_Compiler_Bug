{"sha": "4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZGUwNmJhYjhlOWEzYmYzNmE1MGFhYWViMDNkYmIzNGRjYTBkNzE=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-10T08:05:47Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-10T08:58:17Z"}, "message": "Rearrange BTreeMap::into_iter to match range_mut.", "tree": {"sha": "1593a8067b6451d08449318b9fd0247d4cdaae16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1593a8067b6451d08449318b9fd0247d4cdaae16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71", "html_url": "https://github.com/rust-lang/rust/commit/4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c835b0cca83fe21090562603e4bda77c183ace3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c835b0cca83fe21090562603e4bda77c183ace3", "html_url": "https://github.com/rust-lang/rust/commit/0c835b0cca83fe21090562603e4bda77c183ace3"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "d00c0cb413f953b770be54cc7f27ce8db987903a", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=4ade06bab8e9a3bf36a50aaaeb03dbb34dca0d71", "patch": "@@ -1544,19 +1544,19 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n     type IntoIter = IntoIter<K, V>;\n \n     fn into_iter(self) -> IntoIter<K, V> {\n-        let me = ManuallyDrop::new(self);\n-        if me.root.is_none() {\n-            return IntoIter { front: None, back: None, length: 0 };\n-        }\n-\n-        let root1 = unsafe { unwrap_unchecked(ptr::read(&me.root)).into_ref() };\n-        let root2 = unsafe { unwrap_unchecked(ptr::read(&me.root)).into_ref() };\n-        let len = me.length;\n-\n-        IntoIter {\n-            front: Some(root1.first_leaf_edge()),\n-            back: Some(root2.last_leaf_edge()),\n-            length: len,\n+        let mut me = ManuallyDrop::new(self);\n+        if let Some(root) = me.root.as_mut() {\n+            let root1 = unsafe { ptr::read(root).into_ref() };\n+            let root2 = unsafe { ptr::read(root).into_ref() };\n+            let len = me.length;\n+\n+            IntoIter {\n+                front: Some(root1.first_leaf_edge()),\n+                back: Some(root2.last_leaf_edge()),\n+                length: len,\n+            }\n+        } else {\n+            IntoIter { front: None, back: None, length: 0 }\n         }\n     }\n }"}]}