{"sha": "d3da042a6297b60799f6f97dd4d58d559a9b5838", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZGEwNDJhNjI5N2I2MDc5OWY2Zjk3ZGQ0ZDU4ZDU1OWE5YjU4Mzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-18T12:25:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-18T12:25:44Z"}, "message": "Merge #8082\n\n8082: Proper handle inner recursive macro rules cases r=edwin0cheng a=edwin0cheng\n\nFixes #7645\r\n\r\ncc @jonas-schievink \r\n\r\nbors r+\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "267e3fd810b5e434a9156f7408705980ea22790e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/267e3fd810b5e434a9156f7408705980ea22790e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3da042a6297b60799f6f97dd4d58d559a9b5838", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgU0bJCRBK7hj4Ov3rIwAAdHIIAFEGCiOdpfZqMOt4CSmS9ZoT\nRHs2KoduiMobjtM6+hKni7z2sxDHaKZxhXHSNyDovOoagYGJNSM3OpLrKcR74O3c\nGm9AFKaOKqTbaJjfDJlv7gXhxzLMcM/rOzIRy70tCD4xJcQPeGVx+u+c0nmcvF45\n35ybOynG03dFzBVDQ7nEOIv7EpIWg/2/3YpT55cWB+W+McOZZAoEmmLGk3dgzJC6\ncPqR5a4jTDKCzM7PcEKTaNgow1HJV1XJFDvQXjS9oDrf8kxhLcHBBPMn2DdjVbDE\nUMYj8Ap3F0NkQgSXKVVeM/6dKyJtjpnJb/jDufxxy9Lvdz47YLFkWX5pGUpra/o=\n=x65u\n-----END PGP SIGNATURE-----\n", "payload": "tree 267e3fd810b5e434a9156f7408705980ea22790e\nparent 80d497e5415e9826cfe0596b6be88c6733f56cb5\nparent 13f30e9ef5f3d78fdaef450e935782a2edd9f88e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616070344 +0000\ncommitter GitHub <noreply@github.com> 1616070344 +0000\n\nMerge #8082\n\n8082: Proper handle inner recursive macro rules cases r=edwin0cheng a=edwin0cheng\n\nFixes #7645\r\n\r\ncc @jonas-schievink \r\n\r\nbors r+\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3da042a6297b60799f6f97dd4d58d559a9b5838", "html_url": "https://github.com/rust-lang/rust/commit/d3da042a6297b60799f6f97dd4d58d559a9b5838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3da042a6297b60799f6f97dd4d58d559a9b5838/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80d497e5415e9826cfe0596b6be88c6733f56cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d497e5415e9826cfe0596b6be88c6733f56cb5", "html_url": "https://github.com/rust-lang/rust/commit/80d497e5415e9826cfe0596b6be88c6733f56cb5"}, {"sha": "13f30e9ef5f3d78fdaef450e935782a2edd9f88e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13f30e9ef5f3d78fdaef450e935782a2edd9f88e", "html_url": "https://github.com/rust-lang/rust/commit/13f30e9ef5f3d78fdaef450e935782a2edd9f88e"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "ae2475b4e46abfce0fbf79449c61c3ebf07c9a9e", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3da042a6297b60799f6f97dd4d58d559a9b5838/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3da042a6297b60799f6f97dd4d58d559a9b5838/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=d3da042a6297b60799f6f97dd4d58d559a9b5838", "patch": "@@ -115,6 +115,10 @@ impl ItemTree {\n                     // still need to collect inner items.\n                     ctx.lower_inner_items(stmt.syntax())\n                 },\n+                ast::Item(item) => {\n+                    // Macros can expand to stmt and other item, and we add it as top level item\n+                    ctx.lower_single_item(item)\n+                },\n                 _ => {\n                     panic!(\"cannot create item tree from {:?} {}\", syntax, syntax);\n                 },"}, {"sha": "d3fe1ce1eb2f222bda385c9488669dca9caeb933", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3da042a6297b60799f6f97dd4d58d559a9b5838/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3da042a6297b60799f6f97dd4d58d559a9b5838/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=d3da042a6297b60799f6f97dd4d58d559a9b5838", "patch": "@@ -87,6 +87,14 @@ impl Ctx {\n         self.tree\n     }\n \n+    pub(super) fn lower_single_item(mut self, item: ast::Item) -> ItemTree {\n+        self.tree.top_level = self\n+            .lower_mod_item(&item, false)\n+            .map(|item| item.0)\n+            .unwrap_or_else(|| Default::default());\n+        self.tree\n+    }\n+\n     pub(super) fn lower_inner_items(mut self, within: &SyntaxNode) -> ItemTree {\n         self.collect_inner_items(within);\n         self.tree"}, {"sha": "c1e605740a59ff1b5ea82b89fda1ef180161ba49", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d3da042a6297b60799f6f97dd4d58d559a9b5838/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3da042a6297b60799f6f97dd4d58d559a9b5838/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=d3da042a6297b60799f6f97dd4d58d559a9b5838", "patch": "@@ -231,6 +231,28 @@ fn expr_macro_expanded_in_stmts() {\n     );\n }\n \n+#[test]\n+fn recursive_inner_item_macro_rules() {\n+    check_infer(\n+        r#\"\n+        macro_rules! mac {\n+            () => { mac!($)};\n+            ($x:tt) => { macro_rules! blub { () => { 1 }; } };\n+        }\n+        fn foo() {\n+            mac!();\n+            let a = blub!();\n+        }\n+        \"#,\n+        expect![[r#\"\n+            !0..1 '1': i32\n+            !0..7 'mac!($)': {unknown}\n+            107..143 '{     ...!(); }': ()\n+            129..130 'a': i32\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn infer_type_value_macro_having_same_name() {\n     check_infer("}]}