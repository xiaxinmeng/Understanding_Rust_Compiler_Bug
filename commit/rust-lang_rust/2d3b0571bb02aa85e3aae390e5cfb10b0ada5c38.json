{"sha": "2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkM2IwNTcxYmIwMmFhODVlM2FhZTM5MGU1Y2ZiMTBiMGFkYTVjMzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-09T11:54:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-09T11:54:42Z"}, "message": "Merge #6465\n\n6465: Support multiple file edits in AssistBuilder r=matklad a=Veykril\n\nFixes #6459\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "8aebf9a517eef712cc704cd983677183be898010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aebf9a517eef712cc704cd983677183be898010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfqS4CCRBK7hj4Ov3rIwAAdHIIAG1ywUpD5oPtSoIOtDEQBe3d\nfETzYYRA0zXgR+YDqqfTGObrvLMI99tYHCQx93VGEtI9QQbPjwXb2Z6o/DBRHHhe\nhTQBC+6kncPw0FuJcbx1gh6qzPi4aE3isGuZMfVXCDAWzeXpsrVnqb1mRnPoqhpU\nwK/4KjAeE0uKNL3XErntWW4Ygeem5wzW4UGTEWX90YnKy0bm5DL7d8dce+UTIZci\n1Z7fQ68IESaJcTh07Gtti41IlA49QyrTz1uD7rTzcLsmH2aMU7ojpuJ1yl0WxXOG\nB6GRcELbqVydbDftdNz4oMf36mKhx6DQd9acGlPWKuEozpDrr+hzWRU0Z/f5E5s=\n=jvE+\n-----END PGP SIGNATURE-----\n", "payload": "tree 8aebf9a517eef712cc704cd983677183be898010\nparent 2f247140817c9cbd9009085c9f9ccedb4f6a718f\nparent be00b6b8fa03f9b578ca5f736e745d4d99ffd649\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604922882 +0000\ncommitter GitHub <noreply@github.com> 1604922882 +0000\n\nMerge #6465\n\n6465: Support multiple file edits in AssistBuilder r=matklad a=Veykril\n\nFixes #6459\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38", "html_url": "https://github.com/rust-lang/rust/commit/2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f247140817c9cbd9009085c9f9ccedb4f6a718f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f247140817c9cbd9009085c9f9ccedb4f6a718f", "html_url": "https://github.com/rust-lang/rust/commit/2f247140817c9cbd9009085c9f9ccedb4f6a718f"}, {"sha": "be00b6b8fa03f9b578ca5f736e745d4d99ffd649", "url": "https://api.github.com/repos/rust-lang/rust/commits/be00b6b8fa03f9b578ca5f736e745d4d99ffd649", "html_url": "https://github.com/rust-lang/rust/commit/be00b6b8fa03f9b578ca5f736e745d4d99ffd649"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "a17e592b0e61e5a474c6a6f0db8823d8b6ed59f8", "filename": "crates/assists/src/assist_context.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38/crates%2Fassists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38/crates%2Fassists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fassist_context.rs?ref=2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38", "patch": "@@ -208,7 +208,7 @@ pub(crate) struct AssistBuilder {\n     edit: TextEditBuilder,\n     file_id: FileId,\n     is_snippet: bool,\n-    change: SourceChange,\n+    source_file_edits: Vec<SourceFileEdit>,\n }\n \n impl AssistBuilder {\n@@ -217,20 +217,27 @@ impl AssistBuilder {\n             edit: TextEdit::builder(),\n             file_id,\n             is_snippet: false,\n-            change: SourceChange::default(),\n+            source_file_edits: Vec::default(),\n         }\n     }\n \n     pub(crate) fn edit_file(&mut self, file_id: FileId) {\n+        self.commit();\n         self.file_id = file_id;\n     }\n \n     fn commit(&mut self) {\n         let edit = mem::take(&mut self.edit).finish();\n         if !edit.is_empty() {\n-            let new_edit = SourceFileEdit { file_id: self.file_id, edit };\n-            assert!(!self.change.source_file_edits.iter().any(|it| it.file_id == new_edit.file_id));\n-            self.change.source_file_edits.push(new_edit);\n+            match self.source_file_edits.binary_search_by_key(&self.file_id, |edit| edit.file_id) {\n+                Ok(idx) => self.source_file_edits[idx]\n+                    .edit\n+                    .union(edit)\n+                    .expect(\"overlapping edits for same file\"),\n+                Err(idx) => self\n+                    .source_file_edits\n+                    .insert(idx, SourceFileEdit { file_id: self.file_id, edit }),\n+            }\n         }\n     }\n \n@@ -277,10 +284,10 @@ impl AssistBuilder {\n \n     fn finish(mut self) -> SourceChange {\n         self.commit();\n-        let mut change = mem::take(&mut self.change);\n-        if self.is_snippet {\n-            change.is_snippet = true;\n+        SourceChange {\n+            source_file_edits: mem::take(&mut self.source_file_edits),\n+            file_system_edits: Default::default(),\n+            is_snippet: self.is_snippet,\n         }\n-        change\n     }\n }"}, {"sha": "fee736e7d90aa6f0c836aafc78446bc27c31211b", "filename": "editors/code/src/snippets.ts", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38/editors%2Fcode%2Fsrc%2Fsnippets.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38/editors%2Fcode%2Fsrc%2Fsnippets.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsnippets.ts?ref=2d3b0571bb02aa85e3aae390e5cfb10b0ada5c38", "patch": "@@ -3,16 +3,29 @@ import * as vscode from 'vscode';\n import { assert } from './util';\n \n export async function applySnippetWorkspaceEdit(edit: vscode.WorkspaceEdit) {\n-    assert(edit.entries().length === 1, `bad ws edit: ${JSON.stringify(edit)}`);\n-    const [uri, edits] = edit.entries()[0];\n+    if (edit.entries().length === 1) {\n+        const [uri, edits] = edit.entries()[0];\n+        const editor = await editorFromUri(uri);\n+        if (editor) await applySnippetTextEdits(editor, edits);\n+        return;\n+    }\n+    for (const [uri, edits] of edit.entries()) {\n+        const editor = await editorFromUri(uri);\n+        if (editor) await editor.edit((builder) => {\n+            for (const indel of edits) {\n+                assert(!parseSnippet(indel.newText), `bad ws edit: snippet received with multiple edits: ${JSON.stringify(edit)}`);\n+                builder.replace(indel.range, indel.newText);\n+            }\n+        });\n+    }\n+}\n \n+async function editorFromUri(uri: vscode.Uri): Promise<vscode.TextEditor | undefined> {\n     if (vscode.window.activeTextEditor?.document.uri !== uri) {\n         // `vscode.window.visibleTextEditors` only contains editors whose contents are being displayed\n         await vscode.window.showTextDocument(uri, {});\n     }\n-    const editor = vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n-    if (!editor) return;\n-    await applySnippetTextEdits(editor, edits);\n+    return vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n }\n \n export async function applySnippetTextEdits(editor: vscode.TextEditor, edits: vscode.TextEdit[]) {"}]}