{"sha": "719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxOTcxMGExMzI1NmEzMmI5ZmNiZjA2YzFmZjQzZjg5NjFiOWIyZTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-24T08:21:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-24T08:21:13Z"}, "message": "break&continue", "tree": {"sha": "c194449b1fe2f6e7d4a1133cd10bf30b73d81998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c194449b1fe2f6e7d4a1133cd10bf30b73d81998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "html_url": "https://github.com/rust-lang/rust/commit/719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "html_url": "https://github.com/rust-lang/rust/commit/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b"}], "stats": {"total": 169, "additions": 156, "deletions": 13}, "files": [{"sha": "dff88cc4a0c8c6c17c0236ebc2907b553eeccf9c", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "patch": "@@ -75,6 +75,8 @@ Grammar(\n         \"for\",\n         \"loop\",\n         \"while\",\n+        \"continue\",\n+        \"break\",\n         \"if\",\n         \"else\",\n         \"match\",\n@@ -161,6 +163,8 @@ Grammar(\n         \"IF_EXPR\",\n         \"WHILE_EXPR\",\n         \"LOOP_EXPR\",\n+        \"CONTINUE_EXPR\",\n+        \"BREAK_EXPR\",\n         \"FOR_EXPR\",\n         \"BLOCK_EXPR\",\n         \"RETURN_EXPR\","}, {"sha": "9f470d5618b284be081bf7237f9f48213aeb9cc2", "filename": "crates/libsyntax2/src/grammar/expressions/atom.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "patch": "@@ -30,7 +30,7 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n     token_set_union![\n         LITERAL_FIRST,\n         token_set![L_PAREN, PIPE, MOVE_KW, IF_KW, WHILE_KW, MATCH_KW, UNSAFE_KW, L_CURLY, RETURN_KW,\n-                   IDENT, SELF_KW, SUPER_KW, COLONCOLON ],\n+                   IDENT, SELF_KW, SUPER_KW, COLONCOLON, BREAK_KW, CONTINUE_KW ],\n     ];\n \n pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n@@ -55,6 +55,8 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMark\n         UNSAFE_KW if la == L_CURLY => block_expr(p),\n         L_CURLY => block_expr(p),\n         RETURN_KW => return_expr(p),\n+        CONTINUE_KW => continue_expr(p),\n+        BREAK_KW => break_expr(p),\n         _ => {\n             p.err_and_bump(\"expected expression\");\n             return None;\n@@ -346,3 +348,38 @@ fn return_expr(p: &mut Parser) -> CompletedMarker {\n     }\n     m.complete(p, RETURN_EXPR)\n }\n+\n+// test continue_expr\n+// fn foo() {\n+//     loop {\n+//         continue;\n+//         continue 'l;\n+//     }\n+// }\n+fn continue_expr(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(CONTINUE_KW));\n+    let m = p.start();\n+    p.bump();\n+    p.eat(LIFETIME);\n+    m.complete(p, CONTINUE_EXPR)\n+}\n+\n+// test break_expr\n+// fn foo() {\n+//     loop {\n+//         break;\n+//         break 'l;\n+//         break 92;\n+//         break 'l 92;\n+//     }\n+// }\n+fn break_expr(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(BREAK_KW));\n+    let m = p.start();\n+    p.bump();\n+    p.eat(LIFETIME);\n+    if EXPR_FIRST.contains(p.current()) {\n+        expr(p);\n+    }\n+    m.complete(p, BREAK_EXPR)\n+}"}, {"sha": "82b6c89cf721f4c5838982c5303eaad81783add7", "filename": "crates/libsyntax2/src/syntax_kinds/generated.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "patch": "@@ -82,6 +82,8 @@ pub enum SyntaxKind {\n     FOR_KW,\n     LOOP_KW,\n     WHILE_KW,\n+    CONTINUE_KW,\n+    BREAK_KW,\n     IF_KW,\n     ELSE_KW,\n     MATCH_KW,\n@@ -157,6 +159,8 @@ pub enum SyntaxKind {\n     IF_EXPR,\n     WHILE_EXPR,\n     LOOP_EXPR,\n+    CONTINUE_EXPR,\n+    BREAK_EXPR,\n     FOR_EXPR,\n     BLOCK_EXPR,\n     RETURN_EXPR,\n@@ -232,6 +236,8 @@ impl SyntaxKind {\n             | FOR_KW\n             | LOOP_KW\n             | WHILE_KW\n+            | CONTINUE_KW\n+            | BREAK_KW\n             | IF_KW\n             | ELSE_KW\n             | MATCH_KW\n@@ -325,6 +331,8 @@ impl SyntaxKind {\n             FOR_KW => &SyntaxInfo { name: \"FOR_KW\" },\n             LOOP_KW => &SyntaxInfo { name: \"LOOP_KW\" },\n             WHILE_KW => &SyntaxInfo { name: \"WHILE_KW\" },\n+            CONTINUE_KW => &SyntaxInfo { name: \"CONTINUE_KW\" },\n+            BREAK_KW => &SyntaxInfo { name: \"BREAK_KW\" },\n             IF_KW => &SyntaxInfo { name: \"IF_KW\" },\n             ELSE_KW => &SyntaxInfo { name: \"ELSE_KW\" },\n             MATCH_KW => &SyntaxInfo { name: \"MATCH_KW\" },\n@@ -400,6 +408,8 @@ impl SyntaxKind {\n             IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n             WHILE_EXPR => &SyntaxInfo { name: \"WHILE_EXPR\" },\n             LOOP_EXPR => &SyntaxInfo { name: \"LOOP_EXPR\" },\n+            CONTINUE_EXPR => &SyntaxInfo { name: \"CONTINUE_EXPR\" },\n+            BREAK_EXPR => &SyntaxInfo { name: \"BREAK_EXPR\" },\n             FOR_EXPR => &SyntaxInfo { name: \"FOR_EXPR\" },\n             BLOCK_EXPR => &SyntaxInfo { name: \"BLOCK_EXPR\" },\n             RETURN_EXPR => &SyntaxInfo { name: \"RETURN_EXPR\" },\n@@ -475,6 +485,8 @@ impl SyntaxKind {\n             \"for\" => FOR_KW,\n             \"loop\" => LOOP_KW,\n             \"while\" => WHILE_KW,\n+            \"continue\" => CONTINUE_KW,\n+            \"break\" => BREAK_KW,\n             \"if\" => IF_KW,\n             \"else\" => ELSE_KW,\n             \"match\" => MATCH_KW,"}, {"sha": "ad0d8eb4c4004f102c0bd57f1c24ee2b278f1f5b", "filename": "crates/libsyntax2/tests/data/parser/err/0012_broken_lambda.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0012_broken_lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0012_broken_lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0012_broken_lambda.rs?ref=a66c94af1bad3c2dcfd8dd4c07494d0cf6cc8b1b", "patch": "@@ -1,12 +0,0 @@\n-pub(super) fn process<'a, S: Sink<'a>>(builder: &mut S, tokens: &[Token], events: Vec<Event>) {\n-    let mut next_tok_idx = 0;\n-    let eat_ws = |idx: &mut usize, &mut | {\n-        while let Some(token) = tokens.get(*idx) {\n-            if !token.kind.is_trivia() {\n-                break;\n-            }\n-            builder.leaf(token.kind, token.len);\n-            *idx += 1\n-        }\n-    };\n-}"}, {"sha": "474cc3f0e0c4864fcd8a3fb642ea766531cf66dd", "filename": "crates/libsyntax2/tests/data/parser/inline/0105_continue_expr.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0105_continue_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0105_continue_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0105_continue_expr.rs?ref=719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "patch": "@@ -0,0 +1,6 @@\n+fn foo() {\n+    loop {\n+        continue;\n+        continue 'l;\n+    }\n+}"}, {"sha": "05526fda64c2c9cdf979f25df2c3c4317ad1bac8", "filename": "crates/libsyntax2/tests/data/parser/inline/0105_continue_expr.txt", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0105_continue_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0105_continue_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0105_continue_expr.txt?ref=719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "patch": "@@ -0,0 +1,35 @@\n+FILE@[0; 69)\n+  FN_DEF@[0; 68)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 68)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      LOOP_EXPR@[15; 66)\n+        LOOP_KW@[15; 19)\n+        WHITESPACE@[19; 20)\n+        BLOCK_EXPR@[20; 66)\n+          L_CURLY@[20; 21)\n+          WHITESPACE@[21; 30)\n+          EXPR_STMT@[30; 39)\n+            CONTINUE_EXPR@[30; 38)\n+              CONTINUE_KW@[30; 38)\n+            SEMI@[38; 39)\n+          WHITESPACE@[39; 48)\n+          EXPR_STMT@[48; 60)\n+            CONTINUE_EXPR@[48; 59)\n+              CONTINUE_KW@[48; 56)\n+              WHITESPACE@[56; 57)\n+              LIFETIME@[57; 59) \"'l\"\n+            SEMI@[59; 60)\n+          WHITESPACE@[60; 65)\n+          R_CURLY@[65; 66)\n+      WHITESPACE@[66; 67)\n+      R_CURLY@[67; 68)\n+  WHITESPACE@[68; 69)"}, {"sha": "1b40946365f261af481851378f1c5ba484673a73", "filename": "crates/libsyntax2/tests/data/parser/inline/0106_break_expr.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0106_break_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0106_break_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0106_break_expr.rs?ref=719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "patch": "@@ -0,0 +1,8 @@\n+fn foo() {\n+    loop {\n+        break;\n+        break 'l;\n+        break 92;\n+        break 'l 92;\n+    }\n+}"}, {"sha": "bb490e4417953964c26e305d028dfe81ca33b475", "filename": "crates/libsyntax2/tests/data/parser/inline/0106_break_expr.txt", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0106_break_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/719710a13256a32b9fcbf06c1ff43f8961b9b2e6/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0106_break_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0106_break_expr.txt?ref=719710a13256a32b9fcbf06c1ff43f8961b9b2e6", "patch": "@@ -0,0 +1,53 @@\n+FILE@[0; 102)\n+  FN_DEF@[0; 101)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 101)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      LOOP_EXPR@[15; 99)\n+        LOOP_KW@[15; 19)\n+        WHITESPACE@[19; 20)\n+        BLOCK_EXPR@[20; 99)\n+          L_CURLY@[20; 21)\n+          WHITESPACE@[21; 30)\n+          EXPR_STMT@[30; 36)\n+            BREAK_EXPR@[30; 35)\n+              BREAK_KW@[30; 35)\n+            SEMI@[35; 36)\n+          WHITESPACE@[36; 45)\n+          EXPR_STMT@[45; 54)\n+            BREAK_EXPR@[45; 53)\n+              BREAK_KW@[45; 50)\n+              WHITESPACE@[50; 51)\n+              LIFETIME@[51; 53) \"'l\"\n+            SEMI@[53; 54)\n+          WHITESPACE@[54; 63)\n+          EXPR_STMT@[63; 72)\n+            BREAK_EXPR@[63; 71)\n+              BREAK_KW@[63; 68)\n+              WHITESPACE@[68; 69)\n+              LITERAL@[69; 71)\n+                INT_NUMBER@[69; 71) \"92\"\n+            SEMI@[71; 72)\n+          WHITESPACE@[72; 81)\n+          EXPR_STMT@[81; 93)\n+            BREAK_EXPR@[81; 92)\n+              BREAK_KW@[81; 86)\n+              WHITESPACE@[86; 87)\n+              LIFETIME@[87; 89) \"'l\"\n+              WHITESPACE@[89; 90)\n+              LITERAL@[90; 92)\n+                INT_NUMBER@[90; 92) \"92\"\n+            SEMI@[92; 93)\n+          WHITESPACE@[93; 98)\n+          R_CURLY@[98; 99)\n+      WHITESPACE@[99; 100)\n+      R_CURLY@[100; 101)\n+  WHITESPACE@[101; 102)"}]}