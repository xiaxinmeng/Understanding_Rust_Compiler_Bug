{"sha": "5c7afde6f2729963b06477f25ef66680e68e434f", "node_id": "C_kwDOAAsO6NoAKDVjN2FmZGU2ZjI3Mjk5NjNiMDY0NzdmMjVlZjY2NjgwZTY4ZTQzNGY", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-02-03T14:24:53Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-02-14T15:56:22Z"}, "message": "Port PlaceholderRelationLfNotSatisfied diagnostic", "tree": {"sha": "2458d74ce203feb72b9be666d5f50c09501640b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2458d74ce203feb72b9be666d5f50c09501640b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c7afde6f2729963b06477f25ef66680e68e434f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c7afde6f2729963b06477f25ef66680e68e434f", "html_url": "https://github.com/rust-lang/rust/commit/5c7afde6f2729963b06477f25ef66680e68e434f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c7afde6f2729963b06477f25ef66680e68e434f/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdbec623c42ef022bd9461fef7639358a7b2968f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdbec623c42ef022bd9461fef7639358a7b2968f", "html_url": "https://github.com/rust-lang/rust/commit/fdbec623c42ef022bd9461fef7639358a7b2968f"}], "stats": {"total": 133, "additions": 103, "deletions": 30}, "files": [{"sha": "c5b2b6c2d735758dddf390e189091c1e96ba6306", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c7afde6f2729963b06477f25ef66680e68e434f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5c7afde6f2729963b06477f25ef66680e68e434f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=5c7afde6f2729963b06477f25ef66680e68e434f", "patch": "@@ -338,4 +338,10 @@ infer_srs_add_one = consider returning one of these bindings\n \n infer_await_both_futures = consider `await`ing on both `Future`s\n infer_await_future = consider `await`ing on the `Future`\n-infer_await_note = calling an async function returns a future\n\\ No newline at end of file\n+infer_await_note = calling an async function returns a future\n+\n+infer_prlf_defined_with_sub = the lifetime `{$sub_symbol}` defined here...\n+infer_prlf_defined_without_sub = the lifetime defined here...\n+infer_prlf_must_oultive_with_sup = ...must outlive the lifetime `{$sup_symbol}` defined here\n+infer_prlf_must_oultive_without_sup = ...must outlive the lifetime defined here\n+infer_prlf_known_limitation = this is a known limitation that will be removed in the future (see issue #100013 <https://github.com/rust-lang/rust/issues/100013> for more information)"}, {"sha": "f4af251d11fc81094604020074fab26eced90d04", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5c7afde6f2729963b06477f25ef66680e68e434f/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7afde6f2729963b06477f25ef66680e68e434f/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=5c7afde6f2729963b06477f25ef66680e68e434f", "patch": "@@ -1093,3 +1093,62 @@ pub enum ConsiderAddingAwait {\n         spans: Vec<Span>,\n     },\n }\n+\n+#[derive(Diagnostic)]\n+pub enum PlaceholderRelationLfNotSatisfied {\n+    #[diag(infer_lf_bound_not_satisfied)]\n+    HasBoth {\n+        #[primary_span]\n+        span: Span,\n+        #[note(infer_prlf_defined_with_sub)]\n+        sub_span: Span,\n+        #[note(infer_prlf_must_oultive_with_sup)]\n+        sup_span: Span,\n+        sub_symbol: Symbol,\n+        sup_symbol: Symbol,\n+        #[note(infer_prlf_known_limitation)]\n+        note: (),\n+    },\n+    #[diag(infer_lf_bound_not_satisfied)]\n+    HasSub {\n+        #[primary_span]\n+        span: Span,\n+        #[note(infer_prlf_defined_with_sub)]\n+        sub_span: Span,\n+        #[note(infer_prlf_must_oultive_without_sup)]\n+        sup_span: Span,\n+        sub_symbol: Symbol,\n+        #[note(infer_prlf_known_limitation)]\n+        note: (),\n+    },\n+    #[diag(infer_lf_bound_not_satisfied)]\n+    HasSup {\n+        #[primary_span]\n+        span: Span,\n+        #[note(infer_prlf_defined_without_sub)]\n+        sub_span: Span,\n+        #[note(infer_prlf_must_oultive_with_sup)]\n+        sup_span: Span,\n+        sup_symbol: Symbol,\n+        #[note(infer_prlf_known_limitation)]\n+        note: (),\n+    },\n+    #[diag(infer_lf_bound_not_satisfied)]\n+    HasNone {\n+        #[primary_span]\n+        span: Span,\n+        #[note(infer_prlf_defined_without_sub)]\n+        sub_span: Span,\n+        #[note(infer_prlf_must_oultive_without_sup)]\n+        sup_span: Span,\n+        #[note(infer_prlf_known_limitation)]\n+        note: (),\n+    },\n+    #[diag(infer_lf_bound_not_satisfied)]\n+    OnlyPrimarySpan {\n+        #[primary_span]\n+        span: Span,\n+        #[note(infer_prlf_known_limitation)]\n+        note: (),\n+    },\n+}"}, {"sha": "e8d94f0c04eaaa69db8eddaa0f8d3fca09f241bc", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_relation.rs", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5c7afde6f2729963b06477f25ef66680e68e434f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c7afde6f2729963b06477f25ef66680e68e434f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_relation.rs?ref=5c7afde6f2729963b06477f25ef66680e68e434f", "patch": "@@ -1,5 +1,8 @@\n-use crate::infer::{\n-    error_reporting::nice_region_error::NiceRegionError, RegionResolutionError, SubregionOrigin,\n+use crate::{\n+    errors::PlaceholderRelationLfNotSatisfied,\n+    infer::{\n+        error_reporting::nice_region_error::NiceRegionError, RegionResolutionError, SubregionOrigin,\n+    },\n };\n use rustc_data_structures::intern::Interned;\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n@@ -16,8 +19,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 Region(Interned(RePlaceholder(ty::Placeholder { name: sub_name, .. }), _)),\n                 Region(Interned(RePlaceholder(ty::Placeholder { name: sup_name, .. }), _)),\n             )) => {\n-                let msg = \"lifetime bound not satisfied\";\n-                let mut err = self.tcx().sess.struct_span_err(*span, msg);\n+                let span = *span;\n                 let (sub_span, sub_symbol) = match sub_name {\n                     ty::BrNamed(def_id, symbol) => {\n                         (Some(self.tcx().def_span(def_id)), Some(symbol))\n@@ -32,41 +34,47 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                     ty::BrAnon(_, span) => (*span, None),\n                     ty::BrEnv => (None, None),\n                 };\n-                match (sub_span, sup_span, sub_symbol, sup_symbol) {\n-                    (Some(sub_span), Some(sup_span), Some(sub_symbol), Some(sup_symbol)) => {\n-                        err.span_note(\n+                let diag = match (sub_span, sup_span, sub_symbol, sup_symbol) {\n+                    (Some(sub_span), Some(sup_span), Some(&sub_symbol), Some(&sup_symbol)) => {\n+                        PlaceholderRelationLfNotSatisfied::HasBoth {\n+                            span,\n                             sub_span,\n-                            format!(\"the lifetime `{sub_symbol}` defined here...\"),\n-                        );\n-                        err.span_note(\n                             sup_span,\n-                            format!(\"...must outlive the lifetime `{sup_symbol}` defined here\"),\n-                        );\n+                            sub_symbol,\n+                            sup_symbol,\n+                            note: (),\n+                        }\n                     }\n-                    (Some(sub_span), Some(sup_span), _, Some(sup_symbol)) => {\n-                        err.span_note(sub_span, \"the lifetime defined here...\");\n-                        err.span_note(\n+                    (Some(sub_span), Some(sup_span), _, Some(&sup_symbol)) => {\n+                        PlaceholderRelationLfNotSatisfied::HasSup {\n+                            span,\n+                            sub_span,\n                             sup_span,\n-                            format!(\"...must outlive the lifetime `{sup_symbol}` defined here\"),\n-                        );\n+                            sup_symbol,\n+                            note: (),\n+                        }\n                     }\n-                    (Some(sub_span), Some(sup_span), Some(sub_symbol), _) => {\n-                        err.span_note(\n+                    (Some(sub_span), Some(sup_span), Some(&sub_symbol), _) => {\n+                        PlaceholderRelationLfNotSatisfied::HasSub {\n+                            span,\n                             sub_span,\n-                            format!(\"the lifetime `{sub_symbol}` defined here...\"),\n-                        );\n-                        err.span_note(sup_span, \"...must outlive the lifetime defined here\");\n+                            sup_span,\n+                            sub_symbol,\n+                            note: (),\n+                        }\n                     }\n                     (Some(sub_span), Some(sup_span), _, _) => {\n-                        err.span_note(sub_span, \"the lifetime defined here...\");\n-                        err.span_note(sup_span, \"...must outlive the lifetime defined here\");\n+                        PlaceholderRelationLfNotSatisfied::HasNone {\n+                            span,\n+                            sub_span,\n+                            sup_span,\n+                            note: (),\n+                        }\n                     }\n-                    _ => {}\n-                }\n-                err.note(\"this is a known limitation that will be removed in the future (see issue #100013 <https://github.com/rust-lang/rust/issues/100013> for more information)\");\n-                Some(err)\n+                    _ => PlaceholderRelationLfNotSatisfied::OnlyPrimarySpan { span, note: () },\n+                };\n+                Some(self.tcx().sess.create_err(diag))\n             }\n-\n             _ => None,\n         }\n     }"}]}