{"sha": "ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOWNlYzU2YzhjZTM4MTFiMDFhY2JlMzg1ZTM2ODRkMWMyZGMyMGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-20T20:56:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-20T20:56:28Z"}, "message": "Merge #4539\n\n4539: Relax cursor position tests in assists r=matklad a=matklad\n\nThose will be replaced with snippets anyway\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "add8e53c1d081823e60959e529160594daa99113", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add8e53c1d081823e60959e529160594daa99113"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexZl8CRBK7hj4Ov3rIwAAdHIIACZ2Ca7e0AkyXRYqjIPJvIJx\n9rcYTOU3TfhTYCW8lN6GNXRxzpXxjftMh4J8Ti/VL7WouCnqeqEohMs5VzCgjHF6\nhVAtgwLR1m2X9frjmnfE3driedjViVCZrC+vwwNIKfAwt7T8HG8bNL+dg0zUsJjg\nCHu2hh93T6pVg0KocMGxBYaCZxt4xdbW+bypIjm26LbZABJNH9d7U74zrYAkIZfG\n1/LniqJLTpwdB0RxAgjRco8//iSwICUW6wzLocSvc2wyqm/TA/8VyOFp1kPe+D1+\nF0CMjWkt7szp3qdEuJtT8z8R6Q7AI+QXWPl1al9oOH+g/ZMNVxcetxsJdjzChik=\n=Zc/V\n-----END PGP SIGNATURE-----\n", "payload": "tree add8e53c1d081823e60959e529160594daa99113\nparent 3dfc461f1e44ee7cebee672cac02d56ba5523f67\nparent 65fa5864105280267e6ccdaa61957cd9953e444e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590008188 +0000\ncommitter GitHub <noreply@github.com> 1590008188 +0000\n\nMerge #4539\n\n4539: Relax cursor position tests in assists r=matklad a=matklad\n\nThose will be replaced with snippets anyway\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "html_url": "https://github.com/rust-lang/rust/commit/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dfc461f1e44ee7cebee672cac02d56ba5523f67", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfc461f1e44ee7cebee672cac02d56ba5523f67", "html_url": "https://github.com/rust-lang/rust/commit/3dfc461f1e44ee7cebee672cac02d56ba5523f67"}, {"sha": "65fa5864105280267e6ccdaa61957cd9953e444e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65fa5864105280267e6ccdaa61957cd9953e444e", "html_url": "https://github.com/rust-lang/rust/commit/65fa5864105280267e6ccdaa61957cd9953e444e"}], "stats": {"total": 213, "additions": 96, "deletions": 117}, "files": [{"sha": "ab20c66493c1b5213ac36d4cfe616dd30e013d86", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -86,19 +86,15 @@ mod tests {\n \n     #[test]\n     fn add_explicit_type_works_for_simple_expr() {\n-        check_assist(\n-            add_explicit_type,\n-            \"fn f() { let a<|> = 1; }\",\n-            \"fn f() { let a<|>: i32 = 1; }\",\n-        );\n+        check_assist(add_explicit_type, \"fn f() { let a<|> = 1; }\", \"fn f() { let a: i32 = 1; }\");\n     }\n \n     #[test]\n     fn add_explicit_type_works_for_underscore() {\n         check_assist(\n             add_explicit_type,\n             \"fn f() { let a<|>: _ = 1; }\",\n-            \"fn f() { let a<|>: i32 = 1; }\",\n+            \"fn f() { let a: i32 = 1; }\",\n         );\n     }\n \n@@ -122,7 +118,7 @@ mod tests {\n             }\n \n             fn f() {\n-                let a<|>: Option<i32> = Option::Some(1);\n+                let a: Option<i32> = Option::Some(1);\n             }\"#,\n         );\n     }\n@@ -132,16 +128,16 @@ mod tests {\n         check_assist(\n             add_explicit_type,\n             r\"macro_rules! v { () => {0u64} } fn f() { let a<|> = v!(); }\",\n-            r\"macro_rules! v { () => {0u64} } fn f() { let a<|>: u64 = v!(); }\",\n+            r\"macro_rules! v { () => {0u64} } fn f() { let a: u64 = v!(); }\",\n         );\n     }\n \n     #[test]\n     fn add_explicit_type_works_for_macro_call_recursive() {\n         check_assist(\n             add_explicit_type,\n-            \"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a<|> = v!(); }\",\n-            \"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a<|>: u64 = v!(); }\",\n+            r#\"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a<|> = v!(); }\"#,\n+            r#\"macro_rules! u { () => {0u64} } macro_rules! v { () => {u!()} } fn f() { let a: u64 = v!(); }\"#,\n         );\n     }\n \n@@ -208,7 +204,7 @@ struct Test<K, T = u8> {\n }\n \n fn main() {\n-    let test<|>: Test<i32> = Test { t: 23, k: 33 };\n+    let test: Test<i32> = Test { t: 23, k: 33 };\n }\"#,\n         );\n     }"}, {"sha": "6a675e8126dd812f0c0cdb66eefceb1e20a469e0", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -101,7 +101,7 @@ mod tests {\n         check_assist(\n             add_from_impl_for_enum,\n             \"enum A { <|>One(u32) }\",\n-            r#\"enum A { <|>One(u32) }\n+            r#\"enum A { One(u32) }\n \n impl From<u32> for A {\n     fn from(v: u32) -> Self {\n@@ -116,7 +116,7 @@ impl From<u32> for A {\n         check_assist(\n             add_from_impl_for_enum,\n             r#\"enum A { <|>One(foo::bar::baz::Boo) }\"#,\n-            r#\"enum A { <|>One(foo::bar::baz::Boo) }\n+            r#\"enum A { One(foo::bar::baz::Boo) }\n \n impl From<foo::bar::baz::Boo> for A {\n     fn from(v: foo::bar::baz::Boo) -> Self {\n@@ -178,7 +178,7 @@ impl From<String> for A {\n pub trait From<T> {\n     fn from(T) -> Self;\n }\"#,\n-            r#\"enum A { <|>One(u32), Two(String), }\n+            r#\"enum A { One(u32), Two(String), }\n \n impl From<u32> for A {\n     fn from(v: u32) -> Self {"}, {"sha": "233e8fb8e65ce2c91e3795648e764fd9675d70d3", "filename": "crates/ra_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -63,22 +63,22 @@ mod tests {\n \n     #[test]\n     fn demorgan_turns_and_into_or() {\n-        check_assist(apply_demorgan, \"fn f() { !x &&<|> !x }\", \"fn f() { !(x ||<|> x) }\")\n+        check_assist(apply_demorgan, \"fn f() { !x &&<|> !x }\", \"fn f() { !(x || x) }\")\n     }\n \n     #[test]\n     fn demorgan_turns_or_into_and() {\n-        check_assist(apply_demorgan, \"fn f() { !x ||<|> !x }\", \"fn f() { !(x &&<|> x) }\")\n+        check_assist(apply_demorgan, \"fn f() { !x ||<|> !x }\", \"fn f() { !(x && x) }\")\n     }\n \n     #[test]\n     fn demorgan_removes_inequality() {\n-        check_assist(apply_demorgan, \"fn f() { x != x ||<|> !x }\", \"fn f() { !(x == x &&<|> x) }\")\n+        check_assist(apply_demorgan, \"fn f() { x != x ||<|> !x }\", \"fn f() { !(x == x && x) }\")\n     }\n \n     #[test]\n     fn demorgan_general_case() {\n-        check_assist(apply_demorgan, \"fn f() { x ||<|> x }\", \"fn f() { !(!x &&<|> !x) }\")\n+        check_assist(apply_demorgan, \"fn f() { x ||<|> x }\", \"fn f() { !(!x && !x) }\")\n     }\n \n     #[test]"}, {"sha": "edf96d50ec144de79f2453b3a1278a089e4776d8", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -298,7 +298,7 @@ mod tests {\n             }\n             \",\n             r\"\n-            <|>use PubMod::PubStruct;\n+            use PubMod::PubStruct;\n \n             PubStruct\n \n@@ -329,7 +329,7 @@ mod tests {\n             macro_rules! foo {\n                 ($i:ident) => { fn foo(a: $i) {} }\n             }\n-            foo!(Pub<|>Struct);\n+            foo!(PubStruct);\n \n             pub mod PubMod {\n                 pub struct PubStruct;\n@@ -360,7 +360,7 @@ mod tests {\n             use PubMod::{PubStruct2, PubStruct1};\n \n             struct Test {\n-                test: Pub<|>Struct2<u8>,\n+                test: PubStruct2<u8>,\n             }\n \n             pub mod PubMod {\n@@ -393,7 +393,7 @@ mod tests {\n             r\"\n             use PubMod3::PubStruct;\n \n-            PubSt<|>ruct\n+            PubStruct\n \n             pub mod PubMod1 {\n                 pub struct PubStruct;\n@@ -474,7 +474,7 @@ mod tests {\n             r\"\n             use PubMod::test_function;\n \n-            test_function<|>\n+            test_function\n \n             pub mod PubMod {\n                 pub fn test_function() {};\n@@ -501,7 +501,7 @@ mod tests {\n             r\"use crate_with_macro::foo;\n \n fn main() {\n-    foo<|>\n+    foo\n }\n \",\n         );\n@@ -587,7 +587,7 @@ fn main() {\n             }\n \n             fn main() {\n-                TestStruct::test_function<|>\n+                TestStruct::test_function\n             }\n             \",\n         );\n@@ -620,7 +620,7 @@ fn main() {\n             }\n \n             fn main() {\n-                TestStruct::TEST_CONST<|>\n+                TestStruct::TEST_CONST\n             }\n             \",\n         );\n@@ -659,7 +659,7 @@ fn main() {\n             }\n \n             fn main() {\n-                test_mod::TestStruct::test_function<|>\n+                test_mod::TestStruct::test_function\n             }\n             \",\n         );\n@@ -730,7 +730,7 @@ fn main() {\n             }\n \n             fn main() {\n-                test_mod::TestStruct::TEST_CONST<|>\n+                test_mod::TestStruct::TEST_CONST\n             }\n             \",\n         );\n@@ -803,7 +803,7 @@ fn main() {\n \n             fn main() {\n                 let test_struct = test_mod::TestStruct {};\n-                test_struct.test_meth<|>od()\n+                test_struct.test_method()\n             }\n             \",\n         );"}, {"sha": "c21d75be080ca760b3074fbeda173963378032d7", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -118,27 +118,23 @@ mod tests {\n \n     #[test]\n     fn change_visibility_adds_pub_crate_to_items() {\n-        check_assist(change_visibility, \"<|>fn foo() {}\", \"<|>pub(crate) fn foo() {}\");\n-        check_assist(change_visibility, \"f<|>n foo() {}\", \"pub(crate) f<|>n foo() {}\");\n-        check_assist(change_visibility, \"<|>struct Foo {}\", \"<|>pub(crate) struct Foo {}\");\n-        check_assist(change_visibility, \"<|>mod foo {}\", \"<|>pub(crate) mod foo {}\");\n-        check_assist(change_visibility, \"<|>trait Foo {}\", \"<|>pub(crate) trait Foo {}\");\n-        check_assist(change_visibility, \"m<|>od {}\", \"pub(crate) m<|>od {}\");\n-        check_assist(\n-            change_visibility,\n-            \"unsafe f<|>n foo() {}\",\n-            \"pub(crate) unsafe f<|>n foo() {}\",\n-        );\n+        check_assist(change_visibility, \"<|>fn foo() {}\", \"pub(crate) fn foo() {}\");\n+        check_assist(change_visibility, \"f<|>n foo() {}\", \"pub(crate) fn foo() {}\");\n+        check_assist(change_visibility, \"<|>struct Foo {}\", \"pub(crate) struct Foo {}\");\n+        check_assist(change_visibility, \"<|>mod foo {}\", \"pub(crate) mod foo {}\");\n+        check_assist(change_visibility, \"<|>trait Foo {}\", \"pub(crate) trait Foo {}\");\n+        check_assist(change_visibility, \"m<|>od {}\", \"pub(crate) mod {}\");\n+        check_assist(change_visibility, \"unsafe f<|>n foo() {}\", \"pub(crate) unsafe fn foo() {}\");\n     }\n \n     #[test]\n     fn change_visibility_works_with_struct_fields() {\n         check_assist(\n             change_visibility,\n             r\"struct S { <|>field: u32 }\",\n-            r\"struct S { <|>pub(crate) field: u32 }\",\n+            r\"struct S { pub(crate) field: u32 }\",\n         );\n-        check_assist(change_visibility, r\"struct S ( <|>u32 )\", r\"struct S ( <|>pub(crate) u32 )\");\n+        check_assist(change_visibility, r\"struct S ( <|>u32 )\", r\"struct S ( pub(crate) u32 )\");\n     }\n \n     #[test]\n@@ -152,17 +148,17 @@ mod tests {\n \n     #[test]\n     fn change_visibility_pub_to_pub_crate() {\n-        check_assist(change_visibility, \"<|>pub fn foo() {}\", \"<|>pub(crate) fn foo() {}\")\n+        check_assist(change_visibility, \"<|>pub fn foo() {}\", \"pub(crate) fn foo() {}\")\n     }\n \n     #[test]\n     fn change_visibility_pub_crate_to_pub() {\n-        check_assist(change_visibility, \"<|>pub(crate) fn foo() {}\", \"<|>pub fn foo() {}\")\n+        check_assist(change_visibility, \"<|>pub(crate) fn foo() {}\", \"pub fn foo() {}\")\n     }\n \n     #[test]\n     fn change_visibility_const() {\n-        check_assist(change_visibility, \"<|>const FOO = 3u8;\", \"<|>pub(crate) const FOO = 3u8;\");\n+        check_assist(change_visibility, \"<|>const FOO = 3u8;\", \"pub(crate) const FOO = 3u8;\");\n     }\n \n     #[test]\n@@ -183,7 +179,7 @@ mod tests {\n             // comments\n \n             #[derive(Debug)]\n-            <|>pub(crate) struct Foo;\n+            pub(crate) struct Foo;\n             \",\n         )\n     }"}, {"sha": "5731965766b048c1d42fc55aadef98cbb6226bfc", "filename": "crates/ra_assists/src/handlers/flip_binexpr.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_binexpr.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -85,25 +85,21 @@ mod tests {\n         check_assist(\n             flip_binexpr,\n             \"fn f() { let res = 1 ==<|> 2; }\",\n-            \"fn f() { let res = 2 ==<|> 1; }\",\n+            \"fn f() { let res = 2 == 1; }\",\n         )\n     }\n \n     #[test]\n     fn flip_binexpr_works_for_gt() {\n-        check_assist(\n-            flip_binexpr,\n-            \"fn f() { let res = 1 ><|> 2; }\",\n-            \"fn f() { let res = 2 <<|> 1; }\",\n-        )\n+        check_assist(flip_binexpr, \"fn f() { let res = 1 ><|> 2; }\", \"fn f() { let res = 2 < 1; }\")\n     }\n \n     #[test]\n     fn flip_binexpr_works_for_lteq() {\n         check_assist(\n             flip_binexpr,\n             \"fn f() { let res = 1 <=<|> 2; }\",\n-            \"fn f() { let res = 2 >=<|> 1; }\",\n+            \"fn f() { let res = 2 >= 1; }\",\n         )\n     }\n \n@@ -112,7 +108,7 @@ mod tests {\n         check_assist(\n             flip_binexpr,\n             \"fn f() { let res = (1 + 1) ==<|> (2 + 2); }\",\n-            \"fn f() { let res = (2 + 2) ==<|> (1 + 1); }\",\n+            \"fn f() { let res = (2 + 2) == (1 + 1); }\",\n         )\n     }\n \n@@ -132,7 +128,7 @@ mod tests {\n             fn dyn_eq(&self, other: &dyn Diagnostic) -> bool {\n                 match other.downcast_ref::<Self>() {\n                     None => false,\n-                    Some(it) => self ==<|> it,\n+                    Some(it) => self == it,\n                 }\n             }\n             \"#,"}, {"sha": "a57a1c463c4416a63687766e03eb4111036688c9", "filename": "crates/ra_assists/src/handlers/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_comma.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -45,7 +45,7 @@ mod tests {\n         check_assist(\n             flip_comma,\n             \"fn foo(x: i32,<|> y: Result<(), ()>) {}\",\n-            \"fn foo(y: Result<(), ()>,<|> x: i32) {}\",\n+            \"fn foo(y: Result<(), ()>, x: i32) {}\",\n         )\n     }\n "}, {"sha": "0115adc8b53ab32d965ed204e62d276dc3629ccf", "filename": "crates/ra_assists/src/handlers/flip_trait_bound.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fflip_trait_bound.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -60,7 +60,7 @@ mod tests {\n         check_assist(\n             flip_trait_bound,\n             \"struct S<T> where T: A <|>+ B { }\",\n-            \"struct S<T> where T: B <|>+ A { }\",\n+            \"struct S<T> where T: B + A { }\",\n         )\n     }\n \n@@ -69,21 +69,21 @@ mod tests {\n         check_assist(\n             flip_trait_bound,\n             \"impl X for S<T> where T: A +<|> B { }\",\n-            \"impl X for S<T> where T: B +<|> A { }\",\n+            \"impl X for S<T> where T: B + A { }\",\n         )\n     }\n \n     #[test]\n     fn flip_trait_bound_works_for_fn() {\n-        check_assist(flip_trait_bound, \"fn f<T: A <|>+ B>(t: T) { }\", \"fn f<T: B <|>+ A>(t: T) { }\")\n+        check_assist(flip_trait_bound, \"fn f<T: A <|>+ B>(t: T) { }\", \"fn f<T: B + A>(t: T) { }\")\n     }\n \n     #[test]\n     fn flip_trait_bound_works_for_fn_where_clause() {\n         check_assist(\n             flip_trait_bound,\n             \"fn f<T>(t: T) where T: A +<|> B { }\",\n-            \"fn f<T>(t: T) where T: B +<|> A { }\",\n+            \"fn f<T>(t: T) where T: B + A { }\",\n         )\n     }\n \n@@ -92,7 +92,7 @@ mod tests {\n         check_assist(\n             flip_trait_bound,\n             \"fn f<T>(t: T) where T: A <|>+ 'static { }\",\n-            \"fn f<T>(t: T) where T: 'static <|>+ A { }\",\n+            \"fn f<T>(t: T) where T: 'static + A { }\",\n         )\n     }\n \n@@ -101,7 +101,7 @@ mod tests {\n         check_assist(\n             flip_trait_bound,\n             \"struct S<T> where T: A<T> <|>+ b_mod::B<T> + C<T> { }\",\n-            \"struct S<T> where T: b_mod::B<T> <|>+ A<T> + C<T> { }\",\n+            \"struct S<T> where T: b_mod::B<T> + A<T> + C<T> { }\",\n         )\n     }\n \n@@ -110,7 +110,7 @@ mod tests {\n         check_assist(\n             flip_trait_bound,\n             \"struct S<T> where T: A + B + C + D + E + F +<|> G + H + I + J { }\",\n-            \"struct S<T> where T: A + B + C + D + E + G +<|> F + H + I + J { }\",\n+            \"struct S<T> where T: A + B + C + D + E + G + F + H + I + J { }\",\n         )\n     }\n }"}, {"sha": "59d278eb9bed8c03466ced60fce54599420093a2", "filename": "crates/ra_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -72,7 +72,7 @@ mod tests {\n         check_assist(\n             invert_if,\n             \"fn f() { i<|>f x != 3 { 1 } else { 3 + 2 } }\",\n-            \"fn f() { i<|>f x == 3 { 3 + 2 } else { 1 } }\",\n+            \"fn f() { if x == 3 { 3 + 2 } else { 1 } }\",\n         )\n     }\n \n@@ -81,7 +81,7 @@ mod tests {\n         check_assist(\n             invert_if,\n             \"fn f() { <|>if !cond { 3 * 2 } else { 1 } }\",\n-            \"fn f() { <|>if cond { 1 } else { 3 * 2 } }\",\n+            \"fn f() { if cond { 1 } else { 3 * 2 } }\",\n         )\n     }\n \n@@ -90,7 +90,7 @@ mod tests {\n         check_assist(\n             invert_if,\n             \"fn f() { i<|>f cond { 3 * 2 } else { 1 } }\",\n-            \"fn f() { i<|>f !cond { 1 } else { 3 * 2 } }\",\n+            \"fn f() { if !cond { 1 } else { 3 * 2 } }\",\n         )\n     }\n "}, {"sha": "be2a7eddcfad3999dc071dcfb795047e6bed146f", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -99,7 +99,7 @@ mod tests {\n             fn foo<T: u32, <|>F: FnOnce(T) -> T>() {}\n             \"#,\n             r#\"\n-            fn foo<T, <|>F>() where T: u32, F: FnOnce(T) -> T {}\n+            fn foo<T, F>() where T: u32, F: FnOnce(T) -> T {}\n             \"#,\n         );\n     }\n@@ -112,7 +112,7 @@ mod tests {\n             impl<U: u32, <|>T> A<U, T> {}\n             \"#,\n             r#\"\n-            impl<U, <|>T> A<U, T> where U: u32 {}\n+            impl<U, T> A<U, T> where U: u32 {}\n             \"#,\n         );\n     }\n@@ -125,7 +125,7 @@ mod tests {\n             struct A<<|>T: Iterator<Item = u32>> {}\n             \"#,\n             r#\"\n-            struct A<<|>T> where T: Iterator<Item = u32> {}\n+            struct A<T> where T: Iterator<Item = u32> {}\n             \"#,\n         );\n     }\n@@ -138,7 +138,7 @@ mod tests {\n             struct Pair<<|>T: u32>(T, T);\n             \"#,\n             r#\"\n-            struct Pair<<|>T>(T, T) where T: u32;\n+            struct Pair<T>(T, T) where T: u32;\n             \"#,\n         );\n     }"}, {"sha": "16002d2acec52b6d6e6e3b1cd119fe61f4b38d07", "filename": "crates/ra_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -164,7 +164,7 @@ mod test {\n             \"#,\n             r##\"\n             fn f() {\n-                let s = <|>r#\"random\n+                let s = r#\"random\n string\"#;\n             }\n             \"##,\n@@ -182,7 +182,7 @@ string\"#;\n             \"#,\n             r##\"\n             fn f() {\n-                format!(<|>r#\"x = {}\"#, 92)\n+                format!(r#\"x = {}\"#, 92)\n             }\n             \"##,\n         )\n@@ -199,7 +199,7 @@ string\"#;\n             \"###,\n             r####\"\n             fn f() {\n-                let s = <|>r#\"#random##\n+                let s = r#\"#random##\n string\"#;\n             }\n             \"####,\n@@ -217,7 +217,7 @@ string\"#;\n             \"###,\n             r####\"\n             fn f() {\n-                let s = <|>r###\"#random\"##\n+                let s = r###\"#random\"##\n string\"###;\n             }\n             \"####,\n@@ -235,7 +235,7 @@ string\"###;\n             \"#,\n             r##\"\n             fn f() {\n-                let s = <|>r#\"random string\"#;\n+                let s = r#\"random string\"#;\n             }\n             \"##,\n         )\n@@ -289,7 +289,7 @@ string\"###;\n             \"#,\n             r##\"\n             fn f() {\n-                let s = <|>r#\"random string\"#;\n+                let s = r#\"random string\"#;\n             }\n             \"##,\n         )\n@@ -306,7 +306,7 @@ string\"###;\n             \"##,\n             r###\"\n             fn f() {\n-                let s = <|>r##\"random\"string\"##;\n+                let s = r##\"random\"string\"##;\n             }\n             \"###,\n         )\n@@ -348,7 +348,7 @@ string\"###;\n             \"##,\n             r#\"\n             fn f() {\n-                let s = <|>r\"random string\";\n+                let s = r\"random string\";\n             }\n             \"#,\n         )\n@@ -365,7 +365,7 @@ string\"###;\n             \"##,\n             r#\"\n             fn f() {\n-                let s = <|>r\"random\\\"str\\\"ing\";\n+                let s = r\"random\\\"str\\\"ing\";\n             }\n             \"#,\n         )\n@@ -382,7 +382,7 @@ string\"###;\n             \"###,\n             r##\"\n             fn f() {\n-                let s = <|>r#\"random string\"#;\n+                let s = r#\"random string\"#;\n             }\n             \"##,\n         )\n@@ -436,7 +436,7 @@ string\"###;\n             \"##,\n             r#\"\n             fn f() {\n-                let s = <|>\"random string\";\n+                let s = \"random string\";\n             }\n             \"#,\n         )\n@@ -453,7 +453,7 @@ string\"###;\n             \"##,\n             r#\"\n             fn f() {\n-                let s = <|>\"random\\\"str\\\"ing\";\n+                let s = \"random\\\"str\\\"ing\";\n             }\n             \"#,\n         )\n@@ -470,7 +470,7 @@ string\"###;\n             \"###,\n             r##\"\n             fn f() {\n-                let s = <|>\"random string\";\n+                let s = \"random string\";\n             }\n             \"##,\n         )"}, {"sha": "30229edc2f24a7091436dc47afd7308e0294d720", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -140,7 +140,7 @@ mod tests {\n         \"#,\n             r#\"\n         struct Foo {foo: i32, bar: i32};\n-        const test: Foo = <|>Foo {foo: 1, bar: 0}\n+        const test: Foo = Foo {foo: 1, bar: 0}\n         \"#,\n         )\n     }\n@@ -164,7 +164,7 @@ mod tests {\n \n         fn f(f: Foo) -> {\n             match f {\n-                <|>Foo { ref mut bar, baz: 0, .. } => (),\n+                Foo { ref mut bar, baz: 0, .. } => (),\n                 _ => ()\n             }\n         }\n@@ -202,7 +202,7 @@ mod tests {\n             impl Foo {\n                 fn new() -> Foo {\n                     let foo = String::new();\n-                    <|>Foo {\n+                    Foo {\n                         foo,\n                         bar: foo.clone(),\n                         extra: \"Extra field\","}, {"sha": "0197a8cf06788f01f321fd31fdacf9790e4fcf77", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -89,7 +89,7 @@ std::fmt::Debug<|>\n             \"\n use std::fmt::Debug;\n \n-Debug<|>\n+Debug\n     \",\n         );\n     }\n@@ -106,7 +106,7 @@ fn main() {\n             \"\n use std::fmt::Debug;\n \n-Debug<|>\n+Debug\n \n fn main() {\n }\n@@ -130,7 +130,7 @@ use std::fmt::Debug;\n fn main() {\n }\n \n-Debug<|>\n+Debug\n     \",\n         );\n     }\n@@ -145,7 +145,7 @@ std::fmt<|>::Debug\n             \"\n use std::fmt;\n \n-fmt<|>::Debug\n+fmt::Debug\n     \",\n         );\n     }\n@@ -164,7 +164,7 @@ impl std::fmt::Debug<|> for Foo {\n use stdx;\n use std::fmt::Debug;\n \n-impl Debug<|> for Foo {\n+impl Debug for Foo {\n }\n     \",\n         );\n@@ -181,7 +181,7 @@ impl std::fmt::Debug<|> for Foo {\n             \"\n use std::fmt::Debug;\n \n-impl Debug<|> for Foo {\n+impl Debug for Foo {\n }\n     \",\n         );\n@@ -198,7 +198,7 @@ impl Debug<|> for Foo {\n             \"\n     use std::fmt::Debug;\n \n-    impl Debug<|> for Foo {\n+    impl Debug for Foo {\n     }\n     \",\n         );\n@@ -217,7 +217,7 @@ impl std::io<|> for Foo {\n             \"\n use std::{io, fmt};\n \n-impl io<|> for Foo {\n+impl io for Foo {\n }\n     \",\n         );\n@@ -236,7 +236,7 @@ impl std::fmt::Debug<|> for Foo {\n             \"\n use std::fmt::{self, Debug, };\n \n-impl Debug<|> for Foo {\n+impl Debug for Foo {\n }\n     \",\n         );\n@@ -255,7 +255,7 @@ impl std::fmt<|> for Foo {\n             \"\n use std::fmt::{self, Debug};\n \n-impl fmt<|> for Foo {\n+impl fmt for Foo {\n }\n     \",\n         );\n@@ -274,7 +274,7 @@ impl std::fmt::nested<|> for Foo {\n             \"\n use std::fmt::{Debug, nested::{Display, self}};\n \n-impl nested<|> for Foo {\n+impl nested for Foo {\n }\n \",\n         );\n@@ -293,7 +293,7 @@ impl std::fmt::nested<|> for Foo {\n             \"\n use std::fmt::{Debug, nested::{self, Display}};\n \n-impl nested<|> for Foo {\n+impl nested for Foo {\n }\n \",\n         );\n@@ -312,7 +312,7 @@ impl std::fmt::nested::Debug<|> for Foo {\n             \"\n use std::fmt::{Debug, nested::{Display, Debug}};\n \n-impl Debug<|> for Foo {\n+impl Debug for Foo {\n }\n \",\n         );\n@@ -331,7 +331,7 @@ impl std::fmt::nested::Display<|> for Foo {\n             \"\n use std::fmt::{nested::Display, Debug};\n \n-impl Display<|> for Foo {\n+impl Display for Foo {\n }\n \",\n         );\n@@ -350,7 +350,7 @@ impl std::fmt::Display<|> for Foo {\n             \"\n use std::fmt::{Display, nested::Debug};\n \n-impl Display<|> for Foo {\n+impl Display for Foo {\n }\n \",\n         );\n@@ -374,7 +374,7 @@ use crate::{\n     AssocItem,\n };\n \n-fn foo() { lower<|>::trait_env() }\n+fn foo() { lower::trait_env() }\n \",\n         );\n     }\n@@ -392,7 +392,7 @@ impl foo::Debug<|> for Foo {\n             \"\n use std::fmt as foo;\n \n-impl Debug<|> for Foo {\n+impl Debug for Foo {\n }\n \",\n         );\n@@ -435,7 +435,7 @@ mod foo {\n     mod bar {\n         use std::fmt::Debug;\n \n-        Debug<|>\n+        Debug\n     }\n }\n     \",\n@@ -458,7 +458,7 @@ fn main() {\n use std::fmt::Debug;\n \n fn main() {\n-    Debug<|>\n+    Debug\n }\n     \",\n         );"}, {"sha": "373a7f7cc121fa052547396f9314b17cbedf083e", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9cec56c8ce3811b01acbe385e3684d1c2dc20b/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=ee9cec56c8ce3811b01acbe385e3684d1c2dc20b", "patch": "@@ -105,18 +105,9 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n             change.edit.apply(&mut actual);\n \n             if !source_change.is_snippet {\n-                match source_change.cursor_position {\n-                    None => {\n-                        if let RangeOrOffset::Offset(before_cursor_pos) = range_or_offset {\n-                            let off = change\n-                                .edit\n-                                .apply_to_offset(before_cursor_pos)\n-                                .expect(\"cursor position is affected by the edit\");\n-                            actual = add_cursor(&actual, off)\n-                        }\n-                    }\n-                    Some(off) => actual = add_cursor(&actual, off.offset),\n-                };\n+                if let Some(off) = source_change.cursor_position {\n+                    actual = add_cursor(&actual, off.offset)\n+                }\n             }\n             assert_eq_text!(after, &actual);\n         }"}]}