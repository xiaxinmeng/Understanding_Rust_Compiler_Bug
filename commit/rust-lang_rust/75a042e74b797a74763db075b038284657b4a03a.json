{"sha": "75a042e74b797a74763db075b038284657b4a03a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YTA0MmU3NGI3OTdhNzQ3NjNkYjA3NWIwMzgyODQ2NTdiNGEwM2E=", "commit": {"author": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-08-28T10:38:43Z"}, "committer": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-09-02T07:40:10Z"}, "message": "Fix some unwanted uses of Debug formatting on user-facing messages\n\nWhile formatting for user diagnostics used `Display` for all most cases,\nsome small amount of cases used `Debug` instead.  Until now, `Display`\nand `Debug` yielded the same output for many types. However, with path\ntrimming, we want to show a shorter path for the user, these cases need\nfixing.", "tree": {"sha": "68f04e93f4da8948307ca4653754a3612d69b32d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68f04e93f4da8948307ca4653754a3612d69b32d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75a042e74b797a74763db075b038284657b4a03a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75a042e74b797a74763db075b038284657b4a03a", "html_url": "https://github.com/rust-lang/rust/commit/75a042e74b797a74763db075b038284657b4a03a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75a042e74b797a74763db075b038284657b4a03a/comments", "author": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "committer": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e36e4bd0f7e722d3c97d1ca45387e58f81e4e8ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e36e4bd0f7e722d3c97d1ca45387e58f81e4e8ea", "html_url": "https://github.com/rust-lang/rust/commit/e36e4bd0f7e722d3c97d1ca45387e58f81e4e8ea"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "00f7fead72f3a4d12a5fa24df4f5c755bc262146", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=75a042e74b797a74763db075b038284657b4a03a", "patch": "@@ -611,11 +611,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let sig = self.tcx.fn_sig(did);\n                     let bound_output = sig.output();\n                     let output = bound_output.skip_binder();\n-                    err.span_label(e.span, &format!(\"this method call resolves to `{:?}`\", output));\n+                    err.span_label(e.span, &format!(\"this method call resolves to `{}`\", output));\n                     let kind = &output.kind;\n                     if let ty::Projection(proj) = kind {\n                         if let Some(span) = self.tcx.hir().span_if_local(proj.item_def_id) {\n-                            err.span_label(span, &format!(\"`{:?}` defined here\", output));\n+                            err.span_label(span, &format!(\"`{}` defined here\", output));\n                         }\n                     }\n                 }"}, {"sha": "c061f485c1cf33d9c19ce0824a5eb267510eb0a4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=75a042e74b797a74763db075b038284657b4a03a", "patch": "@@ -58,8 +58,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             .tcx()\n             .sess\n             .struct_span_err(sp, \"`impl` item signature doesn't match `trait` item signature\");\n-        err.span_label(sp, &format!(\"found `{:?}`\", found));\n-        err.span_label(trait_sp, &format!(\"expected `{:?}`\", expected));\n+        err.span_label(sp, &format!(\"found `{}`\", found));\n+        err.span_label(trait_sp, &format!(\"expected `{}`\", expected));\n \n         // Get the span of all the used type parameters in the method.\n         let assoc_item = self.tcx().associated_item(trait_def_id);\n@@ -92,7 +92,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             err.note_expected_found(&\"\", expected, &\"\", found);\n         } else {\n             // This fallback shouldn't be necessary, but let's keep it in just in case.\n-            err.note(&format!(\"expected `{:?}`\\n   found `{:?}`\", expected, found));\n+            err.note(&format!(\"expected `{}`\\n   found `{}`\", expected, found));\n         }\n         err.span_help(\n             type_param_span,"}, {"sha": "c8b6705b35f363b6f6fe36fba152e9c16e77aae8", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=75a042e74b797a74763db075b038284657b4a03a", "patch": "@@ -260,10 +260,11 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n             InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n             InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n             InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n-            InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({:?})\", ty),\n+            InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),\n             InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n-            InstanceDef::DropGlue(_, ty) => write!(f, \" - shim({:?})\", ty),\n-            InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({:?})\", ty),\n+            InstanceDef::DropGlue(_, None) => write!(f, \" - shim(None)\"),\n+            InstanceDef::DropGlue(_, Some(ty)) => write!(f, \" - shim(Some({}))\", ty),\n+            InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({})\", ty),\n         }\n     }\n }"}, {"sha": "7d98922a59bf49f7926819bf397cb53ccab2819c", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=75a042e74b797a74763db075b038284657b4a03a", "patch": "@@ -174,9 +174,9 @@ pub enum LayoutError<'tcx> {\n impl<'tcx> fmt::Display for LayoutError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n-            LayoutError::Unknown(ty) => write!(f, \"the type `{:?}` has an unknown layout\", ty),\n+            LayoutError::Unknown(ty) => write!(f, \"the type `{}` has an unknown layout\", ty),\n             LayoutError::SizeOverflow(ty) => {\n-                write!(f, \"the type `{:?}` is too big for the current architecture\", ty)\n+                write!(f, \"the type `{}` is too big for the current architecture\", ty)\n             }\n         }\n     }"}, {"sha": "3a3bc080b9e14755813f5109b8f5f4a395e5efa3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=75a042e74b797a74763db075b038284657b4a03a", "patch": "@@ -1342,8 +1342,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     .normalize(candidate)\n                     .ok();\n                 match normalized {\n-                    Some(normalized) => format!(\"\\n  {:?}\", normalized.value),\n-                    None => format!(\"\\n  {:?}\", candidate),\n+                    Some(normalized) => format!(\"\\n  {}\", normalized.value),\n+                    None => format!(\"\\n  {}\", candidate),\n                 }\n             })\n         };"}, {"sha": "2c51eda6d639e8d9bb6abba19bacdf7ec83ae57a", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=75a042e74b797a74763db075b038284657b4a03a", "patch": "@@ -2487,14 +2487,14 @@ fn fn_sig_suggestion<'tcx>(\n                             _ => format!(\"self: {}\", ty),\n                         }\n                     } else {\n-                        format!(\"_: {:?}\", ty)\n+                        format!(\"_: {}\", ty)\n                     }\n                 }\n                 _ => {\n                     if assoc.fn_has_self_parameter && i == 0 {\n-                        format!(\"self: {:?}\", ty)\n+                        format!(\"self: {}\", ty)\n                     } else {\n-                        format!(\"_: {:?}\", ty)\n+                        format!(\"_: {}\", ty)\n                     }\n                 }\n             })\n@@ -2504,7 +2504,7 @@ fn fn_sig_suggestion<'tcx>(\n         .collect::<Vec<String>>()\n         .join(\", \");\n     let output = sig.output();\n-    let output = if !output.is_unit() { format!(\" -> {:?}\", output) } else { String::new() };\n+    let output = if !output.is_unit() { format!(\" -> {}\", output) } else { String::new() };\n \n     let unsafety = sig.unsafety.prefix_str();\n     let (generics, where_clauses) = bounds_from_generic_predicates(tcx, predicates);\n@@ -2542,7 +2542,7 @@ fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n         ty::AssocKind::Const => {\n             let ty = tcx.type_of(assoc.def_id);\n             let val = expr::ty_kind_suggestion(ty).unwrap_or(\"value\");\n-            format!(\"const {}: {:?} = {};\", assoc.ident, ty, val)\n+            format!(\"const {}: {} = {};\", assoc.ident, ty, val)\n         }\n     }\n }"}, {"sha": "835b70180a5ec257f679d1c3b4d897f106568e27", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75a042e74b797a74763db075b038284657b4a03a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=75a042e74b797a74763db075b038284657b4a03a", "patch": "@@ -1177,7 +1177,7 @@ fn e0307(fcx: &FnCtxt<'fcx, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n         fcx.tcx.sess.diagnostic(),\n         span,\n         E0307,\n-        \"invalid `self` parameter type: {:?}\",\n+        \"invalid `self` parameter type: {}\",\n         receiver_ty,\n     )\n     .note(\"type of `self` must be `Self` or a type that dereferences to it\")"}]}