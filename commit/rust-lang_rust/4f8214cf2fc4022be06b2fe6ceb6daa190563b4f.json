{"sha": "4f8214cf2fc4022be06b2fe6ceb6daa190563b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmODIxNGNmMmZjNDAyMmJlMDZiMmZlNmNlYjZkYWExOTA1NjNiNGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T17:17:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-13T17:17:10Z"}, "message": "Rollup merge of #65346 - RalfJung:nounwind-tests, r=nagisa\n\nnounwind tests and cleanup\n\nThis is a follow-up to @pnkfelix' https://github.com/rust-lang/rust/pull/65020. In particular it adds some tests as @nagisa  asked. It also does a cleanup that the original PR omitted to reduce backporting risks.\n\nI hope I finally managed to write an uncontroversial PR in this area. ;) This should not change any behavior, just test it better.", "tree": {"sha": "9ada5f860c9da21b2a28e3445bcbf4ecbb5adde4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ada5f860c9da21b2a28e3445bcbf4ecbb5adde4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdo1wWCRBK7hj4Ov3rIwAAdHIIAFWUkkMO4Fy42UsbBarZEXlk\neYUnf0CR/dA1lO5zY45HOL/T/+IDLvPfGP3gFTWx7TTyu12Ni4U8Ck99FP/VO5Wb\nVC9NZR+gxKB7nR0lfw/2j5OtOS0Wh48zW3dJ4BIYgBifVnOTpkKc0aPZvGCmzEZJ\ncQua8JZHDNQndrWi4o0HlMCUnbWgqVteUsChBaYHldbk0PjI6JktqSsKBgRElqBT\nu6ayz0RFigvrBtguEWQOYpOpfZPWtBm7YcZlzzZdYfuhXjkSFdzw45WrBc2iiYBI\nq2nkqFbov/YrBJGJLvqwd1YMGjU72sD+a0MhGkcDrESOlMXRhkeIzinJKyzDsH4=\n=Ba7c\n-----END PGP SIGNATURE-----\n", "payload": "tree 9ada5f860c9da21b2a28e3445bcbf4ecbb5adde4\nparent d10702b577916d54a252836c9bb77226a34f44bb\nparent 09d7be39fadf00e0b179bfaef86679fc489e796f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570987030 +0200\ncommitter GitHub <noreply@github.com> 1570987030 +0200\n\nRollup merge of #65346 - RalfJung:nounwind-tests, r=nagisa\n\nnounwind tests and cleanup\n\nThis is a follow-up to @pnkfelix' https://github.com/rust-lang/rust/pull/65020. In particular it adds some tests as @nagisa  asked. It also does a cleanup that the original PR omitted to reduce backporting risks.\n\nI hope I finally managed to write an uncontroversial PR in this area. ;) This should not change any behavior, just test it better.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f", "html_url": "https://github.com/rust-lang/rust/commit/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10702b577916d54a252836c9bb77226a34f44bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10702b577916d54a252836c9bb77226a34f44bb", "html_url": "https://github.com/rust-lang/rust/commit/d10702b577916d54a252836c9bb77226a34f44bb"}, {"sha": "09d7be39fadf00e0b179bfaef86679fc489e796f", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d7be39fadf00e0b179bfaef86679fc489e796f", "html_url": "https://github.com/rust-lang/rust/commit/09d7be39fadf00e0b179bfaef86679fc489e796f"}], "stats": {"total": 111, "additions": 63, "deletions": 48}, "files": [{"sha": "6a36a4a50cbf3f2210b81c9dbfd244d8778a5dcb", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=4f8214cf2fc4022be06b2fe6ceb6daa190563b4f", "patch": "@@ -270,23 +270,12 @@ pub fn from_fn_attrs(\n         // optimize based on this!\n         false\n     } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::UNWIND) {\n-        // If a specific #[unwind] attribute is present, use that\n+        // If a specific #[unwind] attribute is present, use that.\n         true\n     } else if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_ALLOCATOR_NOUNWIND) {\n-        // Special attribute for allocator functions, which can't unwind\n+        // Special attribute for allocator functions, which can't unwind.\n         false\n-    } else if let Some(_) = id {\n-        // rust-lang/rust#64655, rust-lang/rust#63909: to minimize\n-        // risk associated with changing cases where nounwind\n-        // attribute is attached, this code is deliberately mimicking\n-        // old control flow based on whether `id` is `Some` or `None`.\n-        //\n-        // However, in the long term we should either:\n-        // - fold this into final else (i.e. stop inspecting `id`)\n-        // - or, adopt Rust PR #63909.\n-        //\n-        // see also Rust RFC 2753.\n-\n+    } else {\n         let sig = cx.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         if sig.abi == Abi::Rust || sig.abi == Abi::RustCall {\n             // Any Rust method (or `extern \"Rust\" fn` or `extern\n@@ -312,15 +301,6 @@ pub fn from_fn_attrs(\n             // In either case, we mark item as explicitly nounwind.\n             false\n         }\n-    } else {\n-        // assume this can possibly unwind, avoiding the application of a\n-        // `nounwind` attribute below.\n-        //\n-        // (But: See comments in previous branch. Specifically, it is\n-        // unclear whether there is real value in the assumption this\n-        // can unwind. The conservatism here may just be papering over\n-        // a real problem by making some UB a bit harder to hit.)\n-        true\n     });\n \n     // Always annotate functions with the target-cpu they are compiled for."}, {"sha": "a935d8865226777371e97ea07c52039f46ddaead", "filename": "src/test/codegen/extern-functions.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d10702b577916d54a252836c9bb77226a34f44bb/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10702b577916d54a252836c9bb77226a34f44bb/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fextern-functions.rs?ref=d10702b577916d54a252836c9bb77226a34f44bb", "patch": "@@ -1,19 +0,0 @@\n-// compile-flags: -C no-prepopulate-passes\n-\n-#![crate_type = \"lib\"]\n-#![feature(unwind_attributes)]\n-\n-extern {\n-// CHECK: Function Attrs: nounwind\n-// CHECK-NEXT: declare void @extern_fn\n-    fn extern_fn();\n-// CHECK-NOT: Function Attrs: nounwind\n-// CHECK: declare void @unwinding_extern_fn\n-    #[unwind(allowed)]\n-    fn unwinding_extern_fn();\n-}\n-\n-pub unsafe fn force_declare() {\n-    extern_fn();\n-    unwinding_extern_fn();\n-}"}, {"sha": "54d6a8d2794ba368b4ecfb27595c12a515a57a15", "filename": "src/test/codegen/nounwind-extern.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d10702b577916d54a252836c9bb77226a34f44bb/src%2Ftest%2Fcodegen%2Fnounwind-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d10702b577916d54a252836c9bb77226a34f44bb/src%2Ftest%2Fcodegen%2Fnounwind-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnounwind-extern.rs?ref=d10702b577916d54a252836c9bb77226a34f44bb", "patch": "@@ -1,6 +0,0 @@\n-// compile-flags: -O\n-\n-#![crate_type = \"lib\"]\n-\n-// CHECK: Function Attrs: norecurse nounwind\n-pub extern fn foo() {}"}, {"sha": "ddb3a4f6b4dd811aaa1cff563763924716c53b23", "filename": "src/test/codegen/unwind-extern-exports.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs?ref=4f8214cf2fc4022be06b2fe6ceb6daa190563b4f", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: -C opt-level=0\n+\n+#![crate_type = \"lib\"]\n+#![feature(unwind_attributes)]\n+\n+// Make sure these all do *not* get the attribute.\n+// We disable optimizations to prevent LLVM from infering the attribute.\n+// CHECK-NOT: nounwind\n+\n+// \"C\" ABI\n+// pub extern fn foo() {} // FIXME right now we don't abort-on-panic but add `nounwind` nevertheless\n+#[unwind(allowed)]\n+pub extern fn foo_allowed() {}\n+\n+// \"Rust\"\n+// (`extern \"Rust\"` could be removed as all `fn` get it implicitly; we leave it in for clarity.)\n+pub extern \"Rust\" fn bar() {}\n+#[unwind(allowed)]\n+pub extern \"Rust\" fn bar_allowed() {}"}, {"sha": "485e8bbcd4289a231376bde1588ff96e62288f7a", "filename": "src/test/codegen/unwind-extern-imports.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8214cf2fc4022be06b2fe6ceb6daa190563b4f/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-extern-imports.rs?ref=4f8214cf2fc4022be06b2fe6ceb6daa190563b4f", "patch": "@@ -0,0 +1,41 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(unwind_attributes)]\n+\n+extern {\n+// CHECK: Function Attrs:{{.*}}nounwind\n+// CHECK-NEXT: declare void @extern_fn\n+    fn extern_fn();\n+// CHECK-NOT: Function Attrs:{{.*}}nounwind\n+// CHECK: declare void @unwinding_extern_fn\n+    #[unwind(allowed)]\n+    fn unwinding_extern_fn();\n+// CHECK-NOT: nounwind\n+// CHECK: declare void @aborting_extern_fn\n+    #[unwind(aborts)]\n+    fn aborting_extern_fn(); // FIXME: we want to have the attribute here\n+}\n+\n+extern \"Rust\" {\n+// CHECK-NOT: nounwind\n+// CHECK: declare void @rust_extern_fn\n+    fn rust_extern_fn();\n+// CHECK-NOT: nounwind\n+// CHECK: declare void @rust_unwinding_extern_fn\n+    #[unwind(allowed)]\n+    fn rust_unwinding_extern_fn();\n+// CHECK-NOT: nounwind\n+// CHECK: declare void @rust_aborting_extern_fn\n+    #[unwind(aborts)]\n+    fn rust_aborting_extern_fn(); // FIXME: we want to have the attribute here\n+}\n+\n+pub unsafe fn force_declare() {\n+    extern_fn();\n+    unwinding_extern_fn();\n+    aborting_extern_fn();\n+    rust_extern_fn();\n+    rust_unwinding_extern_fn();\n+    rust_aborting_extern_fn();\n+}"}]}