{"sha": "cfb6d84720019236e33872e145d187dfd6e81090", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjZkODQ3MjAwMTkyMzZlMzM4NzJlMTQ1ZDE4N2RmZDZlODEwOTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-03T12:19:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-03T12:19:21Z"}, "message": "Auto merge of #64999 - nikomatsakis:issue-60424-async-return-inference, r=cramertj\n\nextract expected return type for async fn generators\n\nFixes #60424\n\ncc @Centril, I know you've been eager to see this fixed.\n\nr? @cramertj", "tree": {"sha": "0832dd156d9ad55c93bee020fee1ea14c737a55e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0832dd156d9ad55c93bee020fee1ea14c737a55e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb6d84720019236e33872e145d187dfd6e81090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb6d84720019236e33872e145d187dfd6e81090", "html_url": "https://github.com/rust-lang/rust/commit/cfb6d84720019236e33872e145d187dfd6e81090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb6d84720019236e33872e145d187dfd6e81090/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0221e265621a5fcc68ca62bdcdeabad1882a0e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0221e265621a5fcc68ca62bdcdeabad1882a0e9a", "html_url": "https://github.com/rust-lang/rust/commit/0221e265621a5fcc68ca62bdcdeabad1882a0e9a"}, {"sha": "a807032f9e4e4b43db17a1f17be766bb02d23a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/a807032f9e4e4b43db17a1f17be766bb02d23a57", "html_url": "https://github.com/rust-lang/rust/commit/a807032f9e4e4b43db17a1f17be766bb02d23a57"}], "stats": {"total": 1260, "additions": 763, "deletions": 497}, "files": [{"sha": "d5fcc0ef6ede86293eec8b1bf606e242582d15fc", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -89,9 +89,14 @@ impl LoweringContext<'_> {\n                 hir::MatchSource::Normal,\n             ),\n             ExprKind::Async(capture_clause, closure_node_id, ref block) => {\n-                self.make_async_expr(capture_clause, closure_node_id, None, block.span, |this| {\n-                    this.with_new_scopes(|this| this.lower_block_expr(block))\n-                })\n+                self.make_async_expr(\n+                    capture_clause,\n+                    closure_node_id,\n+                    None,\n+                    block.span,\n+                    hir::AsyncGeneratorKind::Block,\n+                    |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n+                )\n             }\n             ExprKind::Await(ref expr) => self.lower_expr_await(e.span, expr),\n             ExprKind::Closure(\n@@ -457,6 +462,7 @@ impl LoweringContext<'_> {\n         closure_node_id: NodeId,\n         ret_ty: Option<AstP<Ty>>,\n         span: Span,\n+        async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n     ) -> hir::ExprKind {\n         let capture_clause = self.lower_capture_clause(capture_clause);\n@@ -470,7 +476,7 @@ impl LoweringContext<'_> {\n         };\n         let decl = self.lower_fn_decl(&ast_decl, None, /* impl trait allowed */ false, None);\n         let body_id = self.lower_fn_body(&ast_decl, |this| {\n-            this.generator_kind = Some(hir::GeneratorKind::Async);\n+            this.generator_kind = Some(hir::GeneratorKind::Async(async_gen_kind));\n             body(this)\n         });\n \n@@ -522,7 +528,7 @@ impl LoweringContext<'_> {\n     /// ```\n     fn lower_expr_await(&mut self, await_span: Span, expr: &Expr) -> hir::ExprKind {\n         match self.generator_kind {\n-            Some(hir::GeneratorKind::Async) => {},\n+            Some(hir::GeneratorKind::Async(_)) => {},\n             Some(hir::GeneratorKind::Gen) |\n             None => {\n                 let mut err = struct_span_err!(\n@@ -727,7 +733,7 @@ impl LoweringContext<'_> {\n                     Movability::Static => hir::GeneratorMovability::Static,\n                 })\n             },\n-            Some(hir::GeneratorKind::Async) => {\n+            Some(hir::GeneratorKind::Async(_)) => {\n                 bug!(\"non-`async` closure body turned `async` during lowering\");\n             },\n             None => {\n@@ -786,10 +792,12 @@ impl LoweringContext<'_> {\n                     None\n                 };\n                 let async_body = this.make_async_expr(\n-                    capture_clause, closure_id, async_ret_ty, body.span,\n-                    |this| {\n-                        this.with_new_scopes(|this| this.lower_expr(body))\n-                    }\n+                    capture_clause,\n+                    closure_id,\n+                    async_ret_ty,\n+                    body.span,\n+                    hir::AsyncGeneratorKind::Closure,\n+                    |this| this.with_new_scopes(|this| this.lower_expr(body)),\n                 );\n                 this.expr(fn_decl_span, async_body, ThinVec::new())\n             });\n@@ -1005,7 +1013,7 @@ impl LoweringContext<'_> {\n     fn lower_expr_yield(&mut self, span: Span, opt_expr: Option<&Expr>) -> hir::ExprKind {\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Gen) => {},\n-            Some(hir::GeneratorKind::Async) => {\n+            Some(hir::GeneratorKind::Async(_)) => {\n                 span_err!(\n                     self.sess,\n                     span,"}, {"sha": "548a2fedfff6dfc0da7e344d8520e56067afa39b", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1222,7 +1222,11 @@ impl LoweringContext<'_> {\n             }\n \n             let async_expr = this.make_async_expr(\n-                CaptureBy::Value, closure_id, None, body.span,\n+                CaptureBy::Value,\n+                closure_id,\n+                None,\n+                body.span,\n+                hir::AsyncGeneratorKind::Fn,\n                 |this| {\n                     // Create a block from the user's function body:\n                     let user_body = this.lower_block_expr(body);"}, {"sha": "d5892794d64968e09d92daa92e7d84b1886f7dbe", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1362,21 +1362,49 @@ impl Body {\n }\n \n /// The type of source expression that caused this generator to be created.\n-// Not `IsAsync` because we want to eventually add support for `AsyncGen`\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, HashStable,\n          RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum GeneratorKind {\n-    /// An `async` block or function.\n-    Async,\n+    /// An explicit `async` block or the body of an async function.\n+    Async(AsyncGeneratorKind),\n+\n     /// A generator literal created via a `yield` inside a closure.\n     Gen,\n }\n \n impl fmt::Display for GeneratorKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            GeneratorKind::Async(k) => fmt::Display::fmt(k, f),\n+            GeneratorKind::Gen => f.write_str(\"generator\"),\n+        }\n+    }\n+}\n+\n+/// In the case of a generator created as part of an async construct,\n+/// which kind of async construct caused it to be created?\n+///\n+/// This helps error messages but is also used to drive coercions in\n+/// type-checking (see #60424).\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, HashStable,\n+         RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+pub enum AsyncGeneratorKind {\n+    /// An explicit `async` block written by the user.\n+    Block,\n+\n+    /// An explicit `async` block written by the user.\n+    Closure,\n+\n+    /// The `async` block generated as the body of an async function.\n+    Fn,\n+}\n+\n+impl fmt::Display for AsyncGeneratorKind {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(match self {\n-            GeneratorKind::Async => \"`async` object\",\n-            GeneratorKind::Gen => \"generator\",\n+            AsyncGeneratorKind::Block => \"`async` block\",\n+            AsyncGeneratorKind::Closure => \"`async` closure body\",\n+            AsyncGeneratorKind::Fn => \"`async fn` body\",\n         })\n     }\n }\n@@ -1758,6 +1786,7 @@ pub struct Destination {\n pub enum GeneratorMovability {\n     /// May contain self-references, `!Unpin`.\n     Static,\n+\n     /// Must not contain self-references, `Unpin`.\n     Movable,\n }"}, {"sha": "1f75ebbd34875d7ee98284d7c2fac68ba72649c1", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1319,6 +1319,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Resolve any type variables found in `value` -- but only one\n+    /// level.  So, if the variable `?X` is bound to some type\n+    /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may\n+    /// itself be bound to a type).\n+    ///\n+    /// Useful when you only need to inspect the outermost level of\n+    /// the type and don't care about nested types (or perhaps you\n+    /// will be resolving them as well, e.g. in a loop).\n     pub fn shallow_resolve<T>(&self, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n@@ -1579,6 +1587,9 @@ impl<'a, 'tcx> ShallowResolver<'a, 'tcx> {\n         ShallowResolver { infcx }\n     }\n \n+    /// If `typ` is a type variable of some kind, resolve it one level\n+    /// (but do not resolve types found in the result). If `typ` is\n+    /// not a type variable, just return it unmodified.\n     pub fn shallow_resolve(&mut self, typ: Ty<'tcx>) -> Ty<'tcx> {\n         match typ.kind {\n             ty::Infer(ty::TyVar(v)) => {"}, {"sha": "162555cd3ce4ca62841b21b285488e5708db3858", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 131, "deletions": 3, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -337,7 +337,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> ClosureSignatures<'tcx> {\n         debug!(\"sig_of_closure_no_expectation()\");\n \n-        let bound_sig = self.supplied_sig_of_closure(expr_def_id, decl);\n+        let bound_sig = self.supplied_sig_of_closure(expr_def_id, decl, body);\n \n         self.closure_sigs(expr_def_id, body, bound_sig)\n     }\n@@ -490,7 +490,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         //\n         // (See comment on `sig_of_closure_with_expectation` for the\n         // meaning of these letters.)\n-        let supplied_sig = self.supplied_sig_of_closure(expr_def_id, decl);\n+        let supplied_sig = self.supplied_sig_of_closure(expr_def_id, decl, body);\n \n         debug!(\n             \"check_supplied_sig_against_expectation: supplied_sig={:?}\",\n@@ -591,14 +591,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl,\n+        body: &hir::Body,\n     ) -> ty::PolyFnSig<'tcx> {\n         let astconv: &dyn AstConv<'_> = self;\n \n+        debug!(\n+            \"supplied_sig_of_closure(decl={:?}, body.generator_kind={:?})\",\n+            decl,\n+            body.generator_kind,\n+        );\n+\n         // First, convert the types that the user supplied (if any).\n         let supplied_arguments = decl.inputs.iter().map(|a| astconv.ast_ty_to_ty(a));\n         let supplied_return = match decl.output {\n             hir::Return(ref output) => astconv.ast_ty_to_ty(&output),\n-            hir::DefaultReturn(_) => astconv.ty_infer(None, decl.output.span()),\n+            hir::DefaultReturn(_) => match body.generator_kind {\n+                // In the case of the async block that we create for a function body,\n+                // we expect the return type of the block to match that of the enclosing\n+                // function.\n+                Some(hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Fn)) => {\n+                    debug!(\"supplied_sig_of_closure: closure is async fn body\");\n+                    self.deduce_future_output_from_obligations(expr_def_id)\n+                }\n+\n+                _ => astconv.ty_infer(None, decl.output.span()),\n+            }\n         };\n \n         let result = ty::Binder::bind(self.tcx.mk_fn_sig(\n@@ -620,6 +637,117 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         result\n     }\n \n+    /// Invoked when we are translating the generator that results\n+    /// from desugaring an `async fn`. Returns the \"sugared\" return\n+    /// type of the `async fn` -- that is, the return type that the\n+    /// user specified. The \"desugared\" return type is a `impl\n+    /// Future<Output = T>`, so we do this by searching through the\n+    /// obligations to extract the `T`.\n+    fn deduce_future_output_from_obligations(\n+        &self,\n+        expr_def_id: DefId,\n+    ) -> Ty<'tcx> {\n+        debug!(\"deduce_future_output_from_obligations(expr_def_id={:?})\", expr_def_id);\n+\n+        let ret_coercion =\n+            self.ret_coercion\n+            .as_ref()\n+            .unwrap_or_else(|| span_bug!(\n+                self.tcx.def_span(expr_def_id),\n+                \"async fn generator outside of a fn\"\n+            ));\n+\n+        // In practice, the return type of the surrounding function is\n+        // always a (not yet resolved) inference variable, because it\n+        // is the hidden type for an `impl Trait` that we are going to\n+        // be inferring.\n+        let ret_ty = ret_coercion.borrow().expected_ty();\n+        let ret_ty = self.inh.infcx.shallow_resolve(ret_ty);\n+        let ret_vid = match ret_ty.kind {\n+            ty::Infer(ty::TyVar(ret_vid)) => ret_vid,\n+            _ => {\n+                span_bug!(\n+                    self.tcx.def_span(expr_def_id),\n+                    \"async fn generator return type not an inference variable\"\n+                )\n+            }\n+        };\n+\n+        // Search for a pending obligation like\n+        //\n+        // `<R as Future>::Output = T`\n+        //\n+        // where R is the return type we are expecting. This type `T`\n+        // will be our output.\n+        let output_ty = self.obligations_for_self_ty(ret_vid)\n+            .find_map(|(_, obligation)| {\n+                if let ty::Predicate::Projection(ref proj_predicate) = obligation.predicate {\n+                    self.deduce_future_output_from_projection(\n+                        obligation.cause.span,\n+                        proj_predicate\n+                    )\n+                } else {\n+                    None\n+                }\n+            })\n+            .unwrap();\n+\n+        debug!(\"deduce_future_output_from_obligations: output_ty={:?}\", output_ty);\n+        output_ty\n+    }\n+\n+    /// Given a projection like\n+    ///\n+    /// `<X as Future>::Output = T`\n+    ///\n+    /// where `X` is some type that has no late-bound regions, returns\n+    /// `Some(T)`. If the projection is for some other trait, returns\n+    /// `None`.\n+    fn deduce_future_output_from_projection(\n+        &self,\n+        cause_span: Span,\n+        predicate: &ty::PolyProjectionPredicate<'tcx>,\n+    ) -> Option<Ty<'tcx>> {\n+        debug!(\"deduce_future_output_from_projection(predicate={:?})\", predicate);\n+\n+        // We do not expect any bound regions in our predicate, so\n+        // skip past the bound vars.\n+        let predicate = match predicate.no_bound_vars() {\n+            Some(p) => p,\n+            None => {\n+                debug!(\"deduce_future_output_from_projection: has late-bound regions\");\n+                return None;\n+            }\n+        };\n+\n+        // Check that this is a projection from the `Future` trait.\n+        let trait_ref = predicate.projection_ty.trait_ref(self.tcx);\n+        let future_trait = self.tcx.lang_items().future_trait().unwrap();\n+        if trait_ref.def_id != future_trait {\n+            debug!(\"deduce_future_output_from_projection: not a future\");\n+            return None;\n+        }\n+\n+        // The `Future` trait has only one associted item, `Output`,\n+        // so check that this is what we see.\n+        let output_assoc_item = self.tcx.associated_items(future_trait).nth(0).unwrap().def_id;\n+        if output_assoc_item != predicate.projection_ty.item_def_id {\n+            span_bug!(\n+                cause_span,\n+                \"projecting associated item `{:?}` from future, which is not Output `{:?}`\",\n+                predicate.projection_ty.item_def_id,\n+                output_assoc_item,\n+            );\n+        }\n+\n+        // Extract the type from the projection. Note that there can\n+        // be no bound variables in this type because the \"self type\"\n+        // does not have any regions in it.\n+        let output_ty = self.resolve_vars_if_possible(&predicate.ty);\n+        debug!(\"deduce_future_output_from_projection: output_ty={:?}\", output_ty);\n+        Some(output_ty)\n+    }\n+\n     /// Converts the types that the user supplied, in case that doing\n     /// so should yield an error, but returns back a signature where\n     /// all parameters are of type `TyErr`."}, {"sha": "619768e018c77c25974732297afcd6b50101b6ae", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n             expr_and_pat_count: 0,\n             source: match self.kind { // Guess based on the kind of the current generator.\n                 hir::GeneratorKind::Gen => hir::YieldSource::Yield,\n-                hir::GeneratorKind::Async => hir::YieldSource::Await,\n+                hir::GeneratorKind::Async(_) => hir::YieldSource::Await,\n             },\n         }));\n "}, {"sha": "880998ab72ec4c471b90b6f35486bf1c68c4f32b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -562,7 +562,19 @@ pub struct FnCtxt<'a, 'tcx> {\n     // if type checking is run in parallel.\n     err_count_on_creation: usize,\n \n+    /// If `Some`, this stores coercion information for returned\n+    /// expressions. If `None`, this is in a context where return is\n+    /// inappropriate, such as a const expression.\n+    ///\n+    /// This is a `RefCell<DynamicCoerceMany>`, which means that we\n+    /// can track all the return expressions and then use them to\n+    /// compute a useful coercion from the set, similar to a match\n+    /// expression or other branching context. You can use methods\n+    /// like `expected_ty` to access the declared return type (if\n+    /// any).\n     ret_coercion: Option<RefCell<DynamicCoerceMany<'tcx>>>,\n+\n+    /// First span of a return site that we find. Used in error messages.\n     ret_coercion_span: RefCell<Option<Span>>,\n \n     yield_ty: Option<Ty<'tcx>>,\n@@ -4534,7 +4546,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let item_id = self.tcx().hir().get_parent_node(self.body_id);\n         if let Some(body_id) = self.tcx().hir().maybe_body_owned_by(item_id) {\n             let body = self.tcx().hir().body(body_id);\n-            if let Some(hir::GeneratorKind::Async) = body.generator_kind {\n+            if let Some(hir::GeneratorKind::Async(_)) = body.generator_kind {\n                 let sp = expr.span;\n                 // Check for `Future` implementations by constructing a predicate to\n                 // prove: `<T as Future>::Output == U`"}, {"sha": "971d4476334815d708ffbce28380ff0d368a0669", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -20,7 +20,7 @@ fn return_targets_async_block_not_fn() -> u8 {\n }\n \n async fn return_targets_async_block_not_async_fn() -> u8 {\n-    //~^ ERROR type mismatch resolving\n+    //~^ ERROR mismatched types\n     let block = async {\n         return 0u8;\n     };"}, {"sha": "a9b0e7ae7795daf6fdc18fb5c39945defe7c505b", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -39,6 +39,22 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n               found type `()`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n+error[E0308]: mismatched types\n+  --> $DIR/async-block-control-flow-static-semantics.rs:22:58\n+   |\n+LL |   async fn return_targets_async_block_not_async_fn() -> u8 {\n+   |  __________________________________________________________^\n+LL | |\n+LL | |     let block = async {\n+LL | |         return 0u8;\n+...  |\n+LL | |\n+LL | | }\n+   | |_^ expected u8, found ()\n+   |\n+   = note: expected type `u8`\n+              found type `()`\n+\n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n    |\n@@ -49,16 +65,6 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n               found type `()`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n-error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == u8`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:22:55\n-   |\n-LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n-   |                                                       ^^ expected (), found u8\n-   |\n-   = note: expected type `()`\n-              found type `u8`\n-   = note: the return type of a function must have a statically known size\n-\n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:48:44\n    |"}, {"sha": "28132c9789c67ad922ecb7ba28caa5e50cab6569", "filename": "src/test/ui/async-await/async-error-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -9,7 +9,7 @@ fn get_future() -> impl Future<Output = ()> {\n }\n \n async fn foo() {\n-    let a; //~ ERROR type inside `async` object must be known in this context\n+    let a; //~ ERROR type inside `async fn` body must be known in this context\n     get_future().await;\n }\n "}, {"sha": "b551b99587dd939d15c1a162e4073d71d14ba1d2", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1,10 +1,10 @@\n-error[E0698]: type inside `async` object must be known in this context\n+error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/async-error-span.rs:12:9\n    |\n LL |     let a;\n    |         ^ cannot infer type\n    |\n-note: the type is part of the `async` object because of this `await`\n+note: the type is part of the `async fn` body because of this `await`\n   --> $DIR/async-error-span.rs:13:5\n    |\n LL |     get_future().await;"}, {"sha": "baecf49c798e2a3abe86111a1c789ba2ed058654", "filename": "src/test/ui/async-await/issues/issue-63388-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -9,9 +9,9 @@ trait Foo {}\n impl Xyz {\n     async fn do_sth<'a>(\n         &'a self, foo: &dyn Foo\n-    ) -> &dyn Foo //~ ERROR lifetime mismatch\n+    ) -> &dyn Foo\n     {\n-        foo\n+        foo  //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "2917fa9ccb7f2f28522f4ab9552178bcd5e00f78", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1,12 +1,13 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-63388-1.rs:12:10\n+  --> $DIR/issue-63388-1.rs:14:9\n    |\n LL |         &'a self, foo: &dyn Foo\n    |         -------- this parameter and the return type are declared with different lifetimes...\n LL |     ) -> &dyn Foo\n-   |          ^^^^^^^^\n-   |          |\n-   |          ...but data from `foo` is returned here\n+   |          --------\n+LL |     {\n+LL |         foo\n+   |         ^^^ ...but data from `foo` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "5099297fbeb19ec34c626cb5160cd18fa35a63d9", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -11,8 +11,9 @@ error: cannot infer an appropriate lifetime\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |         ^^^ ...but this borrow...\n-LL |     ) -> &dyn Foo\n-   |          -------- this return type evaluates to the `'static` lifetime...\n+...\n+LL |         foo\n+   |         --- this return type evaluates to the `'static` lifetime...\n    |\n note: ...can't outlive the lifetime '_ as defined on the method body at 11:14\n   --> $DIR/issue-63388-2.rs:11:14\n@@ -21,8 +22,8 @@ LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              ^\n help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 11:14\n    |\n-LL |     ) -> &dyn Foo + '_\n-   |          ^^^^^^^^^^^^^\n+LL |         foo + '_\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9fe0869cad6c0816d864c7fabd317d43c9e3fb88", "filename": "src/test/ui/async-await/return-ty-raw-ptr-coercion.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Freturn-ty-raw-ptr-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Freturn-ty-raw-ptr-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Freturn-ty-raw-ptr-coercion.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -0,0 +1,25 @@\n+// Check that we apply unsizing coercions based on the return type.\n+//\n+// Also serves as a regression test for #60424.\n+//\n+// edition:2018\n+// check-pass\n+\n+#![allow(warnings)]\n+\n+use std::fmt::Debug;\n+\n+const TMP: u32 = 22;\n+\n+// Coerce from `&u32` to `*const u32`\n+fn raw_pointer_coercion() {\n+    fn sync_example() -> *const u32 {\n+        &TMP\n+    }\n+\n+    async fn async_example() -> *const u32 {\n+        &TMP\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "93832ef7eddb553f9e285becdd9892eaf21a032e", "filename": "src/test/ui/async-await/return-ty-unsize-coercion.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Freturn-ty-unsize-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Freturn-ty-unsize-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Freturn-ty-unsize-coercion.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -0,0 +1,45 @@\n+// Check that we apply unsizing coercions based on the return type.\n+//\n+// Also serves as a regression test for #60424.\n+//\n+// edition:2018\n+// check-pass\n+\n+#![allow(warnings)]\n+\n+use std::fmt::Debug;\n+\n+// Unsizing coercion from `Box<&'static str>` to `Box<dyn Debug>`.\n+fn unsize_trait_coercion() {\n+    fn sync_example() -> Box<dyn Debug> {\n+        Box::new(\"asdf\")\n+    }\n+\n+    async fn async_example() -> Box<dyn Debug> {\n+        Box::new(\"asdf\")\n+    }\n+}\n+\n+// Unsizing coercion from `Box<[u32; N]>` to `Box<[32]>`.\n+fn unsize_slice_coercion() {\n+    fn sync_example() -> Box<[u32]> {\n+        Box::new([0])\n+    }\n+\n+    async fn async_example() -> Box<[u32]> {\n+        Box::new([0])\n+    }\n+}\n+\n+// Unsizing coercion from `&[&str; 1]` to `&[&str]`\n+fn unsize_slice_str_coercion() {\n+    fn sync_example() -> &'static [&'static str] {\n+        &[\"hi\"]\n+    }\n+\n+    async fn async_example() -> &'static [&'static str] {\n+        &[\"hi\"]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2876f9fea0e00aa191f5ae5f64aa43487684c4bd", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -7,9 +7,9 @@ async fn bar<T>() -> () {}\n \n async fn foo() {\n     bar().await;\n-    //~^ ERROR type inside `async` object must be known in this context\n+    //~^ ERROR type inside `async fn` body must be known in this context\n     //~| NOTE cannot infer type for `T`\n-    //~| NOTE the type is part of the `async` object because of this `await`\n+    //~| NOTE the type is part of the `async fn` body because of this `await`\n     //~| NOTE in this expansion of desugaring of `await`\n }\n fn main() {}"}, {"sha": "c7866fc774415fa2a61b568baa282421606dfbe3", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1,10 +1,10 @@\n-error[E0698]: type inside `async` object must be known in this context\n+error[E0698]: type inside `async fn` body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for `T`\n    |\n-note: the type is part of the `async` object because of this `await`\n+note: the type is part of the `async fn` body because of this `await`\n   --> $DIR/unresolved_type_param.rs:9:5\n    |\n LL |     bar().await;"}, {"sha": "7eec31d36e39e30350e2e2aa9fdf8f9c1d4be631", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -7,19 +7,19 @@ LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:50\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          -                       ^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |                          -                         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n    |                          |\n    |                          lifetime `'_` defined here\n    |                          lifetime `'_` defined here\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:73\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:75\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -                                              ^^^^^^^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |                          -                                                ^^^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n    |                          |\n    |                          lifetime `'_` defined here\n    |                          lifetime `'_` defined here\n@@ -33,12 +33,11 @@ LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:62\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                  --              -                           ^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'a`\n-   |                  |               |\n-   |                  |               lifetime `'_` defined here\n+   |                  --              - lifetime `'_` defined here  ^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'a`\n+   |                  |\n    |                  lifetime `'a` defined here\n \n error: aborting due to 5 previous errors"}, {"sha": "e3c261576e61e8909680a68abc1572ee7c0ba913", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1,28 +1,25 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:45\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          ----               ^^^^\n-   |                          |                  |\n-   |                          |                  ...but data from `f` is returned here\n+   |                          ----               ----   ^ ...but data from `f` is returned here\n+   |                          |\n    |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:55\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:82\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -----                        ^^^^^^^^^^^^^^^^^\n-   |                          |                            |\n-   |                          |                            ...but data from `f` is returned here\n+   |                          -----                        -----------------          ^ ...but data from `f` is returned here\n+   |                          |\n    |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                                  -----                   ^^^\n-   |                                  |                       |\n-   |                                  |                       ...but data from `arg` is returned here\n+   |                                  -----                   ---   ^^^ ...but data from `arg` is returned here\n+   |                                  |\n    |                                  this parameter and the return type are declared with different lifetimes...\n \n error: aborting due to 3 previous errors"}, {"sha": "b4f8ff6001d60b8d4d0f5376dbbbf1de0ce97098", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 54, "deletions": 60, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -7,16 +7,15 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:13:47\n-   |\n-LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n-   |  _______________________-_______________________^\n-   | |                       |\n-   | |                       lifetime `'_` defined here\n-   | |                       lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/lt-ref-self-async.rs:14:9\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                       -\n+   |                       |\n+   |                       lifetime `'_` defined here\n+   |                       lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:19:48\n@@ -27,16 +26,15 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:19:53\n-   |\n-LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |  _____________________________-_______________________^\n-   | |                             |\n-   | |                             lifetime `'_` defined here\n-   | |                             lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/lt-ref-self-async.rs:20:9\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                             -\n+   |                             |\n+   |                             lifetime `'_` defined here\n+   |                             lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:23:57\n@@ -47,16 +45,15 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:23:62\n-   |\n-LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |  _____________________________________-________________________^\n-   | |                                     |\n-   | |                                     lifetime `'_` defined here\n-   | |                                     lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/lt-ref-self-async.rs:24:9\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                     -\n+   |                                     |\n+   |                                     lifetime `'_` defined here\n+   |                                     lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:27:57\n@@ -67,16 +64,15 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:27:62\n-   |\n-LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |  _____________________________________-________________________^\n-   | |                                     |\n-   | |                                     lifetime `'_` defined here\n-   | |                                     lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/lt-ref-self-async.rs:28:9\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                     -\n+   |                                     |\n+   |                                     lifetime `'_` defined here\n+   |                                     lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:31:66\n@@ -87,16 +83,15 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:31:71\n-   |\n-LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |  _____________________________________________-_________________________^\n-   | |                                             |\n-   | |                                             lifetime `'_` defined here\n-   | |                                             lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/lt-ref-self-async.rs:32:9\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                             -\n+   |                                             |\n+   |                                             lifetime `'_` defined here\n+   |                                             lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/lt-ref-self-async.rs:35:62\n@@ -107,16 +102,15 @@ LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:35:67\n-   |\n-LL |       async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |  _________________________________________-_________________________^\n-   | |                                         |\n-   | |                                         lifetime `'_` defined here\n-   | |                                         lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/lt-ref-self-async.rs:36:9\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                         -\n+   |                                         |\n+   |                                         lifetime `'_` defined here\n+   |                                         lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "5aba7cfcf296e7c4add58e65122af7bd37d91073", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -11,29 +11,29 @@ impl<'a> Struct<'a> {\n     // Test using `&self` sugar:\n \n     async fn ref_self(&self, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     // Test using `&Self` explicitly:\n \n     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "6b668d9f1f655a4baeac456bbc1a5a964eb7c272", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1,56 +1,62 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:13:42\n+  --> $DIR/lt-ref-self-async.rs:14:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -----              ^^^^\n-   |                       |                  |\n-   |                       |                  ...but data from `f` is returned here\n+   |                       -----              ----\n+   |                       |\n    |                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:19:48\n+  --> $DIR/lt-ref-self-async.rs:20:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -----              ^^^^\n-   |                             |                  |\n-   |                             |                  ...but data from `f` is returned here\n+   |                             -----              ----\n+   |                             |\n    |                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:23:57\n+  --> $DIR/lt-ref-self-async.rs:24:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ^^^^\n-   |                                     |                   |\n-   |                                     |                   ...but data from `f` is returned here\n+   |                                     -----               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:27:57\n+  --> $DIR/lt-ref-self-async.rs:28:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ^^^^\n-   |                                     |                   |\n-   |                                     |                   ...but data from `f` is returned here\n+   |                                     -----               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:31:66\n+  --> $DIR/lt-ref-self-async.rs:32:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----                ^^^^\n-   |                                             |                    |\n-   |                                             |                    ...but data from `f` is returned here\n+   |                                             -----                ----\n+   |                                             |\n    |                                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:35:62\n+  --> $DIR/lt-ref-self-async.rs:36:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                         -----                ^^^^\n-   |                                         |                    |\n-   |                                         |                    ...but data from `f` is returned here\n+   |                                         -----                ----\n+   |                                         |\n    |                                         this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b6f2b63f093b193c3ccffbb77b7d0751fbc27fd9", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 54, "deletions": 60, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -7,16 +7,15 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:13:51\n-   |\n-LL |       async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |  _______________________-___________________________^\n-   | |                       |\n-   | |                       lifetime `'_` defined here\n-   | |                       lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-mut-self-async.rs:14:9\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                       -\n+   |                       |\n+   |                       lifetime `'_` defined here\n+   |                       lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:19:52\n@@ -27,16 +26,15 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:19:57\n-   |\n-LL |       async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |  _____________________________-___________________________^\n-   | |                             |\n-   | |                             lifetime `'_` defined here\n-   | |                             lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-mut-self-async.rs:20:9\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                             -\n+   |                             |\n+   |                             lifetime `'_` defined here\n+   |                             lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:23:61\n@@ -47,16 +45,15 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:23:66\n-   |\n-LL |       async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |  _____________________________________-____________________________^\n-   | |                                     |\n-   | |                                     lifetime `'_` defined here\n-   | |                                     lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-mut-self-async.rs:24:9\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                     -\n+   |                                     |\n+   |                                     lifetime `'_` defined here\n+   |                                     lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:27:61\n@@ -67,16 +64,15 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:27:66\n-   |\n-LL |       async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |  _____________________________________-____________________________^\n-   | |                                     |\n-   | |                                     lifetime `'_` defined here\n-   | |                                     lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-mut-self-async.rs:28:9\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                     -\n+   |                                     |\n+   |                                     lifetime `'_` defined here\n+   |                                     lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:31:70\n@@ -87,16 +83,15 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:31:75\n-   |\n-LL |       async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |  _____________________________________________-_____________________________^\n-   | |                                             |\n-   | |                                             lifetime `'_` defined here\n-   | |                                             lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-mut-self-async.rs:32:9\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                             -\n+   |                                             |\n+   |                                             lifetime `'_` defined here\n+   |                                             lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-self-async.rs:35:70\n@@ -107,16 +102,15 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:35:75\n-   |\n-LL |       async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |  _____________________________________________-_____________________________^\n-   | |                                             |\n-   | |                                             lifetime `'_` defined here\n-   | |                                             lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-mut-self-async.rs:36:9\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                             -\n+   |                                             |\n+   |                                             lifetime `'_` defined here\n+   |                                             lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "b8eb416d90432a2e702eafc34e2177983164bcd1", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -10,30 +10,30 @@ struct Struct { }\n impl Struct {\n     // Test using `&mut self` sugar:\n \n-    async fn ref_self(&mut self, f: &u32) -> &u32 { //~ ERROR lifetime mismatch\n-        f\n+    async fn ref_self(&mut self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n     }\n \n     // Test using `&mut Self` explicitly:\n \n     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "29fbec9fa7ae0765f9ba41b93ec5aaf414e82c15", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1,56 +1,62 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:13:46\n+  --> $DIR/ref-mut-self-async.rs:14:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                       ---------              ^^^^\n-   |                       |                      |\n-   |                       |                      ...but data from `f` is returned here\n+   |                       ---------              ----\n+   |                       |\n    |                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:19:52\n+  --> $DIR/ref-mut-self-async.rs:20:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                             ---------              ^^^^\n-   |                             |                      |\n-   |                             |                      ...but data from `f` is returned here\n+   |                             ---------              ----\n+   |                             |\n    |                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:23:61\n+  --> $DIR/ref-mut-self-async.rs:24:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                     ---------               ^^^^\n-   |                                     |                       |\n-   |                                     |                       ...but data from `f` is returned here\n+   |                                     ---------               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:27:61\n+  --> $DIR/ref-mut-self-async.rs:28:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                     ---------               ^^^^\n-   |                                     |                       |\n-   |                                     |                       ...but data from `f` is returned here\n+   |                                     ---------               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:31:70\n+  --> $DIR/ref-mut-self-async.rs:32:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             ---------                ^^^^\n-   |                                             |                        |\n-   |                                             |                        ...but data from `f` is returned here\n+   |                                             ---------                ----\n+   |                                             |\n    |                                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:35:70\n+  --> $DIR/ref-mut-self-async.rs:36:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             ---------                ^^^^\n-   |                                             |                        |\n-   |                                             |                        ...but data from `f` is returned here\n+   |                                             ---------                ----\n+   |                                             |\n    |                                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "fa78543bd87ab14d7c3159da606e3d0a2124eea2", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 40, "deletions": 45, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -7,16 +7,15 @@ LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:13:61\n+  --> $DIR/ref-mut-struct-async.rs:14:9\n    |\n-LL |       async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |  _______________________________-_____________________________^\n-   | |                               |\n-   | |                               lifetime `'_` defined here\n-   | |                               lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                               -\n+   |                               |\n+   |                               lifetime `'_` defined here\n+   |                               lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:17:65\n@@ -27,16 +26,15 @@ LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:17:70\n+  --> $DIR/ref-mut-struct-async.rs:18:9\n    |\n-LL |       async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |  _______________________________________-______________________________^\n-   | |                                       |\n-   | |                                       lifetime `'_` defined here\n-   | |                                       lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                       -\n+   |                                       |\n+   |                                       lifetime `'_` defined here\n+   |                                       lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:21:65\n@@ -47,16 +45,15 @@ LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:21:70\n+  --> $DIR/ref-mut-struct-async.rs:22:9\n    |\n-LL |       async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |  _______________________________________-______________________________^\n-   | |                                       |\n-   | |                                       lifetime `'_` defined here\n-   | |                                       lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                       -\n+   |                                       |\n+   |                                       lifetime `'_` defined here\n+   |                                       lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:25:74\n@@ -67,16 +64,15 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:25:79\n+  --> $DIR/ref-mut-struct-async.rs:26:9\n    |\n-LL |       async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |  _______________________________________________-_______________________________^\n-   | |                                               |\n-   | |                                               lifetime `'_` defined here\n-   | |                                               lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                               -\n+   |                                               |\n+   |                                               lifetime `'_` defined here\n+   |                                               lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-mut-struct-async.rs:29:74\n@@ -87,16 +83,15 @@ LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:29:79\n+  --> $DIR/ref-mut-struct-async.rs:30:9\n    |\n-LL |       async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |  _______________________________________________-_______________________________^\n-   | |                                               |\n-   | |                                               lifetime `'_` defined here\n-   | |                                               lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                               -\n+   |                                               |\n+   |                                               lifetime `'_` defined here\n+   |                                               lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "1822a9a468b0ee32b54bf38590d3536834d724b1", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -11,23 +11,23 @@ impl Struct {\n     // Test using `&mut Struct` explicitly:\n \n     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "46591bfc9580fd8478dabcdb49e23ef6190d4ac6", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1,47 +1,52 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:13:56\n+  --> $DIR/ref-mut-struct-async.rs:14:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                               -----------              ^^^^\n-   |                               |                        |\n-   |                               |                        ...but data from `f` is returned here\n+   |                               -----------              ----\n+   |                               |\n    |                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:17:65\n+  --> $DIR/ref-mut-struct-async.rs:18:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -----------               ^^^^\n-   |                                       |                         |\n-   |                                       |                         ...but data from `f` is returned here\n+   |                                       -----------               ----\n+   |                                       |\n    |                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:21:65\n+  --> $DIR/ref-mut-struct-async.rs:22:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -----------               ^^^^\n-   |                                       |                         |\n-   |                                       |                         ...but data from `f` is returned here\n+   |                                       -----------               ----\n+   |                                       |\n    |                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:25:74\n+  --> $DIR/ref-mut-struct-async.rs:26:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -----------                ^^^^\n-   |                                               |                          |\n-   |                                               |                          ...but data from `f` is returned here\n+   |                                               -----------                ----\n+   |                                               |\n    |                                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:29:74\n+  --> $DIR/ref-mut-struct-async.rs:30:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -----------                ^^^^\n-   |                                               |                          |\n-   |                                               |                          ...but data from `f` is returned here\n+   |                                               -----------                ----\n+   |                                               |\n    |                                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "88fd2101bc619b3bedede0e66bc45adf069cd311", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 63, "deletions": 70, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -7,16 +7,15 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:22:47\n-   |\n-LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n-   |  _______________________-_______________________^\n-   | |                       |\n-   | |                       lifetime `'_` defined here\n-   | |                       lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-self-async.rs:23:9\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                       -\n+   |                       |\n+   |                       lifetime `'_` defined here\n+   |                       lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-self-async.rs:28:48\n@@ -27,16 +26,15 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:28:53\n-   |\n-LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |  _____________________________-_______________________^\n-   | |                             |\n-   | |                             lifetime `'_` defined here\n-   | |                             lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-self-async.rs:29:9\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                             -\n+   |                             |\n+   |                             lifetime `'_` defined here\n+   |                             lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-self-async.rs:32:57\n@@ -47,16 +45,15 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:32:62\n-   |\n-LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |  _____________________________________-________________________^\n-   | |                                     |\n-   | |                                     lifetime `'_` defined here\n-   | |                                     lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-self-async.rs:33:9\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                     -\n+   |                                     |\n+   |                                     lifetime `'_` defined here\n+   |                                     lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-self-async.rs:36:57\n@@ -67,16 +64,15 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:36:62\n-   |\n-LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |  _____________________________________-________________________^\n-   | |                                     |\n-   | |                                     lifetime `'_` defined here\n-   | |                                     lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-self-async.rs:37:9\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                     -\n+   |                                     |\n+   |                                     lifetime `'_` defined here\n+   |                                     lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-self-async.rs:40:66\n@@ -87,16 +83,15 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:40:71\n-   |\n-LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |  _____________________________________________-_________________________^\n-   | |                                             |\n-   | |                                             lifetime `'_` defined here\n-   | |                                             lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-self-async.rs:41:9\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                             -\n+   |                                             |\n+   |                                             lifetime `'_` defined here\n+   |                                             lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-self-async.rs:44:66\n@@ -107,16 +102,15 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:44:71\n-   |\n-LL |       async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |  _____________________________________________-_________________________^\n-   | |                                             |\n-   | |                                             lifetime `'_` defined here\n-   | |                                             lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-self-async.rs:45:9\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                             -\n+   |                                             |\n+   |                                             lifetime `'_` defined here\n+   |                                             lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-self-async.rs:48:69\n@@ -127,16 +121,15 @@ LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:48:73\n-   |\n-LL |       async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |  ____________________________________________-____________________________^\n-   | |                                            |\n-   | |                                            lifetime `'_` defined here\n-   | |                                            lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+  --> $DIR/ref-self-async.rs:49:9\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                            -\n+   |                                            |\n+   |                                            lifetime `'_` defined here\n+   |                                            lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "9425fbfca8f084e532d4073a1d01bbe52101f715", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -19,34 +19,34 @@ impl<T, P> Deref for Wrap<T, P> {\n impl Struct {\n     // Test using `&self` sugar:\n \n-    async fn ref_self(&self, f: &u32) -> &u32 { //~ ERROR lifetime mismatch\n-        f\n+    async fn ref_self(&self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n     }\n \n     // Test using `&Self` explicitly:\n \n     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "c255d18936376371ef061af09c33561f95e05e50", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1,65 +1,72 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:22:42\n+  --> $DIR/ref-self-async.rs:23:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -----              ^^^^\n-   |                       |                  |\n-   |                       |                  ...but data from `f` is returned here\n+   |                       -----              ----\n+   |                       |\n    |                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:28:48\n+  --> $DIR/ref-self-async.rs:29:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -----              ^^^^\n-   |                             |                  |\n-   |                             |                  ...but data from `f` is returned here\n+   |                             -----              ----\n+   |                             |\n    |                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:32:57\n+  --> $DIR/ref-self-async.rs:33:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ^^^^\n-   |                                     |                   |\n-   |                                     |                   ...but data from `f` is returned here\n+   |                                     -----               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:36:57\n+  --> $DIR/ref-self-async.rs:37:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ^^^^\n-   |                                     |                   |\n-   |                                     |                   ...but data from `f` is returned here\n+   |                                     -----               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:40:66\n+  --> $DIR/ref-self-async.rs:41:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----                ^^^^\n-   |                                             |                    |\n-   |                                             |                    ...but data from `f` is returned here\n+   |                                             -----                ----\n+   |                                             |\n    |                                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:44:66\n+  --> $DIR/ref-self-async.rs:45:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----                ^^^^\n-   |                                             |                    |\n-   |                                             |                    ...but data from `f` is returned here\n+   |                                             -----                ----\n+   |                                             |\n    |                                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:48:69\n+  --> $DIR/ref-self-async.rs:49:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                            -----                    ^^^\n-   |                                            |                        |\n-   |                                            |                        ...but data from `f` is returned here\n+   |                                            -----                    ---\n+   |                                            |\n    |                                            this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 7 previous errors\n "}, {"sha": "93fec69ec343a2188327165dd9aea09352ed3b0d", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 40, "deletions": 45, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -7,16 +7,15 @@ LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:13:57\n+  --> $DIR/ref-struct-async.rs:14:9\n    |\n-LL |       async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |  _______________________________-_________________________^\n-   | |                               |\n-   | |                               lifetime `'_` defined here\n-   | |                               lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                               -\n+   |                               |\n+   |                               lifetime `'_` defined here\n+   |                               lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:17:61\n@@ -27,16 +26,15 @@ LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:17:66\n+  --> $DIR/ref-struct-async.rs:18:9\n    |\n-LL |       async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |  _______________________________________-__________________________^\n-   | |                                       |\n-   | |                                       lifetime `'_` defined here\n-   | |                                       lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                       -\n+   |                                       |\n+   |                                       lifetime `'_` defined here\n+   |                                       lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:21:61\n@@ -47,16 +45,15 @@ LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:21:66\n+  --> $DIR/ref-struct-async.rs:22:9\n    |\n-LL |       async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |  _______________________________________-__________________________^\n-   | |                                       |\n-   | |                                       lifetime `'_` defined here\n-   | |                                       lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                       -\n+   |                                       |\n+   |                                       lifetime `'_` defined here\n+   |                                       lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:25:70\n@@ -67,16 +64,15 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:25:75\n+  --> $DIR/ref-struct-async.rs:26:9\n    |\n-LL |       async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |  _______________________________________________-___________________________^\n-   | |                                               |\n-   | |                                               lifetime `'_` defined here\n-   | |                                               lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                               -\n+   |                                               |\n+   |                                               lifetime `'_` defined here\n+   |                                               lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ref-struct-async.rs:29:66\n@@ -87,16 +83,15 @@ LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:29:71\n+  --> $DIR/ref-struct-async.rs:30:9\n    |\n-LL |       async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |  ___________________________________________-___________________________^\n-   | |                                           |\n-   | |                                           lifetime `'_` defined here\n-   | |                                           lifetime `'_` defined here\n-LL | |         f\n-LL | |     }\n-   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                           -\n+   |                                           |\n+   |                                           lifetime `'_` defined here\n+   |                                           lifetime `'_` defined here\n+LL |         f\n+   |         ^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "64c84c4cd2eb9e209a83bdc99bbcb23162042692", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -11,23 +11,23 @@ impl Struct {\n     // Test using `&Struct` explicitly:\n \n     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "c70facc931ec152b526f244193c1ed09f92e3ad9", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfb6d84720019236e33872e145d187dfd6e81090/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=cfb6d84720019236e33872e145d187dfd6e81090", "patch": "@@ -1,47 +1,52 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:13:52\n+  --> $DIR/ref-struct-async.rs:14:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                               -------              ^^^^\n-   |                               |                    |\n-   |                               |                    ...but data from `f` is returned here\n+   |                               -------              ----\n+   |                               |\n    |                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:17:61\n+  --> $DIR/ref-struct-async.rs:18:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                       -------               ^^^^\n-   |                                       |                     |\n-   |                                       |                     ...but data from `f` is returned here\n+   |                                       -------               ----\n+   |                                       |\n    |                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:21:61\n+  --> $DIR/ref-struct-async.rs:22:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                       -------               ^^^^\n-   |                                       |                     |\n-   |                                       |                     ...but data from `f` is returned here\n+   |                                       -------               ----\n+   |                                       |\n    |                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:25:70\n+  --> $DIR/ref-struct-async.rs:26:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                               -------                ^^^^\n-   |                                               |                      |\n-   |                                               |                      ...but data from `f` is returned here\n+   |                                               -------                ----\n+   |                                               |\n    |                                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:29:66\n+  --> $DIR/ref-struct-async.rs:30:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                           -------                ^^^^\n-   |                                           |                      |\n-   |                                           |                      ...but data from `f` is returned here\n+   |                                           -------                ----\n+   |                                           |\n    |                                           this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 5 previous errors\n "}]}