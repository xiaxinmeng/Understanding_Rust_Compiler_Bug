{"sha": "dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "node_id": "C_kwDOAAsO6NoAKGRkNjIxYTRjNWNkOTY3ODE1Y2RmNWZmY2JlNTk4YTZmZDlhM2I4Mzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-18T21:00:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-18T21:00:42Z"}, "message": "Rollup merge of #90782 - ricobbe:binutils-dlltool, r=michaelwoerister\n\nImplement raw-dylib support for windows-gnu\n\nAdd support for `#[link(kind = \"raw-dylib\")]` on windows-gnu targets.  Work around binutils's linker's inability to read import libraries produced by LLVM by calling out to the binutils `dlltool` utility to create an import library from a temporary .DEF file; this approach is effectively a slightly refined version of `@mati865's` earlier attempt at this strategy in PR #88801.  (In particular, this attempt at this strategy adds support for `#[link_ordinal(...)]` as well.)\n\nIn support of #58713.", "tree": {"sha": "4d52652e8f1fe926c2ffda05281527bff162348b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d52652e8f1fe926c2ffda05281527bff162348b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5yp6CRBK7hj4Ov3rIwAA1VcIAEoht8PYVi4GfW/Veism4k1y\nkQsrnmonv+fnOPaZ5uZFRYv5beWvyBe6Ks7X/aqt5rK+EYqGsDWisBASNqgdzQ78\n0q+2kRwGHEVeDr3DC6wNH5ICFdNGOhDggY9S6gkXrgecgF/KF2IoTbMOkrT/WAPj\n6xZzXolHZeeNN4Ddk0jVG4T0OEudA1L2ARULtyp8z2fqV+oRmfw8GLbQ+lwlQoB7\nHswJ37CJbCHO4hMVMMzkKdpnMtLaLScTX5cBujbtuSX8ZjZhZp/qmJOIWpRs5B9U\nm+0OxPhugAtFIpa1mK+JT1DvotMPRZlUlJe2yd+gVM2z++tzfvO1fOLeotFfsdk=\n=aQHI\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d52652e8f1fe926c2ffda05281527bff162348b\nparent 9ad5d82f822b3cb67637f11be2e65c5662b66ec0\nparent 0cf7fd1208f79a0f1cbf6341871bf6eaa0319abb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642539642 +0100\ncommitter GitHub <noreply@github.com> 1642539642 +0100\n\nRollup merge of #90782 - ricobbe:binutils-dlltool, r=michaelwoerister\n\nImplement raw-dylib support for windows-gnu\n\nAdd support for `#[link(kind = \"raw-dylib\")]` on windows-gnu targets.  Work around binutils's linker's inability to read import libraries produced by LLVM by calling out to the binutils `dlltool` utility to create an import library from a temporary .DEF file; this approach is effectively a slightly refined version of `@mati865's` earlier attempt at this strategy in PR #88801.  (In particular, this attempt at this strategy adds support for `#[link_ordinal(...)]` as well.)\n\nIn support of #58713.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "html_url": "https://github.com/rust-lang/rust/commit/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "html_url": "https://github.com/rust-lang/rust/commit/9ad5d82f822b3cb67637f11be2e65c5662b66ec0"}, {"sha": "0cf7fd1208f79a0f1cbf6341871bf6eaa0319abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf7fd1208f79a0f1cbf6341871bf6eaa0319abb", "html_url": "https://github.com/rust-lang/rust/commit/0cf7fd1208f79a0f1cbf6341871bf6eaa0319abb"}], "stats": {"total": 365, "additions": 252, "deletions": 113}, "files": [{"sha": "5703a72c686e5bb3dc09e9d80aba617dbd7cd36f", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 159, "deletions": 46, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1,6 +1,7 @@\n //! A helper class for dealing with static archives\n \n-use std::ffi::{CStr, CString};\n+use std::env;\n+use std::ffi::{CStr, CString, OsString};\n use std::io;\n use std::mem;\n use std::path::{Path, PathBuf};\n@@ -158,54 +159,127 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             output_path.with_extension(\"lib\")\n         };\n \n-        // we've checked for \\0 characters in the library name already\n-        let dll_name_z = CString::new(lib_name).unwrap();\n-        // All import names are Rust identifiers and therefore cannot contain \\0 characters.\n-        // FIXME: when support for #[link_name] implemented, ensure that import.name values don't\n-        // have any \\0 characters\n-        let import_name_and_ordinal_vector: Vec<(CString, Option<u16>)> = dll_imports\n+        let mingw_gnu_toolchain = self.config.sess.target.llvm_target.ends_with(\"pc-windows-gnu\");\n+\n+        let import_name_and_ordinal_vector: Vec<(String, Option<u16>)> = dll_imports\n             .iter()\n             .map(|import: &DllImport| {\n                 if self.config.sess.target.arch == \"x86\" {\n-                    (LlvmArchiveBuilder::i686_decorated_name(import), import.ordinal)\n+                    (\n+                        LlvmArchiveBuilder::i686_decorated_name(import, mingw_gnu_toolchain),\n+                        import.ordinal,\n+                    )\n                 } else {\n-                    (CString::new(import.name.to_string()).unwrap(), import.ordinal)\n+                    (import.name.to_string(), import.ordinal)\n                 }\n             })\n             .collect();\n \n-        let output_path_z = rustc_fs_util::path_to_c_string(&output_path);\n+        if mingw_gnu_toolchain {\n+            // The binutils linker used on -windows-gnu targets cannot read the import\n+            // libraries generated by LLVM: in our attempts, the linker produced an .EXE\n+            // that loaded but crashed with an AV upon calling one of the imported\n+            // functions.  Therefore, use binutils to create the import library instead,\n+            // by writing a .DEF file to the temp dir and calling binutils's dlltool.\n+            let def_file_path =\n+                tmpdir.as_ref().join(format!(\"{}_imports\", lib_name)).with_extension(\"def\");\n+\n+            let def_file_content = format!(\n+                \"EXPORTS\\n{}\",\n+                import_name_and_ordinal_vector\n+                    .into_iter()\n+                    .map(|(name, ordinal)| {\n+                        match ordinal {\n+                            Some(n) => format!(\"{} @{} NONAME\", name, n),\n+                            None => name,\n+                        }\n+                    })\n+                    .collect::<Vec<String>>()\n+                    .join(\"\\n\")\n+            );\n \n-        tracing::trace!(\"invoking LLVMRustWriteImportLibrary\");\n-        tracing::trace!(\"  dll_name {:#?}\", dll_name_z);\n-        tracing::trace!(\"  output_path {}\", output_path.display());\n-        tracing::trace!(\n-            \"  import names: {}\",\n-            dll_imports.iter().map(|import| import.name.to_string()).collect::<Vec<_>>().join(\", \"),\n-        );\n+            match std::fs::write(&def_file_path, def_file_content) {\n+                Ok(_) => {}\n+                Err(e) => {\n+                    self.config.sess.fatal(&format!(\"Error writing .DEF file: {}\", e));\n+                }\n+            };\n \n-        let ffi_exports: Vec<LLVMRustCOFFShortExport> = import_name_and_ordinal_vector\n-            .iter()\n-            .map(|(name_z, ordinal)| LLVMRustCOFFShortExport::new(name_z.as_ptr(), *ordinal))\n-            .collect();\n-        let result = unsafe {\n-            crate::llvm::LLVMRustWriteImportLibrary(\n-                dll_name_z.as_ptr(),\n-                output_path_z.as_ptr(),\n-                ffi_exports.as_ptr(),\n-                ffi_exports.len(),\n-                llvm_machine_type(&self.config.sess.target.arch) as u16,\n-                !self.config.sess.target.is_like_msvc,\n-            )\n-        };\n+            let dlltool = find_binutils_dlltool(self.config.sess);\n+            let result = std::process::Command::new(dlltool)\n+                .args([\n+                    \"-d\",\n+                    def_file_path.to_str().unwrap(),\n+                    \"-D\",\n+                    lib_name,\n+                    \"-l\",\n+                    output_path.to_str().unwrap(),\n+                ])\n+                .output();\n+\n+            match result {\n+                Err(e) => {\n+                    self.config.sess.fatal(&format!(\"Error calling dlltool: {}\", e.to_string()));\n+                }\n+                Ok(output) if !output.status.success() => self.config.sess.fatal(&format!(\n+                    \"Dlltool could not create import library: {}\\n{}\",\n+                    String::from_utf8_lossy(&output.stdout),\n+                    String::from_utf8_lossy(&output.stderr)\n+                )),\n+                _ => {}\n+            }\n+        } else {\n+            // we've checked for \\0 characters in the library name already\n+            let dll_name_z = CString::new(lib_name).unwrap();\n+\n+            let output_path_z = rustc_fs_util::path_to_c_string(&output_path);\n+\n+            tracing::trace!(\"invoking LLVMRustWriteImportLibrary\");\n+            tracing::trace!(\"  dll_name {:#?}\", dll_name_z);\n+            tracing::trace!(\"  output_path {}\", output_path.display());\n+            tracing::trace!(\n+                \"  import names: {}\",\n+                dll_imports\n+                    .iter()\n+                    .map(|import| import.name.to_string())\n+                    .collect::<Vec<_>>()\n+                    .join(\", \"),\n+            );\n \n-        if result == crate::llvm::LLVMRustResult::Failure {\n-            self.config.sess.fatal(&format!(\n-                \"Error creating import library for {}: {}\",\n-                lib_name,\n-                llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string())\n-            ));\n-        }\n+            // All import names are Rust identifiers and therefore cannot contain \\0 characters.\n+            // FIXME: when support for #[link_name] is implemented, ensure that the import names\n+            // still don't contain any \\0 characters.  Also need to check that the names don't\n+            // contain substrings like \" @\" or \"NONAME\" that are keywords or otherwise reserved\n+            // in definition files.\n+            let cstring_import_name_and_ordinal_vector: Vec<(CString, Option<u16>)> =\n+                import_name_and_ordinal_vector\n+                    .into_iter()\n+                    .map(|(name, ordinal)| (CString::new(name).unwrap(), ordinal))\n+                    .collect();\n+\n+            let ffi_exports: Vec<LLVMRustCOFFShortExport> = cstring_import_name_and_ordinal_vector\n+                .iter()\n+                .map(|(name_z, ordinal)| LLVMRustCOFFShortExport::new(name_z.as_ptr(), *ordinal))\n+                .collect();\n+            let result = unsafe {\n+                crate::llvm::LLVMRustWriteImportLibrary(\n+                    dll_name_z.as_ptr(),\n+                    output_path_z.as_ptr(),\n+                    ffi_exports.as_ptr(),\n+                    ffi_exports.len(),\n+                    llvm_machine_type(&self.config.sess.target.arch) as u16,\n+                    !self.config.sess.target.is_like_msvc,\n+                )\n+            };\n+\n+            if result == crate::llvm::LLVMRustResult::Failure {\n+                self.config.sess.fatal(&format!(\n+                    \"Error creating import library for {}: {}\",\n+                    lib_name,\n+                    llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string())\n+                ));\n+            }\n+        };\n \n         self.add_archive(&output_path, |_| false).unwrap_or_else(|e| {\n             self.config.sess.fatal(&format!(\n@@ -332,22 +406,61 @@ impl<'a> LlvmArchiveBuilder<'a> {\n         }\n     }\n \n-    fn i686_decorated_name(import: &DllImport) -> CString {\n+    fn i686_decorated_name(import: &DllImport, mingw: bool) -> String {\n         let name = import.name;\n-        // We verified during construction that `name` does not contain any NULL characters, so the\n-        // conversion to CString is guaranteed to succeed.\n-        CString::new(match import.calling_convention {\n-            DllCallingConvention::C => format!(\"_{}\", name),\n-            DllCallingConvention::Stdcall(arg_list_size) => format!(\"_{}@{}\", name, arg_list_size),\n+        let prefix = if mingw { \"\" } else { \"_\" };\n+\n+        match import.calling_convention {\n+            DllCallingConvention::C => format!(\"{}{}\", prefix, name),\n+            DllCallingConvention::Stdcall(arg_list_size) => {\n+                format!(\"{}{}@{}\", prefix, name, arg_list_size)\n+            }\n             DllCallingConvention::Fastcall(arg_list_size) => format!(\"@{}@{}\", name, arg_list_size),\n             DllCallingConvention::Vectorcall(arg_list_size) => {\n                 format!(\"{}@@{}\", name, arg_list_size)\n             }\n-        })\n-        .unwrap()\n+        }\n     }\n }\n \n fn string_to_io_error(s: String) -> io::Error {\n     io::Error::new(io::ErrorKind::Other, format!(\"bad archive: {}\", s))\n }\n+\n+fn find_binutils_dlltool(sess: &Session) -> OsString {\n+    assert!(sess.target.options.is_like_windows && !sess.target.options.is_like_msvc);\n+    if let Some(dlltool_path) = &sess.opts.debugging_opts.dlltool {\n+        return dlltool_path.clone().into_os_string();\n+    }\n+\n+    let mut tool_name: OsString = if sess.host.arch != sess.target.arch {\n+        // We are cross-compiling, so we need the tool with the prefix matching our target\n+        if sess.target.arch == \"x86\" {\n+            \"i686-w64-mingw32-dlltool\"\n+        } else {\n+            \"x86_64-w64-mingw32-dlltool\"\n+        }\n+    } else {\n+        // We are not cross-compiling, so we just want `dlltool`\n+        \"dlltool\"\n+    }\n+    .into();\n+\n+    if sess.host.options.is_like_windows {\n+        // If we're compiling on Windows, add the .exe suffix\n+        tool_name.push(\".exe\");\n+    }\n+\n+    // NOTE: it's not clear how useful it is to explicitly search PATH.\n+    for dir in env::split_paths(&env::var_os(\"PATH\").unwrap_or_default()) {\n+        let full_path = dir.join(&tool_name);\n+        if full_path.is_file() {\n+            return full_path.into_os_string();\n+        }\n+    }\n+\n+    // The user didn't specify the location of the dlltool binary, and we weren't able\n+    // to find the appropriate one on the PATH.  Just return the name of the tool\n+    // and let the invocation fail with a hopefully useful error message.\n+    tool_name\n+}"}, {"sha": "0e27a82b2b13bbc842ce3a34ca666f5ca1d6f2d8", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -646,6 +646,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(borrowck, String::from(\"other\"));\n     untracked!(deduplicate_diagnostics, false);\n     untracked!(dep_tasks, true);\n+    untracked!(dlltool, Some(PathBuf::from(\"custom_dlltool.exe\")));\n     untracked!(dont_buffer_diagnostics, true);\n     untracked!(dump_dep_graph, true);\n     untracked!(dump_mir, Some(String::from(\"abc\")));"}, {"sha": "13cd8e4a046b03ba3d8a84da0ad655868ff83fde", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -274,11 +274,6 @@ impl Collector<'_> {\n                     span,\n                     \"`#[link(...)]` with `kind = \\\"raw-dylib\\\"` only supported on Windows\",\n                 );\n-            } else if !self.tcx.sess.target.options.is_like_msvc {\n-                self.tcx.sess.span_warn(\n-                    span,\n-                    \"`#[link(...)]` with `kind = \\\"raw-dylib\\\"` not supported on windows-gnu\",\n-                );\n             }\n \n             if lib_name.as_str().contains('\\0') {"}, {"sha": "c48d8d689c10e9305cac596679827245b8d7dd5b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1161,6 +1161,8 @@ options! {\n     dep_tasks: bool = (false, parse_bool, [UNTRACKED],\n         \"print tasks that execute and the color their dep node gets (requires debug build) \\\n         (default: no)\"),\n+    dlltool: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n+        \"import library generation tool (windows-gnu only)\"),\n     dont_buffer_diagnostics: bool = (false, parse_bool, [UNTRACKED],\n         \"emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) \\\n         (default: no)\"),"}, {"sha": "166305672e6f229790c35292ad5f39d221aa9f5f", "filename": "src/test/run-make/raw-dylib-c/Makefile", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1,14 +1,19 @@\n # Test the behavior of #[link(.., kind = \"raw-dylib\")] on windows-msvc\n \n-# only-windows-msvc\n+# only-windows\n \n -include ../../run-make-fulldeps/tools.mk\n \n all:\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern_1.obj,extern_1.c)\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern_2.obj,extern_2.c)\n+ifdef IS_MSVC\n \t$(CC) \"$(TMPDIR)\"/extern_1.obj -link -dll -out:\"$(TMPDIR)\"/extern_1.dll\n \t$(CC) \"$(TMPDIR)\"/extern_2.obj -link -dll -out:\"$(TMPDIR)\"/extern_2.dll\n+else\n+\t$(CC) \"$(TMPDIR)\"/extern_1.obj -shared -o \"$(TMPDIR)\"/extern_1.dll\n+\t$(CC) \"$(TMPDIR)\"/extern_2.obj -shared -o \"$(TMPDIR)\"/extern_2.dll\n+endif\n \t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n \t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt"}, {"sha": "0e84a749b05782151ae4008333b319947ba56421", "filename": "src/test/run-make/raw-dylib-link-ordinal/Makefile", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1,12 +1,16 @@\n # Test the behavior of #[link(.., kind = \"raw-dylib\")] and #[link_ordinal] on windows-msvc\n \n-# only-windows-msvc\n+# only-windows\n \n -include ../../run-make-fulldeps/tools.mk\n \n all:\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/exporter.obj,exporter.c)\n+ifdef IS_MSVC\n \t$(CC) \"$(TMPDIR)\"/exporter.obj exporter.def -link -dll -out:\"$(TMPDIR)\"/exporter.dll\n+else\n+\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter.def -shared -o \"$(TMPDIR)\"/exporter.dll\n+endif\n \t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n \t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt"}, {"sha": "69f62669d6291da4d8cc3e3122699d921e869c3c", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/Makefile", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2FMakefile?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -0,0 +1,23 @@\n+# Test the behavior of #[link(.., kind = \"raw-dylib\")], #[link_ordinal], and alternative calling conventions on i686 windows.\n+\n+# only-x86\n+# only-windows\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(call COMPILE_OBJ,\"$(TMPDIR)\"/exporter.obj,exporter.c)\n+ifdef IS_MSVC\n+\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter-msvc.def -link -dll -out:\"$(TMPDIR)\"/exporter.dll\n+else\n+\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter-gnu.def -shared -o \"$(TMPDIR)\"/exporter.dll\n+endif\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n+\t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/actual_output.txt\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/actual_output.txt expected_output.txt\n+else\n+\t$(DIFF) expected_output.txt \"$(TMPDIR)\"/actual_output.txt\n+endif"}, {"sha": "4059ede11fc96ec7363aefdc0209442030390d80", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/driver.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fdriver.rs?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -0,0 +1,5 @@\n+extern crate raw_dylib_test;\n+\n+fn main() {\n+    raw_dylib_test::library_function();\n+}"}, {"sha": "20157763745f8ffa7a4037ffdd53909b56b4ac99", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/expected_output.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexpected_output.txt", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexpected_output.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexpected_output.txt?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -0,0 +1,2 @@\n+exported_function_stdcall(6)\n+exported_function_fastcall(125)"}, {"sha": "8d28d714b7e6437578ab8a074a7f137f3db7ce3b", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/exporter-gnu.def", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-gnu.def", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-gnu.def", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-gnu.def?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -0,0 +1,4 @@\n+LIBRARY exporter\n+EXPORTS\n+    exported_function_stdcall@4 @15 NONAME\n+    @exported_function_fastcall@4 @18 NONAME\n\\ No newline at end of file"}, {"sha": "5a4c79a58edfd0651c96dd79aada761f1ce0048c", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/exporter-msvc.def", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-msvc.def", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-msvc.def", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter-msvc.def?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -0,0 +1,4 @@\n+LIBRARY exporter\n+EXPORTS\n+    _exported_function_stdcall@4 @15 NONAME\n+    @exported_function_fastcall@4 @18 NONAME\n\\ No newline at end of file"}, {"sha": "1fb45bf010ff2f60ab1c20a09c4f8f6afe37b497", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/exporter.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter.c", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Fexporter.c?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -0,0 +1,11 @@\n+#include <stdio.h>\n+\n+void __stdcall exported_function_stdcall(int i) {\n+    printf(\"exported_function_stdcall(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+void __fastcall exported_function_fastcall(int i) {\n+    printf(\"exported_function_fastcall(%d)\\n\", i);\n+    fflush(stdout);\n+}"}, {"sha": "07dd3d7be9b903a5a0b9a5ccbad6b4cec886c5c2", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2Flib.rs?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -0,0 +1,20 @@\n+#![feature(raw_dylib)]\n+\n+#[link(name = \"exporter\", kind = \"raw-dylib\")]\n+extern \"stdcall\" {\n+    #[link_ordinal(15)]\n+    fn imported_function_stdcall(i: i32);\n+}\n+\n+#[link(name = \"exporter\", kind = \"raw-dylib\")]\n+extern \"fastcall\" {\n+    #[link_ordinal(18)]\n+    fn imported_function_fastcall(i: i32);\n+}\n+\n+pub fn library_function() {\n+    unsafe {\n+        imported_function_stdcall(6);\n+        imported_function_fastcall(125);\n+    }\n+}"}, {"sha": "33f9c5393135f237370b5ccd5f3fc90af06e4251", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-gnu.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.rs?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,8 +0,0 @@\n-// gate-test-raw_dylib\n-// only-windows-gnu\n-#[link(name = \"foo\", kind = \"raw-dylib\")]\n-//~^ ERROR: kind=\"raw-dylib\" is unstable\n-//~| WARNING: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n-extern \"C\" {}\n-\n-fn main() {}"}, {"sha": "14dfadf4126f3d105a52f230bdb5b6f8d012957e", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-gnu.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-windows-gnu.stderr?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,18 +0,0 @@\n-warning: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n-  --> $DIR/feature-gate-raw-dylib-windows-gnu.rs:3:1\n-   |\n-LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0658]: kind=\"raw-dylib\" is unstable\n-  --> $DIR/feature-gate-raw-dylib-windows-gnu.rs:3:1\n-   |\n-LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n-   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "995d9ced4801a639e5cc1a9a84027ed83d40d59c", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.rs?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1,5 +1,4 @@\n-// gate-test-raw_dylib\n-// only-windows-msvc\n+// only-windows\n #[link(name = \"foo\", kind = \"raw-dylib\")]\n //~^ ERROR: kind=\"raw-dylib\" is unstable\n extern \"C\" {}", "previous_filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-msvc.rs"}, {"sha": "bb64af38b2cb92d1db9fdf110a3808ebc07f99e7", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib.stderr?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: kind=\"raw-dylib\" is unstable\n-  --> $DIR/feature-gate-raw-dylib-windows-msvc.rs:3:1\n+  --> $DIR/feature-gate-raw-dylib.rs:2:1\n    |\n LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-windows-msvc.stderr"}, {"sha": "2a15b1d799f846fc7379d8d28ec7a4c84d46a63c", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1,4 +1,4 @@\n-// only-windows-msvc\n+// only-windows\n #![feature(raw_dylib)]\n //~^ WARN the feature `raw_dylib` is incomplete\n "}, {"sha": "13c9aa01e34ae8126858fb760bf1b32f37f5d2e8", "filename": "src/test/ui/rfc-2627-raw-dylib/multiple-declarations.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.rs?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1,4 +1,5 @@\n-// only-i686-pc-windows-msvc\n+// only-x86\n+// only-windows\n // compile-flags: --crate-type lib --emit link\n #![allow(clashing_extern_declarations)]\n #![feature(raw_dylib)]"}, {"sha": "93ca8f4d8d448e1780f22d56a80e32d43898f8e3", "filename": "src/test/ui/rfc-2627-raw-dylib/multiple-declarations.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-declarations.stderr?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/multiple-declarations.rs:4:12\n+  --> $DIR/multiple-declarations.rs:5:12\n    |\n LL | #![feature(raw_dylib)]\n    |            ^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![feature(raw_dylib)]\n    = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n \n error: multiple declarations of external function `f` from library `foo.dll` have different calling conventions\n-  --> $DIR/multiple-declarations.rs:14:9\n+  --> $DIR/multiple-declarations.rs:15:9\n    |\n LL |         fn f(x: i32);\n    |         ^^^^^^^^^^^^^"}, {"sha": "e9690f03f45c9832081b99968ce475b43ca01908", "filename": "src/test/ui/rfc-2627-raw-dylib/raw-dylib-msvc-only.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.rs?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,8 +0,0 @@\n-// only-windows-gnu\n-// check-pass\n-// compile-flags: --crate-type lib\n-#![feature(raw_dylib)]\n-//~^ WARNING: the feature `raw_dylib` is incomplete\n-#[link(name = \"foo\", kind = \"raw-dylib\")]\n-//~^ WARNING: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n-extern \"C\" {}"}, {"sha": "6e24112b3c3e50857f11cd109f57da7312f71415", "filename": "src/test/ui/rfc-2627-raw-dylib/raw-dylib-msvc-only.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ad5d82f822b3cb67637f11be2e65c5662b66ec0/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fraw-dylib-msvc-only.stderr?ref=9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "patch": "@@ -1,17 +0,0 @@\n-warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/raw-dylib-msvc-only.rs:4:12\n-   |\n-LL | #![feature(raw_dylib)]\n-   |            ^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n-\n-warning: `#[link(...)]` with `kind = \"raw-dylib\"` not supported on windows-gnu\n-  --> $DIR/raw-dylib-msvc-only.rs:6:1\n-   |\n-LL | #[link(name = \"foo\", kind = \"raw-dylib\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "dc647fd63f527651746d09a4298c1ed1cd028649", "filename": "src/test/ui/rfc-2627-raw-dylib/unsupported-abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.rs?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1,4 +1,5 @@\n-// only-x86_64-pc-windows-msvc\n+// only-x86_64\n+// only-windows\n // compile-flags: --crate-type lib --emit link\n #![allow(incomplete_features)]\n #![feature(raw_dylib)]"}, {"sha": "d8a2a6af9c19e5dcd0ebc0270dfd1926d2c2326c", "filename": "src/test/ui/rfc-2627-raw-dylib/unsupported-abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.stderr?ref=dd621a4c5cd967815cdf5ffcbe598a6fd9a3b839", "patch": "@@ -1,5 +1,5 @@\n error: ABI not supported by `#[link(kind = \"raw-dylib\")]` on this architecture\n-  --> $DIR/unsupported-abi.rs:7:5\n+  --> $DIR/unsupported-abi.rs:8:5\n    |\n LL |     fn f(x: i32);\n    |     ^^^^^^^^^^^^^"}]}