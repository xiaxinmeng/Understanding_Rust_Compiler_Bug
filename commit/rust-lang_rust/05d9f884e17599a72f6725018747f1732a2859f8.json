{"sha": "05d9f884e17599a72f6725018747f1732a2859f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZDlmODg0ZTE3NTk5YTcyZjY3MjUwMTg3NDdmMTczMmEyODU5Zjg=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-08-11T17:22:40Z"}, "committer": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-08-11T17:22:40Z"}, "message": "Merge branch 'origin/master' into flat-map", "tree": {"sha": "307c1e7118cdb788e8da4943fe33c21f204ee68f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/307c1e7118cdb788e8da4943fe33c21f204ee68f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05d9f884e17599a72f6725018747f1732a2859f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENfZy0Nd1FLYaZCRY7vypMUgEJlUFAl1QTukACgkQ7vypMUgE\nJlWrzQ/+P2swjwCx84E7r/irudbKc6+ud9EO5iXIRz6h+EBAd71nfRE55BZRd8CB\nahGnszL7IZfMSPra+LfU3Y1GoB5PQPO4KFZsMyxQ9GpQky5ileOrcvm9FGMJN5zo\nGoDiYUu8E6ovsCtSubNoYhE0tYfGur0U0yzhLY2zOXZ5+5/YCG/eDQu6rU6GWAAs\nk4GytTGHkpuZ+aSqy6OVt5aFQ5a+skiw3zlm0P+dtFNWLd0DXNbJb4R/i5l2A/z6\nrBzObyGu05KLanxXsAyKbueqiuX6nD3UkMbfYFRCuEtT1vHtkHtI9nK7CzAVMEk8\nR5xi2rygva19020rCEADnFnplLTn3ewFLhhvcEocK4wqLM9YAALC69x6SpeXpIN8\na0M97ETwyeNIT9Q3K9qtvqH5nxWlgb4JAna12QDQ1Q4h2kJHCTLnxBJtiHF7hBev\nybqo1+XeDB9HZID36pVeckhjfpDF/8mssw2wSahKGijKWGWiIKyOKOaxEwjwIfaq\nfs5ba15Vfjv9ACXP8FTQw45KuL75K64ZSkD4tPC9+ntZk1o4al//Jayv3yrrElH/\n9wElA/sl05weFPGbeM/oQuJUVQoEcqcqdPq02gJ2FEt2yssFqUa/HYj97Ss9v2Op\nE+cIFdi0rI8a4JSc9n0U+gXQjtqpXdOHda/WR0evnF8mqtKzKfs=\n=eXb5\n-----END PGP SIGNATURE-----", "payload": "tree 307c1e7118cdb788e8da4943fe33c21f204ee68f\nparent c7da4c26fbff41c07fe03927847f3fe233d8b5ad\nparent 72da1015d6d918fe1b29170acbf486d30e0c2695\nauthor Jeremy Stucki <jeremy@myelin.ch> 1565544160 +0200\ncommitter Jeremy Stucki <jeremy@myelin.ch> 1565544160 +0200\n\nMerge branch 'origin/master' into flat-map\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05d9f884e17599a72f6725018747f1732a2859f8", "html_url": "https://github.com/rust-lang/rust/commit/05d9f884e17599a72f6725018747f1732a2859f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05d9f884e17599a72f6725018747f1732a2859f8/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7da4c26fbff41c07fe03927847f3fe233d8b5ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7da4c26fbff41c07fe03927847f3fe233d8b5ad", "html_url": "https://github.com/rust-lang/rust/commit/c7da4c26fbff41c07fe03927847f3fe233d8b5ad"}, {"sha": "72da1015d6d918fe1b29170acbf486d30e0c2695", "url": "https://api.github.com/repos/rust-lang/rust/commits/72da1015d6d918fe1b29170acbf486d30e0c2695", "html_url": "https://github.com/rust-lang/rust/commit/72da1015d6d918fe1b29170acbf486d30e0c2695"}], "stats": {"total": 4904, "additions": 3333, "deletions": 1571}, "files": [{"sha": "e4a9381f5ba6178e6f5253ee35c0c96dac562f8a", "filename": ".github/PULL_REQUEST_TEMPLATE", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/.github%2FPULL_REQUEST_TEMPLATE", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/.github%2FPULL_REQUEST_TEMPLATE", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2FPULL_REQUEST_TEMPLATE?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -16,9 +16,11 @@ checked during review or continuous integration.\n - [ ] Followed [lint naming conventions][lint_naming]\n - [ ] Added passing UI tests (including committed `.stderr` file)\n - [ ] `cargo test` passes locally\n-- [ ] Executed `util/dev update_lints`\n+- [ ] Executed `./util/dev update_lints`\n - [ ] Added lint documentation\n-- [ ] Run `cargo fmt`\n+- [ ] Run `./util/dev fmt`\n+\n+[lint_naming]: https://rust-lang.github.io/rfcs/0344-conventions-galore.html#lints\n \n Note that you can skip the above if you are just opening a WIP PR in\n order to get feedback."}, {"sha": "0a1bd0ea2750cbb78104cd4c4af1463e2ce5c68d", "filename": ".travis.yml", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -17,6 +17,7 @@ branches:\n env:\n  global:\n    - RUST_BACKTRACE=1\n+   - secure: \"OKulfkA5OGd/d1IhvBKzRkHQwMcWjzrzbimo7+5NhkUkWxndAzl+719TB3wWvIh1i2wXXrEXsyZkXM5FtRrHm55v1VKQ5ibjEvFg1w3NIg81iDyoLq186fLqywvxGkOAFPrsePPsBj5USd5xvhwwbrjO6L7/RK6Z8shBwOSc41s=\"\n \n install:\n   - |\n@@ -45,7 +46,7 @@ matrix:\n     - os: linux\n       env: BASE_TESTS=true\n     - os: windows\n-      env: CARGO_INCREMENTAL=0 BASE_TESTS=true\n+      env: CARGO_INCREMENTAL=0 BASE_TESTS=true OS_WINDOWS=true\n \n     # Builds that are only executed when a PR is r+ed or a try build is started\n     # We don't want to run these always because they go towards\n@@ -81,20 +82,35 @@ matrix:\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=chronotope/chrono\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n-  allow_failures:\n-  - os: windows\n-    env: CARGO_INCREMENTAL=0 BASE_TESTS=true\n # prevent these jobs with default env vars\n   exclude:\n     - os: linux\n     - os: osx\n     - os: windows\n \n script:\n+  - |\n+    if [ \"$TRAVIS_BRANCH\" == \"auto\" ] || [ \"$TRAVIS_BRANCH\" == \"try\" ]; then\n+      pr=$(echo $TRAVIS_COMMIT_MESSAGE | grep -o \"#[0-9]*\" | head -1 | sed 's/^#//g')\n+      output=$(curl -H \"Authorization: token $GITHUB_API_TOKEN\" -s \"https://api.github.com/repos/rust-lang/rust-clippy/pulls/$pr\" | \\\n+        python -c \"import sys, json; print(json.load(sys.stdin)['body'])\" | \\\n+        grep \"^changelog: \" | \\\n+        sed \"s/changelog: //g\")\n+      if [ -z \"$output\" ]; then\n+        echo \"ERROR: PR body must contain 'changelog: ...'\"\n+        exit 1\n+      elif [ \"$output\" = \"none\" ]; then\n+        echo \"WARNING: changelog is 'none'\"\n+      fi\n+    fi\n   - |\n       rm rust-toolchain\n       ./setup-toolchain.sh\n-      export LD_LIBRARY_PATH=$(rustc --print sysroot)/lib\n+      if [ \"$TRAVIS_OS_NAME\" == \"windows\" ]; then\n+        export PATH=$PATH:$(rustc --print sysroot)/bin\n+      else\n+        export LD_LIBRARY_PATH=$(rustc --print sysroot)/lib\n+      fi\n   - |\n     if [ -z ${INTEGRATION} ]; then\n       travis_wait 30 ./ci/base-tests.sh && sleep 5\n@@ -104,7 +120,7 @@ script:\n \n after_success: |\n   #!/bin/bash\n-  if [ $(uname) == Linux ]; then\n+  if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then\n     set -ex\n     if [ -z ${INTEGRATION} ]; then\n       ./.github/deploy.sh"}, {"sha": "89570267a94a97ebcd20e5cdfdb85d5ca4cd7ac3", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -974,14 +974,15 @@ Released 2018-09-13\n [`ineffective_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_bit_mask\n [`infallible_destructuring_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#infallible_destructuring_match\n [`infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#infinite_iter\n+[`inherent_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string\n+[`inherent_to_string_shadow_display`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string_shadow_display\n [`inline_always`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_always\n [`inline_fn_without_body`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_fn_without_body\n [`int_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#int_plus_one\n [`integer_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_arithmetic\n [`integer_division`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_division\n [`into_iter_on_array`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_array\n [`into_iter_on_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_ref\n-[`invalid_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_ref\n [`invalid_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex\n [`invalid_upcast_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons\n [`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n@@ -999,6 +1000,7 @@ Released 2018-09-13\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug\n+[`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_swap`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap\n [`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names\n@@ -1137,6 +1139,7 @@ Released 2018-09-13\n [`trivially_copy_pass_by_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\n [`try_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#try_err\n [`type_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n+[`type_repetition_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds\n [`unicode_not_nfc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unicode_not_nfc\n [`unimplemented`]: https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented\n [`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg"}, {"sha": "8c70bb1893972a651308a994375ee8fac725e71a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -61,4 +61,5 @@ rustc-workspace-hack = \"1.0.0\"\n rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n \n [features]\n+deny-warnings = []\n debugging = []"}, {"sha": "8bcfd8a8430ca2a24e7d4bb2eb4456fdd0c0359b", "filename": "README.md", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 306 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 309 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n \n@@ -36,6 +36,7 @@ Table of contents:\n \n *   [Usage instructions](#usage)\n *   [Configuration](#configuration)\n+*   [Contributing](#contributing)\n *   [License](#license)\n \n ## Usage\n@@ -52,7 +53,7 @@ subcommand.\n \n #### Step 1: Install rustup\n \n-You can install [rustup](http://rustup.rs/) on supported platforms. This will help\n+You can install [rustup](https://rustup.rs/) on supported platforms. This will help\n us install Clippy and its dependencies.\n \n If you already have rustup installed, update to ensure you have the latest\n@@ -79,6 +80,15 @@ Now you can run Clippy by invoking the following command:\n cargo clippy\n ```\n \n+#### Automatically applying Clippy suggestions\n+\n+Some Clippy lint suggestions can be automatically applied by `cargo fix`.\n+Note that this is still experimental and only supported on the nightly channel:\n+\n+```terminal\n+cargo fix -Z unstable-options --clippy\n+```\n+\n ### Running Clippy from the command line without installing it\n \n To have cargo compile your crate with Clippy without Clippy installation\n@@ -88,8 +98,7 @@ in your code, you can use:\n cargo run --bin cargo-clippy --manifest-path=path_to_clippys_Cargo.toml\n ```\n \n-*[Note](https://github.com/rust-lang/rust-clippy/wiki#a-word-of-warning):*\n-Be sure that Clippy was compiled with the same version of rustc that cargo invokes here!\n+*Note:* Be sure that Clippy was compiled with the same version of rustc that cargo invokes here!\n \n ### Travis CI\n \n@@ -113,20 +122,20 @@ script:\n ```\n \n If you are on nightly, It might happen that Clippy is not available for a certain nightly release.\n-In this case you can try to conditionally install Clippy from the git repo.\n+In this case you can try to conditionally install Clippy from the Git repo.\n \n ```yaml\n language: rust\n rust:\n   - nightly\n before_script:\n    - rustup component add clippy --toolchain=nightly || cargo install --git https://github.com/rust-lang/rust-clippy/ --force clippy\n-   # etc\n+   # etc.\n ```\n \n Note that adding `-D warnings` will cause your build to fail if **any** warnings are found in your code.\n That includes warnings found by rustc (e.g. `dead_code`, etc.). If you want to avoid this and only cause\n-an error for clippy warnings, use `#![deny(clippy::all)]` in your code or `-D clippy::all` on the command\n+an error for Clippy warnings, use `#![deny(clippy::all)]` in your code or `-D clippy::all` on the command\n line. (You can swap `clippy::all` with the specific lint category you are targeting.)\n \n ## Configuration\n@@ -154,9 +163,9 @@ You can add options to your code to `allow`/`warn`/`deny` Clippy lints:\n     `#![deny(clippy::pedantic)]`). Note that `clippy::pedantic` contains some very aggressive\n     lints prone to false positives.\n \n-*   only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc)\n+*   only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc.)\n \n-*   `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc\n+*   `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc.\n \n Note: `deny` produces errors instead of warnings.\n \n@@ -171,7 +180,7 @@ If you want to contribute to Clippy, you can find more information in [CONTRIBUT\n Copyright 2014-2019 The Rust Project Developers\n \n Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-[http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)> or the MIT license\n-<LICENSE-MIT or [http://opensource.org/licenses/MIT](http://opensource.org/licenses/MIT)>, at your\n+[https://www.apache.org/licenses/LICENSE-2.0](https://www.apache.org/licenses/LICENSE-2.0)> or the MIT license\n+<LICENSE-MIT or [https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT)>, at your\n option. All files in the project carrying such notice may not be\n copied, modified, or distributed except according to those terms."}, {"sha": "eabb5ac5bf9987ddde800a5e0f46c874a2d3f5b7", "filename": "appveyor.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -8,11 +8,10 @@ environment:\n         - TARGET: x86_64-pc-windows-msvc\n \n branches:\n-    # Only build AppVeyor on r+, try and the master branch\n+    # Only build AppVeyor on r+ and try branch\n     only:\n       - auto\n       - try\n-      - master\n \n install:\n     - curl -sSf -o rustup-init.exe https://win.rustup.rs/\n@@ -23,6 +22,7 @@ install:\n     - del rust-toolchain\n     - cargo install rustup-toolchain-install-master --debug || echo \"rustup-toolchain-install-master already installed\"\n     - rustup-toolchain-install-master %RUSTC_HASH% -f -n master\n+    - rustup component add rustfmt --toolchain nightly & exit 0 # Format test handles missing rustfmt\n     - rustup default master\n     - set PATH=%PATH%;C:\\Users\\appveyor\\.rustup\\toolchains\\master\\bin\n     - rustc -V"}, {"sha": "d91d553147cd190950a777041ddd2d2ce733154c", "filename": "ci/base-tests.sh", "status": "modified", "additions": 11, "deletions": 38, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -7,8 +7,8 @@ if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then\n   remark -f *.md -f doc/*.md > /dev/null\n fi\n # build clippy in debug mode and run tests\n-cargo build --features debugging\n-cargo test --features debugging\n+cargo build --features \"debugging deny-warnings\"\n+cargo test --features \"debugging deny-warnings\"\n # for faster build, share target dir between subcrates\n export CARGO_TARGET_DIR=`pwd`/target/\n (cd clippy_lints && cargo test)\n@@ -24,21 +24,23 @@ export CARGO_TARGET_DIR=`pwd`/target/\n # Perform various checks for lint registration\n ./util/dev update_lints --check\n ./util/dev --limit-stderr-length\n-cargo +nightly fmt --all -- --check\n \n # Check running clippy-driver without cargo\n (\n-  export LD_LIBRARY_PATH=$(rustc --print sysroot)/lib\n-\n   # Check sysroot handling\n   sysroot=$(./target/debug/clippy-driver --print sysroot)\n   test $sysroot = $(rustc --print sysroot)\n \n-  sysroot=$(./target/debug/clippy-driver --sysroot /tmp --print sysroot)\n-  test $sysroot = /tmp\n+  if [ -z $OS_WINDOWS ]; then\n+    desired_sysroot=/tmp\n+  else\n+    desired_sysroot=C:/tmp\n+  fi\n+  sysroot=$(./target/debug/clippy-driver --sysroot $desired_sysroot --print sysroot)\n+  test $sysroot = $desired_sysroot\n \n-  sysroot=$(SYSROOT=/tmp ./target/debug/clippy-driver --print sysroot)\n-  test $sysroot = /tmp\n+  sysroot=$(SYSROOT=$desired_sysroot ./target/debug/clippy-driver --print sysroot)\n+  test $sysroot = $desired_sysroot\n \n   # Make sure this isn't set - clippy-driver should cope without it\n   unset CARGO_MANIFEST_DIR\n@@ -50,32 +52,3 @@ cargo +nightly fmt --all -- --check\n \n   # TODO: CLIPPY_CONF_DIR / CARGO_MANIFEST_DIR\n )\n-\n-# make sure tests are formatted\n-\n-# some lints are sensitive to formatting, exclude some files\n-tests_need_reformatting=\"false\"\n-# switch to nightly\n-rustup override set nightly\n-# avoid loop spam and allow cmds with exit status != 0\n-set +ex\n-\n-# Excluding `ice-3891.rs` because the code triggers a rustc parse error which\n-# makes rustfmt fail.\n-for file in `find tests -not -path \"tests/ui/crashes/ice-3891.rs\" | grep \"\\.rs$\"` ; do\n-  rustfmt ${file} --check\n-  if [ $? -ne 0 ]; then\n-    echo \"${file} needs reformatting!\"\n-    tests_need_reformatting=\"true\"\n-  fi\n-done\n-\n-set -ex # reset\n-\n-if [ \"${tests_need_reformatting}\" == \"true\" ] ; then\n-    echo \"Tests need reformatting!\"\n-    exit 2\n-fi\n-\n-# switch back to master\n-rustup override set master"}, {"sha": "e2e946d06f27c28f4c2732eac3c3b526f8676c0d", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -9,4 +9,5 @@ clap = \"2.33\"\n itertools = \"0.8\"\n regex = \"1\"\n lazy_static = \"1.0\"\n+shell-escape = \"0.1\"\n walkdir = \"2\""}, {"sha": "9f0b68baf9dbc1d9959f043fa92efa509aaa90f0", "filename": "clippy_dev/src/fmt.rs", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,200 @@\n+use shell_escape::escape;\n+use std::ffi::OsStr;\n+use std::io;\n+use std::path::{Path, PathBuf};\n+use std::process::{self, Command};\n+use walkdir::WalkDir;\n+\n+#[derive(Debug)]\n+pub enum CliError {\n+    CommandFailed(String),\n+    IoError(io::Error),\n+    ProjectRootNotFound,\n+    RustfmtNotInstalled,\n+    WalkDirError(walkdir::Error),\n+}\n+\n+impl From<io::Error> for CliError {\n+    fn from(error: io::Error) -> Self {\n+        Self::IoError(error)\n+    }\n+}\n+\n+impl From<walkdir::Error> for CliError {\n+    fn from(error: walkdir::Error) -> Self {\n+        Self::WalkDirError(error)\n+    }\n+}\n+\n+struct FmtContext {\n+    check: bool,\n+    verbose: bool,\n+}\n+\n+pub fn run(check: bool, verbose: bool) {\n+    fn try_run(context: &FmtContext) -> Result<bool, CliError> {\n+        let mut success = true;\n+\n+        let project_root = project_root()?;\n+\n+        rustfmt_test(context)?;\n+\n+        success &= cargo_fmt(context, project_root.as_path())?;\n+        success &= cargo_fmt(context, &project_root.join(\"clippy_dev\"))?;\n+        success &= cargo_fmt(context, &project_root.join(\"rustc_tools_util\"))?;\n+\n+        for entry in WalkDir::new(project_root.join(\"tests\")) {\n+            let entry = entry?;\n+            let path = entry.path();\n+\n+            if path.extension() != Some(\"rs\".as_ref())\n+                || entry.file_name() == \"ice-3891.rs\"\n+                // Avoid rustfmt bug rust-lang/rustfmt#1873\n+                || cfg!(windows) && entry.file_name() == \"implicit_hasher.rs\"\n+            {\n+                continue;\n+            }\n+\n+            success &= rustfmt(context, &path)?;\n+        }\n+\n+        Ok(success)\n+    }\n+\n+    fn output_err(err: CliError) {\n+        match err {\n+            CliError::CommandFailed(command) => {\n+                eprintln!(\"error: A command failed! `{}`\", command);\n+            },\n+            CliError::IoError(err) => {\n+                eprintln!(\"error: {}\", err);\n+            },\n+            CliError::ProjectRootNotFound => {\n+                eprintln!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n+            },\n+            CliError::RustfmtNotInstalled => {\n+                eprintln!(\"error: rustfmt nightly is not installed.\");\n+            },\n+            CliError::WalkDirError(err) => {\n+                eprintln!(\"error: {}\", err);\n+            },\n+        }\n+    }\n+\n+    let context = FmtContext { check, verbose };\n+    let result = try_run(&context);\n+    let code = match result {\n+        Ok(true) => 0,\n+        Ok(false) => {\n+            eprintln!();\n+            eprintln!(\"Formatting check failed.\");\n+            eprintln!(\"Run `./util/dev fmt` to update formatting.\");\n+            1\n+        },\n+        Err(err) => {\n+            output_err(err);\n+            1\n+        },\n+    };\n+    process::exit(code);\n+}\n+\n+fn format_command(program: impl AsRef<OsStr>, dir: impl AsRef<Path>, args: &[impl AsRef<OsStr>]) -> String {\n+    let arg_display: Vec<_> = args\n+        .iter()\n+        .map(|a| escape(a.as_ref().to_string_lossy()).to_owned())\n+        .collect();\n+\n+    format!(\n+        \"cd {} && {} {}\",\n+        escape(dir.as_ref().to_string_lossy()),\n+        escape(program.as_ref().to_string_lossy()),\n+        arg_display.join(\" \")\n+    )\n+}\n+\n+fn exec(\n+    context: &FmtContext,\n+    program: impl AsRef<OsStr>,\n+    dir: impl AsRef<Path>,\n+    args: &[impl AsRef<OsStr>],\n+) -> Result<bool, CliError> {\n+    if context.verbose {\n+        println!(\"{}\", format_command(&program, &dir, args));\n+    }\n+\n+    let mut child = Command::new(&program).current_dir(&dir).args(args.iter()).spawn()?;\n+    let code = child.wait()?;\n+    let success = code.success();\n+\n+    if !context.check && !success {\n+        return Err(CliError::CommandFailed(format_command(&program, &dir, args)));\n+    }\n+\n+    Ok(success)\n+}\n+\n+fn cargo_fmt(context: &FmtContext, path: &Path) -> Result<bool, CliError> {\n+    let mut args = vec![\"+nightly\", \"fmt\", \"--all\"];\n+    if context.check {\n+        args.push(\"--\");\n+        args.push(\"--check\");\n+    }\n+    let success = exec(context, \"cargo\", path, &args)?;\n+\n+    Ok(success)\n+}\n+\n+fn rustfmt_test(context: &FmtContext) -> Result<(), CliError> {\n+    let program = \"rustfmt\";\n+    let dir = std::env::current_dir()?;\n+    let args = &[\"+nightly\", \"--version\"];\n+\n+    if context.verbose {\n+        println!(\"{}\", format_command(&program, &dir, args));\n+    }\n+\n+    let output = Command::new(&program).current_dir(&dir).args(args.iter()).output()?;\n+\n+    if output.status.success() {\n+        Ok(())\n+    } else if std::str::from_utf8(&output.stderr)\n+        .unwrap_or(\"\")\n+        .starts_with(\"error: 'rustfmt' is not installed\")\n+    {\n+        Err(CliError::RustfmtNotInstalled)\n+    } else {\n+        Err(CliError::CommandFailed(format_command(&program, &dir, args)))\n+    }\n+}\n+\n+fn rustfmt(context: &FmtContext, path: &Path) -> Result<bool, CliError> {\n+    let mut args = vec![\"+nightly\".as_ref(), path.as_os_str()];\n+    if context.check {\n+        args.push(\"--check\".as_ref());\n+    }\n+    let success = exec(context, \"rustfmt\", std::env::current_dir()?, &args)?;\n+    if !success {\n+        eprintln!(\"rustfmt failed on {}\", path.display());\n+    }\n+    Ok(success)\n+}\n+\n+fn project_root() -> Result<PathBuf, CliError> {\n+    let current_dir = std::env::current_dir()?;\n+    for path in current_dir.ancestors() {\n+        let result = std::fs::read_to_string(path.join(\"Cargo.toml\"));\n+        if let Err(err) = &result {\n+            if err.kind() == io::ErrorKind::NotFound {\n+                continue;\n+            }\n+        }\n+\n+        let content = result?;\n+        if content.contains(\"[package]\\nname = \\\"clippy\\\"\") {\n+            return Ok(path.to_path_buf());\n+        }\n+    }\n+\n+    Err(CliError::ProjectRootNotFound)\n+}"}, {"sha": "5fa7a87a5dea463bccd555919b9292781a19745b", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -4,6 +4,8 @@ extern crate regex;\n \n use clap::{App, Arg, SubCommand};\n use clippy_dev::*;\n+\n+mod fmt;\n mod stderr_length_check;\n \n #[derive(PartialEq)]\n@@ -14,6 +16,21 @@ enum UpdateMode {\n \n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n+        .subcommand(\n+            SubCommand::with_name(\"fmt\")\n+                .about(\"Run rustfmt on all projects and tests\")\n+                .arg(\n+                    Arg::with_name(\"check\")\n+                        .long(\"check\")\n+                        .help(\"Use the rustfmt --check option\"),\n+                )\n+                .arg(\n+                    Arg::with_name(\"verbose\")\n+                        .short(\"v\")\n+                        .long(\"verbose\")\n+                        .help(\"Echo commands run\"),\n+                ),\n+        )\n         .subcommand(\n             SubCommand::with_name(\"update_lints\")\n                 .about(\"Updates lint registration and information from the source code\")\n@@ -46,14 +63,21 @@ fn main() {\n     if matches.is_present(\"limit-stderr-length\") {\n         stderr_length_check::check();\n     }\n-    if let Some(matches) = matches.subcommand_matches(\"update_lints\") {\n-        if matches.is_present(\"print-only\") {\n-            print_lints();\n-        } else if matches.is_present(\"check\") {\n-            update_lints(&UpdateMode::Check);\n-        } else {\n-            update_lints(&UpdateMode::Change);\n-        }\n+\n+    match matches.subcommand() {\n+        (\"fmt\", Some(matches)) => {\n+            fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n+        },\n+        (\"update_lints\", Some(matches)) => {\n+            if matches.is_present(\"print-only\") {\n+                print_lints();\n+            } else if matches.is_present(\"check\") {\n+                update_lints(&UpdateMode::Check);\n+            } else {\n+                update_lints(&UpdateMode::Change);\n+            }\n+        },\n+        _ => {},\n     }\n }\n "}, {"sha": "3049c45ddc8685cf7757b913af7233b94dad65a6", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -7,7 +7,7 @@ use std::io::prelude::*;\n // The maximum length allowed for stderr files.\n //\n // We limit this because small files are easier to deal with than bigger files.\n-const LIMIT: usize = 320;\n+const LIMIT: usize = 275;\n \n pub fn check() {\n     let stderr_files = stderr_files();\n@@ -23,16 +23,15 @@ pub fn check() {\n }\n \n fn exceeding_stderr_files(files: impl Iterator<Item = walkdir::DirEntry>) -> impl Iterator<Item = String> {\n-    files\n-        .filter_map(|file| {\n-            let path = file.path().to_str().expect(\"Could not convert path to str\").to_string();\n-            let linecount = count_linenumbers(&path);\n-            if linecount > LIMIT {\n-                Some(path)\n-            } else {\n-                None\n-            }\n-        })\n+    files.filter_map(|file| {\n+        let path = file.path().to_str().expect(\"Could not convert path to str\").to_string();\n+        let linecount = count_linenumbers(&path);\n+        if linecount > LIMIT {\n+            Some(path)\n+        } else {\n+            None\n+        }\n+    })\n }\n \n fn stderr_files() -> impl Iterator<Item = walkdir::DirEntry> {"}, {"sha": "fb426a4ad2d162cc92fd1a89b32af0216215422a", "filename": "clippy_dummy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dummy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dummy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dummy%2FCargo.toml?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_dummy\" # rename to clippy before publishing\n-version = \"0.0.302\"\n+version = \"0.0.303\"\n authors = [\"Manish Goregaokar <manishsmail@gmail.com>\"]\n edition = \"2018\"\n readme = \"crates-readme.md\""}, {"sha": "1288250daaa65b2f401c0e8916a2fd307550712c", "filename": "clippy_dummy/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dummy%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dummy%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dummy%2Fbuild.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -3,7 +3,7 @@ extern crate term;\n fn main() {\n     if let Err(_) = foo() {\n         eprintln!(\"error: Clippy is no longer available via crates.io\\n\");\n-        eprintln!(\"help: please run `rustup component add clippy-preview` instead\");\n+        eprintln!(\"help: please run `rustup component add clippy` instead\");\n     }\n     std::process::exit(1);\n }\n@@ -31,7 +31,7 @@ fn foo() -> Result<(), ()> {\n     write!(t, \"please run `\").map_err(|_| ())?;\n \n     t.attr(term::Attr::Bold).map_err(|_| ())?;\n-    write!(t, \"rustup component add clippy-preview\").map_err(|_| ())?;\n+    write!(t, \"rustup component add clippy\").map_err(|_| ())?;\n \n     t.reset().map_err(|_| ())?;\n     t.fg(term::color::WHITE).map_err(|_| ())?;"}, {"sha": "0decae8b9103d680516a611f740b5d691ad7abba", "filename": "clippy_dummy/crates-readme.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dummy%2Fcrates-readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_dummy%2Fcrates-readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dummy%2Fcrates-readme.md?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,7 +1,7 @@\n Installing clippy via crates.io is deprecated. Please use the following:\n \n ```terminal\n-rustup component add clippy-preview\n+rustup component add clippy\n ```\n \n on a Rust version 1.29 or later. You may need to run `rustup self update` if it complains about a missing clippy binary."}, {"sha": "53d7f317f3322746cf0e4c157e07971fc778850b", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -27,7 +27,7 @@ semver = \"0.9.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n toml = \"0.5\"\n unicode-normalization = \"0.1\"\n-pulldown-cmark = \"0.5.2\"\n+pulldown-cmark = \"0.5.3\"\n url = \"1.7.0\"\n if_chain = \"1.0.0\"\n smallvec = { version = \"0.6.5\", features = [\"union\"] }"}, {"sha": "9e0d114569e8af86572acb51e3e5a5a449c3e5be", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -16,7 +16,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// a + 1\n+    /// # let a = 0;\n+    /// a + 1;\n     /// ```\n     pub INTEGER_ARITHMETIC,\n     restriction,\n@@ -33,7 +34,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// a + 1.0\n+    /// # let a = 0.0;\n+    /// a + 1.0;\n     /// ```\n     pub FLOAT_ARITHMETIC,\n     restriction,"}, {"sha": "ec4c8f5faa3fa9f456323b158c074a244bbf4c26", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -45,7 +45,8 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// let mut a = 5;\n-    /// ...\n+    /// let b = 2;\n+    /// // ...\n     /// a += a + b;\n     /// ```\n     pub MISREFACTORED_ASSIGN_OP,"}, {"sha": "64c8a715d5efc51548280fe44ec94c1259045a34", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -113,19 +113,19 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// // Bad\n-    /// #[inline(always)]\n-    ///\n-    /// fn not_quite_good_code(..) { ... }\n-    ///\n     /// // Good (as inner attribute)\n     /// #![inline(always)]\n     ///\n-    /// fn this_is_fine(..) { ... }\n+    /// fn this_is_fine() { }\n+    ///\n+    /// // Bad\n+    /// #[inline(always)]\n+    ///\n+    /// fn not_quite_good_code() { }\n     ///\n     /// // Good (as outer attribute)\n     /// #[inline(always)]\n-    /// fn this_is_fine_too(..) { ... }\n+    /// fn this_is_fine_too() { }\n     /// ```\n     pub EMPTY_LINE_AFTER_OUTER_ATTR,\n     nursery,"}, {"sha": "ab9cf951261748c0a6d816c55a4b08cf9e53b02b", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -24,7 +24,8 @@ declare_clippy_lint! {\n     /// **Example:**\n     ///\n     /// ```rust\n-    /// &my_data.filter(|&x| x == 0u8).count() // use bytecount::count instead\n+    /// # let vec = vec![1_u8];\n+    /// &vec.iter().filter(|x| **x == 0u8).count(); // use bytecount::count instead\n     /// ```\n     pub NAIVE_BYTECOUNT,\n     perf,"}, {"sha": "10ba0b9bf5612fb259c7993e505d78cb5209a774", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -27,6 +27,8 @@ declare_clippy_lint! {\n     /// Could be written:\n     ///\n     /// ```rust\n+    /// # use std::convert::TryFrom;\n+    /// # let foo = 1;\n     /// # let _ =\n     /// i32::try_from(foo).is_ok()\n     /// # ;\n@@ -160,12 +162,12 @@ impl ConversionType {\n     /// Creates a conversion type if the type is allowed & conversion is valid\n     fn try_new(from: &str, to: &str) -> Option<Self> {\n         if UINTS.contains(&from) {\n-            Some(ConversionType::FromUnsigned)\n+            Some(Self::FromUnsigned)\n         } else if SINTS.contains(&from) {\n             if UINTS.contains(&to) {\n-                Some(ConversionType::SignedToUnsigned)\n+                Some(Self::SignedToUnsigned)\n             } else if SINTS.contains(&to) {\n-                Some(ConversionType::SignedToSigned)\n+                Some(Self::SignedToSigned)\n             } else {\n                 None\n             }"}, {"sha": "fe57c300a340d0186bda23fc9a5e829d68190617", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -48,27 +48,25 @@ pub enum Constant {\n impl PartialEq for Constant {\n     fn eq(&self, other: &Self) -> bool {\n         match (self, other) {\n-            (&Constant::Str(ref ls), &Constant::Str(ref rs)) => ls == rs,\n-            (&Constant::Binary(ref l), &Constant::Binary(ref r)) => l == r,\n-            (&Constant::Char(l), &Constant::Char(r)) => l == r,\n-            (&Constant::Int(l), &Constant::Int(r)) => l == r,\n-            (&Constant::F64(l), &Constant::F64(r)) => {\n+            (&Self::Str(ref ls), &Self::Str(ref rs)) => ls == rs,\n+            (&Self::Binary(ref l), &Self::Binary(ref r)) => l == r,\n+            (&Self::Char(l), &Self::Char(r)) => l == r,\n+            (&Self::Int(l), &Self::Int(r)) => l == r,\n+            (&Self::F64(l), &Self::F64(r)) => {\n                 // We want `Fw32 == FwAny` and `FwAny == Fw64`, and by transitivity we must have\n                 // `Fw32 == Fw64`, so don\u2019t compare them.\n                 // `to_bits` is required to catch non-matching 0.0, -0.0, and NaNs.\n                 l.to_bits() == r.to_bits()\n             },\n-            (&Constant::F32(l), &Constant::F32(r)) => {\n+            (&Self::F32(l), &Self::F32(r)) => {\n                 // We want `Fw32 == FwAny` and `FwAny == Fw64`, and by transitivity we must have\n                 // `Fw32 == Fw64`, so don\u2019t compare them.\n                 // `to_bits` is required to catch non-matching 0.0, -0.0, and NaNs.\n                 f64::from(l).to_bits() == f64::from(r).to_bits()\n             },\n-            (&Constant::Bool(l), &Constant::Bool(r)) => l == r,\n-            (&Constant::Vec(ref l), &Constant::Vec(ref r)) | (&Constant::Tuple(ref l), &Constant::Tuple(ref r)) => {\n-                l == r\n-            },\n-            (&Constant::Repeat(ref lv, ref ls), &Constant::Repeat(ref rv, ref rs)) => ls == rs && lv == rv,\n+            (&Self::Bool(l), &Self::Bool(r)) => l == r,\n+            (&Self::Vec(ref l), &Self::Vec(ref r)) | (&Self::Tuple(ref l), &Self::Tuple(ref r)) => l == r,\n+            (&Self::Repeat(ref lv, ref ls), &Self::Repeat(ref rv, ref rs)) => ls == rs && lv == rv,\n             // TODO: are there inter-type equalities?\n             _ => false,\n         }\n@@ -82,38 +80,38 @@ impl Hash for Constant {\n     {\n         std::mem::discriminant(self).hash(state);\n         match *self {\n-            Constant::Str(ref s) => {\n+            Self::Str(ref s) => {\n                 s.hash(state);\n             },\n-            Constant::Binary(ref b) => {\n+            Self::Binary(ref b) => {\n                 b.hash(state);\n             },\n-            Constant::Char(c) => {\n+            Self::Char(c) => {\n                 c.hash(state);\n             },\n-            Constant::Int(i) => {\n+            Self::Int(i) => {\n                 i.hash(state);\n             },\n-            Constant::F32(f) => {\n+            Self::F32(f) => {\n                 f64::from(f).to_bits().hash(state);\n             },\n-            Constant::F64(f) => {\n+            Self::F64(f) => {\n                 f.to_bits().hash(state);\n             },\n-            Constant::Bool(b) => {\n+            Self::Bool(b) => {\n                 b.hash(state);\n             },\n-            Constant::Vec(ref v) | Constant::Tuple(ref v) => {\n+            Self::Vec(ref v) | Self::Tuple(ref v) => {\n                 v.hash(state);\n             },\n-            Constant::Repeat(ref c, l) => {\n+            Self::Repeat(ref c, l) => {\n                 c.hash(state);\n                 l.hash(state);\n             },\n-            Constant::RawPtr(u) => {\n+            Self::RawPtr(u) => {\n                 u.hash(state);\n             },\n-            Constant::Err(ref s) => {\n+            Self::Err(ref s) => {\n                 s.hash(state);\n             },\n         }\n@@ -123,25 +121,25 @@ impl Hash for Constant {\n impl Constant {\n     pub fn partial_cmp(tcx: TyCtxt<'_>, cmp_type: Ty<'_>, left: &Self, right: &Self) -> Option<Ordering> {\n         match (left, right) {\n-            (&Constant::Str(ref ls), &Constant::Str(ref rs)) => Some(ls.cmp(rs)),\n-            (&Constant::Char(ref l), &Constant::Char(ref r)) => Some(l.cmp(r)),\n-            (&Constant::Int(l), &Constant::Int(r)) => {\n+            (&Self::Str(ref ls), &Self::Str(ref rs)) => Some(ls.cmp(rs)),\n+            (&Self::Char(ref l), &Self::Char(ref r)) => Some(l.cmp(r)),\n+            (&Self::Int(l), &Self::Int(r)) => {\n                 if let ty::Int(int_ty) = cmp_type.sty {\n                     Some(sext(tcx, l, int_ty).cmp(&sext(tcx, r, int_ty)))\n                 } else {\n                     Some(l.cmp(&r))\n                 }\n             },\n-            (&Constant::F64(l), &Constant::F64(r)) => l.partial_cmp(&r),\n-            (&Constant::F32(l), &Constant::F32(r)) => l.partial_cmp(&r),\n-            (&Constant::Bool(ref l), &Constant::Bool(ref r)) => Some(l.cmp(r)),\n-            (&Constant::Tuple(ref l), &Constant::Tuple(ref r)) | (&Constant::Vec(ref l), &Constant::Vec(ref r)) => l\n+            (&Self::F64(l), &Self::F64(r)) => l.partial_cmp(&r),\n+            (&Self::F32(l), &Self::F32(r)) => l.partial_cmp(&r),\n+            (&Self::Bool(ref l), &Self::Bool(ref r)) => Some(l.cmp(r)),\n+            (&Self::Tuple(ref l), &Self::Tuple(ref r)) | (&Self::Vec(ref l), &Self::Vec(ref r)) => l\n                 .iter()\n                 .zip(r.iter())\n                 .map(|(li, ri)| Self::partial_cmp(tcx, cmp_type, li, ri))\n                 .find(|r| r.map_or(true, |o| o != Ordering::Equal))\n                 .unwrap_or_else(|| Some(l.len().cmp(&r.len()))),\n-            (&Constant::Repeat(ref lv, ref ls), &Constant::Repeat(ref rv, ref rs)) => {\n+            (&Self::Repeat(ref lv, ref ls), &Self::Repeat(ref rv, ref rs)) => {\n                 match Self::partial_cmp(tcx, cmp_type, lv, rv) {\n                     Some(Equal) => Some(ls.cmp(rs)),\n                     x => x,\n@@ -232,7 +230,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             ExprKind::Tup(ref tup) => self.multi(tup).map(Constant::Tuple),\n             ExprKind::Repeat(ref value, _) => {\n                 let n = match self.tables.expr_ty(e).sty {\n-                    ty::Array(_, n) => n.assert_usize(self.lcx.tcx).expect(\"array length\"),\n+                    ty::Array(_, n) => n.eval_usize(self.lcx.tcx, self.lcx.param_env),\n                     _ => span_bug!(e.span, \"typeck error\"),\n                 };\n                 self.expr(value).map(|v| Constant::Repeat(Box::new(v), n))"}, {"sha": "3c2a328b9acbf75752976b96fb60e019dcdd8a4a", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -13,7 +13,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// #[derive(Copy, Clone)]\n     /// struct Countdown(u8);\n     ///"}, {"sha": "0140cf861ac9fdd67ce21b33872f84743cb87085", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -113,3 +113,12 @@ declare_deprecated_lint! {\n     pub UNSAFE_VECTOR_INITIALIZATION,\n     \"the replacement suggested by this lint had substantially different behavior\"\n }\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This lint has been superseded by the warn-by-default\n+/// `invalid_value` rustc lint.\n+declare_clippy_lint! {\n+    pub INVALID_REF,\n+    \"superseded by rustc lint `invalid_value`\"\n+}"}, {"sha": "d50a47f8fc5f69e7ec33584e1a5c882f1cd37ae8", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -49,12 +49,12 @@ declare_clippy_lint! {\n     /// **Known problems:** Bounds of generic types are sometimes wrong: https://github.com/rust-lang/rust/issues/26925\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// #[derive(Copy)]\n     /// struct Foo;\n     ///\n     /// impl Clone for Foo {\n-    ///     ..\n+    ///     // ..\n     /// }\n     /// ```\n     pub EXPL_IMPL_CLONE_ON_COPY,"}, {"sha": "4950212a4b5d145f2e5c41ebd6413a3e8c76b2e6", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     /// /// Do something with the foo_bar parameter. See also\n     /// /// that::other::module::foo.\n     /// // ^ `foo_bar` and `that::other::module::foo` should be ticked.\n-    /// fn doit(foo_bar) { .. }\n+    /// fn doit(foo_bar: usize) {}\n     /// ```\n     pub DOC_MARKDOWN,\n     pedantic,"}, {"sha": "d48bfea73b3962663d34c79f61142c0a9ecf1db3", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -18,13 +18,17 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// x == y || x < y\n+    /// # let x = 1;\n+    /// # let y = 2;\n+    /// if x == y || x < y {}\n     /// ```\n     ///\n     /// Could be written as:\n     ///\n     /// ```rust\n-    /// x <= y\n+    /// # let x = 1;\n+    /// # let y = 2;\n+    /// if x <= y {}\n     /// ```\n     pub DOUBLE_COMPARISONS,\n     complexity,\n@@ -63,6 +67,7 @@ impl<'a, 'tcx> DoubleComparisons {\n                 );\n             }};\n         }\n+        #[rustfmt::skip]\n         match (op, lkind, rkind) {\n             (BinOpKind::Or, BinOpKind::Eq, BinOpKind::Lt) | (BinOpKind::Or, BinOpKind::Lt, BinOpKind::Eq) => {\n                 lint_double_comparison!(<=)"}, {"sha": "e55490325eca1088f06abc65fcc162905f828edf", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -13,9 +13,10 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// ((0))\n-    /// foo((0))\n-    /// ((1, 2))\n+    /// # fn foo(bar: usize) {}\n+    /// ((0));\n+    /// foo((0));\n+    /// ((1, 2));\n     /// ```\n     pub DOUBLE_PARENS,\n     complexity,"}, {"sha": "1346aea3ed0a76c2d70bc60b785167adad7122f3", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -20,6 +20,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # use std::time::Duration;\n     /// let dur = Duration::new(5, 0);\n     /// let _micros = dur.subsec_nanos() / 1_000;\n     /// let _millis = dur.subsec_nanos() / 1_000_000;"}, {"sha": "6daf204a5f187587644bab1c255baba8de62b262", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -16,6 +16,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # fn a() {}\n+    /// # fn b() {}\n+    /// # let x: i32 = 1;\n     /// if x.is_positive() {\n     ///     a();\n     /// } else if x.is_negative() {\n@@ -26,6 +29,9 @@ declare_clippy_lint! {\n     /// Could be written:\n     ///\n     /// ```rust\n+    /// # fn a() {}\n+    /// # fn b() {}\n+    /// # let x: i32 = 1;\n     /// if x.is_positive() {\n     ///     a();\n     /// } else if x.is_negative() {"}, {"sha": "e6b09f89b3530192962ae587c9653150325e0867", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -16,21 +16,32 @@ declare_clippy_lint! {\n     ///\n     /// **Known problems:** Some false negatives, eg.:\n     /// ```rust\n-    /// let k = &key;\n-    /// if !m.contains_key(k) {\n-    ///     m.insert(k.clone(), v);\n+    /// # use std::collections::HashMap;\n+    /// # let mut map = HashMap::new();\n+    /// # let v = 1;\n+    /// # let k = 1;\n+    /// if !map.contains_key(&k) {\n+    ///     map.insert(k.clone(), v);\n     /// }\n     /// ```\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// if !m.contains_key(&k) {\n-    ///     m.insert(k, v)\n+    /// # use std::collections::HashMap;\n+    /// # let mut map = HashMap::new();\n+    /// # let k = 1;\n+    /// # let v = 1;\n+    /// if !map.contains_key(&k) {\n+    ///     map.insert(k, v);\n     /// }\n     /// ```\n-    /// can be rewritten as:\n+    /// can both be rewritten as:\n     /// ```rust\n-    /// m.entry(k).or_insert(v);\n+    /// # use std::collections::HashMap;\n+    /// # let mut map = HashMap::new();\n+    /// # let k = 1;\n+    /// # let v = 1;\n+    /// map.entry(k).or_insert(v);\n     /// ```\n     pub MAP_ENTRY,\n     perf,"}, {"sha": "1cc3bda3ba322188d82b0bb9ebdfc7bce6dfcfb0", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -160,6 +160,7 @@ fn check_variant(\n         let name = var2str(var);\n         if partial_match(item_name, &name) == item_name_chars\n             && name.chars().nth(item_name_chars).map_or(false, |c| !c.is_lowercase())\n+            && name.chars().nth(item_name_chars + 1).map_or(false, |c| !c.is_numeric())\n         {\n             span_lint(cx, lint, var.span, \"Variant name starts with the enum's name\");\n         }\n@@ -178,6 +179,9 @@ fn check_variant(\n         let pre_camel = camel_case::until(pre);\n         pre = &pre[..pre_camel];\n         while let Some((next, last)) = name[pre.len()..].chars().zip(pre.chars().rev()).next() {\n+            if next.is_numeric() {\n+                return;\n+            }\n             if next.is_lowercase() {\n                 let last = pre.len() - last.len_utf8();\n                 let last_camel = camel_case::until(&pre[..last]);"}, {"sha": "c37efbd6e49dafe17f6a6072781f850c91c2247e", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,5 +1,5 @@\n use rustc::hir::intravisit as visit;\n-use rustc::hir::*;\n+use rustc::hir::{self, *};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::{cmt_, Categorization};\n@@ -28,11 +28,10 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// fn main() {\n-    ///     let x = Box::new(1);\n-    ///     foo(*x);\n-    ///     println!(\"{}\", *x);\n-    /// }\n+    /// # fn foo(bar: usize) {}\n+    /// let x = Box::new(1);\n+    /// foo(*x);\n+    /// println!(\"{}\", *x);\n     /// ```\n     pub BOXED_LOCAL,\n     perf,\n@@ -101,6 +100,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n     }\n }\n \n+// TODO: Replace with Map::is_argument(..) when it's fixed\n+fn is_argument(map: &hir::map::Map<'_>, id: HirId) -> bool {\n+    match map.find(id) {\n+        Some(Node::Binding(_)) => (),\n+        _ => return false,\n+    }\n+\n+    match map.find(map.get_parent_node(id)) {\n+        Some(Node::Arg(_)) => true,\n+        _ => false,\n+    }\n+}\n+\n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n     fn consume(&mut self, _: HirId, _: Span, cmt: &cmt_<'tcx>, mode: ConsumeMode) {\n         if let Categorization::Local(lid) = cmt.cat {\n@@ -113,11 +125,13 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n     fn matched_pat(&mut self, _: &Pat, _: &cmt_<'tcx>, _: MatchMode) {}\n     fn consume_pat(&mut self, consume_pat: &Pat, cmt: &cmt_<'tcx>, _: ConsumeMode) {\n         let map = &self.cx.tcx.hir();\n-        if map.is_argument(consume_pat.hir_id) {\n+        if is_argument(map, consume_pat.hir_id) {\n             // Skip closure arguments\n-            if let Some(Node::Expr(..)) = map.find(map.get_parent_node(consume_pat.hir_id)) {\n+            let parent_id = map.get_parent_node(consume_pat.hir_id);\n+            if let Some(Node::Expr(..)) = map.find(map.get_parent_node(parent_id)) {\n                 return;\n             }\n+\n             if is_non_trait_box(cmt.ty) && !self.is_large_box(cmt.ty) {\n                 self.set.insert(consume_pat.hir_id);\n             }"}, {"sha": "b915d50671b3b017390f2c7d1fc57a17c93bb003", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -42,7 +42,9 @@ declare_clippy_lint! {\n     /// shorthand.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,no_run\n+    /// # fn b() -> bool { true }\n+    /// # fn c() -> bool { true }\n     /// let a = b() || panic!() || c();\n     /// // `c()` is dead, `panic!()` is only called if `b()` returns `false`\n     /// let x = (a, b, c, panic!());"}, {"sha": "e996bac3911e2a7a076be48db06795fd9f1131ff", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -143,20 +143,20 @@ impl FloatFormat {\n     fn new(s: &str) -> Self {\n         s.chars()\n             .find_map(|x| match x {\n-                'e' => Some(FloatFormat::LowerExp),\n-                'E' => Some(FloatFormat::UpperExp),\n+                'e' => Some(Self::LowerExp),\n+                'E' => Some(Self::UpperExp),\n                 _ => None,\n             })\n-            .unwrap_or(FloatFormat::Normal)\n+            .unwrap_or(Self::Normal)\n     }\n     fn format<T>(&self, f: T) -> String\n     where\n         T: fmt::UpperExp + fmt::LowerExp + fmt::Display,\n     {\n         match self {\n-            FloatFormat::LowerExp => format!(\"{:e}\", f),\n-            FloatFormat::UpperExp => format!(\"{:E}\", f),\n-            FloatFormat::Normal => format!(\"{}\", f),\n+            Self::LowerExp => format!(\"{:e}\", f),\n+            Self::UpperExp => format!(\"{:E}\", f),\n+            Self::Normal => format!(\"{}\", f),\n         }\n     }\n }"}, {"sha": "a2edb4855b64e3ee1e6baeedaa2e5977c168ddbb", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -16,8 +16,10 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # use std::io::Write;\n+    /// # let bar = \"furchtbar\";\n     /// // this would be clearer as `eprintln!(\"foo: {:?}\", bar);`\n-    /// writeln!(&mut io::stderr(), \"foo: {:?}\", bar).unwrap();\n+    /// writeln!(&mut std::io::stderr(), \"foo: {:?}\", bar).unwrap();\n     /// ```\n     pub EXPLICIT_WRITE,\n     complexity,"}, {"sha": "751d8fd00830638083b8d5eb861391136e9e9f87", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -26,8 +26,9 @@ declare_clippy_lint! {\n     ///\n     /// **Examples:**\n     /// ```rust\n-    /// format!(\"foo\")\n-    /// format!(\"{}\", foo)\n+    /// # let foo = \"foo\";\n+    /// format!(\"foo\");\n+    /// format!(\"{}\", foo);\n     /// ```\n     pub USELESS_FORMAT,\n     complexity,"}, {"sha": "9772a603ba0379dcbbdb2988b72a3bf082850ec2", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -23,8 +23,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # struct Color;\n     /// fn foo(x: u32, y: u32, name: &str, c: Color, w: f32, h: f32, a: f32, b: f32) {\n-    ///     ..\n+    ///     // ..\n     /// }\n     /// ```\n     pub TOO_MANY_ARGUMENTS,"}, {"sha": "1cd58a370945ad7b2e7e5f94d5c8a439defe87c3", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -17,7 +17,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// x / 1 + 0 * 1 - 0 | 0\n+    /// # let x = 1;\n+    /// x / 1 + 0 * 1 - 0 | 0;\n     /// ```\n     pub IDENTITY_OP,\n     complexity,"}, {"sha": "af9647dc0d692da629f3b7324129d26ad2005ff3", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -17,6 +17,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # let v: Vec<usize> = vec![];\n+    /// # fn a() {}\n+    /// # fn b() {}\n     /// if !v.is_empty() {\n     ///     a()\n     /// } else {\n@@ -27,6 +30,9 @@ declare_clippy_lint! {\n     /// Could be written:\n     ///\n     /// ```rust\n+    /// # let v: Vec<usize> = vec![];\n+    /// # fn a() {}\n+    /// # fn b() {}\n     /// if v.is_empty() {\n     ///     b()\n     /// } else {"}, {"sha": "ceda6578182f8cbcbbcc7a69e56d617ed46d9957", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 84, "deletions": 64, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,7 +1,14 @@\n-use crate::utils::{in_macro_or_desugar, is_expn_of, snippet_opt, span_lint_and_then};\n-use rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl, HirId, MatchSource};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_lint_pass, declare_tool_lint};\n+use crate::utils::{\n+    in_macro_or_desugar, match_def_path,\n+    paths::{BEGIN_PANIC, BEGIN_PANIC_FMT},\n+    resolve_node, snippet_opt, span_lint_and_then,\n+};\n+use if_chain::if_chain;\n+use rustc::{\n+    declare_lint_pass, declare_tool_lint,\n+    hir::{intravisit::FnKind, Body, Expr, ExprKind, FnDecl, HirId, MatchSource, StmtKind},\n+    lint::{LateContext, LateLintPass, LintArray, LintPass},\n+};\n use rustc_errors::Applicability;\n use syntax::source_map::Span;\n \n@@ -35,71 +42,84 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ImplicitReturn => [IMPLICIT_RETURN]);\n \n-impl ImplicitReturn {\n-    fn lint(cx: &LateContext<'_, '_>, outer_span: syntax_pos::Span, inner_span: syntax_pos::Span, msg: &str) {\n-        span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing return statement\", |db| {\n-            if let Some(snippet) = snippet_opt(cx, inner_span) {\n-                db.span_suggestion(\n-                    outer_span,\n-                    msg,\n-                    format!(\"return {}\", snippet),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-        });\n-    }\n+static LINT_BREAK: &str = \"change `break` to `return` as shown\";\n+static LINT_RETURN: &str = \"add `return` as shown\";\n \n-    fn expr_match(cx: &LateContext<'_, '_>, expr: &rustc::hir::Expr) {\n-        match &expr.node {\n-            // loops could be using `break` instead of `return`\n-            ExprKind::Block(block, ..) | ExprKind::Loop(block, ..) => {\n-                if let Some(expr) = &block.expr {\n-                    Self::expr_match(cx, expr);\n-                }\n-                // only needed in the case of `break` with `;` at the end\n-                else if let Some(stmt) = block.stmts.last() {\n-                    if let rustc::hir::StmtKind::Semi(expr, ..) = &stmt.node {\n-                        // make sure it's a break, otherwise we want to skip\n-                        if let ExprKind::Break(.., break_expr) = &expr.node {\n-                            if let Some(break_expr) = break_expr {\n-                                Self::lint(cx, expr.span, break_expr.span, \"change `break` to `return` as shown\");\n-                            }\n-                        }\n+fn lint(cx: &LateContext<'_, '_>, outer_span: Span, inner_span: Span, msg: &str) {\n+    let outer_span = outer_span.source_callsite();\n+    let inner_span = inner_span.source_callsite();\n+\n+    span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing return statement\", |db| {\n+        if let Some(snippet) = snippet_opt(cx, inner_span) {\n+            db.span_suggestion(\n+                outer_span,\n+                msg,\n+                format!(\"return {}\", snippet),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    });\n+}\n+\n+fn expr_match(cx: &LateContext<'_, '_>, expr: &Expr) {\n+    match &expr.node {\n+        // loops could be using `break` instead of `return`\n+        ExprKind::Block(block, ..) | ExprKind::Loop(block, ..) => {\n+            if let Some(expr) = &block.expr {\n+                expr_match(cx, expr);\n+            }\n+            // only needed in the case of `break` with `;` at the end\n+            else if let Some(stmt) = block.stmts.last() {\n+                if_chain! {\n+                    if let StmtKind::Semi(expr, ..) = &stmt.node;\n+                    // make sure it's a break, otherwise we want to skip\n+                    if let ExprKind::Break(.., break_expr) = &expr.node;\n+                    if let Some(break_expr) = break_expr;\n+                    then {\n+                            lint(cx, expr.span, break_expr.span, LINT_BREAK);\n                     }\n                 }\n-            },\n-            // use `return` instead of `break`\n-            ExprKind::Break(.., break_expr) => {\n-                if let Some(break_expr) = break_expr {\n-                    Self::lint(cx, expr.span, break_expr.span, \"change `break` to `return` as shown\");\n-                }\n-            },\n-            ExprKind::Match(.., arms, source) => {\n-                let check_all_arms = match source {\n-                    MatchSource::IfLetDesugar {\n-                        contains_else_clause: has_else,\n-                    } => *has_else,\n-                    _ => true,\n-                };\n+            }\n+        },\n+        // use `return` instead of `break`\n+        ExprKind::Break(.., break_expr) => {\n+            if let Some(break_expr) = break_expr {\n+                lint(cx, expr.span, break_expr.span, LINT_BREAK);\n+            }\n+        },\n+        ExprKind::Match(.., arms, source) => {\n+            let check_all_arms = match source {\n+                MatchSource::IfLetDesugar {\n+                    contains_else_clause: has_else,\n+                } => *has_else,\n+                _ => true,\n+            };\n \n-                if check_all_arms {\n-                    for arm in arms {\n-                        Self::expr_match(cx, &arm.body);\n-                    }\n-                } else {\n-                    Self::expr_match(cx, &arms.first().expect(\"if let doesn't have a single arm\").body);\n+            if check_all_arms {\n+                for arm in arms {\n+                    expr_match(cx, &arm.body);\n                 }\n-            },\n-            // skip if it already has a return statement\n-            ExprKind::Ret(..) => (),\n-            // everything else is missing `return`\n-            _ => {\n-                // make sure it's not just an unreachable expression\n-                if is_expn_of(expr.span, \"unreachable\").is_none() {\n-                    Self::lint(cx, expr.span, expr.span, \"add `return` as shown\")\n+            } else {\n+                expr_match(cx, &arms.first().expect(\"if let doesn't have a single arm\").body);\n+            }\n+        },\n+        // skip if it already has a return statement\n+        ExprKind::Ret(..) => (),\n+        // make sure it's not a call that panics\n+        ExprKind::Call(expr, ..) => {\n+            if_chain! {\n+                if let ExprKind::Path(qpath) = &expr.node;\n+                if let Some(path_def_id) = resolve_node(cx, qpath, expr.hir_id).opt_def_id();\n+                if match_def_path(cx, path_def_id, &BEGIN_PANIC) ||\n+                    match_def_path(cx, path_def_id, &BEGIN_PANIC_FMT);\n+                then { }\n+                else {\n+                    lint(cx, expr.span, expr.span, LINT_RETURN)\n                 }\n-            },\n-        }\n+            }\n+        },\n+        // everything else is missing `return`\n+        _ => lint(cx, expr.span, expr.span, LINT_RETURN),\n     }\n }\n \n@@ -119,7 +139,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitReturn {\n         // checking return type through MIR, HIR is not able to determine inferred closure return types\n         // make sure it's not a macro\n         if !mir.return_ty().is_unit() && !in_macro_or_desugar(span) {\n-            Self::expr_match(cx, &body.value);\n+            expr_match(cx, &body.value);\n         }\n     }\n }"}, {"sha": "02dafbe2e3981e62941397896c4b50b29ead63e9", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -47,7 +47,7 @@ declare_clippy_lint! {\n     /// **Known problems:** Hopefully none.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,no_run\n     /// // Vector\n     /// let x = vec![0; 5];\n     ///\n@@ -94,7 +94,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n             if let Some(range) = higher::range(cx, index) {\n                 // Ranged indexes, i.e., &x[n..m], &x[n..], &x[..n] and &x[..]\n                 if let ty::Array(_, s) = ty.sty {\n-                    let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n+                    let size: u128 = s.eval_usize(cx.tcx, cx.param_env).into();\n \n                     let const_range = to_const_range(cx, range, size);\n "}, {"sha": "48767aa2710d6d12a0ba3d1c4d7db60807a7bed6", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -34,7 +34,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// [0..].iter().zip(infinite_iter.take_while(|x| x > 5))\n+    /// let infinite_iter = 0..;\n+    /// [0..].iter().zip(infinite_iter.take_while(|x| *x > 5));\n     /// ```\n     pub MAYBE_INFINITE_ITER,\n     pedantic,"}, {"sha": "ef0a754383794cb77ca52ed02c317b032531aaaa", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,154 @@\n+use if_chain::if_chain;\n+use rustc::hir::{ImplItem, ImplItemKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+\n+use crate::utils::{\n+    get_trait_def_id, implements_trait, in_macro_or_desugar, match_type, paths, return_ty, span_help_and_lint,\n+    trait_ref_of_method, walk_ptrs_ty,\n+};\n+\n+declare_clippy_lint! {\n+    /// **What id does:** Checks for the definition of inherent methods with a signature of `to_string(&self) -> String`.\n+    ///\n+    /// **Why is this bad?** This method is also implicitly defined if a type implements the `Display` trait. As the functionality of `Display` is much more versatile, it should be preferred.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// ** Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// pub struct A;\n+    ///\n+    /// impl A {\n+    ///     pub fn to_string(&self) -> String {\n+    ///         \"I am A\".to_string()\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// // Good\n+    /// use std::fmt;\n+    ///\n+    /// pub struct A;\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"I am A\")\n+    ///     }\n+    /// }\n+    /// ```\n+    pub INHERENT_TO_STRING,\n+    style,\n+    \"type implements inherent method `to_string()`, but should instead implement the `Display` trait\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What id does:** Checks for the definition of inherent methods with a signature of `to_string(&self) -> String` and if the type implementing this method also implements the `Display` trait.\n+    ///\n+    /// **Why is this bad?** This method is also implicitly defined if a type implements the `Display` trait. The less versatile inherent method will then shadow the implementation introduced by `Display`.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// ** Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// use std::fmt;\n+    ///\n+    /// pub struct A;\n+    ///\n+    /// impl A {\n+    ///     pub fn to_string(&self) -> String {\n+    ///         \"I am A\".to_string()\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"I am A, too\")\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// // Good\n+    /// use std::fmt;\n+    ///\n+    /// pub struct A;\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"I am A\")\n+    ///     }\n+    /// }\n+    /// ```\n+    pub INHERENT_TO_STRING_SHADOW_DISPLAY,\n+    correctness,\n+    \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait \"\n+}\n+\n+declare_lint_pass!(InherentToString => [INHERENT_TO_STRING, INHERENT_TO_STRING_SHADOW_DISPLAY]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InherentToString {\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx ImplItem) {\n+        if in_macro_or_desugar(impl_item.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            // Check if item is a method, called to_string and has a parameter 'self'\n+            if let ImplItemKind::Method(ref signature, _) = impl_item.node;\n+            if impl_item.ident.name.as_str() == \"to_string\";\n+            let decl = &signature.decl;\n+            if decl.implicit_self.has_implicit_self();\n+\n+            // Check if return type is String\n+            if match_type(cx, return_ty(cx, impl_item.hir_id), &paths::STRING);\n+\n+            // Filters instances of to_string which are required by a trait\n+            if trait_ref_of_method(cx, impl_item.hir_id).is_none();\n+\n+            then {\n+                show_lint(cx, impl_item);\n+            }\n+        }\n+    }\n+}\n+\n+fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem) {\n+    let display_trait_id =\n+        get_trait_def_id(cx, &[\"core\", \"fmt\", \"Display\"]).expect(\"Failed to get trait ID of `Display`!\");\n+\n+    // Get the real type of 'self'\n+    let fn_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+    let self_type = cx.tcx.fn_sig(fn_def_id).input(0);\n+    let self_type = walk_ptrs_ty(self_type.skip_binder());\n+\n+    // Emit either a warning or an error\n+    if implements_trait(cx, self_type, display_trait_id, &[]) {\n+        span_help_and_lint(\n+            cx,\n+            INHERENT_TO_STRING_SHADOW_DISPLAY,\n+            item.span,\n+            &format!(\n+                \"type `{}` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\",\n+                self_type.to_string()\n+            ),\n+            &format!(\"remove the inherent method from type `{}`\", self_type.to_string())\n+        );\n+    } else {\n+        span_help_and_lint(\n+            cx,\n+            INHERENT_TO_STRING,\n+            item.span,\n+            &format!(\n+                \"implementation of inherent method `to_string(&self) -> String` for type `{}`\",\n+                self_type.to_string()\n+            ),\n+            &format!(\"implement trait `Display` for type `{}` instead\", self_type.to_string()),\n+        );\n+    }\n+}"}, {"sha": "22ebf562d3ba16fd5eb98265d88b912aec30c5ec", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -17,13 +17,17 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// x >= y + 1\n+    /// # let x = 1;\n+    /// # let y = 1;\n+    /// if x >= y + 1 {}\n     /// ```\n     ///\n-    /// Could be written:\n+    /// Could be written as:\n     ///\n     /// ```rust\n-    /// x > y\n+    /// # let x = 1;\n+    /// # let y = 1;\n+    /// if x > y {}\n     /// ```\n     pub INT_PLUS_ONE,\n     complexity,"}, {"sha": "8f9ccaea26d2131cd4e1b94a4936fe4301feff1d", "filename": "clippy_lints/src/invalid_ref.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c7da4c26fbff41c07fe03927847f3fe233d8b5ad/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7da4c26fbff41c07fe03927847f3fe233d8b5ad/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=c7da4c26fbff41c07fe03927847f3fe233d8b5ad", "patch": "@@ -1,55 +0,0 @@\n-use crate::utils::{match_def_path, paths, span_help_and_lint};\n-use if_chain::if_chain;\n-use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::ty;\n-use rustc::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for creation of references to zeroed or uninitialized memory.\n-    ///\n-    /// **Why is this bad?** Creation of null references is undefined behavior.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```no_run\n-    /// let bad_ref: &usize = unsafe { std::mem::zeroed() };\n-    /// ```\n-    pub INVALID_REF,\n-    correctness,\n-    \"creation of invalid reference\"\n-}\n-\n-const ZERO_REF_SUMMARY: &str = \"reference to zeroed memory\";\n-const UNINIT_REF_SUMMARY: &str = \"reference to uninitialized memory\";\n-const HELP: &str = \"Creation of a null reference is undefined behavior; \\\n-                    see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\";\n-\n-declare_lint_pass!(InvalidRef => [INVALID_REF]);\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if_chain! {\n-            if let ExprKind::Call(ref path, ref args) = expr.node;\n-            if let ExprKind::Path(ref qpath) = path.node;\n-            if args.len() == 0;\n-            if let ty::Ref(..) = cx.tables.expr_ty(expr).sty;\n-            if let Some(def_id) = cx.tables.qpath_res(qpath, path.hir_id).opt_def_id();\n-            then {\n-                let msg = if match_def_path(cx, def_id, &paths::MEM_ZEROED) |\n-                             match_def_path(cx, def_id, &paths::INIT)\n-                {\n-                    ZERO_REF_SUMMARY\n-                } else if match_def_path(cx, def_id, &paths::MEM_UNINIT) |\n-                          match_def_path(cx, def_id, &paths::UNINIT)\n-                {\n-                    UNINIT_REF_SUMMARY\n-                } else {\n-                    return;\n-                };\n-                span_help_and_lint(cx, INVALID_REF, expr.span, msg, HELP);\n-            }\n-        }\n-    }\n-}"}, {"sha": "ea302ed9fc9a3345d7cb522d904e939314642af7", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -244,7 +244,7 @@ fn check_len(\n                 LEN_ZERO,\n                 span,\n                 &format!(\"length comparison to {}\", if compare_to == 0 { \"zero\" } else { \"one\" }),\n-                \"using `is_empty` is clearer and more explicit\",\n+                &format!(\"using `{}is_empty` is clearer and more explicit\", op),\n                 format!(\n                     \"{}{}.is_empty()\",\n                     op,"}, {"sha": "4c9126045f995538ba9defa4a4b08cb178218c7f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,6 +1,7 @@\n // error-pattern:cargo-clippy\n \n #![feature(box_syntax)]\n+#![feature(box_patterns)]\n #![feature(never_type)]\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n@@ -9,6 +10,7 @@\n #![recursion_limit = \"512\"]\n #![warn(rust_2018_idioms, trivial_casts, trivial_numeric_casts)]\n #![deny(rustc::internal)]\n+#![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![feature(crate_visibility_modifier)]\n #![feature(concat_idents)]\n \n@@ -98,42 +100,42 @@ macro_rules! declare_clippy_lint {\n     };\n     { $(#[$attr:meta])* pub $name:tt, complexity, $description:tt } => {\n         declare_tool_lint! {\n-            pub clippy::$name, Warn, $description, report_in_external_macro: true\n+            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n         }\n     };\n     { $(#[$attr:meta])* pub $name:tt, perf, $description:tt } => {\n         declare_tool_lint! {\n-            pub clippy::$name, Warn, $description, report_in_external_macro: true\n+            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n         }\n     };\n     { $(#[$attr:meta])* pub $name:tt, pedantic, $description:tt } => {\n         declare_tool_lint! {\n-            pub clippy::$name, Allow, $description, report_in_external_macro: true\n+            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n         }\n     };\n     { $(#[$attr:meta])* pub $name:tt, restriction, $description:tt } => {\n         declare_tool_lint! {\n-            pub clippy::$name, Allow, $description, report_in_external_macro: true\n+            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n         }\n     };\n     { $(#[$attr:meta])* pub $name:tt, cargo, $description:tt } => {\n         declare_tool_lint! {\n-            pub clippy::$name, Allow, $description, report_in_external_macro: true\n+            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n         }\n     };\n     { $(#[$attr:meta])* pub $name:tt, nursery, $description:tt } => {\n         declare_tool_lint! {\n-            pub clippy::$name, Allow, $description, report_in_external_macro: true\n+            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n         }\n     };\n     { $(#[$attr:meta])* pub $name:tt, internal, $description:tt } => {\n         declare_tool_lint! {\n-            pub clippy::$name, Allow, $description, report_in_external_macro: true\n+            $(#[$attr])* pub clippy::$name, Allow, $description, report_in_external_macro: true\n         }\n     };\n     { $(#[$attr:meta])* pub $name:tt, internal_warn, $description:tt } => {\n         declare_tool_lint! {\n-            pub clippy::$name, Warn, $description, report_in_external_macro: true\n+            $(#[$attr])* pub clippy::$name, Warn, $description, report_in_external_macro: true\n         }\n     };\n }\n@@ -194,17 +196,18 @@ pub mod indexing_slicing;\n pub mod infallible_destructuring_match;\n pub mod infinite_iter;\n pub mod inherent_impl;\n+pub mod inherent_to_string;\n pub mod inline_fn_without_body;\n pub mod int_plus_one;\n pub mod integer_division;\n-pub mod invalid_ref;\n pub mod items_after_statements;\n pub mod large_enum_variant;\n pub mod len_zero;\n pub mod let_if_seq;\n pub mod lifetimes;\n pub mod literal_representation;\n pub mod loops;\n+pub mod main_recursion;\n pub mod map_clone;\n pub mod map_unit_fn;\n pub mod matches;\n@@ -260,6 +263,7 @@ pub mod strings;\n pub mod suspicious_trait_impl;\n pub mod swap;\n pub mod temporary_assignment;\n+pub mod trait_bounds;\n pub mod transmute;\n pub mod transmuting_null;\n pub mod trivially_copy_pass_by_ref;\n@@ -469,6 +473,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box types::LetUnitValue);\n     reg.register_late_lint_pass(box types::UnitCmp);\n     reg.register_late_lint_pass(box loops::Loops);\n+    reg.register_late_lint_pass(box main_recursion::MainRecursion::default());\n     reg.register_late_lint_pass(box lifetimes::Lifetimes);\n     reg.register_late_lint_pass(box entry::HashMapPass);\n     reg.register_late_lint_pass(box ranges::Ranges);\n@@ -552,7 +557,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::InfiniteIter);\n     reg.register_late_lint_pass(box inline_fn_without_body::InlineFnWithoutBody);\n-    reg.register_late_lint_pass(box invalid_ref::InvalidRef);\n     reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n     reg.register_late_lint_pass(box types::ImplicitHasher);\n     reg.register_early_lint_pass(box redundant_static_lifetimes::RedundantStaticLifetimes);\n@@ -584,6 +588,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box path_buf_push_overwrite::PathBufPushOverwrite);\n     reg.register_late_lint_pass(box checked_conversions::CheckedConversions);\n     reg.register_late_lint_pass(box integer_division::IntegerDivision);\n+    reg.register_late_lint_pass(box inherent_to_string::InherentToString);\n+    reg.register_late_lint_pass(box trait_bounds::TraitBounds);\n \n     reg.register_lint_group(\"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -666,7 +672,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n         utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n         utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n-        utils::internal_lints::OUTER_EXPN_INFO,\n+        utils::internal_lints::OUTER_EXPN_EXPN_INFO,\n     ]);\n \n     reg.register_lint_group(\"clippy::all\", Some(\"clippy\"), vec![\n@@ -725,9 +731,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n         infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n         infinite_iter::INFINITE_ITER,\n+        inherent_to_string::INHERENT_TO_STRING,\n+        inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n         inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n         int_plus_one::INT_PLUS_ONE,\n-        invalid_ref::INVALID_REF,\n         large_enum_variant::LARGE_ENUM_VARIANT,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n@@ -753,6 +760,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::WHILE_IMMUTABLE_CONDITION,\n         loops::WHILE_LET_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,\n+        main_recursion::MAIN_RECURSION,\n         map_clone::MAP_CLONE,\n         map_unit_fn::OPTION_MAP_UNIT_FN,\n         map_unit_fn::RESULT_MAP_UNIT_FN,\n@@ -853,6 +861,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         swap::ALMOST_SWAPPED,\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         transmute::CROSSPOINTER_TRANSMUTE,\n         transmute::TRANSMUTE_BYTES_TO_STR,\n         transmute::TRANSMUTE_INT_TO_BOOL,\n@@ -886,6 +895,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         unused_io_amount::UNUSED_IO_AMOUNT,\n         unused_label::UNUSED_LABEL,\n+        unwrap::PANICKING_UNWRAP,\n+        unwrap::UNNECESSARY_UNWRAP,\n         vec::USELESS_VEC,\n         write::PRINTLN_EMPTY_STRING,\n         write::PRINT_LITERAL,\n@@ -913,6 +924,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n         infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n+        inherent_to_string::INHERENT_TO_STRING,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n         let_if_seq::USELESS_LET_IF_SEQ,\n@@ -922,6 +934,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::FOR_KV_MAP,\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,\n+        main_recursion::MAIN_RECURSION,\n         map_clone::MAP_CLONE,\n         matches::MATCH_BOOL,\n         matches::MATCH_OVERLAPPING_ARM,\n@@ -1033,6 +1046,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         reference::REF_IN_DEREF,\n         swap::MANUAL_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n+        trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         transmute::CROSSPOINTER_TRANSMUTE,\n         transmute::TRANSMUTE_BYTES_TO_STR,\n         transmute::TRANSMUTE_INT_TO_BOOL,\n@@ -1050,6 +1064,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::UNNECESSARY_CAST,\n         types::VEC_BOX,\n         unused_label::UNUSED_LABEL,\n+        unwrap::UNNECESSARY_UNWRAP,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n \n@@ -1075,8 +1090,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         functions::NOT_UNSAFE_PTR_ARG_DEREF,\n         indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n         infinite_iter::INFINITE_ITER,\n+        inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY,\n         inline_fn_without_body::INLINE_FN_WITHOUT_BODY,\n-        invalid_ref::INVALID_REF,\n         literal_representation::MISTYPED_LITERAL_SUFFIXES,\n         loops::FOR_LOOP_OVER_OPTION,\n         loops::FOR_LOOP_OVER_RESULT,\n@@ -1110,6 +1125,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n         unused_io_amount::UNUSED_IO_AMOUNT,\n+        unwrap::PANICKING_UNWRAP,\n     ]);\n \n     reg.register_lint_group(\"clippy::perf\", Some(\"clippy_perf\"), vec![\n@@ -1146,8 +1162,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         needless_borrow::NEEDLESS_BORROW,\n         path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE,\n         redundant_clone::REDUNDANT_CLONE,\n-        unwrap::PANICKING_UNWRAP,\n-        unwrap::UNNECESSARY_UNWRAP,\n     ]);\n }\n "}, {"sha": "72e28d23ebdb10b844b434a7a018c63d6df1ba0c", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -47,7 +47,7 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// fn unused_lifetime<'a>(x: u8) {\n-    ///     ..\n+    ///     // ..\n     /// }\n     /// ```\n     pub EXTRA_UNUSED_LIFETIMES,\n@@ -283,6 +283,8 @@ impl<'v, 't> RefVisitor<'v, 't> {\n         if let Some(ref lt) = *lifetime {\n             if lt.name == LifetimeName::Static {\n                 self.lts.push(RefLt::Static);\n+            } else if let LifetimeName::Param(ParamName::Fresh(_)) = lt.name {\n+                // Fresh lifetimes generated should be ignored.\n             } else if lt.is_elided() {\n                 self.lts.push(RefLt::Unnamed);\n             } else {\n@@ -346,7 +348,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n             },\n             TyKind::Def(item, _) => {\n                 let map = self.cx.tcx.hir();\n-                if let ItemKind::Existential(ref exist_ty) = map.expect_item(item.id).node {\n+                if let ItemKind::OpaqueTy(ref exist_ty) = map.expect_item(item.id).node {\n                     for bound in &exist_ty.bounds {\n                         if let GenericBound::Outlives(_) = *bound {\n                             self.record(&None);"}, {"sha": "9cc957f1499e70fa52d7e8a20b8e296a3d3e3419", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -115,8 +115,8 @@ impl Radix {\n     /// Returns a reasonable digit group size for this radix.\n     crate fn suggest_grouping(&self) -> usize {\n         match *self {\n-            Radix::Binary | Radix::Hexadecimal => 4,\n-            Radix::Octal | Radix::Decimal => 3,\n+            Self::Binary | Self::Hexadecimal => 4,\n+            Self::Octal | Self::Decimal => 3,\n         }\n     }\n }\n@@ -285,7 +285,7 @@ enum WarningType {\n impl WarningType {\n     crate fn display(&self, grouping_hint: &str, cx: &EarlyContext<'_>, span: syntax_pos::Span) {\n         match self {\n-            WarningType::MistypedLiteralSuffix => span_lint_and_sugg(\n+            Self::MistypedLiteralSuffix => span_lint_and_sugg(\n                 cx,\n                 MISTYPED_LITERAL_SUFFIXES,\n                 span,\n@@ -294,7 +294,7 @@ impl WarningType {\n                 grouping_hint.to_string(),\n                 Applicability::MaybeIncorrect,\n             ),\n-            WarningType::UnreadableLiteral => span_lint_and_sugg(\n+            Self::UnreadableLiteral => span_lint_and_sugg(\n                 cx,\n                 UNREADABLE_LITERAL,\n                 span,\n@@ -303,7 +303,7 @@ impl WarningType {\n                 grouping_hint.to_owned(),\n                 Applicability::MachineApplicable,\n             ),\n-            WarningType::LargeDigitGroups => span_lint_and_sugg(\n+            Self::LargeDigitGroups => span_lint_and_sugg(\n                 cx,\n                 LARGE_DIGIT_GROUPS,\n                 span,\n@@ -312,7 +312,7 @@ impl WarningType {\n                 grouping_hint.to_owned(),\n                 Applicability::MachineApplicable,\n             ),\n-            WarningType::InconsistentDigitGrouping => span_lint_and_sugg(\n+            Self::InconsistentDigitGrouping => span_lint_and_sugg(\n                 cx,\n                 INCONSISTENT_DIGIT_GROUPING,\n                 span,\n@@ -321,7 +321,7 @@ impl WarningType {\n                 grouping_hint.to_owned(),\n                 Applicability::MachineApplicable,\n             ),\n-            WarningType::DecimalRepresentation => span_lint_and_sugg(\n+            Self::DecimalRepresentation => span_lint_and_sugg(\n                 cx,\n                 DECIMAL_LITERAL_REPRESENTATION,\n                 span,"}, {"sha": "1f9120a5383178315e09f0588a441e8901d2d76c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -41,7 +41,9 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # let src = vec![1];\n+    /// # let mut dst = vec![0; 65];\n     /// for i in 0..src.len() {\n     ///     dst[i + 64] = src[i];\n     /// }\n@@ -89,16 +91,18 @@ declare_clippy_lint! {\n     /// types.\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n     /// // with `y` a `Vec` or slice:\n+    /// # let y = vec![1];\n     /// for x in y.iter() {\n-    ///     ..\n+    ///     // ..\n     /// }\n     /// ```\n     /// can be rewritten to\n     /// ```rust\n+    /// # let y = vec![1];\n     /// for x in &y {\n-    ///     ..\n+    ///     // ..\n     /// }\n     /// ```\n     pub EXPLICIT_ITER_LOOP,\n@@ -115,16 +119,18 @@ declare_clippy_lint! {\n     /// **Known problems:** None\n     ///\n     /// **Example:**\n-    /// ```ignore\n+    /// ```rust\n+    /// # let y = vec![1];\n     /// // with `y` a `Vec` or slice:\n     /// for x in y.into_iter() {\n-    ///     ..\n+    ///     // ..\n     /// }\n     /// ```\n     /// can be rewritten to\n-    /// ```ignore\n+    /// ```rust\n+    /// # let y = vec![1];\n     /// for x in y {\n-    ///     ..\n+    ///     // ..\n     /// }\n     /// ```\n     pub EXPLICIT_INTO_ITER_LOOP,\n@@ -217,18 +223,19 @@ declare_clippy_lint! {\n     /// **Known problems:** Sometimes the wrong binding is displayed (#383).\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,no_run\n+    /// # let y = Some(1);\n     /// loop {\n     ///     let x = match y {\n     ///         Some(x) => x,\n     ///         None => break,\n-    ///     }\n+    ///     };\n     ///     // .. do something with x\n     /// }\n     /// // is easier written as\n     /// while let Some(x) = y {\n     ///     // .. do something with x\n-    /// }\n+    /// };\n     /// ```\n     pub WHILE_LET_LOOP,\n     complexity,\n@@ -264,8 +271,9 @@ declare_clippy_lint! {\n     /// None\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// let len = iterator.collect::<Vec<_>>().len();\n+    /// ```rust\n+    /// # let iterator = vec![1].into_iter();\n+    /// let len = iterator.clone().collect::<Vec<_>>().len();\n     /// // should be\n     /// let len = iterator.count();\n     /// ```\n@@ -309,8 +317,11 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```ignore\n-    /// for i in 0..v.len() { foo(v[i]);\n+    /// ```rust\n+    /// # let v = vec![1];\n+    /// # fn foo(bar: usize) {}\n+    /// # fn bar(bar: usize, baz: usize) {}\n+    /// for i in 0..v.len() { foo(v[i]); }\n     /// for i in 0..v.len() { bar(i, v[i]); }\n     /// ```\n     pub EXPLICIT_COUNTER_LOOP,\n@@ -1242,7 +1253,7 @@ fn is_end_eq_array_len<'tcx>(\n         if let ExprKind::Lit(ref lit) = end.node;\n         if let ast::LitKind::Int(end_int, _) = lit.node;\n         if let ty::Array(_, arr_len_const) = indexed_ty.sty;\n-        if let Some(arr_len) = arr_len_const.assert_usize(cx.tcx);\n+        if let Some(arr_len) = arr_len_const.try_eval_usize(cx.tcx, cx.param_env);\n         then {\n             return match limits {\n                 ast::RangeLimits::Closed => end_int + 1 >= arr_len.into(),\n@@ -1364,7 +1375,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat, arg: &Expr, expr: &Ex\n                     match cx.tables.expr_ty(&args[0]).sty {\n                         // If the length is greater than 32 no traits are implemented for array and\n                         // therefore we cannot use `&`.\n-                        ty::Array(_, size) if size.assert_usize(cx.tcx).expect(\"array size\") > 32 => (),\n+                        ty::Array(_, size) if size.eval_usize(cx.tcx, cx.param_env) > 32 => {},\n                         _ => lint_iter_method(cx, args, arg, method_name),\n                     };\n                 } else {\n@@ -1977,7 +1988,7 @@ fn is_ref_iterable_type(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n fn is_iterable_array<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'_, 'tcx>) -> bool {\n     // IntoIterator is currently only implemented for array sizes <= 32 in rustc\n     match ty.sty {\n-        ty::Array(_, n) => (0..=32).contains(&n.assert_usize(cx.tcx).expect(\"array length\")),\n+        ty::Array(_, n) => (0..=32).contains(&n.eval_usize(cx.tcx, cx.param_env)),\n         _ => false,\n     }\n }"}, {"sha": "88f1e685ced3b3e4726f09d2efc9a68cc73effe3", "filename": "clippy_lints/src/main_recursion.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,62 @@\n+use rustc::hir::{Crate, Expr, ExprKind, QPath};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n+use syntax::symbol::sym;\n+\n+use crate::utils::{is_entrypoint_fn, snippet, span_help_and_lint};\n+use if_chain::if_chain;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for recursion using the entrypoint.\n+    ///\n+    /// **Why is this bad?** Apart from special setups (which we could detect following attributes like #![no_std]),\n+    /// recursing into main() seems like an unintuitive antipattern we should be able to detect.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```no_run\n+    /// fn main() {\n+    ///     main();\n+    /// }\n+    /// ```\n+    pub MAIN_RECURSION,\n+    style,\n+    \"recursion using the entrypoint\"\n+}\n+\n+#[derive(Default)]\n+pub struct MainRecursion {\n+    has_no_std_attr: bool,\n+}\n+\n+impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n+\n+impl LateLintPass<'_, '_> for MainRecursion {\n+    fn check_crate(&mut self, _: &LateContext<'_, '_>, krate: &Crate) {\n+        self.has_no_std_attr = krate.attrs.iter().any(|attr| attr.path == sym::no_std);\n+    }\n+\n+    fn check_expr_post(&mut self, cx: &LateContext<'_, '_>, expr: &Expr) {\n+        if self.has_no_std_attr {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Call(func, _) = &expr.node;\n+            if let ExprKind::Path(path) = &func.node;\n+            if let QPath::Resolved(_, path) = &path;\n+            if let Some(def_id) = path.res.opt_def_id();\n+            if is_entrypoint_fn(cx, def_id);\n+            then {\n+                span_help_and_lint(\n+                    cx,\n+                    MAIN_RECURSION,\n+                    func.span,\n+                    &format!(\"recursing into entrypoint `{}`\", snippet(cx, func.span, \"main\")),\n+                    \"consider using another function for this recursion\"\n+                )\n+            }\n+        }\n+    }\n+}"}, {"sha": "22093bfbee84adcf9a04f2e04c19b8464bcc3394", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -20,20 +20,29 @@ declare_clippy_lint! {\n     /// **Example:**\n     ///\n     /// ```rust\n-    /// let x: Option<&str> = do_stuff();\n+    /// # fn do_stuff() -> Option<String> { Some(String::new()) }\n+    /// # fn log_err_msg(foo: String) -> Option<String> { Some(foo) }\n+    /// # fn format_msg(foo: String) -> String { String::new() }\n+    /// let x: Option<String> = do_stuff();\n     /// x.map(log_err_msg);\n-    /// x.map(|msg| log_err_msg(format_msg(msg)))\n+    /// # let x: Option<String> = do_stuff();\n+    /// x.map(|msg| log_err_msg(format_msg(msg)));\n     /// ```\n     ///\n     /// The correct use would be:\n     ///\n     /// ```rust\n-    /// let x: Option<&str> = do_stuff();\n+    /// # fn do_stuff() -> Option<String> { Some(String::new()) }\n+    /// # fn log_err_msg(foo: String) -> Option<String> { Some(foo) }\n+    /// # fn format_msg(foo: String) -> String { String::new() }\n+    /// let x: Option<String> = do_stuff();\n     /// if let Some(msg) = x {\n-    ///     log_err_msg(msg)\n+    ///     log_err_msg(msg);\n     /// }\n+    ///\n+    /// # let x: Option<String> = do_stuff();\n     /// if let Some(msg) = x {\n-    ///     log_err_msg(format_msg(msg))\n+    ///     log_err_msg(format_msg(msg));\n     /// }\n     /// ```\n     pub OPTION_MAP_UNIT_FN,\n@@ -53,21 +62,29 @@ declare_clippy_lint! {\n     /// **Example:**\n     ///\n     /// ```rust\n-    /// let x: Result<&str, &str> = do_stuff();\n+    /// # fn do_stuff() -> Result<String, String> { Ok(String::new()) }\n+    /// # fn log_err_msg(foo: String) -> Result<String, String> { Ok(foo) }\n+    /// # fn format_msg(foo: String) -> String { String::new() }\n+    /// let x: Result<String, String> = do_stuff();\n     /// x.map(log_err_msg);\n-    /// x.map(|msg| log_err_msg(format_msg(msg)))\n+    /// # let x: Result<String, String> = do_stuff();\n+    /// x.map(|msg| log_err_msg(format_msg(msg)));\n     /// ```\n     ///\n     /// The correct use would be:\n     ///\n     /// ```rust\n-    /// let x: Result<&str, &str> = do_stuff();\n+    /// # fn do_stuff() -> Result<String, String> { Ok(String::new()) }\n+    /// # fn log_err_msg(foo: String) -> Result<String, String> { Ok(foo) }\n+    /// # fn format_msg(foo: String) -> String { String::new() }\n+    /// let x: Result<String, String> = do_stuff();\n     /// if let Ok(msg) = x {\n-    ///     log_err_msg(msg)\n-    /// }\n+    ///     log_err_msg(msg);\n+    /// };\n+    /// # let x: Result<String, String> = do_stuff();\n     /// if let Ok(msg) = x {\n-    ///     log_err_msg(format_msg(msg))\n-    /// }\n+    ///     log_err_msg(format_msg(msg));\n+    /// };\n     /// ```\n     pub RESULT_MAP_UNIT_FN,\n     complexity,"}, {"sha": "8a6f6970e1bc68e00727d9b6973fd9af30fbce09", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -53,19 +53,25 @@ declare_clippy_lint! {\n     /// Using `match`:\n     ///\n     /// ```rust\n+    /// # fn bar(foo: &usize) {}\n+    /// # let other_ref: usize = 1;\n+    /// # let x: Option<&usize> = Some(&1);\n     /// match x {\n     ///     Some(ref foo) => bar(foo),\n-    ///     _ => bar(other_ref),\n+    ///     _ => bar(&other_ref),\n     /// }\n     /// ```\n     ///\n     /// Using `if let` with `else`:\n     ///\n     /// ```rust\n+    /// # fn bar(foo: &usize) {}\n+    /// # let other_ref: usize = 1;\n+    /// # let x: Option<&usize> = Some(&1);\n     /// if let Some(ref foo) = x {\n     ///     bar(foo);\n     /// } else {\n-    ///     bar(other_ref);\n+    ///     bar(&other_ref);\n     /// }\n     /// ```\n     pub SINGLE_MATCH_ELSE,\n@@ -205,6 +211,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # enum Foo { A(usize), B(usize) }\n+    /// # let x = Foo::B(1);\n     /// match x {\n     ///     A => {},\n     ///     _ => {},"}, {"sha": "54b0a61937e7eb54f3bd3a3e0c571710828d4177", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -14,6 +14,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # use std::mem;\n+    /// # use std::rc::Rc;\n     /// mem::forget(Rc::new(55))\n     /// ```\n     pub MEM_FORGET,"}, {"sha": "e51e432749c1230bfa44ca5749fe16c7b3501801", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 104, "deletions": 47, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -40,8 +40,19 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n+    ///\n+    /// Using unwrap on an `Option`:\n+    ///\n+    /// ```rust\n+    /// let opt = Some(1);\n+    /// opt.unwrap();\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n     /// ```rust\n-    /// x.unwrap()\n+    /// let opt = Some(1);\n+    /// opt.expect(\"more helpful message\");\n     /// ```\n     pub OPTION_UNWRAP_USED,\n     restriction,\n@@ -62,8 +73,18 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n+    /// Using unwrap on an `Option`:\n+    ///\n+    /// ```rust\n+    /// let res: Result<usize, ()> = Ok(1);\n+    /// res.unwrap();\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n     /// ```rust\n-    /// x.unwrap()\n+    /// let res: Result<usize, ()> = Ok(1);\n+    /// res.expect(\"more helpful message\");\n     /// ```\n     pub RESULT_UNWRAP_USED,\n     restriction,\n@@ -141,9 +162,10 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// impl X {\n-    ///     pub fn as_str(self) -> &str {\n-    ///         ..\n+    /// # struct X;\n+    /// impl<'a> X {\n+    ///     pub fn as_str(self) -> &'a str {\n+    ///         \"foo\"\n     ///     }\n     /// }\n     /// ```\n@@ -179,7 +201,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// x.map(|a| a + 1).unwrap_or(0)\n+    /// # let x = Some(1);\n+    /// x.map(|a| a + 1).unwrap_or(0);\n     /// ```\n     pub OPTION_MAP_UNWRAP_OR,\n     pedantic,\n@@ -196,7 +219,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// x.map(|a| a + 1).unwrap_or_else(some_function)\n+    /// # let x = Some(1);\n+    /// # fn some_function() -> usize { 1 }\n+    /// x.map(|a| a + 1).unwrap_or_else(some_function);\n     /// ```\n     pub OPTION_MAP_UNWRAP_OR_ELSE,\n     pedantic,\n@@ -213,7 +238,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// x.map(|a| a + 1).unwrap_or_else(some_function)\n+    /// # let x: Result<usize, ()> = Ok(1);\n+    /// # fn some_function(foo: ()) -> usize { 1 }\n+    /// x.map(|a| a + 1).unwrap_or_else(some_function);\n     /// ```\n     pub RESULT_MAP_UNWRAP_OR_ELSE,\n     pedantic,\n@@ -247,7 +274,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// iter.filter(|x| x == 0).next()\n+    /// # let vec = vec![1];\n+    /// vec.iter().filter(|x| **x == 0).next();\n     /// ```\n     pub FILTER_NEXT,\n     complexity,\n@@ -264,7 +292,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// iter.map(|x| x.iter()).flatten()\n+    /// let vec = vec![vec![1]];\n+    /// vec.iter().map(|x| x.iter()).flatten();\n     /// ```\n     pub MAP_FLATTEN,\n     pedantic,\n@@ -283,7 +312,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// iter.filter(|x| x == 0).map(|x| x * 2)\n+    /// let vec = vec![1];\n+    /// vec.iter().filter(|x| **x == 0).map(|x| *x * 2);\n     /// ```\n     pub FILTER_MAP,\n     pedantic,\n@@ -343,7 +373,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    ///  (0..3).find(|x| x == 2).map(|x| x * 2);\n+    ///  (0..3).find(|x| *x == 2).map(|x| x * 2);\n     /// ```\n     /// Can be written as\n     /// ```rust\n@@ -365,7 +395,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// iter.find(|x| x == 0).is_some()\n+    /// # let vec = vec![1];\n+    /// vec.iter().find(|x| **x == 0).is_some();\n     /// ```\n     pub SEARCH_IS_SOME,\n     complexity,\n@@ -383,7 +414,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// name.chars().next() == Some('_')\n+    /// let name = \"foo\";\n+    /// name.chars().next() == Some('_');\n     /// ```\n     pub CHARS_NEXT_CMP,\n     complexity,\n@@ -403,15 +435,18 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// foo.unwrap_or(String::new())\n+    /// # let foo = Some(String::new());\n+    /// foo.unwrap_or(String::new());\n     /// ```\n     /// this can instead be written:\n     /// ```rust\n-    /// foo.unwrap_or_else(String::new)\n+    /// # let foo = Some(String::new());\n+    /// foo.unwrap_or_else(String::new);\n     /// ```\n     /// or\n     /// ```rust\n-    /// foo.unwrap_or_default()\n+    /// # let foo = Some(String::new());\n+    /// foo.unwrap_or_default();\n     /// ```\n     pub OR_FUN_CALL,\n     perf,\n@@ -429,15 +464,24 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// foo.expect(&format!(\"Err {}: {}\", err_code, err_msg))\n+    /// # let foo = Some(String::new());\n+    /// # let err_code = \"418\";\n+    /// # let err_msg = \"I'm a teapot\";\n+    /// foo.expect(&format!(\"Err {}: {}\", err_code, err_msg));\n     /// ```\n     /// or\n     /// ```rust\n-    /// foo.expect(format!(\"Err {}: {}\", err_code, err_msg).as_str())\n+    /// # let foo = Some(String::new());\n+    /// # let err_code = \"418\";\n+    /// # let err_msg = \"I'm a teapot\";\n+    /// foo.expect(format!(\"Err {}: {}\", err_code, err_msg).as_str());\n     /// ```\n     /// this can instead be written:\n     /// ```rust\n-    /// foo.unwrap_or_else(|_| panic!(\"Err {}: {}\", err_code, err_msg))\n+    /// # let foo = Some(String::new());\n+    /// # let err_code = \"418\";\n+    /// # let err_msg = \"I'm a teapot\";\n+    /// foo.unwrap_or_else(|| panic!(\"Err {}: {}\", err_code, err_msg));\n     /// ```\n     pub EXPECT_FUN_CALL,\n     perf,\n@@ -454,7 +498,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// 42u64.clone()\n+    /// 42u64.clone();\n     /// ```\n     pub CLONE_ON_COPY,\n     complexity,\n@@ -472,7 +516,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// x.clone()\n+    /// # use std::rc::Rc;\n+    /// let x = Rc::new(1);\n+    /// x.clone();\n     /// ```\n     pub CLONE_ON_REF_PTR,\n     restriction,\n@@ -728,11 +774,13 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # fn do_stuff(x: &[i32]) {}\n     /// let x: &[i32] = &[1, 2, 3, 4, 5];\n     /// do_stuff(x.as_ref());\n     /// ```\n     /// The correct use would be:\n     /// ```rust\n+    /// # fn do_stuff(x: &[i32]) {}\n     /// let x: &[i32] = &[1, 2, 3, 4, 5];\n     /// do_stuff(x);\n     /// ```\n@@ -911,7 +959,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n             [\"is_some\", \"position\"] => lint_search_is_some(cx, expr, \"position\", arg_lists[1], arg_lists[0]),\n             [\"is_some\", \"rposition\"] => lint_search_is_some(cx, expr, \"rposition\", arg_lists[1], arg_lists[0]),\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n-            [\"as_ptr\", \"unwrap\"] => lint_cstring_as_ptr(cx, expr, &arg_lists[1][0], &arg_lists[0][0]),\n+            [\"as_ptr\", \"unwrap\"] | [\"as_ptr\", \"expect\"] => {\n+                lint_cstring_as_ptr(cx, expr, &arg_lists[1][0], &arg_lists[0][0])\n+            },\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, arg_lists[1], false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, arg_lists[1], true),\n             [\"next\", \"skip\"] => lint_iter_skip_next(cx, expr),\n@@ -1799,7 +1849,7 @@ fn derefs_to_slice<'a, 'tcx>(\n             ty::Slice(_) => true,\n             ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n             ty::Adt(..) => match_type(cx, ty, &paths::VEC),\n-            ty::Array(_, size) => size.assert_usize(cx.tcx).expect(\"array length\") < 32,\n+            ty::Array(_, size) => size.eval_usize(cx.tcx, cx.param_env) < 32,\n             ty::Ref(_, inner, _) => may_slice(cx, inner),\n             _ => false,\n         }\n@@ -2327,13 +2377,20 @@ fn lint_chars_last_cmp_with_unwrap<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, info: &\n fn lint_single_char_pattern<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, _expr: &'tcx hir::Expr, arg: &'tcx hir::Expr) {\n     if_chain! {\n         if let hir::ExprKind::Lit(lit) = &arg.node;\n-        if let ast::LitKind::Str(r, _) = lit.node;\n+        if let ast::LitKind::Str(r, style) = lit.node;\n         if r.as_str().len() == 1;\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n             let snip = snippet_with_applicability(cx, arg.span, \"..\", &mut applicability);\n-            let c = &snip[1..snip.len() - 1];\n-            let hint = format!(\"'{}'\", if c == \"'\" { \"\\\\'\" } else { c });\n+            let ch = if let ast::StrStyle::Raw(nhash) = style {\n+                let nhash = nhash as usize;\n+                // for raw string: r##\"a\"##\n+                &snip[(nhash + 2)..(snip.len() - 1 - nhash)]\n+            } else {\n+                // for regular string: \"a\"\n+                &snip[1..(snip.len() - 1)]\n+            };\n+            let hint = format!(\"'{}'\", if ch == \"'\" { \"\\\\'\" } else { ch });\n             span_lint_and_sugg(\n                 cx,\n                 SINGLE_CHAR_PATTERN,\n@@ -2551,14 +2608,14 @@ impl SelfKind {\n         let is_actually_self = |ty| is_self_ty(ty) || SpanlessEq::new(cx).eq_ty(ty, self_ty);\n         if is_self(arg) {\n             match self {\n-                SelfKind::Value => is_actually_self(ty),\n-                SelfKind::Ref | SelfKind::RefMut => {\n+                Self::Value => is_actually_self(ty),\n+                Self::Ref | Self::RefMut => {\n                     if allow_value_for_ref && is_actually_self(ty) {\n                         return true;\n                     }\n                     match ty.node {\n                         hir::TyKind::Rptr(_, ref mt_ty) => {\n-                            let mutability_match = if self == SelfKind::Ref {\n+                            let mutability_match = if self == Self::Ref {\n                                 mt_ty.mutbl == hir::MutImmutable\n                             } else {\n                                 mt_ty.mutbl == hir::MutMutable\n@@ -2572,20 +2629,20 @@ impl SelfKind {\n             }\n         } else {\n             match self {\n-                SelfKind::Value => false,\n-                SelfKind::Ref => is_as_ref_or_mut_trait(ty, self_ty, generics, &paths::ASREF_TRAIT),\n-                SelfKind::RefMut => is_as_ref_or_mut_trait(ty, self_ty, generics, &paths::ASMUT_TRAIT),\n-                SelfKind::No => true,\n+                Self::Value => false,\n+                Self::Ref => is_as_ref_or_mut_trait(ty, self_ty, generics, &paths::ASREF_TRAIT),\n+                Self::RefMut => is_as_ref_or_mut_trait(ty, self_ty, generics, &paths::ASMUT_TRAIT),\n+                Self::No => true,\n             }\n         }\n     }\n \n     fn description(self) -> &'static str {\n         match self {\n-            SelfKind::Value => \"self by value\",\n-            SelfKind::Ref => \"self by reference\",\n-            SelfKind::RefMut => \"self by mutable reference\",\n-            SelfKind::No => \"no self\",\n+            Self::Value => \"self by value\",\n+            Self::Ref => \"self by reference\",\n+            Self::RefMut => \"self by mutable reference\",\n+            Self::No => \"no self\",\n         }\n     }\n }\n@@ -2655,17 +2712,17 @@ fn single_segment_ty(ty: &hir::Ty) -> Option<&hir::PathSegment> {\n impl Convention {\n     fn check(&self, other: &str) -> bool {\n         match *self {\n-            Convention::Eq(this) => this == other,\n-            Convention::StartsWith(this) => other.starts_with(this) && this != other,\n+            Self::Eq(this) => this == other,\n+            Self::StartsWith(this) => other.starts_with(this) && this != other,\n         }\n     }\n }\n \n impl fmt::Display for Convention {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         match *self {\n-            Convention::Eq(this) => this.fmt(f),\n-            Convention::StartsWith(this) => this.fmt(f).and_then(|_| '*'.fmt(f)),\n+            Self::Eq(this) => this.fmt(f),\n+            Self::StartsWith(this) => this.fmt(f).and_then(|_| '*'.fmt(f)),\n         }\n     }\n }\n@@ -2682,11 +2739,11 @@ impl OutType {\n     fn matches(self, cx: &LateContext<'_, '_>, ty: &hir::FunctionRetTy) -> bool {\n         let is_unit = |ty: &hir::Ty| SpanlessEq::new(cx).eq_ty_kind(&ty.node, &hir::TyKind::Tup(vec![].into()));\n         match (self, ty) {\n-            (OutType::Unit, &hir::DefaultReturn(_)) => true,\n-            (OutType::Unit, &hir::Return(ref ty)) if is_unit(ty) => true,\n-            (OutType::Bool, &hir::Return(ref ty)) if is_bool(ty) => true,\n-            (OutType::Any, &hir::Return(ref ty)) if !is_unit(ty) => true,\n-            (OutType::Ref, &hir::Return(ref ty)) => matches!(ty.node, hir::TyKind::Rptr(_, _)),\n+            (Self::Unit, &hir::DefaultReturn(_)) => true,\n+            (Self::Unit, &hir::Return(ref ty)) if is_unit(ty) => true,\n+            (Self::Bool, &hir::Return(ref ty)) if is_bool(ty) => true,\n+            (Self::Any, &hir::Return(ref ty)) if !is_unit(ty) => true,\n+            (Self::Ref, &hir::Return(ref ty)) => matches!(ty.node, hir::TyKind::Rptr(_, _)),\n             _ => false,\n         }\n     }"}, {"sha": "f8a24982934c736485934c98b786aa327b2b7e34", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -7,7 +7,7 @@ use rustc::ty;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n-use syntax::source_map::{ExpnFormat, Span};\n+use syntax::source_map::{ExpnKind, Span};\n \n use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n@@ -101,7 +101,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// x.to_owned() == y\n+    /// # let x = \"foo\";\n+    /// # let y = String::from(\"foo\");\n+    /// if x.to_owned() == y {}\n     /// ```\n     pub CMP_OWNED,\n     perf,\n@@ -184,7 +186,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// f() && g(); // We should write `if f() { g(); }`.\n     /// ```\n     pub SHORT_CIRCUIT_STATEMENT,\n@@ -224,8 +226,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// const ONE = 1.00f64;\n-    /// x == ONE  // where both are floats\n+    /// let x: f64 = 1.0;\n+    /// const ONE: f64 = 1.00;\n+    /// x == ONE;  // where both are floats\n     /// ```\n     pub FLOAT_CMP_CONST,\n     restriction,\n@@ -364,6 +367,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                     if is_allowed(cx, left) || is_allowed(cx, right) {\n                         return;\n                     }\n+\n+                    // Allow comparing the results of signum()\n+                    if is_signum(cx, left) && is_signum(cx, right) {\n+                        return;\n+                    }\n+\n                     if let Some(name) = get_item_name(cx, expr) {\n                         let name = name.as_str();\n                         if name == \"eq\"\n@@ -493,6 +502,25 @@ fn is_allowed<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> bool {\n     }\n }\n \n+// Return true if `expr` is the result of `signum()` invoked on a float value.\n+fn is_signum(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n+    // The negation of a signum is still a signum\n+    if let ExprKind::Unary(UnNeg, ref child_expr) = expr.node {\n+        return is_signum(cx, &child_expr);\n+    }\n+\n+    if_chain! {\n+        if let ExprKind::MethodCall(ref method_name, _, ref expressions) = expr.node;\n+        if sym!(signum) == method_name.ident.name;\n+        // Check that the receiver of the signum() is a float (expressions[0] is the receiver of\n+        // the method call)\n+        then {\n+            return is_float(cx, &expressions[0]);\n+        }\n+    }\n+    false\n+}\n+\n fn is_float(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     matches!(walk_ptrs_ty(cx.tables.expr_ty(expr)).sty, ty::Float(_))\n }\n@@ -596,10 +624,14 @@ fn is_used(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n /// Tests whether an expression is in a macro expansion (e.g., something\n /// generated by `#[derive(...)]` or the like).\n fn in_attributes_expansion(expr: &Expr) -> bool {\n-    expr.span\n-        .ctxt()\n-        .outer_expn_info()\n-        .map_or(false, |info| matches!(info.format, ExpnFormat::MacroAttribute(_)))\n+    use syntax::ext::hygiene::MacroKind;\n+    expr.span.ctxt().outer_expn_info().map_or(false, |info| {\n+        if let ExpnKind::Macro(MacroKind::Attr, _) = info.kind {\n+            true\n+        } else {\n+            false\n+        }\n+    })\n }\n \n /// Tests whether `res` is a variable defined outside a macro."}, {"sha": "7d6f29c521b37fb3a327531fbede4a7e988f03a8", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -53,7 +53,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// (|| 42)()\n     /// ```\n     pub REDUNDANT_CLOSURE_CALL,\n@@ -305,7 +305,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                                  name makes code comprehension and documentation more difficult\",\n                                 arg_name[1..].to_owned()\n                             ),\n-                        );;\n+                        );\n                     }\n                 } else {\n                     registered_names.insert(arg_name, arg.pat.span);"}, {"sha": "89398f82c9e5c702da57309eea22e2a176c2f478", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -40,17 +40,27 @@ declare_clippy_lint! {\n     /// **Example:**\n     ///\n     /// ```rust\n+    /// # struct Foo {\n+    /// #     random_number: usize,\n+    /// # }\n+    /// # impl Foo {\n     /// fn new() -> Self {\n     ///     Self { random_number: 42 }\n     /// }\n+    /// # }\n     /// ```\n     ///\n     /// Could be a const fn:\n     ///\n     /// ```rust\n+    /// # struct Foo {\n+    /// #     random_number: usize,\n+    /// # }\n+    /// # impl Foo {\n     /// const fn new() -> Self {\n     ///     Self { random_number: 42 }\n     /// }\n+    /// # }\n     /// ```\n     pub MISSING_CONST_FOR_FN,\n     nursery,"}, {"sha": "7f49a287cff35c8c8f4d0a9da46f0be8c892103b", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -146,9 +146,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             hir::ItemKind::Struct(..) => \"a struct\",\n             hir::ItemKind::Trait(..) => \"a trait\",\n             hir::ItemKind::TraitAlias(..) => \"a trait alias\",\n-            hir::ItemKind::Ty(..) => \"a type alias\",\n+            hir::ItemKind::TyAlias(..) => \"a type alias\",\n             hir::ItemKind::Union(..) => \"a union\",\n-            hir::ItemKind::Existential(..) => \"an existential type\",\n+            hir::ItemKind::OpaqueTy(..) => \"an existential type\",\n             hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::ForeignMod(..)\n             | hir::ItemKind::GlobalAsm(..)\n@@ -184,8 +184,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         let desc = match impl_item.node {\n             hir::ImplItemKind::Const(..) => \"an associated constant\",\n             hir::ImplItemKind::Method(..) => \"a method\",\n-            hir::ImplItemKind::Type(_) => \"an associated type\",\n-            hir::ImplItemKind::Existential(_) => \"an existential type\",\n+            hir::ImplItemKind::TyAlias(_) => \"an associated type\",\n+            hir::ImplItemKind::OpaqueTy(_) => \"an existential type\",\n         };\n         self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, desc);\n     }"}, {"sha": "865543ce3d86e9f1f03b229a9d8486843d5bdad2", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -33,7 +33,7 @@ declare_clippy_lint! {\n     ///\n     /// struct Baz;\n     /// impl Baz {\n-    ///    fn priv() {} // ok\n+    ///    fn private() {} // ok\n     /// }\n     ///\n     /// impl Bar for Baz {\n@@ -42,8 +42,8 @@ declare_clippy_lint! {\n     ///\n     /// pub struct PubBaz;\n     /// impl PubBaz {\n-    ///    fn priv() {} // ok\n-    ///    pub not_ptriv() {} // missing #[inline]\n+    ///    fn private() {} // ok\n+    ///    pub fn not_ptrivate() {} // missing #[inline]\n     /// }\n     ///\n     /// impl Bar for PubBaz {\n@@ -119,9 +119,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n             | hir::ItemKind::Struct(..)\n             | hir::ItemKind::TraitAlias(..)\n             | hir::ItemKind::GlobalAsm(..)\n-            | hir::ItemKind::Ty(..)\n+            | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::Union(..)\n-            | hir::ItemKind::Existential(..)\n+            | hir::ItemKind::OpaqueTy(..)\n             | hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::ForeignMod(..)\n             | hir::ItemKind::Impl(..)\n@@ -142,7 +142,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n \n         let desc = match impl_item.node {\n             hir::ImplItemKind::Method(..) => \"a method\",\n-            hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(_) | hir::ImplItemKind::Existential(_) => return,\n+            hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(_) | hir::ImplItemKind::OpaqueTy(_) => return,\n         };\n \n         let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);"}, {"sha": "decc684b66778bc5b1e022f1f2efc89fb5073afa", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -16,6 +16,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # let mut y = 1;\n     /// let x = &mut &mut y;\n     /// ```\n     pub MUT_MUT,"}, {"sha": "522c4ab52e2ec50b9796b26aa9764fa6445fb07b", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -22,6 +22,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # use std::sync::Mutex;\n+    /// # let y = 1;\n     /// let x = Mutex::new(&y);\n     /// ```\n     pub MUTEX_ATOMIC,\n@@ -42,6 +44,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # use std::sync::Mutex;\n     /// let x = Mutex::new(0usize);\n     /// ```\n     pub MUTEX_INTEGER,"}, {"sha": "285ec0d081f37d24939bb8dc4e14cac00cf0e78b", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -24,7 +24,7 @@ declare_clippy_lint! {\n     /// shorter code.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// if x {\n     ///     false\n     /// } else {\n@@ -46,7 +46,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// if x == true {} // could be `if x { }`\n     /// ```\n     pub BOOL_COMPARISON,\n@@ -118,13 +118,11 @@ fn parent_node_is_if_expr<'a, 'b>(expr: &Expr, cx: &LateContext<'a, 'b>) -> bool\n     let parent_id = cx.tcx.hir().get_parent_node(expr.hir_id);\n     let parent_node = cx.tcx.hir().get(parent_id);\n \n-    if let rustc::hir::Node::Expr(e) = parent_node {\n-        if higher::if_block(&e).is_some() {\n-            return true;\n-        }\n+    match parent_node {\n+        rustc::hir::Node::Expr(e) => higher::if_block(&e).is_some(),\n+        rustc::hir::Node::Arm(e) => higher::if_block(&e.body).is_some(),\n+        _ => false,\n     }\n-\n-    false\n }\n \n declare_lint_pass!(BoolComparison => [BOOL_COMPARISON]);"}, {"sha": "b6598ac55b38f001773c36d1a3fc3e0576ddda3c", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -18,16 +18,15 @@ declare_clippy_lint! {\n     ///\n     /// **Known problems:** It seems that the `&ref` pattern is sometimes useful.\n     /// For instance in the following snippet:\n-    /// ```rust\n+    /// ```rust,ignore\n     /// enum Animal {\n     ///     Cat(u64),\n     ///     Dog(u64),\n     /// }\n     ///\n     /// fn foo(a: &Animal, b: &Animal) {\n     ///     match (a, b) {\n-    /// (&Animal::Cat(v), k) | (k, &Animal::Cat(v)) => (), // lifetime\n-    /// mismatch error\n+    ///         (&Animal::Cat(v), k) | (k, &Animal::Cat(v)) => (), // lifetime mismatch error\n     ///         (&Animal::Dog(ref c), &Animal::Dog(_)) => ()\n     ///     }\n     /// }"}, {"sha": "a5c0652b265b72457d5b5cf235af6a37a43440b1", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -57,6 +57,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # fn condition() -> bool { false }\n+    /// # fn update_condition() {}\n+    /// # let x = false;\n     /// while condition() {\n     ///     update_condition();\n     ///     if x {\n@@ -71,6 +74,9 @@ declare_clippy_lint! {\n     /// Could be rewritten as\n     ///\n     /// ```rust\n+    /// # fn condition() -> bool { false }\n+    /// # fn update_condition() {}\n+    /// # let x = false;\n     /// while condition() {\n     ///     update_condition();\n     ///     if x {\n@@ -83,22 +89,26 @@ declare_clippy_lint! {\n     /// As another example, the following code\n     ///\n     /// ```rust\n+    /// # fn waiting() -> bool { false }\n     /// loop {\n     ///     if waiting() {\n     ///         continue;\n     ///     } else {\n     ///         // Do something useful\n     ///     }\n+    ///     # break;\n     /// }\n     /// ```\n     /// Could be rewritten as\n     ///\n     /// ```rust\n+    /// # fn waiting() -> bool { false }\n     /// loop {\n     ///     if waiting() {\n     ///         continue;\n     ///     }\n     ///     // Do something useful\n+    ///     # break;\n     /// }\n     /// ```\n     pub NEEDLESS_CONTINUE,"}, {"sha": "eaca9c42afb93fdcacecee64b32ceb4b05145b2b", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -40,6 +40,9 @@ declare_clippy_lint! {\n     /// fn foo(v: Vec<i32>) {\n     ///     assert_eq!(v.len(), 42);\n     /// }\n+    /// ```\n+    ///\n+    /// ```rust\n     /// // should be\n     /// fn foo(v: &[i32]) {\n     ///     assert_eq!(v.len(), 42);\n@@ -193,7 +196,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n             if_chain! {\n                 if !is_self(arg);\n-                if !ty.is_mutable_pointer();\n+                if !ty.is_mutable_ptr();\n                 if !is_copy(cx, ty);\n                 if !whitelisted_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n                 if !implements_borrow_trait;"}, {"sha": "fdaa14dfb6ae0f66b1628fe174cae76539eaeb17", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -15,11 +15,17 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # struct Point {\n+    /// #     x: i32,\n+    /// #     y: i32,\n+    /// #     z: i32,\n+    /// # }\n+    /// # let zero_point = Point { x: 0, y: 0, z: 0 };\n     /// Point {\n     ///     x: 1,\n-    ///     y: 0,\n+    ///     y: 1,\n     ///     ..zero_point\n-    /// }\n+    /// };\n     /// ```\n     pub NEEDLESS_UPDATE,\n     complexity,"}, {"sha": "2fe866a1d95ba8d6a537700f740698f3ad22e1d8", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -34,7 +34,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// compute_array()[0];\n     /// ```\n     pub UNNECESSARY_OPERATION,"}, {"sha": "644660100b8b891442f9f4309386b3092686b783", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -84,6 +84,7 @@ declare_clippy_lint! {\n     \"referencing const with interior mutability\"\n }\n \n+#[allow(dead_code)]\n #[derive(Copy, Clone)]\n enum Source {\n     Item { item: Span },\n@@ -94,12 +95,12 @@ enum Source {\n impl Source {\n     fn lint(&self) -> (&'static Lint, &'static str, Span) {\n         match self {\n-            Source::Item { item } | Source::Assoc { item, .. } => (\n+            Self::Item { item } | Self::Assoc { item, .. } => (\n                 DECLARE_INTERIOR_MUTABLE_CONST,\n                 \"a const item should never be interior mutable\",\n                 *item,\n             ),\n-            Source::Expr { expr } => (\n+            Self::Expr { expr } => (\n                 BORROW_INTERIOR_MUTABLE_CONST,\n                 \"a const item with interior mutability should not be borrowed\",\n                 *expr,"}, {"sha": "5a3af2c3773fdf31e1829778eca8de3eff665777", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -127,7 +127,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                 } else {\n                     create = true\n                 }\n-                create_arg = create_arg || (arg == Argument::True);;\n+                create_arg = create_arg || (arg == Argument::True);\n             },\n             (OpenOption::Append, arg) => {\n                 if append {\n@@ -140,7 +140,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                 } else {\n                     append = true\n                 }\n-                append_arg = append_arg || (arg == Argument::True);;\n+                append_arg = append_arg || (arg == Argument::True);\n             },\n             (OpenOption::Truncate, arg) => {\n                 if truncate {\n@@ -166,7 +166,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                 } else {\n                     read = true\n                 }\n-                read_arg = read_arg || (arg == Argument::True);;\n+                read_arg = read_arg || (arg == Argument::True);\n             },\n             (OpenOption::Write, arg) => {\n                 if write {\n@@ -179,7 +179,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                 } else {\n                     write = true\n                 }\n-                write_arg = write_arg || (arg == Argument::True);;\n+                write_arg = write_arg || (arg == Argument::True);\n             },\n         }\n     }"}, {"sha": "f4c301958b9eb9c6a27556731bf1ac8997b043b0", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -14,7 +14,9 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// a + b < a\n+    /// # let a = 1;\n+    /// # let b = 2;\n+    /// a + b < a;\n     /// ```\n     pub OVERFLOW_CHECK_CONDITIONAL,\n     complexity,"}, {"sha": "805efa7cf20ad743eee4f40624c7b0f4f97072d1", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -19,7 +19,7 @@ declare_clippy_lint! {\n     /// struct Foo;\n     ///\n     /// impl PartialEq for Foo {\n-    ///    fn eq(&self, other: &Foo) -> bool { ... }\n+    ///    fn eq(&self, other: &Foo) -> bool { true }\n     ///    fn ne(&self, other: &Foo) -> bool { !(self == other) }\n     /// }\n     /// ```"}, {"sha": "ffd6d4ca0f56ab9609e810d4e60a72bf0f4c1c46", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -133,17 +133,17 @@ enum Method {\n impl Method {\n     fn suggestion(self) -> &'static str {\n         match self {\n-            Method::Offset => \"add\",\n-            Method::WrappingOffset => \"wrapping_add\",\n+            Self::Offset => \"add\",\n+            Self::WrappingOffset => \"wrapping_add\",\n         }\n     }\n }\n \n impl fmt::Display for Method {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            Method::Offset => write!(f, \"offset\"),\n-            Method::WrappingOffset => write!(f, \"wrapping_offset\"),\n+            Self::Offset => write!(f, \"offset\"),\n+            Self::WrappingOffset => write!(f, \"wrapping_offset\"),\n         }\n     }\n }"}, {"sha": "a0391e3364e19e655b6a1d390ce44e34f76c7064", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -40,7 +40,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// x.iter().zip(0..x.len())\n+    /// # let x = vec![1];\n+    /// x.iter().zip(0..x.len());\n     /// ```\n     pub RANGE_ZIP_WITH_LEN,\n     complexity,\n@@ -60,7 +61,7 @@ declare_clippy_lint! {\n     /// I.e., `let _ = (f()+1)..(f()+1)` results in `let _ = ((f()+1)..=f())`.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// for x..(y+1) { .. }\n     /// ```\n     pub RANGE_PLUS_ONE,\n@@ -78,7 +79,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// for x..=(y-1) { .. }\n     /// ```\n     pub RANGE_MINUS_ONE,"}, {"sha": "76f3f8fd88fe17585432af650adac69a6a01c149", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -40,6 +40,7 @@ declare_clippy_lint! {\n     /// * False-positive if there is a borrow preventing the value from moving out.\n     ///\n     /// ```rust\n+    /// # fn foo(x: String) {}\n     /// let x = String::new();\n     ///\n     /// let y = &x;\n@@ -49,15 +50,22 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # use std::path::Path;\n+    /// # #[derive(Clone)]\n+    /// # struct Foo;\n+    /// # impl Foo {\n+    /// #     fn new() -> Self { Foo {} }\n+    /// # }\n+    /// # fn call(x: Foo) {}\n     /// {\n     ///     let x = Foo::new();\n     ///     call(x.clone());\n     ///     call(x.clone()); // this can just pass `x`\n     /// }\n     ///\n-    /// [\"lorem\", \"ipsum\"].join(\" \").to_string()\n+    /// [\"lorem\", \"ipsum\"].join(\" \").to_string();\n     ///\n-    /// Path::new(\"/a/b\").join(\"c\").to_path_buf()\n+    /// Path::new(\"/a/b\").join(\"c\").to_path_buf();\n     /// ```\n     pub REDUNDANT_CLONE,\n     nursery,\n@@ -132,7 +140,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 let pred_arg = if_chain! {\n                     if let Some((pred_fn_def_id, pred_arg, pred_arg_ty, Some(res))) =\n                         is_call_with_ref_arg(cx, mir, &pred_terminator.kind);\n-                    if *res == mir::Place::Base(mir::PlaceBase::Local(cloned));\n+                    if res.base == mir::PlaceBase::Local(cloned);\n                     if match_def_path(cx, pred_fn_def_id, &paths::DEREF_TRAIT_METHOD);\n                     if match_type(cx, pred_arg_ty, &paths::PATH_BUF)\n                         || match_type(cx, pred_arg_ty, &paths::OS_STRING);\n@@ -218,7 +226,7 @@ fn is_call_with_ref_arg<'tcx>(\n     if_chain! {\n         if let TerminatorKind::Call { func, args, destination, .. } = kind;\n         if args.len() == 1;\n-        if let mir::Operand::Move(mir::Place::Base(mir::PlaceBase::Local(local))) = &args[0];\n+        if let mir::Operand::Move(mir::Place { base: mir::PlaceBase::Local(local), .. }) = &args[0];\n         if let ty::FnDef(def_id, _) = func.ty(&*mir, cx.tcx).sty;\n         if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(&*mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n@@ -244,7 +252,14 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n     stmts\n         .rev()\n         .find_map(|stmt| {\n-            if let mir::StatementKind::Assign(mir::Place::Base(mir::PlaceBase::Local(local)), v) = &stmt.kind {\n+            if let mir::StatementKind::Assign(\n+                mir::Place {\n+                    base: mir::PlaceBase::Local(local),\n+                    ..\n+                },\n+                v,\n+            ) = &stmt.kind\n+            {\n                 if *local == to {\n                     return Some(v);\n                 }\n@@ -271,28 +286,34 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n fn base_local_and_movability<'tcx>(\n     cx: &LateContext<'_, 'tcx>,\n     mir: &mir::Body<'tcx>,\n-    mut place: &mir::Place<'tcx>,\n+    place: &mir::Place<'tcx>,\n ) -> Option<(mir::Local, CannotMoveOut)> {\n-    use rustc::mir::Place::*;\n+    use rustc::mir::Place;\n     use rustc::mir::PlaceBase;\n+    use rustc::mir::PlaceRef;\n+    use rustc::mir::Projection;\n \n     // Dereference. You cannot move things out from a borrowed value.\n     let mut deref = false;\n     // Accessing a field of an ADT that has `Drop`. Moving the field out will cause E0509.\n     let mut field = false;\n \n-    loop {\n-        match place {\n-            Base(PlaceBase::Local(local)) => return Some((*local, deref || field)),\n-            Projection(proj) => {\n-                place = &proj.base;\n-                deref = deref || matches!(proj.elem, mir::ProjectionElem::Deref);\n-                if !field && matches!(proj.elem, mir::ProjectionElem::Field(..)) {\n-                    field = has_drop(cx, place.ty(&mir.local_decls, cx.tcx).ty);\n-                }\n-            },\n-            _ => return None,\n+    let PlaceRef {\n+        base: place_base,\n+        mut projection,\n+    } = place.as_ref();\n+    if let PlaceBase::Local(local) = place_base {\n+        while let Some(box Projection { base, elem }) = projection {\n+            projection = base;\n+            deref = matches!(elem, mir::ProjectionElem::Deref);\n+            field = !field\n+                && matches!(elem, mir::ProjectionElem::Field(..))\n+                && has_drop(cx, Place::ty_from(place_base, projection, &mir.local_decls, cx.tcx).ty);\n         }\n+\n+        Some((*local, deref || field))\n+    } else {\n+        None\n     }\n }\n "}, {"sha": "4d9fbbca83edf917f7bb0281db0a7d8ca0674eb7", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -81,7 +81,8 @@ impl EarlyLintPass for RedundantStaticLifetimes {\n         if !in_macro_or_desugar(item.span) {\n             if let ItemKind::Const(ref var_type, _) = item.node {\n                 self.visit_type(var_type, cx, \"Constants have by default a `'static` lifetime\");\n-                // Don't check associated consts because `'static` cannot be elided on those (issue #2438)\n+                // Don't check associated consts because `'static` cannot be elided on those (issue\n+                // #2438)\n             }\n \n             if let ItemKind::Static(ref var_type, _, _) = item.node {"}, {"sha": "35e214faae804efc5f43b26eaa6c04d1aa178f77", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -15,7 +15,7 @@ declare_clippy_lint! {\n     /// the suggested fix for `x = **&&y` is `x = *&y`, which is still incorrect.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// let a = f(*&mut b);\n     /// let c = *&d;\n     /// ```\n@@ -64,8 +64,8 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// struct Point(u32, u32);\n-    /// let point = Foo(30, 20);\n-    /// let x = (&point).x;\n+    /// let point = Point(30, 20);\n+    /// let x = (&point).0;\n     /// ```\n     pub REF_IN_DEREF,\n     complexity,"}, {"sha": "0dbc7f0551780576e7e66751de10999dbdde9c0c", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -16,12 +16,14 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # use core::sync::atomic::{ATOMIC_ISIZE_INIT, AtomicIsize};\n     /// static FOO: AtomicIsize = ATOMIC_ISIZE_INIT;\n     /// ```\n     ///\n     /// Could be written:\n     ///\n     /// ```rust\n+    /// # use core::sync::atomic::AtomicIsize;\n     /// static FOO: AtomicIsize = AtomicIsize::new(0);\n     /// ```\n     pub REPLACE_CONSTS,"}, {"sha": "0f2084e819e368282f1b0cec2025463ee168dfa1", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -86,7 +86,7 @@ declare_clippy_lint! {\n #[derive(PartialEq, Eq, Copy, Clone)]\n enum RetReplacement {\n     Empty,\n-    Unit,\n+    Block,\n }\n \n declare_lint_pass!(Return => [NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT]);\n@@ -139,7 +139,7 @@ impl Return {\n             // a match expr, check all arms\n             ast::ExprKind::Match(_, ref arms) => {\n                 for arm in arms {\n-                    self.check_final_expr(cx, &arm.body, Some(arm.body.span), RetReplacement::Unit);\n+                    self.check_final_expr(cx, &arm.body, Some(arm.body.span), RetReplacement::Block);\n                 }\n             },\n             _ => (),\n@@ -176,12 +176,12 @@ impl Return {\n                         );\n                     });\n                 },\n-                RetReplacement::Unit => {\n+                RetReplacement::Block => {\n                     span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n                         db.span_suggestion(\n                             ret_span,\n-                            \"replace `return` with the unit type\",\n-                            \"()\".to_string(),\n+                            \"replace `return` with an empty block\",\n+                            \"{}\".to_string(),\n                             Applicability::MachineApplicable,\n                         );\n                     });\n@@ -317,7 +317,7 @@ fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n \n // get the def site\n fn get_def(span: Span) -> Option<Span> {\n-    span.ctxt().outer_expn_info().and_then(|info| info.def_site)\n+    span.ctxt().outer_expn_info().and_then(|info| Some(info.def_site))\n }\n \n // is this expr a `()` unit?"}, {"sha": "0e75f85cccbc8731efe8d3e696e3a41a5f2da495", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -20,6 +20,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # let x = 1;\n     /// let x = &x;\n     /// ```\n     pub SHADOW_SAME,\n@@ -41,10 +42,12 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// let x = 2;\n     /// let x = x + 1;\n     /// ```\n     /// use different variable name:\n     /// ```rust\n+    /// let x = 2;\n     /// let y = x + 1;\n     /// ```\n     pub SHADOW_REUSE,\n@@ -67,6 +70,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # let y = 1;\n+    /// # let z = 2;\n     /// let x = y;\n     /// let x = z; // shadows the earlier binding\n     /// ```"}, {"sha": "7e543bfe60f7239cd9ae184350b6506368a9d9aa", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -19,6 +19,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # use core::iter::repeat;\n+    /// # let len = 4;\n     /// let mut vec1 = Vec::with_capacity(len);\n     /// vec1.resize(len, 0);\n     ///"}, {"sha": "0de63b5ff3e568da2fc9c2da15373ca6d370c9c0", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -48,7 +48,7 @@ declare_clippy_lint! {\n     ///\n     /// ```rust\n     /// let x = \"Hello\".to_owned();\n-    /// x + \", World\"\n+    /// x + \", World\";\n     /// ```\n     pub STRING_ADD,\n     restriction,\n@@ -138,6 +138,9 @@ fn is_add(cx: &LateContext<'_, '_>, src: &Expr, target: &Expr) -> bool {\n     }\n }\n \n+// Max length a b\"foo\" string can take\n+const MAX_LENGTH_BYTE_STRING_LIT: usize = 32;\n+\n declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n@@ -173,6 +176,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n                             );\n                         } else if callsite == expanded\n                             && lit_content.as_str().chars().all(|c| c.is_ascii())\n+                            && lit_content.as_str().len() <= MAX_LENGTH_BYTE_STRING_LIT\n                             && !in_macro_or_desugar(args[0].span)\n                         {\n                             span_lint_and_sugg("}, {"sha": "11ab5b8762821f11eb57ca54f2e55093238664e0", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -20,12 +20,17 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// let mut a = 42;\n+    /// let mut b = 1337;\n+    ///\n     /// let t = b;\n     /// b = a;\n     /// a = t;\n     /// ```\n     /// Use std::mem::swap():\n     /// ```rust\n+    /// let mut a = 1;\n+    /// let mut b = 2;\n     /// std::mem::swap(&mut a, &mut b);\n     /// ```\n     pub MANUAL_SWAP,"}, {"sha": "bf4c5d65db639b4ab04f99cad850d2797b801f01", "filename": "clippy_lints/src/trait_bounds.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,77 @@\n+use crate::utils::{in_macro, snippet, span_help_and_lint, SpanlessHash};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, impl_lint_pass};\n+use rustc_data_structures::fx::FxHashMap;\n+\n+#[derive(Copy, Clone)]\n+pub struct TraitBounds;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** This lint warns about unnecessary type repetitions in trait bounds\n+    ///\n+    /// **Why is this bad?** Repeating the type for every bound makes the code\n+    /// less readable than combining the bounds\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// pub fn foo<T>(t: T) where T: Copy, T: Clone {}\n+    /// ```\n+    ///\n+    /// Could be written as:\n+    ///\n+    /// ```rust\n+    /// pub fn foo<T>(t: T) where T: Copy + Clone {}\n+    /// ```\n+    pub TYPE_REPETITION_IN_BOUNDS,\n+    complexity,\n+    \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n+}\n+\n+impl_lint_pass!(TraitBounds => [TYPE_REPETITION_IN_BOUNDS]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n+    fn check_generics(&mut self, cx: &LateContext<'a, 'tcx>, gen: &'tcx Generics) {\n+        if in_macro(gen.span) {\n+            return;\n+        }\n+        let hash = |ty| -> u64 {\n+            let mut hasher = SpanlessHash::new(cx, cx.tables);\n+            hasher.hash_ty(ty);\n+            hasher.finish()\n+        };\n+        let mut map = FxHashMap::default();\n+        for bound in &gen.where_clause.predicates {\n+            if let WherePredicate::BoundPredicate(ref p) = bound {\n+                let h = hash(&p.bounded_ty);\n+                if let Some(ref v) = map.insert(h, p.bounds.iter().collect::<Vec<_>>()) {\n+                    let mut hint_string = format!(\n+                        \"consider combining the bounds: `{}:\",\n+                        snippet(cx, p.bounded_ty.span, \"_\")\n+                    );\n+                    for b in v.iter() {\n+                        if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n+                            let path = &poly_trait_ref.trait_ref.path;\n+                            hint_string.push_str(&format!(\" {} +\", path));\n+                        }\n+                    }\n+                    for b in p.bounds.iter() {\n+                        if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n+                            let path = &poly_trait_ref.trait_ref.path;\n+                            hint_string.push_str(&format!(\" {} +\", path));\n+                        }\n+                    }\n+                    hint_string.truncate(hint_string.len() - 2);\n+                    hint_string.push('`');\n+                    span_help_and_lint(\n+                        cx,\n+                        TYPE_REPETITION_IN_BOUNDS,\n+                        p.span,\n+                        \"this type has already been used as a bound predicate\",\n+                        &hint_string,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "a514b9c512dbaca6514c1f85cc84d5cdec7dca69", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -36,8 +36,8 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n-    /// core::intrinsics::transmute(t) // where the result type is the same as `t`'s\n+    /// ```rust,ignore\n+    /// core::intrinsics::transmute(t); // where the result type is the same as `t`'s\n     /// ```\n     pub USELESS_TRANSMUTE,\n     complexity,\n@@ -53,7 +53,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// core::intrinsics::transmute(t) // where the result type is the same as\n     ///                                // `*t` or `&t`'s\n     /// ```\n@@ -70,8 +70,10 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n-    /// let _: &T = std::mem::transmute(p); // where p: *const T\n+    /// ```rust,ignore\n+    /// unsafe {\n+    ///     let _: &T = std::mem::transmute(p); // where p: *const T\n+    /// }\n     ///\n     /// // can be written:\n     /// let _: &T = &*p;\n@@ -99,7 +101,10 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let _: char = std::mem::transmute(x); // where x: u32\n+    /// let x = 1_u32;\n+    /// unsafe {\n+    ///     let _: char = std::mem::transmute(x); // where x: u32\n+    /// }\n     ///\n     /// // should be:\n     /// let _ = std::char::from_u32(x).unwrap();\n@@ -127,7 +132,10 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let _: &str = std::mem::transmute(b); // where b: &[u8]\n+    /// let b: &[u8] = &[1_u8, 2_u8];\n+    /// unsafe {\n+    ///     let _: &str = std::mem::transmute(b); // where b: &[u8]\n+    /// }\n     ///\n     /// // should be:\n     /// let _ = std::str::from_utf8(b).unwrap();\n@@ -146,7 +154,10 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let _: bool = std::mem::transmute(x); // where x: u8\n+    /// let x = 1_u8;\n+    /// unsafe {\n+    ///     let _: bool = std::mem::transmute(x); // where x: u8\n+    /// }\n     ///\n     /// // should be:\n     /// let _: bool = x != 0;\n@@ -166,10 +177,12 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let _: f32 = std::mem::transmute(x); // where x: u32\n+    /// unsafe {\n+    ///     let _: f32 = std::mem::transmute(1_u32); // where x: u32\n+    /// }\n     ///\n     /// // should be:\n-    /// let _: f32 = f32::from_bits(x);\n+    /// let _: f32 = f32::from_bits(1_u32);\n     /// ```\n     pub TRANSMUTE_INT_TO_FLOAT,\n     complexity,\n@@ -195,7 +208,7 @@ declare_clippy_lint! {\n     ///     let _: &f32 = std::mem::transmute(&1u32);\n     /// }\n     /// // These can be respectively written:\n-    /// let _ = ptr as *const f32\n+    /// let _ = ptr as *const f32;\n     /// let _ = unsafe{ &*(&1u32 as *const u32 as *const f32) };\n     /// ```\n     pub TRANSMUTE_PTR_TO_PTR,"}, {"sha": "be79fc2fb81fb20852f92560659a80c1829656ca", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -39,14 +39,15 @@ declare_clippy_lint! {\n     /// each other.\n     ///\n     /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// fn foo(v: &u32) {}\n+    /// ```\n+    ///\n     /// ```rust\n-    /// fn foo(v: &u32) {\n-    ///     assert_eq!(v, 42);\n-    /// }\n-    /// // should be\n-    /// fn foo(v: u32) {\n-    ///     assert_eq!(v, 42);\n-    /// }\n+    /// // Better\n+    /// fn foo(v: u32) {}\n     /// ```\n     pub TRIVIALLY_COPY_PASS_BY_REF,\n     perf,"}, {"sha": "7eba331ae0f326bdaef8bba3291200f957c5e0e2", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_qpath, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{in_macro_or_desugar, match_qpath, paths, snippet, snippet_with_macro_callsite, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -67,10 +67,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TryErr {\n \n             then {\n                 let err_type = cx.tables.expr_ty(err_arg);\n+                let origin_snippet = if in_macro_or_desugar(err_arg.span) {\n+                    snippet_with_macro_callsite(cx, err_arg.span, \"_\")\n+                } else {\n+                    snippet(cx, err_arg.span, \"_\")\n+                };\n                 let suggestion = if err_type == return_type {\n-                    format!(\"return Err({})\", snippet(cx, err_arg.span, \"_\"))\n+                    format!(\"return Err({})\", origin_snippet)\n                 } else {\n-                    format!(\"return Err({}.into())\", snippet(cx, err_arg.span, \"_\"))\n+                    format!(\"return Err({}.into())\", origin_snippet)\n                 };\n \n                 span_lint_and_sugg("}, {"sha": "6c184246c10a13be5c838594748bc86ceb5eed26", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 62, "deletions": 36, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -25,7 +25,7 @@ use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro_or_desugar, int_bits, last_path_segment,\n     match_def_path, match_path, multispan_sugg, same_tys, sext, snippet, snippet_opt, snippet_with_applicability,\n-    span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n+    snippet_with_macro_callsite, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n@@ -133,7 +133,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let x = LinkedList::new();\n+    /// # use std::collections::LinkedList;\n+    /// let x: LinkedList<usize> = LinkedList::new();\n     /// ```\n     pub LINKEDLIST,\n     pedantic,\n@@ -467,15 +468,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnitValue {\n                 if higher::is_from_for_desugar(local) {\n                     return;\n                 }\n-                span_lint(\n-                    cx,\n-                    LET_UNIT_VALUE,\n-                    stmt.span,\n-                    &format!(\n-                        \"this let-binding has unit value. Consider omitting `let {} =`\",\n-                        snippet(cx, local.pat.span, \"..\")\n-                    ),\n-                );\n+                span_lint_and_then(cx, LET_UNIT_VALUE, stmt.span, \"this let-binding has unit value\", |db| {\n+                    if let Some(expr) = &local.init {\n+                        let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n+                        db.span_suggestion(\n+                            stmt.span,\n+                            \"omit the `let` binding\",\n+                            format!(\"{};\", snip),\n+                            Applicability::MachineApplicable, // snippet\n+                        );\n+                    }\n+                });\n             }\n         }\n     }\n@@ -557,7 +560,7 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// foo({\n     ///     let a = bar();\n     ///     baz(a);\n@@ -621,9 +624,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n }\n \n fn is_questionmark_desugar_marked_call(expr: &Expr) -> bool {\n-    use syntax_pos::hygiene::CompilerDesugaringKind;\n+    use syntax_pos::hygiene::DesugaringKind;\n     if let ExprKind::Call(ref callee, _) = expr.node {\n-        callee.span.is_compiler_desugaring(CompilerDesugaringKind::QuestionMark)\n+        callee.span.is_desugaring(DesugaringKind::QuestionMark)\n     } else {\n         false\n     }\n@@ -660,8 +663,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let x = u64::MAX;\n-    /// x as f64\n+    /// let x = std::u64::MAX;\n+    /// x as f64;\n     /// ```\n     pub CAST_PRECISION_LOSS,\n     pedantic,\n@@ -682,15 +685,15 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// let y: i8 = -1;\n-    /// y as u128 // will return 18446744073709551615\n+    /// y as u128; // will return 18446744073709551615\n     /// ```\n     pub CAST_SIGN_LOSS,\n     pedantic,\n     \"casts from signed types to unsigned types, e.g., `x as u32` where `x: i32`\"\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for on casts between numerical types that may\n+    /// **What it does:** Checks for casts between numerical types that may\n     /// truncate large values. This is expected behavior, so the cast is `Allow` by\n     /// default.\n     ///\n@@ -727,15 +730,15 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// u32::MAX as i32 // will yield a value of `-1`\n+    /// std::u32::MAX as i32; // will yield a value of `-1`\n     /// ```\n     pub CAST_POSSIBLE_WRAP,\n     pedantic,\n     \"casts that may cause wrapping around the value, e.g., `x as i32` where `x: u32` and `x > i32::MAX`\"\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for on casts between numerical types that may\n+    /// **What it does:** Checks for casts between numerical types that may\n     /// be replaced by safe conversion functions.\n     ///\n     /// **Why is this bad?** Rust's `as` keyword will perform many kinds of\n@@ -775,7 +778,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let _ = 2i32 as i32\n+    /// let _ = 2i32 as i32;\n     /// ```\n     pub UNNECESSARY_CAST,\n     complexity,\n@@ -789,7 +792,8 @@ declare_clippy_lint! {\n     /// **Why is this bad?** Dereferencing the resulting pointer may be undefined\n     /// behavior.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** Using `std::ptr::read_unaligned` and `std::ptr::write_unaligned` or similar\n+    /// on the resulting pointer is fine.\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -1210,17 +1214,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n             if_chain! {\n                 if let ty::RawPtr(from_ptr_ty) = &cast_from.sty;\n                 if let ty::RawPtr(to_ptr_ty) = &cast_to.sty;\n-                if let Some(from_align) = cx.layout_of(from_ptr_ty.ty).ok().map(|a| a.align.abi);\n-                if let Some(to_align) = cx.layout_of(to_ptr_ty.ty).ok().map(|a| a.align.abi);\n-                if from_align < to_align;\n+                if let Ok(from_layout) = cx.layout_of(from_ptr_ty.ty);\n+                if let Ok(to_layout) = cx.layout_of(to_ptr_ty.ty);\n+                if from_layout.align.abi < to_layout.align.abi;\n                 // with c_void, we inherently need to trust the user\n                 if !is_c_void(cx, from_ptr_ty.ty);\n+                // when casting from a ZST, we don't know enough to properly lint\n+                if !from_layout.is_zst();\n                 then {\n                     span_lint(\n                         cx,\n                         CAST_PTR_ALIGNMENT,\n                         expr.span,\n-                        &format!(\"casting from `{}` to a more-strictly-aligned pointer (`{}`)\", cast_from, cast_to)\n+                        &format!(\n+                            \"casting from `{}` to a more-strictly-aligned pointer (`{}`) ({} < {} bytes)\",\n+                            cast_from,\n+                            cast_to,\n+                            from_layout.align.abi.bytes(),\n+                            to_layout.align.abi.bytes(),\n+                        ),\n                     );\n                 }\n             }\n@@ -1242,7 +1254,7 @@ fn lint_fn_to_numeric_cast(\n     }\n     match cast_from.sty {\n         ty::FnDef(..) | ty::FnPtr(_) => {\n-            let mut applicability = Applicability::MachineApplicable;\n+            let mut applicability = Applicability::MaybeIncorrect;\n             let from_snippet = snippet_with_applicability(cx, cast_expr.span, \"x\", &mut applicability);\n \n             let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n@@ -1286,6 +1298,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # use std::rc::Rc;\n     /// struct Foo {\n     ///     inner: Rc<Vec<Vec<Box<(u32, u32, u32, u32)>>>>,\n     /// }\n@@ -1344,7 +1357,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexity {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         match item.node {\n-            ImplItemKind::Const(ref ty, _) | ImplItemKind::Type(ref ty) => self.check_type(cx, ty),\n+            ImplItemKind::Const(ref ty, _) | ImplItemKind::TyAlias(ref ty) => self.check_type(cx, ty),\n             // methods are covered by check_fn\n             _ => (),\n         }\n@@ -1449,13 +1462,13 @@ declare_clippy_lint! {\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// 'x' as u8\n     /// ```\n     ///\n     /// A better version, using the byte literal:\n     ///\n-    /// ```rust\n+    /// ```rust,ignore\n     /// b'x'\n     /// ```\n     pub CHAR_LIT_AS_U8,\n@@ -1679,7 +1692,8 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// let x : u8 = ...; (x as u32) > 300\n+    /// let x: u8 = 1;\n+    /// (x as u32) > 300;\n     /// ```\n     pub INVALID_UPCAST_COMPARISONS,\n     pedantic,\n@@ -1716,10 +1730,10 @@ impl PartialEq for FullInt {\n impl PartialOrd for FullInt {\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n         Some(match (self, other) {\n-            (&FullInt::S(s), &FullInt::S(o)) => s.cmp(&o),\n-            (&FullInt::U(s), &FullInt::U(o)) => s.cmp(&o),\n-            (&FullInt::S(s), &FullInt::U(o)) => Self::cmp_s_u(s, o),\n-            (&FullInt::U(s), &FullInt::S(o)) => Self::cmp_s_u(o, s).reverse(),\n+            (&Self::S(s), &Self::S(o)) => s.cmp(&o),\n+            (&Self::U(s), &Self::U(o)) => s.cmp(&o),\n+            (&Self::S(s), &Self::U(o)) => Self::cmp_s_u(s, o),\n+            (&Self::U(s), &Self::S(o)) => Self::cmp_s_u(o, s).reverse(),\n         })\n     }\n }\n@@ -1914,12 +1928,21 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// # use std::collections::HashMap;\n-    /// # use std::hash::Hash;\n+    /// # use std::hash::{Hash, BuildHasher};\n     /// # trait Serialize {};\n     /// impl<K: Hash + Eq, V> Serialize for HashMap<K, V> { }\n     ///\n     /// pub fn foo(map: &mut HashMap<i32, i32>) { }\n     /// ```\n+    /// could be rewritten as\n+    /// ```rust\n+    /// # use std::collections::HashMap;\n+    /// # use std::hash::{Hash, BuildHasher};\n+    /// # trait Serialize {};\n+    /// impl<K: Hash + Eq, V, S: BuildHasher> Serialize for HashMap<K, V, S> { }\n+    ///\n+    /// pub fn foo<S: BuildHasher>(map: &mut HashMap<i32, i32, S>) { }\n+    /// ```\n     pub IMPLICIT_HASHER,\n     style,\n     \"missing generalization over different hashers\"\n@@ -2029,6 +2052,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                     vis.visit_ty(ty);\n \n                     for target in &vis.found {\n+                        if in_external_macro(cx.sess(), generics.span) {\n+                            continue;\n+                        }\n                         let generics_suggestion_span = generics.span.substitute_dummy({\n                             let pos = snippet_opt(cx, item.span.until(body.arguments[0].pat.span))\n                                 .and_then(|snip| {"}, {"sha": "d39c341d06e5a43918f8d8b4283fd2d1665e04a7", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -14,10 +14,12 @@ declare_clippy_lint! {\n     ///\n     /// **Why is this bad?** Using `if let` or `match` is more idiomatic.\n     ///\n-    /// **Known problems:** Limitations of the borrow checker might make unwrap() necessary sometimes?\n+    /// **Known problems:** None\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # let option = Some(0);\n+    /// # fn do_something_with(_x: usize) {}\n     /// if option.is_some() {\n     ///     do_something_with(option.unwrap())\n     /// }\n@@ -26,12 +28,14 @@ declare_clippy_lint! {\n     /// Could be written:\n     ///\n     /// ```rust\n+    /// # let option = Some(0);\n+    /// # fn do_something_with(_x: usize) {}\n     /// if let Some(value) = option {\n     ///     do_something_with(value)\n     /// }\n     /// ```\n     pub UNNECESSARY_UNWRAP,\n-    nursery,\n+    complexity,\n     \"checks for calls of unwrap[_err]() that cannot fail\"\n }\n \n@@ -45,14 +49,16 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # let option = Some(0);\n+    /// # fn do_something_with(_x: usize) {}\n     /// if option.is_none() {\n     ///     do_something_with(option.unwrap())\n     /// }\n     /// ```\n     ///\n     /// This code will always panic. The if condition should probably be inverted.\n     pub PANICKING_UNWRAP,\n-    nursery,\n+    correctness,\n     \"checks for calls of unwrap[_err]() that will always fail\"\n }\n "}, {"sha": "4e2e97ddf95be79ba5a8fafff40b5971e5350b64", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -51,9 +51,11 @@ declare_lint_pass!(UseSelf => [USE_SELF]);\n \n const SEGMENTS_MSG: &str = \"segments should be composed of at least 1 element\";\n \n-fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path) {\n+fn span_use_self_lint(cx: &LateContext<'_, '_>, path: &Path, last_segment: Option<&PathSegment>) {\n+    let last_segment = last_segment.unwrap_or_else(|| path.segments.last().expect(SEGMENTS_MSG));\n+\n     // Path segments only include actual path, no methods or fields.\n-    let last_path_span = path.segments.last().expect(SEGMENTS_MSG).ident.span;\n+    let last_path_span = last_segment.ident.span;\n     // Only take path up to the end of last_path_span.\n     let span = path.span.with_hi(last_path_span.hi());\n \n@@ -80,22 +82,18 @@ impl<'a, 'tcx> Visitor<'tcx> for TraitImplTyVisitor<'a, 'tcx> {\n         let trait_ty = self.trait_type_walker.next();\n         let impl_ty = self.impl_type_walker.next();\n \n-        if let TyKind::Path(QPath::Resolved(_, path)) = &t.node {\n+        if_chain! {\n+            if let TyKind::Path(QPath::Resolved(_, path)) = &t.node;\n+\n             // The implementation and trait types don't match which means that\n             // the concrete type was specified by the implementation\n-            if impl_ty != trait_ty {\n-                if let Some(impl_ty) = impl_ty {\n-                    if self.item_type == impl_ty {\n-                        let is_self_ty = if let def::Res::SelfTy(..) = path.res {\n-                            true\n-                        } else {\n-                            false\n-                        };\n-\n-                        if !is_self_ty {\n-                            span_use_self_lint(self.cx, path);\n-                        }\n-                    }\n+            if impl_ty != trait_ty;\n+            if let Some(impl_ty) = impl_ty;\n+            if self.item_type == impl_ty;\n+            then {\n+                match path.res {\n+                    def::Res::SelfTy(..) => {},\n+                    _ => span_use_self_lint(self.cx, path, None)\n                 }\n             }\n         }\n@@ -220,15 +218,34 @@ struct UseSelfVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n     fn visit_path(&mut self, path: &'tcx Path, _id: HirId) {\n+        if path.segments.len() >= 2 {\n+            let last_but_one = &path.segments[path.segments.len() - 2];\n+            if last_but_one.ident.name != kw::SelfUpper {\n+                let enum_def_id = match path.res {\n+                    Res::Def(DefKind::Variant, variant_def_id) => self.cx.tcx.parent(variant_def_id),\n+                    Res::Def(DefKind::Ctor(def::CtorOf::Variant, _), ctor_def_id) => {\n+                        let variant_def_id = self.cx.tcx.parent(ctor_def_id);\n+                        variant_def_id.and_then(|def_id| self.cx.tcx.parent(def_id))\n+                    },\n+                    _ => None,\n+                };\n+\n+                if self.item_path.res.opt_def_id() == enum_def_id {\n+                    span_use_self_lint(self.cx, path, Some(last_but_one));\n+                }\n+            }\n+        }\n+\n         if path.segments.last().expect(SEGMENTS_MSG).ident.name != kw::SelfUpper {\n             if self.item_path.res == path.res {\n-                span_use_self_lint(self.cx, path);\n-            } else if let Res::Def(DefKind::Ctor(def::CtorOf::Struct, CtorKind::Fn), ctor_did) = path.res {\n-                if self.item_path.res.opt_def_id() == self.cx.tcx.parent(ctor_did) {\n-                    span_use_self_lint(self.cx, path);\n+                span_use_self_lint(self.cx, path, None);\n+            } else if let Res::Def(DefKind::Ctor(def::CtorOf::Struct, CtorKind::Fn), ctor_def_id) = path.res {\n+                if self.item_path.res.opt_def_id() == self.cx.tcx.parent(ctor_def_id) {\n+                    span_use_self_lint(self.cx, path, None);\n                 }\n             }\n         }\n+\n         walk_path(self, path);\n     }\n "}, {"sha": "811bdce18e89eb44e597852f315b93a8d360552b", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -15,7 +15,7 @@ declare_clippy_lint! {\n     /// **What it does:** Generates clippy code that detects the offending pattern\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// // ./tests/ui/my_lint.rs\n     /// fn foo() {\n     ///     // detect the following pattern\n@@ -24,13 +24,14 @@ declare_clippy_lint! {\n     ///         // but ignore everything from here on\n     ///         #![clippy::author = \"ignore\"]\n     ///     }\n+    ///     ()\n     /// }\n     /// ```\n     ///\n     /// Running `TESTNAME=ui/my_lint cargo uitest` will produce\n     /// a `./tests/ui/new_lint.stdout` file with the generated code:\n     ///\n-    /// ```rust\n+    /// ```rust,ignore\n     /// // ./tests/ui/new_lint.stdout\n     /// if_chain! {\n     ///     if let ExprKind::If(ref cond, ref then, None) = item.node,"}, {"sha": "0c5db79dfd877ca218659a6edcbde246cb22a628", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -44,15 +44,15 @@ pub enum Error {\n impl fmt::Display for Error {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         match *self {\n-            Error::Io(ref err) => err.fmt(f),\n-            Error::Toml(ref err) => err.fmt(f),\n+            Self::Io(ref err) => err.fmt(f),\n+            Self::Toml(ref err) => err.fmt(f),\n         }\n     }\n }\n \n impl From<io::Error> for Error {\n     fn from(e: io::Error) -> Self {\n-        Error::Io(e)\n+        Self::Io(e)\n     }\n }\n "}, {"sha": "6fc5939a216026c0b0b20ecf9740461434e5365f", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 102, "deletions": 3, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -438,9 +438,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(fun);\n                 self.hash_exprs(args);\n             },\n-            ExprKind::Cast(ref e, ref _ty) | ExprKind::Type(ref e, ref _ty) => {\n+            ExprKind::Cast(ref e, ref ty) | ExprKind::Type(ref e, ref ty) => {\n                 self.hash_expr(e);\n-                // TODO: _ty\n+                self.hash_ty(ty);\n             },\n             ExprKind::Closure(cap, _, eid, _, _) => {\n                 match cap {\n@@ -512,7 +512,10 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_expr(e);\n                 }\n             },\n-            ExprKind::Tup(ref v) | ExprKind::Array(ref v) => {\n+            ExprKind::Tup(ref tup) => {\n+                self.hash_exprs(tup);\n+            },\n+            ExprKind::Array(ref v) => {\n                 self.hash_exprs(v);\n             },\n             ExprKind::Unary(lop, ref le) => {\n@@ -574,4 +577,100 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             },\n         }\n     }\n+\n+    pub fn hash_lifetime(&mut self, lifetime: &Lifetime) {\n+        std::mem::discriminant(&lifetime.name).hash(&mut self.s);\n+        if let LifetimeName::Param(ref name) = lifetime.name {\n+            std::mem::discriminant(name).hash(&mut self.s);\n+            match name {\n+                ParamName::Plain(ref ident) => {\n+                    ident.name.hash(&mut self.s);\n+                },\n+                ParamName::Fresh(ref size) => {\n+                    size.hash(&mut self.s);\n+                },\n+                ParamName::Error => {},\n+            }\n+        }\n+    }\n+\n+    pub fn hash_ty(&mut self, ty: &Ty) {\n+        self.hash_tykind(&ty.node);\n+    }\n+\n+    pub fn hash_tykind(&mut self, ty: &TyKind) {\n+        std::mem::discriminant(ty).hash(&mut self.s);\n+        match ty {\n+            TyKind::Slice(ty) => {\n+                self.hash_ty(ty);\n+            },\n+            TyKind::Array(ty, anon_const) => {\n+                self.hash_ty(ty);\n+                self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n+            },\n+            TyKind::Ptr(mut_ty) => {\n+                self.hash_ty(&mut_ty.ty);\n+                mut_ty.mutbl.hash(&mut self.s);\n+            },\n+            TyKind::Rptr(lifetime, mut_ty) => {\n+                self.hash_lifetime(lifetime);\n+                self.hash_ty(&mut_ty.ty);\n+                mut_ty.mutbl.hash(&mut self.s);\n+            },\n+            TyKind::BareFn(bfn) => {\n+                bfn.unsafety.hash(&mut self.s);\n+                bfn.abi.hash(&mut self.s);\n+                for arg in &bfn.decl.inputs {\n+                    self.hash_ty(&arg);\n+                }\n+                match bfn.decl.output {\n+                    FunctionRetTy::DefaultReturn(_) => {\n+                        ().hash(&mut self.s);\n+                    },\n+                    FunctionRetTy::Return(ref ty) => {\n+                        self.hash_ty(ty);\n+                    },\n+                }\n+                bfn.decl.c_variadic.hash(&mut self.s);\n+            },\n+            TyKind::Tup(ty_list) => {\n+                for ty in ty_list {\n+                    self.hash_ty(ty);\n+                }\n+            },\n+            TyKind::Path(qpath) => match qpath {\n+                QPath::Resolved(ref maybe_ty, ref path) => {\n+                    if let Some(ref ty) = maybe_ty {\n+                        self.hash_ty(ty);\n+                    }\n+                    for segment in &path.segments {\n+                        segment.ident.name.hash(&mut self.s);\n+                    }\n+                },\n+                QPath::TypeRelative(ref ty, ref segment) => {\n+                    self.hash_ty(ty);\n+                    segment.ident.name.hash(&mut self.s);\n+                },\n+            },\n+            TyKind::Def(_, arg_list) => {\n+                for arg in arg_list {\n+                    match arg {\n+                        GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n+                        GenericArg::Type(ref ty) => self.hash_ty(&ty),\n+                        GenericArg::Const(ref ca) => {\n+                            self.hash_expr(&self.cx.tcx.hir().body(ca.value.body).value);\n+                        },\n+                    }\n+                }\n+            },\n+            TyKind::TraitObject(_, lifetime) => {\n+                self.hash_lifetime(lifetime);\n+            },\n+            TyKind::Typeof(anon_const) => {\n+                self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n+            },\n+            TyKind::CVarArgs(lifetime) => self.hash_lifetime(lifetime),\n+            TyKind::Err | TyKind::Infer | TyKind::Never => {},\n+        }\n+    }\n }"}, {"sha": "809590c88bf57093080c196f861dbc8957e776a4", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -13,14 +13,14 @@ declare_clippy_lint! {\n     /// attribute\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// #[clippy::dump]\n     /// extern crate foo;\n     /// ```\n     ///\n     /// prints\n     ///\n-    /// ```\n+    /// ```text\n     /// item `foo`\n     /// visibility inherited from outer item\n     /// extern crate dylib source: \"/path/to/foo.so\"\n@@ -63,8 +63,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DeepCodeInspector {\n                 print_expr(cx, &cx.tcx.hir().body(body_id).value, 1);\n             },\n             hir::ImplItemKind::Method(..) => println!(\"method\"),\n-            hir::ImplItemKind::Type(_) => println!(\"associated type\"),\n-            hir::ImplItemKind::Existential(_) => println!(\"existential type\"),\n+            hir::ImplItemKind::TyAlias(_) => println!(\"associated type\"),\n+            hir::ImplItemKind::OpaqueTy(_) => println!(\"existential type\"),\n         }\n     }\n     // fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx\n@@ -360,10 +360,10 @@ fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item) {\n         hir::ItemKind::Mod(..) => println!(\"module\"),\n         hir::ItemKind::ForeignMod(ref fm) => println!(\"foreign module with abi: {}\", fm.abi),\n         hir::ItemKind::GlobalAsm(ref asm) => println!(\"global asm: {:?}\", asm),\n-        hir::ItemKind::Ty(..) => {\n+        hir::ItemKind::TyAlias(..) => {\n             println!(\"type alias for {:?}\", cx.tcx.type_of(did));\n         },\n-        hir::ItemKind::Existential(..) => {\n+        hir::ItemKind::OpaqueTy(..) => {\n             println!(\"existential type with real type {:?}\", cx.tcx.type_of(did));\n         },\n         hir::ItemKind::Enum(..) => {"}, {"sha": "0dcac1121842b8bc3fdce6c5f60ab0529af7fa39", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -38,7 +38,7 @@ declare_clippy_lint! {\n     /// `declare_lint_pass!`, `impl_lint_pass!`, and `lint_array!` macros.\n     ///\n     /// **Example:**\n-    /// ```rust\n+    /// ```rust,ignore\n     /// declare_lint! { pub LINT_1, ... }\n     /// declare_lint! { pub LINT_2, ... }\n     /// declare_lint! { pub FORGOTTEN_LINT, ... }\n@@ -62,12 +62,12 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// Bad:\n-    /// ```rust\n+    /// ```rust,ignore\n     /// cx.span_lint(LINT_NAME, \"message\");\n     /// ```\n     ///\n     /// Good:\n-    /// ```rust\n+    /// ```rust,ignore\n     /// utils::span_lint(cx, LINT_NAME, \"message\");\n     /// ```\n     pub COMPILER_LINT_FUNCTIONS,\n@@ -85,17 +85,17 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// Bad:\n-    /// ```rust\n+    /// ```rust,ignore\n     /// expr.span.ctxt().outer().expn_info()\n     /// ```\n     ///\n     /// Good:\n-    /// ```rust\n+    /// ```rust,ignore\n     /// expr.span.ctxt().outer_expn_info()\n     /// ```\n-    pub OUTER_EXPN_INFO,\n+    pub OUTER_EXPN_EXPN_INFO,\n     internal,\n-    \"using `cx.outer().expn_info()` instead of `cx.outer_expn_info()`\"\n+    \"using `cx.outer_expn().expn_info()` instead of `cx.outer_expn_info()`\"\n }\n \n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n@@ -280,15 +280,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n \n pub struct OuterExpnInfoPass;\n \n-impl_lint_pass!(OuterExpnInfoPass => [OUTER_EXPN_INFO]);\n+impl_lint_pass!(OuterExpnInfoPass => [OUTER_EXPN_EXPN_INFO]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnInfoPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         let (method_names, arg_lists) = method_calls(expr, 2);\n         let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n         if_chain! {\n-            if let [\"expn_info\", \"outer\"] = method_names.as_slice();\n+            if let [\"expn_info\", \"outer_expn\"] = method_names.as_slice();\n             let args = arg_lists[1];\n             if args.len() == 1;\n             let self_arg = &args[0];\n@@ -297,9 +297,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnInfoPass {\n             then {\n                 span_lint_and_sugg(\n                     cx,\n-                    OUTER_EXPN_INFO,\n+                    OUTER_EXPN_EXPN_INFO,\n                     expr.span.trim_start(self_arg.span).unwrap_or(expr.span),\n-                    \"usage of `outer().expn_info()`\",\n+                    \"usage of `outer_expn().expn_info()`\",\n                     \"try\",\n                     \".outer_expn_info()\".to_string(),\n                     Applicability::MachineApplicable,"}, {"sha": "9e45c453ae9f89716bba7255684f73be9b614059", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -43,7 +43,7 @@ use rustc_errors::Applicability;\n use smallvec::SmallVec;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n-use syntax::ext::hygiene::ExpnFormat;\n+use syntax::ext::hygiene::ExpnKind;\n use syntax::source_map::{Span, DUMMY_SP};\n use syntax::symbol::{kw, Symbol};\n \n@@ -100,7 +100,7 @@ pub fn in_macro_or_desugar(span: Span) -> bool {\n /// Returns `true` if this `expn_info` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n     if let Some(info) = span.ctxt().outer_expn_info() {\n-        if let ExpnFormat::CompilerDesugaring(..) = info.format {\n+        if let ExpnKind::Desugaring(..) = info.kind {\n             false\n         } else {\n             true\n@@ -686,7 +686,7 @@ pub fn is_adjusted(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n /// See also `is_direct_expn_of`.\n pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n     loop {\n-        let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.format.name(), ei.call_site));\n+        let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.kind.descr(), ei.call_site));\n \n         match span_name_span {\n             Some((mac_name, new_span)) if mac_name.as_str() == name => return Some(new_span),\n@@ -706,7 +706,7 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n /// `bar!` by\n /// `is_direct_expn_of`.\n pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n-    let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.format.name(), ei.call_site));\n+    let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.kind.descr(), ei.call_site));\n \n     match span_name_span {\n         Some((mac_name, new_span)) if mac_name.as_str() == name => Some(new_span),"}, {"sha": "62b22afff95be2260f2ef89ea98e9168ff68e5b2", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -37,7 +37,6 @@ pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entr\n pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n pub const INDEX: [&str; 3] = [\"core\", \"ops\", \"Index\"];\n pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n-pub const INIT: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"init\"];\n pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n@@ -50,8 +49,6 @@ pub const LINT_PASS: [&str; 3] = [\"rustc\", \"lint\", \"LintPass\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n pub const MEM_REPLACE: [&str; 3] = [\"core\", \"mem\", \"replace\"];\n-pub const MEM_UNINIT: [&str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n-pub const MEM_ZEROED: [&str; 3] = [\"core\", \"mem\", \"zeroed\"];\n pub const MUTEX: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n@@ -109,7 +106,6 @@ pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_stri\n pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_FROM_ERROR: [&str; 4] = [\"std\", \"ops\", \"Try\", \"from_error\"];\n pub const TRY_INTO_RESULT: [&str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n-pub const UNINIT: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"uninit\"];\n pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];"}, {"sha": "9e26b3e5b9c1317bf94df86b90d8be34345fa603", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -77,6 +77,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # let foo = \"bar\";\n     /// println!(\"{:?}\", foo);\n     /// ```\n     pub USE_DEBUG,\n@@ -364,7 +365,9 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (O\n             align: AlignUnknown,\n             flags: 0,\n             precision: CountImplied,\n+            precision_span: None,\n             width: CountImplied,\n+            width_span: None,\n             ty: \"\",\n         };\n         if !parser.eat(&token::Comma) {"}, {"sha": "1c4c54f2626739f50fa2af16765956f68c2bbd78", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -15,7 +15,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// 0.0f32 / 0.0\n+    /// 0.0f32 / 0.0;\n     /// ```\n     pub ZERO_DIVIDED_BY_ZERO,\n     complexity,"}, {"sha": "ef09c4230449d8c8d87d26594ae0481641ce2f10", "filename": "doc/adding_lints.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -345,16 +345,18 @@ list][lint_list].\n \n ### Running rustfmt\n \n-[Rustfmt](https://github.com/rust-lang/rustfmt) is a tool for formatting Rust code according\n-to style guidelines. Your code has to be formatted by `rustfmt` before a PR can be merged.\n+[Rustfmt](https://github.com/rust-lang/rustfmt) is a tool for formatting Rust\n+code according to style guidelines. Your code has to be formatted by `rustfmt`\n+before a PR can be merged. Clippy uses nightly `rustfmt` in the CI.\n \n It can be installed via `rustup`:\n \n ```bash\n-rustup component add rustfmt\n+rustup component add rustfmt --toolchain=nightly\n ```\n \n-Use `cargo fmt --all` to format the whole codebase.\n+Use `./util/dev fmt` to format the whole codebase. Make sure that `rustfmt` is\n+installed for the nightly toolchain.\n \n ### Debugging\n \n@@ -366,12 +368,14 @@ output in the `stdout` part.\n \n Before submitting your PR make sure you followed all of the basic requirements:\n \n+<!-- Sync this with `.github/PULL_REQUEST_TEMPLATE` -->\n+\n - [ ] Followed [lint naming conventions][lint_naming]\n - [ ] Added passing UI tests (including committed `.stderr` file)\n - [ ] `cargo test` passes locally\n-- [ ] Executed `util/dev update_lints`\n+- [ ] Executed `./util/dev update_lints`\n - [ ] Added lint documentation\n-- [ ] Run `cargo fmt`\n+- [ ] Run `./util/dev fmt`\n \n ### Cheatsheet\n "}, {"sha": "ddb40dace753f31a2d387ff2ec72b3d0e0e56714", "filename": "mini-macro/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/mini-macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/mini-macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mini-macro%2Fsrc%2Flib.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -2,13 +2,17 @@\n #![deny(rust_2018_idioms)]\n extern crate proc_macro;\n \n-use proc_macro::{TokenStream, quote};\n+use proc_macro::{quote, TokenStream};\n \n #[proc_macro_derive(ClippyMiniMacroTest)]\n pub fn mini_macro(_: TokenStream) -> TokenStream {\n     quote!(\n-        #[allow(unused)] fn needless_take_by_value(s: String) { println!(\"{}\", s.len()); }\n-        #[allow(unused)] fn needless_loop(items: &[u8]) {\n+        #[allow(unused)]\n+        fn needless_take_by_value(s: String) {\n+            println!(\"{}\", s.len());\n+        }\n+        #[allow(unused)]\n+        fn needless_loop(items: &[u8]) {\n             for i in 0..items.len() {\n                 println!(\"{}\", items[i]);\n             }"}, {"sha": "92b710614ecbe64f7b1d5ae1bca5e9e274a70a1b", "filename": "rustc_tools_util/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/rustc_tools_util%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/rustc_tools_util%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tools_util%2Fsrc%2Flib.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -154,5 +154,4 @@ mod test {\n             \"VersionInfo { crate_name: \\\"rustc_tools_util\\\", major: 0, minor: 2, patch: 0 }\"\n         );\n     }\n-\n }"}, {"sha": "f1241e74b0a3d40e4bfb64912b27fec9711efb2f", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -2,5 +2,5 @@ max_width = 120\n comment_width = 100\n match_block_trailing_comma = true\n wrap_comments = true\n-\n+edition = \"2018\"\n error_on_line_overflow = true"}, {"sha": "cec88be7eb1b7c09bf56e6c4ff356440f7bb2587", "filename": "src/driver.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,3 +1,4 @@\n+#![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![feature(rustc_private)]\n \n // FIXME: switch to something more ergonomic here, once available.\n@@ -12,7 +13,7 @@ extern crate rustc_plugin;\n use rustc_interface::interface;\n use rustc_tools_util::*;\n \n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::process::{exit, Command};\n \n mod lintlist;\n@@ -62,7 +63,7 @@ fn test_arg_value() {\n struct ClippyCallbacks;\n \n impl rustc_driver::Callbacks for ClippyCallbacks {\n-    fn after_parsing(&mut self, compiler: &interface::Compiler) -> bool {\n+    fn after_parsing(&mut self, compiler: &interface::Compiler) -> rustc_driver::Compilation {\n         let sess = compiler.session();\n         let mut registry = rustc_plugin::registry::Registry::new(\n             sess,\n@@ -106,7 +107,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n         sess.plugin_attributes.borrow_mut().extend(attributes);\n \n         // Continue execution\n-        true\n+        rustc_driver::Compilation::Continue\n     }\n }\n \n@@ -270,12 +271,19 @@ pub fn main() {\n             let sys_root_arg = arg_value(&orig_args, \"--sysroot\", |_| true);\n             let have_sys_root_arg = sys_root_arg.is_some();\n             let sys_root = sys_root_arg\n-                .map(std::string::ToString::to_string)\n-                .or_else(|| std::env::var(\"SYSROOT\").ok())\n+                .map(PathBuf::from)\n+                .or_else(|| std::env::var(\"SYSROOT\").ok().map(PathBuf::from))\n                 .or_else(|| {\n                     let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n                     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-                    home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n+                    home.and_then(|home| {\n+                        toolchain.map(|toolchain| {\n+                            let mut path = PathBuf::from(home);\n+                            path.push(\"toolchains\");\n+                            path.push(toolchain);\n+                            path\n+                        })\n+                    })\n                 })\n                 .or_else(|| {\n                     Command::new(\"rustc\")\n@@ -284,9 +292,10 @@ pub fn main() {\n                         .output()\n                         .ok()\n                         .and_then(|out| String::from_utf8(out.stdout).ok())\n-                        .map(|s| s.trim().to_owned())\n+                        .map(|s| PathBuf::from(s.trim()))\n                 })\n-                .or_else(|| option_env!(\"SYSROOT\").map(String::from))\n+                .or_else(|| option_env!(\"SYSROOT\").map(PathBuf::from))\n+                .map(|pb| pb.to_string_lossy().to_string())\n                 .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n             // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument."}, {"sha": "23cad950a9574de4c868addf9180dedd1d26951c", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 306] = [\n+pub const ALL_LINTS: [Lint; 309] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -735,6 +735,20 @@ pub const ALL_LINTS: [Lint; 306] = [\n         deprecation: None,\n         module: \"infinite_iter\",\n     },\n+    Lint {\n+        name: \"inherent_to_string\",\n+        group: \"style\",\n+        desc: \"type implements inherent method `to_string()`, but should instead implement the `Display` trait\",\n+        deprecation: None,\n+        module: \"inherent_to_string\",\n+    },\n+    Lint {\n+        name: \"inherent_to_string_shadow_display\",\n+        group: \"correctness\",\n+        desc: \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait \",\n+        deprecation: None,\n+        module: \"inherent_to_string\",\n+    },\n     Lint {\n         name: \"inline_always\",\n         group: \"pedantic\",\n@@ -784,13 +798,6 @@ pub const ALL_LINTS: [Lint; 306] = [\n         deprecation: None,\n         module: \"methods\",\n     },\n-    Lint {\n-        name: \"invalid_ref\",\n-        group: \"correctness\",\n-        desc: \"creation of invalid reference\",\n-        deprecation: None,\n-        module: \"invalid_ref\",\n-    },\n     Lint {\n         name: \"invalid_regex\",\n         group: \"correctness\",\n@@ -910,6 +917,13 @@ pub const ALL_LINTS: [Lint; 306] = [\n         deprecation: None,\n         module: \"booleans\",\n     },\n+    Lint {\n+        name: \"main_recursion\",\n+        group: \"style\",\n+        desc: \"recursion using the entrypoint\",\n+        deprecation: None,\n+        module: \"main_recursion\",\n+    },\n     Lint {\n         name: \"manual_memcpy\",\n         group: \"perf\",\n@@ -1374,7 +1388,7 @@ pub const ALL_LINTS: [Lint; 306] = [\n     },\n     Lint {\n         name: \"panicking_unwrap\",\n-        group: \"nursery\",\n+        group: \"correctness\",\n         desc: \"checks for calls of unwrap[_err]() that will always fail\",\n         deprecation: None,\n         module: \"unwrap\",\n@@ -1841,6 +1855,13 @@ pub const ALL_LINTS: [Lint; 306] = [\n         deprecation: None,\n         module: \"types\",\n     },\n+    Lint {\n+        name: \"type_repetition_in_bounds\",\n+        group: \"complexity\",\n+        desc: \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\",\n+        deprecation: None,\n+        module: \"trait_bounds\",\n+    },\n     Lint {\n         name: \"unicode_not_nfc\",\n         group: \"pedantic\",\n@@ -1913,7 +1934,7 @@ pub const ALL_LINTS: [Lint; 306] = [\n     },\n     Lint {\n         name: \"unnecessary_unwrap\",\n-        group: \"nursery\",\n+        group: \"complexity\",\n         desc: \"checks for calls of unwrap[_err]() that cannot fail\",\n         deprecation: None,\n         module: \"unwrap\","}, {"sha": "8f9afb95337de32f5bce1f6979d02d68c4eead50", "filename": "src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,3 +1,5 @@\n+#![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n+\n use rustc_tools_util::*;\n \n const CARGO_CLIPPY_HELP: &str = r#\"Checks a package to catch common mistakes and improve your Rust code."}, {"sha": "1f03ba3950abefc54fa62778e7d01035eb8af222", "filename": "tests/dogfood.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,6 +1,6 @@\n #[test]\n fn dogfood() {\n-    if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n+    if option_env!(\"RUSTC_TEST_SUITE\").is_some() || cfg!(windows) {\n         return;\n     }\n     let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n@@ -30,7 +30,7 @@ fn dogfood() {\n \n #[test]\n fn dogfood_tests() {\n-    if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n+    if option_env!(\"RUSTC_TEST_SUITE\").is_some() || cfg!(windows) {\n         return;\n     }\n     let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));"}, {"sha": "bc37be84b433e1a3081c2012ef9a938e08e8de44", "filename": "tests/fmt.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffmt.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,36 @@\n+use std::process::Command;\n+\n+#[test]\n+fn fmt() {\n+    if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n+        return;\n+    }\n+\n+    // Skip this test if rustup nightly is unavailable\n+    let rustup_output = Command::new(\"rustup\")\n+        .args(&[\"component\", \"list\", \"--toolchain\", \"nightly\"])\n+        .output()\n+        .unwrap();\n+    assert!(rustup_output.status.success());\n+    let component_output = String::from_utf8_lossy(&rustup_output.stdout);\n+    if !component_output.contains(\"rustfmt\") {\n+        return;\n+    }\n+\n+    let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let dev_dir = root_dir.join(\"clippy_dev\");\n+    let output = Command::new(\"cargo\")\n+        .current_dir(dev_dir)\n+        .args(&[\"+nightly\", \"run\", \"--\", \"fmt\", \"--check\"])\n+        .output()\n+        .unwrap();\n+\n+    println!(\"status: {}\", output.status);\n+    println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+    println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+    assert!(\n+        output.status.success(),\n+        \"Formatting check failed. Run `./util/dev fmt` to update formatting.\"\n+    );\n+}"}, {"sha": "c22c7eb75b46174bcf42b4be6fbbee78eb4d20c6", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -141,7 +141,7 @@ error: <-comparison of unit values detected. This will always be false\n LL |     () < {};\n    |     ^^^^^^^\n    |\n-   = note: #[deny(clippy::unit_cmp)] on by default\n+   = note: `#[deny(clippy::unit_cmp)]` on by default\n \n error: aborting due to 18 previous errors\n "}, {"sha": "1eb77c531835a165f898ba04d35ab50b64ae05bb", "filename": "tests/ui/auxiliary/implicit_hasher_macros.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fauxiliary%2Fimplicit_hasher_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fauxiliary%2Fimplicit_hasher_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fimplicit_hasher_macros.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,6 @@\n+#[macro_export]\n+macro_rules! implicit_hasher_fn {\n+    () => {\n+        pub fn f(input: &HashMap<u32, u32>) {}\n+    };\n+}"}, {"sha": "dc5ad6dfbdff99b390755739f763c1eb3f0cc5a9", "filename": "tests/ui/bit_masks.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -12,7 +12,7 @@ error: this operation will always return zero. This is likely not the intended o\n LL |     x & 0 == 0;\n    |     ^^^^^\n    |\n-   = note: #[deny(clippy::erasing_op)] on by default\n+   = note: `#[deny(clippy::erasing_op)]` on by default\n \n error: incompatible bit mask: `_ & 2` can never be equal to `1`\n   --> $DIR/bit_masks.rs:17:5"}, {"sha": "79705071999249b6570967f82de4281633d41172", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -42,32 +42,4 @@ fn main() {\n     i32::max_value() as u32;\n     i64::max_value() as u64;\n     i128::max_value() as u128;\n-    // Extra checks for *size\n-    // Test cast_unnecessary\n-    1i32 as i32;\n-    1f32 as f32;\n-    false as bool;\n-    &1i32 as &i32;\n-    // macro version\n-    macro_rules! foo {\n-        ($a:ident, $b:ident) => {\n-            pub fn $a() -> $b {\n-                1 as $b\n-            }\n-        };\n-    }\n-    foo!(a, i32);\n-    foo!(b, f32);\n-    foo!(c, f64);\n-\n-    // casting integer literal to float is unnecessary\n-    100 as f32;\n-    100 as f64;\n-    100_i32 as f64;\n-    // Should not trigger\n-    #[rustfmt::skip]\n-    let v = vec!(1);\n-    &v as &[i32];\n-    1.0 as f64;\n-    1 as u64;\n }"}, {"sha": "0ebd3a1f184dcade930e41e73263903dc2e64ace", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -138,43 +138,5 @@ error: casting isize to usize may lose the sign of the value\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n-error: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:47:5\n-   |\n-LL |     1i32 as i32;\n-   |     ^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n-\n-error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:48:5\n-   |\n-LL |     1f32 as f32;\n-   |     ^^^^^^^^^^^\n-\n-error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:49:5\n-   |\n-LL |     false as bool;\n-   |     ^^^^^^^^^^^^^\n-\n-error: casting integer literal to f32 is unnecessary\n-  --> $DIR/cast.rs:64:5\n-   |\n-LL |     100 as f32;\n-   |     ^^^^^^^^^^ help: try: `100_f32`\n-\n-error: casting integer literal to f64 is unnecessary\n-  --> $DIR/cast.rs:65:5\n-   |\n-LL |     100 as f64;\n-   |     ^^^^^^^^^^ help: try: `100_f64`\n-\n-error: casting integer literal to f64 is unnecessary\n-  --> $DIR/cast.rs:66:5\n-   |\n-LL |     100_i32 as f64;\n-   |     ^^^^^^^^^^^^^^ help: try: `100_f64`\n-\n-error: aborting due to 28 previous errors\n+error: aborting due to 22 previous errors\n "}, {"sha": "4c08935639f1f3a5ae5fd847de7c3398ae71b31e", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -22,4 +22,6 @@ fn main() {\n     // For c_void, we should trust the user. See #2677\n     (&1u32 as *const u32 as *const std::os::raw::c_void) as *const u32;\n     (&1u32 as *const u32 as *const libc::c_void) as *const u32;\n+    // For ZST, we should trust the user. See #4256\n+    (&1u32 as *const u32 as *const ()) as *const u32;\n }"}, {"sha": "79219f86155a4458fe95c46dbc9b699b0738bca1", "filename": "tests/ui/cast_alignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,12 +1,12 @@\n-error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`)\n+error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n   --> $DIR/cast_alignment.rs:12:5\n    |\n LL |     (&1u8 as *const u8) as *const u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-ptr-alignment` implied by `-D warnings`\n \n-error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`)\n+error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n   --> $DIR/cast_alignment.rs:13:5\n    |\n LL |     (&mut 1u8 as *mut u8) as *mut u16;"}, {"sha": "fbeee1b572a6c818cbd35a450b1f110b75f920fe", "filename": "tests/ui/checked_unwrap/complex_conditionals.rs", "status": "renamed", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,44 +1,6 @@\n #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n #![allow(clippy::if_same_then_else)]\n \n-fn main() {\n-    let x = Some(());\n-    if x.is_some() {\n-        x.unwrap(); // unnecessary\n-    } else {\n-        x.unwrap(); // will panic\n-    }\n-    if x.is_none() {\n-        x.unwrap(); // will panic\n-    } else {\n-        x.unwrap(); // unnecessary\n-    }\n-    let mut x: Result<(), ()> = Ok(());\n-    if x.is_ok() {\n-        x.unwrap(); // unnecessary\n-        x.unwrap_err(); // will panic\n-    } else {\n-        x.unwrap(); // will panic\n-        x.unwrap_err(); // unnecessary\n-    }\n-    if x.is_err() {\n-        x.unwrap(); // will panic\n-        x.unwrap_err(); // unnecessary\n-    } else {\n-        x.unwrap(); // unnecessary\n-        x.unwrap_err(); // will panic\n-    }\n-    if x.is_ok() {\n-        x = Err(());\n-        x.unwrap(); // not unnecessary because of mutation of x\n-                    // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n-    } else {\n-        x = Ok(());\n-        x.unwrap_err(); // not unnecessary because of mutation of x\n-                        // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n-    }\n-}\n-\n fn test_complex_conditions() {\n     let x: Result<(), ()> = Ok(());\n     let y: Result<(), ()> = Ok(());\n@@ -99,3 +61,5 @@ fn test_nested() {\n         }\n     }\n }\n+\n+fn main() {}", "previous_filename": "tests/ui/checked_unwrap.rs"}, {"sha": "a2207314aeec5605e17d2a4d699bd22223acde89", "filename": "tests/ui/checked_unwrap/complex_conditionals.stderr", "status": "renamed", "additions": 31, "deletions": 135, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,138 +1,34 @@\n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:7:9\n+  --> $DIR/complex_conditionals.rs:8:9\n    |\n-LL |     if x.is_some() {\n-   |        ----------- the check is happening here\n+LL |     if x.is_ok() && y.is_err() {\n+   |        --------- the check is happening here\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/checked_unwrap.rs:1:35\n+  --> $DIR/complex_conditionals.rs:1:35\n    |\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:9:9\n-   |\n-LL |     if x.is_some() {\n-   |        ----------- because of this check\n-...\n-LL |         x.unwrap(); // will panic\n-   |         ^^^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/checked_unwrap.rs:1:9\n-   |\n-LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:12:9\n-   |\n-LL |     if x.is_none() {\n-   |        ----------- because of this check\n-LL |         x.unwrap(); // will panic\n-   |         ^^^^^^^^^^\n-\n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:14:9\n-   |\n-LL |     if x.is_none() {\n-   |        ----------- the check is happening here\n-...\n-LL |         x.unwrap(); // unnecessary\n-   |         ^^^^^^^^^^\n-\n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:18:9\n-   |\n-LL |     if x.is_ok() {\n-   |        --------- the check is happening here\n-LL |         x.unwrap(); // unnecessary\n-   |         ^^^^^^^^^^\n-\n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:19:9\n+  --> $DIR/complex_conditionals.rs:9:9\n    |\n-LL |     if x.is_ok() {\n-   |        --------- because of this check\n-LL |         x.unwrap(); // unnecessary\n-LL |         x.unwrap_err(); // will panic\n-   |         ^^^^^^^^^^^^^^\n-\n-error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:21:9\n-   |\n-LL |     if x.is_ok() {\n+LL |     if x.is_ok() && y.is_err() {\n    |        --------- because of this check\n-...\n-LL |         x.unwrap(); // will panic\n-   |         ^^^^^^^^^^\n-\n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:22:9\n-   |\n-LL |     if x.is_ok() {\n-   |        --------- the check is happening here\n-...\n-LL |         x.unwrap_err(); // unnecessary\n-   |         ^^^^^^^^^^^^^^\n-\n-error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:25:9\n-   |\n-LL |     if x.is_err() {\n-   |        ---------- because of this check\n-LL |         x.unwrap(); // will panic\n-   |         ^^^^^^^^^^\n-\n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:26:9\n-   |\n-LL |     if x.is_err() {\n-   |        ---------- the check is happening here\n-LL |         x.unwrap(); // will panic\n-LL |         x.unwrap_err(); // unnecessary\n-   |         ^^^^^^^^^^^^^^\n-\n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:28:9\n-   |\n-LL |     if x.is_err() {\n-   |        ---------- the check is happening here\n-...\n LL |         x.unwrap(); // unnecessary\n-   |         ^^^^^^^^^^\n-\n-error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:29:9\n-   |\n-LL |     if x.is_err() {\n-   |        ---------- because of this check\n-...\n LL |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n-\n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:46:9\n    |\n-LL |     if x.is_ok() && y.is_err() {\n-   |        --------- the check is happening here\n-LL |         x.unwrap(); // unnecessary\n-   |         ^^^^^^^^^^\n-\n-error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:47:9\n+note: lint level defined here\n+  --> $DIR/complex_conditionals.rs:1:9\n    |\n-LL |     if x.is_ok() && y.is_err() {\n-   |        --------- because of this check\n-LL |         x.unwrap(); // unnecessary\n-LL |         x.unwrap_err(); // will panic\n-   |         ^^^^^^^^^^^^^^\n+LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:48:9\n+  --> $DIR/complex_conditionals.rs:10:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n    |                     ---------- because of this check\n@@ -141,7 +37,7 @@ LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:49:9\n+  --> $DIR/complex_conditionals.rs:11:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n    |                     ---------- the check is happening here\n@@ -150,7 +46,7 @@ LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:63:9\n+  --> $DIR/complex_conditionals.rs:25:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n    |        --------- because of this check\n@@ -159,7 +55,7 @@ LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:64:9\n+  --> $DIR/complex_conditionals.rs:26:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n    |        --------- the check is happening here\n@@ -168,7 +64,7 @@ LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:65:9\n+  --> $DIR/complex_conditionals.rs:27:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n    |                     --------- because of this check\n@@ -177,7 +73,7 @@ LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:66:9\n+  --> $DIR/complex_conditionals.rs:28:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n    |                     --------- the check is happening here\n@@ -186,15 +82,15 @@ LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:70:9\n+  --> $DIR/complex_conditionals.rs:32:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |        --------- the check is happening here\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:71:9\n+  --> $DIR/complex_conditionals.rs:33:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |        --------- because of this check\n@@ -203,7 +99,7 @@ LL |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:72:9\n+  --> $DIR/complex_conditionals.rs:34:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |                       --------- because of this check\n@@ -212,7 +108,7 @@ LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:73:9\n+  --> $DIR/complex_conditionals.rs:35:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |                       --------- the check is happening here\n@@ -221,7 +117,7 @@ LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:74:9\n+  --> $DIR/complex_conditionals.rs:36:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |                                    ---------- the check is happening here\n@@ -230,7 +126,7 @@ LL |         z.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:75:9\n+  --> $DIR/complex_conditionals.rs:37:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |                                    ---------- because of this check\n@@ -239,7 +135,7 @@ LL |         z.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:83:9\n+  --> $DIR/complex_conditionals.rs:45:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |        --------- because of this check\n@@ -248,7 +144,7 @@ LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:84:9\n+  --> $DIR/complex_conditionals.rs:46:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |        --------- the check is happening here\n@@ -257,7 +153,7 @@ LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:85:9\n+  --> $DIR/complex_conditionals.rs:47:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |                       --------- the check is happening here\n@@ -266,7 +162,7 @@ LL |         y.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/checked_unwrap.rs:86:9\n+  --> $DIR/complex_conditionals.rs:48:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |                       --------- because of this check\n@@ -275,7 +171,7 @@ LL |         y.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:87:9\n+  --> $DIR/complex_conditionals.rs:49:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |                                    ---------- because of this check\n@@ -284,7 +180,7 @@ LL |         z.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:88:9\n+  --> $DIR/complex_conditionals.rs:50:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n    |                                    ---------- the check is happening here\n@@ -293,21 +189,21 @@ LL |         z.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/checked_unwrap.rs:96:13\n+  --> $DIR/complex_conditionals.rs:58:13\n    |\n LL |         if x.is_some() {\n    |            ----------- the check is happening here\n LL |             x.unwrap(); // unnecessary\n    |             ^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/checked_unwrap.rs:98:13\n+  --> $DIR/complex_conditionals.rs:60:13\n    |\n LL |         if x.is_some() {\n    |            ----------- because of this check\n ...\n LL |             x.unwrap(); // will panic\n    |             ^^^^^^^^^^\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 22 previous errors\n ", "previous_filename": "tests/ui/checked_unwrap.stderr"}, {"sha": "c080ae82697a7aa3bdec15b269fb6af9e9c40bd7", "filename": "tests/ui/checked_unwrap/simple_conditionals.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,42 @@\n+#![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n+#![allow(clippy::if_same_then_else)]\n+\n+fn main() {\n+    let x = Some(());\n+    if x.is_some() {\n+        x.unwrap(); // unnecessary\n+    } else {\n+        x.unwrap(); // will panic\n+    }\n+    if x.is_none() {\n+        x.unwrap(); // will panic\n+    } else {\n+        x.unwrap(); // unnecessary\n+    }\n+    let mut x: Result<(), ()> = Ok(());\n+    if x.is_ok() {\n+        x.unwrap(); // unnecessary\n+        x.unwrap_err(); // will panic\n+    } else {\n+        x.unwrap(); // will panic\n+        x.unwrap_err(); // unnecessary\n+    }\n+    if x.is_err() {\n+        x.unwrap(); // will panic\n+        x.unwrap_err(); // unnecessary\n+    } else {\n+        x.unwrap(); // unnecessary\n+        x.unwrap_err(); // will panic\n+    }\n+    if x.is_ok() {\n+        x = Err(());\n+        x.unwrap(); // not unnecessary because of mutation of x\n+                    // it will always panic but the lint is not smart enough to see this (it only\n+                    // checks if conditions).\n+    } else {\n+        x = Ok(());\n+        x.unwrap_err(); // not unnecessary because of mutation of x\n+                        // it will always panic but the lint is not smart enough to see this (it\n+                        // only checks if conditions).\n+    }\n+}"}, {"sha": "58a38cd8209ccaf885386d029faeee502a41d36e", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,118 @@\n+error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+  --> $DIR/simple_conditionals.rs:7:9\n+   |\n+LL |     if x.is_some() {\n+   |        ----------- the check is happening here\n+LL |         x.unwrap(); // unnecessary\n+   |         ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/simple_conditionals.rs:1:35\n+   |\n+LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/simple_conditionals.rs:9:9\n+   |\n+LL |     if x.is_some() {\n+   |        ----------- because of this check\n+...\n+LL |         x.unwrap(); // will panic\n+   |         ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/simple_conditionals.rs:1:9\n+   |\n+LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/simple_conditionals.rs:12:9\n+   |\n+LL |     if x.is_none() {\n+   |        ----------- because of this check\n+LL |         x.unwrap(); // will panic\n+   |         ^^^^^^^^^^\n+\n+error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+  --> $DIR/simple_conditionals.rs:14:9\n+   |\n+LL |     if x.is_none() {\n+   |        ----------- the check is happening here\n+...\n+LL |         x.unwrap(); // unnecessary\n+   |         ^^^^^^^^^^\n+\n+error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+  --> $DIR/simple_conditionals.rs:18:9\n+   |\n+LL |     if x.is_ok() {\n+   |        --------- the check is happening here\n+LL |         x.unwrap(); // unnecessary\n+   |         ^^^^^^^^^^\n+\n+error: This call to `unwrap_err()` will always panic.\n+  --> $DIR/simple_conditionals.rs:19:9\n+   |\n+LL |     if x.is_ok() {\n+   |        --------- because of this check\n+LL |         x.unwrap(); // unnecessary\n+LL |         x.unwrap_err(); // will panic\n+   |         ^^^^^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/simple_conditionals.rs:21:9\n+   |\n+LL |     if x.is_ok() {\n+   |        --------- because of this check\n+...\n+LL |         x.unwrap(); // will panic\n+   |         ^^^^^^^^^^\n+\n+error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+  --> $DIR/simple_conditionals.rs:22:9\n+   |\n+LL |     if x.is_ok() {\n+   |        --------- the check is happening here\n+...\n+LL |         x.unwrap_err(); // unnecessary\n+   |         ^^^^^^^^^^^^^^\n+\n+error: This call to `unwrap()` will always panic.\n+  --> $DIR/simple_conditionals.rs:25:9\n+   |\n+LL |     if x.is_err() {\n+   |        ---------- because of this check\n+LL |         x.unwrap(); // will panic\n+   |         ^^^^^^^^^^\n+\n+error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+  --> $DIR/simple_conditionals.rs:26:9\n+   |\n+LL |     if x.is_err() {\n+   |        ---------- the check is happening here\n+LL |         x.unwrap(); // will panic\n+LL |         x.unwrap_err(); // unnecessary\n+   |         ^^^^^^^^^^^^^^\n+\n+error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+  --> $DIR/simple_conditionals.rs:28:9\n+   |\n+LL |     if x.is_err() {\n+   |        ---------- the check is happening here\n+...\n+LL |         x.unwrap(); // unnecessary\n+   |         ^^^^^^^^^^\n+\n+error: This call to `unwrap_err()` will always panic.\n+  --> $DIR/simple_conditionals.rs:29:9\n+   |\n+LL |     if x.is_err() {\n+   |        ---------- because of this check\n+...\n+LL |         x.unwrap_err(); // will panic\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "a1f1c586eb0bfafaeb7a6e530cc5819e13ef7c0e", "filename": "tests/ui/cognitive_complexity.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -313,7 +313,7 @@ fn mcarton_sees_all() {\n }\n \n #[clippy::cognitive_complexity = \"0\"]\n-fn try() -> Result<i32, &'static str> {\n+fn try_() -> Result<i32, &'static str> {\n     match 5 {\n         5 => Ok(5),\n         _ => return Err(\"bla\"),\n@@ -322,14 +322,14 @@ fn try() -> Result<i32, &'static str> {\n \n #[clippy::cognitive_complexity = \"0\"]\n fn try_again() -> Result<i32, &'static str> {\n-    let _ = try!(Ok(42));\n-    let _ = try!(Ok(43));\n-    let _ = try!(Ok(44));\n-    let _ = try!(Ok(45));\n-    let _ = try!(Ok(46));\n-    let _ = try!(Ok(47));\n-    let _ = try!(Ok(48));\n-    let _ = try!(Ok(49));\n+    let _ = r#try!(Ok(42));\n+    let _ = r#try!(Ok(43));\n+    let _ = r#try!(Ok(44));\n+    let _ = r#try!(Ok(45));\n+    let _ = r#try!(Ok(46));\n+    let _ = r#try!(Ok(47));\n+    let _ = r#try!(Ok(48));\n+    let _ = r#try!(Ok(49));\n     match 5 {\n         5 => Ok(5),\n         _ => return Err(\"bla\"),"}, {"sha": "e1c5863f494283b07b2ca2bfdcd3f6c6f28e3068", "filename": "tests/ui/cognitive_complexity.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcognitive_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcognitive_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcognitive_complexity.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -216,7 +216,7 @@ LL | | }\n error: the function has a cognitive complexity of 1\n   --> $DIR/cognitive_complexity.rs:316:1\n    |\n-LL | / fn try() -> Result<i32, &'static str> {\n+LL | / fn try_() -> Result<i32, &'static str> {\n LL | |     match 5 {\n LL | |         5 => Ok(5),\n LL | |         _ => return Err(\"bla\"),\n@@ -230,9 +230,9 @@ error: the function has a cognitive complexity of 1\n   --> $DIR/cognitive_complexity.rs:324:1\n    |\n LL | / fn try_again() -> Result<i32, &'static str> {\n-LL | |     let _ = try!(Ok(42));\n-LL | |     let _ = try!(Ok(43));\n-LL | |     let _ = try!(Ok(44));\n+LL | |     let _ = r#try!(Ok(42));\n+LL | |     let _ = r#try!(Ok(43));\n+LL | |     let _ = r#try!(Ok(44));\n ...  |\n LL | |     }\n LL | | }"}, {"sha": "995787c5336688d9283fc8e6ca5ff806faf54133", "filename": "tests/ui/crate_level_checks/entrypoint_recursion.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,12 @@\n+// ignore-macos\n+// ignore-windows\n+\n+#![feature(main)]\n+\n+#[warn(clippy::main_recursion)]\n+#[allow(unconditional_recursion)]\n+#[main]\n+fn a() {\n+    println!(\"Hello, World!\");\n+    a();\n+}"}, {"sha": "f52fc949f6c3e7a4d7e933518969079efac7711d", "filename": "tests/ui/crate_level_checks/entrypoint_recursion.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fentrypoint_recursion.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,11 @@\n+error: recursing into entrypoint `a`\n+  --> $DIR/entrypoint_recursion.rs:11:5\n+   |\n+LL |     a();\n+   |     ^\n+   |\n+   = note: `-D clippy::main-recursion` implied by `-D warnings`\n+   = help: consider using another function for this recursion\n+\n+error: aborting due to previous error\n+"}, {"sha": "25b1417be9766a312878f5f9c91a7fd365ea2811", "filename": "tests/ui/crate_level_checks/no_std_main_recursion.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,33 @@\n+// ignore-macos\n+// ignore-windows\n+\n+#![feature(lang_items, link_args, start, libc)]\n+#![link_args = \"-nostartfiles\"]\n+#![no_std]\n+\n+use core::panic::PanicInfo;\n+use core::sync::atomic::{AtomicUsize, Ordering};\n+\n+static N: AtomicUsize = AtomicUsize::new(0);\n+\n+#[warn(clippy::main_recursion)]\n+#[start]\n+fn main(argc: isize, argv: *const *const u8) -> isize {\n+    let x = N.load(Ordering::Relaxed);\n+    N.store(x + 1, Ordering::Relaxed);\n+\n+    if x < 3 {\n+        main(argc, argv);\n+    }\n+\n+    0\n+}\n+\n+#[allow(clippy::empty_loop)]\n+#[panic_handler]\n+fn panic(_info: &PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+extern \"C\" fn eh_personality() {}"}, {"sha": "89ff6609934d2cac98f83f5a4d4ddc6e91b1e6c0", "filename": "tests/ui/crate_level_checks/std_main_recursion.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,6 @@\n+#[warn(clippy::main_recursion)]\n+#[allow(unconditional_recursion)]\n+fn main() {\n+    println!(\"Hello, World!\");\n+    main();\n+}"}, {"sha": "0a260f9d2309ea9a5cf39e9003a8f580d235f8bb", "filename": "tests/ui/crate_level_checks/std_main_recursion.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fstd_main_recursion.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,11 @@\n+error: recursing into entrypoint `main`\n+  --> $DIR/std_main_recursion.rs:5:5\n+   |\n+LL |     main();\n+   |     ^^^^\n+   |\n+   = note: `-D clippy::main-recursion` implied by `-D warnings`\n+   = help: consider using another function for this recursion\n+\n+error: aborting due to previous error\n+"}, {"sha": "0d775d4067a394a39397ad764cc5a1f59b73f539", "filename": "tests/ui/cstring.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -5,4 +5,5 @@ fn temporary_cstring() {\n     use std::ffi::CString;\n \n     CString::new(\"foo\").unwrap().as_ptr();\n+    CString::new(\"foo\").expect(\"dummy\").as_ptr();\n }"}, {"sha": "83f64ff3b02610716e7e2692b4de71ff0941bcb9", "filename": "tests/ui/cstring.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -4,13 +4,26 @@ error: you are getting the inner pointer of a temporary `CString`\n LL |     CString::new(\"foo\").unwrap().as_ptr();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(clippy::temporary_cstring_as_ptr)] on by default\n+   = note: `#[deny(clippy::temporary_cstring_as_ptr)]` on by default\n    = note: that pointer will be invalid outside this expression\n help: assign the `CString` to a variable to extend its lifetime\n   --> $DIR/cstring.rs:7:5\n    |\n LL |     CString::new(\"foo\").unwrap().as_ptr();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: you are getting the inner pointer of a temporary `CString`\n+  --> $DIR/cstring.rs:8:5\n+   |\n+LL |     CString::new(\"foo\").expect(\"dummy\").as_ptr();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: that pointer will be invalid outside this expression\n+help: assign the `CString` to a variable to extend its lifetime\n+  --> $DIR/cstring.rs:8:5\n+   |\n+LL |     CString::new(\"foo\").expect(\"dummy\").as_ptr();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "959481540045df620b30d40cf60b2a3c6d9e6257", "filename": "tests/ui/decimal_literal_representation.fixed", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdecimal_literal_representation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdecimal_literal_representation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdecimal_literal_representation.fixed?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+\n+#[warn(clippy::decimal_literal_representation)]\n+#[allow(unused_variables)]\n+#[rustfmt::skip]\n+fn main() {\n+    let good = (       // Hex:\n+        127,           // 0x7F\n+        256,           // 0x100\n+        511,           // 0x1FF\n+        2048,          // 0x800\n+        4090,          // 0xFFA\n+        16_371,        // 0x3FF3\n+        61_683,        // 0xF0F3\n+        2_131_750_925, // 0x7F0F_F00D\n+    );\n+    let bad = (        // Hex:\n+        0x8005,        // 0x8005\n+        0xFF00,        // 0xFF00\n+        0x7F0F_F00F, // 0x7F0F_F00F\n+        0x7FFF_FFFF, // 0x7FFF_FFFF\n+        #[allow(overflowing_literals)]\n+        0xF0F0_F0F0, // 0xF0F0_F0F0\n+    );\n+}"}, {"sha": "3f73ebc6e516e9b5924ce3a7c937e54faf3a0de9", "filename": "tests/ui/decimal_literal_representation.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdecimal_literal_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdecimal_literal_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdecimal_literal_representation.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #[warn(clippy::decimal_literal_representation)]\n #[allow(unused_variables)]\n #[rustfmt::skip]\n@@ -17,6 +19,7 @@ fn main() {\n         65_280,        // 0xFF00\n         2_131_750_927, // 0x7F0F_F00F\n         2_147_483_647, // 0x7FFF_FFFF\n+        #[allow(overflowing_literals)]\n         4_042_322_160, // 0xF0F0_F0F0\n     );\n }"}, {"sha": "862b193cec276cafcb677a2ed767807ca1a04b9f", "filename": "tests/ui/decimal_literal_representation.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdecimal_literal_representation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdecimal_literal_representation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdecimal_literal_representation.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,31 +1,31 @@\n error: integer literal has a better hexadecimal representation\n-  --> $DIR/decimal_literal_representation.rs:16:9\n+  --> $DIR/decimal_literal_representation.rs:18:9\n    |\n LL |         32_773,        // 0x8005\n    |         ^^^^^^ help: consider: `0x8005`\n    |\n    = note: `-D clippy::decimal-literal-representation` implied by `-D warnings`\n \n error: integer literal has a better hexadecimal representation\n-  --> $DIR/decimal_literal_representation.rs:17:9\n+  --> $DIR/decimal_literal_representation.rs:19:9\n    |\n LL |         65_280,        // 0xFF00\n    |         ^^^^^^ help: consider: `0xFF00`\n \n error: integer literal has a better hexadecimal representation\n-  --> $DIR/decimal_literal_representation.rs:18:9\n+  --> $DIR/decimal_literal_representation.rs:20:9\n    |\n LL |         2_131_750_927, // 0x7F0F_F00F\n    |         ^^^^^^^^^^^^^ help: consider: `0x7F0F_F00F`\n \n error: integer literal has a better hexadecimal representation\n-  --> $DIR/decimal_literal_representation.rs:19:9\n+  --> $DIR/decimal_literal_representation.rs:21:9\n    |\n LL |         2_147_483_647, // 0x7FFF_FFFF\n    |         ^^^^^^^^^^^^^ help: consider: `0x7FFF_FFFF`\n \n error: integer literal has a better hexadecimal representation\n-  --> $DIR/decimal_literal_representation.rs:20:9\n+  --> $DIR/decimal_literal_representation.rs:23:9\n    |\n LL |         4_042_322_160, // 0xF0F0_F0F0\n    |         ^^^^^^^^^^^^^ help: consider: `0xF0F0_F0F0`"}, {"sha": "875018961090714a64f3c55161333715fb308d51", "filename": "tests/ui/derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -4,7 +4,7 @@ error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n LL | #[derive(Hash)]\n    |          ^^^^\n    |\n-   = note: #[deny(clippy::derive_hash_xor_eq)] on by default\n+   = note: `#[deny(clippy::derive_hash_xor_eq)]` on by default\n note: `PartialEq` implemented here\n   --> $DIR/derive.rs:19:1\n    |"}, {"sha": "2940d2d29011006641b553fe38fed49047d7dffd", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -7,7 +7,7 @@ use alloc::collections::linked_list::LinkedList;\n \n trait Foo {\n     type Baz = LinkedList<u8>;\n-    fn foo(LinkedList<u8>);\n+    fn foo(_: LinkedList<u8>);\n     const BAR: Option<LinkedList<u8>>;\n }\n "}, {"sha": "1f6646ec9adeb4b8fe888e459b094d80b810df97", "filename": "tests/ui/dlist.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -8,10 +8,10 @@ LL |     type Baz = LinkedList<u8>;\n    = help: a VecDeque might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n-  --> $DIR/dlist.rs:10:12\n+  --> $DIR/dlist.rs:10:15\n    |\n-LL |     fn foo(LinkedList<u8>);\n-   |            ^^^^^^^^^^^^^^\n+LL |     fn foo(_: LinkedList<u8>);\n+   |               ^^^^^^^^^^^^^^\n    |\n    = help: a VecDeque might work\n "}, {"sha": "77620c857e66e2ca52e5f40fc0887eba94f0fd1e", "filename": "tests/ui/doc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -178,3 +178,7 @@ fn issue_2210() {}\n /// This should not cause the lint to trigger:\n /// #REQ-data-family.lint_partof_exists\n fn issue_2343() {}\n+\n+/// This should not cause an ICE:\n+/// __|_ _|__||_|\n+fn pulldown_cmark_crash() {}"}, {"sha": "5d360ef30a1d89048c017a061e64167a2acbd9a5", "filename": "tests/ui/drop_bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdrop_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdrop_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_bounds.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -4,7 +4,7 @@ error: Bounds of the form `T: Drop` are useless. Use `std::mem::needs_drop` to d\n LL | fn foo<T: Drop>() {}\n    |           ^^^^\n    |\n-   = note: #[deny(clippy::drop_bounds)] on by default\n+   = note: `#[deny(clippy::drop_bounds)]` on by default\n \n error: Bounds of the form `T: Drop` are useless. Use `std::mem::needs_drop` to detect if a type has drop glue.\n   --> $DIR/drop_bounds.rs:5:8"}, {"sha": "aad996c03762b694c61045e280ffbf75b41eb3dd", "filename": "tests/ui/drop_forget_ref.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -55,3 +55,37 @@ fn test_similarly_named_function() {\n     forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n     std::mem::forget(&SomeStruct);\n }\n+\n+#[derive(Copy, Clone)]\n+pub struct Error;\n+fn produce_half_owl_error() -> Result<(), Error> {\n+    Ok(())\n+}\n+\n+fn produce_half_owl_ok() -> Result<bool, ()> {\n+    Ok(true)\n+}\n+\n+#[allow(dead_code)]\n+fn test_owl_result() -> Result<(), ()> {\n+    produce_half_owl_error().map_err(|_| ())?;\n+    produce_half_owl_ok().map(|_| ())?;\n+    // the following should not be linted,\n+    // we should not force users to use toilet closures\n+    // to produce owl results when drop is more convenient\n+    produce_half_owl_error().map_err(drop)?;\n+    produce_half_owl_ok().map_err(drop)?;\n+    Ok(())\n+}\n+\n+#[allow(dead_code)]\n+fn test_owl_result_2() -> Result<u8, ()> {\n+    produce_half_owl_error().map_err(|_| ())?;\n+    produce_half_owl_ok().map(|_| ())?;\n+    // the following should not be linted,\n+    // we should not force users to use toilet closures\n+    // to produce owl results when drop is more convenient\n+    produce_half_owl_error().map_err(drop)?;\n+    produce_half_owl_ok().map(drop)?;\n+    Ok(1)\n+}"}, {"sha": "01774a2a9845cf26c0a6c70c131e8fed7e71bb1d", "filename": "tests/ui/enum_variants.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,5 +1,5 @@\n #![feature(non_ascii_idents)]\n-#![warn(clippy::all, clippy::pub_enum_variant_names)]\n+#![warn(clippy::enum_variant_names, clippy::pub_enum_variant_names)]\n #![allow(non_camel_case_types)]\n \n enum FakeCallType {\n@@ -120,4 +120,17 @@ enum N {\n     Float,\n }\n \n+// should not lint\n+enum Peek {\n+    Peek1,\n+    Peek2,\n+    Peek3,\n+}\n+\n+// should not lint\n+pub enum NetworkLayer {\n+    Layer2,\n+    Layer3,\n+}\n+\n fn main() {}"}, {"sha": "207c1bcbbc676da7857dfd211037129e5cd33f90", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -8,8 +8,7 @@ const ONE: f32 = ZERO + 1.0;\n \n fn twice<T>(x: T) -> T\n where\n-    T: Add<T, Output = T>,\n-    T: Copy,\n+    T: Add<T, Output = T> + Copy,\n {\n     x + x\n }\n@@ -77,4 +76,23 @@ fn main() {\n     let b: *const f32 = xs.as_ptr();\n \n     assert_eq!(a, b); // no errors\n+\n+    // no errors - comparing signums is ok\n+    let x32 = 3.21f32;\n+    1.23f32.signum() == x32.signum();\n+    1.23f32.signum() == -(x32.signum());\n+    1.23f32.signum() == 3.21f32.signum();\n+\n+    1.23f32.signum() != x32.signum();\n+    1.23f32.signum() != -(x32.signum());\n+    1.23f32.signum() != 3.21f32.signum();\n+\n+    let x64 = 3.21f64;\n+    1.23f64.signum() == x64.signum();\n+    1.23f64.signum() == -(x64.signum());\n+    1.23f64.signum() == 3.21f64.signum();\n+\n+    1.23f64.signum() != x64.signum();\n+    1.23f64.signum() != -(x64.signum());\n+    1.23f64.signum() != 3.21f64.signum();\n }"}, {"sha": "116e3e90e6372c41c1437832331d4cdf3a60135e", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,36 +1,36 @@\n error: strict comparison of f32 or f64\n-  --> $DIR/float_cmp.rs:60:5\n+  --> $DIR/float_cmp.rs:59:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE as f64 - 2.0).abs() > error`\n    |\n    = note: `-D clippy::float-cmp` implied by `-D warnings`\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp.rs:60:5\n+  --> $DIR/float_cmp.rs:59:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: strict comparison of f32 or f64\n-  --> $DIR/float_cmp.rs:65:5\n+  --> $DIR/float_cmp.rs:64:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(x - 1.0).abs() < error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp.rs:65:5\n+  --> $DIR/float_cmp.rs:64:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^\n \n error: strict comparison of f32 or f64\n-  --> $DIR/float_cmp.rs:68:5\n+  --> $DIR/float_cmp.rs:67:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(twice(x) - twice(ONE as f64)).abs() > error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp.rs:68:5\n+  --> $DIR/float_cmp.rs:67:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "194a0bfec5b32ef9e9393c13c489f662ef06fe15", "filename": "tests/ui/for_loop_over_option_result.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ffor_loop_over_option_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ffor_loop_over_option_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_over_option_result.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -30,7 +30,7 @@ error: you are iterating over `Iterator::next()` which is an Option; this will c\n LL |     for x in v.iter().next() {\n    |              ^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(clippy::iter_next_loop)] on by default\n+   = note: `#[deny(clippy::iter_next_loop)]` on by default\n \n error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n   --> $DIR/for_loop_over_option_result.rs:31:14\n@@ -57,7 +57,7 @@ LL | |         break;\n LL | |     }\n    | |_____^\n    |\n-   = note: #[deny(clippy::never_loop)] on by default\n+   = note: `#[deny(clippy::never_loop)]` on by default\n \n error: this loop never actually loops\n   --> $DIR/for_loop_over_option_result.rs:53:5"}, {"sha": "f9923c9bb480ea926bf29700b5885b18d9ddc08e", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -215,10 +215,10 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     };\n \n     if true {\n-        try!(Ok(\"foo\"));\n+        r#try!(Ok(\"foo\"));\n     } else {\n         //~ ERROR same body as `if` block\n-        try!(Ok(\"foo\"));\n+        r#try!(Ok(\"foo\"));\n     }\n \n     if true {"}, {"sha": "9649c223293242fabd25b4d45f95b20ec7cea3af", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -197,7 +197,7 @@ error: this `if` has identical blocks\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         try!(Ok(\"foo\"));\n+LL | |         r#try!(Ok(\"foo\"));\n LL | |     }\n    | |_____^\n    |\n@@ -206,7 +206,7 @@ note: same as this\n    |\n LL |       if true {\n    |  _____________^\n-LL | |         try!(Ok(\"foo\"));\n+LL | |         r#try!(Ok(\"foo\"));\n LL | |     } else {\n    | |_____^\n \n@@ -236,7 +236,7 @@ error: this `if` has the same condition as a previous if\n LL |     } else if true {\n    |               ^^^^\n    |\n-   = note: #[deny(clippy::ifs_same_cond)] on by default\n+   = note: `#[deny(clippy::ifs_same_cond)]` on by default\n note: same as this\n   --> $DIR/if_same_then_else.rs:235:8\n    |"}, {"sha": "c0ffa6879ce403b1ea4d1b3f0311e58763c43805", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,5 +1,9 @@\n+// aux-build:implicit_hasher_macros.rs\n #![allow(unused)]\n \n+#[macro_use]\n+extern crate implicit_hasher_macros;\n+\n use std::cmp::Eq;\n use std::collections::{HashMap, HashSet};\n use std::hash::{BuildHasher, Hash};\n@@ -88,4 +92,7 @@ gen!(fn bar);\n pub mod test_macro;\n __implicit_hasher_test_macro!(impl<K, V> for HashMap<K, V> where V: test_macro::A);\n \n+// #4260\n+implicit_hasher_fn!();\n+\n fn main() {}"}, {"sha": "a3bc08afd560b14824b1a6e194edb8b768f9a539", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,5 +1,5 @@\n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:11:35\n+  --> $DIR/implicit_hasher.rs:15:35\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V> {\n    |                                   ^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:20:36\n+  --> $DIR/implicit_hasher.rs:24:36\n    |\n LL | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V>,) {\n    |                                    ^^^^^^^^^^^^^\n@@ -29,7 +29,7 @@ LL |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Defa\n    |           ^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:25:19\n+  --> $DIR/implicit_hasher.rs:29:19\n    |\n LL | impl Foo<i16> for HashMap<String, String> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -43,7 +43,7 @@ LL |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:42:32\n+  --> $DIR/implicit_hasher.rs:46:32\n    |\n LL | impl<T: Hash + Eq> Foo<i8> for HashSet<T> {\n    |                                ^^^^^^^^^^\n@@ -57,7 +57,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:47:19\n+  --> $DIR/implicit_hasher.rs:51:19\n    |\n LL | impl Foo<i16> for HashSet<String> {\n    |                   ^^^^^^^^^^^^^^^\n@@ -71,7 +71,7 @@ LL |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default:\n    |          ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:64:23\n+  --> $DIR/implicit_hasher.rs:68:23\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                       ^^^^^^^^^^^^^^^^^\n@@ -81,7 +81,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _s\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:64:53\n+  --> $DIR/implicit_hasher.rs:68:53\n    |\n LL | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                     ^^^^^^^^^^^^\n@@ -91,7 +91,7 @@ LL | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set:\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                          ^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:68:43\n+  --> $DIR/implicit_hasher.rs:72:43\n    |\n LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n@@ -108,7 +108,7 @@ LL |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10,\n    |                  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:76:33\n+  --> $DIR/implicit_hasher.rs:80:33\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                 ^^^^^^^^^^^^^^^^^\n@@ -121,7 +121,7 @@ LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generalized over different hashers\n-  --> $DIR/implicit_hasher.rs:76:63\n+  --> $DIR/implicit_hasher.rs:80:63\n    |\n LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {}\n    |                                                               ^^^^^^^^^^^^"}, {"sha": "47e0679c430d78dd49f4d851f5c3ad1cfae1cbd1", "filename": "tests/ui/implicit_return.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -5,6 +5,7 @@ fn test_end_of_fn() -> bool {\n         // no error!\n         return true;\n     }\n+\n     true\n }\n \n@@ -76,6 +77,14 @@ fn test_closure() {\n     let _ = || true;\n }\n \n+fn test_panic() -> bool {\n+    panic!()\n+}\n+\n+fn test_return_macro() -> String {\n+    format!(\"test {}\", \"test\")\n+}\n+\n fn main() {\n     let _ = test_end_of_fn();\n     let _ = test_if_block();\n@@ -86,4 +95,5 @@ fn main() {\n     let _ = test_loop_with_nests();\n     let _ = test_loop_with_if_let();\n     test_closure();\n+    let _ = test_return_macro();\n }"}, {"sha": "41b0873317e8af730370982c157e6abdb1a5e3d9", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,64 +1,70 @@\n error: missing return statement\n-  --> $DIR/implicit_return.rs:8:5\n+  --> $DIR/implicit_return.rs:9:5\n    |\n LL |     true\n    |     ^^^^ help: add `return` as shown: `return true`\n    |\n    = note: `-D clippy::implicit-return` implied by `-D warnings`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:14:9\n+  --> $DIR/implicit_return.rs:15:9\n    |\n LL |         true\n    |         ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:16:9\n+  --> $DIR/implicit_return.rs:17:9\n    |\n LL |         false\n    |         ^^^^^ help: add `return` as shown: `return false`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:24:17\n+  --> $DIR/implicit_return.rs:25:17\n    |\n LL |         true => false,\n    |                 ^^^^^ help: add `return` as shown: `return false`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:25:20\n+  --> $DIR/implicit_return.rs:26:20\n    |\n LL |         false => { true },\n    |                    ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:40:9\n+  --> $DIR/implicit_return.rs:41:9\n    |\n LL |         break true;\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:48:13\n+  --> $DIR/implicit_return.rs:49:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:57:13\n+  --> $DIR/implicit_return.rs:58:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:75:18\n+  --> $DIR/implicit_return.rs:76:18\n    |\n LL |     let _ = || { true };\n    |                  ^^^^ help: add `return` as shown: `return true`\n \n error: missing return statement\n-  --> $DIR/implicit_return.rs:76:16\n+  --> $DIR/implicit_return.rs:77:16\n    |\n LL |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n-error: aborting due to 10 previous errors\n+error: missing return statement\n+  --> $DIR/implicit_return.rs:85:5\n+   |\n+LL |     format!(\"test {}\", \"test\")\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `return` as shown: `return format!(\"test {}\", \"test\")`\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "8dd6ae1462513c26207f2f4af8236d92fea9c67d", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,5 +1,7 @@\n #![feature(plugin)]\n #![warn(clippy::indexing_slicing)]\n+// We also check the out_of_bounds_indexing lint here, because it lints similar things and\n+// we want to avoid false positives.\n #![warn(clippy::out_of_bounds_indexing)]\n #![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n@@ -15,21 +17,10 @@ fn main() {\n     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n     x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n     x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-    &x[..=4];\n-    &x[1..5];\n-    &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n-    &x[5..];\n-    &x[..5];\n-    &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n-    &x[0..=4];\n+    &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n     &x[0..][..3];\n     &x[1..][..5];\n \n-    &x[4..]; // Ok, should not produce stderr.\n-    &x[..4]; // Ok, should not produce stderr.\n-    &x[..]; // Ok, should not produce stderr.\n-    &x[1..]; // Ok, should not produce stderr.\n-    &x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>(); // Ok, should not produce stderr.\n     &x[0..].get(..3); // Ok, should not produce stderr.\n     x[0]; // Ok, should not produce stderr.\n     x[3]; // Ok, should not produce stderr.\n@@ -43,21 +34,6 @@ fn main() {\n \n     &y[..]; // Ok, should not produce stderr.\n \n-    let empty: [i8; 0] = [];\n-    empty[0]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-    &empty[1..5];\n-    &empty[0..=4];\n-    &empty[..=4];\n-    &empty[1..];\n-    &empty[..4];\n-    &empty[0..=0];\n-    &empty[..=0];\n-\n-    &empty[0..]; // Ok, should not produce stderr.\n-    &empty[0..0]; // Ok, should not produce stderr.\n-    &empty[..0]; // Ok, should not produce stderr.\n-    &empty[..]; // Ok, should not produce stderr.\n-\n     let v = vec![0; 5];\n     v[0];\n     v[10];\n@@ -79,9 +55,4 @@ fn main() {\n     x[M]; // Ok, should not produce stderr.\n     v[N];\n     v[M];\n-\n-    // issue 3102\n-    let num = 1;\n-    &x[num..10]; // should trigger out of bounds error\n-    &x[10..num]; // should trigger out of bounds error\n }"}, {"sha": "b2840f7b5ccc0c9a9f7a33a8be630af0cc5d6306", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 30, "deletions": 126, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,31 +1,25 @@\n error: index out of bounds: the len is 4 but the index is 4\n-  --> $DIR/indexing_slicing.rs:16:5\n+  --> $DIR/indexing_slicing.rs:18:5\n    |\n LL |     x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n    |     ^^^^\n    |\n-   = note: #[deny(const_err)] on by default\n+   = note: `#[deny(const_err)]` on by default\n \n error: index out of bounds: the len is 4 but the index is 8\n-  --> $DIR/indexing_slicing.rs:17:5\n+  --> $DIR/indexing_slicing.rs:19:5\n    |\n LL |     x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n    |     ^^^^^^^^^\n \n-error: index out of bounds: the len is 0 but the index is 0\n-  --> $DIR/indexing_slicing.rs:47:5\n-   |\n-LL |     empty[0]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n-   |     ^^^^^^^^\n-\n error: index out of bounds: the len is 4 but the index is 15\n-  --> $DIR/indexing_slicing.rs:78:5\n+  --> $DIR/indexing_slicing.rs:54:5\n    |\n LL |     x[N]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n    |     ^^^^\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:11:5\n+  --> $DIR/indexing_slicing.rs:13:5\n    |\n LL |     x[index];\n    |     ^^^^^^^^\n@@ -34,276 +28,186 @@ LL |     x[index];\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:12:6\n+  --> $DIR/indexing_slicing.rs:14:6\n    |\n LL |     &x[index..];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:13:6\n+  --> $DIR/indexing_slicing.rs:15:6\n    |\n LL |     &x[..index];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:14:6\n+  --> $DIR/indexing_slicing.rs:16:6\n    |\n LL |     &x[index_from..index_to];\n    |      ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:15:6\n+  --> $DIR/indexing_slicing.rs:17:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:15:6\n+  --> $DIR/indexing_slicing.rs:17:6\n    |\n LL |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n    |      ^^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:18:11\n-   |\n-LL |     &x[..=4];\n-   |           ^\n-   |\n-   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:19:11\n-   |\n-LL |     &x[1..5];\n-   |           ^\n-\n error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:20:6\n    |\n-LL |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n+LL |     &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n    |      ^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing.rs:20:8\n    |\n-LL |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n+LL |     &x[5..][..10]; // Two lint reports, one for out of bounds [5..] and another for slicing [..10].\n    |        ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:21:8\n-   |\n-LL |     &x[5..];\n-   |        ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:22:10\n-   |\n-LL |     &x[..5];\n-   |          ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:23:8\n-   |\n-LL |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n-   |        ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:24:12\n    |\n-LL |     &x[0..=4];\n-   |            ^\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:25:6\n+  --> $DIR/indexing_slicing.rs:21:6\n    |\n LL |     &x[0..][..3];\n    |      ^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:26:6\n+  --> $DIR/indexing_slicing.rs:22:6\n    |\n LL |     &x[1..][..5];\n    |      ^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:39:5\n+  --> $DIR/indexing_slicing.rs:30:5\n    |\n LL |     y[0];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:40:6\n+  --> $DIR/indexing_slicing.rs:31:6\n    |\n LL |     &y[1..2];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:41:6\n+  --> $DIR/indexing_slicing.rs:32:6\n    |\n LL |     &y[0..=4];\n    |      ^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:42:6\n+  --> $DIR/indexing_slicing.rs:33:6\n    |\n LL |     &y[..=4];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:48:12\n-   |\n-LL |     &empty[1..5];\n-   |            ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:49:16\n-   |\n-LL |     &empty[0..=4];\n-   |                ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:50:15\n-   |\n-LL |     &empty[..=4];\n-   |               ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:51:12\n-   |\n-LL |     &empty[1..];\n-   |            ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:52:14\n-   |\n-LL |     &empty[..4];\n-   |              ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:53:16\n-   |\n-LL |     &empty[0..=0];\n-   |                ^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:54:15\n-   |\n-LL |     &empty[..=0];\n-   |               ^\n-\n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:62:5\n+  --> $DIR/indexing_slicing.rs:38:5\n    |\n LL |     v[0];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:63:5\n+  --> $DIR/indexing_slicing.rs:39:5\n    |\n LL |     v[10];\n    |     ^^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:64:5\n+  --> $DIR/indexing_slicing.rs:40:5\n    |\n LL |     v[1 << 3];\n    |     ^^^^^^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:65:6\n+  --> $DIR/indexing_slicing.rs:41:6\n    |\n LL |     &v[10..100];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:66:6\n+  --> $DIR/indexing_slicing.rs:42:6\n    |\n LL |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:66:8\n+  --> $DIR/indexing_slicing.rs:42:8\n    |\n LL |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n    |        ^^\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:67:6\n+  --> $DIR/indexing_slicing.rs:43:6\n    |\n LL |     &v[10..];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:68:6\n+  --> $DIR/indexing_slicing.rs:44:6\n    |\n LL |     &v[..100];\n    |      ^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:80:5\n+  --> $DIR/indexing_slicing.rs:56:5\n    |\n LL |     v[N];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:81:5\n+  --> $DIR/indexing_slicing.rs:57:5\n    |\n LL |     v[M];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:85:13\n-   |\n-LL |     &x[num..10]; // should trigger out of bounds error\n-   |             ^^\n-\n-error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:86:8\n-   |\n-LL |     &x[10..num]; // should trigger out of bounds error\n-   |        ^^\n-\n-error: aborting due to 43 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "ec30a54d38178324b9690c7e80fe9debcb4ea35e", "filename": "tests/ui/infinite_iter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -111,7 +111,7 @@ error: infinite iteration detected\n LL |         let _: HashSet<i32> = (0..).collect(); // Infinite iter\n    |                               ^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(clippy::infinite_iter)] on by default\n+   = note: `#[deny(clippy::infinite_iter)]` on by default\n \n error: aborting due to 15 previous errors\n "}, {"sha": "6f0332fa8c4a726b84d3195ac568c3844816173a", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -4,7 +4,7 @@ error: Variable in the condition are not mutated in the loop body. This either l\n LL |     while y < 10 {\n    |           ^^^^^^\n    |\n-   = note: #[deny(clippy::while_immutable_condition)] on by default\n+   = note: `#[deny(clippy::while_immutable_condition)]` on by default\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n   --> $DIR/infinite_loop.rs:28:11"}, {"sha": "fc21b5cbc3f10b9f887f1624c48444d6c11831c2", "filename": "tests/ui/inherent_to_string.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,84 @@\n+#![warn(clippy::inherent_to_string)]\n+#![deny(clippy::inherent_to_string_shadow_display)]\n+\n+use std::fmt;\n+\n+trait FalsePositive {\n+    fn to_string(&self) -> String;\n+}\n+\n+struct A;\n+struct B;\n+struct C;\n+struct D;\n+struct E;\n+\n+impl A {\n+    // Should be detected; emit warning\n+    fn to_string(&self) -> String {\n+        \"A.to_string()\".to_string()\n+    }\n+\n+    // Should not be detected as it does not match the function signature\n+    fn to_str(&self) -> String {\n+        \"A.to_str()\".to_string()\n+    }\n+}\n+\n+// Should not be detected as it is a free function\n+fn to_string() -> String {\n+    \"free to_string()\".to_string()\n+}\n+\n+impl B {\n+    // Should not be detected, wrong return type\n+    fn to_string(&self) -> i32 {\n+        42\n+    }\n+}\n+\n+impl C {\n+    // Should be detected and emit error as C also implements Display\n+    fn to_string(&self) -> String {\n+        \"C.to_string()\".to_string()\n+    }\n+}\n+\n+impl fmt::Display for C {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"impl Display for C\")\n+    }\n+}\n+\n+impl FalsePositive for D {\n+    // Should not be detected, as it is a trait function\n+    fn to_string(&self) -> String {\n+        \"impl FalsePositive for D\".to_string()\n+    }\n+}\n+\n+impl E {\n+    // Should not be detected, as it is not bound to an instance\n+    fn to_string() -> String {\n+        \"E::to_string()\".to_string()\n+    }\n+}\n+\n+fn main() {\n+    let a = A;\n+    a.to_string();\n+    a.to_str();\n+\n+    to_string();\n+\n+    let b = B;\n+    b.to_string();\n+\n+    let c = C;\n+    C.to_string();\n+\n+    let d = D;\n+    d.to_string();\n+\n+    E::to_string();\n+}"}, {"sha": "5252a168830a418ec706895176f4ace48eef8ad5", "filename": "tests/ui/inherent_to_string.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Finherent_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Finherent_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,28 @@\n+error: implementation of inherent method `to_string(&self) -> String` for type `A`\n+  --> $DIR/inherent_to_string.rs:18:5\n+   |\n+LL | /     fn to_string(&self) -> String {\n+LL | |         \"A.to_string()\".to_string()\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::inherent-to-string` implied by `-D warnings`\n+   = help: implement trait `Display` for type `A` instead\n+\n+error: type `C` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\n+  --> $DIR/inherent_to_string.rs:42:5\n+   |\n+LL | /     fn to_string(&self) -> String {\n+LL | |         \"C.to_string()\".to_string()\n+LL | |     }\n+   | |_____^\n+   |\n+note: lint level defined here\n+  --> $DIR/inherent_to_string.rs:2:9\n+   |\n+LL | #![deny(clippy::inherent_to_string_shadow_display)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: remove the inherent method from type `C`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d59bd51bb4f4877e3715491498360501dde534d0", "filename": "tests/ui/invalid_ref.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c7da4c26fbff41c07fe03927847f3fe233d8b5ad/tests%2Fui%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7da4c26fbff41c07fe03927847f3fe233d8b5ad/tests%2Fui%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.rs?ref=c7da4c26fbff41c07fe03927847f3fe233d8b5ad", "patch": "@@ -1,56 +0,0 @@\n-#![allow(deprecated, unused)]\n-#![feature(core_intrinsics)]\n-\n-extern crate core;\n-use std::intrinsics::init;\n-\n-fn main() {\n-    let x = 1;\n-    unsafe {\n-        ref_to_zeroed_std(&x);\n-        ref_to_zeroed_core(&x);\n-        ref_to_zeroed_intr(&x);\n-        ref_to_uninit_std(&x);\n-        ref_to_uninit_core(&x);\n-        some_ref();\n-        std_zeroed_no_ref();\n-        core_zeroed_no_ref();\n-        intr_init_no_ref();\n-    }\n-}\n-\n-unsafe fn ref_to_zeroed_std<T: ?Sized>(t: &T) {\n-    let ref_zero: &T = std::mem::zeroed(); // warning\n-}\n-\n-unsafe fn ref_to_zeroed_core<T: ?Sized>(t: &T) {\n-    let ref_zero: &T = core::mem::zeroed(); // warning\n-}\n-\n-unsafe fn ref_to_zeroed_intr<T: ?Sized>(t: &T) {\n-    let ref_zero: &T = std::intrinsics::init(); // warning\n-}\n-\n-unsafe fn ref_to_uninit_std<T: ?Sized>(t: &T) {\n-    let ref_uninit: &T = std::mem::uninitialized(); // warning\n-}\n-\n-unsafe fn ref_to_uninit_core<T: ?Sized>(t: &T) {\n-    let ref_uninit: &T = core::mem::uninitialized(); // warning\n-}\n-\n-fn some_ref() {\n-    let some_ref = &1;\n-}\n-\n-unsafe fn std_zeroed_no_ref() {\n-    let mem_zero: usize = std::mem::zeroed(); // no warning\n-}\n-\n-unsafe fn core_zeroed_no_ref() {\n-    let mem_zero: usize = core::mem::zeroed(); // no warning\n-}\n-\n-unsafe fn intr_init_no_ref() {\n-    let mem_zero: usize = std::intrinsics::init(); // no warning\n-}"}, {"sha": "42a11fe7e5d2764edb8c66569ce4f8c714278384", "filename": "tests/ui/invalid_ref.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c7da4c26fbff41c07fe03927847f3fe233d8b5ad/tests%2Fui%2Finvalid_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7da4c26fbff41c07fe03927847f3fe233d8b5ad/tests%2Fui%2Finvalid_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.stderr?ref=c7da4c26fbff41c07fe03927847f3fe233d8b5ad", "patch": "@@ -1,43 +0,0 @@\n-error: reference to zeroed memory\n-  --> $DIR/invalid_ref.rs:23:24\n-   |\n-LL |     let ref_zero: &T = std::mem::zeroed(); // warning\n-   |                        ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[deny(clippy::invalid_ref)] on by default\n-   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-\n-error: reference to zeroed memory\n-  --> $DIR/invalid_ref.rs:27:24\n-   |\n-LL |     let ref_zero: &T = core::mem::zeroed(); // warning\n-   |                        ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-\n-error: reference to zeroed memory\n-  --> $DIR/invalid_ref.rs:31:24\n-   |\n-LL |     let ref_zero: &T = std::intrinsics::init(); // warning\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-\n-error: reference to uninitialized memory\n-  --> $DIR/invalid_ref.rs:35:26\n-   |\n-LL |     let ref_uninit: &T = std::mem::uninitialized(); // warning\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-\n-error: reference to uninitialized memory\n-  --> $DIR/invalid_ref.rs:39:26\n-   |\n-LL |     let ref_uninit: &T = core::mem::uninitialized(); // warning\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n-\n-error: aborting due to 5 previous errors\n-"}, {"sha": "cb0d95f5e2643abab2cce9fb77323c2acd0c3778", "filename": "tests/ui/issue-3145.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fissue-3145.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fissue-3145.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue-3145.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -2,7 +2,7 @@ error: expected token: `,`\n   --> $DIR/issue-3145.rs:2:19\n    |\n LL |     println!(\"{}\" a); //~ERROR expected token: `,`\n-   |                   ^\n+   |                   ^ expected `,`\n \n error: aborting due to previous error\n "}, {"sha": "953879f7bed09f712cc833e79563b3154454afce", "filename": "tests/ui/issue_4266.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fissue_4266.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fissue_4266.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,38 @@\n+// compile-flags: --edition 2018\n+#![feature(async_await)]\n+#![allow(dead_code)]\n+\n+async fn sink1<'a>(_: &'a str) {} // lint\n+async fn sink1_elided(_: &str) {} // ok\n+\n+// lint\n+async fn one_to_one<'a>(s: &'a str) -> &'a str {\n+    s\n+}\n+\n+// ok\n+async fn one_to_one_elided(s: &str) -> &str {\n+    s\n+}\n+\n+// ok\n+async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {\n+    a\n+}\n+\n+// async fn unrelated(_: &str, _: &str) {} // Not allowed in async fn\n+\n+// #3988\n+struct Foo;\n+impl Foo {\n+    // ok\n+    pub async fn foo(&mut self) {}\n+}\n+\n+// rust-lang/rust#61115\n+// ok\n+async fn print(s: &str) {\n+    println!(\"{}\", s);\n+}\n+\n+fn main() {}"}, {"sha": "8b4e70eb9c2271bb9d27324f4ea3254b5b09112e", "filename": "tests/ui/issue_4266.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fissue_4266.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fissue_4266.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,18 @@\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/issue_4266.rs:5:1\n+   |\n+LL | async fn sink1<'a>(_: &'a str) {} // lint\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/issue_4266.rs:9:1\n+   |\n+LL | / async fn one_to_one<'a>(s: &'a str) -> &'a str {\n+LL | |     s\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6c71f1beeac67c27a89916538cbdfcc2af70d896", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -22,13 +22,13 @@ error: length comparison to zero\n   --> $DIR/len_zero.rs:83:8\n    |\n LL |     if has_is_empty.len() != 0 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n   --> $DIR/len_zero.rs:86:8\n    |\n LL |     if has_is_empty.len() > 0 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n   --> $DIR/len_zero.rs:89:8\n@@ -40,7 +40,7 @@ error: length comparison to one\n   --> $DIR/len_zero.rs:92:8\n    |\n LL |     if has_is_empty.len() >= 1 {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n   --> $DIR/len_zero.rs:103:8\n@@ -52,19 +52,19 @@ error: length comparison to zero\n   --> $DIR/len_zero.rs:106:8\n    |\n LL |     if 0 != has_is_empty.len() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to zero\n   --> $DIR/len_zero.rs:109:8\n    |\n LL |     if 0 < has_is_empty.len() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n   --> $DIR/len_zero.rs:112:8\n    |\n LL |     if 1 <= has_is_empty.len() {\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n \n error: length comparison to one\n   --> $DIR/len_zero.rs:115:8\n@@ -82,7 +82,7 @@ error: length comparison to zero\n   --> $DIR/len_zero.rs:142:8\n    |\n LL |     if b.len() != 0 {}\n-   |        ^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `!b.is_empty()`\n+   |        ^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!b.is_empty()`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "f398edc23cb5e0bdd019bfea348570872fb5d39d", "filename": "tests/ui/let_unit.fixed", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Flet_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Flet_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.fixed?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+\n+#![warn(clippy::let_unit_value)]\n+#![allow(clippy::no_effect)]\n+#![allow(unused_variables)]\n+\n+macro_rules! let_and_return {\n+    ($n:expr) => {{\n+        let ret = $n;\n+    }};\n+}\n+\n+fn main() {\n+    println!(\"x\");\n+    let _y = 1; // this is fine\n+    let _z = ((), 1); // this as well\n+    if true {\n+        ();\n+    }\n+\n+    consume_units_with_for_loop(); // should be fine as well\n+\n+    multiline_sugg();\n+\n+    let_and_return!(()) // should be fine\n+}\n+\n+// Related to issue #1964\n+fn consume_units_with_for_loop() {\n+    // `for_let_unit` lint should not be triggered by consuming them using for loop.\n+    let v = vec![(), (), ()];\n+    let mut count = 0;\n+    for _ in v {\n+        count += 1;\n+    }\n+    assert_eq!(count, 3);\n+\n+    // Same for consuming from some other Iterator<Item = ()>.\n+    let (tx, rx) = ::std::sync::mpsc::channel();\n+    tx.send(()).unwrap();\n+    drop(tx);\n+\n+    count = 0;\n+    for _ in rx.iter() {\n+        count += 1;\n+    }\n+    assert_eq!(count, 1);\n+}\n+\n+fn multiline_sugg() {\n+    let v: Vec<u8> = vec![2];\n+\n+    v\n+        .into_iter()\n+        .map(|i| i * 2)\n+        .filter(|i| i % 2 == 0)\n+        .map(|_| ())\n+        .next()\n+        .unwrap();\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct ContainsUnit(()); // should be fine"}, {"sha": "af5b1fb2ac7e4d526eb6eaa47025d75db8a7992d", "filename": "tests/ui/let_unit.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![warn(clippy::let_unit_value)]\n+#![allow(clippy::no_effect)]\n #![allow(unused_variables)]\n \n macro_rules! let_and_return {\n@@ -17,6 +20,8 @@ fn main() {\n \n     consume_units_with_for_loop(); // should be fine as well\n \n+    multiline_sugg();\n+\n     let_and_return!(()) // should be fine\n }\n \n@@ -42,5 +47,17 @@ fn consume_units_with_for_loop() {\n     assert_eq!(count, 1);\n }\n \n+fn multiline_sugg() {\n+    let v: Vec<u8> = vec![2];\n+\n+    let _ = v\n+        .into_iter()\n+        .map(|i| i * 2)\n+        .filter(|i| i % 2 == 0)\n+        .map(|_| ())\n+        .next()\n+        .unwrap();\n+}\n+\n #[derive(Copy, Clone)]\n pub struct ContainsUnit(()); // should be fine"}, {"sha": "7130fcd870e369cefdcc89766f3a57219eebc509", "filename": "tests/ui/let_unit.stderr", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,16 +1,37 @@\n-error: this let-binding has unit value. Consider omitting `let _x =`\n-  --> $DIR/let_unit.rs:11:5\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:14:5\n    |\n LL |     let _x = println!(\"x\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `println!(\"x\");`\n    |\n    = note: `-D clippy::let-unit-value` implied by `-D warnings`\n \n-error: this let-binding has unit value. Consider omitting `let _a =`\n-  --> $DIR/let_unit.rs:15:9\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:18:9\n    |\n LL |         let _a = ();\n-   |         ^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^ help: omit the `let` binding: `();`\n \n-error: aborting due to 2 previous errors\n+error: this let-binding has unit value\n+  --> $DIR/let_unit.rs:53:5\n+   |\n+LL | /     let _ = v\n+LL | |         .into_iter()\n+LL | |         .map(|i| i * 2)\n+LL | |         .filter(|i| i % 2 == 0)\n+LL | |         .map(|_| ())\n+LL | |         .next()\n+LL | |         .unwrap();\n+   | |__________________^\n+help: omit the `let` binding\n+   |\n+LL |     v\n+LL |         .into_iter()\n+LL |         .map(|i| i * 2)\n+LL |         .filter(|i| i % 2 == 0)\n+LL |         .map(|_| ())\n+LL |         .next()\n+ ...\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "0559cee70efb4ec7525b063b4bd93351c2dcec3c", "filename": "tests/ui/lint_without_lint_pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Flint_without_lint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Flint_without_lint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_without_lint_pass.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -13,7 +13,7 @@ note: lint level defined here\n    |\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[deny(clippy::lint_without_lint_pass)] implied by #[deny(clippy::internal)]\n+   = note: `#[deny(clippy::lint_without_lint_pass)]` implied by `#[deny(clippy::internal)]`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "5c65d2fed3dab7fabfe45aee5763d5d14555145b", "filename": "tests/ui/match_bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmatch_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmatch_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_bool.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -83,7 +83,7 @@ error: equal expressions as operands to `&&`\n LL |     match test && test {\n    |           ^^^^^^^^^^^^\n    |\n-   = note: #[deny(clippy::eq_op)] on by default\n+   = note: `#[deny(clippy::eq_op)]` on by default\n \n error: you seem to be trying to match on a boolean expression\n   --> $DIR/match_bool.rs:36:5"}, {"sha": "d26b59db91bcf3468feb6b56635fa802ccca3eec", "filename": "tests/ui/match_ref_pats.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmatch_ref_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmatch_ref_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,73 @@\n+#![warn(clippy::match_ref_pats)]\n+\n+fn ref_pats() {\n+    {\n+        let v = &Some(0);\n+        match v {\n+            &Some(v) => println!(\"{:?}\", v),\n+            &None => println!(\"none\"),\n+        }\n+        match v {\n+            // This doesn't trigger; we have a different pattern.\n+            &Some(v) => println!(\"some\"),\n+            other => println!(\"other\"),\n+        }\n+    }\n+    let tup = &(1, 2);\n+    match tup {\n+        &(v, 1) => println!(\"{}\", v),\n+        _ => println!(\"none\"),\n+    }\n+    // Special case: using `&` both in expr and pats.\n+    let w = Some(0);\n+    match &w {\n+        &Some(v) => println!(\"{:?}\", v),\n+        &None => println!(\"none\"),\n+    }\n+    // False positive: only wildcard pattern.\n+    let w = Some(0);\n+    match w {\n+        _ => println!(\"none\"),\n+    }\n+\n+    let a = &Some(0);\n+    if let &None = a {\n+        println!(\"none\");\n+    }\n+\n+    let b = Some(0);\n+    if let &None = &b {\n+        println!(\"none\");\n+    }\n+}\n+\n+mod ice_3719 {\n+    macro_rules! foo_variant(\n+        ($idx:expr) => (Foo::get($idx).unwrap())\n+    );\n+\n+    enum Foo {\n+        A,\n+        B,\n+    }\n+\n+    impl Foo {\n+        fn get(idx: u8) -> Option<&'static Self> {\n+            match idx {\n+                0 => Some(&Foo::A),\n+                1 => Some(&Foo::B),\n+                _ => None,\n+            }\n+        }\n+    }\n+\n+    fn ice_3719() {\n+        // ICE #3719\n+        match foo_variant!(0) {\n+            &Foo::A => println!(\"A\"),\n+            _ => println!(\"Wild\"),\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "80e862c8ea9e72a395e86c8fb2ec5d3f51a9fa97", "filename": "tests/ui/match_ref_pats.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmatch_ref_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmatch_ref_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_ref_pats.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,86 @@\n+error: you don't need to add `&` to all patterns\n+  --> $DIR/match_ref_pats.rs:6:9\n+   |\n+LL | /         match v {\n+LL | |             &Some(v) => println!(\"{:?}\", v),\n+LL | |             &None => println!(\"none\"),\n+LL | |         }\n+   | |_________^\n+   |\n+   = note: `-D clippy::match-ref-pats` implied by `-D warnings`\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+   |\n+LL |         match *v {\n+LL |             Some(v) => println!(\"{:?}\", v),\n+LL |             None => println!(\"none\"),\n+   |\n+\n+error: you don't need to add `&` to all patterns\n+  --> $DIR/match_ref_pats.rs:17:5\n+   |\n+LL | /     match tup {\n+LL | |         &(v, 1) => println!(\"{}\", v),\n+LL | |         _ => println!(\"none\"),\n+LL | |     }\n+   | |_____^\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+   |\n+LL |     match *tup {\n+LL |         (v, 1) => println!(\"{}\", v),\n+   |\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+  --> $DIR/match_ref_pats.rs:23:5\n+   |\n+LL | /     match &w {\n+LL | |         &Some(v) => println!(\"{:?}\", v),\n+LL | |         &None => println!(\"none\"),\n+LL | |     }\n+   | |_____^\n+help: try\n+   |\n+LL |     match w {\n+LL |         Some(v) => println!(\"{:?}\", v),\n+LL |         None => println!(\"none\"),\n+   |\n+\n+error: you don't need to add `&` to all patterns\n+  --> $DIR/match_ref_pats.rs:34:5\n+   |\n+LL | /     if let &None = a {\n+LL | |         println!(\"none\");\n+LL | |     }\n+   | |_____^\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+   |\n+LL |     if let None = *a {\n+   |            ^^^^   ^^\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+  --> $DIR/match_ref_pats.rs:39:5\n+   |\n+LL | /     if let &None = &b {\n+LL | |         println!(\"none\");\n+LL | |     }\n+   | |_____^\n+help: try\n+   |\n+LL |     if let None = b {\n+   |            ^^^^   ^\n+\n+error: you don't need to add `&` to all patterns\n+  --> $DIR/match_ref_pats.rs:66:9\n+   |\n+LL | /         match foo_variant!(0) {\n+LL | |             &Foo::A => println!(\"A\"),\n+LL | |             _ => println!(\"Wild\"),\n+LL | |         }\n+   | |_________^\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+   |\n+LL |         match *foo_variant!(0) {\n+LL |             Foo::A => println!(\"A\"),\n+   |\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "44725db97f7fd71e0f5e9f00032a54512b57997b", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 67, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -5,47 +5,6 @@\n \n fn dummy() {}\n \n-fn ref_pats() {\n-    {\n-        let v = &Some(0);\n-        match v {\n-            &Some(v) => println!(\"{:?}\", v),\n-            &None => println!(\"none\"),\n-        }\n-        match v {\n-            // This doesn't trigger; we have a different pattern.\n-            &Some(v) => println!(\"some\"),\n-            other => println!(\"other\"),\n-        }\n-    }\n-    let tup = &(1, 2);\n-    match tup {\n-        &(v, 1) => println!(\"{}\", v),\n-        _ => println!(\"none\"),\n-    }\n-    // Special case: using `&` both in expr and pats.\n-    let w = Some(0);\n-    match &w {\n-        &Some(v) => println!(\"{:?}\", v),\n-        &None => println!(\"none\"),\n-    }\n-    // False positive: only wildcard pattern.\n-    let w = Some(0);\n-    match w {\n-        _ => println!(\"none\"),\n-    }\n-\n-    let a = &Some(0);\n-    if let &None = a {\n-        println!(\"none\");\n-    }\n-\n-    let b = Some(0);\n-    if let &None = &b {\n-        println!(\"none\");\n-    }\n-}\n-\n fn match_wild_err_arm() {\n     let x: Result<i32, &str> = Ok(3);\n \n@@ -136,29 +95,4 @@ fn match_wild_err_arm() {\n     }\n }\n \n-macro_rules! foo_variant(\n-    ($idx:expr) => (Foo::get($idx).unwrap())\n-);\n-\n-enum Foo {\n-    A,\n-    B,\n-}\n-\n-impl Foo {\n-    fn get(idx: u8) -> Option<&'static Self> {\n-        match idx {\n-            0 => Some(&Foo::A),\n-            1 => Some(&Foo::B),\n-            _ => None,\n-        }\n-    }\n-}\n-\n-fn main() {\n-    // ICE #3719\n-    match foo_variant!(0) {\n-        &Foo::A => println!(\"A\"),\n-        _ => println!(\"Wild\"),\n-    }\n-}\n+fn main() {}"}, {"sha": "f47e976e8cc4a1eb8a939d99a5e73c6d784f5b11", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 31, "deletions": 115, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,75 +1,5 @@\n-error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:11:9\n-   |\n-LL | /         match v {\n-LL | |             &Some(v) => println!(\"{:?}\", v),\n-LL | |             &None => println!(\"none\"),\n-LL | |         }\n-   | |_________^\n-   |\n-   = note: `-D clippy::match-ref-pats` implied by `-D warnings`\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL |         match *v {\n-LL |             Some(v) => println!(\"{:?}\", v),\n-LL |             None => println!(\"none\"),\n-   |\n-\n-error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:22:5\n-   |\n-LL | /     match tup {\n-LL | |         &(v, 1) => println!(\"{}\", v),\n-LL | |         _ => println!(\"none\"),\n-LL | |     }\n-   | |_____^\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL |     match *tup {\n-LL |         (v, 1) => println!(\"{}\", v),\n-   |\n-\n-error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/matches.rs:28:5\n-   |\n-LL | /     match &w {\n-LL | |         &Some(v) => println!(\"{:?}\", v),\n-LL | |         &None => println!(\"none\"),\n-LL | |     }\n-   | |_____^\n-help: try\n-   |\n-LL |     match w {\n-LL |         Some(v) => println!(\"{:?}\", v),\n-LL |         None => println!(\"none\"),\n-   |\n-\n-error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:39:5\n-   |\n-LL | /     if let &None = a {\n-LL | |         println!(\"none\");\n-LL | |     }\n-   | |_____^\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL |     if let None = *a {\n-   |            ^^^^   ^^\n-\n-error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/matches.rs:44:5\n-   |\n-LL | /     if let &None = &b {\n-LL | |         println!(\"none\");\n-LL | |     }\n-   | |_____^\n-help: try\n-   |\n-LL |     if let None = b {\n-   |            ^^^^   ^\n-\n error: Err(_) will match all errors, maybe not a good idea\n-  --> $DIR/matches.rs:55:9\n+  --> $DIR/matches.rs:14:9\n    |\n LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n@@ -78,197 +8,183 @@ LL |         Err(_) => panic!(\"err\"),\n    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:54:18\n+  --> $DIR/matches.rs:13:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::match-same-arms` implied by `-D warnings`\n note: same as this\n-  --> $DIR/matches.rs:53:18\n+  --> $DIR/matches.rs:12:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:53:9\n+  --> $DIR/matches.rs:12:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-  --> $DIR/matches.rs:61:9\n+  --> $DIR/matches.rs:20:9\n    |\n LL |         Err(_) => panic!(),\n    |         ^^^^^^\n    |\n    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:60:18\n+  --> $DIR/matches.rs:19:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:59:18\n+  --> $DIR/matches.rs:18:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:59:9\n+  --> $DIR/matches.rs:18:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-  --> $DIR/matches.rs:67:9\n+  --> $DIR/matches.rs:26:9\n    |\n LL |         Err(_) => {\n    |         ^^^^^^\n    |\n    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:66:18\n+  --> $DIR/matches.rs:25:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:65:18\n+  --> $DIR/matches.rs:24:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:65:9\n+  --> $DIR/matches.rs:24:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:75:18\n+  --> $DIR/matches.rs:34:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:74:18\n+  --> $DIR/matches.rs:33:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:74:9\n+  --> $DIR/matches.rs:33:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:82:18\n+  --> $DIR/matches.rs:41:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:81:18\n+  --> $DIR/matches.rs:40:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:81:9\n+  --> $DIR/matches.rs:40:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:88:18\n+  --> $DIR/matches.rs:47:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:87:18\n+  --> $DIR/matches.rs:46:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:87:9\n+  --> $DIR/matches.rs:46:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:94:18\n+  --> $DIR/matches.rs:53:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:93:18\n+  --> $DIR/matches.rs:52:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:93:9\n+  --> $DIR/matches.rs:52:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:117:29\n+  --> $DIR/matches.rs:76:29\n    |\n LL |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n    |                             ^^^^^^^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:116:29\n+  --> $DIR/matches.rs:75:29\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |                             ^^^^^^^^^^^^^^^^^^^^\n help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n-  --> $DIR/matches.rs:116:9\n+  --> $DIR/matches.rs:75:9\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-  --> $DIR/matches.rs:132:18\n+  --> $DIR/matches.rs:91:18\n    |\n LL |         Ok(_) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n    |\n note: same as this\n-  --> $DIR/matches.rs:131:18\n+  --> $DIR/matches.rs:90:18\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |                  ^^^^^^^^^^^^^^\n help: consider refactoring into `Ok(3) | Ok(_)`\n-  --> $DIR/matches.rs:131:9\n+  --> $DIR/matches.rs:90:9\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:160:5\n-   |\n-LL | /     match foo_variant!(0) {\n-LL | |         &Foo::A => println!(\"A\"),\n-LL | |         _ => println!(\"Wild\"),\n-LL | |     }\n-   | |_____^\n-help: instead of prefixing all patterns with `&`, you can dereference the expression\n-   |\n-LL |     match *foo_variant!(0) {\n-LL |         Foo::A => println!(\"A\"),\n-   |\n-\n-error: aborting due to 18 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "32e73988d442ab9bf9481621379f5caf41def7fc", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -12,7 +12,8 @@\n     clippy::default_trait_access,\n     clippy::use_self,\n     clippy::new_ret_no_self,\n-    clippy::useless_format\n+    clippy::useless_format,\n+    clippy::wrong_self_convention\n )]\n \n #[macro_use]"}, {"sha": "ab97621784ae9b759760b12e9309ea9e26a14cbd", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 21, "deletions": 41, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,5 +1,5 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:35:5\n+  --> $DIR/methods.rs:36:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         self\n@@ -8,28 +8,8 @@ LL | |     }\n    |\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n-error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:70:17\n-   |\n-LL |     fn into_u16(&self) -> u16 {\n-   |                 ^^^^^\n-   |\n-   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n-\n-error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:74:21\n-   |\n-LL |     fn to_something(self) -> u32 {\n-   |                     ^^^^\n-\n-error: methods called `new` usually take no self; consider choosing a less ambiguous name\n-  --> $DIR/methods.rs:78:12\n-   |\n-LL |     fn new(self) -> Self {\n-   |            ^^^^\n-\n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:157:13\n+  --> $DIR/methods.rs:158:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -41,7 +21,7 @@ LL | |                .unwrap_or(0);\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:161:13\n+  --> $DIR/methods.rs:162:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -51,7 +31,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:165:13\n+  --> $DIR/methods.rs:166:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -61,15 +41,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:170:13\n+  --> $DIR/methods.rs:171:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:172:13\n+  --> $DIR/methods.rs:173:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -79,7 +59,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:176:13\n+  --> $DIR/methods.rs:177:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -90,15 +70,15 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:187:13\n+  --> $DIR/methods.rs:188:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:191:13\n+  --> $DIR/methods.rs:192:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -110,7 +90,7 @@ LL | |                .unwrap_or_else(|| 0);\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:195:13\n+  --> $DIR/methods.rs:196:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -120,7 +100,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:199:13\n+  --> $DIR/methods.rs:200:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -130,7 +110,7 @@ LL | |                 );\n    | |_________________^\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:229:13\n+  --> $DIR/methods.rs:230:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -139,7 +119,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:232:13\n+  --> $DIR/methods.rs:233:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -149,7 +129,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:248:13\n+  --> $DIR/methods.rs:249:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -158,7 +138,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:251:13\n+  --> $DIR/methods.rs:252:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -168,15 +148,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:257:13\n+  --> $DIR/methods.rs:258:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:260:13\n+  --> $DIR/methods.rs:261:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -186,15 +166,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:266:13\n+  --> $DIR/methods.rs:267:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:269:13\n+  --> $DIR/methods.rs:270:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -204,12 +184,12 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:284:13\n+  --> $DIR/methods.rs:285:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 20 previous errors\n "}, {"sha": "17c8b3230273b8bc84a402b1a2150f9244784cf2", "filename": "tests/ui/mistyped_literal_suffix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmistyped_literal_suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fmistyped_literal_suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmistyped_literal_suffix.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -4,7 +4,7 @@ error: mistyped literal suffix\n LL |     let fail14 = 2_32;\n    |                  ^^^^ help: did you mean to write: `2_i32`\n    |\n-   = note: #[deny(clippy::mistyped_literal_suffixes)] on by default\n+   = note: `#[deny(clippy::mistyped_literal_suffixes)]` on by default\n \n error: mistyped literal suffix\n   --> $DIR/mistyped_literal_suffix.rs:7:18"}, {"sha": "567dbc54100a64943337b9c02c390dd7801f7804", "filename": "tests/ui/needless_bool/fixable.fixed", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_bool%2Ffixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_bool%2Ffixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.fixed?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,98 @@\n+// run-rustfix\n+\n+#![warn(clippy::needless_bool)]\n+#![allow(\n+    unused,\n+    dead_code,\n+    clippy::no_effect,\n+    clippy::if_same_then_else,\n+    clippy::needless_return\n+)]\n+\n+use std::cell::Cell;\n+\n+macro_rules! bool_comparison_trigger {\n+    ($($i:ident: $def:expr, $stb:expr );+  $(;)*) => (\n+\n+        #[derive(Clone)]\n+        pub struct Trigger {\n+            $($i: (Cell<bool>, bool, bool)),+\n+        }\n+\n+        #[allow(dead_code)]\n+        impl Trigger {\n+            pub fn trigger(&self, key: &str) -> bool {\n+                $(\n+                    if let stringify!($i) = key {\n+                        return self.$i.1 && self.$i.2 == $def;\n+                    }\n+                 )+\n+                false\n+            }\n+        }\n+    )\n+}\n+\n+fn main() {\n+    let x = true;\n+    let y = false;\n+    x;\n+    !x;\n+    !(x && y);\n+    if x {\n+        x\n+    } else {\n+        false\n+    }; // would also be questionable, but we don't catch this yet\n+    bool_ret3(x);\n+    bool_ret4(x);\n+    bool_ret5(x, x);\n+    bool_ret6(x, x);\n+    needless_bool(x);\n+    needless_bool2(x);\n+    needless_bool3(x);\n+}\n+\n+fn bool_ret3(x: bool) -> bool {\n+    return x;\n+}\n+\n+fn bool_ret4(x: bool) -> bool {\n+    return !x;\n+}\n+\n+fn bool_ret5(x: bool, y: bool) -> bool {\n+    return x && y;\n+}\n+\n+fn bool_ret6(x: bool, y: bool) -> bool {\n+    return !(x && y);\n+}\n+\n+fn needless_bool(x: bool) {\n+    if x {};\n+}\n+\n+fn needless_bool2(x: bool) {\n+    if !x {};\n+}\n+\n+fn needless_bool3(x: bool) {\n+    bool_comparison_trigger! {\n+        test_one:   false, false;\n+        test_three: false, false;\n+        test_two:   true, true;\n+    }\n+\n+    if x {};\n+    if !x {};\n+}\n+\n+fn needless_bool_in_the_suggestion_wraps_the_predicate_of_if_else_statement_in_brackets() {\n+    let b = false;\n+    let returns_bool = || false;\n+\n+    let x = if b {\n+        true\n+    } else { !returns_bool() };\n+}"}, {"sha": "10126ad4dbb15aacd70053938e9e267dd42510ba", "filename": "tests/ui/needless_bool/fixable.rs", "status": "renamed", "additions": 13, "deletions": 39, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_bool%2Ffixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_bool%2Ffixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,4 +1,13 @@\n+// run-rustfix\n+\n #![warn(clippy::needless_bool)]\n+#![allow(\n+    unused,\n+    dead_code,\n+    clippy::no_effect,\n+    clippy::if_same_then_else,\n+    clippy::needless_return\n+)]\n \n use std::cell::Cell;\n \n@@ -24,20 +33,9 @@ macro_rules! bool_comparison_trigger {\n     )\n }\n \n-#[allow(clippy::if_same_then_else)]\n fn main() {\n     let x = true;\n     let y = false;\n-    if x {\n-        true\n-    } else {\n-        true\n-    };\n-    if x {\n-        false\n-    } else {\n-        false\n-    };\n     if x {\n         true\n     } else {\n@@ -58,45 +56,31 @@ fn main() {\n     } else {\n         false\n     }; // would also be questionable, but we don't catch this yet\n-    bool_ret(x);\n-    bool_ret2(x);\n     bool_ret3(x);\n-    bool_ret5(x, x);\n     bool_ret4(x);\n+    bool_ret5(x, x);\n     bool_ret6(x, x);\n     needless_bool(x);\n     needless_bool2(x);\n     needless_bool3(x);\n }\n \n-#[allow(clippy::if_same_then_else, clippy::needless_return)]\n-fn bool_ret(x: bool) -> bool {\n+fn bool_ret3(x: bool) -> bool {\n     if x {\n         return true;\n     } else {\n-        return true;\n+        return false;\n     };\n }\n \n-#[allow(clippy::if_same_then_else, clippy::needless_return)]\n-fn bool_ret2(x: bool) -> bool {\n+fn bool_ret4(x: bool) -> bool {\n     if x {\n         return false;\n     } else {\n-        return false;\n-    };\n-}\n-\n-#[allow(clippy::needless_return)]\n-fn bool_ret3(x: bool) -> bool {\n-    if x {\n         return true;\n-    } else {\n-        return false;\n     };\n }\n \n-#[allow(clippy::needless_return)]\n fn bool_ret5(x: bool, y: bool) -> bool {\n     if x && y {\n         return true;\n@@ -105,16 +89,6 @@ fn bool_ret5(x: bool, y: bool) -> bool {\n     };\n }\n \n-#[allow(clippy::needless_return)]\n-fn bool_ret4(x: bool) -> bool {\n-    if x {\n-        return false;\n-    } else {\n-        return true;\n-    };\n-}\n-\n-#[allow(clippy::needless_return)]\n fn bool_ret6(x: bool, y: bool) -> bool {\n     if x && y {\n         return false;", "previous_filename": "tests/ui/needless_bool.rs"}, {"sha": "25abfb2a472b621130483c7eb5629ef7f946fab1", "filename": "tests/ui/needless_bool/fixable.stderr", "status": "renamed", "additions": 21, "deletions": 61, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_bool%2Ffixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_bool%2Ffixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,37 +1,17 @@\n-error: this if-then-else expression will always return true\n-  --> $DIR/needless_bool.rs:31:5\n-   |\n-LL | /     if x {\n-LL | |         true\n-LL | |     } else {\n-LL | |         true\n-LL | |     };\n-   | |_____^\n-   |\n-   = note: `-D clippy::needless-bool` implied by `-D warnings`\n-\n-error: this if-then-else expression will always return false\n-  --> $DIR/needless_bool.rs:36:5\n-   |\n-LL | /     if x {\n-LL | |         false\n-LL | |     } else {\n-LL | |         false\n-LL | |     };\n-   | |_____^\n-\n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:41:5\n+  --> $DIR/fixable.rs:39:5\n    |\n LL | /     if x {\n LL | |         true\n LL | |     } else {\n LL | |         false\n LL | |     };\n    | |_____^ help: you can reduce it to: `x`\n+   |\n+   = note: `-D clippy::needless-bool` implied by `-D warnings`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:46:5\n+  --> $DIR/fixable.rs:44:5\n    |\n LL | /     if x {\n LL | |         false\n@@ -41,7 +21,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:51:5\n+  --> $DIR/fixable.rs:49:5\n    |\n LL | /     if x && y {\n LL | |         false\n@@ -50,38 +30,28 @@ LL | |         true\n LL | |     };\n    | |_____^ help: you can reduce it to: `!(x && y)`\n \n-error: this if-then-else expression will always return true\n-  --> $DIR/needless_bool.rs:74:5\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/fixable.rs:69:5\n    |\n LL | /     if x {\n LL | |         return true;\n LL | |     } else {\n-LL | |         return true;\n-LL | |     };\n-   | |_____^\n-\n-error: this if-then-else expression will always return false\n-  --> $DIR/needless_bool.rs:83:5\n-   |\n-LL | /     if x {\n-LL | |         return false;\n-LL | |     } else {\n LL | |         return false;\n LL | |     };\n-   | |_____^\n+   | |_____^ help: you can reduce it to: `return x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:92:5\n+  --> $DIR/fixable.rs:77:5\n    |\n LL | /     if x {\n-LL | |         return true;\n-LL | |     } else {\n LL | |         return false;\n+LL | |     } else {\n+LL | |         return true;\n LL | |     };\n-   | |_____^ help: you can reduce it to: `return x`\n+   | |_____^ help: you can reduce it to: `return !x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:101:5\n+  --> $DIR/fixable.rs:85:5\n    |\n LL | /     if x && y {\n LL | |         return true;\n@@ -91,17 +61,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x && y`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:110:5\n-   |\n-LL | /     if x {\n-LL | |         return false;\n-LL | |     } else {\n-LL | |         return true;\n-LL | |     };\n-   | |_____^ help: you can reduce it to: `return !x`\n-\n-error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:119:5\n+  --> $DIR/fixable.rs:93:5\n    |\n LL | /     if x && y {\n LL | |         return false;\n@@ -111,41 +71,41 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !(x && y)`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/needless_bool.rs:127:8\n+  --> $DIR/fixable.rs:101:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n    |\n    = note: `-D clippy::bool-comparison` implied by `-D warnings`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/needless_bool.rs:131:8\n+  --> $DIR/fixable.rs:105:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/needless_bool.rs:141:8\n+  --> $DIR/fixable.rs:115:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/needless_bool.rs:142:8\n+  --> $DIR/fixable.rs:116:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/needless_bool.rs:151:12\n+  --> $DIR/fixable.rs:125:12\n    |\n LL |       } else if returns_bool() {\n    |  ____________^\n LL | |         false\n LL | |     } else {\n LL | |         true\n LL | |     };\n-   | |_____^ help: you can reduce it to: `!returns_bool()`\n+   | |_____^ help: you can reduce it to: `{ !returns_bool() }`\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 12 previous errors\n ", "previous_filename": "tests/ui/needless_bool.stderr"}, {"sha": "e9f1428fc3a43b5ff407062cbfe9639fefaef47a", "filename": "tests/ui/needless_bool/simple.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_bool%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_bool%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Fsimple.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,46 @@\n+#![warn(clippy::needless_bool)]\n+#![allow(\n+    unused,\n+    dead_code,\n+    clippy::no_effect,\n+    clippy::if_same_then_else,\n+    clippy::needless_return\n+)]\n+\n+fn main() {\n+    let x = true;\n+    let y = false;\n+    if x {\n+        true\n+    } else {\n+        true\n+    };\n+    if x {\n+        false\n+    } else {\n+        false\n+    };\n+    if x {\n+        x\n+    } else {\n+        false\n+    }; // would also be questionable, but we don't catch this yet\n+    bool_ret(x);\n+    bool_ret2(x);\n+}\n+\n+fn bool_ret(x: bool) -> bool {\n+    if x {\n+        return true;\n+    } else {\n+        return true;\n+    };\n+}\n+\n+fn bool_ret2(x: bool) -> bool {\n+    if x {\n+        return false;\n+    } else {\n+        return false;\n+    };\n+}"}, {"sha": "c57a8a042fb88f95bf2374332034e9d4b5c26591", "filename": "tests/ui/needless_bool/simple.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_bool%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_bool%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Fsimple.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,44 @@\n+error: this if-then-else expression will always return true\n+  --> $DIR/simple.rs:13:5\n+   |\n+LL | /     if x {\n+LL | |         true\n+LL | |     } else {\n+LL | |         true\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: `-D clippy::needless-bool` implied by `-D warnings`\n+\n+error: this if-then-else expression will always return false\n+  --> $DIR/simple.rs:18:5\n+   |\n+LL | /     if x {\n+LL | |         false\n+LL | |     } else {\n+LL | |         false\n+LL | |     };\n+   | |_____^\n+\n+error: this if-then-else expression will always return true\n+  --> $DIR/simple.rs:33:5\n+   |\n+LL | /     if x {\n+LL | |         return true;\n+LL | |     } else {\n+LL | |         return true;\n+LL | |     };\n+   | |_____^\n+\n+error: this if-then-else expression will always return false\n+  --> $DIR/simple.rs:41:5\n+   |\n+LL | /     if x {\n+LL | |         return false;\n+LL | |     } else {\n+LL | |         return false;\n+LL | |     };\n+   | |_____^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "ee700ab8408688e9958dd928bbacbe216165a131", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -70,7 +70,7 @@ error: unneeded return statement\n   --> $DIR/needless_return.rs:64:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with the unit type: `()`\n+   |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "c00b4c78cf28b49182ec4441d84bcc9b10230ea9", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -10,7 +10,7 @@ LL | |         break;\n LL | |     }\n    | |_____^\n    |\n-   = note: #[deny(clippy::never_loop)] on by default\n+   = note: `#[deny(clippy::never_loop)]` on by default\n \n error: this loop never actually loops\n   --> $DIR/never_loop.rs:32:5"}, {"sha": "634933eac6186262009dbebb84543f6deabe3cb7", "filename": "tests/ui/non_copy_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fnon_copy_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fnon_copy_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -6,7 +6,7 @@ LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n    | |\n    | help: make this a static item: `static`\n    |\n-   = note: #[deny(clippy::declare_interior_mutable_const)] on by default\n+   = note: `#[deny(clippy::declare_interior_mutable_const)]` on by default\n \n error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:11:1\n@@ -132,7 +132,7 @@ error: a const item with interior mutability should not be borrowed\n LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^\n    |\n-   = note: #[deny(clippy::borrow_interior_mutable_const)] on by default\n+   = note: `#[deny(clippy::borrow_interior_mutable_const)]` on by default\n    = help: assign this const to a local or static variable, and use the variable here\n \n error: a const item with interior mutability should not be borrowed"}, {"sha": "884e46eb4ee163fdf8efb7895018b4bff9a95578", "filename": "tests/ui/out_of_bounds_indexing/empty_array.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,19 @@\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+\n+fn main() {\n+    let empty: [i8; 0] = [];\n+    empty[0];\n+    &empty[1..5];\n+    &empty[0..=4];\n+    &empty[..=4];\n+    &empty[1..];\n+    &empty[..4];\n+    &empty[0..=0];\n+    &empty[..=0];\n+\n+    &empty[0..]; // Ok, should not produce stderr.\n+    &empty[0..0]; // Ok, should not produce stderr.\n+    &empty[..0]; // Ok, should not produce stderr.\n+    &empty[..]; // Ok, should not produce stderr.\n+}"}, {"sha": "cda78a47ec73e91c15e8d3242a73e8c52df3129e", "filename": "tests/ui/out_of_bounds_indexing/empty_array.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fempty_array.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,54 @@\n+error: index out of bounds: the len is 0 but the index is 0\n+  --> $DIR/empty_array.rs:6:5\n+   |\n+LL |     empty[0];\n+   |     ^^^^^^^^\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:7:12\n+   |\n+LL |     &empty[1..5];\n+   |            ^\n+   |\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:8:16\n+   |\n+LL |     &empty[0..=4];\n+   |                ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:9:15\n+   |\n+LL |     &empty[..=4];\n+   |               ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:10:12\n+   |\n+LL |     &empty[1..];\n+   |            ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:11:14\n+   |\n+LL |     &empty[..4];\n+   |              ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:12:16\n+   |\n+LL |     &empty[0..=0];\n+   |                ^\n+\n+error: range is out of bounds\n+  --> $DIR/empty_array.rs:13:15\n+   |\n+LL |     &empty[..=0];\n+   |               ^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "edd2123d48a557fbdf4339e120acdb89b051e6ee", "filename": "tests/ui/out_of_bounds_indexing/issue-3102.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,11 @@\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(clippy::no_effect)]\n+\n+fn main() {\n+    let x = [1, 2, 3, 4];\n+\n+    // issue 3102\n+    let num = 1;\n+    &x[num..10]; // should trigger out of bounds error\n+    &x[10..num]; // should trigger out of bounds error\n+}"}, {"sha": "516c1df40be0acfc0edcabcdba0aa5b4c1bbc33a", "filename": "tests/ui/out_of_bounds_indexing/issue-3102.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,16 @@\n+error: range is out of bounds\n+  --> $DIR/issue-3102.rs:9:13\n+   |\n+LL |     &x[num..10]; // should trigger out of bounds error\n+   |             ^^\n+   |\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n+\n+error: range is out of bounds\n+  --> $DIR/issue-3102.rs:10:8\n+   |\n+LL |     &x[10..num]; // should trigger out of bounds error\n+   |        ^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4c541c23f5f472608eba394c39f180ee3ea7892f", "filename": "tests/ui/out_of_bounds_indexing/simple.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,22 @@\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+\n+fn main() {\n+    let x = [1, 2, 3, 4];\n+\n+    &x[..=4];\n+    &x[1..5];\n+    &x[5..];\n+    &x[..5];\n+    &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n+    &x[0..=4];\n+\n+    &x[4..]; // Ok, should not produce stderr.\n+    &x[..4]; // Ok, should not produce stderr.\n+    &x[..]; // Ok, should not produce stderr.\n+    &x[1..]; // Ok, should not produce stderr.\n+    &x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>(); // Ok, should not produce stderr.\n+\n+    &x[0..].get(..3); // Ok, should not produce stderr.\n+    &x[0..3]; // Ok, should not produce stderr.\n+}"}, {"sha": "3d95afcdab23397d94debef7f27842c149a6eb8f", "filename": "tests/ui/out_of_bounds_indexing/simple.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,40 @@\n+error: range is out of bounds\n+  --> $DIR/simple.rs:7:11\n+   |\n+LL |     &x[..=4];\n+   |           ^\n+   |\n+   = note: `-D clippy::out-of-bounds-indexing` implied by `-D warnings`\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:8:11\n+   |\n+LL |     &x[1..5];\n+   |           ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:9:8\n+   |\n+LL |     &x[5..];\n+   |        ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:10:10\n+   |\n+LL |     &x[..5];\n+   |          ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:11:8\n+   |\n+LL |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n+   |        ^\n+\n+error: range is out of bounds\n+  --> $DIR/simple.rs:12:12\n+   |\n+LL |     &x[0..=4];\n+   |            ^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "ed0542c9298b1af3cc6d1fa6ce4fb023057fdb92", "filename": "tests/ui/outer_expn_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fouter_expn_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fouter_expn_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_info.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -16,7 +16,7 @@ declare_lint_pass!(Pass => [TEST_LINT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, _cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        let _ = expr.span.ctxt().outer().expn_info();\n+        let _ = expr.span.ctxt().outer_expn().expn_info();\n     }\n }\n "}, {"sha": "4bbd1493dc4f8bd82200f1076c20d4bb3b84f41b", "filename": "tests/ui/outer_expn_info.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fouter_expn_info.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fouter_expn_info.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_info.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,15 +1,15 @@\n-error: usage of `outer().expn_info()`\n+error: usage of `outer_expn().expn_info()`\n   --> $DIR/outer_expn_info.rs:19:33\n    |\n-LL |         let _ = expr.span.ctxt().outer().expn_info();\n-   |                                 ^^^^^^^^^^^^^^^^^^^^ help: try: `.outer_expn_info()`\n+LL |         let _ = expr.span.ctxt().outer_expn().expn_info();\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.outer_expn_info()`\n    |\n note: lint level defined here\n   --> $DIR/outer_expn_info.rs:1:9\n    |\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: #[deny(clippy::outer_expn_info)] implied by #[deny(clippy::internal)]\n+   = note: `#[deny(clippy::outer_expn_expn_info)]` implied by `#[deny(clippy::internal)]`\n \n error: aborting due to previous error\n "}, {"sha": "78c3880db4993517d47ae52e4c27a6a102d93b48", "filename": "tests/ui/proc_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fproc_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fproc_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc_macro.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -4,7 +4,7 @@ error: approximate value of `f{32, 64}::consts::PI` found. Consider using it dir\n LL |     let _x = 3.14;\n    |              ^^^^\n    |\n-   = note: #[deny(clippy::approx_constant)] on by default\n+   = note: `#[deny(clippy::approx_constant)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "3871c4f2268cc36e02c1c73916b2cbcaff9a5ffb", "filename": "tests/ui/single_char_pattern.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fsingle_char_pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fsingle_char_pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.fixed?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -53,4 +53,11 @@ fn main() {\n     // Issue #3204\n     const S: &str = \"#\";\n     x.find(S);\n+\n+    // Raw string\n+    x.split('a');\n+    x.split('a');\n+    x.split('a');\n+    x.split('\\'');\n+    x.split('#');\n }"}, {"sha": "32afe339cd81cc0cf07d87dc231f4368be748392", "filename": "tests/ui/single_char_pattern.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -53,4 +53,11 @@ fn main() {\n     // Issue #3204\n     const S: &str = \"#\";\n     x.find(S);\n+\n+    // Raw string\n+    x.split(r\"a\");\n+    x.split(r#\"a\"#);\n+    x.split(r###\"a\"###);\n+    x.split(r###\"'\"###);\n+    x.split(r###\"#\"###);\n }"}, {"sha": "464ed375976fcb38d030868e1484918441f2be5a", "filename": "tests/ui/single_char_pattern.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -132,5 +132,35 @@ error: single-character string constant used as pattern\n LL |     x.starts_with(\"/x03\"); // issue #2996\n    |                   ^^^^^^ help: try using a char instead: `'/x03'`\n \n-error: aborting due to 22 previous errors\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:58:13\n+   |\n+LL |     x.split(r\"a\");\n+   |             ^^^^ help: try using a char instead: `'a'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:59:13\n+   |\n+LL |     x.split(r#\"a\"#);\n+   |             ^^^^^^ help: try using a char instead: `'a'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:60:13\n+   |\n+LL |     x.split(r###\"a\"###);\n+   |             ^^^^^^^^^^ help: try using a char instead: `'a'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:61:13\n+   |\n+LL |     x.split(r###\"'\"###);\n+   |             ^^^^^^^^^^ help: try using a char instead: `'/''`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:62:13\n+   |\n+LL |     x.split(r###\"#\"###);\n+   |             ^^^^^^^^^^ help: try using a char instead: `'#'`\n+\n+error: aborting due to 27 previous errors\n "}, {"sha": "1922478165fd30232aea3cb6c8242c96a9e93f80", "filename": "tests/ui/string_lit_as_bytes.fixed", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fstring_lit_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fstring_lit_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.fixed?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -6,10 +6,11 @@\n fn str_lit_as_bytes() {\n     let bs = b\"hello there\";\n \n-    let bs = br###\"raw string with three ### in it and some \" \"\"###;\n+    let bs = br###\"raw string with 3# plus \" \"\"###;\n \n-    // no warning, because this cannot be written as a byte string literal:\n+    // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();\n+    let ubs = \"hello there! this is a very long string\".as_bytes();\n \n     let strify = stringify!(foobar).as_bytes();\n "}, {"sha": "560cbcb657b8ce84ad4ee9c6556a12b6d611b573", "filename": "tests/ui/string_lit_as_bytes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fstring_lit_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fstring_lit_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -6,10 +6,11 @@\n fn str_lit_as_bytes() {\n     let bs = \"hello there\".as_bytes();\n \n-    let bs = r###\"raw string with three ### in it and some \" \"\"###.as_bytes();\n+    let bs = r###\"raw string with 3# plus \" \"\"###.as_bytes();\n \n-    // no warning, because this cannot be written as a byte string literal:\n+    // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();\n+    let ubs = \"hello there! this is a very long string\".as_bytes();\n \n     let strify = stringify!(foobar).as_bytes();\n "}, {"sha": "59aaec75bd2213fc2180386182833dd0a50ad163", "filename": "tests/ui/string_lit_as_bytes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fstring_lit_as_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fstring_lit_as_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -9,11 +9,11 @@ LL |     let bs = \"hello there\".as_bytes();\n error: calling `as_bytes()` on a string literal\n   --> $DIR/string_lit_as_bytes.rs:9:14\n    |\n-LL |     let bs = r###\"raw string with three ### in it and some \" \"\"###.as_bytes();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `br###\"raw string with three ### in it and some \" \"\"###`\n+LL |     let bs = r###\"raw string with 3# plus \" \"\"###.as_bytes();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `br###\"raw string with 3# plus \" \"\"###`\n \n error: calling `as_bytes()` on `include_str!(..)`\n-  --> $DIR/string_lit_as_bytes.rs:16:22\n+  --> $DIR/string_lit_as_bytes.rs:17:22\n    |\n LL |     let includestr = include_str!(\"entry.rs\").as_bytes();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"entry.rs\")`"}, {"sha": "e8a6efc4c4d26b2ae7d5b232457b2f6cc02ae709", "filename": "tests/ui/suspicious_arithmetic_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -12,7 +12,7 @@ error: Suspicious use of binary operator in `AddAssign` impl\n LL |         *self = *self - other;\n    |                       ^\n    |\n-   = note: #[deny(clippy::suspicious_op_assign_impl)] on by default\n+   = note: `#[deny(clippy::suspicious_op_assign_impl)]` on by default\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a2087316e3768f622787f45d421e2621f1efbe6e", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -78,3 +78,22 @@ fn main() {\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n }\n+\n+macro_rules! bar {\n+    () => {\n+        String::from(\"aasdfasdfasdfa\")\n+    };\n+}\n+\n+macro_rules! foo {\n+    () => {\n+        bar!()\n+    };\n+}\n+\n+pub fn macro_inside(fail: bool) -> Result<i32, String> {\n+    if fail {\n+        return Err(foo!());\n+    }\n+    Ok(0)\n+}"}, {"sha": "5ef1b615dc70232f7ce0d17f0aa71dcec69018ba", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -78,3 +78,22 @@ fn main() {\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n }\n+\n+macro_rules! bar {\n+    () => {\n+        String::from(\"aasdfasdfasdfa\")\n+    };\n+}\n+\n+macro_rules! foo {\n+    () => {\n+        bar!()\n+    };\n+}\n+\n+pub fn macro_inside(fail: bool) -> Result<i32, String> {\n+    if fail {\n+        Err(foo!())?;\n+    }\n+    Ok(0)\n+}"}, {"sha": "b915d6b601d12f2d0fea5c682b9cb88349944945", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -28,5 +28,11 @@ error: returning an `Err(_)` with the `?` operator\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n-error: aborting due to 4 previous errors\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:96:9\n+   |\n+LL |         Err(foo!())?;\n+   |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "8b538be762b0c3bb9821171388e33c85c99f1fea", "filename": "tests/ui/type_repetition_in_bounds.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ftype_repetition_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ftype_repetition_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,19 @@\n+#[deny(clippy::type_repetition_in_bounds)]\n+\n+pub fn foo<T>(_t: T)\n+where\n+    T: Copy,\n+    T: Clone,\n+{\n+    unimplemented!();\n+}\n+\n+pub fn bar<T, U>(_t: T, _u: U)\n+where\n+    T: Copy,\n+    U: Clone,\n+{\n+    unimplemented!();\n+}\n+\n+fn main() {}"}, {"sha": "a72f512b0129a87da9ba8bfd60bbe6fa7782f352", "filename": "tests/ui/type_repetition_in_bounds.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,15 @@\n+error: this type has already been used as a bound predicate\n+  --> $DIR/type_repetition_in_bounds.rs:6:5\n+   |\n+LL |     T: Clone,\n+   |     ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/type_repetition_in_bounds.rs:1:8\n+   |\n+LL | #[deny(clippy::type_repetition_in_bounds)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider combining the bounds: `T: Copy + Clone`\n+\n+error: aborting due to previous error\n+"}, {"sha": "df9b227eeb3f55ad2cc6acb1f69c3ad040d9b11b", "filename": "tests/ui/unnecessary_cast.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,23 @@\n+#![warn(clippy::unnecessary_cast)]\n+#![allow(clippy::no_effect)]\n+\n+fn main() {\n+    // Test cast_unnecessary\n+    1i32 as i32;\n+    1f32 as f32;\n+    false as bool;\n+    &1i32 as &i32;\n+\n+    // macro version\n+    macro_rules! foo {\n+        ($a:ident, $b:ident) => {\n+            #[allow(unused)]\n+            pub fn $a() -> $b {\n+                1 as $b\n+            }\n+        };\n+    }\n+    foo!(a, i32);\n+    foo!(b, f32);\n+    foo!(c, f64);\n+}"}, {"sha": "8981d13e8eabb61c1e2888f237af5016c8e9ccbe", "filename": "tests/ui/unnecessary_cast.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,22 @@\n+error: casting to the same type is unnecessary (`i32` -> `i32`)\n+  --> $DIR/unnecessary_cast.rs:6:5\n+   |\n+LL |     1i32 as i32;\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n+\n+error: casting to the same type is unnecessary (`f32` -> `f32`)\n+  --> $DIR/unnecessary_cast.rs:7:5\n+   |\n+LL |     1f32 as f32;\n+   |     ^^^^^^^^^^^\n+\n+error: casting to the same type is unnecessary (`bool` -> `bool`)\n+  --> $DIR/unnecessary_cast.rs:8:5\n+   |\n+LL |     false as bool;\n+   |     ^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "8c659df831e3d949a1aa558514c08a1dab28ad63", "filename": "tests/ui/unnecessary_cast_fixable.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.fixed?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+#![warn(clippy::unnecessary_cast)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+\n+fn main() {\n+    // casting integer literal to float is unnecessary\n+    100_f32;\n+    100_f64;\n+    100_f64;\n+    // Should not trigger\n+    #[rustfmt::skip]\n+    let v = vec!(1);\n+    &v as &[i32];\n+    1.0 as f64;\n+    1 as u64;\n+}"}, {"sha": "7bab5540c42f7f866f55e945fb79b5047364238e", "filename": "tests/ui/unnecessary_cast_fixable.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+#![warn(clippy::unnecessary_cast)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+\n+fn main() {\n+    // casting integer literal to float is unnecessary\n+    100 as f32;\n+    100 as f64;\n+    100_i32 as f64;\n+    // Should not trigger\n+    #[rustfmt::skip]\n+    let v = vec!(1);\n+    &v as &[i32];\n+    1.0 as f64;\n+    1 as u64;\n+}"}, {"sha": "74616bb90822b547670eeeb0118396a1a016880f", "filename": "tests/ui/unnecessary_cast_fixable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -0,0 +1,22 @@\n+error: casting integer literal to f32 is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:8:5\n+   |\n+LL |     100 as f32;\n+   |     ^^^^^^^^^^ help: try: `100_f32`\n+   |\n+   = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n+\n+error: casting integer literal to f64 is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:9:5\n+   |\n+LL |     100 as f64;\n+   |     ^^^^^^^^^^ help: try: `100_f64`\n+\n+error: casting integer literal to f64 is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:10:5\n+   |\n+LL |     100_i32 as f64;\n+   |     ^^^^^^^^^^^^^^ help: try: `100_f64`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "79b99ff1d1d21ea52edf2af8a1696f5be53a6ffd", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -68,7 +68,7 @@ error: using `clone` on a double-reference; this will copy the reference instead\n LL |     let z: &Vec<_> = y.clone();\n    |                      ^^^^^^^^^\n    |\n-   = note: #[deny(clippy::clone_double_ref)] on by default\n+   = note: `#[deny(clippy::clone_double_ref)]` on by default\n help: try dereferencing it\n    |\n LL |     let z: &Vec<_> = &(*y).clone();"}, {"sha": "40968822493ff9c03421d62b38588b1b83be6554", "filename": "tests/ui/unused_io_amount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -4,9 +4,9 @@\n use std::io;\n \n fn try_macro<T: io::Read + io::Write>(s: &mut T) -> io::Result<()> {\n-    try!(s.write(b\"test\"));\n+    r#try!(s.write(b\"test\"));\n     let mut buf = [0u8; 4];\n-    try!(s.read(&mut buf));\n+    r#try!(s.read(&mut buf));\n     Ok(())\n }\n "}, {"sha": "dbf701e06f9a3c3795478881709983b4a5e2be34", "filename": "tests/ui/unused_io_amount.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -1,17 +1,17 @@\n error: handle written amount returned or use `Write::write_all` instead\n   --> $DIR/unused_io_amount.rs:7:5\n    |\n-LL |     try!(s.write(b\"test\"));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     r#try!(s.write(b\"test\"));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unused-io-amount` implied by `-D warnings`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: handle read amount returned or use `Read::read_exact` instead\n   --> $DIR/unused_io_amount.rs:9:5\n    |\n-LL |     try!(s.read(&mut buf));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     r#try!(s.read(&mut buf));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "86ed7ca26f94302b7cff6404ad45992e78f8db90", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -265,13 +265,21 @@ mod nesting {\n \n     enum Enum {\n         A,\n+        B(u64),\n+        C { field: bool },\n     }\n     impl Enum {\n         fn method() {\n             #[allow(unused_imports)]\n             use self::Enum::*; // Issue 3425\n             static STATIC: Enum = Enum::A; // Can't use Self as type\n         }\n+\n+        fn method2() {\n+            let _ = Self::B(42);\n+            let _ = Self::C { field: true };\n+            let _ = Self::A;\n+        }\n     }\n }\n "}, {"sha": "cabb9a7f82ac595ec0ca945d46e4e819c4f702c3", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -265,13 +265,21 @@ mod nesting {\n \n     enum Enum {\n         A,\n+        B(u64),\n+        C { field: bool },\n     }\n     impl Enum {\n         fn method() {\n             #[allow(unused_imports)]\n             use self::Enum::*; // Issue 3425\n             static STATIC: Enum = Enum::A; // Can't use Self as type\n         }\n+\n+        fn method2() {\n+            let _ = Enum::B(42);\n+            let _ = Enum::C { field: true };\n+            let _ = Enum::A;\n+        }\n     }\n }\n "}, {"sha": "12dd672e3f4b50456d4b2461f87ad3b86a23b7c8", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -175,22 +175,40 @@ LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:304:13\n+  --> $DIR/use_self.rs:279:21\n+   |\n+LL |             let _ = Enum::B(42);\n+   |                     ^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:280:21\n+   |\n+LL |             let _ = Enum::C { field: true };\n+   |                     ^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:281:21\n+   |\n+LL |             let _ = Enum::A;\n+   |                     ^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:312:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:305:13\n+  --> $DIR/use_self.rs:313:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:307:13\n+  --> $DIR/use_self.rs:315:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 31 previous errors\n+error: aborting due to 34 previous errors\n "}, {"sha": "c599da8baf9b36ddf5c1050c9fd81d83ca073358", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -4,7 +4,7 @@ error: equal expressions as operands to `/`\n LL |     let nan = 0.0 / 0.0;\n    |               ^^^^^^^^^\n    |\n-   = note: #[deny(clippy::eq_op)] on by default\n+   = note: `#[deny(clippy::eq_op)]` on by default\n \n error: constant division of 0.0 with 0.0 will always result in NaN\n   --> $DIR/zero_div_zero.rs:4:15"}, {"sha": "06b867df396103cacf65d2e376d008b8e643424b", "filename": "util/export.py", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/05d9f884e17599a72f6725018747f1732a2859f8/util%2Fexport.py", "raw_url": "https://github.com/rust-lang/rust/raw/05d9f884e17599a72f6725018747f1732a2859f8/util%2Fexport.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fexport.py?ref=05d9f884e17599a72f6725018747f1732a2859f8", "patch": "@@ -2,6 +2,7 @@\n \n # Build the gh-pages\n \n+from collections import OrderedDict\n import re\n import sys\n import json\n@@ -21,33 +22,29 @@ def parse_lint_def(lint):\n     lint_dict['id'] = lint.name\n     lint_dict['group'] = lint.group\n     lint_dict['level'] = lint.level\n-    lint_dict['docs'] = {}\n+    lint_dict['docs'] = OrderedDict()\n \n     last_section = None\n \n     for line in lint.doc:\n-        if len(line.strip()) == 0 and not last_section.startswith(\"Example\"):\n-            continue\n-\n         match = re.match(lint_subheadline, line)\n         if match:\n             last_section = match.groups()[0]\n-        if match:\n             text = match.groups()[1]\n         else:\n             text = line\n \n         if not last_section:\n-            log.warn(\"Skipping comment line as it was not preceded by a heading\")\n+            log.warning(\"Skipping comment line as it was not preceded by a heading\")\n             log.debug(\"in lint `%s`, line `%s`\", lint.name, line)\n \n-        fragment = lint_dict['docs'].get(last_section, \"\")\n-        if text == \"\\n\":\n-            line = fragment + text\n-        else:\n-            line = (fragment + \"\\n\" + text).strip()\n+        if last_section not in lint_dict['docs']:\n+            lint_dict['docs'][last_section] = \"\"\n+\n+        lint_dict['docs'][last_section] += text + \"\\n\"\n \n-        lint_dict['docs'][last_section] = line\n+    for section in lint_dict['docs']:\n+        lint_dict['docs'][section] = lint_dict['docs'][section].strip()\n \n     return lint_dict\n "}]}