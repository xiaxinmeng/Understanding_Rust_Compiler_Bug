{"sha": "e554d8617d947905cc9c0e054849fbb5e7e87705", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTRkODYxN2Q5NDc5MDVjYzljMGUwNTQ4NDlmYmI1ZTdlODc3MDU=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-04-29T23:50:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-29T23:50:53Z"}, "message": "Merge branch 'master' into imports_indent", "tree": {"sha": "b13b91b3be6060ce65629d401cba919c34d332bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b13b91b3be6060ce65629d401cba919c34d332bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e554d8617d947905cc9c0e054849fbb5e7e87705", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa5lpdCRBK7hj4Ov3rIwAAdHIIAJDg5R7HF4+BZSl0riEYW/6N\nkyOd2c5aIorlJQpvIwHWWhKZ9+FzjezJ2MsmEyvxxHn8d75KYTIaESLVdyrL5yRV\nyorCyQ1q4JtnMdTcX77RzmAogH5Qj9ErfY01aXVzLav87c+Ou+TFmm29rAs0gnn6\nZ1tLTXlmaNgjWiR9ka/cFLlHJ+sxz+rknxvGfM7KB0F3rBUk8duRPXKC06JecbuG\n2EmeUKPdxOrMKw+NKmz1soCAJr7CduEWNFwCwPyeq50JnfZRjqk5EwpIf6JbIj6q\nm1mXzKOjS8g9DsmIA67n0gmcjK52mI/RqvG6jX5rCuiziY0jjinwJ6qFux9/zVg=\n=XLgC\n-----END PGP SIGNATURE-----\n", "payload": "tree b13b91b3be6060ce65629d401cba919c34d332bc\nparent ce5efaf16fc9f080a8b39e8d2c7582dbb846a02e\nparent 1b7195695a3cef7bbe6ee2630e963dc24e36f17a\nauthor Nick Cameron <nrc@ncameron.org> 1525045853 +1200\ncommitter GitHub <noreply@github.com> 1525045853 +1200\n\nMerge branch 'master' into imports_indent"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e554d8617d947905cc9c0e054849fbb5e7e87705", "html_url": "https://github.com/rust-lang/rust/commit/e554d8617d947905cc9c0e054849fbb5e7e87705", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e554d8617d947905cc9c0e054849fbb5e7e87705/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce5efaf16fc9f080a8b39e8d2c7582dbb846a02e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce5efaf16fc9f080a8b39e8d2c7582dbb846a02e", "html_url": "https://github.com/rust-lang/rust/commit/ce5efaf16fc9f080a8b39e8d2c7582dbb846a02e"}, {"sha": "1b7195695a3cef7bbe6ee2630e963dc24e36f17a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b7195695a3cef7bbe6ee2630e963dc24e36f17a", "html_url": "https://github.com/rust-lang/rust/commit/1b7195695a3cef7bbe6ee2630e963dc24e36f17a"}], "stats": {"total": 269, "additions": 174, "deletions": 95}, "files": [{"sha": "962b315de051ab76f2d2bbd73fcc0d81c1b450e0", "filename": "src/bin/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -18,7 +18,7 @@ extern crate rustfmt_nightly as rustfmt;\n use std::env;\n use std::fs::File;\n use std::io::{self, stdout, Read, Write};\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n use failure::err_msg;\n \n@@ -184,7 +184,7 @@ fn execute(opts: &Options) -> FmtResult<(WriteMode, Summary)> {\n         Operation::Stdin { input } => {\n             // try to read config from local directory\n             let options = CliOptions::from_matches(&matches)?;\n-            let (mut config, _) = load_config(None, Some(&options))?;\n+            let (mut config, _) = load_config(Some(Path::new(\".\")), Some(&options))?;\n \n             // write_mode is always Plain for Stdin.\n             config.set().write_mode(WriteMode::Plain);"}, {"sha": "55fe2aa571b60ed2d2560d8488583f4e80664d5f", "filename": "src/expr.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -76,7 +76,7 @@ pub fn format_expr(\n             expr.span,\n             context,\n             shape,\n-            None,\n+            choose_separator_tactic(context, expr.span),\n             None,\n         ),\n         ast::ExprKind::Lit(ref l) => rewrite_literal(context, l, shape),\n@@ -1342,6 +1342,18 @@ const SPECIAL_MACRO_WHITELIST: &[(&str, usize)] = &[\n     (\"debug_assert_ne!\", 2),\n ];\n \n+fn choose_separator_tactic(context: &RewriteContext, span: Span) -> Option<SeparatorTactic> {\n+    if context.inside_macro() {\n+        if span_ends_with_comma(context, span) {\n+            Some(SeparatorTactic::Always)\n+        } else {\n+            Some(SeparatorTactic::Never)\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n pub fn rewrite_call(\n     context: &RewriteContext,\n     callee: &str,\n@@ -1356,15 +1368,7 @@ pub fn rewrite_call(\n         shape,\n         span,\n         context.config.width_heuristics().fn_call_width,\n-        if context.inside_macro() {\n-            if span_ends_with_comma(context, span) {\n-                Some(SeparatorTactic::Always)\n-            } else {\n-                Some(SeparatorTactic::Never)\n-            }\n-        } else {\n-            None\n-        },\n+        choose_separator_tactic(context, span),\n     )\n }\n \n@@ -1442,11 +1446,14 @@ pub fn is_nested_call(expr: &ast::Expr) -> bool {\n pub fn span_ends_with_comma(context: &RewriteContext, span: Span) -> bool {\n     let mut result: bool = Default::default();\n     let mut prev_char: char = Default::default();\n+    let closing_delimiters = &[')', '}', ']'];\n \n     for (kind, c) in CharClasses::new(context.snippet(span).chars()) {\n         match c {\n             _ if kind.is_comment() || c.is_whitespace() => continue,\n-            ')' | '}' => result = result && prev_char != ')' && prev_char != '}',\n+            c if closing_delimiters.contains(&c) => {\n+                result &= !closing_delimiters.contains(&prev_char);\n+            }\n             ',' => result = true,\n             _ => result = false,\n         }"}, {"sha": "8963f62748b99c011c5a0828163b8ab16e557c51", "filename": "src/imports.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -15,6 +15,7 @@ use syntax::ast::{self, UseTreeKind};\n use syntax::codemap::{self, BytePos, Span, DUMMY_SP};\n \n use codemap::SpanUtils;\n+use comment::combine_strs_with_missing_comments;\n use config::IndentStyle;\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n use rewrite::{Rewrite, RewriteContext};\n@@ -118,6 +119,17 @@ impl PartialEq for UseTree {\n }\n impl Eq for UseTree {}\n \n+impl Spanned for UseTree {\n+    fn span(&self) -> Span {\n+        let lo = if let Some(ref attrs) = self.attrs {\n+            attrs.iter().next().map_or(self.span.lo(), |a| a.span.lo())\n+        } else {\n+            self.span.lo()\n+        };\n+        mk_sp(lo, self.span.hi())\n+    }\n+}\n+\n impl UseSegment {\n     // Clone a version of self with any top-level alias removed.\n     fn remove_alias(&self) -> UseSegment {\n@@ -219,26 +231,26 @@ impl fmt::Display for UseTree {\n impl UseTree {\n     // Rewrite use tree with `use ` and a trailing `;`.\n     pub fn rewrite_top_level(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        let mut result = String::with_capacity(256);\n-        if let Some(ref attrs) = self.attrs {\n-            result.push_str(&attrs.rewrite(context, shape)?);\n-            if !result.is_empty() {\n-                result.push_str(&shape.indent.to_string_with_newline(context.config));\n-            }\n-        }\n-\n         let vis = self.visibility\n             .as_ref()\n             .map_or(Cow::from(\"\"), |vis| ::utils::format_visibility(&vis));\n-        result.push_str(&self.rewrite(context, shape.offset_left(vis.len())?)\n+        let use_str = self.rewrite(context, shape.offset_left(vis.len())?)\n             .map(|s| {\n                 if s.is_empty() {\n                     s.to_owned()\n                 } else {\n                     format!(\"{}use {};\", vis, s)\n                 }\n-            })?);\n-        Some(result)\n+            })?;\n+        if let Some(ref attrs) = self.attrs {\n+            let attr_str = attrs.rewrite(context, shape)?;\n+            let lo = attrs.last().as_ref()?.span().hi();\n+            let hi = self.span.lo();\n+            let span = mk_sp(lo, hi);\n+            combine_strs_with_missing_comments(context, &attr_str, &use_str, span, shape, false)\n+        } else {\n+            Some(use_str)\n+        }\n     }\n \n     // FIXME: Use correct span?\n@@ -267,7 +279,7 @@ impl UseTree {\n                     use_tree,\n                     None,\n                     Some(item.vis.clone()),\n-                    Some(item.span().lo()),\n+                    Some(item.span.lo()),\n                     if item.attrs.is_empty() {\n                         None\n                     } else {"}, {"sha": "0e6d17119bc805c6b4f3358812f6e6413e97f54b", "filename": "src/items.rs", "status": "modified", "additions": 66, "deletions": 62, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -37,13 +37,7 @@ use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use spanned::Spanned;\n use types::TraitTyParamBounds;\n-use utils::{\n-    colon_spaces, contains_skip, first_line_width, format_abi, format_auto, format_constness,\n-    format_defaultness, format_mutability, format_unsafety, format_visibility,\n-    is_attributes_extendable, last_line_contains_single_line_comment, last_line_used_width,\n-    last_line_width, mk_sp, semicolon_for_expr, starts_with_newline, stmt_expr,\n-    trimmed_last_line_width,\n-};\n+use utils::*;\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -464,35 +458,39 @@ impl<'a> FmtVisitor<'a> {\n \n         self.last_pos = body_start;\n \n-        self.block_indent = self.block_indent.block_indent(self.config);\n-        let variant_list = self.format_variant_list(enum_def, body_start, span.hi() - BytePos(1));\n-        match variant_list {\n-            Some(ref body_str) => self.push_str(body_str),\n-            None => self.format_missing_no_indent(span.hi() - BytePos(1)),\n-        }\n-        self.block_indent = self.block_indent.block_unindent(self.config);\n-\n-        if variant_list.is_some() || contains_comment(&enum_snippet[brace_pos..]) {\n-            let indent_str = self.block_indent.to_string(self.config);\n-            self.push_str(&indent_str);\n+        match self.format_variant_list(enum_def, body_start, span.hi()) {\n+            Some(ref s) if enum_def.variants.is_empty() => self.push_str(s),\n+            rw => {\n+                self.push_rewrite(mk_sp(body_start, span.hi()), rw);\n+                self.block_indent = self.block_indent.block_unindent(self.config);\n+            }\n         }\n-        self.push_str(\"}\");\n-        self.last_pos = span.hi();\n     }\n \n     // Format the body of an enum definition\n     fn format_variant_list(\n-        &self,\n+        &mut self,\n         enum_def: &ast::EnumDef,\n         body_lo: BytePos,\n         body_hi: BytePos,\n     ) -> Option<String> {\n         if enum_def.variants.is_empty() {\n-            return None;\n+            let mut buffer = String::with_capacity(128);\n+            // 1 = \"}\"\n+            let span = mk_sp(body_lo, body_hi - BytePos(1));\n+            format_empty_struct_or_tuple(\n+                &self.get_context(),\n+                span,\n+                self.block_indent,\n+                &mut buffer,\n+                \"\",\n+                \"}\",\n+            );\n+            return Some(buffer);\n         }\n         let mut result = String::with_capacity(1024);\n-        let indentation = self.block_indent.to_string_with_newline(self.config);\n-        result.push_str(&indentation);\n+        let original_offset = self.block_indent;\n+        self.block_indent = self.block_indent.block_indent(self.config);\n \n         let itemize_list_with = |one_line_width: usize| {\n             itemize_list(\n@@ -537,7 +535,8 @@ impl<'a> FmtVisitor<'a> {\n \n         let list = write_list(&items, &fmt)?;\n         result.push_str(&list);\n-        result.push('\\n');\n+        result.push_str(&original_offset.to_string_with_newline(self.config));\n+        result.push('}');\n         Some(result)\n     }\n \n@@ -1201,18 +1200,8 @@ pub fn format_struct_struct(\n     }\n \n     if fields.is_empty() {\n-        let snippet = context.snippet(mk_sp(body_lo, span.hi() - BytePos(1)));\n-        if snippet.trim().is_empty() {\n-            // `struct S {}`\n-        } else if snippet.trim_right_matches(&[' ', '\\t'][..]).ends_with('\\n') {\n-            // fix indent\n-            result.push_str(snippet.trim_right());\n-            result.push('\\n');\n-            result.push_str(&offset.to_string(context.config));\n-        } else {\n-            result.push_str(snippet);\n-        }\n-        result.push('}');\n+        let inner_span = mk_sp(body_lo, span.hi() - BytePos(1));\n+        format_empty_struct_or_tuple(context, inner_span, offset, &mut result, \"\", \"}\");\n         return Some(result);\n     }\n \n@@ -1253,6 +1242,41 @@ fn get_bytepos_after_visibility(vis: &ast::Visibility, default_span: Span) -> By\n     }\n }\n \n+// Format tuple or struct without any fields. We need to make sure that the comments\n+// inside the delimiters are preserved.\n+fn format_empty_struct_or_tuple(\n+    context: &RewriteContext,\n+    span: Span,\n+    offset: Indent,\n+    result: &mut String,\n+    opener: &str,\n+    closer: &str,\n+) {\n+    // 3 = \" {}\" or \"();\"\n+    let used_width = last_line_used_width(&result, offset.width()) + 3;\n+    if used_width > context.config.max_width() {\n+        result.push_str(&offset.to_string_with_newline(context.config))\n+    }\n+    result.push_str(opener);\n+    match rewrite_missing_comment(span, Shape::indented(offset, context.config), context) {\n+        Some(ref s) if s.is_empty() => (),\n+        Some(ref s) => {\n+            if !is_single_line(s) || first_line_contains_single_line_comment(s) {\n+                let nested_indent_str = offset\n+                    .block_indent(context.config)\n+                    .to_string_with_newline(context.config);\n+                result.push_str(&nested_indent_str);\n+            }\n+            result.push_str(s);\n+            if last_line_contains_single_line_comment(s) {\n+                result.push_str(&offset.to_string_with_newline(context.config));\n+            }\n+        }\n+        None => result.push_str(context.snippet(span)),\n+    }\n+    result.push_str(closer);\n+}\n+\n fn format_tuple_struct(\n     context: &RewriteContext,\n     struct_parts: &StructParts,\n@@ -1316,31 +1340,11 @@ fn format_tuple_struct(\n     };\n \n     if fields.is_empty() {\n-        // 3 = `();`\n-        let used_width = last_line_used_width(&result, offset.width()) + 3;\n-        if used_width > context.config.max_width() {\n-            result.push('\\n');\n-            result.push_str(&offset\n-                .block_indent(context.config)\n-                .to_string(context.config))\n-        }\n-        result.push('(');\n-        let snippet = context.snippet(mk_sp(\n-            body_lo,\n-            context\n-                .snippet_provider\n-                .span_before(mk_sp(body_lo, span.hi()), \")\"),\n-        ));\n-        if snippet.is_empty() {\n-            // `struct S ()`\n-        } else if snippet.trim_right_matches(&[' ', '\\t'][..]).ends_with('\\n') {\n-            result.push_str(snippet.trim_right());\n-            result.push('\\n');\n-            result.push_str(&offset.to_string(context.config));\n-        } else {\n-            result.push_str(snippet);\n-        }\n-        result.push(')');\n+        let body_hi = context\n+            .snippet_provider\n+            .span_before(mk_sp(body_lo, span.hi()), \")\");\n+        let inner_span = mk_sp(body_lo, body_hi);\n+        format_empty_struct_or_tuple(context, inner_span, offset, &mut result, \"(\", \")\");\n     } else {\n         let shape = Shape::indented(offset, context.config).sub_width(1)?;\n         let fields = &fields.iter().collect::<Vec<_>>();"}, {"sha": "027b64e8317a2b72f2ee2b3f1546bd0bd82bb25a", "filename": "src/reorder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -128,8 +128,8 @@ fn rewrite_reorderable_items(\n                 cloned.iter(),\n                 \"\",\n                 \";\",\n-                |item| item.span.lo(),\n-                |item| item.span.hi(),\n+                |item| item.span().lo(),\n+                |item| item.span().hi(),\n                 |_item| Some(\"\".to_owned()),\n                 span.lo(),\n                 span.hi(),"}, {"sha": "c1d614e885a6f230d438d96ea7850680d190cfeb", "filename": "src/utils.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -136,6 +136,16 @@ pub fn outer_attributes(attrs: &[ast::Attribute]) -> Vec<ast::Attribute> {\n     filter_attributes(attrs, ast::AttrStyle::Outer)\n }\n \n+#[inline]\n+pub fn is_single_line(s: &str) -> bool {\n+    s.chars().find(|&c| c == '\\n').is_none()\n+}\n+\n+#[inline]\n+pub fn first_line_contains_single_line_comment(s: &str) -> bool {\n+    s.lines().next().map_or(false, |l| l.contains(\"//\"))\n+}\n+\n #[inline]\n pub fn last_line_contains_single_line_comment(s: &str) -> bool {\n     s.lines().last().map_or(false, |l| l.contains(\"//\"))"}, {"sha": "64e151106098c4ce222c92daa56b5464bcc7b16b", "filename": "tests/source/enum.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -192,3 +192,7 @@ pub enum QlError {\n     // (kind, input, expected)\n     #[fail(display = \"Could not find {}: Found: {}, expected: {:?}\", 0, 1, 2)] ResolveError(&'static str, String, Option<String>),\n }\n+\n+// #2594\n+enum Foo {}\n+enum Bar { }"}, {"sha": "09ba23c82021cd33fc8cd94c8864b2f1c330b9d1", "filename": "tests/source/imports.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Fsource%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Fsource%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -88,3 +88,8 @@ use a::{b::{c::*}};\n use a::{b::{c::{}}};\n use a::{b::{c::d}};\n use a::{b::{c::{xxx, yyy, zzz}}};\n+\n+// #2645\n+/// This line is not affected.\n+// This line is deleted.\n+use c;"}, {"sha": "204c3c98a67e209b16a4bdb8ecd22539756457a8", "filename": "tests/source/macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -380,3 +380,11 @@ fn foo() {\n     foo!(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n     foo!(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,);\n }\n+\n+// #2652\n+// Preserve trailing comma inside macro, even if it looks an array.\n+macro_rules! bar {\n+    ($m:ident) => {\n+        $m!([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]);\n+    };\n+}"}, {"sha": "f6ee4ed1f0ab2c7e44b28558272af8d21db36c98", "filename": "tests/target/configs/struct_field_align_threshold/20.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -255,8 +255,12 @@ struct Foo {\n struct Foo {\n     // trailing space ->\n }\n-struct Foo { /* comment */ }\n-struct Foo( /* comment */ );\n+struct Foo {\n+    // comment\n+}\n+struct Foo(\n+    // comment\n+);\n \n struct LongStruct {\n     a: A,"}, {"sha": "e429e45287e2a5327ee3844ac1ce1f0583d49a5a", "filename": "tests/target/enum.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -258,3 +258,7 @@ pub enum QlError {\n     #[fail(display = \"Could not find {}: Found: {}, expected: {:?}\", 0, 1, 2)]\n     ResolveError(&'static str, String, Option<String>),\n }\n+\n+// #2594\n+enum Foo {}\n+enum Bar {}"}, {"sha": "68d9bb5519eaf5d4fae39bbf42b736cbfe619ab8", "filename": "tests/target/imports.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -110,3 +110,8 @@ use fooo::{\n use a::b::c::d;\n use a::b::c::*;\n use a::b::c::{xxx, yyy, zzz};\n+\n+// #2645\n+/// This line is not affected.\n+// This line is deleted.\n+use c;"}, {"sha": "c4bc82d85d4065693c86720400302ce68077c3c5", "filename": "tests/target/issue-977.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fissue-977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fissue-977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-977.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -4,7 +4,9 @@\n trait NameC {\n     // comment\n }\n-struct FooC { /* comment */ }\n+struct FooC {\n+    // comment\n+}\n enum MooC {\n     // comment\n }"}, {"sha": "f77814b4ee0d224d05eecf39c1c62e9d03ff6dc5", "filename": "tests/target/macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -961,3 +961,11 @@ fn foo() {\n         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n     );\n }\n+\n+// #2652\n+// Preserve trailing comma inside macro, even if it looks an array.\n+macro_rules! bar {\n+    ($m:ident) => {\n+        $m!([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]);\n+    };\n+}"}, {"sha": "7f9ef1e6164549bce2b8e17c03858c8839b335a2", "filename": "tests/target/structs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -228,8 +228,12 @@ struct Foo {\n struct Foo {\n     // trailing space ->\n }\n-struct Foo { /* comment */ }\n-struct Foo( /* comment */ );\n+struct Foo {\n+    // comment\n+}\n+struct Foo(\n+    // comment\n+);\n \n struct LongStruct {\n     a: A,"}, {"sha": "6de682297af7a141d7599836303f78d05a377a76", "filename": "tests/target/unions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e554d8617d947905cc9c0e054849fbb5e7e87705/tests%2Ftarget%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funions.rs?ref=e554d8617d947905cc9c0e054849fbb5e7e87705", "patch": "@@ -136,7 +136,9 @@ union Foo {\n union Foo {\n     // trailing space ->\n }\n-union Foo { /* comment */ }\n+union Foo {\n+    // comment\n+}\n \n union LongUnion {\n     a: A,"}]}