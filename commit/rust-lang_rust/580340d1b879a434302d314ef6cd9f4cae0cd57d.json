{"sha": "580340d1b879a434302d314ef6cd9f4cae0cd57d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MDM0MGQxYjg3OWE0MzQzMDJkMzE0ZWY2Y2Q5ZjRjYWUwY2Q1N2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T12:30:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T12:30:11Z"}, "message": "mut bindings", "tree": {"sha": "bf13870f08fd24a0d1ab557e14231246d8ea1b0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf13870f08fd24a0d1ab557e14231246d8ea1b0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/580340d1b879a434302d314ef6cd9f4cae0cd57d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/580340d1b879a434302d314ef6cd9f4cae0cd57d", "html_url": "https://github.com/rust-lang/rust/commit/580340d1b879a434302d314ef6cd9f4cae0cd57d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/580340d1b879a434302d314ef6cd9f4cae0cd57d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346f6e4f7d364b009d0feb66162314abfd06c81b", "url": "https://api.github.com/repos/rust-lang/rust/commits/346f6e4f7d364b009d0feb66162314abfd06c81b", "html_url": "https://github.com/rust-lang/rust/commit/346f6e4f7d364b009d0feb66162314abfd06c81b"}], "stats": {"total": 187, "additions": 119, "deletions": 68}, "files": [{"sha": "a5d13a1246843c0016c6f69fdee88fd0a14f15a1", "filename": "src/parser/grammar/patterns.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/580340d1b879a434302d314ef6cd9f4cae0cd57d/src%2Fparser%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580340d1b879a434302d314ef6cd9f4cae0cd57d/src%2Fparser%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fpatterns.rs?ref=580340d1b879a434302d314ef6cd9f4cae0cd57d", "patch": "@@ -4,7 +4,7 @@ pub(super) fn pattern(p: &mut Parser) {\n     match p.current() {\n         UNDERSCORE => placeholder_pat(p),\n         AMPERSAND => ref_pat(p),\n-        IDENT | REF_KW => bind_pat(p),\n+        IDENT | REF_KW | MUT_KW => bind_pat(p),\n         _ => p.err_and_bump(\"expected pattern\"),\n     }\n }\n@@ -35,14 +35,18 @@ fn ref_pat(p: &mut Parser) {\n // test bind_pat\n // fn main() {\n //     let a = ();\n-//     let ref b = ();\n-//     let ref mut c = ();\n-//     let d @ _ = ();\n+//     let mut b = ();\n+//     let ref c = ();\n+//     let ref mut d = ();\n+//     let e @ _ = ();\n+//     let ref mut f @ g @ _ = ();\n // }\n fn bind_pat(p: &mut Parser) {\n     let m = p.start();\n     if p.eat(REF_KW) {\n         p.eat(MUT_KW);\n+    } else {\n+        p.eat(MUT_KW);\n     }\n     name(p);\n     if p.eat(AT) {"}, {"sha": "820a9e72ce563a869028605287357cfc50ffdaa0", "filename": "tests/data/parser/inline/0034_bind_pat.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/580340d1b879a434302d314ef6cd9f4cae0cd57d/tests%2Fdata%2Fparser%2Finline%2F0034_bind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580340d1b879a434302d314ef6cd9f4cae0cd57d/tests%2Fdata%2Fparser%2Finline%2F0034_bind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0034_bind_pat.rs?ref=580340d1b879a434302d314ef6cd9f4cae0cd57d", "patch": "@@ -1,6 +1,8 @@\n fn main() {\n     let a = ();\n-    let ref b = ();\n-    let ref mut c = ();\n-    let d @ _ = ();\n+    let mut b = ();\n+    let ref c = ();\n+    let ref mut d = ();\n+    let e @ _ = ();\n+    let ref mut f @ g @ _ = ();\n }"}, {"sha": "f4eb8bc4d1e143df4f0c22654330d6ed45f102ae", "filename": "tests/data/parser/inline/0034_bind_pat.txt", "status": "modified", "additions": 77, "deletions": 32, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/580340d1b879a434302d314ef6cd9f4cae0cd57d/tests%2Fdata%2Fparser%2Finline%2F0034_bind_pat.txt", "raw_url": "https://github.com/rust-lang/rust/raw/580340d1b879a434302d314ef6cd9f4cae0cd57d/tests%2Fdata%2Fparser%2Finline%2F0034_bind_pat.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0034_bind_pat.txt?ref=580340d1b879a434302d314ef6cd9f4cae0cd57d", "patch": "@@ -1,5 +1,5 @@\n-FILE@[0; 94)\n-  FN_ITEM@[0; 94)\n+FILE@[0; 146)\n+  FN_ITEM@[0; 146)\n     FN_KW@[0; 2)\n     NAME@[2; 7)\n       WHITESPACE@[2; 3)\n@@ -8,7 +8,7 @@ FILE@[0; 94)\n       L_PAREN@[7; 8)\n       R_PAREN@[8; 9)\n       WHITESPACE@[9; 10)\n-    BLOCK@[10; 94)\n+    BLOCK@[10; 146)\n       L_CURLY@[10; 11)\n       LET_STMT@[11; 32)\n         WHITESPACE@[11; 16)\n@@ -29,7 +29,7 @@ FILE@[0; 94)\n         LET_KW@[32; 35)\n         BIND_PAT@[35; 42)\n           WHITESPACE@[35; 36)\n-          REF_KW@[36; 39)\n+          MUT_KW@[36; 39)\n           NAME@[39; 42)\n             WHITESPACE@[39; 40)\n             IDENT@[40; 41) \"b\"\n@@ -41,42 +41,87 @@ FILE@[0; 94)\n           R_PAREN@[45; 46)\n         SEMI@[46; 47)\n         WHITESPACE@[47; 52)\n-      LET_STMT@[52; 76)\n+      LET_STMT@[52; 72)\n         LET_KW@[52; 55)\n-        BIND_PAT@[55; 66)\n+        BIND_PAT@[55; 62)\n           WHITESPACE@[55; 56)\n           REF_KW@[56; 59)\n-          WHITESPACE@[59; 60)\n-          MUT_KW@[60; 63)\n-          NAME@[63; 66)\n-            WHITESPACE@[63; 64)\n-            IDENT@[64; 65) \"c\"\n-            WHITESPACE@[65; 66)\n-        EQ@[66; 67)\n-        TUPLE_EXPR@[67; 70)\n-          WHITESPACE@[67; 68)\n-          L_PAREN@[68; 69)\n-          R_PAREN@[69; 70)\n-        SEMI@[70; 71)\n-        WHITESPACE@[71; 76)\n-      LET_STMT@[76; 92)\n-        LET_KW@[76; 79)\n-        BIND_PAT@[79; 86)\n-          NAME@[79; 82)\n-            WHITESPACE@[79; 80)\n-            IDENT@[80; 81) \"d\"\n-            WHITESPACE@[81; 82)\n-          AT@[82; 83)\n-          PLACEHOLDER_PAT@[83; 86)\n+          NAME@[59; 62)\n+            WHITESPACE@[59; 60)\n+            IDENT@[60; 61) \"c\"\n+            WHITESPACE@[61; 62)\n+        EQ@[62; 63)\n+        TUPLE_EXPR@[63; 66)\n+          WHITESPACE@[63; 64)\n+          L_PAREN@[64; 65)\n+          R_PAREN@[65; 66)\n+        SEMI@[66; 67)\n+        WHITESPACE@[67; 72)\n+      LET_STMT@[72; 96)\n+        LET_KW@[72; 75)\n+        BIND_PAT@[75; 86)\n+          WHITESPACE@[75; 76)\n+          REF_KW@[76; 79)\n+          WHITESPACE@[79; 80)\n+          MUT_KW@[80; 83)\n+          NAME@[83; 86)\n             WHITESPACE@[83; 84)\n-            UNDERSCORE@[84; 85)\n+            IDENT@[84; 85) \"d\"\n             WHITESPACE@[85; 86)\n         EQ@[86; 87)\n         TUPLE_EXPR@[87; 90)\n           WHITESPACE@[87; 88)\n           L_PAREN@[88; 89)\n           R_PAREN@[89; 90)\n         SEMI@[90; 91)\n-        WHITESPACE@[91; 92)\n-      R_CURLY@[92; 93)\n-      WHITESPACE@[93; 94)\n+        WHITESPACE@[91; 96)\n+      LET_STMT@[96; 116)\n+        LET_KW@[96; 99)\n+        BIND_PAT@[99; 106)\n+          NAME@[99; 102)\n+            WHITESPACE@[99; 100)\n+            IDENT@[100; 101) \"e\"\n+            WHITESPACE@[101; 102)\n+          AT@[102; 103)\n+          PLACEHOLDER_PAT@[103; 106)\n+            WHITESPACE@[103; 104)\n+            UNDERSCORE@[104; 105)\n+            WHITESPACE@[105; 106)\n+        EQ@[106; 107)\n+        TUPLE_EXPR@[107; 110)\n+          WHITESPACE@[107; 108)\n+          L_PAREN@[108; 109)\n+          R_PAREN@[109; 110)\n+        SEMI@[110; 111)\n+        WHITESPACE@[111; 116)\n+      LET_STMT@[116; 144)\n+        LET_KW@[116; 119)\n+        BIND_PAT@[119; 138)\n+          WHITESPACE@[119; 120)\n+          REF_KW@[120; 123)\n+          WHITESPACE@[123; 124)\n+          MUT_KW@[124; 127)\n+          NAME@[127; 130)\n+            WHITESPACE@[127; 128)\n+            IDENT@[128; 129) \"f\"\n+            WHITESPACE@[129; 130)\n+          AT@[130; 131)\n+          BIND_PAT@[131; 138)\n+            NAME@[131; 134)\n+              WHITESPACE@[131; 132)\n+              IDENT@[132; 133) \"g\"\n+              WHITESPACE@[133; 134)\n+            AT@[134; 135)\n+            PLACEHOLDER_PAT@[135; 138)\n+              WHITESPACE@[135; 136)\n+              UNDERSCORE@[136; 137)\n+              WHITESPACE@[137; 138)\n+        EQ@[138; 139)\n+        TUPLE_EXPR@[139; 142)\n+          WHITESPACE@[139; 140)\n+          L_PAREN@[140; 141)\n+          R_PAREN@[141; 142)\n+        SEMI@[142; 143)\n+        WHITESPACE@[143; 144)\n+      R_CURLY@[144; 145)\n+      WHITESPACE@[145; 146)"}, {"sha": "21a9468bcab70d757a4fa25255a220867b8a14ec", "filename": "tools/src/lib.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/580340d1b879a434302d314ef6cd9f4cae0cd57d/tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580340d1b879a434302d314ef6cd9f4cae0cd57d/tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Flib.rs?ref=580340d1b879a434302d314ef6cd9f4cae0cd57d", "patch": "@@ -3,24 +3,12 @@ extern crate itertools;\n use std::hash;\n use itertools::Itertools;\n \n-#[derive(Debug, Eq)]\n+#[derive(Debug)]\n pub struct Test {\n     pub name: String,\n     pub text: String,\n }\n \n-impl PartialEq for Test {\n-    fn eq(&self, other: &Test) -> bool {\n-        self.name.eq(&other.name)\n-    }\n-}\n-\n-impl hash::Hash for Test {\n-    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n-        self.name.hash(state)\n-    }\n-}\n-\n pub fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n     let mut res = vec![];\n     let prefix = \"// \";"}, {"sha": "3acb6e7ed0890234b8090cc376c36899008910c2", "filename": "tools/src/main.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/580340d1b879a434302d314ef6cd9f4cae0cd57d/tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580340d1b879a434302d314ef6cd9f4cae0cd57d/tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Fmain.rs?ref=580340d1b879a434302d314ef6cd9f4cae0cd57d", "patch": "@@ -8,7 +8,7 @@ extern crate tools;\n #[macro_use]\n extern crate commandspec;\n \n-use std::{collections::{HashSet, HashMap}, fs, path::Path};\n+use std::{collections::{HashMap}, fs, path::{Path, PathBuf}};\n use clap::{App, Arg, SubCommand};\n use tools::{collect_tests, Test};\n \n@@ -104,21 +104,27 @@ fn gen_tests(verify: bool) -> Result<()> {\n     }\n     let existing = existing_tests(inline_tests_dir)?;\n \n-    for t in existing.difference(&tests) {\n-        panic!(\"Test is deleted: {}\\n{}\", t.name, t.text);\n+    for t in existing.keys().filter(|&t| !tests.contains_key(t)) {\n+        panic!(\"Test is deleted: {}\", t);\n     }\n \n-    let new_tests = tests.difference(&existing);\n-    for (i, t) in new_tests.enumerate() {\n-        let name = format!(\"{:04}_{}.rs\", existing.len() + i + 1, t.name);\n-        let path = inline_tests_dir.join(name);\n-        update(&path, &t.text, verify)?;\n+    let mut new_idx = existing.len() + 2;\n+    for (name, test) in tests {\n+        let path = match existing.get(&name) {\n+            Some((path, _test)) => path.clone(),\n+            None => {\n+                let file_name = format!(\"{:04}_{}.rs\", new_idx, name);\n+                new_idx += 1;\n+                inline_tests_dir.join(file_name)\n+            }\n+        };\n+        update(&path, &test.text, verify)?;\n     }\n     Ok(())\n }\n \n-fn tests_from_dir(dir: &Path) -> Result<HashSet<Test>> {\n-    let mut res = HashSet::new();\n+fn tests_from_dir(dir: &Path) -> Result<HashMap<String, Test>> {\n+    let mut res = HashMap::new();\n     for entry in ::walkdir::WalkDir::new(dir) {\n         let entry = entry.unwrap();\n         if !entry.file_type().is_file() {\n@@ -130,26 +136,32 @@ fn tests_from_dir(dir: &Path) -> Result<HashSet<Test>> {\n         let text = fs::read_to_string(entry.path())?;\n \n         for (_, test) in collect_tests(&text) {\n-            if let Some(old_test) = res.replace(test) {\n+            if let Some(old_test) = res.insert(test.name.clone(), test) {\n                 bail!(\"Duplicate test: {}\", old_test.name)\n             }\n         }\n     }\n     Ok(res)\n }\n \n-fn existing_tests(dir: &Path) -> Result<HashSet<Test>> {\n-    let mut res = HashSet::new();\n+fn existing_tests(dir: &Path) -> Result<HashMap<String, (PathBuf, Test)>> {\n+    let mut res = HashMap::new();\n     for file in fs::read_dir(dir)? {\n         let file = file?;\n         let path = file.path();\n         if path.extension().unwrap_or_default() != \"rs\" {\n             continue;\n         }\n-        let name = path.file_name().unwrap().to_str().unwrap();\n-        let name = name[\"0000_\".len()..name.len() - 3].to_string();\n+        let name = {\n+            let file_name = path.file_name().unwrap().to_str().unwrap();\n+            file_name[5..file_name.len() - 3].to_string()\n+        };\n         let text = fs::read_to_string(&path)?;\n-        res.insert(Test { name, text });\n+        let test = Test { name: name.clone(), text };\n+        match res.insert(name, (path, test)) {\n+            Some(old) => println!(\"Duplicate test: {:?}\", old),\n+            None => (),\n+        }\n     }\n     Ok(res)\n }"}]}