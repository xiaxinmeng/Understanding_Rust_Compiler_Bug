{"sha": "b1387e776c011766e12f6d3ae72e4fa3f59f0fe9", "node_id": "C_kwDOAAsO6NoAKGIxMzg3ZTc3NmMwMTE3NjZlMTJmNmQzYWU3MmU0ZmEzZjU5ZjBmZTk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-23T04:18:02Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-24T17:12:46Z"}, "message": "Don't skip mir typeck if body has errors", "tree": {"sha": "ec2cb9e22b1e3fbb5f44d4471fd06c1d3fdf47b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec2cb9e22b1e3fbb5f44d4471fd06c1d3fdf47b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1387e776c011766e12f6d3ae72e4fa3f59f0fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1387e776c011766e12f6d3ae72e4fa3f59f0fe9", "html_url": "https://github.com/rust-lang/rust/commit/b1387e776c011766e12f6d3ae72e4fa3f59f0fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1387e776c011766e12f6d3ae72e4fa3f59f0fe9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3cbf7c8351dd48dc2e07a1cdc69620f8e40dd2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cbf7c8351dd48dc2e07a1cdc69620f8e40dd2f", "html_url": "https://github.com/rust-lang/rust/commit/b3cbf7c8351dd48dc2e07a1cdc69620f8e40dd2f"}], "stats": {"total": 36, "additions": 9, "deletions": 27}, "files": [{"sha": "b42d5c3d18c97795b4f707018afe2961f5521680", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b1387e776c011766e12f6d3ae72e4fa3f59f0fe9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1387e776c011766e12f6d3ae72e4fa3f59f0fe9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=b1387e776c011766e12f6d3ae72e4fa3f59f0fe9", "patch": "@@ -183,17 +183,10 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         &mut borrowck_context,\n     );\n \n-    let errors_reported = {\n-        let mut verifier = TypeVerifier::new(&mut checker, promoted);\n-        verifier.visit_body(&body);\n-        verifier.errors_reported\n-    };\n-\n-    if !errors_reported {\n-        // if verifier failed, don't do further checks to avoid ICEs\n-        checker.typeck_mir(body);\n-    }\n+    let mut verifier = TypeVerifier::new(&mut checker, promoted);\n+    verifier.visit_body(&body);\n \n+    checker.typeck_mir(body);\n     checker.equate_inputs_and_outputs(&body, universal_regions, &normalized_inputs_and_output);\n     checker.check_signature_annotation(&body);\n \n@@ -294,7 +287,6 @@ struct TypeVerifier<'a, 'b, 'tcx> {\n     cx: &'a mut TypeChecker<'b, 'tcx>,\n     promoted: &'b IndexSlice<Promoted, Body<'tcx>>,\n     last_span: Span,\n-    errors_reported: bool,\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n@@ -383,13 +375,11 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                         };\n                     };\n \n-                    if !self.errors_reported {\n-                        let promoted_body = &self.promoted[promoted];\n-                        self.sanitize_promoted(promoted_body, location);\n+                    let promoted_body = &self.promoted[promoted];\n+                    self.sanitize_promoted(promoted_body, location);\n \n-                        let promoted_ty = promoted_body.return_ty();\n-                        check_err(self, promoted_body, ty, promoted_ty);\n-                    }\n+                    let promoted_ty = promoted_body.return_ty();\n+                    check_err(self, promoted_body, ty, promoted_ty);\n                 } else {\n                     self.cx.ascribe_user_type(\n                         constant.literal.ty(),\n@@ -483,9 +473,6 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n         for local_decl in &body.local_decls {\n             self.sanitize_type(local_decl, local_decl.ty);\n         }\n-        if self.errors_reported {\n-            return;\n-        }\n         self.super_body(body);\n     }\n }\n@@ -495,7 +482,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         cx: &'a mut TypeChecker<'b, 'tcx>,\n         promoted: &'b IndexSlice<Promoted, Body<'tcx>>,\n     ) -> Self {\n-        TypeVerifier { promoted, last_span: cx.body.span, cx, errors_reported: false }\n+        TypeVerifier { promoted, last_span: cx.body.span, cx }\n     }\n \n     fn body(&self) -> &Body<'tcx> {\n@@ -529,7 +516,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         for elem in place.projection.iter() {\n             if place_ty.variant_index.is_none() {\n                 if let Err(guar) = place_ty.ty.error_reported() {\n-                    assert!(self.errors_reported);\n                     return PlaceTy::from_ty(self.tcx().ty_error(guar));\n                 }\n             }\n@@ -593,10 +579,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         self.visit_body(&promoted_body);\n \n-        if !self.errors_reported {\n-            // if verifier failed, don't do further checks to avoid ICEs\n-            self.cx.typeck_mir(promoted_body);\n-        }\n+        self.cx.typeck_mir(promoted_body);\n \n         self.cx.body = parent_body;\n         // Merge the outlives constraints back in, at the given location.\n@@ -762,7 +745,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n     }\n \n     fn error(&mut self) -> Ty<'tcx> {\n-        self.errors_reported = true;\n         self.tcx().ty_error_misc()\n     }\n "}]}