{"sha": "c5069eeef5ba0260f2daed513a28b43ae45445bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MDY5ZWVlZjViYTAyNjBmMmRhZWQ1MTNhMjhiNDNhZTQ1NDQ1YmQ=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-10-12T17:49:08Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "github@adolfo.ochagavia.xyz", "date": "2018-10-13T13:37:44Z"}, "message": "Only fold groups of similar comments", "tree": {"sha": "3e5bb94176cfb12cfcfae3dc00bb578264befdf9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e5bb94176cfb12cfcfae3dc00bb578264befdf9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5069eeef5ba0260f2daed513a28b43ae45445bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5069eeef5ba0260f2daed513a28b43ae45445bd", "html_url": "https://github.com/rust-lang/rust/commit/c5069eeef5ba0260f2daed513a28b43ae45445bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5069eeef5ba0260f2daed513a28b43ae45445bd/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b3737510b97faa7d2fad3c98aa16eed46334703", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b3737510b97faa7d2fad3c98aa16eed46334703", "html_url": "https://github.com/rust-lang/rust/commit/4b3737510b97faa7d2fad3c98aa16eed46334703"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "8aabb5e0b8cbe84e28b2767dc76b4f6a8d1509ae", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c5069eeef5ba0260f2daed513a28b43ae45445bd/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5069eeef5ba0260f2daed513a28b43ae45445bd/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=c5069eeef5ba0260f2daed513a28b43ae45445bd", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     ast,\n     AstNode,\n     File, TextRange, SyntaxNodeRef,\n-    SyntaxKind,\n+    SyntaxKind::{self, *},\n     Direction,\n };\n \n@@ -22,7 +22,7 @@ pub struct Fold {\n \n pub fn folding_ranges(file: &File) -> Vec<Fold> {\n     let mut res = vec![];\n-    let mut group_members = FxHashSet::default();\n+    let mut visited_comments = FxHashSet::default();\n \n     for node in file.syntax().descendants() {\n         // Fold items that span multiple lines\n@@ -32,17 +32,13 @@ pub fn folding_ranges(file: &File) -> Vec<Fold> {\n             }\n         }\n \n-        // Also fold item *groups* that span multiple lines\n-\n-        // Note: we need to skip elements of the group that we have already visited,\n-        // otherwise there will be folds for the whole group and for its sub groups\n-        if group_members.contains(&node) {\n+        // Also fold groups of comments\n+        if visited_comments.contains(&node) {\n             continue;\n         }\n-\n-        if let Some(kind) = fold_kind(node.kind()) {\n-            contiguous_range_for_group(node.kind(), node, &mut group_members)\n-                .map(|range| res.push(Fold { range, kind }));\n+        if node.kind() == COMMENT {\n+            contiguous_range_for_comment(node, &mut visited_comments)\n+                .map(|range| res.push(Fold { range, kind: FoldKind::Comment }));\n         }\n     }\n \n@@ -51,8 +47,8 @@ pub fn folding_ranges(file: &File) -> Vec<Fold> {\n \n fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n     match kind {\n-        SyntaxKind::COMMENT => Some(FoldKind::Comment),\n-        SyntaxKind::USE_ITEM => Some(FoldKind::Imports),\n+        COMMENT => Some(FoldKind::Comment),\n+        USE_ITEM => Some(FoldKind::Imports),\n         _ => None\n     }\n }\n@@ -75,17 +71,17 @@ fn has_newline(\n     false\n }\n \n-fn contiguous_range_for_group<'a>(\n-    group_kind: SyntaxKind,\n+fn contiguous_range_for_comment<'a>(\n     first: SyntaxNodeRef<'a>,\n     visited: &mut FxHashSet<SyntaxNodeRef<'a>>,\n ) -> Option<TextRange> {\n     visited.insert(first);\n \n-    let mut last = first;\n+    // Only fold comments of the same flavor\n+    let group_flavor = ast::Comment::cast(first)?.flavor();\n \n+    let mut last = first;\n     for node in first.siblings(Direction::Next) {\n-        visited.insert(node);\n         if let Some(ws) = ast::Whitespace::cast(node) {\n             // There is a blank line, which means the group ends here\n             if ws.count_newlines_lazy().take(2).count() == 2 {\n@@ -96,13 +92,18 @@ fn contiguous_range_for_group<'a>(\n             continue;\n         }\n \n-        // The group ends when an element of a different kind is reached\n-        if node.kind() != group_kind {\n-            break;\n+        match ast::Comment::cast(node) {\n+            Some(next_comment) if next_comment.flavor() == group_flavor => {\n+                visited.insert(node);\n+                last = node;\n+            }\n+            // The comment group ends because either:\n+            // * An element of a different kind was reached\n+            // * A comment of a different flavor was reached\n+            _ => {\n+                break\n+            }\n         }\n-\n-        // Keep track of the last node in the group\n-        last = node;\n     }\n \n     if first != last {\n@@ -152,9 +153,11 @@ fn main() {\n     #[test]\n     fn test_fold_imports() {\n         let text = r#\"\n-use std::str;\n-use std::vec;\n-use std::io as iop;\n+use std::{\n+    str,\n+    vec,\n+    io as iop\n+};\n \n fn main() {\n }\"#;\n@@ -163,7 +166,7 @@ fn main() {\n         let folds = folding_ranges(&file);\n         assert_eq!(folds.len(), 1);\n         assert_eq!(folds[0].range.start(), 1.into());\n-        assert_eq!(folds[0].range.end(), 48.into());\n+        assert_eq!(folds[0].range.end(), 46.into());\n         assert_eq!(folds[0].kind, FoldKind::Imports);\n     }\n "}, {"sha": "12ddc0210057e0df0684ebf4a9d0edb2774b95c5", "filename": "crates/ra_syntax/src/ast/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5069eeef5ba0260f2daed513a28b43ae45445bd/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5069eeef5ba0260f2daed513a28b43ae45445bd/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs?ref=c5069eeef5ba0260f2daed513a28b43ae45445bd", "patch": "@@ -130,7 +130,7 @@ impl<'a> Comment<'a> {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq)]\n pub enum CommentFlavor {\n     Line,\n     Doc,"}]}