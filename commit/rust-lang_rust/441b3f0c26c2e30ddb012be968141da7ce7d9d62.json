{"sha": "441b3f0c26c2e30ddb012be968141da7ce7d9d62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MWIzZjBjMjZjMmUzMGRkYjAxMmJlOTY4MTQxZGE3Y2U3ZDlkNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-28T17:12:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-28T17:12:36Z"}, "message": "Auto merge of #24906 - pnkfelix:fsk-fix-24895, r=alexcrichton\n\ndropck: Remove `Copy` from special-cased traits\r\n\r\nFix #24895.\r\n\r\n[breaking-change]\r\n\r\nWhat does this break?  Basically, code that implements `Drop` and is\r\nusing `T:Copy` for one of its type parameters and is relying on the\r\nDrop Check rule not applying to it.\r\n\r\nHere is an example:\r\n\r\n```rust\r\n#![allow(dead_code,unused_variables,unused_assignments)]\r\nstruct D<T:Copy>(T);\r\nimpl<T:Copy> Drop for D<T> { fn drop(&mut self) { } }\r\n\r\ntrait UserT { fn c(&self) { } }\r\nimpl<T:Copy> UserT for T { }\r\nstruct E<T:UserT>(T);\r\nimpl<T:UserT> Drop for E<T> { fn drop(&mut self) { } }\r\n\r\n// This one will start breaking.\r\nfn foo() { let (d2, d1); d1 = D(34); d2 = D(&d1); }\r\n\r\n#[cfg(this_one_does_and_should_always_break)]\r\nfn bar() { let (e2, e1); e1 = E(34); e2 = E(&e1); }\r\n\r\nfn main() {\r\n    foo();\r\n}\r\n```", "tree": {"sha": "17170a9cd0d9a547ab5a90de4674507ce8c575de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17170a9cd0d9a547ab5a90de4674507ce8c575de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/441b3f0c26c2e30ddb012be968141da7ce7d9d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/441b3f0c26c2e30ddb012be968141da7ce7d9d62", "html_url": "https://github.com/rust-lang/rust/commit/441b3f0c26c2e30ddb012be968141da7ce7d9d62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/441b3f0c26c2e30ddb012be968141da7ce7d9d62/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b64c7fb2809eeba8ff9125cc95c4c38efb9a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b64c7fb2809eeba8ff9125cc95c4c38efb9a8a", "html_url": "https://github.com/rust-lang/rust/commit/d8b64c7fb2809eeba8ff9125cc95c4c38efb9a8a"}, {"sha": "1f793482930ab98c3ecb2da7507cd4d55ace023c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f793482930ab98c3ecb2da7507cd4d55ace023c", "html_url": "https://github.com/rust-lang/rust/commit/1f793482930ab98c3ecb2da7507cd4d55ace023c"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "008ba1c6bf83e3a3a9b30b1a3275eb8dee1a5bb5", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441b3f0c26c2e30ddb012be968141da7ce7d9d62/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441b3f0c26c2e30ddb012be968141da7ce7d9d62/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=441b3f0c26c2e30ddb012be968141da7ce7d9d62", "patch": "@@ -464,9 +464,9 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n                     ty::Predicate::Trait(ty::Binder(ref t_pred)) => {\n                         let def_id = t_pred.trait_ref.def_id;\n                         match rcx.tcx().lang_items.to_builtin_kind(def_id) {\n+                            // Issue 24895: deliberately do not include `BoundCopy` here.\n                             Some(ty::BoundSend) |\n                             Some(ty::BoundSized) |\n-                            Some(ty::BoundCopy) |\n                             Some(ty::BoundSync) => false,\n                             _ => true,\n                         }"}, {"sha": "288351173692011468e62195b56b537b843d3112", "filename": "src/test/compile-fail/issue-24895-copy-clone-dropck.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/441b3f0c26c2e30ddb012be968141da7ce7d9d62/src%2Ftest%2Fcompile-fail%2Fissue-24895-copy-clone-dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441b3f0c26c2e30ddb012be968141da7ce7d9d62/src%2Ftest%2Fcompile-fail%2Fissue-24895-copy-clone-dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24895-copy-clone-dropck.rs?ref=441b3f0c26c2e30ddb012be968141da7ce7d9d62", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that one cannot subvert Drop Check rule via a user-defined\n+// Clone implementation.\n+\n+#![allow(unused_variables, unused_assignments)]\n+\n+struct D<T:Copy>(T, &'static str);\n+\n+#[derive(Copy)]\n+struct S<'a>(&'a D<i32>, &'static str);\n+impl<'a> Clone for S<'a> {\n+    fn clone(&self) -> S<'a> {\n+        println!(\"cloning `S(_, {})` and thus accessing: {}\", self.1, (self.0).0);\n+        S(self.0, self.1)\n+    }\n+}\n+\n+impl<T:Copy> Drop for D<T> {\n+    fn drop(&mut self) {\n+        println!(\"calling Drop for {}\", self.1);\n+        let _call = self.0.clone();\n+    }\n+}\n+\n+fn main() {\n+    let (d2, d1);\n+    d1 = D(34, \"d1\");\n+    d2 = D(S(&d1, \"inner\"), \"d2\"); //~ ERROR `d1` does not live long enough\n+}"}]}