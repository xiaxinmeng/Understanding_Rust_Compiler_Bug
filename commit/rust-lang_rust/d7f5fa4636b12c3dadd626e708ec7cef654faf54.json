{"sha": "d7f5fa4636b12c3dadd626e708ec7cef654faf54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZjVmYTQ2MzZiMTJjM2RhZGQ2MjZlNzA4ZWM3Y2VmNjU0ZmFmNTQ=", "commit": {"author": {"name": "Joshua Landau", "email": "joshua@landau.ws", "date": "2015-06-11T12:56:07Z"}, "committer": {"name": "Joshua Landau", "email": "joshua@landau.ws", "date": "2015-06-11T12:56:07Z"}, "message": "Conver reborrows to .iter() calls where appropriate", "tree": {"sha": "26d1cae1de4f3b8d179cf008e380b6396bd9070f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26d1cae1de4f3b8d179cf008e380b6396bd9070f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7f5fa4636b12c3dadd626e708ec7cef654faf54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f5fa4636b12c3dadd626e708ec7cef654faf54", "html_url": "https://github.com/rust-lang/rust/commit/d7f5fa4636b12c3dadd626e708ec7cef654faf54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7f5fa4636b12c3dadd626e708ec7cef654faf54/comments", "author": {"login": "Veedrac", "id": 2867413, "node_id": "MDQ6VXNlcjI4Njc0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2867413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veedrac", "html_url": "https://github.com/Veedrac", "followers_url": "https://api.github.com/users/Veedrac/followers", "following_url": "https://api.github.com/users/Veedrac/following{/other_user}", "gists_url": "https://api.github.com/users/Veedrac/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veedrac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veedrac/subscriptions", "organizations_url": "https://api.github.com/users/Veedrac/orgs", "repos_url": "https://api.github.com/users/Veedrac/repos", "events_url": "https://api.github.com/users/Veedrac/events{/privacy}", "received_events_url": "https://api.github.com/users/Veedrac/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veedrac", "id": 2867413, "node_id": "MDQ6VXNlcjI4Njc0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2867413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veedrac", "html_url": "https://github.com/Veedrac", "followers_url": "https://api.github.com/users/Veedrac/followers", "following_url": "https://api.github.com/users/Veedrac/following{/other_user}", "gists_url": "https://api.github.com/users/Veedrac/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veedrac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veedrac/subscriptions", "organizations_url": "https://api.github.com/users/Veedrac/orgs", "repos_url": "https://api.github.com/users/Veedrac/repos", "events_url": "https://api.github.com/users/Veedrac/events{/privacy}", "received_events_url": "https://api.github.com/users/Veedrac/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca7418b84658fc1c723672c462aa0a7878d88b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7418b84658fc1c723672c462aa0a7878d88b64", "html_url": "https://github.com/rust-lang/rust/commit/ca7418b84658fc1c723672c462aa0a7878d88b64"}], "stats": {"total": 218, "additions": 109, "deletions": 109}, "files": [{"sha": "906a41a4d531410f810da7c1f22902ca37eb23d0", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -130,7 +130,7 @@\n //!     gadget_owner.gadgets.borrow_mut().push(gadget2.clone().downgrade());\n //!\n //!     // Iterate over our Gadgets, printing their details out\n-//!     for gadget_opt in &*gadget_owner.gadgets.borrow() {\n+//!     for gadget_opt in gadget_owner.gadgets.borrow().iter() {\n //!\n //!         // gadget_opt is a Weak<Gadget>. Since weak pointers can't guarantee\n //!         // that their object is still allocated, we need to call upgrade()"}, {"sha": "9bd23494da3d9b8237e0c2f949ca27f4834cbccc", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -127,7 +127,7 @@ impl<'longer_than_self> Drop for Arena<'longer_than_self> {\n     fn drop(&mut self) {\n         unsafe {\n             destroy_chunk(&*self.head.borrow());\n-            for chunk in &*self.chunks.borrow() {\n+            for chunk in self.chunks.borrow().iter() {\n                 if !chunk.is_copy.get() {\n                     destroy_chunk(chunk);\n                 }"}, {"sha": "ceb5d12efcd3e20e9ed26edcb774ac3fa690be7e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -1639,7 +1639,7 @@ impl<T> Drop for Vec<T> {\n         // zeroed (when moving out, because of #[unsafe_no_drop_flag]).\n         if self.cap != 0 && self.cap != mem::POST_DROP_USIZE {\n             unsafe {\n-                for x in &*self {\n+                for x in self.iter() {\n                     ptr::read(x);\n                 }\n                 dealloc(*self.ptr, self.cap)"}, {"sha": "f6c5d66f55cff9abb8b9f177820e06a5133d1e15", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -558,7 +558,7 @@ pub fn render_opts<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N\n     }\n \n     try!(writeln(w, &[\"digraph \", g.graph_id().as_slice(), \" {\"]));\n-    for n in &*g.nodes() {\n+    for n in g.nodes().iter() {\n         try!(indent(w));\n         let id = g.node_id(n);\n         if options.contains(&RenderOption::NoNodeLabels) {\n@@ -570,7 +570,7 @@ pub fn render_opts<'a, N:Clone+'a, E:Clone+'a, G:Labeller<'a,N,E>+GraphWalk<'a,N\n         }\n     }\n \n-    for e in &*g.edges() {\n+    for e in g.edges().iter() {\n         let escaped_label = g.edge_label(e).escape();\n         try!(indent(w));\n         let source = g.source(e);"}, {"sha": "06d87f5333ad3fddf2549ddf6fa5b938655ffc54", "filename": "src/librustc/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fmod.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -704,7 +704,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                 }\n             }\n             ItemTrait(_, _, ref bounds, ref trait_items) => {\n-                for b in &**bounds {\n+                for b in bounds.iter() {\n                     if let TraitTyParamBound(ref t, TraitBoundModifier::None) = *b {\n                         self.insert(t.trait_ref.ref_id, NodeItem(i));\n                     }"}, {"sha": "96603d3758eec675e2ab020a8729a2b8533df7ab", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -712,7 +712,7 @@ pub fn check_crate(tcx: &ty::ctxt,\n \n     // If we missed any lints added to the session, then there's a bug somewhere\n     // in the iteration code.\n-    for (id, v) in &*tcx.sess.lints.borrow() {\n+    for (id, v) in tcx.sess.lints.borrow().iter() {\n         for &(lint, span, ref msg) in v {\n             tcx.sess.span_bug(span,\n                               &format!(\"unprocessed lint {} at {}: {}\","}, {"sha": "8562d8c01cc67d9cc8fceb76608a0da129c4e9c0", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -698,7 +698,7 @@ pub fn import_codemap(local_codemap: &codemap::CodeMap,\n             return false;\n         }\n \n-        for (&line1, &line2) in lines1.iter().zip(&*lines2) {\n+        for (&line1, &line2) in lines1.iter().zip(lines2.iter()) {\n             if (line1 - fm1.start_pos) != (line2 - fm2.start_pos) {\n                 return false;\n             }\n@@ -711,7 +711,7 @@ pub fn import_codemap(local_codemap: &codemap::CodeMap,\n             return false;\n         }\n \n-        for (mb1, mb2) in multibytes1.iter().zip(&*multibytes2) {\n+        for (mb1, mb2) in multibytes1.iter().zip(multibytes2.iter()) {\n             if (mb1.bytes != mb2.bytes) ||\n                ((mb1.pos - fm1.start_pos) != (mb2.pos - fm2.start_pos)) {\n                 return false;"}, {"sha": "3112e8f4b4cfd21cac9212b13ff0c19450426c29", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -127,7 +127,7 @@ impl CStore {\n     pub fn iter_crate_data<I>(&self, mut i: I) where\n         I: FnMut(ast::CrateNum, &crate_metadata),\n     {\n-        for (&k, v) in &*self.metas.borrow() {\n+        for (&k, v) in self.metas.borrow().iter() {\n             i(k, &**v);\n         }\n     }\n@@ -136,7 +136,7 @@ impl CStore {\n     pub fn iter_crate_data_origins<I>(&self, mut i: I) where\n         I: FnMut(ast::CrateNum, &crate_metadata, Option<CrateSource>),\n     {\n-        for (&k, v) in &*self.metas.borrow() {\n+        for (&k, v) in self.metas.borrow().iter() {\n             let origin = self.get_used_crate_source(k);\n             origin.as_ref().map(|cs| { assert!(k == cs.cnum); });\n             i(k, &**v, origin);\n@@ -185,7 +185,7 @@ impl CStore {\n             }\n             ordering.push(cnum);\n         };\n-        for (&num, _) in &*self.metas.borrow() {\n+        for (&num, _) in self.metas.borrow().iter() {\n             visit(self, num, &mut ordering);\n         }\n         ordering.reverse();"}, {"sha": "b217eabec6e6a36af9b39ec0fe41f5dfead314a2", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -377,7 +377,7 @@ fn encode_reexported_static_base_methods(ecx: &EncodeContext,\n     let impl_items = ecx.tcx.impl_items.borrow();\n     match ecx.tcx.inherent_impls.borrow().get(&exp.def_id) {\n         Some(implementations) => {\n-            for base_impl_did in &**implementations {\n+            for base_impl_did in implementations.iter() {\n                 for &method_did in impl_items.get(base_impl_did).unwrap() {\n                     let impl_item = ty::impl_or_trait_item(\n                         ecx.tcx,\n@@ -403,7 +403,7 @@ fn encode_reexported_static_trait_methods(ecx: &EncodeContext,\n                                           -> bool {\n     match ecx.tcx.trait_items_cache.borrow().get(&exp.def_id) {\n         Some(trait_items) => {\n-            for trait_item in &**trait_items {\n+            for trait_item in trait_items.iter() {\n                 if let ty::MethodTraitItem(ref m) = *trait_item {\n                     encode_reexported_static_method(rbml_w,\n                                                     exp,\n@@ -981,7 +981,7 @@ fn encode_inherent_implementations(ecx: &EncodeContext,\n     match ecx.tcx.inherent_impls.borrow().get(&def_id) {\n         None => {}\n         Some(implementations) => {\n-            for &impl_def_id in &**implementations {\n+            for &impl_def_id in implementations.iter() {\n                 rbml_w.start_tag(tag_items_data_item_inherent_impl);\n                 encode_def_id(rbml_w, impl_def_id);\n                 rbml_w.end_tag();\n@@ -1348,7 +1348,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_attributes(rbml_w, &item.attrs);\n         encode_visibility(rbml_w, vis);\n         encode_stability(rbml_w, stab);\n-        for &method_def_id in &*ty::trait_item_def_ids(tcx, def_id) {\n+        for &method_def_id in ty::trait_item_def_ids(tcx, def_id).iter() {\n             rbml_w.start_tag(tag_item_trait_item);\n             match method_def_id {\n                 ty::ConstTraitItemId(const_def_id) => {\n@@ -1822,8 +1822,8 @@ fn encode_lang_items(ecx: &EncodeContext, rbml_w: &mut Encoder) {\n fn encode_native_libraries(ecx: &EncodeContext, rbml_w: &mut Encoder) {\n     rbml_w.start_tag(tag_native_libraries);\n \n-    for &(ref lib, kind) in &*ecx.tcx.sess.cstore.get_used_libraries()\n-                               .borrow() {\n+    for &(ref lib, kind) in ecx.tcx.sess.cstore.get_used_libraries()\n+                               .borrow().iter() {\n         match kind {\n             cstore::NativeStatic => {} // these libraries are not propagated\n             cstore::NativeFramework | cstore::NativeUnknown => {"}, {"sha": "539c0940b7053f56f2fe7735f2531e1d2713e0dd", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -491,8 +491,8 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n         match self.tcx.inherent_impls.borrow().get(&local_def(id)) {\n             None => (),\n             Some(impl_list) => {\n-                for impl_did in &**impl_list {\n-                    for item_did in &*impl_items.get(impl_did).unwrap() {\n+                for impl_did in impl_list.iter() {\n+                    for item_did in impl_items.get(impl_did).unwrap().iter() {\n                         if self.live_symbols.contains(&item_did.def_id()\n                                                                .node) {\n                             return true;"}, {"sha": "ff5178fbefc102a4df631580814373b53496c5ad", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -85,7 +85,7 @@ pub type Dependencies = FnvHashMap<config::CrateType, DependencyList>;\n \n pub fn calculate(tcx: &ty::ctxt) {\n     let mut fmts = tcx.dependency_formats.borrow_mut();\n-    for &ty in &*tcx.sess.crate_types.borrow() {\n+    for &ty in tcx.sess.crate_types.borrow().iter() {\n         fmts.insert(ty, calculate_type(&tcx.sess, ty));\n     }\n     tcx.sess.abort_if_errors();"}, {"sha": "a6906e7b2d31370fd628f81c6a9ced65854eeb47", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -1218,7 +1218,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                                       errors: &mut Vec<RegionResolutionError<'tcx>>)\n     {\n         let mut reg_reg_dups = FnvHashSet();\n-        for verify in &*self.verifys.borrow() {\n+        for verify in self.verifys.borrow().iter() {\n             match *verify {\n                 VerifyRegSubReg(ref origin, sub, sup) => {\n                     if free_regions.is_subregion_of(self.tcx, sub, sup) {\n@@ -1350,7 +1350,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n         }\n         let dummy_idx = graph.add_node(());\n \n-        for (constraint, _) in &*constraints {\n+        for (constraint, _) in constraints.iter() {\n             match *constraint {\n                 ConstrainVarSubVar(a_id, b_id) => {\n                     graph.add_edge(NodeIndex(a_id.index as usize),\n@@ -1575,7 +1575,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             changed = false;\n             iteration += 1;\n             debug!(\"---- {} Iteration {}{}\", \"#\", tag, iteration);\n-            for (constraint, _) in &*self.constraints.borrow() {\n+            for (constraint, _) in self.constraints.borrow().iter() {\n                 let edge_changed = body(constraint);\n                 if edge_changed {\n                     debug!(\"Updated due to constraint {}\","}, {"sha": "0bbcfa700388c847eb94716a9b0a828bf354ee56", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     // this properly would result in the necessity of computing *type*\n     // reachability, which might result in a compile time loss.\n     fn mark_destructors_reachable(&mut self) {\n-        for (_, destructor_def_id) in &*self.tcx.destructor_for_type.borrow() {\n+        for (_, destructor_def_id) in self.tcx.destructor_for_type.borrow().iter() {\n             if destructor_def_id.krate == ast::LOCAL_CRATE {\n                 self.reachable_symbols.insert(destructor_def_id.node);\n             }"}, {"sha": "2a033d36a4777968fa568f166be7ac46da2b7c9b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -372,22 +372,22 @@ struct RegionResolutionVisitor<'a> {\n \n impl RegionMaps {\n     pub fn each_encl_scope<E>(&self, mut e:E) where E: FnMut(&CodeExtent, &CodeExtent) {\n-        for (child, parent) in &*self.scope_map.borrow() {\n+        for (child, parent) in self.scope_map.borrow().iter() {\n             e(child, parent)\n         }\n     }\n     pub fn each_var_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) {\n-        for (child, parent) in &*self.var_map.borrow() {\n+        for (child, parent) in self.var_map.borrow().iter() {\n             e(child, parent)\n         }\n     }\n     pub fn each_rvalue_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) {\n-        for (child, parent) in &*self.rvalue_scopes.borrow() {\n+        for (child, parent) in self.rvalue_scopes.borrow().iter() {\n             e(child, parent)\n         }\n     }\n     pub fn each_terminating_scope<E>(&self, mut e:E) where E: FnMut(&CodeExtent) {\n-        for scope in &*self.terminating_scopes.borrow() {\n+        for scope in self.terminating_scopes.borrow().iter() {\n             e(scope)\n         }\n     }"}, {"sha": "9e5ad7b42f5c5b751328313a92dbc87bec3ef8e3", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -232,7 +232,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n     }\n \n     fn visit_generics(&mut self, generics: &ast::Generics) {\n-        for ty_param in &*generics.ty_params {\n+        for ty_param in generics.ty_params.iter() {\n             visit::walk_ty_param_bounds_helper(self, &ty_param.bounds);\n             match ty_param.default {\n                 Some(ref ty) => self.visit_ty(&**ty),\n@@ -773,7 +773,7 @@ fn early_bound_lifetime_names(generics: &ast::Generics) -> Vec<ast::Name> {\n         let mut collector =\n             FreeLifetimeCollector { early_bound: &mut early_bound,\n                                     late_bound: &mut late_bound };\n-        for ty_param in &*generics.ty_params {\n+        for ty_param in generics.ty_params.iter() {\n             visit::walk_ty_param_bounds_helper(&mut collector, &ty_param.bounds);\n         }\n         for predicate in &generics.where_clause.predicates {"}, {"sha": "2a8dabf006a2eabe8cec7c5f525c37b11da96c74", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -79,7 +79,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                      span: Span) -> Option<String> {\n     let def_id = trait_ref.def_id;\n     let mut report = None;\n-    for item in &*ty::get_attrs(infcx.tcx, def_id) {\n+    for item in ty::get_attrs(infcx.tcx, def_id).iter() {\n         if item.check_name(\"rustc_on_unimplemented\") {\n             let err_sp = if item.meta().span == DUMMY_SP {\n                 span"}, {"sha": "557a02554c38c362b1b592b8ca7bf240be74397a", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -872,7 +872,7 @@ fn confirm_impl_candidate<'cx,'tcx>(\n \n     // It is not in the impl - get the default from the trait.\n     let trait_ref = obligation.predicate.trait_ref;\n-    for trait_item in &*ty::trait_items(selcx.tcx(), trait_ref.def_id) {\n+    for trait_item in ty::trait_items(selcx.tcx(), trait_ref.def_id).iter() {\n         if let &ty::TypeTraitItem(ref assoc_ty) = trait_item {\n             if assoc_ty.name == obligation.predicate.item_name {\n                 if let Some(ty) = assoc_ty.ty {"}, {"sha": "a864ba4498fda63ae40333fe64e2effef2c40db6", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -431,7 +431,7 @@ pub fn get_vtable_index_of_object_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n         }\n \n         let trait_items = ty::trait_items(tcx, bound_ref.def_id());\n-        for trait_item in &**trait_items {\n+        for trait_item in trait_items.iter() {\n             match *trait_item {\n                 ty::MethodTraitItem(_) => method_count += 1,\n                 _ => {}"}, {"sha": "e795c8d521b34a41345d23f90fffc6edbefacba6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -862,7 +862,7 @@ macro_rules! sty_debug_print {\n                 $(let mut $variant = total;)*\n \n \n-                for (_, t) in &*tcx.interner.borrow() {\n+                for (_, t) in tcx.interner.borrow().iter() {\n                     let variant = match t.sty {\n                         ty::ty_bool | ty::ty_char | ty::ty_int(..) | ty::ty_uint(..) |\n                             ty::ty_float(..) | ty::ty_str => continue,\n@@ -2571,7 +2571,7 @@ impl<'tcx> TraitDef<'tcx> {\n     pub fn for_each_impl<F: FnMut(DefId)>(&self, tcx: &ctxt<'tcx>, mut f: F)  {\n         ty::populate_implementations_for_trait_if_necessary(tcx, self.trait_ref.def_id);\n \n-        for &impl_def_id in &*self.blanket_impls.borrow() {\n+        for &impl_def_id in self.blanket_impls.borrow().iter() {\n             f(impl_def_id);\n         }\n \n@@ -2589,7 +2589,7 @@ impl<'tcx> TraitDef<'tcx> {\n     {\n         ty::populate_implementations_for_trait_if_necessary(tcx, self.trait_ref.def_id);\n \n-        for &impl_def_id in &*self.blanket_impls.borrow() {\n+        for &impl_def_id in self.blanket_impls.borrow().iter() {\n             f(impl_def_id);\n         }\n \n@@ -7207,7 +7207,7 @@ pub fn can_type_implement_copy<'a,'tcx>(param_env: &ParameterEnvironment<'a, 'tc\n         }\n         ty::ty_enum(enum_did, substs) => {\n             let enum_variants = ty::enum_variants(tcx, enum_did);\n-            for variant in &*enum_variants {\n+            for variant in enum_variants.iter() {\n                 for variant_arg_type in &variant.args {\n                     let substd_arg_type =\n                         variant_arg_type.subst(tcx, substs);"}, {"sha": "0f56aa9fb1f65e3fd0f3dbe6a49cd985d535bca4", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -478,14 +478,14 @@ impl<'tcx> MoveData<'tcx> {\n                             KillFrom::Execution, dfcx_moves);\n         }\n \n-        for assignment in &*self.path_assignments.borrow() {\n+        for assignment in self.path_assignments.borrow().iter() {\n             self.kill_moves(assignment.path, assignment.id,\n                             KillFrom::Execution, dfcx_moves);\n         }\n \n         // Kill all moves related to a variable `x` when\n         // it goes out of scope:\n-        for path in &*self.paths.borrow() {\n+        for path in self.paths.borrow().iter() {\n             match path.loan_path.kind {\n                 LpVar(..) | LpUpvar(..) | LpDowncast(..) => {\n                     let kill_scope = path.loan_path.kill_scope(tcx);"}, {"sha": "cc22083f5aebff3e14e67408bc47c47d6b65d670", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -792,7 +792,7 @@ fn write_out_deps(sess: &Session,\n         let file = outputs.path(*output_type);\n         match *output_type {\n             config::OutputTypeExe => {\n-                for output in &*sess.crate_types.borrow() {\n+                for output in sess.crate_types.borrow().iter() {\n                     let p = link::filename_for_input(sess, *output,\n                                                      id, &file);\n                     out_filenames.push(p);"}, {"sha": "e1bf37138f3dec54dee81229ee1afe650efb3312", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -645,7 +645,7 @@ impl LintPass for UnusedAttributes {\n         }\n \n         let plugin_attributes = cx.sess().plugin_attributes.borrow_mut();\n-        for &(ref name, ty) in &*plugin_attributes {\n+        for &(ref name, ty) in plugin_attributes.iter() {\n             if ty == AttributeType::Whitelisted && attr.check_name(&*name) {\n                 break;\n             }\n@@ -860,7 +860,7 @@ impl LintPass for NonCamelCaseTypes {\n     }\n \n     fn check_generics(&mut self, cx: &Context, it: &ast::Generics) {\n-        for gen in &*it.ty_params {\n+        for gen in it.ty_params.iter() {\n             self.check_case(cx, \"type parameter\", gen.ident, gen.span);\n         }\n     }\n@@ -2249,7 +2249,7 @@ impl LintPass for DropWithReprExtern {\n         lint_array!(DROP_WITH_REPR_EXTERN)\n     }\n     fn check_crate(&mut self, ctx: &Context, _: &ast::Crate) {\n-        for dtor_did in &*ctx.tcx.destructors.borrow() {\n+        for dtor_did in ctx.tcx.destructors.borrow().iter() {\n             let (drop_impl_did, dtor_self_type) =\n                 if dtor_did.krate == ast::LOCAL_CRATE {\n                     let impl_did = ctx.tcx.map.get_parent_did(dtor_did.node);"}, {"sha": "2e8e576732b9132eb7ac61cc446e3199e3a35141", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -1301,7 +1301,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                     return\n                 }\n \n-                for bound in &**bounds {\n+                for bound in bounds.iter() {\n                     self.check_ty_param_bound(bound)\n                 }\n             }\n@@ -1466,15 +1466,15 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_generics(&mut self, generics: &ast::Generics) {\n-        for ty_param in &*generics.ty_params {\n-            for bound in &*ty_param.bounds {\n+        for ty_param in generics.ty_params.iter() {\n+            for bound in ty_param.bounds.iter() {\n                 self.check_ty_param_bound(bound)\n             }\n         }\n         for predicate in &generics.where_clause.predicates {\n             match predicate {\n                 &ast::WherePredicate::BoundPredicate(ref bound_pred) => {\n-                    for bound in &*bound_pred.bounds {\n+                    for bound in bound_pred.bounds.iter() {\n                         self.check_ty_param_bound(bound)\n                     }\n                 }"}, {"sha": "c47922dd95471c0464e3a5a7ae354063fa64683f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -1574,7 +1574,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         // Descend into children and anonymous children.\n         build_reduced_graph::populate_module_if_necessary(self, &module_);\n \n-        for (_, child_node) in &*module_.children.borrow() {\n+        for (_, child_node) in module_.children.borrow().iter() {\n             match child_node.get_module_if_available() {\n                 None => {\n                     // Continue.\n@@ -1585,7 +1585,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n-        for (_, module_) in &*module_.anonymous_children.borrow() {\n+        for (_, module_) in module_.anonymous_children.borrow().iter() {\n             self.report_unresolved_imports(module_.clone());\n         }\n     }\n@@ -2039,7 +2039,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     fn resolve_generics(&mut self, generics: &Generics) {\n-        for type_parameter in &*generics.ty_params {\n+        for type_parameter in generics.ty_params.iter() {\n             self.check_if_primitive_type_name(type_parameter.ident.name, type_parameter.span);\n         }\n         for predicate in &generics.where_clause.predicates {\n@@ -3502,7 +3502,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             build_reduced_graph::populate_module_if_necessary(self, &search_module);\n \n             {\n-                for (_, child_names) in &*search_module.children.borrow() {\n+                for (_, child_names) in search_module.children.borrow().iter() {\n                     let def = match child_names.def_for_namespace(TypeNS) {\n                         Some(def) => def,\n                         None => continue\n@@ -3518,7 +3518,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             // Look for imports.\n-            for (_, import) in &*search_module.import_resolutions.borrow() {\n+            for (_, import) in search_module.import_resolutions.borrow().iter() {\n                 let target = match import.target_for_namespace(TypeNS) {\n                     None => continue,\n                     Some(target) => target,\n@@ -3591,13 +3591,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         debug!(\"Children:\");\n         build_reduced_graph::populate_module_if_necessary(self, &module_);\n-        for (&name, _) in &*module_.children.borrow() {\n+        for (&name, _) in module_.children.borrow().iter() {\n             debug!(\"* {}\", token::get_name(name));\n         }\n \n         debug!(\"Import resolutions:\");\n         let import_resolutions = module_.import_resolutions.borrow();\n-        for (&name, import_resolution) in &*import_resolutions {\n+        for (&name, import_resolution) in import_resolutions.iter() {\n             let value_repr;\n             match import_resolution.target_for_namespace(ValueNS) {\n                 None => { value_repr = \"\".to_string(); }"}, {"sha": "3a566a9672f9ab8c9e72f802cded96a57625843c", "filename": "src/librustc_resolve/record_exports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_resolve%2Frecord_exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_resolve%2Frecord_exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Frecord_exports.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> {\n         self.record_exports_for_module(&*module_);\n         build_reduced_graph::populate_module_if_necessary(self.resolver, &module_);\n \n-        for (_, child_name_bindings) in &*module_.children.borrow() {\n+        for (_, child_name_bindings) in module_.children.borrow().iter() {\n             match child_name_bindings.get_module_if_available() {\n                 None => {\n                     // Nothing to do.\n@@ -92,7 +92,7 @@ impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> {\n             }\n         }\n \n-        for (_, child_module) in &*module_.anonymous_children.borrow() {\n+        for (_, child_module) in module_.anonymous_children.borrow().iter() {\n             self.record_exports_for_module_subtree(child_module.clone());\n         }\n     }\n@@ -134,7 +134,7 @@ impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> {\n     fn add_exports_for_module(&mut self,\n                               exports: &mut Vec<Export>,\n                               module_: &Module) {\n-        for (name, import_resolution) in &*module_.import_resolutions.borrow() {\n+        for (name, import_resolution) in module_.import_resolutions.borrow().iter() {\n             if !import_resolution.is_public {\n                 continue\n             }"}, {"sha": "71a63e24faf7c13158c9b935a12f77cb8e5edc76", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         self.resolver.current_module = orig_module;\n \n         build_reduced_graph::populate_module_if_necessary(self.resolver, &module_);\n-        for (_, child_node) in &*module_.children.borrow() {\n+        for (_, child_node) in module_.children.borrow().iter() {\n             match child_node.get_module_if_available() {\n                 None => {\n                     // Nothing to do.\n@@ -245,7 +245,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             }\n         }\n \n-        for (_, child_module) in &*module_.anonymous_children.borrow() {\n+        for (_, child_module) in module_.anonymous_children.borrow().iter() {\n             self.resolve_imports_for_module_subtree(child_module.clone());\n         }\n     }\n@@ -732,7 +732,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n         // Add all resolved imports from the containing module.\n         let import_resolutions = target_module.import_resolutions.borrow();\n-        for (ident, target_import_resolution) in &*import_resolutions {\n+        for (ident, target_import_resolution) in import_resolutions.iter() {\n             debug!(\"(resolving glob import) writing module resolution \\\n                     {} into `{}`\",\n                    token::get_name(*ident),\n@@ -793,7 +793,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         // Add all children from the containing module.\n         build_reduced_graph::populate_module_if_necessary(self.resolver, &target_module);\n \n-        for (&name, name_bindings) in &*target_module.children.borrow() {\n+        for (&name, name_bindings) in target_module.children.borrow().iter() {\n             self.merge_import_resolution(module_,\n                                          target_module.clone(),\n                                          import_directive,\n@@ -803,7 +803,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         }\n \n         // Add external module children from the containing module.\n-        for (&name, module) in &*target_module.external_module_children.borrow() {\n+        for (&name, module) in target_module.external_module_children.borrow().iter() {\n             let name_bindings =\n                 Rc::new(Resolver::create_name_bindings_from_module(module.clone()));\n             self.merge_import_resolution(module_,"}, {"sha": "e2c816bb84df6c0dbbb6f224b30da9efb90d35cd", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -204,7 +204,7 @@ fn symbol_hash<'tcx>(tcx: &ty::ctxt<'tcx>,\n     symbol_hasher.input_str(&link_meta.crate_name);\n     symbol_hasher.input_str(\"-\");\n     symbol_hasher.input_str(link_meta.crate_hash.as_str());\n-    for meta in &*tcx.sess.crate_metadata.borrow() {\n+    for meta in tcx.sess.crate_metadata.borrow().iter() {\n         symbol_hasher.input_str(&meta[..]);\n     }\n     symbol_hasher.input_str(\"-\");\n@@ -389,7 +389,7 @@ pub fn link_binary(sess: &Session,\n                    outputs: &OutputFilenames,\n                    crate_name: &str) -> Vec<PathBuf> {\n     let mut out_filenames = Vec::new();\n-    for &crate_type in &*sess.crate_types.borrow() {\n+    for &crate_type in sess.crate_types.borrow().iter() {\n         if invalid_output_for_target(sess, crate_type) {\n             sess.bug(&format!(\"invalid output type `{:?}` for target os `{}`\",\n                              crate_type, sess.opts.target_triple));\n@@ -559,7 +559,7 @@ fn link_rlib<'a>(sess: &'a Session,\n     let mut ab = ArchiveBuilder::create(config);\n     ab.add_file(obj_filename).unwrap();\n \n-    for &(ref l, kind) in &*sess.cstore.get_used_libraries().borrow() {\n+    for &(ref l, kind) in sess.cstore.get_used_libraries().borrow().iter() {\n         match kind {\n             cstore::NativeStatic => ab.add_native_library(&l).unwrap(),\n             cstore::NativeFramework | cstore::NativeUnknown => {}\n@@ -918,7 +918,7 @@ fn link_args(cmd: &mut Linker,\n         let empty_vec = Vec::new();\n         let empty_str = String::new();\n         let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);\n-        let mut args = args.iter().chain(&*used_link_args);\n+        let mut args = args.iter().chain(used_link_args.iter());\n         let relocation_model = sess.opts.cg.relocation_model.as_ref()\n                                    .unwrap_or(&empty_str);\n         if (t.options.relocation_model == \"pic\" || *relocation_model == \"pic\")"}, {"sha": "e13a5e97f7573c8207cfd21d09e88b7f1b656891", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -31,7 +31,7 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n     }\n \n     // Make sure we actually can run LTO\n-    for crate_type in &*sess.crate_types.borrow() {\n+    for crate_type in sess.crate_types.borrow().iter() {\n         match *crate_type {\n             config::CrateTypeExecutable | config::CrateTypeStaticlib => {}\n             _ => {"}, {"sha": "0f090aab8780728bd413529fc11a5caab81daf25", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -727,7 +727,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                            &val);\n \n         // super-traits\n-        for super_bound in &**trait_refs {\n+        for super_bound in trait_refs.iter() {\n             let trait_ref = match *super_bound {\n                 ast::TraitTyParamBound(ref trait_ref, _) => {\n                     trait_ref\n@@ -1202,8 +1202,8 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n     }\n \n     fn visit_generics(&mut self, generics: &ast::Generics) {\n-        for param in &*generics.ty_params {\n-            for bound in &*param.bounds {\n+        for param in generics.ty_params.iter() {\n+            for bound in param.bounds.iter() {\n                 if let ast::TraitTyParamBound(ref trait_ref, _) = *bound {\n                     self.process_trait_ref(&trait_ref.trait_ref);\n                 }"}, {"sha": "aad986cd34a3bd4819a45288a017d9b295f9e786", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -233,7 +233,7 @@ pub fn get_extern_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, did: ast::DefId,\n     // don't do this then linker errors can be generated where the linker\n     // complains that one object files has a thread local version of the\n     // symbol and another one doesn't.\n-    for attr in &*ty::get_attrs(ccx.tcx(), did) {\n+    for attr in ty::get_attrs(ccx.tcx(), did).iter() {\n         if attr.check_name(\"thread_local\") {\n             llvm::set_thread_local(c, true);\n         }\n@@ -2698,7 +2698,7 @@ pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n         stats.fn_stats.borrow_mut().sort_by(|&(_, insns_a), &(_, insns_b)| {\n             insns_b.cmp(&insns_a)\n         });\n-        for tuple in &*stats.fn_stats.borrow() {\n+        for tuple in stats.fn_stats.borrow().iter() {\n             match *tuple {\n                 (ref name, insns) => {\n                     println!(\"{} insns, {}\", insns, *name);\n@@ -2707,7 +2707,7 @@ pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n         }\n     }\n     if shared_ccx.sess().count_llvm_insns() {\n-        for (k, v) in &*shared_ccx.stats().llvm_insns.borrow() {\n+        for (k, v) in shared_ccx.stats().llvm_insns.borrow().iter() {\n             println!(\"{:7} {}\", *v, *k);\n         }\n     }"}, {"sha": "f860fe44f28e78f073e6170c38731ab1db103801", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -106,7 +106,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n             ast::ItemEnum(_, _) => {\n               let vs_here = ty::enum_variants(ccx.tcx(), local_def(item.id));\n               let vs_there = ty::enum_variants(ccx.tcx(), parent_id);\n-              for (here, there) in vs_here.iter().zip(&*vs_there) {\n+              for (here, there) in vs_here.iter().zip(vs_there.iter()) {\n                   if there.id == fn_id { my_id = here.id.node; }\n                   ccx.external().borrow_mut().insert(there.id, Some(here.id.node));\n               }"}, {"sha": "4347d1853be540a207f15863cf5c8023fcf17391", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -93,7 +93,7 @@ pub fn get_simple_intrinsic(ccx: &CrateContext, item: &ast::ForeignItem) -> Opti\n /// the only intrinsic that needs such verification is `transmute`.\n pub fn check_intrinsics(ccx: &CrateContext) {\n     let mut last_failing_id = None;\n-    for transmute_restriction in &*ccx.tcx().transmute_restrictions.borrow() {\n+    for transmute_restriction in ccx.tcx().transmute_restrictions.borrow().iter() {\n         // Sometimes, a single call to transmute will push multiple\n         // type pairs to test in order to exhaustively test the\n         // possibility around a type parameter. If one of those fails,"}, {"sha": "1b176015a3ad4026cf6295e2aa88f38703dcbf79", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -260,7 +260,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n \n     fn assemble_inherent_candidates(&mut self) {\n         let steps = self.steps.clone();\n-        for step in &*steps {\n+        for step in steps.iter() {\n             self.assemble_probe(step.self_ty);\n         }\n     }\n@@ -374,7 +374,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         ty::populate_inherent_implementations_for_type_if_necessary(self.tcx(), def_id);\n \n         if let Some(impl_infos) = self.tcx().inherent_impls.borrow().get(&def_id) {\n-            for &impl_def_id in &***impl_infos {\n+            for &impl_def_id in impl_infos.iter() {\n                 self.assemble_inherent_impl_probe(impl_def_id);\n             }\n         }\n@@ -700,7 +700,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         // Check if there is an unboxed-closure self-type in the list of receivers.\n         // If so, add \"synthetic impls\".\n         let steps = self.steps.clone();\n-        for step in &*steps {\n+        for step in steps.iter() {\n             let closure_def_id = match step.self_ty.sty {\n                 ty::ty_closure(a, _) => a,\n                 _ => continue,\n@@ -754,7 +754,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                item.repr(self.tcx()),\n                item_index);\n \n-        for step in &*self.steps {\n+        for step in self.steps.iter() {\n             debug!(\"assemble_projection_candidates: step={}\",\n                    step.repr(self.tcx()));\n "}, {"sha": "601db229c4197812cae8932a0dff8726a557c463", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -482,7 +482,7 @@ pub fn check_item_types(ccx: &CrateCtxt) {\n \n     ccx.tcx.sess.abort_if_errors();\n \n-    for drop_method_did in &*ccx.tcx.destructors.borrow() {\n+    for drop_method_did in ccx.tcx.destructors.borrow().iter() {\n         if drop_method_did.krate == ast::LOCAL_CRATE {\n             let drop_impl_did = ccx.tcx.map.get_parent_did(drop_method_did.node);\n             match dropck::check_drop_impl(ccx.tcx, drop_impl_did) {\n@@ -1071,7 +1071,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let provided_methods = ty::provided_trait_methods(tcx, impl_trait_ref.def_id);\n     let associated_consts = ty::associated_consts(tcx, impl_trait_ref.def_id);\n     let mut missing_items = Vec::new();\n-    for trait_item in &*trait_items {\n+    for trait_item in trait_items.iter() {\n         match *trait_item {\n             ty::ConstTraitItem(ref associated_const) => {\n                 let is_implemented = impl_items.iter().any(|ii| {\n@@ -4292,7 +4292,7 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         // we need not check for that.\n         let variants = ty::enum_variants(ccx.tcx, def_id);\n \n-        for (v, variant) in vs.iter().zip(&*variants) {\n+        for (v, variant) in vs.iter().zip(variants.iter()) {\n             let current_disr_val = variant.disr_val;\n \n             // Check for duplicate discriminant values"}, {"sha": "3ecef67ed9895ee20882b7939af6cff3a73eea6e", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -205,7 +205,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             return;\n         }\n \n-        for (upvar_id, upvar_capture) in &*self.fcx.inh.upvar_capture_map.borrow() {\n+        for (upvar_id, upvar_capture) in self.fcx.inh.upvar_capture_map.borrow().iter() {\n             let new_upvar_capture = match *upvar_capture {\n                 ty::UpvarCapture::ByValue => ty::UpvarCapture::ByValue,\n                 ty::UpvarCapture::ByRef(ref upvar_borrow) => {\n@@ -227,12 +227,12 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             return\n         }\n \n-        for (def_id, closure_ty) in &*self.fcx.inh.closure_tys.borrow() {\n+        for (def_id, closure_ty) in self.fcx.inh.closure_tys.borrow().iter() {\n             let closure_ty = self.resolve(closure_ty, ResolvingClosure(*def_id));\n             self.fcx.tcx().closure_tys.borrow_mut().insert(*def_id, closure_ty);\n         }\n \n-        for (def_id, &closure_kind) in &*self.fcx.inh.closure_kinds.borrow() {\n+        for (def_id, &closure_kind) in self.fcx.inh.closure_kinds.borrow().iter() {\n             self.fcx.tcx().closure_kinds.borrow_mut().insert(*def_id, closure_kind);\n         }\n     }"}, {"sha": "f48e9f73db39615687a628a1f5bc416602c23ae6", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -119,7 +119,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n         // the tcx.\n         let mut tcx_inherent_impls =\n             self.crate_context.tcx.inherent_impls.borrow_mut();\n-        for (k, v) in &*self.inherent_impls.borrow() {\n+        for (k, v) in self.inherent_impls.borrow().iter() {\n             tcx_inherent_impls.insert((*k).clone(),\n                                       Rc::new((*v.borrow()).clone()));\n         }"}, {"sha": "012b6f8e52ba32dd62c4ab006f9623077da82ebe", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -516,7 +516,7 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for ast::Generics {\n             self.ty_params\n                 .iter()\n                 .filter(|p| p.id == node_id)\n-                .flat_map(|p| &*p.bounds)\n+                .flat_map(|p| p.bounds.iter())\n                 .flat_map(|b| predicates_from_bound(astconv, ty, b));\n \n         let from_where_clauses =\n@@ -528,7 +528,7 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for ast::Generics {\n                     _ => None\n                 })\n                 .filter(|bp| is_param(astconv.tcx(), &bp.bounded_ty, node_id))\n-                .flat_map(|bp| &*bp.bounds)\n+                .flat_map(|bp| bp.bounds.iter())\n                 .flat_map(|b| predicates_from_bound(astconv, ty, b));\n \n         from_ty_params.chain(from_where_clauses).collect()\n@@ -777,8 +777,8 @@ fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,\n                                  thing: &'static str) {\n     let mut warn = false;\n \n-    for ty_param in &*generics.ty_params {\n-        for bound in &*ty_param.bounds {\n+    for ty_param in generics.ty_params.iter() {\n+        for bound in ty_param.bounds.iter() {\n             match *bound {\n                 ast::TraitTyParamBound(..) => {\n                     warn = true;\n@@ -1778,7 +1778,7 @@ fn ty_generic_predicates<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                                       &ExplicitRscope,\n                                       &*bound_pred.bounded_ty);\n \n-                for bound in &*bound_pred.bounds {\n+                for bound in bound_pred.bounds.iter() {\n                     match bound {\n                         &ast::TyParamBound::TraitTyParamBound(ref poly_trait_ref, _) => {\n                             let mut projections = Vec::new();"}, {"sha": "fcf45f21a1ebe78aee322d870279d99c4d2c6e1f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -228,7 +228,7 @@ pub fn build_impls(cx: &DocContext, tcx: &ty::ctxt,\n     match tcx.inherent_impls.borrow().get(&did) {\n         None => {}\n         Some(i) => {\n-            for &did in &**i {\n+            for &did in i.iter() {\n                 build_impl(cx, tcx, did, &mut impls);\n             }\n         }"}, {"sha": "c23cfd298aa61e81c69b5ac69d5c927b6105c76b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -471,7 +471,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> io::Result<String> {\n \n         // Reduce `NodeId` in paths into smaller sequential numbers,\n         // and prune the paths that do not appear in the index.\n-        for item in &*search_index {\n+        for item in search_index.iter() {\n             match item.parent {\n                 Some(nodeid) => {\n                     if !nodeid_to_pathid.contains_key(&nodeid) {"}, {"sha": "69a26cdc490f67aa4f2036c431e3b9110c6585d1", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -368,7 +368,7 @@ mod imp {\n         unsafe extern fn run_dtors(mut ptr: *mut u8) {\n             while !ptr.is_null() {\n                 let list: Box<List> = Box::from_raw(ptr as *mut List);\n-                for &(ptr, dtor) in &*list {\n+                for &(ptr, dtor) in list.iter() {\n                     dtor(ptr);\n                 }\n                 ptr = DTORS.get();"}, {"sha": "7d7ea371ba5339e52e6de84dd70e849d89c4b50d", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -330,7 +330,7 @@ pub struct IdVisitor<'a, O:'a> {\n \n impl<'a, O: IdVisitingOperation> IdVisitor<'a, O> {\n     fn visit_generics_helper(&mut self, generics: &Generics) {\n-        for type_parameter in &*generics.ty_params {\n+        for type_parameter in generics.ty_params.iter() {\n             self.operation.visit_id(type_parameter.id)\n         }\n         for lifetime in &generics.lifetimes {"}, {"sha": "98225d1040057b998ea0fae9372163340367c24d", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -796,7 +796,7 @@ impl CodeMap {\n     }\n \n     pub fn get_filemap(&self, filename: &str) -> Rc<FileMap> {\n-        for fm in &*self.files.borrow() {\n+        for fm in self.files.borrow().iter() {\n             if filename == fm.name {\n                 return fm.clone();\n             }\n@@ -821,7 +821,7 @@ impl CodeMap {\n         // The number of extra bytes due to multibyte chars in the FileMap\n         let mut total_extra_bytes = 0;\n \n-        for mbc in &*map.multibyte_chars.borrow() {\n+        for mbc in map.multibyte_chars.borrow().iter() {\n             debug!(\"{}-byte char at {:?}\", mbc.bytes, mbc.pos);\n             if mbc.pos < bpos {\n                 // every character is at least one byte, so we only"}, {"sha": "ec3006898f33b69d08df5141a97b60adde949dff", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -505,7 +505,7 @@ impl<'a> TraitDef<'a> {\n             bounds.push(cx.typarambound(trait_path.clone()));\n \n             // also add in any bounds from the declaration\n-            for declared_bound in &*ty_param.bounds {\n+            for declared_bound in ty_param.bounds.iter() {\n                 bounds.push((*declared_bound).clone());\n             }\n "}, {"sha": "3adb73cfa5d6f1793306b721b5f022f366041096", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -2110,7 +2110,7 @@ impl<'a> State<'a> {\n                         comma = true;\n                 }\n \n-                for binding in &*data.bindings {\n+                for binding in data.bindings.iter() {\n                     if comma {\n                         try!(self.word_space(\",\"))\n                     }\n@@ -2845,7 +2845,7 @@ impl<'a> State<'a> {\n             }\n             ast::LitBinary(ref v) => {\n                 let mut escaped: String = String::new();\n-                for &ch in &**v {\n+                for &ch in v.iter() {\n                     escaped.extend(ascii::escape_default(ch)\n                                          .map(|c| c as char));\n                 }"}, {"sha": "710928a00c11d44209bb03f9250bd00edf98b23f", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -428,13 +428,13 @@ pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                 path_parameters: &'v PathParameters) {\n     match *path_parameters {\n         ast::AngleBracketedParameters(ref data) => {\n-            for typ in &*data.types {\n+            for typ in data.types.iter() {\n                 visitor.visit_ty(&**typ);\n             }\n             for lifetime in &data.lifetimes {\n                 visitor.visit_lifetime_ref(lifetime);\n             }\n-            for binding in &*data.bindings {\n+            for binding in data.bindings.iter() {\n                 visitor.visit_assoc_type_binding(&**binding);\n             }\n         }\n@@ -531,7 +531,7 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_ty_param_bounds_helper<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                        bounds: &'v OwnedSlice<TyParamBound>) {\n-    for bound in &**bounds {\n+    for bound in bounds.iter() {\n         visitor.visit_ty_param_bound(bound)\n     }\n }\n@@ -549,7 +549,7 @@ pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V,\n }\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n-    for param in &*generics.ty_params {\n+    for param in generics.ty_params.iter() {\n         visitor.visit_ident(param.span, param.ident);\n         walk_ty_param_bounds_helper(visitor, &param.bounds);\n         walk_ty_opt(visitor, &param.default);"}, {"sha": "5ba678ce183dd14cd8a3463dbcfb02321b33bba5", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -158,7 +158,7 @@ fn offset_momentum(bodies: &mut [Planet;N_BODIES]) {\n     let mut px = 0.0;\n     let mut py = 0.0;\n     let mut pz = 0.0;\n-    for bi in &*bodies {\n+    for bi in bodies.iter() {\n         px += bi.vx * bi.mass;\n         py += bi.vy * bi.mass;\n         pz += bi.vz * bi.mass;"}, {"sha": "9aa2badd80b94e4cda7245179293c4fb80df8c91", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f5fa4636b12c3dadd626e708ec7cef654faf54/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=d7f5fa4636b12c3dadd626e708ec7cef654faf54", "patch": "@@ -100,21 +100,21 @@ pub fn main() {\n \n fn check_legs(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n     let mut legs = 0;\n-    for pet in &*arc {\n+    for pet in arc.iter() {\n         legs += pet.num_legs();\n     }\n     assert!(legs == 12);\n }\n fn check_names(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n-    for pet in &*arc {\n+    for pet in arc.iter() {\n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         pet.name(Box::new(|name| {\n             assert!(name.as_bytes()[0] == 'a' as u8 && name.as_bytes()[1] == 'l' as u8);\n         }))\n     }\n }\n fn check_pedigree(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n-    for pet in &*arc {\n+    for pet in arc.iter() {\n         assert!(pet.of_good_pedigree());\n     }\n }"}]}