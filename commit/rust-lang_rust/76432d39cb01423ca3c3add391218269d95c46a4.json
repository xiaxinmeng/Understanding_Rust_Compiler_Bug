{"sha": "76432d39cb01423ca3c3add391218269d95c46a4", "node_id": "C_kwDOAAsO6NoAKDc2NDMyZDM5Y2IwMTQyM2NhM2MzYWRkMzkxMjE4MjY5ZDk1YzQ2YTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-17T15:38:56Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T13:48:38Z"}, "message": "Reformat VSCode client code", "tree": {"sha": "ebba31b3760ab261b75b48fdcccc45af3aa2291d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebba31b3760ab261b75b48fdcccc45af3aa2291d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76432d39cb01423ca3c3add391218269d95c46a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76432d39cb01423ca3c3add391218269d95c46a4", "html_url": "https://github.com/rust-lang/rust/commit/76432d39cb01423ca3c3add391218269d95c46a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76432d39cb01423ca3c3add391218269d95c46a4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "364308d1dc653199dd786486f4eed0d456a95330", "url": "https://api.github.com/repos/rust-lang/rust/commits/364308d1dc653199dd786486f4eed0d456a95330", "html_url": "https://github.com/rust-lang/rust/commit/364308d1dc653199dd786486f4eed0d456a95330"}], "stats": {"total": 154, "additions": 82, "deletions": 72}, "files": [{"sha": "c8b54970a5fa724692562c380656864cd2656991", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/76432d39cb01423ca3c3add391218269d95c46a4/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/76432d39cb01423ca3c3add391218269d95c46a4/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=76432d39cb01423ca3c3add391218269d95c46a4", "patch": "@@ -8,11 +8,11 @@ import { applySnippetWorkspaceEdit, applySnippetTextEdits } from \"./snippets\";\n import { spawnSync } from \"child_process\";\n import { RunnableQuickPick, selectRunnable, createTask, createArgs } from \"./run\";\n import { AstInspector } from \"./ast_inspector\";\n-import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor, RustEditor } from './util';\n+import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor, RustEditor } from \"./util\";\n import { startDebugSession, makeDebugConfig } from \"./debug\";\n import { LanguageClient } from \"vscode-languageclient/node\";\n import { LINKED_COMMANDS } from \"./client\";\n-import { DependencyId } from './dependencies_provider';\n+import { DependencyId } from \"./dependencies_provider\";\n \n export * from \"./ast_inspector\";\n export * from \"./run\";\n@@ -291,8 +291,7 @@ export function revealDependency(ctx: CtxInit): Cmd {\n             do {\n                 documentPath = path.dirname(documentPath);\n                 parentChain.push({ id: documentPath.toLowerCase() });\n-            }\n-            while (!ctx.dependencies.contains(documentPath));\n+            } while (!ctx.dependencies.contains(documentPath));\n             parentChain.reverse();\n             for (const idx in parentChain) {\n                 await ctx.treeView.reveal(parentChain[idx], { select: true, expand: true });\n@@ -302,7 +301,7 @@ export function revealDependency(ctx: CtxInit): Cmd {\n }\n \n export async function execRevealDependency(e: RustEditor): Promise<void> {\n-    await vscode.commands.executeCommand('rust-analyzer.revealDependency', e);\n+    await vscode.commands.executeCommand(\"rust-analyzer.revealDependency\", e);\n }\n \n export function ssr(ctx: CtxInit): Cmd {"}, {"sha": "feb39198c22819adbe118e0cfa89e60548d5f4ff", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/76432d39cb01423ca3c3add391218269d95c46a4/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/76432d39cb01423ca3c3add391218269d95c46a4/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=76432d39cb01423ca3c3add391218269d95c46a4", "patch": "@@ -3,19 +3,24 @@ import * as lc from \"vscode-languageclient/node\";\n import * as ra from \"./lsp_ext\";\n import * as path from \"path\";\n \n-import {Config, prepareVSCodeConfig} from './config';\n-import {createClient} from './client';\n+import {Config, prepareVSCodeConfig} from \"./config\";\n+import {createClient} from \"./client\";\n import {\n     executeDiscoverProject,\n     isRustDocument,\n     isRustEditor,\n     LazyOutputChannel,\n     log,\n     RustEditor,\n-} from './util';\n-import {ServerStatusParams} from './lsp_ext';\n-import {Dependency, DependencyFile, RustDependenciesProvider, DependencyId} from './dependencies_provider';\n-import {execRevealDependency} from './commands';\n+} from \"./util\";\n+import {ServerStatusParams} from \"./lsp_ext\";\n+import {\n+    Dependency,\n+    DependencyFile,\n+    RustDependenciesProvider,\n+    DependencyId,\n+} from \"./dependencies_provider\";\n+import {execRevealDependency} from \"./commands\";\n import {PersistentState} from \"./persistent_state\";\n import {bootstrap} from \"./bootstrap\";\n import {ExecOptions} from \"child_process\";\n@@ -113,13 +118,14 @@ export class Ctx {\n         this.state = new PersistentState(extCtx.globalState);\n         this.config = new Config(extCtx);\n \n-        this.updateCommands(\"disable\");\n+        this.updateCommands(\"disable\"\n+        );\n         this.setServerStatus({\n             health: \"stopped\",\n         });\n-        vscode.window.onDidChangeActiveTextEditor(e => {\n+        vscode.window.onDidChangeActiveTextEditor((e) => {\n             if (e && isRustEditor(e)) {\n-                execRevealDependency(e).catch(reason => {\n+                execRevealDependency(e).catch((reason) => {\n                     void vscode.window.showErrorMessage(`Dependency error: ${reason}`);\n                 });\n             }"}, {"sha": "b8b33a9be6ad8d135968bd690c83153e024d189d", "filename": "editors/code/src/dependencies_provider.ts", "status": "modified", "additions": 48, "deletions": 36, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/76432d39cb01423ca3c3add391218269d95c46a4/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/76432d39cb01423ca3c3add391218269d95c46a4/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=76432d39cb01423ca3c3add391218269d95c46a4", "patch": "@@ -1,26 +1,29 @@\n-import * as vscode from 'vscode';\n-import * as fspath from 'path';\n-import * as fs from 'fs';\n-import * as os from 'os';\n-import { activeToolchain, Cargo, Crate, getRustcVersion } from './toolchain';\n+import * as vscode from \"vscode\";\n+import * as fspath from \"path\";\n+import * as fs from \"fs\";\n+import * as os from \"os\";\n+import { activeToolchain, Cargo, Crate, getRustcVersion } from \"./toolchain\";\n \n const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n \n-export class RustDependenciesProvider implements vscode.TreeDataProvider<Dependency | DependencyFile>{\n+export class RustDependenciesProvider\n+    implements vscode.TreeDataProvider<Dependency | DependencyFile>\n+{\n     cargo: Cargo;\n     dependenciesMap: { [id: string]: Dependency | DependencyFile };\n \n-    constructor(\n-        private readonly workspaceRoot: string,\n-    ) {\n-        this.cargo = new Cargo(this.workspaceRoot || '.', debugOutput);\n+    constructor(private readonly workspaceRoot: string) {\n+        this.cargo = new Cargo(this.workspaceRoot || \".\", debugOutput);\n         this.dependenciesMap = {};\n     }\n \n-    private _onDidChangeTreeData: vscode.EventEmitter<Dependency | DependencyFile | undefined | null | void> = new vscode.EventEmitter<Dependency | undefined | null | void>();\n-\n-    readonly onDidChangeTreeData: vscode.Event<Dependency | DependencyFile | undefined | null | void> = this._onDidChangeTreeData.event;\n+    private _onDidChangeTreeData: vscode.EventEmitter<\n+        Dependency | DependencyFile | undefined | null | void\n+    > = new vscode.EventEmitter<Dependency | undefined | null | void>();\n \n+    readonly onDidChangeTreeData: vscode.Event<\n+        Dependency | DependencyFile | undefined | null | void\n+    > = this._onDidChangeTreeData.event;\n \n     getDependency(filePath: string): Dependency | DependencyFile | undefined {\n         return this.dependenciesMap[filePath.toLowerCase()];\n@@ -34,7 +37,9 @@ export class RustDependenciesProvider implements vscode.TreeDataProvider<Depende\n         this._onDidChangeTreeData.fire();\n     }\n \n-    getParent?(element: Dependency | DependencyFile): vscode.ProviderResult<Dependency | DependencyFile> {\n+    getParent?(\n+        element: Dependency | DependencyFile\n+    ): vscode.ProviderResult<Dependency | DependencyFile> {\n         if (element instanceof Dependency) return undefined;\n         return element.parent;\n     }\n@@ -44,39 +49,34 @@ export class RustDependenciesProvider implements vscode.TreeDataProvider<Depende\n         return element;\n     }\n \n-    getChildren(element?: Dependency | DependencyFile): vscode.ProviderResult<Dependency[] | DependencyFile[]> {\n+    getChildren(\n+        element?: Dependency | DependencyFile\n+    ): vscode.ProviderResult<Dependency[] | DependencyFile[]> {\n         return new Promise((resolve, _reject) => {\n             if (!this.workspaceRoot) {\n-                void vscode.window.showInformationMessage('No dependency in empty workspace');\n+                void vscode.window.showInformationMessage(\"No dependency in empty workspace\");\n                 return Promise.resolve([]);\n             }\n \n             if (element) {\n-                const files = fs.readdirSync(element.dependencyPath).map(fileName => {\n+                const files = fs.readdirSync(element.dependencyPath).map((fileName) => {\n                     const filePath = fspath.join(element.dependencyPath, fileName);\n-                    const collapsibleState = fs.lstatSync(filePath).isDirectory() ?\n-                        vscode.TreeItemCollapsibleState.Collapsed :\n-                        vscode.TreeItemCollapsibleState.None;\n-                    const dep = new DependencyFile(\n-                        fileName,\n-                        filePath,\n-                        element,\n-                        collapsibleState\n-                    );\n+                    const collapsibleState = fs.lstatSync(filePath).isDirectory()\n+                        ? vscode.TreeItemCollapsibleState.Collapsed\n+                        : vscode.TreeItemCollapsibleState.None;\n+                    const dep = new DependencyFile(fileName, filePath, element, collapsibleState);\n                     this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n                     return dep;\n                 });\n-                return resolve(\n-                    files\n-                );\n+                return resolve(files);\n             } else {\n                 return resolve(this.getRootDependencies());\n             }\n         });\n     }\n \n     private async getRootDependencies(): Promise<Dependency[]> {\n-        const registryDir = fspath.join(os.homedir(), '.cargo', 'registry', 'src');\n+        const registryDir = fspath.join(os.homedir(), \".cargo\", \"registry\", \"src\");\n         const basePath = fspath.join(registryDir, fs.readdirSync(registryDir)[0]);\n         const deps = await this.getDepsInCartoTree(basePath);\n         const stdlib = await this.getStdLib();\n@@ -87,7 +87,17 @@ export class RustDependenciesProvider implements vscode.TreeDataProvider<Depende\n     private async getStdLib(): Promise<Dependency> {\n         const toolchain = await activeToolchain();\n         const rustVersion = await getRustcVersion(os.homedir());\n-        const stdlibPath = fspath.join(os.homedir(), '.rustup', 'toolchains', toolchain, 'lib', 'rustlib', 'src', 'rust', 'library');\n+        const stdlibPath = fspath.join(\n+            os.homedir(),\n+            \".rustup\",\n+            \"toolchains\",\n+            toolchain,\n+            \"lib\",\n+            \"rustlib\",\n+            \"src\",\n+            \"rust\",\n+            \"library\"\n+        );\n         const stdlib = new Dependency(\n             \"stdlib\",\n             rustVersion,\n@@ -110,7 +120,7 @@ export class RustDependenciesProvider implements vscode.TreeDataProvider<Depende\n             );\n         };\n \n-        const deps = crates.map(crate => {\n+        const deps = crates.map((crate) => {\n             const dep = toDep(crate.name, crate.version);\n             this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n             return dep;\n@@ -119,7 +129,6 @@ export class RustDependenciesProvider implements vscode.TreeDataProvider<Depende\n     }\n }\n \n-\n export class Dependency extends vscode.TreeItem {\n     constructor(\n         public readonly label: string,\n@@ -135,7 +144,6 @@ export class Dependency extends vscode.TreeItem {\n }\n \n export class DependencyFile extends vscode.TreeItem {\n-\n     constructor(\n         readonly label: string,\n         readonly dependencyPath: string,\n@@ -146,9 +154,13 @@ export class DependencyFile extends vscode.TreeItem {\n         const isDir = fs.lstatSync(this.dependencyPath).isDirectory();\n         this.id = this.dependencyPath.toLowerCase();\n         if (!isDir) {\n-            this.command = { command: 'rust-analyzer.openFile', title: \"Open File\", arguments: [vscode.Uri.file(this.dependencyPath)], };\n+            this.command = {\n+                command: \"rust-analyzer.openFile\",\n+                title: \"Open File\",\n+                arguments: [vscode.Uri.file(this.dependencyPath)],\n+            };\n         }\n     }\n }\n \n-export type DependencyId = { id: string };\n\\ No newline at end of file\n+export type DependencyId = { id: string };"}, {"sha": "c068cfc3118b9e02746e2b225cdf1aeb53f8edb9", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/76432d39cb01423ca3c3add391218269d95c46a4/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/76432d39cb01423ca3c3add391218269d95c46a4/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=76432d39cb01423ca3c3add391218269d95c46a4", "patch": "@@ -5,7 +5,6 @@ import * as readline from \"readline\";\n import * as vscode from \"vscode\";\n import { execute, log, memoizeAsync } from \"./util\";\n \n-\n const TREE_LINE_PATTERN = new RegExp(/(.+)\\sv(\\d+\\.\\d+\\.\\d+)(?:\\s\\((.+)\\))?/);\n const TOOLCHAIN_PATTERN = new RegExp(/(.*)\\s\\(.*\\)/);\n \n@@ -110,12 +109,12 @@ export class Cargo {\n         return await new Promise((resolve, reject) => {\n             const crates: Crate[] = [];\n \n-            const cargo = cp.spawn(pathToCargo, ['tree', '--prefix', 'none'], {\n-                stdio: ['ignore', 'pipe', 'pipe'],\n-                cwd: this.rootFolder\n+            const cargo = cp.spawn(pathToCargo, [\"tree\", \"--prefix\", \"none\"], {\n+                stdio: [\"ignore\", \"pipe\", \"pipe\"],\n+                cwd: this.rootFolder,\n             });\n             const rl = readline.createInterface({ input: cargo.stdout });\n-            rl.on('line', line => {\n+            rl.on(\"line\", (line) => {\n                 const match = line.match(TREE_LINE_PATTERN);\n                 if (match) {\n                     const name = match[1];\n@@ -128,18 +127,15 @@ export class Cargo {\n                     crates.push({ name, version });\n                 }\n             });\n-            cargo.on('exit', (exitCode, _) => {\n-                if (exitCode === 0)\n-                    resolve(crates);\n-                else\n-                    reject(new Error(`exit code: ${exitCode}.`));\n+            cargo.on(\"exit\", (exitCode, _) => {\n+                if (exitCode === 0) resolve(crates);\n+                else reject(new Error(`exit code: ${exitCode}.`));\n             });\n-\n         });\n     }\n \n     private shouldIgnore(extraInfo: string): boolean {\n-        return extraInfo !== undefined && (extraInfo === '*' || path.isAbsolute(extraInfo));\n+        return extraInfo !== undefined && (extraInfo === \"*\" || path.isAbsolute(extraInfo));\n     }\n \n     private async runCargo(\n@@ -176,26 +172,23 @@ export class Cargo {\n export async function activeToolchain(): Promise<string> {\n     const pathToRustup = await rustupPath();\n     return await new Promise((resolve, reject) => {\n-        const execution = cp.spawn(pathToRustup, ['show', 'active-toolchain'], {\n-            stdio: ['ignore', 'pipe', 'pipe'],\n-            cwd: os.homedir()\n+        const execution = cp.spawn(pathToRustup, [\"show\", \"active-toolchain\"], {\n+            stdio: [\"ignore\", \"pipe\", \"pipe\"],\n+            cwd: os.homedir(),\n         });\n         const rl = readline.createInterface({ input: execution.stdout });\n \n         let currToolchain: string | undefined = undefined;\n-        rl.on('line', line => {\n+        rl.on(\"line\", (line) => {\n             const match = line.match(TOOLCHAIN_PATTERN);\n             if (match) {\n                 currToolchain = match[1];\n             }\n         });\n-        execution.on('exit', (exitCode, _) => {\n-            if (exitCode === 0 && currToolchain)\n-                resolve(currToolchain);\n-            else\n-                reject(new Error(`exit code: ${exitCode}.`));\n+        execution.on(\"exit\", (exitCode, _) => {\n+            if (exitCode === 0 && currToolchain) resolve(currToolchain);\n+            else reject(new Error(`exit code: ${exitCode}.`));\n         });\n-\n     });\n }\n "}]}