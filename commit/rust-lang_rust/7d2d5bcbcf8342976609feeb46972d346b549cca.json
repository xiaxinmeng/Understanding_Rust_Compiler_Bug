{"sha": "7d2d5bcbcf8342976609feeb46972d346b549cca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMmQ1YmNiY2Y4MzQyOTc2NjA5ZmVlYjQ2OTcyZDM0NmI1NDljY2E=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-11T14:07:33Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-10-11T14:34:31Z"}, "message": "Code for enforcing `#[may_dangle]` attribute.", "tree": {"sha": "b8e4143d8d8436fa53e7ea16bd8dde8e14976244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8e4143d8d8436fa53e7ea16bd8dde8e14976244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d2d5bcbcf8342976609feeb46972d346b549cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2d5bcbcf8342976609feeb46972d346b549cca", "html_url": "https://github.com/rust-lang/rust/commit/7d2d5bcbcf8342976609feeb46972d346b549cca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d2d5bcbcf8342976609feeb46972d346b549cca/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ccc682542f9d77c6c02bf6e4520536b7c767c5", "html_url": "https://github.com/rust-lang/rust/commit/e8ccc682542f9d77c6c02bf6e4520536b7c767c5"}], "stats": {"total": 106, "additions": 91, "deletions": 15}, "files": [{"sha": "b48c37b2fc9f34409015a7669b168a544b702e07", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 91, "deletions": 15, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/7d2d5bcbcf8342976609feeb46972d346b549cca/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2d5bcbcf8342976609feeb46972d346b549cca/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=7d2d5bcbcf8342976609feeb46972d346b549cca", "patch": "@@ -402,16 +402,27 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(\n     // unbounded type parameter `T`, we must resume the recursive\n     // analysis on `T` (since it would be ignored by\n     // type_must_outlive).\n-    if has_dtor_of_interest(tcx, ty) {\n-        debug!(\"iterate_over_potentially_unsafe_regions_in_type \\\n-                {}ty: {} - is a dtorck type!\",\n-               (0..depth).map(|_| ' ').collect::<String>(),\n-               ty);\n-\n-        cx.rcx.type_must_outlive(infer::SubregionOrigin::SafeDestructor(cx.span),\n-                                 ty, tcx.mk_region(ty::ReScope(cx.parent_scope)));\n-\n-        return Ok(());\n+    let dropck_kind = has_dtor_of_interest(tcx, ty);\n+    debug!(\"iterate_over_potentially_unsafe_regions_in_type \\\n+            ty: {:?} dropck_kind: {:?}\", ty, dropck_kind);\n+    match dropck_kind {\n+        DropckKind::NoBorrowedDataAccessedInMyDtor => {\n+            // The maximally blind attribute.\n+        }\n+        DropckKind::BorrowedDataMustStrictlyOutliveSelf => {\n+            cx.rcx.type_must_outlive(infer::SubregionOrigin::SafeDestructor(cx.span),\n+                                     ty, tcx.mk_region(ty::ReScope(cx.parent_scope)));\n+            return Ok(());\n+        }\n+        DropckKind::RevisedSelf(revised_ty) => {\n+            cx.rcx.type_must_outlive(infer::SubregionOrigin::SafeDestructor(cx.span),\n+                                     revised_ty, tcx.mk_region(ty::ReScope(cx.parent_scope)));\n+            // Do not return early from this case; we want\n+            // to recursively process the internal structure of Self\n+            // (because even though the Drop for Self has been asserted\n+            //  safe, the types instantiated for the generics of Self\n+            //  may themselves carry dropck constraints.)\n+        }\n     }\n \n     debug!(\"iterate_over_potentially_unsafe_regions_in_type \\\n@@ -492,16 +503,81 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n+enum DropckKind<'tcx> {\n+    /// The \"safe\" kind; i.e. conservatively assume any borrow\n+    /// accessed by dtor, and therefore such data must strictly\n+    /// outlive self.\n+    ///\n+    /// Equivalent to RevisedTy with no change to the self type.\n+    ///\n+    /// FIXME: this name may not be general enough; it should be\n+    /// talking about Phantom lifetimes rather than just borrows.\n+    ///\n+    /// (actually, pnkfelix is not 100% sure that's the right\n+    /// viewpoint.  If I'm holding a phantom lifetime just to\n+    /// constrain a reference type that occurs solely in *negative*\n+    /// type positions, then my destructor cannot itself ever actually\n+    /// access such references, right? And don't we end up essentially\n+    /// requring people to put a fake borrow inside a PhantomData in\n+    /// order to make phantom lifetimes work anyway?)\n+    BorrowedDataMustStrictlyOutliveSelf,\n+\n+    /// The nearly completely-unsafe kind.\n+    ///\n+    /// Equivalent to RevisedSelf with *all* parameters remapped to ()\n+    /// (maybe...?)\n+    NoBorrowedDataAccessedInMyDtor,\n+\n+    /// Assume all borrowed data access by dtor occurs as if Self has the\n+    /// type carried by this variant. In practice this means that some\n+    /// of the type parameters are remapped to `()`, because the developer\n+    /// has asserted that the destructor will not access their contents.\n+    RevisedSelf(Ty<'tcx>),\n+}\n+\n+/// Returns the classification of what kind of check should be applied\n+/// to `ty`, which may include a revised type where some of the type\n+/// parameters are re-mapped to `()` to reflect the destructor's\n+/// \"purity\" with respect to their actual contents.\n fn has_dtor_of_interest<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                        ty: Ty<'tcx>) -> bool {\n+                                        ty: Ty<'tcx>) -> DropckKind<'tcx> {\n     match ty.sty {\n-        ty::TyAdt(def, _) => {\n-            def.is_dtorck(tcx)\n+        ty::TyAdt(adt_def, substs) => {\n+            if !adt_def.is_dtorck(tcx) {\n+                return DropckKind::NoBorrowedDataAccessedInMyDtor;\n+            }\n+\n+            // Find the `impl<..> Drop for _` to inspect any\n+            // attributes attached to the impl's generics.\n+            let opt_dtor_method = adt_def.destructor();\n+            let dtor_method = if let Some(dtor_method) = opt_dtor_method {\n+                dtor_method\n+            } else {\n+                return DropckKind::BorrowedDataMustStrictlyOutliveSelf;\n+            };\n+            let method = tcx.impl_or_trait_item(dtor_method);\n+            let substs = Substs::for_item(tcx,\n+                                          method.container().id(),\n+                                          |def, _| if def.pure_wrt_drop {\n+                                              tcx.mk_region(ty::ReStatic)\n+                                          } else {\n+                                              substs.region_for_def(def)\n+                                          },\n+                                          |def, _| if def.pure_wrt_drop {\n+                                              tcx.mk_nil()\n+                                          } else {\n+                                              substs.type_for_def(def)\n+                                          });\n+            let revised_ty = tcx.mk_adt(adt_def, &substs);\n+            return DropckKind::RevisedSelf(revised_ty);\n         }\n         ty::TyTrait(..) | ty::TyProjection(..) | ty::TyAnon(..) => {\n             debug!(\"ty: {:?} isn't known, and therefore is a dropck type\", ty);\n-            true\n+            return DropckKind::BorrowedDataMustStrictlyOutliveSelf;\n         },\n-        _ => false\n+        _ => {\n+            return DropckKind::NoBorrowedDataAccessedInMyDtor;\n+        }\n     }\n }"}]}