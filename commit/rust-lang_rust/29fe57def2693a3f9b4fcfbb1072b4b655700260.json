{"sha": "29fe57def2693a3f9b4fcfbb1072b4b655700260", "node_id": "C_kwDOAAsO6NoAKDI5ZmU1N2RlZjI2OTNhM2Y5YjRmY2ZiYjEwNzJiNGI2NTU3MDAyNjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-04T23:37:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-04T23:37:56Z"}, "message": "Rollup merge of #90022 - hkmatsumoto:self-upper-as-generic-parameter, r=jackh726\n\nExplain why `Self` is invalid in generic parameters\n\nClose #89985.\n\nr? `@estebank`", "tree": {"sha": "75d7c86abe168f2f7773e72c1023c671c2534439", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75d7c86abe168f2f7773e72c1023c671c2534439"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29fe57def2693a3f9b4fcfbb1072b4b655700260", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhq/vUCRBK7hj4Ov3rIwAAIQkIAAtiSZfadzMDqh9XNRItj54+\nhDGKRaN3PwwMG6vvXMjnubkBQW7PZv5uCUVwHRMttiEzu2UM5MA5xKcaKOFZjsc3\nQRb8kwzyrFtSmqj5BJTWiUUelabwIPUayCYYjt5KfYG2gUTinET7bNmtp7YEOX2t\nrY9CXrGKklp/iLzWPTR5C9KppNjG8w0UOjwseBgoYNGzmWDMlLBWBftfn4W++Vn7\nDK8qQ3i+HoH3Y7eWa/5OTShJKqYGjcvqqmMNRVZMKPGzDzq1bO2On4mY6L/hpkjW\ndCITfuKFsmN5OQxIIEc95uitPx9KEdUzXox0NVrfNP7bu1akVk0MJGwbZ7+/BWs=\n=1Xvz\n-----END PGP SIGNATURE-----\n", "payload": "tree 75d7c86abe168f2f7773e72c1023c671c2534439\nparent b97f375ea2c40926d941138a0b3e858ed3799071\nparent a72dd4a5b973a3d94876ebea66e428fabaff00b0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638661076 +0100\ncommitter GitHub <noreply@github.com> 1638661076 +0100\n\nRollup merge of #90022 - hkmatsumoto:self-upper-as-generic-parameter, r=jackh726\n\nExplain why `Self` is invalid in generic parameters\n\nClose #89985.\n\nr? `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29fe57def2693a3f9b4fcfbb1072b4b655700260", "html_url": "https://github.com/rust-lang/rust/commit/29fe57def2693a3f9b4fcfbb1072b4b655700260", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29fe57def2693a3f9b4fcfbb1072b4b655700260/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97f375ea2c40926d941138a0b3e858ed3799071", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97f375ea2c40926d941138a0b3e858ed3799071", "html_url": "https://github.com/rust-lang/rust/commit/b97f375ea2c40926d941138a0b3e858ed3799071"}, {"sha": "a72dd4a5b973a3d94876ebea66e428fabaff00b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a72dd4a5b973a3d94876ebea66e428fabaff00b0", "html_url": "https://github.com/rust-lang/rust/commit/a72dd4a5b973a3d94876ebea66e428fabaff00b0"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "07887a7a59c1db8321c026a43cda4ecb97b6562c", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29fe57def2693a3f9b4fcfbb1072b4b655700260/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fe57def2693a3f9b4fcfbb1072b4b655700260/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=29fe57def2693a3f9b4fcfbb1072b4b655700260", "patch": "@@ -92,6 +92,19 @@ impl<'a> Parser<'a> {\n             let attrs = self.parse_outer_attributes()?;\n             let param =\n                 self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n+                    if this.eat_keyword_noexpect(kw::SelfUpper) {\n+                        // `Self` as a generic param is invalid. Here we emit the diagnostic and continue parsing\n+                        // as if `Self` never existed.\n+                        this.struct_span_err(\n+                            this.prev_token.span,\n+                            \"unexpected keyword `Self` in generic parameters\",\n+                        )\n+                        .note(\"you cannot use `Self` as a generic parameter because it is reserved for associated items\")\n+                        .emit();\n+\n+                        this.eat(&token::Comma);\n+                    }\n+\n                     let param = if this.check_lifetime() {\n                         let lifetime = this.expect_lifetime();\n                         // Parse lifetime parameter."}, {"sha": "55c7ac128ffdecaa49b1d9f5d5b4b5843ab43008", "filename": "src/test/ui/keyword/keyword-self-as-type-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29fe57def2693a3f9b4fcfbb1072b4b655700260/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29fe57def2693a3f9b4fcfbb1072b4b655700260/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.rs?ref=29fe57def2693a3f9b4fcfbb1072b4b655700260", "patch": "@@ -1,10 +1,10 @@\n // Regression test of #36638.\n \n struct Foo<Self>(Self);\n-//~^ ERROR expected identifier, found keyword `Self`\n-//~^^ ERROR E0392\n+//~^ ERROR unexpected keyword `Self` in generic parameters\n+//~| ERROR recursive type `Foo` has infinite size\n \n trait Bar<Self> {}\n-//~^ ERROR expected identifier, found keyword `Self`\n+//~^ ERROR unexpected keyword `Self` in generic parameters\n \n fn main() {}"}, {"sha": "fd101b32b4c9c0c2e30c12fea48376c30de10de4", "filename": "src/test/ui/keyword/keyword-self-as-type-param.stderr", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/29fe57def2693a3f9b4fcfbb1072b4b655700260/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29fe57def2693a3f9b4fcfbb1072b4b655700260/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr?ref=29fe57def2693a3f9b4fcfbb1072b4b655700260", "patch": "@@ -1,24 +1,33 @@\n-error: expected identifier, found keyword `Self`\n+error: unexpected keyword `Self` in generic parameters\n   --> $DIR/keyword-self-as-type-param.rs:3:12\n    |\n LL | struct Foo<Self>(Self);\n-   |            ^^^^ expected identifier, found keyword\n+   |            ^^^^\n+   |\n+   = note: you cannot use `Self` as a generic parameter because it is reserved for associated items\n \n-error: expected identifier, found keyword `Self`\n+error: unexpected keyword `Self` in generic parameters\n   --> $DIR/keyword-self-as-type-param.rs:7:11\n    |\n LL | trait Bar<Self> {}\n-   |           ^^^^ expected identifier, found keyword\n+   |           ^^^^\n+   |\n+   = note: you cannot use `Self` as a generic parameter because it is reserved for associated items\n \n-error[E0392]: parameter `Self` is never used\n-  --> $DIR/keyword-self-as-type-param.rs:3:12\n+error[E0072]: recursive type `Foo` has infinite size\n+  --> $DIR/keyword-self-as-type-param.rs:3:1\n    |\n LL | struct Foo<Self>(Self);\n-   |            ^^^^ unused parameter\n+   | ^^^^^^^^^^^^^^^^^----^^\n+   | |                |\n+   | |                recursive without indirection\n+   | recursive type has infinite size\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n-   = help: consider removing `Self`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `Self` to be a const parameter, use `const Self: usize` instead\n+LL | struct Foo<Self>(Box<Self>);\n+   |                  ++++    +\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0072`."}]}