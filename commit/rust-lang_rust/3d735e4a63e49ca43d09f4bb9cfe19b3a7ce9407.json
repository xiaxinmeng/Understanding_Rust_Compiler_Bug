{"sha": "3d735e4a63e49ca43d09f4bb9cfe19b3a7ce9407", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzM1ZTRhNjNlNDljYTQzZDA5ZjRiYjljZmUxOWIzYTdjZTk0MDc=", "commit": {"author": {"name": "David Creswick", "email": "dcrewi@gyrae.net", "date": "2013-09-06T00:03:54Z"}, "committer": {"name": "David Creswick", "email": "dcrewi@gyrae.net", "date": "2013-09-06T00:40:07Z"}, "message": "Generate random BigUints and BigInts", "tree": {"sha": "1cbf74957a83090ebb386405c73126a6a8fce3a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cbf74957a83090ebb386405c73126a6a8fce3a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d735e4a63e49ca43d09f4bb9cfe19b3a7ce9407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d735e4a63e49ca43d09f4bb9cfe19b3a7ce9407", "html_url": "https://github.com/rust-lang/rust/commit/3d735e4a63e49ca43d09f4bb9cfe19b3a7ce9407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d735e4a63e49ca43d09f4bb9cfe19b3a7ce9407/comments", "author": {"login": "dcrewi", "id": 1852207, "node_id": "MDQ6VXNlcjE4NTIyMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1852207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcrewi", "html_url": "https://github.com/dcrewi", "followers_url": "https://api.github.com/users/dcrewi/followers", "following_url": "https://api.github.com/users/dcrewi/following{/other_user}", "gists_url": "https://api.github.com/users/dcrewi/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcrewi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcrewi/subscriptions", "organizations_url": "https://api.github.com/users/dcrewi/orgs", "repos_url": "https://api.github.com/users/dcrewi/repos", "events_url": "https://api.github.com/users/dcrewi/events{/privacy}", "received_events_url": "https://api.github.com/users/dcrewi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dcrewi", "id": 1852207, "node_id": "MDQ6VXNlcjE4NTIyMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1852207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcrewi", "html_url": "https://github.com/dcrewi", "followers_url": "https://api.github.com/users/dcrewi/followers", "following_url": "https://api.github.com/users/dcrewi/following{/other_user}", "gists_url": "https://api.github.com/users/dcrewi/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcrewi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcrewi/subscriptions", "organizations_url": "https://api.github.com/users/dcrewi/orgs", "repos_url": "https://api.github.com/users/dcrewi/repos", "events_url": "https://api.github.com/users/dcrewi/events{/privacy}", "received_events_url": "https://api.github.com/users/dcrewi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84a7b5ae3b3a820fb0a26292632856ceb959b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d84a7b5ae3b3a820fb0a26292632856ceb959b3e", "html_url": "https://github.com/rust-lang/rust/commit/d84a7b5ae3b3a820fb0a26292632856ceb959b3e"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "3738c914ca9a3873178d009161c1a894066b278a", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3d735e4a63e49ca43d09f4bb9cfe19b3a7ce9407/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d735e4a63e49ca43d09f4bb9cfe19b3a7ce9407/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=3d735e4a63e49ca43d09f4bb9cfe19b3a7ce9407", "patch": "@@ -23,6 +23,7 @@ use std::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use std::int;\n use std::num;\n use std::num::{IntConvertible, Zero, One, ToStrRadix, FromStrRadix, Orderable};\n+use std::rand::{Rng, RngUtil};\n use std::str;\n use std::uint;\n use std::vec;\n@@ -520,6 +521,27 @@ impl FromStrRadix for BigUint {\n     }\n }\n \n+trait RandBigUInt {\n+    /// Generate a random BigUint of the given bit size.\n+    fn gen_biguint(&mut self, bit_size: uint) -> BigUint;\n+}\n+\n+impl<R: RngUtil> RandBigUInt for R {\n+    /// Generate a random BigUint of the given bit size.\n+    fn gen_biguint(&mut self, bit_size: uint) -> BigUint {\n+        let (digits, rem) = bit_size.div_rem(&BigDigit::bits);\n+        let mut data = vec::with_capacity(digits+1);\n+        for _ in range(0, digits) {\n+            data.push(self.gen());\n+        }\n+        if rem > 0 {\n+            let final_digit: BigDigit = self.gen();\n+            data.push(final_digit >> (BigDigit::bits - rem));\n+        }\n+        return BigUint::new(data);\n+    }\n+}\n+\n impl BigUint {\n     /// Creates and initializes an BigUint.\n     #[inline]\n@@ -1051,6 +1073,22 @@ impl FromStrRadix for BigInt {\n     }\n }\n \n+trait RandBigInt {\n+    /// Generate a random BigInt of the given bit size.\n+    fn gen_bigint(&mut self, bit_size: uint) -> BigInt;\n+}\n+\n+impl<R: RngUtil> RandBigInt for R {\n+    /// Generate a random BigUint of the given bit size.\n+    fn gen_bigint(&mut self, bit_size: uint) -> BigInt {\n+        let biguint = self.gen_biguint(bit_size);\n+        let sign = if biguint.is_zero() { Zero }\n+            else if self.gen() { Plus }\n+            else { Minus };\n+        return BigInt::from_biguint(sign, biguint);\n+    }\n+}\n+\n impl BigInt {\n     /// Creates and initializes an BigInt.\n     #[inline]\n@@ -1112,6 +1150,7 @@ mod biguint_tests {\n     use std::cmp::{Less, Equal, Greater};\n     use std::int;\n     use std::num::{IntConvertible, Zero, One, FromStrRadix};\n+    use std::rand::{task_rng};\n     use std::str;\n     use std::uint;\n     use std::vec;\n@@ -1577,6 +1616,12 @@ mod biguint_tests {\n         check(20, \"2432902008176640000\");\n         check(30, \"265252859812191058636308480000000\");\n     }\n+\n+    #[test]\n+    fn test_rand() {\n+        let mut rng = task_rng();\n+        rng.gen_bigint(137);\n+    }\n }\n \n #[cfg(test)]\n@@ -1586,6 +1631,7 @@ mod bigint_tests {\n     use std::cmp::{Less, Equal, Greater};\n     use std::int;\n     use std::num::{IntConvertible, Zero, One, FromStrRadix};\n+    use std::rand::{task_rng};\n     use std::uint;\n \n     #[test]\n@@ -2006,6 +2052,13 @@ mod bigint_tests {\n         let zero: BigInt = Zero::zero();\n         assert_eq!(-zero, zero);\n     }\n+\n+    #[test]\n+    fn test_rand() {\n+        let mut rng = task_rng();\n+        rng.gen_bigint(137);\n+        assert!(rng.gen_bigint(0).is_zero());\n+    }\n }\n \n #[cfg(test)]"}]}