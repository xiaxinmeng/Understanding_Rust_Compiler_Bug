{"sha": "05d4cefd630cd9ae104555e69ceb3b1566298a6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZDRjZWZkNjMwY2Q5YWUxMDQ1NTVlNjljZWIzYjE1NjYyOThhNmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T15:53:21Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't pub export ast::Ty_ variants", "tree": {"sha": "aed7eb5d422c025726b39bbb9b9bc48a810c5f56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aed7eb5d422c025726b39bbb9b9bc48a810c5f56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05d4cefd630cd9ae104555e69ceb3b1566298a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05d4cefd630cd9ae104555e69ceb3b1566298a6a", "html_url": "https://github.com/rust-lang/rust/commit/05d4cefd630cd9ae104555e69ceb3b1566298a6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05d4cefd630cd9ae104555e69ceb3b1566298a6a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec61e632c0a00ccc2ca0494d5d3c8a0848c574f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec61e632c0a00ccc2ca0494d5d3c8a0848c574f2", "html_url": "https://github.com/rust-lang/rust/commit/ec61e632c0a00ccc2ca0494d5d3c8a0848c574f2"}], "stats": {"total": 254, "additions": 126, "deletions": 128}, "files": [{"sha": "813a7f71fe9a051516321214dcfa7b1094f3d8df", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -268,28 +268,29 @@ pub fn lower_ty_binding(lctx: &LoweringContext, b: &TypeBinding) -> hir::TypeBin\n }\n \n pub fn lower_ty(lctx: &LoweringContext, t: &Ty) -> P<hir::Ty> {\n+    use syntax::ast::TyKind::*;\n     P(hir::Ty {\n         id: t.id,\n         node: match t.node {\n-            TyInfer => hir::TyInfer,\n-            TyVec(ref ty) => hir::TyVec(lower_ty(lctx, ty)),\n-            TyPtr(ref mt) => hir::TyPtr(lower_mt(lctx, mt)),\n-            TyRptr(ref region, ref mt) => {\n+            Infer => hir::TyInfer,\n+            Vec(ref ty) => hir::TyVec(lower_ty(lctx, ty)),\n+            Ptr(ref mt) => hir::TyPtr(lower_mt(lctx, mt)),\n+            Rptr(ref region, ref mt) => {\n                 hir::TyRptr(lower_opt_lifetime(lctx, region), lower_mt(lctx, mt))\n             }\n-            TyBareFn(ref f) => {\n+            BareFn(ref f) => {\n                 hir::TyBareFn(P(hir::BareFnTy {\n                     lifetimes: lower_lifetime_defs(lctx, &f.lifetimes),\n                     unsafety: lower_unsafety(lctx, f.unsafety),\n                     abi: f.abi,\n                     decl: lower_fn_decl(lctx, &f.decl),\n                 }))\n             }\n-            TyTup(ref tys) => hir::TyTup(tys.iter().map(|ty| lower_ty(lctx, ty)).collect()),\n-            TyParen(ref ty) => {\n+            Tup(ref tys) => hir::TyTup(tys.iter().map(|ty| lower_ty(lctx, ty)).collect()),\n+            Paren(ref ty) => {\n                 return lower_ty(lctx, ty);\n             }\n-            TyPath(ref qself, ref path) => {\n+            Path(ref qself, ref path) => {\n                 let qself = qself.as_ref().map(|&QSelf { ref ty, position }| {\n                     hir::QSelf {\n                         ty: lower_ty(lctx, ty),\n@@ -298,19 +299,19 @@ pub fn lower_ty(lctx: &LoweringContext, t: &Ty) -> P<hir::Ty> {\n                 });\n                 hir::TyPath(qself, lower_path(lctx, path))\n             }\n-            TyObjectSum(ref ty, ref bounds) => {\n+            ObjectSum(ref ty, ref bounds) => {\n                 hir::TyObjectSum(lower_ty(lctx, ty), lower_bounds(lctx, bounds))\n             }\n-            TyFixedLengthVec(ref ty, ref e) => {\n+            FixedLengthVec(ref ty, ref e) => {\n                 hir::TyFixedLengthVec(lower_ty(lctx, ty), lower_expr(lctx, e))\n             }\n-            TyTypeof(ref expr) => {\n+            Typeof(ref expr) => {\n                 hir::TyTypeof(lower_expr(lctx, expr))\n             }\n-            TyPolyTraitRef(ref bounds) => {\n+            PolyTraitRef(ref bounds) => {\n                 hir::TyPolyTraitRef(bounds.iter().map(|b| lower_ty_param_bound(lctx, b)).collect())\n             }\n-            TyMac(_) => panic!(\"TyMac should have been expanded by now.\"),\n+            Mac(_) => panic!(\"TyMac should have been expanded by now.\"),\n         },\n         span: t.span,\n     })"}, {"sha": "10840933c0146906b0541dd627747298ee74cf50", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -1063,7 +1063,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n     fn visit_ty(&mut self, t: &ast::Ty) {\n         self.process_macro_use(t.span, t.id);\n         match t.node {\n-            ast::TyPath(_, ref path) => {\n+            ast::TyKind::Path(_, ref path) => {\n                 match self.lookup_type_ref(t.id) {\n                     Some(id) => {\n                         let sub_span = self.span.sub_span_for_type_name(t.span);"}, {"sha": "53fa1bfff38e47b082ed867885442c293781325c", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -316,7 +316,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n                 match typ.node {\n                     // Common case impl for a struct or something basic.\n-                    ast::TyPath(None, ref path) => {\n+                    ast::TyKind::Path(None, ref path) => {\n                         sub_span = self.span_utils.sub_span_for_type_name(path.span);\n                         filter!(self.span_utils, sub_span, path.span, None);\n                         type_data = self.lookup_ref_id(typ.id).map(|id| {"}, {"sha": "5752cbda9b970cda177b118b9107b6cd00f769a8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -24,7 +24,6 @@ pub use self::Stmt_::*;\n pub use self::StrStyle::*;\n pub use self::StructFieldKind::*;\n pub use self::TraitItem_::*;\n-pub use self::Ty_::*;\n pub use self::TyParamBound::*;\n pub use self::UnsafeSource::*;\n pub use self::ViewPath_::*;\n@@ -1523,7 +1522,7 @@ pub struct TypeBinding {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub struct Ty {\n     pub id: NodeId,\n-    pub node: Ty_,\n+    pub node: TyKind,\n     pub span: Span,\n }\n \n@@ -1543,36 +1542,36 @@ pub struct BareFnTy {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n /// The different kinds of types recognized by the compiler\n-pub enum Ty_ {\n-    TyVec(P<Ty>),\n+pub enum TyKind {\n+    Vec(P<Ty>),\n     /// A fixed length array (`[T; n]`)\n-    TyFixedLengthVec(P<Ty>, P<Expr>),\n+    FixedLengthVec(P<Ty>, P<Expr>),\n     /// A raw pointer (`*const T` or `*mut T`)\n-    TyPtr(MutTy),\n+    Ptr(MutTy),\n     /// A reference (`&'a T` or `&'a mut T`)\n-    TyRptr(Option<Lifetime>, MutTy),\n+    Rptr(Option<Lifetime>, MutTy),\n     /// A bare function (e.g. `fn(usize) -> bool`)\n-    TyBareFn(P<BareFnTy>),\n+    BareFn(P<BareFnTy>),\n     /// A tuple (`(A, B, C, D,...)`)\n-    TyTup(Vec<P<Ty>> ),\n+    Tup(Vec<P<Ty>> ),\n     /// A path (`module::module::...::Type`), optionally\n     /// \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.\n     ///\n     /// Type parameters are stored in the Path itself\n-    TyPath(Option<QSelf>, Path),\n+    Path(Option<QSelf>, Path),\n     /// Something like `A+B`. Note that `B` must always be a path.\n-    TyObjectSum(P<Ty>, TyParamBounds),\n+    ObjectSum(P<Ty>, TyParamBounds),\n     /// A type like `for<'a> Foo<&'a Bar>`\n-    TyPolyTraitRef(TyParamBounds),\n+    PolyTraitRef(TyParamBounds),\n     /// No-op; kept solely so that we can pretty-print faithfully\n-    TyParen(P<Ty>),\n+    Paren(P<Ty>),\n     /// Unused for now\n-    TyTypeof(P<Expr>),\n-    /// TyInfer means the type should be inferred instead of it having been\n+    Typeof(P<Expr>),\n+    /// TyKind::Infer means the type should be inferred instead of it having been\n     /// specified. This can appear anywhere in a type.\n-    TyInfer,\n+    Infer,\n     // A macro in the type position.\n-    TyMac(Mac)\n+    Mac(Mac),\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n@@ -1617,7 +1616,7 @@ impl Arg {\n             // HACK(eddyb) fake type for the self argument.\n             ty: P(Ty {\n                 id: DUMMY_NODE_ID,\n-                node: TyInfer,\n+                node: TyKind::Infer,\n                 span: DUMMY_SP,\n             }),\n             pat: P(Pat {"}, {"sha": "4e6fde10ade2abb6c71b96ba3fc482f1a8382007", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -212,10 +212,10 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n \n     let ty = ecx.ty(\n         span,\n-        ast::TyFixedLengthVec(\n+        ast::TyKind::FixedLengthVec(\n             ecx.ty(\n                 span,\n-                ast::TyTup(vec![ty_str.clone(), ty_str])\n+                ast::TyKind::Tup(vec![ty_str.clone(), ty_str])\n             ),\n             ecx.expr_usize(span, count),\n         ),"}, {"sha": "b58f8007e0aab5efd231e26660fc46c693b44865", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -367,7 +367,7 @@ impl DummyResult {\n     pub fn raw_ty(sp: Span) -> P<ast::Ty> {\n         P(ast::Ty {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::TyInfer,\n+            node: ast::TyKind::Infer,\n             span: sp\n         })\n     }"}, {"sha": "241ea976eee85add62f6851df4a09b32826e6580", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -52,7 +52,7 @@ pub trait AstBuilder {\n     // types\n     fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy;\n \n-    fn ty(&self, span: Span, ty: ast::Ty_) -> P<ast::Ty>;\n+    fn ty(&self, span: Span, ty: ast::TyKind) -> P<ast::Ty>;\n     fn ty_path(&self, ast::Path) -> P<ast::Ty>;\n     fn ty_sum(&self, ast::Path, ast::TyParamBounds) -> P<ast::Ty>;\n     fn ty_ident(&self, span: Span, idents: ast::Ident) -> P<ast::Ty>;\n@@ -385,7 +385,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         }\n     }\n \n-    fn ty(&self, span: Span, ty: ast::Ty_) -> P<ast::Ty> {\n+    fn ty(&self, span: Span, ty: ast::TyKind) -> P<ast::Ty> {\n         P(ast::Ty {\n             id: ast::DUMMY_NODE_ID,\n             span: span,\n@@ -394,12 +394,12 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn ty_path(&self, path: ast::Path) -> P<ast::Ty> {\n-        self.ty(path.span, ast::TyPath(None, path))\n+        self.ty(path.span, ast::TyKind::Path(None, path))\n     }\n \n     fn ty_sum(&self, path: ast::Path, bounds: ast::TyParamBounds) -> P<ast::Ty> {\n         self.ty(path.span,\n-                ast::TyObjectSum(self.ty_path(path),\n+                ast::TyKind::ObjectSum(self.ty_path(path),\n                                  bounds))\n     }\n \n@@ -417,7 +417,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                mutbl: ast::Mutability)\n         -> P<ast::Ty> {\n         self.ty(span,\n-                ast::TyRptr(lifetime, self.ty_mt(ty, mutbl)))\n+                ast::TyKind::Rptr(lifetime, self.ty_mt(ty, mutbl)))\n     }\n \n     fn ty_ptr(&self,\n@@ -426,7 +426,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n               mutbl: ast::Mutability)\n         -> P<ast::Ty> {\n         self.ty(span,\n-                ast::TyPtr(self.ty_mt(ty, mutbl)))\n+                ast::TyKind::Ptr(self.ty_mt(ty, mutbl)))\n     }\n \n     fn ty_option(&self, ty: P<ast::Ty>) -> P<ast::Ty> {\n@@ -440,7 +440,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn ty_infer(&self, span: Span) -> P<ast::Ty> {\n-        self.ty(span, ast::TyInfer)\n+        self.ty(span, ast::TyKind::Infer)\n     }\n \n     fn typaram(&self,"}, {"sha": "9b31465b5471ecc9ac72f1686ee3856189200c11", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -562,7 +562,7 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n             DeclKind::Local(local) => {\n                 // take it apart:\n                 let rewritten_local = local.map(|Local {id, pat, ty, init, span, attrs}| {\n-                    // expand the ty since TyFixedLengthVec contains an Expr\n+                    // expand the ty since TyKind::FixedLengthVec contains an Expr\n                     // and thus may have a macro use\n                     let expanded_ty = ty.map(|t| fld.fold_ty(t));\n                     // expand the pat (it might contain macro uses):\n@@ -1133,7 +1133,7 @@ fn expand_and_rename_method(sig: ast::MethodSig, body: P<ast::Block>,\n \n pub fn expand_type(t: P<ast::Ty>, fld: &mut MacroExpander) -> P<ast::Ty> {\n     let t = match t.node.clone() {\n-        ast::Ty_::TyMac(mac) => {\n+        ast::TyKind::Mac(mac) => {\n             if fld.cx.ecfg.features.unwrap().type_macros {\n                 let expanded_ty = match expand_mac_invoc(mac, t.span,\n                                                          |r| r.make_ty(),"}, {"sha": "1a6171e19811a9b914432def1f658b021814f1f7", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -380,46 +380,46 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n     t.map(|Ty {id, node, span}| Ty {\n         id: fld.new_id(id),\n         node: match node {\n-            TyInfer => node,\n-            TyVec(ty) => TyVec(fld.fold_ty(ty)),\n-            TyPtr(mt) => TyPtr(fld.fold_mt(mt)),\n-            TyRptr(region, mt) => {\n-                TyRptr(fld.fold_opt_lifetime(region), fld.fold_mt(mt))\n+            TyKind::Infer => node,\n+            TyKind::Vec(ty) => TyKind::Vec(fld.fold_ty(ty)),\n+            TyKind::Ptr(mt) => TyKind::Ptr(fld.fold_mt(mt)),\n+            TyKind::Rptr(region, mt) => {\n+                TyKind::Rptr(fld.fold_opt_lifetime(region), fld.fold_mt(mt))\n             }\n-            TyBareFn(f) => {\n-                TyBareFn(f.map(|BareFnTy {lifetimes, unsafety, abi, decl}| BareFnTy {\n+            TyKind::BareFn(f) => {\n+                TyKind::BareFn(f.map(|BareFnTy {lifetimes, unsafety, abi, decl}| BareFnTy {\n                     lifetimes: fld.fold_lifetime_defs(lifetimes),\n                     unsafety: unsafety,\n                     abi: abi,\n                     decl: fld.fold_fn_decl(decl)\n                 }))\n             }\n-            TyTup(tys) => TyTup(tys.move_map(|ty| fld.fold_ty(ty))),\n-            TyParen(ty) => TyParen(fld.fold_ty(ty)),\n-            TyPath(qself, path) => {\n+            TyKind::Tup(tys) => TyKind::Tup(tys.move_map(|ty| fld.fold_ty(ty))),\n+            TyKind::Paren(ty) => TyKind::Paren(fld.fold_ty(ty)),\n+            TyKind::Path(qself, path) => {\n                 let qself = qself.map(|QSelf { ty, position }| {\n                     QSelf {\n                         ty: fld.fold_ty(ty),\n                         position: position\n                     }\n                 });\n-                TyPath(qself, fld.fold_path(path))\n+                TyKind::Path(qself, fld.fold_path(path))\n             }\n-            TyObjectSum(ty, bounds) => {\n-                TyObjectSum(fld.fold_ty(ty),\n+            TyKind::ObjectSum(ty, bounds) => {\n+                TyKind::ObjectSum(fld.fold_ty(ty),\n                             fld.fold_bounds(bounds))\n             }\n-            TyFixedLengthVec(ty, e) => {\n-                TyFixedLengthVec(fld.fold_ty(ty), fld.fold_expr(e))\n+            TyKind::FixedLengthVec(ty, e) => {\n+                TyKind::FixedLengthVec(fld.fold_ty(ty), fld.fold_expr(e))\n             }\n-            TyTypeof(expr) => {\n-                TyTypeof(fld.fold_expr(expr))\n+            TyKind::Typeof(expr) => {\n+                TyKind::Typeof(fld.fold_expr(expr))\n             }\n-            TyPolyTraitRef(bounds) => {\n-                TyPolyTraitRef(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n+            TyKind::PolyTraitRef(bounds) => {\n+                TyKind::PolyTraitRef(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n             }\n-            TyMac(mac) => {\n-                TyMac(fld.fold_mac(mac))\n+            TyKind::Mac(mac) => {\n+                TyKind::Mac(fld.fold_mac(mac))\n             }\n         },\n         span: fld.new_span(span)"}, {"sha": "d467405e08967c4ceaf019a92348401df912d438", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -916,7 +916,7 @@ mod tests {\n                             node: ast::ItemFn(P(ast::FnDecl {\n                                 inputs: vec!(ast::Arg{\n                                     ty: P(ast::Ty{id: ast::DUMMY_NODE_ID,\n-                                                  node: ast::TyPath(None, ast::Path{\n+                                                  node: ast::TyKind::Path(None, ast::Path{\n                                         span:sp(10,13),\n                                         global:false,\n                                         segments: vec!("}, {"sha": "1a8b1cbc374b9853f27bed761921d692909f1b8a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -42,10 +42,7 @@ use ast::{StmtExpr, StmtSemi, StmtMac, VariantData, StructField};\n use ast::StrStyle;\n use ast::SelfKind;\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n-use ast::{Ty, Ty_, TypeBinding, TyMac};\n-use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n-use ast::{TyParam, TyParamBounds, TyParen, TyPath, TyPtr};\n-use ast::{TyRptr, TyTup, TyVec};\n+use ast::{Ty, TyKind, TypeBinding, TyParam, TyParamBounds};\n use ast::TypeTraitItem;\n use ast::UnnamedField;\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n@@ -1058,7 +1055,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub fn parse_for_in_type(&mut self) -> PResult<'a, Ty_> {\n+    pub fn parse_for_in_type(&mut self) -> PResult<'a, TyKind> {\n         /*\n         Parses whatever can come after a `for` keyword in a type.\n         The `for` has already been consumed.\n@@ -1097,16 +1094,17 @@ impl<'a> Parser<'a> {\n                 Some(TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)).into_iter()\n                 .chain(other_bounds.into_vec())\n                 .collect();\n-            Ok(ast::TyPolyTraitRef(all_bounds))\n+            Ok(ast::TyKind::PolyTraitRef(all_bounds))\n         }\n     }\n \n-    pub fn parse_ty_path(&mut self) -> PResult<'a, Ty_> {\n-        Ok(TyPath(None, try!(self.parse_path(LifetimeAndTypesWithoutColons))))\n+    pub fn parse_ty_path(&mut self) -> PResult<'a, TyKind> {\n+        Ok(TyKind::Path(None, try!(self.parse_path(LifetimeAndTypesWithoutColons))))\n     }\n \n-    /// parse a TyBareFn type:\n-    pub fn parse_ty_bare_fn(&mut self, lifetime_defs: Vec<ast::LifetimeDef>) -> PResult<'a, Ty_> {\n+    /// parse a TyKind::BareFn type:\n+    pub fn parse_ty_bare_fn(&mut self, lifetime_defs: Vec<ast::LifetimeDef>)\n+                            -> PResult<'a, TyKind> {\n         /*\n \n         [unsafe] [extern \"ABI\"] fn <'lt> (S) -> T\n@@ -1134,7 +1132,7 @@ impl<'a> Parser<'a> {\n             output: ret_ty,\n             variadic: variadic\n         });\n-        Ok(TyBareFn(P(BareFnTy {\n+        Ok(TyKind::BareFn(P(BareFnTy {\n             abi: abi,\n             unsafety: unsafety,\n             lifetimes: lifetime_defs,\n@@ -1308,7 +1306,7 @@ impl<'a> Parser<'a> {\n         }\n \n         let sp = mk_sp(lo, self.last_span.hi);\n-        let sum = ast::TyObjectSum(lhs, bounds);\n+        let sum = ast::TyKind::ObjectSum(lhs, bounds);\n         Ok(P(Ty {id: ast::DUMMY_NODE_ID, node: sum, span: sp}))\n     }\n \n@@ -1339,14 +1337,14 @@ impl<'a> Parser<'a> {\n \n             try!(self.expect(&token::CloseDelim(token::Paren)));\n             if ts.len() == 1 && !last_comma {\n-                TyParen(ts.into_iter().nth(0).unwrap())\n+                TyKind::Paren(ts.into_iter().nth(0).unwrap())\n             } else {\n-                TyTup(ts)\n+                TyKind::Tup(ts)\n             }\n         } else if self.check(&token::BinOp(token::Star)) {\n             // STAR POINTER (bare pointer?)\n             self.bump();\n-            TyPtr(try!(self.parse_ptr()))\n+            TyKind::Ptr(try!(self.parse_ptr()))\n         } else if self.check(&token::OpenDelim(token::Bracket)) {\n             // VECTOR\n             try!(self.expect(&token::OpenDelim(token::Bracket)));\n@@ -1355,8 +1353,8 @@ impl<'a> Parser<'a> {\n             // Parse the `; e` in `[ i32; e ]`\n             // where `e` is a const expression\n             let t = match try!(self.maybe_parse_fixed_length_of_vec()) {\n-                None => TyVec(t),\n-                Some(suffix) => TyFixedLengthVec(t, suffix)\n+                None => TyKind::Vec(t),\n+                Some(suffix) => TyKind::FixedLengthVec(t, suffix)\n             };\n             try!(self.expect(&token::CloseDelim(token::Bracket)));\n             t\n@@ -1376,13 +1374,13 @@ impl<'a> Parser<'a> {\n             try!(self.expect(&token::OpenDelim(token::Paren)));\n             let e = try!(self.parse_expr());\n             try!(self.expect(&token::CloseDelim(token::Paren)));\n-            TyTypeof(e)\n+            TyKind::Typeof(e)\n         } else if self.eat_lt() {\n \n             let (qself, path) =\n                  try!(self.parse_qualified_path(NoTypesAllowed));\n \n-            TyPath(Some(qself), path)\n+            TyKind::Path(Some(qself), path)\n         } else if self.check(&token::ModSep) ||\n                   self.token.is_ident() ||\n                   self.token.is_path() {\n@@ -1395,14 +1393,14 @@ impl<'a> Parser<'a> {\n                                                      seq_sep_none(),\n                                                      |p| p.parse_token_tree()));\n                 let hi = self.span.hi;\n-                TyMac(spanned(lo, hi, Mac_ { path: path, tts: tts, ctxt: EMPTY_CTXT }))\n+                TyKind::Mac(spanned(lo, hi, Mac_ { path: path, tts: tts, ctxt: EMPTY_CTXT }))\n             } else {\n                 // NAMED TYPE\n-                TyPath(None, path)\n+                TyKind::Path(None, path)\n             }\n         } else if self.eat(&token::Underscore) {\n             // TYPE TO BE INFERRED\n-            TyInfer\n+            TyKind::Infer\n         } else {\n             let this_token_str = self.this_token_to_string();\n             let msg = format!(\"expected type, found `{}`\", this_token_str);\n@@ -1413,12 +1411,12 @@ impl<'a> Parser<'a> {\n         Ok(P(Ty {id: ast::DUMMY_NODE_ID, node: t, span: sp}))\n     }\n \n-    pub fn parse_borrowed_pointee(&mut self) -> PResult<'a, Ty_> {\n+    pub fn parse_borrowed_pointee(&mut self) -> PResult<'a, TyKind> {\n         // look for `&'lt` or `&'foo ` and interpret `foo` as the region name:\n         let opt_lifetime = try!(self.parse_opt_lifetime());\n \n         let mt = try!(self.parse_mt());\n-        return Ok(TyRptr(opt_lifetime, mt));\n+        return Ok(TyKind::Rptr(opt_lifetime, mt));\n     }\n \n     pub fn parse_ptr(&mut self) -> PResult<'a, MutTy> {\n@@ -1498,7 +1496,7 @@ impl<'a> Parser<'a> {\n         } else {\n             P(Ty {\n                 id: ast::DUMMY_NODE_ID,\n-                node: TyInfer,\n+                node: TyKind::Infer,\n                 span: mk_sp(self.span.lo, self.span.hi),\n             })\n         };\n@@ -4809,7 +4807,7 @@ impl<'a> Parser<'a> {\n         let opt_trait = if could_be_trait && self.eat_keyword(keywords::For) {\n             // New-style trait. Reinterpret the type as a trait.\n             match ty.node {\n-                TyPath(None, ref path) => {\n+                TyKind::Path(None, ref path) => {\n                     Some(TraitRef {\n                         path: (*path).clone(),\n                         ref_id: ty.id,"}, {"sha": "1e57d347f5a1c54c03713be127e010b12ae72ca7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -957,25 +957,25 @@ impl<'a> State<'a> {\n         try!(self.maybe_print_comment(ty.span.lo));\n         try!(self.ibox(0));\n         match ty.node {\n-            ast::TyVec(ref ty) => {\n+            ast::TyKind::Vec(ref ty) => {\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.print_type(&**ty));\n                 try!(word(&mut self.s, \"]\"));\n             }\n-            ast::TyPtr(ref mt) => {\n+            ast::TyKind::Ptr(ref mt) => {\n                 try!(word(&mut self.s, \"*\"));\n                 match mt.mutbl {\n                     ast::MutMutable => try!(self.word_nbsp(\"mut\")),\n                     ast::MutImmutable => try!(self.word_nbsp(\"const\")),\n                 }\n                 try!(self.print_type(&*mt.ty));\n             }\n-            ast::TyRptr(ref lifetime, ref mt) => {\n+            ast::TyKind::Rptr(ref lifetime, ref mt) => {\n                 try!(word(&mut self.s, \"&\"));\n                 try!(self.print_opt_lifetime(lifetime));\n                 try!(self.print_mt(mt));\n             }\n-            ast::TyTup(ref elts) => {\n+            ast::TyKind::Tup(ref elts) => {\n                 try!(self.popen());\n                 try!(self.commasep(Inconsistent, &elts[..],\n                                    |s, ty| s.print_type(&**ty)));\n@@ -984,12 +984,12 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.pclose());\n             }\n-            ast::TyParen(ref typ) => {\n+            ast::TyKind::Paren(ref typ) => {\n                 try!(self.popen());\n                 try!(self.print_type(&**typ));\n                 try!(self.pclose());\n             }\n-            ast::TyBareFn(ref f) => {\n+            ast::TyKind::BareFn(ref f) => {\n                 let generics = ast::Generics {\n                     lifetimes: f.lifetimes.clone(),\n                     ty_params: P::empty(),\n@@ -1005,35 +1005,35 @@ impl<'a> State<'a> {\n                                       &generics,\n                                       None));\n             }\n-            ast::TyPath(None, ref path) => {\n+            ast::TyKind::Path(None, ref path) => {\n                 try!(self.print_path(path, false, 0));\n             }\n-            ast::TyPath(Some(ref qself), ref path) => {\n+            ast::TyKind::Path(Some(ref qself), ref path) => {\n                 try!(self.print_qpath(path, qself, false))\n             }\n-            ast::TyObjectSum(ref ty, ref bounds) => {\n+            ast::TyKind::ObjectSum(ref ty, ref bounds) => {\n                 try!(self.print_type(&**ty));\n                 try!(self.print_bounds(\"+\", &bounds[..]));\n             }\n-            ast::TyPolyTraitRef(ref bounds) => {\n+            ast::TyKind::PolyTraitRef(ref bounds) => {\n                 try!(self.print_bounds(\"\", &bounds[..]));\n             }\n-            ast::TyFixedLengthVec(ref ty, ref v) => {\n+            ast::TyKind::FixedLengthVec(ref ty, ref v) => {\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.print_type(&**ty));\n                 try!(word(&mut self.s, \"; \"));\n                 try!(self.print_expr(&**v));\n                 try!(word(&mut self.s, \"]\"));\n             }\n-            ast::TyTypeof(ref e) => {\n+            ast::TyKind::Typeof(ref e) => {\n                 try!(word(&mut self.s, \"typeof(\"));\n                 try!(self.print_expr(&**e));\n                 try!(word(&mut self.s, \")\"));\n             }\n-            ast::TyInfer => {\n+            ast::TyKind::Infer => {\n                 try!(word(&mut self.s, \"_\"));\n             }\n-            ast::TyMac(ref m) => {\n+            ast::TyKind::Mac(ref m) => {\n                 try!(self.print_mac(m, token::Paren));\n             }\n         }\n@@ -2959,7 +2959,7 @@ impl<'a> State<'a> {\n     pub fn print_arg(&mut self, input: &ast::Arg, is_closure: bool) -> io::Result<()> {\n         try!(self.ibox(INDENT_UNIT));\n         match input.ty.node {\n-            ast::TyInfer if is_closure => try!(self.print_pat(&*input.pat)),\n+            ast::TyKind::Infer if is_closure => try!(self.print_pat(&*input.pat)),\n             _ => {\n                 match input.pat.node {\n                     ast::PatIdent(_, ref path1, _) if"}, {"sha": "24890d2cbed783fec6c6ac3bda03c7199eb962ee", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -358,7 +358,7 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n           ast::ItemFn(ref decl, _, _, _, ref generics, _) => {\n             let no_output = match decl.output {\n                 ast::FunctionRetTy::Default(..) => true,\n-                ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyTup(vec![]) => true,\n+                ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyKind::Tup(vec![]) => true,\n                 _ => false\n             };\n             if decl.inputs.is_empty()\n@@ -395,7 +395,7 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n                 let input_cnt = decl.inputs.len();\n                 let no_output = match decl.output {\n                     ast::FunctionRetTy::Default(..) => true,\n-                    ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyTup(vec![]) => true,\n+                    ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyKind::Tup(vec![]) => true,\n                     _ => false\n                 };\n                 let tparm_cnt = generics.ty_params.len();\n@@ -494,7 +494,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     let main_meta = ecx.meta_word(sp, token::intern_and_get_ident(\"main\"));\n     let main_attr = ecx.attribute(sp, main_meta);\n     // pub fn main() { ... }\n-    let main_ret_ty = ecx.ty(sp, ast::TyTup(vec![]));\n+    let main_ret_ty = ecx.ty(sp, ast::TyKind::Tup(vec![]));\n     let main_body = ecx.block_all(sp, vec![call_test_main], None);\n     let main = ast::ItemFn(ecx.fn_decl(vec![], main_ret_ty),\n                            ast::Unsafety::Normal,\n@@ -591,7 +591,7 @@ fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n     let static_lt = ecx.lifetime(sp, token::special_idents::static_lifetime.name);\n     // &'static [self::test::TestDescAndFn]\n     let static_type = ecx.ty_rptr(sp,\n-                                  ecx.ty(sp, ast::TyVec(struct_type)),\n+                                  ecx.ty(sp, ast::TyKind::Vec(struct_type)),\n                                   Some(static_lt),\n                                   ast::MutImmutable);\n     // static TESTS: $static_type = &[...];"}, {"sha": "44b3e581849a966ccf639a8f31c97ecd6656383b", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -328,45 +328,45 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n     match typ.node {\n-        TyVec(ref ty) | TyParen(ref ty) => {\n+        TyKind::Vec(ref ty) | TyKind::Paren(ref ty) => {\n             visitor.visit_ty(ty)\n         }\n-        TyPtr(ref mutable_type) => {\n+        TyKind::Ptr(ref mutable_type) => {\n             visitor.visit_ty(&mutable_type.ty)\n         }\n-        TyRptr(ref opt_lifetime, ref mutable_type) => {\n+        TyKind::Rptr(ref opt_lifetime, ref mutable_type) => {\n             walk_list!(visitor, visit_lifetime, opt_lifetime);\n             visitor.visit_ty(&mutable_type.ty)\n         }\n-        TyTup(ref tuple_element_types) => {\n+        TyKind::Tup(ref tuple_element_types) => {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }\n-        TyBareFn(ref function_declaration) => {\n+        TyKind::BareFn(ref function_declaration) => {\n             walk_fn_decl(visitor, &function_declaration.decl);\n             walk_list!(visitor, visit_lifetime_def, &function_declaration.lifetimes);\n         }\n-        TyPath(ref maybe_qself, ref path) => {\n+        TyKind::Path(ref maybe_qself, ref path) => {\n             if let Some(ref qself) = *maybe_qself {\n                 visitor.visit_ty(&qself.ty);\n             }\n             visitor.visit_path(path, typ.id);\n         }\n-        TyObjectSum(ref ty, ref bounds) => {\n+        TyKind::ObjectSum(ref ty, ref bounds) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }\n-        TyFixedLengthVec(ref ty, ref expression) => {\n+        TyKind::FixedLengthVec(ref ty, ref expression) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expression)\n         }\n-        TyPolyTraitRef(ref bounds) => {\n+        TyKind::PolyTraitRef(ref bounds) => {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }\n-        TyTypeof(ref expression) => {\n+        TyKind::Typeof(ref expression) => {\n             visitor.visit_expr(expression)\n         }\n-        TyInfer => {}\n-        TyMac(ref mac) => {\n+        TyKind::Infer => {}\n+        TyKind::Mac(ref mac) => {\n             visitor.visit_mac(mac)\n         }\n     }"}, {"sha": "e54ff637f25a8f04a1afc94129e1ec6bc6725a18", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -354,7 +354,7 @@ fn find_type_parameters(ty: &ast::Ty, ty_param_names: &[ast::Name]) -> Vec<P<ast\n     impl<'a> visit::Visitor<'a> for Visitor<'a> {\n         fn visit_ty(&mut self, ty: &'a ast::Ty) {\n             match ty.node {\n-                ast::TyPath(_, ref path) if !path.global => {\n+                ast::TyKind::Path(_, ref path) if !path.global => {\n                     match path.segments.first() {\n                         Some(segment) => {\n                             if self.ty_param_names.contains(&segment.identifier.name) {\n@@ -557,7 +557,7 @@ impl<'a> TraitDef<'a> {\n \n                 for ty in tys {\n                     // if we have already handled this type, skip it\n-                    if let ast::TyPath(_, ref p) = ty.node {\n+                    if let ast::TyKind::Path(_, ref p) = ty.node {\n                         if p.segments.len() == 1\n                             && ty_param_names.contains(&p.segments[0].identifier.name)\n                             || processed_field_types.contains(&p.segments) {"}, {"sha": "e5b82fa1afc532e00a6e6a3dffdf7068d11c3552", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -153,7 +153,7 @@ impl<'a> Ty<'a> {\n                 cx.ty_path(self.to_path(cx, span, self_ty, self_generics))\n             }\n             Tuple(ref fields) => {\n-                let ty = ast::TyTup(fields.iter()\n+                let ty = ast::TyKind::Tup(fields.iter()\n                     .map(|f| f.to_ty(cx, span, self_ty, self_generics))\n                     .collect());\n                 cx.ty(span, ty)"}, {"sha": "21b32153ed90577466221f9d9c26cae68b508d3b", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d4cefd630cd9ae104555e69ceb3b1566298a6a/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=05d4cefd630cd9ae104555e69ceb3b1566298a6a", "patch": "@@ -448,7 +448,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     -> P<ast::Expr> {\n         let sp = piece_ty.span;\n         let ty = ecx.ty_rptr(sp,\n-            ecx.ty(sp, ast::TyVec(piece_ty)),\n+            ecx.ty(sp, ast::TyKind::Vec(piece_ty)),\n             Some(ecx.lifetime(sp, special_idents::static_lifetime.name)),\n             ast::MutImmutable);\n         let slice = ecx.expr_vec_slice(sp, pieces);"}]}