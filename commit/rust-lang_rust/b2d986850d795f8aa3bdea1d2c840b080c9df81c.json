{"sha": "b2d986850d795f8aa3bdea1d2c840b080c9df81c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZDk4Njg1MGQ3OTVmOGFhM2JkZWExZDJjODQwYjA4MGM5ZGY4MWM=", "commit": {"author": {"name": "Tom Milligan", "email": "tommilligan@users.noreply.github.com", "date": "2018-10-03T16:53:39Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-04-15T15:18:12Z"}, "message": "Working basic dereference clip", "tree": {"sha": "cd5c54439b360095d9962a667d2412f1a0d0330a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd5c54439b360095d9962a667d2412f1a0d0330a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2d986850d795f8aa3bdea1d2c840b080c9df81c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d986850d795f8aa3bdea1d2c840b080c9df81c", "html_url": "https://github.com/rust-lang/rust/commit/b2d986850d795f8aa3bdea1d2c840b080c9df81c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2d986850d795f8aa3bdea1d2c840b080c9df81c/comments", "author": {"login": "tommilligan", "id": 12255914, "node_id": "MDQ6VXNlcjEyMjU1OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/12255914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommilligan", "html_url": "https://github.com/tommilligan", "followers_url": "https://api.github.com/users/tommilligan/followers", "following_url": "https://api.github.com/users/tommilligan/following{/other_user}", "gists_url": "https://api.github.com/users/tommilligan/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommilligan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommilligan/subscriptions", "organizations_url": "https://api.github.com/users/tommilligan/orgs", "repos_url": "https://api.github.com/users/tommilligan/repos", "events_url": "https://api.github.com/users/tommilligan/events{/privacy}", "received_events_url": "https://api.github.com/users/tommilligan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c496f4e63f5621872060b21793c5ec4ddf0e4a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/c496f4e63f5621872060b21793c5ec4ddf0e4a35", "html_url": "https://github.com/rust-lang/rust/commit/c496f4e63f5621872060b21793c5ec4ddf0e4a35"}], "stats": {"total": 187, "additions": 186, "deletions": 1}, "files": [{"sha": "c29c0d466d10e6d82ebd741c61ef8dc9b58fc910", "filename": "clippy_lints/src/dereference.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b2d986850d795f8aa3bdea1d2c840b080c9df81c/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d986850d795f8aa3bdea1d2c840b080c9df81c/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=b2d986850d795f8aa3bdea1d2c840b080c9df81c", "patch": "@@ -0,0 +1,74 @@\n+use crate::rustc::hir::{Expr, ExprKind, QPath};\n+use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use crate::rustc::{declare_tool_lint, lint_array};\n+use crate::utils::{in_macro, span_lint_and_sugg};\n+use if_chain::if_chain;\n+\n+/// **What it does:** Checks for explicit deref() or deref_mut() method calls.\n+///\n+/// **Why is this bad?** Derefencing by &*x or &mut *x is clearer and more concise,\n+/// when not part of a method chain.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let b = a.deref();\n+/// let c = a.deref_mut();\n+///\n+/// // excludes\n+/// let e = d.unwrap().deref();\n+/// ```\n+declare_clippy_lint! {\n+    pub EXPLICIT_DEREF_METHOD,\n+    pedantic,\n+    \"Explicit use of deref or deref_mut method while not in a method chain.\"\n+}\n+\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(EXPLICIT_DEREF_METHOD)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr) {\n+        if in_macro(expr.span) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            // if this is a method call\n+            if let ExprKind::MethodCall(ref method_name, _, ref args) = &expr.node;\n+            // on a Path (i.e. a variable/name, not another method)\n+            if let ExprKind::Path(QPath::Resolved(None, path)) = &args[0].node;\n+            then {\n+                let name = method_name.ident.as_str();\n+                // alter help slightly to account for _mut\n+                match &*name {\n+                    \"deref\" => {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            EXPLICIT_DEREF_METHOD,\n+                            expr.span,\n+                            \"explicit deref method call\",\n+                            \"try this\",\n+                            format!(\"&*{}\", path),\n+                        );\n+                    },\n+                    \"deref_mut\" => {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            EXPLICIT_DEREF_METHOD,\n+                            expr.span,\n+                            \"explicit deref_mut method call\",\n+                            \"try this\",\n+                            format!(\"&mut *{}\", path),\n+                        );\n+                    },\n+                    _ => ()\n+                };\n+            }\n+        }\n+    }\n+}"}, {"sha": "a6ddd6573a81c0217d95dc38f2fca681a04c853c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2d986850d795f8aa3bdea1d2c840b080c9df81c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d986850d795f8aa3bdea1d2c840b080c9df81c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b2d986850d795f8aa3bdea1d2c840b080c9df81c", "patch": "@@ -391,7 +391,7 @@ pub fn read_conf(args: &[rustc_ast::ast::NestedMetaItem], sess: &Session) -> Con\n             }\n \n             conf\n-        },\n+        }\n         Err((err, span)) => {\n             sess.struct_span_err(span, err)\n                 .span_note(span, \"Clippy will use default configuration\")\n@@ -513,6 +513,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &copy_iterator::COPY_ITERATOR,\n         &dbg_macro::DBG_MACRO,\n         &default_trait_access::DEFAULT_TRAIT_ACCESS,\n+        &dereference::DEREF_METHOD_EXPLICIT,\n         &derive::DERIVE_HASH_XOR_EQ,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n         &doc::DOC_MARKDOWN,\n@@ -1039,6 +1040,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n     store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n     store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n+    store.register_late_pass(|| box dereference::DerefMethodExplicit);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1089,6 +1091,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n         LintId::of(&copy_iterator::COPY_ITERATOR),\n         LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),\n+        LintId::of(&dereference::EXPLICIT_DEREF_METHOD),\n         LintId::of(&derive::EXPL_IMPL_CLONE_ON_COPY),\n         LintId::of(&doc::DOC_MARKDOWN),\n         LintId::of(&doc::MISSING_ERRORS_DOC),\n@@ -1178,6 +1181,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n         LintId::of(&copies::IFS_SAME_COND),\n         LintId::of(&copies::IF_SAME_THEN_ELSE),\n+        LintId::of(&dereference::EXPLICIT_DEREF_METHOD),\n         LintId::of(&derive::DERIVE_HASH_XOR_EQ),\n         LintId::of(&doc::MISSING_SAFETY_DOC),\n         LintId::of(&doc::NEEDLESS_DOCTEST_MAIN),"}, {"sha": "7800cd84c242633e40cb5ed727bb3528d0cafe9a", "filename": "tests/ui/dereference.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b2d986850d795f8aa3bdea1d2c840b080c9df81c/tests%2Fui%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d986850d795f8aa3bdea1d2c840b080c9df81c/tests%2Fui%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.rs?ref=b2d986850d795f8aa3bdea1d2c840b080c9df81c", "patch": "@@ -0,0 +1,55 @@\n+#![feature(tool_lints)]\n+\n+use std::ops::{Deref, DerefMut};\n+\n+#[allow(clippy::many_single_char_names, clippy::clone_double_ref)]\n+#[allow(unused_variables)]\n+#[warn(clippy::explicit_deref_method)]\n+fn main() {\n+    let a: &mut String = &mut String::from(\"foo\");\n+\n+    // these should require linting\n+    {\n+        let b: &str = a.deref();\n+    }\n+\n+    {\n+        let b: &mut str = a.deref_mut();\n+    }\n+\n+    {\n+        let b: String = a.deref().clone();\n+    }\n+    \n+    {\n+        let b: usize = a.deref_mut().len();\n+    }\n+    \n+    {\n+        let b: &usize = &a.deref().len();\n+    }\n+\n+    {\n+        // only first deref should get linted here\n+        let b: &str = a.deref().deref();\n+    }\n+\n+    {\n+        // both derefs should get linted here\n+        let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+    }\n+\n+    // these should not require linting\n+    {\n+        let b: &str = &*a;\n+    }\n+\n+    {\n+        let b: &mut str = &mut *a;\n+    }\n+\n+    {\n+        macro_rules! expr_deref { ($body:expr) => { $body.deref() } }\n+        let b: &str = expr_deref!(a);\n+    }\n+}"}, {"sha": "a4c2487d06b9f366e1ea15d5c857a82e0a7dcfa3", "filename": "tests/ui/dereference.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b2d986850d795f8aa3bdea1d2c840b080c9df81c/tests%2Fui%2Fdereference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2d986850d795f8aa3bdea1d2c840b080c9df81c/tests%2Fui%2Fdereference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.stderr?ref=b2d986850d795f8aa3bdea1d2c840b080c9df81c", "patch": "@@ -0,0 +1,52 @@\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:13:23\n+   |\n+13 |         let b: &str = a.deref();\n+   |                       ^^^^^^^^^ help: try this: `&*a`\n+   |\n+   = note: `-D clippy::explicit-deref-method` implied by `-D warnings`\n+\n+error: explicit deref_mut method call\n+  --> $DIR/dereference.rs:17:27\n+   |\n+17 |         let b: &mut str = a.deref_mut();\n+   |                           ^^^^^^^^^^^^^ help: try this: `&mut *a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:21:25\n+   |\n+21 |         let b: String = a.deref().clone();\n+   |                         ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref_mut method call\n+  --> $DIR/dereference.rs:25:24\n+   |\n+25 |         let b: usize = a.deref_mut().len();\n+   |                        ^^^^^^^^^^^^^ help: try this: `&mut *a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:29:26\n+   |\n+29 |         let b: &usize = &a.deref().len();\n+   |                          ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:34:23\n+   |\n+34 |         let b: &str = a.deref().deref();\n+   |                       ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:39:43\n+   |\n+39 |         let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+   |                                           ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:39:54\n+   |\n+39 |         let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+   |                                                      ^^^^^^^^^ help: try this: `&*a`\n+\n+error: aborting due to 8 previous errors\n+"}]}