{"sha": "252a459d373f40512ed9137d59e4b6bea5d6aaee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MmE0NTlkMzczZjQwNTEyZWQ5MTM3ZDU5ZTRiNmJlYTVkNmFhZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-12T05:38:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-12T05:38:49Z"}, "message": "Auto merge of #49371 - scottmcm:catch-wrapping, r=nikomatsakis\n\nAdd ok-wrapping to catch blocks, per RFC\n\nUpdates the `catch{}` lowering to wrap the result in `Try::from_ok`.\n\nr? @nikomatsakis\n\nFixes #41414\nFixes #43818", "tree": {"sha": "2148fc7dbd4b8564861b4c8df9e1e097b32d35dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2148fc7dbd4b8564861b4c8df9e1e097b32d35dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/252a459d373f40512ed9137d59e4b6bea5d6aaee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/252a459d373f40512ed9137d59e4b6bea5d6aaee", "html_url": "https://github.com/rust-lang/rust/commit/252a459d373f40512ed9137d59e4b6bea5d6aaee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/252a459d373f40512ed9137d59e4b6bea5d6aaee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47778811d9752d9db0d1d4621bbc225317ad216b", "url": "https://api.github.com/repos/rust-lang/rust/commits/47778811d9752d9db0d1d4621bbc225317ad216b", "html_url": "https://github.com/rust-lang/rust/commit/47778811d9752d9db0d1d4621bbc225317ad216b"}, {"sha": "311ff5b441c25c545c3b7928bb9f947b8e47be6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/311ff5b441c25c545c3b7928bb9f947b8e47be6f", "html_url": "https://github.com/rust-lang/rust/commit/311ff5b441c25c545c3b7928bb9f947b8e47be6f"}], "stats": {"total": 175, "additions": 132, "deletions": 43}, "files": [{"sha": "247333d841ad08bce673f7438acc5c8608437ed2", "filename": "src/doc/unstable-book/src/language-features/catch-expr.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -15,16 +15,16 @@ expression creates a new scope one can use the `?` operator in.\n use std::num::ParseIntError;\n \n let result: Result<i32, ParseIntError> = do catch {\n-    Ok(\"1\".parse::<i32>()?\n+    \"1\".parse::<i32>()?\n         + \"2\".parse::<i32>()?\n-        + \"3\".parse::<i32>()?)\n+        + \"3\".parse::<i32>()?\n };\n assert_eq!(result, Ok(6));\n \n let result: Result<i32, ParseIntError> = do catch {\n-    Ok(\"1\".parse::<i32>()?\n+    \"1\".parse::<i32>()?\n         + \"foo\".parse::<i32>()?\n-        + \"3\".parse::<i32>()?)\n+        + \"3\".parse::<i32>()?\n };\n assert!(result.is_err());\n ```"}, {"sha": "fdeb41a8770f1eef5a2e41543f75c9fb32346173", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -3010,7 +3010,28 @@ impl<'a> LoweringContext<'a> {\n                 )\n             }),\n             ExprKind::Catch(ref body) => {\n-                self.with_catch_scope(body.id, |this| hir::ExprBlock(this.lower_block(body, true)))\n+                self.with_catch_scope(body.id, |this| {\n+                    let unstable_span =\n+                        this.allow_internal_unstable(CompilerDesugaringKind::Catch, body.span);\n+                    let mut block = this.lower_block(body, true).into_inner();\n+                    let tail = block.expr.take().map_or_else(\n+                        || {\n+                            let LoweredNodeId { node_id, hir_id } = this.next_id();\n+                            let span = this.sess.codemap().end_point(unstable_span);\n+                            hir::Expr {\n+                                id: node_id,\n+                                span,\n+                                node: hir::ExprTup(hir_vec![]),\n+                                attrs: ThinVec::new(),\n+                                hir_id,\n+                            }\n+                        },\n+                        |x: P<hir::Expr>| x.into_inner(),\n+                    );\n+                    block.expr = Some(this.wrap_in_try_constructor(\n+                        \"from_ok\", tail, unstable_span));\n+                    hir::ExprBlock(P(block))\n+                })\n             }\n             ExprKind::Match(ref expr, ref arms) => hir::ExprMatch(\n                 P(self.lower_expr(expr)),\n@@ -3539,12 +3560,8 @@ impl<'a> LoweringContext<'a> {\n \n                         self.expr_call(e.span, from, hir_vec![err_expr])\n                     };\n-                    let from_err_expr = {\n-                        let path = &[\"ops\", \"Try\", \"from_error\"];\n-                        let from_err = P(self.expr_std_path(unstable_span, path, ThinVec::new()));\n-                        P(self.expr_call(e.span, from_err, hir_vec![from_expr]))\n-                    };\n-\n+                    let from_err_expr =\n+                        self.wrap_in_try_constructor(\"from_error\", from_expr, unstable_span);\n                     let thin_attrs = ThinVec::from(attrs);\n                     let catch_scope = self.catch_scopes.last().map(|x| *x);\n                     let ret_expr = if let Some(catch_node) = catch_scope {\n@@ -4079,6 +4096,18 @@ impl<'a> LoweringContext<'a> {\n             )\n         }\n     }\n+\n+    fn wrap_in_try_constructor(\n+        &mut self,\n+        method: &'static str,\n+        e: hir::Expr,\n+        unstable_span: Span,\n+    ) -> P<hir::Expr> {\n+        let path = &[\"ops\", \"Try\", method];\n+        let from_err = P(self.expr_std_path(unstable_span, path,\n+                                            ThinVec::new()));\n+        P(self.expr_call(e.span, from_err, hir_vec![e]))\n+    }\n }\n \n fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body>) -> Vec<hir::BodyId> {"}, {"sha": "4ac678aaa052de443bb5a58d3d91d88de170c80a", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -372,7 +372,8 @@ impl_stable_hash_for!(enum ::syntax_pos::hygiene::ExpnFormat {\n \n impl_stable_hash_for!(enum ::syntax_pos::hygiene::CompilerDesugaringKind {\n     DotFill,\n-    QuestionMark\n+    QuestionMark,\n+    Catch\n });\n \n impl_stable_hash_for!(enum ::syntax_pos::FileName {"}, {"sha": "942e4fb56cabc0471c3e960e939d6d9f505d0f07", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -202,11 +202,11 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     });\n \n     // Also dump the inference graph constraints as a graphviz file.\n-    let _: io::Result<()> = do catch {\n+    let _: io::Result<()> = do_catch! {{\n         let mut file =\n             pretty::create_dump_file(infcx.tcx, \"regioncx.dot\", None, \"nll\", &0, source)?;\n-        regioncx.dump_graphviz(&mut file)\n-    };\n+        regioncx.dump_graphviz(&mut file)?;\n+    }};\n }\n \n fn dump_annotation<'a, 'gcx, 'tcx>("}, {"sha": "a701fe3144266766d32bb8212a29f969605e274d", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -32,6 +32,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(nonzero)]\n #![feature(inclusive_range_fields)]\n #![feature(crate_visibility_modifier)]\n+#![cfg_attr(stage0, feature(try_trait))]\n \n extern crate arena;\n #[macro_use]\n@@ -53,6 +54,16 @@ extern crate log_settings;\n extern crate rustc_apfloat;\n extern crate byteorder;\n \n+#[cfg(stage0)]\n+macro_rules! do_catch {\n+  ($t:expr) => { (|| ::std::ops::Try::from_ok($t) )() }\n+}\n+\n+#[cfg(not(stage0))]\n+macro_rules! do_catch {\n+  ($t:expr) => { do catch { $t } }\n+}\n+\n mod diagnostics;\n \n mod borrow_check;"}, {"sha": "a891e372ad8b5989745b442b0f6d64f90f774684", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -137,7 +137,7 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n ) where\n     F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n-    let _: io::Result<()> = do catch {\n+    let _: io::Result<()> = do_catch! {{\n         let mut file = create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, source)?;\n         writeln!(file, \"// MIR for `{}`\", node_path)?;\n         writeln!(file, \"// source = {:?}\", source)?;\n@@ -150,16 +150,14 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n         extra_data(PassWhere::BeforeCFG, &mut file)?;\n         write_mir_fn(tcx, source, mir, &mut extra_data, &mut file)?;\n         extra_data(PassWhere::AfterCFG, &mut file)?;\n-        Ok(())\n-    };\n+    }};\n \n     if tcx.sess.opts.debugging_opts.dump_mir_graphviz {\n-        let _: io::Result<()> = do catch {\n+        let _: io::Result<()> = do_catch! {{\n             let mut file =\n                 create_dump_file(tcx, \"dot\", pass_num, pass_name, disambiguator, source)?;\n             write_mir_fn_graphviz(tcx, source.def_id, mir, &mut file)?;\n-            Ok(())\n-        };\n+        }};\n     }\n }\n "}, {"sha": "8cb5776fdeb0167ccc3ea403fa8e8cf7d728db8c", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -432,6 +432,7 @@ pub enum ExpnFormat {\n pub enum CompilerDesugaringKind {\n     DotFill,\n     QuestionMark,\n+    Catch,\n }\n \n impl CompilerDesugaringKind {\n@@ -440,6 +441,7 @@ impl CompilerDesugaringKind {\n         let s = match *self {\n             DotFill => \"...\",\n             QuestionMark => \"?\",\n+            Catch => \"do catch\",\n         };\n         Symbol::intern(s)\n     }"}, {"sha": "f332ffd449423b34087fb335697fe36df202340e", "filename": "src/test/compile-fail/catch-bad-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fcompile-fail%2Fcatch-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fcompile-fail%2Fcatch-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-bad-lifetime.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -21,7 +21,6 @@ pub fn main() {\n             //~^ ERROR `my_string` does not live long enough\n             Err(my_str) ?;\n             Err(\"\") ?;\n-            Ok(())\n         };\n     }\n \n@@ -32,7 +31,6 @@ pub fn main() {\n         let mut j: Result<(), &mut i32> = do catch {\n             Err(k) ?;\n             i = 10; //~ ERROR cannot assign to `i` because it is borrowed\n-            Ok(())\n         };\n         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n         i = 40; //~ ERROR cannot assign to `i` because it is borrowed"}, {"sha": "b369847699bdbb1ffa99d138b553c5087b50f65e", "filename": "src/test/compile-fail/catch-bad-type.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fcompile-fail%2Fcatch-bad-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fcompile-fail%2Fcatch-bad-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-bad-type.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -11,11 +11,18 @@\n #![feature(catch_expr)]\n \n pub fn main() {\n-    let res: Result<i32, i32> = do catch {\n+    let res: Result<u32, i32> = do catch {\n         Err(\"\")?; //~ ERROR the trait bound `i32: std::convert::From<&str>` is not satisfied\n-        Ok(5)\n+        5\n     };\n+\n     let res: Result<i32, i32> = do catch {\n-        Ok(\"\") //~ mismatched types\n+        \"\" //~ ERROR type mismatch\n     };\n+\n+    let res: Result<i32, i32> = do catch { }; //~ ERROR type mismatch\n+\n+    let res: () = do catch { }; //~ the trait bound `(): std::ops::Try` is not satisfied\n+\n+    let res: i32 = do catch { 5 }; //~ ERROR the trait bound `i32: std::ops::Try` is not satisfied\n }"}, {"sha": "faefb5ef18a351efeb8f9b7e08a9d0000a8d4d6d", "filename": "src/test/compile-fail/catch-maybe-bad-lifetime.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fcompile-fail%2Fcatch-maybe-bad-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fcompile-fail%2Fcatch-maybe-bad-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-maybe-bad-lifetime.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n         let mut i = 222;\n         let x: Result<&i32, ()> = do catch {\n             Err(())?;\n-            Ok(&i)\n+            &i\n         };\n         x.ok().cloned();\n         i = 0; //~ ERROR cannot assign to `i` because it is borrowed\n@@ -29,7 +29,6 @@ pub fn main() {\n         let _y: Result<(), ()> = do catch {\n             Err(())?;\n             ::std::mem::drop(x);\n-            Ok(())\n         };\n         println!(\"{}\", x); //~ ERROR use of moved value: `x`\n     }\n@@ -42,7 +41,6 @@ pub fn main() {\n         let x: Result<(), ()> = do catch {\n             Err(())?;\n             j = &i;\n-            Ok(())\n         };\n         i = 0; //~ ERROR cannot assign to `i` because it is borrowed\n         let _ = i;"}, {"sha": "0c41102e3bea41e398f9226220f356b30510fd6b", "filename": "src/test/compile-fail/catch-opt-init.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fcompile-fail%2Fcatch-opt-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fcompile-fail%2Fcatch-opt-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcatch-opt-init.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -19,7 +19,6 @@ pub fn main() {\n         cfg_res = 5;\n         Ok::<(), ()>(())?;\n         use_val(cfg_res);\n-        Ok(())\n     };\n     assert_eq!(cfg_res, 5); //~ ERROR use of possibly uninitialized variable\n }"}, {"sha": "c23bca7f49e54f2479c615183a6e94678efbd11f", "filename": "src/test/run-pass/catch-expr.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Frun-pass%2Fcatch-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Frun-pass%2Fcatch-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcatch-expr.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -13,11 +13,11 @@\n struct catch {}\n \n pub fn main() {\n-    let catch_result = do catch {\n+    let catch_result: Option<_> = do catch {\n         let x = 5;\n         x\n     };\n-    assert_eq!(catch_result, 5);\n+    assert_eq!(catch_result, Some(5));\n \n     let mut catch = true;\n     while catch { catch = false; }\n@@ -30,51 +30,50 @@ pub fn main() {\n         _ => {}\n     };\n \n-    let catch_err = do catch {\n+    let catch_err: Result<_, i32> = do catch {\n         Err(22)?;\n-        Ok(1)\n+        1\n     };\n     assert_eq!(catch_err, Err(22));\n \n     let catch_okay: Result<i32, i32> = do catch {\n         if false { Err(25)?; }\n         Ok::<(), i32>(())?;\n-        Ok(28)\n+        28\n     };\n     assert_eq!(catch_okay, Ok(28));\n \n     let catch_from_loop: Result<i32, i32> = do catch {\n         for i in 0..10 {\n             if i < 5 { Ok::<i32, i32>(i)?; } else { Err(i)?; }\n         }\n-        Ok(22)\n+        22\n     };\n     assert_eq!(catch_from_loop, Err(5));\n \n     let cfg_init;\n     let _res: Result<(), ()> = do catch {\n         cfg_init = 5;\n-        Ok(())\n     };\n     assert_eq!(cfg_init, 5);\n \n     let cfg_init_2;\n     let _res: Result<(), ()> = do catch {\n         cfg_init_2 = 6;\n         Err(())?;\n-        Ok(())\n     };\n     assert_eq!(cfg_init_2, 6);\n \n     let my_string = \"test\".to_string();\n     let res: Result<&str, ()> = do catch {\n-        Ok(&my_string)\n+        // Unfortunately, deref doesn't fire here (#49356)\n+        &my_string[..]\n     };\n     assert_eq!(res, Ok(\"test\"));\n \n-    do catch {\n-        ()\n-    }\n+    let my_opt: Option<_> = do catch { () };\n+    assert_eq!(my_opt, Some(()));\n \n-    ();\n+    let my_opt: Option<_> = do catch { };\n+    assert_eq!(my_opt, Some(()));\n }"}, {"sha": "10130ef1e5d1afd1ef2096890ec18362cf4ee64a", "filename": "src/test/ui/catch-block-type-error.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fui%2Fcatch-block-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fui%2Fcatch-block-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch-block-type-error.rs?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(catch_expr)]\n+\n+fn foo() -> Option<()> { Some(()) }\n+\n+fn main() {\n+    let _: Option<f32> = do catch {\n+        foo()?;\n+        42\n+        //~^ ERROR type mismatch\n+    };\n+\n+    let _: Option<i32> = do catch {\n+        foo()?;\n+    };\n+    //~^ ERROR type mismatch\n+}"}, {"sha": "0ae8d4862f7c8828f2077e583a070305297bdaa0", "filename": "src/test/ui/catch-block-type-error.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fui%2Fcatch-block-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/252a459d373f40512ed9137d59e4b6bea5d6aaee/src%2Ftest%2Fui%2Fcatch-block-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch-block-type-error.stderr?ref=252a459d373f40512ed9137d59e4b6bea5d6aaee", "patch": "@@ -0,0 +1,21 @@\n+error[E0271]: type mismatch resolving `<std::option::Option<f32> as std::ops::Try>::Ok == {integer}`\n+  --> $DIR/catch-block-type-error.rs:18:9\n+   |\n+LL |         42\n+   |         ^^ expected f32, found integral variable\n+   |\n+   = note: expected type `f32`\n+              found type `{integer}`\n+\n+error[E0271]: type mismatch resolving `<std::option::Option<i32> as std::ops::Try>::Ok == ()`\n+  --> $DIR/catch-block-type-error.rs:24:5\n+   |\n+LL |     };\n+   |     ^ expected i32, found ()\n+   |\n+   = note: expected type `i32`\n+              found type `()`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}]}