{"sha": "76660fde8113568324874ca4085533991e6ad121", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NjYwZmRlODExMzU2ODMyNDg3NGNhNDA4NTUzMzk5MWU2YWQxMjE=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2019-10-27T22:33:16Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2019-11-03T14:04:15Z"}, "message": "Make Emscripten unwinding use a valid type_info\n\nThis allows catch_panic to ignore C++ exceptions.", "tree": {"sha": "5632fafc74ff65e723bf935b12f206904282c1d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5632fafc74ff65e723bf935b12f206904282c1d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76660fde8113568324874ca4085533991e6ad121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76660fde8113568324874ca4085533991e6ad121", "html_url": "https://github.com/rust-lang/rust/commit/76660fde8113568324874ca4085533991e6ad121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76660fde8113568324874ca4085533991e6ad121/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad61c88e729acf9dbbe17493faeedb760c6df08c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad61c88e729acf9dbbe17493faeedb760c6df08c", "html_url": "https://github.com/rust-lang/rust/commit/ad61c88e729acf9dbbe17493faeedb760c6df08c"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "d4ad65e84b7b4935a8a88b919eab8ad20f50f09d", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76660fde8113568324874ca4085533991e6ad121/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/76660fde8113568324874ca4085533991e6ad121/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=76660fde8113568324874ca4085533991e6ad121", "patch": "@@ -252,7 +252,8 @@ the source code.\n   - `eh_personality`: `libpanic_unwind/gcc.rs` (GNU)\n   - `eh_personality`: `libpanic_unwind/seh.rs` (SEH)\n   - `eh_unwind_resume`: `libpanic_unwind/gcc.rs` (GCC)\n-  - `msvc_try_filter`: `libpanic_unwind/seh.rs` (SEH)\n+  - `eh_catch_typeinfo`: `libpanic_unwind/seh.rs` (SEH)\n+  - `eh_catch_typeinfo`: `libpanic_unwind/emcc.rs` (EMCC)\n   - `panic`: `libcore/panicking.rs`\n   - `panic_bounds_check`: `libcore/panicking.rs`\n   - `panic_impl`: `libcore/panicking.rs`"}, {"sha": "3d0d5a4151eed925b1716bf0e8a9a22b86f559a1", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/76660fde8113568324874ca4085533991e6ad121/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76660fde8113568324874ca4085533991e6ad121/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=76660fde8113568324874ca4085533991e6ad121", "patch": "@@ -15,14 +15,48 @@ use alloc::boxed::Box;\n use libc::{self, c_int};\n use unwind as uw;\n \n+// This matches the layout of std::type_info in C++\n+#[repr(C)]\n+struct TypeInfo {\n+    vtable: *const usize,\n+    name: *const u8,\n+}\n+unsafe impl Sync for TypeInfo {}\n+\n+extern \"C\" {\n+    // The leading `\\x01` byte here is actually a magical signal to LLVM to\n+    // *not* apply any other mangling like prefixing with a `_` character.\n+    //\n+    // This symbol is the vtable used by C++'s `std::type_info`. Objects of type\n+    // `std::type_info`, type descriptors, have a pointer to this table. Type\n+    // descriptors are referenced by the C++ EH structures defined above and\n+    // that we construct below.\n+    //\n+    // Note that the real size is larger than 3 usize, but we only need our\n+    // vtable to point to the third element.\n+    #[link_name = \"\\x01_ZTVN10__cxxabiv117__class_type_infoE\"]\n+    static CLASS_TYPE_INFO_VTABLE: [usize; 3];\n+}\n+\n+// std::type_info for a rust_panic class\n+#[lang = \"eh_catch_typeinfo\"]\n+static EXCEPTION_TYPE_INFO: TypeInfo = TypeInfo {\n+    // Normally we would use .as_ptr().add(2) but this doesn't work in a const context.\n+    vtable: unsafe { &CLASS_TYPE_INFO_VTABLE[2] },\n+    // This intentionally doesn't use the normal name mangling scheme because\n+    // we don't want C++ to be able to produce or catch Rust panics.\n+    name: b\"rust_panic\\0\".as_ptr(),\n+};\n+\n pub fn payload() -> *mut u8 {\n     ptr::null_mut()\n }\n \n pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     assert!(!ptr.is_null());\n-    let ex = ptr::read(ptr as *mut _);\n-    __cxa_free_exception(ptr as *mut _);\n+    let adjusted_ptr = __cxa_begin_catch(ptr as *mut libc::c_void);\n+    let ex = ptr::read(adjusted_ptr as *mut _);\n+    __cxa_end_catch();\n     ex\n }\n \n@@ -32,11 +66,8 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     if exception == ptr::null_mut() {\n         return uw::_URC_FATAL_PHASE1_ERROR as u32;\n     }\n-    let exception = exception as *mut Box<dyn Any + Send>;\n-    ptr::write(exception, data);\n-    __cxa_throw(exception as *mut _, ptr::null_mut(), ptr::null_mut());\n-\n-    unreachable!()\n+    ptr::write(exception as *mut _, data);\n+    __cxa_throw(exception as *mut _, &EXCEPTION_TYPE_INFO, ptr::null_mut());\n }\n \n #[lang = \"eh_personality\"]\n@@ -52,10 +83,11 @@ unsafe extern \"C\" fn rust_eh_personality(version: c_int,\n \n extern \"C\" {\n     fn __cxa_allocate_exception(thrown_size: libc::size_t) -> *mut libc::c_void;\n-    fn __cxa_free_exception(thrown_exception: *mut libc::c_void);\n+    fn __cxa_begin_catch(thrown_exception: *mut libc::c_void) -> *mut libc::c_void;\n+    fn __cxa_end_catch();\n     fn __cxa_throw(thrown_exception: *mut libc::c_void,\n-                   tinfo: *mut libc::c_void,\n-                   dest: *mut libc::c_void);\n+                   tinfo: *const TypeInfo,\n+                   dest: *mut libc::c_void) -> !;\n     fn __gxx_personality_v0(version: c_int,\n                             actions: uw::_Unwind_Action,\n                             exception_class: uw::_Unwind_Exception_Class,"}, {"sha": "621813a2fee9550bccf5e8124ac7d5c9f04514c4", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76660fde8113568324874ca4085533991e6ad121/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76660fde8113568324874ca4085533991e6ad121/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=76660fde8113568324874ca4085533991e6ad121", "patch": "@@ -213,12 +213,13 @@ extern \"C\" {\n     static TYPE_INFO_VTABLE: *const u8;\n }\n \n-// We use #[lang = \"msvc_try_filter\"] here as this is the type descriptor which\n+// We use #[lang = \"eh_catch_typeinfo\"] here as this is the type descriptor which\n // we'll use in LLVM's `catchpad` instruction which ends up also being passed as\n // an argument to the C++ personality function.\n //\n // Again, I'm not entirely sure what this is describing, it just seems to work.\n-#[cfg_attr(not(test), lang = \"msvc_try_filter\")]\n+#[cfg_attr(bootstrap, lang = \"msvc_try_filter\")]\n+#[cfg_attr(not(any(test, bootstrap)), lang = \"eh_catch_typeinfo\")]\n static mut TYPE_DESCRIPTOR: _TypeDescriptor = _TypeDescriptor {\n     pVFTable: unsafe { &TYPE_INFO_VTABLE } as *const _ as *const _,\n     spare: core::ptr::null_mut(),"}, {"sha": "41f02a876f5977cf13d44d5b684362a8952cb544", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76660fde8113568324874ca4085533991e6ad121/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76660fde8113568324874ca4085533991e6ad121/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=76660fde8113568324874ca4085533991e6ad121", "patch": "@@ -385,7 +385,7 @@ language_item_table! {\n \n     EhPersonalityLangItem,       \"eh_personality\",     eh_personality,          Target::Fn;\n     EhUnwindResumeLangItem,      \"eh_unwind_resume\",   eh_unwind_resume,        Target::Fn;\n-    MSVCTryFilterLangItem,       \"msvc_try_filter\",    msvc_try_filter,         Target::Static;\n+    EhCatchTypeinfoLangItem,     \"eh_catch_typeinfo\",  eh_catch_typeinfo,       Target::Static;\n \n     OwnedBoxLangItem,            \"owned_box\",          owned_box,               Target::Struct;\n "}, {"sha": "02424956b9aa50474652c8e763d0a346c9232e53", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/76660fde8113568324874ca4085533991e6ad121/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76660fde8113568324874ca4085533991e6ad121/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=76660fde8113568324874ca4085533991e6ad121", "patch": "@@ -899,9 +899,9 @@ fn codegen_msvc_try(\n         let cs = catchswitch.catch_switch(None, None, 1);\n         catchswitch.add_handler(cs, catchpad.llbb());\n \n-        let tydesc = match bx.tcx().lang_items().msvc_try_filter() {\n+        let tydesc = match bx.tcx().lang_items().eh_catch_typeinfo() {\n             Some(did) => bx.get_static(did),\n-            None => bug!(\"msvc_try_filter not defined\"),\n+            None => bug!(\"eh_catch_typeinfo not defined, but needed for SEH unwinding\"),\n         };\n         let funclet = catchpad.catch_pad(cs, &[tydesc, bx.const_i32(0), slot]);\n \n@@ -975,7 +975,14 @@ fn codegen_gnu_try(\n         // rust_try ignores the selector.\n         let lpad_ty = bx.type_struct(&[bx.type_i8p(), bx.type_i32()], false);\n         let vals = catch.landing_pad(lpad_ty, bx.eh_personality(), 1);\n-        catch.add_clause(vals, bx.const_null(bx.type_i8p()));\n+        let tydesc = match bx.tcx().lang_items().eh_catch_typeinfo() {\n+            Some(tydesc) => {\n+                let tydesc = bx.get_static(tydesc);\n+                bx.bitcast(tydesc, bx.type_i8p())\n+            }\n+            None => bx.const_null(bx.type_i8p()),\n+        };\n+        catch.add_clause(vals, tydesc);\n         let ptr = catch.extract_value(vals, 0);\n         let ptr_align = bx.tcx().data_layout.pointer_align.abi;\n         let bitcast = catch.bitcast(local_ptr, bx.type_ptr_to(bx.type_i8p()));"}]}