{"sha": "a5e4d1ad7dee869ff9647f1c6f16fa1e13953dd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZTRkMWFkN2RlZTg2OWZmOTY0N2YxYzZmMTZmYTFlMTM5NTNkZDY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-29T08:56:26Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-02-14T11:36:51Z"}, "message": "rustc_mir: rename qualify_consts::Qualifier to Checker.", "tree": {"sha": "ccef343bcccf77179b319c529e8cf864290c814b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccef343bcccf77179b319c529e8cf864290c814b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5e4d1ad7dee869ff9647f1c6f16fa1e13953dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5e4d1ad7dee869ff9647f1c6f16fa1e13953dd6", "html_url": "https://github.com/rust-lang/rust/commit/a5e4d1ad7dee869ff9647f1c6f16fa1e13953dd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5e4d1ad7dee869ff9647f1c6f16fa1e13953dd6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c67d4749a547a0c937e257ad9e0248075178ddc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c67d4749a547a0c937e257ad9e0248075178ddc4", "html_url": "https://github.com/rust-lang/rust/commit/c67d4749a547a0c937e257ad9e0248075178ddc4"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "2cbe42721a3b17d6b32b338693d1479e93126f72", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a5e4d1ad7dee869ff9647f1c6f16fa1e13953dd6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5e4d1ad7dee869ff9647f1c6f16fa1e13953dd6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=a5e4d1ad7dee869ff9647f1c6f16fa1e13953dd6", "patch": "@@ -94,7 +94,7 @@ impl fmt::Display for Mode {\n     }\n }\n \n-struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n+struct Checker<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     mode: Mode,\n     span: Span,\n     def_id: DefId,\n@@ -117,12 +117,12 @@ macro_rules! unleash_miri {\n     }}\n }\n \n-impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n+impl<'a, 'tcx> Checker<'a, 'tcx, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            def_id: DefId,\n            mir: &'a Mir<'tcx>,\n            mode: Mode)\n-           -> Qualifier<'a, 'tcx, 'tcx> {\n+           -> Checker<'a, 'tcx, 'tcx> {\n         assert!(def_id.is_local());\n         let mut rpo = traversal::reverse_postorder(mir);\n         let temps = promote_consts::collect_temps(mir, &mut rpo);\n@@ -137,7 +137,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             local_qualif[arg] = Some(qualif);\n         }\n \n-        Qualifier {\n+        Checker {\n             mode,\n             span: mir.span,\n             def_id,\n@@ -265,8 +265,8 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n     }\n \n     /// Qualify a whole const, static initializer or const fn.\n-    fn qualify_const(&mut self) -> (Qualif, Lrc<BitSet<Local>>) {\n-        debug!(\"qualifying {} {:?}\", self.mode, self.def_id);\n+    fn check_const(&mut self) -> (Qualif, Lrc<BitSet<Local>>) {\n+        debug!(\"const-checking {} {:?}\", self.mode, self.def_id);\n \n         let mir = self.mir;\n \n@@ -358,7 +358,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n /// Accumulates an Rvalue or Call's effects in self.qualif.\n /// For functions (constant or not), it also records\n /// candidates for promotion in promotion_candidates.\n-impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx, 'tcx> {\n     fn visit_local(&mut self,\n                    &local: &Local,\n                    _: PlaceContext<'tcx>,\n@@ -1151,8 +1151,8 @@ fn mir_const_qualif<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return (Qualif::NOT_CONST.bits(), Lrc::new(BitSet::new_empty(0)));\n     }\n \n-    let mut qualifier = Qualifier::new(tcx, def_id, mir, Mode::Const);\n-    let (qualif, promoted_temps) = qualifier.qualify_const();\n+    let mut checker = Checker::new(tcx, def_id, mir, Mode::Const);\n+    let (qualif, promoted_temps) = checker.check_const();\n     (qualif.bits(), promoted_temps)\n }\n \n@@ -1195,13 +1195,13 @@ impl MirPass for QualifyAndPromoteConstants {\n \n         debug!(\"run_pass: mode={:?}\", mode);\n         if mode == Mode::Fn || mode == Mode::ConstFn {\n-            // This is ugly because Qualifier holds onto mir,\n+            // This is ugly because Checker holds onto mir,\n             // which can't be mutated until its scope ends.\n             let (temps, candidates) = {\n-                let mut qualifier = Qualifier::new(tcx, def_id, mir, mode);\n+                let mut checker = Checker::new(tcx, def_id, mir, mode);\n                 if mode == Mode::ConstFn {\n                     if tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n-                        qualifier.qualify_const();\n+                        checker.check_const();\n                     } else if tcx.is_min_const_fn(def_id) {\n                         // enforce `min_const_fn` for stable const fns\n                         use super::qualify_min_const_fn::is_min_const_fn;\n@@ -1210,19 +1210,19 @@ impl MirPass for QualifyAndPromoteConstants {\n                         } else {\n                             // this should not produce any errors, but better safe than sorry\n                             // FIXME(#53819)\n-                            qualifier.qualify_const();\n+                            checker.check_const();\n                         }\n                     } else {\n                         // Enforce a constant-like CFG for `const fn`.\n-                        qualifier.qualify_const();\n+                        checker.check_const();\n                     }\n                 } else {\n-                    while let Some((bb, data)) = qualifier.rpo.next() {\n-                        qualifier.visit_basic_block_data(bb, data);\n+                    while let Some((bb, data)) = checker.rpo.next() {\n+                        checker.visit_basic_block_data(bb, data);\n                     }\n                 }\n \n-                (qualifier.temp_promotion_state, qualifier.promotion_candidates)\n+                (checker.temp_promotion_state, checker.promotion_candidates)\n             };\n \n             // Do the actual promotion, now that we know what's viable.\n@@ -1263,7 +1263,7 @@ impl MirPass for QualifyAndPromoteConstants {\n                 // Already computed by `mir_const_qualif`.\n                 const_promoted_temps.unwrap()\n             } else {\n-                Qualifier::new(tcx, def_id, mir, mode).qualify_const().1\n+                Checker::new(tcx, def_id, mir, mode).check_const().1\n             };\n \n             // In `const` and `static` everything without `StorageDead`"}]}