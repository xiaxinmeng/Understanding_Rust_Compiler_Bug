{"sha": "95407cc627bfd2c0cda7c41a1d8dba301b215bca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NDA3Y2M2MjdiZmQyYzBjZGE3YzQxYTFkOGRiYTMwMWIyMTViY2E=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-11T07:20:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-11T07:20:53Z"}, "message": "Rollup merge of #26191 - jimblandy:master, r=steveklabnik\n\nIn the discussion of returning closures, it seems like the example code got simplified, but only the later copies got fixed. The final working code has `factory` returning `|x| x + num`, but the earlier code has `|x| vec.push(x)`.\r\n\r\nThe first form seemed to have more distracting characteristics, and the code wasn't right anyway, so I changed them to all use the second form, and updated the error messages.\r\n\r\nr? @steveklabnik", "tree": {"sha": "41e07cb23568e8f7aec3e4f56a54113db9d4f3ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41e07cb23568e8f7aec3e4f56a54113db9d4f3ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95407cc627bfd2c0cda7c41a1d8dba301b215bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95407cc627bfd2c0cda7c41a1d8dba301b215bca", "html_url": "https://github.com/rust-lang/rust/commit/95407cc627bfd2c0cda7c41a1d8dba301b215bca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95407cc627bfd2c0cda7c41a1d8dba301b215bca/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea4949d44924444c29e9266708ba18f344487577", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4949d44924444c29e9266708ba18f344487577", "html_url": "https://github.com/rust-lang/rust/commit/ea4949d44924444c29e9266708ba18f344487577"}, {"sha": "7d298d1acecbd866be7b9e2c60ef86032bb2a502", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d298d1acecbd866be7b9e2c60ef86032bb2a502", "html_url": "https://github.com/rust-lang/rust/commit/7d298d1acecbd866be7b9e2c60ef86032bb2a502"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "428897821cfcce2f2768c30928ecee9e0bebcf1b", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/95407cc627bfd2c0cda7c41a1d8dba301b215bca/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/95407cc627bfd2c0cda7c41a1d8dba301b215bca/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=95407cc627bfd2c0cda7c41a1d8dba301b215bca", "patch": "@@ -324,37 +324,34 @@ first, it may seem strange, but we\u2019ll figure it out. Here\u2019s how you\u2019d prob\n try to return a closure from a function:\n \n ```rust,ignore\n-fn factory() -> (Fn(i32) -> Vec<i32>) {\n-    let vec = vec![1, 2, 3];\n+fn factory() -> (Fn(i32) -> i32) {\n+    let num = 5;\n \n-    |n| vec.push(n)\n+    |x| x + num\n }\n \n let f = factory();\n \n-let answer = f(4);\n-assert_eq!(vec![1, 2, 3, 4], answer);\n+let answer = f(1);\n+assert_eq!(6, answer);\n ```\n \n This gives us these long, related errors:\n \n ```text\n error: the trait `core::marker::Sized` is not implemented for the type\n-`core::ops::Fn(i32) -> collections::vec::Vec<i32>` [E0277]\n-f = factory();\n-^\n-note: `core::ops::Fn(i32) -> collections::vec::Vec<i32>` does not have a\n-constant size known at compile-time\n-f = factory();\n-^\n-error: the trait `core::marker::Sized` is not implemented for the type\n-`core::ops::Fn(i32) -> collections::vec::Vec<i32>` [E0277]\n-factory() -> (Fn(i32) -> Vec<i32>) {\n-             ^~~~~~~~~~~~~~~~~~~~~\n-note: `core::ops::Fn(i32) -> collections::vec::Vec<i32>` does not have a constant size known at compile-time\n-factory() -> (Fn(i32) -> Vec<i32>) {\n-             ^~~~~~~~~~~~~~~~~~~~~\n-\n+`core::ops::Fn(i32) -> i32` [E0277]\n+fn factory() -> (Fn(i32) -> i32) {\n+                ^~~~~~~~~~~~~~~~\n+note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n+fn factory() -> (Fn(i32) -> i32) {\n+                ^~~~~~~~~~~~~~~~\n+error: the trait `core::marker::Sized` is not implemented for the type `core::ops::Fn(i32) -> i32` [E0277]\n+let f = factory();\n+    ^\n+note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n+let f = factory();\n+    ^\n ```\n \n In order to return something from a function, Rust needs to know what\n@@ -364,16 +361,16 @@ way to give something a size is to take a reference to it, as references\n have a known size. So we\u2019d write this:\n \n ```rust,ignore\n-fn factory() -> &(Fn(i32) -> Vec<i32>) {\n-    let vec = vec![1, 2, 3];\n+fn factory() -> &(Fn(i32) -> i32) {\n+    let num = 5;\n \n-    |n| vec.push(n)\n+    |x| x + num\n }\n \n let f = factory();\n \n-let answer = f(4);\n-assert_eq!(vec![1, 2, 3, 4], answer);\n+let answer = f(1);\n+assert_eq!(6, answer);\n ```\n \n But we get another error:\n@@ -448,7 +445,8 @@ assert_eq!(6, answer);\n We use a trait object, by `Box`ing up the `Fn`. There\u2019s just one last problem:\n \n ```text\n-error: `num` does not live long enough\n+error: closure may outlive the current function, but it borrows `num`,\n+which is owned by the current function [E0373]\n Box::new(|x| x + num)\n          ^~~~~~~~~~~\n ```"}]}