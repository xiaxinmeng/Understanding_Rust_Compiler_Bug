{"sha": "37d3bea3ec3d47dbf1f7352c32fab75ce408798c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZDNiZWEzZWMzZDQ3ZGJmMWY3MzUyYzMyZmFiNzVjZTQwODc5OGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-04-19T23:45:33Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-04-20T22:58:59Z"}, "message": "Add ABSOLUTE_PATH_STARTING_WITH_MODULE epoch lint for path breakage", "tree": {"sha": "95ccaea95f6b86d2818dbf6b02902ee5f7feea61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95ccaea95f6b86d2818dbf6b02902ee5f7feea61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37d3bea3ec3d47dbf1f7352c32fab75ce408798c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37d3bea3ec3d47dbf1f7352c32fab75ce408798c", "html_url": "https://github.com/rust-lang/rust/commit/37d3bea3ec3d47dbf1f7352c32fab75ce408798c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37d3bea3ec3d47dbf1f7352c32fab75ce408798c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56ace0aac21c46e8340e0912e822724c5d15922e", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ace0aac21c46e8340e0912e822724c5d15922e", "html_url": "https://github.com/rust-lang/rust/commit/56ace0aac21c46e8340e0912e822724c5d15922e"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "30ae830ee464d72b536eeab80bbd8423764b81c7", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37d3bea3ec3d47dbf1f7352c32fab75ce408798c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d3bea3ec3d47dbf1f7352c32fab75ce408798c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=37d3bea3ec3d47dbf1f7352c32fab75ce408798c", "patch": "@@ -254,6 +254,13 @@ declare_lint! {\n     \"suggest using `dyn Trait` for trait objects\"\n }\n \n+declare_lint! {\n+    pub ABSOLUTE_PATH_STARTING_WITH_MODULE,\n+    Allow,\n+    \"fully qualified paths that start with a module name \\\n+     instead of `crate`, `self`, or an extern crate name\"\n+}\n+\n declare_lint! {\n     pub ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n     Warn,\n@@ -314,6 +321,7 @@ impl LintPass for HardwiredLints {\n             TYVAR_BEHIND_RAW_POINTER,\n             ELIDED_LIFETIME_IN_PATH,\n             BARE_TRAIT_OBJECT,\n+            ABSOLUTE_PATH_STARTING_WITH_MODULE,\n             UNSTABLE_NAME_COLLISION,\n         )\n     }"}, {"sha": "038d47dd5eae583fc744d3ae3edd203f36aa9b06", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37d3bea3ec3d47dbf1f7352c32fab75ce408798c/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d3bea3ec3d47dbf1f7352c32fab75ce408798c/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=37d3bea3ec3d47dbf1f7352c32fab75ce408798c", "patch": "@@ -40,7 +40,7 @@ extern crate rustc_mir;\n extern crate syntax_pos;\n \n use rustc::lint;\n-use rustc::lint::builtin::BARE_TRAIT_OBJECT;\n+use rustc::lint::builtin::{BARE_TRAIT_OBJECT, ABSOLUTE_PATH_STARTING_WITH_MODULE};\n use rustc::session;\n use rustc::util;\n \n@@ -278,6 +278,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             // Note: this item represents future incompatibility of all unstable functions in the\n             //       standard library, and thus should never be removed or changed to an error.\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(ABSOLUTE_PATH_STARTING_WITH_MODULE),\n+            reference: \"issue TBD\",\n+            edition: Some(Edition::Edition2018),\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "c0bb6921b693464e3b9d68d43572d9b92daa2593", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/37d3bea3ec3d47dbf1f7352c32fab75ce408798c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d3bea3ec3d47dbf1f7352c32fab75ce408798c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=37d3bea3ec3d47dbf1f7352c32fab75ce408798c", "patch": "@@ -3189,7 +3189,7 @@ impl<'a> Resolver<'a> {\n            path[0].name != keywords::CrateRoot.name() &&\n            path[0].name != keywords::DollarCrate.name() {\n             let unqualified_result = {\n-                match self.resolve_path(&[*path.last().unwrap()], Some(ns), false, span, Some(id)) {\n+                match self.resolve_path(&[*path.last().unwrap()], Some(ns), false, span, None) {\n                     PathResult::NonModule(path_res) => path_res.base_def(),\n                     PathResult::Module(module) => module.def().unwrap(),\n                     _ => return Some(result),\n@@ -3209,7 +3209,8 @@ impl<'a> Resolver<'a> {\n                     opt_ns: Option<Namespace>, // `None` indicates a module path\n                     record_used: bool,\n                     path_span: Span,\n-                    _node_id: Option<NodeId>)\n+                    node_id: Option<NodeId>) // None indicates that we don't care about linting\n+                                             // `::module` paths\n                     -> PathResult<'a> {\n         let mut module = None;\n         let mut allow_super = true;\n@@ -3328,6 +3329,30 @@ impl<'a> Resolver<'a> {\n                                                   format!(\"Not a module `{}`\", ident),\n                                                   is_last);\n                     }\n+\n+                    if let Some(id) = node_id {\n+                        if i == 1 && self.session.features_untracked().crate_in_paths\n+                                  && !self.session.rust_2018() {\n+                            let prev_name = path[0].name;\n+                            if prev_name == keywords::Extern.name() ||\n+                               prev_name == keywords::CrateRoot.name() {\n+                                let mut is_crate = false;\n+                                if let NameBindingKind::Import { directive: d, .. } = binding.kind {\n+                                    if let ImportDirectiveSubclass::ExternCrate(..) = d.subclass {\n+                                        is_crate = true;\n+                                    }\n+                                }\n+\n+                                if !is_crate {\n+                                    self.session.buffer_lint(\n+                                        lint::builtin::ABSOLUTE_PATH_STARTING_WITH_MODULE,\n+                                        id, path_span,\n+                                        \"Fully-qualified paths must start with `self`, `super`,\n+                                        `crate`, or an external crate name in the 2018 edition\");\n+                                }\n+                            }\n+                        }\n+                    }\n                 }\n                 Err(Undetermined) => return PathResult::Indeterminate,\n                 Err(Determined) => {"}, {"sha": "e2a7f5668d251b535cdf50f152441328a2b16b4f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37d3bea3ec3d47dbf1f7352c32fab75ce408798c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37d3bea3ec3d47dbf1f7352c32fab75ce408798c/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=37d3bea3ec3d47dbf1f7352c32fab75ce408798c", "patch": "@@ -679,7 +679,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                    !(self_path.len() > 1 && is_special(self_path[1])) {\n                     self_path[0].name = keywords::SelfValue.name();\n                     self_result = Some(self.resolve_path(&self_path, None, false,\n-                                                         span, Some(directive.id)));\n+                                                         span, None));\n                 }\n                 return if let Some(PathResult::Module(..)) = self_result {\n                     Some((span, format!(\"Did you mean `{}`?\", names_to_string(&self_path[..]))))"}]}