{"sha": "799005f6ae66edb4f9745243ee78c677495821d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OTAwNWY2YWU2NmVkYjRmOTc0NTI0M2VlNzhjNjc3NDk1ODIxZDM=", "commit": {"author": {"name": "JoshBrudnak", "email": "jobrud314@gmail.com", "date": "2018-10-22T22:49:10Z"}, "committer": {"name": "JoshBrudnak", "email": "jobrud314@gmail.com", "date": "2018-10-23T11:10:00Z"}, "message": "Treat crates non-alphabetically Fixes: #3118", "tree": {"sha": "0c2d2919fa612b583be601e996fb37131f362564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c2d2919fa612b583be601e996fb37131f362564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/799005f6ae66edb4f9745243ee78c677495821d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/799005f6ae66edb4f9745243ee78c677495821d3", "html_url": "https://github.com/rust-lang/rust/commit/799005f6ae66edb4f9745243ee78c677495821d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/799005f6ae66edb4f9745243ee78c677495821d3/comments", "author": {"login": "JoshBrudnak", "id": 9296527, "node_id": "MDQ6VXNlcjkyOTY1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/9296527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshBrudnak", "html_url": "https://github.com/JoshBrudnak", "followers_url": "https://api.github.com/users/JoshBrudnak/followers", "following_url": "https://api.github.com/users/JoshBrudnak/following{/other_user}", "gists_url": "https://api.github.com/users/JoshBrudnak/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshBrudnak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshBrudnak/subscriptions", "organizations_url": "https://api.github.com/users/JoshBrudnak/orgs", "repos_url": "https://api.github.com/users/JoshBrudnak/repos", "events_url": "https://api.github.com/users/JoshBrudnak/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshBrudnak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshBrudnak", "id": 9296527, "node_id": "MDQ6VXNlcjkyOTY1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/9296527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshBrudnak", "html_url": "https://github.com/JoshBrudnak", "followers_url": "https://api.github.com/users/JoshBrudnak/followers", "following_url": "https://api.github.com/users/JoshBrudnak/following{/other_user}", "gists_url": "https://api.github.com/users/JoshBrudnak/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshBrudnak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshBrudnak/subscriptions", "organizations_url": "https://api.github.com/users/JoshBrudnak/orgs", "repos_url": "https://api.github.com/users/JoshBrudnak/repos", "events_url": "https://api.github.com/users/JoshBrudnak/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshBrudnak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa3cadf62c11cd8163f08029026a8475ad2b60fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3cadf62c11cd8163f08029026a8475ad2b60fd", "html_url": "https://github.com/rust-lang/rust/commit/fa3cadf62c11cd8163f08029026a8475ad2b60fd"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "deef4d096c9e24ec250ceefba41cff3337644fea", "filename": "src/imports.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/799005f6ae66edb4f9745243ee78c677495821d3/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799005f6ae66edb4f9745243ee78c677495821d3/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=799005f6ae66edb4f9745243ee78c677495821d3", "patch": "@@ -97,6 +97,7 @@ pub enum UseSegment {\n     Ident(String, Option<String>),\n     Slf(Option<String>),\n     Super(Option<String>),\n+    Crate(Option<String>),\n     Glob,\n     List(Vec<UseTree>),\n }\n@@ -138,6 +139,7 @@ impl UseSegment {\n             UseSegment::Ident(ref s, _) => UseSegment::Ident(s.clone(), None),\n             UseSegment::Slf(_) => UseSegment::Slf(None),\n             UseSegment::Super(_) => UseSegment::Super(None),\n+            UseSegment::Crate(_) => UseSegment::Crate(None),\n             _ => self.clone(),\n         }\n     }\n@@ -154,6 +156,7 @@ impl UseSegment {\n         Some(match name {\n             \"self\" => UseSegment::Slf(None),\n             \"super\" => UseSegment::Super(None),\n+            \"crate\" => UseSegment::Crate(None),\n             _ => {\n                 let mod_sep = if modsep { \"::\" } else { \"\" };\n                 UseSegment::Ident(format!(\"{}{}\", mod_sep, name), None)\n@@ -207,6 +210,7 @@ impl fmt::Display for UseSegment {\n             UseSegment::Ident(ref s, _) => write!(f, \"{}\", s),\n             UseSegment::Slf(..) => write!(f, \"self\"),\n             UseSegment::Super(..) => write!(f, \"super\"),\n+            UseSegment::Crate(..) => write!(f, \"crate\"),\n             UseSegment::List(ref list) => {\n                 write!(f, \"{{\")?;\n                 for (i, item) in list.iter().enumerate() {\n@@ -377,6 +381,7 @@ impl UseTree {\n                 let segment = match name.as_ref() {\n                     \"self\" => UseSegment::Slf(alias),\n                     \"super\" => UseSegment::Super(alias),\n+                    \"crate\" => UseSegment::Crate(alias),\n                     _ => UseSegment::Ident(name, alias),\n                 };\n \n@@ -617,7 +622,9 @@ impl Ord for UseSegment {\n         }\n \n         match (self, other) {\n-            (&Slf(ref a), &Slf(ref b)) | (&Super(ref a), &Super(ref b)) => a.cmp(b),\n+            (&Slf(ref a), &Slf(ref b))\n+            | (&Super(ref a), &Super(ref b))\n+            | (&Crate(ref a), &Crate(ref b)) => a.cmp(b),\n             (&Glob, &Glob) => Ordering::Equal,\n             (&Ident(ref ia, ref aa), &Ident(ref ib, ref ab)) => {\n                 // snake_case < CamelCase < UPPER_SNAKE_CASE\n@@ -659,6 +666,8 @@ impl Ord for UseSegment {\n             (_, &Slf(_)) => Ordering::Greater,\n             (&Super(_), _) => Ordering::Less,\n             (_, &Super(_)) => Ordering::Greater,\n+            (&Crate(_), _) => Ordering::Less,\n+            (_, &Crate(_)) => Ordering::Greater,\n             (&Ident(..), _) => Ordering::Less,\n             (_, &Ident(..)) => Ordering::Greater,\n             (&Glob, _) => Ordering::Less,\n@@ -768,6 +777,8 @@ impl Rewrite for UseSegment {\n             UseSegment::Slf(None) => \"self\".to_owned(),\n             UseSegment::Super(Some(ref rename)) => format!(\"super as {}\", rename),\n             UseSegment::Super(None) => \"super\".to_owned(),\n+            UseSegment::Crate(Some(ref rename)) => format!(\"crate as {}\", rename),\n+            UseSegment::Crate(None) => \"crate\".to_owned(),\n             UseSegment::Glob => \"*\".to_owned(),\n             UseSegment::List(ref use_tree_list) => rewrite_nested_use_tree(\n                 context,\n@@ -830,18 +841,28 @@ mod test {\n                 if !buf.is_empty() {\n                     let mut alias = None;\n                     swap(alias_buf, &mut alias);\n-                    if buf == \"self\" {\n-                        result.push(UseSegment::Slf(alias));\n-                        *buf = String::new();\n-                        *alias_buf = None;\n-                    } else if buf == \"super\" {\n-                        result.push(UseSegment::Super(alias));\n-                        *buf = String::new();\n-                        *alias_buf = None;\n-                    } else {\n-                        let mut name = String::new();\n-                        swap(buf, &mut name);\n-                        result.push(UseSegment::Ident(name, alias));\n+\n+                    match buf.as_ref() {\n+                        \"self\" => {\n+                            result.push(UseSegment::Slf(alias));\n+                            *buf = String::new();\n+                            *alias_buf = None;\n+                        }\n+                        \"super\" => {\n+                            result.push(UseSegment::Super(alias));\n+                            *buf = String::new();\n+                            *alias_buf = None;\n+                        }\n+                        \"crate\" => {\n+                            result.push(UseSegment::Crate(alias));\n+                            *buf = String::new();\n+                            *alias_buf = None;\n+                        }\n+                        _ => {\n+                            let mut name = String::new();\n+                            swap(buf, &mut name);\n+                            result.push(UseSegment::Ident(name, alias));\n+                        }\n                     }\n                 }\n             }"}]}