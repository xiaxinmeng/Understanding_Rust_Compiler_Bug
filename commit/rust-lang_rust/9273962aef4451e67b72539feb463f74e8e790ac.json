{"sha": "9273962aef4451e67b72539feb463f74e8e790ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNzM5NjJhZWY0NDUxZTY3YjcyNTM5ZmViNDYzZjc0ZThlNzkwYWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-28T07:30:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-30T17:34:58Z"}, "message": "remove no longer needed feature flags", "tree": {"sha": "9b0807d561b50a3cace8cf8b1cc92c7d689e4e04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b0807d561b50a3cace8cf8b1cc92c7d689e4e04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9273962aef4451e67b72539feb463f74e8e790ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9273962aef4451e67b72539feb463f74e8e790ac", "html_url": "https://github.com/rust-lang/rust/commit/9273962aef4451e67b72539feb463f74e8e790ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9273962aef4451e67b72539feb463f74e8e790ac/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2c99f0debfa6b13dc01565e18fc554373d57009", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c99f0debfa6b13dc01565e18fc554373d57009", "html_url": "https://github.com/rust-lang/rust/commit/e2c99f0debfa6b13dc01565e18fc554373d57009"}], "stats": {"total": 170, "additions": 128, "deletions": 42}, "files": [{"sha": "a8efe67c339bc8af537f798685b62a6d4335b73a", "filename": "src/test/ui/consts/miri_unleashed/box.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![feature(const_mut_refs, box_syntax)]\n+#![feature(box_syntax)]\n #![allow(const_err)]\n \n use std::mem::ManuallyDrop;\n@@ -11,4 +11,7 @@ static TEST_BAD: &mut i32 = {\n     //~^ WARN skipping const check\n     //~| ERROR could not evaluate static initializer\n     //~| NOTE heap allocations\n+    //~| WARN skipping const checks\n+    //~| WARN skipping const checks\n+    //~| WARN skipping const checks\n };"}, {"sha": "940dc1153d43c8cc4fce57f3aa6594faaccd9973", "filename": "src/test/ui/consts/miri_unleashed/box.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -4,12 +4,30 @@ warning: skipping const checks\n LL |     &mut *(box 0)\n    |           ^^^^^^^\n \n+warning: skipping const checks\n+  --> $DIR/box.rs:10:16\n+   |\n+LL |     &mut *(box 0)\n+   |                ^\n+\n+warning: skipping const checks\n+  --> $DIR/box.rs:10:5\n+   |\n+LL |     &mut *(box 0)\n+   |     ^^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/box.rs:10:5\n+   |\n+LL |     &mut *(box 0)\n+   |     ^^^^^^^^^^^^^\n+\n error[E0080]: could not evaluate static initializer\n   --> $DIR/box.rs:10:11\n    |\n LL |     &mut *(box 0)\n    |           ^^^^^^^ \"heap allocations via `box` keyword\" needs an rfc before being allowed inside constants\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error; 4 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "1e19140bb90f4fa559c02585beaa3443ccced0c2", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -2,8 +2,6 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n #![allow(const_err)]\n \n-#![feature(const_raw_ptr_deref)]\n-\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n \n@@ -21,6 +19,7 @@ const READ_INTERIOR_MUT: usize = {\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { *(&FOO as *const _ as *const usize) }\n     //~^ WARN skipping const checks\n+    //~| WARN skipping const checks\n };\n \n static mut MUTABLE: u32 = 0;"}, {"sha": "0097bf90803ef34796f8758d5af34b3091ac4b48", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -1,51 +1,57 @@\n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:15:5\n+  --> $DIR/const_refers_to_static.rs:13:5\n    |\n LL |     FOO.fetch_add(1, Ordering::Relaxed)\n    |     ^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:15:5\n+  --> $DIR/const_refers_to_static.rs:13:5\n    |\n LL |     FOO.fetch_add(1, Ordering::Relaxed)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:22:17\n+  --> $DIR/const_refers_to_static.rs:20:17\n    |\n LL |     unsafe { *(&FOO as *const _ as *const usize) }\n    |                 ^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:27:32\n+  --> $DIR/const_refers_to_static.rs:20:14\n+   |\n+LL |     unsafe { *(&FOO as *const _ as *const usize) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static.rs:26:32\n    |\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    |                                ^^^^^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:27:32\n+  --> $DIR/const_refers_to_static.rs:26:32\n    |\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    |                                ^^^^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:32:5\n+  --> $DIR/const_refers_to_static.rs:31:5\n    |\n LL |     MUTATE_INTERIOR_MUT;\n    |     ^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:34:5\n+  --> $DIR/const_refers_to_static.rs:33:5\n    |\n LL |     READ_INTERIOR_MUT;\n    |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:36:5\n+  --> $DIR/const_refers_to_static.rs:35:5\n    |\n LL |     READ_MUT;\n    |     ^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 3 previous errors; 5 warnings emitted\n+error: aborting due to 3 previous errors; 6 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "1cc8166ee20bc72f5f805b17b479e029a9ea2fa2", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n #![allow(const_err)]\n \n-#![feature(const_raw_ptr_deref)]\n-\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n \n@@ -15,6 +13,7 @@ const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this valu\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { &*(&FOO as *const _ as *const usize) }\n     //~^ WARN skipping const checks\n+    //~| WARN skipping const checks\n };\n \n // ok some day perhaps"}, {"sha": "8b1f0d89dfc4f3fc8bf7bec2a019c856cd6d863d", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -1,31 +1,37 @@\n warning: skipping const checks\n-  --> $DIR/const_refers_to_static2.rs:16:18\n+  --> $DIR/const_refers_to_static2.rs:14:18\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |                  ^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static2.rs:25:6\n+  --> $DIR/const_refers_to_static2.rs:14:14\n+   |\n+LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static2.rs:24:6\n    |\n LL |     &FOO\n    |      ^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:12:1\n+  --> $DIR/const_refers_to_static2.rs:10:1\n    |\n LL | / const REF_INTERIOR_MUT: &usize = {\n LL | |\n LL | |\n LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n+...  |\n LL | |\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:21:1\n+  --> $DIR/const_refers_to_static2.rs:20:1\n    |\n LL | / const READ_IMMUT: &usize = {\n LL | |\n@@ -38,6 +44,6 @@ LL | | };\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to 2 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "c8192972d3bc3124bb761e9b8b26be1582497922", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -2,7 +2,7 @@\n // aux-build:static_cross_crate.rs\n #![allow(const_err)]\n \n-#![feature(exclusive_range_pattern, half_open_range_patterns, const_if_match, const_panic)]\n+#![feature(exclusive_range_pattern, half_open_range_patterns, const_if_match)]\n \n extern crate static_cross_crate;\n \n@@ -34,6 +34,7 @@ const U8_MUT2: &u8 = { //~ NOTE\n const U8_MUT3: &u8 = { //~ NOTE\n     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n     //~^ WARN skipping const checks\n+    //~| WARN skipping const checks\n     //~| WARN [const_err]\n     //~| NOTE constant accesses static\n };"}, {"sha": "afdde84a386ff47f74c658ed3d0697f773564a26", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -18,7 +18,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:43:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:44:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n@@ -43,7 +43,7 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:51:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:52:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n@@ -73,7 +73,7 @@ LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:61:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:62:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n@@ -84,6 +84,14 @@ warning: skipping const checks\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+warning: skipping const checks\n+  --> $DIR/const_refers_to_static_cross_crate.rs:35:77\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                                                                             ^^^^^^^^\n+   |\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static_cross_crate.rs:35:51\n    |\n@@ -93,6 +101,7 @@ LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None\n LL | |\n LL | |\n LL | |\n+LL | |\n LL | | };\n    | |__-\n    |\n@@ -103,11 +112,11 @@ LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:69:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n-error: aborting due to 6 previous errors; 6 warnings emitted\n+error: aborting due to 6 previous errors; 7 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "5b7c1d3c13771d338bc547ccd6b1380c560c808e", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // normalize-stderr-test \"alloc[0-9]+\" -> \"allocN\"\n \n-#![feature(const_raw_ptr_deref)]\n-#![feature(const_mut_refs)]\n #![deny(const_err)] // The `allow` variant is tested by `mutable_const2`.\n //~^ NOTE lint level\n // Here we check that even though `MUTABLE_BEHIND_RAW` is created from a mutable\n@@ -20,6 +18,8 @@ const MUTATING_BEHIND_RAW: () = { //~ NOTE\n     unsafe {\n         *MUTABLE_BEHIND_RAW = 99 //~ ERROR any use of this value will cause an error\n         //~^ NOTE: which is read-only\n+        //~| WARN skipping const checks\n+        //~| WARN skipping const checks\n         // FIXME would be good to match more of the error message here, but looks like we\n         // normalize *after* checking the annoations here.\n     }"}, {"sha": "7d6264ff70964ef9f6b1e28c445fc9e26faf85df", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -1,11 +1,23 @@\n warning: skipping const checks\n-  --> $DIR/mutable_const.rs:15:38\n+  --> $DIR/mutable_const.rs:13:38\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    |                                      ^^^^^^^^^^^^^^^^^^^^\n \n+warning: skipping const checks\n+  --> $DIR/mutable_const.rs:19:9\n+   |\n+LL |         *MUTABLE_BEHIND_RAW = 99\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/mutable_const.rs:19:9\n+   |\n+LL |         *MUTABLE_BEHIND_RAW = 99\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: any use of this value will cause an error\n-  --> $DIR/mutable_const.rs:21:9\n+  --> $DIR/mutable_const.rs:19:9\n    |\n LL | / const MUTATING_BEHIND_RAW: () = {\n LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n@@ -18,10 +30,10 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/mutable_const.rs:6:9\n+  --> $DIR/mutable_const.rs:4:9\n    |\n LL | #![deny(const_err)] // The `allow` variant is tested by `mutable_const2`.\n    |         ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error; 3 warnings emitted\n "}, {"sha": "d5a5d06412fe3741c2bc4570ca27a62e9bdeb1d7", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -5,8 +5,6 @@\n // normalize-stderr-test \"note: compiler flags: .*\" -> \"note: compiler flags: FLAGS\"\n // normalize-stderr-test \"interpret/intern.rs:[0-9]+:[0-9]+\" -> \"interpret/intern.rs:LL:CC\"\n \n-#![feature(const_raw_ptr_deref)]\n-#![feature(const_mut_refs)]\n #![allow(const_err)]\n \n use std::cell::UnsafeCell;"}, {"sha": "a8f7d3e8b5b10d4edc2b586fab83f9b655399620", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -1,13 +1,13 @@\n warning: skipping const checks\n-  --> $DIR/mutable_const2.rs:15:38\n+  --> $DIR/mutable_const2.rs:13:38\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    |                                      ^^^^^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n \n error: internal compiler error: mutable allocation in constant\n-  --> $DIR/mutable_const2.rs:15:1\n+  --> $DIR/mutable_const2.rs:13:1\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "718b14f73d4786f07c4763bf369e8acfcac1c880", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![feature(const_mut_refs)]\n #![allow(const_err)]\n \n use std::cell::UnsafeCell;\n@@ -8,15 +7,18 @@ use std::cell::UnsafeCell;\n \n // this is fine because is not possible to mutate through an immutable reference.\n static FOO: &&mut u32 = &&mut 42;\n+//~^ WARN skipping const checks\n \n // this is fine because accessing an immutable static `BAR` is equivalent to accessing `*&BAR`\n // which puts the mutable reference behind an immutable one.\n static BAR: &mut () = &mut ();\n+//~^ WARN skipping const checks\n \n struct Foo<T>(T);\n \n // this is fine for the same reason as `BAR`.\n static BOO: &mut Foo<()> = &mut Foo(());\n+//~^ WARN skipping const checks\n \n struct Meh {\n     x: &'static UnsafeCell<i32>,\n@@ -31,6 +33,7 @@ static MEH: Meh = Meh {\n \n // this is fine for the same reason as `BAR`.\n static OH_YES: &mut i32 = &mut 42;\n+//~^ WARN skipping const checks\n \n fn main() {\n     unsafe {"}, {"sha": "6b23bbc51295714686fe722764dc3b19a00c9c11", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.stderr", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -1,15 +1,39 @@\n warning: skipping const checks\n-  --> $DIR/mutable_references.rs:28:8\n+  --> $DIR/mutable_references.rs:9:26\n+   |\n+LL | static FOO: &&mut u32 = &&mut 42;\n+   |                          ^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/mutable_references.rs:14:23\n+   |\n+LL | static BAR: &mut () = &mut ();\n+   |                       ^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/mutable_references.rs:20:28\n+   |\n+LL | static BOO: &mut Foo<()> = &mut Foo(());\n+   |                            ^^^^^^^^^^^^\n+\n+warning: skipping const checks\n+  --> $DIR/mutable_references.rs:30:8\n    |\n LL |     x: &UnsafeCell::new(42),\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n+warning: skipping const checks\n+  --> $DIR/mutable_references.rs:35:27\n+   |\n+LL | static OH_YES: &mut i32 = &mut 42;\n+   |                           ^^^^^^^\n+\n error[E0594]: cannot assign to `*OH_YES`, as `OH_YES` is an immutable static item\n-  --> $DIR/mutable_references.rs:39:5\n+  --> $DIR/mutable_references.rs:42:5\n    |\n LL |     *OH_YES = 99;\n    |     ^^^^^^^^^^^^ cannot assign\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error; 5 warnings emitted\n \n For more information about this error, try `rustc --explain E0594`."}, {"sha": "4bb0edae5d7bd1d8392d0fd9b8376c12f531eee3", "filename": "src/test/ui/consts/miri_unleashed/read_from_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.rs?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -1,9 +1,9 @@\n // run-pass\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![feature(const_mut_refs)]\n #![allow(const_err)]\n \n static OH_YES: &mut i32 = &mut 42;\n+//~^ WARN skipping const checks\n \n fn main() {\n     // Make sure `OH_YES` can be read."}, {"sha": "79c48c98f09c5d21f13111b857f88b81d8d57bba", "filename": "src/test/ui/consts/miri_unleashed/read_from_static.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9273962aef4451e67b72539feb463f74e8e790ac/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fread_from_static.stderr?ref=9273962aef4451e67b72539feb463f74e8e790ac", "patch": "@@ -0,0 +1,8 @@\n+warning: skipping const checks\n+  --> $DIR/read_from_static.rs:5:27\n+   |\n+LL | static OH_YES: &mut i32 = &mut 42;\n+   |                           ^^^^^^^\n+\n+warning: 1 warning emitted\n+"}]}