{"sha": "2545459bff0aae43288e2e17bff0d332c49a6353", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NDU0NTliZmYwYWFlNDMyODhlMmUxN2JmZjBkMzMyYzQ5YTYzNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-02T17:19:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-02T17:19:32Z"}, "message": "Auto merge of #85269 - dpaoliello:dpaoliello/DebugSymbols, r=michaelwoerister\n\nImprove debug symbol names to avoid ambiguity and work better with MSVC's debugger\n\nThere are several cases where names of types and functions in the debug info are either ambiguous, or not helpful, such as including ambiguous placeholders (e.g., `{{impl}}`, `{{closure}}` or `dyn _'`) or dropping qualifications (e.g., for dynamic types).\n\nInstead, each debug symbol name should be unique and useful:\n* Include disambiguators for anonymous `DefPathDataName` (closures and generators), and unify their formatting when used as a path-qualifier vs item being qualified.\n* Qualify the principal trait for dynamic types.\n* If there is no principal trait for a dynamic type, emit all other traits instead.\n* Respect the `qualified` argument when emitting ref and pointer types.\n* For implementations, emit the disambiguator.\n* Print const generics when emitting generic parameters or arguments.\n\nAdditionally, when targeting MSVC, its debugger treats many command arguments as C++ expressions, even when the argument is defined to be a symbol name. As such names in the debug info need to be more C++-like to be parsed correctly:\n* Avoid characters with special meaning (`#`, `[`, `\"`, `+`).\n* Never start a name with `<` or `{` as this is treated as an operator.\n* `>>` is always treated as a right-shift, even when parsing generic arguments (so add a space to avoid this).\n* Emit function declarations using C/C++ style syntax (e.g., leading return type).\n* Emit arrays as a synthetic `array$<type, size>` type.\n* Include a `$` in all synthetic types as this is a legal character for C++, but not Rust (thus we avoid collisions with user types).", "tree": {"sha": "700d2d2e9e20557960ac5b98775d862cce7b2568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/700d2d2e9e20557960ac5b98775d862cce7b2568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2545459bff0aae43288e2e17bff0d332c49a6353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2545459bff0aae43288e2e17bff0d332c49a6353", "html_url": "https://github.com/rust-lang/rust/commit/2545459bff0aae43288e2e17bff0d332c49a6353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2545459bff0aae43288e2e17bff0d332c49a6353/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "851c82e88ade86bfe3b4ee785d5e5ab1d954b61c", "url": "https://api.github.com/repos/rust-lang/rust/commits/851c82e88ade86bfe3b4ee785d5e5ab1d954b61c", "html_url": "https://github.com/rust-lang/rust/commit/851c82e88ade86bfe3b4ee785d5e5ab1d954b61c"}, {"sha": "c1601dcbc1b4c71a1485bf6f9ff7286a10da40d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1601dcbc1b4c71a1485bf6f9ff7286a10da40d1", "html_url": "https://github.com/rust-lang/rust/commit/c1601dcbc1b4c71a1485bf6f9ff7286a10da40d1"}], "stats": {"total": 1194, "additions": 853, "deletions": 341}, "files": [{"sha": "0e42931b29a976c25eee1dd96c6b71489eee826c", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -471,21 +471,28 @@ fn trait_pointer_metadata(\n     // type is assigned the correct name, size, namespace, and source location.\n     // However, it does not describe the trait's methods.\n \n-    let containing_scope = match trait_type.kind() {\n-        ty::Dynamic(ref data, ..) => {\n-            data.principal_def_id().map(|did| get_namespace_for_item(cx, did))\n-        }\n-        _ => {\n-            bug!(\n-                \"debuginfo: unexpected trait-object type in \\\n-                  trait_pointer_metadata(): {:?}\",\n-                trait_type\n-            );\n-        }\n-    };\n+    let (containing_scope, trait_type_name) = match trait_object_type {\n+        Some(trait_object_type) => match trait_object_type.kind() {\n+            ty::Adt(def, _) => (\n+                Some(get_namespace_for_item(cx, def.did)),\n+                compute_debuginfo_type_name(cx.tcx, trait_object_type, false),\n+            ),\n+            ty::RawPtr(_) | ty::Ref(..) => {\n+                (NO_SCOPE_METADATA, compute_debuginfo_type_name(cx.tcx, trait_object_type, true))\n+            }\n+            _ => {\n+                bug!(\n+                    \"debuginfo: unexpected trait-object type in \\\n+                      trait_pointer_metadata(): {:?}\",\n+                    trait_object_type\n+                );\n+            }\n+        },\n \n-    let trait_object_type = trait_object_type.unwrap_or(trait_type);\n-    let trait_type_name = compute_debuginfo_type_name(cx.tcx, trait_object_type, false);\n+        // No object type, use the trait type directly (no scope here since the type\n+        // will be wrapped in the dyn$ synthetic type).\n+        None => (NO_SCOPE_METADATA, compute_debuginfo_type_name(cx.tcx, trait_type, true)),\n+    };\n \n     let file_metadata = unknown_file_metadata(cx);\n \n@@ -525,7 +532,7 @@ fn trait_pointer_metadata(\n \n     composite_type_metadata(\n         cx,\n-        trait_object_type,\n+        trait_object_type.unwrap_or(trait_type),\n         &trait_type_name[..],\n         unique_type_id,\n         member_descriptions,"}, {"sha": "8375d4c7ca561223b1c561cfd7157a4d3f95e1c7", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -5,7 +5,6 @@ use rustc_codegen_ssa::mir::debuginfo::VariableKind::*;\n use self::metadata::{file_metadata, type_metadata, TypeMap};\n use self::metadata::{UNKNOWN_COLUMN_NUMBER, UNKNOWN_LINE_NUMBER};\n use self::namespace::mangled_name_of_instance;\n-use self::type_names::compute_debuginfo_type_name;\n use self::utils::{create_DIArray, is_node_local_to_unit, DIB};\n \n use crate::abi::FnAbi;\n@@ -311,10 +310,10 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             llvm::LLVMRustDIBuilderCreateSubroutineType(DIB(self), fn_signature)\n         };\n \n-        // Find the enclosing function, in case this is a closure.\n-        let def_key = self.tcx().def_key(def_id);\n-        let mut name = def_key.disambiguated_data.data.to_string();\n+        let mut name = String::new();\n+        type_names::push_item_name(self.tcx(), def_id, false, &mut name);\n \n+        // Find the enclosing function, in case this is a closure.\n         let enclosing_fn_def_id = self.tcx().closure_base_def_id(def_id);\n \n         // Get_template_parameters() will append a `<...>` clause to the function\n@@ -428,24 +427,16 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             substs: SubstsRef<'tcx>,\n             name_to_append_suffix_to: &mut String,\n         ) -> &'ll DIArray {\n+            type_names::push_generic_params(\n+                cx.tcx,\n+                cx.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), substs),\n+                name_to_append_suffix_to,\n+            );\n+\n             if substs.types().next().is_none() {\n                 return create_DIArray(DIB(cx), &[]);\n             }\n \n-            name_to_append_suffix_to.push('<');\n-            for (i, actual_type) in substs.types().enumerate() {\n-                if i != 0 {\n-                    name_to_append_suffix_to.push(',');\n-                }\n-\n-                let actual_type =\n-                    cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), actual_type);\n-                // Add actual type name to <...> clause of function name\n-                let actual_type_name = compute_debuginfo_type_name(cx.tcx(), actual_type, true);\n-                name_to_append_suffix_to.push_str(&actual_type_name[..]);\n-            }\n-            name_to_append_suffix_to.push('>');\n-\n             // Again, only create type information if full debuginfo is enabled\n             let template_params: Vec<_> = if cx.sess().opts.debuginfo == DebugInfo::Full {\n                 let names = get_parameter_names(cx, generics);"}, {"sha": "1cbf53869960895d01b5063211c39fb13e46fc06", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/namespace.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fnamespace.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -1,13 +1,13 @@\n // Namespace Handling.\n \n use super::utils::{debug_context, DIB};\n+use rustc_codegen_ssa::debuginfo::type_names;\n use rustc_middle::ty::{self, Instance};\n \n use crate::common::CodegenCx;\n use crate::llvm;\n use crate::llvm::debuginfo::DIScope;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::definitions::DefPathData;\n \n pub fn mangled_name_of_instance<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n@@ -27,25 +27,18 @@ pub fn item_namespace(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll DIScope {\n         .parent\n         .map(|parent| item_namespace(cx, DefId { krate: def_id.krate, index: parent }));\n \n-    let crate_name_as_str;\n-    let name_to_string;\n-    let namespace_name = match def_key.disambiguated_data.data {\n-        DefPathData::CrateRoot => {\n-            crate_name_as_str = cx.tcx.crate_name(def_id.krate).as_str();\n-            &*crate_name_as_str\n-        }\n-        data => {\n-            name_to_string = data.to_string();\n-            &*name_to_string\n-        }\n+    let namespace_name_string = {\n+        let mut output = String::new();\n+        type_names::push_item_name(cx.tcx, def_id, false, &mut output);\n+        output\n     };\n \n     let scope = unsafe {\n         llvm::LLVMRustDIBuilderCreateNameSpace(\n             DIB(cx),\n             parent_scope,\n-            namespace_name.as_ptr().cast(),\n-            namespace_name.len(),\n+            namespace_name_string.as_ptr().cast(),\n+            namespace_name_string.len(),\n             false, // ExportSymbols (only relevant for C++ anonymous namespaces)\n         )\n     };"}, {"sha": "a97c6a6b4429f7c77ac1d626fa686a2f1af95fb3", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 272, "deletions": 88, "changes": 360, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -1,9 +1,22 @@\n // Type Names for Debug Info.\n \n+// Notes on targetting MSVC:\n+// In general, MSVC's debugger attempts to parse all arguments as C++ expressions,\n+// even if the argument is explicitly a symbol name.\n+// As such, there are many things that cause parsing issues:\n+// * `#` is treated as a special character for macros.\n+// * `{` or `<` at the beginning of a name is treated as an operator.\n+// * `>>` is always treated as a right-shift.\n+// * `[` in a name is treated like a regex bracket expression (match any char\n+//   within the brackets).\n+// * `\"` is treated as the start of a string.\n+\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty, TyCtxt};\n+use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n+use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n+use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n use rustc_target::abi::{TagEncoding, Variants};\n \n use std::fmt::Write;\n@@ -40,7 +53,13 @@ pub fn push_debuginfo_type_name<'tcx>(\n         ty::Bool => output.push_str(\"bool\"),\n         ty::Char => output.push_str(\"char\"),\n         ty::Str => output.push_str(\"str\"),\n-        ty::Never => output.push('!'),\n+        ty::Never => {\n+            if cpp_like_names {\n+                output.push_str(\"never$\");\n+            } else {\n+                output.push('!');\n+            }\n+        }\n         ty::Int(int_ty) => output.push_str(int_ty.name_str()),\n         ty::Uint(uint_ty) => output.push_str(uint_ty.name_str()),\n         ty::Float(float_ty) => output.push_str(float_ty.name_str()),\n@@ -50,94 +69,179 @@ pub fn push_debuginfo_type_name<'tcx>(\n                 msvc_enum_fallback(tcx, t, def, substs, output, visited);\n             } else {\n                 push_item_name(tcx, def.did, qualified, output);\n-                push_type_params(tcx, substs, output, visited);\n+                push_generic_params_internal(tcx, substs, output, visited);\n             }\n         }\n         ty::Tuple(component_types) => {\n             if cpp_like_names {\n-                output.push_str(\"tuple<\");\n+                output.push_str(\"tuple$<\");\n             } else {\n                 output.push('(');\n             }\n \n             for component_type in component_types {\n                 push_debuginfo_type_name(tcx, component_type.expect_ty(), true, output, visited);\n-                output.push_str(\", \");\n+                output.push(',');\n+\n+                // Natvis does not always like having spaces between parts of the type name\n+                // and this causes issues when we need to write a typename in natvis, for example\n+                // as part of a cast like the `HashMap` visualizer does.\n+                if !cpp_like_names {\n+                    output.push(' ');\n+                }\n             }\n             if !component_types.is_empty() {\n                 output.pop();\n-                output.pop();\n+\n+                if !cpp_like_names {\n+                    output.pop();\n+                }\n             }\n \n             if cpp_like_names {\n-                output.push('>');\n+                push_close_angle_bracket(tcx, output);\n             } else {\n                 output.push(')');\n             }\n         }\n         ty::RawPtr(ty::TypeAndMut { ty: inner_type, mutbl }) => {\n-            if !cpp_like_names {\n+            if cpp_like_names {\n+                match mutbl {\n+                    hir::Mutability::Not => output.push_str(\"ptr_const$<\"),\n+                    hir::Mutability::Mut => output.push_str(\"ptr_mut$<\"),\n+                }\n+            } else {\n                 output.push('*');\n-            }\n-            match mutbl {\n-                hir::Mutability::Not => output.push_str(\"const \"),\n-                hir::Mutability::Mut => output.push_str(\"mut \"),\n+                match mutbl {\n+                    hir::Mutability::Not => output.push_str(\"const \"),\n+                    hir::Mutability::Mut => output.push_str(\"mut \"),\n+                }\n             }\n \n-            push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n+            push_debuginfo_type_name(tcx, inner_type, qualified, output, visited);\n \n             if cpp_like_names {\n-                output.push('*');\n+                push_close_angle_bracket(tcx, output);\n             }\n         }\n         ty::Ref(_, inner_type, mutbl) => {\n+            // Slices and `&str` are treated like C++ pointers when computing debug\n+            // info for MSVC debugger. However, wrapping these types' names in a synthetic type\n+            // causes the .natvis engine for WinDbg to fail to display their data, so we opt these\n+            // types out to aid debugging in MSVC.\n+            let is_slice_or_str = match *inner_type.kind() {\n+                ty::Slice(_) | ty::Str => true,\n+                _ => false,\n+            };\n+\n             if !cpp_like_names {\n                 output.push('&');\n+                output.push_str(mutbl.prefix_str());\n+            } else if !is_slice_or_str {\n+                match mutbl {\n+                    hir::Mutability::Not => output.push_str(\"ref$<\"),\n+                    hir::Mutability::Mut => output.push_str(\"ref_mut$<\"),\n+                }\n             }\n-            output.push_str(mutbl.prefix_str());\n \n-            push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n+            push_debuginfo_type_name(tcx, inner_type, qualified, output, visited);\n \n-            if cpp_like_names {\n-                // Slices and `&str` are treated like C++ pointers when computing debug\n-                // info for MSVC debugger. However, adding '*' at the end of these types' names\n-                // causes the .natvis engine for WinDbg to fail to display their data, so we opt these\n-                // types out to aid debugging in MSVC.\n-                match *inner_type.kind() {\n-                    ty::Slice(_) | ty::Str => {}\n-                    _ => output.push('*'),\n-                }\n+            if cpp_like_names && !is_slice_or_str {\n+                push_close_angle_bracket(tcx, output);\n             }\n         }\n         ty::Array(inner_type, len) => {\n-            output.push('[');\n-            push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n-            output.push_str(&format!(\"; {}\", len.eval_usize(tcx, ty::ParamEnv::reveal_all())));\n-            output.push(']');\n+            if cpp_like_names {\n+                output.push_str(\"array$<\");\n+                push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n+                match len.val {\n+                    ty::ConstKind::Param(param) => write!(output, \",{}>\", param.name).unwrap(),\n+                    _ => write!(output, \",{}>\", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))\n+                        .unwrap(),\n+                }\n+            } else {\n+                output.push('[');\n+                push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n+                match len.val {\n+                    ty::ConstKind::Param(param) => write!(output, \"; {}]\", param.name).unwrap(),\n+                    _ => write!(output, \"; {}]\", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))\n+                        .unwrap(),\n+                }\n+            }\n         }\n         ty::Slice(inner_type) => {\n             if cpp_like_names {\n-                output.push_str(\"slice<\");\n+                output.push_str(\"slice$<\");\n             } else {\n                 output.push('[');\n             }\n \n             push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n \n             if cpp_like_names {\n-                output.push('>');\n+                push_close_angle_bracket(tcx, output);\n             } else {\n                 output.push(']');\n             }\n         }\n         ty::Dynamic(ref trait_data, ..) => {\n+            if cpp_like_names {\n+                output.push_str(\"dyn$<\");\n+            } else {\n+                output.push_str(\"dyn \");\n+            }\n+\n             if let Some(principal) = trait_data.principal() {\n                 let principal =\n                     tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), principal);\n-                push_item_name(tcx, principal.def_id, false, output);\n-                push_type_params(tcx, principal.substs, output, visited);\n+                push_item_name(tcx, principal.def_id, qualified, output);\n+                push_generic_params_internal(tcx, principal.substs, output, visited);\n             } else {\n-                output.push_str(\"dyn '_\");\n+                // The auto traits come ordered by `DefPathHash`, which guarantees stability if the\n+                // environment is stable (e.g., incremental builds) but not otherwise (e.g.,\n+                // updated compiler version, different target).\n+                //\n+                // To avoid that causing instabilities in test output, sort the auto-traits\n+                // alphabetically.\n+                let mut auto_traits: Vec<_> = trait_data\n+                    .iter()\n+                    .filter_map(|predicate| {\n+                        match tcx.normalize_erasing_late_bound_regions(\n+                            ty::ParamEnv::reveal_all(),\n+                            predicate,\n+                        ) {\n+                            ty::ExistentialPredicate::AutoTrait(def_id) => {\n+                                let mut name = String::new();\n+                                push_item_name(tcx, def_id, true, &mut name);\n+                                Some(name)\n+                            }\n+                            _ => None,\n+                        }\n+                    })\n+                    .collect();\n+                auto_traits.sort();\n+\n+                for name in auto_traits {\n+                    output.push_str(&name);\n+\n+                    if cpp_like_names {\n+                        output.push_str(\", \");\n+                    } else {\n+                        output.push_str(\" + \");\n+                    }\n+                }\n+\n+                // Remove the trailing joining characters. For cpp_like_names\n+                // this is `, ` otherwise ` + `.\n+                output.pop();\n+                output.pop();\n+                if !cpp_like_names {\n+                    output.pop();\n+                }\n+            }\n+\n+            if cpp_like_names {\n+                push_close_angle_bracket(tcx, output);\n             }\n         }\n         ty::FnDef(..) | ty::FnPtr(_) => {\n@@ -155,23 +259,37 @@ pub fn push_debuginfo_type_name<'tcx>(\n             // use a dummy string that should make it clear\n             // that something unusual is going on\n             if !visited.insert(t) {\n-                output.push_str(\"<recursive_type>\");\n+                output.push_str(if cpp_like_names {\n+                    \"recursive_type$\"\n+                } else {\n+                    \"<recursive_type>\"\n+                });\n                 return;\n             }\n \n-            let sig = t.fn_sig(tcx);\n-            output.push_str(sig.unsafety().prefix_str());\n+            let sig =\n+                tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), t.fn_sig(tcx));\n \n-            let abi = sig.abi();\n-            if abi != rustc_target::spec::abi::Abi::Rust {\n-                output.push_str(\"extern \\\"\");\n-                output.push_str(abi.name());\n-                output.push_str(\"\\\" \");\n-            }\n+            if cpp_like_names {\n+                // Format as a C++ function pointer: return_type (*)(params...)\n+                if sig.output().is_unit() {\n+                    output.push_str(\"void\");\n+                } else {\n+                    push_debuginfo_type_name(tcx, sig.output(), true, output, visited);\n+                }\n+                output.push_str(\" (*)(\");\n+            } else {\n+                output.push_str(sig.unsafety.prefix_str());\n+\n+                if sig.abi != rustc_target::spec::abi::Abi::Rust {\n+                    output.push_str(\"extern \\\"\");\n+                    output.push_str(sig.abi.name());\n+                    output.push_str(\"\\\" \");\n+                }\n \n-            output.push_str(\"fn(\");\n+                output.push_str(\"fn(\");\n+            }\n \n-            let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), sig);\n             if !sig.inputs().is_empty() {\n                 for &parameter_type in sig.inputs() {\n                     push_debuginfo_type_name(tcx, parameter_type, true, output, visited);\n@@ -191,7 +309,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n \n             output.push(')');\n \n-            if !sig.output().is_unit() {\n+            if !cpp_like_names && !sig.output().is_unit() {\n                 output.push_str(\" -> \");\n                 push_debuginfo_type_name(tcx, sig.output(), true, output, visited);\n             }\n@@ -207,17 +325,14 @@ pub fn push_debuginfo_type_name<'tcx>(\n             // processing\n             visited.remove(t);\n         }\n-        ty::Closure(def_id, ..) => {\n-            output.push_str(&format!(\n-                \"closure-{}\",\n-                tcx.def_key(def_id).disambiguated_data.disambiguator\n-            ));\n-        }\n-        ty::Generator(def_id, ..) => {\n-            output.push_str(&format!(\n-                \"generator-{}\",\n-                tcx.def_key(def_id).disambiguated_data.disambiguator\n-            ));\n+        ty::Closure(def_id, ..) | ty::Generator(def_id, ..) => {\n+            let key = tcx.def_key(def_id);\n+            if qualified {\n+                let parent_def_id = DefId { index: key.parent.unwrap(), ..def_id };\n+                push_item_name(tcx, parent_def_id, true, output);\n+                output.push_str(\"::\");\n+            }\n+            push_unqualified_item_name(tcx, def_id, key.disambiguated_data, output);\n         }\n         // Type parameters from polymorphized functions.\n         ty::Param(_) => {\n@@ -273,55 +388,124 @@ pub fn push_debuginfo_type_name<'tcx>(\n \n             output.push_str(\"enum$<\");\n             push_item_name(tcx, def.did, true, output);\n-            push_type_params(tcx, substs, output, visited);\n+            push_generic_params_internal(tcx, substs, output, visited);\n \n             let dataful_variant_name = def.variants[*dataful_variant].ident.as_str();\n \n             output.push_str(&format!(\", {}, {}, {}>\", min, max, dataful_variant_name));\n         } else {\n             output.push_str(\"enum$<\");\n             push_item_name(tcx, def.did, true, output);\n-            push_type_params(tcx, substs, output, visited);\n-            output.push('>');\n+            push_generic_params_internal(tcx, substs, output, visited);\n+            push_close_angle_bracket(tcx, output);\n         }\n     }\n+}\n+\n+pub fn push_item_name(tcx: TyCtxt<'tcx>, def_id: DefId, qualified: bool, output: &mut String) {\n+    let def_key = tcx.def_key(def_id);\n+    if qualified {\n+        if let Some(parent) = def_key.parent {\n+            push_item_name(tcx, DefId { krate: def_id.krate, index: parent }, true, output);\n+            output.push_str(\"::\");\n+        }\n+    }\n+\n+    push_unqualified_item_name(tcx, def_id, def_key.disambiguated_data, output);\n+}\n \n-    fn push_item_name(tcx: TyCtxt<'tcx>, def_id: DefId, qualified: bool, output: &mut String) {\n-        if qualified {\n+fn push_unqualified_item_name(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    disambiguated_data: DisambiguatedDefPathData,\n+    output: &mut String,\n+) {\n+    let cpp_like_names = tcx.sess.target.is_like_msvc;\n+\n+    match disambiguated_data.data {\n+        DefPathData::CrateRoot => {\n             output.push_str(&tcx.crate_name(def_id.krate).as_str());\n-            for path_element in tcx.def_path(def_id).data {\n-                write!(output, \"::{}\", path_element.data).unwrap();\n+        }\n+        DefPathData::ClosureExpr if tcx.generator_kind(def_id).is_some() => {\n+            // Generators look like closures, but we want to treat them differently\n+            // in the debug info.\n+            if cpp_like_names {\n+                write!(output, \"generator${}\", disambiguated_data.disambiguator).unwrap();\n+            } else {\n+                write!(output, \"{{generator#{}}}\", disambiguated_data.disambiguator).unwrap();\n             }\n-        } else {\n-            output.push_str(&tcx.item_name(def_id).as_str());\n         }\n+        _ => match disambiguated_data.data.name() {\n+            DefPathDataName::Named(name) => {\n+                output.push_str(&name.as_str());\n+            }\n+            DefPathDataName::Anon { namespace } => {\n+                if cpp_like_names {\n+                    write!(output, \"{}${}\", namespace, disambiguated_data.disambiguator).unwrap();\n+                } else {\n+                    write!(output, \"{{{}#{}}}\", namespace, disambiguated_data.disambiguator)\n+                        .unwrap();\n+                }\n+            }\n+        },\n+    };\n+}\n+\n+// Pushes the generic parameters in the given `InternalSubsts` to the output string.\n+// This ignores region parameters, since they can't reliably be\n+// reconstructed for items from non-local crates. For local crates, this\n+// would be possible but with inlining and LTO we have to use the least\n+// common denominator - otherwise we would run into conflicts.\n+fn push_generic_params_internal<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    substs: SubstsRef<'tcx>,\n+    output: &mut String,\n+    visited: &mut FxHashSet<Ty<'tcx>>,\n+) {\n+    if substs.non_erasable_generics().next().is_none() {\n+        return;\n     }\n \n-    // Pushes the type parameters in the given `InternalSubsts` to the output string.\n-    // This ignores region parameters, since they can't reliably be\n-    // reconstructed for items from non-local crates. For local crates, this\n-    // would be possible but with inlining and LTO we have to use the least\n-    // common denominator - otherwise we would run into conflicts.\n-    fn push_type_params<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n-        substs: SubstsRef<'tcx>,\n-        output: &mut String,\n-        visited: &mut FxHashSet<Ty<'tcx>>,\n-    ) {\n-        if substs.types().next().is_none() {\n-            return;\n-        }\n+    debug_assert_eq!(substs, tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), substs));\n \n-        output.push('<');\n+    output.push('<');\n \n-        for type_parameter in substs.types() {\n-            push_debuginfo_type_name(tcx, type_parameter, true, output, visited);\n-            output.push_str(\", \");\n+    for type_parameter in substs.non_erasable_generics() {\n+        match type_parameter {\n+            GenericArgKind::Type(type_parameter) => {\n+                push_debuginfo_type_name(tcx, type_parameter, true, output, visited);\n+                output.push_str(\", \");\n+            }\n+            GenericArgKind::Const(const_parameter) => match const_parameter.val {\n+                ty::ConstKind::Param(param) => write!(output, \"{}, \", param.name).unwrap(),\n+                _ => write!(\n+                    output,\n+                    \"0x{:x}, \",\n+                    const_parameter.eval_bits(tcx, ty::ParamEnv::reveal_all(), const_parameter.ty)\n+                )\n+                .unwrap(),\n+            },\n+            other => bug!(\"Unexpected non-erasable generic: {:?}\", other),\n         }\n+    }\n \n-        output.pop();\n-        output.pop();\n+    output.pop();\n+    output.pop();\n \n-        output.push('>');\n-    }\n+    push_close_angle_bracket(tcx, output);\n+}\n+\n+pub fn push_generic_params<'tcx>(tcx: TyCtxt<'tcx>, substs: SubstsRef<'tcx>, output: &mut String) {\n+    let mut visited = FxHashSet::default();\n+    push_generic_params_internal(tcx, substs, output, &mut visited);\n+}\n+\n+fn push_close_angle_bracket<'tcx>(tcx: TyCtxt<'tcx>, output: &mut String) {\n+    // MSVC debugger always treats `>>` as a shift, even when parsing templates,\n+    // so add a space to avoid confusion.\n+    if tcx.sess.target.is_like_msvc && output.ends_with('>') {\n+        output.push(' ')\n+    };\n+\n+    output.push('>');\n }"}, {"sha": "cf887ffb0c01ed77341c1e028be7557997a91e04", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -15,7 +15,7 @@\n       </Synthetic>\n     </Expand>\n   </Type>\n-  <Type Name=\"slice&lt;*&gt;\">\n+  <Type Name=\"slice$&lt;*&gt;\">\n     <DisplayString>{{ len={length} }}</DisplayString>\n     <Expand>\n       <Item Name=\"[len]\" ExcludeView=\"simple\">length</Item>\n@@ -25,31 +25,31 @@\n       </ArrayItems>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;&gt;\">\n+  <Type Name=\"tuple$&lt;&gt;\">\n     <DisplayString>()</DisplayString>\n   </Type>\n-  <Type Name=\"tuple&lt;*&gt;\">\n+  <Type Name=\"tuple$&lt;*&gt;\">\n     <DisplayString>({__0})</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;*,*&gt;\">\n+  <Type Name=\"tuple$&lt;*,*&gt;\">\n     <DisplayString>({__0}, {__1})</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>\n       <Item Name=\"[1]\">__1</Item>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;*,*,*&gt;\">\n+  <Type Name=\"tuple$&lt;*,*,*&gt;\">\n     <DisplayString>({__0}, {__1}, {__2})</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>\n       <Item Name=\"[1]\">__1</Item>\n       <Item Name=\"[2]\">__2</Item>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;*,*,*,*&gt;\">\n+  <Type Name=\"tuple$&lt;*,*,*,*&gt;\">\n     <DisplayString>({__0}, {__1}, {__2}, {__3})</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>\n@@ -58,7 +58,7 @@\n       <Item Name=\"[3]\">__3</Item>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;*,*,*,*,*&gt;\">\n+  <Type Name=\"tuple$&lt;*,*,*,*,*&gt;\">\n     <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4})</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>\n@@ -68,7 +68,7 @@\n       <Item Name=\"[4]\">__4</Item>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;*,*,*,*,*,*&gt;\">\n+  <Type Name=\"tuple$&lt;*,*,*,*,*,*&gt;\">\n     <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5})</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>\n@@ -79,7 +79,7 @@\n       <Item Name=\"[5]\">__5</Item>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;*,*,*,*,*,*,*&gt;\">\n+  <Type Name=\"tuple$&lt;*,*,*,*,*,*,*&gt;\">\n     <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6})</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>\n@@ -91,7 +91,7 @@\n       <Item Name=\"[6]\">__6</Item>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*&gt;\">\n+  <Type Name=\"tuple$&lt;*,*,*,*,*,*,*,*&gt;\">\n     <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7})</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>\n@@ -104,7 +104,7 @@\n       <Item Name=\"[7]\">__7</Item>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*,*&gt;\">\n+  <Type Name=\"tuple$&lt;*,*,*,*,*,*,*,*,*&gt;\">\n     <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8})</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>\n@@ -118,7 +118,7 @@\n       <Item Name=\"[8]\">__8</Item>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*,*,*&gt;\">\n+  <Type Name=\"tuple$&lt;*,*,*,*,*,*,*,*,*,*&gt;\">\n     <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8}, {__9})</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>\n@@ -133,7 +133,7 @@\n       <Item Name=\"[9]\">__9</Item>\n     </Expand>\n   </Type>\n-  <Type Name=\"tuple&lt;*,*,*,*,*,*,*,*,*,*,*&gt;\">\n+  <Type Name=\"tuple$&lt;*,*,*,*,*,*,*,*,*,*,*&gt;\">\n     <DisplayString>({__0}, {__1}, {__2}, {__3}, {__4}, {__5}, {__6}, {__7}, {__8}, {__9}, ...)</DisplayString>\n     <Expand>\n       <Item Name=\"[0]\">__0</Item>"}, {"sha": "3ccd2e9c30ed5ff98df837d6bf5ad7f6cdd55bd3", "filename": "src/etc/natvis/libstd.natvis", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Fetc%2Fnatvis%2Flibstd.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Fetc%2Fnatvis%2Flibstd.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibstd.natvis?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -41,7 +41,7 @@\n           <If Condition=\"(base.table.table.ctrl.pointer[i] &amp; 0x80) == 0\">\n             <!-- Bucket is populated -->\n             <Exec>n--</Exec>\n-            <Item Name=\"{((tuple&lt;$T1, $T2&gt;*)base.table.table.ctrl.pointer)[-(i + 1)].__0}\">((tuple&lt;$T1, $T2&gt;*)base.table.table.ctrl.pointer)[-(i + 1)].__1</Item>\n+            <Item Name=\"{((tuple$&lt;$T1, $T2&gt;*)base.table.table.ctrl.pointer)[-(i + 1)].__0}\">((tuple$&lt;$T1, $T2&gt;*)base.table.table.ctrl.pointer)[-(i + 1)].__1</Item>\n           </If>\n           <Exec>i++</Exec>\n         </Loop>"}, {"sha": "8efa1b15b3fff17b1080641fc7ccad92e18ae9eb", "filename": "src/test/codegen/async-fn-debug-msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -17,7 +17,7 @@ async fn async_fn_test() {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator$0\"\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant0\", scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,"}, {"sha": "39319a3ea722cbfea9603e354b70ada40cd13284", "filename": "src/test/codegen/async-fn-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -17,7 +17,7 @@ async fn async_fn_test() {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[ASYNC_FN]]\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"{generator#0}\", scope: [[ASYNC_FN]]\n // CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[ASYNC_FN]],\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: discriminator: [[DISC:![0-9]*]]"}, {"sha": "4bd811bed10e5d2999a7551e860e4f902548632c", "filename": "src/test/codegen/fn-impl-trait-self.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fcodegen%2Ffn-impl-trait-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fcodegen%2Ffn-impl-trait-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffn-impl-trait-self.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -1,7 +1,8 @@\n // compile-flags: -g\n //\n // CHECK-LABEL: @main\n-// CHECK: {{.*}}DIDerivedType(tag: DW_TAG_pointer_type, name: \"fn() -> <recursive_type>\",{{.*}}\n+// MSVC: {{.*}}DIDerivedType(tag: DW_TAG_pointer_type, name: \"recursive_type$ (*)()\",{{.*}}\n+// NONMSVC: {{.*}}DIDerivedType(tag: DW_TAG_pointer_type, name: \"fn() -> <recursive_type>\",{{.*}}\n //\n // CHECK: {{.*}}DISubroutineType{{.*}}\n // CHECK: {{.*}}DIBasicType(name: \"<recur_type>\", encoding: DW_ATE_unsigned)"}, {"sha": "e2ba4ad30894d151ac92c3c1354af26bb3bc9998", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -21,7 +21,7 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator$0\"\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant0\", scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,"}, {"sha": "ea324695c15d79d83fc65d94eb4f8f64b72f2db9", "filename": "src/test/codegen/generator-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -21,7 +21,7 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[GEN_FN]]\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"{generator#0}\", scope: [[GEN_FN]]\n // CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[GEN_FN]],\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: discriminator: [[DISC:![0-9]*]]"}, {"sha": "c35c32554983a6976d08789fb606d422d7713dd8", "filename": "src/test/debuginfo/basic-types.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -6,9 +6,8 @@\n \n // min-lldb-version: 310\n \n-// This fails on lldb 6.0.1 on x86-64 Fedora 28; so mark it macOS-only\n-// for now.\n-// only-macos\n+// This fails on lldb 6.0.1 on x86-64 Fedora 28; so ignore Linux for now.\n+// ignore-linux\n \n // compile-flags:-g\n \n@@ -44,6 +43,9 @@\n // gdb-check:$13 = 2.5\n // gdb-command:print f64\n // gdb-check:$14 = 3.5\n+// gdb-command:print s\n+// gdbg-check:$15 = {data_ptr = [...] \"Hello, World!\", length = 13}\n+// gdbr-check:$15 = \"Hello, World!\"\n \n \n // === LLDB TESTS ==================================================================================\n@@ -94,6 +96,41 @@\n // lldbg-check:[...]$12 = 3.5\n // lldbr-check:(f64) f64 = 3.5\n \n+\n+// === CDB TESTS ===================================================================================\n+\n+// cdb-command:g\n+// cdb-command:dx b\n+// cdb-check:b                : false [Type: bool]\n+// cdb-command:dx i\n+// cdb-check:i                : -1 [Type: [...]]\n+// The variable 'c' doesn't appear for some reason...\n+// cdb-command:dx i8\n+// cdb-check:i8               : 68 [Type: char]\n+// cdb-command:dx i16\n+// cdb-check:i16              : -16 [Type: short]\n+// cdb-command:dx i32\n+// cdb-check:i32              : -32 [Type: int]\n+// cdb-command:dx i64\n+// cdb-check:i64              : -64 [Type: __int64]\n+// cdb-command:dx u\n+// cdb-check:u                : 0x1 [Type: [...]]\n+// cdb-command:dx u8\n+// cdb-check:u8               : 0x64 [Type: unsigned char]\n+// cdb-command:dx u16\n+// cdb-check:u16              : 0x10 [Type: unsigned short]\n+// cdb-command:dx u32\n+// cdb-check:u32              : 0x20 [Type: unsigned int]\n+// cdb-command:dx u64\n+// cdb-check:u64              : 0x40 [Type: unsigned __int64]\n+// cdb-command:dx f32\n+// cdb-check:f32              : 2.500000 [Type: float]\n+// cdb-command:dx f64\n+// cdb-check:f64              : 3.500000 [Type: double]\n+// cdb-command:.enable_unicode 1\n+// cdb-command:dx  s\n+// cdb-check:s                : \"Hello, World!\" [Type: str]\n+\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n@@ -113,6 +150,7 @@ fn main() {\n     let u64: u64 = 64;\n     let f32: f32 = 2.5;\n     let f64: f64 = 3.5;\n+    let s: &str = \"Hello, World!\";\n     _zzz(); // #break\n }\n "}, {"sha": "26317f5c3ff32bad4bffcbe7ec04b897d4e2c88d", "filename": "src/test/debuginfo/function-names.rs", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -0,0 +1,175 @@\n+// Function names are formatted differently in old versions of GDB\n+// min-gdb-version: 9.2\n+\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// Top-level function\n+// gdb-command:info functions -q function_names::main\n+// gdb-check:[...]static fn function_names::main();\n+// gdb-command:info functions -q function_names::generic_func<*\n+// gdb-check:[...]static fn function_names::generic_func(i32) -> i32;\n+\n+// Implementations\n+// gdb-command:info functions -q function_names::.*::impl_function.*\n+// gdb-check:[...]static fn function_names::GenericStruct<T1,T2>::impl_function();\n+// gdb-check:[...]static fn function_names::Mod1::TestStruct2::impl_function();\n+// gdb-check:[...]static fn function_names::TestStruct1::impl_function();\n+\n+// Trait implementations\n+// gdb-command:info functions -q function_names::.*::trait_function.*\n+// gdb-check:[...]static fn <function_names::GenericStruct<T,i32> as function_names::TestTrait1>::trait_function();\n+// gdb-check:[...]static fn <function_names::GenericStruct<[T; N],f32> as function_names::TestTrait1>::trait_function();\n+// gdb-check:[...]static fn <function_names::Mod1::TestStruct2 as function_names::Mod1::TestTrait2>::trait_function();\n+// gdb-check:[...]static fn <function_names::TestStruct1 as function_names::TestTrait1>::trait_function();\n+\n+// Closure\n+// gdb-command:info functions -q function_names::.*::{{closure.*\n+// gdb-check:[...]static fn function_names::GenericStruct<T1,T2>::impl_function::{{closure}}(*mut function_names::{impl#2}::impl_function::{closure#0});\n+// gdb-check:[...]static fn function_names::generic_func::{{closure}}(*mut function_names::generic_func::{closure#0});\n+// gdb-check:[...]static fn function_names::main::{{closure}}(*mut function_names::main::{closure#0});\n+\n+// Generator\n+// Generators don't seem to appear in GDB's symbol table.\n+\n+// === CDB TESTS ===================================================================================\n+\n+// Top-level function\n+// cdb-command:x a!function_names::main\n+// cdb-check:[...] a!function_names::main (void)\n+// cdb-command:x a!function_names::generic_func<*\n+// cdb-check:[...] a!function_names::generic_func<i32> (int)\n+\n+// Implementations\n+// cdb-command:x a!function_names::*::impl_function*\n+// cdb-check:[...] a!function_names::Mod1::TestStruct2::impl_function (void)\n+// cdb-check:[...] a!function_names::TestStruct1::impl_function (void)\n+// cdb-check:[...] a!function_names::GenericStruct<i32, i32>::impl_function<i32, i32> (void)\n+\n+// Trait implementations\n+// cdb-command:x a!function_names::*::trait_function*\n+// cdb-check:[...] a!function_names::impl$6::trait_function<i32, 0x1> (void)\n+// cdb-check:[...] a!function_names::impl$3::trait_function<i32> (void)\n+// cdb-check:[...] a!function_names::impl$1::trait_function (void)\n+// cdb-check:[...] a!function_names::impl$5::trait_function3<function_names::TestStruct1> (void)\n+// cdb-check:[...] a!function_names::Mod1::impl$1::trait_function (void)\n+\n+// Closure\n+// cdb-command:x a!function_names::*::closure*\n+// cdb-check:[...] a!function_names::main::closure$0 (void)\n+// cdb-check:[...] a!function_names::generic_func::closure$0<i32> (void)\n+// cdb-check:[...] a!function_names::impl$2::impl_function::closure$0<i32, i32> (void)\n+\n+// Generator\n+// cdb-command:x a!function_names::*::generator*\n+// cdb-check:[...] a!function_names::main::generator$1 (void)\n+\n+#![allow(unused_variables)]\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+#![feature(generators, generator_trait)]\n+\n+use Mod1::TestTrait2;\n+use std::ops::Generator;\n+use std::pin::Pin;\n+\n+fn main() {\n+    // Implementations\n+    TestStruct1::impl_function();\n+    Mod1::TestStruct2::impl_function();\n+    GenericStruct::<i32, i32>::impl_function();\n+\n+    // Trait implementations\n+    TestStruct1::trait_function();\n+    Mod1::TestStruct2::trait_function();\n+    GenericStruct::<i32, i32>::trait_function();\n+    GenericStruct::<[i32; 1], f32>::trait_function();\n+    GenericStruct::<TestStruct1, usize>::trait_function3();\n+\n+    // Generic function\n+    let _ = generic_func(42);\n+\n+    // Closure\n+    let closure = || { TestStruct1 };\n+    closure();\n+\n+    // Generator\n+    let mut generator = || { yield; return; };\n+    Pin::new(&mut generator).resume(());\n+}\n+\n+struct TestStruct1;\n+trait TestTrait1 {\n+    fn trait_function();\n+}\n+\n+// Implementation\n+impl TestStruct1 {\n+    pub fn impl_function() {}\n+}\n+\n+// Implementation for a trait\n+impl TestTrait1 for TestStruct1 {\n+    fn trait_function() {}\n+}\n+\n+// Implementation and implementation within a mod\n+mod Mod1 {\n+    pub struct TestStruct2;\n+    pub trait TestTrait2 {\n+        fn trait_function();\n+    }\n+\n+    impl TestStruct2 {\n+        pub fn impl_function() {}\n+    }\n+\n+    impl TestTrait2 for TestStruct2 {\n+        fn trait_function() {}\n+    }\n+}\n+\n+struct GenericStruct<T1, T2>(std::marker::PhantomData<(T1, T2)>);\n+\n+// Generic implementation\n+impl<T1, T2> GenericStruct<T1, T2> {\n+    pub fn impl_function() {\n+        // Closure in a generic implementation\n+        let closure = || { TestStruct1 };\n+        closure();\n+    }\n+}\n+\n+// Generic trait implementation\n+impl<T> TestTrait1 for GenericStruct<T, i32> {\n+    fn trait_function() {}\n+}\n+\n+// Implementation based on associated type\n+trait TestTrait3 {\n+    type AssocType;\n+    fn trait_function3();\n+}\n+impl TestTrait3 for TestStruct1 {\n+    type AssocType = usize;\n+    fn trait_function3() {}\n+}\n+impl<T: TestTrait3> TestTrait3 for GenericStruct<T, T::AssocType> {\n+    type AssocType = T::AssocType;\n+    fn trait_function3() {}\n+}\n+\n+// Generic trait implementation with const generics\n+impl<T, const N: usize> TestTrait1 for GenericStruct<[T; N], f32> {\n+    fn trait_function() {}\n+}\n+\n+// Generic function\n+fn generic_func<T>(value: T) -> T {\n+    // Closure in a generic function\n+    let closure = || { TestStruct1 };\n+    closure();\n+\n+    value\n+}"}, {"sha": "7ac3304aa963491547aa53342567595888610237", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -11,31 +11,31 @@\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::generator-0::Unresumed(0x[...])\n+// gdb-check:$1 = generator_objects::main::{generator#0}::Unresumed(0x[...])\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::generator-0::Suspend0{c: 6, d: 7, __0: 0x[...]}\n+// gdb-check:$2 = generator_objects::main::{generator#0}::Suspend0{c: 6, d: 7, __0: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::generator-0::Suspend1{c: 7, d: 8, __0: 0x[...]}\n+// gdb-check:$3 = generator_objects::main::{generator#0}::Suspend1{c: 7, d: 8, __0: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::generator-0::Returned(0x[...])\n+// gdb-check:$4 = generator_objects::main::{generator#0}::Returned(0x[...])\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $0 =\n+// lldbg-check:(generator_objects::main::{generator#0}) $0 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $1 =\n+// lldbg-check:(generator_objects::main::{generator#0}) $1 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $2 =\n+// lldbg-check:(generator_objects::main::{generator#0}) $2 =\n // lldb-command:continue\n // lldb-command:print b\n-// lldbg-check:(generator_objects::main::generator-0) $3 =\n+// lldbg-check:(generator_objects::main::{generator#0}) $3 =\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "c0135de1219d37530e06cd8c0aa5724e2e20a299", "filename": "src/test/debuginfo/generic-struct.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -39,6 +39,27 @@\n // lldbg-check:[...]$3 = AGenericStruct<f64, generic_struct::AGenericStruct<i32, f64>> { key: 6.5, value: AGenericStruct<i32, f64> { key: 7, value: 8.5 } }\n // lldbr-check:(generic_struct::AGenericStruct<f64, generic_struct::AGenericStruct<i32, f64>>) float_int_float = AGenericStruct<f64, generic_struct::AGenericStruct<i32, f64>> { key: 6.5, value: AGenericStruct<i32, f64> { key: 7, value: 8.5 } }\n \n+// === CDB TESTS ===================================================================================\n+\n+// cdb-command:g\n+\n+// cdb-command:dx int_int\n+// cdb-check:int_int          [Type: generic_struct::AGenericStruct<i32, i32>]\n+// cdb-check:[...]key              : 0 [Type: int]\n+// cdb-check:[...]value            : 1 [Type: int]\n+// cdb-command:dx int_float\n+// cdb-check:int_float        [Type: generic_struct::AGenericStruct<i32, f64>]\n+// cdb-check:[...]key              : 2 [Type: int]\n+// cdb-check:[...]value            : 3.500000 [Type: double]\n+// cdb-command:dx float_int\n+// cdb-check:float_int        [Type: generic_struct::AGenericStruct<f64, i32>]\n+// cdb-check:[...]key              : 4.500000 [Type: double]\n+// cdb-check:[...]value            : 5 [Type: int]\n+// cdb-command:dx float_int_float\n+// cdb-check:float_int_float  [Type: generic_struct::AGenericStruct<f64, generic_struct::AGenericStruct<i32, f64> >]\n+// cdb-check:[...]key              : 6.500000 [Type: double]\n+// cdb-check:[...]value            [Type: generic_struct::AGenericStruct<i32, f64>]\n+\n \n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "f6d2146fe11fa43654053d80df0a9ae6004a800c", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -11,20 +11,20 @@\n // gdb-command:run\n \n // gdb-command:print g\n-// gdb-check:$1 = issue_57822::main::closure-1 (issue_57822::main::closure-0 (1))\n+// gdb-check:$1 = issue_57822::main::{closure#1} (issue_57822::main::{closure#0} (1))\n \n // gdb-command:print b\n-// gdb-check:$2 = issue_57822::main::generator-3::Unresumed(issue_57822::main::generator-2::Unresumed(2))\n+// gdb-check:$2 = issue_57822::main::{generator#3}::Unresumed(issue_57822::main::{generator#2}::Unresumed(2))\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n \n // lldb-command:print g\n-// lldbg-check:(issue_57822::main::closure-1) $0 = { 0 = { 0 = 1 } }\n+// lldbg-check:(issue_57822::main::{closure#1}) $0 = { 0 = { 0 = 1 } }\n \n // lldb-command:print b\n-// lldbg-check:(issue_57822::main::generator-3) $1 =\n+// lldbg-check:(issue_57822::main::{generator#3}) $1 =\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "cf3be2e71967402ea02991b82282ceb2e12ace23", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -1,5 +1,4 @@\n // only-cdb\n-// ignore-tidy-linelength\n // compile-flags:-g\n \n // cdb-command: g\n@@ -8,16 +7,16 @@\n //       so the best we can do is to make sure we are generating the right debuginfo\n \n // cdb-command: dx -r2 a,!\n-// cdb-check:a,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Some]\n+// cdb-check:a,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Some]\n // cdb-check:        [+0x000] __0              : Low (0x2) [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant     : 0x2 [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Discriminant$]\n+// cdb-check:    [+0x000] discriminant     : 0x2 [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Discriminant$]\n \n // cdb-command: dx -r2 b,!\n-// cdb-check:b,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Some]\n+// cdb-check:b,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n-// cdb-check:    [+0x000] discriminant     : None (0x11) [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum>>, 2, 16, Some>::Discriminant$]\n+// cdb-check:    [+0x000] discriminant     : None (0x11) [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Discriminant$]\n \n // cdb-command: dx -r2 c,!\n // cdb-check:c,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n@@ -38,24 +37,24 @@\n // cdb-check:    [+0x000] discriminant     : Tag2 (0x13) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Discriminant$]\n \n // cdb-command: dx -r2 f,!\n-// cdb-check:f,!              [Type: enum$<core::option::Option<u32*>, 1, [...], Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::Some]\n+// cdb-check:f,!              [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x[...] : 0x1 [Type: unsigned int *]\n-// cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::Discriminant$]\n+// cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Discriminant$]\n \n // cdb-command: dx -r2 g,!\n-// cdb-check:g,!              [Type: enum$<core::option::Option<u32*>, 1, [...], Some>]\n-// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::Some]\n+// cdb-check:g,!              [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n+// cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x0 [Type: unsigned int *]\n-// cdb-check:    [+0x000] discriminant     : None (0x0) [Type: enum$<core::option::Option<u32*>, 1, [...], Some>::Discriminant$]\n+// cdb-check:    [+0x000] discriminant     : None (0x0) [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Discriminant$]\n \n // cdb-command: dx h\n-// cdb-check:h                : Some [Type: enum$<core::option::Option<u32>>]\n+// cdb-check:h                : Some [Type: enum$<core::option::Option<u32> >]\n // cdb-check:    [+0x000] variant$         : Some (0x1) [Type: core::option::Option]\n // cdb-check:    [+0x004] __0              : 0xc [Type: unsigned int]\n \n // cdb-command: dx i\n-// cdb-check:i                : None [Type: enum$<core::option::Option<u32>>]\n+// cdb-check:i                : None [Type: enum$<core::option::Option<u32> >]\n // cdb-check:    [+0x000] variant$         : None (0x0) [Type: core::option::Option]\n \n // cdb-command: dx j"}, {"sha": "40bea30f1252ca853d300202ae31eeb532b206ae", "filename": "src/test/debuginfo/mutex.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmutex.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -3,7 +3,6 @@\n // cdb-only\n // min-cdb-version: 10.0.21287.1005\n // compile-flags:-g\n-// ignore-tidy-linelength\n \n // === CDB TESTS ==================================================================================\n //\n@@ -22,7 +21,7 @@\n \n //\n // cdb-command:dx lock,d\n-// cdb-check:lock,d           : Ok [Type: enum$<core::result::Result<std::sync::mutex::MutexGuard<i32>, enum$<std::sync::poison::TryLockError<std::sync::mutex::MutexGuard<i32>>, 0, 1, Poisoned>>>]\n+// cdb-check:lock,d           : Ok [Type: enum$<core::result::Result<std::sync::mutex::MutexGuard<i32>, enum$<std::sync::poison::TryLockError<std::sync::mutex::MutexGuard<i32> >, 0, 1, Poisoned> > >]\n // cdb-check:    [...] variant$         : Ok (0) [Type: core::result::Result]\n // cdb-check:    [...] __0              [Type: std::sync::mutex::MutexGuard<i32>]\n "}, {"sha": "ede15578712578cd476dbf73100e473872887414", "filename": "src/test/debuginfo/pretty-std-collections-hash.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -77,6 +77,8 @@\n // cdb-command: dx hash_map,d\n // cdb-check:    [\"0xe\"]          : 14 [Type: unsigned __int64]\n \n+// cdb-command: dx x\n+\n #![allow(unused_variables)]\n use std::collections::HashSet;\n use std::collections::HashMap;\n@@ -95,6 +97,9 @@ fn main() {\n         hash_map.insert(i as u64, i as u64);\n     }\n \n+    let x = &(123u64, 456u64);\n+    let string = \"awefawefawe\".to_string();\n+\n     zzz(); // #break\n }\n "}, {"sha": "a7f384c05007d2556ab1197a5ec4a8007e25ba04", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -1,7 +1,6 @@\n // ignore-freebsd: gdb package too new\n // only-cdb // \"Temporarily\" ignored on GDB/LLDB due to debuginfo tests being disabled, see PR 47155\n // ignore-android: FIXME(#10381)\n-// ignore-tidy-linelength\n // compile-flags:-g\n // min-gdb-version: 7.7\n // min-lldb-version: 310\n@@ -72,7 +71,7 @@\n // cdb-command: g\n \n // cdb-command: dx slice,d\n-// cdb-check:slice,d          : { len=4 } [Type: slice<i32>]\n+// cdb-check:slice,d          : { len=4 } [Type: slice$<i32>]\n // cdb-check:    [len]            : 4 [Type: [...]]\n // cdb-check:    [0]              : 0 [Type: int]\n // cdb-check:    [1]              : 1 [Type: int]\n@@ -116,12 +115,12 @@\n // NOTE: OsString doesn't have a .natvis entry yet.\n \n // cdb-command: dx some\n-// cdb-check:some             : Some [Type: enum$<core::option::Option<i16>>]\n+// cdb-check:some             : Some [Type: enum$<core::option::Option<i16> >]\n // cdb-check:    [...] variant$         : Some (0x1) [Type: core::option::Option]\n // cdb-check:    [...] __0              : 8 [Type: short]\n \n // cdb-command: dx none\n-// cdb-check:none             : None [Type: enum$<core::option::Option<i64>>]\n+// cdb-check:none             : None [Type: enum$<core::option::Option<i64> >]\n // cdb-check:    [...] variant$         : None (0x0) [Type: core::option::Option]\n \n // cdb-command: dx some_string"}, {"sha": "6e558bd3c13aa847e34a2f07abb3e943fddb7945", "filename": "src/test/debuginfo/rc_arc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Frc_arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frc_arc.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -1,6 +1,5 @@\n // pretty-printers are not loaded\n // compile-flags:-g\n-// ignore-tidy-linelength\n \n // min-gdb-version: 8.1\n // min-cdb-version: 10.0.18317.1001\n@@ -36,7 +35,7 @@\n \n // cdb-command:dx w1,d\n // cdb-check:w1,d             [Type: alloc::rc::Weak<i32>]\n-// cdb-check:    [...] ptr              : [...] [Type: core::ptr::non_null::NonNull<alloc::rc::RcBox<i32>>]\n+// cdb-check:    [...] ptr              : [...] [Type: core::ptr::non_null::NonNull<alloc::rc::RcBox<i32> >]\n \n // cdb-command:dx a,d\n // cdb-check:a,d              : 42 [Type: alloc::sync::Arc<i32>]"}, {"sha": "a075c437c463b588a21b412819d19a3d62b7aef8", "filename": "src/test/debuginfo/result-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fresult-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fresult-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fresult-types.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -7,11 +7,11 @@\n // cdb-command: g\n \n // cdb-command: dx x,d\n-// cdb-check:x,d              : Ok [Type: enum$<core::result::Result<i32, str>>]\n+// cdb-check:x,d              : Ok [Type: enum$<core::result::Result<i32, str> >]\n // cdb-check:    [...] __0              : -3 [Type: int]\n \n // cdb-command: dx y\n-// cdb-check:y                : Err [Type: enum$<core::result::Result<i32, str>>]\n+// cdb-check:y                : Err [Type: enum$<core::result::Result<i32, str> >]\n // cdb-check:    [...] __0              : \"Some error message\" [Type: str]\n \n fn main()"}, {"sha": "0807cfedce01d844522bc05b2b0dcfaf4d1346c8", "filename": "src/test/debuginfo/simple-tuple.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -129,38 +129,38 @@\n // cdb-command: g\n \n // cdb-command:dx noPadding8,d\n-// cdb-check:noPadding8,d [...]: (-100, 100) [Type: tuple<i8, u8>]\n+// cdb-check:noPadding8,d [...]: (-100, 100) [Type: tuple$<i8,u8>]\n // cdb-check:[...][0]              : -100 [Type: [...]]\n // cdb-check:[...][1]              : 100 [Type: [...]]\n // cdb-command:dx noPadding16,d\n-// cdb-check:noPadding16,d [...]: (0, 1, 2) [Type: tuple<i16, i16, u16>]\n+// cdb-check:noPadding16,d [...]: (0, 1, 2) [Type: tuple$<i16,i16,u16>]\n // cdb-check:[...][0]              : 0 [Type: [...]]\n // cdb-check:[...][1]              : 1 [Type: [...]]\n // cdb-check:[...][2]              : 2 [Type: [...]]\n // cdb-command:dx noPadding32,d\n-// cdb-check:noPadding32,d [...]: (3, 4.5[...], 5) [Type: tuple<i32, f32, u32>]\n+// cdb-check:noPadding32,d [...]: (3, 4.5[...], 5) [Type: tuple$<i32,f32,u32>]\n // cdb-check:[...][0]              : 3 [Type: [...]]\n // cdb-check:[...][1]              : 4.5[...] [Type: [...]]\n // cdb-check:[...][2]              : 5 [Type: [...]]\n // cdb-command:dx noPadding64,d\n-// cdb-check:noPadding64,d [...]: (6, 7.5[...], 8) [Type: tuple<i64, f64, u64>]\n+// cdb-check:noPadding64,d [...]: (6, 7.5[...], 8) [Type: tuple$<i64,f64,u64>]\n // cdb-check:[...][0]              : 6 [Type: [...]]\n // cdb-check:[...][1]              : 7.500000 [Type: [...]]\n // cdb-check:[...][2]              : 8 [Type: [...]]\n \n // cdb-command:dx internalPadding1,d\n-// cdb-check:internalPadding1,d [...]: (9, 10) [Type: tuple<i16, i32>]\n+// cdb-check:internalPadding1,d [...]: (9, 10) [Type: tuple$<i16,i32>]\n // cdb-check:[...][0]              : 9 [Type: short]\n // cdb-check:[...][1]              : 10 [Type: int]\n // cdb-command:dx internalPadding2,d\n-// cdb-check:internalPadding2,d [...]: (11, 12, 13, 14) [Type: tuple<i16, i32, u32, u64>]\n+// cdb-check:internalPadding2,d [...]: (11, 12, 13, 14) [Type: tuple$<i16,i32,u32,u64>]\n // cdb-check:[...][0]              : 11 [Type: [...]]\n // cdb-check:[...][1]              : 12 [Type: [...]]\n // cdb-check:[...][2]              : 13 [Type: [...]]\n // cdb-check:[...][3]              : 14 [Type: [...]]\n \n // cdb-command:dx paddingAtEnd,d\n-// cdb-check:paddingAtEnd,d [...]: (15, 16) [Type: tuple<i32, i16>]\n+// cdb-check:paddingAtEnd,d [...]: (15, 16) [Type: tuple$<i32,i16>]\n // cdb-check:[...][0]              : 15 [Type: [...]]\n // cdb-check:[...][1]              : 16 [Type: [...]]\n "}, {"sha": "531c37a3421198939bb94ed5a983cd24d1eae917", "filename": "src/test/debuginfo/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fthread.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -9,8 +9,8 @@\n // cdb-command:g\n //\n // cdb-command:dx join_handle,d\n-// cdb-check:join_handle,d    [Type: std::thread::JoinHandle<tuple<>>]\n-// cdb-check:    [...] __0              [Type: std::thread::JoinInner<tuple<>>]\n+// cdb-check:join_handle,d    [Type: std::thread::JoinHandle<tuple$<> >]\n+// cdb-check:    [...] __0              [Type: std::thread::JoinInner<tuple$<> >]\n //\n // cdb-command:dx t,d\n // cdb-check:t,d              : [...] [Type: std::thread::Thread *]"}, {"sha": "578db74e9eeb640b783d152ec8fa1b265660706b", "filename": "src/test/debuginfo/tuple-in-tuple.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -65,64 +65,64 @@\n // cdb-command: g\n \n // cdb-command:dx no_padding1,d\n-// cdb-check:no_padding1,d [...]: ((0, 1), 2, 3) [Type: tuple<tuple<u32, u32>, u32, u32>]\n-// cdb-check:[...][0]              : (0, 1) [Type: tuple<u32, u32>]\n+// cdb-check:no_padding1,d [...]: ((0, 1), 2, 3) [Type: tuple$<tuple$<u32,u32>,u32,u32>]\n+// cdb-check:[...][0]              : (0, 1) [Type: tuple$<u32,u32>]\n // cdb-check:[...][1]              : 2 [Type: [...]]\n // cdb-check:[...][2]              : 3 [Type: [...]]\n // cdb-command:dx no_padding1.__0,d\n-// cdb-check:no_padding1.__0,d [...]: (0, 1) [Type: tuple<u32, u32>]\n+// cdb-check:no_padding1.__0,d [...]: (0, 1) [Type: tuple$<u32,u32>]\n // cdb-check:[...][0]              : 0 [Type: [...]]\n // cdb-check:[...][1]              : 1 [Type: [...]]\n // cdb-command:dx no_padding2,d\n-// cdb-check:no_padding2,d [...]: (4, (5, 6), 7) [Type: tuple<u32, tuple<u32, u32>, u32>]\n+// cdb-check:no_padding2,d [...]: (4, (5, 6), 7) [Type: tuple$<u32,tuple$<u32,u32>,u32>]\n // cdb-check:[...][0]              : 4 [Type: [...]]\n-// cdb-check:[...][1]              : (5, 6) [Type: tuple<u32, u32>]\n+// cdb-check:[...][1]              : (5, 6) [Type: tuple$<u32,u32>]\n // cdb-check:[...][2]              : 7 [Type: [...]]\n // cdb-command:dx no_padding2.__1,d\n-// cdb-check:no_padding2.__1,d [...]: (5, 6) [Type: tuple<u32, u32>]\n+// cdb-check:no_padding2.__1,d [...]: (5, 6) [Type: tuple$<u32,u32>]\n // cdb-check:[...][0]              : 5 [Type: [...]]\n // cdb-check:[...][1]              : 6 [Type: [...]]\n // cdb-command:dx no_padding3,d\n-// cdb-check:no_padding3,d [...]: (8, 9, (10, 11)) [Type: tuple<u32, u32, tuple<u32, u32>>]\n+// cdb-check:no_padding3,d [...]: (8, 9, (10, 11)) [Type: tuple$<u32,u32,tuple$<u32,u32> >]\n // cdb-check:[...][0]              : 8 [Type: [...]]\n // cdb-check:[...][1]              : 9 [Type: [...]]\n-// cdb-check:[...][2]              : (10, 11) [Type: tuple<u32, u32>]\n+// cdb-check:[...][2]              : (10, 11) [Type: tuple$<u32,u32>]\n // cdb-command:dx no_padding3.__2,d\n-// cdb-check:no_padding3.__2,d [...]: (10, 11) [Type: tuple<u32, u32>]\n+// cdb-check:no_padding3.__2,d [...]: (10, 11) [Type: tuple$<u32,u32>]\n // cdb-check:[...][0]              : 10 [Type: [...]]\n // cdb-check:[...][1]              : 11 [Type: [...]]\n \n // cdb-command:dx internal_padding1,d\n-// cdb-check:internal_padding1,d [...]: (12, (13, 14)) [Type: tuple<i16, tuple<i32, i32>>]\n+// cdb-check:internal_padding1,d [...]: (12, (13, 14)) [Type: tuple$<i16,tuple$<i32,i32> >]\n // cdb-check:[...][0]              : 12 [Type: [...]]\n-// cdb-check:[...][1]              : (13, 14) [Type: tuple<i32, i32>]\n+// cdb-check:[...][1]              : (13, 14) [Type: tuple$<i32,i32>]\n // cdb-command:dx internal_padding1.__1,d\n-// cdb-check:internal_padding1.__1,d [...]: (13, 14) [Type: tuple<i32, i32>]\n+// cdb-check:internal_padding1.__1,d [...]: (13, 14) [Type: tuple$<i32,i32>]\n // cdb-check:[...][0]              : 13 [Type: [...]]\n // cdb-check:[...][1]              : 14 [Type: [...]]\n // cdb-command:dx internal_padding2,d\n-// cdb-check:internal_padding2,d [...]: (15, (16, 17)) [Type: tuple<i16, tuple<i16, i32>>]\n+// cdb-check:internal_padding2,d [...]: (15, (16, 17)) [Type: tuple$<i16,tuple$<i16,i32> >]\n // cdb-check:[...][0]              : 15 [Type: [...]]\n-// cdb-check:[...][1]              : (16, 17) [Type: tuple<i16, i32>]\n+// cdb-check:[...][1]              : (16, 17) [Type: tuple$<i16,i32>]\n // cdb-command:dx internal_padding2.__1,d\n-// cdb-check:internal_padding2.__1,d [...]: (16, 17) [Type: tuple<i16, i32>]\n+// cdb-check:internal_padding2.__1,d [...]: (16, 17) [Type: tuple$<i16,i32>]\n // cdb-check:[...][0]              : 16 [Type: [...]]\n // cdb-check:[...][1]              : 17 [Type: [...]]\n \n // cdb-command:dx padding_at_end1,d\n-// cdb-check:padding_at_end1,d [...]: (18, (19, 20)) [Type: tuple<i32, tuple<i32, i16>>]\n+// cdb-check:padding_at_end1,d [...]: (18, (19, 20)) [Type: tuple$<i32,tuple$<i32,i16> >]\n // cdb-check:[...][0]              : 18 [Type: [...]]\n-// cdb-check:[...][1]              : (19, 20) [Type: tuple<i32, i16>]\n+// cdb-check:[...][1]              : (19, 20) [Type: tuple$<i32,i16>]\n // cdb-command:dx padding_at_end1.__1,d\n-// cdb-check:padding_at_end1.__1,d [...][Type: tuple<i32, i16>]\n+// cdb-check:padding_at_end1.__1,d [...][Type: tuple$<i32,i16>]\n // cdb-check:[...][0]              : 19 [Type: [...]]\n // cdb-check:[...][1]              : 20 [Type: [...]]\n // cdb-command:dx padding_at_end2,d\n-// cdb-check:padding_at_end2,d [...]: ((21, 22), 23) [Type: tuple<tuple<i32, i16>, i32>]\n-// cdb-check:[...][0]              : (21, 22) [Type: tuple<i32, i16>]\n+// cdb-check:padding_at_end2,d [...]: ((21, 22), 23) [Type: tuple$<tuple$<i32,i16>,i32>]\n+// cdb-check:[...][0]              : (21, 22) [Type: tuple$<i32,i16>]\n // cdb-check:[...][1]              : 23 [Type: [...]]\n // cdb-command:dx padding_at_end2.__0,d\n-// cdb-check:padding_at_end2.__0,d [...]: (21, 22) [Type: tuple<i32, i16>]\n+// cdb-check:padding_at_end2.__0,d [...]: (21, 22) [Type: tuple$<i32,i16>]\n // cdb-check:[...][0]              : 21 [Type: [...]]\n // cdb-check:[...][1]              : 22 [Type: [...]]\n "}, {"sha": "8f8b20bfaebbe69f2c9af178e58da8a7efaeafb7", "filename": "src/test/debuginfo/type-names.cdb.js", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Ftype-names.cdb.js", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Ftype-names.cdb.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.cdb.js?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -0,0 +1,17 @@\n+// Helper functions for running the type-names.rs test under CDB\n+\n+// CDB exposes an \"object model\" via JavaScript that allows you to inspect debugging info - in this\n+// case we want to ask the object model for the return and parameter types for a local variable\n+// that is a function pointer to make sure that we are emitting the function pointer type in such a\n+// way that CDB understands how to parse it.\n+\n+\"use strict\";\n+\n+function getFunctionDetails(name)\n+{\n+    var localVariable = host.currentThread.Stack.Frames[0].LocalVariables[name];\n+    var functionPointerType = localVariable.targetType.genericArguments[0];\n+    var functionType = functionPointerType.baseType;\n+    host.diagnostics.debugLog(\"Return Type: \", functionType.functionReturnType, \"\\n\");\n+    host.diagnostics.debugLog(\"Parameter Types: \", functionType.functionParameterTypes, \"\\n\");\n+}"}, {"sha": "d1f322fa76cca23c17e0316540b32851f6161542", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 180, "deletions": 109, "changes": 289, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -1,208 +1,268 @@\n // ignore-lldb\n-// ignore-gdb // Test temporarily ignored due to debuginfo tests being disabled, see PR 47155\n+\n+// GDB changed the way that it formatted Foreign types\n+// min-gdb-version: 9.2\n \n // compile-flags:-g\n \n+// === GDB TESTS ===================================================================================\n+\n // gdb-command:run\n \n // STRUCTS\n // gdb-command:whatis simple_struct\n-// gdbg-check:type = struct Struct1\n-// gdbr-check:type = type_names::Struct1\n+// gdb-check:type = type_names::Struct1\n \n // gdb-command:whatis generic_struct1\n-// gdbg-check:type = struct GenericStruct<type_names::mod1::Struct2, type_names::mod1::mod2::Struct3>\n-// gdbr-check:type = type_names::GenericStruct<type_names::mod1::Struct2, type_names::mod1::mod2::Struct3>\n+// gdb-check:type = type_names::GenericStruct<type_names::mod1::Struct2, type_names::mod1::mod2::Struct3>\n \n // gdb-command:whatis generic_struct2\n-// gdbg-check:type = struct GenericStruct<type_names::Struct1, extern \"fastcall\" fn(isize) -> usize>\n-// gdbr-check:type = type_names::GenericStruct<type_names::Struct1, extern \"fastcall\" fn(isize) -> usize>\n+// gdb-check:type = type_names::GenericStruct<type_names::Struct1, extern \"fastcall\" fn(isize) -> usize>\n \n // gdb-command:whatis mod_struct\n-// gdbg-check:type = struct Struct2\n-// gdbr-check:type = type_names::mod1::Struct2\n+// gdb-check:type = type_names::mod1::Struct2\n \n // ENUMS\n // gdb-command:whatis simple_enum_1\n-// gdbg-check:type = union Enum1\n-// gdbr-check:type = type_names::Enum1\n+// gdb-check:type = type_names::Enum1\n \n // gdb-command:whatis simple_enum_2\n-// gdbg-check:type = union Enum1\n-// gdbr-check:type = type_names::Enum1\n+// gdb-check:type = type_names::Enum1\n \n // gdb-command:whatis simple_enum_3\n-// gdbg-check:type = union Enum2\n-// gdbr-check:type = type_names::mod1::Enum2\n+// gdb-check:type = type_names::mod1::Enum2\n \n // gdb-command:whatis generic_enum_1\n-// gdbg-check:type = union Enum3<type_names::mod1::Struct2>\n-// gdbr-check:type = type_names::mod1::mod2::Enum3<type_names::mod1::Struct2>\n+// gdb-check:type = type_names::mod1::mod2::Enum3\n \n // gdb-command:whatis generic_enum_2\n-// gdbg-check:type = union Enum3<type_names::Struct1>\n-// gdbr-check:type = type_names::mod1::mod2::Enum3<type_names::Struct1>\n+// gdb-check:type = type_names::mod1::mod2::Enum3\n \n // TUPLES\n // gdb-command:whatis tuple1\n-// gdbg-check:type = struct (u32, type_names::Struct1, type_names::mod1::mod2::Enum3<type_names::mod1::Struct2>)\n-// gdbr-check:type = (u32, type_names::Struct1, type_names::mod1::mod2::Enum3<type_names::mod1::Struct2>)\n+// gdb-check:type = (u32, type_names::Struct1, type_names::mod1::mod2::Enum3<type_names::mod1::Struct2>)\n \n // gdb-command:whatis tuple2\n-// gdbg-check:type = struct ((type_names::Struct1, type_names::mod1::mod2::Struct3), type_names::mod1::Enum2, char)\n-// gdbr-check:type = ((type_names::Struct1, type_names::mod1::mod2::Struct3), type_names::mod1::Enum2, char)\n+// gdb-check:type = ((type_names::Struct1, type_names::mod1::mod2::Struct3), type_names::mod1::Enum2, char)\n \n // BOX\n // gdb-command:whatis box1\n-// gdbg-check:type = struct (alloc::boxed::Box<f32>, i32)\n-// gdbr-check:type = (alloc::boxed::Box<f32>, i32)\n+// gdb-check:type = (alloc::boxed::Box<f32, alloc::alloc::Global>, i32)\n \n // gdb-command:whatis box2\n-// gdbg-check:type = struct (alloc::boxed::Box<type_names::mod1::mod2::Enum3<f32>>, i32)\n-// gdbr-check:type = (alloc::boxed::Box<type_names::mod1::mod2::Enum3<f32>>, i32)\n+// gdb-check:type = (alloc::boxed::Box<type_names::mod1::mod2::Enum3<f32>, alloc::alloc::Global>, i32)\n \n // REFERENCES\n // gdb-command:whatis ref1\n-// gdbg-check:type = struct (&type_names::Struct1, i32)\n-// gdbr-check:type = (&type_names::Struct1, i32)\n+// gdb-check:type = (&type_names::Struct1, i32)\n \n // gdb-command:whatis ref2\n-// gdbg-check:type = struct (&type_names::GenericStruct<char, type_names::Struct1>, i32)\n-// gdbr-check:type = (&type_names::GenericStruct<char, type_names::Struct1>, i32)\n+// gdb-check:type = (&type_names::GenericStruct<char, type_names::Struct1>, i32)\n \n // gdb-command:whatis mut_ref1\n-// gdbg-check:type = struct (&mut type_names::Struct1, i32)\n-// gdbr-check:type = (&mut type_names::Struct1, i32)\n+// gdb-check:type = (&mut type_names::Struct1, i32)\n \n // gdb-command:whatis mut_ref2\n-// gdbg-check:type = struct (&mut type_names::GenericStruct<type_names::mod1::Enum2, f64>, i32)\n-// gdbr-check:type = (&mut type_names::GenericStruct<type_names::mod1::Enum2, f64>, i32)\n+// gdb-check:type = (&mut type_names::GenericStruct<type_names::mod1::Enum2, f64>, i32)\n \n // RAW POINTERS\n // gdb-command:whatis mut_ptr1\n-// gdbg-check:type = struct (*mut type_names::Struct1, isize)\n-// gdbr-check:type = (*mut type_names::Struct1, isize)\n+// gdb-check:type = (*mut type_names::Struct1, isize)\n \n // gdb-command:whatis mut_ptr2\n-// gdbg-check:type = struct (*mut isize, isize)\n-// gdbr-check:type = (*mut isize, isize)\n+// gdb-check:type = (*mut isize, isize)\n \n // gdb-command:whatis mut_ptr3\n-// gdbg-check:type = struct (*mut type_names::mod1::mod2::Enum3<type_names::Struct1>, isize)\n-// gdbr-check:type = (*mut type_names::mod1::mod2::Enum3<type_names::Struct1>, isize)\n+// gdb-check:type = (*mut type_names::mod1::mod2::Enum3<type_names::Struct1>, isize)\n \n // gdb-command:whatis const_ptr1\n-// gdbg-check:type = struct (*const type_names::Struct1, isize)\n-// gdbr-check:type = (*const type_names::Struct1, isize)\n+// gdb-check:type = (*const type_names::Struct1, isize)\n \n // gdb-command:whatis const_ptr2\n-// gdbg-check:type = struct (*const isize, isize)\n-// gdbr-check:type = (*const isize, isize)\n+// gdb-check:type = (*const isize, isize)\n \n // gdb-command:whatis const_ptr3\n-// gdbg-check:type = struct (*const type_names::mod1::mod2::Enum3<type_names::Struct1>, isize)\n-// gdbr-check:type = (*const type_names::mod1::mod2::Enum3<type_names::Struct1>, isize)\n+// gdb-check:type = (*const type_names::mod1::mod2::Enum3<type_names::Struct1>, isize)\n \n // VECTORS\n // gdb-command:whatis fixed_size_vec1\n-// gdbg-check:type = struct ([type_names::Struct1; 3], i16)\n-// gdbr-check:type = ([type_names::Struct1; 3], i16)\n+// gdb-check:type = ([type_names::Struct1; 3], i16)\n \n // gdb-command:whatis fixed_size_vec2\n-// gdbg-check:type = struct ([usize; 3], i16)\n-// gdbr-check:type = ([usize; 3], i16)\n+// gdb-check:type = ([usize; 3], i16)\n \n // gdb-command:whatis slice1\n-// gdbg-check:type = struct &[usize]\n-// gdbr-check:type = &[usize]\n+// gdb-check:type = &[usize]\n \n // gdb-command:whatis slice2\n-// gdbg-check:type = struct &[type_names::mod1::Enum2]\n-// gdbr-check:type = &[type_names::mod1::Enum2]\n+// gdb-check:type = &[type_names::mod1::Enum2]\n \n // TRAITS\n // gdb-command:whatis box_trait\n-// gdbg-check:type = struct Box<Trait1>\n-// gdbr-check:type = type_names::Box<Trait1>\n+// gdb-check:type = alloc::boxed::Box<dyn type_names::Trait1, alloc::alloc::Global>\n \n // gdb-command:whatis ref_trait\n-// gdbg-check:type = struct &Trait1\n-// gdbr-check:type = type_names::&Trait1\n+// gdb-check:type = &dyn type_names::Trait1\n \n // gdb-command:whatis mut_ref_trait\n-// gdbg-check:type = struct &mut Trait1\n-// gdbr-check:type = type_names::&mut Trait1\n+// gdb-check:type = &mut dyn type_names::Trait1\n \n // gdb-command:whatis generic_box_trait\n-// gdbg-check:type = struct Box<Trait2<i32, type_names::mod1::Struct2>>\n-// gdbr-check:type = type_names::Box<Trait2<i32, type_names::mod1::Struct2>>\n+// gdb-check:type = alloc::boxed::Box<dyn type_names::Trait2<i32, type_names::mod1::Struct2>, alloc::alloc::Global>\n \n // gdb-command:whatis generic_ref_trait\n-// gdbg-check:type = struct &Trait2<type_names::Struct1, type_names::Struct1>\n-// gdbr-check:type = type_names::&Trait2<type_names::Struct1, type_names::Struct1>\n+// gdb-check:type = &dyn type_names::Trait2<type_names::Struct1, type_names::Struct1>\n \n // gdb-command:whatis generic_mut_ref_trait\n-// gdbg-check:type = struct &mut Trait2<type_names::mod1::mod2::Struct3, type_names::GenericStruct<usize, isize>>\n-// gdbr-check:type = type_names::&mut Trait2<type_names::mod1::mod2::Struct3, type_names::GenericStruct<usize, isize>>\n+// gdb-check:type = &mut dyn type_names::Trait2<type_names::mod1::mod2::Struct3, type_names::GenericStruct<usize, isize>>\n+\n+// gdb-command:whatis no_principal_trait\n+// gdb-check:type = alloc::boxed::Box<dyn core::marker::Send + core::marker::Sync, alloc::alloc::Global>\n \n // BARE FUNCTIONS\n // gdb-command:whatis rust_fn\n-// gdbg-check:type = struct (fn(core::option::Option<isize>, core::option::Option<&type_names::mod1::Struct2>), usize)\n-// gdbr-check:type = (fn(core::option::Option<isize>, core::option::Option<&type_names::mod1::Struct2>), usize)\n+// gdb-check:type = (fn(core::option::Option<isize>, core::option::Option<&type_names::mod1::Struct2>), usize)\n \n // gdb-command:whatis extern_c_fn\n-// gdbg-check:type = struct (extern \"C\" fn(isize), usize)\n-// gdbr-check:type = (extern \"C\" fn(isize), usize)\n+// gdb-check:type = (extern \"C\" fn(isize), usize)\n \n // gdb-command:whatis unsafe_fn\n-// gdbg-check:type = struct (unsafe fn(core::result::Result<char, f64>), usize)\n-// gdbr-check:type = (unsafe fn(core::result::Result<char, f64>), usize)\n-\n-// gdb-command:whatis extern_stdcall_fn\n-// gdbg-check:type = struct (extern \"stdcall\" fn(), usize)\n-// gdbr-check:type = (extern \"stdcall\" fn(), usize)\n+// gdb-check:type = (unsafe fn(core::result::Result<char, f64>), usize)\n \n // gdb-command:whatis rust_fn_with_return_value\n-// gdbg-check:type = struct (fn(f64) -> usize, usize)\n-// gdbr-check:type = (fn(f64) -> usize, usize)\n+// gdb-check:type = (fn(f64) -> usize, usize)\n \n // gdb-command:whatis extern_c_fn_with_return_value\n-// gdbg-check:type = struct (extern \"C\" fn() -> type_names::Struct1, usize)\n-// gdbr-check:type = (extern \"C\" fn() -> type_names::Struct1, usize)\n+// gdb-check:type = (extern \"C\" fn() -> type_names::Struct1, usize)\n \n // gdb-command:whatis unsafe_fn_with_return_value\n-// gdbg-check:type = struct (unsafe fn(type_names::GenericStruct<u16, u8>) -> type_names::mod1::Struct2, usize)\n-// gdbr-check:type = (unsafe fn(type_names::GenericStruct<u16, u8>) -> type_names::mod1::Struct2, usize)\n-\n-// gdb-command:whatis extern_stdcall_fn_with_return_value\n-// gdbg-check:type = struct (extern \"stdcall\" fn(alloc::boxed::Box<isize>) -> usize, usize)\n-// gdbr-check:type = (extern \"stdcall\" fn(alloc::boxed::Box<isize>) -> usize, usize)\n+// gdb-check:type = (unsafe fn(type_names::GenericStruct<u16, u8>) -> type_names::mod1::Struct2, usize)\n \n // gdb-command:whatis generic_function_int\n-// gdbg-check:type = struct (fn(isize) -> isize, usize)\n-// gdbr-check:type = (fn(isize) -> isize, usize)\n+// gdb-check:type = (fn(isize) -> isize, usize)\n \n // gdb-command:whatis generic_function_struct3\n-// gdbg-check:type = struct (fn(type_names::mod1::mod2::Struct3) -> type_names::mod1::mod2::Struct3, usize)\n-// gdbr-check:type = (fn(type_names::mod1::mod2::Struct3) -> type_names::mod1::mod2::Struct3, usize)\n+// gdb-check:type = (fn(type_names::mod1::mod2::Struct3) -> type_names::mod1::mod2::Struct3, usize)\n \n // gdb-command:whatis variadic_function\n-// gdbg-check:type = struct (unsafe extern \"C\" fn(*const u8, ...) -> isize, usize)\n-// gdbr-check:type = (unsafe extern \"C\" fn(*const u8, ...) -> isize, usize)\n+// gdb-check:type = (unsafe extern \"C\" fn(*const u8, ...) -> isize, usize)\n \n // CLOSURES\n // gdb-command:whatis closure1\n-// gdbg-check:type = struct (closure, usize)\n-// gdbr-check:type = (closure, usize)\n+// gdb-check:type = (type_names::main::{closure#0}, usize)\n \n // gdb-command:whatis closure2\n-// gdbg-check:type = struct (closure, usize)\n-// gdbr-check:type = (closure, usize)\n+// gdb-check:type = (type_names::main::{closure#1}, usize)\n+\n+// FOREIGN TYPES\n+// gdb-command:whatis foreign1\n+// gdb-check:type = *mut ForeignType1\n+\n+// gdb-command:whatis foreign2\n+// gdb-check:type = *mut ForeignType2\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// STRUCTS\n+// 0-sized structs appear to be optimized away in some cases, so only check the structs that do\n+// actually appear.\n+// cdb-command:dv /t *_struct\n+// cdb-check:struct type_names::GenericStruct<enum$<type_names::mod1::Enum2>, f64> mut_generic_struct = [...]\n+\n+// ENUMS\n+// cdb-command:dv /t *_enum_*\n+// cdb-check:union enum$<type_names::Enum1> simple_enum_1 = [...]\n+// cdb-check:union enum$<type_names::Enum1> simple_enum_2 = [...]\n+// cdb-check:type_names::mod1::Enum2 simple_enum_3 = [...]\n+// cdb-check:type_names::mod1::mod2::Enum3 generic_enum_1 = [...]\n+// cdb-check:type_names::mod1::mod2::Enum3 generic_enum_2 = [...]\n+\n+// TUPLES\n+// cdb-command:dv /t tuple*\n+// cdb-check:struct tuple$<u32,type_names::Struct1,enum$<type_names::mod1::mod2::Enum3<type_names::mod1::Struct2> > > tuple1 = [...]\n+// cdb-check:struct tuple$<tuple$<type_names::Struct1,type_names::mod1::mod2::Struct3>,enum$<type_names::mod1::Enum2>,char> tuple2 = [...]\n+\n+// BOX\n+// cdb-command:dv /t box*\n+// cdb-check:struct tuple$<alloc::boxed::Box<f32, alloc::alloc::Global>,i32> box1 = [...]\n+// cdb-check:struct tuple$<alloc::boxed::Box<enum$<type_names::mod1::mod2::Enum3<f32> >, alloc::alloc::Global>,i32> box2 = [...]\n+\n+// REFERENCES\n+// cdb-command:dv /t *ref*\n+// cdb-check:struct tuple$<ref$<type_names::Struct1>,i32> ref1 = [...]\n+// cdb-check:struct tuple$<ref$<type_names::GenericStruct<char, type_names::Struct1> >,i32> ref2 = [...]\n+// cdb-check:struct tuple$<ref_mut$<type_names::Struct1>,i32> mut_ref1 = [...]\n+// cdb-check:struct tuple$<ref_mut$<type_names::GenericStruct<enum$<type_names::mod1::Enum2>, f64> >,i32> mut_ref2 = [...]\n+\n+// RAW POINTERS\n+// cdb-command:dv /t *_ptr*\n+// cdb-check:struct tuple$<ptr_mut$<type_names::Struct1>,isize> mut_ptr1 = [...]\n+// cdb-check:struct tuple$<ptr_mut$<isize>,isize> mut_ptr2 = [...]\n+// cdb-check:struct tuple$<ptr_mut$<enum$<type_names::mod1::mod2::Enum3<type_names::Struct1> > >,isize> mut_ptr3 = [...]\n+// cdb-check:struct tuple$<ptr_const$<type_names::Struct1>,isize> const_ptr1 = [...]\n+// cdb-check:struct tuple$<ptr_const$<isize>,isize> const_ptr2 = [...]\n+// cdb-check:struct tuple$<ptr_const$<enum$<type_names::mod1::mod2::Enum3<type_names::Struct1> > >,isize> const_ptr3 = [...]\n+\n+// VECTORS\n+// cdb-command:dv /t *vec*\n+// cdb-check:struct tuple$<array$<type_names::Struct1,3>,i16> fixed_size_vec1 = [...]\n+// cdb-check:struct tuple$<array$<usize,3>,i16> fixed_size_vec2 = [...]\n+// cdb-check:struct alloc::vec::Vec<usize, alloc::alloc::Global> vec1 = [...]\n+// cdb-check:struct alloc::vec::Vec<enum$<type_names::mod1::Enum2>, alloc::alloc::Global> vec2 = [...]\n+// cdb-command:dv /t slice*\n+// cdb-check:struct slice$<usize> slice1 = [...]\n+// cdb-check:struct slice$<enum$<type_names::mod1::Enum2> > slice2 = [...]\n+\n+// TRAITS\n+// cdb-command:dv /t *_trait\n+// cdb-check:struct ref_mut$<dyn$<type_names::Trait2<type_names::mod1::mod2::Struct3, type_names::GenericStruct<usize, isize> > > > generic_mut_ref_trait = [...]\n+// cdb-check:struct ref$<dyn$<type_names::Trait2<type_names::Struct1, type_names::Struct1> > > generic_ref_trait = [...]\n+// cdb-check:struct alloc::boxed::Box<dyn$<type_names::Trait2<i32, type_names::mod1::Struct2> >, alloc::alloc::Global> generic_box_trait = [...]\n+// cdb-check:struct alloc::boxed::Box<dyn$<type_names::Trait1>, alloc::alloc::Global> box_trait = [...]\n+// cdb-check:struct ref$<dyn$<type_names::Trait1> > ref_trait = [...]\n+// cdb-check:struct ref_mut$<dyn$<type_names::Trait1> > mut_ref_trait = [...]\n+// cdb-check:struct alloc::boxed::Box<dyn$<core::marker::Send, core::marker::Sync>, alloc::alloc::Global> no_principal_trait = [...]\n+// cdb-check:struct ref$<dyn$<type_names::Trait3> > has_associated_type_trait = struct ref$<dyn$<type_names::Trait3> >\n+\n+// BARE FUNCTIONS\n+// cdb-command:dv /t *_fn*\n+// cdb-check:struct tuple$<type_names::mod1::Struct2 (*)(type_names::GenericStruct<u16, u8>),usize> unsafe_fn_with_return_value = [...]\n+// cdb-check:struct tuple$<type_names::Struct1 (*)(),usize> extern_c_fn_with_return_value = [...]\n+// cdb-check:struct tuple$<usize (*)(f64),usize> rust_fn_with_return_value = [...]\n+// cdb-check:struct tuple$<void (*)(enum$<core::result::Result<char, f64> >),usize> unsafe_fn = [...]\n+// cdb-check:struct tuple$<void (*)(isize),usize> extern_c_fn = [...]\n+// cdb-check:struct tuple$<void (*)(enum$<core::option::Option<isize> >, enum$<core::option::Option<ref$<type_names::mod1::Struct2> >, 1, [...], Some>),usize> rust_fn = [...]\n+// cdb-command:dv /t *_function*\n+// cdb-check:struct tuple$<isize (*)(ptr_const$<u8>, ...),usize> variadic_function = [...]\n+// cdb-check:struct tuple$<type_names::mod1::mod2::Struct3 (*)(type_names::mod1::mod2::Struct3),usize> generic_function_struct3 = [...]\n+// cdb-check:struct tuple$<isize (*)(isize),usize> generic_function_int = [...]\n+// cdb-command:dx Debugger.State.Scripts.@\"type-names.cdb\".Contents.getFunctionDetails(\"rust_fn\")\n+// cdb-check:Return Type: void\n+// cdb-check:Parameter Types: enum$<core::option::Option<isize> >,enum$<core::option::Option<ref$<type_names::mod1::Struct2> >, 1, [...], Some>\n+// cdb-command:dx Debugger.State.Scripts.@\"type-names.cdb\".Contents.getFunctionDetails(\"rust_fn_with_return_value\")\n+// cdb-check:Return Type: usize\n+// cdb-check:Parameter Types: f64\n+// cdb-command:dx Debugger.State.Scripts.@\"type-names.cdb\".Contents.getFunctionDetails(\"extern_c_fn_with_return_value\")\n+// cdb-check:Return Type: type_names::Struct1\n+// cdb-check:Parameter Types:\n+\n+// CLOSURES\n+// cdb-command:dv /t closure*\n+// cdb-check:struct tuple$<type_names::main::closure$1,usize> closure2 = [...]\n+// cdb-check:struct tuple$<type_names::main::closure$0,usize> closure1 = [...]\n+\n+// FOREIGN TYPES\n+// cdb-command:dv /t foreign*\n+// cdb-check:struct ForeignType2 * foreign2 = [...]\n+// cdb-check:struct ForeignType1 * foreign1 = [...]\n \n #![feature(box_syntax)]\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n+#![feature(extern_types)]\n \n use self::Enum1::{Variant1, Variant2};\n use std::marker::PhantomData;\n@@ -216,6 +276,8 @@ enum Enum1 {\n     Variant2(isize),\n }\n \n+extern { type ForeignType1; }\n+\n mod mod1 {\n     pub use self::Enum2::{Variant1, Variant2};\n     pub struct Struct2;\n@@ -234,6 +296,8 @@ mod mod1 {\n             Variant2(T),\n         }\n     }\n+\n+    extern { pub type ForeignType2; }\n }\n \n trait Trait1 {\n@@ -242,14 +306,20 @@ trait Trait1 {\n trait Trait2<T1, T2> {\n     fn dummy(&self, _: T1, _: T2) {}\n }\n+trait Trait3 {\n+    type AssocType;\n+    fn dummy(&self) {}\n+}\n \n impl Trait1 for isize {}\n impl<T1, T2> Trait2<T1, T2> for isize {}\n+impl Trait3 for isize {\n+    type AssocType = isize;\n+}\n \n fn rust_fn(_: Option<isize>, _: Option<&mod1::Struct2>) {}\n extern \"C\" fn extern_c_fn(_: isize) {}\n unsafe fn unsafe_fn(_: Result<char, f64>) {}\n-extern \"stdcall\" fn extern_stdcall_fn() {}\n \n fn rust_fn_with_return_value(_: f64) -> usize {\n     4\n@@ -260,9 +330,6 @@ extern \"C\" fn extern_c_fn_with_return_value() -> Struct1 {\n unsafe fn unsafe_fn_with_return_value(_: GenericStruct<u16, u8>) -> mod1::Struct2 {\n     mod1::Struct2\n }\n-extern \"stdcall\" fn extern_stdcall_fn_with_return_value(_: Box<isize>) -> usize {\n-    0\n-}\n \n fn generic_function<T>(x: T) -> T {\n     x\n@@ -333,28 +400,28 @@ fn main() {\n     let slice2 = &*vec2;\n \n     // Trait Objects\n-    let box_trait = (box 0_isize) as Box<Trait1>;\n-    let ref_trait = &0_isize as &Trait1;\n+    let box_trait = (box 0_isize) as Box<dyn Trait1>;\n+    let ref_trait = &0_isize as &dyn Trait1;\n     let mut mut_int1 = 0_isize;\n-    let mut_ref_trait = (&mut mut_int1) as &mut Trait1;\n+    let mut_ref_trait = (&mut mut_int1) as &mut dyn Trait1;\n+    let no_principal_trait = (box 0_isize) as Box<dyn Send + Sync>;\n+    let has_associated_type_trait = &0_isize as &dyn Trait3<AssocType = isize>;\n \n-    let generic_box_trait = (box 0_isize) as Box<Trait2<i32, mod1::Struct2>>;\n-    let generic_ref_trait = (&0_isize) as &Trait2<Struct1, Struct1>;\n+    let generic_box_trait = (box 0_isize) as Box<dyn Trait2<i32, mod1::Struct2>>;\n+    let generic_ref_trait = (&0_isize) as &dyn Trait2<Struct1, Struct1>;\n \n     let mut generic_mut_ref_trait_impl = 0_isize;\n     let generic_mut_ref_trait = (&mut generic_mut_ref_trait_impl)\n-        as &mut Trait2<mod1::mod2::Struct3, GenericStruct<usize, isize>>;\n+        as &mut dyn Trait2<mod1::mod2::Struct3, GenericStruct<usize, isize>>;\n \n     // Bare Functions\n     let rust_fn = (rust_fn, 0_usize);\n     let extern_c_fn = (extern_c_fn, 0_usize);\n     let unsafe_fn = (unsafe_fn, 0_usize);\n-    let extern_stdcall_fn = (extern_stdcall_fn, 0_usize);\n \n     let rust_fn_with_return_value = (rust_fn_with_return_value, 0_usize);\n     let extern_c_fn_with_return_value = (extern_c_fn_with_return_value, 0_usize);\n     let unsafe_fn_with_return_value = (unsafe_fn_with_return_value, 0_usize);\n-    let extern_stdcall_fn_with_return_value = (extern_stdcall_fn_with_return_value, 0_usize);\n \n     let generic_function_int = (generic_function::<isize>, 0_usize);\n     let generic_function_struct3 = (generic_function::<mod1::mod2::Struct3>, 0_usize);\n@@ -370,6 +437,10 @@ fn main() {\n     let closure1 = (|x: isize| {}, 0_usize);\n     let closure2 = (|x: i8, y: f32| (x as f32) + y, 0_usize);\n \n+    // Foreign Types\n+    let foreign1 = unsafe{ 0 as *const ForeignType1 };\n+    let foreign2 = unsafe{ 0 as *const mod1::ForeignType2 };\n+\n     zzz(); // #break\n }\n "}, {"sha": "a2778fc6090d2bf77716bc59817bd59ed43f2848", "filename": "src/test/debuginfo/var-captured-in-nested-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-nested-closure.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -108,7 +108,7 @@\n // cdb-command: dx closure_local\n // cdb-check:closure_local    : 8 [Type: [...]]\n // cdb-command: dx nested_closure\n-// cdb-check:nested_closure   [Type: var_captured_in_nested_closure::main::{{closure}}::closure-0]\n+// cdb-check:nested_closure   [Type: var_captured_in_nested_closure::main::closure$0::closure$0]\n \n // cdb-command: g\n "}, {"sha": "49731b2d7dc04f858b8393b96d70c076a4fd57b9", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -778,6 +778,14 @@ impl<'test> TestCx<'test> {\n         script_str.push_str(\"version\\n\"); // List CDB (and more) version info in test output\n         script_str.push_str(\".nvlist\\n\"); // List loaded `*.natvis` files, bulk of custom MSVC debug\n \n+        // If a .js file exists next to the source file being tested, then this is a JavaScript\n+        // debugging extension that needs to be loaded.\n+        let mut js_extension = self.testpaths.file.clone();\n+        js_extension.set_extension(\"cdb.js\");\n+        if js_extension.exists() {\n+            script_str.push_str(&format!(\".scriptload \\\"{}\\\"\\n\", js_extension.to_string_lossy()));\n+        }\n+\n         // Set breakpoints on every line that contains the string \"#break\"\n         let source_file_name = self.testpaths.file.file_name().unwrap().to_string_lossy();\n         for line in &breakpoint_lines {\n@@ -2329,13 +2337,17 @@ impl<'test> TestCx<'test> {\n         // useful flag.\n         //\n         // For now, though\u2026\n-        if let Some(rev) = self.revision {\n-            let prefixes = format!(\"CHECK,{}\", rev);\n-            if self.config.llvm_version.unwrap_or(0) >= 130000 {\n-                filecheck.args(&[\"--allow-unused-prefixes\", \"--check-prefixes\", &prefixes]);\n-            } else {\n-                filecheck.args(&[\"--check-prefixes\", &prefixes]);\n-            }\n+        let prefix_for_target =\n+            if self.config.target.contains(\"msvc\") { \"MSVC\" } else { \"NONMSVC\" };\n+        let prefixes = if let Some(rev) = self.revision {\n+            format!(\"CHECK,{},{}\", prefix_for_target, rev)\n+        } else {\n+            format!(\"CHECK,{}\", prefix_for_target)\n+        };\n+        if self.config.llvm_version.unwrap_or(0) >= 130000 {\n+            filecheck.args(&[\"--allow-unused-prefixes\", \"--check-prefixes\", &prefixes]);\n+        } else {\n+            filecheck.args(&[\"--check-prefixes\", &prefixes]);\n         }\n         self.compose_and_run(filecheck, \"\", None, None)\n     }"}, {"sha": "15ed2f7a0a9756f8816578fb1363e3290f1a861c", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2545459bff0aae43288e2e17bff0d332c49a6353/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=2545459bff0aae43288e2e17bff0d332c49a6353", "patch": "@@ -52,6 +52,7 @@ const ANNOTATIONS_TO_IGNORE: &[&str] = &[\n     \"// error-pattern\",\n     \"// gdb\",\n     \"// lldb\",\n+    \"// cdb\",\n     \"// normalize-stderr-test\",\n ];\n "}]}