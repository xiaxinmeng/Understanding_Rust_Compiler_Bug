{"sha": "ecd420636efe54657ae742ce960ce061740ef108", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZDQyMDYzNmVmZTU0NjU3YWU3NDJjZTk2MGNlMDYxNzQwZWYxMDg=", "commit": {"author": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2019-06-03T14:01:10Z"}, "committer": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2019-06-04T22:05:07Z"}, "message": "Fix clippy::single_match", "tree": {"sha": "612606f7a9f093375a946a69078041f095eb0d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/612606f7a9f093375a946a69078041f095eb0d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecd420636efe54657ae742ce960ce061740ef108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd420636efe54657ae742ce960ce061740ef108", "html_url": "https://github.com/rust-lang/rust/commit/ecd420636efe54657ae742ce960ce061740ef108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecd420636efe54657ae742ce960ce061740ef108/comments", "author": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "354db651dafd24d93cf0f151d63ad5ecb2e716e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/354db651dafd24d93cf0f151d63ad5ecb2e716e2", "html_url": "https://github.com/rust-lang/rust/commit/354db651dafd24d93cf0f151d63ad5ecb2e716e2"}], "stats": {"total": 127, "additions": 51, "deletions": 76}, "files": [{"sha": "8bb524ce30af02755e5e03b5127bc5f058095e0f", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=ecd420636efe54657ae742ce960ce061740ef108", "patch": "@@ -31,18 +31,16 @@ pub fn run(verbose: bool, path: &str, only: Option<&str>) -> Result<()> {\n \n             for decl in module.declarations(&db) {\n                 num_decls += 1;\n-                match decl {\n-                    ModuleDef::Function(f) => funcs.push(f),\n-                    _ => {}\n+                if let ModuleDef::Function(f) = decl {\n+                    funcs.push(f);\n                 }\n             }\n \n             for impl_block in module.impl_blocks(&db) {\n                 for item in impl_block.items(&db) {\n                     num_decls += 1;\n-                    match item {\n-                        ImplItem::Method(f) => funcs.push(f),\n-                        _ => {}\n+                    if let ImplItem::Method(f) = item {\n+                        funcs.push(f);\n                     }\n                 }\n             }"}, {"sha": "6ee6bd627d722a6fb3b3d386a37c2f3c28e97042", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=ecd420636efe54657ae742ce960ce061740ef108", "patch": "@@ -281,9 +281,8 @@ impl Module {\n \n         for impl_block in self.impl_blocks(db) {\n             for item in impl_block.items(db) {\n-                match item {\n-                    crate::ImplItem::Method(f) => f.diagnostics(db, sink),\n-                    _ => (),\n+                if let crate::ImplItem::Method(f) = item {\n+                    f.diagnostics(db, sink);\n                 }\n             }\n         }"}, {"sha": "967654e97e7336696fb2ec20af72aecff875bcfa", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=ecd420636efe54657ae742ce960ce061740ef108", "patch": "@@ -77,13 +77,10 @@ impl TraitItemsIndex {\n     pub(crate) fn trait_items_index(db: &impl DefDatabase, module: Module) -> TraitItemsIndex {\n         let mut index = TraitItemsIndex { traits_by_def: FxHashMap::default() };\n         for decl in module.declarations(db) {\n-            match decl {\n-                crate::ModuleDef::Trait(tr) => {\n-                    for item in tr.trait_data(db).items() {\n-                        index.traits_by_def.insert(*item, tr);\n-                    }\n+            if let crate::ModuleDef::Trait(tr) = decl {\n+                for item in tr.trait_data(db).items() {\n+                    index.traits_by_def.insert(*item, tr);\n                 }\n-                _ => {}\n             }\n         }\n         index"}, {"sha": "1723921e6feb718bd4f6bdb67d23f3208704bae0", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=ecd420636efe54657ae742ce960ce061740ef108", "patch": "@@ -848,28 +848,23 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn register_obligations_for_call(&mut self, callable_ty: &Ty) {\n-        match callable_ty {\n-            Ty::Apply(a_ty) => match a_ty.ctor {\n-                TypeCtor::FnDef(def) => {\n-                    // add obligation for trait implementation, if this is a trait method\n-                    // FIXME also register obligations from where clauses from the trait or impl and method\n-                    match def {\n-                        CallableDef::Function(f) => {\n-                            if let Some(trait_) = f.parent_trait(self.db) {\n-                                // construct a TraitDef\n-                                let substs = a_ty.parameters.prefix(\n-                                    trait_.generic_params(self.db).count_params_including_parent(),\n-                                );\n-                                self.obligations\n-                                    .push(Obligation::Trait(TraitRef { trait_, substs }));\n-                            }\n+        if let Ty::Apply(a_ty) = callable_ty {\n+            if let TypeCtor::FnDef(def) = a_ty.ctor {\n+                // add obligation for trait implementation, if this is a trait method\n+                // FIXME also register obligations from where clauses from the trait or impl and method\n+                match def {\n+                    CallableDef::Function(f) => {\n+                        if let Some(trait_) = f.parent_trait(self.db) {\n+                            // construct a TraitDef\n+                            let substs = a_ty.parameters.prefix(\n+                                trait_.generic_params(self.db).count_params_including_parent(),\n+                            );\n+                            self.obligations.push(Obligation::Trait(TraitRef { trait_, substs }));\n                         }\n-                        CallableDef::Struct(_) | CallableDef::EnumVariant(_) => {}\n                     }\n+                    CallableDef::Struct(_) | CallableDef::EnumVariant(_) => {}\n                 }\n-                _ => {}\n-            },\n-            _ => {}\n+            }\n         }\n     }\n "}, {"sha": "646e58aa915db6e0753e21acfa06d6cf651ffd51", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=ecd420636efe54657ae742ce960ce061740ef108", "patch": "@@ -192,23 +192,20 @@ fn iterate_trait_method_candidates<T>(\n         // iteration\n         let mut known_implemented = false;\n         for item in data.items() {\n-            match item {\n-                &TraitItem::Function(m) => {\n-                    let sig = m.signature(db);\n-                    if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n-                        if !known_implemented {\n-                            let trait_ref = canonical_trait_ref(db, t, ty.clone());\n-                            if db.implements(krate, trait_ref).is_none() {\n-                                continue 'traits;\n-                            }\n-                        }\n-                        known_implemented = true;\n-                        if let Some(result) = callback(&ty.value, m) {\n-                            return Some(result);\n+            if let TraitItem::Function(m) = *item {\n+                let sig = m.signature(db);\n+                if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n+                    if !known_implemented {\n+                        let trait_ref = canonical_trait_ref(db, t, ty.clone());\n+                        if db.implements(krate, trait_ref).is_none() {\n+                            continue 'traits;\n                         }\n                     }\n+                    known_implemented = true;\n+                    if let Some(result) = callback(&ty.value, m) {\n+                        return Some(result);\n+                    }\n                 }\n-                _ => {}\n             }\n         }\n     }\n@@ -230,16 +227,13 @@ fn iterate_inherent_methods<T>(\n \n     for impl_block in impls.lookup_impl_blocks(&ty.value) {\n         for item in impl_block.items(db) {\n-            match item {\n-                ImplItem::Method(f) => {\n-                    let sig = f.signature(db);\n-                    if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n-                        if let Some(result) = callback(&ty.value, f) {\n-                            return Some(result);\n-                        }\n+            if let ImplItem::Method(f) = item {\n+                let sig = f.signature(db);\n+                if name.map_or(true, |name| sig.name() == name) && sig.has_self_param() {\n+                    if let Some(result) = callback(&ty.value, f) {\n+                        return Some(result);\n                     }\n                 }\n-                _ => {}\n             }\n         }\n     }"}, {"sha": "1e4806db0e58e1af1c43d48ce5d4087ea02ae6df", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=ecd420636efe54657ae742ce960ce061740ef108", "patch": "@@ -211,13 +211,10 @@ fn convert_where_clauses(\n             // anyway), otherwise Chalk can easily get into slow situations\n             return vec![pred.clone().subst(substs).to_chalk(db)];\n         }\n-        match pred {\n-            GenericPredicate::Implemented(trait_ref) => {\n-                if blacklisted_trait(db, trait_ref.trait_) {\n-                    continue;\n-                }\n+        if let GenericPredicate::Implemented(trait_ref) = pred {\n+            if blacklisted_trait(db, trait_ref.trait_) {\n+                continue;\n             }\n-            _ => {}\n         }\n         result.push(pred.clone().subst(substs).to_chalk(db));\n     }"}, {"sha": "0822a0e7ec18bbd5256d807af1f0af1d9e8ef0c7", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=ecd420636efe54657ae742ce960ce061740ef108", "patch": "@@ -16,8 +16,8 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n \n fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty) {\n     for receiver in receiver.autoderef(ctx.db) {\n-        match receiver {\n-            Ty::Apply(a_ty) => match a_ty.ctor {\n+        if let Ty::Apply(a_ty) = receiver {\n+            match a_ty.ctor {\n                 TypeCtor::Adt(AdtDef::Struct(s)) => {\n                     for field in s.fields(ctx.db) {\n                         acc.add_field(ctx, field, &a_ty.parameters);\n@@ -30,8 +30,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n                     }\n                 }\n                 _ => {}\n-            },\n-            _ => {}\n+            }\n         };\n     }\n }"}, {"sha": "955d283dd6fd1f3b4ac8828fe96b357fb791ee3c", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=ecd420636efe54657ae742ce960ce061740ef108", "patch": "@@ -141,15 +141,14 @@ impl Server {\n         R::Params: Serialize,\n     {\n         let actual = self.send_request::<R>(params);\n-        match find_mismatch(&expected_resp, &actual) {\n-            Some((expected_part, actual_part)) => panic!(\n+        if let Some((expected_part, actual_part)) = find_mismatch(&expected_resp, &actual) {\n+            panic!(\n                 \"JSON mismatch\\nExpected:\\n{}\\nWas:\\n{}\\nExpected part:\\n{}\\nActual part:\\n{}\\n\",\n                 to_string_pretty(&expected_resp).unwrap(),\n                 to_string_pretty(&actual).unwrap(),\n                 to_string_pretty(expected_part).unwrap(),\n                 to_string_pretty(actual_part).unwrap(),\n-            ),\n-            None => {}\n+            );\n         }\n     }\n "}, {"sha": "d8d0d9bf23a9872ecf7bc20534b7d43bc9be0278", "filename": "crates/thread_worker/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fthread_worker%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecd420636efe54657ae742ce960ce061740ef108/crates%2Fthread_worker%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fthread_worker%2Fsrc%2Flib.rs?ref=ecd420636efe54657ae742ce960ce061740ef108", "patch": "@@ -19,13 +19,10 @@ impl Drop for ScopedThread {\n         log::info!(\".. {} terminated with {}\", name, if res.is_ok() { \"ok\" } else { \"err\" });\n \n         // escalate panic, but avoid aborting the process\n-        match res {\n-            Err(e) => {\n-                if !thread::panicking() {\n-                    panic!(e)\n-                }\n+        if let Err(e) = res {\n+            if !thread::panicking() {\n+                panic!(e)\n             }\n-            _ => (),\n         }\n     }\n }"}]}