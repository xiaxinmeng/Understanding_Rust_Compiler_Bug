{"sha": "35040dfccc6674e8eda71b34a8cd1b4cc1b45842", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MDQwZGZjY2M2Njc0ZThlZGE3MWIzNGE4Y2QxYjRjYzFiNDU4NDI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-01T14:46:12Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-01T16:17:26Z"}, "message": "std::iterator: Use ExactSize, inheriting DoubleEndedIterator\n\nAddress discussion with acrichto; inherit DoubleEndedIterator so that\n`.rposition()` can be a default method, and that the nische of the trait\nis clear. Use assertions when using `.size_hint()` in reverse enumerate\nand `.rposition()`", "tree": {"sha": "655cfc90d70f5e86cf8a07ce65760370184de264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/655cfc90d70f5e86cf8a07ce65760370184de264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35040dfccc6674e8eda71b34a8cd1b4cc1b45842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35040dfccc6674e8eda71b34a8cd1b4cc1b45842", "html_url": "https://github.com/rust-lang/rust/commit/35040dfccc6674e8eda71b34a8cd1b4cc1b45842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35040dfccc6674e8eda71b34a8cd1b4cc1b45842/comments", "author": null, "committer": null, "parents": [{"sha": "04845f0aebd6928bb924147fd93de8dac13ff850", "url": "https://api.github.com/repos/rust-lang/rust/commits/04845f0aebd6928bb924147fd93de8dac13ff850", "html_url": "https://github.com/rust-lang/rust/commit/04845f0aebd6928bb924147fd93de8dac13ff850"}], "stats": {"total": 95, "additions": 43, "deletions": 52}, "files": [{"sha": "83e07dc1379816faab578a03d403ea36774d6770", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 39, "deletions": 48, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/35040dfccc6674e8eda71b34a8cd1b4cc1b45842/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35040dfccc6674e8eda71b34a8cd1b4cc1b45842/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=35040dfccc6674e8eda71b34a8cd1b4cc1b45842", "patch": "@@ -604,26 +604,42 @@ impl<'self, A, T: DoubleEndedIterator<&'self mut A>> MutableDoubleEndedIterator\n     }\n }\n \n-/// A double-ended iterator with known size\n-pub trait ExactSizeDoubleEndedIterator<A> {\n+\n+/// An object implementing random access indexing by `uint`\n+///\n+/// A `RandomAccessIterator` should be either infinite or a `DoubleEndedIterator`.\n+pub trait RandomAccessIterator<A>: Iterator<A> {\n+    /// Return the number of indexable elements. At most `std::uint::max_value`\n+    /// elements are indexable, even if the iterator represents a longer range.\n+    fn indexable(&self) -> uint;\n+\n+    /// Return an element at an index\n+    fn idx(&self, index: uint) -> Option<A>;\n+}\n+\n+/// An iterator that knows its exact length\n+///\n+/// This trait is a helper for iterators like the vector iterator, so that\n+/// it can support double-ended enumeration.\n+///\n+/// `Iterator::size_hint` *must* return the exact size of the iterator.\n+/// Note that the size must fit in `uint`.\n+pub trait ExactSize<A> : DoubleEndedIterator<A> {\n     /// Return the index of the last element satisfying the specified predicate\n     ///\n     /// If no element matches, None is returned.\n     #[inline]\n-    fn rposition(&mut self, predicate: &fn(A) -> bool) -> Option<uint>;\n-}\n-\n-impl<A, T: DoubleEndedIterator<A> + ExactSizeHint> ExactSizeDoubleEndedIterator<A> for T {\n     fn rposition(&mut self, predicate: &fn(A) -> bool) -> Option<uint> {\n-        let (size, _) = self.size_hint();\n-        let mut i = size;\n+        let (lower, upper) = self.size_hint();\n+        assert!(upper == Some(lower));\n+        let mut i = lower;\n         loop {\n             match self.next_back() {\n                 None => break,\n                 Some(x) => {\n                     i = match i.checked_sub(&1) {\n                         Some(x) => x,\n-                        None => fail!(\"rposition: incorrect ExactSizeHint\")\n+                        None => fail!(\"rposition: incorrect ExactSize\")\n                     };\n                     if predicate(x) {\n                         return Some(i)\n@@ -635,37 +651,13 @@ impl<A, T: DoubleEndedIterator<A> + ExactSizeHint> ExactSizeDoubleEndedIterator<\n     }\n }\n \n-/// An object implementing random access indexing by `uint`\n-///\n-/// A `RandomAccessIterator` should be either infinite or a `DoubleEndedIterator`.\n-pub trait RandomAccessIterator<A>: Iterator<A> {\n-    /// Return the number of indexable elements. At most `std::uint::max_value`\n-    /// elements are indexable, even if the iterator represents a longer range.\n-    fn indexable(&self) -> uint;\n-\n-    /// Return an element at an index\n-    fn idx(&self, index: uint) -> Option<A>;\n-}\n-\n-/// An iterator that knows its exact length\n-///\n-/// This trait is a helper for iterators like the vector iterator, so that\n-/// it can support double-ended enumeration.\n-///\n-/// `Iterator::size_hint` *must* return the exact size of the iterator.\n-/// Note that the size must fit in `uint`.\n-pub trait ExactSizeHint {}\n-\n // All adaptors that preserve the size of the wrapped iterator are fine\n // Adaptors that may overflow in `size_hint` are not, i.e. `Chain`.\n-impl<T: ExactSizeHint> ExactSizeHint for Enumerate<T> {}\n-impl<'self, A, T: ExactSizeHint> ExactSizeHint for Inspect<'self, A, T> {}\n-impl<T: ExactSizeHint> ExactSizeHint for Invert<T> {}\n-impl<'self, A, B, T: ExactSizeHint> ExactSizeHint for Map<'self, A, B, T> {}\n-impl<A, T: ExactSizeHint> ExactSizeHint for Peekable<A, T> {}\n-impl<T: ExactSizeHint> ExactSizeHint for Skip<T> {}\n-impl<T: ExactSizeHint> ExactSizeHint for Take<T> {}\n-impl<T: ExactSizeHint, U: ExactSizeHint> ExactSizeHint for Zip<T, U> {}\n+impl<A, T: ExactSize<A>> ExactSize<(uint, A)> for Enumerate<T> {}\n+impl<'self, A, T: ExactSize<A>> ExactSize<A> for Inspect<'self, A, T> {}\n+impl<A, T: ExactSize<A>> ExactSize<A> for Invert<T> {}\n+impl<'self, A, B, T: ExactSize<A>> ExactSize<B> for Map<'self, A, B, T> {}\n+impl<A, B, T: ExactSize<A>, U: ExactSize<B>> ExactSize<(A, B)> for Zip<T, U> {}\n \n /// An double-ended iterator with the direction inverted\n #[deriving(Clone)]\n@@ -967,14 +959,14 @@ impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for Zip<T, U> {\n     }\n }\n \n-impl<A, B,\n-     T: DoubleEndedIterator<A> + ExactSizeHint,\n-     U: DoubleEndedIterator<B> + ExactSizeHint> DoubleEndedIterator<(A, B)>\n+impl<A, B, T: ExactSize<A>, U: ExactSize<B>> DoubleEndedIterator<(A, B)>\n for Zip<T, U> {\n     #[inline]\n     fn next_back(&mut self) -> Option<(A, B)> {\n-        let (a_sz, _) = self.a.size_hint();\n-        let (b_sz, _) = self.b.size_hint();\n+        let (a_sz, a_upper) = self.a.size_hint();\n+        let (b_sz, b_upper) = self.b.size_hint();\n+        assert!(a_upper == Some(a_sz));\n+        assert!(b_upper == Some(b_sz));\n         if a_sz < b_sz {\n             for _ in range(0, b_sz - a_sz) { self.b.next_back(); }\n         } else if a_sz > b_sz {\n@@ -1168,15 +1160,14 @@ impl<A, T: Iterator<A>> Iterator<(uint, A)> for Enumerate<T> {\n     }\n }\n \n-impl<A, T: DoubleEndedIterator<A> + ExactSizeHint> DoubleEndedIterator<(uint, A)>\n-for Enumerate<T> {\n+impl<A, T: ExactSize<A>> DoubleEndedIterator<(uint, A)> for Enumerate<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<(uint, A)> {\n         match self.iter.next_back() {\n             Some(a) => {\n-                let (len, _) = self.iter.size_hint();\n-                let ret = Some((self.count + len, a));\n-                ret\n+                let (lower, upper) = self.iter.size_hint();\n+                assert!(upper == Some(lower));\n+                Some((self.count + lower, a))\n             }\n             _ => None\n         }"}, {"sha": "8f202ee85312ffaf80d45515963bdf4f3ea84f85", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35040dfccc6674e8eda71b34a8cd1b4cc1b45842/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35040dfccc6674e8eda71b34a8cd1b4cc1b45842/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=35040dfccc6674e8eda71b34a8cd1b4cc1b45842", "patch": "@@ -52,7 +52,7 @@ pub use hash::Hash;\n pub use num::Times;\n pub use iterator::{FromIterator, Extendable};\n pub use iterator::{Iterator, DoubleEndedIterator, RandomAccessIterator, ClonableIterator};\n-pub use iterator::{OrdIterator, MutableDoubleEndedIterator, ExactSizeDoubleEndedIterator};\n+pub use iterator::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Algebraic, Trigonometric, Exponential, Hyperbolic};"}, {"sha": "d1afbaf5699f76e394e346b71dd99621a233aa06", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35040dfccc6674e8eda71b34a8cd1b4cc1b45842/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35040dfccc6674e8eda71b34a8cd1b4cc1b45842/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=35040dfccc6674e8eda71b34a8cd1b4cc1b45842", "patch": "@@ -24,7 +24,7 @@ use container::{Container, Mutable};\n use num::Times;\n use iterator::{Iterator, FromIterator, Extendable};\n use iterator::{Filter, AdditiveIterator, Map};\n-use iterator::{Invert, DoubleEndedIterator, ExactSizeDoubleEndedIterator};\n+use iterator::{Invert, DoubleEndedIterator, ExactSize};\n use libc;\n use num::{Saturating};\n use option::{None, Option, Some};"}, {"sha": "769f2651bacbf0bb73e861feb497c56787daceb3", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35040dfccc6674e8eda71b34a8cd1b4cc1b45842/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35040dfccc6674e8eda71b34a8cd1b4cc1b45842/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=35040dfccc6674e8eda71b34a8cd1b4cc1b45842", "patch": "@@ -2303,8 +2303,8 @@ iterator!{impl VecIterator -> &'self T}\n double_ended_iterator!{impl VecIterator -> &'self T}\n pub type RevIterator<'self, T> = Invert<VecIterator<'self, T>>;\n \n-impl<'self, T> ExactSizeHint for VecIterator<'self, T> {}\n-impl<'self, T> ExactSizeHint for VecMutIterator<'self, T> {}\n+impl<'self, T> ExactSize<&'self T> for VecIterator<'self, T> {}\n+impl<'self, T> ExactSize<&'self mut T> for VecMutIterator<'self, T> {}\n \n impl<'self, T> Clone for VecIterator<'self, T> {\n     fn clone(&self) -> VecIterator<'self, T> { *self }"}]}