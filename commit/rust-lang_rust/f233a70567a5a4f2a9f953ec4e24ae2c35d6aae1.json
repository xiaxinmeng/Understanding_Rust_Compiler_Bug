{"sha": "f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMzNhNzA1NjdhNWE0ZjJhOWY5NTNlYzRlMjRhZTJjMzVkNmFhZTE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-05T12:48:41Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-05T21:08:29Z"}, "message": "Use rustdoc Span in LinkFromSrc directly", "tree": {"sha": "7acacf2a868f0aa5338db3b0acd35760f503975b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7acacf2a868f0aa5338db3b0acd35760f503975b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1", "html_url": "https://github.com/rust-lang/rust/commit/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dffc9c0a79bcf06a3abe6746056746bb11125b6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dffc9c0a79bcf06a3abe6746056746bb11125b6a", "html_url": "https://github.com/rust-lang/rust/commit/dffc9c0a79bcf06a3abe6746056746bb11125b6a"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "207c89cbfe87e7d2386e2ec254bd3e8c785860c1", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     visibility: Inherited,\n                     def_id: ItemId::Blanket { impl_id: impl_def_id, for_: item_def_id },\n                     kind: box ImplItem(Impl {\n-                        span: Span::from_rustc_span(self.cx.tcx.def_span(impl_def_id)),\n+                        span: Span::new(self.cx.tcx.def_span(impl_def_id)),\n                         unsafety: hir::Unsafety::Normal,\n                         generics: (\n                             self.cx.tcx.generics_of(impl_def_id),"}, {"sha": "22e4d21c87bdf0405594ec2c0030b3e91da844c2", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1", "patch": "@@ -1951,14 +1951,6 @@ impl Span {\n         Self(sp.source_callsite())\n     }\n \n-    /// Unless you know what you're doing, use [`Self::new`] instead!\n-    ///\n-    /// This function doesn't clean the span at all. Compare with [`Self::new`]'s body to see the\n-    /// difference.\n-    crate fn wrap_raw(sp: rustc_span::Span) -> Span {\n-        Self(sp)\n-    }\n-\n     crate fn inner(&self) -> rustc_span::Span {\n         self.0\n     }"}, {"sha": "9364ebc4dcfb6893100caec5e142ae5d046c6433", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1", "patch": "@@ -5,7 +5,6 @@\n //!\n //! Use the `render_with_highlighting` to highlight some rust code.\n \n-use crate::clean;\n use crate::html::escape::Escape;\n use crate::html::render::Context;\n \n@@ -584,7 +583,7 @@ fn string<T: Display>(\n                     match href {\n                         LinkFromSrc::Local(span) => {\n                             context\n-                                .href_from_span(clean::Span::wrap_raw(*span))\n+                                .href_from_span(*span)\n                                 .map(|s| format!(\"{}{}\", context_info.root_path, s))\n                         }\n                         LinkFromSrc::External(def_id) => {"}, {"sha": "6a311ac78ab2c72e4d652a626bc7e5cef529004a", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=f233a70567a5a4f2a9f953ec4e24ae2c35d6aae1", "patch": "@@ -20,7 +20,7 @@ use std::path::{Path, PathBuf};\n /// instead of the source code directly.\n #[derive(Debug)]\n crate enum LinkFromSrc {\n-    Local(Span),\n+    Local(clean::Span),\n     External(DefId),\n }\n \n@@ -113,7 +113,7 @@ impl<'tcx> SpanMapVisitor<'tcx> {\n                 path_span\n                     .map(LightSpan::new_from_span)\n                     .unwrap_or_else(|| LightSpan::new_from_span(path.span)),\n-                LinkFromSrc::Local(span),\n+                LinkFromSrc::Local(clean::Span::new(span)),\n             );\n         } else if let Some(def_id) = info {\n             self.matches.insert(\n@@ -161,7 +161,7 @@ impl Visitor<'tcx> for SpanMapVisitor<'tcx> {\n                     Node::Item(item) => {\n                         self.matches.insert(\n                             LightSpan::new_from_span(item.ident.span),\n-                            LinkFromSrc::Local(m.inner),\n+                            LinkFromSrc::Local(clean::Span::new(m.inner)),\n                         );\n                     }\n                     _ => {}\n@@ -187,7 +187,7 @@ impl Visitor<'tcx> for SpanMapVisitor<'tcx> {\n                             Some(span) => {\n                                 self.matches.insert(\n                                     LightSpan::new_from_span(method_span),\n-                                    LinkFromSrc::Local(span),\n+                                    LinkFromSrc::Local(clean::Span::new(span)),\n                                 );\n                             }\n                             None => {"}]}