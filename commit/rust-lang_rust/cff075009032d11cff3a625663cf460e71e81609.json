{"sha": "cff075009032d11cff3a625663cf460e71e81609", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZjA3NTAwOTAzMmQxMWNmZjNhNjI1NjYzY2Y0NjBlNzFlODE2MDk=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-01-22T21:01:14Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-01-25T23:39:54Z"}, "message": "Set the DICompileUnit emissionKind", "tree": {"sha": "fb848d992fd4db22b2e04ac5f8e898f5d07d6ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb848d992fd4db22b2e04ac5f8e898f5d07d6ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cff075009032d11cff3a625663cf460e71e81609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cff075009032d11cff3a625663cf460e71e81609", "html_url": "https://github.com/rust-lang/rust/commit/cff075009032d11cff3a625663cf460e71e81609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cff075009032d11cff3a625663cf460e71e81609/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d0bceb0aaa399a9c8de2913dd78cc6df295222", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d0bceb0aaa399a9c8de2913dd78cc6df295222", "html_url": "https://github.com/rust-lang/rust/commit/75d0bceb0aaa399a9c8de2913dd78cc6df295222"}], "stats": {"total": 56, "additions": 50, "deletions": 6}, "files": [{"sha": "3a7864cb7a5a881418f099037b32ffc74c3795de", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cff075009032d11cff3a625663cf460e71e81609/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff075009032d11cff3a625663cf460e71e81609/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=cff075009032d11cff3a625663cf460e71e81609", "patch": "@@ -13,7 +13,7 @@ use value::Value;\n \n use llvm;\n use llvm::debuginfo::{DIArray, DIType, DIFile, DIScope, DIDescriptor,\n-                      DICompositeType, DILexicalBlock, DIFlags};\n+                      DICompositeType, DILexicalBlock, DIFlags, DebugEmissionKind};\n use llvm_util;\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -846,6 +846,7 @@ pub fn compile_unit_metadata(tcx: TyCtxt,\n     let producer = CString::new(producer).unwrap();\n     let flags = \"\\0\";\n     let split_name = \"\\0\";\n+    let kind = DebugEmissionKind::from_generic(tcx.sess.opts.debuginfo);\n \n     unsafe {\n         let file_metadata = llvm::LLVMRustDIBuilderCreateFile(\n@@ -859,7 +860,8 @@ pub fn compile_unit_metadata(tcx: TyCtxt,\n             tcx.sess.opts.optimize != config::OptLevel::No,\n             flags.as_ptr() as *const _,\n             0,\n-            split_name.as_ptr() as *const _);\n+            split_name.as_ptr() as *const _,\n+            kind);\n \n         if tcx.sess.opts.debugging_opts.profile {\n             let cu_desc_metadata = llvm::LLVMRustMetadataAsValue(debug_context.llcontext,"}, {"sha": "199c1220a2c4a35a2b80e0b91938430e90b542dc", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cff075009032d11cff3a625663cf460e71e81609/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff075009032d11cff3a625663cf460e71e81609/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=cff075009032d11cff3a625663cf460e71e81609", "patch": "@@ -2,7 +2,7 @@ use super::debuginfo::{\n     DIBuilder, DIDescriptor, DIFile, DILexicalBlock, DISubprogram, DIType,\n     DIBasicType, DIDerivedType, DICompositeType, DIScope, DIVariable,\n     DIGlobalVariableExpression, DIArray, DISubrange, DITemplateTypeParameter, DIEnumerator,\n-    DINameSpace, DIFlags, DISPFlags,\n+    DINameSpace, DIFlags, DISPFlags, DebugEmissionKind,\n };\n \n use libc::{c_uint, c_int, size_t, c_char};\n@@ -605,6 +605,26 @@ pub mod debuginfo {\n             const SPFlagOptimized         = (1 << 4);\n         }\n     }\n+\n+    /// LLVMRustDebugEmissionKind\n+    #[derive(Copy, Clone)]\n+    #[repr(C)]\n+    pub enum DebugEmissionKind {\n+        NoDebug,\n+        FullDebug,\n+        LineTablesOnly,\n+    }\n+\n+    impl DebugEmissionKind {\n+        pub fn from_generic(kind: rustc::session::config::DebugInfo) -> Self {\n+            use rustc::session::config::DebugInfo;\n+            match kind {\n+                DebugInfo::None => DebugEmissionKind::NoDebug,\n+                DebugInfo::Limited => DebugEmissionKind::LineTablesOnly,\n+                DebugInfo::Full => DebugEmissionKind::FullDebug,\n+            }\n+        }\n+    }\n }\n \n extern { pub type ModuleBuffer; }\n@@ -1381,7 +1401,8 @@ extern \"C\" {\n                                               isOptimized: bool,\n                                               Flags: *const c_char,\n                                               RuntimeVer: c_uint,\n-                                              SplitName: *const c_char)\n+                                              SplitName: *const c_char,\n+                                              kind: DebugEmissionKind)\n                                               -> &'a DIDescriptor;\n \n     pub fn LLVMRustDIBuilderCreateFile(Builder: &DIBuilder<'a>,"}, {"sha": "e973318057c67783d7e0fd7f31dee1c66cbc46f3", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cff075009032d11cff3a625663cf460e71e81609/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cff075009032d11cff3a625663cf460e71e81609/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=cff075009032d11cff3a625663cf460e71e81609", "patch": "@@ -576,6 +576,25 @@ static DISubprogram::DISPFlags fromRust(LLVMRustDISPFlags SPFlags) {\n }\n #endif\n \n+enum class LLVMRustDebugEmissionKind {\n+  NoDebug,\n+  FullDebug,\n+  LineTablesOnly,\n+};\n+\n+static DICompileUnit::DebugEmissionKind fromRust(LLVMRustDebugEmissionKind Kind) {\n+  switch (Kind) {\n+  case LLVMRustDebugEmissionKind::NoDebug:\n+    return DICompileUnit::DebugEmissionKind::NoDebug;\n+  case LLVMRustDebugEmissionKind::FullDebug:\n+    return DICompileUnit::DebugEmissionKind::FullDebug;\n+  case LLVMRustDebugEmissionKind::LineTablesOnly:\n+    return DICompileUnit::DebugEmissionKind::LineTablesOnly;\n+  default:\n+    report_fatal_error(\"bad DebugEmissionKind.\");\n+  }\n+}\n+\n extern \"C\" uint32_t LLVMRustDebugMetadataVersion() {\n   return DEBUG_METADATA_VERSION;\n }\n@@ -616,11 +635,13 @@ extern \"C\" void LLVMRustDIBuilderFinalize(LLVMRustDIBuilderRef Builder) {\n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateCompileUnit(\n     LLVMRustDIBuilderRef Builder, unsigned Lang, LLVMMetadataRef FileRef,\n     const char *Producer, bool isOptimized, const char *Flags,\n-    unsigned RuntimeVer, const char *SplitName) {\n+    unsigned RuntimeVer, const char *SplitName,\n+    LLVMRustDebugEmissionKind Kind) {\n   auto *File = unwrapDI<DIFile>(FileRef);\n \n   return wrap(Builder->createCompileUnit(Lang, File, Producer, isOptimized,\n-                                         Flags, RuntimeVer, SplitName));\n+                                         Flags, RuntimeVer, SplitName,\n+                                         fromRust(Kind)));\n }\n \n extern \"C\" LLVMMetadataRef"}]}