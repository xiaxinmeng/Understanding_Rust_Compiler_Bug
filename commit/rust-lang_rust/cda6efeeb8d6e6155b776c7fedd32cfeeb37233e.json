{"sha": "cda6efeeb8d6e6155b776c7fedd32cfeeb37233e", "node_id": "C_kwDOAAsO6NoAKGNkYTZlZmVlYjhkNmU2MTU1Yjc3NmM3ZmVkZDMyY2ZlZWIzNzIzM2U", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-01-13T14:33:07Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-01-13T14:33:07Z"}, "message": "generate_macro_def_id_path: don't eagerly stringify Symbols", "tree": {"sha": "d4a391d99652a9cd66b7ed201d9614b805f200ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4a391d99652a9cd66b7ed201d9614b805f200ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cda6efeeb8d6e6155b776c7fedd32cfeeb37233e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cda6efeeb8d6e6155b776c7fedd32cfeeb37233e", "html_url": "https://github.com/rust-lang/rust/commit/cda6efeeb8d6e6155b776c7fedd32cfeeb37233e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cda6efeeb8d6e6155b776c7fedd32cfeeb37233e/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e1258c6b6f67df77157c7aea0f800854da99294", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1258c6b6f67df77157c7aea0f800854da99294", "html_url": "https://github.com/rust-lang/rust/commit/4e1258c6b6f67df77157c7aea0f800854da99294"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "83fde5fd7205d1438e245dfcd7340beb98d65630", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cda6efeeb8d6e6155b776c7fedd32cfeeb37233e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cda6efeeb8d6e6155b776c7fedd32cfeeb37233e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=cda6efeeb8d6e6155b776c7fedd32cfeeb37233e", "patch": "@@ -569,7 +569,7 @@ fn generate_macro_def_id_path(\n     root_path: Option<&str>,\n ) -> Result<(String, ItemType, Vec<Symbol>), HrefError> {\n     let tcx = cx.shared.tcx;\n-    let crate_name = tcx.crate_name(def_id.krate).to_string();\n+    let crate_name = tcx.crate_name(def_id.krate);\n     let cache = cx.cache();\n \n     let fqp: Vec<Symbol> = tcx\n@@ -584,7 +584,7 @@ fn generate_macro_def_id_path(\n             }\n         })\n         .collect();\n-    let mut relative = fqp.iter().map(|elem| elem.to_string());\n+    let mut relative = fqp.iter().copied();\n     let cstore = CStore::from_tcx(tcx);\n     // We need this to prevent a `panic` when this function is used from intra doc links...\n     if !cstore.has_crate_data(def_id.krate) {\n@@ -602,9 +602,9 @@ fn generate_macro_def_id_path(\n     };\n \n     let mut path = if is_macro_2 {\n-        once(crate_name.clone()).chain(relative).collect()\n+        once(crate_name).chain(relative).collect()\n     } else {\n-        vec![crate_name.clone(), relative.next_back().unwrap()]\n+        vec![crate_name, relative.next_back().unwrap()]\n     };\n     if path.len() < 2 {\n         // The minimum we can have is the crate name followed by the macro name. If shorter, then\n@@ -614,17 +614,22 @@ fn generate_macro_def_id_path(\n     }\n \n     if let Some(last) = path.last_mut() {\n-        *last = format!(\"macro.{}.html\", last);\n+        *last = Symbol::intern(&format!(\"macro.{}.html\", last.as_str()));\n     }\n \n     let url = match cache.extern_locations[&def_id.krate] {\n         ExternalLocation::Remote(ref s) => {\n             // `ExternalLocation::Remote` always end with a `/`.\n-            format!(\"{}{}\", s, path.join(\"/\"))\n+            format!(\"{}{}\", s, path.iter().map(|p| p.as_str()).join(\"/\"))\n         }\n         ExternalLocation::Local => {\n             // `root_path` always end with a `/`.\n-            format!(\"{}{}/{}\", root_path.unwrap_or(\"\"), crate_name, path.join(\"/\"))\n+            format!(\n+                \"{}{}/{}\",\n+                root_path.unwrap_or(\"\"),\n+                crate_name,\n+                path.iter().map(|p| p.as_str()).join(\"/\")\n+            )\n         }\n         ExternalLocation::Unknown => {\n             debug!(\"crate {} not in cache when linkifying macros\", crate_name);"}]}