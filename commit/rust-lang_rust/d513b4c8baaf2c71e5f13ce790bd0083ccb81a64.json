{"sha": "d513b4c8baaf2c71e5f13ce790bd0083ccb81a64", "node_id": "C_kwDOAAsO6NoAKGQ1MTNiNGM4YmFhZjJjNzFlNWYxM2NlNzkwYmQwMDgzY2NiODFhNjQ", "commit": {"author": {"name": "fprasx", "email": "felix725@gmail.com", "date": "2022-08-03T19:51:30Z"}, "committer": {"name": "fprasx", "email": "felix725@gmail.com", "date": "2022-08-03T19:59:17Z"}, "message": "Added fixup for for loops w/ missing parts", "tree": {"sha": "40fbf0de1946481452b814c7743bc35dfcf63104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40fbf0de1946481452b814c7743bc35dfcf63104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d513b4c8baaf2c71e5f13ce790bd0083ccb81a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d513b4c8baaf2c71e5f13ce790bd0083ccb81a64", "html_url": "https://github.com/rust-lang/rust/commit/d513b4c8baaf2c71e5f13ce790bd0083ccb81a64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d513b4c8baaf2c71e5f13ce790bd0083ccb81a64/comments", "author": {"login": "fprasx", "id": 91577249, "node_id": "U_kgDOBXVboQ", "avatar_url": "https://avatars.githubusercontent.com/u/91577249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fprasx", "html_url": "https://github.com/fprasx", "followers_url": "https://api.github.com/users/fprasx/followers", "following_url": "https://api.github.com/users/fprasx/following{/other_user}", "gists_url": "https://api.github.com/users/fprasx/gists{/gist_id}", "starred_url": "https://api.github.com/users/fprasx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fprasx/subscriptions", "organizations_url": "https://api.github.com/users/fprasx/orgs", "repos_url": "https://api.github.com/users/fprasx/repos", "events_url": "https://api.github.com/users/fprasx/events{/privacy}", "received_events_url": "https://api.github.com/users/fprasx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fprasx", "id": 91577249, "node_id": "U_kgDOBXVboQ", "avatar_url": "https://avatars.githubusercontent.com/u/91577249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fprasx", "html_url": "https://github.com/fprasx", "followers_url": "https://api.github.com/users/fprasx/followers", "following_url": "https://api.github.com/users/fprasx/following{/other_user}", "gists_url": "https://api.github.com/users/fprasx/gists{/gist_id}", "starred_url": "https://api.github.com/users/fprasx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fprasx/subscriptions", "organizations_url": "https://api.github.com/users/fprasx/orgs", "repos_url": "https://api.github.com/users/fprasx/repos", "events_url": "https://api.github.com/users/fprasx/events{/privacy}", "received_events_url": "https://api.github.com/users/fprasx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4", "html_url": "https://github.com/rust-lang/rust/commit/5cb3e7a41b89b5612cefe9c688f0ffdff18d4df4"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "ade28f27bf1cc1201970ce6c10f93de3c3328a71", "filename": "crates/hir-expand/src/fixup.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d513b4c8baaf2c71e5f13ce790bd0083ccb81a64/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d513b4c8baaf2c71e5f13ce790bd0083ccb81a64/crates%2Fhir-expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Ffixup.rs?ref=d513b4c8baaf2c71e5f13ce790bd0083ccb81a64", "patch": "@@ -193,7 +193,6 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n                     }\n                 },\n                 // FIXME: foo::\n-                // FIXME: for, match etc.\n                 ast::MatchExpr(it) => {\n                     if it.expr().is_none() {\n                         let match_token = match it.match_token() {\n@@ -257,6 +256,42 @@ pub(crate) fn fixup_syntax(node: &SyntaxNode) -> SyntaxFixups {\n                         ]);\n                     }\n                 },\n+                ast::ForExpr(it) => {\n+                    let for_token = match it.for_token() {\n+                        Some(token) => token,\n+                        None => continue\n+                    };\n+\n+                    let [pat, in_token, iter] = [\n+                        (SyntaxKind::UNDERSCORE, \"_\"), \n+                        (SyntaxKind::IN_KW, \"in\"), \n+                        (SyntaxKind::IDENT, \"__ra_fixup\")\n+                    ].map(|(kind, text)| SyntheticToken { kind, text: text.into(), range: end_range, id: EMPTY_ID});\n+\n+                    if it.pat().is_none() && it.in_token().is_none() && it.iterable().is_none() {\n+                        append.insert(for_token.into(), vec![pat, in_token, iter]);\n+                    } \n+\n+                    // Tricky: add logic to add in just a pattern or iterable if not all\n+                    // the pieces are missing\n+\n+                    if it.loop_body().is_none() {\n+                        append.insert(node.clone().into(), vec![\n+                            SyntheticToken {\n+                                kind: SyntaxKind::L_CURLY,\n+                                text: \"{\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                            SyntheticToken {\n+                                kind: SyntaxKind::R_CURLY,\n+                                text: \"}\".into(),\n+                                range: end_range,\n+                                id: EMPTY_ID,\n+                            },\n+                        ]);\n+                    }\n+                },\n                 _ => (),\n             }\n         }\n@@ -349,6 +384,47 @@ mod tests {\n         assert_eq!(tt.to_string(), original_as_tt.to_string());\n     }\n \n+    #[test]\n+    fn for_no_iter_no_body() {\n+        check(\n+            r#\"\n+fn foo() {\n+    for\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {for _ in __ra_fixup {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn for_no_iter() {\n+        check(\n+            r#\"\n+fn foo() {\n+    for {}\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {for _ in __ra_fixup {}}\n+\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn for_no_body() {\n+        check(\n+            r#\"\n+fn foo() {\n+    for bar in qux\n+}\n+\"#,\n+            expect![[r#\"\n+fn foo () {for bar in qux {}}\n+\"#]],\n+        )\n+    }\n \n     #[test]\n     fn match_no_expr_no_arms() {"}]}