{"sha": "a435b49e86d16e98dcc6595dd471f95e823f41aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MzViNDllODZkMTZlOThkY2M2NTk1ZGQ0NzFmOTVlODIzZjQxYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-28T16:48:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-28T16:48:01Z"}, "message": "Auto merge of #86690 - JohnTitor:rollup-4ukk4yw, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #86206 (Fix type checking of return expressions outside of function bodies)\n - #86358 (fix pretty print for `loop`)\n - #86568 (Don't dist miri or rust-analyzer on stable or beta.)\n - #86683 (:arrow_up: rust-analyzer)\n - #86687 (Allow anyone to set `perf-regression` label)\n - #86688 (Add a regression test for issue-65384)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cc0ee72f70f2e4292cc0190ba59cd89e062cefc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc0ee72f70f2e4292cc0190ba59cd89e062cefc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a435b49e86d16e98dcc6595dd471f95e823f41aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a435b49e86d16e98dcc6595dd471f95e823f41aa", "html_url": "https://github.com/rust-lang/rust/commit/a435b49e86d16e98dcc6595dd471f95e823f41aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a435b49e86d16e98dcc6595dd471f95e823f41aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ea490310ba7c836c93fe1b7002555b3bea5eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ea490310ba7c836c93fe1b7002555b3bea5eb1", "html_url": "https://github.com/rust-lang/rust/commit/17ea490310ba7c836c93fe1b7002555b3bea5eb1"}, {"sha": "c5055b75a280c7e67ff921045edf1a718fcf4c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5055b75a280c7e67ff921045edf1a718fcf4c4c", "html_url": "https://github.com/rust-lang/rust/commit/c5055b75a280c7e67ff921045edf1a718fcf4c4c"}], "stats": {"total": 304, "additions": 268, "deletions": 36}, "files": [{"sha": "f14d8a693fd6e1482abccabaa83ca7156ca572bd", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -1954,7 +1954,6 @@ impl<'a> State<'a> {\n                     self.word_space(\":\");\n                 }\n                 self.head(\"loop\");\n-                self.s.space();\n                 self.print_block_with_attrs(blk, attrs);\n             }\n             ast::ExprKind::Match(ref expr, ref arms) => {"}, {"sha": "5c1739b1ab9b63a02be65fa50170dd7baf04bebc", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -1539,7 +1539,6 @@ impl<'a> State<'a> {\n                     self.word_space(\":\");\n                 }\n                 self.head(\"loop\");\n-                self.s.space();\n                 self.print_block(&blk);\n             }\n             hir::ExprKind::Match(ref expr, arms, _) => {"}, {"sha": "f69839bf85903336884458c77c03171ff8836081", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -675,7 +675,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n         if self.ret_coercion.is_none() {\n-            self.tcx.sess.emit_err(ReturnStmtOutsideOfFnBody { span: expr.span });\n+            let mut err = ReturnStmtOutsideOfFnBody {\n+                span: expr.span,\n+                encl_body_span: None,\n+                encl_fn_span: None,\n+            };\n+\n+            let encl_item_id = self.tcx.hir().get_parent_item(expr.hir_id);\n+            let encl_item = self.tcx.hir().expect_item(encl_item_id);\n+\n+            if let hir::ItemKind::Fn(..) = encl_item.kind {\n+                // We are inside a function body, so reporting \"return statement\n+                // outside of function body\" needs an explanation.\n+\n+                let encl_body_owner_id = self.tcx.hir().enclosing_body_owner(expr.hir_id);\n+\n+                // If this didn't hold, we would not have to report an error in\n+                // the first place.\n+                assert_ne!(encl_item_id, encl_body_owner_id);\n+\n+                let encl_body_id = self.tcx.hir().body_owned_by(encl_body_owner_id);\n+                let encl_body = self.tcx.hir().body(encl_body_id);\n+\n+                err.encl_body_span = Some(encl_body.value.span);\n+                err.encl_fn_span = Some(encl_item.span);\n+            }\n+\n+            self.tcx.sess.emit_err(err);\n+\n+            if let Some(e) = expr_opt {\n+                // We still have to type-check `e` (issue #86188), but calling\n+                // `check_return_expr` only works inside fn bodies.\n+                self.check_expr(e);\n+            }\n         } else if let Some(e) = expr_opt {\n             if self.ret_coercion_span.get().is_none() {\n                 self.ret_coercion_span.set(Some(e.span));"}, {"sha": "1a21c085d5397f035ba9ebc14575176fcbaddac9", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -147,6 +147,10 @@ pub struct TypeofReservedKeywordUsed {\n pub struct ReturnStmtOutsideOfFnBody {\n     #[message = \"return statement outside of function body\"]\n     pub span: Span,\n+    #[label = \"the return is part of this body...\"]\n+    pub encl_body_span: Option<Span>,\n+    #[label = \"...not the enclosing function body\"]\n+    pub encl_fn_span: Option<Span>,\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "19895baf08f162ff92e2bc95b82800dab5becf75", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -1072,6 +1072,12 @@ impl Step for RustAnalyzer {\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n+        // This prevents rust-analyzer from being built for \"dist\" or \"install\"\n+        // on the stable/beta channels. It is a nightly-only tool and should\n+        // not be included.\n+        if !builder.build.unstable_features() {\n+            return None;\n+        }\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);\n@@ -1171,6 +1177,12 @@ impl Step for Miri {\n     }\n \n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n+        // This prevents miri from being built for \"dist\" or \"install\"\n+        // on the stable/beta channels. It is a nightly-only tool and should\n+        // not be included.\n+        if !builder.build.unstable_features() {\n+            return None;\n+        }\n         let compiler = self.compiler;\n         let target = self.target;\n         assert!(builder.config.extended);"}, {"sha": "32d1da390c547728e3f0efb5f32f8db16e492af6", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -39,7 +39,7 @@ fn syntax() {\n                     #![attr]\n                 };\n     let _ =\n-        #[attr] loop  {\n+        #[attr] loop {\n                     #![attr]\n                 };\n     let _ ="}, {"sha": "19b3a1775cf36f401c46a935aaa5aea78d1e24e2", "filename": "src/test/pretty/hir-pretty-loop.pp", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fpretty%2Fhir-pretty-loop.pp", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fpretty%2Fhir-pretty-loop.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fhir-pretty-loop.pp?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -0,0 +1,9 @@\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+// pretty-compare-only\n+// pretty-mode:hir\n+// pp-exact:hir-pretty-loop.pp\n+\n+pub fn foo() { loop { break ; } }"}, {"sha": "87a3ef8b8f912386939631232c1e9dc9b016ec45", "filename": "src/test/pretty/hir-pretty-loop.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fpretty%2Fhir-pretty-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fpretty%2Fhir-pretty-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fhir-pretty-loop.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -0,0 +1,9 @@\n+// pretty-compare-only\n+// pretty-mode:hir\n+// pp-exact:hir-pretty-loop.pp\n+\n+pub fn foo(){\n+    loop{\n+        break;\n+    }\n+}"}, {"sha": "e4a3acade871be7e443fb85e71d3da1dba43233b", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -166,9 +166,8 @@ fn _11() {\n         #[rustc_dummy] for _ in 0..0 {\n                            #![rustc_dummy]\n                        };\n-    // FIXME: pp bug, two spaces after the loop\n     let _ =\n-        #[rustc_dummy] loop  {\n+        #[rustc_dummy] loop {\n                            #![rustc_dummy]\n                        };\n     let _ ="}, {"sha": "8716524d6f4b527957281101625b8ce3ea9b1261", "filename": "src/test/ui/issues/issue-51714.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -1,13 +1,21 @@\n fn main() {\n+//~^ NOTE: not the enclosing function body\n+//~| NOTE: not the enclosing function body\n+//~| NOTE: not the enclosing function body\n+//~| NOTE: not the enclosing function body\n     |_:  [_; return || {}] | {};\n-    //~^ ERROR return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n \n     [(); return || {}];\n-    //~^ ERROR return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n \n     [(); return |ice| {}];\n-    //~^ ERROR return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n \n     [(); return while let Some(n) = Some(0) {}];\n-    //~^ ERROR return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n }"}, {"sha": "514d69c1c7d3985f6254d32fca7afaed5274189f", "filename": "src/test/ui/issues/issue-51714.stderr", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51714.stderr?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -1,26 +1,62 @@\n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-51714.rs:2:14\n+  --> $DIR/issue-51714.rs:6:14\n    |\n-LL |     |_:  [_; return || {}] | {};\n-   |              ^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | |     |_:  [_; return || {}] | {};\n+   | |              ^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-51714.rs:5:10\n+  --> $DIR/issue-51714.rs:10:10\n    |\n-LL |     [(); return || {}];\n-   |          ^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     [(); return || {}];\n+   | |          ^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-51714.rs:8:10\n+  --> $DIR/issue-51714.rs:14:10\n    |\n-LL |     [(); return |ice| {}];\n-   |          ^^^^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     [(); return |ice| {}];\n+   | |          ^^^^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/issue-51714.rs:11:10\n+  --> $DIR/issue-51714.rs:18:10\n    |\n-LL |     [(); return while let Some(n) = Some(0) {}];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     [(); return while let Some(n) = Some(0) {}];\n+   | |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the return is part of this body...\n+LL | |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error: aborting due to 4 previous errors\n "}, {"sha": "23cc9f0512ca1f1185549fdbe87cdc551fecee73", "filename": "src/test/ui/return/issue-86188-return-not-in-fn-body.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -0,0 +1,22 @@\n+// Due to a compiler bug, if a return occurs outside of a function body\n+// (e.g. in an AnonConst body), the return value expression would not be\n+// type-checked, leading to an ICE. This test checks that the ICE no\n+// longer happens, and that an appropriate error message is issued that\n+// also explains why the return is considered \"outside of a function body\"\n+// if it seems to be inside one, as in the main function below.\n+\n+const C: [(); 42] = {\n+    [(); return || {\n+    //~^ ERROR: return statement outside of function body [E0572]\n+        let tx;\n+    }]\n+};\n+\n+fn main() {\n+//~^ NOTE: ...not the enclosing function body\n+    [(); return || {\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n+        let tx;\n+    }];\n+}"}, {"sha": "9275cb91dd3564fa79d61ddd55ba67f86b5ccff9", "filename": "src/test/ui/return/issue-86188-return-not-in-fn-body.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Fissue-86188-return-not-in-fn-body.stderr?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -0,0 +1,28 @@\n+error[E0572]: return statement outside of function body\n+  --> $DIR/issue-86188-return-not-in-fn-body.rs:9:10\n+   |\n+LL |       [(); return || {\n+   |  __________^\n+LL | |\n+LL | |         let tx;\n+LL | |     }]\n+   | |_____^\n+\n+error[E0572]: return statement outside of function body\n+  --> $DIR/issue-86188-return-not-in-fn-body.rs:17:10\n+   |\n+LL |  / fn main() {\n+LL |  |\n+LL |  |     [(); return || {\n+   |  |__________^\n+LL | ||\n+LL | ||\n+LL | ||         let tx;\n+LL | ||     }];\n+   | ||_____^ the return is part of this body...\n+LL |  | }\n+   |  |_- ...not the enclosing function body\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0572`."}, {"sha": "b619a4d57f9553ef4812cfa3a4b1fa5ecd8640c1", "filename": "src/test/ui/return/return-match-array-const.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -1,10 +1,19 @@\n fn main() {\n+//~^ NOTE: not the enclosing function body\n+//~| NOTE: not the enclosing function body\n+//~| NOTE: not the enclosing function body\n     [(); return match 0 { n => n }];\n-    //~^ ERROR: return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n \n     [(); return match 0 { 0 => 0 }];\n-    //~^ ERROR: return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n \n     [(); return match () { 'a' => 0, _ => 0 }];\n-    //~^ ERROR: return statement outside of function body\n+    //~^ ERROR: return statement outside of function body [E0572]\n+    //~| NOTE: the return is part of this body...\n+    //~| ERROR: mismatched types [E0308]\n+    //~| NOTE: expected `()`, found `char`\n+    //~| NOTE: this expression has type `()`\n }"}, {"sha": "85a733adfee69448cd7ff6d804502e971c64b309", "filename": "src/test/ui/return/return-match-array-const.stderr", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-match-array-const.stderr?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -1,21 +1,56 @@\n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:2:10\n+  --> $DIR/return-match-array-const.rs:5:10\n    |\n-LL |     [(); return match 0 { n => n }];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+LL | |     [(); return match 0 { n => n }];\n+   | |          ^^^^^^^^^^^^^^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:5:10\n+  --> $DIR/return-match-array-const.rs:9:10\n    |\n-LL |     [(); return match 0 { 0 => 0 }];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     [(); return match 0 { 0 => 0 }];\n+   | |          ^^^^^^^^^^^^^^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n \n error[E0572]: return statement outside of function body\n-  --> $DIR/return-match-array-const.rs:8:10\n+  --> $DIR/return-match-array-const.rs:13:10\n+   |\n+LL | / fn main() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |     [(); return match () { 'a' => 0, _ => 0 }];\n+   | |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the return is part of this body...\n+...  |\n+LL | |\n+LL | | }\n+   | |_- ...not the enclosing function body\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-match-array-const.rs:13:28\n    |\n LL |     [(); return match () { 'a' => 0, _ => 0 }];\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       --   ^^^ expected `()`, found `char`\n+   |                       |\n+   |                       this expression has type `()`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0572`.\n+Some errors have detailed explanations: E0308, E0572.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "63666c497c66950f428c320e19857a3302cb7361", "filename": "src/test/ui/type-alias-impl-trait/issue-65384.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -0,0 +1,16 @@\n+#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {}\n+\n+impl MyTrait for () {}\n+\n+type Bar = impl MyTrait;\n+\n+impl MyTrait for Bar {}\n+//~^ ERROR: cannot implement trait on type alias impl trait\n+\n+fn bazr() -> Bar { }\n+\n+fn main() {}"}, {"sha": "01d037266ec60d36b8ddce50f8040f0ed75edbbe", "filename": "src/test/ui/type-alias-impl-trait/issue-65384.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -0,0 +1,14 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/issue-65384.rs:11:1\n+   |\n+LL | impl MyTrait for Bar {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/issue-65384.rs:9:12\n+   |\n+LL | type Bar = impl MyTrait;\n+   |            ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1fa82adfdca502a13f4dd952f9a50574870f5b7b", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -1 +1 @@\n-Subproject commit 13da28cc2bc1b59f7af817eca36927a71edb023c\n+Subproject commit 1fa82adfdca502a13f4dd952f9a50574870f5b7b"}, {"sha": "4621adb2ba837425331459b58fc45196d0b47a0f", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a435b49e86d16e98dcc6595dd471f95e823f41aa/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a435b49e86d16e98dcc6595dd471f95e823f41aa/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=a435b49e86d16e98dcc6595dd471f95e823f41aa", "patch": "@@ -4,6 +4,7 @@ allow-unauthenticated = [\n     \"D-*\",\n     \"requires-nightly\",\n     \"regression-*\",\n+    \"perf-regression\",\n     # I-* without I-nominated\n     \"I-*\", \"!I-nominated\",\n     \"AsyncAwait-OnDeck\","}]}