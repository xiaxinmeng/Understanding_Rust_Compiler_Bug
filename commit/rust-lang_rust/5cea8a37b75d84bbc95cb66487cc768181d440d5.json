{"sha": "5cea8a37b75d84bbc95cb66487cc768181d440d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZWE4YTM3Yjc1ZDg0YmJjOTVjYjY2NDg3Y2M3NjgxODFkNDQwZDU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-17T21:33:48Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-17T21:40:34Z"}, "message": "Install rust-src when it is not found", "tree": {"sha": "dadf1de543d96c75d6e3a30cc6dfd0478ad818fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dadf1de543d96c75d6e3a30cc6dfd0478ad818fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cea8a37b75d84bbc95cb66487cc768181d440d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cea8a37b75d84bbc95cb66487cc768181d440d5", "html_url": "https://github.com/rust-lang/rust/commit/5cea8a37b75d84bbc95cb66487cc768181d440d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cea8a37b75d84bbc95cb66487cc768181d440d5/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "326556b09078a398e641dd221ab870ee0fe47f68", "url": "https://api.github.com/repos/rust-lang/rust/commits/326556b09078a398e641dd221ab870ee0fe47f68", "html_url": "https://github.com/rust-lang/rust/commit/326556b09078a398e641dd221ab870ee0fe47f68"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "28756c7ca2b0e231248e3b6a26da9d0ca24889d2", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5cea8a37b75d84bbc95cb66487cc768181d440d5/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cea8a37b75d84bbc95cb66487cc768181d440d5/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=5cea8a37b75d84bbc95cb66487cc768181d440d5", "patch": "@@ -47,16 +47,19 @@ impl Sysroot {\n     }\n \n     pub fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n-        let src = try_find_src_path(cargo_toml)?;\n+        let mut src = try_find_src_path(cargo_toml)?;\n \n         if !src.exists() {\n-            Err(anyhow!(\n-                \"can't load standard library from sysroot\\n\\\n-                 {}\\n\\\n-                 (discovered via `rustc --print sysroot`)\\n\\\n-                 try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n-                src.display(),\n-            ))?;\n+            src = try_install_rust_src(cargo_toml)?;\n+            if !src.exists() {\n+                Err(anyhow!(\n+                    \"can't load standard library from sysroot\\n\\\n+                    {}\\n\\\n+                    (discovered via `rustc --print sysroot`)\\n\\\n+                    try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n+                    src.display(),\n+                ))?;\n+            }\n         }\n \n         let mut sysroot = Sysroot { crates: Arena::default() };\n@@ -113,6 +116,26 @@ fn try_find_src_path(cargo_toml: &Path) -> Result<PathBuf> {\n     Ok(sysroot_path.join(\"lib/rustlib/src/rust/src\"))\n }\n \n+fn try_install_rust_src(cargo_toml: &Path) -> Result<PathBuf> {\n+    let rustup_output = Command::new(\"rustup\")\n+        .current_dir(cargo_toml.parent().unwrap())\n+        .args(&[\"component\", \"add\", \"rust-src\"])\n+        .output()\n+        .context(\"rustup component add rust-src failed\")?;\n+    if !rustup_output.status.success() {\n+        match rustup_output.status.code() {\n+            Some(code) => bail!(\n+                \"failed to install rust-src: rustup component add rust-src exited with code {}\",\n+                code\n+            ),\n+            None => bail!(\n+                \"failed to install rust-src: rustup component add rust-src terminated by signal\"\n+            ),\n+        };\n+    }\n+    try_find_src_path(cargo_toml)\n+}\n+\n impl SysrootCrate {\n     pub fn name(self, sysroot: &Sysroot) -> &str {\n         &sysroot.crates[self].name"}, {"sha": "cb171defda2d780809238468f059e3ebeb984263", "filename": "docs/user/readme.adoc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cea8a37b75d84bbc95cb66487cc768181d440d5/docs%2Fuser%2Freadme.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/5cea8a37b75d84bbc95cb66487cc768181d440d5/docs%2Fuser%2Freadme.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Freadme.adoc?ref=5cea8a37b75d84bbc95cb66487cc768181d440d5", "patch": "@@ -20,7 +20,9 @@ In theory, one should be able to just install the server binary and have it auto\n We are not there yet, so some editor specific setup is required.\n \n Additionally, rust-analyzer needs sources of the standard library.\n-This commands adds them:\n+When fails to locate them, rust-analyzer attempts to install them automatically.\n+\n+To add the sources manually, run the following command:\n \n ```bash\n $ rustup component add rust-src"}]}