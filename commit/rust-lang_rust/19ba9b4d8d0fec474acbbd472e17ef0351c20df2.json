{"sha": "19ba9b4d8d0fec474acbbd472e17ef0351c20df2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YmE5YjRkOGQwZmVjNDc0YWNiYmQ0NzJlMTdlZjAzNTFjMjBkZjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-04T22:23:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T23:21:55Z"}, "message": "Begin work on rpath", "tree": {"sha": "ac1ac70a724f6049fc5e98d489cd76e4ae9cd978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac1ac70a724f6049fc5e98d489cd76e4ae9cd978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19ba9b4d8d0fec474acbbd472e17ef0351c20df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19ba9b4d8d0fec474acbbd472e17ef0351c20df2", "html_url": "https://github.com/rust-lang/rust/commit/19ba9b4d8d0fec474acbbd472e17ef0351c20df2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19ba9b4d8d0fec474acbbd472e17ef0351c20df2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e963cfd41a4c8acbd42e88511fb0ab27ea11f5b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e963cfd41a4c8acbd42e88511fb0ab27ea11f5b3", "html_url": "https://github.com/rust-lang/rust/commit/e963cfd41a4c8acbd42e88511fb0ab27ea11f5b3"}], "stats": {"total": 220, "additions": 218, "deletions": 2}, "files": [{"sha": "d3dbeaa6cf410148a6b0310dc97f421bab7c210e", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19ba9b4d8d0fec474acbbd472e17ef0351c20df2/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ba9b4d8d0fec474acbbd472e17ef0351c20df2/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=19ba9b4d8d0fec474acbbd472e17ef0351c20df2", "patch": "@@ -7,6 +7,7 @@ import metadata::{encoder, cstore};\n import middle::trans_common::crate_ctxt;\n import std::str;\n import std::fs;\n+import std::os;\n import std::vec;\n import std::option;\n import std::run;\n@@ -573,6 +574,8 @@ fn link_binary(sess: session::session,\n \n     gcc_args += [\"-Lrt\", \"-lrustrt\"];\n \n+    gcc_args += rpath::get_rpath_flags(sess, saved_out_filename);\n+\n     // We run 'gcc' here\n     let err_code = run::run_program(prog, gcc_args);\n     if 0 != err_code {"}, {"sha": "1ced0de2fde264d6e676521598490a12265208b0", "filename": "src/comp/back/rpath.rs", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/rust-lang/rust/blob/19ba9b4d8d0fec474acbbd472e17ef0351c20df2/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ba9b4d8d0fec474acbbd472e17ef0351c20df2/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=19ba9b4d8d0fec474acbbd472e17ef0351c20df2", "patch": "@@ -0,0 +1,205 @@\n+import std::os;\n+import std::fs;\n+import std::vec;\n+import metadata::cstore;\n+import driver::session;\n+import util::filesearch;\n+import std::map;\n+\n+export get_rpath_flags, test;\n+\n+#[cfg(target_os=\"linux\")]\n+#[cfg(target_os=\"macos\")]\n+fn get_rpath_flags(_sess: session::session, _out_filename: str) -> [str] {\n+    log \"preparing the RPATH!\";\n+\n+    // FIXME\n+    /*\n+    let cwd = os::getcwd();\n+    let sysroot = sess.filesearch().sysroot();\n+    let output = out_filename;\n+    let libs = cstore::get_used_crate_files(sess.get_cstore());\n+    let target_triple = sess.get_opts().target_triple;\n+    let rpaths = get_rpaths(cwd, sysroot, output, libs, target_triple);\n+    */\n+    let rpaths = [];\n+    rpaths_to_flags(rpaths)\n+}\n+\n+#[cfg(target_os=\"win32\")]\n+fn get_rpath_flags(_sess: session::session, _out_filename: str) -> [str] {\n+    []\n+}\n+\n+fn rpaths_to_flags(rpaths: [str]) -> [str] {\n+    vec::map({ |rpath| #fmt(\"-Wl,-rpath,%s\",rpath)}, rpaths)\n+}\n+\n+fn get_rpaths(cwd: fs::path, sysroot: fs::path,\n+              output: fs::path, libs: [fs::path],\n+              target_triple: str) -> [str] {\n+    log #fmt(\"cwd: %s\", cwd);\n+    log #fmt(\"sysroot: %s\", sysroot);\n+    log #fmt(\"output: %s\", output);\n+    log #fmt(\"libs:\");\n+    for libpath in libs {\n+        log #fmt(\"    %s\", libpath);\n+    }\n+    log #fmt(\"target_triple: %s\", target_triple);\n+\n+    // Use relative paths to the libraries. Binaries can be moved\n+    // as long as they maintain the relative relationship to the\n+    // crates they depend on.\n+    let rpaths = get_rpaths_relative_to_output(cwd, output, libs);\n+\n+    // Make backup absolute paths to the libraries. Binaries can\n+    // be moved as long as the crates they link against don't move.\n+    rpaths += get_absolute_rpaths(cwd, libs);\n+\n+    // And a final backup rpath to the global library location.\n+    rpaths += [get_install_prefix_rpath(target_triple)];\n+\n+    // Remove duplicates\n+    let rpaths = minimize_rpaths(rpaths);\n+    ret rpaths;\n+}\n+\n+fn get_rpaths_relative_to_output(cwd: fs::path,\n+                                 output: fs::path,\n+                                 libs: [fs::path]) -> [str] {\n+    vec::map(bind get_rpath_relative_to_output(cwd, output, _), libs)\n+}\n+\n+fn get_rpath_relative_to_output(_cwd: fs::path,\n+                                _output: fs::path,\n+                                _lib: fs::path) -> str {\n+    fail;\n+    /*get_relative_to(\n+        get_absolute(cwd, output),\n+        get_absolute(cwd, lib))*/\n+}\n+\n+// Find the relative path from one file to another\n+fn get_relative_to(_abs1: fs::path, _abs2: fs::path) -> fs::path {\n+    fail;\n+}\n+\n+fn get_absolute_rpaths(cwd: fs::path, libs: [fs::path]) -> [str] {\n+    vec::map(bind get_absolute_rpath(cwd, _), libs)\n+}\n+\n+fn get_absolute_rpath(cwd: fs::path, lib: fs::path) -> str {\n+    get_absolute(cwd, lib)\n+}\n+\n+fn get_absolute(cwd: fs::path, lib: fs::path) -> fs::path {\n+    if fs::path_is_absolute(lib) {\n+        lib\n+    } else {\n+        fs::connect(cwd, lib)\n+    }\n+}\n+\n+fn get_install_prefix_rpath(target_triple: str) -> str {\n+    let install_prefix = #env(\"CFG_PREFIX\");\n+\n+    if install_prefix == \"\" {\n+        fail \"rustc compiled without CFG_PREFIX environment variable\";\n+    }\n+\n+    let path = [install_prefix]\n+        + filesearch::relative_target_lib_path(target_triple);\n+    check vec::is_not_empty(path);\n+    fs::connect_many(path)\n+}\n+\n+fn minimize_rpaths(rpaths: [str]) -> [str] {\n+    let set = map::new_str_hash::<()>();\n+    for rpath in rpaths { set.insert(rpath, ()); }\n+    let minimized = [];\n+    for each rpath in set.keys() { minimized += [rpath]; }\n+    ret minimized;\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"macos\")]\n+mod test {\n+    #[test]\n+    fn test_rpaths_to_flags() {\n+        let flags = rpaths_to_flags([\"path1\", \"path2\"]);\n+        assert flags == [\"-Wl,-rpath,path1\", \"-Wl,-rpath,path2\"];\n+    }\n+\n+    #[test]\n+    fn test_get_absolute1() {\n+        let cwd = \"/dir\";\n+        let lib = \"some/path/lib\";\n+        let res = get_absolute(cwd, lib);\n+        assert res == \"/dir/some/path/lib\";\n+    }\n+\n+    #[test]\n+    fn test_get_absolute2() {\n+        let cwd = \"/dir\";\n+        let lib = \"/some/path/lib\";\n+        let res = get_absolute(cwd, lib);\n+        assert res == \"/some/path/lib\";\n+    }\n+\n+    #[test]\n+    fn test_prefix_rpath() {\n+        let res = get_install_prefix_rpath(\"triple\");\n+        assert res == #env(\"CFG_PREFIX\") + \"/lib/rustc/triple/lib\";\n+    }\n+\n+    #[test]\n+    fn test_minimize() {\n+        let res = minimize_rpaths([\"rpath1\", \"rpath2\", \"rpath1\"]);\n+        assert res == [\"rpath1\", \"rpath2\"];\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn test_relative_to1() {\n+        let p1 = \"/usr/bin/rustc\";\n+        let p2 = \"/usr/lib/mylib\";\n+        let res = get_relative_to(p1, p2);\n+        assert res == \"../lib\";\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn test_relative_to2() {\n+        let p1 = \"/usr/bin/rustc\";\n+        let p2 = \"/usr/bin/../lib/mylib\";\n+        let res = get_relative_to(p1, p2);\n+        assert res == \"../lib\";\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn test_relative_to3() {\n+        let p1 = \"/usr/bin/whatever/rustc\";\n+        let p2 = \"/usr/lib/whatever/mylib\";\n+        let res = get_relative_to(p1, p2);\n+        assert res == \"../../lib/whatever\";\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn test_relative_to4() {\n+        let p1 = \"/usr/bin/whatever/../rustc\";\n+        let p2 = \"/usr/lib/whatever/mylib\";\n+        let res = get_relative_to(p1, p2);\n+        assert res == \"../lib/whatever\";\n+    }\n+\n+    #[test]\n+    #[ignore]\n+    fn test_relative_to5() {\n+        let p1 = \"/usr/bin/whatever/../rustc\";\n+        let p2 = \"/usr/lib/whatever/../mylib\";\n+        let res = get_relative_to(p1, p2);\n+        assert res == \"../lib/whatever\";\n+    }\n+}"}, {"sha": "9b1dff75769984f1504ca7d5f58884e70c32db52", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19ba9b4d8d0fec474acbbd472e17ef0351c20df2/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/19ba9b4d8d0fec474acbbd472e17ef0351c20df2/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=19ba9b4d8d0fec474acbbd472e17ef0351c20df2", "patch": "@@ -91,6 +91,7 @@ mod back {\n     mod abi;\n     mod upcall;\n     mod x86;\n+    mod rpath;\n }\n \n mod metadata {"}, {"sha": "792ea029724e4a23f846a01fcf3e6f8620e07489", "filename": "src/comp/util/filesearch.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19ba9b4d8d0fec474acbbd472e17ef0351c20df2/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ba9b4d8d0fec474acbbd472e17ef0351c20df2/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=19ba9b4d8d0fec474acbbd472e17ef0351c20df2", "patch": "@@ -1,4 +1,6 @@\n // A module for searching for libraries\n+// FIXME: I'm not happy how this module turned out. Should probably\n+// just be folded into cstore.\n \n import std::option;\n import std::fs;\n@@ -12,6 +14,7 @@ export mk_filesearch;\n export pick;\n export pick_file;\n export search;\n+export relative_target_lib_path;\n \n type pick<@T> = block(path: fs::path) -> option::t<T>;\n \n@@ -71,17 +74,21 @@ fn search<@T>(filesearch: filesearch, pick: pick<T>) -> option::t<T> {\n     ret option::none;\n }\n \n+fn relative_target_lib_path(target_triple: str) -> [fs::path] {\n+    [\"lib\", \"rustc\", target_triple, \"lib\"]\n+}\n+\n fn make_target_lib_path(sysroot: fs::path,\n                         target_triple: str) -> fs::path {\n-    let path = [sysroot, \"lib/rustc\", target_triple, \"lib\"];\n+    let path = [sysroot] + relative_target_lib_path(target_triple);\n     check vec::is_not_empty(path);\n     let path = fs::connect_many(path);\n     ret path;\n }\n \n fn get_default_sysroot() -> fs::path {\n     alt os::get_exe_path() {\n-      option::some(p) { fs::connect(p, \"../\") }\n+      option::some(p) { fs::connect(p, \"..\") }\n       option::none. {\n         fail \"can't determine value for sysroot\";\n       }"}]}