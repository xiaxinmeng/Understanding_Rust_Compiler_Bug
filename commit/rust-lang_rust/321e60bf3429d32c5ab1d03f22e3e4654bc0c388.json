{"sha": "321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "node_id": "C_kwDOAAsO6NoAKDMyMWU2MGJmMzQyOWQzMmM1YWIxZDAzZjIyZTNlNDY1NGJjMGMzODg", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-05T04:15:50Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-05T06:18:45Z"}, "message": "UPDATE - into_diagnostic to take a Handler instead of a ParseSess\n\nSuggested by the team in this Zulip Topic https://rust-lang.zulipchat.com/#narrow/stream/336883-i18n/topic/.23100717.20SessionDiagnostic.20on.20Handler\n\nHandler already has almost all the capabilities of ParseSess when it comes to diagnostic emission, in this migration we only needed to add the ability to access source_map from the emitter in order to get a Snippet and the start_point. Not sure if this is the best way to address this gap", "tree": {"sha": "b2b60c3686a743d88a852e418dc94e56262661f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2b60c3686a743d88a852e418dc94e56262661f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "html_url": "https://github.com/rust-lang/rust/commit/321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318", "html_url": "https://github.com/rust-lang/rust/commit/a2cdcb3fea2baae5d20eabaa412e0d2f5b98c318"}], "stats": {"total": 142, "additions": 85, "deletions": 57}, "files": [{"sha": "f74540e9655bcac63fd1a05b17c4b44b77d6266e", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -1,9 +1,11 @@\n use std::num::IntErrorKind;\n \n use rustc_ast as ast;\n-use rustc_errors::{error_code, fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{\n+    error_code, fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler,\n+};\n use rustc_macros::SessionDiagnostic;\n-use rustc_session::{parse::ParseSess, SessionDiagnostic};\n+use rustc_session::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n \n use crate::UnsupportedLiteralReason;\n@@ -49,9 +51,9 @@ pub(crate) struct UnknownMetaItem<'a> {\n \n // Manual implementation to be able to format `expected` items correctly.\n impl<'a> SessionDiagnostic<'a> for UnknownMetaItem<'_> {\n-    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let expected = self.expected.iter().map(|name| format!(\"`{}`\", name)).collect::<Vec<_>>();\n-        let mut diag = sess.span_diagnostic.struct_span_err_with_code(\n+        let mut diag = handler.struct_span_err_with_code(\n             self.span,\n             fluent::attr::unknown_meta_item,\n             error_code!(E0541),\n@@ -207,8 +209,8 @@ pub(crate) struct UnsupportedLiteral {\n }\n \n impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n-    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        let mut diag = sess.span_diagnostic.struct_span_err_with_code(\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        let mut diag = handler.struct_span_err_with_code(\n             self.span,\n             match self.reason {\n                 UnsupportedLiteralReason::Generic => fluent::attr::unsupported_literal_generic,\n@@ -223,8 +225,10 @@ impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n             error_code!(E0565),\n         );\n         if self.is_bytestr {\n+            let start_point = handler.span_start_point_from_emitter(self.span).unwrap_or(self.span);\n+\n             diag.span_suggestion(\n-                sess.source_map().start_point(self.span),\n+                start_point,\n                 fluent::attr::unsupported_literal_suggestion,\n                 \"\",\n                 Applicability::MaybeIncorrect,"}, {"sha": "af554db301376349c0c57963c6ef59d7d05adb93", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -1098,6 +1098,28 @@ impl Handler {\n         );\n         std::mem::take(&mut self.inner.borrow_mut().fulfilled_expectations)\n     }\n+\n+    pub fn span_to_snippet_from_emitter(\n+        &self,\n+        span: rustc_span::Span,\n+    ) -> Option<Result<String, rustc_span::SpanSnippetError>> {\n+        self.inner\n+            .borrow()\n+            .emitter\n+            .source_map()\n+            .map_or_else(|| Option::None, |sm| Some(sm.span_to_snippet(span)))\n+    }\n+\n+    pub fn span_start_point_from_emitter(\n+        &self,\n+        span: rustc_span::Span,\n+    ) -> Option<rustc_span::Span> {\n+        self.inner\n+            .borrow()\n+            .emitter\n+            .source_map()\n+            .map_or_else(|| Option::None, |sm| Some(sm.start_point(span)))\n+    }\n }\n \n impl HandlerInner {"}, {"sha": "44c8084d732d07ca4c852b73bf5d2d4cff106d3f", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -341,7 +341,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 multi_suggestions,\n                 bad_label,\n             }\n-            .into_diagnostic(&self.tcx.sess.parse_sess),\n+            .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n             TypeAnnotationNeeded::E0283 => AmbigousImpl {\n                 span,\n                 source_kind,\n@@ -351,7 +351,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 multi_suggestions,\n                 bad_label,\n             }\n-            .into_diagnostic(&self.tcx.sess.parse_sess),\n+            .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n             TypeAnnotationNeeded::E0284 => AmbigousReturn {\n                 span,\n                 source_kind,\n@@ -361,7 +361,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 multi_suggestions,\n                 bad_label,\n             }\n-            .into_diagnostic(&self.tcx.sess.parse_sess),\n+            .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n         }\n     }\n \n@@ -537,7 +537,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 multi_suggestions,\n                 bad_label: None,\n             }\n-            .into_diagnostic(&self.tcx.sess.parse_sess),\n+            .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n             TypeAnnotationNeeded::E0283 => AmbigousImpl {\n                 span,\n                 source_kind,\n@@ -547,7 +547,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 multi_suggestions,\n                 bad_label: None,\n             }\n-            .into_diagnostic(&self.tcx.sess.parse_sess),\n+            .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n             TypeAnnotationNeeded::E0284 => AmbigousReturn {\n                 span,\n                 source_kind,\n@@ -557,7 +557,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 multi_suggestions,\n                 bad_label: None,\n             }\n-            .into_diagnostic(&self.tcx.sess.parse_sess),\n+            .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n         }\n     }\n \n@@ -575,7 +575,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             span,\n             generator_kind: GeneratorKindAsDiagArg(kind),\n         }\n-        .into_diagnostic(&self.tcx.sess.parse_sess)\n+        .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic)\n     }\n }\n "}, {"sha": "5c183d4091ea9ae7d462deb5e1347b8048062b38", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -1,6 +1,6 @@\n-use rustc_errors::{fluent, AddSubdiagnostic, ErrorGuaranteed};\n+use rustc_errors::{fluent, AddSubdiagnostic, ErrorGuaranteed, Handler};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n-use rustc_session::{lint::Level, parse::ParseSess, SessionDiagnostic};\n+use rustc_session::{lint::Level, SessionDiagnostic};\n use rustc_span::{Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n@@ -122,9 +122,9 @@ pub struct CheckNameUnknown {\n impl SessionDiagnostic<'_> for CheckNameUnknown {\n     fn into_diagnostic(\n         self,\n-        sess: &ParseSess,\n+        handler: &Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = sess.struct_err(fluent::lint::check_name_unknown);\n+        let mut diag = handler.struct_err(fluent::lint::check_name_unknown);\n         diag.code(rustc_errors::error_code!(E0602));\n         if let Some(suggestion) = self.suggestion {\n             diag.help(fluent::lint::help);"}, {"sha": "cf1c5945529144d75425f120697e05da379718a5", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -88,7 +88,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n             {\n                 fn into_diagnostic(\n                     self,\n-                    #sess: &'__session_diagnostic_sess rustc_session::parse::ParseSess\n+                    #sess: &'__session_diagnostic_sess rustc_errors::Handler\n                 ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, G> {\n                     use rustc_errors::IntoDiagnosticArg;\n                     #implementation"}, {"sha": "8378d2b791d00d63cce0720af0e605c364efb557", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -424,9 +424,9 @@ pub(crate) struct MultipleCandidates {\n impl SessionDiagnostic<'_> for MultipleCandidates {\n     fn into_diagnostic(\n         self,\n-        sess: &'_ rustc_session::parse::ParseSess,\n+        handler: &'_ rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = sess.struct_err(rustc_errors::fluent::metadata::multiple_candidates);\n+        let mut diag = handler.struct_err(rustc_errors::fluent::metadata::multiple_candidates);\n         diag.set_arg(\"crate_name\", self.crate_name);\n         diag.set_arg(\"flavor\", self.flavor);\n         diag.code(error_code!(E0465));\n@@ -540,9 +540,9 @@ pub struct InvalidMetadataFiles {\n impl SessionDiagnostic<'_> for InvalidMetadataFiles {\n     fn into_diagnostic(\n         self,\n-        sess: &'_ rustc_session::parse::ParseSess,\n+        handler: &'_ rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = sess.struct_err(rustc_errors::fluent::metadata::invalid_meta_files);\n+        let mut diag = handler.struct_err(rustc_errors::fluent::metadata::invalid_meta_files);\n         diag.set_arg(\"crate_name\", self.crate_name);\n         diag.set_arg(\"add_info\", self.add_info);\n         diag.code(error_code!(E0786));\n@@ -568,9 +568,9 @@ pub struct CannotFindCrate {\n impl SessionDiagnostic<'_> for CannotFindCrate {\n     fn into_diagnostic(\n         self,\n-        sess: &'_ rustc_session::parse::ParseSess,\n+        handler: &'_ rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = sess.struct_err(rustc_errors::fluent::metadata::cannot_find_crate);\n+        let mut diag = handler.struct_err(rustc_errors::fluent::metadata::cannot_find_crate);\n         diag.set_arg(\"crate_name\", self.crate_name);\n         diag.set_arg(\"add_info\", self.add_info);\n         diag.set_arg(\"locator_triple\", self.locator_triple.triple());"}, {"sha": "d5f05e790d3883f531e740f8185116ac6309cbc2", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -47,9 +47,10 @@ pub struct UnusedGenericParams {\n impl SessionDiagnostic<'_> for UnusedGenericParams {\n     fn into_diagnostic(\n         self,\n-        sess: &'_ rustc_session::parse::ParseSess,\n+        handler: &'_ rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = sess.struct_err(rustc_errors::fluent::monomorphize::unused_generic_params);\n+        let mut diag =\n+            handler.struct_err(rustc_errors::fluent::monomorphize::unused_generic_params);\n         diag.set_span(self.span);\n         for (span, name) in self.param_spans.into_iter().zip(self.param_names) {\n             // FIXME: I can figure out how to do a label with a fluent string with a fixed message,"}, {"sha": "7addf519872f03f82332881aad134a28edd4bb11", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -1997,7 +1997,7 @@ impl<'a> Parser<'a> {\n                     return Err(MissingSemicolonBeforeArray {\n                         open_delim: open_delim_span,\n                         semicolon: prev_span.shrink_to_hi(),\n-                    }.into_diagnostic(self.sess));\n+                    }.into_diagnostic(&self.sess.span_diagnostic));\n                 }\n                 Ok(_) => (),\n                 Err(err) => err.cancel(),\n@@ -2745,7 +2745,8 @@ impl<'a> Parser<'a> {\n     fn parse_try_block(&mut self, span_lo: Span) -> PResult<'a, P<Expr>> {\n         let (attrs, body) = self.parse_inner_attrs_and_block()?;\n         if self.eat_keyword(kw::Catch) {\n-            Err(CatchAfterTry { span: self.prev_token.span }.into_diagnostic(self.sess))\n+            Err(CatchAfterTry { span: self.prev_token.span }\n+                .into_diagnostic(&self.sess.span_diagnostic))\n         } else {\n             let span = span_lo.to(body.span);\n             self.sess.gated_spans.gate(sym::try_blocks, span);"}, {"sha": "45b4079fb54f8067b5e2a937a2dd82a03b71d436", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -572,7 +572,7 @@ pub(crate) fn report_cycle<'a>(\n         stack_count,\n     };\n \n-    cycle_diag.into_diagnostic(&sess.parse_sess)\n+    cycle_diag.into_diagnostic(&sess.parse_sess.span_diagnostic)\n }\n \n pub fn print_query_stack<CTX: QueryContext>("}, {"sha": "9bc7fbfbe149172817d2b4bf39d4e8fd75f6f401", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -343,7 +343,7 @@ impl ParseSess {\n         &'a self,\n         err: impl SessionDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        err.into_diagnostic(self)\n+        err.into_diagnostic(&self.span_diagnostic)\n     }\n \n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n@@ -354,7 +354,7 @@ impl ParseSess {\n         &'a self,\n         warning: impl SessionDiagnostic<'a, ()>,\n     ) -> DiagnosticBuilder<'a, ()> {\n-        warning.into_diagnostic(self)\n+        warning.into_diagnostic(&self.span_diagnostic)\n     }\n \n     pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n@@ -365,7 +365,7 @@ impl ParseSess {\n         &'a self,\n         fatal: impl SessionDiagnostic<'a, !>,\n     ) -> DiagnosticBuilder<'a, !> {\n-        fatal.into_diagnostic(self)\n+        fatal.into_diagnostic(&self.span_diagnostic)\n     }\n \n     pub fn emit_fatal<'a>(&'a self, fatal: impl SessionDiagnostic<'a, !>) -> ! {"}, {"sha": "557edad548c64a2a3b0de2679bf7e65e41391b1c", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -21,7 +21,7 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n     error_code, fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n-    EmissionGuarantee, ErrorGuaranteed, FluentBundle, LazyFallbackBundle, MultiSpan,\n+    EmissionGuarantee, ErrorGuaranteed, FluentBundle, Handler, LazyFallbackBundle, MultiSpan,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -220,9 +220,9 @@ pub struct PerfStats {\n /// `#[derive(SessionDiagnostic)]` -- see [rustc_macros::SessionDiagnostic].\n #[rustc_diagnostic_item = \"SessionDiagnostic\"]\n pub trait SessionDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n-    /// Write out as a diagnostic out of `sess`.\n+    /// Write out as a diagnostic out of `Handler`.\n     #[must_use]\n-    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, T>;\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, T>;\n }\n \n impl Session {"}, {"sha": "ab0afc545146ec7df255ede3a1cf51169a63fa71", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -1,7 +1,7 @@\n-use rustc_errors::{fluent, ErrorGuaranteed};\n+use rustc_errors::{fluent, ErrorGuaranteed, Handler};\n use rustc_macros::SessionDiagnostic;\n use rustc_middle::ty::{PolyTraitRef, Ty, Unevaluated};\n-use rustc_session::{parse::ParseSess, Limit, SessionDiagnostic};\n+use rustc_session::{Limit, SessionDiagnostic};\n use rustc_span::{Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n@@ -69,9 +69,9 @@ pub struct NegativePositiveConflict<'a> {\n impl SessionDiagnostic<'_> for NegativePositiveConflict<'_> {\n     fn into_diagnostic(\n         self,\n-        sess: &ParseSess,\n+        handler: &Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = sess.struct_err(fluent::trait_selection::negative_positive_conflict);\n+        let mut diag = handler.struct_err(fluent::trait_selection::negative_positive_conflict);\n         diag.set_arg(\"trait_desc\", self.trait_desc);\n         diag.set_arg(\n             \"self_desc\","}, {"sha": "bfe03d6257518560e616d4b3869e85550af71c3a", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -1,8 +1,8 @@\n //! Errors emitted by typeck.\n-use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler};\n use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n-use rustc_session::{parse::ParseSess, SessionDiagnostic};\n+use rustc_session::SessionDiagnostic;\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n@@ -250,8 +250,8 @@ pub struct MissingTypeParams {\n \n // Manual implementation of `SessionDiagnostic` to be able to call `span_to_snippet`.\n impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n-    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        let mut err = sess.span_diagnostic.struct_span_err_with_code(\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        let mut err = handler.struct_span_err_with_code(\n             self.span,\n             rustc_errors::fluent::typeck::missing_type_params,\n             error_code!(E0393),\n@@ -269,8 +269,8 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n         err.span_label(self.def_span, rustc_errors::fluent::typeck::label);\n \n         let mut suggested = false;\n-        if let (Ok(snippet), true) = (\n-            sess.source_map().span_to_snippet(self.span),\n+        if let (Some(Ok(snippet)), true) = (\n+            handler.span_to_snippet_from_emitter(self.span),\n             // Don't suggest setting the type params if there are some already: the order is\n             // tricky to get right and the user will already know what the syntax is.\n             self.empty_generic_args,"}, {"sha": "89997585db25f4ed1978828113a2904708820f56", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/321e60bf3429d32c5ab1d03f22e3e4654bc0c388/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "patch": "@@ -11,9 +11,9 @@ extern crate rustc_macros;\n extern crate rustc_session;\n extern crate rustc_span;\n \n-use rustc_errors::{AddSubdiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, fluent};\n+use rustc_errors::{AddSubdiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, Handler, fluent};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n-use rustc_session::{parse::ParseSess, SessionDiagnostic};\n+use rustc_session::SessionDiagnostic;\n use rustc_span::Span;\n \n #[derive(SessionDiagnostic)]\n@@ -33,17 +33,17 @@ struct Note {\n pub struct UntranslatableInSessionDiagnostic;\n \n impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for UntranslatableInSessionDiagnostic {\n-    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        sess.struct_err(\"untranslatable diagnostic\")\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        handler.struct_err(\"untranslatable diagnostic\")\n         //~^ ERROR diagnostics should be created using translatable messages\n     }\n }\n \n pub struct TranslatableInSessionDiagnostic;\n \n impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for TranslatableInSessionDiagnostic {\n-    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        sess.struct_err(fluent::parser::expect_path)\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        handler.struct_err(fluent::parser::expect_path)\n     }\n }\n \n@@ -64,18 +64,18 @@ impl AddSubdiagnostic for TranslatableInAddSubdiagnostic {\n     }\n }\n \n-pub fn make_diagnostics<'a>(sess: &'a ParseSess) {\n-    let _diag = sess.struct_err(fluent::parser::expect_path);\n+pub fn make_diagnostics<'a>(handler: &'a Handler) {\n+    let _diag = handler.struct_err(fluent::parser::expect_path);\n     //~^ ERROR diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n \n-    let _diag = sess.struct_err(\"untranslatable diagnostic\");\n+    let _diag = handler.struct_err(\"untranslatable diagnostic\");\n     //~^ ERROR diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n     //~^^ ERROR diagnostics should be created using translatable messages\n }\n \n // Check that `rustc_lint_diagnostics`-annotated functions aren't themselves linted.\n \n #[rustc_lint_diagnostics]\n-pub fn skipped_because_of_annotation<'a>(sess: &'a ParseSess) {\n-    let _diag = sess.struct_err(\"untranslatable diagnostic\"); // okay!\n+pub fn skipped_because_of_annotation<'a>(handler: &'a Handler) {\n+    let _diag = handler.struct_err(\"untranslatable diagnostic\"); // okay!\n }"}]}