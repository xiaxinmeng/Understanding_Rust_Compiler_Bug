{"sha": "8b26609481c956a666f9189738f1ba611078e1ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMjY2MDk0ODFjOTU2YTY2NmY5MTg5NzM4ZjFiYTYxMTA3OGUxYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-07T08:36:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-07T08:36:15Z"}, "message": "Auto merge of #70052 - Amanieu:hashbrown7, r=Mark-Simulacrum\n\nUpdate hashbrown to 0.8.1\n\nThis update includes:\n- https://github.com/rust-lang/hashbrown/pull/146, which improves the performance of `Clone` and implements `clone_from`.\n- https://github.com/rust-lang/hashbrown/pull/159, which reduces the size of `HashMap` by 8 bytes.\n- https://github.com/rust-lang/hashbrown/pull/162, which avoids creating small 1-element tables.\n\nFixes #28481", "tree": {"sha": "f48fffe054cc9476f8cec34e18ccb62fe0d64aa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f48fffe054cc9476f8cec34e18ccb62fe0d64aa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b26609481c956a666f9189738f1ba611078e1ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b26609481c956a666f9189738f1ba611078e1ab", "html_url": "https://github.com/rust-lang/rust/commit/8b26609481c956a666f9189738f1ba611078e1ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b26609481c956a666f9189738f1ba611078e1ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4c940f0821754a98491b2d23fbb5323c14a2bf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c940f0821754a98491b2d23fbb5323c14a2bf5", "html_url": "https://github.com/rust-lang/rust/commit/d4c940f0821754a98491b2d23fbb5323c14a2bf5"}, {"sha": "e46bb17936abd262df4190fcac851cb9d48d10b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e46bb17936abd262df4190fcac851cb9d48d10b4", "html_url": "https://github.com/rust-lang/rust/commit/e46bb17936abd262df4190fcac851cb9d48d10b4"}], "stats": {"total": 113, "additions": 47, "deletions": 66}, "files": [{"sha": "75d644c1ed94a2912db49db1455e46ef054d8bd6", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b26609481c956a666f9189738f1ba611078e1ab/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8b26609481c956a666f9189738f1ba611078e1ab/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8b26609481c956a666f9189738f1ba611078e1ab", "patch": "@@ -137,12 +137,6 @@ dependencies = [\n  \"winapi 0.3.8\",\n ]\n \n-[[package]]\n-name = \"autocfg\"\n-version = \"0.1.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n-\n [[package]]\n name = \"autocfg\"\n version = \"1.0.0\"\n@@ -766,7 +760,7 @@ version = \"0.7.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"c3c7c73a2d1e9fc0886a08b93e98eb643461230d5f1925e4036204d5f2e261a8\"\n dependencies = [\n- \"autocfg 1.0.0\",\n+ \"autocfg\",\n  \"cfg-if\",\n  \"lazy_static\",\n ]\n@@ -1245,11 +1239,11 @@ dependencies = [\n \n [[package]]\n name = \"hashbrown\"\n-version = \"0.6.2\"\n+version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3cd9867f119b19fecb08cd5c326ad4488d7a1da4bf75b4d95d71db742525aaab\"\n+checksum = \"34f595585f103464d8d2f6e9864682d74c1601fed5e07d62b1c9058dba8246fb\"\n dependencies = [\n- \"autocfg 0.1.7\",\n+ \"autocfg\",\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\",\n  \"rustc-std-workspace-core\",\n@@ -2079,7 +2073,7 @@ version = \"0.9.54\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"1024c0a59774200a555087a6da3f253a9095a5f344e353b212ac4c8b8e450986\"\n dependencies = [\n- \"autocfg 1.0.0\",\n+ \"autocfg\",\n  \"cc\",\n  \"libc\",\n  \"openssl-src\","}, {"sha": "fc07fa77b85e7660cebdd53a9e24d30cae5c5ff7", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b26609481c956a666f9189738f1ba611078e1ab/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8b26609481c956a666f9189738f1ba611078e1ab/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=8b26609481c956a666f9189738f1ba611078e1ab", "patch": "@@ -20,7 +20,7 @@ libc = { version = \"0.2.51\", default-features = false, features = ['rustc-dep-of\n compiler_builtins = { version = \"0.1.32\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }\n-hashbrown = { version = \"0.6.2\", default-features = false, features = ['rustc-dep-of-std'] }\n+hashbrown = { version = \"0.8.1\", default-features = false, features = ['rustc-dep-of-std'] }\n \n # Dependencies of the `backtrace` crate\n addr2line = { version = \"0.13.0\", optional = true, default-features = false }"}, {"sha": "c40d6119fdfc9a46158bc2df88cd801dd7ef70d7", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b26609481c956a666f9189738f1ba611078e1ab/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b26609481c956a666f9189738f1ba611078e1ab/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=8b26609481c956a666f9189738f1ba611078e1ab", "patch": "@@ -580,7 +580,7 @@ where\n     #[inline]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n-        self.base.try_reserve(additional).map_err(map_collection_alloc_err)\n+        self.base.try_reserve(additional).map_err(map_try_reserve_error)\n     }\n \n     /// Shrinks the capacity of the map as much as possible. It will drop\n@@ -2569,10 +2569,10 @@ fn map_entry<'a, K: 'a, V: 'a>(raw: base::RustcEntry<'a, K, V>) -> Entry<'a, K,\n }\n \n #[inline]\n-fn map_collection_alloc_err(err: hashbrown::CollectionAllocErr) -> TryReserveError {\n+fn map_try_reserve_error(err: hashbrown::TryReserveError) -> TryReserveError {\n     match err {\n-        hashbrown::CollectionAllocErr::CapacityOverflow => TryReserveError::CapacityOverflow,\n-        hashbrown::CollectionAllocErr::AllocErr { layout } => {\n+        hashbrown::TryReserveError::CapacityOverflow => TryReserveError::CapacityOverflow,\n+        hashbrown::TryReserveError::AllocError { layout } => {\n             TryReserveError::AllocError { layout, non_exhaustive: () }\n         }\n     }"}, {"sha": "67f99ec4e40b923ca315e0d630f63ab22edd6ee5", "filename": "src/etc/gdb_providers.py", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b26609481c956a666f9189738f1ba611078e1ab/src%2Fetc%2Fgdb_providers.py", "raw_url": "https://github.com/rust-lang/rust/raw/8b26609481c956a666f9189738f1ba611078e1ab/src%2Fetc%2Fgdb_providers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_providers.py?ref=8b26609481c956a666f9189738f1ba611078e1ab", "patch": "@@ -352,8 +352,13 @@ def __init__(self, valobj, show_values=True):\n         ctrl = table[\"ctrl\"][\"pointer\"]\n \n         self.size = int(table[\"items\"])\n-        self.data_ptr = table[\"data\"][\"pointer\"]\n-        self.pair_type = self.data_ptr.dereference().type\n+        self.pair_type = table.type.template_argument(0)\n+\n+        self.new_layout = not table.type.has_key(\"data\")\n+        if self.new_layout:\n+            self.data_ptr = ctrl.cast(self.pair_type.pointer())\n+        else:\n+            self.data_ptr = table[\"data\"][\"pointer\"]\n \n         self.valid_indices = []\n         for idx in range(capacity):\n@@ -374,6 +379,8 @@ def children(self):\n \n         for index in range(self.size):\n             idx = self.valid_indices[index]\n+            if self.new_layout:\n+                idx = -(idx + 1)\n             element = (pairs_start + idx).dereference()\n             if self.show_values:\n                 yield \"key{}\".format(index), element[ZERO_FIELD]"}, {"sha": "19da75c35b456b4e12efdf826c5d61df852a35c2", "filename": "src/etc/lldb_providers.py", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b26609481c956a666f9189738f1ba611078e1ab/src%2Fetc%2Flldb_providers.py", "raw_url": "https://github.com/rust-lang/rust/raw/8b26609481c956a666f9189738f1ba611078e1ab/src%2Fetc%2Flldb_providers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_providers.py?ref=8b26609481c956a666f9189738f1ba611078e1ab", "patch": "@@ -514,6 +514,8 @@ def get_child_at_index(self, index):\n         # type: (int) -> SBValue\n         pairs_start = self.data_ptr.GetValueAsUnsigned()\n         idx = self.valid_indices[index]\n+        if self.new_layout:\n+            idx = -(idx + 1)\n         address = pairs_start + idx * self.pair_type_size\n         element = self.data_ptr.CreateValueFromAddress(\"[%s]\" % index, address, self.pair_type)\n         if self.show_values:\n@@ -529,10 +531,15 @@ def update(self):\n         ctrl = table.GetChildMemberWithName(\"ctrl\").GetChildAtIndex(0)\n \n         self.size = table.GetChildMemberWithName(\"items\").GetValueAsUnsigned()\n-        self.data_ptr = table.GetChildMemberWithName(\"data\").GetChildAtIndex(0)\n-        self.pair_type = self.data_ptr.Dereference().GetType()\n+        self.pair_type = table.type.template_args[0]\n         self.pair_type_size = self.pair_type.GetByteSize()\n \n+        self.new_layout = not table.GetChildMemberWithName(\"data\").IsValid()\n+        if self.new_layout:\n+            self.data_ptr = ctrl.Cast(self.pair_type.GetPointerType())\n+        else:\n+            self.data_ptr = table.GetChildMemberWithName(\"data\").GetChildAtIndex(0)\n+\n         u8_type = self.valobj.GetTarget().GetBasicType(eBasicTypeUnsignedChar)\n         u8_type_size = self.valobj.GetTarget().GetBasicType(eBasicTypeUnsignedChar).GetByteSize()\n "}, {"sha": "4e81173d3d0b875c47626b6269173379f1606b04", "filename": "src/etc/natvis/libstd.natvis", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8b26609481c956a666f9189738f1ba611078e1ab/src%2Fetc%2Fnatvis%2Flibstd.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/8b26609481c956a666f9189738f1ba611078e1ab/src%2Fetc%2Fnatvis%2Flibstd.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibstd.natvis?ref=8b26609481c956a666f9189738f1ba611078e1ab", "patch": "@@ -30,6 +30,7 @@\n     <Expand>\n       <Item Name=\"[size]\">base.table.items</Item>\n       <Item Name=\"[capacity]\">base.table.items + base.table.growth_left</Item>\n+      <Item Name=\"[state]\">base.hash_builder</Item>\n \n       <CustomListItems>\n         <Variable Name=\"i\" InitialValue=\"0\" />\n@@ -40,7 +41,7 @@\n           <If Condition=\"(base.table.ctrl.pointer[i] &amp; 0x80) == 0\">\n             <!-- Bucket is populated -->\n             <Exec>n--</Exec>\n-            <Item Name=\"{base.table.data.pointer[i].__0}\">base.table.data.pointer[i].__1</Item>\n+            <Item Name=\"{static_cast&lt;tuple&lt;$T1, $T2&gt;*&gt;(base.table.ctrl.pointer)[-(i + 1)].__0}\">static_cast&lt;tuple&lt;$T1, $T2&gt;*&gt;(base.table.ctrl.pointer)[-(i + 1)].__1</Item>\n           </If>\n           <Exec>i++</Exec>\n         </Loop>\n@@ -53,6 +54,7 @@\n     <Expand>\n       <Item Name=\"[size]\">map.base.table.items</Item>\n       <Item Name=\"[capacity]\">map.base.table.items + map.base.table.growth_left</Item>\n+      <Item Name=\"[state]\">map.base.hash_builder</Item>\n \n       <CustomListItems>\n         <Variable Name=\"i\" InitialValue=\"0\" />\n@@ -63,36 +65,7 @@\n           <If Condition=\"(map.base.table.ctrl.pointer[i] &amp; 0x80) == 0\">\n             <!-- Bucket is populated -->\n             <Exec>n--</Exec>\n-            <Item>map.base.table.data.pointer[i].__0</Item>\n-          </If>\n-          <Exec>i++</Exec>\n-        </Loop>\n-      </CustomListItems>\n-    </Expand>\n-  </Type>\n-\n-  <Type Name=\"hashbrown::raw::RawTable&lt;*&gt;\">\n-    <!-- RawTable has a nice and simple layout.\n-      items                     Number of *populated* values in the RawTable (less than the size of ctrl.pointer / data.pointer)\n-      growth_left               Remaining capacity before growth\n-      ctrl.pointer[i] & 0x80    Indicates the bucket is empty / should be skipped / doesn't count towards items.\n-      data.pointer[i]           The (K,V) tuple, if not empty.\n-    -->\n-    <DisplayString>{{ size={items} }}</DisplayString>\n-    <Expand>\n-      <Item Name=\"[size]\">items</Item>\n-      <Item Name=\"[capacity]\">items + growth_left</Item>\n-\n-      <CustomListItems>\n-        <Variable Name=\"i\" InitialValue=\"0\" />\n-        <Variable Name=\"n\" InitialValue=\"items\" />\n-        <Size>items</Size>\n-        <Loop>\n-          <Break Condition=\"n == 0\" />\n-          <If Condition=\"(ctrl.pointer[i] &amp; 0x80) == 0\">\n-            <!-- Bucket is populated -->\n-            <Exec>n--</Exec>\n-            <Item>data.pointer[i]</Item>\n+            <Item>static_cast&lt;$T1*&gt;(map.base.table.ctrl.pointer)[-(i + 1)]</Item>\n           </If>\n           <Exec>i++</Exec>\n         </Loop>"}, {"sha": "e8f52deabd80917992bbe3c43ccd0defabe45f64", "filename": "src/test/debuginfo/pretty-std-collections-hash.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8b26609481c956a666f9189738f1ba611078e1ab/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b26609481c956a666f9189738f1ba611078e1ab/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs?ref=8b26609481c956a666f9189738f1ba611078e1ab", "patch": "@@ -9,35 +9,35 @@\n // cdb-check:hash_set,d [...] : { size=15 } [Type: [...]::HashSet<u64, [...]>]\n // cdb-check:    [size]           : 15 [Type: [...]]\n // cdb-check:    [capacity]       : [...]\n-// cdb-check:    [[...]] [...]    : 0 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 0 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 1 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 1 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 2 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 2 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 3 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 3 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 4 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 4 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 5 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 5 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 6 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 6 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 7 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 7 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 8 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 8 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 9 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 9 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 10 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 10 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 11 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 11 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 12 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 12 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 13 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 13 [Type: u64]\n // cdb-command: dx hash_set,d\n-// cdb-check:    [[...]] [...]    : 14 [Type: unsigned __int64]\n+// cdb-check:    [[...]] [...]    : 14 [Type: u64]\n \n // cdb-command: dx hash_map,d\n // cdb-check:hash_map,d [...] : { size=15 } [Type: [...]::HashMap<u64, u64, [...]>]"}]}