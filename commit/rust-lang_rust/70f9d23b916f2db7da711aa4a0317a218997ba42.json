{"sha": "70f9d23b916f2db7da711aa4a0317a218997ba42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZjlkMjNiOTE2ZjJkYjdkYTcxMWFhNGEwMzE3YTIxODk5N2JhNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-07T00:56:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-07T00:56:44Z"}, "message": "Auto merge of #74117 - Manishearth:rollup-ds7z0kx, r=Manishearth\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #70563 ([rustdoc] Page hash handling)\n - #73856 (Edit librustc_lexer top-level docs)\n - #73870 (typeck: adding type information to projection)\n - #73953 (Audit hidden/short code suggestions)\n - #73962 (libstd/net/tcp.rs: #![deny(unsafe_op_in_unsafe_fn)])\n - #73969 (mir: mark mir construction temporaries as internal)\n - #73974 (Move A|Rc::as_ptr from feature(weak_into_raw) to feature(rc_as_ptr))\n - #74067 (rustdoc: Restore underline text decoration on hover for FQN in header)\n - #74074 (Fix the return type of Windows' `OpenOptionsExt::security_qos_flags`.)\n - #74078 (Always resolve type@primitive as a primitive, not a module)\n - #74089 (Add rust-analyzer to the build manifest)\n - #74090 (Remove unused RUSTC_DEBUG_ASSERTIONS)\n - #74102 (Fix const prop ICE)\n - #74112 (Expand abbreviation in core::ffi description)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "583d0a11c2b82dc7ebc149ebbcdab4523dedbdfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/583d0a11c2b82dc7ebc149ebbcdab4523dedbdfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70f9d23b916f2db7da711aa4a0317a218997ba42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70f9d23b916f2db7da711aa4a0317a218997ba42", "html_url": "https://github.com/rust-lang/rust/commit/70f9d23b916f2db7da711aa4a0317a218997ba42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70f9d23b916f2db7da711aa4a0317a218997ba42/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8981dbbc36f1575b0a417b6849767bde29e7c6b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8981dbbc36f1575b0a417b6849767bde29e7c6b4", "html_url": "https://github.com/rust-lang/rust/commit/8981dbbc36f1575b0a417b6849767bde29e7c6b4"}, {"sha": "73f2069d529c9d945967dd8f1a3b71b6003c7f96", "url": "https://api.github.com/repos/rust-lang/rust/commits/73f2069d529c9d945967dd8f1a3b71b6003c7f96", "html_url": "https://github.com/rust-lang/rust/commit/73f2069d529c9d945967dd8f1a3b71b6003c7f96"}], "stats": {"total": 2590, "additions": 2048, "deletions": 542}, "files": [{"sha": "8c56cf1cb3414bb1508114f63ce389b9a4fddc20", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -13,7 +13,6 @@ fn main() {\n     let libdir = env::var_os(\"RUSTDOC_LIBDIR\").expect(\"RUSTDOC_LIBDIR was not set\");\n     let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n-    let mut has_unstable = false;\n \n     use std::str::FromStr;\n \n@@ -55,22 +54,10 @@ fn main() {\n         cmd.arg(\"--crate-version\").arg(version);\n     }\n \n-    // Needed to be able to run all rustdoc tests.\n-    if env::var_os(\"RUSTDOC_GENERATE_REDIRECT_PAGES\").is_some() {\n-        // This \"unstable-options\" can be removed when `--generate-redirect-pages` is stabilized\n-        if !has_unstable {\n-            cmd.arg(\"-Z\").arg(\"unstable-options\");\n-        }\n-        cmd.arg(\"--generate-redirect-pages\");\n-        has_unstable = true;\n-    }\n-\n     // Needed to be able to run all rustdoc tests.\n     if let Some(ref x) = env::var_os(\"RUSTDOC_RESOURCE_SUFFIX\") {\n         // This \"unstable-options\" can be removed when `--resource-suffix` is stabilized\n-        if !has_unstable {\n-            cmd.arg(\"-Z\").arg(\"unstable-options\");\n-        }\n+        cmd.arg(\"-Z\").arg(\"unstable-options\");\n         cmd.arg(\"--resource-suffix\").arg(x);\n     }\n "}, {"sha": "ed351354c441d904dc9a52ad3ceab5b7f2f15dd3", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -451,7 +451,6 @@ impl Step for Std {\n                 .arg(\"--markdown-css\")\n                 .arg(\"rust.css\")\n                 .arg(\"--markdown-no-toc\")\n-                .arg(\"--generate-redirect-pages\")\n                 .arg(\"-Z\")\n                 .arg(\"unstable-options\")\n                 .arg(\"--resource-suffix\")"}, {"sha": "312532558090edf22103cdf10241fa7a2747baa3", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -397,8 +397,6 @@ impl Step for Miri {\n             cargo.env(\"MIRI\", &miri);\n             // Debug things.\n             cargo.env(\"RUST_BACKTRACE\", \"1\");\n-            // Overwrite bootstrap's `rustc` wrapper overwriting our flags.\n-            cargo.env(\"RUSTC_DEBUG_ASSERTIONS\", \"true\");\n             // Let cargo-miri know where xargo ended up.\n             cargo.env(\"XARGO_CHECK\", builder.out.join(\"bin\").join(\"xargo-check\"));\n "}, {"sha": "77ff567aa7af172c074b3c744f180900e77c326c", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1701,7 +1701,7 @@ impl<T> Weak<T> {\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html\n-    #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n+    #[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(self.ptr);\n "}, {"sha": "0053a54f20346cbc0408011e13ce4a89e5ba67f5", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -587,7 +587,7 @@ impl<T: ?Sized> Arc<T> {\n     /// assert_eq!(x_ptr, Arc::as_ptr(&y));\n     /// assert_eq!(unsafe { &*x_ptr }, \"hello\");\n     /// ```\n-    #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n+    #[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n "}, {"sha": "ee3192eddbd06ec67db6f4d9e9546e86cec0cc4c", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,7 +1,7 @@\n #![stable(feature = \"\", since = \"1.30.0\")]\n #![allow(non_camel_case_types)]\n \n-//! Utilities related to FFI bindings.\n+//! Utilities related to foreign function interface (FFI) bindings.\n \n use crate::fmt;\n use crate::marker::PhantomData;"}, {"sha": "2becbe2f6758a8b0264f0e152054982cc853de07", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -280,6 +280,8 @@ impl<'a, 'b> Context<'a, 'b> {\n                                 (\"x\", \"LowerHex\"),\n                                 (\"X\", \"UpperHex\"),\n                             ] {\n+                                // FIXME: rustfix (`run-rustfix`) fails to apply suggestions.\n+                                // > \"Cannot replace slice of data that was already replaced\"\n                                 err.tool_only_span_suggestion(\n                                     sp,\n                                     &format!(\"use the `{}` trait\", name),"}, {"sha": "862ffd50d38f6a2e5df2f6b5641f0f245b6867ba", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -6,17 +6,18 @@\n //! produces simple tokens which are a pair of type-tag and a bit of original text,\n //! and does not report errors, instead storing them as flags on the token.\n //!\n-//! Tokens produced by this lexer are not yet ready for parsing the Rust syntax,\n-//! for that see `librustc_parse::lexer`, which converts this basic token stream\n+//! Tokens produced by this lexer are not yet ready for parsing the Rust syntax.\n+//! For that see [`librustc_parse::lexer`], which converts this basic token stream\n //! into wide tokens used by actual parser.\n //!\n //! The purpose of this crate is to convert raw sources into a labeled sequence\n //! of well-known token types, so building an actual Rust token stream will\n //! be easier.\n //!\n-//! Main entity of this crate is [`TokenKind`] enum which represents common\n+//! The main entity of this crate is the [`TokenKind`] enum which represents common\n //! lexeme types.\n-\n+//!\n+//! [`librustc_parse::lexer`]: ../rustc_parse/lexer/index.html\n // We want to be able to build this crate with a stable compiler, so no\n // `#![feature]` attributes should be added.\n "}, {"sha": "fbe3377d87500f754797dfb1845d83c42594a379", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1004,14 +1004,6 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     let expected = ScalarMaybeUninit::from(Scalar::from_bool(*expected));\n                     let value_const = self.ecx.read_scalar(value).unwrap();\n                     if expected != value_const {\n-                        // Poison all places this operand references so that further code\n-                        // doesn't use the invalid value\n-                        match cond {\n-                            Operand::Move(ref place) | Operand::Copy(ref place) => {\n-                                Self::remove_const(&mut self.ecx, place.local);\n-                            }\n-                            Operand::Constant(_) => {}\n-                        }\n                         let mut eval_to_int = |op| {\n                             let op = self\n                                 .eval_operand(op, source_info)\n@@ -1020,27 +1012,37 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                         };\n                         let msg = match msg {\n                             AssertKind::DivisionByZero(op) => {\n-                                AssertKind::DivisionByZero(eval_to_int(op))\n+                                Some(AssertKind::DivisionByZero(eval_to_int(op)))\n                             }\n                             AssertKind::RemainderByZero(op) => {\n-                                AssertKind::RemainderByZero(eval_to_int(op))\n+                                Some(AssertKind::RemainderByZero(eval_to_int(op)))\n                             }\n                             AssertKind::BoundsCheck { ref len, ref index } => {\n                                 let len = eval_to_int(len);\n                                 let index = eval_to_int(index);\n-                                AssertKind::BoundsCheck { len, index }\n+                                Some(AssertKind::BoundsCheck { len, index })\n                             }\n                             // Overflow is are already covered by checks on the binary operators.\n-                            AssertKind::Overflow(..) | AssertKind::OverflowNeg(_) => return,\n+                            AssertKind::Overflow(..) | AssertKind::OverflowNeg(_) => None,\n                             // Need proper const propagator for these.\n-                            _ => return,\n+                            _ => None,\n                         };\n-                        self.report_assert_as_lint(\n-                            lint::builtin::UNCONDITIONAL_PANIC,\n-                            source_info,\n-                            \"this operation will panic at runtime\",\n-                            msg,\n-                        );\n+                        // Poison all places this operand references so that further code\n+                        // doesn't use the invalid value\n+                        match cond {\n+                            Operand::Move(ref place) | Operand::Copy(ref place) => {\n+                                Self::remove_const(&mut self.ecx, place.local);\n+                            }\n+                            Operand::Constant(_) => {}\n+                        }\n+                        if let Some(msg) = msg {\n+                            self.report_assert_as_lint(\n+                                lint::builtin::UNCONDITIONAL_PANIC,\n+                                source_info,\n+                                \"this operation will panic at runtime\",\n+                                msg,\n+                            );\n+                        }\n                     } else {\n                         if self.should_const_prop(value) {\n                             if let ScalarMaybeUninit::Scalar(scalar) = value_const {"}, {"sha": "29651d9bc663a8380f436e8483a9555a8c6ac2bf", "filename": "src/librustc_mir_build/build/misc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -15,7 +15,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// N.B., **No cleanup is scheduled for this temporary.** You should\n     /// call `schedule_drop` once the temporary is initialized.\n     crate fn temp(&mut self, ty: Ty<'tcx>, span: Span) -> Place<'tcx> {\n-        let temp = self.local_decls.push(LocalDecl::new(ty, span));\n+        // Mark this local as internal to avoid temporaries with types not present in the\n+        // user's code resulting in ICEs from the generator transform.\n+        let temp = self.local_decls.push(LocalDecl::new(ty, span).internal());\n         let place = Place::from(temp);\n         debug!(\"temp: created temp {:?} with type {:?}\", place, self.local_decls[temp].ty);\n         place"}, {"sha": "7822c09739049aab36e4c2e631a735e73a1f1dbb", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1228,10 +1228,13 @@ impl<'a> Parser<'a> {\n                 if let Some(sp) = unmatched.unclosed_span {\n                     err.span_label(sp, \"unclosed delimiter\");\n                 }\n+                // Backticks should be removed to apply suggestions.\n+                let mut delim = delim.to_string();\n+                delim.retain(|c| c != '`');\n                 err.span_suggestion_short(\n                     self.prev_token.span.shrink_to_hi(),\n-                    &format!(\"{} may belong here\", delim.to_string()),\n-                    delim.to_string(),\n+                    &format!(\"`{}` may belong here\", delim),\n+                    delim,\n                     Applicability::MaybeIncorrect,\n                 );\n                 if unmatched.found_delim.is_none() {"}, {"sha": "61c680469f03ce15e0b95e60abbd36414464cde2", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -699,7 +699,7 @@ impl<'a> Parser<'a> {\n                                     // misses a separator.\n                                     expect_err\n                                         .span_suggestion_short(\n-                                            sp,\n+                                            self.sess.source_map().next_point(sp),\n                                             &format!(\"missing `{}`\", token_str),\n                                             token_str,\n                                             Applicability::MaybeIncorrect,"}, {"sha": "199f49ca323e023c595d45a55509513119c46158", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -488,7 +488,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     ) {\n         if let mc::PlaceBase::Rvalue = place_with_id.place.base {\n             if place_with_id.place.projections.is_empty() {\n-                let typ = self.resolve_type(place_with_id.place.ty);\n+                let typ = self.resolve_type(place_with_id.place.ty());\n                 let body_id = self.body_id;\n                 let _ = dropck::check_drop_obligations(self, typ, span, body_id);\n             }\n@@ -640,8 +640,8 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         borrow_kind: ty::BorrowKind,\n         borrow_place: &mc::PlaceWithHirId<'tcx>,\n     ) {\n-        let origin = infer::DataBorrowed(borrow_place.place.ty, span);\n-        self.type_must_outlive(origin, borrow_place.place.ty, borrow_region);\n+        let origin = infer::DataBorrowed(borrow_place.place.ty(), span);\n+        self.type_must_outlive(origin, borrow_place.place.ty(), borrow_region);\n \n         for pointer_ty in borrow_place.place.deref_tys() {\n             debug!("}, {"sha": "4e5ef4329c2c612bc68843cf0255d9e0188519f4", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -384,7 +384,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n         // Select just those fields of the `with`\n         // expression that will actually be used\n-        match with_place.place.ty.kind {\n+        match with_place.place.ty().kind {\n             ty::Adt(adt, substs) if adt.is_struct() => {\n                 // Consume those fields of the with expression that are needed.\n                 for (f_index, with_field) in adt.non_enum_variant().fields.iter().enumerate() {\n@@ -583,7 +583,7 @@ fn copy_or_move<'a, 'tcx>(\n     place_with_id: &PlaceWithHirId<'tcx>,\n ) -> ConsumeMode {\n     if !mc.type_is_copy_modulo_regions(\n-        place_with_id.place.ty,\n+        place_with_id.place.ty(),\n         mc.tcx().hir().span(place_with_id.hir_id),\n     ) {\n         Move"}, {"sha": "ac42ce80689ec1a4cdbfafdecc15efd81b85eb41", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 48, "deletions": 19, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -73,27 +73,30 @@ pub enum PlaceBase {\n     Upvar(ty::UpvarId),\n }\n \n-#[derive(Clone, Debug)]\n-pub enum ProjectionKind<'tcx> {\n+#[derive(Clone, Debug, Eq, PartialEq)]\n+pub enum ProjectionKind {\n     /// A dereference of a pointer, reference or `Box<T>` of the given type\n-    Deref(Ty<'tcx>),\n+    Deref,\n     /// An index or a field\n     Other,\n }\n \n #[derive(Clone, Debug)]\n pub struct Projection<'tcx> {\n+    // Type after the projection is being applied.\n+    ty: Ty<'tcx>,\n+\n     /// Defines the type of access\n-    kind: ProjectionKind<'tcx>,\n+    kind: ProjectionKind,\n }\n \n /// A `Place` represents how a value is located in memory.\n ///\n /// This is an HIR version of `mir::Place`\n #[derive(Clone, Debug)]\n pub struct Place<'tcx> {\n-    /// The type of the `Place`\n-    pub ty: Ty<'tcx>,\n+    /// The type of the `PlaceBase`\n+    pub base_ty: Ty<'tcx>,\n     /// The \"outermost\" place that holds this value.\n     pub base: PlaceBase,\n     /// How this place is derived from the base place.\n@@ -115,13 +118,13 @@ pub struct PlaceWithHirId<'tcx> {\n impl<'tcx> PlaceWithHirId<'tcx> {\n     crate fn new(\n         hir_id: hir::HirId,\n-        ty: Ty<'tcx>,\n+        base_ty: Ty<'tcx>,\n         base: PlaceBase,\n         projections: Vec<Projection<'tcx>>,\n     ) -> PlaceWithHirId<'tcx> {\n         PlaceWithHirId {\n             hir_id: hir_id,\n-            place: Place { ty: ty, base: base, projections: projections },\n+            place: Place { base_ty: base_ty, base: base, projections: projections },\n         }\n     }\n }\n@@ -134,10 +137,26 @@ impl<'tcx> Place<'tcx> {\n     /// `x: &*const u32` and the `Place` is `**x`, then the types returned are\n     ///`*const u32` then `&*const u32`.\n     crate fn deref_tys(&self) -> impl Iterator<Item = Ty<'tcx>> + '_ {\n-        self.projections.iter().rev().filter_map(|proj| {\n-            if let ProjectionKind::Deref(deref_ty) = proj.kind { Some(deref_ty) } else { None }\n+        self.projections.iter().enumerate().rev().filter_map(move |(index, proj)| {\n+            if ProjectionKind::Deref == proj.kind {\n+                Some(self.ty_before_projection(index))\n+            } else {\n+                None\n+            }\n         })\n     }\n+\n+    // Returns the type of this `Place` after all projections have been applied.\n+    pub fn ty(&self) -> Ty<'tcx> {\n+        self.projections.last().map_or_else(|| self.base_ty, |proj| proj.ty)\n+    }\n+\n+    // Returns the type of this `Place` immediately before `projection_index`th projection\n+    // is applied.\n+    crate fn ty_before_projection(&self, projection_index: usize) -> Ty<'tcx> {\n+        assert!(projection_index < self.projections.len());\n+        if projection_index == 0 { self.base_ty } else { self.projections[projection_index - 1].ty }\n+    }\n }\n \n crate trait HirNode {\n@@ -516,8 +535,13 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         ty: Ty<'tcx>,\n     ) -> PlaceWithHirId<'tcx> {\n         let mut projections = base_place.place.projections;\n-        projections.push(Projection { kind: ProjectionKind::Other });\n-        let ret = PlaceWithHirId::new(node.hir_id(), ty, base_place.place.base, projections);\n+        projections.push(Projection { kind: ProjectionKind::Other, ty: ty });\n+        let ret = PlaceWithHirId::new(\n+            node.hir_id(),\n+            base_place.place.base_ty,\n+            base_place.place.base,\n+            projections,\n+        );\n         debug!(\"cat_field ret {:?}\", ret);\n         ret\n     }\n@@ -552,18 +576,23 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n     ) -> McResult<PlaceWithHirId<'tcx>> {\n         debug!(\"cat_deref: base_place={:?}\", base_place);\n \n-        let base_ty = base_place.place.ty;\n-        let deref_ty = match base_ty.builtin_deref(true) {\n+        let base_curr_ty = base_place.place.ty();\n+        let deref_ty = match base_curr_ty.builtin_deref(true) {\n             Some(mt) => mt.ty,\n             None => {\n-                debug!(\"explicit deref of non-derefable type: {:?}\", base_ty);\n+                debug!(\"explicit deref of non-derefable type: {:?}\", base_curr_ty);\n                 return Err(());\n             }\n         };\n         let mut projections = base_place.place.projections;\n-        projections.push(Projection { kind: ProjectionKind::Deref(base_ty) });\n-\n-        let ret = PlaceWithHirId::new(node.hir_id(), deref_ty, base_place.place.base, projections);\n+        projections.push(Projection { kind: ProjectionKind::Deref, ty: deref_ty });\n+\n+        let ret = PlaceWithHirId::new(\n+            node.hir_id(),\n+            base_place.place.base_ty,\n+            base_place.place.base,\n+            projections,\n+        );\n         debug!(\"cat_deref ret {:?}\", ret);\n         Ok(ret)\n     }\n@@ -687,7 +716,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             }\n \n             PatKind::Slice(before, ref slice, after) => {\n-                let element_ty = match place_with_id.place.ty.builtin_index() {\n+                let element_ty = match place_with_id.place.ty().builtin_index() {\n                     Some(ty) => ty,\n                     None => {\n                         debug!(\"explicit index of non-indexable type {:?}\", place_with_id);"}, {"sha": "14a6f3c89a3c9486560bb7da93af8f33caba8ea0", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -242,8 +242,6 @@ pub struct RenderOptions {\n     /// If false, the `select` element to have search filtering by crates on rendered docs\n     /// won't be generated.\n     pub generate_search_filter: bool,\n-    /// Option (disabled by default) to generate files used by RLS and some other tools.\n-    pub generate_redirect_pages: bool,\n     /// Document items that have lower than `pub` visibility.\n     pub document_private: bool,\n     /// Document items that have `doc(hidden)`.\n@@ -528,7 +526,6 @@ impl Options {\n         let static_root_path = matches.opt_str(\"static-root-path\");\n         let generate_search_filter = !matches.opt_present(\"disable-per-crate-search\");\n         let persist_doctests = matches.opt_str(\"persist-doctests\").map(PathBuf::from);\n-        let generate_redirect_pages = matches.opt_present(\"generate-redirect-pages\");\n         let test_builder = matches.opt_str(\"test-builder\").map(PathBuf::from);\n         let codegen_options_strs = matches.opt_strs(\"C\");\n         let debugging_options_strs = matches.opt_strs(\"Z\");\n@@ -592,7 +589,6 @@ impl Options {\n                 markdown_css,\n                 markdown_playground_url,\n                 generate_search_filter,\n-                generate_redirect_pages,\n                 document_private,\n                 document_hidden,\n             },"}, {"sha": "cc78b4682d231a9d6431a818152fdab3ab34e378", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -154,47 +154,10 @@ impl ItemType {\n             ItemType::TraitAlias => \"traitalias\",\n         }\n     }\n-\n-    pub fn name_space(&self) -> &'static str {\n-        match *self {\n-            ItemType::Struct\n-            | ItemType::Union\n-            | ItemType::Enum\n-            | ItemType::Module\n-            | ItemType::Typedef\n-            | ItemType::Trait\n-            | ItemType::Primitive\n-            | ItemType::AssocType\n-            | ItemType::OpaqueTy\n-            | ItemType::TraitAlias\n-            | ItemType::ForeignType => NAMESPACE_TYPE,\n-\n-            ItemType::ExternCrate\n-            | ItemType::Import\n-            | ItemType::Function\n-            | ItemType::Static\n-            | ItemType::Impl\n-            | ItemType::TyMethod\n-            | ItemType::Method\n-            | ItemType::StructField\n-            | ItemType::Variant\n-            | ItemType::Constant\n-            | ItemType::AssocConst => NAMESPACE_VALUE,\n-\n-            ItemType::Macro | ItemType::ProcAttribute | ItemType::ProcDerive => NAMESPACE_MACRO,\n-\n-            ItemType::Keyword => NAMESPACE_KEYWORD,\n-        }\n-    }\n }\n \n impl fmt::Display for ItemType {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.as_str())\n     }\n }\n-\n-pub const NAMESPACE_TYPE: &str = \"t\";\n-pub const NAMESPACE_VALUE: &str = \"v\";\n-pub const NAMESPACE_MACRO: &str = \"m\";\n-pub const NAMESPACE_KEYWORD: &str = \"k\";"}, {"sha": "69e3540ed625be77c49298ce2a26682fc823550d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 50, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -195,8 +195,6 @@ crate struct SharedContext {\n     /// Optional path string to be used to load static files on output pages. If not set, uses\n     /// combinations of `../` to reach the documentation root.\n     pub static_root_path: Option<String>,\n-    /// Option disabled by default to generate files used by RLS and some other tools.\n-    pub generate_redirect_pages: bool,\n     /// The fs handle we are working with.\n     pub fs: DocFS,\n     /// The default edition used to parse doctests.\n@@ -468,7 +466,6 @@ pub fn run(\n         resource_suffix,\n         static_root_path,\n         generate_search_filter,\n-        generate_redirect_pages,\n         document_private,\n         ..\n     } = options;\n@@ -536,7 +533,6 @@ pub fn run(\n         themes,\n         resource_suffix,\n         static_root_path,\n-        generate_redirect_pages,\n         fs: DocFS::new(&errors),\n         edition,\n         codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n@@ -1556,14 +1552,6 @@ impl Context {\n                 if !self.render_redirect_pages {\n                     all.append(full_path(self, &item), &item_type);\n                 }\n-                if self.shared.generate_redirect_pages {\n-                    // Redirect from a sane URL using the namespace to Rustdoc's\n-                    // URL for the page.\n-                    let redir_name = format!(\"{}.{}.html\", name, item_type.name_space());\n-                    let redir_dst = self.dst.join(redir_name);\n-                    let v = layout::redirect(file_name);\n-                    self.shared.fs.write(&redir_dst, v.as_bytes())?;\n-                }\n                 // If the item is a macro, redirect from the old macro URL (with !)\n                 // to the new one (without).\n                 if item_type == ItemType::Macro {\n@@ -2586,8 +2574,7 @@ fn item_trait(w: &mut Buffer, cx: &Context, it: &clean::Item, t: &clean::Trait)\n         let name = m.name.as_ref().unwrap();\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-        let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-        write!(w, \"<h3 id='{id}' class='method'><code id='{ns_id}'>\", id = id, ns_id = ns_id);\n+        write!(w, \"<h3 id='{id}' class='method'><code>\", id = id);\n         render_assoc_item(w, m, AssocItemLink::Anchor(Some(&id)), ItemType::Impl);\n         write!(w, \"</code>\");\n         render_stability_since(w, m, t);\n@@ -2972,20 +2959,14 @@ fn item_struct(w: &mut Buffer, cx: &Context, it: &clean::Item, s: &clean::Struct\n                     ItemType::StructField,\n                     field.name.as_ref().unwrap()\n                 ));\n-                let ns_id = cx.derive_id(format!(\n-                    \"{}.{}\",\n-                    field.name.as_ref().unwrap(),\n-                    ItemType::StructField.name_space()\n-                ));\n                 write!(\n                     w,\n                     \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\\\n                            <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                           <code id=\\\"{ns_id}\\\">{name}: {ty}</code>\\\n+                           <code>{name}: {ty}</code>\\\n                            </span>\",\n                     item_type = ItemType::StructField,\n                     id = id,\n-                    ns_id = ns_id,\n                     name = field.name.as_ref().unwrap(),\n                     ty = ty.print()\n                 );\n@@ -3103,18 +3084,12 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum) {\n         for variant in &e.variants {\n             let id =\n                 cx.derive_id(format!(\"{}.{}\", ItemType::Variant, variant.name.as_ref().unwrap()));\n-            let ns_id = cx.derive_id(format!(\n-                \"{}.{}\",\n-                variant.name.as_ref().unwrap(),\n-                ItemType::Variant.name_space()\n-            ));\n             write!(\n                 w,\n                 \"<div id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n-                       <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                       <code id='{ns_id}'>{name}\",\n+                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                    <code>{name}\",\n                 id = id,\n-                ns_id = ns_id,\n                 name = variant.name.as_ref().unwrap()\n             );\n             if let clean::VariantItem(ref var) = variant.inner {\n@@ -3155,21 +3130,13 @@ fn item_enum(w: &mut Buffer, cx: &Context, it: &clean::Item, e: &clean::Enum) {\n                             variant.name.as_ref().unwrap(),\n                             field.name.as_ref().unwrap()\n                         ));\n-                        let ns_id = cx.derive_id(format!(\n-                            \"{}.{}.{}.{}\",\n-                            variant.name.as_ref().unwrap(),\n-                            ItemType::Variant.name_space(),\n-                            field.name.as_ref().unwrap(),\n-                            ItemType::StructField.name_space()\n-                        ));\n                         write!(\n                             w,\n                             \"<span id=\\\"{id}\\\" class=\\\"variant small-section-header\\\">\\\n                                    <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n-                                   <code id='{ns_id}'>{f}:&nbsp;{t}\\\n+                                   <code>{f}:&nbsp;{t}\\\n                                    </code></span>\",\n                             id = id,\n-                            ns_id = ns_id,\n                             f = field.name.as_ref().unwrap(),\n                             t = ty.print()\n                         );\n@@ -3661,9 +3628,7 @@ fn render_impl(\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                    let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                    write!(w, \"<code id='{}'>\", ns_id);\n+                    write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                     render_assoc_item(w, item, link.anchor(&id), ItemType::Impl);\n                     write!(w, \"</code>\");\n                     render_stability_since_raw(w, item.stable_since(), outer_version);\n@@ -3679,17 +3644,13 @@ fn render_impl(\n             }\n             clean::TypedefItem(ref tydef, _) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssocType, name));\n-                let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                write!(w, \"<code id='{}'>\", ns_id);\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id), \"\");\n                 write!(w, \"</code></h4>\");\n             }\n             clean::AssocConstItem(ref ty, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                write!(w, \"<code id='{}'>\", ns_id);\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code>\");\n                 render_stability_since_raw(w, item.stable_since(), outer_version);\n@@ -3704,9 +3665,7 @@ fn render_impl(\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class);\n-                write!(w, \"<code id='{}'>\", ns_id);\n+                write!(w, \"<h4 id='{}' class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n                 assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id), \"\");\n                 write!(w, \"</code></h4>\");\n             }"}, {"sha": "69e2bacc21882e3d81fa18f1ca7838ed97ad7d8f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -112,9 +112,11 @@ function defocusSearchBar() {\n     }\n \n     function getPageId() {\n-        var id = document.location.href.split(\"#\")[1];\n-        if (id) {\n-            return id.split(\"?\")[0].split(\"&\")[0];\n+        if (window.location.hash) {\n+            var tmp = window.location.hash.replace(/^#/, \"\");\n+            if (tmp.length > 0) {\n+                return tmp;\n+            }\n         }\n         return null;\n     }\n@@ -2551,6 +2553,13 @@ function defocusSearchBar() {\n \n         onEachLazy(document.getElementsByClassName(\"docblock\"), buildToggleWrapper);\n         onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n+        var pageId = getPageId();\n+\n+        autoCollapse(pageId, getCurrentValue(\"rustdoc-collapse\") === \"true\");\n+\n+        if (pageId !== null) {\n+            expandSection(pageId);\n+        }\n     }());\n \n     function createToggleWrapper(tog) {\n@@ -2686,12 +2695,6 @@ function defocusSearchBar() {\n         hideSidebar();\n     };\n \n-    autoCollapse(getPageId(), getCurrentValue(\"rustdoc-collapse\") === \"true\");\n-\n-    if (window.location.hash && window.location.hash.length > 0) {\n-        expandSection(window.location.hash.replace(/^#/, \"\"));\n-    }\n-\n     if (main) {\n         onEachLazy(main.getElementsByClassName(\"loading-content\"), function(e) {\n             e.remove();"}, {"sha": "a3f4dc55fe757eb3fc9d6de8d70250afd21c9e85", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -100,6 +100,9 @@ h1.fqn {\n \tborder-bottom: 1px dashed;\n \tmargin-top: 0;\n }\n+h1.fqn > .in-band > a:hover {\n+\ttext-decoration: underline;\n+}\n h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod):not(.associatedconstant) {\n \tborder-bottom: 1px solid;\n }"}, {"sha": "8e2dd77cc115542ff779142ea76c9ac7e1b3f577", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -374,13 +374,6 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"PATH\",\n             )\n         }),\n-        unstable(\"generate-redirect-pages\", |o| {\n-            o.optflag(\n-                \"\",\n-                \"generate-redirect-pages\",\n-                \"Generate extra pages to support legacy URLs and tool links\",\n-            )\n-        }),\n         unstable(\"show-coverage\", |o| {\n             o.optflag(\n                 \"\","}, {"sha": "f1d1bf439f17133e1eac0d11f1d14d2f29bd33f5", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -164,6 +164,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     fn resolve(\n         &self,\n         path_str: &str,\n+        disambiguator: Option<&str>,\n         ns: Namespace,\n         current_item: &Option<String>,\n         parent_id: Option<hir::HirId>,\n@@ -203,11 +204,22 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         }\n                         return Ok((res, Some(path_str.to_owned())));\n                     }\n-                    other => {\n-                        debug!(\n-                            \"failed to resolve {} in namespace {:?} (got {:?})\",\n-                            path_str, ns, other\n-                        );\n+                    Res::Def(DefKind::Mod, _) => {\n+                        // This resolved to a module, but if we were passed `type@`,\n+                        // we want primitive types to take precedence instead.\n+                        if disambiguator == Some(\"type\") {\n+                            if let Some(prim) = is_primitive(path_str, ns) {\n+                                if extra_fragment.is_some() {\n+                                    return Err(ErrorKind::AnchorFailure(\n+                                        \"primitive types cannot be followed by anchors\",\n+                                    ));\n+                                }\n+                                return Ok((prim, Some(path_str.to_owned())));\n+                            }\n+                        }\n+                        return Ok((res, extra_fragment.clone()));\n+                    }\n+                    _ => {\n                         return Ok((res, extra_fragment.clone()));\n                     }\n                 };\n@@ -566,11 +578,13 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n             let mut path_str;\n             let (res, fragment) = {\n                 let mut kind = None;\n+                let mut disambiguator = None;\n                 path_str = if let Some(prefix) = [\"struct@\", \"enum@\", \"type@\", \"trait@\", \"union@\"]\n                     .iter()\n                     .find(|p| link.starts_with(**p))\n                 {\n                     kind = Some(TypeNS);\n+                    disambiguator = Some(&prefix[..prefix.len() - 1]);\n                     link.trim_start_matches(prefix)\n                 } else if let Some(prefix) = [\n                     \"const@\",\n@@ -586,18 +600,23 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                 .find(|p| link.starts_with(**p))\n                 {\n                     kind = Some(ValueNS);\n+                    disambiguator = Some(&prefix[..prefix.len() - 1]);\n                     link.trim_start_matches(prefix)\n                 } else if link.ends_with(\"()\") {\n                     kind = Some(ValueNS);\n+                    disambiguator = Some(\"fn\");\n                     link.trim_end_matches(\"()\")\n                 } else if link.starts_with(\"macro@\") {\n                     kind = Some(MacroNS);\n+                    disambiguator = Some(\"macro\");\n                     link.trim_start_matches(\"macro@\")\n                 } else if link.starts_with(\"derive@\") {\n                     kind = Some(MacroNS);\n+                    disambiguator = Some(\"derive\");\n                     link.trim_start_matches(\"derive@\")\n                 } else if link.ends_with('!') {\n                     kind = Some(MacroNS);\n+                    disambiguator = Some(\"macro\");\n                     link.trim_end_matches('!')\n                 } else {\n                     &link[..]\n@@ -634,6 +653,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     Some(ns @ ValueNS) => {\n                         match self.resolve(\n                             path_str,\n+                            disambiguator,\n                             ns,\n                             &current_item,\n                             base_node,\n@@ -657,6 +677,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                     Some(ns @ TypeNS) => {\n                         match self.resolve(\n                             path_str,\n+                            disambiguator,\n                             ns,\n                             &current_item,\n                             base_node,\n@@ -683,6 +704,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                                 .map(|res| (res, extra_fragment.clone())),\n                             type_ns: match self.resolve(\n                                 path_str,\n+                                disambiguator,\n                                 TypeNS,\n                                 &current_item,\n                                 base_node,\n@@ -697,6 +719,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             },\n                             value_ns: match self.resolve(\n                                 path_str,\n+                                disambiguator,\n                                 ValueNS,\n                                 &current_item,\n                                 base_node,\n@@ -1069,7 +1092,7 @@ fn handle_variant(\n     };\n     let parent_def = Res::Def(DefKind::Enum, parent);\n     let variant = cx.tcx.expect_variant_res(res);\n-    Ok((parent_def, Some(format!(\"{}.v\", variant.ident.name))))\n+    Ok((parent_def, Some(format!(\"variant.{}\", variant.ident.name))))\n }\n \n const PRIMITIVES: &[(&str, Res)] = &["}, {"sha": "47b8532b7a6e6d1bdada556bbc32b8bc4f8f645b", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,4 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n use crate::io::prelude::*;\n \n use crate::fmt;\n@@ -583,7 +584,8 @@ impl Read for TcpStream {\n \n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n-        Initializer::nop()\n+        // SAFETY: Read is guaranteed to work on uninitialized memory\n+        unsafe { Initializer::nop() }\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -622,7 +624,8 @@ impl Read for &TcpStream {\n \n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n-        Initializer::nop()\n+        // SAFETY: Read is guaranteed to work on uninitialized memory\n+        unsafe { Initializer::nop() }\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2b2bbc6e9d6ae473a24ca68f6b2676fa0428fffa", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -133,7 +133,7 @@ pub trait FileExt {\n     /// Note that similar to [`File::write`], it is not an error to return a\n     /// short write.\n     ///\n-    /// [`File::write`]: ../../../../std/fs/struct.File.html#write.v\n+    /// [`File::write`]: ../../../../std/fs/struct.File.html#method.write\n     ///\n     /// # Examples\n     ///"}, {"sha": "b479fbaf34613a422121d674b1f88e522c3395ae", "filename": "src/libstd/sys/vxworks/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fext%2Ffs.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -132,7 +132,7 @@ pub trait FileExt {\n     /// Note that similar to [`File::write`], it is not an error to return a\n     /// short write.\n     ///\n-    /// [`File::write`]: ../../../../std/fs/struct.File.html#write.v\n+    /// [`File::write`]: ../../../../std/fs/struct.File.html#method.write\n     ///\n     /// # Examples\n     ///"}, {"sha": "81b2bf998720022c3765ce605c60b654244b56fb", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -259,7 +259,7 @@ pub trait OpenOptionsExt {\n     /// [Impersonation Levels]:\n     ///     https://docs.microsoft.com/en-us/windows/win32/api/winnt/ne-winnt-security_impersonation_level\n     #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n-    fn security_qos_flags(&mut self, flags: u32) -> &mut OpenOptions;\n+    fn security_qos_flags(&mut self, flags: u32) -> &mut Self;\n }\n \n #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]"}, {"sha": "5f0fdbb322cad0c269bdd715025f42158160792b", "filename": "src/test/rustdoc/assoc-types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -5,9 +5,7 @@\n // @has assoc_types/trait.Index.html\n pub trait Index<I: ?Sized> {\n     // @has - '//*[@id=\"associatedtype.Output\"]//code' 'type Output: ?Sized'\n-    // @has - '//code[@id=\"Output.t\"]' 'type Output: ?Sized'\n     type Output: ?Sized;\n-    // @has - '//code[@id=\"index.v\"]' 'fn index'\n     // @has - '//*[@id=\"tymethod.index\"]//code' \\\n     //      \"fn index<'a>(&'a self, index: I) -> &'a Self::Output\"\n     // @has - '//*[@id=\"tymethod.index\"]//code//a[@href=\"../assoc_types/trait.Index.html#associatedtype.Output\"]' \\"}, {"sha": "638de3292becbafb83eee6c48aecd6370b118f2c", "filename": "src/test/rustdoc/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -3,7 +3,7 @@\n pub struct Foo;\n \n impl Foo {\n-    // @has const/struct.Foo.html '//code[@id=\"new.v\"]' 'const unsafe fn new'\n+    // @has const/struct.Foo.html '//*[@id=\"method.new\"]//code' 'const unsafe fn new'\n     pub const unsafe fn new() -> Foo {\n         Foo\n     }"}, {"sha": "e3a166b3d0e5fba8709f14b999b21d904f3443de", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -31,8 +31,8 @@ pub use impl_trait_aux::func4;\n pub use impl_trait_aux::async_fn;\n \n // @has impl_trait/struct.Foo.html\n-// @has - '//code[@id=\"method.v\"]' \"pub fn method<'a>(_x: impl Clone + Into<Vec<u8>> + 'a)\"\n-// @!has - '//code[@id=\"method.v\"]' 'where'\n+// @has - '//*[@id=\"method.method\"]//code' \"pub fn method<'a>(_x: impl Clone + Into<Vec<u8>> + 'a)\"\n+// @!has - '//*[@id=\"method.method\"]//code' 'where'\n pub use impl_trait_aux::Foo;\n \n // @has impl_trait/struct.Bar.html"}, {"sha": "ca83d5e2281a72f72ed3febccc1457ac374a4b94", "filename": "src/test/rustdoc/intra-link-prim-precedence.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-prim-precedence.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,12 @@\n+// ignore-tidy-linelength\n+#![deny(intra_doc_resolution_failure)]\n+\n+pub mod char {}\n+\n+/// See also [type@char]\n+// @has intra_link_prim_precedence/struct.MyString.html '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.char.html'\n+pub struct MyString;\n+\n+/// See also [char]\n+// @has intra_link_prim_precedence/struct.MyString2.html '//a/@href' 'intra_link_prim_precedence/char/index.html'\n+pub struct MyString2;"}, {"sha": "81545fec7411bc0654e6bf399f135759f6e5f1e8", "filename": "src/test/rustdoc/intra-link-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fintra-link-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fintra-link-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-self.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -40,7 +40,7 @@ pub struct MyStruct {\n }\n \n pub enum MyEnum {\n-    // @has foo/enum.MyEnum.html '//a/@href' '../foo/enum.MyEnum.html#EnumVariant.v'\n+    // @has foo/enum.MyEnum.html '//a/@href' '../foo/enum.MyEnum.html#variant.EnumVariant'\n \n     /// [`EnumVariant`]\n     ///"}, {"sha": "c6725f526aa2aada62cb11a9fc1895dd6051bd6b", "filename": "src/test/rustdoc/intra-links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fintra-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fintra-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-links.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -2,7 +2,7 @@\n // @has - '//a/@href' '../intra_links/struct.ThisType.html'\n // @has - '//a/@href' '../intra_links/struct.ThisType.html#method.this_method'\n // @has - '//a/@href' '../intra_links/enum.ThisEnum.html'\n-// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#ThisVariant.v'\n+// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#variant.ThisVariant'\n // @has - '//a/@href' '../intra_links/trait.ThisTrait.html'\n // @has - '//a/@href' '../intra_links/trait.ThisTrait.html#tymethod.this_associated_method'\n // @has - '//a/@href' '../intra_links/trait.ThisTrait.html#associatedtype.ThisAssociatedType'\n@@ -73,7 +73,7 @@ pub fn SoAmbiguous() {}\n // @has - '//a/@href' '../intra_links/struct.ThisType.html'\n // @has - '//a/@href' '../intra_links/struct.ThisType.html#method.this_method'\n // @has - '//a/@href' '../intra_links/enum.ThisEnum.html'\n-// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#ThisVariant.v'\n+// @has - '//a/@href' '../intra_links/enum.ThisEnum.html#variant.ThisVariant'\n /// Shortcut links for:\n /// * [`ThisType`]\n /// * [`ThisType::this_method`]"}, {"sha": "9dac49c6413d803ca7906b8b5dc11864a68e5625", "filename": "src/test/rustdoc/issue-19190.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fissue-19190.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fissue-19190.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-19190.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags:-Z unstable-options --generate-redirect-pages\n-\n use std::ops::Deref;\n \n pub struct Foo;\n@@ -15,9 +13,8 @@ impl Deref for Bar {\n     fn deref(&self) -> &Foo { loop {} }\n }\n \n-// @has issue_19190/Bar.t.html\n // @has issue_19190/struct.Bar.html\n-// @has - '//*[@id=\"foo.v\"]' 'fn foo(&self)'\n+// @has - '//*[@id=\"method.foo\"]//code' 'fn foo(&self)'\n // @has - '//*[@id=\"method.foo\"]' 'fn foo(&self)'\n-// @!has - '//*[@id=\"static_foo.v\"]' 'fn static_foo()'\n+// @!has - '//*[@id=\"method.static_foo\"]//code' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "e53cf6451353f733a6da031e3b447d9bca4996c6", "filename": "src/test/rustdoc/issue-25001.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fissue-25001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fissue-25001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-25001.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -9,17 +9,14 @@ pub trait Bar {\n \n impl Foo<u8> {\n     // @has - '//*[@id=\"method.pass\"]//code' 'fn pass()'\n-    // @has - '//code[@id=\"pass.v\"]' 'fn pass()'\n     pub fn pass() {}\n }\n impl Foo<u16> {\n     // @has - '//*[@id=\"method.pass-1\"]//code' 'fn pass() -> usize'\n-    // @has - '//code[@id=\"pass.v-1\"]' 'fn pass() -> usize'\n     pub fn pass() -> usize { 42 }\n }\n impl Foo<u32> {\n     // @has - '//*[@id=\"method.pass-2\"]//code' 'fn pass() -> isize'\n-    // @has - '//code[@id=\"pass.v-2\"]' 'fn pass() -> isize'\n     pub fn pass() -> isize { 42 }\n }\n "}, {"sha": "a688ae48d00ce84bbf01b5908c3be9ae8662f5b2", "filename": "src/test/rustdoc/issue-35169-2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-35169-2.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -24,17 +24,17 @@ impl DerefMut for Bar {\n }\n \n // @has issue_35169_2/struct.Bar.html\n-// @has - '//*[@id=\"by_ref.v\"]' 'fn by_ref(&self)'\n+// @has - '//*[@id=\"method.by_ref\"]//code' 'fn by_ref(&self)'\n // @has - '//*[@id=\"method.by_ref\"]' 'fn by_ref(&self)'\n-// @has - '//*[@id=\"by_explicit_ref.v\"]' 'fn by_explicit_ref(self: &Foo)'\n+// @has - '//*[@id=\"method.by_explicit_ref\"]//code' 'fn by_explicit_ref(self: &Foo)'\n // @has - '//*[@id=\"method.by_explicit_ref\"]' 'fn by_explicit_ref(self: &Foo)'\n-// @has - '//*[@id=\"by_mut_ref.v\"]' 'fn by_mut_ref(&mut self)'\n+// @has - '//*[@id=\"method.by_mut_ref\"]//code' 'fn by_mut_ref(&mut self)'\n // @has - '//*[@id=\"method.by_mut_ref\"]' 'fn by_mut_ref(&mut self)'\n-// @has - '//*[@id=\"by_explicit_mut_ref.v\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n+// @has - '//*[@id=\"method.by_explicit_mut_ref\"]//code' 'fn by_explicit_mut_ref(self: &mut Foo)'\n // @has - '//*[@id=\"method.by_explicit_mut_ref\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n-// @!has - '//*[@id=\"by_explicit_box.v\"]' 'fn by_explicit_box(self: Box<Foo>)'\n+// @!has - '//*[@id=\"method.by_explicit_box\"]//code' 'fn by_explicit_box(self: Box<Foo>)'\n // @!has - '//*[@id=\"method.by_explicit_box\"]' 'fn by_explicit_box(self: Box<Foo>)'\n-// @!has - '//*[@id=\"by_explicit_self_box.v\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n+// @!has - '//*[@id=\"method.by_explicit_self_box\"]//code' 'fn by_explicit_self_box(self: Box<Self>)'\n // @!has - '//*[@id=\"method.by_explicit_self_box\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n-// @!has - '//*[@id=\"static_foo.v\"]' 'fn static_foo()'\n+// @!has - '//*[@id=\"method.static_foo\"]//code' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "4f10c04a616b382f839978f2a148b8e7ae39b77c", "filename": "src/test/rustdoc/issue-35169.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fissue-35169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fissue-35169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-35169.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -19,17 +19,17 @@ impl Deref for Bar {\n }\n \n // @has issue_35169/struct.Bar.html\n-// @has - '//*[@id=\"by_ref.v\"]' 'fn by_ref(&self)'\n+// @has - '//*[@id=\"method.by_ref\"]//code' 'fn by_ref(&self)'\n // @has - '//*[@id=\"method.by_ref\"]' 'fn by_ref(&self)'\n-// @has - '//*[@id=\"by_explicit_ref.v\"]' 'fn by_explicit_ref(self: &Foo)'\n+// @has - '//*[@id=\"method.by_explicit_ref\"]//code' 'fn by_explicit_ref(self: &Foo)'\n // @has - '//*[@id=\"method.by_explicit_ref\"]' 'fn by_explicit_ref(self: &Foo)'\n-// @!has - '//*[@id=\"by_mut_ref.v\"]' 'fn by_mut_ref(&mut self)'\n+// @!has - '//*[@id=\"method.by_mut_ref\"]//code' 'fn by_mut_ref(&mut self)'\n // @!has - '//*[@id=\"method.by_mut_ref\"]' 'fn by_mut_ref(&mut self)'\n-// @!has - '//*[@id=\"by_explicit_mut_ref.v\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n+// @!has - '//*[@id=\"method.by_explicit_mut_ref\"]//code' 'fn by_explicit_mut_ref(self: &mut Foo)'\n // @!has - '//*[@id=\"method.by_explicit_mut_ref\"]' 'fn by_explicit_mut_ref(self: &mut Foo)'\n-// @!has - '//*[@id=\"by_explicit_box.v\"]' 'fn by_explicit_box(self: Box<Foo>)'\n+// @!has - '//*[@id=\"method.by_explicit_box\"]//code' 'fn by_explicit_box(self: Box<Foo>)'\n // @!has - '//*[@id=\"method.by_explicit_box\"]' 'fn by_explicit_box(self: Box<Foo>)'\n-// @!has - '//*[@id=\"by_explicit_self_box.v\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n+// @!has - '//*[@id=\"method.by_explicit_self_box\"]//code' 'fn by_explicit_self_box(self: Box<Self>)'\n // @!has - '//*[@id=\"method.by_explicit_self_box\"]' 'fn by_explicit_self_box(self: Box<Self>)'\n-// @!has - '//*[@id=\"static_foo.v\"]' 'fn static_foo()'\n+// @!has - '//*[@id=\"method.static_foo\"]//code' 'fn static_foo()'\n // @!has - '//*[@id=\"method.static_foo\"]' 'fn static_foo()'"}, {"sha": "532e29bc691c4265249c3b4122999bd36cb0439a", "filename": "src/test/rustdoc/struct-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fstruct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fstruct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstruct-field.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -4,7 +4,7 @@\n \n // @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/struct.Foo.html#structfield.bar\"]' 'Foo::bar'\n // @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/union.Bar.html#structfield.foo\"]' 'Bar::foo'\n-// @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/enum.Uniooon.html#X.v\"]' 'Uniooon::X'\n+// @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/enum.Uniooon.html#variant.X\"]' 'Uniooon::X'\n \n //! Test with [Foo::bar], [Bar::foo], [Uniooon::X]\n "}, {"sha": "6de198453cd273d2fde91ceb7580d280a630987e", "filename": "src/test/rustdoc/structfields.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fstructfields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Frustdoc%2Fstructfields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstructfields.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,7 +1,3 @@\n-// compile-flags:-Z unstable-options --generate-redirect-pages\n-\n-// @has structfields/Foo.t.html\n-// @has - struct.Foo.html\n // @has structfields/struct.Foo.html\n pub struct Foo {\n     // @has - //pre \"pub a: ()\"\n@@ -16,17 +12,13 @@ pub struct Foo {\n     pub d: usize,\n }\n \n-// @has structfields/Bar.t.html\n-// @has - struct.Bar.html\n // @has structfields/struct.Bar.html\n pub struct Bar {\n     // @has - //pre \"pub a: ()\"\n     pub a: (),\n     // @!has - //pre \"// some fields omitted\"\n }\n \n-// @has structfields/Qux.t.html\n-// @has - enum.Qux.html\n // @has structfields/enum.Qux.html\n pub enum Qux {\n     Quz {"}, {"sha": "5629d4b6e6e5f65e8ee8d10b651baa7f70389d49", "filename": "src/test/ui/block-expression-remove-semicolon.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+\n+fn foo() -> i32 {\n+    0\n+}\n+\n+fn main() {\n+    let _x: i32 = {\n+        //~^ ERROR mismatched types\n+        foo() //~ HELP consider removing this semicolon\n+    };\n+}"}, {"sha": "33f11b50afca2adbd84706fdd4f1b3168664219a", "filename": "src/test/ui/block-expression-remove-semicolon.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,9 +1,11 @@\n+// run-rustfix\n+\n fn foo() -> i32 {\n-   0\n+    0\n }\n \n fn main() {\n-    let x: i32 = {\n+    let _x: i32 = {\n         //~^ ERROR mismatched types\n         foo(); //~ HELP consider removing this semicolon\n     };"}, {"sha": "74dc4d595a9294d88a43c1cef0a980be24134b5b", "filename": "src/test/ui/block-expression-remove-semicolon.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/block-expression-remove-semicolon.rs:6:18\n+  --> $DIR/block-expression-remove-semicolon.rs:8:19\n    |\n-LL |       let x: i32 = {\n-   |  __________________^\n+LL |       let _x: i32 = {\n+   |  ___________________^\n LL | |\n LL | |         foo();\n    | |              - help: consider removing this semicolon"}, {"sha": "a2ecb73ac5b28f290a7af9fc0ba5e08c03d4605e", "filename": "src/test/ui/block-result/consider-removing-last-semi.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+pub fn f() -> String {  //~ ERROR mismatched types\n+    0u8;\n+    \"bla\".to_string()\n+}\n+\n+pub fn g() -> String {  //~ ERROR mismatched types\n+    \"this won't work\".to_string();\n+    \"removeme\".to_string()\n+}\n+\n+fn main() {}"}, {"sha": "4991d24b26cced93060180bc8763c517ed2251e1", "filename": "src/test/ui/block-result/consider-removing-last-semi.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,9 +1,11 @@\n-fn f() -> String {  //~ ERROR mismatched types\n+// run-rustfix\n+\n+pub fn f() -> String {  //~ ERROR mismatched types\n     0u8;\n     \"bla\".to_string();\n }\n \n-fn g() -> String {  //~ ERROR mismatched types\n+pub fn g() -> String {  //~ ERROR mismatched types\n     \"this won't work\".to_string();\n     \"removeme\".to_string();\n }"}, {"sha": "15ca8316708a2b5d8f516558a2df0150f2a60dcf", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,21 +1,21 @@\n error[E0308]: mismatched types\n-  --> $DIR/consider-removing-last-semi.rs:1:11\n+  --> $DIR/consider-removing-last-semi.rs:3:15\n    |\n-LL | fn f() -> String {\n-   |    -      ^^^^^^ expected struct `std::string::String`, found `()`\n-   |    |\n-   |    implicitly returns `()` as its body has no tail or `return` expression\n+LL | pub fn f() -> String {\n+   |        -      ^^^^^^ expected struct `std::string::String`, found `()`\n+   |        |\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n LL |     \"bla\".to_string();\n    |                      - help: consider removing this semicolon\n \n error[E0308]: mismatched types\n-  --> $DIR/consider-removing-last-semi.rs:6:11\n+  --> $DIR/consider-removing-last-semi.rs:8:15\n    |\n-LL | fn g() -> String {\n-   |    -      ^^^^^^ expected struct `std::string::String`, found `()`\n-   |    |\n-   |    implicitly returns `()` as its body has no tail or `return` expression\n+LL | pub fn g() -> String {\n+   |        -      ^^^^^^ expected struct `std::string::String`, found `()`\n+   |        |\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n    |                           - help: consider removing this semicolon"}, {"sha": "713e04774a0e70a6356f8e20835afc29e6c47170", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,16 @@\n+// #41425 -- error message \"mismatched types\" has wrong types\n+// run-rustfix\n+\n+fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n+    x + 1\n+}\n+\n+fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n+    Ok(1)\n+}\n+\n+fn main() {\n+    let x = plus_one(5);\n+    let _ = foo();\n+    println!(\"X = {}\", x);\n+}"}, {"sha": "e14d79d8acae688f10c87f1934a71dff81ecbd54", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,4 +1,5 @@\n // #41425 -- error message \"mismatched types\" has wrong types\n+// run-rustfix\n \n fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n     x + 1;\n@@ -10,5 +11,6 @@ fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n \n fn main() {\n     let x = plus_one(5);\n+    let _ = foo();\n     println!(\"X = {}\", x);\n }"}, {"sha": "da8db4331dffbd5a8ee4dcd4b6b9a7dc43ed4022", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercion-missing-tail-expected-type.rs:3:24\n+  --> $DIR/coercion-missing-tail-expected-type.rs:4:24\n    |\n LL | fn plus_one(x: i32) -> i32 {\n    |    --------            ^^^ expected `i32`, found `()`\n@@ -9,7 +9,7 @@ LL |     x + 1;\n    |          - help: consider removing this semicolon\n \n error[E0308]: mismatched types\n-  --> $DIR/coercion-missing-tail-expected-type.rs:7:13\n+  --> $DIR/coercion-missing-tail-expected-type.rs:8:13\n    |\n LL | fn foo() -> Result<u8, u64> {\n    |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `()`"}, {"sha": "5c2b9267af583741f26e852027487b0e1371d99b", "filename": "src/test/ui/const-generics/unused_braces.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// run-rustfix\n+\n+#![allow(incomplete_features)]\n+#![warn(unused_braces)]\n+\n+#![feature(const_generics)]\n+\n+struct A<const N: usize>;\n+\n+fn main() {\n+    let _: A<7>; // ok\n+    let _: A< 7 >; //~ WARN unnecessary braces\n+    let _: A<{ 3 + 5 }>; // ok\n+}"}, {"sha": "c3e02b45ed5a26ecf4097df28fd9b925f86c53aa", "filename": "src/test/ui/const-generics/unused_braces.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,8 +1,10 @@\n // check-pass\n+// run-rustfix\n+\n+#![allow(incomplete_features)]\n #![warn(unused_braces)]\n \n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete\n \n struct A<const N: usize>;\n "}, {"sha": "618698a323445c9e62a70905d20c84b121ddf9f9", "filename": "src/test/ui/const-generics/unused_braces.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,23 +1,14 @@\n-warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/unused_braces.rs:4:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-\n warning: unnecessary braces around const expression\n-  --> $DIR/unused_braces.rs:11:14\n+  --> $DIR/unused_braces.rs:13:14\n    |\n LL |     let _: A<{ 7 }>;\n    |              ^^^^^ help: remove these braces\n    |\n note: the lint level is defined here\n-  --> $DIR/unused_braces.rs:2:9\n+  --> $DIR/unused_braces.rs:5:9\n    |\n LL | #![warn(unused_braces)]\n    |         ^^^^^^^^^^^^^\n \n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "5f2d5e80243fe62a76362679ffc08cb042142daf", "filename": "src/test/ui/const_prop/ice-assert-fail-div-by-zero.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fice-assert-fail-div-by-zero.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+pub struct Fixed64(i64);\n+\n+pub fn div(f: Fixed64) {\n+    f.0 / 0;\n+}\n+\n+fn main() {}"}, {"sha": "87debfeceaaf33a779a7d6bb4ab7d6c51d79b63d", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+\n+fn main() {\n+    let _x = !1; //~ ERROR cannot be used as a unary operator\n+}"}, {"sha": "015a8edcea355cbece7eaaaa0b985c360e30a6a4", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n fn main() {\n-    let x = ~1; //~ ERROR cannot be used as a unary operator\n+    let _x = ~1; //~ ERROR cannot be used as a unary operator\n }"}, {"sha": "84b81d561e9096855790a9cc39a4dc4d851a034a", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,8 +1,8 @@\n error: `~` cannot be used as a unary operator\n-  --> $DIR/issue-41679-tilde-bitwise-negation-attempt.rs:2:13\n+  --> $DIR/issue-41679-tilde-bitwise-negation-attempt.rs:4:14\n    |\n-LL |     let x = ~1;\n-   |             ^ help: use `!` to perform bitwise not\n+LL |     let _x = ~1;\n+   |              ^ help: use `!` to perform bitwise not\n \n error: aborting due to previous error\n "}, {"sha": "21471d75c821550449a18c25d83336fb6091e324", "filename": "src/test/ui/did_you_mean/issue-54109-without-witness.fixed", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+// This test is to check if suggestions can be applied automatically.\n+\n+#![allow(dead_code, unused_parens)]\n+\n+fn main() {}\n+\n+fn test_and() {\n+    let a = true;\n+    let b = false;\n+\n+    let _ = a && b; //~ ERROR `and` is not a logical operator\n+                     //~| ERROR `and` is not a logical operator\n+\n+    if a && b { //~ ERROR `and` is not a logical operator\n+                 //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_or() {\n+    let a = true;\n+    let b = false;\n+\n+    let _ = a || b; //~ ERROR `or` is not a logical operator\n+                    //~| ERROR `or` is not a logical operator\n+\n+    if a || b { //~ ERROR `or` is not a logical operator\n+                //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_and_par() {\n+    let a = true;\n+    let b = false;\n+    if (a && b) {  //~ ERROR `and` is not a logical operator\n+                    //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_or_par() {\n+    let a = true;\n+    let b = false;\n+    if (a || b) {  //~ ERROR `or` is not a logical operator\n+                   //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_while_and() {\n+    let a = true;\n+    let b = false;\n+    while a && b {  //~ ERROR `and` is not a logical operator\n+                     //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_while_or() {\n+    let a = true;\n+    let b = false;\n+    while a || b { //~ ERROR `or` is not a logical operator\n+                   //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}"}, {"sha": "bb9a3a195962e58a91b3da4111e9d47ed8e68cd0", "filename": "src/test/ui/did_you_mean/issue-54109-without-witness.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+// This test is to check if suggestions can be applied automatically.\n+\n+#![allow(dead_code, unused_parens)]\n+\n+fn main() {}\n+\n+fn test_and() {\n+    let a = true;\n+    let b = false;\n+\n+    let _ = a and b; //~ ERROR `and` is not a logical operator\n+                     //~| ERROR `and` is not a logical operator\n+\n+    if a and b { //~ ERROR `and` is not a logical operator\n+                 //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_or() {\n+    let a = true;\n+    let b = false;\n+\n+    let _ = a or b; //~ ERROR `or` is not a logical operator\n+                    //~| ERROR `or` is not a logical operator\n+\n+    if a or b { //~ ERROR `or` is not a logical operator\n+                //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_and_par() {\n+    let a = true;\n+    let b = false;\n+    if (a and b) {  //~ ERROR `and` is not a logical operator\n+                    //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_or_par() {\n+    let a = true;\n+    let b = false;\n+    if (a or b) {  //~ ERROR `or` is not a logical operator\n+                   //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_while_and() {\n+    let a = true;\n+    let b = false;\n+    while a and b {  //~ ERROR `and` is not a logical operator\n+                     //~| ERROR `and` is not a logical operator\n+        println!(\"both\");\n+    }\n+}\n+\n+fn test_while_or() {\n+    let a = true;\n+    let b = false;\n+    while a or b { //~ ERROR `or` is not a logical operator\n+                   //~| ERROR `or` is not a logical operator\n+        println!(\"both\");\n+    }\n+}"}, {"sha": "fe48af592db9137873028764506f500dbaa25eeb", "filename": "src/test/ui/did_you_mean/issue-54109-without-witness.stderr", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-54109-without-witness.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,130 @@\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:13:15\n+   |\n+LL |     let _ = a and b;\n+   |               ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:13:15\n+   |\n+LL |     let _ = a and b;\n+   |               ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:16:10\n+   |\n+LL |     if a and b {\n+   |          ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:16:10\n+   |\n+LL |     if a and b {\n+   |          ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:26:15\n+   |\n+LL |     let _ = a or b;\n+   |               ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:26:15\n+   |\n+LL |     let _ = a or b;\n+   |               ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:29:10\n+   |\n+LL |     if a or b {\n+   |          ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:29:10\n+   |\n+LL |     if a or b {\n+   |          ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:38:11\n+   |\n+LL |     if (a and b) {\n+   |           ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:38:11\n+   |\n+LL |     if (a and b) {\n+   |           ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:47:11\n+   |\n+LL |     if (a or b) {\n+   |           ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:47:11\n+   |\n+LL |     if (a or b) {\n+   |           ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:56:13\n+   |\n+LL |     while a and b {\n+   |             ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `and` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:56:13\n+   |\n+LL |     while a and b {\n+   |             ^^^ help: use `&&` to perform logical conjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:65:13\n+   |\n+LL |     while a or b {\n+   |             ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: `or` is not a logical operator\n+  --> $DIR/issue-54109-without-witness.rs:65:13\n+   |\n+LL |     while a or b {\n+   |             ^^ help: use `||` to perform logical disjunction\n+   |\n+   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical operators\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "fc6255e0274431a35c29bbc6688b0282667ccc78", "filename": "src/test/ui/error-codes/E0642.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ferror-codes%2FE0642.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ferror-codes%2FE0642.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0642.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+#![allow(unused)] // for rustfix\n+\n+#[derive(Clone, Copy)]\n+struct S;\n+\n+trait T {\n+    fn foo(_: (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n+\n+    fn bar(_: (i32, i32)) {} //~ ERROR patterns aren't allowed in methods without bodies\n+\n+    fn method(_: S) {} //~ ERROR patterns aren't allowed in methods without bodies\n+\n+    fn f(&ident: &S) {} // ok\n+    fn g(&&ident: &&S) {} // ok\n+    fn h(mut ident: S) {} // ok\n+}\n+\n+fn main() {}"}, {"sha": "5f85f3935e1a04d19319aec8ffb1294b839adbea", "filename": "src/test/ui/error-codes/E0642.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ferror-codes%2FE0642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ferror-codes%2FE0642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0642.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(unused)] // for rustfix\n+\n #[derive(Clone, Copy)]\n struct S;\n "}, {"sha": "83fcac042b1b41624b4c6816c8e99ffe757ecb57", "filename": "src/test/ui/error-codes/E0642.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0642.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error[E0642]: patterns aren't allowed in methods without bodies\n-  --> $DIR/E0642.rs:5:12\n+  --> $DIR/E0642.rs:9:12\n    |\n LL |     fn foo((x, y): (i32, i32));\n    |            ^^^^^^\n@@ -10,7 +10,7 @@ LL |     fn foo(_: (i32, i32));\n    |            ^\n \n error[E0642]: patterns aren't allowed in methods without bodies\n-  --> $DIR/E0642.rs:7:12\n+  --> $DIR/E0642.rs:11:12\n    |\n LL |     fn bar((x, y): (i32, i32)) {}\n    |            ^^^^^^\n@@ -21,7 +21,7 @@ LL |     fn bar(_: (i32, i32)) {}\n    |            ^\n \n error[E0642]: patterns aren't allowed in methods without bodies\n-  --> $DIR/E0642.rs:9:15\n+  --> $DIR/E0642.rs:13:15\n    |\n LL |     fn method(S { .. }: S) {}\n    |               ^^^^^^^^"}, {"sha": "72f9af0124c1669f974aa5c5d15f9561b529a125", "filename": "src/test/ui/generic/generic-no-mangle.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+#![deny(no_mangle_generic_items)]\n+\n+\n+pub fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+\n+pub extern fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+#[no_mangle]\n+pub fn baz(x: &i32) -> &i32 { x }\n+\n+#[no_mangle]\n+pub fn qux<'a>(x: &'a i32) -> &i32 { x }\n+\n+fn main() {}"}, {"sha": "08d631e6eee1eab8d6d035fefcd41adfb6d37034", "filename": "src/test/ui/generic/generic-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![deny(no_mangle_generic_items)]\n \n #[no_mangle]"}, {"sha": "e8e6d9d502d4b42a057d1eda29f5260a7769c7c0", "filename": "src/test/ui/generic/generic-no-mangle.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-no-mangle.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,19 +1,19 @@\n error: functions generic over types or consts must be mangled\n-  --> $DIR/generic-no-mangle.rs:4:1\n+  --> $DIR/generic-no-mangle.rs:6:1\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute\n LL | pub fn foo<T>() {}\n    | ^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/generic-no-mangle.rs:1:9\n+  --> $DIR/generic-no-mangle.rs:3:9\n    |\n LL | #![deny(no_mangle_generic_items)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: functions generic over types or consts must be mangled\n-  --> $DIR/generic-no-mangle.rs:7:1\n+  --> $DIR/generic-no-mangle.rs:9:1\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute"}, {"sha": "3fd950e0dbfc87b3d6fdea2c16f2dc85a1a1ed90", "filename": "src/test/ui/impossible_range.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fimpossible_range.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fimpossible_range.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+// Make sure that invalid ranges generate an error during parsing, not an ICE\n+\n+#![allow(path_statements)]\n+\n+pub fn main() {\n+    ..;\n+    0..;\n+    ..1;\n+    0..1;\n+    ..; //~ERROR inclusive range with no end\n+         //~^HELP use `..` instead\n+}\n+\n+fn _foo1() {\n+    ..=1;\n+    0..=1;\n+    0..; //~ERROR inclusive range with no end\n+          //~^HELP use `..` instead\n+}"}, {"sha": "0fe0e17be669aea8c6a48747fe69adf01bcc68c1", "filename": "src/test/ui/impossible_range.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fimpossible_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fimpossible_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,8 @@\n+// run-rustfix\n // Make sure that invalid ranges generate an error during parsing, not an ICE\n \n+#![allow(path_statements)]\n+\n pub fn main() {\n     ..;\n     0..;"}, {"sha": "53c56065c2a3a056fe4cf7e9dfdb27c9d9a7611d", "filename": "src/test/ui/impossible_range.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fimpossible_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fimpossible_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,13 +1,13 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:8:5\n+  --> $DIR/impossible_range.rs:11:5\n    |\n LL |     ..=;\n    |     ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:15:6\n+  --> $DIR/impossible_range.rs:18:6\n    |\n LL |     0..=;\n    |      ^^^ help: use `..` instead"}, {"sha": "1e99faaded4efce4187a4262b4da2b1fe91506fe", "filename": "src/test/ui/issue-73914.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissue-73914.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissue-73914.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-73914.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,30 @@\n+// build-pass\n+// compile-flags:-Copt-level=0\n+// edition:2018\n+\n+struct S<T>(std::marker::PhantomData<T>);\n+\n+impl<T> std::ops::Deref for S<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        todo!()\n+    }\n+}\n+impl<T> std::ops::DerefMut for S<T> {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        todo!()\n+    }\n+}\n+\n+async fn new() -> S<u64> {\n+    todo!()\n+}\n+\n+async fn crash() {\n+    *new().await = 1 + 1;\n+}\n+\n+fn main() {\n+    let _ = crash();\n+}"}, {"sha": "b810a90ef37f9057244371fa67c744436ae2089d", "filename": "src/test/ui/issues/issue-1962.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-1962.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-1962.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1962.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -D while-true\n+// run-rustfix\n+\n+fn main() {\n+    let mut i = 0;\n+    loop { //~ ERROR denote infinite loops with `loop\n+        i += 1;\n+        if i == 5 { break; }\n+    }\n+}"}, {"sha": "00d2bbd28506e10a7b79378626f10c20762e0848", "filename": "src/test/ui/issues/issue-1962.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-1962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-1962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1962.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,8 +1,10 @@\n // compile-flags: -D while-true\n+// run-rustfix\n+\n fn main() {\n-  let mut i = 0;\n-  while true  { //~ ERROR denote infinite loops with `loop\n-    i += 1;\n-    if i == 5 { break; }\n-  }\n+    let mut i = 0;\n+    while true { //~ ERROR denote infinite loops with `loop\n+        i += 1;\n+        if i == 5 { break; }\n+    }\n }"}, {"sha": "17142912696a75f67f9d8aacad6d66a716541e9c", "filename": "src/test/ui/issues/issue-1962.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-1962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-1962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1962.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,8 +1,8 @@\n error: denote infinite loops with `loop { ... }`\n-  --> $DIR/issue-1962.rs:4:3\n+  --> $DIR/issue-1962.rs:6:5\n    |\n-LL |   while true  {\n-   |   ^^^^^^^^^^ help: use `loop`\n+LL |     while true {\n+   |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: requested on the command line with `-D while-true`\n "}, {"sha": "d61c248c6ec62d9946c50942ebf2597b43ac2c9a", "filename": "src/test/ui/issues/issue-40782.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-40782.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-40782.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40782.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+\n+fn main() {\n+    for _i in 0..2 { //~ ERROR missing `in`\n+    }\n+}"}, {"sha": "3688c69fbc613c2931466bf992cb716d307c114b", "filename": "src/test/ui/issues/issue-40782.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-40782.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-40782.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40782.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n+\n fn main() {\n-    for i 0..2 { //~ ERROR missing `in`\n+    for _i 0..2 { //~ ERROR missing `in`\n     }\n }"}, {"sha": "9d7776f32b34572a722cac4266f1a69218d20721", "filename": "src/test/ui/issues/issue-40782.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-40782.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-40782.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40782.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,8 +1,8 @@\n error: missing `in` in `for` loop\n-  --> $DIR/issue-40782.rs:2:10\n+  --> $DIR/issue-40782.rs:4:11\n    |\n-LL |     for i 0..2 {\n-   |          ^ help: try adding `in` here\n+LL |     for _i 0..2 {\n+   |           ^ help: try adding `in` here\n \n error: aborting due to previous error\n "}, {"sha": "2cb5a4996ee2526e675c642003e4de7e23794ac1", "filename": "src/test/ui/issues/issue-46186.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-46186.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-46186.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+pub struct Struct {\n+    pub a: usize,\n+}\n+//~^ ERROR expected item, found `;`\n+\n+fn main() {}"}, {"sha": "84cad38c5ecb9695c255c5d9dfd87d17b485e486", "filename": "src/test/ui/issues/issue-46186.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,7 @@\n-struct Struct {\n-    a: usize,\n+// run-rustfix\n+\n+pub struct Struct {\n+    pub a: usize,\n };\n //~^ ERROR expected item, found `;`\n "}, {"sha": "0766c8a33df14791836b0950e4e635dd83286019", "filename": "src/test/ui/issues/issue-46186.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error: expected item, found `;`\n-  --> $DIR/issue-46186.rs:3:2\n+  --> $DIR/issue-46186.rs:5:2\n    |\n LL | };\n    |  ^ help: remove this semicolon"}, {"sha": "2f8c925b85328c6e3a79da3802761a1943b33c0b", "filename": "src/test/ui/issues/issue-50571.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-50571.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-50571.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50571.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+trait Foo {\n+    fn foo(_: [i32; 2]) {}\n+    //~^ ERROR: patterns aren't allowed in methods without bodies\n+}\n+\n+fn main() {}"}, {"sha": "56f422e7d58388e3fcbceb870b42d33f1f84aaf4", "filename": "src/test/ui/issues/issue-50571.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-50571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-50571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50571.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n trait Foo {\n     fn foo([a, b]: [i32; 2]) {}\n     //~^ ERROR: patterns aren't allowed in methods without bodies"}, {"sha": "ed01362758573c4d237912cfe9fff7d9b239b5d1", "filename": "src/test/ui/issues/issue-50571.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50571.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error[E0642]: patterns aren't allowed in methods without bodies\n-  --> $DIR/issue-50571.rs:2:12\n+  --> $DIR/issue-50571.rs:4:12\n    |\n LL |     fn foo([a, b]: [i32; 2]) {}\n    |            ^^^^^^"}, {"sha": "c70c39b5f6dc786911c90a86cec46d2b7e4e7fd8", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.fixed", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,107 @@\n+// run-rustfix\n+\n+#![feature(box_patterns, stmt_expr_attributes)]\n+#![feature(or_patterns)]\n+\n+#![allow(\n+    dead_code,\n+    ellipsis_inclusive_range_patterns,\n+    irrefutable_let_patterns,\n+    unreachable_patterns,\n+    unused_mut,\n+    unused_variables\n+)]\n+#![deny(unused_parens)]\n+\n+fn lint_on_top_level() {\n+    let a = 0; //~ ERROR unnecessary parentheses around pattern\n+    for a in 0..1 {} //~ ERROR unnecessary parentheses around pattern\n+    if let a = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    while let a = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    fn foo(a: u8) {} //~ ERROR unnecessary parentheses around pattern\n+    let _ = |a: u8| 0; //~ ERROR unnecessary parentheses around pattern\n+}\n+\n+fn _no_lint_attr() {\n+    let _x = #[allow(dead_code)] (1 + 2);\n+}\n+\n+// Don't lint in these cases (#64106).\n+fn or_patterns_no_lint() {\n+    match Box::new(0) {\n+        box (0 | 1) => {} // Should not lint as `box 0 | 1` binds as `(box 0) | 1`.\n+        _ => {}\n+    }\n+\n+    match 0 {\n+        x @ (0 | 1) => {} // Should not lint as `x @ 0 | 1` binds as `(x @ 0) | 1`.\n+        _ => {}\n+    }\n+\n+    if let &(0 | 1) = &0 {} // Should also not lint.\n+    if let &mut (0 | 1) = &mut 0 {} // Same.\n+\n+    fn foo((Ok(a) | Err(a)): Result<u8, u8>) {} // Doesn't parse if we remove parens for now.\n+\n+    let _ = |(Ok(a) | Err(a)): Result<u8, u8>| 1; // `|Ok(a) | Err(a)| 1` parses as bit-or.\n+}\n+\n+fn or_patterns_will_lint() {\n+    if let 0 | 1 = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    if let (0 | 1,) = (0,) {} //~ ERROR unnecessary parentheses around pattern\n+    if let [0 | 1] = [0] {} //~ ERROR unnecessary parentheses around pattern\n+    if let 0 | 1 | 2 = 0 {} //~ ERROR unnecessary parentheses around pattern\n+    struct TS(u8);\n+    if let TS(0 | 1) = TS(0) {} //~ ERROR unnecessary parentheses around pattern\n+    struct NS { f: u8 }\n+    if let NS { f: 0 | 1 } = (NS { f: 0 }) {} //~ ERROR unnecessary parentheses around pattern\n+}\n+\n+// Don't lint on `&(mut x)` because `&mut x` means something else (#55342).\n+fn deref_mut_binding_no_lint() {\n+    let &(mut x) = &0;\n+}\n+\n+fn main() {\n+    match 1 {\n+        _ => {} //~ ERROR unnecessary parentheses around pattern\n+        y => {} //~ ERROR unnecessary parentheses around pattern\n+        ref r => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ 1...2 => {} //~ ERROR unnecessary parentheses around pattern\n+        (1...2) => {} // Non ambiguous range pattern should not warn\n+        e @ (3...4) => {} // Non ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1...2) => {} //~ ERROR unnecessary parentheses around pattern\n+        &_ => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ &(1...2) => {} // Ambiguous range pattern should not warn\n+        &(1...2) => {} // Ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1...2) | e @ &(3...4) => {} // Complex ambiguous pattern should not warn\n+        &_ => {}\n+    }\n+\n+    match 1 {\n+        _ => {} //~ ERROR unnecessary parentheses around pattern\n+        y => {} //~ ERROR unnecessary parentheses around pattern\n+        ref r => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ 1..=2 => {} //~ ERROR unnecessary parentheses around pattern\n+        (1..=2) => {} // Non ambiguous range pattern should not warn\n+        e @ (3..=4) => {} // Non ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1..=2) => {} //~ ERROR unnecessary parentheses around pattern\n+        &_ => {} //~ ERROR unnecessary parentheses around pattern\n+        e @ &(1..=2) => {} // Ambiguous range pattern should not warn\n+        &(1..=2) => {} // Ambiguous range pattern should not warn\n+    }\n+\n+    match &1 {\n+        e @ &(1..=2) | e @ &(3..=4) => {} // Complex ambiguous pattern should not warn\n+        &_ => {}\n+    }\n+}"}, {"sha": "9dd3b63c0fed785c82d1f3eb4719390af66fd228", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,10 +1,16 @@\n-#![feature(box_patterns, stmt_expr_attributes)]\n+// run-rustfix\n \n+#![feature(box_patterns, stmt_expr_attributes)]\n #![feature(or_patterns)]\n \n-#![allow(ellipsis_inclusive_range_patterns)]\n-#![allow(unreachable_patterns)]\n-#![allow(unused_variables)]\n+#![allow(\n+    dead_code,\n+    ellipsis_inclusive_range_patterns,\n+    irrefutable_let_patterns,\n+    unreachable_patterns,\n+    unused_mut,\n+    unused_variables\n+)]\n #![deny(unused_parens)]\n \n fn lint_on_top_level() {"}, {"sha": "ee466857757a37b9c8922a874d5a16d39cd546ea", "filename": "src/test/ui/lint/issue-54538-unused-parens-lint.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-54538-unused-parens-lint.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,149 +1,149 @@\n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:11:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:17:9\n    |\n LL |     let (a) = 0;\n    |         ^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-54538-unused-parens-lint.rs:8:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:14:9\n    |\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:12:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:18:9\n    |\n LL |     for (a) in 0..1 {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:13:12\n+  --> $DIR/issue-54538-unused-parens-lint.rs:19:12\n    |\n LL |     if let (a) = 0 {}\n    |            ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:14:15\n+  --> $DIR/issue-54538-unused-parens-lint.rs:20:15\n    |\n LL |     while let (a) = 0 {}\n    |               ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:15:12\n+  --> $DIR/issue-54538-unused-parens-lint.rs:21:12\n    |\n LL |     fn foo((a): u8) {}\n    |            ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:16:14\n+  --> $DIR/issue-54538-unused-parens-lint.rs:22:14\n    |\n LL |     let _ = |(a): u8| 0;\n    |              ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:44:12\n+  --> $DIR/issue-54538-unused-parens-lint.rs:50:12\n    |\n LL |     if let (0 | 1) = 0 {}\n    |            ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:45:13\n+  --> $DIR/issue-54538-unused-parens-lint.rs:51:13\n    |\n LL |     if let ((0 | 1),) = (0,) {}\n    |             ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:46:13\n+  --> $DIR/issue-54538-unused-parens-lint.rs:52:13\n    |\n LL |     if let [(0 | 1)] = [0] {}\n    |             ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:47:16\n+  --> $DIR/issue-54538-unused-parens-lint.rs:53:16\n    |\n LL |     if let 0 | (1 | 2) = 0 {}\n    |                ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:49:15\n+  --> $DIR/issue-54538-unused-parens-lint.rs:55:15\n    |\n LL |     if let TS((0 | 1)) = TS(0) {}\n    |               ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:51:20\n+  --> $DIR/issue-54538-unused-parens-lint.rs:57:20\n    |\n LL |     if let NS { f: (0 | 1) } = (NS { f: 0 }) {}\n    |                    ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:61:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:67:9\n    |\n LL |         (_) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:62:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:68:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:63:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:69:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:64:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:70:9\n    |\n LL |         (e @ 1...2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:70:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:76:9\n    |\n LL |         (e @ &(1...2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:71:10\n+  --> $DIR/issue-54538-unused-parens-lint.rs:77:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:82:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:88:9\n    |\n LL |         (_) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:83:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:89:9\n    |\n LL |         (y) => {}\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:84:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:90:9\n    |\n LL |         (ref r) => {}\n    |         ^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:85:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:91:9\n    |\n LL |         (e @ 1..=2) => {}\n    |         ^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:91:9\n+  --> $DIR/issue-54538-unused-parens-lint.rs:97:9\n    |\n LL |         (e @ &(1..=2)) => {}\n    |         ^^^^^^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around pattern\n-  --> $DIR/issue-54538-unused-parens-lint.rs:92:10\n+  --> $DIR/issue-54538-unused-parens-lint.rs:98:10\n    |\n LL |         &(_) => {}\n    |          ^^^ help: remove these parentheses"}, {"sha": "c9dec395580f194cbea64eed3800f60f67b68d90", "filename": "src/test/ui/lint/lint-unnecessary-parens.fixed", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,79 @@\n+// run-rustfix\n+\n+#![deny(unused_parens)]\n+#![allow(while_true)] // for rustfix\n+\n+#[derive(Eq, PartialEq)]\n+struct X { y: bool }\n+impl X {\n+    fn foo(&self, conjunct: bool) -> bool { self.y && conjunct }\n+}\n+\n+fn foo() -> isize {\n+    return 1; //~ ERROR unnecessary parentheses around `return` value\n+}\n+fn bar(y: bool) -> X {\n+    return X { y }; //~ ERROR unnecessary parentheses around `return` value\n+}\n+\n+pub fn unused_parens_around_return_type() -> u32 { //~ ERROR unnecessary parentheses around type\n+    panic!()\n+}\n+\n+pub fn unused_parens_around_block_return() -> u32 {\n+    let _foo = {\n+        5 //~ ERROR unnecessary parentheses around block return value\n+    };\n+    5 //~ ERROR unnecessary parentheses around block return value\n+}\n+\n+pub trait Trait {\n+    fn test(&self);\n+}\n+\n+pub fn passes_unused_parens_lint() -> &'static (dyn Trait) {\n+    panic!()\n+}\n+\n+macro_rules! baz {\n+    ($($foo:expr),+) => {\n+        ($($foo),*)\n+    }\n+}\n+\n+pub const CONST_ITEM: usize = 10; //~ ERROR unnecessary parentheses around assigned value\n+pub static STATIC_ITEM: usize = 10; //~ ERROR unnecessary parentheses around assigned value\n+\n+fn main() {\n+    foo();\n+    bar(true); //~ ERROR unnecessary parentheses around function argument\n+\n+    if true {} //~ ERROR unnecessary parentheses around `if` condition\n+    while true {} //~ ERROR unnecessary parentheses around `while` condition\n+    match true { //~ ERROR unnecessary parentheses around `match` scrutinee expression\n+        _ => {}\n+    }\n+    if let 1 = 1 {} //~ ERROR unnecessary parentheses around `let` scrutinee expression\n+    while let 1 = 2 {} //~ ERROR unnecessary parentheses around `let` scrutinee expression\n+    let v = X { y: false };\n+    // struct lits needs parens, so these shouldn't warn.\n+    if (v == X { y: true }) {}\n+    if (X { y: true } == v) {}\n+    if (X { y: false }.y) {}\n+\n+    while (X { y: false }.foo(true)) {}\n+    while (true | X { y: false }.y) {}\n+\n+    match (X { y: false }) {\n+        _ => {}\n+    }\n+\n+    X { y: false }.foo(true); //~ ERROR unnecessary parentheses around method argument\n+\n+    let mut _a = 0; //~ ERROR unnecessary parentheses around assigned value\n+    _a = 0; //~ ERROR unnecessary parentheses around assigned value\n+    _a += 1; //~ ERROR unnecessary parentheses around assigned value\n+\n+    let _a = baz!(3, 4);\n+    let _b = baz!(3);\n+}"}, {"sha": "884bb4d2e99b67cc3029c4d661de5a9eb7436203", "filename": "src/test/ui/lint/lint-unnecessary-parens.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![deny(unused_parens)]\n+#![allow(while_true)] // for rustfix\n \n #[derive(Eq, PartialEq)]\n struct X { y: bool }\n@@ -13,22 +16,22 @@ fn bar(y: bool) -> X {\n     return (X { y }); //~ ERROR unnecessary parentheses around `return` value\n }\n \n-fn unused_parens_around_return_type() -> (u32) { //~ ERROR unnecessary parentheses around type\n+pub fn unused_parens_around_return_type() -> (u32) { //~ ERROR unnecessary parentheses around type\n     panic!()\n }\n \n-fn unused_parens_around_block_return() -> u32 {\n-    let foo = {\n+pub fn unused_parens_around_block_return() -> u32 {\n+    let _foo = {\n         (5) //~ ERROR unnecessary parentheses around block return value\n     };\n     (5) //~ ERROR unnecessary parentheses around block return value\n }\n \n-trait Trait {\n+pub trait Trait {\n     fn test(&self);\n }\n \n-fn passes_unused_parens_lint() -> &'static (dyn Trait) {\n+pub fn passes_unused_parens_lint() -> &'static (dyn Trait) {\n     panic!()\n }\n \n@@ -38,16 +41,15 @@ macro_rules! baz {\n     }\n }\n \n-const CONST_ITEM: usize = (10); //~ ERROR unnecessary parentheses around assigned value\n-static STATIC_ITEM: usize = (10); //~ ERROR unnecessary parentheses around assigned value\n+pub const CONST_ITEM: usize = (10); //~ ERROR unnecessary parentheses around assigned value\n+pub static STATIC_ITEM: usize = (10); //~ ERROR unnecessary parentheses around assigned value\n \n fn main() {\n     foo();\n     bar((true)); //~ ERROR unnecessary parentheses around function argument\n \n     if (true) {} //~ ERROR unnecessary parentheses around `if` condition\n     while (true) {} //~ ERROR unnecessary parentheses around `while` condition\n-    //~^ WARN denote infinite loops with\n     match (true) { //~ ERROR unnecessary parentheses around `match` scrutinee expression\n         _ => {}\n     }"}, {"sha": "1abf47c8af5214e1fde9a60e29a7a9036cdadd18", "filename": "src/test/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 25, "deletions": 33, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,118 +1,110 @@\n error: unnecessary parentheses around `return` value\n-  --> $DIR/lint-unnecessary-parens.rs:10:12\n+  --> $DIR/lint-unnecessary-parens.rs:13:12\n    |\n LL |     return (1);\n    |            ^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-unnecessary-parens.rs:1:9\n+  --> $DIR/lint-unnecessary-parens.rs:3:9\n    |\n LL | #![deny(unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n error: unnecessary parentheses around `return` value\n-  --> $DIR/lint-unnecessary-parens.rs:13:12\n+  --> $DIR/lint-unnecessary-parens.rs:16:12\n    |\n LL |     return (X { y });\n    |            ^^^^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around type\n-  --> $DIR/lint-unnecessary-parens.rs:16:42\n+  --> $DIR/lint-unnecessary-parens.rs:19:46\n    |\n-LL | fn unused_parens_around_return_type() -> (u32) {\n-   |                                          ^^^^^ help: remove these parentheses\n+LL | pub fn unused_parens_around_return_type() -> (u32) {\n+   |                                              ^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around block return value\n-  --> $DIR/lint-unnecessary-parens.rs:22:9\n+  --> $DIR/lint-unnecessary-parens.rs:25:9\n    |\n LL |         (5)\n    |         ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around block return value\n-  --> $DIR/lint-unnecessary-parens.rs:24:5\n+  --> $DIR/lint-unnecessary-parens.rs:27:5\n    |\n LL |     (5)\n    |     ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:41:27\n+  --> $DIR/lint-unnecessary-parens.rs:44:31\n    |\n-LL | const CONST_ITEM: usize = (10);\n-   |                           ^^^^ help: remove these parentheses\n+LL | pub const CONST_ITEM: usize = (10);\n+   |                               ^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:42:29\n+  --> $DIR/lint-unnecessary-parens.rs:45:33\n    |\n-LL | static STATIC_ITEM: usize = (10);\n-   |                             ^^^^ help: remove these parentheses\n+LL | pub static STATIC_ITEM: usize = (10);\n+   |                                 ^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around function argument\n-  --> $DIR/lint-unnecessary-parens.rs:46:9\n+  --> $DIR/lint-unnecessary-parens.rs:49:9\n    |\n LL |     bar((true));\n    |         ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `if` condition\n-  --> $DIR/lint-unnecessary-parens.rs:48:8\n+  --> $DIR/lint-unnecessary-parens.rs:51:8\n    |\n LL |     if (true) {}\n    |        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `while` condition\n-  --> $DIR/lint-unnecessary-parens.rs:49:11\n+  --> $DIR/lint-unnecessary-parens.rs:52:11\n    |\n LL |     while (true) {}\n    |           ^^^^^^ help: remove these parentheses\n \n-warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/lint-unnecessary-parens.rs:49:5\n-   |\n-LL |     while (true) {}\n-   |     ^^^^^^^^^^^^ help: use `loop`\n-   |\n-   = note: `#[warn(while_true)]` on by default\n-\n error: unnecessary parentheses around `match` scrutinee expression\n-  --> $DIR/lint-unnecessary-parens.rs:51:11\n+  --> $DIR/lint-unnecessary-parens.rs:53:11\n    |\n LL |     match (true) {\n    |           ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` scrutinee expression\n-  --> $DIR/lint-unnecessary-parens.rs:54:16\n+  --> $DIR/lint-unnecessary-parens.rs:56:16\n    |\n LL |     if let 1 = (1) {}\n    |                ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` scrutinee expression\n-  --> $DIR/lint-unnecessary-parens.rs:55:19\n+  --> $DIR/lint-unnecessary-parens.rs:57:19\n    |\n LL |     while let 1 = (2) {}\n    |                   ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around method argument\n-  --> $DIR/lint-unnecessary-parens.rs:69:24\n+  --> $DIR/lint-unnecessary-parens.rs:71:24\n    |\n LL |     X { y: false }.foo((true));\n    |                        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:71:18\n+  --> $DIR/lint-unnecessary-parens.rs:73:18\n    |\n LL |     let mut _a = (0);\n    |                  ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:72:10\n+  --> $DIR/lint-unnecessary-parens.rs:74:10\n    |\n LL |     _a = (0);\n    |          ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:73:11\n+  --> $DIR/lint-unnecessary-parens.rs:75:11\n    |\n LL |     _a += (1);\n    |           ^^^ help: remove these parentheses\n \n-error: aborting due to 17 previous errors; 1 warning emitted\n+error: aborting due to 17 previous errors\n "}, {"sha": "92ce103586c2584bbddc7a40312185888a698178", "filename": "src/test/ui/lint/lint-unused-mut-self.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![allow(unused_assignments)]\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![deny(unused_mut)]\n+\n+struct Foo;\n+impl Foo {\n+    fn foo(self) {} //~ ERROR: variable does not need to be mutable\n+    fn bar(self: Box<Foo>) {} //~ ERROR: variable does not need to be mutable\n+}\n+\n+fn main() {}"}, {"sha": "70736ce216e5ecce15108a44c539f6f024e385d2", "filename": "src/test/ui/lint/lint-unused-mut-self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n #![allow(dead_code)]"}, {"sha": "01a524bd323c44ef02f9f210e53bd73044c4a64a", "filename": "src/test/ui/lint/lint-unused-mut-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-self.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,19 +1,19 @@\n error: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-self.rs:8:12\n+  --> $DIR/lint-unused-mut-self.rs:10:12\n    |\n LL |     fn foo(mut self) {}\n    |            ----^^^^\n    |            |\n    |            help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-unused-mut-self.rs:4:9\n+  --> $DIR/lint-unused-mut-self.rs:6:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^\n \n error: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-self.rs:9:12\n+  --> $DIR/lint-unused-mut-self.rs:11:12\n    |\n LL |     fn bar(mut self: Box<Foo>) {}\n    |            ----^^^^"}, {"sha": "67ec7facf1780bef3f1b47d29650d92fb7f47577", "filename": "src/test/ui/lint/lint-unused-mut-variables.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -92,13 +92,16 @@ fn main() {\n         mut x => {} //~ WARN: variable does not need to be mutable\n \n     }\n+\n     match (30, 2) {\n-      (mut x, 1) | //~ WARN: variable does not need to be mutable\n+        // FIXME: Here's a false positive,\n+        // shouldn't be removed `mut` not to be bound with a different way.\n+        (mut x, 1) | //~ WARN: variable does not need to be mutable\n \n-      (mut x, 2) |\n-      (mut x, 3) => {\n-      }\n-      _ => {}\n+        (mut x, 2) |\n+        (mut x, 3) => {\n+        }\n+        _ => {}\n     }\n \n     let x = |mut y: isize| 10; //~ WARN: variable does not need to be mutable"}, {"sha": "805ed2b40bb7bc422a6885d0fae606bb4a969027", "filename": "src/test/ui/lint/lint-unused-mut-variables.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -69,7 +69,7 @@ LL |         mut a: i32,\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:104:14\n+  --> $DIR/lint-unused-mut-variables.rs:107:14\n    |\n LL |     let x = |mut y: isize| 10;\n    |              ----^\n@@ -141,79 +141,79 @@ LL |         mut x => {}\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:96:8\n+  --> $DIR/lint-unused-mut-variables.rs:99:10\n    |\n-LL |       (mut x, 1) |\n-   |        ----^\n-   |        |\n-   |        help: remove this `mut`\n+LL |         (mut x, 1) |\n+   |          ----^\n+   |          |\n+   |          help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:109:9\n+  --> $DIR/lint-unused-mut-variables.rs:112:9\n    |\n LL |     let mut a = &mut 5;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:114:9\n+  --> $DIR/lint-unused-mut-variables.rs:117:9\n    |\n LL |     let mut b = (&mut a,);\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:117:9\n+  --> $DIR/lint-unused-mut-variables.rs:120:9\n    |\n LL |     let mut x = &mut 1;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:129:9\n+  --> $DIR/lint-unused-mut-variables.rs:132:9\n    |\n LL |     let mut v : &mut Vec<()> = &mut vec![];\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:184:9\n+  --> $DIR/lint-unused-mut-variables.rs:187:9\n    |\n LL |     let mut raw_address_of_const = 1;\n    |         ----^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:106:13\n+  --> $DIR/lint-unused-mut-variables.rs:109:13\n    |\n LL |     fn what(mut foo: isize) {}\n    |             ----^^^\n    |             |\n    |             help: remove this `mut`\n \n warning: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:124:20\n+  --> $DIR/lint-unused-mut-variables.rs:127:20\n    |\n LL |     fn mut_ref_arg(mut arg : &mut [u8]) -> &mut [u8] {\n    |                    ----^^^\n    |                    |\n    |                    help: remove this `mut`\n \n error: variable does not need to be mutable\n-  --> $DIR/lint-unused-mut-variables.rs:202:9\n+  --> $DIR/lint-unused-mut-variables.rs:205:9\n    |\n LL |     let mut b = vec![2];\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-unused-mut-variables.rs:198:8\n+  --> $DIR/lint-unused-mut-variables.rs:201:8\n    |\n LL | #[deny(unused_mut)]\n    |        ^^^^^^^^^^"}, {"sha": "35851690b738135126aa773d6b3437f1d056f3b4", "filename": "src/test/ui/lint/suggestions.fixed", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fsuggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fsuggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,66 @@\n+// ignore-tidy-tab\n+// run-rustfix\n+\n+#![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n+\n+#[no_mangle] pub static DISCOVERY: usize = 1;\n+//~^ ERROR const items should never be `#[no_mangle]`\n+//~| HELP try a static value\n+\n+\n+//~^ HELP remove this attribute\n+pub fn defiant<T>(_t: T) {}\n+//~^ WARN functions generic over types or consts must be mangled\n+\n+#[no_mangle]\n+fn rio_grande() {}\n+\n+mod badlands {\n+    // The private-no-mangle lints shouldn't suggest inserting `pub` when the\n+    // item is already `pub` (but triggered the lint because, e.g., it's in a\n+    // private module). (Issue #47383)\n+    #[no_mangle] pub static DAUNTLESS: bool = true;\n+    //~^ ERROR const items should never be `#[no_mangle]`\n+    //~| HELP try a static value\n+    #[allow(dead_code)] // for rustfix\n+     pub fn val_jean<T>() {}\n+    //~^ WARN functions generic over types or consts must be mangled\n+    //~| HELP remove this attribute\n+\n+    // ... but we can suggest just-`pub` instead of restricted\n+    #[no_mangle] pub static VETAR: bool = true;\n+    //~^ ERROR const items should never be `#[no_mangle]`\n+    //~| HELP try a static value\n+    #[allow(dead_code)] // for rustfix\n+     pub(crate) fn crossfield<T>() {}\n+    //~^ WARN functions generic over types or consts must be mangled\n+    //~| HELP remove this attribute\n+}\n+\n+struct Equinox {\n+    warp_factor: f32,\n+}\n+\n+fn main() {\n+    loop {\n+    //~^ WARN denote infinite loops\n+    //~| HELP use `loop`\n+        let registry_no = format!(\"NX-{}\", 74205);\n+        //~^ WARN does not need to be mutable\n+        //~| HELP remove this `mut`\n+        //~| WARN unnecessary parentheses\n+        //~| HELP remove these parentheses\n+        // the line after `mut` has a `\\t` at the beginning, this is on purpose\n+        let b = 1;\n+        //~^^ WARN does not need to be mutable\n+        //~| HELP remove this `mut`\n+        let d = Equinox { warp_factor: 9.975 };\n+        match d {\n+            #[allow(unused_variables)] // for rustfix\n+            Equinox { warp_factor } => {}\n+            //~^ WARN this pattern is redundant\n+            //~| HELP use shorthand field pattern\n+        }\n+        println!(\"{} {}\", registry_no, b);\n+    }\n+}"}, {"sha": "be6f0d6b30fed2691cf7732ea1dcb30cf5e39a42", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-tab\n+// run-rustfix\n \n #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n \n@@ -21,6 +22,7 @@ mod badlands {\n     #[no_mangle] pub const DAUNTLESS: bool = true;\n     //~^ ERROR const items should never be `#[no_mangle]`\n     //~| HELP try a static value\n+    #[allow(dead_code)] // for rustfix\n     #[no_mangle] pub fn val_jean<T>() {}\n     //~^ WARN functions generic over types or consts must be mangled\n     //~| HELP remove this attribute\n@@ -29,6 +31,7 @@ mod badlands {\n     #[no_mangle] pub(crate) const VETAR: bool = true;\n     //~^ ERROR const items should never be `#[no_mangle]`\n     //~| HELP try a static value\n+    #[allow(dead_code)] // for rustfix\n     #[no_mangle] pub(crate) fn crossfield<T>() {}\n     //~^ WARN functions generic over types or consts must be mangled\n     //~| HELP remove this attribute\n@@ -54,6 +57,7 @@ fn main() {\n         //~| HELP remove this `mut`\n         let d = Equinox { warp_factor: 9.975 };\n         match d {\n+            #[allow(unused_variables)] // for rustfix\n             Equinox { warp_factor: warp_factor } => {}\n             //~^ WARN this pattern is redundant\n             //~| HELP use shorthand field pattern"}, {"sha": "cad2514625588e36c89a9de4c127459f0aebf332", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,39 +1,39 @@\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:42:5\n+  --> $DIR/suggestions.rs:45:5\n    |\n LL |     while true {\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: `#[warn(while_true)]` on by default\n \n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:45:31\n+  --> $DIR/suggestions.rs:48:31\n    |\n LL |         let mut registry_no = (format!(\"NX-{}\", 74205));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/suggestions.rs:3:21\n+  --> $DIR/suggestions.rs:4:21\n    |\n LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n    |                     ^^^^^^^^^^^^^\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:45:13\n+  --> $DIR/suggestions.rs:48:13\n    |\n LL |         let mut registry_no = (format!(\"NX-{}\", 74205));\n    |             ----^^^^^^^^^^^\n    |             |\n    |             help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/suggestions.rs:3:9\n+  --> $DIR/suggestions.rs:4:9\n    |\n LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n    |         ^^^^^^^^^^\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:51:13\n+  --> $DIR/suggestions.rs:54:13\n    |\n LL |            let mut\n    |   _____________^\n@@ -45,7 +45,7 @@ LL | ||             b = 1;\n    |               help: remove this `mut`\n \n error: const items should never be `#[no_mangle]`\n-  --> $DIR/suggestions.rs:5:14\n+  --> $DIR/suggestions.rs:6:14\n    |\n LL | #[no_mangle] const DISCOVERY: usize = 1;\n    |              -----^^^^^^^^^^^^^^^^^^^^^^\n@@ -55,7 +55,7 @@ LL | #[no_mangle] const DISCOVERY: usize = 1;\n    = note: `#[deny(no_mangle_const_items)]` on by default\n \n warning: functions generic over types or consts must be mangled\n-  --> $DIR/suggestions.rs:11:1\n+  --> $DIR/suggestions.rs:12:1\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute\n@@ -66,39 +66,39 @@ LL | pub fn defiant<T>(_t: T) {}\n    = note: `#[warn(no_mangle_generic_items)]` on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:57:23\n+  --> $DIR/suggestions.rs:61:23\n    |\n LL |             Equinox { warp_factor: warp_factor } => {}\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: use shorthand field pattern: `warp_factor`\n    |\n    = note: `#[warn(non_shorthand_field_patterns)]` on by default\n \n error: const items should never be `#[no_mangle]`\n-  --> $DIR/suggestions.rs:21:18\n+  --> $DIR/suggestions.rs:22:18\n    |\n LL |     #[no_mangle] pub const DAUNTLESS: bool = true;\n    |                  ---------^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  help: try a static value: `pub static`\n \n warning: functions generic over types or consts must be mangled\n-  --> $DIR/suggestions.rs:24:18\n+  --> $DIR/suggestions.rs:26:18\n    |\n LL |     #[no_mangle] pub fn val_jean<T>() {}\n    |     ------------ ^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     help: remove this attribute\n \n error: const items should never be `#[no_mangle]`\n-  --> $DIR/suggestions.rs:29:18\n+  --> $DIR/suggestions.rs:31:18\n    |\n LL |     #[no_mangle] pub(crate) const VETAR: bool = true;\n    |                  ----------------^^^^^^^^^^^^^^^^^^^^\n    |                  |\n    |                  help: try a static value: `pub static`\n \n warning: functions generic over types or consts must be mangled\n-  --> $DIR/suggestions.rs:32:18\n+  --> $DIR/suggestions.rs:35:18\n    |\n LL |     #[no_mangle] pub(crate) fn crossfield<T>() {}\n    |     ------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c0225911c6ed00879c3dd3f8422d2100858a2ca8", "filename": "src/test/ui/lint/unused_braces.fixed", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,53 @@\n+// check-pass\n+// run-rustfix\n+\n+#![warn(unused_braces, unused_parens)]\n+#![allow(unreachable_code, unused_unsafe)] // for rustfix\n+\n+fn consume<T>(_: T) {}\n+\n+fn main() {\n+    let _ = 7;\n+    //~^WARN unnecessary parentheses\n+\n+    // Do not emit a lint in these cases,\n+    // as we have to be careful with\n+    // `ref` patterns.\n+    {\n+        let _ = { 7 };\n+\n+        if let 7 = { 7 } { }\n+\n+        match { 7 } {\n+            _ => (),\n+        }\n+    }\n+\n+    if  true  {\n+        //~^ WARN unnecessary braces\n+    }\n+\n+    while  false  {\n+        //~^ WARN unnecessary braces\n+    }\n+\n+    let _: [u8;  3 ];\n+    //~^ WARN unnecessary braces\n+\n+    consume( 7 );\n+    //~^ WARN unnecessary braces\n+\n+    // Do not emit lint for multiline blocks.\n+    let _ = {\n+        7\n+    };\n+\n+    // Do not emit lint for unsafe blocks.\n+    let _ = unsafe { 7 };\n+\n+    // Do not emit lint, as the `{` would then\n+    // be parsed as part of the `return`.\n+    if { return } {\n+\n+    }\n+}"}, {"sha": "5ca4811fc32d8342f523d5af85ea902dcf852510", "filename": "src/test/ui/lint/unused_braces.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,8 @@\n // check-pass\n+// run-rustfix\n+\n #![warn(unused_braces, unused_parens)]\n+#![allow(unreachable_code, unused_unsafe)] // for rustfix\n \n fn consume<T>(_: T) {}\n "}, {"sha": "8fa5dfde61db06eba3999604f7b2629ef8f52b8c", "filename": "src/test/ui/lint/unused_braces.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,41 +1,41 @@\n warning: unnecessary parentheses around assigned value\n-  --> $DIR/unused_braces.rs:7:13\n+  --> $DIR/unused_braces.rs:10:13\n    |\n LL |     let _ = (7);\n    |             ^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/unused_braces.rs:2:24\n+  --> $DIR/unused_braces.rs:4:24\n    |\n LL | #![warn(unused_braces, unused_parens)]\n    |                        ^^^^^^^^^^^^^\n \n warning: unnecessary braces around `if` condition\n-  --> $DIR/unused_braces.rs:23:8\n+  --> $DIR/unused_braces.rs:26:8\n    |\n LL |     if { true } {\n    |        ^^^^^^^^ help: remove these braces\n    |\n note: the lint level is defined here\n-  --> $DIR/unused_braces.rs:2:9\n+  --> $DIR/unused_braces.rs:4:9\n    |\n LL | #![warn(unused_braces, unused_parens)]\n    |         ^^^^^^^^^^^^^\n \n warning: unnecessary braces around `while` condition\n-  --> $DIR/unused_braces.rs:27:11\n+  --> $DIR/unused_braces.rs:30:11\n    |\n LL |     while { false } {\n    |           ^^^^^^^^^ help: remove these braces\n \n warning: unnecessary braces around const expression\n-  --> $DIR/unused_braces.rs:31:17\n+  --> $DIR/unused_braces.rs:34:17\n    |\n LL |     let _: [u8; { 3 }];\n    |                 ^^^^^ help: remove these braces\n \n warning: unnecessary braces around function argument\n-  --> $DIR/unused_braces.rs:34:13\n+  --> $DIR/unused_braces.rs:37:13\n    |\n LL |     consume({ 7 });\n    |             ^^^^^ help: remove these braces"}, {"sha": "25950334549f95baccc299ff076825fe54d05fe2", "filename": "src/test/ui/lint/unused_braces_borrow.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// run-rustfix\n+\n+#![warn(unused_braces)]\n+\n+// changing `&{ expr }` to `&expr` changes the semantic of the program\n+// so we should not warn this case\n+\n+#[repr(packed)]\n+pub struct A {\n+    pub a: u8,\n+    pub b: u32,\n+}\n+\n+fn consume<T>(_: T) {}\n+\n+fn main() {\n+    let a = A {\n+        a: 42,\n+        b: 1729,\n+    };\n+\n+    consume(&{ a.b });\n+    consume( a.b );\n+    //~^ WARN unnecessary braces\n+}"}, {"sha": "b7c529d73b94e058d394e52f13cbddecbf4579c7", "filename": "src/test/ui/lint/unused_braces_borrow.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,13 +1,15 @@\n // check-pass\n+// run-rustfix\n+\n #![warn(unused_braces)]\n \n // changing `&{ expr }` to `&expr` changes the semantic of the program\n // so we should not warn this case\n \n #[repr(packed)]\n-struct A {\n-    a: u8,\n-    b: u32,\n+pub struct A {\n+    pub a: u8,\n+    pub b: u32,\n }\n \n fn consume<T>(_: T) {}"}, {"sha": "f018c46fcd3c6ae3772d60b184e2267c3f61fd77", "filename": "src/test/ui/lint/unused_braces_borrow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,11 +1,11 @@\n warning: unnecessary braces around function argument\n-  --> $DIR/unused_braces_borrow.rs:22:13\n+  --> $DIR/unused_braces_borrow.rs:24:13\n    |\n LL |     consume({ a.b });\n    |             ^^^^^^^ help: remove these braces\n    |\n note: the lint level is defined here\n-  --> $DIR/unused_braces_borrow.rs:2:9\n+  --> $DIR/unused_braces_borrow.rs:4:9\n    |\n LL | #![warn(unused_braces)]\n    |         ^^^^^^^^^^^^^"}, {"sha": "639de2813a90a85f2ff7afa334526d08e599ad41", "filename": "src/test/ui/nll/capture-mut-ref.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+// Check that capturing a mutable reference by move and assigning to its\n+// referent doesn't make the unused mut lint think that it is mutable.\n+\n+#![deny(unused_mut)]\n+\n+pub fn mutable_upvar() {\n+    let x = &mut 0;\n+    //~^ ERROR\n+    move || {\n+        *x = 1;\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "89f49e1ea5186d1ace0054dcf3469a4b7778706e", "filename": "src/test/ui/nll/capture-mut-ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,9 +1,11 @@\n+// run-rustfix\n+\n // Check that capturing a mutable reference by move and assigning to its\n // referent doesn't make the unused mut lint think that it is mutable.\n \n #![deny(unused_mut)]\n \n-fn mutable_upvar() {\n+pub fn mutable_upvar() {\n     let mut x = &mut 0;\n     //~^ ERROR\n     move || {"}, {"sha": "4898d569235e73d1b7cc13ecd991970d0ac70ab3", "filename": "src/test/ui/nll/capture-mut-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-mut-ref.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/capture-mut-ref.rs:7:9\n+  --> $DIR/capture-mut-ref.rs:9:9\n    |\n LL |     let mut x = &mut 0;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/capture-mut-ref.rs:4:9\n+  --> $DIR/capture-mut-ref.rs:6:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^"}, {"sha": "63e00c1722e453b196fc5f487e495809c1752751", "filename": "src/test/ui/nll/issue-61424.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fissue-61424.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fissue-61424.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-61424.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#![deny(unused_mut)]\n+\n+fn main() {\n+    let x; //~ ERROR: variable does not need to be mutable\n+    x = String::new();\n+    dbg!(x);\n+}"}, {"sha": "3b64996c27b07ead844a1dfbf56b7ba8b9712dbd", "filename": "src/test/ui/nll/issue-61424.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fissue-61424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fissue-61424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-61424.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![deny(unused_mut)]\n \n fn main() {"}, {"sha": "6de6b7f3abd0b8a743abf61ab534aede4de2a26d", "filename": "src/test/ui/nll/issue-61424.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fissue-61424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Fissue-61424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-61424.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/issue-61424.rs:4:9\n+  --> $DIR/issue-61424.rs:6:9\n    |\n LL |     let mut x;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-61424.rs:1:9\n+  --> $DIR/issue-61424.rs:3:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^"}, {"sha": "5632de1cd34ded4224ca7be61505a11ee3aad669", "filename": "src/test/ui/nll/unused-mut-issue-50343.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#![deny(unused_mut)]\n+#![allow(unused_variables)] // for rustfix\n+\n+fn main() {\n+    vec![(42, 22)].iter().map(|(x, _y)| ()).count();\n+    //~^ ERROR: variable does not need to be mutable\n+}"}, {"sha": "c849ac8c79e43243bfb40c18c7803d6aac5cd108", "filename": "src/test/ui/nll/unused-mut-issue-50343.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,4 +1,7 @@\n+// run-rustfix\n+\n #![deny(unused_mut)]\n+#![allow(unused_variables)] // for rustfix\n \n fn main() {\n     vec![(42, 22)].iter().map(|(mut x, _y)| ()).count();"}, {"sha": "cb02d76205c7f22800092c2aae6b9d727a545b2c", "filename": "src/test/ui/nll/unused-mut-issue-50343.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Funused-mut-issue-50343.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/unused-mut-issue-50343.rs:4:33\n+  --> $DIR/unused-mut-issue-50343.rs:7:33\n    |\n LL |     vec![(42, 22)].iter().map(|(mut x, _y)| ()).count();\n    |                                 ----^\n    |                                 |\n    |                                 help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/unused-mut-issue-50343.rs:1:9\n+  --> $DIR/unused-mut-issue-50343.rs:3:9\n    |\n LL | #![deny(unused_mut)]\n    |         ^^^^^^^^^^"}, {"sha": "ad8e718cf88a596a9d2105d6710bf25724c519ef", "filename": "src/test/ui/parser/bad-fn-ptr-qualifier.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+// edition:2018\n+// Most of items are taken from ./recover-const-async-fn-ptr.rs but this is able to apply rustfix.\n+\n+pub type T0 =  fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T1 =  extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T2 =  unsafe extern fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T3 =  fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T4 =  extern fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T5 =  unsafe extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T6 =   unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `const`\n+//~| ERROR an `fn` pointer type cannot be `async`\n+\n+pub type FTT0 = for<'a>  fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT1 = for<'a>  extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT2 = for<'a>  unsafe extern fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT3 = for<'a>  fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT4 = for<'a>  extern fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT5 = for<'a>  unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT6 = for<'a>   unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `const`\n+//~| ERROR an `fn` pointer type cannot be `async`\n+\n+fn main() {}"}, {"sha": "c04813dadff7bd7b049529193b5962b5fba30f0c", "filename": "src/test/ui/parser/bad-fn-ptr-qualifier.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+// edition:2018\n+// Most of items are taken from ./recover-const-async-fn-ptr.rs but this is able to apply rustfix.\n+\n+pub type T0 = const fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T1 = const extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T2 = const unsafe extern fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type T3 = async fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T4 = async extern fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T5 = async unsafe extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type T6 = const async unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `const`\n+//~| ERROR an `fn` pointer type cannot be `async`\n+\n+pub type FTT0 = for<'a> const fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT1 = for<'a> const extern \"C\" fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT2 = for<'a> const unsafe extern fn(); //~ ERROR an `fn` pointer type cannot be `const`\n+pub type FTT3 = for<'a> async fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT4 = for<'a> async extern fn(); //~ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT5 = for<'a> async unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `async`\n+pub type FTT6 = for<'a> const async unsafe extern \"C\" fn();\n+//~^ ERROR an `fn` pointer type cannot be `const`\n+//~| ERROR an `fn` pointer type cannot be `async`\n+\n+fn main() {}"}, {"sha": "265e31329ca546aac88adf1177338f7330e2fa9e", "filename": "src/test/ui/parser/bad-fn-ptr-qualifier.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-fn-ptr-qualifier.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,146 @@\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:5:15\n+   |\n+LL | pub type T0 = const fn();\n+   |               -----^^^^^\n+   |               |\n+   |               `const` because of this\n+   |               help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:6:15\n+   |\n+LL | pub type T1 = const extern \"C\" fn();\n+   |               -----^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `const` because of this\n+   |               help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:7:15\n+   |\n+LL | pub type T2 = const unsafe extern fn();\n+   |               -----^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `const` because of this\n+   |               help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:8:15\n+   |\n+LL | pub type T3 = async fn();\n+   |               -----^^^^^\n+   |               |\n+   |               `async` because of this\n+   |               help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:9:15\n+   |\n+LL | pub type T4 = async extern fn();\n+   |               -----^^^^^^^^^^^^\n+   |               |\n+   |               `async` because of this\n+   |               help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:10:15\n+   |\n+LL | pub type T5 = async unsafe extern \"C\" fn();\n+   |               -----^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `async` because of this\n+   |               help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:11:15\n+   |\n+LL | pub type T6 = const async unsafe extern \"C\" fn();\n+   |               -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `const` because of this\n+   |               help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:11:15\n+   |\n+LL | pub type T6 = const async unsafe extern \"C\" fn();\n+   |               ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     `async` because of this\n+   |                     help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:15:17\n+   |\n+LL | pub type FTT0 = for<'a> const fn();\n+   |                 ^^^^^^^^-----^^^^^\n+   |                         |\n+   |                         `const` because of this\n+   |                         help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:16:17\n+   |\n+LL | pub type FTT1 = for<'a> const extern \"C\" fn();\n+   |                 ^^^^^^^^-----^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         `const` because of this\n+   |                         help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:17:17\n+   |\n+LL | pub type FTT2 = for<'a> const unsafe extern fn();\n+   |                 ^^^^^^^^-----^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         `const` because of this\n+   |                         help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:18:17\n+   |\n+LL | pub type FTT3 = for<'a> async fn();\n+   |                 ^^^^^^^^-----^^^^^\n+   |                         |\n+   |                         `async` because of this\n+   |                         help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:19:17\n+   |\n+LL | pub type FTT4 = for<'a> async extern fn();\n+   |                 ^^^^^^^^-----^^^^^^^^^^^^\n+   |                         |\n+   |                         `async` because of this\n+   |                         help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:20:17\n+   |\n+LL | pub type FTT5 = for<'a> async unsafe extern \"C\" fn();\n+   |                 ^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         `async` because of this\n+   |                         help: remove the `async` qualifier\n+\n+error: an `fn` pointer type cannot be `const`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:22:17\n+   |\n+LL | pub type FTT6 = for<'a> const async unsafe extern \"C\" fn();\n+   |                 ^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                         |\n+   |                         `const` because of this\n+   |                         help: remove the `const` qualifier\n+\n+error: an `fn` pointer type cannot be `async`\n+  --> $DIR/bad-fn-ptr-qualifier.rs:22:17\n+   |\n+LL | pub type FTT6 = for<'a> const async unsafe extern \"C\" fn();\n+   |                 ^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               |\n+   |                               `async` because of this\n+   |                               help: remove the `async` qualifier\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "0bb88c55936f0b36de75f5938944d2ccfa3a532c", "filename": "src/test/ui/parser/if-in-in.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fif-in-in.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fif-in-in.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+fn main() {\n+    for i in 1..2 { //~ ERROR expected iterable, found keyword `in`\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "6c0986fe1ba5f770193cdc0efbca5e4d0fc8f767", "filename": "src/test/ui/parser/if-in-in.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n fn main() {\n     for i in in 1..2 { //~ ERROR expected iterable, found keyword `in`\n         println!(\"{}\", i);"}, {"sha": "0e69bc4b2ce53b6cdcd79f25998033dbf40c49b9", "filename": "src/test/ui/parser/if-in-in.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error: expected iterable, found keyword `in`\n-  --> $DIR/if-in-in.rs:2:14\n+  --> $DIR/if-in-in.rs:4:14\n    |\n LL |     for i in in 1..2 {\n    |           ---^^"}, {"sha": "3386fac17dfd7c71a08e761fb161586365cc2089", "filename": "src/test/ui/parser/issue-10392-2.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+pub struct A { pub foo: isize }\n+\n+fn a() -> A { panic!() }\n+\n+fn main() {\n+    let A { .. } = a(); //~ ERROR: expected `}`\n+}"}, {"sha": "30628ae31c3bdab3ef901214647fb466f2d28e71", "filename": "src/test/ui/parser/issue-10392-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,4 +1,6 @@\n-struct A { foo: isize }\n+// run-rustfix\n+\n+pub struct A { pub foo: isize }\n \n fn a() -> A { panic!() }\n "}, {"sha": "4154ecfeb71c3b4463ac0f33a4f8f4d57a60d186", "filename": "src/test/ui/parser/issue-10392-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-10392-2.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error: expected `}`, found `,`\n-  --> $DIR/issue-10392-2.rs:6:15\n+  --> $DIR/issue-10392-2.rs:8:15\n    |\n LL |     let A { .., } = a();\n    |             --^"}, {"sha": "e5d5622e6fc00395bcde854b36ad0bb91f2da2a9", "filename": "src/test/ui/parser/issue-3036.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-3036.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-3036.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+// Testing that semicolon tokens are printed correctly in errors\n+\n+fn main() {\n+    let _x = 3; //~ ERROR: expected `;`\n+}"}, {"sha": "2f76fb99b22068a43503417267e42b9cf7664202", "filename": "src/test/ui/parser/issue-3036.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,6 +1,7 @@\n+// run-rustfix\n+\n // Testing that semicolon tokens are printed correctly in errors\n \n-fn main()\n-{\n-    let x = 3 //~ ERROR: expected `;`\n+fn main() {\n+    let _x = 3 //~ ERROR: expected `;`\n }"}, {"sha": "e02223931c1145aa3b6bd83e6e3312b54d78e45a", "filename": "src/test/ui/parser/issue-3036.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,8 +1,8 @@\n error: expected `;`, found `}`\n-  --> $DIR/issue-3036.rs:5:14\n+  --> $DIR/issue-3036.rs:6:15\n    |\n-LL |     let x = 3\n-   |              ^ help: add `;` here\n+LL |     let _x = 3\n+   |               ^ help: add `;` here\n LL | }\n    | - unexpected token\n "}, {"sha": "95019b2786925741d7ff2467a88f4cc679911f85", "filename": "src/test/ui/parser/issue-67146-negative-outlives-bound-syntactic-fail.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+// In this regression test for #67146, we check that the\n+// negative outlives bound `!'a` is rejected by the parser.\n+// This regression was first introduced in PR #57364.\n+\n+fn main() {}\n+\n+pub fn f1<T>() {}\n+//~^ ERROR negative bounds are not supported\n+pub fn f2<'a, T: Ord>() {}\n+//~^ ERROR negative bounds are not supported\n+pub fn f3<'a, T: Ord>() {}\n+//~^ ERROR negative bounds are not supported"}, {"sha": "82f54f8faa98cd615bfe34a30ab2b6ce4016f167", "filename": "src/test/ui/parser/issue-67146-negative-outlives-bound-syntactic-fail.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,12 +1,14 @@\n+// run-rustfix\n+\n // In this regression test for #67146, we check that the\n // negative outlives bound `!'a` is rejected by the parser.\n // This regression was first introduced in PR #57364.\n \n fn main() {}\n \n-fn f1<T: !'static>() {}\n+pub fn f1<T: !'static>() {}\n //~^ ERROR negative bounds are not supported\n-fn f2<'a, T: Ord + !'a>() {}\n+pub fn f2<'a, T: Ord + !'a>() {}\n //~^ ERROR negative bounds are not supported\n-fn f3<'a, T: !'a + Ord>() {}\n+pub fn f3<'a, T: !'a + Ord>() {}\n //~^ ERROR negative bounds are not supported"}, {"sha": "a4a422948aca6db3eb79a2c1ad97ce78d87bde15", "filename": "src/test/ui/parser/issue-67146-negative-outlives-bound-syntactic-fail.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-67146-negative-outlives-bound-syntactic-fail.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,20 +1,20 @@\n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:7:8\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:9:12\n    |\n-LL | fn f1<T: !'static>() {}\n-   |        ^^^^^^^^^^ negative bounds are not supported\n+LL | pub fn f1<T: !'static>() {}\n+   |            ^^^^^^^^^^ negative bounds are not supported\n \n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:9:18\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:11:22\n    |\n-LL | fn f2<'a, T: Ord + !'a>() {}\n-   |                  ^^^^^ negative bounds are not supported\n+LL | pub fn f2<'a, T: Ord + !'a>() {}\n+   |                      ^^^^^ negative bounds are not supported\n \n error: negative bounds are not supported\n-  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:11:12\n+  --> $DIR/issue-67146-negative-outlives-bound-syntactic-fail.rs:13:16\n    |\n-LL | fn f3<'a, T: !'a + Ord>() {}\n-   |            ^^^^^ negative bounds are not supported\n+LL | pub fn f3<'a, T: !'a + Ord>() {}\n+   |                ^^^^^ negative bounds are not supported\n \n error: aborting due to 3 previous errors\n "}, {"sha": "464e78fd0359534e0bd9bdcf11cddd3e6f94cd94", "filename": "src/test/ui/parser/issue-70388-without-witness.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+// This is for checking if we can apply suggestions as-is.\n+\n+pub struct Foo(i32);\n+\n+fn main() {\n+    let Foo(..) = Foo(0); //~ ERROR unexpected `...`\n+    let [_, .., _] = [0, 1]; //~ ERROR unexpected `...`\n+}"}, {"sha": "9e35e4c38aa871b5deb0aeb96f918ffce93c6440", "filename": "src/test/ui/parser/issue-70388-without-witness.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+// This is for checking if we can apply suggestions as-is.\n+\n+pub struct Foo(i32);\n+\n+fn main() {\n+    let Foo(...) = Foo(0); //~ ERROR unexpected `...`\n+    let [_, ..., _] = [0, 1]; //~ ERROR unexpected `...`\n+}"}, {"sha": "b750ad4c626d6b8a1b10d5b8a8af9468079016bb", "filename": "src/test/ui/parser/issue-70388-without-witness.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70388-without-witness.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,20 @@\n+error: unexpected `...`\n+  --> $DIR/issue-70388-without-witness.rs:7:13\n+   |\n+LL |     let Foo(...) = Foo(0);\n+   |             ^^^\n+   |             |\n+   |             not a valid pattern\n+   |             help: for a rest pattern, use `..` instead of `...`\n+\n+error: unexpected `...`\n+  --> $DIR/issue-70388-without-witness.rs:8:13\n+   |\n+LL |     let [_, ..., _] = [0, 1];\n+   |             ^^^\n+   |             |\n+   |             not a valid pattern\n+   |             help: for a rest pattern, use `..` instead of `...`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "93f7f97b04fb77220b9175270bfe335b1da9ad37", "filename": "src/test/ui/parser/let-binop.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Flet-binop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Flet-binop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn main() {\n+    let a: i8 = 1; //~ ERROR can't reassign to an uninitialized variable\n+    let _ = a;\n+    let b = 1; //~ ERROR can't reassign to an uninitialized variable\n+    let _ = b;\n+    let c = 1; //~ ERROR can't reassign to an uninitialized variable\n+    let _ = c;\n+}"}, {"sha": "2adbceae5d3c439a4157d0587ea5ebb7a826adab", "filename": "src/test/ui/parser/let-binop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n fn main() {\n     let a: i8 *= 1; //~ ERROR can't reassign to an uninitialized variable\n     let _ = a;"}, {"sha": "90295854a2d2d6a35be0bd81f7a65935704a08c2", "filename": "src/test/ui/parser/let-binop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,17 +1,17 @@\n error: can't reassign to an uninitialized variable\n-  --> $DIR/let-binop.rs:2:15\n+  --> $DIR/let-binop.rs:4:15\n    |\n LL |     let a: i8 *= 1;\n    |               ^^ help: initialize the variable\n \n error: can't reassign to an uninitialized variable\n-  --> $DIR/let-binop.rs:4:11\n+  --> $DIR/let-binop.rs:6:11\n    |\n LL |     let b += 1;\n    |           ^^ help: initialize the variable\n \n error: can't reassign to an uninitialized variable\n-  --> $DIR/let-binop.rs:6:11\n+  --> $DIR/let-binop.rs:8:11\n    |\n LL |     let c *= 1;\n    |           ^^ help: initialize the variable"}, {"sha": "f21024235a591c14edca52b78d09bb2849f286fa", "filename": "src/test/ui/parser/match-refactor-to-expr.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+\n+fn main() {\n+    let foo =\n+         //~ NOTE while parsing this match expression\n+        Some(4).unwrap_or(5)\n+        //~^ NOTE expected one of `.`, `?`, `{`, or an operator\n+        ; //~ NOTE unexpected token\n+        //~^ ERROR expected one of `.`, `?`, `{`, or an operator, found `;`\n+\n+    println!(\"{}\", foo)\n+}"}, {"sha": "e02d74e2f7eac03457413a02372a6e2d04806fe5", "filename": "src/test/ui/parser/match-refactor-to-expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n fn main() {\n     let foo =\n         match //~ NOTE while parsing this match expression\n-        Some(4).unwrap_or_else(5)\n+        Some(4).unwrap_or(5)\n         //~^ NOTE expected one of `.`, `?`, `{`, or an operator\n         ; //~ NOTE unexpected token\n         //~^ ERROR expected one of `.`, `?`, `{`, or an operator, found `;`"}, {"sha": "15107ab9a258b699a131bba45734928a817f6ff5", "filename": "src/test/ui/parser/match-refactor-to-expr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,13 +1,13 @@\n error: expected one of `.`, `?`, `{`, or an operator, found `;`\n-  --> $DIR/match-refactor-to-expr.rs:6:9\n+  --> $DIR/match-refactor-to-expr.rs:8:9\n    |\n LL |         match\n    |         -----\n    |         |\n    |         while parsing this match expression\n    |         help: try removing this `match`\n-LL |         Some(4).unwrap_or_else(5)\n-   |                                  - expected one of `.`, `?`, `{`, or an operator\n+LL |         Some(4).unwrap_or(5)\n+   |                             - expected one of `.`, `?`, `{`, or an operator\n LL |\n LL |         ;\n    |         ^ unexpected token"}, {"sha": "fe23880d1d48a7973f217bb97e07548a64ad29b2", "filename": "src/test/ui/parser/range_inclusive.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+// Make sure that inclusive ranges with no end point don't parse.\n+\n+pub fn main() {\n+    for _ in 1.. {} //~ERROR inclusive range with no end\n+                     //~^HELP use `..` instead\n+}"}, {"sha": "bc6d2413d26232f5d62734475e2b4fedf8595805", "filename": "src/test/ui/parser/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n // Make sure that inclusive ranges with no end point don't parse.\n \n pub fn main() {"}, {"sha": "8a91782639f450f90053886c4ebc629481f7b8dc", "filename": "src/test/ui/parser/range_inclusive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frange_inclusive.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/range_inclusive.rs:4:15\n+  --> $DIR/range_inclusive.rs:5:15\n    |\n LL |     for _ in 1..= {}\n    |               ^^^ help: use `..` instead"}, {"sha": "f44ebe5ba5bf2330c7e7348cab45d1d5f021d1f0", "filename": "src/test/ui/parser/trait-object-lifetime-parens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -6,6 +6,7 @@ fn f<'a, T: Trait + ('a)>() {} //~ ERROR parenthesized lifetime bounds are not s\n \n fn check<'a>() {\n     let _: Box<Trait + ('a)>; //~ ERROR parenthesized lifetime bounds are not supported\n+    // FIXME: It'd be great if we could add suggestion to the following case.\n     let _: Box<('a) + Trait>; //~ ERROR lifetime in trait object type must be followed by `+`\n }\n "}, {"sha": "9c7a9662c40243e08d481e1f1ee07b0a934d3ffe", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -11,7 +11,7 @@ LL |     let _: Box<Trait + ('a)>;\n    |                        ^^^^ help: remove the parentheses\n \n error: lifetime in trait object type must be followed by `+`\n-  --> $DIR/trait-object-lifetime-parens.rs:9:17\n+  --> $DIR/trait-object-lifetime-parens.rs:10:17\n    |\n LL |     let _: Box<('a) + Trait>;\n    |                 ^^"}, {"sha": "928955630e9ffbcb41a1818a2763a67917dfeed2", "filename": "src/test/ui/path-lookahead.fixed", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpath-lookahead.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpath-lookahead.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+#![warn(unused_parens)]\n+\n+// Parser test for #37765\n+\n+fn with_parens<T: ToString>(arg: T) -> String {\n+    return <T as ToString>::to_string(&arg); //~WARN unnecessary parentheses around `return` value\n+}\n+\n+fn no_parens<T: ToString>(arg: T) -> String {\n+    return <T as ToString>::to_string(&arg);\n+}\n+\n+fn main() {}"}, {"sha": "d05c75fe8d8e0b13d3053950fc091b3c001cc4f0", "filename": "src/test/ui/path-lookahead.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpath-lookahead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpath-lookahead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,17 +1,17 @@\n // run-pass\n+// run-rustfix\n+\n #![allow(dead_code)]\n #![warn(unused_parens)]\n \n // Parser test for #37765\n \n fn with_parens<T: ToString>(arg: T) -> String {\n-  return (<T as ToString>::to_string(&arg)); //~WARN unnecessary parentheses around `return` value\n+    return (<T as ToString>::to_string(&arg)); //~WARN unnecessary parentheses around `return` value\n }\n \n fn no_parens<T: ToString>(arg: T) -> String {\n-  return <T as ToString>::to_string(&arg);\n+    return <T as ToString>::to_string(&arg);\n }\n \n-fn main() {\n-\n-}\n+fn main() {}"}, {"sha": "dcf235a9e277455079318ec30f933f6ae57a03da", "filename": "src/test/ui/path-lookahead.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,11 +1,11 @@\n warning: unnecessary parentheses around `return` value\n-  --> $DIR/path-lookahead.rs:8:10\n+  --> $DIR/path-lookahead.rs:10:12\n    |\n-LL |   return (<T as ToString>::to_string(&arg));\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n+LL |     return (<T as ToString>::to_string(&arg));\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/path-lookahead.rs:3:9\n+  --> $DIR/path-lookahead.rs:5:9\n    |\n LL | #![warn(unused_parens)]\n    |         ^^^^^^^^^^^^^"}, {"sha": "afd75a41f7b0f7d026893a11408a69b5d208689b", "filename": "src/test/ui/pub/pub-ident-fn-2.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+pub fn foo(_s: usize) { bar() }\n+//~^ ERROR missing `fn` for function definition\n+\n+fn bar() {}\n+\n+fn main() {\n+    foo(2);\n+}"}, {"sha": "e7b86a9098d16dd9575c101ffe675461a10e5521", "filename": "src/test/ui/pub/pub-ident-fn-2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,6 +1,10 @@\n-pub foo(s: usize) { bar() }\n+// run-rustfix\n+\n+pub foo(_s: usize) { bar() }\n //~^ ERROR missing `fn` for function definition\n \n+fn bar() {}\n+\n fn main() {\n     foo(2);\n }"}, {"sha": "b830b0e90098a490db11ac237b7578e3937b4a22", "filename": "src/test/ui/pub/pub-ident-fn-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-2.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,12 +1,12 @@\n error: missing `fn` for function definition\n-  --> $DIR/pub-ident-fn-2.rs:1:4\n+  --> $DIR/pub-ident-fn-2.rs:3:4\n    |\n-LL | pub foo(s: usize) { bar() }\n+LL | pub foo(_s: usize) { bar() }\n    |    ^\n    |\n help: add `fn` here to parse `foo` as a public function\n    |\n-LL | pub fn foo(s: usize) { bar() }\n+LL | pub fn foo(_s: usize) { bar() }\n    |     ^^\n \n error: aborting due to previous error"}, {"sha": "e510ace5fc14c91f44874a240b0ff040a409f4f9", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+pub fn foo<'a>(_s: &'a usize) -> bool { true }\n+//~^ ERROR missing `fn` for function definition\n+\n+fn main() {\n+    foo(&2);\n+}"}, {"sha": "63e6eca151600ffed09c849482d3f8c3d3f775ff", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,6 +1,8 @@\n+// run-rustfix\n+\n pub   foo<'a>(_s: &'a usize) -> bool { true }\n //~^ ERROR missing `fn` for function definition\n \n fn main() {\n-    foo(2);\n+    foo(&2);\n }"}, {"sha": "5b378df04b025d4243fadb2f3fd188b066bfc190", "filename": "src/test/ui/pub/pub-ident-fn-with-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-fn-with-lifetime.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error: missing `fn` for function definition\n-  --> $DIR/pub-ident-fn-with-lifetime.rs:1:4\n+  --> $DIR/pub-ident-fn-with-lifetime.rs:3:4\n    |\n LL | pub   foo<'a>(_s: &'a usize) -> bool { true }\n    |    ^^^"}, {"sha": "58cde8fd6e0ca9a432580d7e4879f0668b4c679c", "filename": "src/test/ui/pub/pub-ident-struct.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+\n+pub struct S {\n+//~^ ERROR missing `struct` for struct definition\n+}\n+fn main() {}"}, {"sha": "3930e556e9a9cc1fc9a2ac591beb3628c65f8070", "filename": "src/test/ui/pub/pub-ident-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n pub S {\n //~^ ERROR missing `struct` for struct definition\n }"}, {"sha": "8af24904ef24cc1f4bec0d7e6c9dad202b5b91d6", "filename": "src/test/ui/pub/pub-ident-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-ident-struct.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error: missing `struct` for struct definition\n-  --> $DIR/pub-ident-struct.rs:1:4\n+  --> $DIR/pub-ident-struct.rs:3:4\n    |\n LL | pub S {\n    |    ^"}, {"sha": "22ab6c755be2d30c33eb87438e5c0ac411bf2391", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,20 @@\n+// In expression, `&a..=b` is treated as `(&a)..=(b)` and `box a..=b` is\n+// `(box a)..=(b)`. In a pattern, however, `&a..=b` means `&(a..=b)`. This may\n+// lead to confusion.\n+\n+// run-rustfix\n+\n+#![warn(ellipsis_inclusive_range_patterns)]\n+\n+pub fn main() {\n+    match &12 {\n+        &(0..=9) => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        //~| HELP use `..=` for an inclusive range\n+        &(10 ..=15) => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        //~^^ HELP add parentheses to clarify the precedence\n+        &(16..=20) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "f38a7920c94d66f26fae6824b76c5e3a643b2717", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,13 +1,10 @@\n // In expression, `&a..=b` is treated as `(&a)..=(b)` and `box a..=b` is\n // `(box a)..=(b)`. In a pattern, however, `&a..=b` means `&(a..=b)`. This may\n // lead to confusion.\n-//\n-// We are going to disallow `&a..=b` and `box a..=b` in a pattern. However, the\n-// older ... syntax is still allowed as a stability guarantee.\n \n-#![feature(box_patterns)]\n-#![warn(ellipsis_inclusive_range_patterns)]\n+// run-rustfix\n \n+#![warn(ellipsis_inclusive_range_patterns)]\n \n pub fn main() {\n     match &12 {\n@@ -20,15 +17,4 @@ pub fn main() {\n         &(16..=20) => {}\n         _ => {}\n     }\n-\n-    match Box::new(12) {\n-        box 0...9 => {}\n-        //~^ WARN `...` range patterns are deprecated\n-        //~| HELP use `..=` for an inclusive range\n-        box 10..=15 => {}\n-        //~^ ERROR the range pattern here has ambiguous interpretation\n-        //~^^ HELP add parentheses to clarify the precedence\n-        box (16..=20) => {}\n-        _ => {}\n-    }\n }"}, {"sha": "853141969c20da8b252a2a3162126ad3e5453688", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,32 +1,20 @@\n error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence.rs:17:10\n+  --> $DIR/range-inclusive-pattern-precedence.rs:14:10\n    |\n LL |         &10..=15 => {}\n    |          ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n \n-error: the range pattern here has ambiguous interpretation\n-  --> $DIR/range-inclusive-pattern-precedence.rs:28:13\n-   |\n-LL |         box 10..=15 => {}\n-   |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n-\n warning: `...` range patterns are deprecated\n-  --> $DIR/range-inclusive-pattern-precedence.rs:14:9\n+  --> $DIR/range-inclusive-pattern-precedence.rs:11:9\n    |\n LL |         &0...9 => {}\n    |         ^^^^^^ help: use `..=` for an inclusive range: `&(0..=9)`\n    |\n note: the lint level is defined here\n-  --> $DIR/range-inclusive-pattern-precedence.rs:9:9\n+  --> $DIR/range-inclusive-pattern-precedence.rs:7:9\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: `...` range patterns are deprecated\n-  --> $DIR/range-inclusive-pattern-precedence.rs:25:14\n-   |\n-LL |         box 0...9 => {}\n-   |              ^^^ help: use `..=` for an inclusive range\n-\n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "6a3fd413e4fd7f0605a5571155bc310dfa0ecdf2", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,19 @@\n+// We are going to disallow `&a..=b` and `box a..=b` in a pattern. However, the\n+// older ... syntax is still allowed as a stability guarantee.\n+\n+#![feature(box_patterns)]\n+#![warn(ellipsis_inclusive_range_patterns)]\n+\n+fn main() {\n+    match Box::new(12) {\n+        // FIXME: can we add suggestions like `&(0..=9)`?\n+        box 0...9 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        //~| HELP use `..=` for an inclusive range\n+        box 10..=15 => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        //~^^ HELP add parentheses to clarify the precedence\n+        box (16..=20) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "7fbd972569e8dc81af4ed61aa9a15efa1931c396", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,20 @@\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/range-inclusive-pattern-precedence2.rs:13:13\n+   |\n+LL |         box 10..=15 => {}\n+   |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n+\n+warning: `...` range patterns are deprecated\n+  --> $DIR/range-inclusive-pattern-precedence2.rs:10:14\n+   |\n+LL |         box 0...9 => {}\n+   |              ^^^ help: use `..=` for an inclusive range\n+   |\n+note: the lint level is defined here\n+  --> $DIR/range-inclusive-pattern-precedence2.rs:5:9\n+   |\n+LL | #![warn(ellipsis_inclusive_range_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "e429513b51d3411f5bebebf59fb1edcf3d26af1a", "filename": "src/test/ui/resolve/resolve-conflict-import-vs-import.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#[allow(unused_imports)]\n+use std::mem::transmute;\n+\n+//~^ ERROR the name `transmute` is defined multiple times\n+\n+fn main() {\n+}"}, {"sha": "43853117af6999202a5cb1197a3cea52d24c882b", "filename": "src/test/ui/resolve/resolve-conflict-import-vs-import.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+\n+#[allow(unused_imports)]\n use std::mem::transmute;\n use std::mem::transmute;\n //~^ ERROR the name `transmute` is defined multiple times"}, {"sha": "632be50f4c4bf0239e3a9daca7b361fff70d010a", "filename": "src/test/ui/resolve/resolve-conflict-import-vs-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-import-vs-import.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error[E0252]: the name `transmute` is defined multiple times\n-  --> $DIR/resolve-conflict-import-vs-import.rs:2:5\n+  --> $DIR/resolve-conflict-import-vs-import.rs:5:5\n    |\n LL | use std::mem::transmute;\n    |     ------------------- previous import of the value `transmute` here"}, {"sha": "064b9e74e24fd524ea203b9bbda4150ce99e48e1", "filename": "src/test/ui/resolve/token-error-correct-4.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// Test that we do some basic error correction in the tokeniser and apply suggestions.\n+\n+fn setsuna(_: ()) {}\n+\n+fn kazusa() {}\n+\n+fn main() {\n+    setsuna(kazusa()); //~ ERROR: expected one of\n+} //~ ERROR: expected expression"}, {"sha": "5e31d71e7bf46dafb611a310262582938d1c7fac", "filename": "src/test/ui/resolve/token-error-correct-4.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+// Test that we do some basic error correction in the tokeniser and apply suggestions.\n+\n+fn setsuna(_: ()) {}\n+\n+fn kazusa() {}\n+\n+fn main() {\n+    setsuna(kazusa(); //~ ERROR: expected one of\n+} //~ ERROR: expected expression"}, {"sha": "64aff54ba731128370867ce82a5a947daa6064e2", "filename": "src/test/ui/resolve/token-error-correct-4.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-4.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,16 @@\n+error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n+  --> $DIR/token-error-correct-4.rs:9:21\n+   |\n+LL |     setsuna(kazusa();\n+   |            -        ^ help: `)` may belong here\n+   |            |\n+   |            unclosed delimiter\n+\n+error: expected expression, found `)`\n+  --> $DIR/token-error-correct-4.rs:10:1\n+   |\n+LL | }\n+   | ^ expected expression\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "addba76ae3b51fd214b0e3a4a040340b8b0b8c62", "filename": "src/test/ui/similar-tokens.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsimilar-tokens.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsimilar-tokens.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+\n+pub mod x {\n+    pub struct A;\n+    pub struct B;\n+}\n+\n+// `.` is similar to `,` so list parsing should continue to closing `}`\n+use x::{A, B}; //~ ERROR expected one of `,`, `::`, `as`, or `}`, found `.`\n+\n+fn main() {}"}, {"sha": "3d1bf5fe54ae1132fd2ef05ec9cd309670a4468e", "filename": "src/test/ui/similar-tokens.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsimilar-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsimilar-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,4 +1,8 @@\n-mod x {\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+\n+pub mod x {\n     pub struct A;\n     pub struct B;\n }"}, {"sha": "6a8d09ebae668083a8d2006ff3d6124982814509", "filename": "src/test/ui/similar-tokens.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `,`, `::`, `as`, or `}`, found `.`\n-  --> $DIR/similar-tokens.rs:7:10\n+  --> $DIR/similar-tokens.rs:11:10\n    |\n LL | use x::{A. B};\n    |          ^"}, {"sha": "c804cf57abaaadb53e3d913ce5ad2a88520da28e", "filename": "src/test/ui/structs/struct-duplicate-comma.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+// Issue #50974\n+\n+pub struct Foo {\n+    pub a: u8,\n+    pub b: u8\n+}\n+\n+fn main() {\n+    let _ = Foo {\n+        a: 0,\n+          //~^ ERROR expected identifier\n+        b: 42\n+    };\n+}"}, {"sha": "db2e7cb3d05e6fb6485c602c770eba6125c48306", "filename": "src/test/ui/structs/struct-duplicate-comma.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,12 +1,13 @@\n+// run-rustfix\n // Issue #50974\n \n-struct Foo {\n-    a: u8,\n-    b: u8\n+pub struct Foo {\n+    pub a: u8,\n+    pub b: u8\n }\n \n fn main() {\n-    let bar = Foo {\n+    let _ = Foo {\n         a: 0,,\n           //~^ ERROR expected identifier\n         b: 42"}, {"sha": "834b3c5c17164c4136f05f054b6651c6073b7fe4", "filename": "src/test/ui/structs/struct-duplicate-comma.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-duplicate-comma.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,8 +1,8 @@\n error: expected identifier, found `,`\n-  --> $DIR/struct-duplicate-comma.rs:10:14\n+  --> $DIR/struct-duplicate-comma.rs:11:14\n    |\n-LL |     let bar = Foo {\n-   |               --- while parsing this struct\n+LL |     let _ = Foo {\n+   |             --- while parsing this struct\n LL |         a: 0,,\n    |              ^\n    |              |"}, {"sha": "a28179ba241681ae4ab2d54dc09f22d8fbcb8b80", "filename": "src/test/ui/structs/struct-missing-comma.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,12 @@\n+// Issue #50636\n+// run-rustfix\n+\n+pub struct S {\n+    pub foo: u32, //~ expected `,`, or `}`, found keyword `pub`\n+    //     ~^ HELP try adding a comma: ','\n+    pub bar: u32\n+}\n+\n+fn main() {\n+    let _ = S { foo: 5, bar: 6 };\n+}"}, {"sha": "b6d6c9b8f87628599e23223db499e53acb4ca25f", "filename": "src/test/ui/structs/struct-missing-comma.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,11 +1,12 @@\n // Issue #50636\n+// run-rustfix\n \n-struct S {\n-    foo: u32 //~ expected `,`, or `}`, found `bar`\n+pub struct S {\n+    pub foo: u32 //~ expected `,`, or `}`, found keyword `pub`\n     //     ~^ HELP try adding a comma: ','\n-    bar: u32\n+    pub bar: u32\n }\n \n fn main() {\n-    let s = S { foo: 5, bar: 6 };\n+    let _ = S { foo: 5, bar: 6 };\n }"}, {"sha": "eceec65e7634625a120d0bbae3ae7d5175a06390", "filename": "src/test/ui/structs/struct-missing-comma.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-missing-comma.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,8 +1,8 @@\n-error: expected `,`, or `}`, found `bar`\n-  --> $DIR/struct-missing-comma.rs:4:13\n+error: expected `,`, or `}`, found keyword `pub`\n+  --> $DIR/struct-missing-comma.rs:5:17\n    |\n-LL |     foo: u32\n-   |             ^ help: try adding a comma: `,`\n+LL |     pub foo: u32\n+   |                 ^ help: try adding a comma: `,`\n \n error: aborting due to previous error\n "}, {"sha": "6a4ee39b16d86e8b08d3fadff41e0a8177938a21", "filename": "src/test/ui/suggestions/struct-initializer-comma.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+pub struct Foo {\n+    pub first: bool,\n+    pub second: u8,\n+}\n+\n+fn main() {\n+    let _ = Foo {\n+        //~^ ERROR missing field\n+        first: true,\n+        second: 25\n+        //~^ ERROR expected one of\n+    };\n+}"}, {"sha": "c137f0594186d0608ed73094286d8c6d95cec58f", "filename": "src/test/ui/suggestions/struct-initializer-comma.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,10 +1,12 @@\n-struct Foo {\n-    first: bool,\n-    second: u8,\n+// run-rustfix\n+\n+pub struct Foo {\n+    pub first: bool,\n+    pub second: u8,\n }\n \n fn main() {\n-    let a = Foo {\n+    let _ = Foo {\n         //~^ ERROR missing field\n         first: true\n         second: 25"}, {"sha": "5eff43f32cda15e97945e53a754140c989249ced", "filename": "src/test/ui/suggestions/struct-initializer-comma.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstruct-initializer-comma.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,7 +1,7 @@\n error: expected one of `,`, `.`, `?`, `}`, or an operator, found `second`\n-  --> $DIR/struct-initializer-comma.rs:10:9\n+  --> $DIR/struct-initializer-comma.rs:12:9\n    |\n-LL |     let a = Foo {\n+LL |     let _ = Foo {\n    |             --- while parsing this struct\n LL |\n LL |         first: true\n@@ -13,9 +13,9 @@ LL |         second: 25\n    |         ^^^^^^ unexpected token\n \n error[E0063]: missing field `second` in initializer of `Foo`\n-  --> $DIR/struct-initializer-comma.rs:7:13\n+  --> $DIR/struct-initializer-comma.rs:9:13\n    |\n-LL |     let a = Foo {\n+LL |     let _ = Foo {\n    |             ^^^ missing `second`\n \n error: aborting due to 2 previous errors"}, {"sha": "042e85b10ae21dfec6a764d946d12b8719356bdc", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn main() {\n+    let v = vec![0, 1, 2, 3];\n+\n+    for (i, _) in v.iter().enumerate() {\n+        //~^ ERROR `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "7bdf5dbf35884c82abe877bf3f36e19ebb327210", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n fn main() {\n     let v = vec![0, 1, 2, 3];\n \n-    for (i, n) in &v.iter().enumerate() {\n+    for (i, _) in &v.iter().enumerate() {\n         //~^ ERROR `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n         println!(\"{}\", i);\n     }"}, {"sha": "5be0072fa33024120f86db58e96fcf4f3a3c2564", "filename": "src/test/ui/suggestions/suggest-remove-refs-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-1.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-  --> $DIR/suggest-remove-refs-1.rs:4:19\n+  --> $DIR/suggest-remove-refs-1.rs:6:19\n    |\n-LL |     for (i, n) in &v.iter().enumerate() {\n+LL |     for (i, _) in &v.iter().enumerate() {\n    |                   -^^^^^^^^^^^^^^^^^^^^\n    |                   |\n    |                   `&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator"}, {"sha": "bdf47b0e87f131096e26bf2b7280970891e2a7c2", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn main() {\n+    let v = vec![0, 1, 2, 3];\n+\n+    for (i, _) in v.iter().enumerate() {\n+        //~^ ERROR `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "3ed56377e146c03e550b5f1c626eeff6c2d546dc", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n fn main() {\n     let v = vec![0, 1, 2, 3];\n \n-    for (i, n) in & & & & &v.iter().enumerate() {\n+    for (i, _) in & & & & &v.iter().enumerate() {\n         //~^ ERROR `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n         println!(\"{}\", i);\n     }"}, {"sha": "ff84a2ce377051b59f3fb06b10b5068f460934b8", "filename": "src/test/ui/suggestions/suggest-remove-refs-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-2.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-  --> $DIR/suggest-remove-refs-2.rs:4:19\n+  --> $DIR/suggest-remove-refs-2.rs:6:19\n    |\n-LL |     for (i, n) in & & & & &v.iter().enumerate() {\n+LL |     for (i, _) in & & & & &v.iter().enumerate() {\n    |                   ---------^^^^^^^^^^^^^^^^^^^^\n    |                   |\n    |                   `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator"}, {"sha": "e0ecafabf393eb833facca2966161858b3745c10", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+\n+fn main() {\n+    let v = vec![0, 1, 2, 3];\n+\n+    for (i, _) in v\n+        .iter()\n+        .enumerate() {\n+        //~^^^^ ERROR `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an\n+        println!(\"{}\", i);\n+    }\n+}"}, {"sha": "e13099e8c32465d0c569d61e7120262b86c3198c", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n fn main() {\n     let v = vec![0, 1, 2, 3];\n \n-    for (i, n) in & & &\n+    for (i, _) in & & &\n         & &v\n         .iter()\n         .enumerate() {"}, {"sha": "d2f7c72b0e474ff8d5656c50ad9735ba8cba29d8", "filename": "src/test/ui/suggestions/suggest-remove-refs-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-remove-refs-3.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `&&&&&std::iter::Enumerate<std::slice::Iter<'_, {integer}>>` is not an iterator\n-  --> $DIR/suggest-remove-refs-3.rs:4:19\n+  --> $DIR/suggest-remove-refs-3.rs:6:19\n    |\n-LL |        for (i, n) in & & &\n+LL |        for (i, _) in & & &\n    |   ___________________^\n    |  |___________________|\n    | ||"}, {"sha": "c8b03c2006840c4dc864c3785c88c2b3a633dbbf", "filename": "src/test/ui/try-block/try-block-unused-delims.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+// compile-flags: --edition 2018\n+// run-rustfix\n+\n+#![feature(try_blocks)]\n+#![warn(unused_parens, unused_braces)]\n+\n+fn consume<T>(_: Result<T, T>) -> T { todo!() }\n+\n+fn main() {\n+    consume(try {});\n+    //~^ WARN unnecessary parentheses\n+\n+    consume( try {} );\n+    //~^ WARN unnecessary braces\n+\n+    match try {} {\n+        //~^ WARN unnecessary parentheses\n+        Ok(()) | Err(()) => (),\n+    }\n+\n+    if let Err(()) = try {} {}\n+    //~^ WARN unnecessary parentheses\n+\n+    match try {} {\n+        //~^ WARN unnecessary parentheses\n+        Ok(()) | Err(()) => (),\n+    }\n+}"}, {"sha": "ce087fb351d63e4823ab88056bc47447ccb08d9b", "filename": "src/test/ui/try-block/try-block-unused-delims.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n // compile-flags: --edition 2018\n+// run-rustfix\n \n #![feature(try_blocks)]\n #![warn(unused_parens, unused_braces)]"}, {"sha": "c5a2405462932dad56d491348e71c97f63c38e0e", "filename": "src/test/ui/try-block/try-block-unused-delims.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,41 +1,41 @@\n warning: unnecessary parentheses around function argument\n-  --> $DIR/try-block-unused-delims.rs:10:13\n+  --> $DIR/try-block-unused-delims.rs:11:13\n    |\n LL |     consume((try {}));\n    |             ^^^^^^^^ help: remove these parentheses\n    |\n note: the lint level is defined here\n-  --> $DIR/try-block-unused-delims.rs:5:9\n+  --> $DIR/try-block-unused-delims.rs:6:9\n    |\n LL | #![warn(unused_parens, unused_braces)]\n    |         ^^^^^^^^^^^^^\n \n warning: unnecessary braces around function argument\n-  --> $DIR/try-block-unused-delims.rs:13:13\n+  --> $DIR/try-block-unused-delims.rs:14:13\n    |\n LL |     consume({ try {} });\n    |             ^^^^^^^^^^ help: remove these braces\n    |\n note: the lint level is defined here\n-  --> $DIR/try-block-unused-delims.rs:5:24\n+  --> $DIR/try-block-unused-delims.rs:6:24\n    |\n LL | #![warn(unused_parens, unused_braces)]\n    |                        ^^^^^^^^^^^^^\n \n warning: unnecessary parentheses around `match` scrutinee expression\n-  --> $DIR/try-block-unused-delims.rs:16:11\n+  --> $DIR/try-block-unused-delims.rs:17:11\n    |\n LL |     match (try {}) {\n    |           ^^^^^^^^ help: remove these parentheses\n \n warning: unnecessary parentheses around `let` scrutinee expression\n-  --> $DIR/try-block-unused-delims.rs:21:22\n+  --> $DIR/try-block-unused-delims.rs:22:22\n    |\n LL |     if let Err(()) = (try {}) {}\n    |                      ^^^^^^^^ help: remove these parentheses\n \n warning: unnecessary parentheses around `match` scrutinee expression\n-  --> $DIR/try-block-unused-delims.rs:24:11\n+  --> $DIR/try-block-unused-delims.rs:25:11\n    |\n LL |     match (try {}) {\n    |           ^^^^^^^^ help: remove these parentheses"}, {"sha": "7fdd618c2ecaedede78bc73c5f488b152ef986dc", "filename": "src/test/ui/typeck/issue-73592-borrow_mut-through-deref.fixed", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,59 @@\n+// check-pass\n+// run-rustfix\n+//\n+// rust-lang/rust#73592: borrow_mut through Deref should work.\n+//\n+// Before #72280, when we see something like `&mut *rcvr.method()`, we\n+// incorrectly requires `rcvr` to be type-checked as a mut place. While this\n+// requirement is usually correct for smart pointers, it is overly restrictive\n+// for types like `Mutex` or `RefCell` which can produce a guard that\n+// implements `DerefMut` from `&self`.\n+//\n+// Making it more confusing, because we use Deref as the fallback when DerefMut\n+// is implemented, we won't see an issue when the smart pointer does not\n+// implement `DerefMut`. It only causes an issue when `rcvr` is obtained via a\n+// type that implements both `Deref` or `DerefMut`.\n+//\n+// This bug is only discovered in #73592 after it is already fixed as a side-effect\n+// of a refactoring made in #72280.\n+\n+#![warn(unused_mut)]\n+\n+use std::pin::Pin;\n+use std::cell::RefCell;\n+\n+struct S(RefCell<()>);\n+\n+fn test_pin(s: Pin<&S>) {\n+    // This works before #72280.\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn test_pin_mut(s: Pin<&mut S>) {\n+    // This should compile but didn't before #72280.\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn test_vec(s: &Vec<RefCell<()>>) {\n+    // This should compile but didn't before #72280.\n+    let _ = &mut *s[0].borrow_mut();\n+}\n+\n+fn test_mut_pin(s: Pin<&S>) {\n+    //~^ WARN variable does not need to be mutable\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn test_mut_pin_mut(s: Pin<&mut S>) {\n+    //~^ WARN variable does not need to be mutable\n+    let _ = &mut *s.0.borrow_mut();\n+}\n+\n+fn main() {\n+    let mut s = S(RefCell::new(()));\n+    test_pin(Pin::new(&s));\n+    test_pin_mut(Pin::new(&mut s));\n+    test_mut_pin(Pin::new(&s));\n+    test_mut_pin_mut(Pin::new(&mut s));\n+    test_vec(&vec![s.0]);\n+}"}, {"sha": "3b399e629d3419d51a2a8f69c9353318eacabc3c", "filename": "src/test/ui/typeck/issue-73592-borrow_mut-through-deref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// run-rustfix\n //\n // rust-lang/rust#73592: borrow_mut through Deref should work.\n //"}, {"sha": "5f5f672c3843a1de8cedcc3b94a774cd138329ba", "filename": "src/test/ui/typeck/issue-73592-borrow_mut-through-deref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-73592-borrow_mut-through-deref.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,19 +1,19 @@\n warning: variable does not need to be mutable\n-  --> $DIR/issue-73592-borrow_mut-through-deref.rs:41:17\n+  --> $DIR/issue-73592-borrow_mut-through-deref.rs:42:17\n    |\n LL | fn test_mut_pin(mut s: Pin<&S>) {\n    |                 ----^\n    |                 |\n    |                 help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-73592-borrow_mut-through-deref.rs:19:9\n+  --> $DIR/issue-73592-borrow_mut-through-deref.rs:20:9\n    |\n LL | #![warn(unused_mut)]\n    |         ^^^^^^^^^^\n \n warning: variable does not need to be mutable\n-  --> $DIR/issue-73592-borrow_mut-through-deref.rs:46:21\n+  --> $DIR/issue-73592-borrow_mut-through-deref.rs:47:21\n    |\n LL | fn test_mut_pin_mut(mut s: Pin<&mut S>) {\n    |                     ----^"}, {"sha": "b67b2a7259be0a29921a8c04d0e4d473fd7bd7e9", "filename": "src/test/ui/unused/unused-mut-warning-captured-var.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.fixed?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#![forbid(unused_mut)]\n+\n+fn main() {\n+    let x = 1;\n+    //~^ ERROR: variable does not need to be mutable\n+    move|| { println!(\"{}\", x); };\n+}"}, {"sha": "8726c4f173fa3a31f7e1d3a850c855289b574166", "filename": "src/test/ui/unused/unused-mut-warning-captured-var.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![forbid(unused_mut)]\n \n fn main() {"}, {"sha": "20aeedcc24125ecf7981fb75b2f1bb14c28a9aa4", "filename": "src/test/ui/unused/unused-mut-warning-captured-var.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-mut-warning-captured-var.stderr?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -1,13 +1,13 @@\n error: variable does not need to be mutable\n-  --> $DIR/unused-mut-warning-captured-var.rs:4:9\n+  --> $DIR/unused-mut-warning-captured-var.rs:6:9\n    |\n LL |     let mut x = 1;\n    |         ----^\n    |         |\n    |         help: remove this `mut`\n    |\n note: the lint level is defined here\n-  --> $DIR/unused-mut-warning-captured-var.rs:1:11\n+  --> $DIR/unused-mut-warning-captured-var.rs:3:11\n    |\n LL | #![forbid(unused_mut)]\n    |           ^^^^^^^^^^"}, {"sha": "a80f36d49699801d46581277d67e13d8f6473be6", "filename": "src/tools/build-manifest/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftools%2Fbuild-manifest%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftools%2Fbuild-manifest%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FREADME.md?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -22,7 +22,7 @@ Then, you can generate the manifest and all the packages from `path/to/dist` to\n ```\n $ BUILD_MANIFEST_DISABLE_SIGNING=1 cargo +nightly run \\\n     path/to/dist path/to/output 1970-01-01 \\\n-    nightly nightly nightly nightly nightly nightly nightly \\\n+    nightly nightly nightly nightly nightly nightly nightly nightly \\\n     http://example.com\n ```\n "}, {"sha": "5c50587ea973d7bcf89a05b5867da0f195d33ec7", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -158,6 +158,8 @@ static DOCS_TARGETS: &[&str] = &[\n \n static MINGW: &[&str] = &[\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"];\n \n+static NIGHTLY_ONLY_COMPONENTS: &[&str] = &[\"miri-preview\", \"rust-analyzer-preview\"];\n+\n #[derive(Serialize)]\n #[serde(rename_all = \"kebab-case\")]\n struct Manifest {\n@@ -222,6 +224,7 @@ struct Builder {\n     rust_release: String,\n     cargo_release: String,\n     rls_release: String,\n+    rust_analyzer_release: String,\n     clippy_release: String,\n     rustfmt_release: String,\n     llvm_tools_release: String,\n@@ -237,6 +240,7 @@ struct Builder {\n     rust_version: Option<String>,\n     cargo_version: Option<String>,\n     rls_version: Option<String>,\n+    rust_analyzer_version: Option<String>,\n     clippy_version: Option<String>,\n     rustfmt_version: Option<String>,\n     llvm_tools_version: Option<String>,\n@@ -245,6 +249,7 @@ struct Builder {\n     rust_git_commit_hash: Option<String>,\n     cargo_git_commit_hash: Option<String>,\n     rls_git_commit_hash: Option<String>,\n+    rust_analyzer_git_commit_hash: Option<String>,\n     clippy_git_commit_hash: Option<String>,\n     rustfmt_git_commit_hash: Option<String>,\n     llvm_tools_git_commit_hash: Option<String>,\n@@ -274,6 +279,7 @@ fn main() {\n     let s3_address = args.next().unwrap();\n     let cargo_release = args.next().unwrap();\n     let rls_release = args.next().unwrap();\n+    let rust_analyzer_release = args.next().unwrap();\n     let clippy_release = args.next().unwrap();\n     let miri_release = args.next().unwrap();\n     let rustfmt_release = args.next().unwrap();\n@@ -290,6 +296,7 @@ fn main() {\n         rust_release,\n         cargo_release,\n         rls_release,\n+        rust_analyzer_release,\n         clippy_release,\n         rustfmt_release,\n         llvm_tools_release,\n@@ -305,6 +312,7 @@ fn main() {\n         rust_version: None,\n         cargo_version: None,\n         rls_version: None,\n+        rust_analyzer_version: None,\n         clippy_version: None,\n         rustfmt_version: None,\n         llvm_tools_version: None,\n@@ -313,6 +321,7 @@ fn main() {\n         rust_git_commit_hash: None,\n         cargo_git_commit_hash: None,\n         rls_git_commit_hash: None,\n+        rust_analyzer_git_commit_hash: None,\n         clippy_git_commit_hash: None,\n         rustfmt_git_commit_hash: None,\n         llvm_tools_git_commit_hash: None,\n@@ -327,6 +336,7 @@ enum PkgType {\n     RustSrc,\n     Cargo,\n     Rls,\n+    RustAnalyzer,\n     Clippy,\n     Rustfmt,\n     LlvmTools,\n@@ -341,6 +351,7 @@ impl PkgType {\n             \"rust-src\" => RustSrc,\n             \"cargo\" => Cargo,\n             \"rls\" | \"rls-preview\" => Rls,\n+            \"rust-analyzer\" | \"rust-analyzer-preview\" => RustAnalyzer,\n             \"clippy\" | \"clippy-preview\" => Clippy,\n             \"rustfmt\" | \"rustfmt-preview\" => Rustfmt,\n             \"llvm-tools\" | \"llvm-tools-preview\" => LlvmTools,\n@@ -355,6 +366,7 @@ impl Builder {\n         self.rust_version = self.version(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_version = self.version(\"cargo\", \"x86_64-unknown-linux-gnu\");\n         self.rls_version = self.version(\"rls\", \"x86_64-unknown-linux-gnu\");\n+        self.rust_analyzer_version = self.version(\"rust-analyzer\", \"x86_64-unknown-linux-gnu\");\n         self.clippy_version = self.version(\"clippy\", \"x86_64-unknown-linux-gnu\");\n         self.rustfmt_version = self.version(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n         self.llvm_tools_version = self.version(\"llvm-tools\", \"x86_64-unknown-linux-gnu\");\n@@ -363,6 +375,8 @@ impl Builder {\n         self.rust_git_commit_hash = self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_git_commit_hash = self.git_commit_hash(\"cargo\", \"x86_64-unknown-linux-gnu\");\n         self.rls_git_commit_hash = self.git_commit_hash(\"rls\", \"x86_64-unknown-linux-gnu\");\n+        self.rust_analyzer_git_commit_hash =\n+            self.git_commit_hash(\"rust-analyzer\", \"x86_64-unknown-linux-gnu\");\n         self.clippy_git_commit_hash = self.git_commit_hash(\"clippy\", \"x86_64-unknown-linux-gnu\");\n         self.rustfmt_git_commit_hash = self.git_commit_hash(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n         self.llvm_tools_git_commit_hash =\n@@ -436,6 +450,7 @@ impl Builder {\n         package(\"rust-docs\", DOCS_TARGETS);\n         package(\"rust-src\", &[\"*\"]);\n         package(\"rls-preview\", HOSTS);\n+        package(\"rust-analyzer-preview\", HOSTS);\n         package(\"clippy-preview\", HOSTS);\n         package(\"miri-preview\", HOSTS);\n         package(\"rustfmt-preview\", HOSTS);\n@@ -469,6 +484,7 @@ impl Builder {\n                 \"rustfmt-preview\",\n                 \"clippy-preview\",\n                 \"rls-preview\",\n+                \"rust-analyzer-preview\",\n                 \"rust-src\",\n                 \"llvm-tools-preview\",\n                 \"rust-analysis\",\n@@ -543,6 +559,7 @@ impl Builder {\n             host_component(\"clippy-preview\"),\n             host_component(\"miri-preview\"),\n             host_component(\"rls-preview\"),\n+            host_component(\"rust-analyzer-preview\"),\n             host_component(\"rustfmt-preview\"),\n             host_component(\"llvm-tools-preview\"),\n             host_component(\"rust-analysis\"),\n@@ -612,8 +629,8 @@ impl Builder {\n             .map(|version| (version, true))\n             .unwrap_or_default(); // `is_present` defaults to `false` here.\n \n-        // Miri is nightly-only; never ship it for other trains.\n-        if pkgname == \"miri-preview\" && self.rust_release != \"nightly\" {\n+        // Never ship nightly-only components for other trains.\n+        if self.rust_release != \"nightly\" && NIGHTLY_ONLY_COMPONENTS.contains(&pkgname) {\n             is_present = false; // Pretend the component is entirely missing.\n         }\n \n@@ -671,6 +688,9 @@ impl Builder {\n             RustSrc => format!(\"rust-src-{}.tar.gz\", self.rust_release),\n             Cargo => format!(\"cargo-{}-{}.tar.gz\", self.cargo_release, target),\n             Rls => format!(\"rls-{}-{}.tar.gz\", self.rls_release, target),\n+            RustAnalyzer => {\n+                format!(\"rust-analyzer-{}-{}.tar.gz\", self.rust_analyzer_release, target)\n+            }\n             Clippy => format!(\"clippy-{}-{}.tar.gz\", self.clippy_release, target),\n             Rustfmt => format!(\"rustfmt-{}-{}.tar.gz\", self.rustfmt_release, target),\n             LlvmTools => format!(\"llvm-tools-{}-{}.tar.gz\", self.llvm_tools_release, target),\n@@ -684,6 +704,7 @@ impl Builder {\n         match PkgType::from_component(component) {\n             Cargo => &self.cargo_version,\n             Rls => &self.rls_version,\n+            RustAnalyzer => &self.rust_analyzer_version,\n             Clippy => &self.clippy_version,\n             Rustfmt => &self.rustfmt_version,\n             LlvmTools => &self.llvm_tools_version,\n@@ -697,6 +718,7 @@ impl Builder {\n         match PkgType::from_component(component) {\n             Cargo => &self.cargo_git_commit_hash,\n             Rls => &self.rls_git_commit_hash,\n+            RustAnalyzer => &self.rust_analyzer_git_commit_hash,\n             Clippy => &self.clippy_git_commit_hash,\n             Rustfmt => &self.rustfmt_git_commit_hash,\n             LlvmTools => &self.llvm_tools_git_commit_hash,"}, {"sha": "b10181062ff10042703b31c373d875ad64658841", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70f9d23b916f2db7da711aa4a0317a218997ba42/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=70f9d23b916f2db7da711aa4a0317a218997ba42", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                     return;\n                 }\n \n-                if is_non_trait_box(cmt.place.ty) && !self.is_large_box(cmt.place.ty) {\n+                if is_non_trait_box(cmt.place.ty()) && !self.is_large_box(cmt.place.ty()) {\n                     self.set.insert(cmt.hir_id);\n                 }\n                 return;"}]}