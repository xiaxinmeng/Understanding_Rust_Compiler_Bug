{"sha": "28937be16aa28e31b8493129d04730aa83c920e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTM3YmUxNmFhMjhlMzFiODQ5MzEyOWQwNDczMGFhODNjOTIwZTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:16:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:16:37Z"}, "message": "rollup merge of #21429: GuillaumeGomez/macro-fix\n\nThis is little clean code of this PR: #21366. I patched the same thing as aochagavia but too slowly obviously. This is a merge of our two codes, more \"rust-like\".", "tree": {"sha": "12dfa14bb02562f2444cdc287020c2938861e47f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12dfa14bb02562f2444cdc287020c2938861e47f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28937be16aa28e31b8493129d04730aa83c920e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28937be16aa28e31b8493129d04730aa83c920e7", "html_url": "https://github.com/rust-lang/rust/commit/28937be16aa28e31b8493129d04730aa83c920e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28937be16aa28e31b8493129d04730aa83c920e7/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ef5484783da1c1c2e8e3efe44ba2a922e8f63e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef5484783da1c1c2e8e3efe44ba2a922e8f63e1", "html_url": "https://github.com/rust-lang/rust/commit/9ef5484783da1c1c2e8e3efe44ba2a922e8f63e1"}, {"sha": "3c37a952e738e4fe608a7870a751bbe96d9250e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c37a952e738e4fe608a7870a751bbe96d9250e0", "html_url": "https://github.com/rust-lang/rust/commit/3c37a952e738e4fe608a7870a751bbe96d9250e0"}], "stats": {"total": 121, "additions": 68, "deletions": 53}, "files": [{"sha": "8350e0222ef898f4c082eec9234d0ece8c68c0e3", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 54, "deletions": 53, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/28937be16aa28e31b8493129d04730aa83c920e7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28937be16aa28e31b8493129d04730aa83c920e7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=28937be16aa28e31b8493129d04730aa83c920e7", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{TokenTree, TtDelimited, TtSequence, TtToken};\n-use ast;\n+use ast::{self, TokenTree, TtDelimited, TtSequence, TtToken};\n use codemap::{Span, DUMMY_SP};\n use ext::base::{ExtCtxt, MacResult, SyntaxExtension};\n use ext::base::{NormalTT, TTMacroExpander};\n@@ -19,9 +18,8 @@ use ext::tt::macro_parser::{parse, parse_or_else};\n use parse::lexer::{new_tt_reader, new_tt_reader_with_doc_flag};\n use parse::parser::Parser;\n use parse::attr::ParserAttr;\n-use parse::token::{special_idents, gensym_ident, NtTT, Token};\n+use parse::token::{self, special_idents, gensym_ident, NtTT, Token};\n use parse::token::Token::*;\n-use parse::token;\n use print;\n use ptr::P;\n \n@@ -336,16 +334,20 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n \n                 let tok = if let TtToken(_, ref tok) = *token { tok } else { unreachable!() };\n                 // If T' is in the set FOLLOW(NT), continue. Else, reject.\n-                match &next_token {\n-                    &Eof => return Some((sp, tok.clone())),\n-                    _ if is_in_follow(cx, &next_token, frag_spec.as_str()) => continue,\n-                    next => {\n+                match (&next_token, is_in_follow(cx, &next_token, frag_spec.as_str())) {\n+                    (&Eof, _) => return Some((sp, tok.clone())),\n+                    (_, Ok(true)) => continue,\n+                    (next, Ok(false)) => {\n                         cx.span_err(sp, format!(\"`${0}:{1}` is followed by `{2}`, which \\\n                                                  is not allowed for `{1}` fragments\",\n                                                  name.as_str(), frag_spec.as_str(),\n                                                  token_to_string(next)).as_slice());\n                         continue\n                     },\n+                    (_, Err(msg)) => {\n+                        cx.span_err(sp, msg.as_slice());\n+                        continue\n+                    }\n                 }\n             },\n             TtSequence(sp, ref seq) => {\n@@ -412,51 +414,50 @@ fn check_matcher<'a, I>(cx: &mut ExtCtxt, matcher: I, follow: &Token)\n     last\n }\n \n-fn is_in_follow(cx: &ExtCtxt, tok: &Token, frag: &str) -> bool {\n+fn is_in_follow(_: &ExtCtxt, tok: &Token, frag: &str) -> Result<bool, String> {\n     if let &CloseDelim(_) = tok {\n-        return true;\n-    }\n-\n-    match frag {\n-        \"item\" => {\n-            // since items *must* be followed by either a `;` or a `}`, we can\n-            // accept anything after them\n-            true\n-        },\n-        \"block\" => {\n-            // anything can follow block, the braces provide a easy boundary to\n-            // maintain\n-            true\n-        },\n-        \"stmt\" | \"expr\"  => {\n-            match *tok {\n-                FatArrow | Comma | Semi => true,\n-                _ => false\n-            }\n-        },\n-        \"pat\" => {\n-            match *tok {\n-                FatArrow | Comma | Eq => true,\n-                _ => false\n-            }\n-        },\n-        \"path\" | \"ty\" => {\n-            match *tok {\n-                Comma | FatArrow | Colon | Eq | Gt => true,\n-                Ident(i, _) if i.as_str() == \"as\" => true,\n-                _ => false\n-            }\n-        },\n-        \"ident\" => {\n-            // being a single token, idents are harmless\n-            true\n-        },\n-        \"meta\" | \"tt\" => {\n-            // being either a single token or a delimited sequence, tt is\n-            // harmless\n-            true\n-        },\n-        _ => cx.bug(format!(\"unrecognized builtin nonterminal {}\",\n-                            frag).as_slice()),\n+        Ok(true)\n+    } else {\n+        match frag {\n+            \"item\" => {\n+                // since items *must* be followed by either a `;` or a `}`, we can\n+                // accept anything after them\n+                Ok(true)\n+            },\n+            \"block\" => {\n+                // anything can follow block, the braces provide a easy boundary to\n+                // maintain\n+                Ok(true)\n+            },\n+            \"stmt\" | \"expr\"  => {\n+                match *tok {\n+                    FatArrow | Comma | Semi => Ok(true),\n+                    _ => Ok(false)\n+                }\n+            },\n+            \"pat\" => {\n+                match *tok {\n+                    FatArrow | Comma | Eq => Ok(true),\n+                    _ => Ok(false)\n+                }\n+            },\n+            \"path\" | \"ty\" => {\n+                match *tok {\n+                    Comma | FatArrow | Colon | Eq | Gt => Ok(true),\n+                    Ident(i, _) if i.as_str() == \"as\" => Ok(true),\n+                    _ => Ok(false)\n+                }\n+            },\n+            \"ident\" => {\n+                // being a single token, idents are harmless\n+                Ok(true)\n+            },\n+            \"meta\" | \"tt\" => {\n+                // being either a single token or a delimited sequence, tt is\n+                // harmless\n+                Ok(true)\n+            },\n+            _ => Err(format!(\"unrecognized builtin nonterminal `{}`\", frag))\n+        }\n     }\n }"}, {"sha": "979534ab30cd39e0901e91f76e30f99922fc8245", "filename": "src/test/compile-fail/issue-21356.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28937be16aa28e31b8493129d04730aa83c920e7/src%2Ftest%2Fcompile-fail%2Fissue-21356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28937be16aa28e31b8493129d04730aa83c920e7/src%2Ftest%2Fcompile-fail%2Fissue-21356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21356.rs?ref=28937be16aa28e31b8493129d04730aa83c920e7", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! test { ($wrong:t_ty ..) => () }\n+                  //~^ ERROR: unrecognized builtin nonterminal `t_ty`\n+\n+fn main() {}"}]}