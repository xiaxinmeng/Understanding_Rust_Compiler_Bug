{"sha": "9b7d9a9a1bcfba81979f6f1165b5274c93b03039", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliN2Q5YTlhMWJjZmJhODE5NzlmNmYxMTY1YjUyNzRjOTNiMDMwMzk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-11T21:28:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-11T21:28:03Z"}, "message": "rustc: Treat existential traits as base types for coherence purposes", "tree": {"sha": "b5540cee95f22d5081055208a7c1cf0c4d88c4cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5540cee95f22d5081055208a7c1cf0c4d88c4cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b7d9a9a1bcfba81979f6f1165b5274c93b03039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7d9a9a1bcfba81979f6f1165b5274c93b03039", "html_url": "https://github.com/rust-lang/rust/commit/9b7d9a9a1bcfba81979f6f1165b5274c93b03039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b7d9a9a1bcfba81979f6f1165b5274c93b03039/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdf0c1b353393ff34b1dee6edfbfece13f7c3093", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf0c1b353393ff34b1dee6edfbfece13f7c3093", "html_url": "https://github.com/rust-lang/rust/commit/fdf0c1b353393ff34b1dee6edfbfece13f7c3093"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "07929d50ce1b1a56abb493223fa40aa4048ed9fa", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9b7d9a9a1bcfba81979f6f1165b5274c93b03039/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7d9a9a1bcfba81979f6f1165b5274c93b03039/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=9b7d9a9a1bcfba81979f6f1165b5274c93b03039", "patch": "@@ -166,16 +166,15 @@ class CoherenceChecker {\n                 self.get_base_type(base_mutability_and_type.ty)\n             }\n \n-            ty_enum(*) | ty_class(*) {\n+            ty_enum(*) | ty_trait(*) | ty_class(*) {\n                 some(original_type)\n             }\n \n             ty_nil | ty_bot | ty_bool | ty_int(*) | ty_uint(*) | ty_float(*) |\n             ty_str | ty_estr(*) | ty_vec(*) | ty_evec(*) | ty_rec(*) |\n-            ty_fn(*) | ty_trait(*) | ty_tup(*) | ty_var(*) |\n-            ty_var_integral(*) | ty_param(*) | ty_self | ty_constr(*) |\n-            ty_type | ty_opaque_box | ty_opaque_closure_ptr(*) |\n-            ty_unboxed_vec(*) {\n+            ty_fn(*) | ty_tup(*) | ty_var(*) | ty_var_integral(*) |\n+            ty_param(*) | ty_self | ty_constr(*) | ty_type | ty_opaque_box |\n+            ty_opaque_closure_ptr(*) | ty_unboxed_vec(*) {\n                 none\n             }\n         }\n@@ -189,12 +188,14 @@ class CoherenceChecker {\n             }\n             some(base_type) {\n                 alt get(base_type).struct {\n-                    ty_enum(def_id, _) | ty_class(def_id, _) {\n+                    ty_enum(def_id, _) |\n+                    ty_class(def_id, _) |\n+                    ty_trait(def_id, _) {\n                         ret some(def_id);\n                     }\n                     _ {\n                         fail \"get_base_type() returned a type that wasn't an \\\n-                              enum or class\";\n+                              enum, class, or trait\";\n                     }\n                 }\n             }\n@@ -394,13 +395,13 @@ class CoherenceChecker {\n         let results = @dvec();\n         for items.each |item| {\n             alt item.node {\n-                item_class(*) | item_enum(*) {\n+                item_class(*) | item_enum(*) | item_trait(*) {\n                     results.push(local_def(item.id));\n                 }\n \n                 item_const(*) | item_fn(*) | item_mod(*) |\n-                item_foreign_mod(*) | item_ty(*) | item_trait(*) |\n-                item_impl(*) | item_mac(*) {\n+                item_foreign_mod(*) | item_ty(*) | item_impl(*) |\n+                item_mac(*) {\n                     // Nothing to do.\n                 }\n             }"}]}