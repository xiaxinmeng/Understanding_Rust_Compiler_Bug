{"sha": "5f524ed5c4b0d5e0bf6a6ea52284704411712c82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNTI0ZWQ1YzRiMGQ1ZTBiZjZhNmVhNTIyODQ3MDQ0MTE3MTJjODI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-05T11:59:40Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-11-05T14:26:02Z"}, "message": "Switch to using revisions in borrowck-lend-flow-loop.rs\n\nMost of the time we want to robustify tests, but in this case this\ntest is deliberately encoding artifacts of AST-borrowck.  So instead\nof adding artificial uses that would obscure the aspects of\nAST-borrowck that are being tests, we instead use revisions and then\nmark the cases that apply to NLL as well as AST-borrowck.", "tree": {"sha": "95d2ea8580ed31dbd266df47a45571f330978476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d2ea8580ed31dbd266df47a45571f330978476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f524ed5c4b0d5e0bf6a6ea52284704411712c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f524ed5c4b0d5e0bf6a6ea52284704411712c82", "html_url": "https://github.com/rust-lang/rust/commit/5f524ed5c4b0d5e0bf6a6ea52284704411712c82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f524ed5c4b0d5e0bf6a6ea52284704411712c82/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cfc6033955dd2685dfa7baeec6f6bc3bfdfe2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfc6033955dd2685dfa7baeec6f6bc3bfdfe2f1", "html_url": "https://github.com/rust-lang/rust/commit/6cfc6033955dd2685dfa7baeec6f6bc3bfdfe2f1"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "1844d8275999d0f0e62bf20b8a288dea8e88bba4", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.ast.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f524ed5c4b0d5e0bf6a6ea52284704411712c82/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f524ed5c4b0d5e0bf6a6ea52284704411712c82/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.ast.stderr?ref=5f524ed5c4b0d5e0bf6a6ea52284704411712c82", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n LL |     let mut x = &mut v;\n    |                      - mutable borrow occurs here\n ...\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                 ^^ immutable borrow occurs here\n LL |     }\n LL | }\n@@ -16,7 +16,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n LL |     let mut x = &mut v;\n    |                      - mutable borrow occurs here\n LL |     for _ in 0..3 {\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                 ^^ immutable borrow occurs here\n ...\n LL | }\n@@ -25,7 +25,7 @@ LL | }\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n   --> $DIR/borrowck-lend-flow-loop.rs:57:25\n    |\n-LL |         borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |         borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                         ^^ mutable borrow occurs here\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n@@ -36,7 +36,7 @@ LL | }\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n   --> $DIR/borrowck-lend-flow-loop.rs:69:25\n    |\n-LL |         borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |         borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                         ^^ mutable borrow occurs here\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n@@ -50,7 +50,7 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n ...\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                     ^^ mutable borrow occurs here\n LL | }\n    | - immutable borrow ends here\n@@ -61,27 +61,27 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n LL |         _x = &v;\n    |               - immutable borrow occurs here\n ...\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n    |                     ^^ mutable borrow occurs here\n LL | }\n    | - immutable borrow ends here\n \n error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n   --> $DIR/borrowck-lend-flow-loop.rs:109:17\n    |\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                 ^^ immutable borrow occurs here\n-LL |         if cond2 {\n-LL |             x = &mut v; //~ ERROR cannot borrow\n+...\n+LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n    |                      - mutable borrow occurs here\n ...\n LL | }\n    | - mutable borrow ends here\n \n error[E0499]: cannot borrow `v` as mutable more than once at a time\n-  --> $DIR/borrowck-lend-flow-loop.rs:111:22\n+  --> $DIR/borrowck-lend-flow-loop.rs:112:22\n    |\n-LL |             x = &mut v; //~ ERROR cannot borrow\n+LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n    |                      ^ mutable borrow starts here in previous iteration of loop\n ...\n LL | }", "previous_filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.stderr"}, {"sha": "19de3582c881964372e0b23851fca87a1bd352c0", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f524ed5c4b0d5e0bf6a6ea52284704411712c82/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f524ed5c4b0d5e0bf6a6ea52284704411712c82/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.nll.stderr?ref=5f524ed5c4b0d5e0bf6a6ea52284704411712c82", "patch": "@@ -4,9 +4,9 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n LL |     let mut x = &mut v;\n    |                 ------ mutable borrow occurs here\n LL |     for _ in 0..3 {\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n-LL |     }\n+...\n LL |     *x = box 5;\n    |     -- mutable borrow used here, in later iteration of loop\n \n@@ -15,10 +15,10 @@ error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mut\n    |\n LL |         **x += 1;\n    |         -------- mutable borrow used here, in later iteration of loop\n-LL |         borrow(&*v); //~ ERROR cannot borrow\n+LL |         borrow(&*v); //[ast]~ ERROR cannot borrow\n    |                ^^^ immutable borrow occurs here\n-LL |         if cond2 {\n-LL |             x = &mut v; //~ ERROR cannot borrow\n+...\n+LL |             x = &mut v; //[ast]~ ERROR cannot borrow\n    |                 ------ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "7008e5cef4b7587380ebd06ca5caf538beab8df6", "filename": "src/test/ui/borrowck/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5f524ed5c4b0d5e0bf6a6ea52284704411712c82/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f524ed5c4b0d5e0bf6a6ea52284704411712c82/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-loop.rs?ref=5f524ed5c4b0d5e0bf6a6ea52284704411712c82", "patch": "@@ -1,18 +1,18 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Note: the borrowck analysis is currently flow-insensitive.\n-// Therefore, some of these errors are marked as spurious and could be\n-// corrected by a simple change to the analysis.  The others are\n-// either genuine or would require more advanced changes.  The latter\n-// cases are noted.\n+// revisions: ast nll\n+\n+// Since we are testing nll migration explicitly as a separate\n+// revision, don't worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n+//[ast]compile-flags: -Z borrowck=ast\n+//[nll]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+\n+// Note: the borrowck analysis was originally a flow-insensitive pass\n+// over the AST. Therefore, some of these (AST) errors are marked as\n+// spurious and are corrected by the flow-sensitive (NLL) analysis.\n+// The others are either genuine or would require more advanced\n+// changes. The latter cases are noted.\n \n #![feature(box_syntax)]\n \n@@ -32,7 +32,7 @@ fn loop_overarching_alias_mut() {\n     let mut x = &mut v;\n     **x += 1;\n     loop {\n-        borrow(&*v); //~ ERROR cannot borrow\n+        borrow(&*v); //[ast]~ ERROR cannot borrow\n     }\n }\n \n@@ -42,19 +42,19 @@ fn block_overarching_alias_mut() {\n     let mut v: Box<_> = box 3;\n     let mut x = &mut v;\n     for _ in 0..3 {\n-        borrow(&*v); //~ ERROR cannot borrow\n+        borrow(&*v); //[ast]~ ERROR cannot borrow\n+        //[nll]~^ ERROR cannot borrow\n     }\n     *x = box 5;\n }\n-\n fn loop_aliased_mut() {\n     // In this instance, the borrow is carried through the loop.\n \n     let mut v: Box<_> = box 3;\n     let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     loop {\n-        borrow_mut(&mut *v); //~ ERROR cannot borrow\n+        borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n         _x = &v;\n     }\n }\n@@ -66,7 +66,7 @@ fn while_aliased_mut() {\n     let mut w: Box<_> = box 4;\n     let mut _x = &w;\n     while cond() {\n-        borrow_mut(&mut *v); //~ ERROR cannot borrow\n+        borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n         _x = &v;\n     }\n }\n@@ -83,7 +83,7 @@ fn loop_aliased_mut_break() {\n         _x = &v;\n         break;\n     }\n-    borrow_mut(&mut *v); //~ ERROR cannot borrow\n+    borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n }\n \n fn while_aliased_mut_break() {\n@@ -97,7 +97,7 @@ fn while_aliased_mut_break() {\n         _x = &v;\n         break;\n     }\n-    borrow_mut(&mut *v); //~ ERROR cannot borrow\n+    borrow_mut(&mut *v); //[ast]~ ERROR cannot borrow\n }\n \n fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n@@ -106,13 +106,13 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     let mut x = &mut w;\n     while cond {\n         **x += 1;\n-        borrow(&*v); //~ ERROR cannot borrow\n+        borrow(&*v); //[ast]~ ERROR cannot borrow\n+        //[nll]~^ ERROR cannot borrow\n         if cond2 {\n-            x = &mut v; //~ ERROR cannot borrow\n+            x = &mut v; //[ast]~ ERROR cannot borrow\n         }\n     }\n }\n-\n fn loop_break_pops_scopes<'r, F>(_v: &'r mut [usize], mut f: F) where\n     F: FnMut(&'r mut usize) -> bool,\n {"}]}