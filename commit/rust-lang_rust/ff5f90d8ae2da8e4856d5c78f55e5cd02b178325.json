{"sha": "ff5f90d8ae2da8e4856d5c78f55e5cd02b178325", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNWY5MGQ4YWUyZGE4ZTQ4NTZkNWM3OGY1NWU1Y2QwMmIxNzgzMjU=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-17T01:34:46Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-17T01:36:29Z"}, "message": "use simpler .map(|x| y) instead of .and_then(|x| Some(y)) for Options. (clippy::bind_instead_of_map)", "tree": {"sha": "68a4b706477487e466d9d33e577f7cb6dbf2bf50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68a4b706477487e466d9d33e577f7cb6dbf2bf50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff5f90d8ae2da8e4856d5c78f55e5cd02b178325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5f90d8ae2da8e4856d5c78f55e5cd02b178325", "html_url": "https://github.com/rust-lang/rust/commit/ff5f90d8ae2da8e4856d5c78f55e5cd02b178325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff5f90d8ae2da8e4856d5c78f55e5cd02b178325/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b91393b85eb2b5d41ccbd3048dcc61eb8061c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b91393b85eb2b5d41ccbd3048dcc61eb8061c7", "html_url": "https://github.com/rust-lang/rust/commit/64b91393b85eb2b5d41ccbd3048dcc61eb8061c7"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "83aa11d52c733622ea7df82055ba2d54610b4dca", "filename": "crates/ide_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff5f90d8ae2da8e4856d5c78f55e5cd02b178325/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5f90d8ae2da8e4856d5c78f55e5cd02b178325/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=ff5f90d8ae2da8e4856d5c78f55e5cd02b178325", "patch": "@@ -73,8 +73,8 @@ fn find_parent_and_path(\n ) -> Option<(Either<ast::UseTree, ast::UseTreeList>, ast::Path)> {\n     return star.ancestors().find_map(|n| {\n         find_use_tree_list(n.clone())\n-            .and_then(|(u, p)| Some((Either::Right(u), p)))\n-            .or_else(|| find_use_tree(n).and_then(|(u, p)| Some((Either::Left(u), p))))\n+            .map(|(u, p)| (Either::Right(u), p))\n+            .or_else(|| find_use_tree(n).map(|(u, p)| (Either::Left(u), p)))\n     });\n \n     fn find_use_tree_list(n: SyntaxNode) -> Option<(ast::UseTreeList, ast::Path)> {"}, {"sha": "324817cd0d8f25ecaff355db8941a562c97b983b", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ff5f90d8ae2da8e4856d5c78f55e5cd02b178325/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5f90d8ae2da8e4856d5c78f55e5cd02b178325/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=ff5f90d8ae2da8e4856d5c78f55e5cd02b178325", "patch": "@@ -161,15 +161,9 @@ impl Definition {\n \n         if let Definition::Local(var) = self {\n             let range = match var.parent(db) {\n-                DefWithBody::Function(f) => {\n-                    f.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n-                }\n-                DefWithBody::Const(c) => {\n-                    c.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n-                }\n-                DefWithBody::Static(s) => {\n-                    s.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n-                }\n+                DefWithBody::Function(f) => f.source(db).map(|src| src.value.syntax().text_range()),\n+                DefWithBody::Const(c) => c.source(db).map(|src| src.value.syntax().text_range()),\n+                DefWithBody::Static(s) => s.source(db).map(|src| src.value.syntax().text_range()),\n             };\n             let mut res = FxHashMap::default();\n             res.insert(file_id, range);\n@@ -179,33 +173,29 @@ impl Definition {\n         if let Definition::GenericParam(hir::GenericParam::LifetimeParam(param)) = self {\n             let range = match param.parent(db) {\n                 hir::GenericDef::Function(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n                 hir::GenericDef::Adt(it) => match it {\n                     hir::Adt::Struct(it) => {\n-                        it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n-                    }\n-                    hir::Adt::Union(it) => {\n-                        it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n-                    }\n-                    hir::Adt::Enum(it) => {\n-                        it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                        it.source(db).map(|src| src.value.syntax().text_range())\n                     }\n+                    hir::Adt::Union(it) => it.source(db).map(|src| src.value.syntax().text_range()),\n+                    hir::Adt::Enum(it) => it.source(db).map(|src| src.value.syntax().text_range()),\n                 },\n                 hir::GenericDef::Trait(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n                 hir::GenericDef::TypeAlias(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n                 hir::GenericDef::Impl(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n                 hir::GenericDef::Variant(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n                 hir::GenericDef::Const(it) => {\n-                    it.source(db).and_then(|src| Some(src.value.syntax().text_range()))\n+                    it.source(db).map(|src| src.value.syntax().text_range())\n                 }\n             };\n             let mut res = FxHashMap::default();"}]}