{"sha": "a167cbddac2b9f9bb6fde0cf22473115958a8358", "node_id": "C_kwDOAAsO6NoAKGExNjdjYmRkYWMyYjlmOWJiNmZkZTBjZjIyNDczMTE1OTU4YTgzNTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-15T14:50:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-15T14:50:03Z"}, "message": "Auto merge of #109164 - Dylan-DPC:rollup-0bwxwos, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #108991 (add `enable-warnings` flag for llvm, and disable it by default.)\n - #109109 (Use `unused_generic_params` from crate metadata)\n - #109111 (Create dirs for build_triple)\n - #109136 (Simplify proc macro signature validity check)\n - #109150 (Update cargo)\n - #109154 (Fix MappingToUnit  to support no span of arg_ty)\n - #109157 (Remove mw from review rotation for a while)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "61171bde7a1a795122c94308094a09488e20a076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61171bde7a1a795122c94308094a09488e20a076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a167cbddac2b9f9bb6fde0cf22473115958a8358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a167cbddac2b9f9bb6fde0cf22473115958a8358", "html_url": "https://github.com/rust-lang/rust/commit/a167cbddac2b9f9bb6fde0cf22473115958a8358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a167cbddac2b9f9bb6fde0cf22473115958a8358/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b9f86054c581d931f8bad0c87523c53e1e8e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b9f86054c581d931f8bad0c87523c53e1e8e3f", "html_url": "https://github.com/rust-lang/rust/commit/e4b9f86054c581d931f8bad0c87523c53e1e8e3f"}, {"sha": "ff8f659501fd02276f11f6f43fffbc5ef1d00dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8f659501fd02276f11f6f43fffbc5ef1d00dc1", "html_url": "https://github.com/rust-lang/rust/commit/ff8f659501fd02276f11f6f43fffbc5ef1d00dc1"}], "stats": {"total": 592, "additions": 295, "deletions": 297}, "files": [{"sha": "0c0b5d6ab3b5727e9ed960f2f47e4d506eddfa14", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -353,7 +353,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.70.0\"\n+version = \"0.71.0\"\n dependencies = [\n  \"anyhow\",\n  \"base64\",\n@@ -1001,7 +1001,7 @@ dependencies = [\n \n [[package]]\n name = \"crates-io\"\n-version = \"0.35.1\"\n+version = \"0.36.0\"\n dependencies = [\n  \"anyhow\",\n  \"curl\",\n@@ -5139,6 +5139,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"rustc_trait_selection\",\n  \"tracing\",\n ]\n "}, {"sha": "7c692fee33389666f0a364c7ce9b98986eaff6a6", "filename": "compiler/rustc_lint/src/map_unit_fn.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_lint%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_lint%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmap_unit_fn.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -56,6 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for MapUnitFn {\n                         return;\n                     }\n                     let arg_ty = cx.typeck_results().expr_ty(&args[0]);\n+                    let default_span = args[0].span;\n                     if let ty::FnDef(id, _) = arg_ty.kind() {\n                         let fn_ty = cx.tcx.fn_sig(id).skip_binder();\n                         let ret_ty = fn_ty.output().skip_binder();\n@@ -64,7 +65,10 @@ impl<'tcx> LateLintPass<'tcx> for MapUnitFn {\n                                 MAP_UNIT_FN,\n                                 span,\n                                 MappingToUnit {\n-                                    function_label: cx.tcx.span_of_impl(*id).unwrap(),\n+                                    function_label: cx\n+                                        .tcx\n+                                        .span_of_impl(*id)\n+                                        .unwrap_or(default_span),\n                                     argument_label: args[0].span,\n                                     map_label: arg_ty.default_span(cx.tcx),\n                                     suggestion: path.ident.span,\n@@ -80,7 +84,10 @@ impl<'tcx> LateLintPass<'tcx> for MapUnitFn {\n                                 MAP_UNIT_FN,\n                                 span,\n                                 MappingToUnit {\n-                                    function_label: cx.tcx.span_of_impl(*id).unwrap(),\n+                                    function_label: cx\n+                                        .tcx\n+                                        .span_of_impl(*id)\n+                                        .unwrap_or(default_span),\n                                     argument_label: args[0].span,\n                                     map_label: arg_ty.default_span(cx.tcx),\n                                     suggestion: path.ident.span,"}, {"sha": "a98433953367b8e295c4c6fc8e9f036608384c06", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -226,7 +226,15 @@ provide! { tcx, def_id, other, cdata,\n     lookup_default_body_stability => { table }\n     lookup_deprecation_entry => { table }\n     params_in_repr => { table }\n-    unused_generic_params => { table }\n+    // FIXME: Could be defaulted, but `LazyValue<UnusedGenericParams>` is not `FixedSizeEncoding`..\n+    unused_generic_params => {\n+        cdata\n+            .root\n+            .tables\n+            .unused_generic_params\n+            .get(cdata, def_id.index)\n+            .map_or_else(|| ty::UnusedGenericParams::new_all_used(), |lazy| lazy.decode((cdata, tcx)))\n+    }\n     opt_def_kind => { table_direct }\n     impl_parent => { table }\n     impl_polarity => { table_direct }"}, {"sha": "6e961a775c1ff88addffac1ca20c5a233e1af5d5", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> Key for ty::InstanceDef<'tcx> {\n \n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n-        true\n+        self.def_id().is_local()\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n@@ -76,7 +76,7 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n \n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n-        true\n+        self.def_id().is_local()\n     }\n \n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {"}, {"sha": "63263a642acc14bf8d9ceda4467f96cd3202124a", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -36,6 +36,8 @@ fn unused_generic_params<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: ty::InstanceDef<'tcx>,\n ) -> UnusedGenericParams {\n+    assert!(instance.def_id().is_local());\n+\n     if !tcx.sess.opts.unstable_opts.polymorphize {\n         // If polymorphization disabled, then all parameters are used.\n         return UnusedGenericParams::new_all_used();\n@@ -100,13 +102,6 @@ fn should_polymorphize<'tcx>(\n         return false;\n     }\n \n-    // Polymorphization results are stored in cross-crate metadata only when there are unused\n-    // parameters, so assume that non-local items must have only used parameters (else this query\n-    // would not be invoked, and the cross-crate metadata used instead).\n-    if !def_id.is_local() {\n-        return false;\n-    }\n-\n     // Foreign items have no bodies to analyze.\n     if tcx.is_foreign_item(def_id) {\n         return false;"}, {"sha": "44f991f8c15b553684b87cfb03d3d74e14f3e343", "filename": "compiler/rustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2FCargo.toml?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -22,3 +22,4 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_feature = { path = \"../rustc_feature\" }\n+rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "d063b51c8b8622c0e138be85a3a55259185c1541", "filename": "compiler/rustc_passes/messages.ftl", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fmessages.ftl?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -720,26 +720,7 @@ passes_ignored_derived_impls =\n      *[other] traits {$trait_list}, but these are\n     } intentionally ignored during dead code analysis\n \n-passes_proc_macro_typeerror = mismatched {$kind} signature\n-    .label = found {$found}, expected type `proc_macro::TokenStream`\n-    .note = {$kind}s must have a signature of `{$expected_signature}`\n-\n-passes_proc_macro_diff_arg_count = mismatched {$kind} signature\n-    .label = found unexpected {$count ->\n-      [one] argument\n-     *[other] arguments\n-    }\n-    .note = {$kind}s must have a signature of `{$expected_signature}`\n-\n-passes_proc_macro_missing_args = mismatched {$kind} signature\n-    .label = {$kind} must have {$expected_input_count ->\n-      [one] one argument\n-     *[other] two arguments\n-    } of type `proc_macro::TokenStream`\n-\n-passes_proc_macro_invalid_abi = proc macro functions may not be `extern \"{$abi}\"`\n-\n-passes_proc_macro_unsafe = proc macro functions may not be `unsafe`\n+passes_proc_macro_bad_sig = {$kind} has incorrect signature\n \n passes_skipping_const_checks = skipping const checks\n "}, {"sha": "8bed7888142096a62c2a4d9b356ade72c4cbb1ea", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 88, "deletions": 85, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -19,9 +19,10 @@ use rustc_hir::{\n use rustc_hir::{MethodKind, Target, Unsafety};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_bound_vars::ObjectLifetimeDefault;\n-use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n+use rustc_middle::traits::ObligationCause;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{ParamEnv, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint::builtin::{\n     CONFLICTING_REPR_HINTS, INVALID_DOC_ATTRIBUTES, INVALID_MACRO_EXPORT_ARGUMENTS,\n     UNUSED_ATTRIBUTES,\n@@ -30,6 +31,9 @@ use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n+use rustc_trait_selection::infer::{TyCtxtInferExt, ValuePairs};\n+use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n+use rustc_trait_selection::traits::ObligationCtxt;\n use std::cell::Cell;\n use std::collections::hash_map::Entry;\n \n@@ -2188,100 +2192,99 @@ impl CheckAttrVisitor<'_> {\n     ///\n     /// If this best effort goes wrong, it will just emit a worse error later (see #102923)\n     fn check_proc_macro(&self, hir_id: HirId, target: Target, kind: ProcMacroKind) {\n-        let expected_input_count = match kind {\n-            ProcMacroKind::Attribute => 2,\n-            ProcMacroKind::Derive | ProcMacroKind::FunctionLike => 1,\n-        };\n-\n-        let expected_signature = match kind {\n-            ProcMacroKind::Attribute => \"fn(TokenStream, TokenStream) -> TokenStream\",\n-            ProcMacroKind::Derive | ProcMacroKind::FunctionLike => \"fn(TokenStream) -> TokenStream\",\n-        };\n+        if target != Target::Fn {\n+            return;\n+        }\n \n         let tcx = self.tcx;\n-        if target == Target::Fn {\n-            let Some(tokenstream) = tcx.get_diagnostic_item(sym::TokenStream) else {return};\n-            let tokenstream = tcx.type_of(tokenstream).subst_identity();\n-\n-            let id = hir_id.expect_owner();\n-            let hir_sig = tcx.hir().fn_sig_by_hir_id(hir_id).unwrap();\n-\n-            let sig =\n-                tcx.liberate_late_bound_regions(id.to_def_id(), tcx.fn_sig(id).subst_identity());\n-            let sig = tcx.normalize_erasing_regions(ParamEnv::empty(), sig);\n-\n-            // We don't currently require that the function signature is equal to\n-            // `fn(TokenStream) -> TokenStream`, but instead monomorphizes to\n-            // `fn(TokenStream) -> TokenStream` after some substitution of generic arguments.\n-            //\n-            // Properly checking this means pulling in additional `rustc` crates, so we don't.\n-            let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsCandidateKey };\n-\n-            if sig.abi != Abi::Rust {\n-                tcx.sess.emit_err(errors::ProcMacroInvalidAbi {\n-                    span: hir_sig.span,\n-                    abi: sig.abi.name(),\n-                });\n-                self.abort.set(true);\n-            }\n+        let Some(token_stream_def_id) = tcx.get_diagnostic_item(sym::TokenStream) else { return; };\n+        let Some(token_stream) = tcx.type_of(token_stream_def_id).no_bound_vars() else { return; };\n \n-            if sig.unsafety == Unsafety::Unsafe {\n-                tcx.sess.emit_err(errors::ProcMacroUnsafe { span: hir_sig.span });\n-                self.abort.set(true);\n-            }\n+        let def_id = hir_id.expect_owner().def_id;\n+        let param_env = ty::ParamEnv::empty();\n \n-            let output = sig.output();\n+        let infcx = tcx.infer_ctxt().build();\n+        let ocx = ObligationCtxt::new(&infcx);\n \n-            // Typecheck the output\n-            if !drcx.types_may_unify(output, tokenstream) {\n-                tcx.sess.emit_err(errors::ProcMacroTypeError {\n-                    span: hir_sig.decl.output.span(),\n-                    found: output,\n-                    kind,\n-                    expected_signature,\n-                });\n-                self.abort.set(true);\n-            }\n+        let span = tcx.def_span(def_id);\n+        let fresh_substs = infcx.fresh_substs_for_item(span, def_id.to_def_id());\n+        let sig = tcx.liberate_late_bound_regions(\n+            def_id.to_def_id(),\n+            tcx.fn_sig(def_id).subst(tcx, fresh_substs),\n+        );\n \n-            if sig.inputs().len() < expected_input_count {\n-                tcx.sess.emit_err(errors::ProcMacroMissingArguments {\n-                    expected_input_count,\n-                    span: hir_sig.span,\n-                    kind,\n-                    expected_signature,\n-                });\n-                self.abort.set(true);\n-            }\n+        let mut cause = ObligationCause::misc(span, def_id);\n+        let sig = ocx.normalize(&cause, param_env, sig);\n \n-            // Check that the inputs are correct, if there are enough.\n-            if sig.inputs().len() >= expected_input_count {\n-                for (arg, input) in\n-                    sig.inputs().iter().zip(hir_sig.decl.inputs).take(expected_input_count)\n-                {\n-                    if !drcx.types_may_unify(*arg, tokenstream) {\n-                        tcx.sess.emit_err(errors::ProcMacroTypeError {\n-                            span: input.span,\n-                            found: *arg,\n-                            kind,\n-                            expected_signature,\n-                        });\n-                        self.abort.set(true);\n+        // proc macro is not WF.\n+        let errors = ocx.select_where_possible();\n+        if !errors.is_empty() {\n+            return;\n+        }\n+\n+        let expected_sig = tcx.mk_fn_sig(\n+            std::iter::repeat(token_stream).take(match kind {\n+                ProcMacroKind::Attribute => 2,\n+                ProcMacroKind::Derive | ProcMacroKind::FunctionLike => 1,\n+            }),\n+            token_stream,\n+            false,\n+            Unsafety::Normal,\n+            Abi::Rust,\n+        );\n+\n+        if let Err(terr) = ocx.eq(&cause, param_env, expected_sig, sig) {\n+            let mut diag = tcx.sess.create_err(errors::ProcMacroBadSig { span, kind });\n+\n+            let hir_sig = tcx.hir().fn_sig_by_hir_id(hir_id);\n+            if let Some(hir_sig) = hir_sig {\n+                match terr {\n+                    TypeError::ArgumentMutability(idx) | TypeError::ArgumentSorts(_, idx) => {\n+                        if let Some(ty) = hir_sig.decl.inputs.get(idx) {\n+                            diag.set_span(ty.span);\n+                            cause.span = ty.span;\n+                        } else if idx == hir_sig.decl.inputs.len() {\n+                            let span = hir_sig.decl.output.span();\n+                            diag.set_span(span);\n+                            cause.span = span;\n+                        }\n+                    }\n+                    TypeError::ArgCount => {\n+                        if let Some(ty) = hir_sig.decl.inputs.get(expected_sig.inputs().len()) {\n+                            diag.set_span(ty.span);\n+                            cause.span = ty.span;\n+                        }\n                     }\n+                    TypeError::UnsafetyMismatch(_) => {\n+                        // FIXME: Would be nice if we had a span here..\n+                    }\n+                    TypeError::AbiMismatch(_) => {\n+                        // FIXME: Would be nice if we had a span here..\n+                    }\n+                    TypeError::VariadicMismatch(_) => {\n+                        // FIXME: Would be nice if we had a span here..\n+                    }\n+                    _ => {}\n                 }\n             }\n \n-            // Check that there are not too many arguments\n-            let body_id = tcx.hir().body_owned_by(id.def_id);\n-            let excess = tcx.hir().body(body_id).params.get(expected_input_count..);\n-            if let Some(excess @ [begin @ end] | excess @ [begin, .., end]) = excess {\n-                tcx.sess.emit_err(errors::ProcMacroDiffArguments {\n-                    span: begin.span.to(end.span),\n-                    count: excess.len(),\n-                    kind,\n-                    expected_signature,\n-                });\n-                self.abort.set(true);\n-            }\n+            infcx.err_ctxt().note_type_err(\n+                &mut diag,\n+                &cause,\n+                None,\n+                Some(ValuePairs::Sigs(ExpectedFound { expected: expected_sig, found: sig })),\n+                terr,\n+                false,\n+                false,\n+            );\n+            diag.emit();\n+            self.abort.set(true);\n+        }\n+\n+        let errors = ocx.select_all_or_error();\n+        if !errors.is_empty() {\n+            infcx.err_ctxt().report_fulfillment_errors(&errors);\n+            self.abort.set(true);\n         }\n     }\n }"}, {"sha": "1b0cd5d91ab5359e30c4afee84cf8e76f0a9c476", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -1546,52 +1546,11 @@ pub struct ChangeFieldsToBeOfUnitType {\n }\n \n #[derive(Diagnostic)]\n-#[diag(passes_proc_macro_typeerror)]\n-#[note]\n-pub(crate) struct ProcMacroTypeError<'tcx> {\n-    #[primary_span]\n-    #[label]\n-    pub span: Span,\n-    pub found: Ty<'tcx>,\n-    pub kind: ProcMacroKind,\n-    pub expected_signature: &'static str,\n-}\n-\n-#[derive(Diagnostic)]\n-#[diag(passes_proc_macro_diff_arg_count)]\n-pub(crate) struct ProcMacroDiffArguments {\n-    #[primary_span]\n-    #[label]\n-    pub span: Span,\n-    pub count: usize,\n-    pub kind: ProcMacroKind,\n-    pub expected_signature: &'static str,\n-}\n-\n-#[derive(Diagnostic)]\n-#[diag(passes_proc_macro_missing_args)]\n-pub(crate) struct ProcMacroMissingArguments {\n+#[diag(passes_proc_macro_bad_sig)]\n+pub(crate) struct ProcMacroBadSig {\n     #[primary_span]\n-    #[label]\n     pub span: Span,\n-    pub expected_input_count: usize,\n     pub kind: ProcMacroKind,\n-    pub expected_signature: &'static str,\n-}\n-\n-#[derive(Diagnostic)]\n-#[diag(passes_proc_macro_invalid_abi)]\n-pub(crate) struct ProcMacroInvalidAbi {\n-    #[primary_span]\n-    pub span: Span,\n-    pub abi: &'static str,\n-}\n-\n-#[derive(Diagnostic)]\n-#[diag(passes_proc_macro_unsafe)]\n-pub(crate) struct ProcMacroUnsafe {\n-    #[primary_span]\n-    pub span: Span,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "7ae46203f972a8619ce8c93549fff6b591666e65", "filename": "config.example.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -146,6 +146,9 @@ changelog-seen = 2\n # Whether to build the clang compiler.\n #clang = false\n \n+# Whether to enable llvm compilation warnings.\n+#enable-warnings = false\n+\n # Custom CMake defines to set when building LLVM.\n #build-config = {}\n "}, {"sha": "654e03d0c3c7f5d222b700f105dc997f0d61f8e0", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -25,6 +25,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - If you have Rust already installed, `x.py` will now infer the host target\n   from the default rust toolchain. [#78513](https://github.com/rust-lang/rust/pull/78513)\n - Add options for enabling overflow checks, one for std (`overflow-checks-std`) and one for everything else (`overflow-checks`). Both default to false.\n+- Add llvm option `enable-warnings` to have control on llvm compilation warnings. Default to false.\n \n \n ## [Version 2] - 2020-09-25"}, {"sha": "58729f396f0b65a09519b3bd098e73c3098aa867", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -133,6 +133,7 @@ pub struct Config {\n     pub llvm_allow_old_toolchain: bool,\n     pub llvm_polly: bool,\n     pub llvm_clang: bool,\n+    pub llvm_enable_warnings: bool,\n     pub llvm_from_ci: bool,\n     pub llvm_build_config: HashMap<String, String>,\n \n@@ -688,6 +689,7 @@ define_config! {\n         allow_old_toolchain: Option<bool> = \"allow-old-toolchain\",\n         polly: Option<bool> = \"polly\",\n         clang: Option<bool> = \"clang\",\n+        enable_warnings: Option<bool> = \"enable-warnings\",\n         download_ci_llvm: Option<StringOrBool> = \"download-ci-llvm\",\n         build_config: Option<HashMap<String, String>> = \"build-config\",\n     }\n@@ -1184,6 +1186,7 @@ impl Config {\n             config.llvm_allow_old_toolchain = llvm.allow_old_toolchain.unwrap_or(false);\n             config.llvm_polly = llvm.polly.unwrap_or(false);\n             config.llvm_clang = llvm.clang.unwrap_or(false);\n+            config.llvm_enable_warnings = llvm.enable_warnings.unwrap_or(false);\n             config.llvm_build_config = llvm.build_config.clone().unwrap_or(Default::default());\n \n             let asserts = llvm_assertions.unwrap_or(false);"}, {"sha": "20b2699c761bf8c6ad89b0a6147154dadebc2221", "filename": "src/bootstrap/defaults/config.codegen.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -7,6 +7,8 @@ compiler-docs = true\n # This enables debug-assertions in LLVM,\n # catching logic errors in codegen much earlier in the process.\n assertions = true\n+# enable warnings during the llvm compilation\n+enable-warnings = true\n \n [rust]\n # This enables `RUSTC_LOG=debug`, avoiding confusing situations"}, {"sha": "f136690592d7218423915a528264d8c0c011cf46", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -495,6 +495,7 @@ impl Build {\n \n         // Make a symbolic link so we can use a consistent directory in the documentation.\n         let build_triple = build.out.join(&build.build.triple);\n+        t!(fs::create_dir_all(&build_triple));\n         let host = build.out.join(\"host\");\n         if let Err(e) = symlink_dir(&build.config, &build_triple, &host) {\n             if e.kind() != ErrorKind::AlreadyExists {"}, {"sha": "41ee509655326a02b7f54a764dcbdc4cd74b73a1", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -304,6 +304,7 @@ impl Step for Llvm {\n         let assertions = if builder.config.llvm_assertions { \"ON\" } else { \"OFF\" };\n         let plugins = if builder.config.llvm_plugins { \"ON\" } else { \"OFF\" };\n         let enable_tests = if builder.config.llvm_tests { \"ON\" } else { \"OFF\" };\n+        let enable_warnings = if builder.config.llvm_enable_warnings { \"ON\" } else { \"OFF\" };\n \n         cfg.out_dir(&out_dir)\n             .profile(profile)\n@@ -321,7 +322,8 @@ impl Step for Llvm {\n             .define(\"LLVM_ENABLE_Z3_SOLVER\", \"OFF\")\n             .define(\"LLVM_PARALLEL_COMPILE_JOBS\", builder.jobs().to_string())\n             .define(\"LLVM_TARGET_ARCH\", target_native.split('-').next().unwrap())\n-            .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target_native);\n+            .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target_native)\n+            .define(\"LLVM_ENABLE_WARNINGS\", enable_warnings);\n \n         // Parts of our test suite rely on the `FileCheck` tool, which is built by default in\n         // `build/$TARGET/llvm/build/bin` is but *not* then installed to `build/$TARGET/llvm/bin`.\n@@ -483,11 +485,6 @@ impl Step for Llvm {\n             cfg.define(key, val);\n         }\n \n-        // FIXME: we don't actually need to build all LLVM tools and all LLVM\n-        //        libraries here, e.g., we just want a few components and a few\n-        //        tools. Figure out how to filter them down and only build the right\n-        //        tools and libs on all platforms.\n-\n         if builder.config.dry_run() {\n             return res;\n         }"}, {"sha": "4a3c588b1f0a8e2dc8dd8789dbf3b6a71b02ed49", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -1 +1 @@\n-Subproject commit 7d3033d2e59383fd76193daf9423c3d141972a7d\n+Subproject commit 4a3c588b1f0a8e2dc8dd8789dbf3b6a71b02ed49"}, {"sha": "fdbfa1b096d4b610619f6e924f2a8cd72df552b2", "filename": "tests/codegen-units/polymorphization/auxiliary/poly-dep.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fcodegen-units%2Fpolymorphization%2Fauxiliary%2Fpoly-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fcodegen-units%2Fpolymorphization%2Fauxiliary%2Fpoly-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fpolymorphization%2Fauxiliary%2Fpoly-dep.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: -Zpolymorphize=on\n+\n+#[inline(never)]\n+pub fn foo<T>() {}"}, {"sha": "9da082daf114a99f457c03c0186f5941db0fb1dd", "filename": "tests/codegen-units/polymorphization/poly-foreign.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fcodegen-units%2Fpolymorphization%2Fpoly-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fcodegen-units%2Fpolymorphization%2Fpoly-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen-units%2Fpolymorphization%2Fpoly-foreign.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:poly-dep.rs\n+// compile-flags: --crate-type=lib -Zprint-mono-items=eager -Zpolymorphize=on\n+\n+extern crate poly_dep;\n+\n+pub static FN1: fn() = poly_dep::foo::<i32>;\n+pub static FN2: fn() = poly_dep::foo::<u32>;\n+\n+//~ MONO_ITEM static FN1\n+//~ MONO_ITEM static FN2\n+//~ MONO_ITEM fn poly_dep::foo::<T>"}, {"sha": "daf530e6d0b6eeca0e12987dcbee5c8356c295e6", "filename": "tests/ui/lint/issue-109152.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Flint%2Fissue-109152.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Flint%2Fissue-109152.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109152.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -0,0 +1,7 @@\n+#![deny(map_unit_fn)]\n+\n+#![crate_type = \"lib\"]\n+fn _y() {\n+    vec![42].iter().map(drop);\n+    //~^ ERROR `Iterator::map` call that discard the iterator's values\n+}"}, {"sha": "7db9e71a584b0533dada5b4096caacfe9f60366a", "filename": "tests/ui/lint/issue-109152.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Flint%2Fissue-109152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Flint%2Fissue-109152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109152.stderr?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -0,0 +1,23 @@\n+error: `Iterator::map` call that discard the iterator's values\n+  --> $DIR/issue-109152.rs:5:21\n+   |\n+LL |     vec![42].iter().map(drop);\n+   |                     ^^^^----^\n+   |                     |   |\n+   |                     |   this function returns `()`, which is likely not what you wanted\n+   |                     |   called `Iterator::map` with callable that returns `()`\n+   |                     after this call to map, the resulting iterator is `impl Iterator<Item = ()>`, which means the only information carried by the iterator is the number of items\n+   |\n+   = note: `Iterator::map`, like many of the methods on `Iterator`, gets executed lazily, meaning that its effects won't be visible until it is iterated\n+note: the lint level is defined here\n+  --> $DIR/issue-109152.rs:1:9\n+   |\n+LL | #![deny(map_unit_fn)]\n+   |         ^^^^^^^^^^^\n+help: you might have meant to use `Iterator::for_each`\n+   |\n+LL |     vec![42].iter().for_each(drop);\n+   |                     ~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "d214c7ac8b274c9a9a26aeb11782c57a835d24b1", "filename": "tests/ui/proc-macro/bad-projection.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fbad-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fbad-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fbad-projection.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -0,0 +1,15 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![allow(warnings)]\n+\n+extern crate proc_macro;\n+\n+trait Project {\n+    type Assoc;\n+}\n+\n+#[proc_macro]\n+pub fn uwu() -> <() as Project>::Assoc {}\n+//~^ ERROR the trait bound `(): Project` is not satisfied"}, {"sha": "8a8246376fe08db85eed48c20975b5480e31e70f", "filename": "tests/ui/proc-macro/bad-projection.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fbad-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fbad-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fbad-projection.stderr?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -0,0 +1,9 @@\n+error[E0277]: the trait bound `(): Project` is not satisfied\n+  --> $DIR/bad-projection.rs:14:17\n+   |\n+LL | pub fn uwu() -> <() as Project>::Assoc {}\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ the trait `Project` is not implemented for `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "93a613e8b8fc3e794020854f6a37c5da6dcda506", "filename": "tests/ui/proc-macro/proc-macro-abi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -9,19 +9,19 @@ use proc_macro::TokenStream;\n \n #[proc_macro]\n pub extern \"C\" fn abi(a: TokenStream) -> TokenStream {\n-    //~^ ERROR proc macro functions may not be `extern \"C\"`\n+    //~^ ERROR function-like proc macro has incorrect signature\n     a\n }\n \n #[proc_macro]\n pub extern \"system\" fn abi2(a: TokenStream) -> TokenStream {\n-    //~^ ERROR proc macro functions may not be `extern \"system\"`\n+    //~^ ERROR function-like proc macro has incorrect signature\n     a\n }\n \n #[proc_macro]\n pub extern fn abi3(a: TokenStream) -> TokenStream {\n-    //~^ ERROR proc macro functions may not be `extern \"C\"`\n+    //~^ ERROR function-like proc macro has incorrect signature\n     a\n }\n "}, {"sha": "ccc72e5187ed3f9045cf0283bcf159fa3dacd089", "filename": "tests/ui/proc-macro/proc-macro-abi.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fproc-macro-abi.stderr?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -1,20 +1,29 @@\n-error: proc macro functions may not be `extern \"C\"`\n+error: function-like proc macro has incorrect signature\n   --> $DIR/proc-macro-abi.rs:11:1\n    |\n LL | pub extern \"C\" fn abi(a: TokenStream) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"Rust\" fn, found \"C\" fn\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `extern \"C\" fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n \n-error: proc macro functions may not be `extern \"system\"`\n+error: function-like proc macro has incorrect signature\n   --> $DIR/proc-macro-abi.rs:17:1\n    |\n LL | pub extern \"system\" fn abi2(a: TokenStream) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"Rust\" fn, found \"system\" fn\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `extern \"system\" fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n \n-error: proc macro functions may not be `extern \"C\"`\n+error: function-like proc macro has incorrect signature\n   --> $DIR/proc-macro-abi.rs:23:1\n    |\n LL | pub extern fn abi3(a: TokenStream) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected \"Rust\" fn, found \"C\" fn\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `extern \"C\" fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fb48f748ce00482c4315ce3cb3f562068541c231", "filename": "tests/ui/proc-macro/signature-proc-macro-attribute.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -8,25 +8,23 @@ use proc_macro::TokenStream;\n \n #[proc_macro_attribute]\n pub fn bad_input(input: String) -> TokenStream {\n-    //~^ ERROR mismatched attribute proc macro signature\n+    //~^ ERROR attribute proc macro has incorrect signature\n     ::proc_macro::TokenStream::new()\n }\n \n #[proc_macro_attribute]\n pub fn bad_output(input: TokenStream) -> String {\n-    //~^ ERROR mismatched attribute proc macro signature\n-    //~| ERROR mismatched attribute proc macro signature\n+    //~^ ERROR attribute proc macro has incorrect signature\n     String::from(\"blah\")\n }\n \n #[proc_macro_attribute]\n pub fn bad_everything(input: String) -> String {\n-    //~^ ERROR mismatched attribute proc macro signature\n-    //~| ERROR mismatched attribute proc macro signature\n+    //~^ ERROR attribute proc macro has incorrect signature\n     input\n }\n \n #[proc_macro_attribute]\n pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-    //~^ ERROR mismatched attribute proc macro signature\n+    //~^ ERROR attribute proc macro has incorrect signature\n }"}, {"sha": "ce832eaa5c7afe01148b000a916fd3fb0cbe4c15", "filename": "tests/ui/proc-macro/signature-proc-macro-attribute.stderr", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-attribute.stderr?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -1,42 +1,38 @@\n-error: mismatched attribute proc macro signature\n+error: attribute proc macro has incorrect signature\n   --> $DIR/signature-proc-macro-attribute.rs:10:1\n    |\n LL | pub fn bad_input(input: String) -> TokenStream {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n-\n-error: mismatched attribute proc macro signature\n-  --> $DIR/signature-proc-macro-attribute.rs:16:42\n-   |\n-LL | pub fn bad_output(input: TokenStream) -> String {\n-   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-   = note: attribute proc macros must have a signature of `fn(TokenStream, TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> proc_macro::TokenStream`\n \n-error: mismatched attribute proc macro signature\n+error: attribute proc macro has incorrect signature\n   --> $DIR/signature-proc-macro-attribute.rs:16:1\n    |\n LL | pub fn bad_output(input: TokenStream) -> String {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n-\n-error: mismatched attribute proc macro signature\n-  --> $DIR/signature-proc-macro-attribute.rs:23:41\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n-LL | pub fn bad_everything(input: String) -> String {\n-   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n-   |\n-   = note: attribute proc macros must have a signature of `fn(TokenStream, TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream) -> std::string::String`\n \n-error: mismatched attribute proc macro signature\n-  --> $DIR/signature-proc-macro-attribute.rs:23:1\n+error: attribute proc macro has incorrect signature\n+  --> $DIR/signature-proc-macro-attribute.rs:22:1\n    |\n LL | pub fn bad_everything(input: String) -> String {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attribute proc macro must have two arguments of type `proc_macro::TokenStream`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> std::string::String`\n \n-error: mismatched attribute proc macro signature\n-  --> $DIR/signature-proc-macro-attribute.rs:30:49\n+error: attribute proc macro has incorrect signature\n+  --> $DIR/signature-proc-macro-attribute.rs:28:52\n    |\n LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-   |                                                 ^^^^^^^^^ found unexpected argument\n+   |                                                    ^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream, proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream, proc_macro::TokenStream, std::string::String) -> proc_macro::TokenStream`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "d294b15912794fe1bbaeda5014b641b85e7511a6", "filename": "tests/ui/proc-macro/signature-proc-macro-derive.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -8,24 +8,23 @@ use proc_macro::TokenStream;\n \n #[proc_macro_derive(Blah)]\n pub fn bad_input(input: String) -> TokenStream {\n-    //~^ ERROR mismatched derive proc macro signature\n+    //~^ ERROR derive proc macro has incorrect signature\n     TokenStream::new()\n }\n \n #[proc_macro_derive(Bleh)]\n pub fn bad_output(input: TokenStream) -> String {\n-    //~^ ERROR mismatched derive proc macro signature\n+    //~^ ERROR derive proc macro has incorrect signature\n     String::from(\"blah\")\n }\n \n #[proc_macro_derive(Bluh)]\n pub fn bad_everything(input: String) -> String {\n-    //~^ ERROR mismatched derive proc macro signature\n-    //~| ERROR mismatched derive proc macro signature\n+    //~^ ERROR derive proc macro has incorrect signature\n     input\n }\n \n #[proc_macro_derive(Blih)]\n pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-    //~^ ERROR mismatched derive proc macro signature\n+    //~^ ERROR derive proc macro has incorrect signature\n }"}, {"sha": "03c6abad17d918c5cb145189e905c4642444da38", "filename": "tests/ui/proc-macro/signature-proc-macro-derive.stderr", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro-derive.stderr?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -1,40 +1,38 @@\n-error: mismatched derive proc macro signature\n+error: derive proc macro has incorrect signature\n   --> $DIR/signature-proc-macro-derive.rs:10:25\n    |\n LL | pub fn bad_input(input: String) -> TokenStream {\n-   |                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                         ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> proc_macro::TokenStream`\n \n-error: mismatched derive proc macro signature\n+error: derive proc macro has incorrect signature\n   --> $DIR/signature-proc-macro-derive.rs:16:42\n    |\n LL | pub fn bad_output(input: TokenStream) -> String {\n-   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                                          ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream) -> std::string::String`\n \n-error: mismatched derive proc macro signature\n-  --> $DIR/signature-proc-macro-derive.rs:22:41\n-   |\n-LL | pub fn bad_everything(input: String) -> String {\n-   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n-   |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n-\n-error: mismatched derive proc macro signature\n+error: derive proc macro has incorrect signature\n   --> $DIR/signature-proc-macro-derive.rs:22:30\n    |\n LL | pub fn bad_everything(input: String) -> String {\n-   |                              ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                              ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> std::string::String`\n \n-error: mismatched derive proc macro signature\n-  --> $DIR/signature-proc-macro-derive.rs:29:33\n+error: derive proc macro has incorrect signature\n+  --> $DIR/signature-proc-macro-derive.rs:28:36\n    |\n LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ found unexpected arguments\n+   |                                    ^^^^^^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream, proc_macro::TokenStream, std::string::String) -> proc_macro::TokenStream`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "ca2509ed84b5d9e5e9b1c6d2a5c2442dd8bc8194", "filename": "tests/ui/proc-macro/signature-proc-macro.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -8,24 +8,23 @@ use proc_macro::TokenStream;\n \n #[proc_macro]\n pub fn bad_input(input: String) -> TokenStream {\n-    //~^ ERROR mismatched function-like proc macro signature\n+    //~^ ERROR function-like proc macro has incorrect signature\n     ::proc_macro::TokenStream::new()\n }\n \n #[proc_macro]\n pub fn bad_output(input: TokenStream) -> String {\n-    //~^ ERROR mismatched function-like proc macro signature\n+    //~^ ERROR function-like proc macro has incorrect signature\n     String::from(\"blah\")\n }\n \n #[proc_macro]\n pub fn bad_everything(input: String) -> String {\n-    //~^ ERROR mismatched function-like proc macro signature\n-    //~| ERROR mismatched function-like proc macro signature\n+    //~^ ERROR function-like proc macro has incorrect signature\n     input\n }\n \n #[proc_macro]\n pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-    //~^ ERROR mismatched function-like proc macro signature\n+    //~^ ERROR function-like proc macro has incorrect signature\n }"}, {"sha": "dd2cb0570daa28d341d04288dbe73e14b8b87695", "filename": "tests/ui/proc-macro/signature-proc-macro.stderr", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature-proc-macro.stderr?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -1,40 +1,38 @@\n-error: mismatched function-like proc macro signature\n+error: function-like proc macro has incorrect signature\n   --> $DIR/signature-proc-macro.rs:10:25\n    |\n LL | pub fn bad_input(input: String) -> TokenStream {\n-   |                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                         ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> proc_macro::TokenStream`\n \n-error: mismatched function-like proc macro signature\n+error: function-like proc macro has incorrect signature\n   --> $DIR/signature-proc-macro.rs:16:42\n    |\n LL | pub fn bad_output(input: TokenStream) -> String {\n-   |                                          ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                                          ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream) -> std::string::String`\n \n-error: mismatched function-like proc macro signature\n-  --> $DIR/signature-proc-macro.rs:22:41\n-   |\n-LL | pub fn bad_everything(input: String) -> String {\n-   |                                         ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n-   |\n-   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n-\n-error: mismatched function-like proc macro signature\n+error: function-like proc macro has incorrect signature\n   --> $DIR/signature-proc-macro.rs:22:30\n    |\n LL | pub fn bad_everything(input: String) -> String {\n-   |                              ^^^^^^ found std::string::String, expected type `proc_macro::TokenStream`\n+   |                              ^^^^^^ expected `proc_macro::TokenStream`, found `std::string::String`\n    |\n-   = note: function-like proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(std::string::String) -> std::string::String`\n \n-error: mismatched function-like proc macro signature\n-  --> $DIR/signature-proc-macro.rs:29:33\n+error: function-like proc macro has incorrect signature\n+  --> $DIR/signature-proc-macro.rs:28:36\n    |\n LL | pub fn too_many(a: TokenStream, b: TokenStream, c: String) -> TokenStream {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ found unexpected arguments\n+   |                                    ^^^^^^^^^^^ incorrect number of function parameters\n+   |\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `fn(proc_macro::TokenStream, proc_macro::TokenStream, std::string::String) -> proc_macro::TokenStream`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "7b4982a6178f903ae86417f13cf0bd34efcda1dd", "filename": "tests/ui/proc-macro/signature.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature.rs?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -8,10 +8,6 @@ extern crate proc_macro;\n \n #[proc_macro_derive(A)]\n pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-    //~^ ERROR: mismatched derive proc macro signature\n-    //~| mismatched derive proc macro signature\n-    //~| mismatched derive proc macro signature\n-    //~| proc macro functions may not be `extern\n-    //~| proc macro functions may not be `unsafe\n+    //~^ ERROR: derive proc macro has incorrect signature\n     loop {}\n }"}, {"sha": "ba5c8c1571e5896542906e1cb591ce6db93e822b", "filename": "tests/ui/proc-macro/signature.stderr", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/tests%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fsignature.stderr?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -1,36 +1,11 @@\n-error: proc macro functions may not be `extern \"C\"`\n+error: derive proc macro has incorrect signature\n   --> $DIR/signature.rs:10:1\n    |\n LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: proc macro functions may not be `unsafe`\n-  --> $DIR/signature.rs:10:1\n-   |\n-LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: mismatched derive proc macro signature\n-  --> $DIR/signature.rs:10:49\n-   |\n-LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-   |                                                 ^^^ found u32, expected type `proc_macro::TokenStream`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected normal fn, found unsafe fn\n    |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n-\n-error: mismatched derive proc macro signature\n-  --> $DIR/signature.rs:10:33\n-   |\n-LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-   |                                 ^^^ found i32, expected type `proc_macro::TokenStream`\n-   |\n-   = note: derive proc macros must have a signature of `fn(TokenStream) -> TokenStream`\n-\n-error: mismatched derive proc macro signature\n-  --> $DIR/signature.rs:10:38\n-   |\n-LL | pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n-   |                                      ^^^^^^ found unexpected argument\n+   = note: expected signature `fn(proc_macro::TokenStream) -> proc_macro::TokenStream`\n+              found signature `unsafe extern \"C\" fn(i32, u32) -> u32`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n "}, {"sha": "9ffe2e72cabeaf8d7410e4cbf1a8ca58010bd312", "filename": "triagebot.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a167cbddac2b9f9bb6fde0cf22473115958a8358/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a167cbddac2b9f9bb6fde0cf22473115958a8358/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=a167cbddac2b9f9bb6fde0cf22473115958a8358", "patch": "@@ -492,7 +492,6 @@ compiler-team = [\n     \"@oli-obk\",\n     \"@lcnr\",\n     \"@wesleywiser\",\n-    \"@michaelwoerister\",\n ]\n compiler-team-contributors = [\n     \"@compiler-errors\","}]}