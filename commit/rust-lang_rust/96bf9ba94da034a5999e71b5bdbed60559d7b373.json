{"sha": "96bf9ba94da034a5999e71b5bdbed60559d7b373", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YmY5YmE5NGRhMDM0YTU5OTllNzFiNWJkYmVkNjA1NTlkN2IzNzM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-08T15:19:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-08T15:19:48Z"}, "message": "Rollup merge of #39512 - oconnor663:try_wait, r=alexcrichton\n\nmake Child::try_wait return io::Result<Option<ExitStatus>>\n\nThis is much nicer for callers who want to short-circuit real I/O errors\nwith `?`, because they can write this\n\n    if let Some(status) = foo.try_wait()? {\n        ...\n    } else {\n        ...\n    }\n\ninstead of this\n\n    match foo.try_wait() {\n        Ok(status) => {\n            ...\n        }\n        Err(err) if err.kind() == io::ErrorKind::WouldBlock => {\n            ...\n        }\n        Err(err) => return Err(err),\n    }\n\nThe original design of `try_wait` was patterned after the `Read` and\n`Write` traits, which support both blocking and non-blocking\nimplementations in a single API. But since `try_wait` is never blocking,\nit makes sense to optimize for the non-blocking case.\n\nTracking issue: https://github.com/rust-lang/rust/issues/38903", "tree": {"sha": "c3e92f8d296bee5fc0a732d5f20a4c10fab8026c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3e92f8d296bee5fc0a732d5f20a4c10fab8026c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96bf9ba94da034a5999e71b5bdbed60559d7b373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96bf9ba94da034a5999e71b5bdbed60559d7b373", "html_url": "https://github.com/rust-lang/rust/commit/96bf9ba94da034a5999e71b5bdbed60559d7b373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96bf9ba94da034a5999e71b5bdbed60559d7b373/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f69259ecf8cc5577cd24065f9a5a6498cfff77db", "url": "https://api.github.com/repos/rust-lang/rust/commits/f69259ecf8cc5577cd24065f9a5a6498cfff77db", "html_url": "https://github.com/rust-lang/rust/commit/f69259ecf8cc5577cd24065f9a5a6498cfff77db"}, {"sha": "2a345bbcc1e6332241883f784896ea93d2a7ccb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a345bbcc1e6332241883f784896ea93d2a7ccb3", "html_url": "https://github.com/rust-lang/rust/commit/2a345bbcc1e6332241883f784896ea93d2a7ccb3"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "4ff35738b50fbd085657154c517563fbab6e991c", "filename": "src/libstd/process.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=96bf9ba94da034a5999e71b5bdbed60559d7b373", "patch": "@@ -844,9 +844,9 @@ impl Child {\n     /// guaranteed to repeatedly return a successful exit status so long as the\n     /// child has already exited.\n     ///\n-    /// If the child has exited, then `Ok(status)` is returned. If the exit\n-    /// status is not available at this time then an error is returned with the\n-    /// error kind `WouldBlock`. If an error occurs, then that error is returned.\n+    /// If the child has exited, then `Ok(Some(status))` is returned. If the\n+    /// exit status is not available at this time then `Ok(None)` is returned.\n+    /// If an error occurs, then that error is returned.\n     ///\n     /// Note that unlike `wait`, this function will not attempt to drop stdin.\n     ///\n@@ -857,14 +857,13 @@ impl Child {\n     /// ```no_run\n     /// #![feature(process_try_wait)]\n     ///\n-    /// use std::io;\n     /// use std::process::Command;\n     ///\n     /// let mut child = Command::new(\"ls\").spawn().unwrap();\n     ///\n     /// match child.try_wait() {\n-    ///     Ok(status) => println!(\"exited with: {}\", status),\n-    ///     Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n+    ///     Ok(Some(status)) => println!(\"exited with: {}\", status),\n+    ///     Ok(None) => {\n     ///         println!(\"status not ready yet, let's really wait\");\n     ///         let res = child.wait();\n     ///         println!(\"result: {:?}\", res);\n@@ -873,8 +872,8 @@ impl Child {\n     /// }\n     /// ```\n     #[unstable(feature = \"process_try_wait\", issue = \"38903\")]\n-    pub fn try_wait(&mut self) -> io::Result<ExitStatus> {\n-        self.handle.try_wait().map(ExitStatus)\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n+        Ok(self.handle.try_wait()?.map(ExitStatus))\n     }\n \n     /// Simultaneously waits for the child to exit and collect all remaining"}, {"sha": "60dc03fcf47e2aa7b5f0fed92d54aa493cc2d4e5", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=96bf9ba94da034a5999e71b5bdbed60559d7b373", "patch": "@@ -502,17 +502,17 @@ impl Process {\n         Ok(ExitStatus(status as i32))\n     }\n \n-    pub fn try_wait(&mut self) -> io::Result<ExitStatus> {\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n         if let Some(status) = self.status {\n-            return Ok(status)\n+            return Ok(Some(status))\n         }\n         let mut status = 0;\n         let pid = cvt(syscall::waitpid(self.pid, &mut status, syscall::WNOHANG))?;\n         if pid == 0 {\n-            Err(io::Error::from_raw_os_error(syscall::EWOULDBLOCK))\n+            Ok(None)\n         } else {\n             self.status = Some(ExitStatus(status as i32));\n-            Ok(ExitStatus(status as i32))\n+            Ok(Some(ExitStatus(status as i32)))\n         }\n     }\n }"}, {"sha": "0bb2e0c1a83d4469a534469b83ef8c363a08d901", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=96bf9ba94da034a5999e71b5bdbed60559d7b373", "patch": "@@ -165,7 +165,7 @@ impl Process {\n         Ok(ExitStatus::new(proc_info.rec.return_code))\n     }\n \n-    pub fn try_wait(&mut self) -> io::Result<ExitStatus> {\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n         use default::Default;\n         use sys::process::magenta::*;\n \n@@ -179,7 +179,7 @@ impl Process {\n             match status {\n                 0 => { }, // Success\n                 x if x == ERR_TIMED_OUT => {\n-                    return Err(io::Error::from(io::ErrorKind::WouldBlock));\n+                    return Ok(None);\n                 },\n                 _ => { panic!(\"Failed to wait on process handle: {}\", status); },\n             }\n@@ -192,7 +192,7 @@ impl Process {\n             return Err(io::Error::new(io::ErrorKind::InvalidData,\n                                       \"Failed to get exit status of process\"));\n         }\n-        Ok(ExitStatus::new(proc_info.rec.return_code))\n+        Ok(Some(ExitStatus::new(proc_info.rec.return_code)))\n     }\n }\n "}, {"sha": "bbc987209e300edf7c9ebde5a1cbf2f02f13b211", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=96bf9ba94da034a5999e71b5bdbed60559d7b373", "patch": "@@ -249,19 +249,19 @@ impl Process {\n         Ok(ExitStatus::new(status))\n     }\n \n-    pub fn try_wait(&mut self) -> io::Result<ExitStatus> {\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n         if let Some(status) = self.status {\n-            return Ok(status)\n+            return Ok(Some(status))\n         }\n         let mut status = 0 as c_int;\n         let pid = cvt(unsafe {\n             libc::waitpid(self.pid, &mut status, libc::WNOHANG)\n         })?;\n         if pid == 0 {\n-            Err(io::Error::from_raw_os_error(libc::EWOULDBLOCK))\n+            Ok(None)\n         } else {\n             self.status = Some(ExitStatus::new(status));\n-            Ok(ExitStatus::new(status))\n+            Ok(Some(ExitStatus::new(status)))\n         }\n     }\n }"}, {"sha": "1afb3728c9d72e7d00d20a153631a312b72302e6", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=96bf9ba94da034a5999e71b5bdbed60559d7b373", "patch": "@@ -340,18 +340,18 @@ impl Process {\n         }\n     }\n \n-    pub fn try_wait(&mut self) -> io::Result<ExitStatus> {\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n         unsafe {\n             match c::WaitForSingleObject(self.handle.raw(), 0) {\n                 c::WAIT_OBJECT_0 => {}\n                 c::WAIT_TIMEOUT => {\n-                    return Err(io::Error::from_raw_os_error(c::WSAEWOULDBLOCK))\n+                    return Ok(None);\n                 }\n                 _ => return Err(io::Error::last_os_error()),\n             }\n             let mut status = 0;\n             cvt(c::GetExitCodeProcess(self.handle.raw(), &mut status))?;\n-            Ok(ExitStatus(status))\n+            Ok(Some(ExitStatus(status)))\n         }\n     }\n "}, {"sha": "be87b7b3c87e42fbd50cd4905bc39d9bd9af7a3a", "filename": "src/test/run-pass/try-wait.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Ftest%2Frun-pass%2Ftry-wait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bf9ba94da034a5999e71b5bdbed60559d7b373/src%2Ftest%2Frun-pass%2Ftry-wait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-wait.rs?ref=96bf9ba94da034a5999e71b5bdbed60559d7b373", "patch": "@@ -13,7 +13,6 @@\n #![feature(process_try_wait)]\n \n use std::env;\n-use std::io;\n use std::process::Command;\n use std::thread;\n use std::time::Duration;\n@@ -32,17 +31,17 @@ fn main() {\n                          .arg(\"sleep\")\n                          .spawn()\n                          .unwrap();\n-    let err = me.try_wait().unwrap_err();\n-    assert_eq!(err.kind(), io::ErrorKind::WouldBlock);\n-    let err = me.try_wait().unwrap_err();\n-    assert_eq!(err.kind(), io::ErrorKind::WouldBlock);\n+    let maybe_status = me.try_wait().unwrap();\n+    assert!(maybe_status.is_none());\n+    let maybe_status = me.try_wait().unwrap();\n+    assert!(maybe_status.is_none());\n \n     me.kill().unwrap();\n     me.wait().unwrap();\n \n-    let status = me.try_wait().unwrap();\n+    let status = me.try_wait().unwrap().unwrap();\n     assert!(!status.success());\n-    let status = me.try_wait().unwrap();\n+    let status = me.try_wait().unwrap().unwrap();\n     assert!(!status.success());\n \n     let mut me = Command::new(env::current_exe().unwrap())\n@@ -51,17 +50,17 @@ fn main() {\n                          .unwrap();\n     loop {\n         match me.try_wait() {\n-            Ok(res) => {\n+            Ok(Some(res)) => {\n                 assert!(res.success());\n                 break\n             }\n-            Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n+            Ok(None) => {\n                 thread::sleep(Duration::from_millis(1));\n             }\n             Err(e) => panic!(\"error in try_wait: {}\", e),\n         }\n     }\n \n-    let status = me.try_wait().unwrap();\n+    let status = me.try_wait().unwrap().unwrap();\n     assert!(status.success());\n }"}]}