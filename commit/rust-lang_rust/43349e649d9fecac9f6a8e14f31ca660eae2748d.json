{"sha": "43349e649d9fecac9f6a8e14f31ca660eae2748d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMzQ5ZTY0OWQ5ZmVjYWM5ZjZhOGUxNGYzMWNhNjYwZWFlMjc0OGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-05-11T14:57:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-11T14:57:45Z"}, "message": "Upgrade some comments to doc comments", "tree": {"sha": "2a0435fa3184d738271e6dfe9a45bd4c088c941e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a0435fa3184d738271e6dfe9a45bd4c088c941e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43349e649d9fecac9f6a8e14f31ca660eae2748d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43349e649d9fecac9f6a8e14f31ca660eae2748d", "html_url": "https://github.com/rust-lang/rust/commit/43349e649d9fecac9f6a8e14f31ca660eae2748d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43349e649d9fecac9f6a8e14f31ca660eae2748d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb6f845f33d9ddbca34c7ae26e3a24cadf3c1123", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6f845f33d9ddbca34c7ae26e3a24cadf3c1123", "html_url": "https://github.com/rust-lang/rust/commit/fb6f845f33d9ddbca34c7ae26e3a24cadf3c1123"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "89960b0e4f678fdd32e3252ad4adeda67b4ab6e7", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/43349e649d9fecac9f6a8e14f31ca660eae2748d/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43349e649d9fecac9f6a8e14f31ca660eae2748d/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=43349e649d9fecac9f6a8e14f31ca660eae2748d", "patch": "@@ -67,8 +67,8 @@ pub enum BoundRegion {\n     /// Fresh bound identifiers created during GLB computations.\n     BrFresh(u32),\n \n-    // Anonymous region for the implicit env pointer parameter\n-    // to a closure\n+    /// Anonymous region for the implicit env pointer parameter\n+    /// to a closure\n     BrEnv,\n }\n \n@@ -95,8 +95,8 @@ pub struct Issue32330 {\n     pub region_name: ast::Name,\n }\n \n-// NB: If you change this, you'll probably want to change the corresponding\n-// AST structure in libsyntax/ast.rs as well.\n+/// NB: If you change this, you'll probably want to change the corresponding\n+/// AST structure in libsyntax/ast.rs as well.\n #[derive(Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum TypeVariants<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n@@ -283,11 +283,11 @@ impl<'a, 'gcx, 'acx, 'tcx> ClosureSubsts<'tcx> {\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum ExistentialPredicate<'tcx> {\n-    // e.g. Iterator\n+    /// e.g. Iterator\n     Trait(ExistentialTraitRef<'tcx>),\n-    // e.g. Iterator::Item = T\n+    /// e.g. Iterator::Item = T\n     Projection(ExistentialProjection<'tcx>),\n-    // e.g. Send\n+    /// e.g. Send\n     AutoTrait(DefId),\n }\n \n@@ -683,8 +683,8 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, Copy)]\n pub struct DebruijnIndex {\n-    // We maintain the invariant that this is never 0. So 1 indicates\n-    // the innermost binder. To ensure this, create with `DebruijnIndex::new`.\n+    /// We maintain the invariant that this is never 0. So 1 indicates\n+    /// the innermost binder. To ensure this, create with `DebruijnIndex::new`.\n     pub depth: u32,\n }\n \n@@ -908,7 +908,7 @@ impl DebruijnIndex {\n     }\n }\n \n-// Region utilities\n+/// Region utilities\n impl<'tcx> RegionKind<'tcx> {\n     pub fn is_bound(&self) -> bool {\n         match *self {\n@@ -972,7 +972,7 @@ impl<'tcx> RegionKind<'tcx> {\n     }\n }\n \n-// Type utilities\n+/// Type utilities\n impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     pub fn as_opt_param_ty(&self) -> Option<ty::ParamTy> {\n         match self.sty {\n@@ -995,8 +995,8 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    // Test whether this is a `()` which was produced by defaulting a\n-    // diverging type variable with feature(never_type) disabled.\n+    /// Test whether this is a `()` which was produced by defaulting a\n+    /// diverging type variable with feature(never_type) disabled.\n     pub fn is_defaulted_unit(&self) -> bool {\n         match self.sty {\n             TyTuple(_, true) => true,\n@@ -1171,18 +1171,17 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    /// panics if called on any type other than `Box<T>`\n     pub fn boxed_ty(&self) -> Ty<'tcx> {\n         match self.sty {\n             TyAdt(def, substs) if def.is_box() => substs.type_at(0),\n             _ => bug!(\"`boxed_ty` is called on non-box type {:?}\", self),\n         }\n     }\n \n-    /*\n-     A scalar type is one that denotes an atomic datum, with no sub-components.\n-     (A TyRawPtr is scalar because it represents a non-managed pointer, so its\n-     contents are abstract to rustc.)\n-    */\n+    /// A scalar type is one that denotes an atomic datum, with no sub-components.\n+    /// (A TyRawPtr is scalar because it represents a non-managed pointer, so its\n+    /// contents are abstract to rustc.)\n     pub fn is_scalar(&self) -> bool {\n         match self.sty {\n             TyBool | TyChar | TyInt(_) | TyFloat(_) | TyUint(_) |\n@@ -1278,10 +1277,10 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    // Returns the type and mutability of *ty.\n-    //\n-    // The parameter `explicit` indicates if this is an *explicit* dereference.\n-    // Some types---notably unsafe ptrs---can only be dereferenced explicitly.\n+    /// Returns the type and mutability of *ty.\n+    ///\n+    /// The parameter `explicit` indicates if this is an *explicit* dereference.\n+    /// Some types---notably unsafe ptrs---can only be dereferenced explicitly.\n     pub fn builtin_deref(&self, explicit: bool, pref: ty::LvaluePreference)\n         -> Option<TypeAndMut<'tcx>>\n     {\n@@ -1302,7 +1301,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    // Returns the type of ty[i]\n+    /// Returns the type of ty[i]\n     pub fn builtin_index(&self) -> Option<Ty<'tcx>> {\n         match self.sty {\n             TyArray(ty, _) | TySlice(ty) => Some(ty),\n@@ -1317,7 +1316,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    // Type accessors for substructures of types\n+    /// Type accessors for substructures of types\n     pub fn fn_args(&self) -> ty::Binder<&'tcx [Ty<'tcx>]> {\n         self.fn_sig().inputs()\n     }"}]}