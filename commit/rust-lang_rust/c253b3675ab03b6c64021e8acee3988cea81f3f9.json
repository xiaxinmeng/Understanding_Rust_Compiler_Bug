{"sha": "c253b3675ab03b6c64021e8acee3988cea81f3f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNTNiMzY3NWFiMDNiNmM2NDAyMWU4YWNlZTM5ODhjZWE4MWYzZjk=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-09T23:41:13Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-11T17:32:42Z"}, "message": "add Macro Exterminator\n\nthe Macro Exterminator ensures that there are no macro invocations in\nan AST. This should help make later passes confident that there aren't\nhidden items, methods, expressions, etc.", "tree": {"sha": "670d9923537f7dde804e639f56a4478620b8a727", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/670d9923537f7dde804e639f56a4478620b8a727"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c253b3675ab03b6c64021e8acee3988cea81f3f9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c253b3675ab03b6c64021e8acee3988cea81f3f9", "html_url": "https://github.com/rust-lang/rust/commit/c253b3675ab03b6c64021e8acee3988cea81f3f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c253b3675ab03b6c64021e8acee3988cea81f3f9/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53642eed801d157613de0998cdcf0a3da8c36cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/53642eed801d157613de0998cdcf0a3da8c36cb3", "html_url": "https://github.com/rust-lang/rust/commit/53642eed801d157613de0998cdcf0a3da8c36cb3"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "ad83e2cfe173a6702936b9642525c15765ea5421", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c253b3675ab03b6c64021e8acee3988cea81f3f9/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c253b3675ab03b6c64021e8acee3988cea81f3f9/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c253b3675ab03b6c64021e8acee3988cea81f3f9", "patch": "@@ -259,6 +259,8 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n     );\n \n+    // JBC: make CFG processing part of expansion to avoid this problem:\n+\n     // strip again, in case expansion added anything with a #[cfg].\n     krate = time(time_passes, \"configuration 2\", krate, |krate|\n                  front::config::strip_unconfigured_items(krate));\n@@ -279,6 +281,9 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         krate.encode(&mut json).unwrap();\n     }\n \n+    time(time_passes, \"checking that all macro invocations are gone\", &krate, |krate|\n+         syntax::ext::expand::check_for_macros(&sess.parse_sess, krate));\n+\n     Some((krate, map))\n }\n \n@@ -291,14 +296,14 @@ pub struct CrateAnalysis {\n     pub name: String,\n }\n \n+\n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes(sess: Session,\n                                    krate: &ast::Crate,\n                                    ast_map: syntax::ast_map::Map,\n                                    name: String) -> CrateAnalysis {\n-\n     let time_passes = sess.time_passes();\n \n     time(time_passes, \"external crate/lib resolution\", (), |_|"}, {"sha": "c82364fb17eae5357fac33f1c64af192f8f9e5e0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c253b3675ab03b6c64021e8acee3988cea81f3f9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c253b3675ab03b6c64021e8acee3988cea81f3f9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c253b3675ab03b6c64021e8acee3988cea81f3f9", "patch": "@@ -1151,6 +1151,25 @@ fn original_span(cx: &ExtCtxt) -> Gc<codemap::ExpnInfo> {\n     return einfo;\n }\n \n+/// Check that there are no macro invocations left in the AST:\n+pub fn check_for_macros(sess: &parse::ParseSess, krate: &ast::Crate) {\n+    visit::walk_crate(&mut MacroExterminator{sess:sess}, krate, ());\n+}\n+\n+/// A visitor that ensures that no macro invocations remain in an AST.\n+struct MacroExterminator<'a>{\n+    sess: &'a parse::ParseSess\n+}\n+\n+impl<'a> visit::Visitor<()> for MacroExterminator<'a> {\n+    fn visit_mac(&mut self, macro: &ast::Mac, _:()) {\n+        self.sess.span_diagnostic.span_bug(macro.span,\n+                                           \"macro exterminator: expected AST \\\n+                                           with no macro invocations\");\n+    }\n+}\n+\n+\n #[cfg(test)]\n mod test {\n     use super::{pattern_bindings, expand_crate, contains_macro_escape};"}]}