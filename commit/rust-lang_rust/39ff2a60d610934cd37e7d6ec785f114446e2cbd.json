{"sha": "39ff2a60d610934cd37e7d6ec785f114446e2cbd", "node_id": "C_kwDOAAsO6NoAKDM5ZmYyYTYwZDYxMDkzNGNkMzdlN2Q2ZWM3ODVmMTE0NDQ2ZTJjYmQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-15T10:15:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-15T10:15:31Z"}, "message": "Rollup merge of #102884 - petrochenkov:liferib, r=cjgillot\n\nresolve: Some cleanup, asserts and tests for lifetime ribs\n\nFollow up to https://github.com/rust-lang/rust/pull/98279 and friends.\nr? ``@cjgillot``", "tree": {"sha": "d9fbb622df57fb5c95f4f6683a1cd0aecdd22be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9fbb622df57fb5c95f4f6683a1cd0aecdd22be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39ff2a60d610934cd37e7d6ec785f114446e2cbd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjSohDCRBK7hj4Ov3rIwAAkRsIABgeJ0YdrtoLjMa1to45JPLg\nJDB/PubYYeQ1nVF9e/NWnm3cZMR8m/miCKgWY06FyDujXfenbYs3pmEdwyZlKRnR\nIx4D/VmH0b2U3or1YbUFZJKqftgvs0+AA82ZqhF4B5gZvTDN2HE668zC8qjuNbic\n6ulwJSHtngBofH8tLqCuQAU5AORLZWy6760XP7s1rJLSge5ChJseGvh36IO8jibY\nm6lhzeTAHcwy6NC4ckd8VxF3mQnbVr5/2U9fepgBGeukO5gcz8hXZ9lrCZ9ufQtB\nWScS/ltS8BQ2ahThwpil9TV2FcLRflji2/0bewuHpWNNQ29JLHtzqaNomtbIGzM=\n=LlzX\n-----END PGP SIGNATURE-----\n", "payload": "tree d9fbb622df57fb5c95f4f6683a1cd0aecdd22be7\nparent cbe5e7bc623f498426fe27f717a035fcbaebee20\nparent f6341065912ff1b284e54acfec96b000dee81a34\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665828931 +0530\ncommitter GitHub <noreply@github.com> 1665828931 +0530\n\nRollup merge of #102884 - petrochenkov:liferib, r=cjgillot\n\nresolve: Some cleanup, asserts and tests for lifetime ribs\n\nFollow up to https://github.com/rust-lang/rust/pull/98279 and friends.\nr? ``@cjgillot``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39ff2a60d610934cd37e7d6ec785f114446e2cbd", "html_url": "https://github.com/rust-lang/rust/commit/39ff2a60d610934cd37e7d6ec785f114446e2cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39ff2a60d610934cd37e7d6ec785f114446e2cbd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe5e7bc623f498426fe27f717a035fcbaebee20", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe5e7bc623f498426fe27f717a035fcbaebee20", "html_url": "https://github.com/rust-lang/rust/commit/cbe5e7bc623f498426fe27f717a035fcbaebee20"}, {"sha": "f6341065912ff1b284e54acfec96b000dee81a34", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6341065912ff1b284e54acfec96b000dee81a34", "html_url": "https://github.com/rust-lang/rust/commit/f6341065912ff1b284e54acfec96b000dee81a34"}], "stats": {"total": 231, "additions": 166, "deletions": 65}, "files": [{"sha": "77ba7a82672bcbbb48a7812ac88ffd3ec0cfa783", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 77, "deletions": 65, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/39ff2a60d610934cd37e7d6ec785f114446e2cbd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39ff2a60d610934cd37e7d6ec785f114446e2cbd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=39ff2a60d610934cd37e7d6ec785f114446e2cbd", "patch": "@@ -224,22 +224,14 @@ enum LifetimeUseSet {\n \n #[derive(Copy, Clone, Debug)]\n enum LifetimeRibKind {\n-    /// This rib acts as a barrier to forbid reference to lifetimes of a parent item.\n-    Item,\n-\n+    // -- Ribs introducing named lifetimes\n+    //\n     /// This rib declares generic parameters.\n+    /// Only for this kind the `LifetimeRib::bindings` field can be non-empty.\n     Generics { binder: NodeId, span: Span, kind: LifetimeBinderKind },\n \n-    /// FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n-    /// generics. We are disallowing this until we can decide on how we want to handle non-'static\n-    /// lifetimes in const generics. See issue #74052 for discussion.\n-    ConstGeneric,\n-\n-    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n-    /// This function will emit an error if `generic_const_exprs` is not enabled, the body identified by\n-    /// `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n-    AnonConst,\n-\n+    // -- Ribs introducing unnamed lifetimes\n+    //\n     /// Create a new anonymous lifetime parameter and reference it.\n     ///\n     /// If `report_in_path`, report an error when encountering lifetime elision in a path:\n@@ -256,16 +248,31 @@ enum LifetimeRibKind {\n     /// ```\n     AnonymousCreateParameter { binder: NodeId, report_in_path: bool },\n \n+    /// Replace all anonymous lifetimes by provided lifetime.\n+    Elided(LifetimeRes),\n+\n+    // -- Barrier ribs that stop lifetime lookup, or continue it but produce an error later.\n+    //\n     /// Give a hard error when either `&` or `'_` is written. Used to\n     /// rule out things like `where T: Foo<'_>`. Does not imply an\n     /// error on default object bounds (e.g., `Box<dyn Foo>`).\n     AnonymousReportError,\n \n-    /// Replace all anonymous lifetimes by provided lifetime.\n-    Elided(LifetimeRes),\n-\n     /// Signal we cannot find which should be the anonymous lifetime.\n     ElisionFailure,\n+\n+    /// FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n+    /// generics. We are disallowing this until we can decide on how we want to handle non-'static\n+    /// lifetimes in const generics. See issue #74052 for discussion.\n+    ConstGeneric,\n+\n+    /// Non-static lifetimes are prohibited in anonymous constants under `min_const_generics`.\n+    /// This function will emit an error if `generic_const_exprs` is not enabled, the body\n+    /// identified by `body_id` is an anonymous constant and `lifetime_ref` is non-static.\n+    AnonConst,\n+\n+    /// This rib acts as a barrier to forbid reference to lifetimes of a parent item.\n+    Item,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -748,35 +755,31 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) {\n         match foreign_item.kind {\n             ForeignItemKind::TyAlias(box TyAlias { ref generics, .. }) => {\n-                self.with_lifetime_rib(LifetimeRibKind::Item, |this| {\n-                    this.with_generic_param_rib(\n-                        &generics.params,\n-                        ItemRibKind(HasGenericParams::Yes(generics.span)),\n-                        LifetimeRibKind::Generics {\n-                            binder: foreign_item.id,\n-                            kind: LifetimeBinderKind::Item,\n-                            span: generics.span,\n-                        },\n-                        |this| visit::walk_foreign_item(this, foreign_item),\n-                    )\n-                });\n+                self.with_generic_param_rib(\n+                    &generics.params,\n+                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    LifetimeRibKind::Generics {\n+                        binder: foreign_item.id,\n+                        kind: LifetimeBinderKind::Item,\n+                        span: generics.span,\n+                    },\n+                    |this| visit::walk_foreign_item(this, foreign_item),\n+                );\n             }\n             ForeignItemKind::Fn(box Fn { ref generics, .. }) => {\n-                self.with_lifetime_rib(LifetimeRibKind::Item, |this| {\n-                    this.with_generic_param_rib(\n-                        &generics.params,\n-                        ItemRibKind(HasGenericParams::Yes(generics.span)),\n-                        LifetimeRibKind::Generics {\n-                            binder: foreign_item.id,\n-                            kind: LifetimeBinderKind::Function,\n-                            span: generics.span,\n-                        },\n-                        |this| visit::walk_foreign_item(this, foreign_item),\n-                    )\n-                });\n+                self.with_generic_param_rib(\n+                    &generics.params,\n+                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    LifetimeRibKind::Generics {\n+                        binder: foreign_item.id,\n+                        kind: LifetimeBinderKind::Function,\n+                        span: generics.span,\n+                    },\n+                    |this| visit::walk_foreign_item(this, foreign_item),\n+                );\n             }\n             ForeignItemKind::Static(..) => {\n-                self.with_item_rib(|this| {\n+                self.with_static_rib(|this| {\n                     visit::walk_foreign_item(this, foreign_item);\n                 });\n             }\n@@ -1391,9 +1394,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             return self.resolve_anonymous_lifetime(lifetime, false);\n         }\n \n-        let mut indices = (0..self.lifetime_ribs.len()).rev();\n-        for i in &mut indices {\n-            let rib = &self.lifetime_ribs[i];\n+        let mut lifetime_rib_iter = self.lifetime_ribs.iter().rev();\n+        while let Some(rib) = lifetime_rib_iter.next() {\n             let normalized_ident = ident.normalize_to_macros_2_0();\n             if let Some(&(_, res)) = rib.bindings.get(&normalized_ident) {\n                 self.record_lifetime_res(lifetime.id, res, LifetimeElisionCandidate::Named);\n@@ -1423,9 +1425,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                     } else {\n                                         LifetimeUseSet::Many\n                                     }),\n-                                    LifetimeRibKind::Generics { .. }\n-                                    | LifetimeRibKind::ConstGeneric\n-                                    | LifetimeRibKind::AnonConst => None,\n+                                    LifetimeRibKind::Generics { .. } => None,\n+                                    LifetimeRibKind::ConstGeneric | LifetimeRibKind::AnonConst => {\n+                                        span_bug!(ident.span, \"unexpected rib kind: {:?}\", rib.kind)\n+                                    }\n                                 })\n                                 .unwrap_or(LifetimeUseSet::Many);\n                             debug!(?use_ctxt, ?use_set);\n@@ -1460,13 +1463,16 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     );\n                     return;\n                 }\n-                _ => {}\n+                LifetimeRibKind::AnonymousCreateParameter { .. }\n+                | LifetimeRibKind::Elided(_)\n+                | LifetimeRibKind::Generics { .. }\n+                | LifetimeRibKind::ElisionFailure\n+                | LifetimeRibKind::AnonymousReportError => {}\n             }\n         }\n \n         let mut outer_res = None;\n-        for i in indices {\n-            let rib = &self.lifetime_ribs[i];\n+        for rib in lifetime_rib_iter {\n             let normalized_ident = ident.normalize_to_macros_2_0();\n             if let Some((&outer, _)) = rib.bindings.get_key_value(&normalized_ident) {\n                 outer_res = Some(outer);\n@@ -1493,8 +1499,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             count: 1,\n         };\n         let elision_candidate = LifetimeElisionCandidate::Missing(missing_lifetime);\n-        for i in (0..self.lifetime_ribs.len()).rev() {\n-            let rib = &mut self.lifetime_ribs[i];\n+        for rib in self.lifetime_ribs.iter().rev() {\n             debug!(?rib.kind);\n             match rib.kind {\n                 LifetimeRibKind::AnonymousCreateParameter { binder, .. } => {\n@@ -1534,9 +1539,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     return;\n                 }\n                 LifetimeRibKind::Item => break,\n-                LifetimeRibKind::Generics { .. }\n-                | LifetimeRibKind::ConstGeneric\n-                | LifetimeRibKind::AnonConst => {}\n+                LifetimeRibKind::Generics { .. } | LifetimeRibKind::ConstGeneric => {}\n+                LifetimeRibKind::AnonConst => {\n+                    // There is always an `Elided(LifetimeRes::Static)` inside an `AnonConst`.\n+                    span_bug!(lifetime.ident.span, \"unexpected rib kind: {:?}\", rib.kind)\n+                }\n             }\n         }\n         self.record_lifetime_res(lifetime.id, LifetimeRes::Error, elision_candidate);\n@@ -1751,9 +1758,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         self.report_missing_lifetime_specifiers(vec![missing_lifetime], None);\n                         break;\n                     }\n-                    LifetimeRibKind::Generics { .. }\n-                    | LifetimeRibKind::ConstGeneric\n-                    | LifetimeRibKind::AnonConst => {}\n+                    LifetimeRibKind::Generics { .. } | LifetimeRibKind::ConstGeneric => {}\n+                    LifetimeRibKind::AnonConst => {\n+                        // There is always an `Elided(LifetimeRes::Static)` inside an `AnonConst`.\n+                        span_bug!(elided_lifetime_span, \"unexpected rib kind: {:?}\", rib.kind)\n+                    }\n                 }\n             }\n \n@@ -2204,7 +2213,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n \n             ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(_, ref ty, ref expr) => {\n-                self.with_item_rib(|this| {\n+                self.with_static_rib(|this| {\n                     this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n                         this.visit_ty(ty);\n                     });\n@@ -2399,11 +2408,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.label_ribs.pop();\n     }\n \n-    fn with_item_rib(&mut self, f: impl FnOnce(&mut Self)) {\n+    fn with_static_rib(&mut self, f: impl FnOnce(&mut Self)) {\n         let kind = ItemRibKind(HasGenericParams::No);\n-        self.with_lifetime_rib(LifetimeRibKind::Item, |this| {\n-            this.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n-        })\n+        self.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n     }\n \n     // HACK(min_const_generics,const_evaluatable_unchecked): We\n@@ -3938,7 +3945,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         fn_id: NodeId,\n         async_node_id: Option<(NodeId, Span)>,\n     ) {\n-        if let Some((async_node_id, _)) = async_node_id {\n+        if let Some((async_node_id, span)) = async_node_id {\n             let mut extra_lifetime_params =\n                 self.r.extra_lifetime_params_map.get(&fn_id).cloned().unwrap_or_default();\n             for rib in self.lifetime_ribs.iter().rev() {\n@@ -3952,7 +3959,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             extra_lifetime_params.extend(earlier_fresh);\n                         }\n                     }\n-                    _ => {}\n+                    LifetimeRibKind::Generics { .. } => {}\n+                    _ => {\n+                        // We are in a function definition. We should only find `Generics`\n+                        // and `AnonymousCreateParameter` inside the innermost `Item`.\n+                        span_bug!(span, \"unexpected rib kind: {:?}\", rib.kind)\n+                    }\n                 }\n             }\n             self.r.extra_lifetime_params_map.insert(async_node_id, extra_lifetime_params);"}, {"sha": "b4c86aab863c8963edb342e85f86a04b55f606be", "filename": "src/test/ui/lifetimes/unusual-rib-combinations.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/39ff2a60d610934cd37e7d6ec785f114446e2cbd/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39ff2a60d610934cd37e7d6ec785f114446e2cbd/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.rs?ref=39ff2a60d610934cd37e7d6ec785f114446e2cbd", "patch": "@@ -0,0 +1,28 @@\n+#![feature(inline_const)]\n+\n+struct S<'a>(&'a u8);\n+fn foo() {}\n+\n+// Paren generic args in AnonConst\n+fn a() -> [u8; foo::()] {\n+//~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+//~| ERROR mismatched types\n+    panic!()\n+}\n+\n+// Paren generic args in ConstGeneric\n+fn b<const C: u8()>() {}\n+//~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+\n+// Paren generic args in AnonymousReportError\n+fn c<T = u8()>() {}\n+//~^ ERROR parenthesized type parameters may only be used with a `Fn` trait\n+//~| ERROR defaults for type parameters are only allowed in\n+//~| WARN this was previously accepted\n+\n+// Elided lifetime in path in ConstGeneric\n+fn d<const C: S>() {}\n+//~^ ERROR missing lifetime specifier\n+//~| ERROR `S<'static>` is forbidden as the type of a const generic parameter\n+\n+fn main() {}"}, {"sha": "6d7b42506982ce0a53a4e840b5d28a4814c07d65", "filename": "src/test/ui/lifetimes/unusual-rib-combinations.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/39ff2a60d610934cd37e7d6ec785f114446e2cbd/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39ff2a60d610934cd37e7d6ec785f114446e2cbd/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Funusual-rib-combinations.stderr?ref=39ff2a60d610934cd37e7d6ec785f114446e2cbd", "patch": "@@ -0,0 +1,61 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/unusual-rib-combinations.rs:24:15\n+   |\n+LL | fn d<const C: S>() {}\n+   |               ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn d<'a, const C: S<'a>>() {}\n+   |      +++           ++++\n+\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/unusual-rib-combinations.rs:7:16\n+   |\n+LL | fn a() -> [u8; foo::()] {\n+   |                ^^^^^^^ only `Fn` traits may use parentheses\n+\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/unusual-rib-combinations.rs:14:15\n+   |\n+LL | fn b<const C: u8()>() {}\n+   |               ^^^^ only `Fn` traits may use parentheses\n+\n+error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n+  --> $DIR/unusual-rib-combinations.rs:18:10\n+   |\n+LL | fn c<T = u8()>() {}\n+   |          ^^^^ only `Fn` traits may use parentheses\n+\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/unusual-rib-combinations.rs:18:6\n+   |\n+LL | fn c<T = u8()>() {}\n+   |      ^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n+   = note: `#[deny(invalid_type_param_default)]` on by default\n+\n+error[E0308]: mismatched types\n+  --> $DIR/unusual-rib-combinations.rs:7:16\n+   |\n+LL | fn a() -> [u8; foo::()] {\n+   |                ^^^^^^^ expected `usize`, found fn item\n+   |\n+   = note: expected type `usize`\n+           found fn item `fn() {foo}`\n+\n+error: `S<'static>` is forbidden as the type of a const generic parameter\n+  --> $DIR/unusual-rib-combinations.rs:24:15\n+   |\n+LL | fn d<const C: S>() {}\n+   |               ^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0106, E0214, E0308.\n+For more information about an error, try `rustc --explain E0106`."}]}