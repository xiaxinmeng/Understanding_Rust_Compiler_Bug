{"sha": "0f58289b3d799e04aa2b0027c4a7ff571c7a7511", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNTgyODliM2Q3OTllMDRhYTJiMDAyN2M0YTdmZjU3MWM3YTc1MTE=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-20T15:25:43Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-09-20T16:32:07Z"}, "message": "fetch ERANGE value from libc", "tree": {"sha": "eba69541fb1968fadc8ee95e5cf206fe27b2244c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eba69541fb1968fadc8ee95e5cf206fe27b2244c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f58289b3d799e04aa2b0027c4a7ff571c7a7511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f58289b3d799e04aa2b0027c4a7ff571c7a7511", "html_url": "https://github.com/rust-lang/rust/commit/0f58289b3d799e04aa2b0027c4a7ff571c7a7511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f58289b3d799e04aa2b0027c4a7ff571c7a7511/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a6b5ff69580325e590d1062570be16c0a93f14", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a6b5ff69580325e590d1062570be16c0a93f14", "html_url": "https://github.com/rust-lang/rust/commit/c0a6b5ff69580325e590d1062570be16c0a93f14"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "784df0a50fb0cc7c6ec95c57d6ec014d87c0b382", "filename": "src/shims/env.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0f58289b3d799e04aa2b0027c4a7ff571c7a7511/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f58289b3d799e04aa2b0027c4a7ff571c7a7511/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=0f58289b3d799e04aa2b0027c4a7ff571c7a7511", "patch": "@@ -1,10 +1,10 @@\n use std::collections::HashMap;\n use std::env;\n \n-use rustc::ty::layout::{Size};\n-use rustc_mir::interpret::{Pointer, Memory};\n use crate::stacked_borrows::Tag;\n use crate::*;\n+use rustc::ty::layout::Size;\n+use rustc_mir::interpret::{Memory, Pointer};\n \n #[derive(Default)]\n pub struct EnvVars {\n@@ -24,7 +24,8 @@ impl EnvVars {\n         if ecx.machine.communicate {\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n-                    let var_ptr = alloc_env_var(name.as_bytes(), value.as_bytes(), ecx.memory_mut());\n+                    let var_ptr =\n+                        alloc_env_var(name.as_bytes(), value.as_bytes(), ecx.memory_mut());\n                     ecx.machine.env_vars.map.insert(name.into_bytes(), var_ptr);\n                 }\n             }\n@@ -46,17 +47,16 @@ fn alloc_env_var<'mir, 'tcx>(\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    fn getenv(\n-        &mut self,\n-        name_op: OpTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, Scalar<Tag>> {\n+    fn getenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n         let name = this.memory().read_c_str(name_ptr)?;\n         Ok(match this.machine.env_vars.map.get(name) {\n             // The offset is used to strip the \"{name}=\" part of the string.\n-            Some(var_ptr) => Scalar::Ptr(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?),\n+            Some(var_ptr) => {\n+                Scalar::Ptr(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?)\n+            }\n             None => Scalar::ptr_null(&*this.tcx),\n         })\n     }\n@@ -81,18 +81,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some((name, value)) = new {\n             let var_ptr = alloc_env_var(&name, &value, this.memory_mut());\n             if let Some(var) = this.machine.env_vars.map.insert(name.to_owned(), var_ptr) {\n-                this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                this.memory_mut()\n+                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n             Ok(0)\n         } else {\n             Ok(-1)\n         }\n     }\n \n-    fn unsetenv(\n-        &mut self,\n-        name_op: OpTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, i32> {\n+    fn unsetenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n         let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n@@ -105,7 +103,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         if let Some(old) = success {\n             if let Some(var) = old {\n-                this.memory_mut().deallocate(var, None, MiriMemoryKind::Env.into())?;\n+                this.memory_mut()\n+                    .deallocate(var, None, MiriMemoryKind::Env.into())?;\n             }\n             Ok(0)\n         } else {\n@@ -124,25 +123,30 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_unsup_format!(\"Function not available when isolation is enabled\")\n         }\n \n-        let tcx = &{this.tcx.tcx};\n+        let tcx = &{ this.tcx.tcx };\n \n         let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n         let size = this.read_scalar(size_op)?.to_usize(&*this.tcx)?;\n         // If we cannot get the current directory, we return null\n         // FIXME: Technically we have to set the `errno` global too\n         match env::current_dir() {\n-            Ok(cwd) =>{\n+            Ok(cwd) => {\n                 // It is not clear what happens with non-utf8 paths here\n                 let mut bytes = cwd.display().to_string().into_bytes();\n                 // If the buffer is smaller or equal than the path, we return null.\n                 if (bytes.len() as u64) < size {\n                     // We add a `/0` terminator\n                     bytes.push(0);\n                     // This is ok because the buffer is larger than the path with the null terminator.\n-                    this.memory_mut().get_mut(buf.alloc_id)?.write_bytes(tcx, buf, &bytes)?;\n-                    return Ok(Scalar::Ptr(buf))\n+                    this.memory_mut()\n+                        .get_mut(buf.alloc_id)?\n+                        .write_bytes(tcx, buf, &bytes)?;\n+                    return Ok(Scalar::Ptr(buf));\n                 }\n-                this.machine.last_error = 34; // ERANGE\n+                this.machine.last_error = this\n+                    .eval_path_scalar(&[\"libc\", \"ERANGE\"])?\n+                    .unwrap()\n+                    .to_u32()?;\n             }\n             Err(e) => this.machine.last_error = e.raw_os_error().unwrap() as u32,\n         }"}]}