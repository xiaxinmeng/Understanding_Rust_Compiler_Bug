{"sha": "90dcb5940049373c0eb5d1e42ae93ac9f4228811", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZGNiNTk0MDA0OTM3M2MwZWI1ZDFlNDJhZTkzYWM5ZjQyMjg4MTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-03T06:04:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-03T06:23:43Z"}, "message": "tutorial: Minor improvements to closures", "tree": {"sha": "f1324dcb897e41d3fffc87a72761b3703d22dce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1324dcb897e41d3fffc87a72761b3703d22dce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90dcb5940049373c0eb5d1e42ae93ac9f4228811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90dcb5940049373c0eb5d1e42ae93ac9f4228811", "html_url": "https://github.com/rust-lang/rust/commit/90dcb5940049373c0eb5d1e42ae93ac9f4228811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90dcb5940049373c0eb5d1e42ae93ac9f4228811/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ea8922b8ab8ce7f820869778950346a749ed757", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea8922b8ab8ce7f820869778950346a749ed757", "html_url": "https://github.com/rust-lang/rust/commit/2ea8922b8ab8ce7f820869778950346a749ed757"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "35dc58007fc6834073d271d44783d9c1a41db19b", "filename": "doc/tutorial.md", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/90dcb5940049373c0eb5d1e42ae93ac9f4228811/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/90dcb5940049373c0eb5d1e42ae93ac9f4228811/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=90dcb5940049373c0eb5d1e42ae93ac9f4228811", "patch": "@@ -497,8 +497,7 @@ let s = \"a\\\n \n Rust's set of operators contains very few surprises. Binary arithmetic\n is done with `*`, `/`, `%`, `+`, and `-` (multiply, divide, remainder,\n-plus, minus). `-` is also a unary prefix operator (there are no unary\n-postfix operators in Rust) that does negation.\n+plus, minus). `-` is also a unary prefix operator that does negation.\n \n Binary shifting is done with `>>` (shift right), and `<<` (shift\n left). Shift right is arithmetic if the value is signed and logical if\n@@ -909,8 +908,7 @@ returns it from a function, and then calls it:\n use std;\n \n fn mk_appender(suffix: str) -> fn@(str) -> str {\n-    let f = fn@(s: str) -> str { s + suffix };\n-    ret f;\n+    ret fn@(s: str) -> str { s + suffix };\n }\n \n fn main() {\n@@ -932,6 +930,15 @@ fn mk_appender(suffix: str) -> fn@(str) -> str {\n }\n ~~~~\n \n+### Unique closures\n+\n+Unique closures, written `fn~` in analogy to the `~` pointer type (see\n+next section), hold on to things that can safely be sent between\n+processes. They copy the values they close over, much like boxed\n+closures, but they also 'own' them\u2014meaning no other code can access\n+them. Unique closures are used in concurrent code, particularly\n+for spawning [tasks](#tasks).\n+\n ### Closure compatibility\n \n A nice property of Rust closures is that you can pass any kind of\n@@ -946,25 +953,17 @@ fn call_twice(f: fn()) { f(); f(); }\n call_twice(|| { \"I am an inferred stack closure\"; } );\n call_twice(fn&() { \"I am also a stack closure\"; } );\n call_twice(fn@() { \"I am a boxed closure\"; });\n+call_twice(fn~() { \"I am a unique closure\"; });\n fn bare_function() { \"I am a plain function\"; }\n call_twice(bare_function);\n ~~~~\n \n-### Unique closures\n-\n-Unique closures, written `fn~` in analogy to the `~` pointer type (see\n-next section), hold on to things that can safely be sent between\n-processes. They copy the values they close over, much like boxed\n-closures, but they also 'own' them\u2014meaning no other code can access\n-them. Unique closures are used in concurrent code, particularly\n-for spawning [tasks](#tasks).\n-\n ### Do syntax\n \n-Because closures in Rust are so versatile, they are used often, and in\n-particular, functions taking closures are used as control structures\n-in much the same way as `if` or `loop`. For example, this one iterates\n-over a vector of integers backwards:\n+Because closures in Rust are frequently used in combination with\n+higher-order functions to simulate control structures like `if` and\n+`loop`. For example, this one iterates over a vector of integers\n+backwards:\n \n ~~~~\n fn for_rev(v: ~[int], act: fn(int)) {\n@@ -976,11 +975,16 @@ fn for_rev(v: ~[int], act: fn(int)) {\n }\n ~~~~\n \n-To run such an iteration, you could do this:\n+To run such an iteration on a block of code, you could call\n+it with a closure containing a block of code.\n \n ~~~~\n # fn for_rev(v: ~[int], act: fn(int)) {}\n-for_rev(~[1, 2, 3], |n| log(error, n) );\n+# fn do_some_work(i: int) { }\n+for_rev(~[1, 2, 3], |n| {\n+    #debug(\"%i\", n);\n+    do_some_work(n);\n+});\n ~~~~\n \n Because this is such a common pattern Rust has a special form\n@@ -989,8 +993,10 @@ structure:\n \n ~~~~\n # fn for_rev(v: [int], act: fn(int)) {}\n+# fn do_some_work(i: int) { }\n do for_rev(~[1, 2, 3]) |n| {\n-    log(error, n);\n+    #debug(\"%i\", n);\n+    do_some_work(n);\n }\n ~~~~\n "}]}