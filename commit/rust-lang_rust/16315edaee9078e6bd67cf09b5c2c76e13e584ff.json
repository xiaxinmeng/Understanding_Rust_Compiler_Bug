{"sha": "16315edaee9078e6bd67cf09b5c2c76e13e584ff", "node_id": "C_kwDOAAsO6NoAKDE2MzE1ZWRhZWU5MDc4ZTZiZDY3Y2YwOWI1YzJjNzZlMTNlNTg0ZmY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-22T11:15:42Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-23T12:05:55Z"}, "message": "Make punctuation highlighting configurable, disable it by default", "tree": {"sha": "390dbf05b2b295e9e633a875a962bddc73618298", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/390dbf05b2b295e9e633a875a962bddc73618298"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16315edaee9078e6bd67cf09b5c2c76e13e584ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16315edaee9078e6bd67cf09b5c2c76e13e584ff", "html_url": "https://github.com/rust-lang/rust/commit/16315edaee9078e6bd67cf09b5c2c76e13e584ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16315edaee9078e6bd67cf09b5c2c76e13e584ff/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6627b473e2dc4aa918bceeffb6baadac5e887494", "url": "https://api.github.com/repos/rust-lang/rust/commits/6627b473e2dc4aa918bceeffb6baadac5e887494", "html_url": "https://github.com/rust-lang/rust/commit/6627b473e2dc4aa918bceeffb6baadac5e887494"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "9db35b17c060a9b564378be8ff17848459f1ffa7", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16315edaee9078e6bd67cf09b5c2c76e13e584ff/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16315edaee9078e6bd67cf09b5c2c76e13e584ff/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=16315edaee9078e6bd67cf09b5c2c76e13e584ff", "patch": "@@ -296,7 +296,7 @@ impl Highlight {\n         Highlight { tag, mods: HlMods::default() }\n     }\n     pub fn is_empty(&self) -> bool {\n-        self.tag == HlTag::None && self.mods == HlMods::default()\n+        self.tag == HlTag::None && self.mods.is_empty()\n     }\n }\n \n@@ -330,6 +330,10 @@ impl ops::BitOr<HlMod> for Highlight {\n }\n \n impl HlMods {\n+    pub fn is_empty(&self) -> bool {\n+        self.0 == 0\n+    }\n+\n     pub fn contains(self, m: HlMod) -> bool {\n         self.0 & m.mask() == m.mask()\n     }"}, {"sha": "732d01595e13c27efece25d32c7903b44a9fa953", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/16315edaee9078e6bd67cf09b5c2c76e13e584ff/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16315edaee9078e6bd67cf09b5c2c76e13e584ff/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=16315edaee9078e6bd67cf09b5c2c76e13e584ff", "patch": "@@ -391,6 +391,16 @@ config_data! {\n         /// By disabling semantic tokens for strings, other grammars can be used to highlight\n         /// their contents.\n         semanticHighlighting_strings_enable: bool = \"true\",\n+        /// Use semantic tokens for punctuations.\n+        ///\n+        /// When disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\n+        /// they are tagged with modifiers.\n+        semanticHighlighting_punctuation_enable: bool = \"false\",\n+        /// Use specialized semantic tokens for punctuations.\n+        ///\n+        /// When enabled, rust-analyzer will emit special token types for punctuation tokens instead\n+        /// of the generic `punctuation` token type.\n+        semanticHighlighting_punctuation_specialize: bool = \"false\",\n \n         /// Show full signature of the callable. Only shows parameters if disabled.\n         signatureInfo_detail: SignatureDetail                           = \"\\\"full\\\"\",\n@@ -523,6 +533,13 @@ impl HoverActionsConfig {\n     }\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct HighlightingConfig {\n+    pub strings: bool,\n+    pub punctuation: bool,\n+    pub specialize_punctuation: bool,\n+}\n+\n #[derive(Debug, Clone)]\n pub struct FilesConfig {\n     pub watcher: FilesWatcher,\n@@ -1171,8 +1188,12 @@ impl Config {\n         }\n     }\n \n-    pub fn highlighting_strings(&self) -> bool {\n-        self.data.semanticHighlighting_strings_enable\n+    pub fn highlighting_config(&self) -> HighlightingConfig {\n+        HighlightingConfig {\n+            strings: self.data.semanticHighlighting_strings_enable,\n+            punctuation: self.data.semanticHighlighting_punctuation_enable,\n+            specialize_punctuation: self.data.semanticHighlighting_punctuation_specialize,\n+        }\n     }\n \n     pub fn hover(&self) -> HoverConfig {"}, {"sha": "beec3433b7255d852fc96d74832ab197dca9a855", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16315edaee9078e6bd67cf09b5c2c76e13e584ff/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16315edaee9078e6bd67cf09b5c2c76e13e584ff/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=16315edaee9078e6bd67cf09b5c2c76e13e584ff", "patch": "@@ -1505,9 +1505,9 @@ pub(crate) fn handle_semantic_tokens_full(\n     let line_index = snap.file_line_index(file_id)?;\n \n     let highlights = snap.analysis.highlight(file_id)?;\n-    let highlight_strings = snap.config.highlighting_strings();\n+    let highlighting_config = snap.config.highlighting_config();\n     let semantic_tokens =\n-        to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n+        to_proto::semantic_tokens(&text, &line_index, highlights, highlighting_config);\n \n     // Unconditionally cache the tokens\n     snap.semantic_tokens_cache.lock().insert(params.text_document.uri, semantic_tokens.clone());\n@@ -1526,7 +1526,7 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n     let line_index = snap.file_line_index(file_id)?;\n \n     let highlights = snap.analysis.highlight(file_id)?;\n-    let highlight_strings = snap.config.highlighting_strings();\n+    let highlight_strings = snap.config.highlighting_config();\n     let semantic_tokens =\n         to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n \n@@ -1557,7 +1557,7 @@ pub(crate) fn handle_semantic_tokens_range(\n     let line_index = snap.file_line_index(frange.file_id)?;\n \n     let highlights = snap.analysis.highlight_range(frange)?;\n-    let highlight_strings = snap.config.highlighting_strings();\n+    let highlight_strings = snap.config.highlighting_config();\n     let semantic_tokens =\n         to_proto::semantic_tokens(&text, &line_index, highlights, highlight_strings);\n     Ok(Some(semantic_tokens.into()))"}, {"sha": "21fd6c72552c81496aabab840e76bd614c88abd9", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/16315edaee9078e6bd67cf09b5c2c76e13e584ff/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16315edaee9078e6bd67cf09b5c2c76e13e584ff/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=16315edaee9078e6bd67cf09b5c2c76e13e584ff", "patch": "@@ -18,7 +18,7 @@ use vfs::AbsPath;\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n-    config::{CallInfoConfig, Config},\n+    config::{CallInfoConfig, Config, HighlightingConfig},\n     global_state::GlobalStateSnapshot,\n     line_index::{LineEndings, LineIndex, OffsetEncoding},\n     lsp_ext,\n@@ -517,19 +517,37 @@ pub(crate) fn semantic_tokens(\n     text: &str,\n     line_index: &LineIndex,\n     highlights: Vec<HlRange>,\n-    highlight_strings: bool,\n+    config: HighlightingConfig,\n ) -> lsp_types::SemanticTokens {\n     let id = TOKEN_RESULT_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();\n     let mut builder = semantic_tokens::SemanticTokensBuilder::new(id);\n \n-    for highlight_range in highlights {\n+    for mut highlight_range in highlights {\n         if highlight_range.highlight.is_empty() {\n             continue;\n         }\n-        let (ty, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n-        if !highlight_strings && ty == lsp_types::SemanticTokenType::STRING {\n-            continue;\n+\n+        // apply config filtering\n+        match &mut highlight_range.highlight.tag {\n+            HlTag::StringLiteral if !config.strings => continue,\n+            // If punctuation is disabled, make the macro bang part of the macro call again.\n+            tag @ HlTag::Punctuation(HlPunct::MacroBang)\n+                if !config.punctuation || !config.specialize_punctuation =>\n+            {\n+                *tag = HlTag::Symbol(SymbolKind::Macro);\n+            }\n+            HlTag::Punctuation(_)\n+                if !config.punctuation && highlight_range.highlight.mods.is_empty() =>\n+            {\n+                continue\n+            }\n+            tag @ HlTag::Punctuation(_) if !config.specialize_punctuation => {\n+                *tag = HlTag::Punctuation(HlPunct::Other);\n+            }\n+            _ => (),\n         }\n+\n+        let (ty, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n         let token_index = semantic_tokens::type_index(ty);\n         let modifier_bitset = mods.0;\n "}]}