{"sha": "79388aa067e27824973f8f25fd6c4775d35388fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5Mzg4YWEwNjdlMjc4MjQ5NzNmOGYyNWZkNmM0Nzc1ZDM1Mzg4ZmQ=", "commit": {"author": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-05-26T03:27:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-14T17:27:23Z"}, "message": "Add future_prelude_collision lint", "tree": {"sha": "5d497672bb0f6b950a8272dbf61b3de0992b14c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d497672bb0f6b950a8272dbf61b3de0992b14c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79388aa067e27824973f8f25fd6c4775d35388fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79388aa067e27824973f8f25fd6c4775d35388fd", "html_url": "https://github.com/rust-lang/rust/commit/79388aa067e27824973f8f25fd6c4775d35388fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79388aa067e27824973f8f25fd6c4775d35388fd/comments", "author": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a216131c3566858b78f45ccc0c36b5578f5c5155", "url": "https://api.github.com/repos/rust-lang/rust/commits/a216131c3566858b78f45ccc0c36b5578f5c5155", "html_url": "https://github.com/rust-lang/rust/commit/a216131c3566858b78f45ccc0c36b5578f5c5155"}], "stats": {"total": 96, "additions": 95, "deletions": 1}, "files": [{"sha": "168ea713d19470d60ec5178fd622cf373dbe6d9c", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/79388aa067e27824973f8f25fd6c4775d35388fd/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79388aa067e27824973f8f25fd6c4775d35388fd/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=79388aa067e27824973f8f25fd6c4775d35388fd", "patch": "@@ -3001,6 +3001,7 @@ declare_lint_pass! {\n         PROC_MACRO_BACK_COMPAT,\n         OR_PATTERNS_BACK_COMPAT,\n         LARGE_ASSIGNMENTS,\n+        FUTURE_PRELUDE_COLLISION,\n     ]\n }\n \n@@ -3240,3 +3241,47 @@ declare_lint! {\n     Allow,\n     \"detects usage of old versions of or-patterns\",\n }\n+\n+declare_lint! {\n+    /// The `future_prelude_collision` lint detects the usage of trait methods which are ambiguous\n+    /// with traits added to the prelude in future editions.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(future_prelude_collision)]\n+    ///\n+    /// trait Foo {\n+    ///     fn try_into(self) -> Result<String, !>;\n+    /// }\n+    ///\n+    /// impl Foo for &str {\n+    ///     fn try_into(self) -> Result<String, !> {\n+    ///         Ok(String::from(self))\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let x: String = \"3\".try_into().unwrap();\n+    ///     //                  ^^^^^^^^\n+    ///     // This call to try_into matches both Foo:try_into and TryInto::try_into as\n+    ///     // `TryInto` has been added to the Rust prelude in 2021 edition.\n+    ///     println!(\"{}\", x);\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In Rust 2021, one of the important introductions is the [prelude changes], which add\n+    /// `TryFrom` and `TryInto` into the standard library's prelude. Since this results in an\n+    /// amiguity as to which method to call when an existing `try_from` or `try_into` method is\n+    /// called via dot-call syntax.\n+    ///\n+    /// [prelude changes]: https://blog.rust-lang.org/inside-rust/2021/03/04/planning-rust-2021.html#prelude-changes\n+    pub FUTURE_PRELUDE_COLLISION,\n+    Warn,\n+    \"detects the usage of trait methods which are ambiguous with traits added to the \\\n+        prelude in future editions\",\n+}"}, {"sha": "8019569ab9bd1bd9c598de954a0ee5e45de3a956", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79388aa067e27824973f8f25fd6c4775d35388fd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79388aa067e27824973f8f25fd6c4775d35388fd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=79388aa067e27824973f8f25fd6c4775d35388fd", "patch": "@@ -1236,7 +1236,9 @@ symbols! {\n         truncf32,\n         truncf64,\n         try_blocks,\n+        try_from,\n         try_from_trait,\n+        try_into,\n         try_into_trait,\n         try_trait_v2,\n         tt,"}, {"sha": "164b1a4910bcf717dd775a2ed79b794fc4dd1fad", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/79388aa067e27824973f8f25fd6c4775d35388fd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79388aa067e27824973f8f25fd6c4775d35388fd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=79388aa067e27824973f8f25fd6c4775d35388fd", "patch": "@@ -21,7 +21,8 @@ use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TypeFoldable, WithConstness};\n-use rustc_span::symbol::Ident;\n+use rustc_session::lint::builtin::FUTURE_PRELUDE_COLLISION;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -198,6 +199,52 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let pick =\n             self.lookup_probe(span, segment.ident, self_ty, call_expr, ProbeScope::TraitsInScope)?;\n \n+        if let sym::try_from | sym::try_into = segment.ident.name {\n+            if let probe::PickKind::TraitPick = pick.kind {\n+                if !matches!(self.tcx.crate_name(pick.item.def_id.krate), sym::std | sym::core) {\n+                    self.tcx.struct_span_lint_hir(\n+                        FUTURE_PRELUDE_COLLISION,\n+                        call_expr.hir_id,\n+                        call_expr.span,\n+                        |lint| {\n+                            let sp = call_expr.span;\n+                            let trait_name =\n+                                self.tcx.def_path_str(pick.item.container.assert_trait());\n+\n+                            let mut lint = lint.build(&format!(\n+                                \"trait method `{}` will become ambiguous in Rust 2021\",\n+                                segment.ident.name\n+                            ));\n+\n+                            if let Ok(self_expr) =\n+                                self.sess().source_map().span_to_snippet(self_expr.span)\n+                            {\n+                                lint.span_suggestion(\n+                                    sp,\n+                                    \"disambiguate the associated function\",\n+                                    format!(\n+                                        \"{}::{}({})\",\n+                                        trait_name, segment.ident.name, self_expr,\n+                                    ),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            } else {\n+                                lint.span_help(\n+                                    sp,\n+                                    &format!(\n+                                        \"disambiguate the associated function with `{}::{}(...)`\",\n+                                        trait_name, segment.ident,\n+                                    ),\n+                                );\n+                            }\n+\n+                            lint.emit();\n+                        },\n+                    );\n+                }\n+            }\n+        }\n+\n         for import_id in &pick.import_ids {\n             debug!(\"used_trait_import: {:?}\", import_id);\n             Lrc::get_mut(&mut self.typeck_results.borrow_mut().used_trait_imports)"}]}