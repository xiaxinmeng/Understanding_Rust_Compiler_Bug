{"sha": "5b9b50e712e583423e7204747271ff56a3975f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOWI1MGU3MTJlNTgzNDIzZTcyMDQ3NDcyNzFmZjU2YTM5NzVmNzg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-09-13T15:29:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-09-22T21:48:02Z"}, "message": "Give HirId to hir::Ty", "tree": {"sha": "c82cec08692f7c6277bccfd5bb6115bad28e4191", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c82cec08692f7c6277bccfd5bb6115bad28e4191"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b9b50e712e583423e7204747271ff56a3975f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9b50e712e583423e7204747271ff56a3975f78", "html_url": "https://github.com/rust-lang/rust/commit/5b9b50e712e583423e7204747271ff56a3975f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b9b50e712e583423e7204747271ff56a3975f78/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14039a42ac6365afc842214989613f9a688c9a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/14039a42ac6365afc842214989613f9a688c9a66", "html_url": "https://github.com/rust-lang/rust/commit/14039a42ac6365afc842214989613f9a688c9a66"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "f0cb59c08d28cbfdc5d55278d1332a08faf53f6e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b9b50e712e583423e7204747271ff56a3975f78/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9b50e712e583423e7204747271ff56a3975f78/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5b9b50e712e583423e7204747271ff56a3975f78", "patch": "@@ -685,7 +685,7 @@ impl<'a> LoweringContext<'a> {\n                 return self.lower_ty(ty);\n             }\n             TyKind::Path(ref qself, ref path) => {\n-                let id = self.lower_node_id(t.id).node_id;\n+                let id = self.lower_node_id(t.id);\n                 let qpath = self.lower_qpath(t.id, qself, path, ParamMode::Explicit);\n                 return self.ty_path(id, t.span, qpath);\n             }\n@@ -734,10 +734,12 @@ impl<'a> LoweringContext<'a> {\n             TyKind::Mac(_) => panic!(\"TyMac should have been expanded by now.\"),\n         };\n \n+        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(t.id);\n         P(hir::Ty {\n-            id: self.lower_node_id(t.id).node_id,\n+            id: node_id,\n             node: kind,\n             span: t.span,\n+            hir_id,\n         })\n     }\n \n@@ -863,7 +865,7 @@ impl<'a> LoweringContext<'a> {\n             // Otherwise, the base path is an implicit `Self` type path,\n             // e.g. `Vec` in `Vec::new` or `<I as Iterator>::Item` in\n             // `<I as Iterator>::Item::default`.\n-            let new_id = self.next_id().node_id;\n+            let new_id = self.next_id();\n             self.ty_path(new_id, p.span, hir::QPath::Resolved(qself, path))\n         };\n \n@@ -888,7 +890,7 @@ impl<'a> LoweringContext<'a> {\n             }\n \n             // Wrap the associated extension in another type node.\n-            let new_id = self.next_id().node_id;\n+            let new_id = self.next_id();\n             ty = self.ty_path(new_id, p.span, qpath);\n         }\n \n@@ -996,7 +998,8 @@ impl<'a> LoweringContext<'a> {\n         let &ParenthesizedParameterData { ref inputs, ref output, span } = data;\n         let inputs = inputs.iter().map(|ty| self.lower_ty(ty)).collect();\n         let mk_tup = |this: &mut Self, tys, span| {\n-            P(hir::Ty { node: hir::TyTup(tys), id: this.next_id().node_id, span })\n+            let LoweredNodeId { node_id, hir_id } = this.next_id();\n+            P(hir::Ty { node: hir::TyTup(tys), id: node_id, hir_id, span })\n         };\n \n         hir::PathParameters {\n@@ -2976,7 +2979,7 @@ impl<'a> LoweringContext<'a> {\n         self.expr_block(block, attrs)\n     }\n \n-    fn ty_path(&mut self, id: NodeId, span: Span, qpath: hir::QPath) -> P<hir::Ty> {\n+    fn ty_path(&mut self, id: LoweredNodeId, span: Span, qpath: hir::QPath) -> P<hir::Ty> {\n         let mut id = id;\n         let node = match qpath {\n             hir::QPath::Resolved(None, path) => {\n@@ -2986,14 +2989,14 @@ impl<'a> LoweringContext<'a> {\n                         bound_lifetimes: hir_vec![],\n                         trait_ref: hir::TraitRef {\n                             path: path.and_then(|path| path),\n-                            ref_id: id,\n+                            ref_id: id.node_id,\n                         },\n                         span,\n                     };\n \n                     // The original ID is taken by the `PolyTraitRef`,\n                     // so the `Ty` itself needs a different one.\n-                    id = self.next_id().node_id;\n+                    id = self.next_id();\n \n                     hir::TyTraitObject(hir_vec![principal], self.elided_lifetime(span))\n                 } else {\n@@ -3002,7 +3005,7 @@ impl<'a> LoweringContext<'a> {\n             }\n             _ => hir::TyPath(qpath)\n         };\n-        P(hir::Ty { id, node, span })\n+        P(hir::Ty { id: id.node_id, hir_id: id.hir_id, node, span })\n     }\n \n     fn elided_lifetime(&mut self, span: Span) -> hir::Lifetime {"}, {"sha": "e96edaa86d2a2a5709b7ab3cf82c6837218fa997", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b9b50e712e583423e7204747271ff56a3975f78/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9b50e712e583423e7204747271ff56a3975f78/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=5b9b50e712e583423e7204747271ff56a3975f78", "patch": "@@ -1354,6 +1354,7 @@ pub struct Ty {\n     pub id: NodeId,\n     pub node: Ty_,\n     pub span: Span,\n+    pub hir_id: HirId,\n }\n \n impl fmt::Debug for Ty {"}, {"sha": "bc0c52575ae1506fd65f5021f3cadb6185b9fc61", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b9b50e712e583423e7204747271ff56a3975f78/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9b50e712e583423e7204747271ff56a3975f78/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=5b9b50e712e583423e7204747271ff56a3975f78", "patch": "@@ -245,6 +245,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::Ty {\n         hcx.while_hashing_hir_bodies(true, |hcx| {\n             let hir::Ty {\n                 id: _,\n+                hir_id: _,\n                 ref node,\n                 ref span,\n             } = *self;"}]}