{"sha": "f1112099eba41abadb6f921df7edba70affe92c5", "node_id": "C_kwDOAAsO6NoAKGYxMTEyMDk5ZWJhNDFhYmFkYjZmOTIxZGY3ZWRiYTcwYWZmZTkyYzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-04T06:47:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-04T06:47:21Z"}, "message": "Auto merge of #102644 - matthiaskrgr:rollup-rg0sw41, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #102441 (Suggest unwrap_or_else when a closure is given)\n - #102547 (Migrate CSS theme for search results)\n - #102567 (Delay evaluating lint primary message until after it would be suppressed)\n - #102624 (rustdoc: remove font family CSS on `.rustdoc-toggle summary::before`)\n - #102628 (Change the parameter name of From::from to `value`)\n - #102637 (Ignore fuchsia on two compiler tests)\n - #102639 (Improve spans when splitting multi-char operator tokens for proc macros.)\n\nFailed merges:\n\n - #102496 (Suggest `.into()` when all other coercion suggestions fail)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ef92b75e040c08aee80086c45c26f055e5ef73f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef92b75e040c08aee80086c45c26f055e5ef73f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1112099eba41abadb6f921df7edba70affe92c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1112099eba41abadb6f921df7edba70affe92c5", "html_url": "https://github.com/rust-lang/rust/commit/f1112099eba41abadb6f921df7edba70affe92c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1112099eba41abadb6f921df7edba70affe92c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9f8b4b98503e3f88623eb59d4f20432161b840a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f8b4b98503e3f88623eb59d4f20432161b840a", "html_url": "https://github.com/rust-lang/rust/commit/d9f8b4b98503e3f88623eb59d4f20432161b840a"}, {"sha": "185ca0f1815e5b05524670c7178b7e8cb31ebec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/185ca0f1815e5b05524670c7178b7e8cb31ebec2", "html_url": "https://github.com/rust-lang/rust/commit/185ca0f1815e5b05524670c7178b7e8cb31ebec2"}], "stats": {"total": 1113, "additions": 893, "deletions": 220}, "files": [{"sha": "17a348ec6baaec2d51c4065bc3040ede6d5943c8", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -115,8 +115,20 @@ impl FromInternal<(TokenStream, &mut Rustc<'_, '_>)> for Vec<TokenTree<TokenStre\n             // before that get `joint = true`.\n             let mut op = |s: &str| {\n                 assert!(s.is_ascii());\n-                trees.extend(s.bytes().enumerate().map(|(idx, ch)| {\n-                    let is_final = idx == s.len() - 1;\n+                trees.extend(s.bytes().enumerate().map(|(i, ch)| {\n+                    let is_final = i == s.len() - 1;\n+                    // Split the token span into single chars. Unless the span\n+                    // is an unusual one, e.g. due to proc macro expansion. We\n+                    // determine this by assuming any span with a length that\n+                    // matches the operator length is a normal one, and any\n+                    // span with a different length is an unusual one.\n+                    let span = if (span.hi() - span.lo()).to_usize() == s.len() {\n+                        let lo = span.lo() + BytePos::from_usize(i);\n+                        let hi = lo + BytePos::from_usize(1);\n+                        span.with_lo(lo).with_hi(hi)\n+                    } else {\n+                        span\n+                    };\n                     TokenTree::Punct(Punct { ch, joint: if is_final { joint } else { true }, span })\n                 }));\n             };"}, {"sha": "7b1a2ad35cdfe7c10de9f1a1fd4b7c8d24d228ad", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// When encountering an fn-like type, try accessing the output of the type\n-    /// // and suggesting calling it if it satisfies a predicate (i.e. if the\n+    /// and suggesting calling it if it satisfies a predicate (i.e. if the\n     /// output has a method or a field):\n     /// ```compile_fail,E0308\n     /// fn foo(x: usize) -> usize { x }\n@@ -139,7 +139,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 sugg,\n                 applicability,\n             );\n-\n             return true;\n         }\n         false\n@@ -338,6 +337,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 err.span_suggestion(sp, &msg, suggestion, applicability);\n             }\n+        } else if self.suggest_else_fn_with_closure(err, expr, found, expected)\n+        {\n         } else if self.suggest_fn_call(err, expr, found, |output| self.can_coerce(output, expected))\n             && let ty::FnDef(def_id, ..) = &found.kind()\n             && let Some(sp) = self.tcx.hir().span_if_local(*def_id)"}, {"sha": "ad1084bd1b1b6b319f2038db7ddbf5b7794b262d", "filename": "compiler/rustc_hir_analysis/src/check/method/suggest.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -2324,6 +2324,60 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// issue #102320, for `unwrap_or` with closure as argument, suggest `unwrap_or_else`\n+    /// FIXME: currently not working for suggesting `map_or_else`, see #102408\n+    pub(crate) fn suggest_else_fn_with_closure(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        found: Ty<'tcx>,\n+        expected: Ty<'tcx>,\n+    ) -> bool {\n+        let Some((_def_id_or_name, output, _inputs)) = self.extract_callable_info(expr, found)\n+        else { return false; };\n+\n+        if !self.can_coerce(output, expected) {\n+            return false;\n+        }\n+\n+        let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n+        if  let Some(Node::Expr(call_expr)) = self.tcx.hir().find(parent) &&\n+            let hir::ExprKind::MethodCall(\n+                hir::PathSegment { ident: method_name, .. },\n+                self_expr,\n+                args,\n+                ..,\n+             ) = call_expr.kind &&\n+            let Some(self_ty) = self.typeck_results.borrow().expr_ty_opt(self_expr) {\n+            let new_name = Ident {\n+                name: Symbol::intern(&format!(\"{}_else\", method_name.as_str())),\n+                span: method_name.span,\n+            };\n+            let probe = self.lookup_probe(\n+                expr.span,\n+                new_name,\n+                self_ty,\n+                self_expr,\n+                ProbeScope::TraitsInScope,\n+            );\n+\n+            // check the method arguments number\n+            if let Ok(pick) = probe &&\n+                let fn_sig = self.tcx.fn_sig(pick.item.def_id) &&\n+                let fn_args = fn_sig.skip_binder().inputs() &&\n+                fn_args.len() == args.len() + 1 {\n+                err.span_suggestion_verbose(\n+                    method_name.span.shrink_to_hi(),\n+                    &format!(\"try calling `{}` instead\", new_name.name.as_str()),\n+                    \"_else\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n     /// Checks whether there is a local type somewhere in the chain of\n     /// autoderefs of `rcvr_ty`.\n     fn type_derefs_to_local("}, {"sha": "b3b02f5b9879b7932224126f7b8784ddbeba1b66", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -350,7 +350,6 @@ pub fn struct_lint_level(\n             (Level::Deny | Level::Forbid, None) => sess.diagnostic().struct_err_lint(\"\"),\n         };\n \n-        err.set_primary_message(msg);\n         err.set_is_lint();\n \n         // If this code originates in a foreign macro, aka something that this crate\n@@ -375,6 +374,10 @@ pub fn struct_lint_level(\n             }\n         }\n \n+        // Delay evaluating and setting the primary message until after we've\n+        // suppressed the lint due to macros.\n+        err.set_primary_message(msg);\n+\n         // Lint diagnostics that are covered by the expect level will not be emitted outside\n         // the compiler. It is therefore not necessary to add any information for the user.\n         // This will therefore directly call the decorate function which will in turn emit"}, {"sha": "33493964bad2ed8dfb30402444ac8a56041778c8", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -545,7 +545,7 @@ pub trait From<T>: Sized {\n     #[lang = \"from\"]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from(_: T) -> Self;\n+    fn from(value: T) -> Self;\n }\n \n /// An attempted conversion that consumes `self`, which may or may not be"}, {"sha": "4795c14e0aef6e14930e57aac744657781d91be2", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -194,13 +194,10 @@ h1, h2, h3, h4, h5, h6,\n .item-left > a,\n .out-of-band,\n span.since,\n-details.rustdoc-toggle > summary::before,\n a.srclink,\n #help-button > button,\n details.rustdoc-toggle.top-doc > summary,\n-details.rustdoc-toggle.top-doc > summary::before,\n details.rustdoc-toggle.non-exhaustive > summary,\n-details.rustdoc-toggle.non-exhaustive > summary::before,\n .scraped-example-title,\n .more-examples-toggle summary, .more-examples-toggle .hide-more,\n .example-links a,\n@@ -970,6 +967,11 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tpadding-right: 1em;\n }\n \n+.search-results a:hover,\n+.search-results a:focus {\n+\tbackground-color: var(--search-result-link-focus-background-color);\n+}\n+\n .popover {\n \tfont-size: 1rem;\n \tposition: absolute;\n@@ -1567,7 +1569,6 @@ details.rustdoc-toggle > summary::before {\n }\n \n details.rustdoc-toggle > summary.hideme > span,\n-details.rustdoc-toggle > summary::before,\n .more-examples-toggle summary, .more-examples-toggle .hide-more {\n \tcolor: var(--toggles-color);\n }"}, {"sha": "7245dce6ed6e34225b4d85d11916368fa492e19f", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -37,6 +37,7 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--link-color: #39afd7;\n \t--sidebar-link-color: #53b1db;\n \t--sidebar-current-link-background-color: transparent;\n+\t--search-result-link-focus-background-color: #3c3c3c;\n \t--stab-background-color: #314559;\n \t--stab-code-color: #e6e1cf;\n }\n@@ -250,30 +251,6 @@ pre.rust .kw {}\n pre.rust .self, pre.rust .bool-val, pre.rust .prelude-val, pre.rust .attribute {}\n pre.rust .kw-2, pre.rust .prelude-ty {}\n \n-.search-results a:focus span {}\n-a.result-trait:focus {}\n-a.result-traitalias:focus {}\n-a.result-mod:focus,\n-a.result-externcrate:focus {}\n-a.result-mod:focus {}\n-a.result-externcrate:focus {}\n-a.result-enum:focus {}\n-a.result-struct:focus {}\n-a.result-union:focus {}\n-a.result-fn:focus,\n-a.result-method:focus,\n-a.result-tymethod:focus {}\n-a.result-type:focus {}\n-a.result-associatedtype:focus {}\n-a.result-foreigntype:focus {}\n-a.result-attr:focus,\n-a.result-derive:focus,\n-a.result-macro:focus {}\n-a.result-constant:focus,\n-a.result-static:focus {}\n-a.result-primitive:focus {}\n-a.result-keyword:focus {}\n-\n kbd {\n \tcolor: #c5c5c5;\n \tbackground-color: #314559;"}, {"sha": "9d5406e65a8b90b71c8cd41d24989864df678bea", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -32,6 +32,7 @@\n \t--link-color: #d2991d;\n \t--sidebar-link-color: #fdbf35;\n \t--sidebar-current-link-background-color: #444;\n+\t--search-result-link-focus-background-color: #616161;\n \t--stab-background-color: #314559;\n \t--stab-code-color: #e6e1cf;\n }\n@@ -58,36 +59,6 @@ input:focus + .slider {\n \tbackground-color: #0a042f !important;\n }\n \n-.search-results a:hover {\n-\tbackground-color: #777;\n-}\n-\n-.search-results a:focus {\n-\tcolor: #eee !important;\n-\tbackground-color: #616161;\n-}\n-.search-results a:focus span { color: #eee !important; }\n-a.result-trait:focus { background-color: #013191; }\n-a.result-traitalias:focus { background-color: #013191; }\n-a.result-mod:focus,\n-a.result-externcrate:focus { background-color: #884719; }\n-a.result-enum:focus { background-color: #194e9f; }\n-a.result-struct:focus { background-color: #194e9f; }\n-a.result-union:focus { background-color: #194e9f; }\n-a.result-fn:focus,\n-a.result-method:focus,\n-a.result-tymethod:focus { background-color: #4950ed; }\n-a.result-type:focus { background-color: #194e9f; }\n-a.result-associatedtype:focus { background-color: #884719; }\n-a.result-foreigntype:focus { background-color: #194e9f; }\n-a.result-attr:focus,\n-a.result-derive:focus,\n-a.result-macro:focus { background-color: #217d1c; }\n-a.result-constant:focus,\n-a.result-static:focus { background-color: #884719; }\n-a.result-primitive:focus { background-color: #194e9f; }\n-a.result-keyword:focus { background-color: #884719; }\n-\n .content .item-info::before { color: #ccc; }\n \n pre.rust .comment { color: #8d8d8b; }"}, {"sha": "b63895e56c687ea0faaba01097969439b901e8d1", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -32,6 +32,7 @@\n \t--link-color: #3873ad;\n \t--sidebar-link-color: #356da4;\n \t--sidebar-current-link-background-color: #fff;\n+\t--search-result-link-focus-background-color: #ccc;\n \t--stab-background-color: #fff5d6;\n \t--stab-code-color: #000;\n }\n@@ -57,36 +58,6 @@ input:focus + .slider {\n \tbackground-color: #FDFFD3 !important;\n }\n \n-.search-results a:hover {\n-\tbackground-color: #ddd;\n-}\n-\n-.search-results a:focus {\n-\tcolor: #000 !important;\n-\tbackground-color: #ccc;\n-}\n-.search-results a:focus span { color: #000 !important; }\n-a.result-trait:focus { background-color: #c7b6ff; }\n-a.result-traitalias:focus { background-color: #c7b6ff; }\n-a.result-mod:focus,\n-a.result-externcrate:focus { background-color: #afc6e4; }\n-a.result-enum:focus { background-color: #e7b1a0; }\n-a.result-struct:focus { background-color: #e7b1a0; }\n-a.result-union:focus { background-color: #e7b1a0; }\n-a.result-fn:focus,\n-a.result-method:focus,\n-a.result-tymethod:focus { background-color: #c6afb3; }\n-a.result-type:focus { background-color: #e7b1a0; }\n-a.result-associatedtype:focus { background-color: #afc6e4; }\n-a.result-foreigntype:focus { background-color: #e7b1a0; }\n-a.result-attr:focus,\n-a.result-derive:focus,\n-a.result-macro:focus { background-color: #8ce488; }\n-a.result-constant:focus,\n-a.result-static:focus { background-color: #afc6e4; }\n-a.result-primitive:focus { background-color: #e7b1a0; }\n-a.result-keyword:focus { background-color: #afc6e4; }\n-\n .content .item-info::before { color: #ccc; }\n \n body.source .example-wrap pre.rust a {"}, {"sha": "807646cce37e92166ee86c86557a822e7951319d", "filename": "src/test/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 597, "deletions": 44, "changes": 641, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -30,54 +30,243 @@ assert-css: (\n \n // Checking the color of \"keyword\".\n assert-css: (\n-    \".result-name .keyword\",\n+    \".result-keyword .keyword\",\n     {\"color\": \"rgb(57, 175, 215)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-keyword\",\n+    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-keyword\"\n+assert-css: (\n+    \".result-keyword:hover\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-keyword:hover .keyword\",\n+    {\"color\": \"rgb(57, 175, 215)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-keyword\"\n+assert-css: (\n+    \".result-keyword:focus\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-keyword:focus .keyword\",\n+    {\"color\": \"rgb(57, 175, 215)\"},\n+)\n+\n // Check the color of \"struct\".\n assert-css: (\n-    \".result-name .struct\",\n+    \".result-struct .struct\",\n     {\"color\": \"rgb(255, 160, 165)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-struct\",\n+    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-struct\"\n+assert-css: (\n+    \".result-struct:hover\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-struct:hover .struct\",\n+    {\"color\": \"rgb(255, 160, 165)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-struct\"\n+assert-css: (\n+    \".result-struct:focus\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-struct:focus .struct\",\n+    {\"color\": \"rgb(255, 160, 165)\"},\n+)\n+\n // Check the color of \"associated type\".\n assert-css: (\n-    \".result-name .associatedtype\",\n+    \".result-associatedtype .associatedtype\",\n     {\"color\": \"rgb(57, 175, 215)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-associatedtype\",\n+    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-associatedtype\"\n+assert-css: (\n+    \".result-associatedtype:hover\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-associatedtype:hover .associatedtype\",\n+    {\"color\": \"rgb(57, 175, 215)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-associatedtype\"\n+assert-css: (\n+    \".result-associatedtype:focus\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-associatedtype:focus .associatedtype\",\n+    {\"color\": \"rgb(57, 175, 215)\"},\n+)\n+\n // Check the color of \"type method\".\n assert-css: (\n-    \".result-name .tymethod\",\n+    \".result-tymethod .tymethod\",\n     {\"color\": \"rgb(253, 214, 135)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-tymethod\",\n+    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+assert-css: (\n+    \".result-tymethod .tymethod\",\n+    {\"color\": \"rgb(253, 214, 135)\"},\n+)\n+move-cursor-to: \".result-tymethod\"\n+assert-css: (\n+    \".result-tymethod:hover\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-tymethod\"\n+assert-css: (\n+    \".result-tymethod:focus\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+\n // Check the color of \"method\".\n assert-css: (\n-    \".result-name .method\",\n+    \".result-method .method\",\n     {\"color\": \"rgb(253, 214, 135)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-method\",\n+    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-method\"\n+assert-css: (\n+    \".result-method:hover\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-method:hover .method\",\n+    {\"color\": \"rgb(253, 214, 135)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-method\"\n+assert-css: (\n+    \".result-method:focus\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-method:focus .method\",\n+    {\"color\": \"rgb(253, 214, 135)\"},\n+)\n+\n // Check the color of \"struct field\".\n assert-css: (\n-    \".result-name .structfield\",\n+    \".result-structfield .structfield\",\n     {\"color\": \"rgb(0, 150, 207)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-structfield\",\n+    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-structfield\"\n+assert-css: (\n+    \".result-structfield:hover\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-structfield:hover .structfield\",\n+    {\"color\": \"rgb(255, 255, 255)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-structfield\"\n+assert-css: (\n+    \".result-structfield:focus\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-structfield:focus .structfield\",\n+    {\"color\": \"rgb(255, 255, 255)\"},\n+)\n+\n // Check the color of \"macro\".\n assert-css: (\n-    \".result-name .macro\",\n+    \".result-macro .macro\",\n     {\"color\": \"rgb(163, 122, 204)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-macro\",\n+    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-macro\"\n+assert-css: (\n+    \".result-macro:hover\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-macro:hover .macro\",\n+    {\"color\": \"rgb(163, 122, 204)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-macro\"\n+assert-css: (\n+    \".result-macro:focus\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-macro:focus .macro\",\n+    {\"color\": \"rgb(163, 122, 204)\"},\n+)\n+\n // Check the color of \"fn\".\n assert-css: (\n-    \".result-name .fn\",\n+    \".result-fn .fn\",\n     {\"color\": \"rgb(253, 214, 135)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-fn\",\n+    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-fn\"\n+assert-css: (\n+    \".result-fn:hover\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-fn:hover .fn\",\n+    {\"color\": \"rgb(253, 214, 135)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-fn\"\n+assert-css: (\n+    \".result-fn:focus\",\n+    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n+)\n+assert-css: (\n+    \".result-fn:focus .fn\",\n+    {\"color\": \"rgb(253, 214, 135)\"},\n+)\n \n // Checking the `<a>` container.\n+move-cursor-to: \".search-input\"\n+focus: \".search-input\" // To ensure the `<a>` container isnt focus or hover.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n     {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n@@ -113,76 +302,258 @@ assert-css: (\n     {\"color\": \"rgb(221, 221, 221)\"},\n )\n \n-// Checking the color for \"keyword\".\n+// Checking the color for \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n     {\"color\": \"rgb(221, 221, 221)\"},\n )\n \n // Checking the color of \"keyword\".\n assert-css: (\n-    \".result-name .keyword\",\n+    \".result-keyword .keyword\",\n     {\"color\": \"rgb(210, 153, 29)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-keyword\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-keyword\"\n+assert-css: (\n+    \".result-keyword:hover\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-keyword:hover .keyword\",\n+    {\"color\": \"rgb(210, 153, 29)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-keyword\"\n+assert-css: (\n+    \".result-keyword:focus\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-keyword:focus .keyword\",\n+    {\"color\": \"rgb(210, 153, 29)\"},\n+)\n+\n // Check the color of \"struct\".\n assert-css: (\n-    \".result-name .struct\",\n+    \".result-struct .struct\",\n     {\"color\": \"rgb(45, 191, 184)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-struct\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-struct\"\n+assert-css: (\n+    \".result-struct:hover\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-struct:hover .struct\",\n+    {\"color\": \"rgb(45, 191, 184)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-struct\"\n+assert-css: (\n+    \".result-struct:focus\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-struct:focus .struct\",\n+    {\"color\": \"rgb(45, 191, 184)\"},\n+)\n+\n // Check the color of \"associated type\".\n assert-css: (\n-    \".result-name .associatedtype\",\n+    \".result-associatedtype .associatedtype\",\n     {\"color\": \"rgb(210, 153, 29)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-associatedtype\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-associatedtype\"\n+assert-css: (\n+    \".result-associatedtype:hover\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-associatedtype:hover .associatedtype\",\n+    {\"color\": \"rgb(210, 153, 29)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-associatedtype\"\n+assert-css: (\n+    \".result-associatedtype:focus\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-associatedtype:focus .associatedtype\",\n+    {\"color\": \"rgb(210, 153, 29)\"},\n+)\n+\n // Check the color of \"type method\".\n assert-css: (\n-    \".result-name .tymethod\",\n+    \".result-tymethod .tymethod\",\n     {\"color\": \"rgb(43, 171, 99)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-tymethod\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-tymethod\"\n+assert-css: (\n+    \".result-tymethod:hover\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-tymethod:hover .tymethod\",\n+    {\"color\": \"rgb(43, 171, 99)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-tymethod\"\n+assert-css: (\n+    \".result-tymethod:focus\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-tymethod:focus .tymethod\",\n+    {\"color\": \"rgb(43, 171, 99)\"},\n+)\n+\n // Check the color of \"method\".\n assert-css: (\n-    \".result-name .method\",\n+    \".result-method .method\",\n     {\"color\": \"rgb(43, 171, 99)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-method\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-method\"\n+assert-css: (\n+    \".result-method:hover\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-method:hover .method\",\n+    {\"color\": \"rgb(43, 171, 99)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-method\"\n+assert-css: (\n+    \".result-method:focus\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-method:focus .method\",\n+    {\"color\": \"rgb(43, 171, 99)\"},\n+)\n+\n // Check the color of \"struct field\".\n assert-css: (\n-    \".result-name .structfield\",\n+    \".result-structfield .structfield\",\n     {\"color\": \"rgb(221, 221, 221)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-structfield\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-structfield\"\n+assert-css: (\n+    \".result-structfield:hover\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-structfield:hover .structfield\",\n+    {\"color\": \"rgb(221, 221, 221)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-structfield\"\n+assert-css: (\n+    \".result-structfield:focus\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-structfield:focus .structfield\",\n+    {\"color\": \"rgb(221, 221, 221)\"},\n+)\n+\n // Check the color of \"macro\".\n assert-css: (\n-    \".result-name .macro\",\n+    \".result-macro .macro\",\n     {\"color\": \"rgb(9, 189, 0)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-macro\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-macro\"\n+assert-css: (\n+    \".result-macro:hover\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-macro:hover .macro\",\n+    {\"color\": \"rgb(9, 189, 0)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-macro\"\n+assert-css: (\n+    \".result-macro:focus\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-macro:focus .macro\",\n+    {\"color\": \"rgb(9, 189, 0)\"},\n+)\n+\n // Check the color of \"fn\".\n assert-css: (\n-    \".result-name .fn\",\n+    \".result-fn .fn\",\n     {\"color\": \"rgb(43, 171, 99)\"},\n     ALL,\n )\n-\n-// Checking the `<a>` container.\n assert-css: (\n-    \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n+    \".result-fn\",\n     {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n )\n-\n-// Checking color and background on hover.\n-move-cursor-to: \"//*[@class='desc']//*[text()='Just a normal struct.']\"\n+move-cursor-to: \".result-fn\"\n assert-css: (\n-    \"//*[@class='result-name']/*[text()='test_docs::']\",\n-    {\"color\": \"rgb(221, 221, 221)\"},\n+    \".result-fn:hover\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n )\n+assert-css: (\n+    \".result-fn:hover .fn\",\n+    {\"color\": \"rgb(43, 171, 99)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-fn\"\n+assert-css: (\n+    \".result-fn:focus\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n+)\n+assert-css: (\n+    \".result-fn:focus .fn\",\n+    {\"color\": \"rgb(43, 171, 99)\"},\n+)\n+\n+// Checking the `<a>` container.\n+move-cursor-to: \".search-input\"\n+focus: \".search-input\" // To ensure the `<a>` container isnt focus or hover.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(119, 119, 119)\"},\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n )\n \n // Light theme\n@@ -200,76 +571,258 @@ assert-css: (\n     {\"color\": \"rgb(0, 0, 0)\"},\n )\n \n-// Checking the color for \"keyword\".\n+// Checking the color for \"keyword\" text.\n assert-css: (\n     \"//*[@class='result-name']//*[text()='(keyword)']\",\n     {\"color\": \"rgb(0, 0, 0)\"},\n )\n \n // Checking the color of \"keyword\".\n assert-css: (\n-    \".result-name .keyword\",\n+    \".result-keyword .keyword\",\n     {\"color\": \"rgb(56, 115, 173)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-keyword\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-keyword\"\n+assert-css: (\n+    \".result-keyword:hover\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-keyword:hover .keyword\",\n+    {\"color\": \"rgb(56, 115, 173)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-keyword\"\n+assert-css: (\n+    \".result-keyword:focus\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-keyword:focus .keyword\",\n+    {\"color\": \"rgb(56, 115, 173)\"},\n+)\n+\n // Check the color of \"struct\".\n assert-css: (\n-    \".result-name .struct\",\n+    \".result-struct .struct\",\n     {\"color\": \"rgb(173, 55, 138)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-struct\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-struct\"\n+assert-css: (\n+    \".result-struct:hover\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-struct:hover .struct\",\n+    {\"color\": \"rgb(173, 55, 138)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-struct\"\n+assert-css: (\n+    \".result-struct:focus\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-struct:focus .struct\",\n+    {\"color\": \"rgb(173, 55, 138)\"},\n+)\n+\n // Check the color of \"associated type\".\n assert-css: (\n-    \".result-name .associatedtype\",\n+    \".result-associatedtype .associatedtype\",\n     {\"color\": \"rgb(56, 115, 173)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-associatedtype\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-associatedtype\"\n+assert-css: (\n+    \".result-associatedtype:hover\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-associatedtype:hover .associatedtype\",\n+    {\"color\": \"rgb(56, 115, 173)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-associatedtype\"\n+assert-css: (\n+    \".result-associatedtype:focus\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-associatedtype:focus .associatedtype\",\n+    {\"color\": \"rgb(56, 115, 173)\"},\n+)\n+\n // Check the color of \"type method\".\n assert-css: (\n-    \".result-name .tymethod\",\n+    \".result-tymethod .tymethod\",\n     {\"color\": \"rgb(173, 124, 55)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-tymethod\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-tymethod\"\n+assert-css: (\n+    \".result-tymethod:hover\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-tymethod:hover .tymethod\",\n+    {\"color\": \"rgb(173, 124, 55)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-tymethod\"\n+assert-css: (\n+    \".result-tymethod:focus\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-tymethod:focus .tymethod\",\n+    {\"color\": \"rgb(173, 124, 55)\"},\n+)\n+\n // Check the color of \"method\".\n assert-css: (\n-    \".result-name .method\",\n+    \".result-method .method\",\n     {\"color\": \"rgb(173, 124, 55)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-method\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-method\"\n+assert-css: (\n+    \".result-method:hover\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-method:hover .method\",\n+    {\"color\": \"rgb(173, 124, 55)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-method\"\n+assert-css: (\n+    \".result-method:focus\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-method:focus .method\",\n+    {\"color\": \"rgb(173, 124, 55)\"},\n+)\n+\n // Check the color of \"struct field\".\n assert-css: (\n-    \".result-name .structfield\",\n+    \".result-structfield .structfield\",\n     {\"color\": \"rgb(0, 0, 0)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-structfield\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-structfield\"\n+assert-css: (\n+    \".result-structfield:hover\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-structfield:hover .structfield\",\n+    {\"color\": \"rgb(0, 0, 0)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-structfield\"\n+assert-css: (\n+    \".result-structfield:focus\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-structfield:focus .structfield\",\n+    {\"color\": \"rgb(0, 0, 0)\"},\n+)\n+\n // Check the color of \"macro\".\n assert-css: (\n-    \".result-name .macro\",\n+    \".result-macro .macro\",\n     {\"color\": \"rgb(6, 128, 0)\"},\n     ALL,\n )\n+assert-css: (\n+    \".result-macro\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+)\n+move-cursor-to: \".result-macro\"\n+assert-css: (\n+    \".result-macro:hover\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-macro:hover .macro\",\n+    {\"color\": \"rgb(6, 128, 0)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-macro\"\n+assert-css: (\n+    \".result-macro:focus\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-macro:focus .macro\",\n+    {\"color\": \"rgb(6, 128, 0)\"},\n+)\n+\n // Check the color of \"fn\".\n assert-css: (\n-    \".result-name .fn\",\n+    \".result-fn .fn\",\n     {\"color\": \"rgb(173, 124, 55)\"},\n     ALL,\n )\n-\n-// Checking the `<a>` container.\n assert-css: (\n-    \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n+    \".result-fn\",\n     {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n )\n-\n-// Checking color and background on hover.\n-move-cursor-to: \"//*[@class='desc']//*[text()='Just a normal struct.']\"\n+move-cursor-to: \".result-fn\"\n assert-css: (\n-    \"//*[@class='result-name']/*[text()='test_docs::']\",\n-    {\"color\": \"rgb(0, 0, 0)\"},\n+    \".result-fn:hover\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n )\n+assert-css: (\n+    \".result-fn:hover .fn\",\n+    {\"color\": \"rgb(173, 124, 55)\"},\n+)\n+move-cursor-to: \".search-input\"\n+focus: \".result-fn\"\n+assert-css: (\n+    \".result-fn:focus\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n+)\n+assert-css: (\n+    \".result-fn:focus .fn\",\n+    {\"color\": \"rgb(173, 124, 55)\"},\n+)\n+\n+// Checking the `<a>` container.\n+move-cursor-to: \".search-input\"\n+focus: \".search-input\" // To ensure the `<a>` container isnt focus or hover.\n assert-css: (\n     \"//*[@class='result-name']/*[text()='test_docs::']/ancestor::a\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(221, 221, 221)\"},\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n )\n \n // Check the alias more specifically in the dark theme."}, {"sha": "ab2332d065655c1738d13c03334127a3b89198ec", "filename": "src/test/ui/lint/auxiliary/trivial-cast-ice.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Ftrivial-cast-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Ftrivial-cast-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Ftrivial-cast-ice.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -0,0 +1,7 @@\n+#[macro_export]\n+macro_rules! foo {\n+    () => {\n+        let x: &Option<i32> = &Some(1);\n+        let _y = x as *const Option<i32>;\n+    }\n+}"}, {"sha": "e31d14c55963922d953d9ea85fd0f19a0609e850", "filename": "src/test/ui/lint/redundant-semicolon/redundant-semi-proc-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fredundant-semicolon%2Fredundant-semi-proc-macro.stderr?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -1,4 +1,4 @@\n-TokenStream [Ident { ident: \"fn\", span: #0 bytes(198..200) }, Ident { ident: \"span_preservation\", span: #0 bytes(201..218) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(218..220) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(228..231) }, Ident { ident: \"tst\", span: #0 bytes(232..235) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(236..237) }, Literal { kind: Integer, symbol: \"123\", suffix: None, span: #0 bytes(238..241) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(241..242) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(242..243) }, Ident { ident: \"match\", span: #0 bytes(289..294) }, Ident { ident: \"tst\", span: #0 bytes(295..298) }, Group { delimiter: Brace, stream: TokenStream [Literal { kind: Integer, symbol: \"123\", suffix: None, span: #0 bytes(483..486) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(487..489) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(487..489) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(490..492) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(492..493) }, Ident { ident: \"_\", span: #0 bytes(502..503) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(504..506) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(504..506) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(507..509) }], span: #0 bytes(299..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(516..517) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(517..518) }], span: #0 bytes(222..562) }]\n+TokenStream [Ident { ident: \"fn\", span: #0 bytes(198..200) }, Ident { ident: \"span_preservation\", span: #0 bytes(201..218) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(218..220) }, Group { delimiter: Brace, stream: TokenStream [Ident { ident: \"let\", span: #0 bytes(228..231) }, Ident { ident: \"tst\", span: #0 bytes(232..235) }, Punct { ch: '=', spacing: Alone, span: #0 bytes(236..237) }, Literal { kind: Integer, symbol: \"123\", suffix: None, span: #0 bytes(238..241) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(241..242) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(242..243) }, Ident { ident: \"match\", span: #0 bytes(289..294) }, Ident { ident: \"tst\", span: #0 bytes(295..298) }, Group { delimiter: Brace, stream: TokenStream [Literal { kind: Integer, symbol: \"123\", suffix: None, span: #0 bytes(483..486) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(487..488) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(488..489) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(490..492) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(492..493) }, Ident { ident: \"_\", span: #0 bytes(502..503) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(504..505) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(505..506) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(507..509) }], span: #0 bytes(299..515) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(515..516) }, Punct { ch: ';', spacing: Joint, span: #0 bytes(516..517) }, Punct { ch: ';', spacing: Alone, span: #0 bytes(517..518) }], span: #0 bytes(222..562) }]\n error: unnecessary trailing semicolon\n   --> $DIR/redundant-semi-proc-macro.rs:9:19\n    |"}, {"sha": "f781fab2212cc535526762ba12910aea035f5f23", "filename": "src/test/ui/lint/trivial-cast-ice.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Flint%2Ftrivial-cast-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Flint%2Ftrivial-cast-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftrivial-cast-ice.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:trivial-cast-ice.rs\n+// check-pass\n+\n+// Demonstrates the ICE in #102561\n+\n+#![deny(trivial_casts)]\n+\n+extern crate trivial_cast_ice;\n+\n+fn main() {\n+    trivial_cast_ice::foo!();\n+}"}, {"sha": "b12eb587fc790354dcbdc87fe64262613613d5b6", "filename": "src/test/ui/proc-macro/attr-complex-fn.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattr-complex-fn.stdout?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -53,12 +53,12 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '>',\n         spacing: Joint,\n-        span: $DIR/attr-complex-fn.rs:19:36: 19:38 (#0),\n+        span: $DIR/attr-complex-fn.rs:19:36: 19:37 (#0),\n     },\n     Punct {\n         ch: '>',\n         spacing: Joint,\n-        span: $DIR/attr-complex-fn.rs:19:36: 19:38 (#0),\n+        span: $DIR/attr-complex-fn.rs:19:37: 19:38 (#0),\n     },\n     Punct {\n         ch: '>',"}, {"sha": "b88fbd3e89776a169017725e842e610218350678", "filename": "src/test/ui/proc-macro/capture-macro-rules-invoke.stdout", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcapture-macro-rules-invoke.stdout?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -177,12 +177,12 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: $DIR/capture-macro-rules-invoke.rs:45:16: 45:18 (#0),\n+                span: $DIR/capture-macro-rules-invoke.rs:45:16: 45:17 (#0),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/capture-macro-rules-invoke.rs:45:16: 45:18 (#0),\n+                span: $DIR/capture-macro-rules-invoke.rs:45:17: 45:18 (#0),\n             },\n             Ident {\n                 ident: \"option\",\n@@ -191,12 +191,12 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: $DIR/capture-macro-rules-invoke.rs:45:24: 45:26 (#0),\n+                span: $DIR/capture-macro-rules-invoke.rs:45:24: 45:25 (#0),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/capture-macro-rules-invoke.rs:45:24: 45:26 (#0),\n+                span: $DIR/capture-macro-rules-invoke.rs:45:25: 45:26 (#0),\n             },\n             Ident {\n                 ident: \"Option\",\n@@ -231,12 +231,12 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                     Punct {\n                         ch: ':',\n                         spacing: Joint,\n-                        span: $DIR/capture-macro-rules-invoke.rs:46:24: 46:26 (#0),\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:24: 46:25 (#0),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Alone,\n-                        span: $DIR/capture-macro-rules-invoke.rs:46:24: 46:26 (#0),\n+                        span: $DIR/capture-macro-rules-invoke.rs:46:25: 46:26 (#0),\n                     },\n                     Ident {\n                         ident: \"path\","}, {"sha": "102bd6b7b1757996ba2f991776bb102f5507fa4c", "filename": "src/test/ui/proc-macro/debug/dump-debug-span-debug.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -2,14 +2,19 @@\n // aux-build:macro-dump-debug.rs\n // compile-flags: -Z span-debug\n \n+\n extern crate macro_dump_debug;\n use macro_dump_debug::dump_debug;\n \n dump_debug! {\n     ident   // ident\n     r#ident // raw ident\n     ,       // alone punct\n-    ==>     // joint punct\n+    &&      // joint punct, two-char op\n+    ||>     // joint punct, two-char op + one-char op\n+    ||<<    // joint punct, two-char op + two-char op\n+    ..=     // joint punct, three-char op\n+    <<=!    // joint punct, three-char op + one-char-op\n     ()      // empty group\n     [_]     // nonempty group\n "}, {"sha": "fa65cbbf1eae50cff47d92651f81221dd2a368f3", "filename": "src/test/ui/proc-macro/debug/dump-debug-span-debug.stderr", "status": "modified", "additions": 96, "deletions": 31, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.stderr?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -1,166 +1,231 @@\n-TokenStream [Ident { ident: \"ident\", span: $DIR/dump-debug-span-debug.rs:9:5: 9:10 (#0) }, Ident { ident: \"r#ident\", span: $DIR/dump-debug-span-debug.rs:10:5: 10:12 (#0) }, Punct { ch: ',', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:11:5: 11:6 (#0) }, Punct { ch: '=', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 (#0) }, Punct { ch: '=', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 (#0) }, Punct { ch: '>', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:12:7: 12:8 (#0) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/dump-debug-span-debug.rs:13:5: 13:7 (#0) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: \"_\", span: $DIR/dump-debug-span-debug.rs:14:6: 14:7 (#0) }], span: $DIR/dump-debug-span-debug.rs:14:5: 14:8 (#0) }, Literal { kind: Integer, symbol: \"0\", suffix: None, span: $DIR/dump-debug-span-debug.rs:17:5: 17:6 (#0) }, Literal { kind: Float, symbol: \"1.0\", suffix: None, span: $DIR/dump-debug-span-debug.rs:18:5: 18:8 (#0) }, Literal { kind: Str, symbol: \"S\", suffix: None, span: $DIR/dump-debug-span-debug.rs:19:5: 19:8 (#0) }, Literal { kind: ByteStr, symbol: \"B\", suffix: None, span: $DIR/dump-debug-span-debug.rs:20:5: 20:9 (#0) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: None, span: $DIR/dump-debug-span-debug.rs:21:5: 21:9 (#0) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: None, span: $DIR/dump-debug-span-debug.rs:22:5: 22:13 (#0) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: None, span: $DIR/dump-debug-span-debug.rs:23:5: 23:11 (#0) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: None, span: $DIR/dump-debug-span-debug.rs:24:5: 24:15 (#0) }, Literal { kind: Char, symbol: \"C\", suffix: None, span: $DIR/dump-debug-span-debug.rs:25:5: 25:8 (#0) }, Literal { kind: Byte, symbol: \"B\", suffix: None, span: $DIR/dump-debug-span-debug.rs:26:5: 26:9 (#0) }, Literal { kind: Integer, symbol: \"0\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:29:5: 29:7 (#0) }, Literal { kind: Float, symbol: \"1.0\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:30:5: 30:9 (#0) }, Literal { kind: Str, symbol: \"S\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:31:5: 31:9 (#0) }, Literal { kind: ByteStr, symbol: \"B\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:32:5: 32:10 (#0) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:33:5: 33:10 (#0) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:34:5: 34:14 (#0) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:35:5: 35:12 (#0) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:36:5: 36:16 (#0) }, Literal { kind: Char, symbol: \"C\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:37:5: 37:9 (#0) }, Literal { kind: Byte, symbol: \"B\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:38:5: 38:10 (#0) }]\n+TokenStream [Ident { ident: \"ident\", span: $DIR/dump-debug-span-debug.rs:10:5: 10:10 (#0) }, Ident { ident: \"r#ident\", span: $DIR/dump-debug-span-debug.rs:11:5: 11:12 (#0) }, Punct { ch: ',', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:12:5: 12:6 (#0) }, Punct { ch: '&', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:13:5: 13:6 (#0) }, Punct { ch: '&', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:13:6: 13:7 (#0) }, Punct { ch: '|', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:14:5: 14:6 (#0) }, Punct { ch: '|', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:14:6: 14:7 (#0) }, Punct { ch: '>', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:14:7: 14:8 (#0) }, Punct { ch: '|', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:15:5: 15:6 (#0) }, Punct { ch: '|', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:15:6: 15:7 (#0) }, Punct { ch: '<', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:15:7: 15:8 (#0) }, Punct { ch: '<', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:15:8: 15:9 (#0) }, Punct { ch: '.', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:16:5: 16:6 (#0) }, Punct { ch: '.', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:16:6: 16:7 (#0) }, Punct { ch: '=', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:16:7: 16:8 (#0) }, Punct { ch: '<', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:17:5: 17:6 (#0) }, Punct { ch: '<', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:17:6: 17:7 (#0) }, Punct { ch: '=', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:17:7: 17:8 (#0) }, Punct { ch: '!', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:17:8: 17:9 (#0) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/dump-debug-span-debug.rs:18:5: 18:7 (#0) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: \"_\", span: $DIR/dump-debug-span-debug.rs:19:6: 19:7 (#0) }], span: $DIR/dump-debug-span-debug.rs:19:5: 19:8 (#0) }, Literal { kind: Integer, symbol: \"0\", suffix: None, span: $DIR/dump-debug-span-debug.rs:22:5: 22:6 (#0) }, Literal { kind: Float, symbol: \"1.0\", suffix: None, span: $DIR/dump-debug-span-debug.rs:23:5: 23:8 (#0) }, Literal { kind: Str, symbol: \"S\", suffix: None, span: $DIR/dump-debug-span-debug.rs:24:5: 24:8 (#0) }, Literal { kind: ByteStr, symbol: \"B\", suffix: None, span: $DIR/dump-debug-span-debug.rs:25:5: 25:9 (#0) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: None, span: $DIR/dump-debug-span-debug.rs:26:5: 26:9 (#0) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: None, span: $DIR/dump-debug-span-debug.rs:27:5: 27:13 (#0) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: None, span: $DIR/dump-debug-span-debug.rs:28:5: 28:11 (#0) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: None, span: $DIR/dump-debug-span-debug.rs:29:5: 29:15 (#0) }, Literal { kind: Char, symbol: \"C\", suffix: None, span: $DIR/dump-debug-span-debug.rs:30:5: 30:8 (#0) }, Literal { kind: Byte, symbol: \"B\", suffix: None, span: $DIR/dump-debug-span-debug.rs:31:5: 31:9 (#0) }, Literal { kind: Integer, symbol: \"0\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:34:5: 34:7 (#0) }, Literal { kind: Float, symbol: \"1.0\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:35:5: 35:9 (#0) }, Literal { kind: Str, symbol: \"S\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:36:5: 36:9 (#0) }, Literal { kind: ByteStr, symbol: \"B\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:37:5: 37:10 (#0) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:38:5: 38:10 (#0) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:39:5: 39:14 (#0) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:40:5: 40:12 (#0) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:41:5: 41:16 (#0) }, Literal { kind: Char, symbol: \"C\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:42:5: 42:9 (#0) }, Literal { kind: Byte, symbol: \"B\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:43:5: 43:10 (#0) }]\n TokenStream [\n     Ident {\n         ident: \"ident\",\n-        span: $DIR/dump-debug-span-debug.rs:9:5: 9:10 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:10:5: 10:10 (#0),\n     },\n     Ident {\n         ident: \"r#ident\",\n-        span: $DIR/dump-debug-span-debug.rs:10:5: 10:12 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:11:5: 11:12 (#0),\n     },\n     Punct {\n         ch: ',',\n         spacing: Alone,\n-        span: $DIR/dump-debug-span-debug.rs:11:5: 11:6 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:12:5: 12:6 (#0),\n+    },\n+    Punct {\n+        ch: '&',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:13:5: 13:6 (#0),\n+    },\n+    Punct {\n+        ch: '&',\n+        spacing: Alone,\n+        span: $DIR/dump-debug-span-debug.rs:13:6: 13:7 (#0),\n+    },\n+    Punct {\n+        ch: '|',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:14:5: 14:6 (#0),\n+    },\n+    Punct {\n+        ch: '|',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:14:6: 14:7 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/dump-debug-span-debug.rs:14:7: 14:8 (#0),\n+    },\n+    Punct {\n+        ch: '|',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:15:5: 15:6 (#0),\n+    },\n+    Punct {\n+        ch: '|',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:15:6: 15:7 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:15:7: 15:8 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Alone,\n+        span: $DIR/dump-debug-span-debug.rs:15:8: 15:9 (#0),\n+    },\n+    Punct {\n+        ch: '.',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:16:5: 16:6 (#0),\n+    },\n+    Punct {\n+        ch: '.',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:16:6: 16:7 (#0),\n     },\n     Punct {\n         ch: '=',\n+        spacing: Alone,\n+        span: $DIR/dump-debug-span-debug.rs:16:7: 16:8 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n         spacing: Joint,\n-        span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:17:5: 17:6 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Joint,\n+        span: $DIR/dump-debug-span-debug.rs:17:6: 17:7 (#0),\n     },\n     Punct {\n         ch: '=',\n         spacing: Joint,\n-        span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:17:7: 17:8 (#0),\n     },\n     Punct {\n-        ch: '>',\n+        ch: '!',\n         spacing: Alone,\n-        span: $DIR/dump-debug-span-debug.rs:12:7: 12:8 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:17:8: 17:9 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [],\n-        span: $DIR/dump-debug-span-debug.rs:13:5: 13:7 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:18:5: 18:7 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"_\",\n-                span: $DIR/dump-debug-span-debug.rs:14:6: 14:7 (#0),\n+                span: $DIR/dump-debug-span-debug.rs:19:6: 19:7 (#0),\n             },\n         ],\n-        span: $DIR/dump-debug-span-debug.rs:14:5: 14:8 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:19:5: 19:8 (#0),\n     },\n     Literal {\n         kind: Integer,\n         symbol: \"0\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:17:5: 17:6 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:22:5: 22:6 (#0),\n     },\n     Literal {\n         kind: Float,\n         symbol: \"1.0\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:18:5: 18:8 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:23:5: 23:8 (#0),\n     },\n     Literal {\n         kind: Str,\n         symbol: \"S\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:19:5: 19:8 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:24:5: 24:8 (#0),\n     },\n     Literal {\n         kind: ByteStr,\n         symbol: \"B\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:20:5: 20:9 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:25:5: 25:9 (#0),\n     },\n     Literal {\n         kind: StrRaw(0),\n         symbol: \"R\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:21:5: 21:9 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:26:5: 26:9 (#0),\n     },\n     Literal {\n         kind: StrRaw(2),\n         symbol: \"R\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:22:5: 22:13 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:27:5: 27:13 (#0),\n     },\n     Literal {\n         kind: ByteStrRaw(0),\n         symbol: \"BR\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:23:5: 23:11 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:28:5: 28:11 (#0),\n     },\n     Literal {\n         kind: ByteStrRaw(2),\n         symbol: \"BR\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:24:5: 24:15 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:29:5: 29:15 (#0),\n     },\n     Literal {\n         kind: Char,\n         symbol: \"C\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:25:5: 25:8 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:30:5: 30:8 (#0),\n     },\n     Literal {\n         kind: Byte,\n         symbol: \"B\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:26:5: 26:9 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:31:5: 31:9 (#0),\n     },\n     Literal {\n         kind: Integer,\n         symbol: \"0\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:29:5: 29:7 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:34:5: 34:7 (#0),\n     },\n     Literal {\n         kind: Float,\n         symbol: \"1.0\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:30:5: 30:9 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:35:5: 35:9 (#0),\n     },\n     Literal {\n         kind: Str,\n         symbol: \"S\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:31:5: 31:9 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:36:5: 36:9 (#0),\n     },\n     Literal {\n         kind: ByteStr,\n         symbol: \"B\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:32:5: 32:10 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:37:5: 37:10 (#0),\n     },\n     Literal {\n         kind: StrRaw(0),\n         symbol: \"R\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:33:5: 33:10 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:38:5: 38:10 (#0),\n     },\n     Literal {\n         kind: StrRaw(2),\n         symbol: \"R\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:34:5: 34:14 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:39:5: 39:14 (#0),\n     },\n     Literal {\n         kind: ByteStrRaw(0),\n         symbol: \"BR\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:35:5: 35:12 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:40:5: 40:12 (#0),\n     },\n     Literal {\n         kind: ByteStrRaw(2),\n         symbol: \"BR\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:36:5: 36:16 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:41:5: 41:16 (#0),\n     },\n     Literal {\n         kind: Char,\n         symbol: \"C\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:37:5: 37:9 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:42:5: 42:9 (#0),\n     },\n     Literal {\n         kind: Byte,\n         symbol: \"B\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:38:5: 38:10 (#0),\n+        span: $DIR/dump-debug-span-debug.rs:43:5: 43:10 (#0),\n     },\n ]"}, {"sha": "db422b6012aea611f6892edf6915bc40b16270ef", "filename": "src/test/ui/proc-macro/debug/dump-debug.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug.stderr?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -1,4 +1,4 @@\n-TokenStream [Ident { ident: \"ident\", span: #0 bytes(130..135) }, Ident { ident: \"r#ident\", span: #0 bytes(151..158) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(176..177) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(203..205) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(203..205) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(205..206) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(230..232) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: \"_\", span: #0 bytes(258..259) }], span: #0 bytes(257..260) }, Literal { kind: Integer, symbol: \"0\", suffix: None, span: #0 bytes(315..316) }, Literal { kind: Float, symbol: \"1.0\", suffix: None, span: #0 bytes(321..324) }, Literal { kind: Str, symbol: \"S\", suffix: None, span: #0 bytes(329..332) }, Literal { kind: ByteStr, symbol: \"B\", suffix: None, span: #0 bytes(337..341) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: None, span: #0 bytes(346..350) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: None, span: #0 bytes(355..363) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: None, span: #0 bytes(368..374) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: None, span: #0 bytes(379..389) }, Literal { kind: Char, symbol: \"C\", suffix: None, span: #0 bytes(394..397) }, Literal { kind: Byte, symbol: \"B\", suffix: None, span: #0 bytes(402..406) }, Literal { kind: Integer, symbol: \"0\", suffix: Some(\"q\"), span: #0 bytes(437..439) }, Literal { kind: Float, symbol: \"1.0\", suffix: Some(\"q\"), span: #0 bytes(444..448) }, Literal { kind: Str, symbol: \"S\", suffix: Some(\"q\"), span: #0 bytes(453..457) }, Literal { kind: ByteStr, symbol: \"B\", suffix: Some(\"q\"), span: #0 bytes(462..467) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: Some(\"q\"), span: #0 bytes(472..477) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: Some(\"q\"), span: #0 bytes(482..491) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: Some(\"q\"), span: #0 bytes(496..503) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: Some(\"q\"), span: #0 bytes(508..519) }, Literal { kind: Char, symbol: \"C\", suffix: Some(\"q\"), span: #0 bytes(524..528) }, Literal { kind: Byte, symbol: \"B\", suffix: Some(\"q\"), span: #0 bytes(533..538) }]\n+TokenStream [Ident { ident: \"ident\", span: #0 bytes(130..135) }, Ident { ident: \"r#ident\", span: #0 bytes(151..158) }, Punct { ch: ',', spacing: Alone, span: #0 bytes(176..177) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(203..204) }, Punct { ch: '=', spacing: Joint, span: #0 bytes(204..205) }, Punct { ch: '>', spacing: Alone, span: #0 bytes(205..206) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: #0 bytes(230..232) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: \"_\", span: #0 bytes(258..259) }], span: #0 bytes(257..260) }, Literal { kind: Integer, symbol: \"0\", suffix: None, span: #0 bytes(315..316) }, Literal { kind: Float, symbol: \"1.0\", suffix: None, span: #0 bytes(321..324) }, Literal { kind: Str, symbol: \"S\", suffix: None, span: #0 bytes(329..332) }, Literal { kind: ByteStr, symbol: \"B\", suffix: None, span: #0 bytes(337..341) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: None, span: #0 bytes(346..350) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: None, span: #0 bytes(355..363) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: None, span: #0 bytes(368..374) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: None, span: #0 bytes(379..389) }, Literal { kind: Char, symbol: \"C\", suffix: None, span: #0 bytes(394..397) }, Literal { kind: Byte, symbol: \"B\", suffix: None, span: #0 bytes(402..406) }, Literal { kind: Integer, symbol: \"0\", suffix: Some(\"q\"), span: #0 bytes(437..439) }, Literal { kind: Float, symbol: \"1.0\", suffix: Some(\"q\"), span: #0 bytes(444..448) }, Literal { kind: Str, symbol: \"S\", suffix: Some(\"q\"), span: #0 bytes(453..457) }, Literal { kind: ByteStr, symbol: \"B\", suffix: Some(\"q\"), span: #0 bytes(462..467) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: Some(\"q\"), span: #0 bytes(472..477) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: Some(\"q\"), span: #0 bytes(482..491) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: Some(\"q\"), span: #0 bytes(496..503) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: Some(\"q\"), span: #0 bytes(508..519) }, Literal { kind: Char, symbol: \"C\", suffix: Some(\"q\"), span: #0 bytes(524..528) }, Literal { kind: Byte, symbol: \"B\", suffix: Some(\"q\"), span: #0 bytes(533..538) }]\n TokenStream [\n     Ident {\n         ident: \"ident\",\n@@ -16,12 +16,12 @@ TokenStream [\n     Punct {\n         ch: '=',\n         spacing: Joint,\n-        span: #0 bytes(203..205),\n+        span: #0 bytes(203..204),\n     },\n     Punct {\n         ch: '=',\n         spacing: Joint,\n-        span: #0 bytes(203..205),\n+        span: #0 bytes(204..205),\n     },\n     Punct {\n         ch: '>',"}, {"sha": "2622c005d937f87ead8cf051ade37a2449159e21", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -18,12 +18,12 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: $DIR/dollar-crate-issue-57089.rs:17:28: 17:30 (#4),\n+                span: $DIR/dollar-crate-issue-57089.rs:17:28: 17:29 (#4),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/dollar-crate-issue-57089.rs:17:28: 17:30 (#4),\n+                span: $DIR/dollar-crate-issue-57089.rs:17:29: 17:30 (#4),\n             },\n             Ident {\n                 ident: \"S\",\n@@ -58,12 +58,12 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: $DIR/dollar-crate-issue-57089.rs:21:24: 21:26 (#4),\n+                span: $DIR/dollar-crate-issue-57089.rs:21:24: 21:25 (#4),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/dollar-crate-issue-57089.rs:21:24: 21:26 (#4),\n+                span: $DIR/dollar-crate-issue-57089.rs:21:25: 21:26 (#4),\n             },\n             Ident {\n                 ident: \"S\","}, {"sha": "a91908239c3f83d652de238dd7d73f1423ca1855", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -30,12 +30,12 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n                     Punct {\n                         ch: ':',\n                         spacing: Joint,\n-                        span: $DIR/dollar-crate-issue-62325.rs:19:30: 19:32 (#4),\n+                        span: $DIR/dollar-crate-issue-62325.rs:19:30: 19:31 (#4),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Alone,\n-                        span: $DIR/dollar-crate-issue-62325.rs:19:30: 19:32 (#4),\n+                        span: $DIR/dollar-crate-issue-62325.rs:19:31: 19:32 (#4),\n                     },\n                     Ident {\n                         ident: \"S\",\n@@ -85,12 +85,12 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n                     Punct {\n                         ch: ':',\n                         spacing: Joint,\n-                        span: $DIR/auxiliary/dollar-crate-external.rs:21:30: 21:32 (#12),\n+                        span: $DIR/auxiliary/dollar-crate-external.rs:21:30: 21:31 (#12),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Alone,\n-                        span: $DIR/auxiliary/dollar-crate-external.rs:21:30: 21:32 (#12),\n+                        span: $DIR/auxiliary/dollar-crate-external.rs:21:31: 21:32 (#12),\n                     },\n                     Ident {\n                         ident: \"S\","}, {"sha": "4e169d47e1ab2276c06ffb633631bf92affbcb02", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -18,12 +18,12 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: $DIR/dollar-crate.rs:20:32: 20:34 (#4),\n+                span: $DIR/dollar-crate.rs:20:32: 20:33 (#4),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/dollar-crate.rs:20:32: 20:34 (#4),\n+                span: $DIR/dollar-crate.rs:20:33: 20:34 (#4),\n             },\n             Ident {\n                 ident: \"S\",\n@@ -58,12 +58,12 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: $DIR/dollar-crate.rs:24:28: 24:30 (#4),\n+                span: $DIR/dollar-crate.rs:24:28: 24:29 (#4),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/dollar-crate.rs:24:28: 24:30 (#4),\n+                span: $DIR/dollar-crate.rs:24:29: 24:30 (#4),\n             },\n             Ident {\n                 ident: \"S\",\n@@ -98,12 +98,12 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: $DIR/dollar-crate.rs:27:28: 27:30 (#4),\n+                span: $DIR/dollar-crate.rs:27:28: 27:29 (#4),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/dollar-crate.rs:27:28: 27:30 (#4),\n+                span: $DIR/dollar-crate.rs:27:29: 27:30 (#4),\n             },\n             Ident {\n                 ident: \"S\",\n@@ -138,12 +138,12 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: $DIR/auxiliary/dollar-crate-external.rs:7:28: 7:30 (#15),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:7:28: 7:29 (#15),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/auxiliary/dollar-crate-external.rs:7:28: 7:30 (#15),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:7:29: 7:30 (#15),\n             },\n             Ident {\n                 ident: \"S\",\n@@ -178,12 +178,12 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: $DIR/auxiliary/dollar-crate-external.rs:11:24: 11:26 (#15),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:11:24: 11:25 (#15),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/auxiliary/dollar-crate-external.rs:11:24: 11:26 (#15),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:11:25: 11:26 (#15),\n             },\n             Ident {\n                 ident: \"S\",\n@@ -218,12 +218,12 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: $DIR/auxiliary/dollar-crate-external.rs:14:24: 14:26 (#15),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:14:24: 14:25 (#15),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/auxiliary/dollar-crate-external.rs:14:24: 14:26 (#15),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:14:25: 14:26 (#15),\n             },\n             Ident {\n                 ident: \"S\","}, {"sha": "ee8adf0b4a970572f3856ae14382b824327598f5", "filename": "src/test/ui/proc-macro/inner-attrs.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finner-attrs.stdout?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -627,12 +627,12 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n                                     Punct {\n                                         ch: '=',\n                                         spacing: Joint,\n-                                        span: $DIR/inner-attrs.rs:39:15: 39:17 (#0),\n+                                        span: $DIR/inner-attrs.rs:39:15: 39:16 (#0),\n                                     },\n                                     Punct {\n                                         ch: '>',\n                                         spacing: Alone,\n-                                        span: $DIR/inner-attrs.rs:39:15: 39:17 (#0),\n+                                        span: $DIR/inner-attrs.rs:39:16: 39:17 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Brace,"}, {"sha": "83afd0d3eaec3f9d8015b6857d509457f52bf6e5", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -489,12 +489,12 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n                                     Punct {\n                                         ch: '=',\n                                         spacing: Joint,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:33:32: 33:34 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:33:32: 33:33 (#0),\n                                     },\n                                     Punct {\n                                         ch: '>',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:33:32: 33:34 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:33:33: 33:34 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Brace,\n@@ -567,12 +567,12 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n                                     Punct {\n                                         ch: '=',\n                                         spacing: Joint,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:34:60: 34:62 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:34:60: 34:61 (#0),\n                                     },\n                                     Punct {\n                                         ch: '>',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:34:60: 34:62 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:34:61: 34:62 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Brace,\n@@ -591,12 +591,12 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n                                     Punct {\n                                         ch: '=',\n                                         spacing: Joint,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:35:15: 35:17 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:35:15: 35:16 (#0),\n                                     },\n                                     Punct {\n                                         ch: '>',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:35:15: 35:17 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:35:16: 35:17 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Brace,\n@@ -1519,12 +1519,12 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n                                     Punct {\n                                         ch: '=',\n                                         spacing: Joint,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:34:60: 34:62 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:34:60: 34:61 (#0),\n                                     },\n                                     Punct {\n                                         ch: '>',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:34:60: 34:62 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:34:61: 34:62 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Brace,\n@@ -1543,12 +1543,12 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n                                     Punct {\n                                         ch: '=',\n                                         spacing: Joint,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:35:15: 35:17 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:35:15: 35:16 (#0),\n                                     },\n                                     Punct {\n                                         ch: '>',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:35:15: 35:17 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:35:16: 35:17 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Brace,"}, {"sha": "09eb33f7e31a14b6826af9aa7ac5658fcd5c5a20", "filename": "src/test/ui/proc-macro/issue-76182-leading-vert-pat.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fissue-76182-leading-vert-pat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fissue-76182-leading-vert-pat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-76182-leading-vert-pat.stdout?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -41,12 +41,12 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n                     Punct {\n                         ch: '=',\n                         spacing: Joint,\n-                        span: $DIR/issue-76182-leading-vert-pat.rs:15:21: 15:23 (#0),\n+                        span: $DIR/issue-76182-leading-vert-pat.rs:15:21: 15:22 (#0),\n                     },\n                     Punct {\n                         ch: '>',\n                         spacing: Alone,\n-                        span: $DIR/issue-76182-leading-vert-pat.rs:15:21: 15:23 (#0),\n+                        span: $DIR/issue-76182-leading-vert-pat.rs:15:22: 15:23 (#0),\n                     },\n                     Group {\n                         delimiter: Parenthesis,"}, {"sha": "2494af1208f1485848b94c22c9a8dd7f45107155", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -1,5 +1,5 @@\n Def site: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5)\n-Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:24:37: 24:43 (#4) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:24:43: 24:45 (#4) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:24:43: 24:45 (#4) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:24:45: 24:50 (#4) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:24:50: 24:51 (#4) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:24:51: 24:53 (#4) }]\n+Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:24:37: 24:43 (#4) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:24:43: 24:44 (#4) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:24:44: 24:45 (#4) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:24:45: 24:50 (#4) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:24:50: 24:51 (#4) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:24:51: 24:53 (#4) }]\n Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: ':', spacing: Joint, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: ':', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Ident { ident: \"dummy\", span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Punct { ch: '!', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/auxiliary/make-macro.rs:7:9: 7:56 (#5) }]\n #![feature /* 0#0 */(prelude_import)]\n // aux-build:make-macro.rs"}, {"sha": "9cdb2a21b04b371729de18e70fc3d4e92a73f928", "filename": "src/test/ui/proc-macro/three-equals.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -8,16 +8,16 @@ LL |     three_equals!(==);\n    = note: this error originates in the macro `three_equals` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected EOF, found `=`.\n-  --> $DIR/three-equals.rs:15:21\n+  --> $DIR/three-equals.rs:15:22\n    |\n LL |     three_equals!(=====);\n-   |                     ^^\n+   |                      ^\n    |\n note: last good input was here\n   --> $DIR/three-equals.rs:15:21\n    |\n LL |     three_equals!(=====);\n-   |                     ^^\n+   |                     ^\n    = help: input must be: `===`\n \n error: expected `=`, found `abc`."}, {"sha": "d0a938c03e803eed65017f3624f21be74f31d648", "filename": "src/test/ui/process/process-panic-after-fork.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -6,6 +6,7 @@\n // ignore-emscripten no processes\n // ignore-sgx no processes\n // ignore-android: FIXME(#85261)\n+// ignore-fuchsia no fork\n \n #![feature(rustc_private)]\n #![feature(never_type)]"}, {"sha": "5dd163715eb494ce99cb25d5a1a599cce6dc7f7e", "filename": "src/test/ui/simd/target-feature-mixup.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fsimd%2Ftarget-feature-mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fsimd%2Ftarget-feature-mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Ftarget-feature-mixup.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -5,6 +5,7 @@\n \n // ignore-emscripten\n // ignore-sgx no processes\n+// ignore-fuchsia must translate zircon signal to SIGILL, FIXME (#58590)\n \n #![feature(repr_simd, target_feature, cfg_target_feature)]\n #![feature(avx512_target_feature)]"}, {"sha": "cf381d9da8be98cef2bdad6d69ca62713d24a95b", "filename": "src/test/ui/suggestions/sugg-else-for-closure.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.fixed?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn main() {\n+    let x = \"com.example.app\";\n+    let y: Option<&str> = None;\n+    let _s = y.unwrap_or_else(|| x.split('.').nth(1).unwrap());\n+    //~^ ERROR: mismatched types [E0308]\n+}"}, {"sha": "540ced91fc950690a93efaf6cebc97628c4a5c86", "filename": "src/test/ui/suggestions/sugg-else-for-closure.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.rs?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn main() {\n+    let x = \"com.example.app\";\n+    let y: Option<&str> = None;\n+    let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n+    //~^ ERROR: mismatched types [E0308]\n+}"}, {"sha": "55a0eee18179a17b4a1afab55efbe4eafd1a389a", "filename": "src/test/ui/suggestions/sugg-else-for-closure.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1112099eba41abadb6f921df7edba70affe92c5/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr?ref=f1112099eba41abadb6f921df7edba70affe92c5", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/sugg-else-for-closure.rs:6:26\n+   |\n+LL |     let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n+   |                --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found closure\n+   |                |\n+   |                arguments to this function are incorrect\n+   |\n+   = note: expected reference `&str`\n+                found closure `[closure@$DIR/sugg-else-for-closure.rs:6:26: 6:28]`\n+note: associated function defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub const fn unwrap_or(self, default: T) -> T\n+   |                  ^^^^^^^^^\n+help: try calling `unwrap_or_else` instead\n+   |\n+LL |     let _s = y.unwrap_or_else(|| x.split('.').nth(1).unwrap());\n+   |                         +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}