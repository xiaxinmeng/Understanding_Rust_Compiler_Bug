{"sha": "dc4b2771f828103624a3109f38bd0ca1a9e924f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNGIyNzcxZjgyODEwMzYyNGEzMTA5ZjM4YmQwY2ExYTllOTI0Zjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-11T09:15:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-13T07:09:03Z"}, "message": "validation: accept pointers in integer arrays", "tree": {"sha": "1a8824a997761af21f59931f0eaf1cfda1da6cda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a8824a997761af21f59931f0eaf1cfda1da6cda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc4b2771f828103624a3109f38bd0ca1a9e924f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4b2771f828103624a3109f38bd0ca1a9e924f8", "html_url": "https://github.com/rust-lang/rust/commit/dc4b2771f828103624a3109f38bd0ca1a9e924f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc4b2771f828103624a3109f38bd0ca1a9e924f8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c96eb706f0ddee1357f5b1d81683746390ef1d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/c96eb706f0ddee1357f5b1d81683746390ef1d01", "html_url": "https://github.com/rust-lang/rust/commit/c96eb706f0ddee1357f5b1d81683746390ef1d01"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "781673a9914720274c23cb2e23b4afd0e3aa0d5d", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc4b2771f828103624a3109f38bd0ca1a9e924f8/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4b2771f828103624a3109f38bd0ca1a9e924f8/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=dc4b2771f828103624a3109f38bd0ca1a9e924f8", "patch": "@@ -650,7 +650,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     }\n \n     /// It is the caller's responsibility to handle undefined and pointer bytes.\n-    /// However, this still checks that there are no relocations on the egdes.\n+    /// However, this still checks that there are no relocations on the *egdes*.\n     #[inline]\n     fn get_bytes_with_undef_and_ptr(\n         &self,\n@@ -842,6 +842,28 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         }\n     }\n \n+    pub fn check_bytes(\n+        &self,\n+        ptr: Scalar<M::PointerTag>,\n+        size: Size,\n+        allow_ptr: bool,\n+    ) -> EvalResult<'tcx> {\n+        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n+        let align = Align::from_bytes(1, 1).unwrap();\n+        if size.bytes() == 0 {\n+            self.check_align(ptr, align)?;\n+            return Ok(());\n+        }\n+        let ptr = ptr.to_ptr()?;\n+        self.get_bytes_with_undef_and_ptr(ptr, size, align)?;\n+        // Check undef, and maybe ptr\n+        self.check_defined(ptr, size)?;\n+        if !allow_ptr {\n+            self.check_relocations(ptr, size)?;\n+        }\n+        Ok(())\n+    }\n+\n     pub fn read_bytes(&self, ptr: Scalar<M::PointerTag>, size: Size) -> EvalResult<'tcx, &[u8]> {\n         // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n         let align = Align::from_bytes(1, 1).unwrap();"}, {"sha": "2c5a3a1812820acf01edada3b487e4f6e7348f02", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc4b2771f828103624a3109f38bd0ca1a9e924f8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4b2771f828103624a3109f38bd0ca1a9e924f8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=dc4b2771f828103624a3109f38bd0ca1a9e924f8", "patch": "@@ -496,9 +496,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     }\n                     // Special handling for arrays/slices of builtin integer types\n                     ty::Array(tys, ..) | ty::Slice(tys) if {\n-                        // This optimization applies only for integer types\n+                        // This optimization applies only for integer and floating point types\n+                        // (i.e., types that can hold arbitrary bytes).\n                         match tys.sty {\n-                            ty::Int(..) | ty::Uint(..) => true,\n+                            ty::Int(..) | ty::Uint(..) | ty::Float(..) => true,\n                             _ => false,\n                         }\n                     } => {\n@@ -510,9 +511,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         // This is the size in bytes of the whole array.\n                         let size = Size::from_bytes(ty_size * len);\n \n-                        match self.memory.read_bytes(dest.ptr, size) {\n+                        // In run-time mode, we accept points in here.  This is actually more\n+                        // permissive than a per-element check would be, e.g. we accept\n+                        // an &[u8] that contains a pointer even though bytewise checking would\n+                        // reject it.  However, that's good: We don't inherently want\n+                        // to reject those pointers, we just do not have the machinery to\n+                        // talk about parts of a pointer.\n+                        match self.memory.check_bytes(dest.ptr, size, /*allow_ptr*/!const_mode) {\n                             // In the happy case, we needn't check anything else.\n-                            Ok(_) => {},\n+                            Ok(()) => {},\n                             // Some error happened, try to provide a more detailed description.\n                             Err(err) => {\n                                 // For some errors we might be able to provide extra information"}, {"sha": "584dc0691698ae520ee7a4e90f44804da0e797e8", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc4b2771f828103624a3109f38bd0ca1a9e924f8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4b2771f828103624a3109f38bd0ca1a9e924f8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=dc4b2771f828103624a3109f38bd0ca1a9e924f8", "patch": "@@ -21,6 +21,9 @@ const NULL: &u16 = unsafe { mem::transmute(0usize) };\n const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n //~^ ERROR this constant likely exhibits undefined behavior\n \n+const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n+//~^ ERROR this constant likely exhibits undefined behavior\n+\n const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n //~^ ERROR this constant likely exhibits undefined behavior\n "}, {"sha": "8bcb6d190b89a8b3e7a977b342cdd6b95bad0f68", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc4b2771f828103624a3109f38bd0ca1a9e924f8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc4b2771f828103624a3109f38bd0ca1a9e924f8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=dc4b2771f828103624a3109f38bd0ca1a9e924f8", "patch": "@@ -25,11 +25,19 @@ LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/ub-ref.rs:24:1\n    |\n+LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: this constant likely exhibits undefined behavior\n+  --> $DIR/ub-ref.rs:27:1\n+   |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered integer pointer in non-ZST reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}