{"sha": "1c882842e06431767676887f97f9dcc0ee50a7b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjODgyODQyZTA2NDMxNzY3Njc2ODg3Zjk3ZjlkY2MwZWU1MGE3Yjk=", "commit": {"author": {"name": "Glenn Willen", "email": "gwillen@nerdnet.org", "date": "2012-07-08T23:04:57Z"}, "committer": {"name": "Glenn Willen", "email": "gwillen@nerdnet.org", "date": "2012-07-08T23:06:48Z"}, "message": "Add clear() to the map interface.\n\nAdd clear to the map interface, and implement it in hashmap and smallintmap.", "tree": {"sha": "902829cd0cff2b374ed3ea21a90cf0963225593c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/902829cd0cff2b374ed3ea21a90cf0963225593c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c882842e06431767676887f97f9dcc0ee50a7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c882842e06431767676887f97f9dcc0ee50a7b9", "html_url": "https://github.com/rust-lang/rust/commit/1c882842e06431767676887f97f9dcc0ee50a7b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c882842e06431767676887f97f9dcc0ee50a7b9/comments", "author": {"login": "gwillen", "id": 458997, "node_id": "MDQ6VXNlcjQ1ODk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gwillen", "html_url": "https://github.com/gwillen", "followers_url": "https://api.github.com/users/gwillen/followers", "following_url": "https://api.github.com/users/gwillen/following{/other_user}", "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}", "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions", "organizations_url": "https://api.github.com/users/gwillen/orgs", "repos_url": "https://api.github.com/users/gwillen/repos", "events_url": "https://api.github.com/users/gwillen/events{/privacy}", "received_events_url": "https://api.github.com/users/gwillen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gwillen", "id": 458997, "node_id": "MDQ6VXNlcjQ1ODk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/458997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gwillen", "html_url": "https://github.com/gwillen", "followers_url": "https://api.github.com/users/gwillen/followers", "following_url": "https://api.github.com/users/gwillen/following{/other_user}", "gists_url": "https://api.github.com/users/gwillen/gists{/gist_id}", "starred_url": "https://api.github.com/users/gwillen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gwillen/subscriptions", "organizations_url": "https://api.github.com/users/gwillen/orgs", "repos_url": "https://api.github.com/users/gwillen/repos", "events_url": "https://api.github.com/users/gwillen/events{/privacy}", "received_events_url": "https://api.github.com/users/gwillen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d95ab538c1c503c76b1d10211dd60c9d29091a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d95ab538c1c503c76b1d10211dd60c9d29091a2f", "html_url": "https://github.com/rust-lang/rust/commit/d95ab538c1c503c76b1d10211dd60c9d29091a2f"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "8a2089c6f2b3afd1ac6536dfae59ed7670322181", "filename": "src/libstd/map.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1c882842e06431767676887f97f9dcc0ee50a7b9/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c882842e06431767676887f97f9dcc0ee50a7b9/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=1c882842e06431767676887f97f9dcc0ee50a7b9", "patch": "@@ -60,6 +60,9 @@ iface map<K, V: copy> {\n      */\n     fn remove(K) -> option<V>;\n \n+    /// Clear the map, removing all key/value pairs.\n+    fn clear();\n+\n     /// Iterate over all the key/value pairs in the map\n     fn each(fn(K, V) -> bool);\n \n@@ -75,6 +78,8 @@ iface map<K, V: copy> {\n mod chained {\n     export t, mk, hashmap;\n \n+    const initial_capacity: uint = 32u; // 2^5\n+\n     type entry<K, V> = {\n         hash: uint,\n         key: K,\n@@ -255,6 +260,11 @@ mod chained {\n             }\n         }\n \n+        fn clear() {\n+            self.count = 0u;\n+            self.chains = chains(initial_capacity);\n+        }\n+\n         fn each(blk: fn(K,V) -> bool) {\n             for self.each_entry |entry| {\n                 if !blk(entry.key, copy entry.value) { break; }\n@@ -271,7 +281,6 @@ mod chained {\n     }\n \n     fn mk<K, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>) -> t<K,V> {\n-        let initial_capacity: uint = 32u; // 2^5\n         let slf: t<K, V> = @{mut count: 0u,\n                              mut chains: chains(initial_capacity),\n                              hasher: hasher,\n@@ -609,6 +618,18 @@ mod tests {\n         assert (option::get(map.find(key)) == \"val\");\n     }\n \n+    #[test]\n+    fn test_clear() {\n+        let key = \"k\";\n+        let map = map::hashmap::<str, str>(str::hash, str::eq);\n+        map.insert(key, \"val\");\n+        assert (map.size() == 1);\n+        assert (map.contains_key(key));\n+        map.clear();\n+        assert (map.size() == 0);\n+        assert (!map.contains_key(key));\n+    }\n+\n     #[test]\n     fn test_hash_from_vec() {\n         let map = map::hash_from_strs(~["}, {"sha": "1d17ba0dbb479b9da7e537587cddb71737f4fc60", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c882842e06431767676887f97f9dcc0ee50a7b9/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c882842e06431767676887f97f9dcc0ee50a7b9/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=1c882842e06431767676887f97f9dcc0ee50a7b9", "patch": "@@ -73,6 +73,9 @@ impl <V: copy> of map::map<uint, V> for smallintmap<V> {\n         self.v.set_elt(key, none);\n         old\n     }\n+    fn clear() {\n+        self.v.set(~[mut]);\n+    }\n     fn contains_key(&&key: uint) -> bool {\n         contains_key(self, key)\n     }"}]}