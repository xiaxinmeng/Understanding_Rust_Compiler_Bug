{"sha": "3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZjc1ZDU3NzRjYjlhN2NmODM5YTY5MzQxYzYyMGI5OGZhOWM3ZGY=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-09-11T18:10:43Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-09-14T09:36:09Z"}, "message": "Mark all extern functions as nounwind\n\nUnwinding across an FFI boundary is undefined behaviour, so we can mark\nall external function as nounwind. The obvious exception are those\nfunctions that actually perform the unwinding.", "tree": {"sha": "390d168efade16f67b4651405d89a0884d51ee0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/390d168efade16f67b4651405d89a0884d51ee0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "html_url": "https://github.com/rust-lang/rust/commit/3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e67bd489934702e4958a03bb4c948919d38920", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e67bd489934702e4958a03bb4c948919d38920", "html_url": "https://github.com/rust-lang/rust/commit/e4e67bd489934702e4958a03bb4c948919d38920"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "94408072932ea5d6a5ad1690602d1331b8eaaba9", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "patch": "@@ -79,6 +79,7 @@\n #![feature(optin_builtin_traits)]\n #![feature(reflect)]\n #![feature(rustc_attrs)]\n+#![feature(unwind_attributes)]\n #![cfg_attr(stage0, feature(simd))]\n #![cfg_attr(not(stage0), feature(repr_simd, platform_intrinsics))]\n #![feature(staged_api)]"}, {"sha": "93ddfa72f63ca78f65413726246f5a2a538365e4", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "patch": "@@ -62,6 +62,7 @@ pub fn panic_fmt(fmt: fmt::Arguments, file_line: &(&'static str, u32)) -> ! {\n     #[allow(improper_ctypes)]\n     extern {\n         #[lang = \"panic_fmt\"]\n+        #[unwind]\n         fn panic_impl(fmt: fmt::Arguments, file: &'static str, line: u32) -> !;\n     }\n     let (file, line) = *file_line;"}, {"sha": "cbb092aa4eb33b3ada7e399e4a1e2b3faaf451d9", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "patch": "@@ -211,6 +211,7 @@ pub fn register_foreign_item_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let llfn_ty = lltype_for_fn_from_foreign_types(ccx, &tys);\n \n     let llfn = get_extern_fn(ccx, &mut *ccx.externs().borrow_mut(), name, cc, llfn_ty, fty);\n+    attributes::unwind(llfn, false);\n     add_argument_attributes(&tys, llfn);\n     attributes::from_fn_attrs(ccx, attrs, llfn);\n     llfn"}, {"sha": "dc370d8382a4d4ada3b378bcf2f498d5786e15c4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "patch": "@@ -243,6 +243,7 @@\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(decode_utf16)]\n+#![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n #![feature(vec_resize)]\n #![feature(wrapping)]"}, {"sha": "c6bffb0f733eeab4223110db1017b4cd39f51921", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "patch": "@@ -124,10 +124,12 @@ extern \"C\" {\n     // iOS on armv7 uses SjLj exceptions and requires to link\n     // against corresponding routine (..._SjLj_...)\n     #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n+    #[unwind]\n     pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception)\n                                   -> _Unwind_Reason_Code;\n \n     #[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n+    #[unwind]\n     fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception)\n                                    -> _Unwind_Reason_Code;\n "}, {"sha": "738681c3cfed7469023d2e39cb74d44743c57ab4", "filename": "src/libstd/sys/common/unwind/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs?ref=3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "patch": "@@ -192,6 +192,7 @@ fn rust_panic(cause: Box<Any + Send + 'static>) -> ! {\n #[cfg(not(test))]\n /// Entry point of panic from the libcore crate.\n #[lang = \"panic_fmt\"]\n+#[unwind]\n pub extern fn rust_begin_unwind(msg: fmt::Arguments,\n                                 file: &'static str, line: u32) -> ! {\n     begin_unwind_fmt(msg, &(file, line))"}, {"sha": "a89e8b499acceae3d84c1fa2c8853621d26d775c", "filename": "src/libstd/sys/common/unwind/seh.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh.rs?ref=3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "patch": "@@ -62,6 +62,7 @@ static PANIC_DATA: StaticKey = StaticKey::new(None);\n \n // This function is provided by kernel32.dll\n extern \"system\" {\n+    #[unwind]\n     fn RaiseException(dwExceptionCode: DWORD,\n                       dwExceptionFlags: DWORD,\n                       nNumberOfArguments: DWORD,"}, {"sha": "9478678fda995eee75c746ba7ad031169967aa03", "filename": "src/libstd/sys/common/unwind/seh64_gnu.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fseh64_gnu.rs?ref=3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "patch": "@@ -93,6 +93,7 @@ pub enum EXCEPTION_DISPOSITION {\n \n // From kernel32.dll\n extern \"system\" {\n+    #[unwind]\n     fn RaiseException(dwExceptionCode: DWORD,\n                       dwExceptionFlags: DWORD,\n                       nNumberOfArguments: DWORD,\n@@ -198,6 +199,7 @@ unsafe extern fn rust_eh_personality(\n \n #[lang = \"eh_unwind_resume\"]\n #[cfg(not(test))]\n+#[unwind]\n unsafe extern fn rust_eh_unwind_resume(panic_ctx: LPVOID) {\n     let params = [panic_ctx as ULONG_PTR];\n     RaiseException(RUST_PANIC,"}, {"sha": "4c30b5ce02f4d1af3e1b9f37ba78dc1b516c9693", "filename": "src/test/codegen/extern-functions.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef75d5774cb9a7cf839a69341c620b98fa9c7df/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fextern-functions.rs?ref=3ef75d5774cb9a7cf839a69341c620b98fa9c7df", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![feature(unwind_attributes)]\n+\n+extern {\n+// CHECK: Function Attrs: nounwind\n+// CHECK-NEXT: declare void @extern_fn\n+    fn extern_fn();\n+// CHECK-NOT: Function Attrs: nounwind\n+// CHECK: declare void @unwinding_extern_fn\n+    #[unwind]\n+    fn unwinding_extern_fn();\n+}"}]}