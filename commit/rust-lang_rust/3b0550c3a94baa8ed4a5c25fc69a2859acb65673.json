{"sha": "3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMDU1MGMzYTk0YmFhOGVkNGE1YzI1ZmM2OWEyODU5YWNiNjU2NzM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-04T22:59:10Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-07T02:49:53Z"}, "message": "Rename slicing methods", "tree": {"sha": "d83c0326466a5fb14163ef970951f72e9ea80b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d83c0326466a5fb14163ef970951f72e9ea80b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "html_url": "https://github.com/rust-lang/rust/commit/3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd21e4a72c0175d226acc837d1886cfdfa40fe68", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd21e4a72c0175d226acc837d1886cfdfa40fe68", "html_url": "https://github.com/rust-lang/rust/commit/cd21e4a72c0175d226acc837d1886cfdfa40fe68"}], "stats": {"total": 249, "additions": 225, "deletions": 24}, "files": [{"sha": "0a460b642102c2872e6c6604211d923763eac8ee", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -928,6 +928,7 @@ impl<S: Str> Add<S, String> for String {\n     }\n }\n \n+#[cfg(stage0)]\n impl ops::Slice<uint, str> for String {\n     #[inline]\n     fn as_slice_<'a>(&'a self) -> &'a str {\n@@ -949,6 +950,28 @@ impl ops::Slice<uint, str> for String {\n         self[][*from..*to]\n     }\n }\n+#[cfg(not(stage0))]\n+impl ops::Slice<uint, str> for String {\n+    #[inline]\n+    fn as_slice_<'a>(&'a self) -> &'a str {\n+        self.as_slice()\n+    }\n+\n+    #[inline]\n+    fn slice_from_or_fail<'a>(&'a self, from: &uint) -> &'a str {\n+        self[][*from..]\n+    }\n+\n+    #[inline]\n+    fn slice_to_or_fail<'a>(&'a self, to: &uint) -> &'a str {\n+        self[][..*to]\n+    }\n+\n+    #[inline]\n+    fn slice_or_fail<'a>(&'a self, from: &uint, to: &uint) -> &'a str {\n+        self[][*from..*to]\n+    }\n+}\n \n /// Unsafe operations\n #[unstable = \"waiting on raw module conventions\"]"}, {"sha": "66f41d2ba1f32513823a4fdf24c0b6931a177577", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -389,13 +389,22 @@ macro_rules! bound {\n \n impl<T> TrieMap<T> {\n     // If `upper` is true then returns upper_bound else returns lower_bound.\n+    #[cfg(stage0)]\n     #[inline]\n     fn bound<'a>(&'a self, key: uint, upper: bool) -> Entries<'a, T> {\n         bound!(Entries, self = self,\n                key = key, is_upper = upper,\n                slice_from = slice_from_, iter = iter,\n                mutability = )\n     }\n+    #[cfg(not(stage0))]\n+    #[inline]\n+    fn bound<'a>(&'a self, key: uint, upper: bool) -> Entries<'a, T> {\n+        bound!(Entries, self = self,\n+               key = key, is_upper = upper,\n+               slice_from = slice_from_or_fail, iter = iter,\n+               mutability = )\n+    }\n \n     /// Gets an iterator pointing to the first key-value pair whose key is not less than `key`.\n     /// If all keys in the map are less than `key` an empty iterator is returned.\n@@ -431,13 +440,22 @@ impl<T> TrieMap<T> {\n         self.bound(key, true)\n     }\n     // If `upper` is true then returns upper_bound else returns lower_bound.\n+    #[cfg(stage0)]\n     #[inline]\n     fn bound_mut<'a>(&'a mut self, key: uint, upper: bool) -> MutEntries<'a, T> {\n         bound!(MutEntries, self = self,\n                key = key, is_upper = upper,\n                slice_from = slice_from_mut_, iter = iter_mut,\n                mutability = mut)\n     }\n+    #[cfg(not(stage0))]\n+    #[inline]\n+    fn bound_mut<'a>(&'a mut self, key: uint, upper: bool) -> MutEntries<'a, T> {\n+        bound!(MutEntries, self = self,\n+               key = key, is_upper = upper,\n+               slice_from = slice_from_or_fail_mut, iter = iter_mut,\n+               mutability = mut)\n+    }\n \n     /// Deprecated: use `lower_bound_mut`.\n     #[deprecated = \"use lower_bound_mut\"]"}, {"sha": "da88b5efa61fed5cb8edac762e656bb114a94f02", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -460,6 +460,7 @@ impl<T> Index<uint,T> for Vec<T> {\n     }\n }*/\n \n+#[cfg(stage0)]\n impl<T> ops::Slice<uint, [T]> for Vec<T> {\n     #[inline]\n     fn as_slice_<'a>(&'a self) -> &'a [T] {\n@@ -480,7 +481,29 @@ impl<T> ops::Slice<uint, [T]> for Vec<T> {\n         self.as_slice().slice_(start, end)\n     }\n }\n+#[cfg(not(stage0))]\n+impl<T> ops::Slice<uint, [T]> for Vec<T> {\n+    #[inline]\n+    fn as_slice_<'a>(&'a self) -> &'a [T] {\n+        self.as_slice()\n+    }\n+\n+    #[inline]\n+    fn slice_from_or_fail<'a>(&'a self, start: &uint) -> &'a [T] {\n+        self.as_slice().slice_from_or_fail(start)\n+    }\n \n+    #[inline]\n+    fn slice_to_or_fail<'a>(&'a self, end: &uint) -> &'a [T] {\n+        self.as_slice().slice_to_or_fail(end)\n+    }\n+    #[inline]\n+    fn slice_or_fail<'a>(&'a self, start: &uint, end: &uint) -> &'a [T] {\n+        self.as_slice().slice_or_fail(start, end)\n+    }\n+}\n+\n+#[cfg(stage0)]\n impl<T> ops::SliceMut<uint, [T]> for Vec<T> {\n     #[inline]\n     fn as_mut_slice_<'a>(&'a mut self) -> &'a mut [T] {\n@@ -501,6 +524,27 @@ impl<T> ops::SliceMut<uint, [T]> for Vec<T> {\n         self.as_mut_slice().slice_mut_(start, end)\n     }\n }\n+#[cfg(not(stage0))]\n+impl<T> ops::SliceMut<uint, [T]> for Vec<T> {\n+    #[inline]\n+    fn as_mut_slice_<'a>(&'a mut self) -> &'a mut [T] {\n+        self.as_mut_slice()\n+    }\n+\n+    #[inline]\n+    fn slice_from_or_fail_mut<'a>(&'a mut self, start: &uint) -> &'a mut [T] {\n+        self.as_mut_slice().slice_from_or_fail_mut(start)\n+    }\n+\n+    #[inline]\n+    fn slice_to_or_fail_mut<'a>(&'a mut self, end: &uint) -> &'a mut [T] {\n+        self.as_mut_slice().slice_to_or_fail_mut(end)\n+    }\n+    #[inline]\n+    fn slice_or_fail_mut<'a>(&'a mut self, start: &uint, end: &uint) -> &'a mut [T] {\n+        self.as_mut_slice().slice_or_fail_mut(start, end)\n+    }\n+}\n \n #[experimental = \"waiting on FromIterator stability\"]\n impl<T> FromIterator<T> for Vec<T> {\n@@ -1181,7 +1225,7 @@ impl<T> Vec<T> {\n     }\n \n     /// Deprecated: use `slice_mut`.\n-    #[deprecated = \"use slice_from\"]\n+    #[deprecated = \"use slice_mut\"]\n     pub fn mut_slice<'a>(&'a mut self, start: uint, end: uint)\n                          -> &'a mut [T] {\n         self[mut start..end]"}, {"sha": "b08432c773e61a48bcf0e060c58b136d37f6e2ed", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -692,15 +692,15 @@ pub trait IndexMut<Index, Result> {\n  *         println!(\"Slicing!\");\n  *         self\n  *     }\n- *     fn slice_from_<'a>(&'a self, from: &Foo) -> &'a Foo {\n+ *     fn slice_from_or_fail<'a>(&'a self, from: &Foo) -> &'a Foo {\n  *         println!(\"Slicing!\");\n  *         self\n  *     }\n- *     fn slice_to_<'a>(&'a self, to: &Foo) -> &'a Foo {\n+ *     fn slice_to_or_fail<'a>(&'a self, to: &Foo) -> &'a Foo {\n  *         println!(\"Slicing!\");\n  *         self\n  *     }\n- *     fn slice_<'a>(&'a self, from: &Foo, to: &Foo) -> &'a Foo {\n+ *     fn slice_or_fail<'a>(&'a self, from: &Foo, to: &Foo) -> &'a Foo {\n  *         println!(\"Slicing!\");\n  *         self\n  *     }\n@@ -711,7 +711,22 @@ pub trait IndexMut<Index, Result> {\n  * }\n  * ```\n  */\n-// FIXME(#17273) remove the postscript _s\n+#[cfg(not(stage0))]\n+#[lang=\"slice\"]\n+pub trait Slice<Idx, Sized? Result> for Sized? {\n+    /// The method for the slicing operation foo[]\n+    fn as_slice_<'a>(&'a self) -> &'a Result;\n+    /// The method for the slicing operation foo[from..]\n+    fn slice_from_or_fail<'a>(&'a self, from: &Idx) -> &'a Result;\n+    /// The method for the slicing operation foo[..to]\n+    fn slice_to_or_fail<'a>(&'a self, to: &Idx) -> &'a Result;\n+    /// The method for the slicing operation foo[from..to]\n+    fn slice_or_fail<'a>(&'a self, from: &Idx, to: &Idx) -> &'a Result;\n+}\n+#[cfg(stage0)]\n+/**\n+ *\n+ */\n #[lang=\"slice\"]\n pub trait Slice<Idx, Sized? Result> for Sized? {\n     /// The method for the slicing operation foo[]\n@@ -742,15 +757,15 @@ pub trait Slice<Idx, Sized? Result> for Sized? {\n  *         println!(\"Slicing!\");\n  *         self\n  *     }\n- *     fn slice_from_mut_<'a>(&'a mut self, from: &Foo) -> &'a mut Foo {\n+ *     fn slice_from_or_fail_mut<'a>(&'a mut self, from: &Foo) -> &'a mut Foo {\n  *         println!(\"Slicing!\");\n  *         self\n  *     }\n- *     fn slice_to_mut_<'a>(&'a mut self, to: &Foo) -> &'a mut Foo {\n+ *     fn slice_to_or_fail_mut<'a>(&'a mut self, to: &Foo) -> &'a mut Foo {\n  *         println!(\"Slicing!\");\n  *         self\n  *     }\n- *     fn slice_mut_<'a>(&'a mut self, from: &Foo, to: &Foo) -> &'a mut Foo {\n+ *     fn slice_or_fail_mut<'a>(&'a mut self, from: &Foo, to: &Foo) -> &'a mut Foo {\n  *         println!(\"Slicing!\");\n  *         self\n  *     }\n@@ -761,7 +776,22 @@ pub trait Slice<Idx, Sized? Result> for Sized? {\n  * }\n  * ```\n  */\n-// FIXME(#17273) remove the postscript _s\n+#[cfg(not(stage0))]\n+#[lang=\"slice_mut\"]\n+pub trait SliceMut<Idx, Sized? Result> for Sized? {\n+    /// The method for the slicing operation foo[]\n+    fn as_mut_slice_<'a>(&'a mut self) -> &'a mut Result;\n+    /// The method for the slicing operation foo[from..]\n+    fn slice_from_or_fail_mut<'a>(&'a mut self, from: &Idx) -> &'a mut Result;\n+    /// The method for the slicing operation foo[..to]\n+    fn slice_to_or_fail_mut<'a>(&'a mut self, to: &Idx) -> &'a mut Result;\n+    /// The method for the slicing operation foo[from..to]\n+    fn slice_or_fail_mut<'a>(&'a mut self, from: &Idx, to: &Idx) -> &'a mut Result;\n+}\n+#[cfg(stage0)]\n+/**\n+ *\n+ */\n #[lang=\"slice_mut\"]\n pub trait SliceMut<Idx, Sized? Result> for Sized? {\n     /// The method for the slicing operation foo[mut]"}, {"sha": "680f91945d103d50a8ff98aabf40c87d61de7a3f", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -35,6 +35,7 @@ pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop, Deref, DerefMut};\n pub use ops::{Shl, Shr};\n pub use ops::{Index, IndexMut};\n+pub use ops::{Slice, SliceMut};\n pub use ops::{Fn, FnMut, FnOnce};\n pub use option::{Option, Some, None};\n pub use result::{Result, Ok, Err};"}, {"sha": "7246fc367f8c89ae209355f0eec93117aea492a3", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -486,6 +486,37 @@ impl<'a,T> ImmutableSlice<'a, T> for &'a [T] {\n     }\n }\n \n+\n+\n+#[cfg(not(stage0))]\n+impl<T> ops::Slice<uint, [T]> for [T] {\n+    #[inline]\n+    fn as_slice_<'a>(&'a self) -> &'a [T] {\n+        self\n+    }\n+\n+    #[inline]\n+    fn slice_from_or_fail<'a>(&'a self, start: &uint) -> &'a [T] {\n+        self.slice_or_fail(start, &self.len())\n+    }\n+\n+    #[inline]\n+    fn slice_to_or_fail<'a>(&'a self, end: &uint) -> &'a [T] {\n+        self.slice_or_fail(&0, end)\n+    }\n+    #[inline]\n+    fn slice_or_fail<'a>(&'a self, start: &uint, end: &uint) -> &'a [T] {\n+        assert!(*start <= *end);\n+        assert!(*end <= self.len());\n+        unsafe {\n+            transmute(RawSlice {\n+                    data: self.as_ptr().offset(*start as int),\n+                    len: (*end - *start)\n+                })\n+        }\n+    }\n+}\n+#[cfg(stage0)]\n impl<T> ops::Slice<uint, [T]> for [T] {\n     #[inline]\n     fn as_slice_<'a>(&'a self) -> &'a [T] {\n@@ -514,6 +545,36 @@ impl<T> ops::Slice<uint, [T]> for [T] {\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl<T> ops::SliceMut<uint, [T]> for [T] {\n+    #[inline]\n+    fn as_mut_slice_<'a>(&'a mut self) -> &'a mut [T] {\n+        self\n+    }\n+\n+    #[inline]\n+    fn slice_from_or_fail_mut<'a>(&'a mut self, start: &uint) -> &'a mut [T] {\n+        let len = &self.len();\n+        self.slice_or_fail_mut(start, len)\n+    }\n+\n+    #[inline]\n+    fn slice_to_or_fail_mut<'a>(&'a mut self, end: &uint) -> &'a mut [T] {\n+        self.slice_or_fail_mut(&0, end)\n+    }\n+    #[inline]\n+    fn slice_or_fail_mut<'a>(&'a mut self, start: &uint, end: &uint) -> &'a mut [T] {\n+        assert!(*start <= *end);\n+        assert!(*end <= self.len());\n+        unsafe {\n+            transmute(RawSlice {\n+                    data: self.as_ptr().offset(*start as int),\n+                    len: (*end - *start)\n+                })\n+        }\n+    }\n+}\n+#[cfg(stage0)]\n impl<T> ops::SliceMut<uint, [T]> for [T] {\n     #[inline]\n     fn as_mut_slice_<'a>(&'a mut self) -> &'a mut [T] {\n@@ -556,7 +617,7 @@ pub trait MutableSlice<'a, T> {\n     fn as_mut_slice(self) -> &'a mut [T];\n \n     /// Deprecated: use `slice_mut`.\n-    #[deprecated = \"slice_mut\"]\n+    #[deprecated = \"use slice_mut\"]\n     fn mut_slice(self, start: uint, end: uint) -> &'a mut [T] {\n         self.slice_mut(start, end)\n     }"}, {"sha": "6099af0e78fb6293fb2b1d5c80162664aa44d875", "filename": "src/libcore/str.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -1164,6 +1164,7 @@ pub mod traits {\n         fn equiv(&self, other: &S) -> bool { eq_slice(*self, other.as_slice()) }\n     }\n \n+    #[cfg(stage0)]\n     impl ops::Slice<uint, str> for str {\n         #[inline]\n         fn as_slice_<'a>(&'a self) -> &'a str {\n@@ -1185,6 +1186,28 @@ pub mod traits {\n             self.slice(*from, *to)\n         }\n     }\n+    #[cfg(not(stage0))]\n+    impl ops::Slice<uint, str> for str {\n+        #[inline]\n+        fn as_slice_<'a>(&'a self) -> &'a str {\n+            self\n+        }\n+\n+        #[inline]\n+        fn slice_from_or_fail<'a>(&'a self, from: &uint) -> &'a str {\n+            self.slice_from(*from)\n+        }\n+\n+        #[inline]\n+        fn slice_to_or_fail<'a>(&'a self, to: &uint) -> &'a str {\n+            self.slice_to(*to)\n+        }\n+\n+        #[inline]\n+        fn slice_or_fail<'a>(&'a self, from: &uint, to: &uint) -> &'a str {\n+            self.slice(*from, *to)\n+        }\n+    }\n }\n \n /// Any string that can be represented as a slice"}, {"sha": "4135a02cc618e471959b9b7a07bee930c31339c7", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -373,7 +373,7 @@ fn test_all() {\n     assert!(v.iter().all(|&x| x < 10));\n     assert!(!v.iter().all(|&x| x % 2 == 0));\n     assert!(!v.iter().all(|&x| x > 100));\n-    assert!(v.slice_(&0, &0).iter().all(|_| fail!()));\n+    assert!(v.slice_or_fail(&0, &0).iter().all(|_| fail!()));\n }\n \n #[test]\n@@ -382,7 +382,7 @@ fn test_any() {\n     assert!(v.iter().any(|&x| x < 10));\n     assert!(v.iter().any(|&x| x % 2 == 0));\n     assert!(!v.iter().any(|&x| x > 100));\n-    assert!(!v.slice_(&0, &0).iter().any(|_| fail!()));\n+    assert!(!v.slice_or_fail(&0, &0).iter().any(|_| fail!()));\n }\n \n #[test]"}, {"sha": "4af71bfda8b35a27a3c659e120b189beaef66935", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -2272,9 +2272,9 @@ fn try_overloaded_slice(fcx: &FnCtxt,\n         match fcx.tcx().lang_items.slice_mut_trait() {\n             Some(trait_did) => {\n                 let method_name = match (start_expr, end_expr) {\n-                    (&Some(_), &Some(_)) => \"slice_mut_\",\n-                    (&Some(_), &None) => \"slice_from_mut_\",\n-                    (&None, &Some(_)) => \"slice_to_mut_\",\n+                    (&Some(_), &Some(_)) => \"slice_or_fail_mut\",\n+                    (&Some(_), &None) => \"slice_from_or_fail_mut\",\n+                    (&None, &Some(_)) => \"slice_to_or_fail_mut\",\n                     (&None, &None) => \"as_mut_slice_\",\n                 };\n \n@@ -2297,9 +2297,9 @@ fn try_overloaded_slice(fcx: &FnCtxt,\n         match fcx.tcx().lang_items.slice_trait() {\n             Some(trait_did) => {\n                 let method_name = match (start_expr, end_expr) {\n-                    (&Some(_), &Some(_)) => \"slice_\",\n-                    (&Some(_), &None) => \"slice_from_\",\n-                    (&None, &Some(_)) => \"slice_to_\",\n+                    (&Some(_), &Some(_)) => \"slice_or_fail\",\n+                    (&Some(_), &None) => \"slice_from_or_fail\",\n+                    (&None, &Some(_)) => \"slice_to_or_fail\",\n                     (&None, &None) => \"as_slice_\",\n                 };\n "}, {"sha": "abfb2de13c5badca1b52c51263271afa9436fc9b", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -46,6 +46,7 @@\n #[doc(no_inline)] pub use ops::{Drop, Deref, DerefMut};\n #[doc(no_inline)] pub use ops::{Shl, Shr};\n #[doc(no_inline)] pub use ops::{Index, IndexMut};\n+#[doc(no_inline)] pub use ops::{Slice, SliceMut};\n #[doc(no_inline)] pub use ops::{Fn, FnMut, FnOnce};\n #[doc(no_inline)] pub use option::{Option, Some, None};\n #[doc(no_inline)] pub use result::{Result, Ok, Err};"}, {"sha": "f863c4d330fbfa54346d406a64285367fd344197", "filename": "src/test/run-pass/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Ftest%2Frun-pass%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0550c3a94baa8ed4a5c25fc69a2859acb65673/src%2Ftest%2Frun-pass%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fslice.rs?ref=3b0550c3a94baa8ed4a5c25fc69a2859acb65673", "patch": "@@ -24,15 +24,15 @@ impl Slice<Foo, Foo> for Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n-    fn slice_from_<'a>(&'a self, _from: &Foo) -> &'a Foo {\n+    fn slice_from_or_fail<'a>(&'a self, _from: &Foo) -> &'a Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n-    fn slice_to_<'a>(&'a self, _to: &Foo) -> &'a Foo {\n+    fn slice_to_or_fail<'a>(&'a self, _to: &Foo) -> &'a Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n-    fn slice_<'a>(&'a self, _from: &Foo, _to: &Foo) -> &'a Foo {\n+    fn slice_or_fail<'a>(&'a self, _from: &Foo, _to: &Foo) -> &'a Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n@@ -43,15 +43,15 @@ impl SliceMut<Foo, Foo> for Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n-    fn slice_from_mut_<'a>(&'a mut self, _from: &Foo) -> &'a mut Foo {\n+    fn slice_from_or_fail_mut<'a>(&'a mut self, _from: &Foo) -> &'a mut Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n-    fn slice_to_mut_<'a>(&'a mut self, _to: &Foo) -> &'a mut Foo {\n+    fn slice_to_or_fail_mut<'a>(&'a mut self, _to: &Foo) -> &'a mut Foo {\n         unsafe { COUNT += 1; }\n         self\n     }\n-    fn slice_mut_<'a>(&'a mut self, _from: &Foo, _to: &Foo) -> &'a mut Foo {\n+    fn slice_or_fail_mut<'a>(&'a mut self, _from: &Foo, _to: &Foo) -> &'a mut Foo {\n         unsafe { COUNT += 1; }\n         self\n     }"}]}