{"sha": "0aa68a8db9dfffb2756279cc621b1b15a896423d", "node_id": "C_kwDOAAsO6NoAKDBhYTY4YThkYjlkZmZmYjI3NTYyNzljYzYyMWIxYjE1YTg5NjQyM2Q", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-10-20T13:42:54Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-10-20T13:42:54Z"}, "message": "Prevent invalid values from existing in Vec::swap_remove", "tree": {"sha": "59070fb7a2e74f1bebe5d25f5ca8fa3435db9873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59070fb7a2e74f1bebe5d25f5ca8fa3435db9873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa68a8db9dfffb2756279cc621b1b15a896423d", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa68a8db9dfffb2756279cc621b1b15a896423d", "html_url": "https://github.com/rust-lang/rust/commit/0aa68a8db9dfffb2756279cc621b1b15a896423d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa68a8db9dfffb2756279cc621b1b15a896423d/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6162529a01473bbb2427fa27354cbafc3c514eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6162529a01473bbb2427fa27354cbafc3c514eee", "html_url": "https://github.com/rust-lang/rust/commit/6162529a01473bbb2427fa27354cbafc3c514eee"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "d52c78eedf3fad28836477edd8dbc74489a609aa", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0aa68a8db9dfffb2756279cc621b1b15a896423d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa68a8db9dfffb2756279cc621b1b15a896423d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=0aa68a8db9dfffb2756279cc621b1b15a896423d", "patch": "@@ -1305,10 +1305,11 @@ impl<T, A: Allocator> Vec<T, A> {\n             // We replace self[index] with the last element. Note that if the\n             // bounds check above succeeds there must be a last element (which\n             // can be self[index] itself).\n-            let last = ptr::read(self.as_ptr().add(len - 1));\n-            let hole = self.as_mut_ptr().add(index);\n+            let value = ptr::read(self.as_ptr().add(index));\n+            let base_ptr = self.as_mut_ptr();\n+            ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);\n             self.set_len(len - 1);\n-            ptr::replace(hole, last)\n+            value\n         }\n     }\n "}]}