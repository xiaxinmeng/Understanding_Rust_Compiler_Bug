{"sha": "a59a97ae04224b1de719d0f4d505f46e5e4ecb96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OWE5N2FlMDQyMjRiMWRlNzE5ZDBmNGQ1MDVmNDZlNWU0ZWNiOTY=", "commit": {"author": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-01T20:04:18Z"}, "committer": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-06T19:19:03Z"}, "message": "7708: Updated generate default fn logic.", "tree": {"sha": "4a9f1e2cabd03ff668339556757cc7124f58a17e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a9f1e2cabd03ff668339556757cc7124f58a17e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59a97ae04224b1de719d0f4d505f46e5e4ecb96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59a97ae04224b1de719d0f4d505f46e5e4ecb96", "html_url": "https://github.com/rust-lang/rust/commit/a59a97ae04224b1de719d0f4d505f46e5e4ecb96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59a97ae04224b1de719d0f4d505f46e5e4ecb96/comments", "author": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54b4727fa3a4628bac6a29fc0b3034da8c5824c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b4727fa3a4628bac6a29fc0b3034da8c5824c0", "html_url": "https://github.com/rust-lang/rust/commit/54b4727fa3a4628bac6a29fc0b3034da8c5824c0"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "9592876b43eda6c71e2af92ca0238eeea52badab", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 48, "deletions": 22, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a59a97ae04224b1de719d0f4d505f46e5e4ecb96/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59a97ae04224b1de719d0f4d505f46e5e4ecb96/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=a59a97ae04224b1de719d0f4d505f46e5e4ecb96", "patch": "@@ -1,10 +1,10 @@\n use crate::{\n     assist_context::{AssistContext, Assists},\n-    utils, AssistId,\n+    AssistId,\n };\n use syntax::{\n-    ast::{self, Adt, Impl, NameOwner},\n-    AstNode, Direction,\n+    ast::{self, Impl, NameOwner},\n+    AstNode,\n };\n use test_utils::mark;\n \n@@ -60,28 +60,23 @@ pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext)\n         \"Generate a Default impl from a new fn\",\n         insert_location,\n         move |builder| {\n-            let default_fn_syntax = default_fn_node_for_new(impl_);\n-            if let Some(code) = default_fn_syntax {\n-                builder.insert(insert_location.end(), code)\n-            }\n+            let code = default_fn_node_for_new(impl_);\n+            builder.insert(insert_location.end(), code);\n         },\n     )\n }\n \n-fn default_fn_node_for_new(impl_: Impl) -> Option<String> {\n-    // the code string is this way due to formatting reason\n-    let code = r#\"    fn default() -> Self {\n+fn default_fn_node_for_new(impl_: Impl) -> String {\n+    format!(\n+        \"\n+\n+impl Default for {} {{\n+    fn default() -> Self {{\n         Self::new()\n-    }\"#;\n-    let struct_name = impl_.self_ty()?.syntax().to_string();\n-    let struct_ = impl_\n-        .syntax()\n-        .siblings(Direction::Prev)\n-        .filter_map(ast::Struct::cast)\n-        .find(|struct_| struct_.name().unwrap().text() == struct_name)?;\n-\n-    let adt = Adt::cast(struct_.syntax().clone())?;\n-    Some(utils::generate_trait_impl_text(&adt, \"Default\", code))\n+    }}\n+}}\",\n+        impl_.self_ty().unwrap().syntax().text()\n+    )\n }\n \n #[cfg(test)]\n@@ -233,7 +228,7 @@ struct Example { _inner: () }\n struct Test { value: u32 }\n \n impl Example {\n-    pub fn new$0 () -> Self {\n+    pub fn new$0() -> Self {\n         Self { _inner: () }\n     }\n }\n@@ -243,7 +238,36 @@ struct Example { _inner: () }\n struct Test { value: u32 }\n \n impl Example {\n-    pub fn new () -> Self {\n+    pub fn new() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn when_struct_is_after_impl() {\n+        check_assist(\n+            generate_default_from_new,\n+            r#\"\n+impl Example {\n+    pub fn $0new() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n+\n+struct Example { _inner: () }\n+\"#,\n+            r#\"\n+impl Example {\n+    pub fn new() -> Self {\n         Self { _inner: () }\n     }\n }\n@@ -253,6 +277,8 @@ impl Default for Example {\n         Self::new()\n     }\n }\n+\n+struct Example { _inner: () }\n \"#,\n         );\n     }"}]}