{"sha": "fadabe08f52ce524a0cbb5af327e55db61198024", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZGFiZTA4ZjUyY2U1MjRhMGNiYjVhZjMyN2U1NWRiNjExOTgwMjQ=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-02T07:56:20Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-13T13:37:09Z"}, "message": "Rename empty/bang to never\n\nSplit Ty::is_empty method into is_never and is_uninhabited", "tree": {"sha": "7240d1e35980a8c2eefa26741b63a174b55fc016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7240d1e35980a8c2eefa26741b63a174b55fc016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fadabe08f52ce524a0cbb5af327e55db61198024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fadabe08f52ce524a0cbb5af327e55db61198024", "html_url": "https://github.com/rust-lang/rust/commit/fadabe08f52ce524a0cbb5af327e55db61198024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fadabe08f52ce524a0cbb5af327e55db61198024/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0a8b6d43f26907ac7d7abc35510878f61551fbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a8b6d43f26907ac7d7abc35510878f61551fbf", "html_url": "https://github.com/rust-lang/rust/commit/f0a8b6d43f26907ac7d7abc35510878f61551fbf"}], "stats": {"total": 311, "additions": 161, "deletions": 150}, "files": [{"sha": "bb7c971111853e2b612158d4a772835f5cbc7b8a", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -703,24 +703,24 @@ mod impls {\n     // that supports `!`\n     macro_rules! not_stage0 {\n         () => {\n-            #[unstable(feature = \"bang_type\", issue = \"35121\")]\n+            #[unstable(feature = \"never_type\", issue = \"35121\")]\n             impl PartialEq for ! {\n                 fn eq(&self, _: &!) -> bool {\n                     *self\n                 }\n             }\n \n-            #[unstable(feature = \"bang_type\", issue = \"35121\")]\n+            #[unstable(feature = \"never_type\", issue = \"35121\")]\n             impl Eq for ! {}\n \n-            #[unstable(feature = \"bang_type\", issue = \"35121\")]\n+            #[unstable(feature = \"never_type\", issue = \"35121\")]\n             impl PartialOrd for ! {\n                 fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n                     *self\n                 }\n             }\n \n-            #[unstable(feature = \"bang_type\", issue = \"35121\")]\n+            #[unstable(feature = \"never_type\", issue = \"35121\")]\n             impl Ord for ! {\n                 fn cmp(&self, _: &!) -> Ordering {\n                     *self"}, {"sha": "dbd715c722e13ebd4111aeb53ef2af8d70b2276a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -1367,14 +1367,14 @@ fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperEx\n // that supports `!`\n macro_rules! not_stage0 {\n     () => {\n-        #[unstable(feature = \"bang_type\", issue = \"35121\")]\n+        #[unstable(feature = \"never_type\", issue = \"35121\")]\n         impl Debug for ! {\n             fn fmt(&self, _: &mut Formatter) -> Result {\n                 *self\n             }\n         }\n \n-        #[unstable(feature = \"bang_type\", issue = \"35121\")]\n+        #[unstable(feature = \"never_type\", issue = \"35121\")]\n         impl Display for ! {\n             fn fmt(&self, _: &mut Formatter) -> Result {\n                 *self"}, {"sha": "7831464756b940d91cee040e4e0f400b1ca035ce", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -89,7 +89,7 @@\n #![feature(question_mark)]\n \n // NOTE: remove the cfg_attr next snapshot\n-#![cfg_attr(not(stage0), feature(bang_type))]\n+#![cfg_attr(not(stage0), feature(never_type))]\n \n #[macro_use]\n mod macros;"}, {"sha": "232db76a6d175ac34394a9dcd118ccd2d92627b8", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -379,7 +379,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n         let func_or_rcvr_exit = self.expr(func_or_rcvr, pred);\n         let ret = self.straightline(call_expr, func_or_rcvr_exit, args);\n-        if fn_ty.fn_ret().0.is_empty(self.tcx) {\n+        // FIXME(canndrew): This is_never should probably be an is_uninhabited.\n+        if fn_ty.fn_ret().0.is_never() {\n             self.add_unreachable_node()\n         } else {\n             ret"}, {"sha": "0edfd16bdfd1b7ca07d9e3af5d222e5a44e796d0", "filename": "src/librustc/hir/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fhir%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fhir%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Ffold.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -353,7 +353,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                         }\n                     }))\n                 }\n-                TyEmpty => node,\n+                TyNever => node,\n                 TyTup(tys) => TyTup(tys.move_map(|ty| fld.fold_ty(ty))),\n                 TyPath(qself, path) => {\n                     let qself = qself.map(|QSelf { ty, position }| {"}, {"sha": "92b956788860ee1058d4c7fb9b773f72b2d70e19", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -403,7 +403,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             walk_list!(visitor, visit_lifetime, opt_lifetime);\n             visitor.visit_ty(&mutable_type.ty)\n         }\n-        TyEmpty => {},\n+        TyNever => {},\n         TyTup(ref tuple_element_types) => {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }"}, {"sha": "c2b211238b2f1d1262ac1c812fa8a3667b6eac83", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -270,7 +270,7 @@ impl<'a> LoweringContext<'a> {\n                         decl: self.lower_fn_decl(&f.decl),\n                     }))\n                 }\n-                Empty => hir::TyEmpty,\n+                Never => hir::TyNever,\n                 Tup(ref tys) => hir::TyTup(tys.iter().map(|ty| self.lower_ty(ty)).collect()),\n                 Paren(ref ty) => {\n                     return self.lower_ty(ty);"}, {"sha": "d41cdfabdf4c04a55b841385bb6dccadd131cd39", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -1122,8 +1122,8 @@ pub enum Ty_ {\n     TyRptr(Option<Lifetime>, MutTy),\n     /// A bare function (e.g. `fn(usize) -> bool`)\n     TyBareFn(P<BareFnTy>),\n-    /// The empty type (`!`)\n-    TyEmpty,\n+    /// The never type (`!`)\n+    TyNever,\n     /// A tuple (`(A, B, C, D,...)`)\n     TyTup(HirVec<P<Ty>>),\n     /// A path (`module::module::...::Type`), optionally"}, {"sha": "66c1bc7642c56b682ce9da0b33d4844483f4fedc", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -504,7 +504,7 @@ impl<'a> State<'a> {\n                 self.print_opt_lifetime(lifetime)?;\n                 self.print_mt(mt)?;\n             }\n-            hir::TyEmpty => {\n+            hir::TyNever => {\n                 word(&mut self.s, \"!\")?;\n             },\n             hir::TyTup(ref elts) => {"}, {"sha": "ecd9759c721b2f11062386e08b259c9249737f4c", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::TyTrait(..) |\n             ty::TyStruct(..) |\n             ty::TyClosure(..) |\n-            ty::TyEmpty |\n+            ty::TyNever |\n             ty::TyTuple(..) |\n             ty::TyProjection(..) |\n             ty::TyParam(..) |"}, {"sha": "87463055a276a76748f939b8d59e2aaa51c6f50f", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -717,7 +717,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         let adj = infcx.adjustments().get(&expr.id).map(|x| x.clone());\n         if let Some(adjustment) = adj {\n             match adjustment {\n-                adjustment::AdjustEmptyToAny(..) |\n+                adjustment::AdjustNeverToAny(..) |\n                 adjustment::AdjustReifyFnPointer |\n                 adjustment::AdjustUnsafeFnPointer |\n                 adjustment::AdjustMutToConstPointer => {"}, {"sha": "74d29b273ff2b40c9d619275a163aadbddfd4978", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -1111,8 +1111,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           }\n \n           hir::ExprCall(ref f, ref args) => {\n+            // FIXME(canndrew): This is_never should really be an is_uninhabited\n             let diverges = !self.ir.tcx.is_method_call(expr.id) &&\n-                self.ir.tcx.expr_ty_adjusted(&f).fn_ret().0.is_empty(self.ir.tcx);\n+                self.ir.tcx.expr_ty_adjusted(&f).fn_ret().0.is_never();\n             let succ = if diverges {\n                 self.s.exit_ln\n             } else {\n@@ -1125,7 +1126,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           hir::ExprMethodCall(_, _, ref args) => {\n             let method_call = ty::MethodCall::expr(expr.id);\n             let method_ty = self.ir.tcx.tables.borrow().method_map[&method_call].ty;\n-            let succ = if method_ty.fn_ret().0.is_empty(self.ir.tcx) {\n+            // FIXME(canndrew): This is_never should really be an is_uninhabited\n+            let succ = if method_ty.fn_ret().0.is_never() {\n                 self.s.exit_ln\n             } else {\n                 succ"}, {"sha": "676e456dcea94e2ecaf96fe984b50d1dec27dd47", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -451,7 +451,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                         self.cat_expr_autoderefd(expr, autoderefs)\n                     }\n \n-                    adjustment::AdjustEmptyToAny(..) |\n+                    adjustment::AdjustNeverToAny(..) |\n                     adjustment::AdjustReifyFnPointer |\n                     adjustment::AdjustUnsafeFnPointer |\n                     adjustment::AdjustMutToConstPointer |"}, {"sha": "b38f5f96de4484c385f18c22b6ef4b4e420fc290", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -253,7 +253,7 @@ fn ty_is_local_constructor(tcx: TyCtxt, ty: Ty, infer_is_local: InferIsLocal)->\n         ty::TySlice(..) |\n         ty::TyRawPtr(..) |\n         ty::TyRef(..) |\n-        ty::TyEmpty |\n+        ty::TyNever |\n         ty::TyTuple(..) |\n         ty::TyParam(..) |\n         ty::TyProjection(..) => {"}, {"sha": "cf004767b2aaca0e11fc6d68664561c46ed3a8e4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -212,7 +212,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 ty::TyProjection(..) => Some(13),\n                 ty::TyParam(..) => Some(14),\n                 ty::TyAnon(..) => Some(15),\n-                ty::TyEmpty => Some(16),\n+                ty::TyNever => Some(16),\n                 ty::TyInfer(..) | ty::TyError => None\n             }\n         }"}, {"sha": "b61cb0d3eee7217c17243564bee61a911ae706d9", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -1772,7 +1772,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n             ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyRawPtr(..) |\n             ty::TyChar | ty::TyBox(_) | ty::TyRef(..) |\n-            ty::TyArray(..) | ty::TyClosure(..) | ty::TyEmpty |\n+            ty::TyArray(..) | ty::TyClosure(..) | ty::TyNever |\n             ty::TyError => {\n                 // safe for everything\n                 Where(ty::Binder(Vec::new()))\n@@ -1820,7 +1820,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::TyInfer(ty::IntVar(_)) | ty::TyInfer(ty::FloatVar(_)) |\n             ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n             ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyChar |\n-            ty::TyRawPtr(..) | ty::TyError | ty::TyEmpty |\n+            ty::TyRawPtr(..) | ty::TyError | ty::TyNever |\n             ty::TyRef(_, ty::TypeAndMut { ty: _, mutbl: hir::MutImmutable }) => {\n                 Where(ty::Binder(Vec::new()))\n             }\n@@ -1886,7 +1886,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::TyError |\n             ty::TyInfer(ty::IntVar(_)) |\n             ty::TyInfer(ty::FloatVar(_)) |\n-            ty::TyEmpty |\n+            ty::TyNever |\n             ty::TyChar => {\n                 Vec::new()\n             }"}, {"sha": "ae9fd5ab5bc87f79bef77f744f2f11632ce2ab59", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -11,7 +11,7 @@\n pub use self::AutoAdjustment::*;\n pub use self::AutoRef::*;\n \n-use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFoldable, TypeVariants};\n+use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFoldable};\n use ty::LvaluePreference::{NoPreference};\n \n use syntax::ast;\n@@ -21,7 +21,7 @@ use hir;\n \n #[derive(Copy, Clone)]\n pub enum AutoAdjustment<'tcx> {\n-    AdjustEmptyToAny(Ty<'tcx>), // go from ! to any type\n+    AdjustNeverToAny(Ty<'tcx>), // go from ! to any type\n     AdjustReifyFnPointer,       // go from a fn-item type to a fn-pointer type\n     AdjustUnsafeFnPointer,      // go from a safe fn pointer to an unsafe fn pointer\n     AdjustMutToConstPointer,    // go from a mut raw pointer to a const raw pointer\n@@ -107,10 +107,7 @@ pub struct AutoDerefRef<'tcx> {\n impl<'tcx> AutoAdjustment<'tcx> {\n     pub fn is_identity(&self) -> bool {\n         match *self {\n-            AdjustEmptyToAny(ty) => match ty.sty {\n-                TypeVariants::TyEmpty => true,\n-                _ => false,\n-            },\n+            AdjustNeverToAny(ty) => ty.is_never(),\n             AdjustReifyFnPointer |\n             AdjustUnsafeFnPointer |\n             AdjustMutToConstPointer => false,\n@@ -159,7 +156,7 @@ impl<'a, 'gcx, 'tcx> ty::TyS<'tcx> {\n         return match adjustment {\n             Some(adjustment) => {\n                 match *adjustment {\n-                    AdjustEmptyToAny(ref ty) => ty,\n+                    AdjustNeverToAny(ref ty) => ty,\n \n                     AdjustReifyFnPointer => {\n                         match self.sty {"}, {"sha": "53bf046d6b597ed74acdb37792d5afd7c79f1492", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -185,7 +185,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n                 // Scalar and unique types are sendable, and durable\n                 ty::TyInfer(ty::FreshIntTy(_)) | ty::TyInfer(ty::FreshFloatTy(_)) |\n-                ty::TyBool | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) | ty::TyEmpty |\n+                ty::TyBool | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) | ty::TyNever |\n                 ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyChar => {\n                     TC::None\n                 }"}, {"sha": "8ca02eaabe6a7d120581b0dea215c9a3e79f1859", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -190,7 +190,7 @@ pub struct CommonTypes<'tcx> {\n     pub u64: Ty<'tcx>,\n     pub f32: Ty<'tcx>,\n     pub f64: Ty<'tcx>,\n-    pub empty: Ty<'tcx>,\n+    pub never: Ty<'tcx>,\n     pub err: Ty<'tcx>,\n }\n \n@@ -257,7 +257,7 @@ impl<'tcx> CommonTypes<'tcx> {\n         CommonTypes {\n             bool: mk(TyBool),\n             char: mk(TyChar),\n-            empty: mk(TyEmpty),\n+            never: mk(TyNever),\n             err: mk(TyError),\n             isize: mk(TyInt(ast::IntTy::Is)),\n             i8: mk(TyInt(ast::IntTy::I8)),\n@@ -977,7 +977,7 @@ macro_rules! sty_debug_print {\n                 for &Interned(t) in tcx.interners.type_.borrow().iter() {\n                     let variant = match t.sty {\n                         ty::TyBool | ty::TyChar | ty::TyInt(..) | ty::TyUint(..) |\n-                            ty::TyFloat(..) | ty::TyStr | ty::TyEmpty => continue,\n+                            ty::TyFloat(..) | ty::TyStr | ty::TyNever => continue,\n                         ty::TyError => /* unimportant */ continue,\n                         $(ty::$variant(..) => &mut $variant,)*\n                     };"}, {"sha": "dab9c246d5f1b02291ddaff19cc6732d32fa6e2f", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -214,7 +214,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n     fn sort_string(&self, tcx: TyCtxt<'a, 'gcx, 'lcx>) -> String {\n         match self.sty {\n             ty::TyBool | ty::TyChar | ty::TyInt(_) |\n-            ty::TyUint(_) | ty::TyFloat(_) | ty::TyStr | ty::TyEmpty => self.to_string(),\n+            ty::TyUint(_) | ty::TyFloat(_) | ty::TyStr | ty::TyNever => self.to_string(),\n             ty::TyTuple(ref tys) if tys.is_empty() => self.to_string(),\n \n             ty::TyEnum(def, _) => format!(\"enum `{}`\", tcx.item_path_str(def.did)),"}, {"sha": "9bf2daeb5f49bfa38be179145515d2193c08e92d", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -26,7 +26,7 @@ pub enum SimplifiedType {\n     StrSimplifiedType,\n     VecSimplifiedType,\n     PtrSimplifiedType,\n-    EmptySimplifiedType,\n+    NeverSimplifiedType,\n     TupleSimplifiedType(usize),\n     TraitSimplifiedType(DefId),\n     StructSimplifiedType(DefId),\n@@ -82,7 +82,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyClosure(def_id, _) => {\n             Some(ClosureSimplifiedType(def_id))\n         }\n-        ty::TyEmpty => Some(EmptySimplifiedType),\n+        ty::TyNever => Some(NeverSimplifiedType),\n         ty::TyTuple(ref tys) => {\n             Some(TupleSimplifiedType(tys.len()))\n         }"}, {"sha": "0997d6c1a7562e6b2055847f3c767e2e1ba35216", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -60,7 +60,7 @@ impl FlagComputation {\n             &ty::TyInt(_) |\n             &ty::TyFloat(_) |\n             &ty::TyUint(_) |\n-            &ty::TyEmpty |\n+            &ty::TyNever |\n             &ty::TyStr => {\n             }\n "}, {"sha": "8ddd8bef36a6f7f006b9e3f95e5008f3348a439f", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -349,7 +349,7 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n         ty::TyAnon(..) |\n         ty::TyInfer(_) |\n         ty::TyError |\n-        ty::TyEmpty |\n+        ty::TyNever |\n         ty::TyFloat(_) => None,\n     }\n }"}, {"sha": "195cece6bc4e008eb125087a9bc94d063cad0844", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -795,8 +795,8 @@ impl<'a, 'gcx, 'tcx> Layout {\n             ty::TyFloat(FloatTy::F64) => Scalar { value: F64, non_zero: false },\n             ty::TyFnPtr(_) => Scalar { value: Pointer, non_zero: true },\n \n-            // The empty type.\n-            ty::TyEmpty => Univariant { variant: Struct::new(dl, false), non_zero: false },\n+            // The never type.\n+            ty::TyNever => Univariant { variant: Struct::new(dl, false), non_zero: false },\n \n             // Potentially-fat pointers.\n             ty::TyBox(pointee) |"}, {"sha": "cfc2e89f9d5a126e10e22681c00076fb29710007", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -1853,7 +1853,7 @@ impl<'a, 'tcx> AdtDefData<'tcx, 'tcx> {\n         let result = match ty.sty {\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n             TyBox(..) | TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n-            TyArray(..) | TyClosure(..) | TyEmpty => {\n+            TyArray(..) | TyClosure(..) | TyNever => {\n                 vec![]\n             }\n "}, {"sha": "ee431681ad100488cb8c49f63d5f9c89766ce529", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ty::TyInt(..) |         // OutlivesScalar\n             ty::TyUint(..) |        // OutlivesScalar\n             ty::TyFloat(..) |       // OutlivesScalar\n-            ty::TyEmpty |           // ...\n+            ty::TyNever |           // ...\n             ty::TyEnum(..) |        // OutlivesNominalType\n             ty::TyStruct(..) |      // OutlivesNominalType\n             ty::TyBox(..) |         // OutlivesNominalType (ish)"}, {"sha": "05a9b8111570dd5830287269b8f957b914493379", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -453,7 +453,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(tcx.types.err)\n         }\n \n-        (&ty::TyEmpty, _) |\n+        (&ty::TyNever, _) |\n         (&ty::TyChar, _) |\n         (&ty::TyBool, _) |\n         (&ty::TyInt(_), _) |"}, {"sha": "83413d16ffb3ff448b02c8ec138ac04ec6b06524", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -486,7 +486,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAnon(did, substs) => ty::TyAnon(did, substs.fold_with(folder)),\n             ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyError | ty::TyInfer(_) |\n-            ty::TyParam(..) | ty::TyEmpty => self.sty.clone(),\n+            ty::TyParam(..) | ty::TyNever => self.sty.clone(),\n         };\n         folder.tcx().mk_ty(sty)\n     }\n@@ -515,7 +515,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyAnon(_, ref substs) => substs.visit_with(visitor),\n             ty::TyBool | ty::TyChar | ty::TyStr | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyError | ty::TyInfer(_) |\n-            ty::TyParam(..) | ty::TyEmpty => false,\n+            ty::TyParam(..) | ty::TyNever => false,\n         }\n     }\n "}, {"sha": "8d9bd7a58af0b8c2708462d6bbda66c615e92fcb", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -158,8 +158,8 @@ pub enum TypeVariants<'tcx> {\n     /// `|a| a`.\n     TyClosure(DefId, ClosureSubsts<'tcx>),\n \n-    /// The empty type `!`\n-    TyEmpty,\n+    /// The never type `!`\n+    TyNever,\n \n     /// A tuple type.  For example, `(i32, bool)`.\n     TyTuple(&'tcx [Ty<'tcx>]),\n@@ -894,14 +894,22 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn is_empty(&self, cx: TyCtxt) -> bool {\n-        // FIXME(#24885): be smarter here\n+    pub fn is_never(&self) -> bool {\n+        match self.sty {\n+            TyNever => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_uninhabited(&self, cx: TyCtxt) -> bool {\n+        // FIXME(#24885): be smarter here, the AdtDefData::is_empty method could easily be made\n+        // more complete.\n         match self.sty {\n             TyEnum(def, _) | TyStruct(def, _) => def.is_empty(),\n-            TyEmpty => true,\n-            TyTuple(ref tys) => tys.iter().any(|ty| ty.is_empty(cx)),\n+            TyNever => true,\n+            TyTuple(ref tys) => tys.iter().any(|ty| ty.is_uninhabited(cx)),\n             // FIXME (canndrew): this line breaks core::fmt\n-            //TyRef(_, ref tm) => tm.ty.is_empty(cx),\n+            //TyRef(_, ref tm) => tm.ty.is_uninhabited(cx),\n             _ => false,\n         }\n     }\n@@ -1225,7 +1233,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyArray(_, _) |\n             TySlice(_) |\n             TyRawPtr(_) |\n-            TyEmpty |\n+            TyNever |\n             TyTuple(_) |\n             TyParam(_) |\n             TyInfer(_) |"}, {"sha": "d7bb8ff2995aa17e359a97d15bc2879d7e795140", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -485,7 +485,7 @@ impl<'a, 'gcx, 'tcx> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx> {\n                 self.def_id(data.trait_ref.def_id);\n                 self.hash(data.item_name.as_str());\n             }\n-            TyEmpty |\n+            TyNever |\n             TyBool |\n             TyChar |\n             TyStr |\n@@ -551,7 +551,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n \n         // Fast-path for primitive types\n         let result = match self.sty {\n-            TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) | TyEmpty |\n+            TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) | TyNever |\n             TyRawPtr(..) | TyFnDef(..) | TyFnPtr(_) | TyRef(_, TypeAndMut {\n                 mutbl: hir::MutImmutable, ..\n             }) => Some(false),\n@@ -597,7 +597,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n         let result = match self.sty {\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n             TyBox(..) | TyRawPtr(..) | TyRef(..) | TyFnDef(..) | TyFnPtr(_) |\n-            TyArray(..) | TyTuple(..) | TyClosure(..) | TyEmpty => Some(true),\n+            TyArray(..) | TyTuple(..) | TyClosure(..) | TyNever => Some(true),\n \n             TyStr | TyTrait(..) | TySlice(_) => Some(false),\n "}, {"sha": "9c1f9d9537a4f2e7e8e2e3715312b0b36df08818", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -70,7 +70,7 @@ pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> IntoIter<Ty<'tcx>> {\n fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) {\n     match parent_ty.sty {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) | ty::TyFloat(_) |\n-        ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyEmpty | ty::TyError => {\n+        ty::TyStr | ty::TyInfer(_) | ty::TyParam(_) | ty::TyNever | ty::TyError => {\n         }\n         ty::TyBox(ty) | ty::TyArray(ty, _) | ty::TySlice(ty) => {\n             stack.push(ty);"}, {"sha": "bfc2e11d9fbcef7a56c49859ff3494f6be64fea8", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                 ty::TyFloat(..) |\n                 ty::TyError |\n                 ty::TyStr |\n-                ty::TyEmpty |\n+                ty::TyNever |\n                 ty::TyParam(_) => {\n                     // WfScalar, WfParameter, etc\n                 }"}, {"sha": "896ef49de6f05240d1bc2749effa35e262ddd9d9", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -14,7 +14,7 @@ use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use ty::{TyBool, TyChar, TyStruct, TyEnum};\n use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n-use ty::{TyParam, TyRawPtr, TyRef, TyEmpty, TyTuple};\n+use ty::{TyParam, TyRawPtr, TyRef, TyNever, TyTuple};\n use ty::TyClosure;\n use ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n@@ -422,8 +422,8 @@ impl<'tcx, 'container> fmt::Debug for ty::AdtDefData<'tcx, 'container> {\n impl<'tcx> fmt::Debug for ty::adjustment::AutoAdjustment<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            ty::adjustment::AdjustEmptyToAny(ref target) => {\n-                write!(f, \"AdjustEmptyToAny({:?})\", target)\n+            ty::adjustment::AdjustNeverToAny(ref target) => {\n+                write!(f, \"AdjustNeverToAny({:?})\", target)\n             }\n             ty::adjustment::AdjustReifyFnPointer => {\n                 write!(f, \"AdjustReifyFnPointer\")\n@@ -843,7 +843,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                 }\n                 write!(f, \"{}\", tm)\n             }\n-            TyEmpty => write!(f, \"!\"),\n+            TyNever => write!(f, \"!\"),\n             TyTuple(ref tys) => {\n                 write!(f, \"(\")?;\n                 let mut tys = tys.iter();"}, {"sha": "d80e152248fc020d8e61f954e24dc423ea85cf7d", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -215,17 +215,17 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &hir::Expr) {\n             // Check for empty enum, because is_useful only works on inhabited types.\n             let pat_ty = cx.tcx.node_id_to_type(scrut.id);\n             if inlined_arms.is_empty() {\n-                if !pat_ty.is_empty(cx.tcx) {\n+                if !pat_ty.is_uninhabited(cx.tcx) {\n                     // We know the type is inhabited, so this must be wrong\n                     let mut err = struct_span_err!(cx.tcx.sess, ex.span, E0002,\n-                                                   \"non-exhaustive patterns: type {} is non-empty\",\n+                                                   \"non-exhaustive patterns: type {} is inhabited\",\n                                                    pat_ty);\n                     span_help!(&mut err, ex.span,\n                         \"Please ensure that all possible cases are being handled; \\\n                          possibly adding wildcards or more match arms.\");\n                     err.emit();\n                 }\n-                // If the type *is* empty, it's vacuously exhaustive\n+                // If the type *is* uninhabited, it's vacuously exhaustive\n                 return;\n             }\n "}, {"sha": "99df5c6e5f95e591b7592d807862781e3f9a2974", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n             // Primitive types with a stable representation.\n             ty::TyBool | ty::TyInt(..) | ty::TyUint(..) |\n-            ty::TyFloat(..) | ty::TyEmpty => FfiSafe,\n+            ty::TyFloat(..) | ty::TyNever => FfiSafe,\n \n             ty::TyBox(..) => {\n                 FfiUnsafe(\"found Rust type Box<_> in foreign module, \\"}, {"sha": "57705301aab4e55b27a5edb884c7ad1d9d2e0f5e", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -133,7 +133,7 @@ impl LateLintPass for UnusedResults {\n         let t = cx.tcx.expr_ty(&expr);\n         let warned = match t.sty {\n             ty::TyTuple(ref tys) if tys.is_empty() => return,\n-            ty::TyEmpty => return,\n+            ty::TyNever => return,\n             ty::TyBool => return,\n             ty::TyStruct(def, _) |\n             ty::TyEnum(def, _) => {"}, {"sha": "b8e66530ea1533c0e6299bc9b551a731efe30e0e", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -645,8 +645,8 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                     })\n                 }\n \n-                adjustment::AdjustEmptyToAny(ref ty) => {\n-                    this.emit_enum_variant(\"AdjustEmptyToAny\", 5, 1, |this| {\n+                adjustment::AdjustNeverToAny(ref ty) => {\n+                    this.emit_enum_variant(\"AdjustNeverToAny\", 5, 1, |this| {\n                         this.emit_enum_variant_arg(0, |this| Ok(this.emit_ty(ecx, ty)))\n                     })\n                 }\n@@ -1024,7 +1024,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n         self.read_enum(\"AutoAdjustment\", |this| {\n             let variants = [\"AdjustReifyFnPointer\", \"AdjustUnsafeFnPointer\",\n                             \"AdjustMutToConstPointer\", \"AdjustDerefRef\",\n-                            \"AdjustEmptyToAny\"];\n+                            \"AdjustNeverToAny\"];\n             this.read_enum_variant(&variants, |this, i| {\n                 Ok(match i {\n                     1 => adjustment::AdjustReifyFnPointer,\n@@ -1042,7 +1042,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                             Ok(this.read_ty(dcx))\n                         }).unwrap();\n \n-                        adjustment::AdjustEmptyToAny(ty)\n+                        adjustment::AdjustNeverToAny(ty)\n                     }\n                     _ => bug!(\"bad enum variant for adjustment::AutoAdjustment\")\n                 })"}, {"sha": "7b4919bb4773be39e41447b8a37b47e299e8a0d4", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -311,7 +311,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         let tcx = self.tcx;\n         match self.next() {\n             'b' => return tcx.types.bool,\n-            '!' => return tcx.types.empty,\n+            '!' => return tcx.types.never,\n             'i' => { /* eat the s of is */ self.next(); return tcx.types.isize },\n             'u' => { /* eat the s of us */ self.next(); return tcx.types.usize },\n             'M' => {"}, {"sha": "15bafcdd3c99e9e5d61378be03509da0d264a640", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -74,7 +74,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Cursor<Vec<u8>>, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx\n     match t.sty {\n         ty::TyBool => { write!(w, \"b\"); }\n         ty::TyChar => { write!(w, \"c\"); }\n-        ty::TyEmpty => { write!(w, \"!\"); }\n+        ty::TyNever => { write!(w, \"!\"); }\n         ty::TyInt(t) => {\n             match t {\n                 ast::IntTy::Is => write!(w, \"is\"),"}, {"sha": "ae5ccbfd820996f8c1b582e66a501032f538797f", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -96,7 +96,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::LogicalOp { .. } |\n             ExprKind::Box { .. } |\n             ExprKind::Cast { .. } |\n-            ExprKind::EmptyToAny { .. } |\n+            ExprKind::NeverToAny { .. } |\n             ExprKind::ReifyFnPointer { .. } |\n             ExprKind::UnsafeFnPointer { .. } |\n             ExprKind::Unsize { .. } |"}, {"sha": "dafc53d3c154208e518295b293d0a51d42a3105f", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Block { .. } |\n             ExprKind::Match { .. } |\n             ExprKind::If { .. } |\n-            ExprKind::EmptyToAny { .. } |\n+            ExprKind::NeverToAny { .. } |\n             ExprKind::Loop { .. } |\n             ExprKind::LogicalOp { .. } |\n             ExprKind::Call { .. } |"}, {"sha": "c19ea0f445ac0ce8b60b7fb83dcc2f2297f59d9f", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -56,7 +56,7 @@ impl Category {\n             ExprKind::LogicalOp { .. } |\n             ExprKind::If { .. } |\n             ExprKind::Match { .. } |\n-            ExprKind::EmptyToAny { .. } |\n+            ExprKind::NeverToAny { .. } |\n             ExprKind::Call { .. } =>\n                 Some(Category::Rvalue(RvalueFunc::Into)),\n "}, {"sha": "e5930f5a62df6da0c240e2459d2ef1e37bdb9576", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Match { discriminant, arms } => {\n                 this.match_expr(destination, expr_span, block, discriminant, arms)\n             }\n-            ExprKind::EmptyToAny { source } => {\n+            ExprKind::NeverToAny { source } => {\n                 let source = this.hir.mirror(source);\n                 let is_call = match source.kind {\n                     ExprKind::Call { .. } => true,\n@@ -209,7 +209,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Call { ty, fun, args } => {\n                 let diverges = match ty.sty {\n                     ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => {\n-                        f.sig.0.output.is_empty(this.hir.tcx())\n+                        // FIXME(canndrew): This is_never should probably be an is_uninhabited\n+                        f.sig.0.output.is_never()\n                     }\n                     _ => false\n                 };"}, {"sha": "8a6a33decd64263ab33ec2e7d1979a777d14542f", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -60,13 +60,13 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                     kind: ExprKind::UnsafeFnPointer { source: expr.to_ref() },\n                 };\n             }\n-            Some(&ty::adjustment::AdjustEmptyToAny(..)) => {\n+            Some(&ty::adjustment::AdjustNeverToAny(..)) => {\n                 let adjusted_ty = cx.tcx.expr_ty_adjusted(self);\n                 expr = Expr {\n                     temp_lifetime: temp_lifetime,\n                     ty: adjusted_ty,\n                     span: self.span,\n-                    kind: ExprKind::EmptyToAny { source: expr.to_ref() },\n+                    kind: ExprKind::NeverToAny { source: expr.to_ref() },\n                 };\n             }\n             Some(&ty::adjustment::AdjustMutToConstPointer) => {"}, {"sha": "2a5b7d0fb29024950cc727c92a407532a4810324", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -139,7 +139,7 @@ pub enum ExprKind<'tcx> {\n     Cast {\n         source: ExprRef<'tcx>,\n     },\n-    EmptyToAny {\n+    NeverToAny {\n         source: ExprRef<'tcx>,\n     },\n     ReifyFnPointer {"}, {"sha": "a030ba17655fd908f47f27364bddb4e7b367e4c9", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -492,7 +492,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n             },\n             None => {\n-                if !sig.output.is_empty(tcx) {\n+                // FIXME(canndrew): This is_never should probably be an is_uninhabited\n+                if !sig.output.is_never() {\n                     span_mirbug!(self, term, \"call to converging function {:?} w/o dest\", sig);\n                 }\n             },"}, {"sha": "0c54f20fe76676bfd19c71405c3799a1752e0595", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -632,7 +632,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr) {\n     match v.tcx.tables.borrow().adjustments.get(&e.id) {\n         None |\n-        Some(&ty::adjustment::AdjustEmptyToAny(..)) |\n+        Some(&ty::adjustment::AdjustNeverToAny(..)) |\n         Some(&ty::adjustment::AdjustReifyFnPointer) |\n         Some(&ty::adjustment::AdjustUnsafeFnPointer) |\n         Some(&ty::adjustment::AdjustMutToConstPointer) => {}"}, {"sha": "27a8c1f1df47686e3b0d6f66a127ab80685c831d", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -1593,7 +1593,7 @@ fn trans_match_inner<'blk, 'tcx>(scope_cx: Block<'blk, 'tcx>,\n     }\n \n     let t = node_id_type(bcx, discr_expr.id);\n-    let chk = if t.is_empty(tcx) {\n+    let chk = if t.is_uninhabited(tcx) {\n         Unreachable\n     } else {\n         Infallible"}, {"sha": "aaec2a47025a2e2a7d788e57ac96c817f8a4596b", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -712,7 +712,8 @@ fn trans_call_inner<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         _ => {}\n     }\n \n-    if output.is_empty(bcx.tcx()) {\n+    // FIXME(canndrew): This is_never should really be an is_uninhabited\n+    if output.is_never() {\n         Unreachable(bcx);\n     }\n "}, {"sha": "6decc48c36a3b17a71586a42fa752b5990f18478", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -753,7 +753,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         ty::TyRef(..)   |\n         ty::TyFnDef(..) |\n         ty::TyFnPtr(_)  |\n-        ty::TyEmpty     |\n+        ty::TyNever     |\n         ty::TyTrait(_)  => {\n             /* nothing to do */\n         }"}, {"sha": "79cf77cd9d35d534c8434dc1dac8b5dd4d444d3a", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -558,7 +558,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n             abi: Abi::C,\n             sig: ty::Binder(ty::FnSig {\n                 inputs: vec![tcx.mk_mut_ptr(tcx.types.u8)],\n-                output: tcx.types.empty,\n+                output: tcx.types.never,\n                 variadic: false\n             }),\n         }));"}, {"sha": "3ecba3691d279d22dd994b002a66de89e556db4b", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -34,7 +34,7 @@ use type_of;\n use value::Value;\n use Disr;\n use rustc::ty::subst::Substs;\n-use rustc::ty::adjustment::{AdjustEmptyToAny, AdjustDerefRef, AdjustReifyFnPointer};\n+use rustc::ty::adjustment::{AdjustNeverToAny, AdjustDerefRef, AdjustReifyFnPointer};\n use rustc::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::cast::{CastTy,IntTy};\n@@ -348,7 +348,7 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                                             &cx.tcx().expr_ty_adjusted(e));\n     let opt_adj = cx.tcx().tables.borrow().adjustments.get(&e.id).cloned();\n     match opt_adj {\n-        Some(AdjustEmptyToAny(..)) => span_bug!(e.span, \"const expression of type ! encountered\"),\n+        Some(AdjustNeverToAny(..)) => span_bug!(e.span, \"const expression of type ! encountered\"),\n         Some(AdjustReifyFnPointer) => {\n             match ety.sty {\n                 ty::TyFnDef(def_id, substs, _) => {"}, {"sha": "3fe8b2b66791a8c65b3db77cca77596c7b167a9d", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -171,7 +171,7 @@ impl<'tcx> TypeMap<'tcx> {\n         unique_type_id.push('{');\n \n         match type_.sty {\n-            ty::TyEmpty    |\n+            ty::TyNever    |\n             ty::TyBool     |\n             ty::TyChar     |\n             ty::TyStr      |\n@@ -695,7 +695,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     let sty = &t.sty;\n     let MetadataCreationResult { metadata, already_stored_in_typemap } = match *sty {\n-        ty::TyEmpty    |\n+        ty::TyNever    |\n         ty::TyBool     |\n         ty::TyChar     |\n         ty::TyInt(_)   |\n@@ -912,7 +912,7 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     debug!(\"basic_type_metadata: {:?}\", t);\n \n     let (name, encoding) = match t.sty {\n-        ty::TyEmpty => (\"!\", DW_ATE_unsigned),\n+        ty::TyNever => (\"!\", DW_ATE_unsigned),\n         ty::TyTuple(ref elements) if elements.is_empty() =>\n             (\"()\", DW_ATE_unsigned),\n         ty::TyBool => (\"bool\", DW_ATE_boolean),"}, {"sha": "73b1c828663e1b660751578045a2dce73b28e956", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -40,7 +40,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::TyBool => output.push_str(\"bool\"),\n         ty::TyChar => output.push_str(\"char\"),\n         ty::TyStr => output.push_str(\"str\"),\n-        ty::TyEmpty => output.push_str(\"!\"),\n+        ty::TyNever => output.push_str(\"!\"),\n         ty::TyInt(int_ty) => output.push_str(int_ty.ty_to_string()),\n         ty::TyUint(uint_ty) => output.push_str(uint_ty.ty_to_string()),\n         ty::TyFloat(float_ty) => output.push_str(float_ty.ty_to_string()),"}, {"sha": "4d9ee187ac50c36ddad54d98548175e874b4c26f", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -111,7 +111,8 @@ pub fn declare_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, name: &str,\n     let fty = FnType::new(ccx, abi, &sig, &[]);\n     let llfn = declare_raw_fn(ccx, name, fty.cconv, fty.llvm_type(ccx));\n \n-    if sig.output.is_empty(ccx.tcx()) {\n+    // FIXME(canndrew): This is_never should really be an is_uninhabited\n+    if sig.output.is_never() {\n         llvm::Attribute::NoReturn.apply_llfn(Function, llfn);\n     }\n "}, {"sha": "0ea571513f7517d60aa2628738c7ea637282a2b1", "filename": "src/librustc_trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fexpr.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -69,7 +69,7 @@ use tvec;\n use type_of;\n use value::Value;\n use Disr;\n-use rustc::ty::adjustment::{AdjustEmptyToAny, AdjustDerefRef, AdjustReifyFnPointer};\n+use rustc::ty::adjustment::{AdjustNeverToAny, AdjustDerefRef, AdjustReifyFnPointer};\n use rustc::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -348,7 +348,7 @@ fn adjustment_required<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     }\n \n     match adjustment {\n-        AdjustEmptyToAny(..) => true,\n+        AdjustNeverToAny(..) => true,\n         AdjustReifyFnPointer => true,\n         AdjustUnsafeFnPointer | AdjustMutToConstPointer => {\n             // purely a type-level thing\n@@ -381,7 +381,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     debug!(\"unadjusted datum for expr {:?}: {:?} adjustment={:?}\",\n            expr, datum, adjustment);\n     match adjustment {\n-        AdjustEmptyToAny(ref target) => {\n+        AdjustNeverToAny(ref target) => {\n             let mono_target = bcx.monomorphize(target);\n             let llty = type_of::type_of(bcx.ccx(), mono_target);\n             let dummy = C_undef(llty.ptr_to());"}, {"sha": "90058f0b8329a30afdc3f0d694c9438599fffd7a", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -412,7 +412,7 @@ pub fn push_unique_type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::TyBool              => output.push_str(\"bool\"),\n         ty::TyChar              => output.push_str(\"char\"),\n         ty::TyStr               => output.push_str(\"str\"),\n-        ty::TyEmpty             => output.push_str(\"!\"),\n+        ty::TyNever             => output.push_str(\"!\"),\n         ty::TyInt(ast::IntTy::Is)    => output.push_str(\"isize\"),\n         ty::TyInt(ast::IntTy::I8)    => output.push_str(\"i8\"),\n         ty::TyInt(ast::IntTy::I16)   => output.push_str(\"i16\"),"}, {"sha": "e6794149fcb3b5b7088dc476b7aa6b1977d6abcd", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -64,7 +64,7 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n         ty::TyInt(t) => Type::int_from_ty(cx, t),\n         ty::TyUint(t) => Type::uint_from_ty(cx, t),\n         ty::TyFloat(t) => Type::float_from_ty(cx, t),\n-        ty::TyEmpty => Type::nil(cx),\n+        ty::TyNever => Type::nil(cx),\n \n         ty::TyBox(ty) |\n         ty::TyRef(_, ty::TypeAndMut{ty, ..}) |\n@@ -250,7 +250,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n       ty::TyInt(t) => Type::int_from_ty(cx, t),\n       ty::TyUint(t) => Type::uint_from_ty(cx, t),\n       ty::TyFloat(t) => Type::float_from_ty(cx, t),\n-      ty::TyEmpty => Type::nil(cx),\n+      ty::TyNever => Type::nil(cx),\n       ty::TyEnum(def, ref substs) => {\n           // Only create the named struct, but don't fill it in. We\n           // fill it in *after* placing it into the type cache. This"}, {"sha": "ed67c9fbe30bee94e3f7ebeb94dc8a0831e28bfe", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -1700,8 +1700,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let t = self.ast_ty_to_ty(rscope1, &mt.ty);\n                 tcx.mk_ref(tcx.mk_region(r), ty::TypeAndMut {ty: t, mutbl: mt.mutbl})\n             }\n-            hir::TyEmpty => {\n-                tcx.types.empty\n+            hir::TyNever => {\n+                tcx.types.never\n             },\n             hir::TyTup(ref fields) => {\n                 let flds = fields.iter()"}, {"sha": "f5345bbea2d54c6249d5c56332dd4f6d6d048092", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -68,8 +68,8 @@ use rustc::traits::{self, ObligationCause};\n use rustc::ty::adjustment::{AutoAdjustment, AutoDerefRef, AdjustDerefRef};\n use rustc::ty::adjustment::{AutoPtr, AutoUnsafe, AdjustReifyFnPointer};\n use rustc::ty::adjustment::{AdjustUnsafeFnPointer, AdjustMutToConstPointer};\n-use rustc::ty::adjustment::AdjustEmptyToAny;\n-use rustc::ty::{self, TypeVariants, LvaluePreference, TypeAndMut, Ty};\n+use rustc::ty::adjustment::AdjustNeverToAny;\n+use rustc::ty::{self, LvaluePreference, TypeAndMut, Ty};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;\n@@ -168,8 +168,8 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n             return self.identity(b);\n         }\n \n-        if let TypeVariants::TyEmpty = a.sty {\n-            return Ok((b, AdjustEmptyToAny(b)));\n+        if a.is_never() {\n+            return Ok((b, AdjustNeverToAny(b)));\n         }\n \n         // Consider coercing the subtype to a DST"}, {"sha": "f3a01ef7409fa48fa7a86b600b963d7f9a59e4da", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -433,7 +433,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'b, 'gcx, 'tcx>(\n     // We still need to ensure all referenced data is safe.\n     match ty.sty {\n         ty::TyBool | ty::TyChar | ty::TyInt(_) | ty::TyUint(_) |\n-        ty::TyFloat(_) | ty::TyStr | ty::TyEmpty => {\n+        ty::TyFloat(_) | ty::TyStr | ty::TyNever => {\n             // primitive - definitely safe\n             Ok(())\n         }"}, {"sha": "ddc8c82c122549e0c80079c535019b3a8449a3cd", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -106,7 +106,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n         };\n         (n_tps, inputs, output)\n     } else if &name[..] == \"abort\" || &name[..] == \"unreachable\" {\n-        (0, Vec::new(), tcx.types.empty)\n+        (0, Vec::new(), tcx.types.never)\n     } else {\n         let (n_tps, inputs, output) = match &name[..] {\n             \"breakpoint\" => (0, Vec::new(), tcx.mk_nil()),"}, {"sha": "6ad7c5a8477299cfc0eb34a62f31f4837d0cb92d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -93,7 +93,7 @@ use rustc::traits::{self, Reveal};\n use rustc::ty::{GenericPredicates, TypeScheme};\n use rustc::ty::{ParamTy, ParameterEnvironment};\n use rustc::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n-use rustc::ty::{self, ToPolyTraitRef, Ty, TypeVariants, TyCtxt, Visibility};\n+use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, Visibility};\n use rustc::ty::{MethodCall, MethodCallee};\n use rustc::ty::adjustment;\n use rustc::ty::fold::{BottomUpFolder, TypeFoldable};\n@@ -1556,8 +1556,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     #[inline]\n     pub fn write_ty_expr(&self, node_id: ast::NodeId, ty: Ty<'tcx>) {\n         self.write_ty(node_id, ty);\n-        if let TypeVariants::TyEmpty = ty.sty {\n-            self.write_adjustment(node_id, adjustment::AdjustEmptyToAny(self.next_diverging_ty_var()));\n+        if ty.is_never() {\n+            self.write_adjustment(node_id, adjustment::AdjustNeverToAny(self.next_diverging_ty_var()));\n         }\n     }\n \n@@ -1732,8 +1732,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.write_ty(node_id, self.tcx.mk_nil());\n     }\n \n-    pub fn write_empty(&self, node_id: ast::NodeId) {\n-        self.write_ty_expr(node_id, self.tcx.types.empty);\n+    pub fn write_never(&self, node_id: ast::NodeId) {\n+        self.write_ty_expr(node_id, self.tcx.types.never);\n     }\n \n     pub fn write_error(&self, node_id: ast::NodeId) {\n@@ -1793,7 +1793,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn expr_ty(&self, ex: &hir::Expr) -> Ty<'tcx> {\n-        if let Some(&adjustment::AdjustEmptyToAny(ref t))\n+        if let Some(&adjustment::AdjustNeverToAny(ref t))\n                 = self.tables.borrow().adjustments.get(&ex.id) {\n             return t;\n         }\n@@ -1977,7 +1977,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if self.type_var_diverges(resolved) {\n                 debug!(\"default_type_parameters: defaulting `{:?}` to `!` because it diverges\",\n                        resolved);\n-                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.empty);\n+                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.never);\n             } else {\n                 match self.type_is_unconstrained_numeric(resolved) {\n                     UnconstrainedInt => {\n@@ -2051,7 +2051,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for ty in &unsolved_variables {\n                 let resolved = self.resolve_type_vars_if_possible(ty);\n                 if self.type_var_diverges(resolved) {\n-                    self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.empty);\n+                    self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.never);\n                 } else {\n                     match self.type_is_unconstrained_numeric(resolved) {\n                         UnconstrainedInt | UnconstrainedFloat => {\n@@ -2109,7 +2109,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let _ = self.commit_if_ok(|_: &infer::CombinedSnapshot| {\n                 for ty in &unbound_tyvars {\n                     if self.type_var_diverges(ty) {\n-                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.empty);\n+                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.never);\n                     } else {\n                         match self.type_is_unconstrained_numeric(ty) {\n                             UnconstrainedInt => {\n@@ -2205,7 +2205,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // reporting for more then one conflict.\n         for ty in &unbound_tyvars {\n             if self.type_var_diverges(ty) {\n-                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.empty);\n+                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.never);\n             } else {\n                 match self.type_is_unconstrained_numeric(ty) {\n                     UnconstrainedInt => {\n@@ -2610,9 +2610,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n \n                 if let Some(&arg_ty) = self.tables.borrow().node_types.get(&arg.id) {\n+                    // FIXME(canndrew): This is_never should probably be an is_uninhabited\n                     any_diverges = any_diverges ||\n                                    self.type_var_diverges(arg_ty) ||\n-                                   arg_ty.is_empty(self.tcx);\n+                                   arg_ty.is_never();\n                 }\n             }\n             if any_diverges && !warned {\n@@ -3485,8 +3486,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               }\n               self.write_nil(id);\n           }\n-          hir::ExprBreak(_) => { self.write_empty(id); }\n-          hir::ExprAgain(_) => { self.write_empty(id); }\n+          hir::ExprBreak(_) => { self.write_never(id); }\n+          hir::ExprAgain(_) => { self.write_never(id); }\n           hir::ExprRet(ref expr_opt) => {\n             if let Some(ref e) = *expr_opt {\n                 self.check_expr_coercable_to_type(&e, self.ret_ty);\n@@ -3504,7 +3505,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         .emit();\n                 }\n             }\n-            self.write_empty(id);\n+            self.write_never(id);\n           }\n           hir::ExprAssign(ref lhs, ref rhs) => {\n             self.check_expr_with_lvalue_pref(&lhs, PreferMutLvalue);\n@@ -3546,7 +3547,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           hir::ExprLoop(ref body, _) => {\n             self.check_block_no_value(&body);\n             if !may_break(tcx, expr.id, &body) {\n-                self.write_empty(id);\n+                self.write_never(id);\n             } else {\n                 self.write_nil(id);\n             }\n@@ -4002,9 +4003,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                               \"unreachable statement\".to_string());\n                 warned = true;\n             }\n+            // FIXME(canndrew): This is_never should probably be an is_uninhabited\n             any_diverges = any_diverges ||\n                            self.type_var_diverges(s_ty) ||\n-                           s_ty.is_empty(self.tcx);\n+                           s_ty.is_never();\n             any_err = any_err || s_ty.references_error();\n         }\n         match blk.expr {"}, {"sha": "4bb9f4fd332f2e3c183d75d79a5790622b8cfe13", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n         let id = self.id;\n         let span = self.span;\n         self.inherited.enter(|inh| {\n-            let fcx = FnCtxt::new(&inh, inh.ccx.tcx.types.empty, id);\n+            let fcx = FnCtxt::new(&inh, inh.ccx.tcx.types.never, id);\n             let wf_tys = f(&fcx, &mut CheckTypeWellFormedVisitor {\n                 ccx: fcx.ccx,\n                 code: code"}, {"sha": "5f8861f309948d1dfdff5a65d1b18a2f931bc14c", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -378,8 +378,8 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n             Some(adjustment) => {\n                 let resolved_adjustment = match adjustment {\n-                    adjustment::AdjustEmptyToAny(ty) => {\n-                        adjustment::AdjustEmptyToAny(self.resolve(&ty, reason))\n+                    adjustment::AdjustNeverToAny(ty) => {\n+                        adjustment::AdjustNeverToAny(self.resolve(&ty, reason))\n                     }\n \n                     adjustment::AdjustReifyFnPointer => {"}, {"sha": "9b26e95f7fa55b3255c9514cfe6d21331827ced6", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -24,7 +24,7 @@ use rustc::ty::{ImplOrTraitItemId, ConstTraitItemId};\n use rustc::ty::{MethodTraitItemId, TypeTraitItemId, ParameterEnvironment};\n use rustc::ty::{Ty, TyBool, TyChar, TyEnum, TyError};\n use rustc::ty::{TyParam, TyRawPtr};\n-use rustc::ty::{TyRef, TyStruct, TyTrait, TyEmpty, TyTuple};\n+use rustc::ty::{TyRef, TyStruct, TyTrait, TyNever, TyTuple};\n use rustc::ty::{TyStr, TyArray, TySlice, TyFloat, TyInfer, TyInt};\n use rustc::ty::{TyUint, TyClosure, TyBox, TyFnDef, TyFnPtr};\n use rustc::ty::{TyProjection, TyAnon};\n@@ -84,7 +84,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n \n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n             TyStr | TyArray(..) | TySlice(..) | TyFnDef(..) | TyFnPtr(_) |\n-            TyTuple(..) | TyParam(..) | TyError | TyEmpty |\n+            TyTuple(..) | TyParam(..) | TyError | TyNever |\n             TyRawPtr(_) | TyRef(_, _) | TyProjection(..) => {\n                 None\n             }"}, {"sha": "a4faee8f633ed71a423c5bce34392a1daae94365", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -322,7 +322,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         match ty.sty {\n             ty::TyBool |\n             ty::TyChar | ty::TyInt(_) | ty::TyUint(_) |\n-            ty::TyFloat(_) | ty::TyStr | ty::TyEmpty => {\n+            ty::TyFloat(_) | ty::TyStr | ty::TyNever => {\n                 /* leaf type -- noop */\n             }\n "}, {"sha": "99d2732c4bb06c300bad012c7589c08770d94626", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -1459,8 +1459,7 @@ pub enum Type {\n     Tuple(Vec<Type>),\n     Vector(Box<Type>),\n     FixedVector(Box<Type>, String),\n-    /// aka TyBot\n-    Bottom,\n+    Never,\n     Unique(Box<Type>),\n     RawPointer(Mutability, Box<Type>),\n     BorrowedRef {\n@@ -1671,7 +1670,7 @@ impl Clean<Type> for hir::Ty {\n     fn clean(&self, cx: &DocContext) -> Type {\n         use rustc::hir::*;\n         match self.node {\n-            TyEmpty => Bottom,\n+            TyNever => Never,\n             TyPtr(ref m) => RawPointer(m.mutbl.clean(cx), box m.ty.clean(cx)),\n             TyRptr(ref l, ref m) =>\n                 BorrowedRef {lifetime: l.clean(cx), mutability: m.mutbl.clean(cx),\n@@ -1780,7 +1779,7 @@ impl Clean<Type> for hir::Ty {\n impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         match self.sty {\n-            ty::TyEmpty => Bottom,\n+            ty::TyNever => Never,\n             ty::TyBool => Primitive(Bool),\n             ty::TyChar => Primitive(Char),\n             ty::TyInt(ast::IntTy::Is) => Primitive(Isize),"}, {"sha": "2f03b235e9f672f397664bdbe874a4dc82734139", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -492,7 +492,7 @@ impl fmt::Display for clean::Type {\n                 primitive_link(f, clean::PrimitiveType::Array,\n                                &format!(\"; {}]\", Escape(s)))\n             }\n-            clean::Bottom => f.write_str(\"!\"),\n+            clean::Never => f.write_str(\"!\"),\n             clean::RawPointer(m, ref t) => {\n                 match **t {\n                     clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {"}, {"sha": "f8a5cb0b04a8e8bcab9f759e780b0fd9dab19d80", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -1358,8 +1358,8 @@ pub enum TyKind {\n     Rptr(Option<Lifetime>, MutTy),\n     /// A bare function (e.g. `fn(usize) -> bool`)\n     BareFn(P<BareFnTy>),\n-    /// The empty type (`!`)\n-    Empty,\n+    /// The never type (`!`)\n+    Never,\n     /// A tuple (`(A, B, C, D,...)`)\n     Tup(Vec<P<Ty>> ),\n     /// A path (`module::module::...::Type`), optionally"}, {"sha": "734d8d442562cb7b05b38c94eb508038c3af0ca7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -287,7 +287,7 @@ declare_features! (\n     (active, relaxed_adts, \"1.12.0\", Some(35626)),\n \n     // The `!` type\n-    (active, bang_type, \"1.13.0\", Some(35121))\n+    (active, never_type, \"1.13.0\", Some(35121))\n );\n \n declare_features! (\n@@ -966,8 +966,8 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, conservative_impl_trait, ty.span,\n                                    \"`impl Trait` is experimental\");\n             }\n-            ast::TyKind::Empty => {\n-                gate_feature_post!(&self, bang_type, ty.span,\n+            ast::TyKind::Never => {\n+                gate_feature_post!(&self, never_type, ty.span,\n                                    \"The `!` type is experimental\");\n             },\n             _ => {}\n@@ -978,7 +978,7 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n     fn visit_fn_ret_ty(&mut self, ret_ty: &ast::FunctionRetTy) {\n         if let ast::FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n             match output_ty.node {\n-                ast::TyKind::Empty => return,\n+                ast::TyKind::Never => return,\n                 _ => (),\n             };\n             visit::walk_ty(self, output_ty)"}, {"sha": "b257ab98987dc24701760d1ec76301380d39aa1e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -373,7 +373,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                     decl: fld.fold_fn_decl(decl)\n                 }))\n             }\n-            TyKind::Empty => node,\n+            TyKind::Never => node,\n             TyKind::Tup(tys) => TyKind::Tup(tys.move_map(|ty| fld.fold_ty(ty))),\n             TyKind::Paren(ty) => TyKind::Paren(fld.fold_ty(ty)),\n             TyKind::Path(qself, path) => {"}, {"sha": "118096d9d4863fe39e745e98d876313d3c0b8492", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -1396,7 +1396,7 @@ impl<'a> Parser<'a> {\n                 TyKind::Tup(ts)\n             }\n         } else if self.eat(&token::Not) {\n-            TyKind::Empty\n+            TyKind::Never\n         } else if self.check(&token::BinOp(token::Star)) {\n             // STAR POINTER (bare pointer?)\n             self.bump();"}, {"sha": "24d8198191e34e02109eef6aac5580887fe56717", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -976,7 +976,7 @@ impl<'a> State<'a> {\n                 try!(self.print_opt_lifetime(lifetime));\n                 try!(self.print_mt(mt));\n             }\n-            ast::TyKind::Empty => {\n+            ast::TyKind::Never => {\n                 word(&mut self.s, \"!\")?;\n             },\n             ast::TyKind::Tup(ref elts) => {"}, {"sha": "8b03afdeb3688610d7427e4deb9ddbb0410bbad6", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -323,7 +323,7 @@ pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n             walk_list!(visitor, visit_lifetime, opt_lifetime);\n             visitor.visit_ty(&mutable_type.ty)\n         }\n-        TyKind::Empty => {},\n+        TyKind::Never => {},\n         TyKind::Tup(ref tuple_element_types) => {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }"}, {"sha": "b390aae6143443c3b28db254d484e7c37f466c9a", "filename": "src/test/run-fail/adjust_never.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Ftest%2Frun-fail%2Fadjust_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fadabe08f52ce524a0cbb5af327e55db61198024/src%2Ftest%2Frun-fail%2Fadjust_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fadjust_never.rs?ref=fadabe08f52ce524a0cbb5af327e55db61198024", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(bang_type)]\n-\n-\n+#![feature(never_type)]\n \n // error-pattern:explicit\n fn main() {", "previous_filename": "src/test/run-fail/adjust_empty.rs"}]}