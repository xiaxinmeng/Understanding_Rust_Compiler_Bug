{"sha": "a3eb2f0f222d628440975b58589fc75994403a97", "node_id": "C_kwDOAAsO6NoAKGEzZWIyZjBmMjIyZDYyODQ0MDk3NWI1ODU4OWZjNzU5OTQ0MDNhOTc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-29T08:37:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-29T08:37:28Z"}, "message": "Rollup merge of #109664 - m-ou-se:format-args-placeholder-span, r=oli-obk\n\nUse span of placeholders in format_args!() expansion.\n\n`format_args!(\"{}\", x)` expands to something that contains `Argument::new_display(&x)`. That entire expression was generated with the span of `x`.\n\nAfter this PR, `&x` uses the span of `x`, but the `new_display` call uses the span of the `{}` placeholder within the format string. If an implicitly captured argument was used like in `format_args!(\"{x}\")`, both use the span of the `{x}` placeholder.\n\nThis fixes https://github.com/rust-lang/rust/issues/109576, and also allows for more improvements to similar diagnostics in the future, since the usage of `x` can now be traced to the exact `{}` placeholder that required it to be `Display` (or `Debug` etc.)", "tree": {"sha": "057e1850ab635a1097e2f8b519f5bef4d8bcee9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/057e1850ab635a1097e2f8b519f5bef4d8bcee9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3eb2f0f222d628440975b58589fc75994403a97", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkI/jICRBK7hj4Ov3rIwAApSoIAF0qj9tULTPzXiBN5LY98ilA\nI4RCQ2ikNJQx5mwr7HJOl8/ypaqdRqQeRW9CeyWq6kTSIsm815TtBKXiogiT9IeT\noUYGmEh2WOkflU+h8ND9nSJ6ArHyP10u/0Rdcjz/IgzOgyCDtkZqUdlYAGrGu1CM\n7ee3ocLnhj/OVqENru3tozj17z0UI1Z/OqejPcNF+ItUo/w53Kw/yQ30Dz/0li8a\nNESzkx5LV85yD/IHBy8cjSJS+zt/I1x/uuIfkpY7zqfPB+T6bcJxab5Tkpk3g3lo\nF7edOwiYJznMeAd0gMnXQ/YvrG9JSLh5f7G55hdpjXjfbDJ2jD4zH8rxEGMEIh4=\n=OI/P\n-----END PGP SIGNATURE-----\n", "payload": "tree 057e1850ab635a1097e2f8b519f5bef4d8bcee9e\nparent 39f93d3c98044e246782fd421021f971b612bf5f\nparent 6c72a002a68043f9bc67399c43a66e8ab68ca20b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1680079048 +0530\ncommitter GitHub <noreply@github.com> 1680079048 +0530\n\nRollup merge of #109664 - m-ou-se:format-args-placeholder-span, r=oli-obk\n\nUse span of placeholders in format_args!() expansion.\n\n`format_args!(\"{}\", x)` expands to something that contains `Argument::new_display(&x)`. That entire expression was generated with the span of `x`.\n\nAfter this PR, `&x` uses the span of `x`, but the `new_display` call uses the span of the `{}` placeholder within the format string. If an implicitly captured argument was used like in `format_args!(\"{x}\")`, both use the span of the `{x}` placeholder.\n\nThis fixes https://github.com/rust-lang/rust/issues/109576, and also allows for more improvements to similar diagnostics in the future, since the usage of `x` can now be traced to the exact `{}` placeholder that required it to be `Display` (or `Debug` etc.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3eb2f0f222d628440975b58589fc75994403a97", "html_url": "https://github.com/rust-lang/rust/commit/a3eb2f0f222d628440975b58589fc75994403a97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3eb2f0f222d628440975b58589fc75994403a97/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f93d3c98044e246782fd421021f971b612bf5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f93d3c98044e246782fd421021f971b612bf5f", "html_url": "https://github.com/rust-lang/rust/commit/39f93d3c98044e246782fd421021f971b612bf5f"}, {"sha": "6c72a002a68043f9bc67399c43a66e8ab68ca20b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c72a002a68043f9bc67399c43a66e8ab68ca20b", "html_url": "https://github.com/rust-lang/rust/commit/6c72a002a68043f9bc67399c43a66e8ab68ca20b"}], "stats": {"total": 213, "additions": 153, "deletions": 60}, "files": [{"sha": "c41bdc440935c9969508db9a95a378e44574205a", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a3eb2f0f222d628440975b58589fc75994403a97/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3eb2f0f222d628440975b58589fc75994403a97/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=a3eb2f0f222d628440975b58589fc75994403a97", "patch": "@@ -2,7 +2,7 @@ use super::LoweringContext;\n use rustc_ast as ast;\n use rustc_ast::visit::{self, Visitor};\n use rustc_ast::*;\n-use rustc_data_structures::fx::FxIndexSet;\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir as hir;\n use rustc_span::{\n     sym,\n@@ -238,7 +238,7 @@ fn make_count<'hir>(\n     ctx: &mut LoweringContext<'_, 'hir>,\n     sp: Span,\n     count: &Option<FormatCount>,\n-    argmap: &mut FxIndexSet<(usize, ArgumentType)>,\n+    argmap: &mut FxIndexMap<(usize, ArgumentType), Option<Span>>,\n ) -> hir::Expr<'hir> {\n     match count {\n         Some(FormatCount::Literal(n)) => {\n@@ -252,7 +252,7 @@ fn make_count<'hir>(\n         }\n         Some(FormatCount::Argument(arg)) => {\n             if let Ok(arg_index) = arg.index {\n-                let (i, _) = argmap.insert_full((arg_index, ArgumentType::Usize));\n+                let (i, _) = argmap.insert_full((arg_index, ArgumentType::Usize), arg.span);\n                 let count_param = ctx.arena.alloc(ctx.expr_lang_item_type_relative(\n                     sp,\n                     hir::LangItem::FormatCount,\n@@ -291,12 +291,14 @@ fn make_format_spec<'hir>(\n     ctx: &mut LoweringContext<'_, 'hir>,\n     sp: Span,\n     placeholder: &FormatPlaceholder,\n-    argmap: &mut FxIndexSet<(usize, ArgumentType)>,\n+    argmap: &mut FxIndexMap<(usize, ArgumentType), Option<Span>>,\n ) -> hir::Expr<'hir> {\n     let position = match placeholder.argument.index {\n         Ok(arg_index) => {\n-            let (i, _) =\n-                argmap.insert_full((arg_index, ArgumentType::Format(placeholder.format_trait)));\n+            let (i, _) = argmap.insert_full(\n+                (arg_index, ArgumentType::Format(placeholder.format_trait)),\n+                placeholder.span,\n+            );\n             ctx.expr_usize(sp, i)\n         }\n         Err(_) => ctx.expr(\n@@ -386,15 +388,18 @@ fn expand_format_args<'hir>(\n \n     // Create a list of all _unique_ (argument, format trait) combinations.\n     // E.g. \"{0} {0:x} {0} {1}\" -> [(0, Display), (0, LowerHex), (1, Display)]\n-    let mut argmap = FxIndexSet::default();\n+    let mut argmap = FxIndexMap::default();\n     for piece in &fmt.template {\n         let FormatArgsPiece::Placeholder(placeholder) = piece else { continue };\n         if placeholder.format_options != Default::default() {\n             // Can't use basic form if there's any formatting options.\n             use_format_options = true;\n         }\n         if let Ok(index) = placeholder.argument.index {\n-            if !argmap.insert((index, ArgumentType::Format(placeholder.format_trait))) {\n+            if argmap\n+                .insert((index, ArgumentType::Format(placeholder.format_trait)), placeholder.span)\n+                .is_some()\n+            {\n                 // Duplicate (argument, format trait) combination,\n                 // which we'll only put once in the args array.\n                 use_format_options = true;\n@@ -438,7 +443,7 @@ fn expand_format_args<'hir>(\n     // This is an optimization, speeding up compilation about 1-2% in some cases.\n     // See https://github.com/rust-lang/rust/pull/106770#issuecomment-1380790609\n     let use_simple_array = argmap.len() == arguments.len()\n-        && argmap.iter().enumerate().all(|(i, &(j, _))| i == j)\n+        && argmap.iter().enumerate().all(|(i, (&(j, _), _))| i == j)\n         && arguments.iter().skip(1).all(|arg| !may_contain_yield_point(&arg.expr));\n \n     let args = if use_simple_array {\n@@ -452,14 +457,19 @@ fn expand_format_args<'hir>(\n         let elements: Vec<_> = arguments\n             .iter()\n             .zip(argmap)\n-            .map(|(arg, (_, ty))| {\n-                let sp = arg.expr.span.with_ctxt(macsp.ctxt());\n+            .map(|(arg, ((_, ty), placeholder_span))| {\n+                let placeholder_span =\n+                    placeholder_span.unwrap_or(arg.expr.span).with_ctxt(macsp.ctxt());\n+                let arg_span = match arg.kind {\n+                    FormatArgumentKind::Captured(_) => placeholder_span,\n+                    _ => arg.expr.span.with_ctxt(macsp.ctxt()),\n+                };\n                 let arg = ctx.lower_expr(&arg.expr);\n                 let ref_arg = ctx.arena.alloc(ctx.expr(\n-                    sp,\n+                    arg_span,\n                     hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Not, arg),\n                 ));\n-                make_argument(ctx, sp, ref_arg, ty)\n+                make_argument(ctx, placeholder_span, ref_arg, ty)\n             })\n             .collect();\n         ctx.expr_array_ref(macsp, ctx.arena.alloc_from_iter(elements))\n@@ -475,16 +485,26 @@ fn expand_format_args<'hir>(\n         //     }\n         let args_ident = Ident::new(sym::args, macsp);\n         let (args_pat, args_hir_id) = ctx.pat_ident(macsp, args_ident);\n-        let args = ctx.arena.alloc_from_iter(argmap.iter().map(|&(arg_index, ty)| {\n-            let arg = &arguments[arg_index];\n-            let sp = arg.expr.span.with_ctxt(macsp.ctxt());\n-            let args_ident_expr = ctx.expr_ident(macsp, args_ident, args_hir_id);\n-            let arg = ctx.arena.alloc(ctx.expr(\n-                sp,\n-                hir::ExprKind::Field(args_ident_expr, Ident::new(sym::integer(arg_index), macsp)),\n-            ));\n-            make_argument(ctx, sp, arg, ty)\n-        }));\n+        let args = ctx.arena.alloc_from_iter(argmap.iter().map(\n+            |(&(arg_index, ty), &placeholder_span)| {\n+                let arg = &arguments[arg_index];\n+                let placeholder_span =\n+                    placeholder_span.unwrap_or(arg.expr.span).with_ctxt(macsp.ctxt());\n+                let arg_span = match arg.kind {\n+                    FormatArgumentKind::Captured(_) => placeholder_span,\n+                    _ => arg.expr.span.with_ctxt(macsp.ctxt()),\n+                };\n+                let args_ident_expr = ctx.expr_ident(macsp, args_ident, args_hir_id);\n+                let arg = ctx.arena.alloc(ctx.expr(\n+                    arg_span,\n+                    hir::ExprKind::Field(\n+                        args_ident_expr,\n+                        Ident::new(sym::integer(arg_index), macsp),\n+                    ),\n+                ));\n+                make_argument(ctx, placeholder_span, arg, ty)\n+            },\n+        ));\n         let elements: Vec<_> = arguments\n             .iter()\n             .map(|arg| {"}, {"sha": "f6f2344e82fac492b829d95991e3f9a31b392c96", "filename": "tests/mir-opt/sroa/lifetimes.foo.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff?ref=a3eb2f0f222d628440975b58589fc75994403a97", "patch": "@@ -19,12 +19,12 @@\n       let mut _17: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n       let _18: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n       let _19: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at $DIR/lifetimes.rs:+10:21: +10:22\n-      let mut _21: &std::boxed::Box<dyn std::fmt::Display>; // in scope 0 at $DIR/lifetimes.rs:+10:21: +10:22\n-      let _22: &std::boxed::Box<dyn std::fmt::Display>; // in scope 0 at $DIR/lifetimes.rs:+10:21: +10:22\n-      let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at $DIR/lifetimes.rs:+10:25: +10:26\n-      let mut _24: &u32;                   // in scope 0 at $DIR/lifetimes.rs:+10:25: +10:26\n-      let _25: &u32;                       // in scope 0 at $DIR/lifetimes.rs:+10:25: +10:26\n+      let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at $DIR/lifetimes.rs:+10:20: +10:23\n+      let mut _21: &std::boxed::Box<dyn std::fmt::Display>; // in scope 0 at $DIR/lifetimes.rs:+10:20: +10:23\n+      let _22: &std::boxed::Box<dyn std::fmt::Display>; // in scope 0 at $DIR/lifetimes.rs:+10:20: +10:23\n+      let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at $DIR/lifetimes.rs:+10:24: +10:27\n+      let mut _24: &u32;                   // in scope 0 at $DIR/lifetimes.rs:+10:24: +10:27\n+      let _25: &u32;                       // in scope 0 at $DIR/lifetimes.rs:+10:24: +10:27\n       let mut _27: bool;                   // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n       let mut _28: isize;                  // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n       let mut _29: isize;                  // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n@@ -108,34 +108,34 @@\n           StorageLive(_17);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageLive(_18);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageLive(_19);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_20);                // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n-          StorageLive(_21);                // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n-          StorageLive(_22);                // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n-          _22 = &_8;                       // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n-          _21 = &(*_22);                   // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n-          _20 = core::fmt::ArgumentV1::<'_>::new_display::<Box<dyn std::fmt::Display>>(move _21) -> bb3; // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          StorageLive(_20);                // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n+          StorageLive(_21);                // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n+          StorageLive(_22);                // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n+          _22 = &_8;                       // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n+          _21 = &(*_22);                   // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n+          _20 = core::fmt::ArgumentV1::<'_>::new_display::<Box<dyn std::fmt::Display>>(move _21) -> bb3; // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n                                            // mir::Constant\n-                                           // + span: $DIR/lifetimes.rs:27:21: 27:22\n+                                           // + span: $DIR/lifetimes.rs:27:20: 27:23\n                                            // + user_ty: UserType(4)\n                                            // + literal: Const { ty: for<'b> fn(&'b Box<dyn std::fmt::Display>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<Box<dyn std::fmt::Display>>}, val: Value(<ZST>) }\n       }\n   \n       bb3: {\n-          StorageDead(_21);                // scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n-          StorageLive(_23);                // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n-          StorageLive(_24);                // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n-          StorageLive(_25);                // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n-          _25 = &_6;                       // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n-          _24 = &(*_25);                   // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n-          _23 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _24) -> bb4; // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          StorageDead(_21);                // scope 4 at $DIR/lifetimes.rs:+10:22: +10:23\n+          StorageLive(_23);                // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n+          StorageLive(_24);                // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n+          StorageLive(_25);                // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n+          _25 = &_6;                       // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n+          _24 = &(*_25);                   // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n+          _23 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _24) -> bb4; // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n                                            // mir::Constant\n-                                           // + span: $DIR/lifetimes.rs:27:25: 27:26\n+                                           // + span: $DIR/lifetimes.rs:27:24: 27:27\n                                            // + user_ty: UserType(5)\n                                            // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }\n       }\n   \n       bb4: {\n-          StorageDead(_24);                // scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          StorageDead(_24);                // scope 4 at $DIR/lifetimes.rs:+10:26: +10:27\n           _19 = [move _20, move _23];      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_23);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_20);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL"}, {"sha": "70a1abb0a95552866b28d4c69fafda6f376cf5dc", "filename": "tests/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=a3eb2f0f222d628440975b58589fc75994403a97", "patch": "@@ -1,8 +1,8 @@\n error[E0015]: cannot call non-const formatting macro in constant functions\n-  --> $DIR/format.rs:2:20\n+  --> $DIR/format.rs:2:13\n    |\n LL |     panic!(\"{:?}\", 0);\n-   |                    ^\n+   |             ^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -17,10 +17,10 @@ LL |     panic!(\"{:?}\", 0);\n    = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const formatting macro in constant functions\n-  --> $DIR/format.rs:8:22\n+  --> $DIR/format.rs:8:15\n    |\n LL |     println!(\"{:?}\", 0);\n-   |                      ^\n+   |               ^^^^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "c7acb08f84b6cdb7130e3d9f1369bca27b9451f9", "filename": "tests/ui/fmt/format-args-argument-span.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Ffmt%2Fformat-args-argument-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Ffmt%2Fformat-args-argument-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fformat-args-argument-span.rs?ref=a3eb2f0f222d628440975b58589fc75994403a97", "patch": "@@ -0,0 +1,22 @@\n+// check-compile\n+\n+struct DisplayOnly;\n+\n+impl std::fmt::Display for DisplayOnly {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+    let x = Some(1);\n+    println!(\"{x:?} {x} {x:?}\");\n+    //~^ ERROR: `Option<{integer}>` doesn't implement `std::fmt::Display`\n+    println!(\"{x:?} {x} {x:?}\", x = Some(1));\n+    //~^ ERROR: `Option<{integer}>` doesn't implement `std::fmt::Display`\n+    let x = DisplayOnly;\n+    println!(\"{x} {x:?} {x}\");\n+    //~^ ERROR: `DisplayOnly` doesn't implement `Debug`\n+    println!(\"{x} {x:?} {x}\", x = DisplayOnly);\n+    //~^ ERROR: `DisplayOnly` doesn't implement `Debug`\n+}"}, {"sha": "b060b2cd33930dc9262bbd9e47327a1f023dc74b", "filename": "tests/ui/fmt/format-args-argument-span.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Ffmt%2Fformat-args-argument-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Ffmt%2Fformat-args-argument-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fformat-args-argument-span.stderr?ref=a3eb2f0f222d628440975b58589fc75994403a97", "patch": "@@ -0,0 +1,51 @@\n+error[E0277]: `Option<{integer}>` doesn't implement `std::fmt::Display`\n+  --> $DIR/format-args-argument-span.rs:13:21\n+   |\n+LL |     println!(\"{x:?} {x} {x:?}\");\n+   |                     ^^^ `Option<{integer}>` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `Option<{integer}>`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `Option<{integer}>` doesn't implement `std::fmt::Display`\n+  --> $DIR/format-args-argument-span.rs:15:37\n+   |\n+LL |     println!(\"{x:?} {x} {x:?}\", x = Some(1));\n+   |                                     ^^^^^^^ `Option<{integer}>` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `Option<{integer}>`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: `DisplayOnly` doesn't implement `Debug`\n+  --> $DIR/format-args-argument-span.rs:18:19\n+   |\n+LL |     println!(\"{x} {x:?} {x}\");\n+   |                   ^^^^^ `DisplayOnly` cannot be formatted using `{:?}`\n+   |\n+   = help: the trait `Debug` is not implemented for `DisplayOnly`\n+   = note: add `#[derive(Debug)]` to `DisplayOnly` or manually `impl Debug for DisplayOnly`\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `DisplayOnly` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n+\n+error[E0277]: `DisplayOnly` doesn't implement `Debug`\n+  --> $DIR/format-args-argument-span.rs:20:35\n+   |\n+LL |     println!(\"{x} {x:?} {x}\", x = DisplayOnly);\n+   |                                   ^^^^^^^^^^^ `DisplayOnly` cannot be formatted using `{:?}`\n+   |\n+   = help: the trait `Debug` is not implemented for `DisplayOnly`\n+   = note: add `#[derive(Debug)]` to `DisplayOnly` or manually `impl Debug for DisplayOnly`\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `DisplayOnly` with `#[derive(Debug)]`\n+   |\n+LL | #[derive(Debug)]\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "bf18fb315c94d977f87313bfd0b4e57c9369075d", "filename": "tests/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=a3eb2f0f222d628440975b58589fc75994403a97", "patch": "@@ -300,10 +300,9 @@ error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:78:32\n    |\n LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n-   |                                ^^^\n-   |                                |\n-   |                                expected `&usize`, found `&{float}`\n-   |                                arguments to this function are incorrect\n+   |                    --          ^^^ expected `&usize`, found `&{float}`\n+   |                    |\n+   |                    arguments to this function are incorrect\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`\n@@ -315,10 +314,9 @@ error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:81:35\n    |\n LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n-   |                                   ^^^\n-   |                                   |\n-   |                                   expected `&usize`, found `&{float}`\n-   |                                   arguments to this function are incorrect\n+   |                       --          ^^^ expected `&usize`, found `&{float}`\n+   |                       |\n+   |                       arguments to this function are incorrect\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`"}, {"sha": "dc2dee3f3415c984e37b846ff5eb7ff176e9a7e4", "filename": "tests/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=a3eb2f0f222d628440975b58589fc75994403a97", "patch": "@@ -2,7 +2,9 @@ error[E0277]: the trait bound `str: UpperHex` is not satisfied\n   --> $DIR/ifmt-unimpl.rs:2:21\n    |\n LL |     format!(\"{:X}\", \"3\");\n-   |                     ^^^ the trait `UpperHex` is not implemented for `str`\n+   |              ----   ^^^ the trait `UpperHex` is not implemented for `str`\n+   |              |\n+   |              required by a bound introduced by this call\n    |\n    = help: the following other types implement trait `UpperHex`:\n              &T"}, {"sha": "5415c247c8fff269dd6e3795315dd31e0092396c", "filename": "tests/ui/suggestions/issue-97760.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Fsuggestions%2Fissue-97760.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3eb2f0f222d628440975b58589fc75994403a97/tests%2Fui%2Fsuggestions%2Fissue-97760.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-97760.stderr?ref=a3eb2f0f222d628440975b58589fc75994403a97", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `<impl IntoIterator as IntoIterator>::Item` doesn't implement `std::fmt::Display`\n-  --> $DIR/issue-97760.rs:4:20\n+  --> $DIR/issue-97760.rs:4:19\n    |\n LL |         println!(\"{x}\");\n-   |                    ^ `<impl IntoIterator as IntoIterator>::Item` cannot be formatted with the default formatter\n+   |                   ^^^ `<impl IntoIterator as IntoIterator>::Item` cannot be formatted with the default formatter\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `<impl IntoIterator as IntoIterator>::Item`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead"}]}