{"sha": "023cc968e1295994ed8039da43b0f2f4ea4e9390", "node_id": "C_kwDOAAsO6NoAKDAyM2NjOTY4ZTEyOTU5OTRlZDgwMzlkYTQzYjBmMmY0ZWE0ZTkzOTA", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-11-20T03:33:29Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-11-20T03:33:29Z"}, "message": "Make `LLVMRustGetOrInsertGlobal` always return a `GlobalVariable`\n\n`Module::getOrInsertGlobal` returns a `Constant*`, which is a super\nclass of `GlobalVariable`, but if the given type doesn't match an\nexisting declaration, it returns a bitcast of that global instead.\nThis causes UB when we pass that to `LLVMGetVisibility` which\nunconditionally casts the opaque argument to a `GlobalValue*`.\n\nInstead, we can do our own get-or-insert without worrying whether\nexisting types match exactly. It's not relevant when we're just trying\nto get/set the linkage and visibility, and if types are needed we can\nbitcast or error nicely from `rustc_codegen_llvm` instead.", "tree": {"sha": "4bc92bd38d5dc3ff7f8f157eee092cd69dcd3a1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc92bd38d5dc3ff7f8f157eee092cd69dcd3a1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/023cc968e1295994ed8039da43b0f2f4ea4e9390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/023cc968e1295994ed8039da43b0f2f4ea4e9390", "html_url": "https://github.com/rust-lang/rust/commit/023cc968e1295994ed8039da43b0f2f4ea4e9390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/023cc968e1295994ed8039da43b0f2f4ea4e9390/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77da2d454e6caa227a85b16410b95f93495e7e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77da2d454e6caa227a85b16410b95f93495e7e0", "html_url": "https://github.com/rust-lang/rust/commit/a77da2d454e6caa227a85b16410b95f93495e7e0"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "f3d8eb2602a37ccd31a415cf5e35d142bf9aa863", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/023cc968e1295994ed8039da43b0f2f4ea4e9390/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/023cc968e1295994ed8039da43b0f2f4ea4e9390/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=023cc968e1295994ed8039da43b0f2f4ea4e9390", "patch": "@@ -124,8 +124,18 @@ extern \"C\" LLVMValueRef LLVMRustGetOrInsertFunction(LLVMModuleRef M,\n \n extern \"C\" LLVMValueRef\n LLVMRustGetOrInsertGlobal(LLVMModuleRef M, const char *Name, size_t NameLen, LLVMTypeRef Ty) {\n+  Module *Mod = unwrap(M);\n   StringRef NameRef(Name, NameLen);\n-  return wrap(unwrap(M)->getOrInsertGlobal(NameRef, unwrap(Ty)));\n+\n+  // We don't use Module::getOrInsertGlobal because that returns a Constant*,\n+  // which may either be the real GlobalVariable*, or a constant bitcast of it\n+  // if our type doesn't match the original declaration. We always want the\n+  // GlobalVariable* so we can access linkage, visibility, etc.\n+  GlobalVariable *GV = Mod->getGlobalVariable(NameRef, true);\n+  if (!GV)\n+    GV = new GlobalVariable(*Mod, unwrap(Ty), false,\n+                            GlobalValue::ExternalLinkage, nullptr, NameRef);\n+  return wrap(GV);\n }\n \n extern \"C\" LLVMValueRef"}, {"sha": "50763d30931b7da7bde0567b3e01197fe694e9e1", "filename": "src/test/ui/issues/issue-91050.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/023cc968e1295994ed8039da43b0f2f4ea4e9390/src%2Ftest%2Fui%2Fissues%2Fissue-91050.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023cc968e1295994ed8039da43b0f2f4ea4e9390/src%2Ftest%2Fui%2Fissues%2Fissue-91050.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-91050.rs?ref=023cc968e1295994ed8039da43b0f2f4ea4e9390", "patch": "@@ -0,0 +1,34 @@\n+// build-pass\n+// compile-flags: --crate-type lib -Ccodegen-units=1\n+\n+// This test declares globals by the same name with different types, which\n+// caused problems because Module::getOrInsertGlobal would return a Constant*\n+// bitcast instead of a GlobalVariable* that could access linkage/visibility.\n+// In alt builds with LLVM assertions this would fail:\n+//\n+// rustc: /checkout/src/llvm-project/llvm/include/llvm/Support/Casting.h:269:\n+// typename cast_retty<X, Y *>::ret_type llvm::cast(Y *) [X = llvm::GlobalValue, Y = llvm::Value]:\n+// Assertion `isa<X>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\n+//\n+// In regular builds, the bad cast was UB, like \"Invalid LLVMRustVisibility value!\"\n+\n+pub mod before {\n+    #[no_mangle]\n+    pub static GLOBAL1: [u8; 1] = [1];\n+}\n+\n+pub mod inner {\n+    extern \"C\" {\n+        pub static GLOBAL1: u8;\n+        pub static GLOBAL2: u8;\n+    }\n+\n+    pub fn call() {\n+        drop(unsafe { (GLOBAL1, GLOBAL2) });\n+    }\n+}\n+\n+pub mod after {\n+    #[no_mangle]\n+    pub static GLOBAL2: [u8; 1] = [2];\n+}"}]}