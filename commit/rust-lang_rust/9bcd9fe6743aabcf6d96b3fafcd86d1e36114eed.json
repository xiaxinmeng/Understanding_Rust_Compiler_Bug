{"sha": "9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliY2Q5ZmU2NzQzYWFiY2Y2ZDk2YjNmYWZjZDg2ZDFlMzYxMTRlZWQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-23T18:19:07Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-23T18:19:07Z"}, "message": "Address review comments", "tree": {"sha": "10b9895da2b83eb994226c1c488aaee6d118a7e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10b9895da2b83eb994226c1c488aaee6d118a7e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed", "html_url": "https://github.com/rust-lang/rust/commit/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "770be24ccd9c47c05aceff91ce5a081798d97c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/770be24ccd9c47c05aceff91ce5a081798d97c67", "html_url": "https://github.com/rust-lang/rust/commit/770be24ccd9c47c05aceff91ce5a081798d97c67"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "ed4417978747eb58258ded0db70ad82a4b81960d", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed", "patch": "@@ -20,7 +20,7 @@ use polonius_engine::Atom;\n use rustc_ast::ast::{self, Ident};\n use rustc_data_structures::captures::Captures;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, Symbol};\n@@ -2404,15 +2404,17 @@ static_assert_size!(Const<'_>, 48);\n impl<'tcx> Const<'tcx> {\n     /// Literals and const generic parameters are eagerly converted to a constant, everything else\n     /// becomes `Unevaluated`.\n-    pub fn from_hir_anon_const(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Ty<'tcx>) -> &'tcx Self {\n-        debug!(\"Const::from_hir_anon_const(id={:?})\", def_id);\n+    pub fn from_anon_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {\n+        debug!(\"Const::from_anon_const(id={:?})\", def_id);\n \n-        let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n         let body_id = tcx.hir().body_owned_by(hir_id);\n \n         let expr = &tcx.hir().body(body_id).value;\n \n+        let ty = tcx.type_of(def_id.to_def_id());\n+\n         let lit_input = match expr.kind {\n             hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),\n             hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => match expr.kind {\n@@ -2457,8 +2459,8 @@ impl<'tcx> Const<'tcx> {\n                 ty::ConstKind::Param(ty::ParamConst::new(index, name))\n             }\n             _ => ty::ConstKind::Unevaluated(\n-                def_id,\n-                InternalSubsts::identity_for_item(tcx, def_id),\n+                def_id.to_def_id(),\n+                InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n                 None,\n             ),\n         };"}, {"sha": "a45c30890645a3ca820a9945a5d70335c2ab7112", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed", "patch": "@@ -406,8 +406,8 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n \n         // Now comes the rote stuff:\n         hir::ExprKind::Repeat(ref v, ref count) => {\n-            let count = cx.tcx.hir().local_def_id(count.hir_id);\n-            let count = ty::Const::from_hir_anon_const(cx.tcx, count, cx.tcx.types.usize);\n+            let count_def_id = cx.tcx.hir().local_def_id(count.hir_id).expect_local();\n+            let count = ty::Const::from_anon_const(cx.tcx, count_def_id);\n \n             ExprKind::Repeat { value: v.to_ref(), count }\n         }"}, {"sha": "1aa920213933eb57fc05147477ddbd1f26561d73", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed", "patch": "@@ -780,8 +780,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 }\n                 (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                    let ct = tcx.hir().local_def_id(ct.value.hir_id);\n-                    ty::Const::from_hir_anon_const(tcx, ct, tcx.type_of(param.def_id)).into()\n+                    let ct_def_id = tcx.hir().local_def_id(ct.value.hir_id).expect_local();\n+                    ty::Const::from_anon_const(tcx, ct_def_id).into()\n                 }\n                 _ => unreachable!(),\n             },\n@@ -2765,8 +2765,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .unwrap_or(tcx.types.err)\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n-                let length = tcx.hir().local_def_id(length.hir_id);\n-                let length = ty::Const::from_hir_anon_const(tcx, length, tcx.types.usize);\n+                let length_def_id = tcx.hir().local_def_id(length.hir_id).expect_local();\n+                let length = ty::Const::from_anon_const(tcx, length_def_id);\n                 let array_ty = tcx.mk_ty(ty::Array(self.ast_ty_to_ty(&ty), length));\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }"}, {"sha": "77a8e92c379d9cf94d383dc52218f9dee1de7f22", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed", "patch": "@@ -1007,8 +1007,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         _expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n-        let count_def_id = tcx.hir().local_def_id(count.hir_id);\n-        let count = self.to_const(count, tcx.type_of(count_def_id));\n+        let count = self.to_const(count);\n \n         let uty = match expected {\n             ExpectHasType(uty) => match uty.kind {"}, {"sha": "d340d6ff5c27174576aa5eaa771c76b983b7da45", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 }\n                 (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => self.to_ty(ty).into(),\n                 (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                    self.to_const(&ct.value, self.tcx.type_of(param.def_id)).into()\n+                    self.to_const(&ct.value).into()\n                 }\n                 _ => unreachable!(),\n             },"}, {"sha": "6f0f69a7943f9e0c0a6488ae8a788fcbb547fe4d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9bcd9fe6743aabcf6d96b3fafcd86d1e36114eed", "patch": "@@ -3279,9 +3279,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ty\n     }\n \n-    pub fn to_const(&self, ast_c: &hir::AnonConst, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        let c = self.tcx.hir().local_def_id(ast_c.hir_id);\n-        ty::Const::from_hir_anon_const(self.tcx, c, ty)\n+    pub fn to_const(&self, ast_c: &hir::AnonConst) -> &'tcx ty::Const<'tcx> {\n+        let c = self.tcx.hir().local_def_id(ast_c.hir_id).expect_local();\n+        ty::Const::from_anon_const(self.tcx, c)\n     }\n \n     // If the type given by the user has free regions, save it for later, since\n@@ -5510,7 +5510,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.to_ty(ty).into()\n                     }\n                     (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                        self.to_const(&ct.value, self.tcx.type_of(param.def_id)).into()\n+                        self.to_const(&ct.value).into()\n                     }\n                     _ => unreachable!(),\n                 },"}]}