{"sha": "e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMTkzZGFjNmVkYWU2YzRjNWRkMWE4ZmZmZWIzZDlmOTIyNzY5YmQ=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-03-23T04:49:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T22:35:48Z"}, "message": "uv_buf_t's for uv_write() passed by-val .. no more mallocs or ptr cop-outs\n\nso we're now adhering the libuv C api and passing structs by-val where\nit is expected, instead of pulling pointer trickery (or worse having to\nmalloc structs in c++ to be passed back to rust and then into C again)", "tree": {"sha": "1832adabd384f068d213fd35caa4ddf0835081bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1832adabd384f068d213fd35caa4ddf0835081bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd", "html_url": "https://github.com/rust-lang/rust/commit/e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232", "html_url": "https://github.com/rust-lang/rust/commit/e5ccc76bc4e32538f8b2cb5f6745f42ce50ac232"}], "stats": {"total": 40, "additions": 9, "deletions": 31}, "files": [{"sha": "33676bc470d0c957069bd297011b2ffb8d06a7bc", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd", "patch": "@@ -271,7 +271,7 @@ native mod rustrt {\n         loop_handle: *libc::c_void,\n         handle_ptr: *uv_tcp_t) -> libc::c_int;\n     fn rust_uv_buf_init(base: *u8, len: libc::size_t)\n-        -> *libc::c_void;\n+        -> uv_buf_t;\n     fn rust_uv_last_error(loop_handle: *libc::c_void) -> uv_err_t;\n     fn rust_uv_ip4_test_verify_port_val(++addr: sockaddr_in,\n                                         expected: libc::c_uint)\n@@ -283,7 +283,7 @@ native mod rustrt {\n                            ++addr: sockaddr_in,\n                            after_cb: *u8) -> libc::c_int;\n     fn rust_uv_write(req: *libc::c_void, stream: *libc::c_void,\n-             buf_in: **libc::c_void, buf_cnt: libc::c_int,\n+             ++buf_in: *uv_buf_t, buf_cnt: libc::c_int,\n              cb: *u8) -> libc::c_int;\n \n     // sizeof testing helpers\n@@ -342,7 +342,7 @@ mod direct {\n     // to malloc'd buffers .. these will have to be translated\n     // back into their value types in c. sigh.\n     unsafe fn write(req: *libc::c_void, stream: *libc::c_void,\n-             buf_in: *[*libc::c_void], cb: *u8) -> libc::c_int {\n+             buf_in: *[uv_buf_t], cb: *u8) -> libc::c_int {\n         let buf_ptr = vec::unsafe::to_ptr(*buf_in);\n         let buf_cnt = vec::len(*buf_in) as i32;\n         ret rustrt::rust_uv_write(req, stream, buf_ptr, buf_cnt, cb);\n@@ -379,7 +379,7 @@ mod direct {\n         rustrt::rust_uv_set_data_for_req(req, data);\n     }\n     // TODO: see github issue #1402\n-    unsafe fn buf_init(input: *u8, len: uint) -> *libc::c_void {\n+    unsafe fn buf_init(input: *u8, len: uint) -> uv_buf_t {\n         ret rustrt::rust_uv_buf_init(input, len);\n     }\n     unsafe fn ip4_addr(ip: str, port: int)\n@@ -950,21 +950,9 @@ fn test_uv_timer() {\n \n type request_wrapper = {\n     write_req: *uv_write_t,\n-    req_buf: *[*libc::c_void]\n+    req_buf: *[uv_buf_t]\n };\n \n-crust fn on_alloc(handle: *libc::c_void,\n-                  suggested_size: libc::size_t) -> uv_buf_t\n-    unsafe {\n-    io::println(\"beginning on_alloc...\");\n-    io::println(\"ending on_alloc...\");\n-    let new_vec: @[u8] = @[];\n-    let ptr = vec::unsafe::to_ptr(*new_vec);\n-    let buf = direct::buf_init(ptr, vec::len(*new_vec));\n-    ret *(buf as *uv_buf_t);\n-    \n-}\n-\n crust fn on_write_complete_cb(write_handle: *uv_write_t,\n                               status: libc::c_int) unsafe {\n     io::println(#fmt(\"beginning on_write_complete_cb status: %d\","}, {"sha": "b4694ccf37c57f7a9e9eaa27b8260910c23c86f9", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=e0193dac6edae6c4c5dd1a8fffeb3d9f922769bd", "patch": "@@ -244,13 +244,9 @@ current_kernel_malloc_alloc_cb(uv_handle_t* handle,\n }\n \n // FIXME see issue #1402\n-extern \"C\" void*\n+extern \"C\" uv_buf_t\n rust_uv_buf_init(char* base, size_t len) {\n-\tuv_buf_t* buf_ptr = (uv_buf_t*)current_kernel_malloc(\n-\t\t\t\t\t\t\t\t\t sizeof(uv_buf_t),\n-\t\t\t\t\t\t\t\t\t \"uv_buf_t_1402\");\n-\t*buf_ptr = uv_buf_init(base, len);\n-\treturn buf_ptr;\n+\treturn uv_buf_init(base, len);\n }\n \n extern \"C\" uv_loop_t*\n@@ -302,15 +298,9 @@ rust_uv_tcp_connect(uv_connect_t* connect_ptr,\n \n extern \"C\" int\n rust_uv_write(uv_write_t* req, uv_stream_t* handle,\n-\t\t\t  void** bufs, int buf_cnt,\n+\t\t\t  uv_buf_t* bufs, int buf_cnt,\n \t\t\t  uv_write_cb cb) {\n-\t// TODO github #1402 -- convert this array of pointers to\n-    // uv_buf_t into an array of uv_buf_t values\n-\tuv_buf_t buf_vals[buf_cnt];\n-\tfor(int ctr = 0; ctr < buf_cnt; ctr++) {\n-\t  buf_vals[ctr] = *((uv_buf_t*)bufs[ctr]);\n-\t}\n-\treturn uv_write(req, handle, buf_vals, buf_cnt, cb);\n+\treturn uv_write(req, handle, bufs, buf_cnt, cb);\n }\n \n extern \"C\" struct sockaddr_in"}]}