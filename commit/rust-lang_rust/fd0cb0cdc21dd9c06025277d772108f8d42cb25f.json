{"sha": "fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMGNiMGNkYzIxZGQ5YzA2MDI1Mjc3ZDc3MjEwOGY4ZDQyY2IyNWY=", "commit": {"author": {"name": "Aris Merchant", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-07-06T03:28:10Z"}, "committer": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-07-10T19:55:09Z"}, "message": "Change `weak!` and `linkat!` to macros 2.0\n\n`weak!` is needed in a test in another module. With macros\n1.0, importing `weak!` would require reordering module\ndeclarations in `std/src/lib.rs`, which is a bit too\nevil.", "tree": {"sha": "e5329b18a1b83834e61fab30658b6cdeabb75bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5329b18a1b83834e61fab30658b6cdeabb75bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "html_url": "https://github.com/rust-lang/rust/commit/fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5022c0638dfbb83e0b38ce90f79d0fd6a4d295d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5022c0638dfbb83e0b38ce90f79d0fd6a4d295d6", "html_url": "https://github.com/rust-lang/rust/commit/5022c0638dfbb83e0b38ce90f79d0fd6a4d295d6"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "6a46525f682c4a69860c8f1232112519e291e708", "filename": "library/std/src/sys/unix/android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fandroid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fandroid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fandroid.rs?ref=fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "patch": "@@ -21,7 +21,7 @@\n use libc::{c_int, c_void, sighandler_t, size_t, ssize_t};\n use libc::{ftruncate, pread, pwrite};\n \n-use super::{cvt, cvt_r};\n+use super::{cvt, cvt_r, weak::weak};\n use crate::io;\n \n // The `log2` and `log2f` functions apparently appeared in android-18, or at"}, {"sha": "5c8c94971c33c0de8d4ad71d9f30910528eac37c", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "patch": "@@ -12,6 +12,15 @@ use crate::sys::time::SystemTime;\n use crate::sys::{cvt, cvt_r};\n use crate::sys_common::{AsInner, FromInner};\n \n+#[cfg(any(\n+    all(target_os = \"linux\", target_env = \"gnu\"),\n+    target_os = \"macos\",\n+    target_os = \"ios\",\n+))]\n+use crate::sys::weak::syscall;\n+#[cfg(target_os = \"macos\")]\n+use crate::sys::weak::weak;\n+\n use libc::{c_int, mode_t};\n \n #[cfg(any("}, {"sha": "a6b43229ba6b7dd4b0aa7e3b40fb985a3c1f4901", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "patch": "@@ -61,6 +61,7 @@ use crate::process::{ChildStderr, ChildStdin, ChildStdout};\n use crate::ptr;\n use crate::sync::atomic::{AtomicBool, AtomicU8, Ordering};\n use crate::sys::cvt;\n+use crate::sys::weak::syscall;\n use libc::{EBADF, EINVAL, ENOSYS, EOPNOTSUPP, EOVERFLOW, EPERM, EXDEV};\n \n #[cfg(test)]"}, {"sha": "d3c874edf2dc472c9cb9edae7e0a716cec95a3e4", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "patch": "@@ -23,6 +23,9 @@ use crate::sys::memchr;\n use crate::sys_common::rwlock::{StaticRWLock, StaticRWLockReadGuard};\n use crate::vec;\n \n+#[cfg(all(target_env = \"gnu\", not(target_os = \"vxworks\")))]\n+use crate::sys::weak::weak;\n+\n use libc::{c_char, c_int, c_void};\n \n const TMPBUF_SZ: usize = 128;"}, {"sha": "c888dd0d87d8e296b76601ec6aa043ea2ef73520", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "patch": "@@ -9,6 +9,14 @@ use crate::sys;\n use crate::sys::cvt;\n use crate::sys::process::process_common::*;\n \n+#[cfg(any(\n+    target_os = \"macos\",\n+    target_os = \"freebsd\",\n+    all(target_os = \"linux\", target_env = \"gnu\"),\n+    all(target_os = \"linux\", target_env = \"musl\"),\n+))]\n+use crate::sys::weak::weak;\n+\n #[cfg(target_os = \"vxworks\")]\n use libc::RTP_ID as pid_t;\n "}, {"sha": "32895001a65bae83dd119e5735dced1dd55c084e", "filename": "library/std/src/sys/unix/rand.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frand.rs?ref=fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "patch": "@@ -25,6 +25,9 @@ mod imp {\n     use crate::fs::File;\n     use crate::io::Read;\n \n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    use crate::sys::weak::syscall;\n+\n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn getrandom(buf: &mut [u8]) -> libc::ssize_t {\n         // A weak symbol allows interposition, e.g. for perf measurements that want to\n@@ -108,6 +111,7 @@ mod imp {\n     use crate::fs::File;\n     use crate::io::Read;\n     use crate::sys::os::errno;\n+    use crate::sys::weak::weak;\n     use libc::{c_int, c_void, size_t};\n \n     fn getentropy_fill_bytes(v: &mut [u8]) -> bool {"}, {"sha": "879d716052497f626ce5cb41c946251300ab70fa", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "patch": "@@ -7,6 +7,8 @@ use crate::ptr;\n use crate::sys::{os, stack_overflow};\n use crate::time::Duration;\n \n+#[cfg(any(target_os = \"linux\", target_os = \"solaris\", target_os = \"illumos\"))]\n+use crate::sys::weak::weak;\n #[cfg(not(any(target_os = \"l4re\", target_os = \"vxworks\")))]\n pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;\n #[cfg(target_os = \"l4re\")]"}, {"sha": "cad8be6d289ee166dc111013d85521d38b42de20", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd0cb0cdc21dd9c06025277d772108f8d42cb25f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=fd0cb0cdc21dd9c06025277d772108f8d42cb25f", "patch": "@@ -26,8 +26,11 @@ use crate::marker;\n use crate::mem;\n use crate::sync::atomic::{self, AtomicUsize, Ordering};\n \n-macro_rules! weak {\n+// Temporary null documentation to work around #57569 until the fix is beta\n+#[cfg_attr(bootstrap, doc = \"\")]\n+pub(crate) macro weak {\n     (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n+        #[allow(non_upper_case_globals)]\n         static $name: crate::sys::weak::Weak<unsafe extern \"C\" fn($($t),*) -> $ret> =\n             crate::sys::weak::Weak::new(concat!(stringify!($name), '\\0'));\n     )\n@@ -100,8 +103,10 @@ unsafe fn fetch(name: &str) -> usize {\n     libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr()) as usize\n }\n \n+// Temporary null documentation to work around #57569 until the fix is beta\n+#[cfg_attr(bootstrap, doc = \"\")]\n #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n-macro_rules! syscall {\n+pub(crate) macro syscall {\n     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n         unsafe fn $name($($arg_name: $t),*) -> $ret {\n             use super::os;\n@@ -118,10 +123,12 @@ macro_rules! syscall {\n     )\n }\n \n+#[cfg_attr(bootstrap, doc = \"\")]\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-macro_rules! syscall {\n+pub(crate) macro syscall {\n     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (\n         unsafe fn $name($($arg_name:$t),*) -> $ret {\n+            use weak;\n             // This looks like a hack, but concat_idents only accepts idents\n             // (not paths).\n             use libc::*;"}]}