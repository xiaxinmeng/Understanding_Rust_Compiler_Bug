{"sha": "67b51291f0ffb352ec3f4cc2455a85cfa3995946", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YjUxMjkxZjBmZmIzNTJlYzNmNGNjMjQ1NWE4NWNmYTM5OTU5NDY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T00:08:08Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T10:51:08Z"}, "message": "Rollup merge of #21925 - sfackler:allow-missing-copy, r=alexcrichton\n\n This was particularly helpful in the time just after OIBIT's\nimplementation to make sure things that were supposed to be Copy\ncontinued to be, but it's now creates a lot of noise for types that\nintentionally don't want to be Copy.\n\nr? @alexcrichton", "tree": {"sha": "6161f3383b83f4c11a37cd9e136afa06e7dbf18f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6161f3383b83f4c11a37cd9e136afa06e7dbf18f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67b51291f0ffb352ec3f4cc2455a85cfa3995946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67b51291f0ffb352ec3f4cc2455a85cfa3995946", "html_url": "https://github.com/rust-lang/rust/commit/67b51291f0ffb352ec3f4cc2455a85cfa3995946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67b51291f0ffb352ec3f4cc2455a85cfa3995946/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfae247ce0423d3b6a0114b8b64826cdec461edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfae247ce0423d3b6a0114b8b64826cdec461edc", "html_url": "https://github.com/rust-lang/rust/commit/cfae247ce0423d3b6a0114b8b64826cdec461edc"}, {"sha": "85a85c2070a6a967f1ccb1495391217fdb793112", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a85c2070a6a967f1ccb1495391217fdb793112", "html_url": "https://github.com/rust-lang/rust/commit/85a85c2070a6a967f1ccb1495391217fdb793112"}], "stats": {"total": 63, "additions": 2, "deletions": 61}, "files": [{"sha": "9851e1c28fbf0856288b4d9de310cb6189b7c0cb", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -1813,7 +1813,6 @@ default visibility with the `priv` keyword. When an item is declared as `pub`,\n it can be thought of as being accessible to the outside world. For example:\n \n ```\n-# #![allow(missing_copy_implementations)]\n # fn main() {}\n // Declare a private struct\n struct Foo;"}, {"sha": "00e453943a29adcdb11fd27cfe34e08f9ee468e1", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -49,7 +49,6 @@ pub struct FromUtf8Error {\n \n /// A possible error value from the `String::from_utf16` function.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_copy_implementations)]\n #[derive(Debug)]\n pub struct FromUtf16Error(());\n "}, {"sha": "d405d0d28beb3636fbac2387771a037a4f9f02cf", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -30,7 +30,6 @@ use super::{Hasher, Writer};\n /// strong, this implementation has not been reviewed for such purposes.\n /// As such, all cryptographic uses of this implementation are strongly\n /// discouraged.\n-#[allow(missing_copy_implementations)]\n pub struct SipHasher {\n     k0: u64,\n     k1: u64,"}, {"sha": "2d14b31748e5f13c126078895e3dac9a04f1a230", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -396,7 +396,6 @@ pub struct InvariantLifetime<'a>;\n            reason = \"likely to change with new variance strategy\")]\n #[lang=\"no_copy_bound\"]\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-#[allow(missing_copy_implementations)]\n pub struct NoCopy;\n \n /// A type which is considered managed by the GC. This is typically\n@@ -405,5 +404,4 @@ pub struct NoCopy;\n            reason = \"likely to change with new variance strategy\")]\n #[lang=\"managed_bound\"]\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-#[allow(missing_copy_implementations)]\n pub struct Managed;"}, {"sha": "013b7f27839dabd518ea39a4585cafa9aae8c1e5", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -149,7 +149,6 @@ impl FromStr for bool {\n \n /// An error returned when parsing a `bool` from a string fails.\n #[derive(Debug, Clone, PartialEq)]\n-#[allow(missing_copy_implementations)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseBoolError { _priv: () }\n "}, {"sha": "b643b04035f2ac20e402f9dedc2ef8fccce7f021", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -332,15 +332,12 @@ pub mod types {\n             /// variants, because the compiler complains about the repr attribute\n             /// otherwise.\n             #[repr(u8)]\n-            #[allow(missing_copy_implementations)]\n             pub enum c_void {\n                 __variant1,\n                 __variant2,\n             }\n \n-            #[allow(missing_copy_implementations)]\n             pub enum FILE {}\n-            #[allow(missing_copy_implementations)]\n             pub enum fpos_t {}\n         }\n         pub mod c99 {\n@@ -354,9 +351,7 @@ pub mod types {\n             pub type uint64_t = u64;\n         }\n         pub mod posix88 {\n-            #[allow(missing_copy_implementations)]\n             pub enum DIR {}\n-            #[allow(missing_copy_implementations)]\n             pub enum dirent_t {}\n         }\n         pub mod posix01 {}"}, {"sha": "0a64da6f137bd2b56a22289a7f667aa43b48f005", "filename": "src/librand/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -387,7 +387,6 @@ pub trait SeedableRng<Seed>: Rng {\n /// [1]: Marsaglia, George (July 2003). [\"Xorshift\n /// RNGs\"](http://www.jstatsoft.org/v08/i14/paper). *Journal of\n /// Statistical Software*. Vol. 8 (Issue 14).\n-#[allow(missing_copy_implementations)]\n #[derive(Clone)]\n pub struct XorShiftRng {\n     x: u32,"}, {"sha": "ee30c1f443c33414daa34c982095f828aa631a59", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -2038,7 +2038,7 @@ declare_lint! {\n \n declare_lint! {\n     pub MISSING_COPY_IMPLEMENTATIONS,\n-    Warn,\n+    Allow,\n     \"detects potentially-forgotten implementations of `Copy`\"\n }\n "}, {"sha": "1a7308a4f1885e9165ec7589822c02bc93a0976f", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -224,7 +224,6 @@ pub struct RegionVarBindings<'a, 'tcx: 'a> {\n }\n \n #[derive(Debug)]\n-#[allow(missing_copy_implementations)]\n pub struct RegionSnapshot {\n     length: uint,\n     skolemization_count: u32,"}, {"sha": "3a7522cafee90f283354aa24e520dd40c52211ca", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -59,7 +59,6 @@ pub fn impl_can_satisfy(infcx: &InferCtxt,\n             |o| selcx.evaluate_obligation(o))\n }\n \n-#[allow(missing_copy_implementations)]\n pub enum OrphanCheckErr<'tcx> {\n     NoLocalInputType,\n     UncoveredTy(Ty<'tcx>),"}, {"sha": "efd2392e453ed65a8018bc59095a92485b441d8f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -132,7 +132,6 @@ pub enum UnstableFeatures {\n }\n \n #[derive(Clone, PartialEq, Eq)]\n-#[allow(missing_copy_implementations)]\n pub enum PrintRequest {\n     FileNames,\n     Sysroot,\n@@ -290,7 +289,6 @@ macro_rules! options {\n      $($opt:ident : $t:ty = ($init:expr, $parse:ident, $desc:expr)),* ,) =>\n (\n     #[derive(Clone)]\n-    #[allow(missing_copy_implementations)]\n     pub struct $struct_name { $(pub $opt: $t),* }\n \n     pub fn $defaultfn() -> $struct_name {"}, {"sha": "f8e3defe19d632ac9c6b40ec63edc804f384ed1f", "filename": "src/librustc/util/nodemap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Futil%2Fnodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Futil%2Fnodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnodemap.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -46,7 +46,6 @@ pub fn DefIdSet() -> DefIdSet { FnvHashSet() }\n ///\n /// This uses FNV hashing, as described here:\n /// http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\n-#[allow(missing_copy_implementations)]\n pub struct FnvHasher(u64);\n \n impl Default for FnvHasher {"}, {"sha": "8fbc682246f470078c18e5f6025ccbfc2e61b4d7", "filename": "src/librustc/util/snapshot_vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -46,7 +46,6 @@ pub struct SnapshotVec<D:SnapshotVecDelegate> {\n }\n \n // Snapshots are tokens that should be created/consumed linearly.\n-#[allow(missing_copy_implementations)]\n pub struct Snapshot {\n     // Length of the undo log at the time the snapshot was taken.\n     length: uint,"}, {"sha": "cdfb1f5030e2dceefd46a5d119dc1f4629f07b38", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -464,7 +464,6 @@ pub fn opt_loan_path<'tcx>(cmt: &mc::cmt<'tcx>) -> Option<Rc<LoanPath<'tcx>>> {\n \n // Errors that can occur\n #[derive(PartialEq)]\n-#[allow(missing_copy_implementations)]\n pub enum bckerr_code {\n     err_mutbl,\n     err_out_of_scope(ty::Region, ty::Region), // superscope, subscope"}, {"sha": "878070e98e7e8b7072a189681027f92b20f2aa94", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -436,73 +436,50 @@ pub enum DiagnosticKind {\n }\n \n // Opaque pointer types\n-#[allow(missing_copy_implementations)]\n pub enum Module_opaque {}\n pub type ModuleRef = *mut Module_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum Context_opaque {}\n pub type ContextRef = *mut Context_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum Type_opaque {}\n pub type TypeRef = *mut Type_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum Value_opaque {}\n pub type ValueRef = *mut Value_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum Metadata_opaque {}\n pub type MetadataRef = *mut Metadata_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum BasicBlock_opaque {}\n pub type BasicBlockRef = *mut BasicBlock_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum Builder_opaque {}\n pub type BuilderRef = *mut Builder_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum ExecutionEngine_opaque {}\n pub type ExecutionEngineRef = *mut ExecutionEngine_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum RustJITMemoryManager_opaque {}\n pub type RustJITMemoryManagerRef = *mut RustJITMemoryManager_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum MemoryBuffer_opaque {}\n pub type MemoryBufferRef = *mut MemoryBuffer_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum PassManager_opaque {}\n pub type PassManagerRef = *mut PassManager_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum PassManagerBuilder_opaque {}\n pub type PassManagerBuilderRef = *mut PassManagerBuilder_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum Use_opaque {}\n pub type UseRef = *mut Use_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum TargetData_opaque {}\n pub type TargetDataRef = *mut TargetData_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum ObjectFile_opaque {}\n pub type ObjectFileRef = *mut ObjectFile_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum SectionIterator_opaque {}\n pub type SectionIteratorRef = *mut SectionIterator_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum Pass_opaque {}\n pub type PassRef = *mut Pass_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum TargetMachine_opaque {}\n pub type TargetMachineRef = *mut TargetMachine_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum Archive_opaque {}\n pub type ArchiveRef = *mut Archive_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum Twine_opaque {}\n pub type TwineRef = *mut Twine_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum DiagnosticInfo_opaque {}\n pub type DiagnosticInfoRef = *mut DiagnosticInfo_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum DebugLoc_opaque {}\n pub type DebugLocRef = *mut DebugLoc_opaque;\n-#[allow(missing_copy_implementations)]\n pub enum SMDiagnostic_opaque {}\n pub type SMDiagnosticRef = *mut SMDiagnostic_opaque;\n \n@@ -513,7 +490,6 @@ pub mod debuginfo {\n     pub use self::DIDescriptorFlags::*;\n     use super::{MetadataRef};\n \n-    #[allow(missing_copy_implementations)]\n     pub enum DIBuilder_opaque {}\n     pub type DIBuilderRef = *mut DIBuilder_opaque;\n \n@@ -2215,7 +2191,6 @@ pub fn get_param(llfn: ValueRef, index: c_uint) -> ValueRef {\n     }\n }\n \n-#[allow(missing_copy_implementations)]\n pub enum RustString_opaque {}\n pub type RustStringRef = *mut RustString_opaque;\n type RustStringRepr = *mut RefCell<Vec<u8>>;"}, {"sha": "464522f167b472b6aa46667095e1b1ba999bc547", "filename": "src/librustc_trans/trans/value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -150,7 +150,6 @@ impl Use {\n }\n \n /// Iterator for the users of a value\n-#[allow(missing_copy_implementations)]\n pub struct Users {\n     next: Option<Use>\n }"}, {"sha": "60e969c4f99dd410c23f089fef3f56e9aa07e49a", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -79,7 +79,6 @@ impl RegionScope for UnelidableRscope {\n // A scope in which any omitted region defaults to `default`. This is\n // used after the `->` in function signatures, but also for backwards\n // compatibility with object types. The latter use may go away.\n-#[allow(missing_copy_implementations)]\n pub struct SpecificRscope {\n     default: ty::Region\n }"}, {"sha": "42f365b4e1b3c3f291d6ad0cbebda353c8506da5", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -1580,7 +1580,6 @@ impl<K, V, S, H> Extend<(K, V)> for HashMap<K, V, S>\n /// `Hasher`, but the hashers created by two different `RandomState`\n /// instances are unlikely to produce the same result for the same values.\n #[derive(Clone)]\n-#[allow(missing_copy_implementations)]\n #[unstable(feature = \"std_misc\",\n            reason = \"hashing an hash maps may be altered\")]\n pub struct RandomState {\n@@ -1623,7 +1622,6 @@ impl Default for RandomState {\n /// This is the default hasher used in a `HashMap` to hash keys. Types do not\n /// typically declare an ability to explicitly hash into this particular type,\n /// but rather in a `H: hash::Writer` type parameter.\n-#[allow(missing_copy_implementations)]\n #[unstable(feature = \"std_misc\",\n            reason = \"hashing an hash maps may be altered\")]\n pub struct Hasher { inner: SipHasher }"}, {"sha": "bee9a0d00337b4fa2f9a9130bd5c525ada3cec88", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -22,7 +22,6 @@ use mem;\n use env;\n use str;\n \n-#[allow(missing_copy_implementations)]\n pub struct DynamicLibrary {\n     handle: *mut u8\n }"}, {"sha": "47a60fc2273b5346d254e8c8e337587275178fd0", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -759,7 +759,6 @@ pub fn page_size() -> uint {\n ///\n /// The memory map is released (unmapped) when the destructor is run, so don't\n /// let it leave scope by accident if you want it to stick around.\n-#[allow(missing_copy_implementations)]\n pub struct MemoryMap {\n     data: *mut u8,\n     len: uint,"}, {"sha": "535af08c96c70d70f25245008dddf8f5570a3b1c", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -206,7 +206,6 @@ mod imp {\n     /// - iOS: calls SecRandomCopyBytes as /dev/(u)random is sandboxed.\n     ///\n     /// This does not block.\n-    #[allow(missing_copy_implementations)]\n     pub struct OsRng {\n         // dummy field to ensure that this struct cannot be constructed outside of this module\n         _dummy: (),"}, {"sha": "b37996fa9d9de0163fc434b786f4d17676d37b88", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -390,13 +390,10 @@ pub mod eabi {\n     use libc::{c_void, c_int};\n \n     #[repr(C)]\n-    #[allow(missing_copy_implementations)]\n     pub struct EXCEPTION_RECORD;\n     #[repr(C)]\n-    #[allow(missing_copy_implementations)]\n     pub struct CONTEXT;\n     #[repr(C)]\n-    #[allow(missing_copy_implementations)]\n     pub struct DISPATCHER_CONTEXT;\n \n     #[repr(C)]"}, {"sha": "703dca4d29bf95f7293e501a889b328e4c4b1b7e", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -88,7 +88,6 @@ pub fn default_sched_threads() -> uint {\n pub const ENFORCE_SANITY: bool = true || !cfg!(rtopt) || cfg!(rtdebug) ||\n                                   cfg!(rtassert);\n \n-#[allow(missing_copy_implementations)]\n pub struct Stdio(libc::c_int);\n \n #[allow(non_upper_case_globals)]"}, {"sha": "cca376f7b6d05397776202005627afd0c6153b7c", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -46,7 +46,6 @@ struct BarrierState {\n ///\n /// Currently this opaque structure only has one method, `.is_leader()`. Only\n /// one thread will receive a result that will return `true` from this function.\n-#[allow(missing_copy_implementations)]\n pub struct BarrierWaitResult(bool);\n \n impl Barrier {"}, {"sha": "d9bc37d312e86038ff1542a50396e188a50c1a9a", "filename": "src/libstd/sync/poison.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Fsync%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Flibstd%2Fsync%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fpoison.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -42,7 +42,6 @@ impl Flag {\n     }\n }\n \n-#[allow(missing_copy_implementations)]\n pub struct Guard {\n     panicking: bool,\n }"}, {"sha": "b1bb28f7ce7164e920bf5c043f3eae8a5782d49e", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -12,7 +12,6 @@\n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n #![allow(non_upper_case_globals)]\n-#![allow(missing_copy_implementations)]\n #![deny(dead_code)]\n #![feature(core)]\n "}, {"sha": "3b96fd64fa200e8f3d397bd69e6283a4f066fdfc", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -12,7 +12,6 @@\n // injected intrinsics by the compiler.\n #![deny(missing_docs)]\n #![allow(dead_code)]\n-#![allow(missing_copy_implementations)]\n \n //! Some garbage docs for the crate here\n #![doc=\"More garbage\"]"}, {"sha": "ddc9081e33bb6f235a45a633d6cc65e6e6e32292", "filename": "src/test/compile-fail/missing_debug_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Ftest%2Fcompile-fail%2Fmissing_debug_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b51291f0ffb352ec3f4cc2455a85cfa3995946/src%2Ftest%2Fcompile-fail%2Fmissing_debug_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing_debug_impls.rs?ref=67b51291f0ffb352ec3f4cc2455a85cfa3995946", "patch": "@@ -10,7 +10,7 @@\n \n // compile-flags: --crate-type lib\n #![deny(missing_debug_implementations)]\n-#![allow(unused, missing_copy_implementations)]\n+#![allow(unused)]\n \n use std::fmt;\n "}]}