{"sha": "9603d9652b9d172842c77f566121437768bc962f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MDNkOTY1MmI5ZDE3Mjg0MmM3N2Y1NjYxMjE0Mzc3NjhiYzk2MmY=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-07-19T09:47:32Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-07-19T22:30:43Z"}, "message": "redundant_closure_call - add support for shadowed closures", "tree": {"sha": "90bb2cb5805ea5eebd818b4e9201000de9e5bf63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90bb2cb5805ea5eebd818b4e9201000de9e5bf63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9603d9652b9d172842c77f566121437768bc962f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9603d9652b9d172842c77f566121437768bc962f", "html_url": "https://github.com/rust-lang/rust/commit/9603d9652b9d172842c77f566121437768bc962f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9603d9652b9d172842c77f566121437768bc962f/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fecaf1abcbe8d4ba1a9c532b69aab6fab3097c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fecaf1abcbe8d4ba1a9c532b69aab6fab3097c8", "html_url": "https://github.com/rust-lang/rust/commit/0fecaf1abcbe8d4ba1a9c532b69aab6fab3097c8"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "9477e79f567ad3c70ad6118e8d60a8278ef4bf5b", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9603d9652b9d172842c77f566121437768bc962f/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9603d9652b9d172842c77f566121437768bc962f/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=9603d9652b9d172842c77f566121437768bc962f", "patch": "@@ -11,7 +11,6 @@ use rustc_lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintCon\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n     /// **What it does:** Detects closures called in the same expression where they\n@@ -96,9 +95,9 @@ impl EarlyLintPass for RedundantClosureCall {\n \n impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n-        fn count_closure_usage<'tcx>(block: &'tcx hir::Block<'_>, ident: &'tcx Ident) -> usize {\n+        fn count_closure_usage<'tcx>(block: &'tcx hir::Block<'_>, path: &'tcx hir::Path<'tcx>) -> usize {\n             struct ClosureUsageCount<'tcx> {\n-                ident: &'tcx Ident,\n+                path: &'tcx hir::Path<'tcx>,\n                 count: usize,\n             };\n             impl<'tcx> hir_visit::Visitor<'tcx> for ClosureUsageCount<'tcx> {\n@@ -108,7 +107,8 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n                     if_chain! {\n                         if let hir::ExprKind::Call(ref closure, _) = expr.kind;\n                         if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = closure.kind;\n-                        if self.ident == &path.segments[0].ident;\n+                        if self.path.segments[0].ident == path.segments[0].ident\n+                            && self.path.res == path.res;\n                         then {\n                             self.count += 1;\n                         }\n@@ -120,7 +120,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n                     hir_visit::NestedVisitorMap::None\n                 }\n             };\n-            let mut closure_usage_count = ClosureUsageCount { ident, count: 0 };\n+            let mut closure_usage_count = ClosureUsageCount { path, count: 0 };\n             closure_usage_count.visit_block(block);\n             closure_usage_count.count\n         }\n@@ -136,7 +136,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n                 if let hir::ExprKind::Call(ref closure, _) = call.kind;\n                 if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = closure.kind;\n                 if ident == path.segments[0].ident;\n-                if  count_closure_usage(block, &ident) == 1;\n+                if  count_closure_usage(block, path) == 1;\n                 then {\n                     span_lint(\n                         cx,"}, {"sha": "e29a1dce0c7e8f040f7dd3f262e505fbf4d21d9a", "filename": "tests/ui/redundant_closure_call_late.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9603d9652b9d172842c77f566121437768bc962f/tests%2Fui%2Fredundant_closure_call_late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9603d9652b9d172842c77f566121437768bc962f/tests%2Fui%2Fredundant_closure_call_late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_late.rs?ref=9603d9652b9d172842c77f566121437768bc962f", "patch": "@@ -14,9 +14,14 @@ fn main() {\n     let redun_closure = || 1;\n     i = redun_closure();\n \n-    // the lint is applicable here but the lint doesn't support redefinition\n-    let redefined_closure = || 1;\n-    i = redefined_closure();\n-    let redefined_closure = || 2;\n-    i = redefined_closure();\n+    // shadowed closures are supported, lint here\n+    let shadowed_closure = || 1;\n+    i = shadowed_closure();\n+    let shadowed_closure = || 2;\n+    i = shadowed_closure();\n+\n+    // don't lint here\n+    let shadowed_closure = || 2;\n+    i = shadowed_closure();\n+    i = shadowed_closure();\n }"}, {"sha": "0e000fee85ac31f9f3c0b1c64dfb0a401983690a", "filename": "tests/ui/redundant_closure_call_late.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9603d9652b9d172842c77f566121437768bc962f/tests%2Fui%2Fredundant_closure_call_late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9603d9652b9d172842c77f566121437768bc962f/tests%2Fui%2Fredundant_closure_call_late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_late.stderr?ref=9603d9652b9d172842c77f566121437768bc962f", "patch": "@@ -6,5 +6,17 @@ LL |     i = redun_closure();\n    |\n    = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: Closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call_late.rs:19:5\n+   |\n+LL |     i = shadowed_closure();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call_late.rs:21:5\n+   |\n+LL |     i = shadowed_closure();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n "}]}