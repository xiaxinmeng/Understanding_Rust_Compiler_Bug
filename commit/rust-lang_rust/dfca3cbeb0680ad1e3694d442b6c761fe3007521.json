{"sha": "dfca3cbeb0680ad1e3694d442b6c761fe3007521", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmY2EzY2JlYjA2ODBhZDFlMzY5NGQ0NDJiNmM3NjFmZTMwMDc1MjE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-24T20:39:27Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-24T20:39:27Z"}, "message": "Merge #894\n\n894: Rename Type => TypeAlias r=matklad a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "e87434ec26daadf0c3d1f8486391d6c183b29c49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e87434ec26daadf0c3d1f8486391d6c183b29c49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfca3cbeb0680ad1e3694d442b6c761fe3007521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfca3cbeb0680ad1e3694d442b6c761fe3007521", "html_url": "https://github.com/rust-lang/rust/commit/dfca3cbeb0680ad1e3694d442b6c761fe3007521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfca3cbeb0680ad1e3694d442b6c761fe3007521/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "61d961263387f7293f3d0c4d7b8c8c9a07959ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d961263387f7293f3d0c4d7b8c8c9a07959ced", "html_url": "https://github.com/rust-lang/rust/commit/61d961263387f7293f3d0c4d7b8c8c9a07959ced"}, {"sha": "bd8ed644e4362785b079ba9fbe2d4e490a678d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8ed644e4362785b079ba9fbe2d4e490a678d27", "html_url": "https://github.com/rust-lang/rust/commit/bd8ed644e4362785b079ba9fbe2d4e490a678d27"}], "stats": {"total": 102, "additions": 58, "deletions": 44}, "files": [{"sha": "278407504604e1cbeca27e73e72e9ceab3325052", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -85,9 +85,19 @@ pub enum ModuleDef {\n     Const(Const),\n     Static(Static),\n     Trait(Trait),\n-    Type(Type),\n-}\n-impl_froms!(ModuleDef: Module, Function, Struct, Enum, EnumVariant, Const, Static, Trait, Type);\n+    TypeAlias(TypeAlias),\n+}\n+impl_froms!(\n+    ModuleDef: Module,\n+    Function,\n+    Struct,\n+    Enum,\n+    EnumVariant,\n+    Const,\n+    Static,\n+    Trait,\n+    TypeAlias\n+);\n \n pub enum ModuleSource {\n     SourceFile(TreeArc<ast::SourceFile>),\n@@ -604,11 +614,11 @@ impl Docs for Trait {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct Type {\n+pub struct TypeAlias {\n     pub(crate) id: TypeId,\n }\n \n-impl Type {\n+impl TypeAlias {\n     pub fn source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, TreeArc<ast::TypeDef>) {\n         self.id.source(db)\n     }\n@@ -645,7 +655,7 @@ impl Type {\n     }\n }\n \n-impl Docs for Type {\n+impl Docs for TypeAlias {\n     fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n         docs_from_ast(&*self.source(db).1)\n     }"}, {"sha": "b8715ababb9c3b2f35f78961408a8a616955da6f", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -6,7 +6,7 @@ use ra_db::{SourceDatabase, salsa};\n use crate::{\n     MacroCallId, HirFileId,\n     SourceFileItems, SourceItemId, Crate, Module, HirInterner,\n-    Function, FnSignature, ExprScopes,\n+    Function, FnSignature, ExprScopes, TypeAlias,\n     Struct, Enum, StructField,\n     macros::MacroExpansion,\n     module_tree::ModuleTree,\n@@ -15,7 +15,9 @@ use crate::{\n     adt::{StructData, EnumData},\n     impl_block::{ModuleImplBlocks, ImplSourceMap},\n     generics::{GenericParams, GenericDef},\n-    ids::SourceFileItemId, nameres::Namespace, type_ref::TypeRef, code_model_api::Type\n+    ids::SourceFileItemId,\n+    nameres::Namespace,\n+    type_ref::TypeRef,\n };\n \n #[salsa::query_group(PersistentHirDatabaseStorage)]\n@@ -79,7 +81,7 @@ pub trait PersistentHirDatabase: SourceDatabase + AsRef<HirInterner> {\n     fn fn_signature(&self, func: Function) -> Arc<FnSignature>;\n \n     #[salsa::invoke(crate::type_alias::type_alias_ref_query)]\n-    fn type_alias_ref(&self, typ: Type) -> Arc<TypeRef>;\n+    fn type_alias_ref(&self, typ: TypeAlias) -> Arc<TypeRef>;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "0f759a235873b59fe7661fcc5b475cbc74b1bedd", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -7,7 +7,10 @@ use std::sync::Arc;\n \n use ra_syntax::ast::{self, NameOwner, TypeParamsOwner};\n \n-use crate::{db::PersistentHirDatabase, Name, AsName, Function, Struct, Enum, Trait, Type, ImplBlock};\n+use crate::{\n+    db::PersistentHirDatabase,\n+    Name, AsName, Function, Struct, Enum, Trait, TypeAlias, ImplBlock\n+};\n \n /// Data about a generic parameter (to a function, struct, impl, ...).\n #[derive(Clone, PartialEq, Eq, Debug)]\n@@ -30,10 +33,10 @@ pub enum GenericDef {\n     Struct(Struct),\n     Enum(Enum),\n     Trait(Trait),\n-    Type(Type),\n+    TypeAlias(TypeAlias),\n     ImplBlock(ImplBlock),\n }\n-impl_froms!(GenericDef: Function, Struct, Enum, Trait, Type, ImplBlock);\n+impl_froms!(GenericDef: Function, Struct, Enum, Trait, TypeAlias, ImplBlock);\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n@@ -43,7 +46,7 @@ impl GenericParams {\n         let mut generics = GenericParams::default();\n         let parent = match def {\n             GenericDef::Function(it) => it.impl_block(db),\n-            GenericDef::Type(it) => it.impl_block(db),\n+            GenericDef::TypeAlias(it) => it.impl_block(db),\n             GenericDef::Struct(_) | GenericDef::Enum(_) | GenericDef::Trait(_) => None,\n             GenericDef::ImplBlock(_) => None,\n         };\n@@ -54,7 +57,7 @@ impl GenericParams {\n             GenericDef::Struct(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Enum(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Trait(it) => generics.fill(&*it.source(db).1, start),\n-            GenericDef::Type(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::TypeAlias(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::ImplBlock(it) => generics.fill(&*it.source(db).1, start),\n         }\n "}, {"sha": "2f3c916fdec9c37a17f802040e8379f56d22c1b1", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n ast::{self, AstNode}};\n \n use crate::{\n-    Const, Type, Function, HirFileId,\n+    Const, TypeAlias, Function, HirFileId,\n     HirDatabase, PersistentHirDatabase,\n     ModuleDef, Trait, Resolution,\n     type_ref::TypeRef,\n@@ -135,13 +135,9 @@ impl ImplData {\n             item_list\n                 .impl_items()\n                 .map(|item_node| match item_node.kind() {\n-                    ast::ImplItemKind::FnDef(it) => {\n-                        ImplItem::Method(Function { id: ctx.to_def(it) })\n-                    }\n-                    ast::ImplItemKind::ConstDef(it) => {\n-                        ImplItem::Const(Const { id: ctx.to_def(it) })\n-                    }\n-                    ast::ImplItemKind::TypeDef(it) => ImplItem::Type(Type { id: ctx.to_def(it) }),\n+                    ast::ImplItemKind::FnDef(it) => Function { id: ctx.to_def(it) }.into(),\n+                    ast::ImplItemKind::ConstDef(it) => Const { id: ctx.to_def(it) }.into(),\n+                    ast::ImplItemKind::TypeDef(it) => TypeAlias { id: ctx.to_def(it) }.into(),\n                 })\n                 .collect()\n         } else {\n@@ -168,10 +164,10 @@ impl ImplData {\n pub enum ImplItem {\n     Method(Function),\n     Const(Const),\n-    Type(Type),\n+    TypeAlias(TypeAlias),\n     // Existential\n }\n-impl_froms!(ImplItem: Const, Type);\n+impl_froms!(ImplItem: Const, TypeAlias);\n \n impl From<Function> for ImplItem {\n     fn from(func: Function) -> ImplItem {"}, {"sha": "aa5fc56076f890ec74f440f55b04fda242b74092", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -72,5 +72,5 @@ pub use self::code_model_api::{\n     Function, FnSignature,\n     StructField, FieldSource,\n     Static, Const,\n-    Trait, Type,\n+    Trait, TypeAlias,\n };"}, {"sha": "522f13b445321d557aaefac4017f6230e50ff4ea", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -10,7 +10,7 @@ use rustc_hash::FxHashMap;\n use crate::{\n     SourceItemId, Path, ModuleSource, Name,\n     HirFileId, MacroCallLoc, AsName, PerNs, Function,\n-    ModuleDef, Module, Struct, Enum, Const, Static, Trait, Type,\n+    ModuleDef, Module, Struct, Enum, Const, Static, Trait, TypeAlias,\n     ids::LocationCtx, PersistentHirDatabase,\n };\n \n@@ -169,7 +169,7 @@ impl LoweredModule {\n             }\n             ast::ModuleItemKind::TypeDef(it) => {\n                 if let Some(name) = it.name() {\n-                    let t = Type { id: ctx.to_def(it) };\n+                    let t = TypeAlias { id: ctx.to_def(it) };\n                     self.declarations.insert(name.as_name(), PerNs::types(t.into()));\n                 }\n             }"}, {"sha": "921130b71bd84e8ead6397e8a97067c55ae2ae00", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -406,7 +406,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 crate::ImplItem::Const(_) => None,\n \n                 // TODO: Resolve associated types\n-                crate::ImplItem::Type(_) => None,\n+                crate::ImplItem::TypeAlias(_) => None,\n             })?;\n             resolved = Resolution::Def(item.into());\n         }\n@@ -477,7 +477,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n                 (ty, Some(var.into()))\n             }\n-            TypableDef::Type(_) | TypableDef::Function(_) | TypableDef::Enum(_) => {\n+            TypableDef::TypeAlias(_) | TypableDef::Function(_) | TypableDef::Enum(_) => {\n                 (Ty::Unknown, None)\n             }\n         }"}, {"sha": "b66b8e4a551bdf53974eed3a17606ec5a437015c", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -10,7 +10,7 @@ use std::sync::Arc;\n \n use crate::{\n     Function, Struct, StructField, Enum, EnumVariant, Path, Name,\n-    ModuleDef, Type,\n+    ModuleDef, TypeAlias,\n     HirDatabase,\n     type_ref::TypeRef,\n     name::KnownName,\n@@ -124,7 +124,7 @@ impl Ty {\n             TypableDef::Struct(s) => s.generic_params(db),\n             TypableDef::Enum(e) => e.generic_params(db),\n             TypableDef::EnumVariant(var) => var.parent_enum(db).generic_params(db),\n-            TypableDef::Type(t) => t.generic_params(db),\n+            TypableDef::TypeAlias(t) => t.generic_params(db),\n         };\n         let parent_param_count = def_generics.count_parent_params();\n         substs.extend((0..parent_param_count).map(|_| Ty::Unknown));\n@@ -163,7 +163,7 @@ impl Ty {\n             TypableDef::Function(_)\n             | TypableDef::Struct(_)\n             | TypableDef::Enum(_)\n-            | TypableDef::Type(_) => last,\n+            | TypableDef::TypeAlias(_) => last,\n             TypableDef::EnumVariant(_) => {\n                 // the generic args for an enum variant may be either specified\n                 // on the segment referring to the enum, or on the segment\n@@ -196,13 +196,13 @@ pub(crate) fn type_for_def(db: &impl HirDatabase, def: TypableDef, ns: Namespace\n         (TypableDef::Struct(s), Namespace::Values) => type_for_struct_constructor(db, s),\n         (TypableDef::Enum(e), Namespace::Types) => type_for_enum(db, e),\n         (TypableDef::EnumVariant(v), Namespace::Values) => type_for_enum_variant_constructor(db, v),\n-        (TypableDef::Type(t), Namespace::Types) => type_for_type_alias(db, t),\n+        (TypableDef::TypeAlias(t), Namespace::Types) => type_for_type_alias(db, t),\n \n         // 'error' cases:\n         (TypableDef::Function(_), Namespace::Types) => Ty::Unknown,\n         (TypableDef::Enum(_), Namespace::Values) => Ty::Unknown,\n         (TypableDef::EnumVariant(_), Namespace::Types) => Ty::Unknown,\n-        (TypableDef::Type(_), Namespace::Values) => Ty::Unknown,\n+        (TypableDef::TypeAlias(_), Namespace::Values) => Ty::Unknown,\n     }\n }\n \n@@ -302,7 +302,7 @@ fn type_for_enum(db: &impl HirDatabase, s: Enum) -> Ty {\n     }\n }\n \n-fn type_for_type_alias(db: &impl HirDatabase, t: Type) -> Ty {\n+fn type_for_type_alias(db: &impl HirDatabase, t: TypeAlias) -> Ty {\n     let generics = t.generic_params(db);\n     let resolver = t.resolver(db);\n     let type_ref = t.type_ref(db);\n@@ -317,9 +317,9 @@ pub enum TypableDef {\n     Struct(Struct),\n     Enum(Enum),\n     EnumVariant(EnumVariant),\n-    Type(Type),\n+    TypeAlias(TypeAlias),\n }\n-impl_froms!(TypableDef: Function, Struct, Enum, EnumVariant, Type);\n+impl_froms!(TypableDef: Function, Struct, Enum, EnumVariant, TypeAlias);\n \n impl From<ModuleDef> for Option<TypableDef> {\n     fn from(def: ModuleDef) -> Option<TypableDef> {\n@@ -328,7 +328,7 @@ impl From<ModuleDef> for Option<TypableDef> {\n             ModuleDef::Struct(s) => s.into(),\n             ModuleDef::Enum(e) => e.into(),\n             ModuleDef::EnumVariant(v) => v.into(),\n-            ModuleDef::Type(t) => t.into(),\n+            ModuleDef::TypeAlias(t) => t.into(),\n             ModuleDef::Const(_)\n             | ModuleDef::Static(_)\n             | ModuleDef::Module(_)"}, {"sha": "d02762d20c83909d330ee72d082d5d51f615485b", "filename": "crates/ra_hir/src/type_alias.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_alias.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -2,9 +2,12 @@\n \n use std::sync::Arc;\n \n-use crate::{code_model_api::Type, db::PersistentHirDatabase, type_ref::TypeRef};\n+use crate::{TypeAlias, db::PersistentHirDatabase, type_ref::TypeRef};\n \n-pub(crate) fn type_alias_ref_query(db: &impl PersistentHirDatabase, typ: Type) -> Arc<TypeRef> {\n+pub(crate) fn type_alias_ref_query(\n+    db: &impl PersistentHirDatabase,\n+    typ: TypeAlias,\n+) -> Arc<TypeRef> {\n     let (_, node) = typ.source(db);\n     Arc::new(TypeRef::from_ast_opt(node.type_ref()))\n }"}, {"sha": "5ff1b9927bff29f4ad8cee7fd5938a1c01063e4d", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -46,7 +46,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                         }\n                     }\n                     hir::ImplItem::Const(ct) => acc.add_const(ctx, ct),\n-                    hir::ImplItem::Type(ty) => acc.add_type(ctx, ty),\n+                    hir::ImplItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n                 }\n                 None::<()>\n             });"}, {"sha": "71003104b529c010623f2c53ef9114679fafecf9", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -65,7 +65,7 @@ impl Completions {\n             Resolution::Def(Const(it)) => (CompletionItemKind::Const, it.docs(ctx.db)),\n             Resolution::Def(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),\n             Resolution::Def(Trait(it)) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n-            Resolution::Def(Type(it)) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n+            Resolution::Def(TypeAlias(it)) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n             Resolution::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n             Resolution::LocalBinding(..) => (CompletionItemKind::Binding, None),\n             Resolution::SelfType(..) => (\n@@ -132,7 +132,7 @@ impl Completions {\n             .add_to(self);\n     }\n \n-    pub(crate) fn add_type(&mut self, ctx: &CompletionContext, type_alias: hir::Type) {\n+    pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n         let (_file_id, type_def) = type_alias.source(ctx.db);\n         let name = match type_def.name() {\n             Some(name) => name,"}, {"sha": "6538081ac6b68bfb56bb1f98c9521a91af055853", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfca3cbeb0680ad1e3694d442b6c761fe3007521/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=dfca3cbeb0680ad1e3694d442b6c761fe3007521", "patch": "@@ -154,7 +154,7 @@ impl NavigationTarget {\n                 let (file_id, node) = e.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n-            hir::ModuleDef::Type(e) => {\n+            hir::ModuleDef::TypeAlias(e) => {\n                 let (file_id, node) = e.source(db);\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }"}]}