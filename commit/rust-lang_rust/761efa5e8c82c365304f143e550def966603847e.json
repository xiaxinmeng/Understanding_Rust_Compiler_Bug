{"sha": "761efa5e8c82c365304f143e550def966603847e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MWVmYTVlOGM4MmMzNjUzMDRmMTQzZTU1MGRlZjk2NjYwMzg0N2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-23T00:38:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-23T00:38:58Z"}, "message": "Remove section on stability levels from reference\n\nObsolete, no replacement. The mechanics here are mostly implementation details at this point.", "tree": {"sha": "a69f4d801b841f9eede8f8860704e8484497d4ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a69f4d801b841f9eede8f8860704e8484497d4ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/761efa5e8c82c365304f143e550def966603847e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/761efa5e8c82c365304f143e550def966603847e", "html_url": "https://github.com/rust-lang/rust/commit/761efa5e8c82c365304f143e550def966603847e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/761efa5e8c82c365304f143e550def966603847e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47905f98eef9c0ee5d64eb8c536c821e86f6c4cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/47905f98eef9c0ee5d64eb8c536c821e86f6c4cd", "html_url": "https://github.com/rust-lang/rust/commit/47905f98eef9c0ee5d64eb8c536c821e86f6c4cd"}], "stats": {"total": 71, "additions": 0, "deletions": 71}, "files": [{"sha": "2883bc00536486190815a8cabb9f4460a32f26a4", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/761efa5e8c82c365304f143e550def966603847e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/761efa5e8c82c365304f143e550def966603847e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=761efa5e8c82c365304f143e550def966603847e", "patch": "@@ -2493,77 +2493,6 @@ Supported traits for `derive` are:\n * `Show`, to format a value using the `{}` formatter.\n * `Zero`, to create a zero instance of a numeric data type.\n \n-### Stability\n-\n-One can indicate the stability of an API using the following attributes:\n-\n-* `deprecated`: This item should no longer be used, e.g. it has been\n-  replaced. No guarantee of backwards-compatibility.\n-* `experimental`: This item was only recently introduced or is\n-  otherwise in a state of flux. It may change significantly, or even\n-  be removed. No guarantee of backwards-compatibility.\n-* `unstable`: This item is still under development, but requires more\n-  testing to be considered stable. No guarantee of backwards-compatibility.\n-* `stable`: This item is considered stable, and will not change\n-  significantly. Guarantee of backwards-compatibility.\n-* `frozen`: This item is very stable, and is unlikely to\n-  change. Guarantee of backwards-compatibility.\n-* `locked`: This item will never change unless a serious bug is\n-  found. Guarantee of backwards-compatibility.\n-\n-These levels are directly inspired by\n-[Node.js' \"stability index\"](http://nodejs.org/api/documentation.html).\n-\n-Stability levels are inherited, so an item's stability attribute is the default\n-stability for everything nested underneath it.\n-\n-There are lints for disallowing items marked with certain levels: `deprecated`,\n-`experimental` and `unstable`. For now, only `deprecated` warns by default, but\n-this will change once the standard library has been stabilized. Stability\n-levels are meant to be promises at the crate level, so these lints only apply\n-when referencing items from an _external_ crate, not to items defined within\n-the current crate. Items with no stability level are considered to be unstable\n-for the purposes of the lint. One can give an optional string that will be\n-displayed when the lint flags the use of an item.\n-\n-For example, if we define one crate called `stability_levels`:\n-\n-```{.ignore}\n-#[deprecated=\"replaced by `best`\"]\n-pub fn bad() {\n-    // delete everything\n-}\n-\n-pub fn better() {\n-    // delete fewer things\n-}\n-\n-#[stable]\n-pub fn best() {\n-    // delete nothing\n-}\n-```\n-\n-then the lints will work as follows for a client crate:\n-\n-```{.ignore}\n-#![warn(unstable)]\n-extern crate stability_levels;\n-use stability_levels::{bad, better, best};\n-\n-fn main() {\n-    bad(); // \"warning: use of deprecated item: replaced by `best`\"\n-\n-    better(); // \"warning: use of unmarked item\"\n-\n-    best(); // no warning\n-}\n-```\n-\n-> **Note:** Currently these are only checked when applied to individual\n-> functions, structs, methods and enum variants, *not* to entire modules,\n-> traits, impls or enums themselves.\n-\n ### Compiler Features\n \n Certain aspects of Rust may be implemented in the compiler, but they're not"}]}