{"sha": "b44be27999d26ee5f6712704e5d0535c2ea08e70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NGJlMjc5OTlkMjZlZTVmNjcxMjcwNGU1ZDA1MzVjMmVhMDhlNzA=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-07-10T13:53:37Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-07-10T16:29:11Z"}, "message": "Moves changes to explicit_preds_of/inferred_outlives_of/generics_of", "tree": {"sha": "8f2b282a29d1754970b79088aad00221825a2551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f2b282a29d1754970b79088aad00221825a2551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b44be27999d26ee5f6712704e5d0535c2ea08e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b44be27999d26ee5f6712704e5d0535c2ea08e70", "html_url": "https://github.com/rust-lang/rust/commit/b44be27999d26ee5f6712704e5d0535c2ea08e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b44be27999d26ee5f6712704e5d0535c2ea08e70/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05dcb7874a5a8c84fe943dcbae12010ba5a40c25", "url": "https://api.github.com/repos/rust-lang/rust/commits/05dcb7874a5a8c84fe943dcbae12010ba5a40c25", "html_url": "https://github.com/rust-lang/rust/commit/05dcb7874a5a8c84fe943dcbae12010ba5a40c25"}], "stats": {"total": 104, "additions": 71, "deletions": 33}, "files": [{"sha": "c78151271c171fdb8d8f30da1ab80833ada2d52c", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b44be27999d26ee5f6712704e5d0535c2ea08e70/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44be27999d26ee5f6712704e5d0535c2ea08e70/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=b44be27999d26ee5f6712704e5d0535c2ea08e70", "patch": "@@ -85,10 +85,7 @@ impl<'tcx> Const<'tcx> {\n             _ => expr,\n         };\n \n-        use hir::{\n-            def::DefKind::ConstParam, def::Res, ExprKind, GenericParam, GenericParamKind, Node,\n-            Path, QPath,\n-        };\n+        use hir::{def::DefKind::ConstParam, def::Res, ExprKind, Path, QPath};\n         let val = match expr.kind {\n             ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n                 // Find the name and index of the const parameter by indexing the generics of\n@@ -103,33 +100,7 @@ impl<'tcx> Const<'tcx> {\n             }\n             _ => ty::ConstKind::Unevaluated(ty::Unevaluated {\n                 def: def.to_global(),\n-                substs: {\n-                    let ct_hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-                    let parent_id = tcx.hir().get_parent_node(ct_hir_id);\n-                    match tcx.hir().get(parent_id) {\n-                        // If this anon ct is a cg default we should only provide non-fwd declared params\n-                        // https://github.com/rust-lang/rust/issues/83938\n-                        Node::GenericParam(GenericParam {\n-                            hir_id: param_id,\n-                            kind: GenericParamKind::Const { .. },\n-                            ..\n-                        }) => {\n-                            let item_id = tcx.hir().get_parent_node(*param_id);\n-                            let item_def_id = tcx.hir().local_def_id(item_id);\n-                            let generics = tcx.generics_of(item_def_id.to_def_id());\n-                            let param_def = tcx.hir().local_def_id(*param_id).to_def_id();\n-                            let param_def_idx = generics.param_def_id_to_index[&param_def];\n-                            let substs = generics\n-                                .params\n-                                .iter()\n-                                .map(|param| tcx.mk_param_from_def(param))\n-                                .take(param_def_idx as usize)\n-                                .collect::<smallvec::SmallVec<[_; 8]>>();\n-                            tcx.intern_substs(&substs)\n-                        }\n-                        _ => InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n-                    }\n-                },\n+                substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                 promoted: None,\n             }),\n         };"}, {"sha": "924a0b8410a125d5be3b4042834f39d3749081c3", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b44be27999d26ee5f6712704e5d0535c2ea08e70/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44be27999d26ee5f6712704e5d0535c2ea08e70/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=b44be27999d26ee5f6712704e5d0535c2ea08e70", "patch": "@@ -1441,6 +1441,32 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n             } else if tcx.lazy_normalization() {\n+                // Only provide backwards declared generics to cg defaults (#83938)\n+                if let Node::GenericParam(GenericParam {\n+                    hir_id: param_id,\n+                    kind: GenericParamKind::Const { .. },\n+                    ..\n+                }) = tcx.hir().get(tcx.hir().get_parent_node(hir_id))\n+                {\n+                    let item_id = tcx.hir().get_parent_node(*param_id);\n+                    let item_def_id = tcx.hir().local_def_id(item_id);\n+                    let generics = tcx.generics_of(item_def_id.to_def_id());\n+                    let param_def = tcx.hir().local_def_id(*param_id).to_def_id();\n+                    let param_def_idx = generics.param_def_id_to_index[&param_def];\n+                    let params = generics.params[..param_def_idx as usize].to_owned();\n+                    let param_def_id_to_index =\n+                        params.iter().map(|param| (param.def_id, param.index)).collect();\n+\n+                    return ty::Generics {\n+                        parent: generics.parent,\n+                        parent_count: generics.parent_count,\n+                        params,\n+                        param_def_id_to_index,\n+                        has_self: generics.has_self,\n+                        has_late_bound_regions: generics.has_late_bound_regions,\n+                    };\n+                }\n+\n                 // HACK(eddyb) this provides the correct generics when\n                 // `feature(const_generics)` is enabled, so that const expressions\n                 // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n@@ -2359,7 +2385,8 @@ fn trait_explicit_predicates_and_bounds(\n }\n \n fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n-    if let DefKind::Trait = tcx.def_kind(def_id) {\n+    let def_kind = tcx.def_kind(def_id);\n+    if let DefKind::Trait = def_kind {\n         // Remove bounds on associated types from the predicates, they will be\n         // returned by `explicit_item_bounds`.\n         let predicates_and_bounds = tcx.trait_explicit_predicates_and_bounds(def_id.expect_local());\n@@ -2404,6 +2431,21 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n             }\n         }\n     } else {\n+        if matches!(def_kind, DefKind::AnonConst) && tcx.lazy_normalization() {\n+            // Provide predicates of parent item of cg defaults manually\n+            // as generics_of doesn't return a parent for the generics\n+            let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+            if let Node::GenericParam(hir::GenericParam {\n+                hir_id: param_id,\n+                kind: hir::GenericParamKind::Const { .. },\n+                ..\n+            }) = tcx.hir().get(tcx.hir().get_parent_node(hir_id))\n+            {\n+                let item_id = tcx.hir().get_parent_node(*param_id);\n+                let item_def_id = tcx.hir().local_def_id(item_id).to_def_id();\n+                return tcx.explicit_predicates_of(item_def_id);\n+            }\n+        }\n         gather_explicit_predicates_of(tcx, def_id)\n     }\n }"}, {"sha": "c2f8525f7aba69574986ef9f2e0f0005c2333499", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b44be27999d26ee5f6712704e5d0535c2ea08e70/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44be27999d26ee5f6712704e5d0535c2ea08e70/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=b44be27999d26ee5f6712704e5d0535c2ea08e70", "patch": "@@ -20,6 +20,22 @@ pub fn provide(providers: &mut Providers) {\n fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate<'_>, Span)] {\n     let id = tcx.hir().local_def_id_to_hir_id(item_def_id.expect_local());\n \n+    if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst) && tcx.lazy_normalization()\n+    {\n+        // Provide inferred outlive preds of parent item of cg defaults manually\n+        // as generics_of doesn't return a parent for the generics\n+        if let Node::GenericParam(hir::GenericParam {\n+            hir_id: param_id,\n+            kind: hir::GenericParamKind::Const { .. },\n+            ..\n+        }) = tcx.hir().get(tcx.hir().get_parent_node(id))\n+        {\n+            let item_id = tcx.hir().get_parent_node(*param_id);\n+            let item_def_id = tcx.hir().local_def_id(item_id).to_def_id();\n+            return tcx.inferred_outlives_of(item_def_id);\n+        }\n+    }\n+\n     match tcx.hir().get(id) {\n         Node::Item(item) => match item.kind {\n             hir::ItemKind::Struct(..) | hir::ItemKind::Enum(..) | hir::ItemKind::Union(..) => {"}, {"sha": "30a01d48c4c8d5b49db44af610d6e9c09d65beb5", "filename": "src/test/ui/const-generics/defaults/cec-build-subst-ice.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b44be27999d26ee5f6712704e5d0535c2ea08e70/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-build-subst-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b44be27999d26ee5f6712704e5d0535c2ea08e70/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-build-subst-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-build-subst-ice.stderr?ref=b44be27999d26ee5f6712704e5d0535c2ea08e70", "patch": "@@ -8,5 +8,14 @@ LL | pub fn foo<const N1: usize>() -> Bar<N1> { loop {} }\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { N + 1 }]:`\n \n-error: aborting due to previous error\n+error: unconstrained generic constant\n+  --> $DIR/cec-build-subst-ice.rs:15:8\n+   |\n+LL | type Alias<T, const N: usize, const NP: usize = {N+1usize}> = [T; NP];\n+   |                                                 ---------- required by this bound in `Alias::{constant#0}`\n+LL | fn alias<T, const N: usize>(_: [T; N], _: T)\n+LL |     -> Alias<T, N>\n+   |        ^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); {N+1usize}]:`\n "}]}