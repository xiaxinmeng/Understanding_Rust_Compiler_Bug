{"sha": "927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyN2M1NWQ4NmIwYmU0NDMzN2YzN2NmNWIwYTc2ZmI4YmE4NmUwNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-13T02:56:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-13T02:56:20Z"}, "message": "Auto merge of #38748 - alexcrichton:upload, r=brson\n\ntravis: Start uploading artifacts on commits\n\nThis commit starts adding the infrastructure for uploading release artifacts\nfrom AppVeyor/Travis on each commit. The idea is that eventually we'll upload a\nfull release to AppVeyor/Travis in accordance with plans [outlined earlier].\n\nRight now this configures Travis/Appveyor to upload all tarballs in the `dist`\ndirectory, and various images are updated to actually produce tarballs in these\ndirectories. These are nowhere near ready to be actual release artifacts, but\nthis should allow us to play around with it and test it out. Once this commit\nlands we should start seeing artifacts uploaded on each commit.\n\n[outlined earlier]: https://internals.rust-lang.org/t/rust-ci-release-infrastructure-changes/4489", "tree": {"sha": "fcf278a8a1516da13d3f9c3cd77a5193f273420d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf278a8a1516da13d3f9c3cd77a5193f273420d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "html_url": "https://github.com/rust-lang/rust/commit/927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a2ed98d344b6cbddc57db8841b42f935877e08d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2ed98d344b6cbddc57db8841b42f935877e08d", "html_url": "https://github.com/rust-lang/rust/commit/1a2ed98d344b6cbddc57db8841b42f935877e08d"}, {"sha": "318767266fece7b0c3f2965d6664b80b7aaa1613", "url": "https://api.github.com/repos/rust-lang/rust/commits/318767266fece7b0c3f2965d6664b80b7aaa1613", "html_url": "https://github.com/rust-lang/rust/commit/318767266fece7b0c3f2965d6664b80b7aaa1613"}], "stats": {"total": 212, "additions": 148, "deletions": 64}, "files": [{"sha": "505795d33e5ff2e069842452fe3ba6c53a15e073", "filename": ".travis.yml", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -13,20 +13,20 @@ osx_image: xcode8.2\n matrix:\n   include:\n     # Linux builders, all docker images\n-    - env: IMAGE=arm-android\n-    - env: IMAGE=cross\n-    - env: IMAGE=dist-arm-unknown-linux-gnueabi\n-    - env: IMAGE=dist-x86_64-unknown-freebsd\n-    - env: IMAGE=i686-gnu\n+    - env: IMAGE=arm-android DEPLOY=1\n+    - env: IMAGE=cross DEPLOY=1\n+    - env: IMAGE=dist-arm-unknown-linux-gnueabi DEPLOY=1\n+    - env: IMAGE=dist-x86_64-unknown-freebsd DEPLOY=1\n+    - env: IMAGE=i686-gnu DEPLOY=1\n     - env: IMAGE=i686-gnu-nopt\n-    - env: IMAGE=x86_64-gnu\n+    - env: IMAGE=x86_64-gnu DEPLOY=1\n     - env: IMAGE=x86_64-gnu-full-bootstrap\n     - env: IMAGE=x86_64-gnu-aux\n     - env: IMAGE=x86_64-gnu-debug\n     - env: IMAGE=x86_64-gnu-nopt\n     - env: IMAGE=x86_64-gnu-make\n     - env: IMAGE=x86_64-gnu-llvm-3.7 ALLOW_PR=1 RUST_BACKTRACE=1\n-    - env: IMAGE=x86_64-musl\n+    - env: IMAGE=x86_64-musl DEPLOY=1\n     - env: IMAGE=x86_64-gnu-distcheck\n \n     # OSX builders\n@@ -39,9 +39,10 @@ matrix:\n         curl -L https://api.pub.build.mozilla.org/tooltool/sha512/d0025b286468cc5ada83b23d3fafbc936b9f190eaa7d4a981715b18e8e3bf720a7bcee7bfe758cfdeb8268857f6098fd52dcdd8818232692a30ce91039936596 |\n           tar xJf - -C /usr/local/bin --strip-components=1\n     - env: >\n-        RUST_CHECK_TARGET=check\n+        SCRIPT=\"./x.py test && ./x.py dist\"\n         RUST_CONFIGURE_ARGS=--build=i686-apple-darwin\n         SRC=.\n+        DEPLOY=1\n       os: osx\n       install: *osx_install_sccache\n     - env: >\n@@ -51,9 +52,10 @@ matrix:\n       os: osx\n       install: *osx_install_sccache\n     - env: >\n-        RUST_CHECK_TARGET=\n+        RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios\n         SRC=.\n+        DEPLOY=1\n       os: osx\n       install: *osx_install_sccache\n \n@@ -91,3 +93,29 @@ notifications:\n cache:\n   directories:\n     - $HOME/docker\n+\n+before_deploy:\n+  - mkdir -p deploy/$TRAVIS_COMMIT\n+  - >\n+      if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n+          cp build/dist/*.tar.gz deploy/$TRAVIS_COMMIT &&\n+          find \"deploy/$TRAVIS_COMMIT\" -maxdepth 1 -type f -exec sh -c 'shasum -a 256 -b \"{}\" > \"{}.sha256\"' \\;;\n+      else\n+          cp obj/build/dist/*.tar.gz deploy/$TRAVIS_COMMIT &&\n+          find \"deploy/$TRAVIS_COMMIT\" -maxdepth 1 -type f -exec sh -c 'sha256sum -b \"{}\" > \"{}.sha256\"' \\;;\n+      fi\n+\n+deploy:\n+  - provider: s3\n+    bucket: rust-lang-ci\n+    skip_cleanup: true\n+    local_dir: deploy\n+    upload_dir: rustc-builds\n+    acl: public_read\n+    region: us-east-1\n+    access_key_id: AKIAIPQVNYF2T3DTYIWQ\n+    secret_access_key:\n+      secure: \"FBqDqOTeIPMu6v/WYPf4CFSlh9rLRZGKVtpLa5KkyuOhXRTrnEzBduEtS8/FMIxdQImvurhSvxWvqRybMOi4qoVfjMqqpHAI7uBbidbrvAcJoHNsx6BgUNVCIoH6a0UsAjTUtm6/YPIpzbHoLZXPL0GrHPMk6Mu04qVSmcYNWn4=\"\n+    on:\n+      branch: auto\n+      condition: $DEPLOY = 1"}, {"sha": "346ef0d8faad722acf081deeb287feb52b786b53", "filename": "appveyor.yml", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -8,10 +8,12 @@ environment:\n   # 32/64 bit MSVC\n   - MSYS_BITS: 64\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n-    RUST_CHECK_TARGET: check\n+    SCRIPT: python x.py test && python x.py dist\n+    DEPLOY: 1\n   - MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n-    RUST_CHECK_TARGET: check\n+    SCRIPT: python x.py test && python x.py dist\n+    DEPLOY: 1\n \n   # MSVC makefiles\n   - MSYS_BITS: 64\n@@ -50,10 +52,11 @@ environment:\n   # too long on appveyor and this is tested by rustbuild below.\n   - MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n-    RUST_CHECK_TARGET: check\n+    SCRIPT: python x.py test && python x.py dist\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n     MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n     MINGW_DIR: mingw32\n+    DEPLOY: 1\n \n   - MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --disable-rustbuild\n@@ -63,11 +66,12 @@ environment:\n     MINGW_DIR: mingw32\n \n   - MSYS_BITS: 64\n-    RUST_CHECK_TARGET: check\n+    SCRIPT: python x.py test && python x.py dist\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n     MINGW_ARCHIVE: x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z\n     MINGW_DIR: mingw64\n+    DEPLOY: 1\n \n clone_depth: 1\n build: false\n@@ -123,6 +127,32 @@ branches:\n   only:\n     - auto\n \n+before_deploy:\n+  - ps: |\n+        New-Item -Path deploy -ItemType directory\n+        Get-ChildItem -Path build\\dist -Filter '*.tar.gz' | Move-Item -Destination deploy\n+        Get-FileHash .\\deploy\\* | ForEach-Object {\n+          [io.file]::WriteAllText($_.Path + \".sha256\", $_.Hash.ToLower() + \"`n\")\n+        }\n+        Get-ChildItem -Path deploy | Foreach-Object {\n+          Push-AppveyorArtifact $_.FullName -FileName ${env:APPVEYOR_REPO_COMMIT}/$_\n+        }\n+\n+deploy:\n+  - provider: S3\n+    skip_cleanup: true\n+    access_key_id: AKIAIPQVNYF2T3DTYIWQ\n+    secret_access_key:\n+      secure: +11jsUNFTQ9dq5Ad1i2+PeUJaXluFJ0zIJAXESE1dFT3Kdjku4/eDdgyjgsB6GnV\n+    bucket: rust-lang-ci\n+    set_public: true\n+    region: us-east-1\n+    artifact: /.*\\.(tar.gz|sha256)/\n+    folder: rustc-builds\n+    on:\n+      branch: auto\n+      DEPLOY: 1\n+\n # init:\n #   - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n # on_finish:"}, {"sha": "cafdd3aec65bd6e43af0886e6c55dff2385fd902", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -457,6 +457,8 @@ fn krate_android(build: &Build,\n \n         let output = output(Command::new(\"adb\").arg(\"shell\").arg(&program));\n         println!(\"{}\", output);\n+\n+        t!(fs::create_dir_all(build.out.join(\"tmp\")));\n         build.run(Command::new(\"adb\")\n                           .arg(\"pull\")\n                           .arg(&log)\n@@ -516,6 +518,7 @@ pub fn android_copy_libs(build: &Build,\n     }\n \n     println!(\"Android copy libs to emulator ({})\", target);\n+    build.run(Command::new(\"adb\").arg(\"wait-for-device\"));\n     build.run(Command::new(\"adb\").arg(\"remount\"));\n     build.run(Command::new(\"adb\").args(&[\"shell\", \"rm\", \"-r\", ADB_TEST_DIR]));\n     build.run(Command::new(\"adb\").args(&[\"shell\", \"mkdir\", ADB_TEST_DIR]));"}, {"sha": "0eeb799672cf200a5406aae656cad80ec16a71fa", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -16,7 +16,6 @@\n //! compiler. This module is also responsible for assembling the sysroot as it\n //! goes along from the output of the previous stage.\n \n-use std::cmp;\n use std::collections::HashMap;\n use std::fs::{self, File};\n use std::path::{Path, PathBuf};\n@@ -59,7 +58,7 @@ pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n     }\n \n     build.run(&mut cargo);\n-    update_mtime(&libstd_stamp(build, &compiler, target));\n+    update_mtime(build, &libstd_stamp(build, &compiler, target));\n }\n \n /// Link all libstd rlibs/dylibs into the sysroot location.\n@@ -145,7 +144,7 @@ pub fn test(build: &Build, target: &str, compiler: &Compiler) {\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/test_shim/Cargo.toml\"));\n     build.run(&mut cargo);\n-    update_mtime(&libtest_stamp(build, compiler, target));\n+    update_mtime(build, &libtest_stamp(build, compiler, target));\n }\n \n /// Same as `std_link`, only for libtest\n@@ -390,26 +389,39 @@ pub fn tool(build: &Build, stage: u32, host: &str, tool: &str) {\n }\n \n /// Updates the mtime of a stamp file if necessary, only changing it if it's\n-/// older than some other file in the same directory.\n+/// older than some other library file in the same directory.\n ///\n /// We don't know what file Cargo is going to output (because there's a hash in\n /// the file name) but we know where it's going to put it. We use this helper to\n /// detect changes to that output file by looking at the modification time for\n /// all files in a directory and updating the stamp if any are newer.\n-fn update_mtime(path: &Path) {\n-    let mut max = None;\n-    if let Ok(entries) = path.parent().unwrap().join(\"deps\").read_dir() {\n-        for entry in entries.map(|e| t!(e)) {\n-            if t!(entry.file_type()).is_file() {\n-                let meta = t!(entry.metadata());\n-                let time = FileTime::from_last_modification_time(&meta);\n-                max = cmp::max(max, Some(time));\n-            }\n-        }\n-    }\n-\n-    if !max.is_none() && max <= Some(mtime(path)) {\n-        return\n+///\n+/// Note that we only consider Rust libraries as that's what we're interested in\n+/// propagating changes from. Files like executables are tracked elsewhere.\n+fn update_mtime(build: &Build, path: &Path) {\n+    let entries = match path.parent().unwrap().join(\"deps\").read_dir() {\n+        Ok(entries) => entries,\n+        Err(_) => return,\n+    };\n+    let files = entries.map(|e| t!(e)).filter(|e| t!(e.file_type()).is_file());\n+    let files = files.filter(|e| {\n+        let filename = e.file_name();\n+        let filename = filename.to_str().unwrap();\n+        filename.ends_with(\".rlib\") ||\n+            filename.ends_with(\".lib\") ||\n+            is_dylib(&filename)\n+    });\n+    let max = files.max_by_key(|entry| {\n+        let meta = t!(entry.metadata());\n+        FileTime::from_last_modification_time(&meta)\n+    });\n+    let max = match max {\n+        Some(max) => max,\n+        None => return,\n+    };\n+\n+    if mtime(&max.path()) > mtime(path) {\n+        build.verbose(&format!(\"updating {:?} as {:?} changed\", path, max.path()));\n+        t!(File::create(path));\n     }\n-    t!(File::create(path));\n }"}, {"sha": "dc45d3817fe308e6ff026a3bf62dac01f8fb66fb", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -357,14 +357,12 @@ pub fn analysis(build: &Build, compiler: &Compiler, target: &str) {\n pub fn rust_src(build: &Build) {\n     println!(\"Dist src\");\n \n-    let plain_name = format!(\"rustc-{}-src\", package_vers(build));\n     let name = format!(\"rust-src-{}\", package_vers(build));\n     let image = tmpdir(build).join(format!(\"{}-image\", name));\n     let _ = fs::remove_dir_all(&image);\n \n     let dst = image.join(\"lib/rustlib/src\");\n     let dst_src = dst.join(\"rust\");\n-    let plain_dst_src = dst.join(&plain_name);\n     t!(fs::create_dir_all(&dst_src));\n \n     // This is the set of root paths which will become part of the source package\n@@ -444,7 +442,11 @@ pub fn rust_src(build: &Build) {\n     build.run(&mut cmd);\n \n     // Rename directory, so that root folder of tarball has the correct name\n-    t!(fs::rename(&dst_src, &plain_dst_src));\n+    let plain_name = format!(\"rustc-{}-src\", package_vers(build));\n+    let plain_dst_src = tmpdir(build).join(&plain_name);\n+    let _ = fs::remove_dir_all(&plain_dst_src);\n+    t!(fs::create_dir_all(&plain_dst_src));\n+    cp_r(&dst_src, &plain_dst_src);\n \n     // Create the version file\n     write_file(&plain_dst_src.join(\"version\"), build.version.as_bytes());\n@@ -453,10 +455,11 @@ pub fn rust_src(build: &Build) {\n     let mut cmd = Command::new(\"tar\");\n     cmd.arg(\"-czf\").arg(sanitize_sh(&rust_src_location(build)))\n        .arg(&plain_name)\n-       .current_dir(&dst);\n+       .current_dir(tmpdir(build));\n     build.run(&mut cmd);\n \n     t!(fs::remove_dir_all(&image));\n+    t!(fs::remove_dir_all(&plain_dst_src));\n }\n \n fn install(src: &Path, dstdir: &Path, perms: u32) {"}, {"sha": "1be823417d765263d9da89c38ffae598a5906c35", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -67,6 +67,7 @@ pub enum Subcommand {\n     },\n     Clean,\n     Dist {\n+        paths: Vec<PathBuf>,\n         install: bool,\n     },\n }\n@@ -249,6 +250,7 @@ To learn more about a subcommand, run `./x.py <command> -h`\n                 opts.optflag(\"\", \"install\", \"run installer as well\");\n                 m = parse(&opts);\n                 Subcommand::Dist {\n+                    paths: remaining_as_path(&m),\n                     install: m.opt_present(\"install\"),\n                 }\n             }"}, {"sha": "65f3d241b491b18f2bf8e02f519966f1edf19956", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -615,7 +615,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .default(true)\n          .only_host_build(true)\n          .run(move |s| dist::analysis(build, &s.compiler(), s.target));\n-    rules.dist(\"install\", \"src\")\n+    rules.dist(\"install\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"default:dist\"))\n          .run(move |s| install::install(build, s.stage, s.target));\n \n@@ -932,11 +932,11 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n             Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n             Subcommand::Test { ref paths, test_args: _ } => (Kind::Test, &paths[..]),\n             Subcommand::Bench { ref paths, test_args: _ } => (Kind::Bench, &paths[..]),\n-            Subcommand::Dist { install } => {\n+            Subcommand::Dist { ref paths, install } => {\n                 if install {\n                     return vec![self.sbuild.name(\"install\")]\n                 } else {\n-                    (Kind::Dist, &[][..])\n+                    (Kind::Dist, &paths[..])\n                 }\n             }\n             Subcommand::Clean => panic!(),"}, {"sha": "e2ef8070b51afb1aedcf19f4187e3cee396c03d0", "filename": "src/ci/docker/arm-android/Dockerfile", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2FDockerfile?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -48,4 +48,9 @@ ENV RUST_CONFIGURE_ARGS \\\n       --armv7-linux-androideabi-ndk=/android/ndk-arm-9 \\\n       --i686-linux-android-ndk=/android/ndk-x86-9 \\\n       --aarch64-linux-android-ndk=/android/ndk-aarch64\n-ENV XPY_CHECK test --target arm-linux-androideabi\n+\n+# Just a smoke test in dist to see if this works for now, we should expand this\n+# to all the targets above eventually.\n+ENV SCRIPT \\\n+  python2.7 ../x.py test --target arm-linux-androideabi && \\\n+  python2.7 ../x.py dist --target arm-linux-androideabi"}, {"sha": "24c477d87f1a72975a3f0fb650d37b3e82dd3f99", "filename": "src/ci/docker/arm-android/start-emulator.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Farm-android%2Fstart-emulator.sh", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Farm-android%2Fstart-emulator.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2Fstart-emulator.sh?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -13,5 +13,4 @@ set -ex\n ANDROID_EMULATOR_FORCE_32BIT=true \\\n   nohup nohup emulator @arm-18 -no-window -partition-size 2047 \\\n   0<&- &>/dev/null &\n-adb wait-for-device\n exec \"$@\""}, {"sha": "6a6cc23698be2dfeb0fd6fd9446190c44d62e141", "filename": "src/ci/docker/cross/Dockerfile", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fcross%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fcross%2FDockerfile?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -56,7 +56,12 @@ ENV TARGETS=$TARGETS,wasm32-unknown-emscripten\n ENV RUST_CONFIGURE_ARGS \\\n       --target=$TARGETS \\\n       --enable-rustbuild\n-ENV RUST_CHECK_TARGET \"\"\n+\n+# Just a smoke test in dist to see if this works for now, we should expand this\n+# to all the targets above eventually.\n+ENV SCRIPT \\\n+  python2.7 ../x.py build && \\\n+  python2.7 ../x.py dist --target wasm32-unknown-emscripten\n \n ENV AR_s390x_unknown_linux_gnu=s390x-linux-gnu-ar \\\n     CC_s390x_unknown_linux_gnu=s390x-linux-gnu-gcc \\"}, {"sha": "841464a42700df563ac165ba9f39e8dc2c0da908", "filename": "src/ci/docker/dist-arm-unknown-linux-gnueabi/Dockerfile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fdist-arm-unknown-linux-gnueabi%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fdist-arm-unknown-linux-gnueabi%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-unknown-linux-gnueabi%2FDockerfile?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -24,7 +24,7 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n ENV RUST_CONFIGURE_ARGS --host=arm-unknown-linux-gnueabi\n-ENV XPY_RUN \\\n-      dist \\\n-      --host arm-unknown-linux-gnueabi \\\n-      --target arm-unknown-linux-gnueabi\n+ENV SCRIPT \\\n+      python2.7 ../x.py dist \\\n+        --host arm-unknown-linux-gnueabi \\\n+        --target arm-unknown-linux-gnueabi"}, {"sha": "44cc57c2662d648ba26521f205814ed1527f53c6", "filename": "src/ci/docker/dist-x86_64-unknown-freebsd/Dockerfile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fdist-x86_64-unknown-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fdist-x86_64-unknown-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-unknown-freebsd%2FDockerfile?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -32,7 +32,7 @@ ENV \\\n     CXX_x86_64_unknown_freebsd=x86_64-unknown-freebsd10-g++\n \n ENV RUST_CONFIGURE_ARGS --host=x86_64-unknown-freebsd\n-ENV XPY_RUN \\\n-      dist \\\n-      --host x86_64-unknown-freebsd \\\n-      --target x86_64-unknown-freebsd\n+ENV SCRIPT \\\n+      python2.7 ../x.py dist \\\n+        --host x86_64-unknown-freebsd \\\n+        --target x86_64-unknown-freebsd"}, {"sha": "6583f09be368c5b2f2da522da01ab61b088d2a24", "filename": "src/ci/docker/i686-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fi686-gnu%2FDockerfile?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -23,4 +23,4 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n ENV RUST_CONFIGURE_ARGS --build=i686-unknown-linux-gnu\n-ENV RUST_CHECK_TARGET check\n+ENV SCRIPT python2.7 ../x.py test && python2.7 ../x.py dist"}, {"sha": "f54e4e562f889f694ea4ee917c911a9638d76819", "filename": "src/ci/docker/x86_64-gnu-debug/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -26,4 +26,4 @@ ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n       --enable-debug \\\n       --enable-optimize\n-ENV RUST_CHECK_TARGET \"\"\n+ENV SCRIPT python2.7 ../x.py build"}, {"sha": "57a2c103f1e7dc91a52d0fd493660fdf577b1edc", "filename": "src/ci/docker/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-distcheck%2FDockerfile?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -23,4 +23,4 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n-ENV XPY_RUN test distcheck\n+ENV SCRIPT python2.7 ../x.py test distcheck"}, {"sha": "206103b92e94df6b037094d34397681c42c3df82", "filename": "src/ci/docker/x86_64-gnu-full-bootstrap/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-full-bootstrap%2FDockerfile?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -25,4 +25,4 @@ ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n       --enable-full-bootstrap\n-ENV RUST_CHECK_TARGET \"\"\n+ENV SCRIPT python2.7 ../x.py build"}, {"sha": "6919487e17c3e6f1a78fa3da13e48a522979e53f", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -23,4 +23,4 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n-ENV RUST_CHECK_TARGET check\n+ENV SCRIPT python2.7 ../x.py test && python2.7 ../x.py dist"}, {"sha": "11b85a6c8fdfb24f58e018fee931cd00027a5584", "filename": "src/ci/docker/x86_64-musl/Dockerfile", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fx86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Fdocker%2Fx86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-musl%2FDockerfile?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -29,6 +29,7 @@ RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST |\n ENV RUST_CONFIGURE_ARGS \\\n       --target=x86_64-unknown-linux-musl \\\n       --musl-root-x86_64=/musl-x86_64\n-ENV RUST_CHECK_TARGET check-stage2-T-x86_64-unknown-linux-musl-H-x86_64-unknown-linux-gnu\n ENV PATH=$PATH:/musl-x86_64/bin\n-ENV XPY_CHECK test --target x86_64-unknown-linux-musl\n+ENV SCRIPT \\\n+      python2.7 ../x.py test --target x86_64-unknown-linux-musl && \\\n+      python2.7 ../x.py dist --target x86_64-unknown-linux-musl"}, {"sha": "737c3622c694e361bd054cea4f8ed3045a13aadd", "filename": "src/ci/run.sh", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/927c55d86b0be44337f37cf5b0a76fb8ba86e06c/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=927c55d86b0be44337f37cf5b0a76fb8ba86e06c", "patch": "@@ -43,14 +43,10 @@ else\n     ncpus=$(nproc)\n fi\n \n-if [ ! -z \"$XPY_RUN\" ]; then\n-  exec python2.7 $SRC/x.py $XPY_RUN\n+if [ ! -z \"$SCRIPT\" ]; then\n+  sh -x -c \"$SCRIPT\"\n else\n   make -j $ncpus tidy\n   make -j $ncpus\n-  if [ ! -z \"$XPY_CHECK\" ]; then\n-    exec python2.7 $SRC/x.py $XPY_CHECK\n-  else\n-    exec make $RUST_CHECK_TARGET -j $ncpus\n-  fi\n+  make $RUST_CHECK_TARGET -j $ncpus\n fi"}]}