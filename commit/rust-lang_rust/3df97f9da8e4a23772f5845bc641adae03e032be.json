{"sha": "3df97f9da8e4a23772f5845bc641adae03e032be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZjk3ZjlkYThlNGEyMzc3MmY1ODQ1YmM2NDFhZGFlMDNlMDMyYmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-29T01:40:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-29T01:40:49Z"}, "message": "Rollup merge of #59401 - japaric:compiler-builtins-stack-sizes, r=alexcrichton\n\nbootstrap: build crates under libtest with -Z emit-stack-sizes\n\nPlease see the comment in the diff for the rationale.\n\nThis change adds a `.stack_sizes` linker section to `libcompiler_builtins.rlib`\nbut this section is discarded by the linker by default so it won't affect the\nbinary size of most programs. It will, however, negatively affect the binary\nsize of programs that link to a recent release of the `cortex-m-rt` crate\nbecause of the linker script that crate provides, but I have proposed a PR\n(rust-embedded/cortex-m-rt#186) to solve the problem (which I originally\nintroduced :-)).\n\nThis change does increase the size of the `libcompiler_builtins.rlib` artifact we\ndistribute but the increase is in the order of (a few) KBs.\n\nr? @alexcrichton", "tree": {"sha": "0f8e70dbf49cec5550bda9b668f4be04b58a4371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f8e70dbf49cec5550bda9b668f4be04b58a4371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3df97f9da8e4a23772f5845bc641adae03e032be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnXehCRBK7hj4Ov3rIwAAdHIIAHGqotxpti0qGpjrCqrgRIzp\nB1Jr/bUX7UzhSw1JY8y33P4D/GhjO0kuLld0jw++FjjhSVT4B23L/kkeVL0/S/2Y\naGIEUGMW9Me8LDNvU3C/J6nv+wLnQsd93Abst5nul4bQHcIn2efgkrlYaiEPsD7x\nQOTAXCkzdxOZ+j4K3+083j7S/D+dITqAzCJyTXq2KIaR4BJw8YZ8y9QWvVyPTpQh\n5yHAvl77EXGcWu4e+wvBDuJNn66kKkLHOsGTQiJ5RER8uJMk0yg7lyG2zfq7cbMo\nf5gVEoldbZ00Dh2/mdjpCUiKgFAcksunpEtAL5XkevascB3fJwEJCgjDFde9OT0=\n=4Nto\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f8e70dbf49cec5550bda9b668f4be04b58a4371\nparent f9262afa4d1a88715ff57907bd17eda4d039cea6\nparent 7d365cf27f4249fc9b61ba8abfc813abe43f1cb7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553823649 +0100\ncommitter GitHub <noreply@github.com> 1553823649 +0100\n\nRollup merge of #59401 - japaric:compiler-builtins-stack-sizes, r=alexcrichton\n\nbootstrap: build crates under libtest with -Z emit-stack-sizes\n\nPlease see the comment in the diff for the rationale.\n\nThis change adds a `.stack_sizes` linker section to `libcompiler_builtins.rlib`\nbut this section is discarded by the linker by default so it won't affect the\nbinary size of most programs. It will, however, negatively affect the binary\nsize of programs that link to a recent release of the `cortex-m-rt` crate\nbecause of the linker script that crate provides, but I have proposed a PR\n(rust-embedded/cortex-m-rt#186) to solve the problem (which I originally\nintroduced :-)).\n\nThis change does increase the size of the `libcompiler_builtins.rlib` artifact we\ndistribute but the increase is in the order of (a few) KBs.\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3df97f9da8e4a23772f5845bc641adae03e032be", "html_url": "https://github.com/rust-lang/rust/commit/3df97f9da8e4a23772f5845bc641adae03e032be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3df97f9da8e4a23772f5845bc641adae03e032be/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9262afa4d1a88715ff57907bd17eda4d039cea6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9262afa4d1a88715ff57907bd17eda4d039cea6", "html_url": "https://github.com/rust-lang/rust/commit/f9262afa4d1a88715ff57907bd17eda4d039cea6"}, {"sha": "7d365cf27f4249fc9b61ba8abfc813abe43f1cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d365cf27f4249fc9b61ba8abfc813abe43f1cb7", "html_url": "https://github.com/rust-lang/rust/commit/7d365cf27f4249fc9b61ba8abfc813abe43f1cb7"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "28c8a75a13ab4a5a94f7e379330b33d79ec736d6", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3df97f9da8e4a23772f5845bc641adae03e032be/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df97f9da8e4a23772f5845bc641adae03e032be/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=3df97f9da8e4a23772f5845bc641adae03e032be", "patch": "@@ -181,6 +181,33 @@ fn main() {\n             cmd.arg(\"-C\").arg(format!(\"debug-assertions={}\", debug_assertions));\n         }\n \n+        // Build all crates in the `std` facade with `-Z emit-stack-sizes` to add stack usage\n+        // information.\n+        //\n+        // When you use this `-Z` flag with Cargo you get stack usage information on all crates\n+        // compiled from source, and when you are using LTO you also get information on pre-compiled\n+        // crates like `core` and `std`, even if they were not compiled with `-Z emit-stack-sizes`.\n+        // However, there's an exception: `compiler_builtins`. This crate is special and doesn't\n+        // participate in LTO because it's always linked as a separate object file. For this reason\n+        // it's impossible to get stack usage information about `compiler-builtins` using\n+        // `RUSTFLAGS` + Cargo, or `cargo rustc`.\n+        //\n+        // To make the stack usage information of all crates under the `std` facade available to\n+        // Cargo based stack usage analysis tools, in both LTO and non-LTO mode, we compile them\n+        // with the `-Z emit-stack-sizes` flag. The `RUSTC_EMIT_STACK_SIZES` var helps us apply this\n+        // flag only to the crates in the `std` facade. The `-Z` flag is known to currently work\n+        // with targets that produce ELF files so we limit its use flag to those targets.\n+        //\n+        // NOTE(japaric) if this ever causes problem with an LLVM upgrade or any PR feel free to\n+        // remove it or comment it out\n+        if env::var_os(\"RUSTC_EMIT_STACK_SIZES\").is_some()\n+            && (target.contains(\"-linux-\")\n+                || target.contains(\"-none-eabi\")\n+                || target.ends_with(\"-none-elf\"))\n+        {\n+            cmd.arg(\"-Zemit-stack-sizes\");\n+        }\n+\n         if let Ok(s) = env::var(\"RUSTC_CODEGEN_UNITS\") {\n             cmd.arg(\"-C\").arg(format!(\"codegen-units={}\", s));\n         }"}, {"sha": "0d51d7c5ef3b8543952bea083da98cd457cbbdbd", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3df97f9da8e4a23772f5845bc641adae03e032be/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3df97f9da8e4a23772f5845bc641adae03e032be/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3df97f9da8e4a23772f5845bc641adae03e032be", "patch": "@@ -97,6 +97,8 @@ impl Step for Std {\n         let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n         builder.info(&format!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target));\n+        // compile with `-Z emit-stack-sizes`; see bootstrap/src/rustc.rs for more details\n+        cargo.env(\"RUSTC_EMIT_STACK_SIZES\", \"1\");\n         run_cargo(builder,\n                   &mut cargo,\n                   &libstd_stamp(builder, compiler, target),\n@@ -382,6 +384,8 @@ impl Step for Test {\n         let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n         builder.info(&format!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target));\n+        // compile with `-Z emit-stack-sizes`; see bootstrap/src/rustc.rs for more details\n+        cargo.env(\"RUSTC_EMIT_STACK_SIZES\", \"1\");\n         run_cargo(builder,\n                   &mut cargo,\n                   &libtest_stamp(builder, compiler, target),"}]}