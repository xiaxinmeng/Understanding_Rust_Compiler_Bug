{"sha": "6750c11df33868ffac07af4c8d4b050331663f5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NTBjMTFkZjMzODY4ZmZhYzA3YWY0YzhkNGIwNTAzMzE2NjNmNWU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-06T23:20:13Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-06T23:20:13Z"}, "message": "Rename a few `crate_def_map`s to `def_map`\n\nThese could all be block `DefMap`s instead of crate-level `DefMap`s", "tree": {"sha": "296a5f2b2aff6f74eb3cc5db851d59bea5cc3889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/296a5f2b2aff6f74eb3cc5db851d59bea5cc3889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6750c11df33868ffac07af4c8d4b050331663f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6750c11df33868ffac07af4c8d4b050331663f5e", "html_url": "https://github.com/rust-lang/rust/commit/6750c11df33868ffac07af4c8d4b050331663f5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6750c11df33868ffac07af4c8d4b050331663f5e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c44575b4857e2d97067afab7df1f98042aa591c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c44575b4857e2d97067afab7df1f98042aa591c4", "html_url": "https://github.com/rust-lang/rust/commit/c44575b4857e2d97067afab7df1f98042aa591c4"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "9ee4b3059b90485d885ffba97a49adcb67e5f926", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6750c11df33868ffac07af4c8d4b050331663f5e/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6750c11df33868ffac07af4c8d4b050331663f5e/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=6750c11df33868ffac07af4c8d4b050331663f5e", "patch": "@@ -365,14 +365,14 @@ impl Module {\n         let _p = profile::span(\"Module::diagnostics\").detail(|| {\n             format!(\"{:?}\", self.name(db).map_or(\"<unknown>\".into(), |name| name.to_string()))\n         });\n-        let crate_def_map = self.id.def_map(db.upcast());\n-        crate_def_map.add_diagnostics(db.upcast(), self.id.local_id, sink);\n+        let def_map = self.id.def_map(db.upcast());\n+        def_map.add_diagnostics(db.upcast(), self.id.local_id, sink);\n         for decl in self.declarations(db) {\n             match decl {\n                 crate::ModuleDef::Function(f) => f.diagnostics(db, sink),\n                 crate::ModuleDef::Module(m) => {\n                     // Only add diagnostics from inline modules\n-                    if crate_def_map[m.id.local_id].origin.is_inline() {\n+                    if def_map[m.id.local_id].origin.is_inline() {\n                         m.diagnostics(db, sink)\n                     }\n                 }"}, {"sha": "16e1bac4028028f8b783ee7f2acd9444d8a588d4", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6750c11df33868ffac07af4c8d4b050331663f5e/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6750c11df33868ffac07af4c8d4b050331663f5e/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=6750c11df33868ffac07af4c8d4b050331663f5e", "patch": "@@ -87,11 +87,11 @@ impl Expander {\n         module: ModuleId,\n     ) -> Expander {\n         let cfg_expander = CfgExpander::new(db, current_file_id, module.krate);\n-        let crate_def_map = module.def_map(db);\n+        let def_map = module.def_map(db);\n         let ast_id_map = db.ast_id_map(current_file_id);\n         Expander {\n             cfg_expander,\n-            def_map: crate_def_map,\n+            def_map,\n             current_file_id,\n             ast_id_map,\n             module: module.local_id,"}, {"sha": "75c2d756bf585580f97ef94a039f20e4e557b9c2", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6750c11df33868ffac07af4c8d4b050331663f5e/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6750c11df33868ffac07af4c8d4b050331663f5e/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=6750c11df33868ffac07af4c8d4b050331663f5e", "patch": "@@ -74,8 +74,8 @@ impl ChildBySource for ImplId {\n \n impl ChildBySource for ModuleId {\n     fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n-        let crate_def_map = self.def_map(db);\n-        let module_data = &crate_def_map[self.local_id];\n+        let def_map = self.def_map(db);\n+        let module_data = &def_map[self.local_id];\n         module_data.scope.child_by_source(db)\n     }\n }"}, {"sha": "77ff21739d71cb4dbdcf35817e378ed048238cc9", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6750c11df33868ffac07af4c8d4b050331663f5e/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6750c11df33868ffac07af4c8d4b050331663f5e/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=6750c11df33868ffac07af4c8d4b050331663f5e", "patch": "@@ -34,7 +34,7 @@ pub struct Resolver {\n // FIXME how to store these best\n #[derive(Debug, Clone)]\n struct ModuleItemMap {\n-    crate_def_map: Arc<DefMap>,\n+    def_map: Arc<DefMap>,\n     module_id: LocalModuleId,\n }\n \n@@ -337,19 +337,19 @@ impl Resolver {\n         let mut traits = FxHashSet::default();\n         for scope in &self.scopes {\n             if let Scope::ModuleScope(m) = scope {\n-                if let Some(prelude) = m.crate_def_map.prelude() {\n+                if let Some(prelude) = m.def_map.prelude() {\n                     let prelude_def_map = prelude.def_map(db);\n                     traits.extend(prelude_def_map[prelude.local_id].scope.traits());\n                 }\n-                traits.extend(m.crate_def_map[m.module_id].scope.traits());\n+                traits.extend(m.def_map[m.module_id].scope.traits());\n             }\n         }\n         traits\n     }\n \n     fn module_scope(&self) -> Option<(&DefMap, LocalModuleId)> {\n         self.scopes.iter().rev().find_map(|scope| match scope {\n-            Scope::ModuleScope(m) => Some((&*m.crate_def_map, m.module_id)),\n+            Scope::ModuleScope(m) => Some((&*m.def_map, m.module_id)),\n \n             _ => None,\n         })\n@@ -413,21 +413,21 @@ impl Scope {\n                 //         def: m.module.into(),\n                 //     }),\n                 // );\n-                m.crate_def_map[m.module_id].scope.entries().for_each(|(name, def)| {\n+                m.def_map[m.module_id].scope.entries().for_each(|(name, def)| {\n                     f(name.clone(), ScopeDef::PerNs(def));\n                 });\n-                m.crate_def_map[m.module_id].scope.legacy_macros().for_each(|(name, macro_)| {\n+                m.def_map[m.module_id].scope.legacy_macros().for_each(|(name, macro_)| {\n                     let scope = PerNs::macros(macro_, Visibility::Public);\n                     seen.insert((name.clone(), scope));\n                     f(name.clone(), ScopeDef::PerNs(scope));\n                 });\n-                m.crate_def_map.extern_prelude().for_each(|(name, &def)| {\n+                m.def_map.extern_prelude().for_each(|(name, &def)| {\n                     f(name.clone(), ScopeDef::PerNs(PerNs::types(def, Visibility::Public)));\n                 });\n                 BUILTIN_SCOPE.iter().for_each(|(name, &def)| {\n                     f(name.clone(), ScopeDef::PerNs(def));\n                 });\n-                if let Some(prelude) = m.crate_def_map.prelude() {\n+                if let Some(prelude) = m.def_map.prelude() {\n                     let prelude_def_map = prelude.def_map(db);\n                     prelude_def_map[prelude.local_id].scope.entries().for_each(|(name, def)| {\n                         let seen_tuple = (name.clone(), def);\n@@ -513,8 +513,8 @@ impl Resolver {\n         self.push_scope(Scope::ImplDefScope(impl_def))\n     }\n \n-    fn push_module_scope(self, crate_def_map: Arc<DefMap>, module_id: LocalModuleId) -> Resolver {\n-        self.push_scope(Scope::ModuleScope(ModuleItemMap { crate_def_map, module_id }))\n+    fn push_module_scope(self, def_map: Arc<DefMap>, module_id: LocalModuleId) -> Resolver {\n+        self.push_scope(Scope::ModuleScope(ModuleItemMap { def_map, module_id }))\n     }\n \n     fn push_expr_scope(\n@@ -534,7 +534,7 @@ impl ModuleItemMap {\n         path: &ModPath,\n     ) -> Option<ResolveValueResult> {\n         let (module_def, idx) =\n-            self.crate_def_map.resolve_path(db, self.module_id, &path, BuiltinShadowMode::Other);\n+            self.def_map.resolve_path(db, self.module_id, &path, BuiltinShadowMode::Other);\n         match idx {\n             None => {\n                 let value = to_value_ns(module_def)?;\n@@ -564,7 +564,7 @@ impl ModuleItemMap {\n         path: &ModPath,\n     ) -> Option<(TypeNs, Option<usize>)> {\n         let (module_def, idx) =\n-            self.crate_def_map.resolve_path(db, self.module_id, &path, BuiltinShadowMode::Other);\n+            self.def_map.resolve_path(db, self.module_id, &path, BuiltinShadowMode::Other);\n         let res = to_type_ns(module_def)?;\n         Some((res, idx))\n     }"}]}