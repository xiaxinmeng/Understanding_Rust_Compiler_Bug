{"sha": "e4810a302b4badb024d22da50cfa4aae64184493", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODEwYTMwMmI0YmFkYjAyNGQyMmRhNTBjZmE0YWFlNjQxODQ0OTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-21T11:42:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-21T11:42:05Z"}, "message": "Merge #2039\n\n2039: Guess macro braces from docs r=matklad a=oxalica\n\nInstead of hard-code `vec` to have snippet with bracket `vec![]`, \r\nwe try to find the \"most common used brace kind\" from documentation of the macro, \r\nwhich usually contains some example code.\r\nIt also works better with extern macros.\r\n\r\nWe can suggest braces for `thread_local! {}` now.\r\n\n\nCo-authored-by: oxalica <oxalicc@pm.me>", "tree": {"sha": "8734d9ff3bc11208169b49f8f3845035b8e4556a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8734d9ff3bc11208169b49f8f3845035b8e4556a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4810a302b4badb024d22da50cfa4aae64184493", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdrZmNCRBK7hj4Ov3rIwAAdHIIAHF+kENztseTMsgg0KrywX4z\nMuZMFZWDxWbwgJ2FHo1OGtrSTrlZZYql2BdSh8GZ+wbYwJ/7fEtPcf/gyncrHs0C\n4ymjzGdKvvElRTg4ApQwkBqIsRdvbtACgRah+0nuTH98JgcoOLK8NuXk45NfYYF4\nquP772fh+Elwd0DrvIh5QyIC5cqmk2ddGsDUiCZJsnO0w4EIQzuZtl+Rz3nMNUGI\nNyANePNR7uPIg6lWb5WUUgGUZ+9Rpk19gDgjwWlGK1qTPVPUZPnd4vewwoVPmpG1\nDt0LidEvSdQfaPK6R9yRiRfcN0Yt3aPWiEqlc4tGifF2eskvb5Fb41c5K4o+L7I=\n=XdC0\n-----END PGP SIGNATURE-----\n", "payload": "tree 8734d9ff3bc11208169b49f8f3845035b8e4556a\nparent f9d060bf442edeba0b3f3f28dbe1e6cb19e6303e\nparent 24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1571658125 +0000\ncommitter GitHub <noreply@github.com> 1571658125 +0000\n\nMerge #2039\n\n2039: Guess macro braces from docs r=matklad a=oxalica\n\nInstead of hard-code `vec` to have snippet with bracket `vec![]`, \r\nwe try to find the \"most common used brace kind\" from documentation of the macro, \r\nwhich usually contains some example code.\r\nIt also works better with extern macros.\r\n\r\nWe can suggest braces for `thread_local! {}` now.\r\n\n\nCo-authored-by: oxalica <oxalicc@pm.me>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4810a302b4badb024d22da50cfa4aae64184493", "html_url": "https://github.com/rust-lang/rust/commit/e4810a302b4badb024d22da50cfa4aae64184493", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4810a302b4badb024d22da50cfa4aae64184493/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d060bf442edeba0b3f3f28dbe1e6cb19e6303e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d060bf442edeba0b3f3f28dbe1e6cb19e6303e", "html_url": "https://github.com/rust-lang/rust/commit/f9d060bf442edeba0b3f3f28dbe1e6cb19e6303e"}, {"sha": "24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f", "url": "https://api.github.com/repos/rust-lang/rust/commits/24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f", "html_url": "https://github.com/rust-lang/rust/commit/24d50ebcd1fabedc8d0c468f8785b0aeb1fb176f"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "09f743c660cb2220b784e47506b040c39dbc9ddb", "filename": "crates/ra_ide_api/src/completion/complete_macro_in_item_position.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e4810a302b4badb024d22da50cfa4aae64184493/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4810a302b4badb024d22da50cfa4aae64184493/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=e4810a302b4badb024d22da50cfa4aae64184493", "patch": "@@ -56,6 +56,16 @@ mod tests {\n             do_reference_completion(\n                 \"\n                 //- /main.rs\n+                /// Creates a [`Vec`] containing the arguments.\n+                ///\n+                /// - Create a [`Vec`] containing a given list of elements:\n+                ///\n+                /// ```\n+                /// let v = vec![1, 2, 3];\n+                /// assert_eq!(v[0], 1);\n+                /// assert_eq!(v[1], 2);\n+                /// assert_eq!(v[2], 3);\n+                /// ```\n                 macro_rules! vec {\n                     () => {}\n                 }\n@@ -68,13 +78,61 @@ mod tests {\n             @r##\"[\n     CompletionItem {\n         label: \"vec!\",\n-        source_range: [46; 46),\n-        delete: [46; 46),\n+        source_range: [280; 280),\n+        delete: [280; 280),\n         insert: \"vec![$0]\",\n         kind: Macro,\n         detail: \"macro_rules! vec\",\n+        documentation: Documentation(\n+            \"Creates a [`Vec`] containing the arguments.\\n\\n- Create a [`Vec`] containing a given list of elements:\\n\\n```\\nlet v = vec![1, 2, 3];\\nassert_eq!(v[0], 1);\\nassert_eq!(v[1], 2);\\nassert_eq!(v[2], 3);\\n```\",\n+        ),\n     },\n ]\"##\n         );\n     }\n+\n+    #[test]\n+    fn completes_macros_braces_guessing() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /main.rs\n+                /// Foo\n+                ///\n+                /// Not call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\n+                /// Call as `let _=foo!  { hello world };`\n+                macro_rules! foo {\n+                    () => {}\n+                }\n+\n+                fn main() {\n+                    <|>\n+                }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"foo!\",\n+        source_range: [163; 163),\n+        delete: [163; 163),\n+        insert: \"foo! {$0}\",\n+        kind: Macro,\n+        detail: \"macro_rules! foo\",\n+        documentation: Documentation(\n+            \"Foo\\n\\nNot call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\\nCall as `let _=foo!  { hello world };`\",\n+        ),\n+    },\n+    CompletionItem {\n+        label: \"main()\",\n+        source_range: [163; 163),\n+        delete: [163; 163),\n+        insert: \"main()$0\",\n+        kind: Function,\n+        lookup: \"main\",\n+        detail: \"fn main()\",\n+    },\n+]\n+        \"###\n+        );\n+    }\n }"}, {"sha": "aed4ce6d44bc8d0655dab72fd2864281f413d297", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e4810a302b4badb024d22da50cfa4aae64184493/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4810a302b4badb024d22da50cfa4aae64184493/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=e4810a302b4badb024d22da50cfa4aae64184493", "patch": "@@ -131,6 +131,33 @@ impl Completions {\n         self.add_function_with_name(ctx, None, func)\n     }\n \n+    fn guess_macro_braces(&self, macro_name: &str, docs: &str) -> &'static str {\n+        let mut votes = [0, 0, 0];\n+        for (idx, s) in docs.match_indices(&macro_name) {\n+            let (before, after) = (&docs[..idx], &docs[idx + s.len()..]);\n+            // Ensure to match the full word\n+            if after.starts_with(\"!\")\n+                && before\n+                    .chars()\n+                    .rev()\n+                    .next()\n+                    .map_or(true, |c| c != '_' && !c.is_ascii_alphanumeric())\n+            {\n+                // It may have spaces before the braces like `foo! {}`\n+                match after[1..].chars().find(|&c| !c.is_whitespace()) {\n+                    Some('{') => votes[0] += 1,\n+                    Some('[') => votes[1] += 1,\n+                    Some('(') => votes[2] += 1,\n+                    _ => {}\n+                }\n+            }\n+        }\n+\n+        // Insert a space before `{}`.\n+        // We prefer the last one when some votes equal.\n+        *votes.iter().zip(&[\" {$0}\", \"[$0]\", \"($0)\"]).max_by_key(|&(&vote, _)| vote).unwrap().1\n+    }\n+\n     pub(crate) fn add_macro(\n         &mut self,\n         ctx: &CompletionContext,\n@@ -141,10 +168,9 @@ impl Completions {\n         if let Some(name) = name {\n             let detail = macro_label(&ast_node);\n \n-            let macro_braces_to_insert = match name.as_str() {\n-                \"vec\" => \"[$0]\",\n-                _ => \"($0)\",\n-            };\n+            let docs = macro_.docs(ctx.db);\n+            let macro_braces_to_insert =\n+                self.guess_macro_braces(&name, docs.as_ref().map_or(\"\", |s| s.as_str()));\n             let macro_declaration = name + \"!\";\n \n             let builder = CompletionItem::new(\n@@ -153,7 +179,7 @@ impl Completions {\n                 &macro_declaration,\n             )\n             .kind(CompletionItemKind::Macro)\n-            .set_documentation(macro_.docs(ctx.db))\n+            .set_documentation(docs)\n             .detail(detail)\n             .insert_snippet(macro_declaration + macro_braces_to_insert);\n "}]}