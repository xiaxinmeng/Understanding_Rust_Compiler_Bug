{"sha": "3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26", "node_id": "C_kwDOAAsO6NoAKDNhMjcxMGNkYjZjYjEwZDViYzVjZmZiYzc1YmU4OTViNmRkMjFlMjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-23T17:23:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-23T17:23:30Z"}, "message": "Don't ICE when computing PointerLike trait when region vars are in param-env", "tree": {"sha": "f9db32e722d8ce25c0ccff1e19fe339ecc749a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9db32e722d8ce25c0ccff1e19fe339ecc749a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26", "html_url": "https://github.com/rust-lang/rust/commit/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b67f8b013890fec98e4a2e72b568731d3a58c1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b67f8b013890fec98e4a2e72b568731d3a58c1f", "html_url": "https://github.com/rust-lang/rust/commit/1b67f8b013890fec98e4a2e72b568731d3a58c1f"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "644bfd33970dc0332b2583fe29d2961253690208", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26", "patch": "@@ -177,14 +177,18 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             return Err(NoSolution);\n         }\n \n-        if goal.predicate.self_ty().has_non_region_infer() {\n+        // The regions of a type don't affect the size of the type\n+        let tcx = ecx.tcx();\n+        // We should erase regions from both the param-env and type, since both\n+        // may have infer regions. Specifically, after canonicalizing and instantiating,\n+        // early bound regions turn into region vars in both the new and old solver.\n+        let key = tcx.erase_regions(goal.param_env.and(goal.predicate.self_ty()));\n+        // But if there are inference variables, we have to wait until it's resolved.\n+        if key.has_non_region_infer() {\n             return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n         }\n \n-        let tcx = ecx.tcx();\n-        let self_ty = tcx.erase_regions(goal.predicate.self_ty());\n-\n-        if let Ok(layout) = tcx.layout_of(goal.param_env.and(self_ty))\n+        if let Ok(layout) = tcx.layout_of(key)\n             && layout.layout.is_pointer_like(&tcx.data_layout)\n         {\n             // FIXME: We could make this faster by making a no-constraints response"}, {"sha": "8bc82b9f54926b0cf62b145e536f153f749de909", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26", "patch": "@@ -967,16 +967,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) {\n         // The regions of a type don't affect the size of the type\n         let tcx = self.tcx();\n-        let self_ty =\n-            tcx.erase_regions(tcx.erase_late_bound_regions(obligation.predicate.self_ty()));\n-\n+        let self_ty = tcx.erase_late_bound_regions(obligation.predicate.self_ty());\n+        // We should erase regions from both the param-env and type, since both\n+        // may have infer regions. Specifically, after canonicalizing and instantiating,\n+        // early bound regions turn into region vars in both the new and old solver.\n+        let key = tcx.erase_regions(obligation.param_env.and(self_ty));\n         // But if there are inference variables, we have to wait until it's resolved.\n-        if self_ty.has_non_region_infer() {\n+        if key.has_non_region_infer() {\n             candidates.ambiguous = true;\n             return;\n         }\n \n-        if let Ok(layout) = tcx.layout_of(obligation.param_env.and(self_ty))\n+        if let Ok(layout) = tcx.layout_of(key)\n             && layout.layout.is_pointer_like(&tcx.data_layout)\n         {\n             candidates.vec.push(BuiltinCandidate { has_nested: false });"}, {"sha": "d0785c887d8955b35f9c6bcf363eec6d13b264e8", "filename": "tests/ui/dyn-star/param-env-infer.current.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/tests%2Fui%2Fdyn-star%2Fparam-env-infer.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/tests%2Fui%2Fdyn-star%2Fparam-env-infer.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fparam-env-infer.current.stderr?ref=3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/param-env-infer.rs:5:12\n+   |\n+LL | #![feature(dyn_star, pointer_like_trait)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/param-env-infer.rs:12:10\n+   |\n+LL |     t as _\n+   |          ^ cannot infer type\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "d0785c887d8955b35f9c6bcf363eec6d13b264e8", "filename": "tests/ui/dyn-star/param-env-infer.next.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fparam-env-infer.next.stderr?ref=3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26", "patch": "@@ -0,0 +1,18 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/param-env-infer.rs:5:12\n+   |\n+LL | #![feature(dyn_star, pointer_like_trait)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/param-env-infer.rs:12:10\n+   |\n+LL |     t as _\n+   |          ^ cannot infer type\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "9039dde5e93e2871bb3cbb3c5b992eed8c91da4d", "filename": "tests/ui/dyn-star/param-env-infer.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/tests%2Fui%2Fdyn-star%2Fparam-env-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26/tests%2Fui%2Fdyn-star%2Fparam-env-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fparam-env-infer.rs?ref=3a2710cdb6cb10d5bc5cffbc75be895b6dd21e26", "patch": "@@ -0,0 +1,16 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+// incremental\n+\n+#![feature(dyn_star, pointer_like_trait)]\n+//~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+use std::fmt::Debug;\n+use std::marker::PointerLike;\n+\n+fn make_dyn_star<'a, T: PointerLike + Debug + 'a>(t: T) -> impl PointerLike + Debug + 'a {\n+    t as _\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}]}