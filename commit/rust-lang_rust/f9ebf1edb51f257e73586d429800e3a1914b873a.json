{"sha": "f9ebf1edb51f257e73586d429800e3a1914b873a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZWJmMWVkYjUxZjI1N2U3MzU4NmQ0Mjk4MDBlM2ExOTE0Yjg3M2E=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-06-22T22:20:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-22T22:20:21Z"}, "message": "Rollup merge of #86523 - LeSeulArtichaut:macros-disambiguators, r=jyn514\n\nImprovements to intra-doc link macro disambiguators\n\nA few small improvements around macro disambiguators:\n- display the link text as it was entered: previously `[macro!()]` would be displayed without the parantheses (fixes #86309)\n- support `!{}` and `![]` as macro disambiguators (fixes #86310)\n\nr? `@jyn514` cc `@Manishearth` `@camelid`", "tree": {"sha": "ad3c893f44259ffc80f95607a224f134eece20aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad3c893f44259ffc80f95607a224f134eece20aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9ebf1edb51f257e73586d429800e3a1914b873a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0mIlCRBK7hj4Ov3rIwAAjzIIAB/RvgR8Gy+TrmWFBq9d12pW\n5yiBHCuSHx/5S6UhM7BXHLXtV5RHkM5tn2XZcvgX8Z6yBwWMS2s0/t3etfb/lueu\nIOZ3NrX3XOXJ9m2Bsok65FQq0lXIr+i9n1USJxsWzF0tf3kQjbPtQlb3ROp++yo5\nTouWyxPF20oF0pPp7zpFWBBrdrSp1Z28Lx5k4KiaM9b2hJevME/XshmxuU7caRJk\nSf1iyNvjNNUHgvklzHfLoZ73wm8G72zDNF0K2dED1GZl9c6cLW5xVjFM1gEbY0yy\nJ6sHLQV1EujKR5hkGHrQAcrT1vmQW2CYDyCtsZYCtkk57i0NxGQhtQkWW1/5ijU=\n=UWc9\n-----END PGP SIGNATURE-----\n", "payload": "tree ad3c893f44259ffc80f95607a224f134eece20aa\nparent 6023ac2c8d10661f7a4f405edf795d956c927620\nparent f387e8c207b47f0da4fcaa675460745ab325f3f8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1624400421 +0200\ncommitter GitHub <noreply@github.com> 1624400421 +0200\n\nRollup merge of #86523 - LeSeulArtichaut:macros-disambiguators, r=jyn514\n\nImprovements to intra-doc link macro disambiguators\n\nA few small improvements around macro disambiguators:\n- display the link text as it was entered: previously `[macro!()]` would be displayed without the parantheses (fixes #86309)\n- support `!{}` and `![]` as macro disambiguators (fixes #86310)\n\nr? `@jyn514` cc `@Manishearth` `@camelid`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ebf1edb51f257e73586d429800e3a1914b873a", "html_url": "https://github.com/rust-lang/rust/commit/f9ebf1edb51f257e73586d429800e3a1914b873a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9ebf1edb51f257e73586d429800e3a1914b873a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6023ac2c8d10661f7a4f405edf795d956c927620", "url": "https://api.github.com/repos/rust-lang/rust/commits/6023ac2c8d10661f7a4f405edf795d956c927620", "html_url": "https://github.com/rust-lang/rust/commit/6023ac2c8d10661f7a4f405edf795d956c927620"}, {"sha": "f387e8c207b47f0da4fcaa675460745ab325f3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f387e8c207b47f0da4fcaa675460745ab325f3f8", "html_url": "https://github.com/rust-lang/rust/commit/f387e8c207b47f0da4fcaa675460745ab325f3f8"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "c7e2ce7401913085b9a3ab273503bd8558142f0b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f9ebf1edb51f257e73586d429800e3a1914b873a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ebf1edb51f257e73586d429800e3a1914b873a/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f9ebf1edb51f257e73586d429800e3a1914b873a", "patch": "@@ -992,9 +992,9 @@ fn preprocess_link<'a>(\n     }\n \n     // Parse and strip the disambiguator from the link, if present.\n-    let (path_str, disambiguator) = match Disambiguator::from_str(&link) {\n-        Ok(Some((d, path))) => (path.trim(), Some(d)),\n-        Ok(None) => (link.trim(), None),\n+    let (disambiguator, path_str, link_text) = match Disambiguator::from_str(&link) {\n+        Ok(Some((d, path, link_text))) => (Some(d), path.trim(), link_text.trim()),\n+        Ok(None) => (None, link.trim(), link.trim()),\n         Err((err_msg, relative_range)) => {\n             // Only report error if we would not have ignored this link. See issue #83859.\n             if !should_ignore_link_with_disambiguators(link) {\n@@ -1012,11 +1012,6 @@ fn preprocess_link<'a>(\n         return None;\n     }\n \n-    // We stripped `()` and `!` when parsing the disambiguator.\n-    // Add them back to be displayed, but not prefix disambiguators.\n-    let link_text =\n-        disambiguator.map(|d| d.display_for(path_str)).unwrap_or_else(|| path_str.to_owned());\n-\n     // Strip generics from the path.\n     let path_str = if path_str.contains(['<', '>'].as_slice()) {\n         match strip_generics_from_path(&path_str) {\n@@ -1046,7 +1041,7 @@ fn preprocess_link<'a>(\n         path_str,\n         disambiguator,\n         extra_fragment: extra_fragment.map(String::from),\n-        link_text,\n+        link_text: link_text.to_owned(),\n     }))\n }\n \n@@ -1554,24 +1549,12 @@ enum Disambiguator {\n }\n \n impl Disambiguator {\n-    /// The text that should be displayed when the path is rendered as HTML.\n-    ///\n-    /// NOTE: `path` is not the original link given by the user, but a name suitable for passing to `resolve`.\n-    fn display_for(&self, path: &str) -> String {\n-        match self {\n-            // FIXME: this will have different output if the user had `m!()` originally.\n-            Self::Kind(DefKind::Macro(MacroKind::Bang)) => format!(\"{}!\", path),\n-            Self::Kind(DefKind::Fn) => format!(\"{}()\", path),\n-            _ => path.to_owned(),\n-        }\n-    }\n-\n-    /// Given a link, parse and return `(disambiguator, path_str)`.\n+    /// Given a link, parse and return `(disambiguator, path_str, link_text)`.\n     ///\n     /// This returns `Ok(Some(...))` if a disambiguator was found,\n     /// `Ok(None)` if no disambiguator was found, or `Err(...)`\n     /// if there was a problem with the disambiguator.\n-    fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n+    fn from_str(link: &str) -> Result<Option<(Self, &str, &str)>, (String, Range<usize>)> {\n         use Disambiguator::{Kind, Namespace as NS, Primitive};\n \n         if let Some(idx) = link.find('@') {\n@@ -1592,18 +1575,20 @@ impl Disambiguator {\n                 \"prim\" | \"primitive\" => Primitive,\n                 _ => return Err((format!(\"unknown disambiguator `{}`\", prefix), 0..idx)),\n             };\n-            Ok(Some((d, &rest[1..])))\n+            Ok(Some((d, &rest[1..], &rest[1..])))\n         } else {\n             let suffixes = [\n                 (\"!()\", DefKind::Macro(MacroKind::Bang)),\n+                (\"!{}\", DefKind::Macro(MacroKind::Bang)),\n+                (\"![]\", DefKind::Macro(MacroKind::Bang)),\n                 (\"()\", DefKind::Fn),\n                 (\"!\", DefKind::Macro(MacroKind::Bang)),\n             ];\n             for (suffix, kind) in suffixes {\n-                if let Some(link) = link.strip_suffix(suffix) {\n+                if let Some(path_str) = link.strip_suffix(suffix) {\n                     // Avoid turning `!` or `()` into an empty string\n-                    if !link.is_empty() {\n-                        return Ok(Some((Kind(kind), link)));\n+                    if !path_str.is_empty() {\n+                        return Ok(Some((Kind(kind), path_str, link)));\n                     }\n                 }\n             }"}, {"sha": "cd4caa6a89416a7b1521eaef0528b21c9816fb2b", "filename": "src/test/rustdoc/intra-doc/macros-disambiguators.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f9ebf1edb51f257e73586d429800e3a1914b873a/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmacros-disambiguators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ebf1edb51f257e73586d429800e3a1914b873a/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmacros-disambiguators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fmacros-disambiguators.rs?ref=f9ebf1edb51f257e73586d429800e3a1914b873a", "patch": "@@ -0,0 +1,25 @@\n+#![crate_name = \"foo\"]\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+//! [foo!()]\n+// @has foo/index.html '//a[@href=\"macro.foo.html\"]' 'foo!()'\n+\n+//! [foo!{}]\n+// @has - '//a[@href=\"macro.foo.html\"]' 'foo!{}'\n+\n+//! [foo![]](foo![])\n+// @has - '//a[@href=\"macro.foo.html\"]' 'foo![]'\n+\n+//! [foo1](foo!())\n+// @has - '//a[@href=\"macro.foo.html\"]' 'foo1'\n+\n+//! [foo2](foo!{})\n+// @has - '//a[@href=\"macro.foo.html\"]' 'foo2'\n+\n+//! [foo3](foo![])\n+// @has - '//a[@href=\"macro.foo.html\"]' 'foo3'\n+\n+#[macro_export]\n+macro_rules! foo {\n+    () => {};\n+}"}]}