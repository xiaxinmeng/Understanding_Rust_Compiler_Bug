{"sha": "7dc211f5cede0a515d7a00bf7f3f908ce97e861c", "node_id": "C_kwDOAAsO6NoAKDdkYzIxMWY1Y2VkZTBhNTE1ZDdhMDBiZjdmM2Y5MDhjZTk3ZTg2MWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-20T15:59:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-20T15:59:53Z"}, "message": "Rollup merge of #108795 - thomcc:x86_64h-target, r=wesleywiser\n\nAdd support for the x86_64h-apple-darwin target\n\nSee https://github.com/rust-lang/compiler-team/issues/599 for MCP.\n\nr? compiler-team\n\nCC `@BlackHoleFox` who recently overhauled the apple target code in `rustc-target`.\n\n## Target Support Checklist\n\n> - A tier 3 target must have a designated developer or developers (the \"target\n>   maintainers\") on record to be CCed when issues arise regarding the target.\n>   (The mechanism to track and CC such developers may evolve over time.)\n\nI'm the designated developer.\n\n> - Targets must use naming consistent with any existing targets; for instance, a\n>   target for the same CPU or OS as an existing Rust target should use the same\n>   name for that CPU or OS. Targets should normally use the same names and\n>   naming conventions as used elsewhere in the broader ecosystem beyond Rust\n>   (such as in other toolchains), unless they have a very good reason to\n>   diverge. Changing the name of a target can be highly disruptive, especially\n>   once the target reaches a higher tier, so getting the name right is important\n>   even for a tier 3 target.\n\nThis uses the same naming conventions used for the other macOS targets (`-apple-darwin`), combined with the convention used by LLVM for the `x86_64h` targets. LLVM's convention matches the architecture name used when invoking various tools such as `lipo`, `arch`, and (IMO) there's not really a compelling reason to depart from it.\n\n> - Target names should not introduce undue confusion or ambiguity unless\n>   absolutely necessary to maintain ecosystem compatibility. For example, if\n>   the name of the target makes people extremely likely to form incorrect\n>   beliefs about what it targets, the name should be changed or augmented to\n>   disambiguate it.\n\nI don't think this is especially likely, although I suppose someone could mistake it for `x86_64-apple-darwin`.\n\n> - If possible, use only letters, numbers, dashes and underscores for the name.\n>   Periods (`.`) are known to cause issues in Cargo.\n\n\ud83d\udc4d\n\n> - Tier 3 targets may have unusual requirements to build or use, but must not\n>   create legal issues or impose onerous legal terms for the Rust project or for\n>   Rust developers or users.\n>   - The target must not introduce license incompatibilities.\n\nIt does not.\n\n> - Anything added to the Rust repository must be under the standard Rust\n>   license (`MIT OR Apache-2.0`).\n\nIt is.\n\n> - The target must not cause the Rust tools or libraries built for any other\n>   host (even when supporting cross-compilation to the target) to depend\n>   on any new dependency less permissive than the Rust licensing policy. This\n>   applies whether the dependency is a Rust crate that would require adding\n>   new license exceptions (as specified by the `tidy` tool in the\n>   rust-lang/rust repository), or whether the dependency is a native library\n>   or binary. In other words, the introduction of the target must not cause a\n>   user installing or running a version of Rust or the Rust tools to be\n>   subject to any new license requirements.\n\nThere are no new dependencies that don't also apply to `x86_64-apple-darwin`.\n\n> - Compiling, linking, and emitting functional binaries, libraries, or other\n>   code for the target (whether hosted on the target itself or cross-compiling\n>   from another target) must not depend on proprietary (non-FOSS) libraries.\n>   Host tools built for the target itself may depend on the ordinary runtime\n>   libraries supplied by the platform and commonly used by other applications\n>   built for the target, but those libraries must not be required for code\n>   generation for the target; cross-compilation to the target must not require\n>   such libraries at all. For instance, `rustc` built for the target may\n>   depend on a common proprietary C runtime library or console output library,\n>   but must not depend on a proprietary code generation library or code\n>   optimization library. Rust's license permits such combinations, but the\n>   Rust project has no interest in maintaining such combinations within the\n>   scope of Rust itself, even at tier 3.\n\nThis has the same requirements as the other macOS targets (e.g. `x86_64-apple-darwin` and similar).\n\n> - \"onerous\" here is an intentionally subjective term. At a minimum, \"onerous\"\n>   legal/licensing terms include but are *not* limited to: non-disclosure\n>   requirements, non-compete requirements, contributor license agreements\n>   (CLAs) or equivalent, \"non-commercial\"/\"research-only\"/etc terms,\n>   requirements conditional on the employer or employment of any particular\n>   Rust developers, revocable terms, any requirements that create liability\n>   for the Rust project or its developers or users, or any requirements that\n>   adversely affect the livelihood or prospects of the Rust project or its\n>   developers or users.\n\nNo change here.\n\n> - Neither this policy nor any decisions made regarding targets shall create any\n>   binding agreement or estoppel by any party. If any member of an approving\n>   Rust team serves as one of the maintainers of a target, or has any legal or\n>   employment requirement (explicit or implicit) that might affect their\n>   decisions regarding a target, they must recuse themselves from any approval\n>   decisions regarding the target's tier status, though they may otherwise\n>   participate in discussions.\n\n\ud83d\udc4d\n\n> - This requirement does not prevent part or all of this policy from being\n>   cited in an explicit contract or work agreement (e.g. to implement or\n>   maintain support for a target). This requirement exists to ensure that a\n>   developer or team responsible for reviewing and approving a target does not\n>   face any legal threats or obligations that would prevent them from freely\n>   exercising their judgment in such approval, even if such judgment involves\n>   subjective matters or goes beyond the letter of these requirements.\n\n\ud83d\udc4d\n\n> - Tier 3 targets should attempt to implement as much of the standard libraries\n>   as possible and appropriate (`core` for most targets, `alloc` for targets\n>   that can support dynamic memory allocation, `std` for targets with an\n>   operating system or equivalent layer of system-provided functionality), but\n>   may leave some code unimplemented (either unavailable or stubbed out as\n>   appropriate), whether because the target makes it impossible to implement or\n>   challenging to implement. The authors of pull requests are not obligated to\n>   avoid calling any portions of the standard library on the basis of a tier 3\n>   target not implementing those portions.\n\nThe standard library tests seem to pass.\n\n> - The target must provide documentation for the Rust community explaining how\n>   to build for the target, using cross-compilation if possible. If the target\n>   supports running binaries, or running tests (even if they do not pass), the\n>   documentation must explain how to run such binaries or tests for the target,\n>   using emulation if possible or dedicated hardware if necessary.\n\nDocumentation is provided.\n\n> - Tier 3 targets must not impose burden on the authors of pull requests, or\n>   other developers in the community, to maintain the target. In particular,\n>   do not post comments (automated or manual) on a PR that derail or suggest a\n>   block on the PR based on a tier 3 target. Do not send automated messages or\n>   notifications (via any medium, including via ``@`)` to a PR author or others\n>   involved with a PR regarding a tier 3 target, unless they have opted into\n>   such messages.\n\nNoted. This target is nearly identical to `x86_64-apple-darwin`, so this is\nunlikely to cause issues anyway.\n\n> - Backlinks such as those generated by the issue/PR tracker when linking to\n>   an issue or PR are not considered a violation of this policy, within\n>   reason. However, such messages (even on a separate repository) must not\n>   generate notifications to anyone involved with a PR who has not requested\n>   such notifications.\n\n\ud83d\udc4d\n\n> - Patches adding or updating tier 3 targets must not break any existing tier 2\n>   or tier 1 target, and must not knowingly break another tier 3 target without\n>   approval of either the compiler team or the maintainers of the other tier 3\n>   target.\n>   - In particular, this may come up when working on closely related targets,\n>     such as variations of the same architecture with different features. Avoid\n>     introducing unconditional uses of features that another variation of the\n>     target may not have; use conditional compilation or runtime detection, as\n>     appropriate, to let each target run code supported by that target.\n\n\ud83d\udc4d", "tree": {"sha": "c3208b16057d661f46f6b2da8df637059968df64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3208b16057d661f46f6b2da8df637059968df64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dc211f5cede0a515d7a00bf7f3f908ce97e861c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQWF5CRBK7hj4Ov3rIwAA4w4IAG78LWCuYW5Zt/qmc1/a/SCf\nBsiHa681gmKEVW6KR07dtBsZrVo4BghFbbOUkYyCuhBoz5DYB5aRMySflkRGnSq3\nHxkCTugzGvyBZI8V/p94fBqJJxfHy4UoUL8Yz5HBzradt8CSINNLPv5gzqlOfDOS\nvA3ICMvAxev3wsHOInBlNy52Cqm1ciwNt/+g0FR5zxptH4zvXg8w40GMv+qelCSu\nUWF6JZPIaU7DHZ3vbITaKfTlIvIJ1ueTFg04qjRNAd27VpruDBjxg3Z1m5ZtGH7m\ns81EvjZtSJWbNRP2vOjkadKXlu3k6b0MvZueIE8ymCBRsdL7skNj6R+hET5cY4w=\n=YRoO\n-----END PGP SIGNATURE-----\n", "payload": "tree c3208b16057d661f46f6b2da8df637059968df64\nparent 791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b\nparent 1c848f22f7dd5daeec9428396121906f3a9e6a85\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682006393 +0200\ncommitter GitHub <noreply@github.com> 1682006393 +0200\n\nRollup merge of #108795 - thomcc:x86_64h-target, r=wesleywiser\n\nAdd support for the x86_64h-apple-darwin target\n\nSee https://github.com/rust-lang/compiler-team/issues/599 for MCP.\n\nr? compiler-team\n\nCC `@BlackHoleFox` who recently overhauled the apple target code in `rustc-target`.\n\n## Target Support Checklist\n\n> - A tier 3 target must have a designated developer or developers (the \"target\n>   maintainers\") on record to be CCed when issues arise regarding the target.\n>   (The mechanism to track and CC such developers may evolve over time.)\n\nI'm the designated developer.\n\n> - Targets must use naming consistent with any existing targets; for instance, a\n>   target for the same CPU or OS as an existing Rust target should use the same\n>   name for that CPU or OS. Targets should normally use the same names and\n>   naming conventions as used elsewhere in the broader ecosystem beyond Rust\n>   (such as in other toolchains), unless they have a very good reason to\n>   diverge. Changing the name of a target can be highly disruptive, especially\n>   once the target reaches a higher tier, so getting the name right is important\n>   even for a tier 3 target.\n\nThis uses the same naming conventions used for the other macOS targets (`-apple-darwin`), combined with the convention used by LLVM for the `x86_64h` targets. LLVM's convention matches the architecture name used when invoking various tools such as `lipo`, `arch`, and (IMO) there's not really a compelling reason to depart from it.\n\n> - Target names should not introduce undue confusion or ambiguity unless\n>   absolutely necessary to maintain ecosystem compatibility. For example, if\n>   the name of the target makes people extremely likely to form incorrect\n>   beliefs about what it targets, the name should be changed or augmented to\n>   disambiguate it.\n\nI don't think this is especially likely, although I suppose someone could mistake it for `x86_64-apple-darwin`.\n\n> - If possible, use only letters, numbers, dashes and underscores for the name.\n>   Periods (`.`) are known to cause issues in Cargo.\n\n\ud83d\udc4d\n\n> - Tier 3 targets may have unusual requirements to build or use, but must not\n>   create legal issues or impose onerous legal terms for the Rust project or for\n>   Rust developers or users.\n>   - The target must not introduce license incompatibilities.\n\nIt does not.\n\n> - Anything added to the Rust repository must be under the standard Rust\n>   license (`MIT OR Apache-2.0`).\n\nIt is.\n\n> - The target must not cause the Rust tools or libraries built for any other\n>   host (even when supporting cross-compilation to the target) to depend\n>   on any new dependency less permissive than the Rust licensing policy. This\n>   applies whether the dependency is a Rust crate that would require adding\n>   new license exceptions (as specified by the `tidy` tool in the\n>   rust-lang/rust repository), or whether the dependency is a native library\n>   or binary. In other words, the introduction of the target must not cause a\n>   user installing or running a version of Rust or the Rust tools to be\n>   subject to any new license requirements.\n\nThere are no new dependencies that don't also apply to `x86_64-apple-darwin`.\n\n> - Compiling, linking, and emitting functional binaries, libraries, or other\n>   code for the target (whether hosted on the target itself or cross-compiling\n>   from another target) must not depend on proprietary (non-FOSS) libraries.\n>   Host tools built for the target itself may depend on the ordinary runtime\n>   libraries supplied by the platform and commonly used by other applications\n>   built for the target, but those libraries must not be required for code\n>   generation for the target; cross-compilation to the target must not require\n>   such libraries at all. For instance, `rustc` built for the target may\n>   depend on a common proprietary C runtime library or console output library,\n>   but must not depend on a proprietary code generation library or code\n>   optimization library. Rust's license permits such combinations, but the\n>   Rust project has no interest in maintaining such combinations within the\n>   scope of Rust itself, even at tier 3.\n\nThis has the same requirements as the other macOS targets (e.g. `x86_64-apple-darwin` and similar).\n\n> - \"onerous\" here is an intentionally subjective term. At a minimum, \"onerous\"\n>   legal/licensing terms include but are *not* limited to: non-disclosure\n>   requirements, non-compete requirements, contributor license agreements\n>   (CLAs) or equivalent, \"non-commercial\"/\"research-only\"/etc terms,\n>   requirements conditional on the employer or employment of any particular\n>   Rust developers, revocable terms, any requirements that create liability\n>   for the Rust project or its developers or users, or any requirements that\n>   adversely affect the livelihood or prospects of the Rust project or its\n>   developers or users.\n\nNo change here.\n\n> - Neither this policy nor any decisions made regarding targets shall create any\n>   binding agreement or estoppel by any party. If any member of an approving\n>   Rust team serves as one of the maintainers of a target, or has any legal or\n>   employment requirement (explicit or implicit) that might affect their\n>   decisions regarding a target, they must recuse themselves from any approval\n>   decisions regarding the target's tier status, though they may otherwise\n>   participate in discussions.\n\n\ud83d\udc4d\n\n> - This requirement does not prevent part or all of this policy from being\n>   cited in an explicit contract or work agreement (e.g. to implement or\n>   maintain support for a target). This requirement exists to ensure that a\n>   developer or team responsible for reviewing and approving a target does not\n>   face any legal threats or obligations that would prevent them from freely\n>   exercising their judgment in such approval, even if such judgment involves\n>   subjective matters or goes beyond the letter of these requirements.\n\n\ud83d\udc4d\n\n> - Tier 3 targets should attempt to implement as much of the standard libraries\n>   as possible and appropriate (`core` for most targets, `alloc` for targets\n>   that can support dynamic memory allocation, `std` for targets with an\n>   operating system or equivalent layer of system-provided functionality), but\n>   may leave some code unimplemented (either unavailable or stubbed out as\n>   appropriate), whether because the target makes it impossible to implement or\n>   challenging to implement. The authors of pull requests are not obligated to\n>   avoid calling any portions of the standard library on the basis of a tier 3\n>   target not implementing those portions.\n\nThe standard library tests seem to pass.\n\n> - The target must provide documentation for the Rust community explaining how\n>   to build for the target, using cross-compilation if possible. If the target\n>   supports running binaries, or running tests (even if they do not pass), the\n>   documentation must explain how to run such binaries or tests for the target,\n>   using emulation if possible or dedicated hardware if necessary.\n\nDocumentation is provided.\n\n> - Tier 3 targets must not impose burden on the authors of pull requests, or\n>   other developers in the community, to maintain the target. In particular,\n>   do not post comments (automated or manual) on a PR that derail or suggest a\n>   block on the PR based on a tier 3 target. Do not send automated messages or\n>   notifications (via any medium, including via ``@`)` to a PR author or others\n>   involved with a PR regarding a tier 3 target, unless they have opted into\n>   such messages.\n\nNoted. This target is nearly identical to `x86_64-apple-darwin`, so this is\nunlikely to cause issues anyway.\n\n> - Backlinks such as those generated by the issue/PR tracker when linking to\n>   an issue or PR are not considered a violation of this policy, within\n>   reason. However, such messages (even on a separate repository) must not\n>   generate notifications to anyone involved with a PR who has not requested\n>   such notifications.\n\n\ud83d\udc4d\n\n> - Patches adding or updating tier 3 targets must not break any existing tier 2\n>   or tier 1 target, and must not knowingly break another tier 3 target without\n>   approval of either the compiler team or the maintainers of the other tier 3\n>   target.\n>   - In particular, this may come up when working on closely related targets,\n>     such as variations of the same architecture with different features. Avoid\n>     introducing unconditional uses of features that another variation of the\n>     target may not have; use conditional compilation or runtime detection, as\n>     appropriate, to let each target run code supported by that target.\n\n\ud83d\udc4d\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc211f5cede0a515d7a00bf7f3f908ce97e861c", "html_url": "https://github.com/rust-lang/rust/commit/7dc211f5cede0a515d7a00bf7f3f908ce97e861c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b", "html_url": "https://github.com/rust-lang/rust/commit/791a7f22e3360bdbbc7fb7dab9f80e19fca4dd2b"}, {"sha": "1c848f22f7dd5daeec9428396121906f3a9e6a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c848f22f7dd5daeec9428396121906f3a9e6a85", "html_url": "https://github.com/rust-lang/rust/commit/1c848f22f7dd5daeec9428396121906f3a9e6a85"}], "stats": {"total": 125, "additions": 120, "deletions": 5}, "files": [{"sha": "4c7f64b20785b10a3717c141a4c54662ee7ab673", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=7dc211f5cede0a515d7a00bf7f3f908ce97e861c", "patch": "@@ -19,6 +19,7 @@ pub enum Arch {\n     I386,\n     I686,\n     X86_64,\n+    X86_64h,\n     X86_64_sim,\n     X86_64_macabi,\n     Arm64_macabi,\n@@ -36,6 +37,7 @@ impl Arch {\n             I386 => \"i386\",\n             I686 => \"i686\",\n             X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+            X86_64h => \"x86_64h\",\n         }\n     }\n \n@@ -44,13 +46,13 @@ impl Arch {\n             Armv7 | Armv7k | Armv7s => \"arm\",\n             Arm64 | Arm64_32 | Arm64_macabi | Arm64_sim => \"aarch64\",\n             I386 | I686 => \"x86\",\n-            X86_64 | X86_64_sim | X86_64_macabi => \"x86_64\",\n+            X86_64 | X86_64_sim | X86_64_macabi | X86_64h => \"x86_64\",\n         })\n     }\n \n     fn target_abi(self) -> &'static str {\n         match self {\n-            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 => \"\",\n+            Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64h => \"\",\n             X86_64_macabi | Arm64_macabi => \"macabi\",\n             // x86_64-apple-ios is a simulator target, even though it isn't\n             // declared that way in the target like the other ones...\n@@ -67,6 +69,10 @@ impl Arch {\n             Arm64_32 => \"apple-s4\",\n             I386 | I686 => \"yonah\",\n             X86_64 | X86_64_sim => \"core2\",\n+            // Note: `core-avx2` is slightly more advanced than `x86_64h`, see\n+            // comments (and disabled features) in `x86_64h_apple_darwin` for\n+            // details.\n+            X86_64h => \"core-avx2\",\n             X86_64_macabi => \"core2\",\n             Arm64_macabi => \"apple-a12\",\n             Arm64_sim => \"apple-a12\",\n@@ -182,8 +188,13 @@ fn deployment_target(var_name: &str) -> Option<(u32, u32)> {\n }\n \n fn macos_default_deployment_target(arch: Arch) -> (u32, u32) {\n-    // Note: Arm64_sim is not included since macOS has no simulator.\n-    if matches!(arch, Arm64 | Arm64_macabi) { (11, 0) } else { (10, 7) }\n+    match arch {\n+        // Note: Arm64_sim is not included since macOS has no simulator.\n+        Arm64 | Arm64_macabi => (11, 0),\n+        // x86_64h-apple-darwin only supports macOS 10.8 and later\n+        X86_64h => (10, 8),\n+        _ => (10, 7),\n+    }\n }\n \n fn macos_deployment_target(arch: Arch) -> (u32, u32) {\n@@ -227,7 +238,7 @@ fn link_env_remove(arch: Arch, os: &'static str) -> StaticCow<[StaticCow<str>]>\n         // of the linking environment that's wrong and reversed.\n         match arch {\n             Armv7 | Armv7k | Armv7s | Arm64 | Arm64_32 | I386 | I686 | X86_64 | X86_64_sim\n-            | Arm64_sim => {\n+            | X86_64h | Arm64_sim => {\n                 cvs![\"MACOSX_DEPLOYMENT_TARGET\"]\n             }\n             X86_64_macabi | Arm64_macabi => cvs![\"IPHONEOS_DEPLOYMENT_TARGET\"],"}, {"sha": "10d38c34919c5cde8d535d6bdc15376c4ca1f562", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=7dc211f5cede0a515d7a00bf7f3f908ce97e861c", "patch": "@@ -1112,6 +1112,7 @@ supported_targets! {\n \n     (\"aarch64-apple-darwin\", aarch64_apple_darwin),\n     (\"x86_64-apple-darwin\", x86_64_apple_darwin),\n+    (\"x86_64h-apple-darwin\", x86_64h_apple_darwin),\n     (\"i686-apple-darwin\", i686_apple_darwin),\n \n     // FIXME(#106649): Remove aarch64-fuchsia in favor of aarch64-unknown-fuchsia"}, {"sha": "54f7490b2c052b8d6d9dd6221e217c591267ba8a", "filename": "compiler/rustc_target/src/spec/x86_64h_apple_darwin.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64h_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64h_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64h_apple_darwin.rs?ref=7dc211f5cede0a515d7a00bf7f3f908ce97e861c", "patch": "@@ -0,0 +1,44 @@\n+use super::apple_base::{macos_llvm_target, opts, Arch};\n+use crate::spec::{Cc, FramePointer, LinkerFlavor, Lld, SanitizerSet};\n+use crate::spec::{StackProbeType, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let arch = Arch::X86_64h;\n+    let mut base = opts(\"macos\", arch);\n+    base.max_atomic_width = Some(128);\n+    base.frame_pointer = FramePointer::Always;\n+    base.add_pre_link_args(LinkerFlavor::Darwin(Cc::Yes, Lld::No), &[\"-m64\"]);\n+    base.stack_probes = StackProbeType::X86;\n+    base.supported_sanitizers =\n+        SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::LEAK | SanitizerSet::THREAD;\n+\n+    // x86_64h is core2-avx without a few of the features which would otherwise\n+    // be guaranteed, so we need to disable those. This imitates clang's logic:\n+    // - https://github.com/llvm/llvm-project/blob/bd1f7c417/clang/lib/Driver/ToolChains/Arch/X86.cpp#L77-L78\n+    // - https://github.com/llvm/llvm-project/blob/bd1f7c417/clang/lib/Driver/ToolChains/Arch/X86.cpp#L133-L141\n+    //\n+    // FIXME: Sadly, turning these off here disables them in such a way that they\n+    // aren't re-enabled by `-Ctarget-cpu=native` (on a machine that has them).\n+    // It would be nice if this were not the case, but fixing it seems tricky\n+    // (and given that the main use-case for this target is for use in universal\n+    // binaries, probably not that important).\n+    base.features = \"-rdrnd,-aes,-pclmul,-rtm,-fsgsbase\".into();\n+    // Double-check that the `cpu` is what we expect (if it's not the list above\n+    // may need updating).\n+    assert_eq!(\n+        base.cpu, \"core-avx2\",\n+        \"you need to adjust the feature list in x86_64h-apple-darwin if you change this\",\n+    );\n+\n+    Target {\n+        // Clang automatically chooses a more specific target based on\n+        // MACOSX_DEPLOYMENT_TARGET. To enable cross-language LTO to work\n+        // correctly, we do too.\n+        llvm_target: macos_llvm_target(arch).into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .into(),\n+        arch: arch.target_arch(),\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".into(), ..base },\n+    }\n+}"}, {"sha": "48efa67191ae945634bf7633d613f3e0a23b3a96", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=7dc211f5cede0a515d7a00bf7f3f908ce97e861c", "patch": "@@ -42,6 +42,7 @@\n     - [wasm64-unknown-unknown](platform-support/wasm64-unknown-unknown.md)\n     - [x86_64-fortanix-unknown-sgx](platform-support/x86_64-fortanix-unknown-sgx.md)\n     - [x86_64-unknown-none](platform-support/x86_64-unknown-none.md)\n+    - [x86_64h-apple-darwin](platform-support/x86_64h-apple-darwin.md)\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)"}, {"sha": "75f97c1fc1edee8a37968bbb48012f745f3cf897", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=7dc211f5cede0a515d7a00bf7f3f908ce97e861c", "patch": "@@ -327,5 +327,6 @@ target | std | host | notes\n `x86_64-uwp-windows-gnu` | \u2713 |  |\n `x86_64-uwp-windows-msvc` | \u2713 |  |\n `x86_64-wrs-vxworks` | ? |  |\n+`x86_64h-apple-darwin` | \u2713 | \u2713 | macOS with late-gen Intel (at least Haswell)\n \n [runs on NVIDIA GPUs]: https://github.com/japaric-archived/nvptx#targets"}, {"sha": "1a6f7bb834cf534169d8752f0024346ac6e93c45", "filename": "src/doc/rustc/src/platform-support/x86_64h-apple-darwin.md", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64h-apple-darwin.md", "raw_url": "https://github.com/rust-lang/rust/raw/7dc211f5cede0a515d7a00bf7f3f908ce97e861c/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64h-apple-darwin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64h-apple-darwin.md?ref=7dc211f5cede0a515d7a00bf7f3f908ce97e861c", "patch": "@@ -0,0 +1,57 @@\n+# `x86_64h-apple-darwin`\n+\n+**Tier: 3**\n+\n+Target for macOS on late-generation `x86_64` Apple chips, usable as the\n+`x86_64h` entry in universal binaries, and equivalent to LLVM's\n+`x86_64h-apple-macosx*` targets.\n+\n+## Target maintainers\n+\n+- Thom Chiovoloni `thom@shift.click` <https://github.com/thomcc>\n+\n+## Requirements\n+\n+This target is an `x86_64` target that only supports Apple's late-gen\n+(Haswell-compatible) Intel chips. It enables a set of target features available\n+on these chips (AVX2 and similar), and MachO binaries built with this target may\n+be used as the `x86_64h` entry in universal binaries (\"fat\" MachO binaries), and\n+will fail to load on machines that do not support this.\n+\n+It should support the full standard library (`std` and `alloc` either with\n+default or user-defined allocators). This target is probably most useful when\n+targetted via cross-compilation (including from `x86_64-apple-darwin`), but if\n+built manually, the host tools work.\n+\n+It is similar to `x86_64-apple-darwin` in nearly all respects, although the\n+minimum supported OS version is slightly higher (it requires 10.8 rather than\n+`x86_64-apple-darwin`'s 10.7).\n+\n+## Building the target\n+\n+Users on Apple targets can build this by adding it to the `target` list in\n+`config.toml`, or with `-Zbuild-std`.\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above), or build your own copy of `core` by using\n+`build-std` or similar.\n+\n+## Testing\n+\n+Code built with this target can be run on the set of Intel macOS machines that\n+support running `x86_64h` binaries (relatively recent Intel macs). The Rust test\n+suite seems to work.\n+\n+## Cross-compilation toolchains and C code\n+\n+Cross-compilation to this target from Apple hosts should generally work without\n+much configuration, so long as XCode and the CommandLineTools are installed.\n+Targetting it from non-Apple hosts is difficult, but no moreso than targetting\n+`x86_64-apple-darwin`.\n+\n+When compiling C code for this target, either the \"`x86_64h-apple-macosx*`\" LLVM\n+targets should be used, or an argument like `-arch x86_64h` should be passed to\n+the C compiler."}]}