{"sha": "e8c803937ce23a6cf74583ad03f9868869c7eea1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YzgwMzkzN2NlMjNhNmNmNzQ1ODNhZDAzZjk4Njg4NjljN2VlYTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-13T23:30:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-13T23:30:13Z"}, "message": "Merge #6544\n\n6544: add suggestion ..Default::default() for remaining struct fields in a constructor r=bnjjj a=bnjjj\n\nI'm not sure I should import `assists` crate inside `completions`, maybe we should move out `FamousDefs` from `assists` ? Let me know :) \r\n\r\nclose #6492\r\n\r\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "fbe7b9be9566169d168c50d035790d3028e3bbe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbe7b9be9566169d168c50d035790d3028e3bbe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8c803937ce23a6cf74583ad03f9868869c7eea1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrxcFCRBK7hj4Ov3rIwAAdHIIAByR5pUXo+WpGsW8WQir7P3S\n0xMa+EnCgnX+aVuXzCr2OtO51rlUBRq7+izs9zLUvfk1PdYHlERZkmCurxAfF0ks\nwibKKT4+HMirjZBGsGp6ny/QOtp8747Ee5+2/BiZCERoQsjzZRkSa0z635h6elrK\n4T6YuorFfN6RRT0zs11dXc4U2ylou9ij+pV8LXGXfvIY6zEJkpLhJKKAmnQntMyJ\nrUP1qUEqrOfgBrrkynIR/xEt11XIx+2elo97Zp95xIA8szcGwEd/dwKvRzqhXqnU\nL1dy5Zwwndcb8TbTXheCXnbyJZM29F3D4I890C/LHlUifETjg81DkMm+k2JMRs0=\n=6loX\n-----END PGP SIGNATURE-----\n", "payload": "tree fbe7b9be9566169d168c50d035790d3028e3bbe9\nparent d1ea9d12fa95d8f8915b44b7a993591fd528d2ba\nparent 9f15de77f92a4f3bdd76039d5a851e608d244c0f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605310213 +0000\ncommitter GitHub <noreply@github.com> 1605310213 +0000\n\nMerge #6544\n\n6544: add suggestion ..Default::default() for remaining struct fields in a constructor r=bnjjj a=bnjjj\n\nI'm not sure I should import `assists` crate inside `completions`, maybe we should move out `FamousDefs` from `assists` ? Let me know :) \r\n\r\nclose #6492\r\n\r\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c803937ce23a6cf74583ad03f9868869c7eea1", "html_url": "https://github.com/rust-lang/rust/commit/e8c803937ce23a6cf74583ad03f9868869c7eea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8c803937ce23a6cf74583ad03f9868869c7eea1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ea9d12fa95d8f8915b44b7a993591fd528d2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ea9d12fa95d8f8915b44b7a993591fd528d2ba", "html_url": "https://github.com/rust-lang/rust/commit/d1ea9d12fa95d8f8915b44b7a993591fd528d2ba"}, {"sha": "9f15de77f92a4f3bdd76039d5a851e608d244c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f15de77f92a4f3bdd76039d5a851e608d244c0f", "html_url": "https://github.com/rust-lang/rust/commit/9f15de77f92a4f3bdd76039d5a851e608d244c0f"}], "stats": {"total": 122, "additions": 118, "deletions": 4}, "files": [{"sha": "715a809789c70f527213d227d0cc5117572ede52", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8c803937ce23a6cf74583ad03f9868869c7eea1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e8c803937ce23a6cf74583ad03f9868869c7eea1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e8c803937ce23a6cf74583ad03f9868869c7eea1", "patch": "@@ -253,6 +253,7 @@ dependencies = [\n name = \"completion\"\n version = \"0.0.0\"\n dependencies = [\n+ \"assists\",\n  \"base_db\",\n  \"expect-test\",\n  \"hir\","}, {"sha": "7bd338e99c750e2a548c22dfadbda13c542a807e", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8c803937ce23a6cf74583ad03f9868869c7eea1/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c803937ce23a6cf74583ad03f9868869c7eea1/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=e8c803937ce23a6cf74583ad03f9868869c7eea1", "patch": "@@ -257,6 +257,12 @@ pub mod convert {\n     }\n }\n \n+pub mod default {\n+    pub trait Default {\n+       fn default() -> Self;\n+    }\n+}\n+\n pub mod iter {\n     pub use self::traits::{collect::IntoIterator, iterator::Iterator};\n     mod traits {\n@@ -327,7 +333,7 @@ pub mod option {\n }\n \n pub mod prelude {\n-    pub use crate::{convert::From, iter::{IntoIterator, Iterator}, option::Option::{self, *}};\n+    pub use crate::{convert::From, iter::{IntoIterator, Iterator}, option::Option::{self, *}, default::Default};\n }\n #[prelude_import]\n pub use prelude::*;\n@@ -345,6 +351,10 @@ pub use prelude::*;\n         self.find_enum(\"core:option:Option\")\n     }\n \n+    pub fn core_default_Default(&self) -> Option<Trait> {\n+        self.find_trait(\"core:default:Default\")\n+    }\n+\n     pub fn core_iter_Iterator(&self) -> Option<Trait> {\n         self.find_trait(\"core:iter:traits:iterator:Iterator\")\n     }"}, {"sha": "3015ec9e0ea4e49bf149c555cd55989fdb77a911", "filename": "crates/completion/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8c803937ce23a6cf74583ad03f9868869c7eea1/crates%2Fcompletion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e8c803937ce23a6cf74583ad03f9868869c7eea1/crates%2Fcompletion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2FCargo.toml?ref=e8c803937ce23a6cf74583ad03f9868869c7eea1", "patch": "@@ -14,6 +14,7 @@ itertools = \"0.9.0\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n \n+assists = { path = \"../assists\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n text_edit = { path = \"../text_edit\", version = \"0.0.0\" }"}, {"sha": "2049b9d0911660e2d253ce44bc887e262e24c1c2", "filename": "crates/completion/src/completions/record.rs", "status": "modified", "additions": 105, "deletions": 3, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/e8c803937ce23a6cf74583ad03f9868869c7eea1/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c803937ce23a6cf74583ad03f9868869c7eea1/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs?ref=e8c803937ce23a6cf74583ad03f9868869c7eea1", "patch": "@@ -1,23 +1,51 @@\n //! Complete fields in record literals and patterns.\n-use crate::{CompletionContext, Completions};\n+use assists::utils::FamousDefs;\n+use syntax::ast::Expr;\n+\n+use crate::{\n+    item::CompletionKind, CompletionContext, CompletionItem, CompletionItemKind, Completions,\n+};\n \n pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let missing_fields = match (ctx.record_pat_syntax.as_ref(), ctx.record_lit_syntax.as_ref()) {\n         (None, None) => return None,\n         (Some(_), Some(_)) => unreachable!(\"A record cannot be both a literal and a pattern\"),\n         (Some(record_pat), _) => ctx.sema.record_pattern_missing_fields(record_pat),\n-        (_, Some(record_lit)) => ctx.sema.record_literal_missing_fields(record_lit),\n+        (_, Some(record_lit)) => {\n+            let ty = ctx.sema.type_of_expr(&Expr::RecordExpr(record_lit.clone()));\n+            let default_trait = FamousDefs(&ctx.sema, ctx.krate).core_default_Default();\n+            let impl_default_trait = default_trait\n+                .and_then(|default_trait| ty.map(|ty| ty.impls_trait(ctx.db, default_trait, &[])))\n+                .unwrap_or(false);\n+\n+            let missing_fields = ctx.sema.record_literal_missing_fields(record_lit);\n+            if impl_default_trait && !missing_fields.is_empty() {\n+                acc.add(\n+                    CompletionItem::new(\n+                        CompletionKind::Snippet,\n+                        ctx.source_range(),\n+                        \"..Default::default()\",\n+                    )\n+                    .insert_text(\"..Default::default()\")\n+                    .kind(CompletionItemKind::Field)\n+                    .build(),\n+                );\n+            }\n+\n+            missing_fields\n+        }\n     };\n \n     for (field, ty) in missing_fields {\n-        acc.add_field(ctx, field, &ty)\n+        acc.add_field(ctx, field, &ty);\n     }\n \n     Some(())\n }\n \n #[cfg(test)]\n mod tests {\n+    use assists::utils::FamousDefs;\n     use expect_test::{expect, Expect};\n \n     use crate::{test_utils::completion_list, CompletionKind};\n@@ -27,6 +55,80 @@ mod tests {\n         expect.assert_eq(&actual);\n     }\n \n+    fn check_snippet(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(\n+            &format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE),\n+            CompletionKind::Snippet,\n+        );\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[test]\n+    fn test_record_literal_field_default() {\n+        let test_code = r#\"\n+struct S { foo: u32, bar: usize }\n+\n+impl core::default::Default for S {\n+    fn default() -> Self {\n+        S {\n+            foo: 0,\n+            bar: 0,\n+        }\n+    }\n+}\n+\n+fn process(f: S) {\n+    let other = S {\n+        foo: 5,\n+        .<|>\n+    };\n+}\n+\"#;\n+        check(\n+            test_code,\n+            expect![[r#\"\n+                fd bar usize\n+            \"#]],\n+        );\n+\n+        check_snippet(\n+            test_code,\n+            expect![[r#\"\n+                fd ..Default::default()\n+                sn pd\n+                sn ppd\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_record_literal_field_without_default() {\n+        let test_code = r#\"\n+struct S { foo: u32, bar: usize }\n+\n+fn process(f: S) {\n+    let other = S {\n+        foo: 5,\n+        .<|>\n+    };\n+}\n+\"#;\n+        check(\n+            test_code,\n+            expect![[r#\"\n+                fd bar usize\n+            \"#]],\n+        );\n+\n+        check_snippet(\n+            test_code,\n+            expect![[r#\"\n+                sn pd\n+                sn ppd\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_record_pattern_field() {\n         check("}]}