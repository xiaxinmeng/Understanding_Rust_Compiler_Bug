{"sha": "c58d749c8079761f20ef0410cbd0816a20694ca0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OGQ3NDljODA3OTc2MWYyMGVmMDQxMGNiZDA4MTZhMjA2OTRjYTA=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-04T07:34:46Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:14:31Z"}, "message": "type flags", "tree": {"sha": "55fb4a82dea49f4d449ccefd0f08064cbddd5b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55fb4a82dea49f4d449ccefd0f08064cbddd5b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c58d749c8079761f20ef0410cbd0816a20694ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c58d749c8079761f20ef0410cbd0816a20694ca0", "html_url": "https://github.com/rust-lang/rust/commit/c58d749c8079761f20ef0410cbd0816a20694ca0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c58d749c8079761f20ef0410cbd0816a20694ca0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3996f6a88c7a4f24b673809aa50897fb2615691", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3996f6a88c7a4f24b673809aa50897fb2615691", "html_url": "https://github.com/rust-lang/rust/commit/f3996f6a88c7a4f24b673809aa50897fb2615691"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "a17984bbe41908d7d2181720b1d84016c44d3b23", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c58d749c8079761f20ef0410cbd0816a20694ca0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c58d749c8079761f20ef0410cbd0816a20694ca0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=c58d749c8079761f20ef0410cbd0816a20694ca0", "patch": "@@ -1141,9 +1141,9 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor<'tcx> {\n         );\n         if t.flags().intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n-        } else if self.tcx.is_some()\n-            && t.flags().intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS)\n+        } else if t.flags().intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS)\n             && self.flags.intersects(TypeFlags::MAY_NEED_DEFAULT_CONST_SUBSTS)\n+            && self.tcx.is_some()\n         {\n             t.super_visit_with(self)\n         } else {\n@@ -1168,24 +1168,25 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor<'tcx> {\n         debug!(\"HasTypeFlagsVisitor: c={:?} c.flags={:?} self.flags={:?}\", c, flags, self.flags);\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n-        } else if self.tcx.is_some()\n-            && flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS)\n+        } else if flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS)\n             && self.flags.intersects(TypeFlags::MAY_NEED_DEFAULT_CONST_SUBSTS)\n+            && self.tcx.is_some()\n         {\n             c.super_visit_with(self)\n         } else {\n             ControlFlow::CONTINUE\n         }\n     }\n \n+    #[inline]\n     fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_unevaluated_const(uv);\n         debug!(\"HasTypeFlagsVisitor: uv={:?} uv.flags={:?} self.flags={:?}\", uv, flags, self.flags);\n         if flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n-        } else if self.tcx.is_some()\n-            && flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS)\n+        } else if flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS)\n             && self.flags.intersects(TypeFlags::MAY_NEED_DEFAULT_CONST_SUBSTS)\n+            && self.tcx.is_some()\n         {\n             uv.super_visit_with(self)\n         } else {\n@@ -1201,9 +1202,9 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor<'tcx> {\n         );\n         if predicate.inner.flags.intersects(self.flags) {\n             ControlFlow::Break(FoundFlags)\n-        } else if self.tcx.is_some()\n-            && predicate.inner.flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS)\n+        } else if predicate.inner.flags.intersects(TypeFlags::HAS_UNKNOWN_DEFAULT_CONST_SUBSTS)\n             && self.flags.intersects(TypeFlags::MAY_NEED_DEFAULT_CONST_SUBSTS)\n+            && self.tcx.is_some()\n         {\n             predicate.super_visit_with(self)\n         } else {"}]}