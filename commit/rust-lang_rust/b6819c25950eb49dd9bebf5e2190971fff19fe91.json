{"sha": "b6819c25950eb49dd9bebf5e2190971fff19fe91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODE5YzI1OTUwZWI0OWRkOWJlYmY1ZTIxOTA5NzFmZmYxOWZlOTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-05T10:16:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-05T10:16:45Z"}, "message": "Merge pull request #3451 from edwin0cheng/fix-mbe-composited\n\nFix mbe composited token bug", "tree": {"sha": "79cb455a1ef804708cd7216b71a358695980bda3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79cb455a1ef804708cd7216b71a358695980bda3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6819c25950eb49dd9bebf5e2190971fff19fe91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeYNGNCRBK7hj4Ov3rIwAAdHIIACwoYWBihGGMze91E1EiTC1G\nwhuj4+QIVCsNd0UQ8nhuv5SOhsJ7u2lYDkm17UVaGU3gTlpkYp+XXPzo1xLBLMEx\n1nGz6ZB/7b9yhjd3XHOAV7HjZ5287+Ry9CAlVKqULJ6M+nDj1c5LehCfCPkrgynj\n5AZ4UKBF9BycK1cJNTSmvqK8kGEvjnJr2L/x/uTymY0E2NPLwm7LDmCofqwh7wOe\nL6yQCC69au7HBirLBCnS46shGSsqbivfw9GMBefF8I3JCNhDPeMI2MsTjHhfW6kB\nG91g7zbYcGEkW1VkAWECq0yDJaixQ9k7v/yCslRI4K6osCD1f1zJOwh3wlUAL70=\n=9tzR\n-----END PGP SIGNATURE-----\n", "payload": "tree 79cb455a1ef804708cd7216b71a358695980bda3\nparent 9c906bd60a251c2f537000f90ea708186d8c97f6\nparent 0c79e1d304d2498abfceefec4d5907b187596c6a\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1583403405 +0100\ncommitter GitHub <noreply@github.com> 1583403405 +0100\n\nMerge pull request #3451 from edwin0cheng/fix-mbe-composited\n\nFix mbe composited token bug"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6819c25950eb49dd9bebf5e2190971fff19fe91", "html_url": "https://github.com/rust-lang/rust/commit/b6819c25950eb49dd9bebf5e2190971fff19fe91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6819c25950eb49dd9bebf5e2190971fff19fe91/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c906bd60a251c2f537000f90ea708186d8c97f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c906bd60a251c2f537000f90ea708186d8c97f6", "html_url": "https://github.com/rust-lang/rust/commit/9c906bd60a251c2f537000f90ea708186d8c97f6"}, {"sha": "0c79e1d304d2498abfceefec4d5907b187596c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c79e1d304d2498abfceefec4d5907b187596c6a", "html_url": "https://github.com/rust-lang/rust/commit/0c79e1d304d2498abfceefec4d5907b187596c6a"}], "stats": {"total": 131, "additions": 122, "deletions": 9}, "files": [{"sha": "a5b50a832b1b365858153679de55653fb19db54b", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=b6819c25950eb49dd9bebf5e2190971fff19fe91", "patch": "@@ -266,7 +266,7 @@ mod tests {\n             BuiltinDeriveExpander::Copy,\n         );\n \n-        assert_eq!(expanded, \"impl <>std::marker::CopyforFoo <>{}\");\n+        assert_eq!(expanded, \"impl< >std::marker::CopyforFoo< >{}\");\n     }\n \n     #[test]"}, {"sha": "b2c8a911f03333f95db659d4d6bf6b0c18f5cbff", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=b6819c25950eb49dd9bebf5e2190971fff19fe91", "patch": "@@ -367,7 +367,7 @@ mod tests {\n             \"#,\n         );\n \n-        assert_eq!(expanded, \"std::option::Option::None:: <&str>\");\n+        assert_eq!(expanded, \"std::option::Option::None:: < &str>\");\n     }\n \n     #[test]\n@@ -414,7 +414,7 @@ mod tests {\n \n         assert_eq!(\n             expanded,\n-            r#\"std::fmt::Arguments::new_v1(&[] ,&[std::fmt::ArgumentV1::new(&(arg1(a,b,c)),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(arg2),std::fmt::Display::fmt),])\"#\n+            r#\"std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(arg1(a,b,c)),std::fmt::Display::fmt),std::fmt::ArgumentV1::new(&(arg2),std::fmt::Display::fmt),])\"#\n         );\n     }\n }"}, {"sha": "f3a84cacc34f02c701eedb06072912c1714b40ec", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=b6819c25950eb49dd9bebf5e2190971fff19fe91", "patch": "@@ -176,10 +176,20 @@ pub(crate) fn parse_macro(\n                 MacroCallId::LazyMacro(id) => {\n                     let loc: MacroCallLoc = db.lookup_intern_macro(id);\n                     let node = loc.kind.node(db);\n+\n+                    // collect parent information for warning log\n+                    let parents = std::iter::successors(loc.kind.file_id().call_node(db), |it| {\n+                        it.file_id.call_node(db)\n+                    })\n+                    .map(|n| format!(\"{:#}\", n.value))\n+                    .collect::<Vec<_>>()\n+                    .join(\"\\n\");\n+\n                     log::warn!(\n-                        \"fail on macro_parse: (reason: {} macro_call: {:#})\",\n+                        \"fail on macro_parse: (reason: {} macro_call: {:#}) parents: {}\",\n                         err,\n-                        node.value\n+                        node.value,\n+                        parents\n                     );\n                 }\n                 _ => {"}, {"sha": "ffba03898a8537f72f32d1cb1367a4f9051f1821", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=b6819c25950eb49dd9bebf5e2190971fff19fe91", "patch": "@@ -155,6 +155,60 @@ impl<'a> TtIter<'a> {\n         ok\n     }\n \n+    pub(crate) fn expect_tt(&mut self) -> Result<tt::TokenTree, ()> {\n+        let tt = self.next().ok_or_else(|| ())?.clone();\n+        let punct = match tt {\n+            tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) if punct.spacing == tt::Spacing::Joint => {\n+                punct\n+            }\n+            _ => return Ok(tt),\n+        };\n+\n+        let (second, third) = match (self.peek_n(0), self.peek_n(1)) {\n+            (\n+                Some(tt::TokenTree::Leaf(tt::Leaf::Punct(p2))),\n+                Some(tt::TokenTree::Leaf(tt::Leaf::Punct(p3))),\n+            ) if p2.spacing == tt::Spacing::Joint => (p2.char, Some(p3.char)),\n+            (Some(tt::TokenTree::Leaf(tt::Leaf::Punct(p2))), _) => (p2.char, None),\n+            _ => return Ok(tt),\n+        };\n+\n+        match (punct.char, second, third) {\n+            ('.', '.', Some('.'))\n+            | ('.', '.', Some('='))\n+            | ('<', '<', Some('='))\n+            | ('>', '>', Some('=')) => {\n+                let tt2 = self.next().unwrap().clone();\n+                let tt3 = self.next().unwrap().clone();\n+                Ok(tt::Subtree { delimiter: None, token_trees: vec![tt, tt2, tt3] }.into())\n+            }\n+            ('-', '=', None)\n+            | ('-', '>', None)\n+            | (':', ':', None)\n+            | ('!', '=', None)\n+            | ('.', '.', None)\n+            | ('*', '=', None)\n+            | ('/', '=', None)\n+            | ('&', '&', None)\n+            | ('&', '=', None)\n+            | ('%', '=', None)\n+            | ('^', '=', None)\n+            | ('+', '=', None)\n+            | ('<', '<', None)\n+            | ('<', '=', None)\n+            | ('=', '=', None)\n+            | ('=', '>', None)\n+            | ('>', '=', None)\n+            | ('>', '>', None)\n+            | ('|', '=', None)\n+            | ('|', '|', None) => {\n+                let tt2 = self.next().unwrap().clone();\n+                Ok(tt::Subtree { delimiter: None, token_trees: vec![tt.clone(), tt2] }.into())\n+            }\n+            _ => Ok(tt),\n+        }\n+    }\n+\n     pub(crate) fn expect_lifetime(&mut self) -> Result<&tt::Ident, ()> {\n         let ident = self.expect_ident()?;\n         // check if it start from \"`\"\n@@ -302,7 +356,7 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> Result<Option<Fragment>, Ex\n                     let ident = input.expect_ident().map_err(|()| err!(\"expected ident\"))?.clone();\n                     tt::Leaf::from(ident).into()\n                 }\n-                \"tt\" => input.next().ok_or_else(|| err!())?.clone(),\n+                \"tt\" => input.expect_tt().map_err(|()| err!())?.clone(),\n                 \"lifetime\" => {\n                     let ident = input.expect_lifetime().map_err(|()| err!())?;\n                     tt::Leaf::Ident(ident.clone()).into()"}, {"sha": "d8ee74faaaf8060f9835d63ed5edfafe4980df2a", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=b6819c25950eb49dd9bebf5e2190971fff19fe91", "patch": "@@ -388,11 +388,12 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n             return;\n         }\n \n+        let mut last = self.cursor;\n         for _ in 0..n_tokens {\n             if self.cursor.eof() {\n                 break;\n             }\n-\n+            last = self.cursor;\n             let text: SmolStr = match self.cursor.token_tree() {\n                 Some(tt::TokenTree::Leaf(leaf)) => {\n                     // Mark the range if needed\n@@ -441,11 +442,11 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n         self.inner.token(kind, text);\n \n         // Add whitespace between adjoint puncts\n-        let next = self.cursor.bump();\n+        let next = last.bump();\n         if let (\n             Some(tt::TokenTree::Leaf(tt::Leaf::Punct(curr))),\n             Some(tt::TokenTree::Leaf(tt::Leaf::Punct(_))),\n-        ) = (self.cursor.token_tree(), next.token_tree())\n+        ) = (last.token_tree(), next.token_tree())\n         {\n             if curr.spacing == tt::Spacing::Alone {\n                 self.inner.token(WHITESPACE, \" \".into());"}, {"sha": "304867881d8ab7caabc76bceceee854982bd3eb6", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=b6819c25950eb49dd9bebf5e2190971fff19fe91", "patch": "@@ -825,6 +825,50 @@ fn test_tt_group() {\n     )\n     .assert_expand_items(r#\"foo! { fn foo() {} }\"#, r#\"fn foo () {}\"#);\n }\n+\n+#[test]\n+fn test_tt_composite() {\n+    parse_macro(\n+        r#\"\n+            macro_rules! foo {\n+                 ($i:tt) => { 0 }\n+            }\n+    \"#,\n+    )\n+    .assert_expand_items(r#\"foo! { => }\"#, r#\"0\"#);\n+}\n+\n+#[test]\n+fn test_tt_composite2() {\n+    let node = parse_macro(\n+        r#\"\n+            macro_rules! foo {\n+                ($($tt:tt)*) => { abs!(=> $($tt)*) }\n+            }\n+    \"#,\n+    )\n+    .expand_items(r#\"foo!{#}\"#);\n+\n+    let res = format!(\"{:#?}\", &node);\n+    assert_eq_text!(\n+        res.trim(),\n+        r###\"MACRO_ITEMS@[0; 10)\n+  MACRO_CALL@[0; 10)\n+    PATH@[0; 3)\n+      PATH_SEGMENT@[0; 3)\n+        NAME_REF@[0; 3)\n+          IDENT@[0; 3) \"abs\"\n+    EXCL@[3; 4) \"!\"\n+    TOKEN_TREE@[4; 10)\n+      L_PAREN@[4; 5) \"(\"\n+      EQ@[5; 6) \"=\"\n+      R_ANGLE@[6; 7) \">\"\n+      WHITESPACE@[7; 8) \" \"\n+      POUND@[8; 9) \"#\"\n+      R_PAREN@[9; 10) \")\"\"###\n+    );\n+}\n+\n #[test]\n fn test_lifetime() {\n     parse_macro("}, {"sha": "100184e66af69072127f393f4468302d3c071d15", "filename": "crates/ra_mbe/src/tt_iter.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_mbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6819c25950eb49dd9bebf5e2190971fff19fe91/crates%2Fra_mbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_iter.rs?ref=b6819c25950eb49dd9bebf5e2190971fff19fe91", "patch": "@@ -53,6 +53,10 @@ impl<'a> TtIter<'a> {\n             _ => Err(()),\n         }\n     }\n+\n+    pub(crate) fn peek_n(&self, n: usize) -> Option<&tt::TokenTree> {\n+        self.inner.as_slice().get(n)\n+    }\n }\n \n impl<'a> Iterator for TtIter<'a> {"}]}