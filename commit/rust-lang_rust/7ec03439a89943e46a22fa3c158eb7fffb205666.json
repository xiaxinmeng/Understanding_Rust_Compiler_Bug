{"sha": "7ec03439a89943e46a22fa3c158eb7fffb205666", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYzAzNDM5YTg5OTQzZTQ2YTIyZmEzYzE1OGViN2ZmZmIyMDU2NjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-10T15:59:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-10T15:59:49Z"}, "message": "Merge #7627\n\n7627: infer: update resolver when descending into block r=jonas-schievink a=jonas-schievink\n\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "2a9098516877f68242a6d8c7c8fb8bbfd615e19e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a9098516877f68242a6d8c7c8fb8bbfd615e19e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec03439a89943e46a22fa3c158eb7fffb205666", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJAL1CRBK7hj4Ov3rIwAAdHIIAAuThLT0+AiInvEioPg+vTyw\nHnZUc0fLe+wRxHJO5B3ykY0TiF7+AV4dj2E6WRcAX+7XARNMePfDrsYxAyGBe4tt\nuZu//3wKYZuLkku78I+fiPPywNBDonwjMEhpqjmEFs3sjSzW/PDQ+Idv4BI1hRhs\nEaYdpkcFvQxn7XxXv19RijRhQRqd/xHEVlmBXumqpPCgATzInVHu5eF3oqsP+2fS\naFqV6r7R0vRTtIg9WIM5vc8jlA6+IWMrQcwfrjrawZMo8urOuGTcuirgLRndEAMf\nrIPmbo1R+3IduUcRotuXeLdQ94FeKqXavXCEI5iCHwgayzMqu/UW4Wlw/DMh+oo=\n=fku1\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a9098516877f68242a6d8c7c8fb8bbfd615e19e\nparent 82a1b91f205ac9c3d397b2bea033639f5df9e6b6\nparent 3c5734712a074a5bb3100dbec8b690e60b5beac0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612972789 +0000\ncommitter GitHub <noreply@github.com> 1612972789 +0000\n\nMerge #7627\n\n7627: infer: update resolver when descending into block r=jonas-schievink a=jonas-schievink\n\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec03439a89943e46a22fa3c158eb7fffb205666", "html_url": "https://github.com/rust-lang/rust/commit/7ec03439a89943e46a22fa3c158eb7fffb205666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec03439a89943e46a22fa3c158eb7fffb205666/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82a1b91f205ac9c3d397b2bea033639f5df9e6b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/82a1b91f205ac9c3d397b2bea033639f5df9e6b6", "html_url": "https://github.com/rust-lang/rust/commit/82a1b91f205ac9c3d397b2bea033639f5df9e6b6"}, {"sha": "3c5734712a074a5bb3100dbec8b690e60b5beac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5734712a074a5bb3100dbec8b690e60b5beac0", "html_url": "https://github.com/rust-lang/rust/commit/3c5734712a074a5bb3100dbec8b690e60b5beac0"}], "stats": {"total": 171, "additions": 139, "deletions": 32}, "files": [{"sha": "1c1423fbfefe89a4b54eca103b1802fae6fb6214", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7ec03439a89943e46a22fa3c158eb7fffb205666/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec03439a89943e46a22fa3c158eb7fffb205666/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=7ec03439a89943e46a22fa3c158eb7fffb205666", "patch": "@@ -1495,6 +1495,20 @@ fn main(f: Foo) {\n         );\n     }\n \n+    #[test]\n+    fn internal_or() {\n+        check_diagnostics(\n+            r#\"\n+fn main() {\n+    enum Either { A(bool), B }\n+    match Either::B {\n+        //^^^^^^^^^ Missing match arm\n+        Either::A(true | false) => (),\n+    }\n+}\n+\"#,\n+        );\n+    }\n     mod false_negatives {\n         //! The implementation of match checking here is a work in progress. As we roll this out, we\n         //! prefer false negatives to false positives (ideally there would be no false positives). This\n@@ -1518,21 +1532,6 @@ fn main() {\n         11..20 => (),\n     }\n }\n-\"#,\n-            );\n-        }\n-\n-        #[test]\n-        fn internal_or() {\n-            // We do not currently handle patterns with internal `or`s.\n-            check_diagnostics(\n-                r#\"\n-fn main() {\n-    enum Either { A(bool), B }\n-    match Either::B {\n-        Either::A(true | false) => (),\n-    }\n-}\n \"#,\n             );\n         }"}, {"sha": "cb59a69374725ebf1dcc1aa8ca758bbaf7f6490b", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7ec03439a89943e46a22fa3c158eb7fffb205666/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec03439a89943e46a22fa3c158eb7fffb205666/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=7ec03439a89943e46a22fa3c158eb7fffb205666", "patch": "@@ -137,24 +137,33 @@ impl<'a> InferenceContext<'a> {\n \n                 self.coerce_merge_branch(&then_ty, &else_ty)\n             }\n-            Expr::Block { statements, tail, label, id: _ } => match label {\n-                Some(_) => {\n-                    let break_ty = self.table.new_type_var();\n-                    self.breakables.push(BreakableContext {\n-                        may_break: false,\n-                        break_ty: break_ty.clone(),\n-                        label: label.map(|label| self.body[label].name.clone()),\n-                    });\n-                    let ty = self.infer_block(statements, *tail, &Expectation::has_type(break_ty));\n-                    let ctxt = self.breakables.pop().expect(\"breakable stack broken\");\n-                    if ctxt.may_break {\n-                        ctxt.break_ty\n-                    } else {\n-                        ty\n+            Expr::Block { statements, tail, label, id: _ } => {\n+                let old_resolver = mem::replace(\n+                    &mut self.resolver,\n+                    resolver_for_expr(self.db.upcast(), self.owner, tgt_expr),\n+                );\n+                let ty = match label {\n+                    Some(_) => {\n+                        let break_ty = self.table.new_type_var();\n+                        self.breakables.push(BreakableContext {\n+                            may_break: false,\n+                            break_ty: break_ty.clone(),\n+                            label: label.map(|label| self.body[label].name.clone()),\n+                        });\n+                        let ty =\n+                            self.infer_block(statements, *tail, &Expectation::has_type(break_ty));\n+                        let ctxt = self.breakables.pop().expect(\"breakable stack broken\");\n+                        if ctxt.may_break {\n+                            ctxt.break_ty\n+                        } else {\n+                            ty\n+                        }\n                     }\n-                }\n-                None => self.infer_block(statements, *tail, expected),\n-            },\n+                    None => self.infer_block(statements, *tail, expected),\n+                };\n+                self.resolver = old_resolver;\n+                ty\n+            }\n             Expr::Unsafe { body } | Expr::Const { body } => self.infer_expr(*body, expected),\n             Expr::TryBlock { body } => {\n                 let _inner = self.infer_expr(*body, expected);"}, {"sha": "20ceb74151b06028a6c64e001a89cc1f1eac5b33", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7ec03439a89943e46a22fa3c158eb7fffb205666/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec03439a89943e46a22fa3c158eb7fffb205666/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=7ec03439a89943e46a22fa3c158eb7fffb205666", "patch": "@@ -2415,3 +2415,50 @@ fn infer_const_params() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn infer_inner_type() {\n+    check_infer(\n+        r#\"\n+        fn foo() {\n+            struct S { field: u32 }\n+            let s = S { field: 0 };\n+            let f = s.field;\n+        }\n+    \"#,\n+        expect![[r#\"\n+            9..89 '{     ...eld; }': ()\n+            47..48 's': S\n+            51..65 'S { field: 0 }': S\n+            62..63 '0': u32\n+            75..76 'f': u32\n+            79..80 's': S\n+            79..86 's.field': u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn infer_nested_inner_type() {\n+    check_infer(\n+        r#\"\n+        fn foo() {\n+            {\n+                let s = S { field: 0 };\n+                let f = s.field;\n+            }\n+            struct S { field: u32 }\n+        }\n+    \"#,\n+        expect![[r#\"\n+            9..109 '{     ...32 } }': ()\n+            15..79 '{     ...     }': ()\n+            29..30 's': S\n+            33..47 'S { field: 0 }': S\n+            44..45 '0': u32\n+            61..62 'f': u32\n+            65..66 's': S\n+            65..72 's.field': u32\n+        \"#]],\n+    );\n+}"}, {"sha": "e030f4a97edadafefffbb6e758fbe8275b202575", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7ec03439a89943e46a22fa3c158eb7fffb205666/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec03439a89943e46a22fa3c158eb7fffb205666/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=7ec03439a89943e46a22fa3c158eb7fffb205666", "patch": "@@ -3151,3 +3151,54 @@ fn test() {\n     \"#,\n     );\n }\n+\n+#[test]\n+fn inner_use() {\n+    check_types(\n+        r#\"\n+mod m {\n+    pub trait Tr {\n+        fn method(&self) -> u8 { 0 }\n+    }\n+\n+    impl Tr for () {}\n+}\n+\n+fn f() {\n+    use m::Tr;\n+\n+    ().method();\n+  //^^^^^^^^^^^ u8\n+}\n+        \"#,\n+    );\n+}\n+\n+#[test]\n+fn inner_use_in_block() {\n+    check_types(\n+        r#\"\n+mod m {\n+    pub trait Tr {\n+        fn method(&self) -> u8 { 0 }\n+    }\n+\n+    impl Tr for () {}\n+}\n+\n+fn f() {\n+    {\n+        use m::Tr;\n+\n+        ().method();\n+      //^^^^^^^^^^^ u8\n+    }\n+\n+    {\n+        ().method();\n+      //^^^^^^^^^^^ {unknown}\n+    }\n+}\n+        \"#,\n+    );\n+}"}, {"sha": "42d0a38e8d5fe7b1819ed35cf8dcae2f645b74bc", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ec03439a89943e46a22fa3c158eb7fffb205666/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec03439a89943e46a22fa3c158eb7fffb205666/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=7ec03439a89943e46a22fa3c158eb7fffb205666", "patch": "@@ -654,6 +654,7 @@ fn main() {\n     let test = \"test\";\n       //^^^^ &str\n     let test = InnerStruct {};\n+      //^^^^ InnerStruct\n \n     let test = unresolved();\n "}]}