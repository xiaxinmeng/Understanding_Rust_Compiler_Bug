{"sha": "a0441754121a264dc1a216c189b455c830042f7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNDQxNzU0MTIxYTI2NGRjMWEyMTZjMTg5YjQ1NWM4MzAwNDJmN2Y=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-13T16:50:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-13T16:50:19Z"}, "message": "Simplify", "tree": {"sha": "5292a81dfb7afe7dfb9d426574f3fbebe5560044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5292a81dfb7afe7dfb9d426574f3fbebe5560044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0441754121a264dc1a216c189b455c830042f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0441754121a264dc1a216c189b455c830042f7f", "html_url": "https://github.com/rust-lang/rust/commit/a0441754121a264dc1a216c189b455c830042f7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0441754121a264dc1a216c189b455c830042f7f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef4b2cb7b84c45286b505512082273ccca41c57", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef4b2cb7b84c45286b505512082273ccca41c57", "html_url": "https://github.com/rust-lang/rust/commit/1ef4b2cb7b84c45286b505512082273ccca41c57"}], "stats": {"total": 177, "additions": 91, "deletions": 86}, "files": [{"sha": "28b21fc5b8f642ffc60d087d0152caffb91dd511", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 51, "deletions": 43, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -410,52 +410,60 @@ impl<'a> TyLoweringContext<'a> {\n     ) -> (Ty, Option<TypeNs>) {\n         let ty = match resolution {\n             TypeNs::TraitId(trait_) => {\n-                let ty = if remaining_segments.len() == 1 {\n-                    let trait_ref =\n-                        self.lower_trait_ref_from_resolved_path(trait_, resolved_segment, None);\n-                    let segment = remaining_segments.first().unwrap();\n-                    let found = self\n-                        .db\n-                        .trait_data(trait_ref.hir_trait_id())\n-                        .associated_type_by_name(segment.name);\n-                    match found {\n-                        Some(associated_ty) => {\n-                            // FIXME handle type parameters on the segment\n-                            TyKind::Alias(AliasTy::Projection(ProjectionTy {\n-                                associated_ty_id: to_assoc_type_id(associated_ty),\n-                                substitution: trait_ref.substitution,\n-                            }))\n-                            .intern(&Interner)\n-                        }\n-                        None => {\n-                            // FIXME: report error (associated type not found)\n-                            TyKind::Error.intern(&Interner)\n+                let ty = match remaining_segments.len() {\n+                    1 => {\n+                        let trait_ref =\n+                            self.lower_trait_ref_from_resolved_path(trait_, resolved_segment, None);\n+                        let segment = remaining_segments.first().unwrap();\n+                        let found = self\n+                            .db\n+                            .trait_data(trait_ref.hir_trait_id())\n+                            .associated_type_by_name(segment.name);\n+                        match found {\n+                            Some(associated_ty) => {\n+                                // FIXME handle type parameters on the segment\n+                                TyKind::Alias(AliasTy::Projection(ProjectionTy {\n+                                    associated_ty_id: to_assoc_type_id(associated_ty),\n+                                    substitution: trait_ref.substitution,\n+                                }))\n+                                .intern(&Interner)\n+                            }\n+                            None => {\n+                                // FIXME: report error (associated type not found)\n+                                TyKind::Error.intern(&Interner)\n+                            }\n                         }\n                     }\n-                } else if remaining_segments.len() > 1 {\n-                    // FIXME report error (ambiguous associated type)\n-                    TyKind::Error.intern(&Interner)\n-                } else {\n-                    let self_ty = Some(\n-                        TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n-                            .intern(&Interner),\n-                    );\n-                    let trait_ref = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n-                        ctx.lower_trait_ref_from_resolved_path(trait_, resolved_segment, self_ty)\n-                    });\n-                    let dyn_ty = DynTy {\n-                        bounds: crate::make_only_type_binders(\n-                            1,\n-                            QuantifiedWhereClauses::from_iter(\n-                                &Interner,\n-                                Some(crate::wrap_empty_binders(WhereClause::Implemented(\n-                                    trait_ref,\n-                                ))),\n+                    0 => {\n+                        let self_ty = Some(\n+                            TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n+                                .intern(&Interner),\n+                        );\n+                        let trait_ref = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n+                            ctx.lower_trait_ref_from_resolved_path(\n+                                trait_,\n+                                resolved_segment,\n+                                self_ty,\n+                            )\n+                        });\n+                        let dyn_ty = DynTy {\n+                            bounds: crate::make_only_type_binders(\n+                                1,\n+                                QuantifiedWhereClauses::from_iter(\n+                                    &Interner,\n+                                    Some(crate::wrap_empty_binders(WhereClause::Implemented(\n+                                        trait_ref,\n+                                    ))),\n+                                ),\n                             ),\n-                        ),\n-                        lifetime: static_lifetime(),\n-                    };\n-                    TyKind::Dyn(dyn_ty).intern(&Interner)\n+                            lifetime: static_lifetime(),\n+                        };\n+                        TyKind::Dyn(dyn_ty).intern(&Interner)\n+                    }\n+                    _ => {\n+                        // FIXME report error (ambiguous associated type)\n+                        TyKind::Error.intern(&Interner)\n+                    }\n                 };\n                 return (ty, None);\n             }"}, {"sha": "c88a8b6535888e0a472056b21c70468376294165", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -697,7 +697,7 @@ fn iterate_trait_method_candidates(\n             }\n             known_implemented = true;\n             // FIXME: we shouldn't be ignoring the binders here\n-            callback(&self_ty, *item)?\n+            callback(self_ty, *item)?\n         }\n     }\n     ControlFlow::Continue(())\n@@ -773,7 +773,7 @@ fn iterate_inherent_methods(\n                     cov_mark::hit!(impl_self_type_match_without_receiver);\n                     continue;\n                 }\n-                let receiver_ty = receiver_ty.unwrap_or(&self_ty);\n+                let receiver_ty = receiver_ty.unwrap_or(self_ty);\n                 callback(receiver_ty, item)?;\n             }\n         }"}, {"sha": "2b1f3d1633e563dcb62e0040f9d09b963be5fe19", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -167,7 +167,7 @@ impl Assists {\n             None\n         };\n \n-        let label = Label::new(label.into());\n+        let label = Label::new(label);\n         let group = group.cloned();\n         self.buf.push(Assist { id, label, group, target, source_change });\n         Some(())"}, {"sha": "497e7c2546d0d0e0436d2fb1c7f579dbbc421e0e", "filename": "crates/ide_assists/src/handlers/convert_bool_then.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -198,7 +198,7 @@ fn option_variants(\n     sema: &Semantics<RootDatabase>,\n     expr: &SyntaxNode,\n ) -> Option<(hir::Variant, hir::Variant)> {\n-    let fam = FamousDefs(&sema, sema.scope(expr).krate());\n+    let fam = FamousDefs(sema, sema.scope(expr).krate());\n     let option_variants = fam.core_option_Option()?.variants(sema.db);\n     match &*option_variants {\n         &[variant0, variant1] => Some(if variant0.name(sema.db) == known::None {\n@@ -224,7 +224,7 @@ fn is_invalid_body(\n         invalid\n     });\n     if !invalid {\n-        for_each_tail_expr(&expr, &mut |e| {\n+        for_each_tail_expr(expr, &mut |e| {\n             if invalid {\n                 return;\n             }"}, {"sha": "bb0382e15f93e276e5011b41cf3c36d533cebd9f", "filename": "crates/ide_assists/src/handlers/convert_tuple_struct_to_named_struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_tuple_struct_to_named_struct.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -110,7 +110,9 @@ fn edit_struct_def(\n         } else {\n             edit.insert(tuple_fields_text_range.start(), ast::make::tokens::single_space().text());\n         }\n-        strukt.semicolon_token().map(|t| edit.delete(t.text_range()));\n+        if let Some(t) = strukt.semicolon_token() {\n+            edit.delete(t.text_range());\n+        }\n     } else {\n         edit.insert(tuple_fields_text_range.start(), ast::make::tokens::single_space().text());\n     }"}, {"sha": "6a07136cc89ba1fc043aea81b5de130f2e649440", "filename": "crates/ide_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -227,14 +227,12 @@ fn find_imported_defs(ctx: &AssistContext, star: SyntaxToken) -> Option<Vec<Def>\n     Some(\n         [Direction::Prev, Direction::Next]\n             .iter()\n-            .map(|dir| {\n+            .flat_map(|dir| {\n                 parent_use_item_syntax\n                     .siblings(dir.to_owned())\n                     .filter(|n| ast::Use::can_cast(n.kind()))\n             })\n-            .flatten()\n-            .filter_map(|n| Some(n.descendants().filter_map(ast::NameRef::cast)))\n-            .flatten()\n+            .flat_map(|n| n.descendants().filter_map(ast::NameRef::cast))\n             .filter_map(|r| match NameRefClass::classify(&ctx.sema, &r)? {\n                 NameRefClass::Definition(Definition::ModuleDef(def)) => Some(Def::ModuleDef(def)),\n                 NameRefClass::Definition(Definition::Macro(def)) => Some(Def::MacroDef(def)),"}, {"sha": "c0cf3fac039dbd8ef4c42dad3ea9fa56951c90b8", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -885,12 +885,9 @@ fn reference_is_exclusive(\n \n /// checks if this expr requires `&mut` access, recurses on field access\n fn expr_require_exclusive_access(ctx: &AssistContext, expr: &ast::Expr) -> Option<bool> {\n-    match expr {\n-        ast::Expr::MacroCall(_) => {\n-            // FIXME: expand macro and check output for mutable usages of the variable?\n-            return None;\n-        }\n-        _ => (),\n+    if let ast::Expr::MacroCall(_) = expr {\n+        // FIXME: expand macro and check output for mutable usages of the variable?\n+        return None;\n     }\n \n     let parent = expr.syntax().parent()?;"}, {"sha": "3bc347b1e2e6ca121acc306784ede1fc697df6af", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -231,7 +231,7 @@ fn create_struct_def(\n     let variant_attrs = attrs_and_docs(variant.syntax())\n         .map(|tok| match tok.kind() {\n             WHITESPACE => make::tokens::single_newline().into(),\n-            _ => tok.into(),\n+            _ => tok,\n         })\n         .collect();\n     ted::insert_all(Position::first_child_of(strukt.syntax()), variant_attrs);\n@@ -251,12 +251,14 @@ fn update_variant(variant: &ast::Variant, generic: Option<ast::GenericParamList>\n         Some(gpl) => {\n             let gpl = gpl.clone_for_update();\n             gpl.generic_params().for_each(|gp| {\n-                match gp {\n+                let tbl = match gp {\n                     ast::GenericParam::LifetimeParam(it) => it.type_bound_list(),\n                     ast::GenericParam::TypeParam(it) => it.type_bound_list(),\n                     ast::GenericParam::ConstParam(_) => return,\n+                };\n+                if let Some(tbl) = tbl {\n+                    tbl.remove();\n                 }\n-                .map(|it| it.remove());\n             });\n             make::ty(&format!(\"{}<{}>\", name.text(), gpl.generic_params().join(\", \")))\n         }"}, {"sha": "9398b84b3fc85e4dea1517824dce1fa853ab2970", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n             if let Anchor::Replace(stmt) = anchor {\n                 cov_mark::hit!(test_extract_var_expr_stmt);\n                 if stmt.semicolon_token().is_none() {\n-                    buf.push_str(\";\");\n+                    buf.push(';');\n                 }\n                 match ctx.config.snippet_cap {\n                     Some(cap) => {\n@@ -92,7 +92,7 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 return;\n             }\n \n-            buf.push_str(\";\");\n+            buf.push(';');\n \n             // We want to maintain the indent level,\n             // but we do not want to duplicate possible"}, {"sha": "55c5c46e695f3be65b9f3f63ad31b000b5116cf7", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -109,7 +109,7 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n     let function_builder = FunctionBuilder::from_call(ctx, &call, &path, target_module, target)?;\n     let text_range = call.syntax().text_range();\n-    let label = format!(\"Generate {} function\", function_builder.fn_name.clone());\n+    let label = format!(\"Generate {} function\", function_builder.fn_name);\n     add_func_to_accumulator(\n         acc,\n         ctx,\n@@ -139,7 +139,7 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         FunctionBuilder::from_method_call(ctx, &call, &fn_name, target_module, target)?;\n     let text_range = call.syntax().text_range();\n     let adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n-    let label = format!(\"Generate {} method\", function_builder.fn_name.clone());\n+    let label = format!(\"Generate {} method\", function_builder.fn_name);\n     add_func_to_accumulator(\n         acc,\n         ctx,\n@@ -369,7 +369,7 @@ fn make_return_type(\n             }\n         }\n     };\n-    let ret_type = ret_ty.map(|rt| make::ret_type(rt));\n+    let ret_type = ret_ty.map(make::ret_type);\n     (ret_type, should_focus_return_type)\n }\n \n@@ -386,7 +386,7 @@ fn get_fn_target(\n             file = in_file;\n             target\n         }\n-        None => next_space_for_fn_after_call_site(FuncExpr::Func(call.clone()))?,\n+        None => next_space_for_fn_after_call_site(FuncExpr::Func(call))?,\n     };\n     Some((target.clone(), file, get_insert_offset(&target)))\n }\n@@ -397,7 +397,7 @@ fn get_method_target(\n     impl_: &Option<ast::Impl>,\n ) -> Option<(GeneratedFunctionTarget, TextSize)> {\n     let target = match impl_ {\n-        Some(impl_) => next_space_for_fn_in_impl(&impl_)?,\n+        Some(impl_) => next_space_for_fn_in_impl(impl_)?,\n         None => {\n             next_space_for_fn_in_module(ctx.sema.db, &target_module.definition_source(ctx.sema.db))?\n                 .1\n@@ -448,7 +448,7 @@ fn fn_args(\n         });\n         arg_types.push(match fn_arg_type(ctx, target_module, &arg) {\n             Some(ty) => {\n-                if ty.len() > 0 && ty.starts_with('&') {\n+                if !ty.is_empty() && ty.starts_with('&') {\n                     if let Some((new_ty, _)) = useless_type_special_case(\"\", &ty[1..].to_owned()) {\n                         new_ty\n                     } else {"}, {"sha": "33e029c236f228af3e539ea478fb2d6566573a65", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -199,7 +199,7 @@ pub(crate) fn inline_(\n                             .sema\n                             .type_of_expr(&expr)\n                             .filter(TypeInfo::has_adjustment)\n-                            .and_then(|_| param_ty);\n+                            .and(param_ty);\n                         body.push_front(\n                             make::let_stmt(pat, ty, Some(expr)).clone_for_update().into(),\n                         )"}, {"sha": "8077f73d1ea36f019b334c185433debfcfe63626", "filename": "crates/ide_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -77,7 +77,7 @@ fn generate_fn_def_assist(\n             })\n             .collect();\n         match fn_params_without_lifetime.len() {\n-            1 => Some(fn_params_without_lifetime.into_iter().nth(0)?),\n+            1 => Some(fn_params_without_lifetime.into_iter().next()?),\n             0 => None,\n             // multiple unnnamed is invalid. assist is not applicable\n             _ => return None,\n@@ -93,8 +93,9 @@ fn generate_fn_def_assist(\n             make::lifetime_param(new_lifetime_param.clone()).clone_for_update().into(),\n         );\n         ted::replace(lifetime.syntax(), new_lifetime_param.clone_for_update().syntax());\n-        loc_needing_lifetime\n-            .map(|position| ted::insert(position, new_lifetime_param.clone_for_update().syntax()));\n+        if let Some(position) = loc_needing_lifetime {\n+            ted::insert(position, new_lifetime_param.clone_for_update().syntax());\n+        }\n     })\n }\n "}, {"sha": "acd0829570c3a8081c3eec4ab1b3e1e0181516e7", "filename": "crates/ide_assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -35,7 +35,7 @@ pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             if matches!(value, Cow::Borrowed(_)) {\n                 // Avoid replacing the whole string to better position the cursor.\n                 edit.insert(token.syntax().text_range().start(), format!(\"r{}\", hashes));\n-                edit.insert(token.syntax().text_range().end(), format!(\"{}\", hashes));\n+                edit.insert(token.syntax().text_range().end(), hashes);\n             } else {\n                 edit.replace(\n                     token.syntax().text_range(),"}, {"sha": "75b9f827d7ae7de1e9d722e3bea208e6a10bffe3", "filename": "crates/ide_assists/src/handlers/remove_unused_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -137,7 +137,7 @@ fn process_usage(\n         return Some(range_to_remove(arg.syntax()));\n     }\n \n-    return None;\n+    None\n }\n \n fn range_to_remove(node: &SyntaxNode) -> TextRange {"}, {"sha": "96a8c783929c2df17f17871bc423a2b073f5c26d", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -126,15 +126,15 @@ fn make_else_arm(\n     if let Some(else_block) = else_block {\n         let pattern = if let [(Either::Left(pat), _)] = conditionals {\n             ctx.sema\n-                .type_of_pat(&pat)\n+                .type_of_pat(pat)\n                 .and_then(|ty| TryEnum::from_ty(&ctx.sema, &ty.adjusted()))\n                 .zip(Some(pat))\n         } else {\n             None\n         };\n         let pattern = match pattern {\n             Some((it, pat)) => {\n-                if does_pat_match_variant(&pat, &it.sad_pattern()) {\n+                if does_pat_match_variant(pat, &it.sad_pattern()) {\n                     it.happy_pattern()\n                 } else {\n                     it.sad_pattern()\n@@ -144,7 +144,7 @@ fn make_else_arm(\n         };\n         make::match_arm(iter::once(pattern), None, unwrap_trivial_block(else_block))\n     } else {\n-        make::match_arm(iter::once(make::wildcard_pat().into()), None, make::expr_unit().into())\n+        make::match_arm(iter::once(make::wildcard_pat().into()), None, make::expr_unit())\n     }\n }\n \n@@ -257,7 +257,7 @@ fn is_empty_expr(expr: &ast::Expr) -> bool {\n }\n \n fn binds_name(sema: &hir::Semantics<RootDatabase>, pat: &ast::Pat) -> bool {\n-    let binds_name_v = |pat| binds_name(&sema, &pat);\n+    let binds_name_v = |pat| binds_name(sema, &pat);\n     match pat {\n         ast::Pat::IdentPat(pat) => !matches!(\n             pat.name().and_then(|name| NameClass::classify(sema, &name)),"}, {"sha": "47600be763801eca39909d66affb5307d072dd0d", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -141,10 +141,7 @@ fn path_eq_no_generics(lhs: ast::Path, rhs: ast::Path) -> bool {\n                     && lhs\n                         .name_ref()\n                         .zip(rhs.name_ref())\n-                        .map_or(false, |(lhs, rhs)| lhs.text() == rhs.text()) =>\n-            {\n-                ()\n-            }\n+                        .map_or(false, |(lhs, rhs)| lhs.text() == rhs.text()) => {}\n             _ => return false,\n         }\n "}, {"sha": "4da6089cacc1e5b087677a72b55217c9da995a88", "filename": "crates/ide_assists/src/handlers/toggle_ignore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ftoggle_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ftoggle_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ftoggle_ignore.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -33,7 +33,7 @@ pub(crate) fn toggle_ignore(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n             AssistId(\"toggle_ignore\", AssistKind::None),\n             \"Ignore this test\",\n             attr.syntax().text_range(),\n-            |builder| builder.insert(attr.syntax().text_range().end(), &format!(\"\\n#[ignore]\")),\n+            |builder| builder.insert(attr.syntax().text_range().end(), \"\\n#[ignore]\"),\n         ),\n         Some(ignore_attr) => acc.add(\n             AssistId(\"toggle_ignore\", AssistKind::None),"}, {"sha": "b03a029f8ade04c222962e55eccefc4c4855a6ab", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0441754121a264dc1a216c189b455c830042f7f/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=a0441754121a264dc1a216c189b455c830042f7f", "patch": "@@ -130,7 +130,7 @@ impl ProcMacroServer {\n                 .into_iter()\n                 .map(|(name, kind)| ProcMacro {\n                     process: self.process.clone(),\n-                    name: name.into(),\n+                    name,\n                     kind,\n                     dylib_path: dylib.path.clone(),\n                 })"}]}