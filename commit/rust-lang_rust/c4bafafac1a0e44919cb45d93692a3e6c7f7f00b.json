{"sha": "c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "node_id": "C_kwDOAAsO6NoAKGM0YmFmYWZhYzFhMGU0NDkxOWNiNDVkOTM2OTJhM2U2YzdmN2YwMGI", "commit": {"author": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2021-12-14T05:16:36Z"}, "committer": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2021-12-16T03:12:53Z"}, "message": "Remove `in_band_lifetimes` for `rustc_passes`", "tree": {"sha": "f4d178e54a7a120992affeccecd3c136ee14e43c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4d178e54a7a120992affeccecd3c136ee14e43c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "html_url": "https://github.com/rust-lang/rust/commit/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/comments", "author": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69ac533527025fffa37ad1bc4d82b3bc65f90264", "url": "https://api.github.com/repos/rust-lang/rust/commits/69ac533527025fffa37ad1bc4d82b3bc65f90264", "html_url": "https://github.com/rust-lang/rust/commit/69ac533527025fffa37ad1bc4d82b3bc65f90264"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "38ad8283f4df0b94dd36d9bb0036229dd24b6379", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -58,7 +58,7 @@ struct CheckAttrVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl CheckAttrVisitor<'tcx> {\n+impl CheckAttrVisitor<'_> {\n     /// Checks any attribute.\n     fn check_attributes(\n         &self,\n@@ -382,7 +382,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr_span: &Span,\n-        attrs: &'hir [Attribute],\n+        attrs: &[Attribute],\n         span: &Span,\n         target: Target,\n     ) -> bool {\n@@ -1481,7 +1481,7 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks if the `#[repr]` attributes on `item` are valid.\n     fn check_repr(\n         &self,\n-        attrs: &'hir [Attribute],\n+        attrs: &[Attribute],\n         span: &Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n@@ -1663,7 +1663,7 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn check_used(&self, attrs: &'hir [Attribute], target: Target) {\n+    fn check_used(&self, attrs: &[Attribute], target: Target) {\n         for attr in attrs {\n             if attr.has_name(sym::used) && target != Target::Static {\n                 self.tcx\n@@ -1842,7 +1842,7 @@ impl CheckAttrVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "a5a65740707e65c94aa13332bfbe62b754c1ce2f", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> CheckConstTraitVisitor<'tcx> {\n impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<'tcx> {\n     /// check for const trait impls, and errors if the impl uses provided/default functions\n     /// of the trait being implemented; as those provided functions can be non-const.\n-    fn visit_item(&mut self, item: &'hir hir::Item<'hir>) {\n+    fn visit_item<'hir>(&mut self, item: &'hir hir::Item<'hir>) {\n         let _: Option<_> = try {\n             if let hir::ItemKind::Impl(ref imp) = item.kind {\n                 if let hir::Constness::Const = imp.constness {\n@@ -134,11 +134,11 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n         };\n     }\n \n-    fn visit_trait_item(&mut self, _: &'hir hir::TraitItem<'hir>) {}\n+    fn visit_trait_item<'hir>(&mut self, _: &'hir hir::TraitItem<'hir>) {}\n \n-    fn visit_impl_item(&mut self, _: &'hir hir::ImplItem<'hir>) {}\n+    fn visit_impl_item<'hir>(&mut self, _: &'hir hir::ImplItem<'hir>) {}\n \n-    fn visit_foreign_item(&mut self, _: &'hir hir::ForeignItem<'hir>) {}\n+    fn visit_foreign_item<'hir>(&mut self, _: &'hir hir::ForeignItem<'hir>) {}\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "3b15332c678fdd9e4101a60c6560de47d8fff262", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -150,7 +150,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n \n     #[allow(dead_code)] // FIXME(81658): should be used + lint reinstated after #83171 relands.\n     fn check_for_self_assign(&mut self, assign: &'tcx hir::Expr<'tcx>) {\n-        fn check_for_self_assign_helper(\n+        fn check_for_self_assign_helper<'tcx>(\n             tcx: TyCtxt<'tcx>,\n             typeck_results: &'tcx ty::TypeckResults<'tcx>,\n             lhs: &'tcx hir::Expr<'tcx>,\n@@ -600,7 +600,7 @@ struct DeadVisitor<'tcx> {\n     live_symbols: FxHashSet<LocalDefId>,\n }\n \n-impl DeadVisitor<'tcx> {\n+impl<'tcx> DeadVisitor<'tcx> {\n     fn should_warn_about_item(&mut self, item: &hir::Item<'_>) -> bool {\n         let should_warn = matches!(\n             item.kind,\n@@ -672,7 +672,7 @@ impl DeadVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for DeadVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     /// Walk nested items in place so that we don't report dead-code"}, {"sha": "064c46966284254e8de0ecb9f2e36e8d443dcd71", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -62,7 +62,7 @@ fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n     ty\n }\n \n-impl ExprVisitor<'tcx> {\n+impl<'tcx> ExprVisitor<'tcx> {\n     fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n         self.tcx.fn_sig(def_id).abi() == RustIntrinsic\n             && self.tcx.item_name(def_id) == sym::transmute\n@@ -487,7 +487,7 @@ impl ExprVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for ItemVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for ItemVisitor<'tcx> {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -504,7 +504,7 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for ExprVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for ExprVisitor<'tcx> {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "a808d6c8348a7da0941ba2201b0d49f398d53a85", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -28,7 +28,7 @@ struct LanguageItemCollector<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n+impl<'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         self.check_for_lang(Target::from_item(item), item.hir_id());\n \n@@ -50,7 +50,7 @@ impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n     fn visit_foreign_item(&mut self, _: &hir::ForeignItem<'_>) {}\n }\n \n-impl LanguageItemCollector<'tcx> {\n+impl<'tcx> LanguageItemCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> LanguageItemCollector<'tcx> {\n         LanguageItemCollector { tcx, items: LanguageItems::new() }\n     }"}, {"sha": "00e8eb5eb2b380d5b7b69fb5517e8fd7e63803eb", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -20,7 +20,7 @@ struct LayoutTest<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         match item.kind {\n             ItemKind::TyAlias(..)\n@@ -42,7 +42,7 @@ impl ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n     fn visit_foreign_item(&mut self, _: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n-impl LayoutTest<'tcx> {\n+impl<'tcx> LayoutTest<'tcx> {\n     fn dump_layout_of(&self, item_def_id: LocalDefId, item: &hir::Item<'tcx>, attr: &Attribute) {\n         let tcx = self.tcx;\n         let param_env = self.tcx.param_env(item_def_id);\n@@ -114,7 +114,7 @@ struct UnwrapLayoutCx<'tcx> {\n     param_env: ParamEnv<'tcx>,\n }\n \n-impl LayoutOfHelpers<'tcx> for UnwrapLayoutCx<'tcx> {\n+impl<'tcx> LayoutOfHelpers<'tcx> for UnwrapLayoutCx<'tcx> {\n     type LayoutOfResult = TyAndLayout<'tcx>;\n \n     fn handle_layout_err(&self, err: LayoutError<'tcx>, span: Span, ty: Ty<'tcx>) -> ! {\n@@ -127,19 +127,19 @@ impl LayoutOfHelpers<'tcx> for UnwrapLayoutCx<'tcx> {\n     }\n }\n \n-impl HasTyCtxt<'tcx> for UnwrapLayoutCx<'tcx> {\n+impl<'tcx> HasTyCtxt<'tcx> for UnwrapLayoutCx<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }\n \n-impl HasParamEnv<'tcx> for UnwrapLayoutCx<'tcx> {\n+impl<'tcx> HasParamEnv<'tcx> for UnwrapLayoutCx<'tcx> {\n     fn param_env(&self) -> ParamEnv<'tcx> {\n         self.param_env\n     }\n }\n \n-impl HasDataLayout for UnwrapLayoutCx<'tcx> {\n+impl<'tcx> HasDataLayout for UnwrapLayoutCx<'tcx> {\n     fn data_layout(&self) -> &TargetDataLayout {\n         self.tcx.data_layout()\n     }"}, {"sha": "8a411f01d6ee2317c8cc086f4f0296c68be25dd6", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -6,7 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n-#![feature(in_band_lifetimes)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(nll)]"}, {"sha": "55ae808dc3089c43e1222c2b40e92cb747ae911f", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -23,7 +23,7 @@ pub struct LibFeatureCollector<'tcx> {\n     lib_features: LibFeatures,\n }\n \n-impl LibFeatureCollector<'tcx> {\n+impl<'tcx> LibFeatureCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> LibFeatureCollector<'tcx> {\n         LibFeatureCollector { tcx, lib_features: new_lib_features() }\n     }\n@@ -110,7 +110,7 @@ impl LibFeatureCollector<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n+impl<'tcx> Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "8bd08913e90d46729b27d64a779f4ff3db9366ba", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -198,7 +198,7 @@ struct IrMaps<'tcx> {\n     lnks: IndexVec<LiveNode, LiveNodeKind>,\n }\n \n-impl IrMaps<'tcx> {\n+impl<'tcx> IrMaps<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> IrMaps<'tcx> {\n         IrMaps {\n             tcx,"}, {"sha": "07cb165d79670ee4dc2c75ee1e2d8788405bcd38", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> Visitor<'tcx> for CheckNakedFunctions<'tcx> {\n \n     fn visit_fn(\n         &mut self,\n-        fk: FnKind<'v>,\n+        fk: FnKind<'_>,\n         _fd: &'tcx hir::FnDecl<'tcx>,\n         body_id: hir::BodyId,\n         span: Span,"}, {"sha": "707e6b123daa2ea69c78ee7c7f4d67575dae4103", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -22,7 +22,7 @@ use rustc_target::spec::abi::Abi;\n // Returns true if the given item must be inlined because it may be\n // monomorphized or it was marked with `#[inline]`. This will only return\n // true for functions.\n-fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>, attrs: &CodegenFnAttrs) -> bool {\n+fn item_might_be_inlined(tcx: TyCtxt<'_>, item: &hir::Item<'_>, attrs: &CodegenFnAttrs) -> bool {\n     if attrs.requests_inline() {\n         return true;\n     }"}, {"sha": "5f19991f9c78b1f034d4e1eb05edf63be1618c66", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -655,7 +655,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     // stable (assuming they have not inherited instability from their parent).\n }\n \n-fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n+fn stability_index<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n     let is_staged_api =\n         tcx.sess.opts.debugging_opts.force_unstable_if_unmarked || tcx.features().staged_api;\n     let mut staged_api = FxHashMap::default();\n@@ -737,7 +737,7 @@ struct Checker<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl Visitor<'tcx> for Checker<'tcx> {\n+impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n     type Map = Map<'tcx>;\n \n     /// Because stability levels are scoped lexically, we want to walk\n@@ -866,7 +866,7 @@ struct CheckTraitImplStable<'tcx> {\n     fully_stable: bool,\n }\n \n-impl Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n+impl<'tcx> Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "2d84c8caada80a0ac178f3bb3c0e7325976e6c0c", "filename": "compiler/rustc_passes/src/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bafafac1a0e44919cb45d93692a3e6c7f7f00b/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fupvars.rs?ref=c4bafafac1a0e44919cb45d93692a3e6c7f7f00b", "patch": "@@ -42,7 +42,7 @@ struct LocalCollector {\n     locals: FxHashSet<HirId>,\n }\n \n-impl Visitor<'tcx> for LocalCollector {\n+impl<'tcx> Visitor<'tcx> for LocalCollector {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -71,7 +71,7 @@ impl CaptureCollector<'_, '_> {\n     }\n }\n \n-impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for CaptureCollector<'_, 'tcx> {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}]}