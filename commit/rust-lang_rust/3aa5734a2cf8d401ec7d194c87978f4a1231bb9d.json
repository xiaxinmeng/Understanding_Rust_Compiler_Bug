{"sha": "3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "node_id": "C_kwDOAAsO6NoAKDNhYTU3MzRhMmNmOGQ0MDFlYzdkMTk0Yzg3OTc4ZjRhMTIzMWJiOWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-15T18:11:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-15T18:11:34Z"}, "message": "Rollup merge of #100377 - est31:fluent_grepability, r=davidtwco\n\nReplace - with _ in fluent slugs to improve developer workflows\n\nThis is a proposal to smoothen the compiler contribution experience in the face of the move to fluent.\n\n## Context\n\nThe fluent project has introduced a layer of abstraction to compiler errors. Previously, people would write down error messages directly in the same file the code was located to emit them. Now, there is a slug that connects the code in the compiler to the error message in the ftl file.\n\nYou can look at 7ef610c003f8072ec4ca4ecf195922a9a44e48dd to see an example of the changes:\n\nOld:\n```Rust\nlet msg = format!(\n    \"bounds on `{}` are most likely incorrect, consider instead \\\n        using `{}` to detect whether a type can be trivially dropped\",\n    predicate,\n    cx.tcx.def_path_str(needs_drop)\n);\nlint.build(&msg).emit();\n```\nNew (Rust side):\n```Rust\nlint.build(fluent::lint::drop_trait_constraints)\n    .set_arg(\"predicate\", predicate)\n    .set_arg(\"needs_drop\", cx.tcx.def_path_str(needs_drop))\n    .emit();\n```\nNew (Fluent side):\n```fluent\nlint-drop-trait-constraints =\n    bounds on `{$predicate}` are most likely incorrect, consider instead using `{$needs_drop}` to detect whether a type can be trivially dropped\n```\n\nYou will note that in the ftl file, the slug is slightly different from the slug in the Rust file: The ftl slug uses `-` (e.g. `lint-drop-trait-constraints`) while the rust slug uses `::` and `_` (e.g. `lint::drop_trait_constraints`). This choice was probably done due to:\n\n* Rust not accepting `-` in identifiers (as it is an operator)\n* fluent not supporting the `:` character in slug names (parse error upon attempts)\n* all official fluent documentation using `-` instead of `_`\n\n## The problem\n\nThe two different types of slugs, one with `-`, and one with `_`, cause difficulties for contributors. Imagine you don't have perfect knowledge of where stuff is in the compiler (i would say this is most people), and you encounter an error for which you think there is something you could improve that is not just a rewording.\n\nSo you want to find out where in the compiler's code that error is being emitted. The best way is via grepping.\n\n1. you grep for the message in the compiler's source code. You discover the ftl file and find out the slug for that error.\n2. That slug however contains `-` instead of `_`, so you have to manually translate the `-`'s into `_`s, and furthermore either remove the leading module name, or replace the first `-` with a `::`.\n3. you do a second grep to get to the emitting location in the compiler's code.\n\nThis translation difficulty in step 2 appears also in the other direction when you want to figure out what some code in the compiler is doing and use error messages to help your understanding. Comments and variable names are way less exposed to users so [are more likely going to lie](https://github.com/rust-lang/rust/commit/cc3c5d2700481bae497d6cde825c1d48e79c776a) than error messages.\n\nI think that at least the `-`\u2192`_` translation which makes up most of step 2 can be removed at low cost.\n\n## The solution\n\nIf you look closely, the practice of fluent to use `-` is only a stylistic choice and it is not enforced by fluent implementations, neither the playground nor the one the rust compiler uses, that slugs may not contain `_`. Thus, we can in fact migrate the ftl side to `_`. So now we'll have slugs like  `lint_drop_trait_constraints` on the ftl side. You only have to do one replacement now to get to the Rust slug: remove the first `_` and place a `::` in its stead. I would argue that this change is in fact useful as it allows you to control whether you want to look at the rust side of things or the ftl side of things via changing the query string only: with an increased number of translations checked into the repository, grepping for raw slugs will return the slug in many ftl files, so an explicit step to look for the source code is always useful. In the other direction (rust to fluent), you don't need a translation at all any more, as you can just take the final piece of the slug (e.g. `drop_trait_constraints`) and grep for that. The PR also adds enforcement to forbid usage of `_` in slug names. Internal slug names (those leading with a `-`) are exempt from that enforcement.\n\nAs another workflow that benefits from this change, people who add new errors don't have to do that `-` conversion either.\n\n| Before/After | Fluent slug | Rust slug (no change) |\n|--|--|--|\n| Before | `lint-drop-trait-constraints` | `lint::drop_trait_constraints`|\n| After | `lint_drop_trait_constraints` | `lint::drop_trait_constraints`|\n\nNote that I've suggested this previously in the translation thread on zulip. I think it's important to think about non-translator contribution impact of fluent. I have certainly plans for more improvements, but this is a good first step.\n\n``@rustbot`` label A-diagnostics", "tree": {"sha": "1e49f52ad56951a9b542fcaa8c86c63dc3a98a6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e49f52ad56951a9b542fcaa8c86c63dc3a98a6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+oxWCRBK7hj4Ov3rIwAAb2MIAEWS3+MEe3l3loBAR+fdhWNQ\nRh3EXeJIMhN75pUTilZaTcgNOcN+ojjhSUH9mjK5ndUSjtxREQaUuDBcvgsw4g/t\nGAoFjI+zJoPxw+5CKZwZP3AaJ3+DSvk3dA/2z+omGNtCFLec4uQgfsJVyWK7+VaR\n88JExpMQ/NnUM46cmk/e3dnx1eE/s98sRwmLthjOOCpgHxfFf8pVOqUy7DFsqMu1\n4fTqcbRnheCEawnLCtAOSzFoNCozyAtoc78j7A1Fv6fDVIgtgKBeAsOgM/WTwHg8\nxz+eLZRv/KMkFMKA8D4msS9ohMr25IT4k5pT4x+4BSuJJmb5V5d9aoIrGtMpiG8=\n=4UjM\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e49f52ad56951a9b542fcaa8c86c63dc3a98a6a\nparent 13ff45d5528b1ab5af0ebc76efdf06baaa458dfa\nparent ca16a8d76c9e17f1a8ac1c0280cf87338e0ca20d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660587094 +0200\ncommitter GitHub <noreply@github.com> 1660587094 +0200\n\nRollup merge of #100377 - est31:fluent_grepability, r=davidtwco\n\nReplace - with _ in fluent slugs to improve developer workflows\n\nThis is a proposal to smoothen the compiler contribution experience in the face of the move to fluent.\n\n## Context\n\nThe fluent project has introduced a layer of abstraction to compiler errors. Previously, people would write down error messages directly in the same file the code was located to emit them. Now, there is a slug that connects the code in the compiler to the error message in the ftl file.\n\nYou can look at 7ef610c003f8072ec4ca4ecf195922a9a44e48dd to see an example of the changes:\n\nOld:\n```Rust\nlet msg = format!(\n    \"bounds on `{}` are most likely incorrect, consider instead \\\n        using `{}` to detect whether a type can be trivially dropped\",\n    predicate,\n    cx.tcx.def_path_str(needs_drop)\n);\nlint.build(&msg).emit();\n```\nNew (Rust side):\n```Rust\nlint.build(fluent::lint::drop_trait_constraints)\n    .set_arg(\"predicate\", predicate)\n    .set_arg(\"needs_drop\", cx.tcx.def_path_str(needs_drop))\n    .emit();\n```\nNew (Fluent side):\n```fluent\nlint-drop-trait-constraints =\n    bounds on `{$predicate}` are most likely incorrect, consider instead using `{$needs_drop}` to detect whether a type can be trivially dropped\n```\n\nYou will note that in the ftl file, the slug is slightly different from the slug in the Rust file: The ftl slug uses `-` (e.g. `lint-drop-trait-constraints`) while the rust slug uses `::` and `_` (e.g. `lint::drop_trait_constraints`). This choice was probably done due to:\n\n* Rust not accepting `-` in identifiers (as it is an operator)\n* fluent not supporting the `:` character in slug names (parse error upon attempts)\n* all official fluent documentation using `-` instead of `_`\n\n## The problem\n\nThe two different types of slugs, one with `-`, and one with `_`, cause difficulties for contributors. Imagine you don't have perfect knowledge of where stuff is in the compiler (i would say this is most people), and you encounter an error for which you think there is something you could improve that is not just a rewording.\n\nSo you want to find out where in the compiler's code that error is being emitted. The best way is via grepping.\n\n1. you grep for the message in the compiler's source code. You discover the ftl file and find out the slug for that error.\n2. That slug however contains `-` instead of `_`, so you have to manually translate the `-`'s into `_`s, and furthermore either remove the leading module name, or replace the first `-` with a `::`.\n3. you do a second grep to get to the emitting location in the compiler's code.\n\nThis translation difficulty in step 2 appears also in the other direction when you want to figure out what some code in the compiler is doing and use error messages to help your understanding. Comments and variable names are way less exposed to users so [are more likely going to lie](https://github.com/rust-lang/rust/commit/cc3c5d2700481bae497d6cde825c1d48e79c776a) than error messages.\n\nI think that at least the `-`\u2192`_` translation which makes up most of step 2 can be removed at low cost.\n\n## The solution\n\nIf you look closely, the practice of fluent to use `-` is only a stylistic choice and it is not enforced by fluent implementations, neither the playground nor the one the rust compiler uses, that slugs may not contain `_`. Thus, we can in fact migrate the ftl side to `_`. So now we'll have slugs like  `lint_drop_trait_constraints` on the ftl side. You only have to do one replacement now to get to the Rust slug: remove the first `_` and place a `::` in its stead. I would argue that this change is in fact useful as it allows you to control whether you want to look at the rust side of things or the ftl side of things via changing the query string only: with an increased number of translations checked into the repository, grepping for raw slugs will return the slug in many ftl files, so an explicit step to look for the source code is always useful. In the other direction (rust to fluent), you don't need a translation at all any more, as you can just take the final piece of the slug (e.g. `drop_trait_constraints`) and grep for that. The PR also adds enforcement to forbid usage of `_` in slug names. Internal slug names (those leading with a `-`) are exempt from that enforcement.\n\nAs another workflow that benefits from this change, people who add new errors don't have to do that `-` conversion either.\n\n| Before/After | Fluent slug | Rust slug (no change) |\n|--|--|--|\n| Before | `lint-drop-trait-constraints` | `lint::drop_trait_constraints`|\n| After | `lint_drop_trait_constraints` | `lint::drop_trait_constraints`|\n\nNote that I've suggested this previously in the translation thread on zulip. I think it's important to think about non-translator contribution impact of fluent. I have certainly plans for more improvements, but this is a good first step.\n\n``@rustbot`` label A-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "html_url": "https://github.com/rust-lang/rust/commit/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13ff45d5528b1ab5af0ebc76efdf06baaa458dfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/13ff45d5528b1ab5af0ebc76efdf06baaa458dfa", "html_url": "https://github.com/rust-lang/rust/commit/13ff45d5528b1ab5af0ebc76efdf06baaa458dfa"}, {"sha": "ca16a8d76c9e17f1a8ac1c0280cf87338e0ca20d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca16a8d76c9e17f1a8ac1c0280cf87338e0ca20d", "html_url": "https://github.com/rust-lang/rust/commit/ca16a8d76c9e17f1a8ac1c0280cf87338e0ca20d"}], "stats": {"total": 827, "additions": 443, "deletions": 384}, "files": [{"sha": "4af40d2062d3a79c275cfe22d841105e282bbb5d", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,18 +1,18 @@\n-borrowck-move-unsized =\n+borrowck_move_unsized =\n     cannot move a value of type `{$ty}`\n     .label = the size of `{$ty}` cannot be statically determined\n \n-borrowck-higher-ranked-lifetime-error =\n+borrowck_higher_ranked_lifetime_error =\n     higher-ranked lifetime error\n \n-borrowck-could-not-prove =\n+borrowck_could_not_prove =\n     could not prove `{$predicate}`\n \n-borrowck-could-not-normalize =\n+borrowck_could_not_normalize =\n     could not normalize `{$value}`\n \n-borrowck-higher-ranked-subtype-error =\n+borrowck_higher_ranked_subtype_error =\n     higher-ranked subtype error\n   \n-generic-does-not-live-long-enough =\n+generic_does_not_live_long_enough =\n     `{$kind}` does not live long enough\n\\ No newline at end of file"}, {"sha": "4d088e27b364ae36762db7512961333e7a34849f", "filename": "compiler/rustc_error_messages/locales/en-US/builtin_macros.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,5 +1,5 @@\n-builtin-macros-requires-cfg-pattern =\n+builtin_macros_requires_cfg_pattern =\n     macro requires a cfg-pattern as an argument\n     .label = cfg-pattern required\n \n-builtin-macros-expected-one-cfg-pattern = expected 1 cfg-pattern\n+builtin_macros_expected_one_cfg_pattern = expected 1 cfg-pattern"}, {"sha": "341f05efefdfb2a44cf9cdf0f040718efebc01fa", "filename": "compiler/rustc_error_messages/locales/en-US/const_eval.ftl", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,31 +1,31 @@\n-const-eval-unstable-in-stable =\n+const_eval_unstable_in_stable =\n     const-stable function cannot use `#[feature({$gate})]`\n-    .unstable-sugg = if it is not part of the public API, make this function unstably const\n-    .bypass-sugg = otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n+    .unstable_sugg = if it is not part of the public API, make this function unstably const\n+    .bypass_sugg = otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n \n-const-eval-thread-local-access =\n+const_eval_thread_local_access =\n     thread-local statics cannot be accessed at compile-time\n \n-const-eval-static-access =\n+const_eval_static_access =\n     {$kind}s cannot refer to statics\n     .help = consider extracting the value of the `static` to a `const`, and referring to that\n-    .teach-note = `static` and `const` variables can refer to other `const` variables. A `const` variable, however, cannot refer to a `static` variable.\n-    .teach-help = To fix this, the value can be extracted to a `const` and then used.\n+    .teach_note = `static` and `const` variables can refer to other `const` variables. A `const` variable, however, cannot refer to a `static` variable.\n+    .teach_help = To fix this, the value can be extracted to a `const` and then used.\n \n-const-eval-raw-ptr-to-int =\n+const_eval_raw_ptr_to_int =\n     pointers cannot be cast to integers during const eval\n     .note = at compile-time, pointers do not have an integer value\n     .note2 = avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n \n-const-eval-raw-ptr-comparison =\n+const_eval_raw_ptr_comparison =\n     pointers cannot be reliably compared during const eval\n     .note = see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n \n-const-eval-panic-non-str = argument to `panic!()` in a const context must have type `&str`\n+const_eval_panic_non_str = argument to `panic!()` in a const context must have type `&str`\n \n-const-eval-mut-deref =\n+const_eval_mut_deref =\n     mutation through a reference is not allowed in {$kind}s\n \n-const-eval-transient-mut-borrow = mutable references are not allowed in {$kind}s\n+const_eval_transient_mut_borrow = mutable references are not allowed in {$kind}s\n \n-const-eval-transient-mut-borrow-raw = raw mutable references are not allowed in {$kind}s\n+const_eval_transient_mut_borrow_raw = raw mutable references are not allowed in {$kind}s"}, {"sha": "bdfa22e77eb2fcdc1fa0df21cdd151b91f2566c9", "filename": "compiler/rustc_error_messages/locales/en-US/expand.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,5 +1,5 @@\n-expand-explain-doc-comment-outer =\n+expand_explain_doc_comment_outer =\n     outer doc comments expand to `#[doc = \"...\"]`, which is what this macro attempted to match\n \n-expand-explain-doc-comment-inner =\n+expand_explain_doc_comment_inner =\n     inner doc comments expand to `#![doc = \"...\"]`, which is what this macro attempted to match"}, {"sha": "973171147166438023f0e61ef11e8b1058cc666e", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 163, "deletions": 163, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,22 +1,22 @@\n-lint-array-into-iter =\n+lint_array_into_iter =\n     this method call resolves to `<&{$target} as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <{$target} as IntoIterator>::into_iter in Rust 2021\n-    .use-iter-suggestion = use `.iter()` instead of `.into_iter()` to avoid ambiguity\n-    .remove-into-iter-suggestion = or remove `.into_iter()` to iterate by value\n-    .use-explicit-into-iter-suggestion =\n+    .use_iter_suggestion = use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+    .remove_into_iter_suggestion = or remove `.into_iter()` to iterate by value\n+    .use_explicit_into_iter_suggestion =\n         or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n \n-lint-enum-intrinsics-mem-discriminant =\n+lint_enum_intrinsics_mem_discriminant =\n     the return value of `mem::discriminant` is unspecified when called with a non-enum type\n     .note = the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `{$ty_param}`, which is not an enum.\n \n-lint-enum-intrinsics-mem-variant =\n+lint_enum_intrinsics_mem_variant =\n     the return value of `mem::variant_count` is unspecified when called with a non-enum type\n     .note = the type parameter of `variant_count` should be an enum, but it was instantiated with the type `{$ty_param}`, which is not an enum.\n \n-lint-expectation = this lint expectation is unfulfilled\n+lint_expectation = this lint expectation is unfulfilled\n     .note = the `unfulfilled_lint_expectations` lint can't be expected and will always produce this message\n \n-lint-hidden-unicode-codepoints = unicode codepoint changing visible direction of text present in {$label}\n+lint_hidden_unicode_codepoints = unicode codepoint changing visible direction of text present in {$label}\n     .label = this {$label} contains {$count ->\n         [one] an invisible\n         *[other] invisible\n@@ -25,68 +25,68 @@ lint-hidden-unicode-codepoints = unicode codepoint changing visible direction of\n         *[other] codepoints\n     }\n     .note = these kind of unicode codepoints change the way text flows on applications that support them, but can cause confusion because they change the order of characters on the screen\n-    .suggestion-remove = if their presence wasn't intentional, you can remove them\n-    .suggestion-escape = if you want to keep them but make them visible in your source code, you can escape them\n-    .no-suggestion-note-escape = if you want to keep them but make them visible in your source code, you can escape them: {$escaped}\n+    .suggestion_remove = if their presence wasn't intentional, you can remove them\n+    .suggestion_escape = if you want to keep them but make them visible in your source code, you can escape them\n+    .no_suggestion_note_escape = if you want to keep them but make them visible in your source code, you can escape them: {$escaped}\n \n-lint-default-hash-types = prefer `{$preferred}` over `{$used}`, it has better performance\n+lint_default_hash_types = prefer `{$preferred}` over `{$used}`, it has better performance\n     .note = a `use rustc_data_structures::fx::{$preferred}` may be necessary\n \n-lint-query-instability = using `{$query}` can result in unstable query results\n+lint_query_instability = using `{$query}` can result in unstable query results\n     .note = if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n \n-lint-tykind-kind = usage of `ty::TyKind::<kind>`\n+lint_tykind_kind = usage of `ty::TyKind::<kind>`\n     .suggestion = try using `ty::<kind>` directly\n \n-lint-tykind = usage of `ty::TyKind`\n+lint_tykind = usage of `ty::TyKind`\n     .help = try using `Ty` instead\n \n-lint-ty-qualified = usage of qualified `ty::{$ty}`\n+lint_ty_qualified = usage of qualified `ty::{$ty}`\n     .suggestion = try importing it and using it unqualified\n \n-lint-lintpass-by-hand = implementing `LintPass` by hand\n+lint_lintpass_by_hand = implementing `LintPass` by hand\n     .help = try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n-lint-non-existant-doc-keyword = found non-existing keyword `{$keyword}` used in `#[doc(keyword = \\\"...\\\")]`\n+lint_non_existant_doc_keyword = found non-existing keyword `{$keyword}` used in `#[doc(keyword = \\\"...\\\")]`\n     .help = only existing keywords are allowed in core/std\n \n-lint-diag-out-of-impl =\n+lint_diag_out_of_impl =\n     diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n \n-lint-untranslatable-diag = diagnostics should be created using translatable messages\n+lint_untranslatable_diag = diagnostics should be created using translatable messages\n \n-lint-cstring-ptr = getting the inner pointer of a temporary `CString`\n-    .as-ptr-label = this pointer will be invalid\n-    .unwrap-label = this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n+lint_cstring_ptr = getting the inner pointer of a temporary `CString`\n+    .as_ptr_label = this pointer will be invalid\n+    .unwrap_label = this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime\n     .note = pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n     .help = for more information, see https://doc.rust-lang.org/reference/destructors.html\n \n-lint-identifier-non-ascii-char = identifier contains non-ASCII characters\n+lint_identifier_non_ascii_char = identifier contains non-ASCII characters\n \n-lint-identifier-uncommon-codepoints = identifier contains uncommon Unicode codepoints\n+lint_identifier_uncommon_codepoints = identifier contains uncommon Unicode codepoints\n \n-lint-confusable-identifier-pair = identifier pair considered confusable between `{$existing_sym}` and `{$sym}`\n+lint_confusable_identifier_pair = identifier pair considered confusable between `{$existing_sym}` and `{$sym}`\n     .label = this is where the previous identifier occurred\n \n-lint-mixed-script-confusables =\n+lint_mixed_script_confusables =\n     the usage of Script Group `{$set}` in this crate consists solely of mixed script confusables\n-    .includes-note = the usage includes {$includes}\n+    .includes_note = the usage includes {$includes}\n     .note = please recheck to make sure their usages are indeed what you want\n \n-lint-non-fmt-panic = panic message is not a string literal\n+lint_non_fmt_panic = panic message is not a string literal\n     .note = this usage of `{$name}!()` is deprecated; it will be a hard error in Rust 2021\n-    .more-info-note = for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n-    .supports-fmt-note = the `{$name}!()` macro supports formatting, so there's no need for the `format!()` macro here\n-    .supports-fmt-suggestion = remove the `format!(..)` macro call\n-    .display-suggestion = add a \"{\"{\"}{\"}\"}\" format string to `Display` the message\n-    .debug-suggestion =\n+    .more_info_note = for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\n+    .supports_fmt_note = the `{$name}!()` macro supports formatting, so there's no need for the `format!()` macro here\n+    .supports_fmt_suggestion = remove the `format!(..)` macro call\n+    .display_suggestion = add a \"{\"{\"}{\"}\"}\" format string to `Display` the message\n+    .debug_suggestion =\n         add a \"{\"{\"}:?{\"}\"}\" format string to use the `Debug` implementation of `{$ty}`\n-    .panic-suggestion = {$already_suggested ->\n+    .panic_suggestion = {$already_suggested ->\n         [true] or use\n         *[false] use\n     } std::panic::panic_any instead\n \n-lint-non-fmt-panic-unused =\n+lint_non_fmt_panic_unused =\n     panic message contains {$count ->\n         [one] an unused\n         *[other] unused\n@@ -95,44 +95,44 @@ lint-non-fmt-panic-unused =\n         *[other] placeholders\n     }\n     .note = this message is not used as a format string when given without arguments, but will be in Rust 2021\n-    .add-args-suggestion = add the missing {$count ->\n+    .add_args_suggestion = add the missing {$count ->\n         [one] argument\n         *[other] arguments\n     }\n-    .add-fmt-suggestion = or add a \"{\"{\"}{\"}\"}\" format string to use the message literally\n+    .add_fmt_suggestion = or add a \"{\"{\"}{\"}\"}\" format string to use the message literally\n \n-lint-non-fmt-panic-braces =\n+lint_non_fmt_panic_braces =\n     panic message contains {$count ->\n         [one] a brace\n         *[other] braces\n     }\n     .note = this message is not used as a format string, but will be in Rust 2021\n     .suggestion = add a \"{\"{\"}{\"}\"}\" format string to use the message literally\n \n-lint-non-camel-case-type = {$sort} `{$name}` should have an upper camel case name\n+lint_non_camel_case_type = {$sort} `{$name}` should have an upper camel case name\n     .suggestion = convert the identifier to upper camel case\n     .label = should have an UpperCamelCase name\n \n-lint-non-snake-case = {$sort} `{$name}` should have a snake case name\n-    .rename-or-convert-suggestion = rename the identifier or convert it to a snake case raw identifier\n-    .cannot-convert-note = `{$sc}` cannot be used as a raw identifier\n-    .rename-suggestion = rename the identifier\n-    .convert-suggestion = convert the identifier to snake case\n+lint_non_snake_case = {$sort} `{$name}` should have a snake case name\n+    .rename_or_convert_suggestion = rename the identifier or convert it to a snake case raw identifier\n+    .cannot_convert_note = `{$sc}` cannot be used as a raw identifier\n+    .rename_suggestion = rename the identifier\n+    .convert_suggestion = convert the identifier to snake case\n     .help = convert the identifier to snake case: `{$sc}`\n     .label = should have a snake_case name\n \n-lint-non-upper_case-global = {$sort} `{$name}` should have an upper case name\n+lint_non_upper_case_global = {$sort} `{$name}` should have an upper case name\n     .suggestion = convert the identifier to upper case\n     .label = should have an UPPER_CASE name\n \n-lint-noop-method-call = call to `.{$method}()` on a reference in this situation does nothing\n+lint_noop_method_call = call to `.{$method}()` on a reference in this situation does nothing\n     .label = unnecessary method call\n     .note = the type `{$receiver_ty}` which `{$method}` is being called on is the same as the type returned from `{$method}`, so the method call does not do anything and can be removed\n \n-lint-pass-by-value = passing `{$ty}` by reference\n+lint_pass_by_value = passing `{$ty}` by reference\n     .suggestion = try passing by value\n \n-lint-redundant-semicolons =\n+lint_redundant_semicolons =\n     unnecessary trailing {$multiple ->\n         [true] semicolons\n         *[false] semicolon\n@@ -142,254 +142,254 @@ lint-redundant-semicolons =\n         *[false] this semicolon\n     }\n \n-lint-drop-trait-constraints =\n+lint_drop_trait_constraints =\n     bounds on `{$predicate}` are most likely incorrect, consider instead using `{$needs_drop}` to detect whether a type can be trivially dropped\n \n-lint-drop-glue =\n+lint_drop_glue =\n     types that do not implement `Drop` can still have drop glue, consider instead using `{$needs_drop}` to detect whether a type is trivially dropped\n \n-lint-range-endpoint-out-of-range = range endpoint is out of range for `{$ty}`\n+lint_range_endpoint_out_of_range = range endpoint is out of range for `{$ty}`\n     .suggestion = use an inclusive range instead\n \n-lint-overflowing-bin-hex = literal out of range for `{$ty}`\n-    .negative-note = the literal `{$lit}` (decimal `{$dec}`) does not fit into the type `{$ty}`\n-    .negative-becomes-note = and the value `-{$lit}` will become `{$actually}{$ty}`\n-    .positive-note = the literal `{$lit}` (decimal `{$dec}`) does not fit into the type `{$ty}` and will become `{$actually}{$ty}`\n+lint_overflowing_bin_hex = literal out of range for `{$ty}`\n+    .negative_note = the literal `{$lit}` (decimal `{$dec}`) does not fit into the type `{$ty}`\n+    .negative_becomes_note = and the value `-{$lit}` will become `{$actually}{$ty}`\n+    .positive_note = the literal `{$lit}` (decimal `{$dec}`) does not fit into the type `{$ty}` and will become `{$actually}{$ty}`\n     .suggestion = consider using the type `{$suggestion_ty}` instead\n     .help = consider using the type `{$suggestion_ty}` instead\n \n-lint-overflowing-int = literal out of range for `{$ty}`\n+lint_overflowing_int = literal out of range for `{$ty}`\n     .note = the literal `{$lit}` does not fit into the type `{$ty}` whose range is `{$min}..={$max}`\n     .help = consider using the type `{$suggestion_ty}` instead\n \n-lint-only-cast-u8-to-char = only `u8` can be cast into `char`\n+lint_only_cast_u8_to_char = only `u8` can be cast into `char`\n     .suggestion = use a `char` literal instead\n \n-lint-overflowing-uint = literal out of range for `{$ty}`\n+lint_overflowing_uint = literal out of range for `{$ty}`\n     .note = the literal `{$lit}` does not fit into the type `{$ty}` whose range is `{$min}..={$max}`\n \n-lint-overflowing-literal = literal out of range for `{$ty}`\n+lint_overflowing_literal = literal out of range for `{$ty}`\n     .note = the literal `{$lit}` does not fit into the type `{$ty}` and will be converted to `{$ty}::INFINITY`\n \n-lint-unused-comparisons = comparison is useless due to type limits\n+lint_unused_comparisons = comparison is useless due to type limits\n \n-lint-improper-ctypes = `extern` {$desc} uses type `{$ty}`, which is not FFI-safe\n+lint_improper_ctypes = `extern` {$desc} uses type `{$ty}`, which is not FFI-safe\n     .label = not FFI-safe\n     .note = the type is defined here\n \n-lint-improper-ctypes-opaque = opaque types have no C equivalent\n+lint_improper_ctypes_opaque = opaque types have no C equivalent\n \n-lint-improper-ctypes-fnptr-reason = this function pointer has Rust-specific calling convention\n-lint-improper-ctypes-fnptr-help = consider using an `extern fn(...) -> ...` function pointer instead\n+lint_improper_ctypes_fnptr_reason = this function pointer has Rust-specific calling convention\n+lint_improper_ctypes_fnptr_help = consider using an `extern fn(...) -> ...` function pointer instead\n \n-lint-improper-ctypes-tuple-reason = tuples have unspecified layout\n-lint-improper-ctypes-tuple-help = consider using a struct instead\n+lint_improper_ctypes_tuple_reason = tuples have unspecified layout\n+lint_improper_ctypes_tuple_help = consider using a struct instead\n \n-lint-improper-ctypes-str-reason = string slices have no C equivalent\n-lint-improper-ctypes-str-help = consider using `*const u8` and a length instead\n+lint_improper_ctypes_str_reason = string slices have no C equivalent\n+lint_improper_ctypes_str_help = consider using `*const u8` and a length instead\n \n-lint-improper-ctypes-dyn = trait objects have no C equivalent\n+lint_improper_ctypes_dyn = trait objects have no C equivalent\n \n-lint-improper-ctypes-slice-reason = slices have no C equivalent\n-lint-improper-ctypes-slice-help = consider using a raw pointer instead\n+lint_improper_ctypes_slice_reason = slices have no C equivalent\n+lint_improper_ctypes_slice_help = consider using a raw pointer instead\n \n-lint-improper-ctypes-128bit = 128-bit integers don't currently have a known stable ABI\n+lint_improper_ctypes_128bit = 128-bit integers don't currently have a known stable ABI\n \n-lint-improper-ctypes-char-reason = the `char` type has no C equivalent\n-lint-improper-ctypes-char-help = consider using `u32` or `libc::wchar_t` instead\n+lint_improper_ctypes_char_reason = the `char` type has no C equivalent\n+lint_improper_ctypes_char_help = consider using `u32` or `libc::wchar_t` instead\n \n-lint-improper-ctypes-non-exhaustive = this enum is non-exhaustive\n-lint-improper-ctypes-non-exhaustive-variant = this enum has non-exhaustive variants\n+lint_improper_ctypes_non_exhaustive = this enum is non-exhaustive\n+lint_improper_ctypes_non_exhaustive_variant = this enum has non-exhaustive variants\n \n-lint-improper-ctypes-enum-repr-reason = enum has no representation hint\n-lint-improper-ctypes-enum-repr-help =\n+lint_improper_ctypes_enum_repr_reason = enum has no representation hint\n+lint_improper_ctypes_enum_repr_help =\n     consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n \n-lint-improper-ctypes-struct-fieldless-reason = this struct has no fields\n-lint-improper-ctypes-struct-fieldless-help = consider adding a member to this struct\n+lint_improper_ctypes_struct_fieldless_reason = this struct has no fields\n+lint_improper_ctypes_struct_fieldless_help = consider adding a member to this struct\n \n-lint-improper-ctypes-union-fieldless-reason = this union has no fields\n-lint-improper-ctypes-union-fieldless-help = consider adding a member to this union\n+lint_improper_ctypes_union_fieldless_reason = this union has no fields\n+lint_improper_ctypes_union_fieldless_help = consider adding a member to this union\n \n-lint-improper-ctypes-struct-non-exhaustive = this struct is non-exhaustive\n-lint-improper-ctypes-union-non-exhaustive = this union is non-exhaustive\n+lint_improper_ctypes_struct_non_exhaustive = this struct is non-exhaustive\n+lint_improper_ctypes_union_non_exhaustive = this union is non-exhaustive\n \n-lint-improper-ctypes-struct-layout-reason = this struct has unspecified layout\n-lint-improper-ctypes-struct-layout-help = consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+lint_improper_ctypes_struct_layout_reason = this struct has unspecified layout\n+lint_improper_ctypes_struct_layout_help = consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n \n-lint-improper-ctypes-union-layout-reason = this union has unspecified layout\n-lint-improper-ctypes-union-layout-help = consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this union\n+lint_improper_ctypes_union_layout_reason = this union has unspecified layout\n+lint_improper_ctypes_union_layout_help = consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this union\n \n-lint-improper-ctypes-box = box cannot be represented as a single pointer\n+lint_improper_ctypes_box = box cannot be represented as a single pointer\n \n-lint-improper-ctypes-enum-phantomdata = this enum contains a PhantomData field\n+lint_improper_ctypes_enum_phantomdata = this enum contains a PhantomData field\n \n-lint-improper-ctypes-struct-zst = this struct contains only zero-sized fields\n+lint_improper_ctypes_struct_zst = this struct contains only zero-sized fields\n \n-lint-improper-ctypes-array-reason = passing raw arrays by value is not FFI-safe\n-lint-improper-ctypes-array-help = consider passing a pointer to the array\n+lint_improper_ctypes_array_reason = passing raw arrays by value is not FFI-safe\n+lint_improper_ctypes_array_help = consider passing a pointer to the array\n \n-lint-improper-ctypes-only-phantomdata = composed only of `PhantomData`\n+lint_improper_ctypes_only_phantomdata = composed only of `PhantomData`\n \n-lint-variant-size-differences =\n+lint_variant_size_differences =\n     enum variant is more than three times larger ({$largest} bytes) than the next largest\n \n-lint-atomic-ordering-load = atomic loads cannot have `Release` or `AcqRel` ordering\n+lint_atomic_ordering_load = atomic loads cannot have `Release` or `AcqRel` ordering\n     .help = consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n \n-lint-atomic-ordering-store = atomic stores cannot have `Acquire` or `AcqRel` ordering\n+lint_atomic_ordering_store = atomic stores cannot have `Acquire` or `AcqRel` ordering\n     .help = consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n \n-lint-atomic-ordering-fence = memory fences cannot have `Relaxed` ordering\n+lint_atomic_ordering_fence = memory fences cannot have `Relaxed` ordering\n     .help = consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\n \n-lint-atomic-ordering-invalid = `{$method}`'s failure ordering may not be `Release` or `AcqRel`, since a failed `{$method}` does not result in a write\n+lint_atomic_ordering_invalid = `{$method}`'s failure ordering may not be `Release` or `AcqRel`, since a failed `{$method}` does not result in a write\n     .label = invalid failure ordering\n     .help = consider using `Acquire` or `Relaxed` failure ordering instead\n \n-lint-unused-op = unused {$op} that must be used\n+lint_unused_op = unused {$op} that must be used\n     .label = the {$op} produces a value\n     .suggestion = use `let _ = ...` to ignore the resulting value\n \n-lint-unused-result = unused result of type `{$ty}`\n+lint_unused_result = unused result of type `{$ty}`\n \n-lint-unused-closure =\n+lint_unused_closure =\n     unused {$pre}{$count ->\n         [one] closure\n         *[other] closures\n     }{$post} that must be used\n     .note = closures are lazy and do nothing unless called\n \n-lint-unused-generator =\n+lint_unused_generator =\n     unused {$pre}{$count ->\n         [one] generator\n         *[other] generator\n     }{$post} that must be used\n     .note = generators are lazy and do nothing unless resumed\n \n-lint-unused-def = unused {$pre}`{$def}`{$post} that must be used\n+lint_unused_def = unused {$pre}`{$def}`{$post} that must be used\n \n-lint-path-statement-drop = path statement drops value\n+lint_path_statement_drop = path statement drops value\n     .suggestion = use `drop` to clarify the intent\n \n-lint-path-statement-no-effect = path statement with no effect\n+lint_path_statement_no_effect = path statement with no effect\n \n-lint-unused-delim = unnecessary {$delim} around {$item}\n+lint_unused_delim = unnecessary {$delim} around {$item}\n     .suggestion = remove these {$delim}\n \n-lint-unused-import-braces = braces around {$node} is unnecessary\n+lint_unused_import_braces = braces around {$node} is unnecessary\n \n-lint-unused-allocation = unnecessary allocation, use `&` instead\n-lint-unused-allocation-mut = unnecessary allocation, use `&mut` instead\n+lint_unused_allocation = unnecessary allocation, use `&` instead\n+lint_unused_allocation_mut = unnecessary allocation, use `&mut` instead\n \n-lint-builtin-while-true = denote infinite loops with `loop {\"{\"} ... {\"}\"}`\n+lint_builtin_while_true = denote infinite loops with `loop {\"{\"} ... {\"}\"}`\n     .suggestion = use `loop`\n \n-lint-builtin-box-pointers = type uses owned (Box type) pointers: {$ty}\n+lint_builtin_box_pointers = type uses owned (Box type) pointers: {$ty}\n \n-lint-builtin-non-shorthand-field-patterns = the `{$ident}:` in this pattern is redundant\n+lint_builtin_non_shorthand_field_patterns = the `{$ident}:` in this pattern is redundant\n     .suggestion = use shorthand field pattern\n \n-lint-builtin-overridden-symbol-name =\n+lint_builtin_overridden_symbol_name =\n     the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n-lint-builtin-overridden-symbol-section =\n+lint_builtin_overridden_symbol_section =\n     the program's behavior with overridden link sections on items is unpredictable and Rust cannot provide guarantees when you manually override them\n \n-lint-builtin-allow-internal-unsafe =\n+lint_builtin_allow_internal_unsafe =\n     `allow_internal_unsafe` allows defining macros using unsafe without triggering the `unsafe_code` lint at their call site\n \n-lint-builtin-unsafe-block = usage of an `unsafe` block\n+lint_builtin_unsafe_block = usage of an `unsafe` block\n \n-lint-builtin-unsafe-trait = declaration of an `unsafe` trait\n+lint_builtin_unsafe_trait = declaration of an `unsafe` trait\n \n-lint-builtin-unsafe-impl = implementation of an `unsafe` trait\n+lint_builtin_unsafe_impl = implementation of an `unsafe` trait\n \n-lint-builtin-no-mangle-fn = declaration of a `no_mangle` function\n-lint-builtin-export-name-fn = declaration of a function with `export_name`\n-lint-builtin-link-section-fn = declaration of a function with `link_section`\n+lint_builtin_no_mangle_fn = declaration of a `no_mangle` function\n+lint_builtin_export_name_fn = declaration of a function with `export_name`\n+lint_builtin_link_section_fn = declaration of a function with `link_section`\n \n-lint-builtin-no-mangle-static = declaration of a `no_mangle` static\n-lint-builtin-export-name-static = declaration of a static with `export_name`\n-lint-builtin-link-section-static = declaration of a static with `link_section`\n+lint_builtin_no_mangle_static = declaration of a `no_mangle` static\n+lint_builtin_export_name_static = declaration of a static with `export_name`\n+lint_builtin_link_section_static = declaration of a static with `link_section`\n \n-lint-builtin-no-mangle-method = declaration of a `no_mangle` method\n-lint-builtin-export-name-method = declaration of a method with `export_name`\n+lint_builtin_no_mangle_method = declaration of a `no_mangle` method\n+lint_builtin_export_name_method = declaration of a method with `export_name`\n \n-lint-builtin-decl-unsafe-fn = declaration of an `unsafe` function\n-lint-builtin-decl-unsafe-method = declaration of an `unsafe` method\n-lint-builtin-impl-unsafe-method = implementation of an `unsafe` method\n+lint_builtin_decl_unsafe_fn = declaration of an `unsafe` function\n+lint_builtin_decl_unsafe_method = declaration of an `unsafe` method\n+lint_builtin_impl_unsafe_method = implementation of an `unsafe` method\n \n-lint-builtin-missing-doc = missing documentation for {$article} {$desc}\n+lint_builtin_missing_doc = missing documentation for {$article} {$desc}\n \n-lint-builtin-missing-copy-impl = type could implement `Copy`; consider adding `impl Copy`\n+lint_builtin_missing_copy_impl = type could implement `Copy`; consider adding `impl Copy`\n \n-lint-builtin-missing-debug-impl =\n+lint_builtin_missing_debug_impl =\n     type does not implement `{$debug}`; consider adding `#[derive(Debug)]` or a manual implementation\n \n-lint-builtin-anonymous-params = anonymous parameters are deprecated and will be removed in the next edition\n+lint_builtin_anonymous_params = anonymous parameters are deprecated and will be removed in the next edition\n     .suggestion = try naming the parameter or explicitly ignoring it\n \n-lint-builtin-deprecated-attr-link = use of deprecated attribute `{$name}`: {$reason}. See {$link}\n-lint-builtin-deprecated-attr-used = use of deprecated attribute `{$name}`: no longer used.\n-lint-builtin-deprecated-attr-default-suggestion = remove this attribute\n+lint_builtin_deprecated_attr_link = use of deprecated attribute `{$name}`: {$reason}. See {$link}\n+lint_builtin_deprecated_attr_used = use of deprecated attribute `{$name}`: no longer used.\n+lint_builtin_deprecated_attr_default_suggestion = remove this attribute\n \n-lint-builtin-unused-doc-comment = unused doc comment\n+lint_builtin_unused_doc_comment = unused doc comment\n     .label = rustdoc does not generate documentation for {$kind}\n-    .plain-help = use `//` for a plain comment\n-    .block-help = use `/* */` for a plain comment\n+    .plain_help = use `//` for a plain comment\n+    .block_help = use `/* */` for a plain comment\n \n-lint-builtin-no-mangle-generic = functions generic over types or consts must be mangled\n+lint_builtin_no_mangle_generic = functions generic over types or consts must be mangled\n     .suggestion = remove this attribute\n \n-lint-builtin-const-no-mangle = const items should never be `#[no_mangle]`\n+lint_builtin_const_no_mangle = const items should never be `#[no_mangle]`\n     .suggestion = try a static value\n \n-lint-builtin-mutable-transmutes =\n+lint_builtin_mutable_transmutes =\n     transmuting &T to &mut T is undefined behavior, even if the reference is unused, consider instead using an UnsafeCell\n \n-lint-builtin-unstable-features = unstable feature\n+lint_builtin_unstable_features = unstable feature\n \n-lint-builtin-unreachable-pub = unreachable `pub` {$what}\n+lint_builtin_unreachable_pub = unreachable `pub` {$what}\n     .suggestion = consider restricting its visibility\n     .help = or consider exporting it for use by other crates\n \n-lint-builtin-type-alias-bounds-help = use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases\n+lint_builtin_type_alias_bounds_help = use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases\n \n-lint-builtin-type-alias-where-clause = where clauses are not enforced in type aliases\n+lint_builtin_type_alias_where_clause = where clauses are not enforced in type aliases\n     .suggestion = the clause will not be checked when the type alias is used, and should be removed\n \n-lint-builtin-type-alias-generic-bounds = bounds on generic parameters are not enforced in type aliases\n+lint_builtin_type_alias_generic_bounds = bounds on generic parameters are not enforced in type aliases\n     .suggestion = the bound will not be checked when the type alias is used, and should be removed\n \n-lint-builtin-trivial-bounds = {$predicate_kind_name} bound {$predicate} does not depend on any type or lifetime parameters\n+lint_builtin_trivial_bounds = {$predicate_kind_name} bound {$predicate} does not depend on any type or lifetime parameters\n \n-lint-builtin-ellipsis-inclusive-range-patterns = `...` range patterns are deprecated\n+lint_builtin_ellipsis_inclusive_range_patterns = `...` range patterns are deprecated\n     .suggestion = use `..=` for an inclusive range\n \n-lint-builtin-unnameable-test-items = cannot test inner items\n+lint_builtin_unnameable_test_items = cannot test inner items\n \n-lint-builtin-keyword-idents = `{$kw}` is a keyword in the {$next} edition\n+lint_builtin_keyword_idents = `{$kw}` is a keyword in the {$next} edition\n     .suggestion = you can use a raw identifier to stay compatible\n \n-lint-builtin-explicit-outlives = outlives requirements can be inferred\n+lint_builtin_explicit_outlives = outlives requirements can be inferred\n     .suggestion = remove {$count ->\n         [one] this bound\n         *[other] these bounds\n     }\n \n-lint-builtin-incomplete-features = the feature `{$name}` is incomplete and may not be safe to use and/or cause compiler crashes\n+lint_builtin_incomplete_features = the feature `{$name}` is incomplete and may not be safe to use and/or cause compiler crashes\n     .note = see issue #{$n} <https://github.com/rust-lang/rust/issues/{$n}> for more information\n     .help = consider using `min_{$name}` instead, which is more stable and complete\n \n-lint-builtin-clashing-extern-same-name = `{$this_fi}` redeclared with a different signature\n-    .previous-decl-label = `{$orig}` previously declared here\n-    .mismatch-label = this signature doesn't match the previous declaration\n-lint-builtin-clashing-extern-diff-name = `{$this_fi}` redeclares `{$orig}` with a different signature\n-    .previous-decl-label = `{$orig}` previously declared here\n-    .mismatch-label = this signature doesn't match the previous declaration\n+lint_builtin_clashing_extern_same_name = `{$this_fi}` redeclared with a different signature\n+    .previous_decl_label = `{$orig}` previously declared here\n+    .mismatch_label = this signature doesn't match the previous declaration\n+lint_builtin_clashing_extern_diff_name = `{$this_fi}` redeclares `{$orig}` with a different signature\n+    .previous_decl_label = `{$orig}` previously declared here\n+    .mismatch_label = this signature doesn't match the previous declaration\n \n-lint-builtin-deref-nullptr = dereferencing a null pointer\n+lint_builtin_deref_nullptr = dereferencing a null pointer\n     .label = this code causes undefined behavior when executed\n \n-lint-builtin-asm-labels = avoid using named labels in inline assembly\n+lint_builtin_asm_labels = avoid using named labels in inline assembly"}, {"sha": "7e583753618354415320138517d7883d068fadda", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,34 +1,34 @@\n-parser-struct-literal-body-without-path =\n+parser_struct_literal_body_without_path =\n     struct literal body without path\n     .suggestion = you might have forgotten to add the struct literal inside the block\n \n-parser-maybe-report-ambiguous-plus =\n+parser_maybe_report_ambiguous_plus =\n     ambiguous `+` in a type\n     .suggestion = use parentheses to disambiguate\n \n-parser-maybe-recover-from-bad-type-plus =\n+parser_maybe_recover_from_bad_type_plus =\n     expected a path on the left-hand side of `+`, not `{$ty}`\n \n-parser-add-paren = try adding parentheses\n+parser_add_paren = try adding parentheses\n \n-parser-forgot-paren = perhaps you forgot parentheses?\n+parser_forgot_paren = perhaps you forgot parentheses?\n \n-parser-expect-path = expected a path\n+parser_expect_path = expected a path\n \n-parser-maybe-recover-from-bad-qpath-stage-2 =\n+parser_maybe_recover_from_bad_qpath_stage_2 =\n     missing angle brackets in associated item path\n     .suggestion = try: `{$ty}`\n \n-parser-incorrect-semicolon =\n+parser_incorrect_semicolon =\n     expected item, found `;`\n     .suggestion = remove this semicolon\n     .help = {$name} declarations are not followed by a semicolon\n \n-parser-incorrect-use-of-await =\n+parser_incorrect_use_of_await =\n     incorrect use of `await`\n-    .parentheses-suggestion = `await` is not a method call, remove the parentheses\n-    .postfix-suggestion = `await` is a postfix operation\n+    .parentheses_suggestion = `await` is not a method call, remove the parentheses\n+    .postfix_suggestion = `await` is a postfix operation\n \n-parser-in-in-typo =\n+parser_in_in_typo =\n     expected iterable, found keyword `in`\n     .suggestion = remove the duplicated `in`"}, {"sha": "7374f6d3f27d3282c87816425c0dfa1611d002c1", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 114, "deletions": 114, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,178 +1,178 @@\n--passes-previously-accepted =\n+-passes_previously_accepted =\n     this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n \n--passes-see-issue =\n+-passes_see_issue =\n     see issue #{$issue} <https://github.com/rust-lang/rust/issues/{$issue}> for more information\n \n-passes-outer-crate-level-attr =\n+passes_outer_crate_level_attr =\n     crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n \n-passes-inner-crate-level-attr =\n+passes_inner_crate_level_attr =\n     crate-level attribute should be in the root module\n \n-passes-ignored-attr-with-macro = `#[{$sym}]` is ignored on struct fields, match arms and macro defs\n-    .warn = {-passes-previously-accepted}\n-    .note = {-passes-see-issue(issue: \"80564\")}\n+passes_ignored_attr_with_macro = `#[{$sym}]` is ignored on struct fields, match arms and macro defs\n+    .warn = {-passes_previously_accepted}\n+    .note = {-passes_see_issue(issue: \"80564\")}\n \n-passes-ignored-attr = `#[{$sym}]` is ignored on struct fields and match arms\n-    .warn = {-passes-previously-accepted}\n-    .note = {-passes-see-issue(issue: \"80564\")}\n+passes_ignored_attr = `#[{$sym}]` is ignored on struct fields and match arms\n+    .warn = {-passes_previously_accepted}\n+    .note = {-passes_see_issue(issue: \"80564\")}\n \n-passes-inline-ignored-function-prototype = `#[inline]` is ignored on function prototypes\n+passes_inline_ignored_function_prototype = `#[inline]` is ignored on function prototypes\n \n-passes-inline-ignored-constants = `#[inline]` is ignored on constants\n-    .warn = {-passes-previously-accepted}\n-    .note = {-passes-see-issue(issue: \"65833\")}\n+passes_inline_ignored_constants = `#[inline]` is ignored on constants\n+    .warn = {-passes_previously_accepted}\n+    .note = {-passes_see_issue(issue: \"65833\")}\n \n-passes-inline-not-fn-or-closure = attribute should be applied to function or closure\n+passes_inline_not_fn_or_closure = attribute should be applied to function or closure\n     .label = not a function or closure\n \n-passes-no-coverage-ignored-function-prototype = `#[no_coverage]` is ignored on function prototypes\n+passes_no_coverage_ignored_function_prototype = `#[no_coverage]` is ignored on function prototypes\n \n-passes-no-coverage-propagate =\n+passes_no_coverage_propagate =\n     `#[no_coverage]` does not propagate into items and must be applied to the contained functions directly\n \n-passes-no-coverage-fn-defn = `#[no_coverage]` may only be applied to function definitions\n+passes_no_coverage_fn_defn = `#[no_coverage]` may only be applied to function definitions\n \n-passes-no-coverage-not-coverable = `#[no_coverage]` must be applied to coverable code\n+passes_no_coverage_not_coverable = `#[no_coverage]` must be applied to coverable code\n     .label = not coverable code\n \n-passes-should-be-applied-to-fn = attribute should be applied to a function definition\n+passes_should_be_applied_to_fn = attribute should be applied to a function definition\n     .label = not a function definition\n \n-passes-naked-tracked-caller = cannot use `#[track_caller]` with `#[naked]`\n+passes_naked_tracked_caller = cannot use `#[track_caller]` with `#[naked]`\n \n-passes-should-be-applied-to-struct-enum = attribute should be applied to a struct or enum\n+passes_should_be_applied_to_struct_enum = attribute should be applied to a struct or enum\n     .label = not a struct or enum\n \n-passes-should-be-applied-to-trait = attribute should be applied to a trait\n+passes_should_be_applied_to_trait = attribute should be applied to a trait\n     .label = not a trait\n \n-passes-target-feature-on-statement = {passes-should-be-applied-to-fn}\n-    .warn = {-passes-previously-accepted}\n-    .label = {passes-should-be-applied-to-fn.label}\n+passes_target_feature_on_statement = {passes_should_be_applied_to_fn}\n+    .warn = {-passes_previously_accepted}\n+    .label = {passes_should_be_applied_to_fn.label}\n \n-passes-should-be-applied-to-static = attribute should be applied to a static\n+passes_should_be_applied_to_static = attribute should be applied to a static\n     .label = not a static\n \n-passes-doc-expect-str = doc {$attr_name} attribute expects a string: #[doc({$attr_name} = \"a\")]\n+passes_doc_expect_str = doc {$attr_name} attribute expects a string: #[doc({$attr_name} = \"a\")]\n \n-passes-doc-alias-empty = {$attr_str} attribute cannot have empty value\n+passes_doc_alias_empty = {$attr_str} attribute cannot have empty value\n \n-passes-doc-alias-bad-char = {$char_} character isn't allowed in {$attr_str}\n+passes_doc_alias_bad_char = {$char_} character isn't allowed in {$attr_str}\n \n-passes-doc-alias-start-end = {$attr_str} cannot start or end with ' '\n+passes_doc_alias_start_end = {$attr_str} cannot start or end with ' '\n \n-passes-doc-alias-bad-location = {$attr_str} isn't allowed on {$location}\n+passes_doc_alias_bad_location = {$attr_str} isn't allowed on {$location}\n \n-passes-doc-alias-not-an-alias = {$attr_str} is the same as the item's name\n+passes_doc_alias_not_an_alias = {$attr_str} is the same as the item's name\n \n-passes-doc-alias-duplicated = doc alias is duplicated\n+passes_doc_alias_duplicated = doc alias is duplicated\n     .label = first defined here\n \n-passes-doc-alias-not-string-literal = `#[doc(alias(\"a\"))]` expects string literals\n+passes_doc_alias_not_string_literal = `#[doc(alias(\"a\"))]` expects string literals\n \n-passes-doc-alias-malformed =\n+passes_doc_alias_malformed =\n     doc alias attribute expects a string `#[doc(alias = \"a\")]` or a list of strings `#[doc(alias(\"a\", \"b\"))]`\n \n-passes-doc-keyword-empty-mod = `#[doc(keyword = \"...\")]` should be used on empty modules\n+passes_doc_keyword_empty_mod = `#[doc(keyword = \"...\")]` should be used on empty modules\n \n-passes-doc-keyword-not-mod = `#[doc(keyword = \"...\")]` should be used on modules\n+passes_doc_keyword_not_mod = `#[doc(keyword = \"...\")]` should be used on modules\n \n-passes-doc-keyword-invalid-ident = `{$doc_keyword}` is not a valid identifier\n+passes_doc_keyword_invalid_ident = `{$doc_keyword}` is not a valid identifier\n \n-passes-doc-fake-variadic-not-valid =\n+passes_doc_fake_variadic_not_valid =\n     `#[doc(fake_variadic)]` must be used on the first of a set of tuple or fn pointer trait impls with varying arity\n \n-passes-doc-keyword-only-impl = `#[doc(keyword = \"...\")]` should be used on impl blocks\n+passes_doc_keyword_only_impl = `#[doc(keyword = \"...\")]` should be used on impl blocks\n \n-passes-doc-inline-conflict-first = this attribute...\n-passes-doc-inline-conflict-second = ...conflicts with this attribute\n-passes-doc-inline-conflict = conflicting doc inlining attributes\n+passes_doc_inline_conflict_first = this attribute...\n+passes_doc_inline_conflict_second = ...conflicts with this attribute\n+passes_doc_inline_conflict = conflicting doc inlining attributes\n     .help = remove one of the conflicting attributes\n \n-passes-doc-inline-only-use = this attribute can only be applied to a `use` item\n+passes_doc_inline_only_use = this attribute can only be applied to a `use` item\n     .label = only applicable on `use` items\n-    .not-a-use-item-label = not a `use` item\n+    .not_a_use_item_label = not a `use` item\n     .note = read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#inline-and-no_inline> for more information\n \n-passes-doc-attr-not-crate-level =\n+passes_doc_attr_not_crate_level =\n     `#![doc({$attr_name} = \"...\")]` isn't allowed as a crate-level attribute\n \n-passes-attr-crate-level = this attribute can only be applied at the crate level\n+passes_attr_crate_level = this attribute can only be applied at the crate level\n     .suggestion = to apply to the crate, use an inner attribute\n     .help = to apply to the crate, use an inner attribute\n     .note = read <https://doc.rust-lang.org/nightly/rustdoc/the-doc-attribute.html#at-the-crate-level> for more information\n \n-passes-doc-test-unknown = unknown `doc(test)` attribute `{$path}`\n+passes_doc_test_unknown = unknown `doc(test)` attribute `{$path}`\n \n-passes-doc-test-takes-list = `#[doc(test(...)]` takes a list of attributes\n+passes_doc_test_takes_list = `#[doc(test(...)]` takes a list of attributes\n \n-passes-doc-primitive = `doc(primitive)` should never have been stable\n+passes_doc_primitive = `doc(primitive)` should never have been stable\n \n-passes-doc-test-unknown-any = unknown `doc` attribute `{$path}`\n+passes_doc_test_unknown_any = unknown `doc` attribute `{$path}`\n \n-passes-doc-test-unknown-spotlight = unknown `doc` attribute `{$path}`\n+passes_doc_test_unknown_spotlight = unknown `doc` attribute `{$path}`\n     .note = `doc(spotlight)` was renamed to `doc(notable_trait)`\n     .suggestion = use `notable_trait` instead\n-    .no-op-note = `doc(spotlight)` is now a no-op\n+    .no_op_note = `doc(spotlight)` is now a no-op\n \n-passes-doc-test-unknown-include = unknown `doc` attribute `{$path}`\n+passes_doc_test_unknown_include = unknown `doc` attribute `{$path}`\n     .suggestion = use `doc = include_str!` instead\n \n-passes-doc-invalid = invalid `doc` attribute\n+passes_doc_invalid = invalid `doc` attribute\n \n-passes-pass-by-value = `pass_by_value` attribute should be applied to a struct, enum or type alias\n+passes_pass_by_value = `pass_by_value` attribute should be applied to a struct, enum or type alias\n     .label = is not a struct, enum or type alias\n \n-passes-allow-incoherent-impl =\n+passes_allow_incoherent_impl =\n     `rustc_allow_incoherent_impl` attribute should be applied to impl items.\n     .label = the only currently supported targets are inherent methods\n \n-passes-has-incoherent-inherent-impl =\n+passes_has_incoherent_inherent_impl =\n     `rustc_has_incoherent_inherent_impls` attribute should be applied to types or traits.\n     .label = only adts, extern types and traits are supported\n \n-passes-must-use-async =\n+passes_must_use_async =\n     `must_use` attribute on `async` functions applies to the anonymous `Future` returned by the function, not the value within\n     .label = this attribute does nothing, the `Future`s returned by async functions are already `must_use`\n \n-passes-must-use-no-effect = `#[must_use]` has no effect when applied to {$article} {$target}\n+passes_must_use_no_effect = `#[must_use]` has no effect when applied to {$article} {$target}\n \n-passes-must-not-suspend = `must_not_suspend` attribute should be applied to a struct, enum, or trait\n+passes_must_not_suspend = `must_not_suspend` attribute should be applied to a struct, enum, or trait\n     .label = is not a struct, enum, or trait\n \n-passes-cold = {passes-should-be-applied-to-fn}\n-    .warn = {-passes-previously-accepted}\n-    .label = {passes-should-be-applied-to-fn.label}\n+passes_cold = {passes_should_be_applied_to_fn}\n+    .warn = {-passes_previously_accepted}\n+    .label = {passes_should_be_applied_to_fn.label}\n \n-passes-link = attribute should be applied to an `extern` block with non-Rust ABI\n-    .warn = {-passes-previously-accepted}\n+passes_link = attribute should be applied to an `extern` block with non-Rust ABI\n+    .warn = {-passes_previously_accepted}\n     .label = not an `extern` block\n \n-passes-link-name = attribute should be applied to a foreign function or static\n-    .warn = {-passes-previously-accepted}\n+passes_link_name = attribute should be applied to a foreign function or static\n+    .warn = {-passes_previously_accepted}\n     .label = not a foreign function or static\n     .help = try `#[link(name = \"{$value}\")]` instead\n \n-passes-no-link = attribute should be applied to an `extern crate` item\n+passes_no_link = attribute should be applied to an `extern crate` item\n     .label = not an `extern crate` item\n \n-passes-export-name = attribute should be applied to a free function, impl method or static\n+passes_export_name = attribute should be applied to a free function, impl method or static\n     .label = not a free function, impl method or static\n \n-passes-rustc-layout-scalar-valid-range-not-struct = attribute should be applied to a struct\n+passes_rustc_layout_scalar_valid_range_not_struct = attribute should be applied to a struct\n     .label = not a struct\n \n-passes-rustc-layout-scalar-valid-range-arg = expected exactly one integer literal argument\n+passes_rustc_layout_scalar_valid_range_arg = expected exactly one integer literal argument\n \n-passes-rustc-legacy-const-generics-only = #[rustc_legacy_const_generics] functions must only have const generics\n+passes_rustc_legacy_const_generics_only = #[rustc_legacy_const_generics] functions must only have const generics\n     .label = non-const generic parameter\n \n-passes-rustc-legacy-const-generics-index = #[rustc_legacy_const_generics] must have one index for each generic parameter\n+passes_rustc_legacy_const_generics_index = #[rustc_legacy_const_generics] must have one index for each generic parameter\n     .label = generic parameters\n \n-passes-rustc-legacy-const-generics-index-exceed = index exceeds number of arguments\n+passes_rustc_legacy_const_generics_index_exceed = index exceeds number of arguments\n     .label = there {$arg_count ->\n         [one] is\n         *[other] are\n@@ -181,87 +181,87 @@ passes-rustc-legacy-const-generics-index-exceed = index exceeds number of argume\n         *[other] arguments\n     }\n \n-passes-rustc-legacy-const-generics-index-negative = arguments should be non-negative integers\n+passes_rustc_legacy_const_generics_index_negative = arguments should be non-negative integers\n \n-passes-rustc-dirty-clean = attribute requires -Z query-dep-graph to be enabled\n+passes_rustc_dirty_clean = attribute requires -Z query-dep-graph to be enabled\n \n-passes-link-section = attribute should be applied to a function or static\n-    .warn = {-passes-previously-accepted}\n+passes_link_section = attribute should be applied to a function or static\n+    .warn = {-passes_previously_accepted}\n     .label = not a function or static\n \n-passes-no-mangle-foreign = `#[no_mangle]` has no effect on a foreign {$foreign_item_kind}\n-    .warn = {-passes-previously-accepted}\n+passes_no_mangle_foreign = `#[no_mangle]` has no effect on a foreign {$foreign_item_kind}\n+    .warn = {-passes_previously_accepted}\n     .label = foreign {$foreign_item_kind}\n     .note = symbol names in extern blocks are not mangled\n     .suggestion = remove this attribute\n \n-passes-no-mangle = attribute should be applied to a free function, impl method or static\n-    .warn = {-passes-previously-accepted}\n+passes_no_mangle = attribute should be applied to a free function, impl method or static\n+    .warn = {-passes_previously_accepted}\n     .label = not a free function, impl method or static\n \n-passes-repr-ident = meta item in `repr` must be an identifier\n+passes_repr_ident = meta item in `repr` must be an identifier\n \n-passes-repr-conflicting = conflicting representation hints\n+passes_repr_conflicting = conflicting representation hints\n \n-passes-used-static = attribute must be applied to a `static` variable\n+passes_used_static = attribute must be applied to a `static` variable\n \n-passes-used-compiler-linker = `used(compiler)` and `used(linker)` can't be used together\n+passes_used_compiler_linker = `used(compiler)` and `used(linker)` can't be used together\n \n-passes-allow-internal-unstable = attribute should be applied to a macro\n+passes_allow_internal_unstable = attribute should be applied to a macro\n     .label = not a macro\n \n-passes-debug-visualizer-placement = attribute should be applied to a module\n+passes_debug_visualizer_placement = attribute should be applied to a module\n \n-passes-debug-visualizer-invalid = invalid argument\n-    .note-1 = expected: `natvis_file = \"...\"`\n-    .note-2 = OR\n-    .note-3 = expected: `gdb_script_file = \"...\"`\n+passes_debug_visualizer_invalid = invalid argument\n+    .note_1 = expected: `natvis_file = \"...\"`\n+    .note_2 = OR\n+    .note_3 = expected: `gdb_script_file = \"...\"`\n \n-passes-rustc-allow-const-fn-unstable = attribute should be applied to `const fn`\n+passes_rustc_allow_const_fn_unstable = attribute should be applied to `const fn`\n     .label = not a `const fn`\n \n-passes-rustc-std-internal-symbol = attribute should be applied to functions or statics\n+passes_rustc_std_internal_symbol = attribute should be applied to functions or statics\n     .label = not a function or static\n \n-passes-const-trait = attribute should be applied to a trait\n+passes_const_trait = attribute should be applied to a trait\n \n-passes-stability-promotable = attribute cannot be applied to an expression\n+passes_stability_promotable = attribute cannot be applied to an expression\n \n-passes-deprecated = attribute is ignored here\n+passes_deprecated = attribute is ignored here\n \n-passes-macro-use = `#[{$name}]` only has an effect on `extern crate` and modules\n+passes_macro_use = `#[{$name}]` only has an effect on `extern crate` and modules\n \n-passes-macro-export = `#[macro_export]` only has an effect on macro definitions\n+passes_macro_export = `#[macro_export]` only has an effect on macro definitions\n \n-passes-plugin-registrar = `#[plugin_registrar]` only has an effect on functions\n+passes_plugin_registrar = `#[plugin_registrar]` only has an effect on functions\n \n-passes-unused-empty-lints-note = attribute `{$name}` with an empty list has no effect\n+passes_unused_empty_lints_note = attribute `{$name}` with an empty list has no effect\n \n-passes-unused-no-lints-note = attribute `{$name}` without any lints has no effect\n+passes_unused_no_lints_note = attribute `{$name}` without any lints has no effect\n \n-passes-unused-default-method-body-const-note =\n+passes_unused_default_method_body_const_note =\n     `default_method_body_is_const` has been replaced with `#[const_trait]` on traits\n \n-passes-unused = unused attribute\n+passes_unused = unused attribute\n     .suggestion = remove this attribute\n \n-passes-non-exported-macro-invalid-attrs = attribute should be applied to function or closure\n+passes_non_exported_macro_invalid_attrs = attribute should be applied to function or closure\n     .label = not a function or closure\n \n-passes-unused-duplicate = unused attribute\n+passes_unused_duplicate = unused attribute\n     .suggestion = remove this attribute\n     .note = attribute also specified here\n-    .warn = {-passes-previously-accepted}\n+    .warn = {-passes_previously_accepted}\n \n-passes-unused-multiple = multiple `{$name}` attributes\n+passes_unused_multiple = multiple `{$name}` attributes\n     .suggestion = remove this attribute\n     .note = attribute also specified here\n \n-passes-rustc-lint-opt-ty = `#[rustc_lint_opt_ty]` should be applied to a struct\n+passes_rustc_lint_opt_ty = `#[rustc_lint_opt_ty]` should be applied to a struct\n     .label = not a struct\n \n-passes-rustc-lint-opt-deny-field-access = `#[rustc_lint_opt_deny_field_access]` should be applied to a field\n+passes_rustc_lint_opt_deny_field_access = `#[rustc_lint_opt_deny_field_access]` should be applied to a field\n     .label = not a field\n \n-passes-link-ordinal = attribute should be applied to a foreign function or static\n-    .label = not a foreign function or static\n\\ No newline at end of file\n+passes_link_ordinal = attribute should be applied to a foreign function or static\n+    .label = not a foreign function or static"}, {"sha": "97050635f45bf4fd751d3e269353392757aa8bc3", "filename": "compiler/rustc_error_messages/locales/en-US/privacy.ftl", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,20 +1,20 @@\n-privacy-field-is-private = field `{$field_name}` of {$variant_descr} `{$def_path_str}` is private\n-privacy-field-is-private-is-update-syntax-label = field `{$field_name}` is private\n-privacy-field-is-private-label = private field\n+privacy_field_is_private = field `{$field_name}` of {$variant_descr} `{$def_path_str}` is private\n+privacy_field_is_private_is_update_syntax_label = field `{$field_name}` is private\n+privacy_field_is_private_label = private field\n \n-privacy-item-is-private = {$kind} `{$descr}` is private\n+privacy_item_is_private = {$kind} `{$descr}` is private\n     .label = private {$kind}\n-privacy-unnamed-item-is-private = {$kind} is private\n+privacy_unnamed_item_is_private = {$kind} is private\n     .label = private {$kind}\n \n-privacy-in-public-interface = {$vis_descr} {$kind} `{$descr}` in public interface\n+privacy_in_public_interface = {$vis_descr} {$kind} `{$descr}` in public interface\n     .label = can't leak {$vis_descr} {$kind}\n-    .visibility-label = `{$descr}` declared as {$vis_descr}\n+    .visibility_label = `{$descr}` declared as {$vis_descr}\n \n-privacy-from-private-dep-in-public-interface =\n+privacy_from_private_dep_in_public_interface =\n     {$kind} `{$descr}` from private dependency '{$krate}' in public interface\n \n-private-in-public-lint =\n+private_in_public_lint =\n     {$vis_descr} {$kind} `{$descr}` in public interface (error {$kind ->\n         [trait] E0445\n         *[other] E0446"}, {"sha": "494b8f913934f9c2f0bc165b10f75f8aba646d81", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,101 +1,101 @@\n-typeck-field-multiply-specified-in-initializer =\n+typeck_field_multiply_specified_in_initializer =\n     field `{$ident}` specified more than once\n     .label = used more than once\n-    .previous-use-label = first use of `{$ident}`\n+    .previous_use_label = first use of `{$ident}`\n \n-typeck-unrecognized-atomic-operation =\n+typeck_unrecognized_atomic_operation =\n     unrecognized atomic operation function: `{$op}`\n     .label = unrecognized atomic operation\n \n-typeck-wrong-number-of-generic-arguments-to-intrinsic =\n+typeck_wrong_number_of_generic_arguments_to_intrinsic =\n     intrinsic has wrong number of {$descr} parameters: found {$found}, expected {$expected}\n     .label = expected {$expected} {$descr} {$expected ->\n         [one] parameter\n         *[other] parameters\n     }\n \n-typeck-unrecognized-intrinsic-function =\n+typeck_unrecognized_intrinsic_function =\n     unrecognized intrinsic function: `{$name}`\n     .label = unrecognized intrinsic\n \n-typeck-lifetimes-or-bounds-mismatch-on-trait =\n+typeck_lifetimes_or_bounds_mismatch_on_trait =\n     lifetime parameters or bounds on {$item_kind} `{$ident}` do not match the trait declaration\n     .label = lifetimes do not match {$item_kind} in trait\n-    .generics-label = lifetimes in impl do not match this {$item_kind} in trait\n+    .generics_label = lifetimes in impl do not match this {$item_kind} in trait\n \n-typeck-drop-impl-on-wrong-item =\n+typeck_drop_impl_on_wrong_item =\n     the `Drop` trait may only be implemented for structs, enums, and unions\n     .label = must be a struct, enum, or union\n \n-typeck-field-already-declared =\n+typeck_field_already_declared =\n     field `{$field_name}` is already declared\n     .label = field already declared\n-    .previous-decl-label = `{$field_name}` first declared here\n+    .previous_decl_label = `{$field_name}` first declared here\n \n-typeck-copy-impl-on-type-with-dtor =\n+typeck_copy_impl_on_type_with_dtor =\n     the trait `Copy` may not be implemented for this type; the type has a destructor\n     .label = `Copy` not allowed on types with destructors\n \n-typeck-multiple-relaxed-default-bounds =\n+typeck_multiple_relaxed_default_bounds =\n     type parameter has more than one relaxed default bound, only one is supported\n \n-typeck-copy-impl-on-non-adt =\n+typeck_copy_impl_on_non_adt =\n     the trait `Copy` may not be implemented for this type\n     .label = type is not a structure or enumeration\n \n-typeck-trait-object-declared-with-no-traits =\n+typeck_trait_object_declared_with_no_traits =\n     at least one trait is required for an object type\n-    .alias-span = this alias does not contain a trait\n+    .alias_span = this alias does not contain a trait\n \n-typeck-ambiguous-lifetime-bound =\n+typeck_ambiguous_lifetime_bound =\n     ambiguous lifetime bound, explicit lifetime bound required\n \n-typeck-assoc-type-binding-not-allowed =\n+typeck_assoc_type_binding_not_allowed =\n     associated type bindings are not allowed here\n     .label = associated type not allowed here\n \n-typeck-functional-record-update-on-non-struct =\n+typeck_functional_record_update_on_non_struct =\n     functional record update syntax requires a struct\n \n-typeck-typeof-reserved-keyword-used =\n+typeck_typeof_reserved_keyword_used =\n     `typeof` is a reserved keyword but unimplemented\n     .suggestion = consider replacing `typeof(...)` with an actual type\n     .label = reserved keyword\n \n-typeck-return-stmt-outside-of-fn-body =\n+typeck_return_stmt_outside_of_fn_body =\n     return statement outside of function body\n-    .encl-body-label = the return is part of this body...\n-    .encl-fn-label = ...not the enclosing function body\n+    .encl_body_label = the return is part of this body...\n+    .encl_fn_label = ...not the enclosing function body\n \n-typeck-yield-expr-outside-of-generator =\n+typeck_yield_expr_outside_of_generator =\n     yield expression outside of generator literal\n \n-typeck-struct-expr-non-exhaustive =\n+typeck_struct_expr_non_exhaustive =\n     cannot create non-exhaustive {$what} using struct expression\n \n-typeck-method-call-on-unknown-type =\n+typeck_method_call_on_unknown_type =\n     the type of this value must be known to call a method on a raw pointer on it\n \n-typeck-value-of-associated-struct-already-specified =\n+typeck_value_of_associated_struct_already_specified =\n     the value of the associated type `{$item_name}` (from trait `{$def_path}`) is already specified\n     .label = re-bound here\n-    .previous-bound-label = `{$item_name}` bound here first\n+    .previous_bound_label = `{$item_name}` bound here first\n \n-typeck-address-of-temporary-taken = cannot take address of a temporary\n+typeck_address_of_temporary_taken = cannot take address of a temporary\n     .label = temporary value\n \n-typeck-add-return-type-add = try adding a return type\n+typeck_add_return_type_add = try adding a return type\n \n-typeck-add-return-type-missing-here = a return type might be missing here\n+typeck_add_return_type_missing_here = a return type might be missing here\n \n-typeck-expected-default-return-type = expected `()` because of default return type\n+typeck_expected_default_return_type = expected `()` because of default return type\n \n-typeck-expected-return-type = expected `{$expected}` because of return type\n+typeck_expected_return_type = expected `{$expected}` because of return type\n \n-typeck-unconstrained-opaque-type = unconstrained opaque type\n+typeck_unconstrained_opaque_type = unconstrained opaque type\n     .note = `{$name}` must be used in combination with a concrete type within the same module\n \n-typeck-missing-type-params =\n+typeck_missing_type_params =\n     the type {$parameterCount ->\n         [one] parameter\n         *[other] parameters\n@@ -111,15 +111,15 @@ typeck-missing-type-params =\n         [one] type\n         *[other] types\n     }\n-    .no-suggestion-label = missing {$parameterCount ->\n+    .no_suggestion_label = missing {$parameterCount ->\n         [one] reference\n         *[other] references\n     } to {$parameters}\n     .note = because of the default `Self` reference, type parameters must be specified on object types\n \n-typeck-manual-implementation =\n+typeck_manual_implementation =\n     manual implementations of `{$trait_name}` are experimental\n     .label = manual implementations of `{$trait_name}` are experimental\n     .help = add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-typeck-substs-on-overridden-impl = could not resolve substs on overridden impl\n+typeck_substs_on_overridden_impl = could not resolve substs on overridden impl"}, {"sha": "2e7652ad333ffcdeafdeb5b87c7e8ddc17fee5a7", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -189,13 +189,25 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n             if let Entry::Message(Message { id: Identifier { name }, attributes, .. }) = entry {\n                 let _ = previous_defns.entry(name.to_string()).or_insert(ident_span);\n \n-                // `typeck-foo-bar` => `foo_bar` (in `typeck.ftl`)\n-                // `const-eval-baz` => `baz` (in `const_eval.ftl`)\n+                if name.contains('-') {\n+                    Diagnostic::spanned(\n+                        ident_span,\n+                        Level::Error,\n+                        format!(\"name `{name}` contains a '-' character\"),\n+                    )\n+                    .help(\"replace any '-'s with '_'s\")\n+                    .emit();\n+                }\n+\n+                // `typeck_foo_bar` => `foo_bar` (in `typeck.ftl`)\n+                // `const_eval_baz` => `baz` (in `const_eval.ftl`)\n+                // `const-eval-hyphen-having` => `hyphen_having` (in `const_eval.ftl`)\n+                // The last case we error about above, but we want to fall back gracefully\n+                // so that only the error is being emitted and not also one about the macro\n+                // failing.\n                 let snake_name = Ident::new(\n                     // FIXME: should probably trim prefix, not replace all occurrences\n-                    &name\n-                        .replace(&format!(\"{}-\", res.ident).replace('_', \"-\"), \"\")\n-                        .replace('-', \"_\"),\n+                    &name.replace('-', \"_\").replace(&format!(\"{}_\", res.ident), \"\"),\n                     span,\n                 );\n                 constants.extend(quote! {\n@@ -212,6 +224,16 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n                         continue;\n                     }\n \n+                    if attr_name.contains('-') {\n+                        Diagnostic::spanned(\n+                            ident_span,\n+                            Level::Error,\n+                            format!(\"attribute `{attr_name}` contains a '-' character\"),\n+                        )\n+                        .help(\"replace any '-'s with '_'s\")\n+                        .emit();\n+                    }\n+\n                     constants.extend(quote! {\n                         pub const #snake_name: crate::SubdiagnosticMessage =\n                             crate::SubdiagnosticMessage::FluentAttr("}, {"sha": "733454cb2a7471d7634d62aa18843f4e78dced85", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -38,9 +38,9 @@ use synstructure::Structure;\n /// ```\n ///\n /// ```fluent\n-/// move-out-of-borrow = cannot move out of {$name} because it is borrowed\n+/// move_out_of_borrow = cannot move out of {$name} because it is borrowed\n ///     .label = cannot move out of borrow\n-///     .first-borrow-label = `{$ty}` first borrowed here\n+///     .first_borrow_label = `{$ty}` first borrowed here\n ///     .suggestion = consider cloning here\n /// ```\n ///\n@@ -84,9 +84,9 @@ pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// ```\n ///\n /// ```fluent\n-/// lint-atomic-ordering-invalid-fail-success = `{$method}`'s success ordering must be at least as strong as its failure ordering\n-///     .fail-label = `{$fail_ordering}` failure ordering\n-///     .success-label = `{$success_ordering}` success ordering\n+/// lint_atomic_ordering_invalid_fail_success = `{$method}`'s success ordering must be at least as strong as its failure ordering\n+///     .fail_label = `{$fail_ordering}` failure ordering\n+///     .success_label = `{$success_ordering}` success ordering\n ///     .suggestion = consider using `{$success_suggestion}` success ordering instead\n /// ```\n ///\n@@ -140,11 +140,11 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// ```\n ///\n /// ```fluent\n-/// parser-expected-identifier = expected identifier\n+/// parser_expected_identifier = expected identifier\n ///\n-/// parser-expected-identifier-found = expected identifier, found {$found}\n+/// parser_expected_identifier-found = expected identifier, found {$found}\n ///\n-/// parser-raw-identifier = escape `{$ident}` to use it as an identifier\n+/// parser_raw_identifier = escape `{$ident}` to use it as an identifier\n /// ```\n ///\n /// Then, later, to add the subdiagnostic:"}, {"sha": "2f9c13cf817ee7d185ba09ac514989feffcb0a96", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -65,10 +65,10 @@ pub fn newtype_index(input: TokenStream) -> TokenStream {\n /// ..where `typeck.ftl` has the following contents..\n ///\n /// ```fluent\n-/// typeck-field-multiply-specified-in-initializer =\n+/// typeck_field_multiply_specified_in_initializer =\n ///     field `{$ident}` specified more than once\n ///     .label = used more than once\n-///     .label-previous-use = first use of `{$ident}`\n+///     .label_previous_use = first use of `{$ident}`\n /// ```\n /// ...then the macro parse the Fluent resource, emitting a diagnostic if it fails to do so, and\n /// will generate the following code:\n@@ -81,11 +81,11 @@ pub fn newtype_index(input: TokenStream) -> TokenStream {\n /// mod fluent_generated {\n ///     mod typeck {\n ///         pub const field_multiply_specified_in_initializer: DiagnosticMessage =\n-///             DiagnosticMessage::fluent(\"typeck-field-multiply-specified-in-initializer\");\n+///             DiagnosticMessage::fluent(\"typeck_field_multiply_specified_in_initializer\");\n ///         pub const field_multiply_specified_in_initializer_label_previous_use: DiagnosticMessage =\n ///             DiagnosticMessage::fluent_attr(\n-///                 \"typeck-field-multiply-specified-in-initializer\",\n-///                 \"previous-use-label\"\n+///                 \"typeck_field_multiply_specified_in_initializer\",\n+///                 \"previous_use_label\"\n ///             );\n ///     }\n /// }"}, {"sha": "4e358583528ee81fa49bfb3cd2d942fdf94b5543", "filename": "src/test/run-make/translation/broken.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Frun-make%2Ftranslation%2Fbroken.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Frun-make%2Ftranslation%2Fbroken.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fbroken.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,3 +1,3 @@\n # `foo` isn't provided by this diagnostic so it is expected that the fallback message is used.\n-parser-struct-literal-body-without-path = this is a {$foo} message\n+parser_struct_literal_body_without_path = this is a {$foo} message\n     .suggestion = this is a test suggestion"}, {"sha": "77bbda3575b55339b6595d0f9eebccfb6989c353", "filename": "src/test/run-make/translation/missing.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Frun-make%2Ftranslation%2Fmissing.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Frun-make%2Ftranslation%2Fmissing.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fmissing.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,3 +1,3 @@\n-# `parser-struct-literal-body-without-path` isn't provided by this resource at all, so the\n+# `parser_struct_literal_body_without_path` isn't provided by this resource at all, so the\n # fallback should be used.\n foo = bar"}, {"sha": "d5ea8673875eeef77a0527fe4f12dd0b0afaa147", "filename": "src/test/run-make/translation/working.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Frun-make%2Ftranslation%2Fworking.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Frun-make%2Ftranslation%2Fworking.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2Fworking.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1,2 +1,2 @@\n-parser-struct-literal-body-without-path = this is a test message\n+parser_struct_literal_body_without_path = this is a test message\n     .suggestion = this is a test suggestion"}, {"sha": "84b6c3e6c005581f5a9be0476884e9f8fa18086b", "filename": "src/test/ui-fulldeps/fluent-messages/label-with-hyphens.ftl", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Flabel-with-hyphens.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Flabel-with-hyphens.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Flabel-with-hyphens.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -0,0 +1,2 @@\n+some_slug = hi\n+    .label-has-hyphens = test"}, {"sha": "74b2aa1d44d1f9552a039d1b90b7ad4042c63dd3", "filename": "src/test/ui-fulldeps/fluent-messages/missing-message.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -1 +1 @@\n-missing-message = \n+missing_message ="}, {"sha": "07517c9a2434f3611ae027877327a05d233cf0d6", "filename": "src/test/ui-fulldeps/fluent-messages/slug-with-hyphens.ftl", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fslug-with-hyphens.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fslug-with-hyphens.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fslug-with-hyphens.ftl?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -0,0 +1 @@\n+this-slug-has-hyphens = hi"}, {"sha": "f0f35780666bbdd07a98ed3ae15488ea6c721f65", "filename": "src/test/ui-fulldeps/fluent-messages/test.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -55,6 +55,24 @@ mod duplicate {\n     }\n }\n \n+mod slug_with_hyphens {\n+    use super::fluent_messages;\n+\n+    fluent_messages! {\n+        slug_with_hyphens => \"./slug-with-hyphens.ftl\",\n+//~^ ERROR name `this-slug-has-hyphens` contains a '-' character\n+    }\n+}\n+\n+mod label_with_hyphens {\n+    use super::fluent_messages;\n+\n+    fluent_messages! {\n+        label_with_hyphens => \"./label-with-hyphens.ftl\",\n+//~^ ERROR attribute `label-has-hyphens` contains a '-' character\n+    }\n+}\n+\n mod valid {\n     use super::fluent_messages;\n "}, {"sha": "856642c4818da2058a55b5d9b1443fa0593c02a9", "filename": "src/test/ui-fulldeps/fluent-messages/test.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3aa5734a2cf8d401ec7d194c87978f4a1231bb9d/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr?ref=3aa5734a2cf8d401ec7d194c87978f4a1231bb9d", "patch": "@@ -22,11 +22,11 @@ LL |         missing_message => \"./missing-message.ftl\",\n    |\n    = help: see additional errors emitted\n \n-error: expected a message field for \"missing-message\"\n+error: expected a message field for \"missing_message\"\n  --> ./missing-message.ftl:1:1\n   |\n-1 | missing-message = \n-  | ^^^^^^^^^^^^^^^^^^\n+1 | missing_message =\n+  | ^^^^^^^^^^^^^^^^^\n   |\n \n error: overrides existing message: `key`\n@@ -41,5 +41,21 @@ help: previously defined in this resource\n LL |         a => \"./duplicate-a.ftl\",\n    |         ^\n \n-error: aborting due to 4 previous errors\n+error: name `this-slug-has-hyphens` contains a '-' character\n+  --> $DIR/test.rs:62:9\n+   |\n+LL |         slug_with_hyphens => \"./slug-with-hyphens.ftl\",\n+   |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: replace any '-'s with '_'s\n+\n+error: attribute `label-has-hyphens` contains a '-' character\n+  --> $DIR/test.rs:71:9\n+   |\n+LL |         label_with_hyphens => \"./label-with-hyphens.ftl\",\n+   |         ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: replace any '-'s with '_'s\n+\n+error: aborting due to 6 previous errors\n "}]}