{"sha": "864b650f92388f4e82d130713b2de9afe637102f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NGI2NTBmOTIzODhmNGU4MmQxMzA3MTNiMmRlOWFmZTYzNzEwMmY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-16T17:20:29Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-24T14:53:16Z"}, "message": "ItemTree: use a newtyped ID", "tree": {"sha": "69992bdf294e113fec48bb7f1eb55804143c4d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69992bdf294e113fec48bb7f1eb55804143c4d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/864b650f92388f4e82d130713b2de9afe637102f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/864b650f92388f4e82d130713b2de9afe637102f", "html_url": "https://github.com/rust-lang/rust/commit/864b650f92388f4e82d130713b2de9afe637102f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/864b650f92388f4e82d130713b2de9afe637102f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "278556f9fe8240f0c76daaaf8dcf7ee7f516e4af", "url": "https://api.github.com/repos/rust-lang/rust/commits/278556f9fe8240f0c76daaaf8dcf7ee7f516e4af", "html_url": "https://github.com/rust-lang/rust/commit/278556f9fe8240f0c76daaaf8dcf7ee7f516e4af"}], "stats": {"total": 183, "additions": 130, "deletions": 53}, "files": [{"sha": "9656f845e9f8b107a2f0f2a3c2cc48f62eada8a7", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 104, "deletions": 32, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/864b650f92388f4e82d130713b2de9afe637102f/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b650f92388f4e82d130713b2de9afe637102f/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=864b650f92388f4e82d130713b2de9afe637102f", "patch": "@@ -3,6 +3,9 @@\n mod lower;\n \n use std::{\n+    fmt::{self, Debug},\n+    hash::{Hash, Hasher},\n+    marker::PhantomData,\n     ops::{Index, Range},\n     sync::Arc,\n };\n@@ -109,6 +112,68 @@ impl ItemTree {\n     }\n }\n \n+pub trait ItemTreeNode: Sized {\n+    fn lookup(tree: &ItemTree, index: Idx<Self>) -> &Self;\n+}\n+\n+pub struct FileItemTreeId<N: ItemTreeNode> {\n+    index: Idx<N>,\n+    _p: PhantomData<N>,\n+}\n+\n+impl<N: ItemTreeNode> Clone for FileItemTreeId<N> {\n+    fn clone(&self) -> Self {\n+        Self { index: self.index, _p: PhantomData }\n+    }\n+}\n+impl<N: ItemTreeNode> Copy for FileItemTreeId<N> {}\n+\n+impl<N: ItemTreeNode> PartialEq for FileItemTreeId<N> {\n+    fn eq(&self, other: &FileItemTreeId<N>) -> bool {\n+        self.index == other.index\n+    }\n+}\n+impl<N: ItemTreeNode> Eq for FileItemTreeId<N> {}\n+\n+impl<N: ItemTreeNode> Hash for FileItemTreeId<N> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.index.hash(state)\n+    }\n+}\n+\n+impl<N: ItemTreeNode> fmt::Debug for FileItemTreeId<N> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.index.fmt(f)\n+    }\n+}\n+\n+pub type ItemTreeId<N> = InFile<FileItemTreeId<N>>;\n+\n+macro_rules! nodes {\n+    ( $($node:ident in $fld:ident),+ $(,)? ) => { $(\n+        impl ItemTreeNode for $node {\n+            fn lookup(tree: &ItemTree, index: Idx<Self>) -> &Self {\n+                &tree.$fld[index]\n+            }\n+        }\n+    )+ };\n+}\n+\n+nodes!(\n+    Import in imports,\n+    Function in functions,\n+    Struct in structs,\n+    Union in unions,\n+    Enum in enums,\n+    Const in consts,\n+    Static in statics,\n+    Trait in traits,\n+    Impl in impls,\n+    TypeAlias in type_aliases,\n+    Mod in mods,\n+    MacroCall in macro_calls,\n+);\n+\n macro_rules! impl_index {\n     ( $($fld:ident: $t:ty),+ $(,)? ) => {\n         $(\n@@ -141,6 +206,13 @@ impl_index!(\n     exprs: Expr,\n );\n \n+impl<N: ItemTreeNode> Index<FileItemTreeId<N>> for ItemTree {\n+    type Output = N;\n+    fn index(&self, id: FileItemTreeId<N>) -> &N {\n+        N::lookup(self, id.index)\n+    }\n+}\n+\n /// A desugared `extern crate` or `use` import.\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Import {\n@@ -304,48 +376,48 @@ macro_rules! impl_froms {\n \n #[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n pub enum ModItem {\n-    Import(Idx<Import>),\n-    Function(Idx<Function>),\n-    Struct(Idx<Struct>),\n-    Union(Idx<Union>),\n-    Enum(Idx<Enum>),\n-    Const(Idx<Const>),\n-    Static(Idx<Static>),\n-    Trait(Idx<Trait>),\n-    Impl(Idx<Impl>),\n-    TypeAlias(Idx<TypeAlias>),\n-    Mod(Idx<Mod>),\n-    MacroCall(Idx<MacroCall>),\n+    Import(FileItemTreeId<Import>),\n+    Function(FileItemTreeId<Function>),\n+    Struct(FileItemTreeId<Struct>),\n+    Union(FileItemTreeId<Union>),\n+    Enum(FileItemTreeId<Enum>),\n+    Const(FileItemTreeId<Const>),\n+    Static(FileItemTreeId<Static>),\n+    Trait(FileItemTreeId<Trait>),\n+    Impl(FileItemTreeId<Impl>),\n+    TypeAlias(FileItemTreeId<TypeAlias>),\n+    Mod(FileItemTreeId<Mod>),\n+    MacroCall(FileItemTreeId<MacroCall>),\n }\n \n impl_froms!(ModItem {\n-    Import(Idx<Import>),\n-    Function(Idx<Function>),\n-    Struct(Idx<Struct>),\n-    Union(Idx<Union>),\n-    Enum(Idx<Enum>),\n-    Const(Idx<Const>),\n-    Static(Idx<Static>),\n-    Trait(Idx<Trait>),\n-    Impl(Idx<Impl>),\n-    TypeAlias(Idx<TypeAlias>),\n-    Mod(Idx<Mod>),\n-    MacroCall(Idx<MacroCall>),\n+    Import(FileItemTreeId<Import>),\n+    Function(FileItemTreeId<Function>),\n+    Struct(FileItemTreeId<Struct>),\n+    Union(FileItemTreeId<Union>),\n+    Enum(FileItemTreeId<Enum>),\n+    Const(FileItemTreeId<Const>),\n+    Static(FileItemTreeId<Static>),\n+    Trait(FileItemTreeId<Trait>),\n+    Impl(FileItemTreeId<Impl>),\n+    TypeAlias(FileItemTreeId<TypeAlias>),\n+    Mod(FileItemTreeId<Mod>),\n+    MacroCall(FileItemTreeId<MacroCall>),\n });\n \n #[derive(Debug, Eq, PartialEq)]\n pub enum AssocItem {\n-    Function(Idx<Function>),\n-    TypeAlias(Idx<TypeAlias>),\n-    Const(Idx<Const>),\n-    MacroCall(Idx<MacroCall>),\n+    Function(FileItemTreeId<Function>),\n+    TypeAlias(FileItemTreeId<TypeAlias>),\n+    Const(FileItemTreeId<Const>),\n+    MacroCall(FileItemTreeId<MacroCall>),\n }\n \n impl_froms!(AssocItem {\n-    Function(Idx<Function>),\n-    TypeAlias(Idx<TypeAlias>),\n-    Const(Idx<Const>),\n-    MacroCall(Idx<MacroCall>),\n+    Function(FileItemTreeId<Function>),\n+    TypeAlias(FileItemTreeId<TypeAlias>),\n+    Const(FileItemTreeId<Const>),\n+    MacroCall(FileItemTreeId<MacroCall>),\n });\n \n #[derive(Debug, Eq, PartialEq)]"}, {"sha": "0c9454848cef3da7f9e24175b6410748a7b9a585", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/864b650f92388f4e82d130713b2de9afe637102f/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b650f92388f4e82d130713b2de9afe637102f/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=864b650f92388f4e82d130713b2de9afe637102f", "patch": "@@ -5,6 +5,10 @@ use ra_syntax::ast::{self, ModuleItemOwner};\n use smallvec::SmallVec;\n use std::sync::Arc;\n \n+fn id<N: ItemTreeNode>(index: Idx<N>) -> FileItemTreeId<N> {\n+    FileItemTreeId { index, _p: PhantomData }\n+}\n+\n struct ModItems(SmallVec<[ModItem; 1]>);\n \n impl<T> From<T> for ModItems\n@@ -38,54 +42,54 @@ impl Ctx {\n         let attrs = Attrs::new(item, &self.hygiene);\n         let items = match item {\n             ast::ModuleItem::StructDef(ast) => {\n-                self.lower_struct(ast).map(|data| self.tree.structs.alloc(data).into())\n+                self.lower_struct(ast).map(|data| id(self.tree.structs.alloc(data)).into())\n             }\n             ast::ModuleItem::UnionDef(ast) => {\n-                self.lower_union(ast).map(|data| self.tree.unions.alloc(data).into())\n+                self.lower_union(ast).map(|data| id(self.tree.unions.alloc(data)).into())\n             }\n             ast::ModuleItem::EnumDef(ast) => {\n-                self.lower_enum(ast).map(|data| self.tree.enums.alloc(data).into())\n+                self.lower_enum(ast).map(|data| id(self.tree.enums.alloc(data)).into())\n             }\n             ast::ModuleItem::FnDef(ast) => {\n-                self.lower_function(ast).map(|data| self.tree.functions.alloc(data).into())\n+                self.lower_function(ast).map(|data| id(self.tree.functions.alloc(data)).into())\n             }\n             ast::ModuleItem::TypeAliasDef(ast) => {\n-                self.lower_type_alias(ast).map(|data| self.tree.type_aliases.alloc(data).into())\n+                self.lower_type_alias(ast).map(|data| id(self.tree.type_aliases.alloc(data)).into())\n             }\n             ast::ModuleItem::StaticDef(ast) => {\n-                self.lower_static(ast).map(|data| self.tree.statics.alloc(data).into())\n+                self.lower_static(ast).map(|data| id(self.tree.statics.alloc(data)).into())\n             }\n             ast::ModuleItem::ConstDef(ast) => {\n                 let data = self.lower_const(ast);\n-                Some(self.tree.consts.alloc(data).into())\n+                Some(id(self.tree.consts.alloc(data)).into())\n             }\n             ast::ModuleItem::Module(ast) => {\n-                self.lower_module(ast).map(|data| self.tree.mods.alloc(data).into())\n+                self.lower_module(ast).map(|data| id(self.tree.mods.alloc(data)).into())\n             }\n             ast::ModuleItem::TraitDef(ast) => {\n-                self.lower_trait(ast).map(|data| self.tree.traits.alloc(data).into())\n+                self.lower_trait(ast).map(|data| id(self.tree.traits.alloc(data)).into())\n             }\n             ast::ModuleItem::ImplDef(ast) => {\n-                self.lower_impl(ast).map(|data| self.tree.impls.alloc(data).into())\n+                self.lower_impl(ast).map(|data| id(self.tree.impls.alloc(data)).into())\n             }\n             ast::ModuleItem::UseItem(ast) => Some(ModItems(\n                 self.lower_use(ast)\n                     .into_iter()\n-                    .map(|data| self.tree.imports.alloc(data).into())\n+                    .map(|data| id(self.tree.imports.alloc(data)).into())\n                     .collect::<SmallVec<_>>(),\n             )),\n             ast::ModuleItem::ExternCrateItem(ast) => {\n-                self.lower_extern_crate(ast).map(|data| self.tree.imports.alloc(data).into())\n+                self.lower_extern_crate(ast).map(|data| id(self.tree.imports.alloc(data)).into())\n             }\n             ast::ModuleItem::MacroCall(ast) => {\n-                self.lower_macro_call(ast).map(|data| self.tree.macro_calls.alloc(data).into())\n+                self.lower_macro_call(ast).map(|data| id(self.tree.macro_calls.alloc(data)).into())\n             }\n             ast::ModuleItem::ExternBlock(ast) => Some(ModItems(\n                 self.lower_extern_block(ast)\n                     .into_iter()\n                     .map(|item| match item {\n-                        Either::Left(func) => self.tree.functions.alloc(func).into(),\n-                        Either::Right(statik) => self.tree.statics.alloc(statik).into(),\n+                        Either::Left(func) => id(self.tree.functions.alloc(func)).into(),\n+                        Either::Right(statik) => id(self.tree.statics.alloc(statik)).into(),\n                     })\n                     .collect::<SmallVec<_>>(),\n             )),\n@@ -103,14 +107,14 @@ impl Ctx {\n     fn lower_assoc_item(&mut self, item: &ast::AssocItem) -> Option<AssocItem> {\n         match item {\n             ast::AssocItem::FnDef(ast) => {\n-                self.lower_function(ast).map(|data| self.tree.functions.alloc(data).into())\n+                self.lower_function(ast).map(|data| id(self.tree.functions.alloc(data)).into())\n             }\n             ast::AssocItem::TypeAliasDef(ast) => {\n-                self.lower_type_alias(ast).map(|data| self.tree.type_aliases.alloc(data).into())\n+                self.lower_type_alias(ast).map(|data| id(self.tree.type_aliases.alloc(data)).into())\n             }\n             ast::AssocItem::ConstDef(ast) => {\n                 let data = self.lower_const(ast);\n-                Some(self.tree.consts.alloc(data).into())\n+                Some(id(self.tree.consts.alloc(data)).into())\n             }\n         }\n     }"}, {"sha": "c227b6da191163678c3ca0a21d83eb0daa54ae8c", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/864b650f92388f4e82d130713b2de9afe637102f/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/864b650f92388f4e82d130713b2de9afe637102f/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=864b650f92388f4e82d130713b2de9afe637102f", "patch": "@@ -20,7 +20,9 @@ use test_utils::mark;\n use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n-    item_tree::{Import, ItemTree, MacroCall, Mod, ModItem, ModKind, StructDefKind},\n+    item_tree::{\n+        FileItemTreeId, Import, ItemTree, MacroCall, Mod, ModItem, ModKind, StructDefKind,\n+    },\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n         BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, ResolveMode,\n@@ -32,7 +34,6 @@ use crate::{\n     FunctionLoc, ImplLoc, Intern, LocalModuleId, ModuleDefId, ModuleId, StaticLoc, StructLoc,\n     TraitLoc, TypeAliasLoc, UnionLoc,\n };\n-use ra_arena::Idx;\n \n pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n     let crate_graph = db.crate_graph();\n@@ -107,7 +108,7 @@ impl PartialResolvedImport {\n #[derive(Clone, Debug, Eq, PartialEq)]\n struct ImportDirective {\n     module_id: LocalModuleId,\n-    import_id: Idx<Import>,\n+    import_id: FileItemTreeId<Import>,\n     import: Import,\n     status: PartialResolvedImport,\n }"}]}