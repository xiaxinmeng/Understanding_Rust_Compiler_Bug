{"sha": "14daf47e0a3c9db7a347bfce510ad75174ccbbd8", "node_id": "C_kwDOAAsO6NoAKDE0ZGFmNDdlMGEzYzlkYjdhMzQ3YmZjZTUxMGFkNzUxNzRjY2JiZDg", "commit": {"author": {"name": "Antonio Yang", "email": "yanganto@gmail.com", "date": "2022-03-03T16:22:15Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-03-11T12:15:27Z"}, "message": "Show ignore message in console and json output", "tree": {"sha": "f226374076ab3d47286aba24534571cb99bb6c8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f226374076ab3d47286aba24534571cb99bb6c8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14daf47e0a3c9db7a347bfce510ad75174ccbbd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14daf47e0a3c9db7a347bfce510ad75174ccbbd8", "html_url": "https://github.com/rust-lang/rust/commit/14daf47e0a3c9db7a347bfce510ad75174ccbbd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14daf47e0a3c9db7a347bfce510ad75174ccbbd8/comments", "author": {"login": "yanganto", "id": 10803111, "node_id": "MDQ6VXNlcjEwODAzMTEx", "avatar_url": "https://avatars.githubusercontent.com/u/10803111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yanganto", "html_url": "https://github.com/yanganto", "followers_url": "https://api.github.com/users/yanganto/followers", "following_url": "https://api.github.com/users/yanganto/following{/other_user}", "gists_url": "https://api.github.com/users/yanganto/gists{/gist_id}", "starred_url": "https://api.github.com/users/yanganto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yanganto/subscriptions", "organizations_url": "https://api.github.com/users/yanganto/orgs", "repos_url": "https://api.github.com/users/yanganto/repos", "events_url": "https://api.github.com/users/yanganto/events{/privacy}", "received_events_url": "https://api.github.com/users/yanganto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f58d51b3c00b1e30acd75aead202eb2248bb33f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f58d51b3c00b1e30acd75aead202eb2248bb33f9", "html_url": "https://github.com/rust-lang/rust/commit/f58d51b3c00b1e30acd75aead202eb2248bb33f9"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "56eef8314fbdee5ae6b61fbe7cc1bdcd6baaa2d4", "filename": "library/test/src/console.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14daf47e0a3c9db7a347bfce510ad75174ccbbd8/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14daf47e0a3c9db7a347bfce510ad75174ccbbd8/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=14daf47e0a3c9db7a347bfce510ad75174ccbbd8", "patch": "@@ -118,7 +118,7 @@ impl ConsoleTestState {\n                     TestResult::TrIgnored => {\n                         #[cfg(not(bootstrap))]\n                         if let Some(msg) = ignore_message {\n-                            format!(\"ignored, {msg}\")\n+                            format!(\"ignored: {msg}\")\n                         } else {\n                             \"ignored\".to_owned()\n                         }"}, {"sha": "7b039164f48c7f3f670c076cdbf4134b40c2c3f3", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/14daf47e0a3c9db7a347bfce510ad75174ccbbd8/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14daf47e0a3c9db7a347bfce510ad75174ccbbd8/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=14daf47e0a3c9db7a347bfce510ad75174ccbbd8", "patch": "@@ -121,6 +121,27 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n             ),\n \n             TestResult::TrIgnored => {\n+                #[cfg(not(bootstrap))]\n+                if let Some(msg) = desc.ignore_message {\n+                    self.write_event(\n+                        \"test\",\n+                        desc.name.as_slice(),\n+                        \"ignored\",\n+                        exec_time,\n+                        stdout,\n+                        Some(&*format!(r#\"\"message\": \"{}\"\"#, EscapedString(msg))),\n+                    )\n+                } else {\n+                    self.write_event(\n+                        \"test\",\n+                        desc.name.as_slice(),\n+                        \"ignored\",\n+                        exec_time,\n+                        stdout,\n+                        None,\n+                    )\n+                }\n+                #[cfg(bootstrap)]\n                 self.write_event(\"test\", desc.name.as_slice(), \"ignored\", exec_time, stdout, None)\n             }\n "}, {"sha": "f05c543498f5f97b933a55219be54b5593cbc1a8", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14daf47e0a3c9db7a347bfce510ad75174ccbbd8/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14daf47e0a3c9db7a347bfce510ad75174ccbbd8/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=14daf47e0a3c9db7a347bfce510ad75174ccbbd8", "patch": "@@ -45,8 +45,12 @@ impl<T: Write> PrettyFormatter<T> {\n         self.write_short_result(\"FAILED\", term::color::RED)\n     }\n \n-    pub fn write_ignored(&mut self) -> io::Result<()> {\n-        self.write_short_result(\"ignored\", term::color::YELLOW)\n+    pub fn write_ignored(&mut self, may_message: Option<&'static str>) -> io::Result<()> {\n+        if let Some(message) = may_message {\n+            self.write_short_result(&format!(\"ignored, {}\", message), term::color::YELLOW)\n+        } else {\n+            self.write_short_result(\"ignored\", term::color::YELLOW)\n+        }\n     }\n \n     pub fn write_time_failed(&mut self) -> io::Result<()> {\n@@ -59,10 +63,10 @@ impl<T: Write> PrettyFormatter<T> {\n \n     pub fn write_short_result(\n         &mut self,\n-        result: &str,\n+        result: impl AsRef<str>,\n         color: term::color::Color,\n     ) -> io::Result<()> {\n-        self.write_pretty(result, color)\n+        self.write_pretty(result.as_ref(), color)\n     }\n \n     pub fn write_pretty(&mut self, word: &str, color: term::color::Color) -> io::Result<()> {\n@@ -214,7 +218,12 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n         match *result {\n             TestResult::TrOk => self.write_ok()?,\n             TestResult::TrFailed | TestResult::TrFailedMsg(_) => self.write_failed()?,\n-            TestResult::TrIgnored => self.write_ignored()?,\n+            TestResult::TrIgnored => {\n+                #[cfg(not(bootstrap))]\n+                self.write_ignored(desc.ignore_message)?;\n+                #[cfg(bootstrap)]\n+                self.write_ignored(None)?;\n+            }\n             TestResult::TrBench(ref bs) => {\n                 self.write_bench()?;\n                 self.write_plain(&format!(\": {}\", fmt_bench_samples(bs)))?;"}]}