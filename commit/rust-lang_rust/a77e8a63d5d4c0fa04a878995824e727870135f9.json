{"sha": "a77e8a63d5d4c0fa04a878995824e727870135f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3N2U4YTYzZDVkNGMwZmEwNGE4Nzg5OTU4MjRlNzI3ODcwMTM1Zjk=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T04:24:36Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:51:00Z"}, "message": "libstd: use `#[deriving(Copy)]`", "tree": {"sha": "c422bcbfb5fe130035b38f2c7eb56e632845ca9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c422bcbfb5fe130035b38f2c7eb56e632845ca9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a77e8a63d5d4c0fa04a878995824e727870135f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a77e8a63d5d4c0fa04a878995824e727870135f9", "html_url": "https://github.com/rust-lang/rust/commit/a77e8a63d5d4c0fa04a878995824e727870135f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a77e8a63d5d4c0fa04a878995824e727870135f9/comments", "author": null, "committer": null, "parents": [{"sha": "2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a", "html_url": "https://github.com/rust-lang/rust/commit/2df30a47e2e0ef563d9ed80cb3cc258cbea0f53a"}], "stats": {"total": 111, "additions": 30, "deletions": 81}, "files": [{"sha": "2c4dc5313bbfa0af2569e54082ea4c468a56d162", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -18,7 +18,6 @@\n use core::kinds::Sized;\n use fmt;\n use iter::IteratorExt;\n-use kinds::Copy;\n use mem;\n use ops::FnMut;\n use option::Option;\n@@ -29,11 +28,9 @@ use string::{String, IntoString};\n use vec::Vec;\n \n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n-#[deriving(Clone, PartialEq, PartialOrd, Ord, Eq, Hash)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Ord, Eq, Hash)]\n pub struct Ascii { chr: u8 }\n \n-impl Copy for Ascii {}\n-\n impl Ascii {\n     /// Converts an ascii character into a `u8`.\n     #[inline]"}, {"sha": "9043cb8c7d6f5f6b40632d10e27b0716a81fe4e7", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -391,7 +391,7 @@ pub struct SyncSender<T> {\n \n /// This enumeration is the list of the possible reasons that try_recv could not\n /// return data when called.\n-#[deriving(PartialEq, Clone, Show)]\n+#[deriving(PartialEq, Clone, Copy, Show)]\n #[experimental = \"this is likely to be removed in changing try_recv()\"]\n pub enum TryRecvError {\n     /// This channel is currently empty, but the sender(s) have not yet\n@@ -402,8 +402,6 @@ pub enum TryRecvError {\n     Disconnected,\n }\n \n-impl Copy for TryRecvError {}\n-\n /// This enumeration is the list of the possible error outcomes for the\n /// `SyncSender::try_send` method.\n #[deriving(PartialEq, Clone, Show)]"}, {"sha": "291f384d619d9726adcc8bdf75eb4617959cc186", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -215,7 +215,6 @@ pub mod dl {\n \n     use c_str::{CString, ToCStr};\n     use libc;\n-    use kinds::Copy;\n     use ops::FnOnce;\n     use ptr;\n     use result::*;\n@@ -265,15 +264,14 @@ pub mod dl {\n         dlclose(handle as *mut libc::c_void); ()\n     }\n \n+    #[deriving(Copy)]\n     pub enum Rtld {\n         Lazy = 1,\n         Now = 2,\n         Global = 256,\n         Local = 0,\n     }\n \n-    impl Copy for Rtld {}\n-\n     #[link_name = \"dl\"]\n     extern {\n         fn dlopen(filename: *const libc::c_char,"}, {"sha": "dbf61b132e08b3a556177a4a40f5206a23edcc5d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -232,7 +232,6 @@ use error::{FromError, Error};\n use fmt;\n use int;\n use iter::{Iterator, IteratorExt};\n-use kinds::Copy;\n use mem::transmute;\n use ops::{BitOr, BitXor, BitAnd, Sub, Not, FnOnce};\n use option::Option;\n@@ -367,7 +366,7 @@ impl FromError<IoError> for Box<Error> {\n }\n \n /// A list specifying general categories of I/O error.\n-#[deriving(PartialEq, Eq, Clone, Show)]\n+#[deriving(Copy, PartialEq, Eq, Clone, Show)]\n pub enum IoErrorKind {\n     /// Any I/O error not part of this list.\n     OtherIoError,\n@@ -422,8 +421,6 @@ pub enum IoErrorKind {\n     NoProgress,\n }\n \n-impl Copy for IoErrorKind {}\n-\n /// A trait that lets you add a `detail` to an IoError easily\n trait UpdateIoError<T> {\n     /// Returns an IoError with updated description and detail\n@@ -1561,6 +1558,7 @@ impl<T: Buffer> BufferPrelude for T {\n \n /// When seeking, the resulting cursor is offset from a base by the offset given\n /// to the `seek` function. The base used is specified by this enumeration.\n+#[deriving(Copy)]\n pub enum SeekStyle {\n     /// Seek from the beginning of the stream\n     SeekSet,\n@@ -1570,8 +1568,6 @@ pub enum SeekStyle {\n     SeekCur,\n }\n \n-impl Copy for SeekStyle {}\n-\n /// An object implementing `Seek` internally has some form of cursor which can\n /// be moved within a stream of bytes. The stream typically has a fixed size,\n /// allowing seeking relative to either end.\n@@ -1685,6 +1681,7 @@ pub fn standard_error(kind: IoErrorKind) -> IoError {\n /// A mode specifies how a file should be opened or created. These modes are\n /// passed to `File::open_mode` and are used to control where the file is\n /// positioned when it is initially opened.\n+#[deriving(Copy)]\n pub enum FileMode {\n     /// Opens a file positioned at the beginning.\n     Open,\n@@ -1694,10 +1691,9 @@ pub enum FileMode {\n     Truncate,\n }\n \n-impl Copy for FileMode {}\n-\n /// Access permissions with which the file should be opened. `File`s\n /// opened with `Read` will return an error if written to.\n+#[deriving(Copy)]\n pub enum FileAccess {\n     /// Read-only access, requests to write will result in an error\n     Read,\n@@ -1707,10 +1703,8 @@ pub enum FileAccess {\n     ReadWrite,\n }\n \n-impl Copy for FileAccess {}\n-\n /// Different kinds of files which can be identified by a call to stat\n-#[deriving(PartialEq, Show, Hash, Clone)]\n+#[deriving(Copy, PartialEq, Show, Hash, Clone)]\n pub enum FileType {\n     /// This is a normal file, corresponding to `S_IFREG`\n     RegularFile,\n@@ -1731,8 +1725,6 @@ pub enum FileType {\n     Unknown,\n }\n \n-impl Copy for FileType {}\n-\n /// A structure used to describe metadata information about a file. This\n /// structure is created through the `stat` method on a `Path`.\n ///\n@@ -1750,7 +1742,7 @@ impl Copy for FileType {}\n /// println!(\"byte size: {}\", info.size);\n /// # }\n /// ```\n-#[deriving(Hash)]\n+#[deriving(Copy, Hash)]\n pub struct FileStat {\n     /// The size of the file, in bytes\n     pub size: u64,\n@@ -1784,14 +1776,12 @@ pub struct FileStat {\n     pub unstable: UnstableFileStat,\n }\n \n-impl Copy for FileStat {}\n-\n /// This structure represents all of the possible information which can be\n /// returned from a `stat` syscall which is not contained in the `FileStat`\n /// structure. This information is not necessarily platform independent, and may\n /// have different meanings or no meaning at all on some platforms.\n #[unstable]\n-#[deriving(Hash)]\n+#[deriving(Copy, Hash)]\n pub struct UnstableFileStat {\n     /// The ID of the device containing the file.\n     pub device: u64,\n@@ -1815,8 +1805,6 @@ pub struct UnstableFileStat {\n     pub gen: u64,\n }\n \n-impl Copy for UnstableFileStat {}\n-\n bitflags! {\n     #[doc = \"A set of permissions for a file or directory is represented\"]\n     #[doc = \"by a set of flags which are or'd together.\"]"}, {"sha": "69ba64d856e7f325b2781f98dfef299ea7b4c485", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -22,23 +22,22 @@ pub use self::Protocol::*;\n use iter::IteratorExt;\n use io::{IoResult};\n use io::net::ip::{SocketAddr, IpAddr};\n-use kinds::Copy;\n use option::Option;\n use option::Option::{Some, None};\n use sys;\n use vec::Vec;\n \n /// Hints to the types of sockets that are desired when looking up hosts\n+#[deriving(Copy)]\n pub enum SocketType {\n     Stream, Datagram, Raw\n }\n \n-impl Copy for SocketType {}\n-\n /// Flags which can be or'd into the `flags` field of a `Hint`. These are used\n /// to manipulate how a query is performed.\n ///\n /// The meaning of each of these flags can be found with `man -s 3 getaddrinfo`\n+#[deriving(Copy)]\n pub enum Flag {\n     AddrConfig,\n     All,\n@@ -49,30 +48,27 @@ pub enum Flag {\n     V4Mapped,\n }\n \n-impl Copy for Flag {}\n-\n /// A transport protocol associated with either a hint or a return value of\n /// `lookup`\n+#[deriving(Copy)]\n pub enum Protocol {\n     TCP, UDP\n }\n \n-impl Copy for Protocol {}\n-\n /// This structure is used to provide hints when fetching addresses for a\n /// remote host to control how the lookup is performed.\n ///\n /// For details on these fields, see their corresponding definitions via\n /// `man -s 3 getaddrinfo`\n+#[deriving(Copy)]\n pub struct Hint {\n     pub family: uint,\n     pub socktype: Option<SocketType>,\n     pub protocol: Option<Protocol>,\n     pub flags: uint,\n }\n \n-impl Copy for Hint {}\n-\n+#[deriving(Copy)]\n pub struct Info {\n     pub address: SocketAddr,\n     pub family: uint,\n@@ -81,8 +77,6 @@ pub struct Info {\n     pub flags: uint,\n }\n \n-impl Copy for Info {}\n-\n /// Easy name resolution. Given a hostname, returns the list of IP addresses for\n /// that hostname.\n pub fn get_host_addresses(host: &str) -> IoResult<Vec<IpAddr>> {"}, {"sha": "71776b6c46af79cd1daef6ed707872694287deef", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -18,7 +18,6 @@\n pub use self::IpAddr::*;\n \n use fmt;\n-use kinds::Copy;\n use io::{mod, IoResult, IoError};\n use io::net;\n use iter::{Iterator, IteratorExt};\n@@ -32,14 +31,12 @@ use vec::Vec;\n \n pub type Port = u16;\n \n-#[deriving(PartialEq, Eq, Clone, Hash)]\n+#[deriving(Copy, PartialEq, Eq, Clone, Hash)]\n pub enum IpAddr {\n     Ipv4Addr(u8, u8, u8, u8),\n     Ipv6Addr(u16, u16, u16, u16, u16, u16, u16, u16)\n }\n \n-impl Copy for IpAddr {}\n-\n impl fmt::Show for IpAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -65,14 +62,12 @@ impl fmt::Show for IpAddr {\n     }\n }\n \n-#[deriving(PartialEq, Eq, Clone, Hash)]\n+#[deriving(Copy, PartialEq, Eq, Clone, Hash)]\n pub struct SocketAddr {\n     pub ip: IpAddr,\n     pub port: Port,\n }\n \n-impl Copy for SocketAddr {}\n-\n impl fmt::Show for SocketAddr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.ip {"}, {"sha": "9da1117f2272aab95a6f1ac6429cc0df6fa33345", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -461,7 +461,7 @@ pub struct ProcessOutput {\n }\n \n /// Describes what to do with a standard io stream for a child process.\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub enum StdioContainer {\n     /// This stream will be ignored. This is the equivalent of attaching the\n     /// stream to `/dev/null`\n@@ -481,11 +481,9 @@ pub enum StdioContainer {\n     CreatePipe(bool /* readable */, bool /* writable */),\n }\n \n-impl Copy for StdioContainer {}\n-\n /// Describes the result of a process after it has terminated.\n /// Note that Windows have no signals, so the result is usually ExitStatus.\n-#[deriving(PartialEq, Eq, Clone)]\n+#[deriving(PartialEq, Eq, Clone, Copy)]\n pub enum ProcessExit {\n     /// Normal termination with an exit status.\n     ExitStatus(int),\n@@ -494,8 +492,6 @@ pub enum ProcessExit {\n     ExitSignal(int),\n }\n \n-impl Copy for ProcessExit {}\n-\n impl fmt::Show for ProcessExit {\n     /// Format a ProcessExit enum, to nicely present the information.\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "18fabcbd1a2a4792e6afc311d389985a0bdcd126", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -81,20 +81,18 @@ impl<R: Buffer> Buffer for LimitReader<R> {\n }\n \n /// A `Writer` which ignores bytes written to it, like /dev/null.\n+#[deriving(Copy)]\n pub struct NullWriter;\n \n-impl Copy for NullWriter {}\n-\n impl Writer for NullWriter {\n     #[inline]\n     fn write(&mut self, _buf: &[u8]) -> io::IoResult<()> { Ok(()) }\n }\n \n /// A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero.\n+#[deriving(Copy)]\n pub struct ZeroReader;\n \n-impl Copy for ZeroReader {}\n-\n impl Reader for ZeroReader {\n     #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::IoResult<uint> {\n@@ -113,10 +111,9 @@ impl Buffer for ZeroReader {\n }\n \n /// A `Reader` which is always at EOF, like /dev/null.\n+#[deriving(Copy)]\n pub struct NullReader;\n \n-impl Copy for NullReader {}\n-\n impl Reader for NullReader {\n     #[inline]\n     fn read(&mut self, _buf: &mut [u8]) -> io::IoResult<uint> {"}, {"sha": "016c4bd532a17e52c7dbf54796139a8b64e1bd43", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -17,7 +17,6 @@ pub use self::SignificantDigits::*;\n pub use self::SignFormat::*;\n \n use char::{mod, Char};\n-use kinds::Copy;\n use num::{mod, Int, Float, FPNaN, FPInfinite, ToPrimitive};\n use ops::FnMut;\n use slice::{SliceExt, CloneSliceExt};\n@@ -26,6 +25,7 @@ use string::String;\n use vec::Vec;\n \n /// A flag that specifies whether to use exponential (scientific) notation.\n+#[deriving(Copy)]\n pub enum ExponentFormat {\n     /// Do not use exponential notation.\n     ExpNone,\n@@ -38,10 +38,9 @@ pub enum ExponentFormat {\n     ExpBin,\n }\n \n-impl Copy for ExponentFormat {}\n-\n /// The number of digits used for emitting the fractional part of a number, if\n /// any.\n+#[deriving(Copy)]\n pub enum SignificantDigits {\n     /// All calculable digits will be printed.\n     ///\n@@ -57,9 +56,8 @@ pub enum SignificantDigits {\n     DigExact(uint)\n }\n \n-impl Copy for SignificantDigits {}\n-\n /// How to emit the sign of a number.\n+#[deriving(Copy)]\n pub enum SignFormat {\n     /// No sign will be printed. The exponent sign will also be emitted.\n     SignNone,\n@@ -71,8 +69,6 @@ pub enum SignFormat {\n     SignAll,\n }\n \n-impl Copy for SignFormat {}\n-\n /// Converts an integral number to its string representation as a byte vector.\n /// This is meant to be a common base implementation for all integral string\n /// conversion functions like `to_string()` or `to_str_radix()`."}, {"sha": "dcc73f7844a4987b57d02f7523df7fe1558ddc44", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -361,6 +361,7 @@ pub fn join_paths<T: BytesContainer>(paths: &[T]) -> Result<Vec<u8>, &'static st\n }\n \n /// A low-level OS in-memory pipe.\n+#[deriving(Copy)]\n pub struct Pipe {\n     /// A file descriptor representing the reading end of the pipe. Data written\n     /// on the `out` file descriptor can be read from this file descriptor.\n@@ -370,8 +371,6 @@ pub struct Pipe {\n     pub writer: c_int,\n }\n \n-impl Copy for Pipe {}\n-\n /// Creates a new low-level OS in-memory pipe.\n ///\n /// This function can fail to succeed if there are no more resources available\n@@ -861,6 +860,7 @@ pub enum MapOption {\n impl Copy for MapOption {}\n \n /// Possible errors when creating a map.\n+#[deriving(Copy)]\n pub enum MapError {\n     /// # The following are POSIX-specific\n     ///\n@@ -905,8 +905,6 @@ pub enum MapError {\n     ErrMapViewOfFile(uint)\n }\n \n-impl Copy for MapError {}\n-\n impl fmt::Show for MapError {\n     fn fmt(&self, out: &mut fmt::Formatter) -> fmt::Result {\n         let str = match *self {"}, {"sha": "b498b3e8ad08350cc9970bda56077d7e766cc11e", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -22,7 +22,6 @@ use hash;\n use io::Writer;\n use iter::{AdditiveIterator, DoubleEndedIteratorExt, Extend};\n use iter::{Iterator, IteratorExt, Map};\n-use kinds::Copy;\n use mem;\n use option::Option;\n use option::Option::{Some, None};\n@@ -970,7 +969,7 @@ pub fn is_sep_byte_verbatim(u: &u8) -> bool {\n }\n \n /// Prefix types for Path\n-#[deriving(PartialEq, Clone, Show)]\n+#[deriving(Copy, PartialEq, Clone, Show)]\n pub enum PathPrefix {\n     /// Prefix `\\\\?\\`, uint is the length of the following component\n     VerbatimPrefix(uint),\n@@ -986,8 +985,6 @@ pub enum PathPrefix {\n     DiskPrefix\n }\n \n-impl Copy for PathPrefix {}\n-\n fn parse_prefix<'a>(mut path: &'a str) -> Option<PathPrefix> {\n     if path.starts_with(\"\\\\\\\\\") {\n         // \\\\"}, {"sha": "0035e5747aa6915c03c8a65ab93150a7ec764c26", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -225,7 +225,6 @@ use cell::RefCell;\n use clone::Clone;\n use io::IoResult;\n use iter::{Iterator, IteratorExt};\n-use kinds::Copy;\n use mem;\n use rc::Rc;\n use result::Result::{Ok, Err};\n@@ -246,12 +245,11 @@ pub mod reader;\n \n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n+#[deriving(Copy)]\n pub struct StdRng {\n     rng: IsaacWordRng,\n }\n \n-impl Copy for StdRng {}\n-\n impl StdRng {\n     /// Create a randomly seeded instance of `StdRng`.\n     ///"}, {"sha": "7cb14e8e4bc62fe33d057509cbb5a6cfeee42679", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a77e8a63d5d4c0fa04a878995824e727870135f9/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=a77e8a63d5d4c0fa04a878995824e727870135f9", "patch": "@@ -13,7 +13,6 @@\n #![experimental]\n \n use {fmt, i64};\n-use kinds::Copy;\n use ops::{Add, Sub, Mul, Div, Neg, FnOnce};\n use option::Option;\n use option::Option::{Some, None};\n@@ -47,7 +46,7 @@ macro_rules! try_opt {\n \n /// ISO 8601 time duration with nanosecond precision.\n /// This also allows for the negative duration; see individual methods for details.\n-#[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n+#[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Duration {\n     secs: i64,\n     nanos: i32, // Always 0 <= nanos < NANOS_PER_SEC\n@@ -65,8 +64,6 @@ pub const MAX: Duration = Duration {\n     nanos: (i64::MAX % MILLIS_PER_SEC) as i32 * NANOS_PER_MILLI\n };\n \n-impl Copy for Duration {}\n-\n impl Duration {\n     /// Makes a new `Duration` with given number of weeks.\n     /// Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60), with overflow checks."}]}