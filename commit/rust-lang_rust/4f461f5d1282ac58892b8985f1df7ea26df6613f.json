{"sha": "4f461f5d1282ac58892b8985f1df7ea26df6613f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNDYxZjVkMTI4MmFjNTg4OTJiODk4NWYxZGY3ZWEyNmRmNjYxM2Y=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-06T00:23:17Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-09T07:41:26Z"}, "message": "Switched to unordered field in ParamKindOrd\n\nRun fmt", "tree": {"sha": "87c821de6f49045cc055bee22c0e59e8e88797b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87c821de6f49045cc055bee22c0e59e8e88797b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f461f5d1282ac58892b8985f1df7ea26df6613f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f461f5d1282ac58892b8985f1df7ea26df6613f", "html_url": "https://github.com/rust-lang/rust/commit/4f461f5d1282ac58892b8985f1df7ea26df6613f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f461f5d1282ac58892b8985f1df7ea26df6613f/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ae1a6332c27fd5f384d3877cb2c4b546dd86c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae1a6332c27fd5f384d3877cb2c4b546dd86c37", "html_url": "https://github.com/rust-lang/rust/commit/1ae1a6332c27fd5f384d3877cb2c4b546dd86c37"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "5e8066dd960ced4eca0a1949174973b4569f9bbf", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f461f5d1282ac58892b8985f1df7ea26df6613f/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f461f5d1282ac58892b8985f1df7ea26df6613f/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=4f461f5d1282ac58892b8985f1df7ea26df6613f", "patch": "@@ -313,17 +313,15 @@ pub type GenericBounds = Vec<GenericBound>;\n pub enum ParamKindOrd {\n     Lifetime,\n     Type,\n-    Const,\n-    ConstUnordered,\n+    Const { unordered: bool },\n }\n \n impl fmt::Display for ParamKindOrd {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             ParamKindOrd::Lifetime => \"lifetime\".fmt(f),\n             ParamKindOrd::Type => \"type\".fmt(f),\n-            ParamKindOrd::Const => \"const\".fmt(f),\n-            ParamKindOrd::ConstUnordered => \"const\".fmt(f),\n+            ParamKindOrd::Const { .. } => \"const\".fmt(f),\n         }\n     }\n }"}, {"sha": "a229987da76091897bc955666aef4bba1329d1d4", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f461f5d1282ac58892b8985f1df7ea26df6613f/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f461f5d1282ac58892b8985f1df7ea26df6613f/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=4f461f5d1282ac58892b8985f1df7ea26df6613f", "patch": "@@ -735,7 +735,7 @@ fn validate_generic_param_order<'a>(\n         }\n         let max_param = &mut max_param;\n         match max_param {\n-            Some(ParamKindOrd::ConstUnordered) if kind != ParamKindOrd::Lifetime => (),\n+            Some(ParamKindOrd::Const { unordered: true }) if kind != ParamKindOrd::Lifetime => (),\n             Some(max_param) if *max_param > kind => {\n                 let entry = out_of_order.entry(kind).or_insert((*max_param, vec![]));\n                 entry.1.push(span);\n@@ -1159,7 +1159,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n                     GenericParamKind::Const { ref ty, kw_span: _ } => {\n                         let ty = pprust::ty_to_string(ty);\n-                        (ParamKindOrd::Const, Some(format!(\"const {}: {}\", param.ident, ty)))\n+                        let unordered = self.session.features_untracked().const_generics;\n+                        (\n+                            ParamKindOrd::Const { unordered },\n+                            Some(format!(\"const {}: {}\", param.ident, ty)),\n+                        )\n                     }\n                 };\n                 (kind, Some(&*param.bounds), param.ident.span, ident)"}, {"sha": "becabe9c3b99193484dc3a5057f64a98d1bbb056", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f461f5d1282ac58892b8985f1df7ea26df6613f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f461f5d1282ac58892b8985f1df7ea26df6613f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4f461f5d1282ac58892b8985f1df7ea26df6613f", "patch": "@@ -489,18 +489,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             kind,\n         );\n \n+        let unordered = sess.features_untracked().const_generics;\n         let kind_ord = match kind {\n             \"lifetime\" => ParamKindOrd::Lifetime,\n             \"type\" => ParamKindOrd::Type,\n-            \"constant\" => ParamKindOrd::Const,\n+            \"constant\" => ParamKindOrd::Const { unordered },\n             // It's more concise to match on the string representation, though it means\n             // the match is non-exhaustive.\n             _ => bug!(\"invalid generic parameter kind {}\", kind),\n         };\n         let arg_ord = match arg {\n             GenericArg::Lifetime(_) => ParamKindOrd::Lifetime,\n             GenericArg::Type(_) => ParamKindOrd::Type,\n-            GenericArg::Const(_) => ParamKindOrd::Const,\n+            GenericArg::Const(_) => ParamKindOrd::Const { unordered },\n         };\n \n         // This note will be true as long as generic parameters are strictly ordered by their kind.\n@@ -672,7 +673,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                                         ParamKindOrd::Type\n                                                     }\n                                                     GenericParamDefKind::Const => {\n-                                                        ParamKindOrd::Const\n+                                                        ParamKindOrd::Const {\n+                                                            unordered: tcx\n+                                                                .sess\n+                                                                .features_untracked()\n+                                                                .const_generics,\n+                                                        }\n                                                     }\n                                                 },\n                                                 param,"}]}