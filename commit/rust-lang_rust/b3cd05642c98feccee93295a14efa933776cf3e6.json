{"sha": "b3cd05642c98feccee93295a14efa933776cf3e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzY2QwNTY0MmM5OGZlY2NlZTkzMjk1YTE0ZWZhOTMzNzc2Y2YzZTY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-04T02:05:25Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:45Z"}, "message": "libcollections: fix unit tests", "tree": {"sha": "7a6061a9da93ccf77050c039ab1e21990e5f615d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a6061a9da93ccf77050c039ab1e21990e5f615d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3cd05642c98feccee93295a14efa933776cf3e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cd05642c98feccee93295a14efa933776cf3e6", "html_url": "https://github.com/rust-lang/rust/commit/b3cd05642c98feccee93295a14efa933776cf3e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3cd05642c98feccee93295a14efa933776cf3e6/comments", "author": null, "committer": null, "parents": [{"sha": "10a14d5f04e958918ae3cd3e3a2ef881e5dc0a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a14d5f04e958918ae3cd3e3a2ef881e5dc0a6d", "html_url": "https://github.com/rust-lang/rust/commit/10a14d5f04e958918ae3cd3e3a2ef881e5dc0a6d"}], "stats": {"total": 81, "additions": 54, "deletions": 27}, "files": [{"sha": "cd01c008fe1bc3a92654950c7ebc06dc2f4e1a7b", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b3cd05642c98feccee93295a14efa933776cf3e6/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cd05642c98feccee93295a14efa933776cf3e6/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=b3cd05642c98feccee93295a14efa933776cf3e6", "patch": "@@ -603,22 +603,31 @@ mod test {\n       assert!(hash::hash(&x) == hash::hash(&y));\n     }\n \n-    fn check(a: &[int],\n-             b: &[int],\n-             expected: &[int],\n-             f: |&BTreeSet<int>, &BTreeSet<int>, f: |&int| -> bool| -> bool) {\n+    struct Counter<'a, 'b> {\n+        i: &'a mut uint,\n+        expected: &'b [int],\n+    }\n+\n+    impl<'a, 'b> FnMut(&int) -> bool for Counter<'a, 'b> {\n+        extern \"rust-call\" fn call_mut(&mut self, (&x,): (&int,)) -> bool {\n+            assert_eq!(x, self.expected[*self.i]);\n+            *self.i += 1;\n+            true\n+        }\n+    }\n+\n+    fn check<F>(a: &[int], b: &[int], expected: &[int], f: F) where\n+        // FIXME Replace Counter with `Box<FnMut(_) -> _>`\n+        F: FnOnce(&BTreeSet<int>, &BTreeSet<int>, Counter) -> bool,\n+    {\n         let mut set_a = BTreeSet::new();\n         let mut set_b = BTreeSet::new();\n \n         for x in a.iter() { assert!(set_a.insert(*x)) }\n         for y in b.iter() { assert!(set_b.insert(*y)) }\n \n         let mut i = 0;\n-        f(&set_a, &set_b, |x| {\n-            assert_eq!(*x, expected[i]);\n-            i += 1;\n-            true\n-        });\n+        f(&set_a, &set_b, Counter { i: &mut i, expected: expected });\n         assert_eq!(i, expected.len());\n     }\n "}, {"sha": "bd8bf5c6cb67f54a437beff65bdbea14847b39e9", "filename": "src/libcollections/tree/set.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b3cd05642c98feccee93295a14efa933776cf3e6/src%2Flibcollections%2Ftree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cd05642c98feccee93295a14efa933776cf3e6/src%2Flibcollections%2Ftree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftree%2Fset.rs?ref=b3cd05642c98feccee93295a14efa933776cf3e6", "patch": "@@ -936,22 +936,31 @@ mod test {\n       assert!(hash::hash(&x) == hash::hash(&y));\n     }\n \n-    fn check(a: &[int],\n-             b: &[int],\n-             expected: &[int],\n-             f: |&TreeSet<int>, &TreeSet<int>, f: |&int| -> bool| -> bool) {\n+    struct Counter<'a, 'b> {\n+        i: &'a mut uint,\n+        expected: &'b [int],\n+    }\n+\n+    impl<'a, 'b> FnMut(&int) -> bool for Counter<'a, 'b> {\n+        extern \"rust-call\" fn call_mut(&mut self, (&x,): (&int,)) -> bool {\n+            assert_eq!(x, self.expected[*self.i]);\n+            *self.i += 1;\n+            true\n+        }\n+    }\n+\n+    fn check<F>(a: &[int], b: &[int], expected: &[int], f: F) where\n+        // FIXME Replace `Counter` with `Box<FnMut(&int) -> bool>`\n+        F: FnOnce(&TreeSet<int>, &TreeSet<int>, Counter) -> bool,\n+    {\n         let mut set_a = TreeSet::new();\n         let mut set_b = TreeSet::new();\n \n         for x in a.iter() { assert!(set_a.insert(*x)) }\n         for y in b.iter() { assert!(set_b.insert(*y)) }\n \n         let mut i = 0;\n-        f(&set_a, &set_b, |x| {\n-            assert_eq!(*x, expected[i]);\n-            i += 1;\n-            true\n-        });\n+        f(&set_a, &set_b, Counter { i: &mut i, expected: expected });\n         assert_eq!(i, expected.len());\n     }\n "}, {"sha": "5621726dc568291368c42f7945575010f2f8db2c", "filename": "src/libcollections/trie/set.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b3cd05642c98feccee93295a14efa933776cf3e6/src%2Flibcollections%2Ftrie%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cd05642c98feccee93295a14efa933776cf3e6/src%2Flibcollections%2Ftrie%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie%2Fset.rs?ref=b3cd05642c98feccee93295a14efa933776cf3e6", "patch": "@@ -743,22 +743,31 @@ mod test {\n         assert!(a < b && a <= b);\n     }\n \n-    fn check(a: &[uint],\n-             b: &[uint],\n-             expected: &[uint],\n-             f: |&TrieSet, &TrieSet, f: |uint| -> bool| -> bool) {\n+    struct Counter<'a, 'b> {\n+        i: &'a mut uint,\n+        expected: &'b [uint],\n+    }\n+\n+    impl<'a, 'b> FnMut(uint) -> bool for Counter<'a, 'b> {\n+        extern \"rust-call\" fn call_mut(&mut self, (x,): (uint,)) -> bool {\n+            assert_eq!(x, self.expected[*self.i]);\n+            *self.i += 1;\n+            true\n+        }\n+    }\n+\n+    fn check<F>(a: &[uint], b: &[uint], expected: &[uint], f: F) where\n+        // FIXME Replace `Counter` with `Box<FnMut(&uint) -> bool>`\n+        F: FnOnce(&TrieSet, &TrieSet, Counter) -> bool,\n+    {\n         let mut set_a = TrieSet::new();\n         let mut set_b = TrieSet::new();\n \n         for x in a.iter() { assert!(set_a.insert(*x)) }\n         for y in b.iter() { assert!(set_b.insert(*y)) }\n \n         let mut i = 0;\n-        f(&set_a, &set_b, |x| {\n-            assert_eq!(x, expected[i]);\n-            i += 1;\n-            true\n-        });\n+        f(&set_a, &set_b, Counter { i: &mut i, expected: expected });\n         assert_eq!(i, expected.len());\n     }\n "}]}