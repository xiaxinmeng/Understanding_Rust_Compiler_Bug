{"sha": "0d0869ad738c1961ebbe75412303d360c7e951ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMDg2OWFkNzM4YzE5NjFlYmJlNzU0MTIzMDNkMzYwYzdlOTUxYmE=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-08T11:01:48Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-08T12:39:14Z"}, "message": "Remove the deprecated opt_out_copy feature", "tree": {"sha": "b3f6c1498478b98dd1c7989f1e57ba55869ef00a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3f6c1498478b98dd1c7989f1e57ba55869ef00a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d0869ad738c1961ebbe75412303d360c7e951ba", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0869ad738c1961ebbe75412303d360c7e951ba", "html_url": "https://github.com/rust-lang/rust/commit/0d0869ad738c1961ebbe75412303d360c7e951ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d0869ad738c1961ebbe75412303d360c7e951ba/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3cd3900ceda838f5798c30ab96ceb41f962534", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3cd3900ceda838f5798c30ab96ceb41f962534", "html_url": "https://github.com/rust-lang/rust/commit/5b3cd3900ceda838f5798c30ab96ceb41f962534"}], "stats": {"total": 118, "additions": 3, "deletions": 115}, "files": [{"sha": "dad7461236970f55b9bc92602815a46ac910dc0e", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0d0869ad738c1961ebbe75412303d360c7e951ba/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0869ad738c1961ebbe75412303d360c7e951ba/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=0d0869ad738c1961ebbe75412303d360c7e951ba", "patch": "@@ -713,12 +713,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 debug!(\"obligation self ty is {}\",\n                        obligation.predicate.0.self_ty().repr(self.tcx()));\n \n-                // If the user has asked for the older, compatibility\n-                // behavior, ignore user-defined impls here. This will\n-                // go away by the time 1.0 is released.\n-                if !self.tcx().sess.features.borrow().opt_out_copy {\n-                    try!(self.assemble_candidates_from_impls(obligation, &mut candidates.vec));\n-                }\n+                try!(self.assemble_candidates_from_impls(obligation, &mut candidates.vec));\n \n                 try!(self.assemble_builtin_bound_candidates(ty::BoundCopy,\n                                                             stack,\n@@ -1505,21 +1500,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n \n                 ty::BoundCopy => {\n-                    // This is an Opt-In Built-In Trait. So, unless\n-                    // the user is asking for the old behavior, we\n-                    // don't supply any form of builtin impl.\n-                    if !this.tcx().sess.features.borrow().opt_out_copy {\n-                        return Ok(ParameterBuiltin)\n-                    } else {\n-                        // Older, backwards compatibility behavior:\n-                        if\n-                            Some(def_id) == tcx.lang_items.no_copy_bound() ||\n-                            Some(def_id) == tcx.lang_items.managed_bound() ||\n-                            ty::has_dtor(tcx, def_id)\n-                        {\n-                            return Err(Unimplemented);\n-                        }\n-                    }\n+                    return Ok(ParameterBuiltin)\n                 }\n \n                 ty::BoundSync => {"}, {"sha": "9f023be4a534b247070c8be607d7eae706d78d5f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0d0869ad738c1961ebbe75412303d360c7e951ba/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0869ad738c1961ebbe75412303d360c7e951ba/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0d0869ad738c1961ebbe75412303d360c7e951ba", "patch": "@@ -82,7 +82,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"issue_5723_bootstrap\", Accepted),\n \n     // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n-    (\"opt_out_copy\", Deprecated),\n+    (\"opt_out_copy\", Removed),\n \n     // A way to temporarily opt out of the new orphan rules. This will *never* be accepted.\n     (\"old_orphan_check\", Deprecated),\n@@ -123,7 +123,6 @@ pub struct Features {\n     pub import_shadowing: bool,\n     pub visible_private_types: bool,\n     pub quote: bool,\n-    pub opt_out_copy: bool,\n     pub old_orphan_check: bool,\n }\n \n@@ -135,7 +134,6 @@ impl Features {\n             import_shadowing: false,\n             visible_private_types: false,\n             quote: false,\n-            opt_out_copy: false,\n             old_orphan_check: false,\n         }\n     }\n@@ -465,7 +463,6 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n         import_shadowing: cx.has_feature(\"import_shadowing\"),\n         visible_private_types: cx.has_feature(\"visible_private_types\"),\n         quote: cx.has_feature(\"quote\"),\n-        opt_out_copy: cx.has_feature(\"opt_out_copy\"),\n         old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n     },\n     unknown_features)"}, {"sha": "9e425fa8f2e7d2dfda66e02e820b69e14afa5a81", "filename": "src/test/compile-fail/opt-out-copy-bad.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5b3cd3900ceda838f5798c30ab96ceb41f962534/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3cd3900ceda838f5798c30ab96ceb41f962534/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fopt-out-copy-bad.rs?ref=5b3cd3900ceda838f5798c30ab96ceb41f962534", "patch": "@@ -1,44 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(opt_out_copy)]\n-//~^ WARNING feature is deprecated\n-//~| WARNING feature is deprecated\n-\n-// Test that when using the `opt-out-copy` feature we still consider\n-// destructors to be non-movable\n-\n-struct CantCopyThis;\n-\n-impl Drop for CantCopyThis {\n-    fn drop(&mut self) { }\n-}\n-\n-struct IWantToCopyThis {\n-    but_i_cant: CantCopyThis,\n-}\n-\n-impl Copy for IWantToCopyThis {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-\n-enum CantCopyThisEither {\n-    A,\n-    B(::std::marker::NoCopy),\n-}\n-\n-enum IWantToCopyThisToo {\n-    ButICant(CantCopyThisEither),\n-}\n-\n-impl Copy for IWantToCopyThisToo {}\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-\n-fn main() {}\n-"}, {"sha": "8c7072cfdf54532ed18cf3929e6897fc8c098596", "filename": "src/test/run-pass/opt-out-copy.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5b3cd3900ceda838f5798c30ab96ceb41f962534/src%2Ftest%2Frun-pass%2Fopt-out-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3cd3900ceda838f5798c30ab96ceb41f962534/src%2Ftest%2Frun-pass%2Fopt-out-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fopt-out-copy.rs?ref=5b3cd3900ceda838f5798c30ab96ceb41f962534", "patch": "@@ -1,46 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(opt_out_copy)]\n-\n-// Test the opt-out-copy feature guard. This is the same as the\n-// \"opt-in-copy.rs\" test from compile-fail, except that it is using\n-// the feature guard, and hence the structureds in this file are\n-// implicitly copyable, and hence we get no errors. This test can be\n-// safely removed once the opt-out-copy \"feature\" is rejected.\n-\n-struct CantCopyThis;\n-\n-struct IWantToCopyThis {\n-    but_i_cant: CantCopyThis,\n-}\n-\n-impl Copy for IWantToCopyThis {}\n-\n-enum CantCopyThisEither {\n-    A,\n-    B,\n-}\n-\n-enum IWantToCopyThisToo {\n-    ButICant(CantCopyThisEither),\n-}\n-\n-impl Copy for IWantToCopyThisToo {}\n-\n-fn is_copy<T:Copy>() { }\n-\n-fn main() {\n-    is_copy::<CantCopyThis>();\n-    is_copy::<CantCopyThisEither>();\n-    is_copy::<IWantToCopyThis>();\n-    is_copy::<IWantToCopyThisToo>();\n-}\n-"}]}