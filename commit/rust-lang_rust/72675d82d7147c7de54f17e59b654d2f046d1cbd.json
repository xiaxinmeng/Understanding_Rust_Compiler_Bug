{"sha": "72675d82d7147c7de54f17e59b654d2f046d1cbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNjc1ZDgyZDcxNDdjN2RlNTRmMTdlNTliNjU0ZDJmMDQ2ZDFjYmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-06T09:15:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:45Z"}, "message": "replace `RegionIndex` with `RegionVid` (which now impls Idx)", "tree": {"sha": "c7db2a49919ebdd30350a83b4504fcdb84341d0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7db2a49919ebdd30350a83b4504fcdb84341d0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72675d82d7147c7de54f17e59b654d2f046d1cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72675d82d7147c7de54f17e59b654d2f046d1cbd", "html_url": "https://github.com/rust-lang/rust/commit/72675d82d7147c7de54f17e59b654d2f046d1cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72675d82d7147c7de54f17e59b654d2f046d1cbd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89c1b6009bf99fab4882492c6b9677030227b045", "url": "https://api.github.com/repos/rust-lang/rust/commits/89c1b6009bf99fab4882492c6b9677030227b045", "html_url": "https://github.com/rust-lang/rust/commit/89c1b6009bf99fab4882492c6b9677030227b045"}], "stats": {"total": 98, "additions": 44, "deletions": 54}, "files": [{"sha": "2e4dddc212b31cc051f2c1fed63008146cca239f", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=72675d82d7147c7de54f17e59b654d2f046d1cbd", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::indexed_vec::{IndexVec};\n use dataflow::{BitDenotation, BlockSets, DataflowOperator};\n pub use dataflow::indexes::BorrowIndex;\n use transform::nll::region_infer::RegionInferenceContext;\n-use transform::nll::ToRegionIndex;\n+use transform::nll::ToRegionVid;\n \n use syntax_pos::Span;\n \n@@ -145,7 +145,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                                            location: Location) {\n         if let Some(regioncx) = self.nonlexical_regioncx {\n             for (borrow_index, borrow_data) in self.borrows.iter_enumerated() {\n-                let borrow_region = borrow_data.region.to_region_index();\n+                let borrow_region = borrow_data.region.to_region_vid();\n                 if !regioncx.region_contains_point(borrow_region, location) {\n                     // The region checker really considers the borrow\n                     // to start at the point **after** the location of"}, {"sha": "627bc7a8324529fa4438f5053fdb8de2ef537b49", "filename": "src/librustc_mir/transform/nll/constraint_generation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fconstraint_generation.rs?ref=72675d82d7147c7de54f17e59b654d2f046d1cbd", "patch": "@@ -23,7 +23,7 @@ use syntax::codemap::DUMMY_SP;\n \n use super::subtype;\n use super::LivenessResults;\n-use super::ToRegionIndex;\n+use super::ToRegionVid;\n use super::region_infer::RegionInferenceContext;\n \n pub(super) fn generate_constraints<'a, 'gcx, 'tcx>(\n@@ -102,7 +102,7 @@ impl<'cx, 'gcx, 'tcx> ConstraintGeneration<'cx, 'gcx, 'tcx> {\n         self.infcx\n             .tcx\n             .for_each_free_region(&live_ty, |live_region| {\n-                let vid = live_region.to_region_index();\n+                let vid = live_region.to_region_vid();\n                 self.regioncx.add_live_point(vid, location);\n             });\n     }\n@@ -197,8 +197,8 @@ impl<'cx, 'gcx, 'tcx> ConstraintGeneration<'cx, 'gcx, 'tcx> {\n         };\n \n         self.regioncx.add_outlives(span,\n-                                   borrow_region.to_region_index(),\n-                                   destination_region.to_region_index(),\n+                                   borrow_region.to_region_vid(),\n+                                   destination_region.to_region_vid(),\n                                    location.successor_within_block());\n     }\n \n@@ -227,8 +227,8 @@ impl<'cx, 'gcx, 'tcx> ConstraintGeneration<'cx, 'gcx, 'tcx> {\n \n                     let span = self.mir.source_info(location).span;\n                     self.regioncx.add_outlives(span,\n-                                               base_region.to_region_index(),\n-                                               borrow_region.to_region_index(),\n+                                               base_region.to_region_vid(),\n+                                               borrow_region.to_region_vid(),\n                                                location.successor_within_block());\n                 }\n             }"}, {"sha": "101fed3cfa631463d478e0bb4b122f0f9dc36086", "filename": "src/librustc_mir/transform/nll/free_regions.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Ffree_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Ffree_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Ffree_regions.rs?ref=72675d82d7147c7de54f17e59b654d2f046d1cbd", "patch": "@@ -25,20 +25,18 @@\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::middle::free_region::FreeRegionMap;\n-use rustc::ty;\n+use rustc::ty::{self, RegionVid};\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use super::RegionIndex;\n-\n #[derive(Debug)]\n pub struct FreeRegions<'tcx> {\n     /// Given a free region defined on this function (either early- or\n     /// late-bound), this maps it to its internal region index. When\n     /// the region context is created, the first N variables will be\n     /// created based on these indices.\n-    pub indices: FxHashMap<ty::Region<'tcx>, RegionIndex>,\n+    pub indices: FxHashMap<ty::Region<'tcx>, RegionVid>,\n \n     /// The map from the typeck tables telling us how to relate free regions.\n     pub free_region_map: &'tcx FreeRegionMap<'tcx>,\n@@ -81,9 +79,9 @@ pub fn free_regions<'a, 'gcx, 'tcx>(\n }\n \n fn insert_free_region<'tcx>(\n-    free_regions: &mut FxHashMap<ty::Region<'tcx>, RegionIndex>,\n+    free_regions: &mut FxHashMap<ty::Region<'tcx>, RegionVid>,\n     region: ty::Region<'tcx>,\n ) {\n-    let next = RegionIndex::new(free_regions.len());\n+    let next = RegionVid::new(free_regions.len());\n     free_regions.entry(region).or_insert(next);\n }"}, {"sha": "f3e24e925890da97dff02992734e44d86e0d924a", "filename": "src/librustc_mir/transform/nll/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fmod.rs?ref=72675d82d7147c7de54f17e59b654d2f046d1cbd", "patch": "@@ -11,9 +11,8 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir::Mir;\n use rustc::infer::InferCtxt;\n-use rustc::ty::{self, RegionKind};\n+use rustc::ty::{self, RegionKind, RegionVid};\n use rustc::util::nodemap::FxHashMap;\n-use rustc_data_structures::indexed_vec::Idx;\n use std::collections::BTreeSet;\n use transform::MirSource;\n use util::liveness::{self, LivenessMode, LivenessResult, LocalSet};\n@@ -152,23 +151,19 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     });\n }\n \n-newtype_index!(RegionIndex {\n-    DEBUG_FORMAT = \"'_#{}r\",\n-});\n-\n /// Right now, we piggy back on the `ReVar` to store our NLL inference\n-/// regions. These are indexed with `RegionIndex`. This method will\n-/// assert that the region is a `ReVar` and convert the internal index\n-/// into a `RegionIndex`. This is reasonable because in our MIR we\n-/// replace all free regions with inference variables.\n-pub trait ToRegionIndex {\n-    fn to_region_index(&self) -> RegionIndex;\n+/// regions. These are indexed with `RegionVid`. This method will\n+/// assert that the region is a `ReVar` and extract its interal index.\n+/// This is reasonable because in our MIR we replace all free regions\n+/// with inference variables.\n+pub trait ToRegionVid {\n+    fn to_region_vid(&self) -> RegionVid;\n }\n \n-impl ToRegionIndex for RegionKind {\n-    fn to_region_index(&self) -> RegionIndex {\n+impl ToRegionVid for RegionKind {\n+    fn to_region_vid(&self) -> RegionVid {\n         if let &ty::ReVar(vid) = self {\n-            RegionIndex::new(vid.index as usize)\n+            vid\n         } else {\n             bug!(\"region is not an ReVar: {:?}\", self)\n         }"}, {"sha": "add48a9600a510059e30eef8a3d53836b6211e7e", "filename": "src/librustc_mir/transform/nll/region_infer.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs?ref=72675d82d7147c7de54f17e59b654d2f046d1cbd", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::RegionIndex;\n use super::free_regions::FreeRegions;\n use rustc::infer::InferCtxt;\n use rustc::mir::{Location, Mir};\n-use rustc::ty;\n+use rustc::ty::{self, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashSet;\n use std::collections::BTreeSet;\n@@ -21,10 +20,10 @@ use syntax_pos::Span;\n \n pub struct RegionInferenceContext<'tcx> {\n     /// Contains the definition for every region variable.  Region\n-    /// variables are identified by their index (`RegionIndex`). The\n+    /// variables are identified by their index (`RegionVid`). The\n     /// definition contains information about where the region came\n     /// from as well as its final inferred value.\n-    definitions: IndexVec<RegionIndex, RegionDefinition<'tcx>>,\n+    definitions: IndexVec<RegionVid, RegionDefinition<'tcx>>,\n \n     /// The indices of all \"free regions\" in scope. These are the\n     /// lifetime parameters (anonymous and named) declared in the\n@@ -35,7 +34,7 @@ pub struct RegionInferenceContext<'tcx> {\n     ///\n     /// These indices will be from 0..N, as it happens, but we collect\n     /// them into a vector for convenience.\n-    free_regions: Vec<RegionIndex>,\n+    free_regions: Vec<RegionVid>,\n \n     /// The constraints we have accumulated and used during solving.\n     constraints: Vec<Constraint>,\n@@ -66,7 +65,7 @@ struct RegionDefinition<'tcx> {\n #[derive(Clone, Default, PartialEq, Eq)]\n struct Region {\n     points: BTreeSet<Location>,\n-    free_regions: BTreeSet<RegionIndex>,\n+    free_regions: BTreeSet<RegionVid>,\n }\n \n impl fmt::Debug for Region {\n@@ -84,7 +83,7 @@ impl Region {\n         self.points.insert(point)\n     }\n \n-    fn add_free_region(&mut self, region: RegionIndex) -> bool {\n+    fn add_free_region(&mut self, region: RegionVid) -> bool {\n         self.free_regions.insert(region)\n     }\n \n@@ -99,10 +98,10 @@ pub struct Constraint {\n     span: Span,\n \n     /// The region SUP must outlive SUB...\n-    sup: RegionIndex,\n+    sup: RegionVid,\n \n     /// Region that must be outlived.\n-    sub: RegionIndex,\n+    sub: RegionVid,\n \n     /// At this location.\n     point: Location,\n@@ -198,24 +197,24 @@ impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Returns an iterator over all the region indices.\n-    pub fn regions(&self) -> impl Iterator<Item = RegionIndex> {\n+    pub fn regions(&self) -> impl Iterator<Item = RegionVid> {\n         self.definitions.indices()\n     }\n \n     /// Returns true if the region `r` contains the point `p`.\n     ///\n     /// Until `solve()` executes, this value is not particularly meaningful.\n-    pub fn region_contains_point(&self, r: RegionIndex, p: Location) -> bool {\n+    pub fn region_contains_point(&self, r: RegionVid, p: Location) -> bool {\n         self.definitions[r].value.contains_point(p)\n     }\n \n     /// Returns access to the value of `r` for debugging purposes.\n-    pub(super) fn region_value(&self, r: RegionIndex) -> &fmt::Debug {\n+    pub(super) fn region_value(&self, r: RegionVid) -> &fmt::Debug {\n         &self.definitions[r].value\n     }\n \n     /// Indicates that the region variable `v` is live at the point `point`.\n-    pub(super) fn add_live_point(&mut self, v: RegionIndex, point: Location) {\n+    pub(super) fn add_live_point(&mut self, v: RegionVid, point: Location) {\n         debug!(\"add_live_point({:?}, {:?})\", v, point);\n         let definition = &mut self.definitions[v];\n         if !definition.constant {\n@@ -231,8 +230,8 @@ impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n     pub(super) fn add_outlives(\n         &mut self,\n         span: Span,\n-        sup: RegionIndex,\n-        sub: RegionIndex,\n+        sup: RegionVid,\n+        sub: RegionVid,\n         point: Location,\n     ) {\n         debug!(\"add_outlives({:?}: {:?} @ {:?}\", sup, sub, point);\n@@ -268,7 +267,7 @@ impl<'a, 'gcx, 'tcx> RegionInferenceContext<'tcx> {\n     fn propagate_constraints(\n         &mut self,\n         mir: &Mir<'tcx>,\n-    ) -> Vec<(RegionIndex, Span, RegionIndex)> {\n+    ) -> Vec<(RegionVid, Span, RegionVid)> {\n         let mut changed = true;\n         let mut dfs = Dfs::new(mir);\n         let mut error_regions = FxHashSet();"}, {"sha": "7cdcb106c8c246ff8b073d8e3a7586a7ffd103f6", "filename": "src/librustc_mir/transform/nll/renumber.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs?ref=72675d82d7147c7de54f17e59b654d2f046d1cbd", "patch": "@@ -17,7 +17,6 @@ use rustc::infer::{self as rustc_infer, InferCtxt};\n use syntax_pos::DUMMY_SP;\n use std::collections::HashMap;\n \n-use super::RegionIndex;\n use super::free_regions::FreeRegions;\n \n /// Replaces all free regions appearing in the MIR with fresh\n@@ -52,7 +51,7 @@ struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     num_region_variables: usize,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     free_regions: &'a FreeRegions<'tcx>,\n-    free_region_inference_vars: IndexVec<RegionIndex, ty::Region<'tcx>>,\n+    free_region_inference_vars: IndexVec<RegionVid, ty::Region<'tcx>>,\n     arg_count: usize,\n }\n "}, {"sha": "bb41477dcbf9e579892e9a19d2b8a3c5a2da4834", "filename": "src/librustc_mir/transform/nll/subtype.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72675d82d7147c7de54f17e59b654d2f046d1cbd/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fsubtype.rs?ref=72675d82d7147c7de54f17e59b654d2f046d1cbd", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::RegionIndex;\n-use transform::nll::ToRegionIndex;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use transform::nll::ToRegionVid;\n+use rustc::ty::{self, Ty, TyCtxt, RegionVid};\n use rustc::ty::relate::{self, Relate, RelateResult, TypeRelation};\n \n pub fn outlives_pairs<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                       a: Ty<'tcx>,\n                       b: Ty<'tcx>)\n-                      -> Vec<(RegionIndex, RegionIndex)>\n+                      -> Vec<(RegionVid, RegionVid)>\n {\n     let mut subtype = Subtype::new(tcx);\n     match subtype.relate(&a, &b) {\n@@ -28,7 +27,7 @@ pub fn outlives_pairs<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n \n struct Subtype<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    outlives_pairs: Vec<(RegionIndex, RegionIndex)>,\n+    outlives_pairs: Vec<(RegionVid, RegionVid)>,\n     ambient_variance: ty::Variance,\n }\n \n@@ -67,8 +66,8 @@ impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Subtype<'a, 'gcx, 'tcx> {\n \n     fn regions(&mut self, r_a: ty::Region<'tcx>, r_b: ty::Region<'tcx>)\n                -> RelateResult<'tcx, ty::Region<'tcx>> {\n-        let a = r_a.to_region_index();\n-        let b = r_b.to_region_index();\n+        let a = r_a.to_region_vid();\n+        let b = r_b.to_region_vid();\n \n         match self.ambient_variance {\n             ty::Covariant => {"}]}