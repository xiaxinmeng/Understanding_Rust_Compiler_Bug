{"sha": "38c11bea217847d81da397881f754ae8a8e2725a", "node_id": "C_kwDOAAsO6NoAKDM4YzExYmVhMjE3ODQ3ZDgxZGEzOTc4ODFmNzU0YWU4YThlMjcyNWE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-18T16:23:50Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-18T16:28:02Z"}, "message": "Move `convert_to_def_in_trait` into `ide-db`", "tree": {"sha": "df5bfc42613ced8a6ccc3dd3ea366dfe928e6686", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df5bfc42613ced8a6ccc3dd3ea366dfe928e6686"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38c11bea217847d81da397881f754ae8a8e2725a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38c11bea217847d81da397881f754ae8a8e2725a", "html_url": "https://github.com/rust-lang/rust/commit/38c11bea217847d81da397881f754ae8a8e2725a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38c11bea217847d81da397881f754ae8a8e2725a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb4837b2d07aeac2126dc6312a7a48992d11b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb4837b2d07aeac2126dc6312a7a48992d11b85", "html_url": "https://github.com/rust-lang/rust/commit/dcb4837b2d07aeac2126dc6312a7a48992d11b85"}], "stats": {"total": 77, "additions": 30, "deletions": 47}, "files": [{"sha": "81467ab07a2ff5f994562c75e1c426f359b15087", "filename": "crates/ide-db/src/imports/import_assets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38c11bea217847d81da397881f754ae8a8e2725a/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c11bea217847d81da397881f754ae8a8e2725a/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs?ref=38c11bea217847d81da397881f754ae8a8e2725a", "patch": "@@ -401,7 +401,7 @@ fn import_for_item(\n     })\n }\n \n-fn item_for_path_search(db: &RootDatabase, item: ItemInNs) -> Option<ItemInNs> {\n+pub fn item_for_path_search(db: &RootDatabase, item: ItemInNs) -> Option<ItemInNs> {\n     Some(match item {\n         ItemInNs::Types(_) | ItemInNs::Values(_) => match item_as_assoc(db, item) {\n             Some(assoc_item) => match assoc_item.container(db) {"}, {"sha": "f114d934e4fde90f0fda9aaddebdc495420fc6a7", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/38c11bea217847d81da397881f754ae8a8e2725a/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c11bea217847d81da397881f754ae8a8e2725a/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=38c11bea217847d81da397881f754ae8a8e2725a", "patch": "@@ -24,7 +24,7 @@ use std::fmt;\n \n use base_db::{AnchoredPathBuf, FileId, FileRange};\n use either::Either;\n-use hir::{AsAssocItem, FieldSource, HasSource, InFile, ModuleSource, Semantics};\n+use hir::{FieldSource, HasSource, InFile, ModuleSource, Semantics};\n use stdx::never;\n use syntax::{\n     ast::{self, HasName},\n@@ -37,6 +37,7 @@ use crate::{\n     search::FileReference,\n     source_change::{FileSystemEdit, SourceChange},\n     syntax_helpers::node_ext::expr_as_name_ref,\n+    traits::convert_to_def_in_trait,\n     RootDatabase,\n };\n \n@@ -271,7 +272,7 @@ fn rename_reference(\n         }\n     }\n \n-    let def = convert_to_def_in_trait(def, sema);\n+    let def = convert_to_def_in_trait(sema.db, def);\n     let usages = def.usages(sema).all();\n \n     if !usages.is_empty() && ident_kind == IdentifierKind::Underscore {\n@@ -298,47 +299,6 @@ fn rename_reference(\n     Ok(source_change)\n }\n \n-pub(crate) fn convert_to_def_in_trait(\n-    def: Definition,\n-    sema: &Semantics<RootDatabase>,\n-) -> Definition {\n-    // HACK: resolve trait impl items to the item def of the trait definition\n-    // so that we properly resolve all trait item references\n-    let assoc_item = match def {\n-        Definition::Function(it) => it.as_assoc_item(sema.db),\n-        Definition::TypeAlias(it) => it.as_assoc_item(sema.db),\n-        Definition::Const(it) => it.as_assoc_item(sema.db),\n-        _ => None,\n-    };\n-    match assoc_item {\n-        Some(assoc) => assoc\n-            .containing_trait_impl(sema.db)\n-            .and_then(|trait_| {\n-                trait_.items(sema.db).into_iter().find_map(|it| match (it, assoc) {\n-                    (hir::AssocItem::Function(trait_func), hir::AssocItem::Function(func))\n-                        if trait_func.name(sema.db) == func.name(sema.db) =>\n-                    {\n-                        Some(Definition::Function(trait_func))\n-                    }\n-                    (hir::AssocItem::Const(trait_konst), hir::AssocItem::Const(konst))\n-                        if trait_konst.name(sema.db) == konst.name(sema.db) =>\n-                    {\n-                        Some(Definition::Const(trait_konst))\n-                    }\n-                    (\n-                        hir::AssocItem::TypeAlias(trait_type_alias),\n-                        hir::AssocItem::TypeAlias(type_alias),\n-                    ) if trait_type_alias.name(sema.db) == type_alias.name(sema.db) => {\n-                        Some(Definition::TypeAlias(trait_type_alias))\n-                    }\n-                    _ => None,\n-                })\n-            })\n-            .unwrap_or(def),\n-        None => def,\n-    }\n-}\n-\n pub fn source_edit_from_references(\n     references: &[FileReference],\n     def: Definition,"}, {"sha": "b3b957c0ef2a86216f9932e3e0931a7d160776a6", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38c11bea217847d81da397881f754ae8a8e2725a/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c11bea217847d81da397881f754ae8a8e2725a/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=38c11bea217847d81da397881f754ae8a8e2725a", "patch": "@@ -16,6 +16,7 @@ use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n \n use crate::{\n     defs::{Definition, NameClass, NameRefClass},\n+    traits::convert_to_def_in_trait,\n     RootDatabase,\n };\n \n@@ -620,7 +621,7 @@ impl<'a> FindUsages<'a> {\n                 sink(file_id, reference)\n             }\n             Some(NameRefClass::Definition(def))\n-                if crate::rename::convert_to_def_in_trait(def, self.sema) == self.def =>\n+                if convert_to_def_in_trait(self.sema.db, def) == self.def =>\n             {\n                 let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n                 let reference = FileReference {"}, {"sha": "666499ed7a5e3ae6bc8b9599cdd135e13335fd0a", "filename": "crates/ide-db/src/traits.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/38c11bea217847d81da397881f754ae8a8e2725a/crates%2Fide-db%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c11bea217847d81da397881f754ae8a8e2725a/crates%2Fide-db%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Ftraits.rs?ref=38c11bea217847d81da397881f754ae8a8e2725a", "patch": "@@ -1,7 +1,7 @@\n //! Functionality for obtaining data related to traits from the DB.\n \n-use crate::RootDatabase;\n-use hir::Semantics;\n+use crate::{defs::Definition, RootDatabase};\n+use hir::{db::HirDatabase, AsAssocItem, Semantics};\n use rustc_hash::FxHashSet;\n use syntax::{ast, AstNode};\n \n@@ -69,6 +69,28 @@ pub fn get_missing_assoc_items(\n     })\n }\n \n+/// Converts associated trait impl items to their trait definition counterpart\n+pub(crate) fn convert_to_def_in_trait(db: &dyn HirDatabase, def: Definition) -> Definition {\n+    use hir::AssocItem::*;\n+    (|| {\n+        let assoc = def.as_assoc_item(db)?;\n+        let trait_ = assoc.containing_trait_impl(db)?;\n+        let name = match assoc {\n+            Function(it) => it.name(db),\n+            Const(it) => it.name(db)?,\n+            TypeAlias(it) => it.name(db),\n+        };\n+        let item = trait_.items(db).into_iter().find(|it| match (it, assoc) {\n+            (Function(trait_func), Function(_)) => trait_func.name(db) == name,\n+            (Const(trait_konst), Const(_)) => trait_konst.name(db).map_or(false, |it| it == name),\n+            (TypeAlias(trait_type_alias), TypeAlias(_)) => trait_type_alias.name(db) == name,\n+            _ => false,\n+        })?;\n+        Some(Definition::from(item))\n+    })()\n+    .unwrap_or(def)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use base_db::{fixture::ChangeFixture, FilePosition};"}]}