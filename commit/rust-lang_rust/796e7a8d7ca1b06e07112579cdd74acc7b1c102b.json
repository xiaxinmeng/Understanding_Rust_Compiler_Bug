{"sha": "796e7a8d7ca1b06e07112579cdd74acc7b1c102b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NmU3YThkN2NhMWIwNmUwNzExMjU3OWNkZDc0YWNjN2IxYzEwMmI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-07-26T15:10:21Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-07-26T15:12:10Z"}, "message": "Address review comments", "tree": {"sha": "9b55b7c3a2fb86c0f654a40ff2866d65adebc16f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b55b7c3a2fb86c0f654a40ff2866d65adebc16f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/796e7a8d7ca1b06e07112579cdd74acc7b1c102b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/796e7a8d7ca1b06e07112579cdd74acc7b1c102b", "html_url": "https://github.com/rust-lang/rust/commit/796e7a8d7ca1b06e07112579cdd74acc7b1c102b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/796e7a8d7ca1b06e07112579cdd74acc7b1c102b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc1d01bb9d81fa3682186d8ace06becaa8cac8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc1d01bb9d81fa3682186d8ace06becaa8cac8c", "html_url": "https://github.com/rust-lang/rust/commit/3bc1d01bb9d81fa3682186d8ace06becaa8cac8c"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "934fa7f6f877b654c90bcac69b89aa31ebcddc58", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/796e7a8d7ca1b06e07112579cdd74acc7b1c102b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796e7a8d7ca1b06e07112579cdd74acc7b1c102b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=796e7a8d7ca1b06e07112579cdd74acc7b1c102b", "patch": "@@ -541,6 +541,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         match self.alloc_map.get_or(id, || Err(())) {\n             Ok((_, alloc)) => Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n             Err(()) => {\n+                // Not a local allocation, check the global `tcx.alloc_map`.\n+\n                 // Can't do this in the match argument, we may get cycle errors since the lock would\n                 // be held throughout the match.\n                 let alloc = self.tcx.alloc_map.lock().get(id);\n@@ -549,20 +551,22 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                         // Use size and align of the type\n                         let ty = self.tcx.type_of(did);\n                         let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                        return Ok((layout.size, layout.align.abi));\n+                        Ok((layout.size, layout.align.abi))\n                     },\n                     Some(GlobalAlloc::Memory(alloc)) =>\n                         // Need to duplicate the logic here, because the global allocations have\n                         // different associated types than the interpreter-local ones\n                         Ok((Size::from_bytes(alloc.bytes.len() as u64), alloc.align)),\n-                    Some(GlobalAlloc::Function(_)) => if let AllocCheck::Dereferencable = liveness {\n-                        // The caller requested no function pointers.\n-                        return err!(DerefFunctionPointer);\n-                    } else {\n-                        return Ok((Size::ZERO, Align::from_bytes(1).unwrap()));\n+                    Some(GlobalAlloc::Function(_)) => {\n+                        if let AllocCheck::Dereferencable = liveness {\n+                            // The caller requested no function pointers.\n+                            err!(DerefFunctionPointer)\n+                        } else {\n+                            Ok((Size::ZERO, Align::from_bytes(1).unwrap()))\n+                        }\n                     },\n                     // The rest must be dead.\n-                    None => return if let AllocCheck::MaybeDead = liveness {\n+                    None => if let AllocCheck::MaybeDead = liveness {\n                         // Deallocated pointers are allowed, we should be able to find\n                         // them in the map.\n                         Ok(*self.dead_alloc_map.get(&id)"}]}