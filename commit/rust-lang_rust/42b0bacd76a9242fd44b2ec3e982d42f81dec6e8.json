{"sha": "42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYjBiYWNkNzZhOTI0MmZkNDRiMmVjM2U5ODJkNDJmODFkZWM2ZTg=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-26T15:36:59Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-26T15:38:30Z"}, "message": "Removed deprecated `str()` functions in int-template.rs and uint-template.rs", "tree": {"sha": "5f4ef96450fe814467d6be3a690118c7fbdebc57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f4ef96450fe814467d6be3a690118c7fbdebc57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "html_url": "https://github.com/rust-lang/rust/commit/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6439e286f90a34d96cec91d82f941f7572817939", "url": "https://api.github.com/repos/rust-lang/rust/commits/6439e286f90a34d96cec91d82f941f7572817939", "html_url": "https://github.com/rust-lang/rust/commit/6439e286f90a34d96cec91d82f941f7572817939"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "0017af9e021ea3b352abeb67ce01c2148b95ec4b", "filename": "doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -556,7 +556,7 @@ let mut x = 5;\n loop {\n     x += x - 3;\n     if x % 5 == 0 { break; }\n-    io::println(int::str(x));\n+    io::println(int::to_str(x));\n }\n ~~~~\n "}, {"sha": "ef661d2160b641ccf3cb4d99470a6b6e9ba2d595", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -265,11 +265,6 @@ pub pure fn to_str_radix(num: T, radix: uint) -> ~str {\n     buf\n }\n \n-/// Convert to a string.\n-/// *Deprecated*, use to_str() instead.\n-#[inline(always)]\n-pub pure fn str(i: T) -> ~str { to_str(i) }\n-\n impl ToStr for T {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str {"}, {"sha": "8d5726b867920340bf7ba4f5693b02acea5b04fb", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -229,11 +229,6 @@ pub pure fn to_str_radix(num: T, radix: uint) -> ~str {\n     buf\n }\n \n-/// Convert to a string.\n-/// *Deprecated*, use to_str() instead.\n-#[inline(always)]\n-pub pure fn str(i: T) -> ~str { to_str(i) }\n-\n impl ToStr for T {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str {"}, {"sha": "634c1aff555299ee38ae1a28a62a337aac18798a", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -290,7 +290,7 @@ pub fn check_variants_T<T: Copy>(\n \n     if L < 100 {\n         do under(uint::min(L, 20)) |i| {\n-            log(error, ~\"Replacing... #\" + uint::str(i));\n+            log(error, ~\"Replacing... #\" + uint::to_str(i));\n             let fname = str::from_slice(filename.to_str());\n             do under(uint::min(L, 30)) |j| {\n                 log(error, ~\"With... \" + stringifier(@things[j], intr));\n@@ -415,7 +415,7 @@ pub fn check_running(exe_filename: &Path) -> happiness {\n             }\n             rc => {\n               failed(~\"Rust program ran but exited with status \" +\n-                     int::str(rc))\n+                     int::to_str(rc))\n             }\n         }\n     }"}, {"sha": "dccbf7c778eb954c0b1c92a4526249d3f59d1ab0", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -307,7 +307,7 @@ fn enc_sty(w: io::Writer, cx: @ctxt, +st: ty::sty) {\n         w.write_char('p');\n         w.write_str((cx.ds)(did));\n         w.write_char('|');\n-        w.write_str(uint::str(id));\n+        w.write_str(uint::to_str(id));\n       }\n       ty::ty_self => {\n         w.write_char('s');"}, {"sha": "a3ef3833d97552c3aec88c62b3bee4d5db3d6aaf", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -117,7 +117,7 @@ pub fn annotate_freevars(def_map: resolve::DefMap, crate: @ast::crate) ->\n \n pub fn get_freevars(tcx: ty::ctxt, fid: ast::node_id) -> freevar_info {\n     match tcx.freevars.find(&fid) {\n-      None => fail!(~\"get_freevars: \" + int::str(fid) + ~\" has no freevars\"),\n+      None => fail!(~\"get_freevars: \"+int::to_str(fid)+~\" has no freevars\"),\n       Some(d) => return d\n     }\n }"}, {"sha": "c8379d3ef4444fa95e4f4bfd8d1209ba31a1485f", "filename": "src/libstd/time.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -842,7 +842,7 @@ priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n           //'U' {}\n           'u' => {\n             let i = tm.tm_wday as int;\n-            int::str(if i == 0 { 7 } else { i })\n+            int::to_str(if i == 0 { 7 } else { i })\n           }\n           //'V' {}\n           'v' => {\n@@ -852,10 +852,10 @@ priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n                 parse_type('Y', tm))\n           }\n           //'W' {}\n-          'w' => int::str(tm.tm_wday as int),\n+          'w' => int::to_str(tm.tm_wday as int),\n           //'X' {}\n           //'x' {}\n-          'Y' => int::str(tm.tm_year as int + 1900),\n+          'Y' => int::to_str(tm.tm_year as int + 1900),\n           'y' => fmt!(\"%02d\", (tm.tm_year as int + 1900) % 100),\n           'Z' => copy tm.tm_zone,\n           'z' => {\n@@ -902,15 +902,15 @@ mod tests {\n         const some_future_date: i64 = 1577836800i64; // 2020-01-01T00:00:00Z\n \n         let tv1 = get_time();\n-        log(debug, ~\"tv1=\" + uint::str(tv1.sec as uint) + ~\" sec + \"\n-                   + uint::str(tv1.nsec as uint) + ~\" nsec\");\n+        log(debug, ~\"tv1=\" + uint::to_str(tv1.sec as uint) + ~\" sec + \"\n+                   + uint::to_str(tv1.nsec as uint) + ~\" nsec\");\n \n         assert tv1.sec > some_recent_date;\n         assert tv1.nsec < 1000000000i32;\n \n         let tv2 = get_time();\n-        log(debug, ~\"tv2=\" + uint::str(tv2.sec as uint) + ~\" sec + \"\n-                   + uint::str(tv2.nsec as uint) + ~\" nsec\");\n+        log(debug, ~\"tv2=\" + uint::to_str(tv2.sec as uint) + ~\" sec + \"\n+                   + uint::to_str(tv2.nsec as uint) + ~\" nsec\");\n \n         assert tv2.sec >= tv1.sec;\n         assert tv2.sec < some_future_date;\n@@ -927,13 +927,13 @@ mod tests {\n         log(debug, ~\"s0=\" + float::to_str_digits(s0, 9u) + ~\" sec\");\n         assert s0 > 0.;\n         let ns0 = (s0 * 1000000000.) as u64;\n-        log(debug, ~\"ns0=\" + u64::str(ns0) + ~\" ns\");\n+        log(debug, ~\"ns0=\" + u64::to_str(ns0) + ~\" ns\");\n \n-        log(debug, ~\"ns1=\" + u64::str(ns1) + ~\" ns\");\n+        log(debug, ~\"ns1=\" + u64::to_str(ns1) + ~\" ns\");\n         assert ns1 >= ns0;\n \n         let ns2 = precise_time_ns();\n-        log(debug, ~\"ns2=\" + u64::str(ns2) + ~\" ns\");\n+        log(debug, ~\"ns2=\" + u64::to_str(ns2) + ~\" ns\");\n         assert ns2 >= ns1;\n     }\n "}, {"sha": "2853382136546facc082839349f350d1659d9966", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -122,7 +122,7 @@ fn main() {\n                 let elapsed = stop - start;\n \n                 out.write_line(fmt!(\"%d\\t%d\\t%s\", n, fibn,\n-                                    u64::str(elapsed)));\n+                                    u64::to_str(elapsed)));\n             }\n         }\n     }"}, {"sha": "1f803f28e7a25aea2066cf0b2e35d7dd1efcc9c4", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -36,7 +36,7 @@ impl<A> option_monad<A> for Option<A> {\n }\n \n fn transform(x: Option<int>) -> Option<~str> {\n-    x.bind(|n| Some(*n + 1) ).bind(|n| Some(int::str(*n)) )\n+    x.bind(|n| Some(*n + 1) ).bind(|n| Some(int::to_str(*n)) )\n }\n \n pub fn main() {"}, {"sha": "201193fd738e8de2f71b04d862817a4c4dd4ff4b", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -30,7 +30,7 @@ trait uint_utils {\n }\n \n impl uint_utils for uint {\n-    fn str() -> ~str { uint::str(self) }\n+    fn str() -> ~str { uint::to_str(self) }\n     fn multi(f: fn(uint)) {\n         let mut c = 0u;\n         while c < self { f(c); c += 1u; }"}, {"sha": "4a6651fe20555c91e1583480d5d1a310652531c1", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -14,7 +14,7 @@ trait to_str {\n     fn to_str() -> ~str;\n }\n impl to_str for int {\n-    fn to_str() -> ~str { int::str(self) }\n+    fn to_str() -> ~str { int::to_str(self) }\n }\n impl to_str for ~str {\n     fn to_str() -> ~str { copy self }"}, {"sha": "23d03ba217209472449d5f4c782d367c76791ae9", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b0bacd76a9242fd44b2ec3e982d42f81dec6e8/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=42b0bacd76a9242fd44b2ec3e982d42f81dec6e8", "patch": "@@ -21,7 +21,7 @@ trait to_str {\n }\n \n impl to_str for int {\n-    fn to_str() -> ~str { int::str(self) }\n+    fn to_str() -> ~str { int::to_str(self) }\n }\n \n impl<T:to_str> to_str for ~[T] {"}]}