{"sha": "a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d", "node_id": "C_kwDOAAsO6NoAKGEwODNkZDY1M2FmMGY3ZjQ2YmE2MDU4YWI1MWUxZjlkNmEyYWNhN2Q", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-11-05T00:07:23Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-11-09T19:54:42Z"}, "message": "optimize Hash for Path\n\nHashing does not have to use the whole Components parsing machinery because we only need it to match the\nnormalizations that Components does.\n\n* stripping redundant separators -> skipping separators\n* stripping redundant '.' directories -> skipping '.' following after a separator\n\nThat's all it takes.\n\nAnd instead of hashing individual slices for each component we feed the bytes directly into the hasher which avoids\nhashing the length of each component in addition to its contents.", "tree": {"sha": "82e71181dfc6e44c025aba5e5cf7a3b8fcb72d73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e71181dfc6e44c025aba5e5cf7a3b8fcb72d73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d", "html_url": "https://github.com/rust-lang/rust/commit/a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82b4544ddc58fb905c4457900fa9faf196f79e87", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b4544ddc58fb905c4457900fa9faf196f79e87", "html_url": "https://github.com/rust-lang/rust/commit/82b4544ddc58fb905c4457900fa9faf196f79e87"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "aca3a42f20ad1d43a9f353a95fc1c0d07a1af94c", "filename": "library/std/src/path.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=a083dd653af0f7f46ba6058ab51e1f9d6a2aca7d", "patch": "@@ -2873,9 +2873,35 @@ impl cmp::PartialEq for Path {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Hash for Path {\n     fn hash<H: Hasher>(&self, h: &mut H) {\n-        for component in self.components() {\n-            component.hash(h);\n+        let bytes = self.as_u8_slice();\n+\n+        let mut component_start = 0;\n+        let mut bytes_hashed = 0;\n+\n+        for i in 0..bytes.len() {\n+            if is_sep_byte(bytes[i]) {\n+                if i > component_start {\n+                    let to_hash = &bytes[component_start..i];\n+                    h.write(to_hash);\n+                    bytes_hashed += to_hash.len();\n+                }\n+\n+                // skip over separator and optionally a following CurDir item\n+                // since components() would normalize these away\n+                component_start = i + match bytes[i..] {\n+                    [_, b'.', b'/', ..] | [_, b'.'] => 2,\n+                    _ => 1,\n+                };\n+            }\n+        }\n+\n+        if component_start < bytes.len() {\n+            let to_hash = &bytes[component_start..];\n+            h.write(to_hash);\n+            bytes_hashed += to_hash.len();\n         }\n+\n+        h.write_usize(bytes_hashed);\n     }\n }\n "}]}