{"sha": "14a127be3ed2ea1151875e11b188a569ebc836a9", "node_id": "C_kwDOAAsO6NoAKDE0YTEyN2JlM2VkMmVhMTE1MTg3NWUxMWIxODhhNTY5ZWJjODM2YTk", "commit": {"author": {"name": "George", "email": "33588728+George-lewis@users.noreply.github.com", "date": "2022-04-26T21:04:44Z"}, "committer": {"name": "George", "email": "33588728+George-lewis@users.noreply.github.com", "date": "2022-04-26T21:04:44Z"}, "message": "Add new diagnostic", "tree": {"sha": "c06f280bf6110ab49a3e34bba5c6990f51bc1db4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c06f280bf6110ab49a3e34bba5c6990f51bc1db4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14a127be3ed2ea1151875e11b188a569ebc836a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14a127be3ed2ea1151875e11b188a569ebc836a9", "html_url": "https://github.com/rust-lang/rust/commit/14a127be3ed2ea1151875e11b188a569ebc836a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14a127be3ed2ea1151875e11b188a569ebc836a9/comments", "author": {"login": "George-lewis", "id": 33588728, "node_id": "MDQ6VXNlcjMzNTg4NzI4", "avatar_url": "https://avatars.githubusercontent.com/u/33588728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/George-lewis", "html_url": "https://github.com/George-lewis", "followers_url": "https://api.github.com/users/George-lewis/followers", "following_url": "https://api.github.com/users/George-lewis/following{/other_user}", "gists_url": "https://api.github.com/users/George-lewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/George-lewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/George-lewis/subscriptions", "organizations_url": "https://api.github.com/users/George-lewis/orgs", "repos_url": "https://api.github.com/users/George-lewis/repos", "events_url": "https://api.github.com/users/George-lewis/events{/privacy}", "received_events_url": "https://api.github.com/users/George-lewis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "George-lewis", "id": 33588728, "node_id": "MDQ6VXNlcjMzNTg4NzI4", "avatar_url": "https://avatars.githubusercontent.com/u/33588728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/George-lewis", "html_url": "https://github.com/George-lewis", "followers_url": "https://api.github.com/users/George-lewis/followers", "following_url": "https://api.github.com/users/George-lewis/following{/other_user}", "gists_url": "https://api.github.com/users/George-lewis/gists{/gist_id}", "starred_url": "https://api.github.com/users/George-lewis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/George-lewis/subscriptions", "organizations_url": "https://api.github.com/users/George-lewis/orgs", "repos_url": "https://api.github.com/users/George-lewis/repos", "events_url": "https://api.github.com/users/George-lewis/events{/privacy}", "received_events_url": "https://api.github.com/users/George-lewis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "082e4ca49770ebc9cb0ee616f3726a67471be8cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/082e4ca49770ebc9cb0ee616f3726a67471be8cb", "html_url": "https://github.com/rust-lang/rust/commit/082e4ca49770ebc9cb0ee616f3726a67471be8cb"}], "stats": {"total": 264, "additions": 234, "deletions": 30}, "files": [{"sha": "2d01673b61d315a6412be74cbe8bfcd40bccd026", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -3314,6 +3314,12 @@ impl<'hir> Node<'hir> {\n             _ => None,\n         }\n     }\n+\n+    /// Get the fields for the tuple-constructor,\n+    /// if this node is a tuple constructor, otherwise None\n+    pub fn tuple_fields(&self) -> Option<&'hir [FieldDef<'hir>]> {\n+        if let Node::Ctor(&VariantData::Tuple(fields, _)) = self { Some(fields) } else { None }\n+    }\n }\n \n // Some nodes are used a lot. Make sure they don't unintentionally get bigger."}, {"sha": "47cb1ea48cb54c3c6f4519979d14da23015a3ce1", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -21,11 +21,13 @@ use crate::errors::{\n };\n use crate::type_error_struct;\n \n+use super::suggest_call_constructor;\n use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructExprNonExhaustive};\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::Diagnostic;\n+use rustc_errors::EmissionGuarantee;\n use rustc_errors::ErrorGuaranteed;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n@@ -1986,6 +1988,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx().ty_error()\n     }\n \n+    fn check_call_constructor<G: EmissionGuarantee>(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_, G>,\n+        base: &'tcx hir::Expr<'tcx>,\n+        def_id: DefId,\n+    ) {\n+        let local_id = def_id.expect_local();\n+        let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_id);\n+        let node = self.tcx.hir().get(hir_id);\n+\n+        if let Some(fields) = node.tuple_fields() {\n+            let kind = match self.tcx.opt_def_kind(local_id) {\n+                Some(DefKind::Ctor(of, _)) => of,\n+                _ => return,\n+            };\n+\n+            suggest_call_constructor(base.span, kind, fields.len(), err);\n+        }\n+    }\n+\n     fn suggest_await_on_field_access(\n         &self,\n         err: &mut Diagnostic,\n@@ -2055,6 +2077,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Opaque(_, _) => {\n                 self.suggest_await_on_field_access(&mut err, field, base, expr_t.peel_refs());\n             }\n+            ty::FnDef(def_id, _) => {\n+                self.check_call_constructor(&mut err, base, def_id);\n+            }\n             _ => {}\n         }\n "}, {"sha": "95c9c775e376482950a5ccf7498d53f1904732e6", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::{\n     MultiSpan,\n };\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n@@ -29,7 +30,7 @@ use std::cmp::Ordering;\n use std::iter;\n \n use super::probe::{Mode, ProbeScope};\n-use super::{CandidateSource, MethodError, NoMatchData};\n+use super::{super::suggest_call_constructor, CandidateSource, MethodError, NoMatchData};\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn is_fn_ty(&self, ty: Ty<'tcx>, span: Span) -> bool {\n@@ -488,19 +489,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n \n                 if self.is_fn_ty(rcvr_ty, span) {\n-                    fn report_function<T: std::fmt::Display>(err: &mut Diagnostic, name: T) {\n-                        err.note(\n-                            &format!(\"`{}` is a function, perhaps you wish to call it\", name,),\n-                        );\n-                    }\n-\n                     if let SelfSource::MethodCall(expr) = source {\n-                        if let Ok(expr_string) = tcx.sess.source_map().span_to_snippet(expr.span) {\n-                            report_function(&mut err, expr_string);\n-                        } else if let ExprKind::Path(QPath::Resolved(_, path)) = expr.kind {\n-                            if let Some(segment) = path.segments.last() {\n-                                report_function(&mut err, segment.ident);\n+                        let suggest = if let ty::FnDef(def_id, _) = rcvr_ty.kind() {\n+                            let local_id = def_id.expect_local();\n+                            let hir_id = tcx.hir().local_def_id_to_hir_id(local_id);\n+                            let node = tcx.hir().get(hir_id);\n+                            let fields = node.tuple_fields();\n+\n+                            if let Some(fields) = fields\n+                                && let Some(DefKind::Ctor(of, _)) = self.tcx.opt_def_kind(local_id) {\n+                                    Some((fields, of))\n+                            } else {\n+                                None\n                             }\n+                        } else {\n+                            None\n+                        };\n+\n+                        // If the function is a tuple constructor, we recommend that they call it\n+                        if let Some((fields, kind)) = suggest {\n+                            suggest_call_constructor(expr.span, kind, fields.len(), &mut err);\n+                        } else {\n+                            // General case\n+                            err.span_label(\n+                                expr.span,\n+                                \"this is a function, perhaps you wish to call it\",\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "f7bb30cd13e6f030b0ba1d50e6d9225e2491f917", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -98,12 +98,15 @@ pub use check::{check_item_type, check_wf_new};\n pub use diverges::Diverges;\n pub use expectation::Expectation;\n pub use fn_ctxt::*;\n+use hir::def::CtorOf;\n pub use inherited::{Inherited, InheritedBuilder};\n \n use crate::astconv::AstConv;\n use crate::check::gather_locals::GatherLocalsVisitor;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n+use rustc_errors::{\n+    pluralize, struct_span_err, Applicability, DiagnosticBuilder, EmissionGuarantee, MultiSpan,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -988,3 +991,36 @@ fn has_expected_num_generic_args<'tcx>(\n         generics.count() == expected + if generics.has_self { 1 } else { 0 }\n     })\n }\n+\n+/// Suggests calling the constructor of a tuple struct or enum variant\n+///\n+/// * `snippet` - The snippet of code that references the constructor\n+/// * `span` - The span of the snippet\n+/// * `params` - The number of parameters the constructor accepts\n+/// * `err` - A mutable diagnostic builder to add the suggestion to\n+fn suggest_call_constructor<G: EmissionGuarantee>(\n+    span: Span,\n+    kind: CtorOf,\n+    params: usize,\n+    err: &mut DiagnosticBuilder<'_, G>,\n+) {\n+    // Note: tuple-structs don't have named fields, so just use placeholders\n+    let args = vec![\"_\"; params].join(\", \");\n+    let applicable = if params > 0 {\n+        Applicability::HasPlaceholders\n+    } else {\n+        // When n = 0, it's an empty-tuple struct/enum variant\n+        // so we trivially know how to construct it\n+        Applicability::MachineApplicable\n+    };\n+    let kind = match kind {\n+        CtorOf::Struct => \"a struct\",\n+        CtorOf::Variant => \"an enum variant\",\n+    };\n+    err.span_label(span, &format!(\"this is the constructor of {kind}\"));\n+    err.multipart_suggestion(\n+        \"call the constructor\",\n+        vec![(span.shrink_to_lo(), \"(\".to_string()), (span.shrink_to_hi(), format!(\")({args})\"))],\n+        applicable,\n+    );\n+}"}, {"sha": "3d2bcb8ad3550922d568c46c90673cf16ef72f8f", "filename": "src/test/ui/functions-closures/fn-help-with-err.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -3,14 +3,14 @@ fn main() {\n     let arc = std::sync::Arc::new(oops);\n     //~^ ERROR cannot find value `oops` in this scope\n     //~| NOTE not found\n-    // The error \"note: `arc` is a function, perhaps you wish to call it\" MUST NOT appear.\n+    // The error \"note: this is a function, perhaps you wish to call it\" MUST NOT appear.\n     arc.blablabla();\n     //~^ ERROR no method named `blablabla`\n     //~| NOTE method not found\n     let arc2 = std::sync::Arc::new(|| 1);\n-    // The error \"note: `arc2` is a function, perhaps you wish to call it\" SHOULD appear\n+    // The error \"note: this is a function, perhaps you wish to call it\" SHOULD appear\n     arc2.blablabla();\n     //~^ ERROR no method named `blablabla`\n     //~| NOTE method not found\n-    //~| NOTE `arc2` is a function, perhaps you wish to call it\n+    //~| NOTE this is a function, perhaps you wish to call it\n }"}, {"sha": "3e42cb1fb6ec02d6f160894aa0a551501101ba28", "filename": "src/test/ui/functions-closures/fn-help-with-err.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -14,9 +14,9 @@ error[E0599]: no method named `blablabla` found for struct `Arc<[closure@$DIR/fn\n   --> $DIR/fn-help-with-err.rs:12:10\n    |\n LL |     arc2.blablabla();\n-   |          ^^^^^^^^^ method not found in `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:40]>`\n-   |\n-   = note: `arc2` is a function, perhaps you wish to call it\n+   |     ---- ^^^^^^^^^ method not found in `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:40]>`\n+   |     |\n+   |     this is a function, perhaps you wish to call it\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c5d2ec0840996ac6afc42868ae0082c82226f913", "filename": "src/test/ui/issues/issue-29124.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -2,17 +2,17 @@ error[E0599]: no method named `x` found for fn item `fn() -> Ret {Obj::func}` in\n   --> $DIR/issue-29124.rs:15:15\n    |\n LL |     Obj::func.x();\n-   |               ^ method not found in `fn() -> Ret {Obj::func}`\n-   |\n-   = note: `Obj::func` is a function, perhaps you wish to call it\n+   |     --------- ^ method not found in `fn() -> Ret {Obj::func}`\n+   |     |\n+   |     this is a function, perhaps you wish to call it\n \n error[E0599]: no method named `x` found for fn item `fn() -> Ret {func}` in the current scope\n   --> $DIR/issue-29124.rs:17:10\n    |\n LL |     func.x();\n-   |          ^ method not found in `fn() -> Ret {func}`\n-   |\n-   = note: `func` is a function, perhaps you wish to call it\n+   |     ---- ^ method not found in `fn() -> Ret {func}`\n+   |     |\n+   |     this is a function, perhaps you wish to call it\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8e19f14009a0ea92e0498c5f81d2a1c0ff012fe2", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -2,9 +2,10 @@ error[E0599]: no method named `f` found for fn pointer `fn(&u8)` in the current\n   --> $DIR/issue-57362-1.rs:20:7\n    |\n LL |     a.f();\n-   |       ^ method not found in `fn(&u8)`\n+   |     - ^ method not found in `fn(&u8)`\n+   |     |\n+   |     this is a function, perhaps you wish to call it\n    |\n-   = note: `a` is a function, perhaps you wish to call it\n    = help: items from traits can only be used if the trait is implemented and in scope\n note: `Trait` defines an item `f`, perhaps you need to implement it\n   --> $DIR/issue-57362-1.rs:8:1"}, {"sha": "9f97f7dcadf3d07208d40f28cb36024c75ba7390", "filename": "src/test/ui/typeck/issue-87181/empty-tuple-method.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -0,0 +1,14 @@\n+struct Bar<T> {\n+    bar: T\n+}\n+\n+struct Foo();\n+impl Foo {\n+    fn foo() { }\n+}\n+\n+fn main() {\n+    let thing = Bar { bar: Foo };\n+    thing.bar.foo();\n+    //~^ ERROR no method named `foo` found for fn item `fn() -> Foo {Foo}` in the current scope [E0599]\n+}\n\\ No newline at end of file"}, {"sha": "6ed70b301e4a45543e547148177fd1222fa9bfad", "filename": "src/test/ui/typeck/issue-87181/empty-tuple-method.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -0,0 +1,16 @@\n+error[E0599]: no method named `foo` found for fn item `fn() -> Foo {Foo}` in the current scope\n+  --> $DIR/empty-tuple-method.rs:12:15\n+   |\n+LL |     thing.bar.foo();\n+   |     --------- ^^^ method not found in `fn() -> Foo {Foo}`\n+   |     |\n+   |     this is the constructor of a struct\n+   |\n+help: call the constructor\n+   |\n+LL |     (thing.bar)().foo();\n+   |     +         +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "fcc89d9f07d376638e571c853f875148e5037141", "filename": "src/test/ui/typeck/issue-87181/enum-variant.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -0,0 +1,16 @@\n+struct Bar<T> {\n+    bar: T\n+}\n+\n+enum Foo{\n+    Tup()\n+}\n+impl Foo {\n+    fn foo() { }\n+}\n+\n+fn main() {\n+    let thing = Bar { bar: Foo::Tup };\n+    thing.bar.foo();\n+    //~^ ERROR no method named `foo` found for fn item `fn() -> Foo {Foo::Tup}` in the current scope [E0599]\n+}\n\\ No newline at end of file"}, {"sha": "a3a818696ab5ba18afc336f88130dd2f4ade7ed3", "filename": "src/test/ui/typeck/issue-87181/enum-variant.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -0,0 +1,16 @@\n+error[E0599]: no method named `foo` found for fn item `fn() -> Foo {Foo::Tup}` in the current scope\n+  --> $DIR/enum-variant.rs:14:15\n+   |\n+LL |     thing.bar.foo();\n+   |     --------- ^^^ method not found in `fn() -> Foo {Foo::Tup}`\n+   |     |\n+   |     this is the constructor of an enum variant\n+   |\n+help: call the constructor\n+   |\n+LL |     (thing.bar)().foo();\n+   |     +         +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "ff1355160bd2181dd5d4cee4aa4df910d0539dba", "filename": "src/test/ui/typeck/issue-87181/tuple-field.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.rs?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -0,0 +1,14 @@\n+struct Bar<T> {\n+    bar: T\n+}\n+\n+struct Foo(char, u16);\n+impl Foo {\n+    fn foo() { }\n+}\n+\n+fn main() {\n+    let thing = Bar { bar: Foo };\n+    thing.bar.0;\n+    //~^ ERROR no field `0` on type `fn(char, u16) -> Foo {Foo}` [E0609]\n+}\n\\ No newline at end of file"}, {"sha": "4d22ada0247e98f71e76c9d0813926bc12ada199", "filename": "src/test/ui/typeck/issue-87181/tuple-field.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-field.stderr?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -0,0 +1,16 @@\n+error[E0609]: no field `0` on type `fn(char, u16) -> Foo {Foo}`\n+  --> $DIR/tuple-field.rs:12:15\n+   |\n+LL |     thing.bar.0;\n+   |     --------- ^\n+   |     |\n+   |     this is the constructor of a struct\n+   |\n+help: call the constructor\n+   |\n+LL |     (thing.bar)(_, _).0;\n+   |     +         +++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0609`."}, {"sha": "e0eadde35cef0e0f66f259226d925df17e18efb3", "filename": "src/test/ui/typeck/issue-87181/tuple-method.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.rs?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -0,0 +1,14 @@\n+struct Bar<T> {\n+    bar: T\n+}\n+\n+struct Foo(u8, i32);\n+impl Foo {\n+    fn foo() { }\n+}\n+\n+fn main() {\n+    let thing = Bar { bar: Foo };\n+    thing.bar.foo();\n+    //~^ ERROR no method named `foo` found for fn item `fn(u8, i32) -> Foo {Foo}` in the current scope [E0599]\n+}\n\\ No newline at end of file"}, {"sha": "1e392e17984b09167daaf428c24cf68837c02739", "filename": "src/test/ui/typeck/issue-87181/tuple-method.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -0,0 +1,16 @@\n+error[E0599]: no method named `foo` found for fn item `fn(u8, i32) -> Foo {Foo}` in the current scope\n+  --> $DIR/tuple-method.rs:12:15\n+   |\n+LL |     thing.bar.foo();\n+   |     --------- ^^^ method not found in `fn(u8, i32) -> Foo {Foo}`\n+   |     |\n+   |     this is the constructor of a struct\n+   |\n+help: call the constructor\n+   |\n+LL |     (thing.bar)(_, _).foo();\n+   |     +         +++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "e9883903674ad47e1f3a2d657b5dd69ab0509f11", "filename": "src/test/ui/unboxed-closures/unboxed-closures-static-call-wrong-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14a127be3ed2ea1151875e11b188a569ebc836a9/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr?ref=14a127be3ed2ea1151875e11b188a569ebc836a9", "patch": "@@ -2,9 +2,9 @@ error[E0599]: no method named `call` found for closure `[closure@$DIR/unboxed-cl\n   --> $DIR/unboxed-closures-static-call-wrong-trait.rs:7:10\n    |\n LL |     mut_.call((0, ));\n-   |          ^^^^ method not found in `[closure@$DIR/unboxed-closures-static-call-wrong-trait.rs:6:26: 6:31]`\n-   |\n-   = note: `mut_` is a function, perhaps you wish to call it\n+   |     ---- ^^^^ method not found in `[closure@$DIR/unboxed-closures-static-call-wrong-trait.rs:6:26: 6:31]`\n+   |     |\n+   |     this is a function, perhaps you wish to call it\n \n error: aborting due to previous error\n "}]}