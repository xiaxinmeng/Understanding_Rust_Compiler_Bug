{"sha": "c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YThkN2Y4NmE1ZDU0YTJmM2IzODc1ZTcwM2QwNmFjZDEyYWU3Y2M=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-01T21:12:38Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-01-13T12:49:16Z"}, "message": "Introduce missing ABI lint on extern blocks", "tree": {"sha": "5185088140d5b6b76bbf6000a8da34e916d9cdbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5185088140d5b6b76bbf6000a8da34e916d9cdbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "html_url": "https://github.com/rust-lang/rust/commit/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f3998b4aa9d0eea3249fdd48b8b719185673d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3998b4aa9d0eea3249fdd48b8b719185673d16", "html_url": "https://github.com/rust-lang/rust/commit/9f3998b4aa9d0eea3249fdd48b8b719185673d16"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "a24ab967e5cd89fe604457496097b1fc85ee807d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "patch": "@@ -3896,6 +3896,7 @@ dependencies = [\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_span\",\n+ \"rustc_target\",\n  \"tracing\",\n ]\n "}, {"sha": "7666b25b6d7091ba58147960117fe1c20c4e6248", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "patch": "@@ -317,12 +317,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 })\n             }\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n-            ItemKind::ForeignMod(ref fm) => hir::ItemKind::ForeignMod {\n-                abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n-                items: self\n-                    .arena\n-                    .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n-            },\n+            ItemKind::ForeignMod(ref fm) => {\n+                if fm.abi.is_none() {\n+                    self.maybe_lint_missing_abi(span, id, abi::Abi::C);\n+                }\n+                hir::ItemKind::ForeignMod {\n+                    abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n+                    items: self\n+                        .arena\n+                        .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n+                }\n+            }\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n             ItemKind::TyAlias(_, ref gen, _, Some(ref ty)) => {\n                 // We lower"}, {"sha": "59e55fc4ee7354be2e8b250915291aad3f511839", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "patch": "@@ -53,13 +53,15 @@ use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_session::lint::{builtin::BARE_TRAIT_OBJECTS, BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::lint::builtin::{BARE_TRAIT_OBJECTS, MISSING_ABI};\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::ParseSess;\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n+use rustc_target::spec::abi::Abi;\n \n use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeMap;\n@@ -2777,6 +2779,26 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             )\n         }\n     }\n+\n+    fn maybe_lint_missing_abi(&mut self, span: Span, id: NodeId, default: Abi) {\n+        // FIXME(davidtwco): This is a hack to detect macros which produce spans of the\n+        // call site which do not have a macro backtrace. See #61963.\n+        let is_macro_callsite = self\n+            .sess\n+            .source_map()\n+            .span_to_snippet(span)\n+            .map(|snippet| snippet.starts_with(\"#[\"))\n+            .unwrap_or(true);\n+        if !is_macro_callsite {\n+            self.resolver.lint_buffer().buffer_lint_with_diagnostic(\n+                MISSING_ABI,\n+                id,\n+                span,\n+                \"extern declarations without an explicit ABI are deprecated\",\n+                BuiltinLintDiagnostics::MissingAbi(span, default),\n+            )\n+        }\n+    }\n }\n \n fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body<'_>>) -> Vec<hir::BodyId> {"}, {"sha": "0f40324acb11cc09a4c52eb376d0669dbdde00ce", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "patch": "@@ -600,6 +600,10 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::PatternsInFnsWithoutBody(span, ident) => {\n                     db.span_suggestion(span, \"remove `mut` from the parameter\", ident.to_string(), Applicability::MachineApplicable);\n                 }\n+                BuiltinLintDiagnostics::MissingAbi(span, default_abi) => {\n+                    db.span_label(span, \"ABI should be specified here\");\n+                    db.help(&format!(\"the default ABI is {}\", default_abi.name()));\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "f909f159784cbae36ad53f04e30628c08d175559", "filename": "compiler/rustc_lint_defs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_lint_defs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_lint_defs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2FCargo.toml?ref=c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "patch": "@@ -11,3 +11,4 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }\n+rustc_target = { path = \"../rustc_target\" }"}, {"sha": "e9632796704118081235ba66810973cedcb5179c", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "patch": "@@ -2917,6 +2917,7 @@ declare_lint_pass! {\n         FUNCTION_ITEM_REFERENCES,\n         USELESS_DEPRECATED,\n         UNSUPPORTED_NAKED_FUNCTIONS,\n+        MISSING_ABI,\n     ]\n }\n \n@@ -2944,3 +2945,28 @@ declare_lint! {\n }\n \n declare_lint_pass!(UnusedDocComment => [UNUSED_DOC_COMMENTS]);\n+\n+declare_lint! {\n+    /// The `missing_abi` lint detects cases where the ABI is omitted from\n+    /// extern declarations.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(missing_abi)]\n+    ///\n+    /// extern fn foo() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Historically, Rust implicitly selected C as the ABI for extern\n+    /// declarations. We expect to add new ABIs, like `C-unwind`, in the future,\n+    /// though this has not yet happened, and especially with their addition\n+    /// seeing the ABI easily will make code review easier.\n+    pub MISSING_ABI,\n+    Allow,\n+    \"No declared ABI for extern declaration\"\n+}"}, {"sha": "9d60a51a0afb3c9840299e34cd19ba09768099c1", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=c4a8d7f86a5d54a2f3b3875e703d06acd12ae7cc", "patch": "@@ -6,6 +6,7 @@ use rustc_ast::node_id::{NodeId, NodeMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n+use rustc_target::spec::abi::Abi;\n \n pub mod builtin;\n \n@@ -252,6 +253,7 @@ pub enum BuiltinLintDiagnostics {\n     UnusedImports(String, Vec<(Span, String)>),\n     RedundantImport(Vec<(Span, bool)>, Ident),\n     DeprecatedMacro(Option<Symbol>, Span),\n+    MissingAbi(Span, Abi),\n     UnusedDocComment(Span),\n     PatternsInFnsWithoutBody(Span, Ident),\n }"}]}