{"sha": "9ab83b93383f7b7f87186a2a8a289540c4e27564", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYjgzYjkzMzgzZjdiN2Y4NzE4NmEyYThhMjg5NTQwYzRlMjc1NjQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-01-13T10:09:15Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-02-15T13:27:17Z"}, "message": "Add `size_of`, `align_of`, and `layout` methods to `DynMetadata`", "tree": {"sha": "d4ce480d9eadf44a8e252fe47f312435bf1ae684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4ce480d9eadf44a8e252fe47f312435bf1ae684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab83b93383f7b7f87186a2a8a289540c4e27564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab83b93383f7b7f87186a2a8a289540c4e27564", "html_url": "https://github.com/rust-lang/rust/commit/9ab83b93383f7b7f87186a2a8a289540c4e27564", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab83b93383f7b7f87186a2a8a289540c4e27564/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e15fa8a29558b1233278f5d6da9ee37e30dcee", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e15fa8a29558b1233278f5d6da9ee37e30dcee", "html_url": "https://github.com/rust-lang/rust/commit/b1e15fa8a29558b1233278f5d6da9ee37e30dcee"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "5b5a403e7198304ab91c5c2e94ab50ec5a21eb88", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9ab83b93383f7b7f87186a2a8a289540c4e27564/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab83b93383f7b7f87186a2a8a289540c4e27564/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=9ab83b93383f7b7f87186a2a8a289540c4e27564", "patch": "@@ -2,7 +2,6 @@\n \n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::ptr::NonNull;\n \n /// FIXME docs\n #[lang = \"pointee_trait\"]\n@@ -62,17 +61,48 @@ impl<T: ?Sized> Clone for PtrComponents<T> {\n /// The metadata for a `dyn SomeTrait` trait object type.\n #[lang = \"dyn_metadata\"]\n pub struct DynMetadata<Dyn: ?Sized> {\n-    #[allow(unused)]\n-    vtable_ptr: NonNull<()>,\n+    vtable_ptr: &'static VTable,\n     phantom: crate::marker::PhantomData<Dyn>,\n }\n \n+/// The common prefix of all vtables. It is followed by function pointers for trait methods.\n+///\n+/// Private implementation detail of `DynMetadata::size_of` etc.\n+#[repr(C)]\n+struct VTable {\n+    drop_in_place: fn(*mut ()),\n+    size_of: usize,\n+    align_of: usize,\n+}\n+\n+impl<Dyn: ?Sized> DynMetadata<Dyn> {\n+    /// Returns the size of the type associated with this vtable.\n+    #[inline]\n+    pub fn size_of(self) -> usize {\n+        self.vtable_ptr.size_of\n+    }\n+\n+    /// Returns the alignment of the type associated with this vtable.\n+    #[inline]\n+    pub fn align_of(self) -> usize {\n+        self.vtable_ptr.align_of\n+    }\n+\n+    /// Returns the size and alignment together as a `Layout`\n+    #[inline]\n+    pub fn layout(self) -> crate::alloc::Layout {\n+        // SAFETY: the compiler emitted this vtable for a concrete Rust type which\n+        // is known to have a valid layout. Same rationale as in `Layout::for_value`.\n+        unsafe { crate::alloc::Layout::from_size_align_unchecked(self.size_of(), self.align_of()) }\n+    }\n+}\n+\n unsafe impl<Dyn: ?Sized> Send for DynMetadata<Dyn> {}\n unsafe impl<Dyn: ?Sized> Sync for DynMetadata<Dyn> {}\n \n impl<Dyn: ?Sized> fmt::Debug for DynMetadata<Dyn> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(\"DynMetadata { \u2026 }\")\n+        f.debug_tuple(\"DynMetadata\").field(&(self.vtable_ptr as *const VTable)).finish()\n     }\n }\n \n@@ -94,27 +124,27 @@ impl<Dyn: ?Sized> Eq for DynMetadata<Dyn> {}\n impl<Dyn: ?Sized> PartialEq for DynMetadata<Dyn> {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n-        self.vtable_ptr == other.vtable_ptr\n+        crate::ptr::eq::<VTable>(self.vtable_ptr, other.vtable_ptr)\n     }\n }\n \n impl<Dyn: ?Sized> Ord for DynMetadata<Dyn> {\n     #[inline]\n     fn cmp(&self, other: &Self) -> crate::cmp::Ordering {\n-        self.vtable_ptr.cmp(&other.vtable_ptr)\n+        (self.vtable_ptr as *const VTable).cmp(&(other.vtable_ptr as *const VTable))\n     }\n }\n \n impl<Dyn: ?Sized> PartialOrd for DynMetadata<Dyn> {\n     #[inline]\n     fn partial_cmp(&self, other: &Self) -> Option<crate::cmp::Ordering> {\n-        Some(self.vtable_ptr.cmp(&other.vtable_ptr))\n+        Some(self.cmp(other))\n     }\n }\n \n impl<Dyn: ?Sized> Hash for DynMetadata<Dyn> {\n     #[inline]\n     fn hash<H: Hasher>(&self, hasher: &mut H) {\n-        self.vtable_ptr.hash(hasher)\n+        crate::ptr::hash::<VTable, _>(self.vtable_ptr, hasher)\n     }\n }"}, {"sha": "26fafd01806140f7a24d8ceed2d4c4aad4215edd", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ab83b93383f7b7f87186a2a8a289540c4e27564/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab83b93383f7b7f87186a2a8a289540c4e27564/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=9ab83b93383f7b7f87186a2a8a289540c4e27564", "patch": "@@ -505,3 +505,23 @@ fn ptr_metadata_bounds() {\n     {\n     }\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn dyn_metadata() {\n+    #[derive(Debug)]\n+    #[repr(align(32))]\n+    struct Something([u8; 47]);\n+\n+    let value = Something([0; 47]);\n+    let trait_object: &dyn Debug = &value;\n+    let meta = metadata(trait_object);\n+\n+    assert_eq!(meta.size_of(), 64);\n+    assert_eq!(meta.size_of(), std::mem::size_of::<Something>());\n+    assert_eq!(meta.align_of(), 32);\n+    assert_eq!(meta.align_of(), std::mem::align_of::<Something>());\n+    assert_eq!(meta.layout(), std::alloc::Layout::new::<Something>());\n+\n+    assert!(format!(\"{:?}\", meta).starts_with(\"DynMetadata(0x\"));\n+}"}]}