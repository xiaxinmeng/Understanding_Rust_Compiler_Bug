{"sha": "f59fd4642534e80a61982ce3e10c147d97054212", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OWZkNDY0MjUzNGU4MGE2MTk4MmNlM2UxMGMxNDdkOTcwNTQyMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-26T13:38:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-26T13:38:46Z"}, "message": "Auto merge of #31846 - alexcrichton:better-disable-jemallc, r=brson\n\nThe `--disable-jemalloc` configure option has a failure mode where it will\ncreate a distribution that is not compatible with other compilers. For example\nthe nightly for Linux will assume that it will link to jemalloc by default as\nan allocator for executable crates. If, however, a standard library is used\nwhich was built via `./configure --disable-jemalloc` then this will fail\nbecause the jemalloc crate wasn't built.\n\nWhile this seems somewhat reasonable as a niche situation, the same mechanism is\nused for disabling jemalloc for platforms that just don't support it. For\nexample if the rumprun target is compiled then the sibiling Linux target *also*\ndoesn't have jemalloc. This is currently a problem for our cross-build nightlies\nwhich build many targets. If rumprun is also built, it will disable jemalloc for\nall targets, which isn't desired.\n\nThis commit moves the platform-specific disabling of jemalloc as hardcoded logic\ninto the makefiles that is scoped per-platform. This way when configuring\nmultiple targets **without the `--disable-jemalloc` option specified** all\ntargets will get jemalloc as they should.", "tree": {"sha": "0fb4415e8c5fe9b2186e1492f3ebb52eaceb9b37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb4415e8c5fe9b2186e1492f3ebb52eaceb9b37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f59fd4642534e80a61982ce3e10c147d97054212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f59fd4642534e80a61982ce3e10c147d97054212", "html_url": "https://github.com/rust-lang/rust/commit/f59fd4642534e80a61982ce3e10c147d97054212", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f59fd4642534e80a61982ce3e10c147d97054212/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8b257d2e8a5b396ca8e8843756a1d662c8a550", "html_url": "https://github.com/rust-lang/rust/commit/ee8b257d2e8a5b396ca8e8843756a1d662c8a550"}, {"sha": "b980f22877685b18fa6850b97c0c2b49a94909c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b980f22877685b18fa6850b97c0c2b49a94909c3", "html_url": "https://github.com/rust-lang/rust/commit/b980f22877685b18fa6850b97c0c2b49a94909c3"}], "stats": {"total": 119, "additions": 69, "deletions": 50}, "files": [{"sha": "086dd9f74e080d0d257c5135313f9e47584870b7", "filename": "configure", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/configure", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -865,9 +865,8 @@ fi\n # Force bitrig to build with clang; gcc doesn't like us there\n if [ $CFG_OSTYPE = unknown-bitrig ]\n then\n-    step_msg \"on Bitrig, forcing use of clang, disabling jemalloc\"\n+    step_msg \"on Bitrig, forcing use of clang\"\n     CFG_ENABLE_CLANG=1\n-    CFG_DISABLE_JEMALLOC=1\n fi\n \n # default gcc version under OpenBSD maybe too old, try using egcc, which is a\n@@ -887,16 +886,6 @@ then\n             CXX=\"${CXX:-eg++}\"\n         fi\n     fi\n-\n-    step_msg \"on OpenBSD, disabling jemalloc\"\n-    CFG_DISABLE_JEMALLOC=1\n-fi\n-\n-if [ $CFG_OSTYPE = pc-windows-gnu ]\n-then\n-    # FIXME(#31030) - there's not a great reason to disable jemalloc here\n-    step_msg \"on Windows, disabling jemalloc\"\n-    CFG_DISABLE_JEMALLOC=1\n fi\n \n # OS X 10.9, gcc is actually clang. This can cause some confusion in the build\n@@ -1186,12 +1175,6 @@ do\n             ;;\n \n         *-msvc)\n-            # Currently the build system is not configured to build jemalloc\n-            # with MSVC, so we omit this optional dependency.\n-            step_msg \"targeting MSVC, disabling jemalloc\"\n-            CFG_DISABLE_JEMALLOC=1\n-            putvar CFG_DISABLE_JEMALLOC\n-\n             # There are some MSYS python builds which will auto-translate\n             # windows-style paths to MSYS-style paths in Python itself.\n             # Unfortunately this breaks LLVM's build system as somewhere along\n@@ -1300,18 +1283,6 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n             putvar CFG_MSVC_LIB_PATH_${bits}\n             ;;\n \n-        *-rumprun-netbsd)\n-            step_msg \"targeting rumprun-netbsd, disabling jemalloc\"\n-            CFG_DISABLE_JEMALLOC=1\n-            putvar CFG_DISABLE_JEMALLOC\n-            ;;\n-\n-        *-emscripten)\n-            step_msg \"targeting emscripten, disabling jemalloc\"\n-            CFG_DISABLE_JEMALLOC=1\n-            putvar CFG_DISABLE_JEMALLOC\n-            ;;\n-\n         *)\n             ;;\n     esac"}, {"sha": "9c98c0a6b4c9d87bbeca499d8a399e1648d33fc1", "filename": "mk/cfg/asmjs-unknown-emscripten.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -21,3 +21,4 @@ CFG_LDPATH_asmjs-unknown-emscripten :=\n CFG_RUN_asmjs-unknown-emscripten=$(2)\n CFG_RUN_TARG_asmjs-unknown-emscripten=$(call CFG_RUN_asmjs-unknown-emscripten,,$(2))\n CFG_GNU_TRIPLE_asmjs-unknown-emscripten := asmjs-unknown-emscripten\n+CFG_DISABLE_JEMALLOC_asmjs-unknown-emscripten := 1"}, {"sha": "0ed65effbdf48b0d5206b0ae36c2cb705e95a2ac", "filename": "mk/cfg/i686-pc-windows-gnu.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-gnu.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -25,3 +25,5 @@ CFG_GNU_TRIPLE_i686-pc-windows-gnu := i686-w64-mingw32\n CFG_THIRD_PARTY_OBJECTS_i686-pc-windows-gnu := crt2.o dllcrt2.o\n CFG_INSTALLED_OBJECTS_i686-pc-windows-gnu := crt2.o dllcrt2.o rsbegin.o rsend.o\n CFG_RUSTRT_HAS_STARTUP_OBJS_i686-pc-windows-gnu := 1\n+# FIXME(#31030) - there's not a great reason to disable jemalloc here\n+CFG_DISABLE_JEMALLOC_i686-pc-windows-gnu := 1"}, {"sha": "85b320a18a4417e5b038780206a1707e8fd6aa9f", "filename": "mk/cfg/i686-pc-windows-msvc.mk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-msvc.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -22,3 +22,7 @@ CFG_LDPATH_i686-pc-windows-msvc :=\n CFG_RUN_i686-pc-windows-msvc=$(2)\n CFG_RUN_TARG_i686-pc-windows-msvc=$(call CFG_RUN_i686-pc-windows-msvc,,$(2))\n CFG_GNU_TRIPLE_i686-pc-windows-msvc := i686-pc-win32\n+\n+# Currently the build system is not configured to build jemalloc\n+# with MSVC, so we omit this optional dependency.\n+CFG_DISABLE_JEMALLOC_i686-pc-windows-msvc := 1"}, {"sha": "f7fc4a2f26abedc6cc131402267d150125c92e86", "filename": "mk/cfg/x86_64-pc-windows-gnu.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -25,3 +25,5 @@ CFG_GNU_TRIPLE_x86_64-pc-windows-gnu := x86_64-w64-mingw32\n CFG_THIRD_PARTY_OBJECTS_x86_64-pc-windows-gnu := crt2.o dllcrt2.o\n CFG_INSTALLED_OBJECTS_x86_64-pc-windows-gnu := crt2.o dllcrt2.o rsbegin.o rsend.o\n CFG_RUSTRT_HAS_STARTUP_OBJS_x86_64-pc-windows-gnu := 1\n+# FIXME(#31030) - there's not a great reason to disable jemalloc here\n+CFG_DISABLE_JEMALLOC_x86_64-pc-windows-gnu := 1"}, {"sha": "a194dfd1a68da25c9a610bf3afef15a9a29edce8", "filename": "mk/cfg/x86_64-pc-windows-msvc.mk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -22,3 +22,7 @@ CFG_LDPATH_x86_64-pc-windows-msvc :=\n CFG_RUN_x86_64-pc-windows-msvc=$(2)\n CFG_RUN_TARG_x86_64-pc-windows-msvc=$(call CFG_RUN_x86_64-pc-windows-msvc,,$(2))\n CFG_GNU_TRIPLE_x86_64-pc-windows-msvc := x86_64-pc-win32\n+\n+# Currently the build system is not configured to build jemalloc\n+# with MSVC, so we omit this optional dependency.\n+CFG_DISABLE_JEMALLOC_x86_64-pc-windows-msvc := 1"}, {"sha": "1b5aa12274d4eaa330f151e67f75446bfa9b8220", "filename": "mk/cfg/x86_64-rumprun-netbsd.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -22,3 +22,4 @@ CFG_LDPATH_x86_64-rumprun-netbsd :=\n CFG_RUN_x86_64-rumprun-netbsd=$(2)\n CFG_RUN_TARG_x86_64-rumprun-netbsd=$(call CFG_RUN_x86_64-rumprun-netbsd,,$(2))\n CFG_GNU_TRIPLE_x86_64-rumprun-netbsd := x86_64-rumprun-netbsd\n+CFG_DISABLE_JEMALLOC_x86_64-rumprun-netbsd := 1"}, {"sha": "76b39b4502548e9a52ea316431ff91e0f37ab517", "filename": "mk/cfg/x86_64-unknown-bitrig.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -20,3 +20,4 @@ CFG_LDPATH_x86_64-unknown-bitrig :=\n CFG_RUN_x86_64-unknown-bitrig=$(2)\n CFG_RUN_TARG_x86_64-unknown-bitrig=$(call CFG_RUN_x86_64-unknown-bitrig,,$(2))\n CFG_GNU_TRIPLE_x86_64-unknown-bitrig := x86_64-unknown-bitrig\n+CFG_DISABLE_JEMALLOC_x86_64-unknown-bitrig := 1"}, {"sha": "f1e45d76409927fc850f5d61b4028d079920ee51", "filename": "mk/cfg/x86_64-unknown-openbsd.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -21,3 +21,4 @@ CFG_RUN_x86_64-unknown-openbsd=$(2)\n CFG_RUN_TARG_x86_64-unknown-openbsd=$(call CFG_RUN_x86_64-unknown-openbsd,,$(2))\n CFG_GNU_TRIPLE_x86_64-unknown-openbsd := x86_64-unknown-openbsd\n RUSTC_FLAGS_x86_64-unknown-openbsd=-C linker=$(call FIND_COMPILER,$(CC))\n+CFG_DISABLE_JEMALLOC_x86_64-unknown-openbsd := 1"}, {"sha": "b7bb7c1083dd83e9491483fa42617388a757c26d", "filename": "mk/crates.mk", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -53,7 +53,7 @@ TARGET_CRATES := libc std flate arena term \\\n                  serialize getopts collections test rand \\\n                  log graphviz core rbml alloc \\\n                  rustc_unicode rustc_bitflags \\\n-\t\t alloc_system\n+\t\t alloc_system alloc_jemalloc\n RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n                 rustc_data_structures rustc_front rustc_platform_intrinsics \\\n@@ -64,6 +64,7 @@ TOOLS := compiletest rustdoc rustc rustbook error_index_generator\n DEPS_core :=\n DEPS_alloc := core libc alloc_system\n DEPS_alloc_system := core libc\n+DEPS_alloc_jemalloc := core libc native:jemalloc\n DEPS_collections := core alloc rustc_unicode\n DEPS_libc := core\n DEPS_rand := core\n@@ -135,15 +136,14 @@ ONLY_RLIB_collections := 1\n ONLY_RLIB_rustc_unicode := 1\n ONLY_RLIB_rustc_bitflags := 1\n ONLY_RLIB_alloc_system := 1\n+ONLY_RLIB_alloc_jemalloc := 1\n+\n+TARGET_SPECIFIC_alloc_jemalloc := 1\n \n # Documented-by-default crates\n DOC_CRATES := std alloc collections core libc rustc_unicode\n \n ifeq ($(CFG_DISABLE_JEMALLOC),)\n-TARGET_CRATES += alloc_jemalloc\n-DEPS_std += alloc_jemalloc\n-DEPS_alloc_jemalloc := core libc native:jemalloc\n-ONLY_RLIB_alloc_jemalloc := 1\n RUSTFLAGS_rustc_back := --cfg 'feature=\"jemalloc\"'\n endif\n \n@@ -160,12 +160,32 @@ CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n define RUST_CRATE\n CRATEFILE_$(1) := $$(SREL)src/lib$(1)/lib.rs\n RSINPUTS_$(1) := $$(call rwildcard,$(S)src/lib$(1)/,*.rs)\n-RUST_DEPS_$(1) := $$(filter-out native:%,$$(DEPS_$(1)))\n NATIVE_DEPS_$(1) := $$(patsubst native:%,%,$$(filter native:%,$$(DEPS_$(1))))\n endef\n \n $(foreach crate,$(CRATES),$(eval $(call RUST_CRATE,$(crate))))\n \n+# $(1) - crate\n+# $(2) - target\n+define RUST_CRATE_DEPS\n+RUST_DEPS_$(1)_T_$(2) := $$(filter-out native:%,$$(DEPS_$(1)))\n+endef\n+\n+$(foreach target,$(CFG_TARGET),\\\n+ $(foreach crate,$(CRATES),$(eval $(call RUST_CRATE_DEPS,$(crate),$(target)))))\n+\n+# $(1) - target\n+# $(2) - crate\n+define DEFINE_TARGET_CRATES\n+ifndef TARGET_SPECIFIC_$(2)\n+TARGET_CRATES_$(1) += $(2)\n+endif\n+endef\n+\n+$(foreach target,$(CFG_TARGET),\\\n+ $(foreach crate,$(TARGET_CRATES),\\\n+  $(eval $(call DEFINE_TARGET_CRATES,$(target),$(crate)))))\n+\n # Similar to the macro above for crates, this macro is for tools\n #\n # $(1) is the crate to generate variables for"}, {"sha": "f202c75360bf8f8c99c9f7cc35eb2cc32654546d", "filename": "mk/docs.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -158,9 +158,9 @@ LIB_DOC_DEP_$(1) = \\\n \t$$(CRATEFILE_$(1)) \\\n \t$$(RSINPUTS_$(1)) \\\n \t$$(RUSTDOC_EXE) \\\n-\t$$(foreach dep,$$(RUST_DEPS_$(1)), \\\n+\t$$(foreach dep,$$(RUST_DEPS_$(1)_T_$(CFG_BUILD)), \\\n \t\t$$(TLIB2_T_$(CFG_BUILD)_H_$(CFG_BUILD))/stamp.$$(dep)) \\\n-\t$$(foreach dep,$$(filter $$(DOC_CRATES), $$(RUST_DEPS_$(1))), \\\n+\t$$(foreach dep,$$(filter $$(DOC_CRATES), $$(RUST_DEPS_$(1)_T_$(CFG_BUILD))), \\\n \t\tdoc/$$(dep)/)\n else\n LIB_DOC_DEP_$(1) = $$(CRATEFILE_$(1)) $$(RSINPUTS_$(1))"}, {"sha": "d17479bd894e5f91fa83d0a3ee0080a3da02232a", "filename": "mk/host.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -21,7 +21,7 @@ define CP_HOST_STAGE_N_CRATE\n ifeq ($$(ONLY_RLIB_$(5)),)\n $$(HLIB$(2)_H_$(4))/stamp.$(5): \\\n \t$$(TLIB$(1)_T_$(3)_H_$(4))/stamp.$(5) \\\n-\t$$(RUST_DEPS_$(5):%=$$(HLIB$(2)_H_$(4))/stamp.%) \\\n+\t$$(RUST_DEPS_$(5)_T_$(3):%=$$(HLIB$(2)_H_$(4))/stamp.%) \\\n \t| $$(HLIB$(2)_H_$(4))/\n \t@$$(call E, cp: $$(@D)/lib$(5))\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES, \\"}, {"sha": "d2e5449a2f513f0814d321bc09e8a0b75fe7e618", "filename": "mk/install.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -108,15 +108,15 @@ endif\n define INSTALL_RUNTIME_TARGET_N\n install-runtime-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n \t$$(Q)$$(call ADB_SHELL,mkdir,$(CFG_RUNTIME_PUSH_DIR))\n-\t$$(Q)$$(foreach crate,$$(TARGET_CRATES), \\\n+\t$$(Q)$$(foreach crate,$$(TARGET_CRATES_$(1)), \\\n \t    $$(call ADB_PUSH,$$(TL$(1)$(2))/$$(call CFG_LIB_GLOB_$(1),$$(crate)), \\\n \t\t\t$$(CFG_RUNTIME_PUSH_DIR));)\n endef\n \n define INSTALL_RUNTIME_TARGET_CLEANUP_N\n install-runtime-target-$(1)-cleanup:\n \t$$(Q)$$(call ADB,remount)\n-\t$$(Q)$$(foreach crate,$$(TARGET_CRATES), \\\n+\t$$(Q)$$(foreach crate,$$(TARGET_CRATES_$(1)), \\\n \t    $$(call ADB_SHELL,rm,$$(CFG_RUNTIME_PUSH_DIR)/$$(call CFG_LIB_GLOB_$(1),$$(crate)));)\n endef\n "}, {"sha": "38842a3e8a7b9b5e2272233b6256496686d82d1c", "filename": "mk/main.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -432,7 +432,7 @@ TSREQ$(1)_T_$(2)_H_$(3) = \\\n # target\n SREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(foreach dep,$$(TARGET_CRATES), \\\n+\t$$(foreach dep,$$(TARGET_CRATES_$(2)), \\\n \t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n \ttmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-$$(call TRIPLE_TO_DEBUGGER_SCRIPT_SETTING,$(2)).done\n \n@@ -441,7 +441,7 @@ SREQ$(1)_T_$(2)_H_$(3) = \\\n CSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-\t$$(foreach dep,$$(CRATES),$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\n+\t$$(foreach dep,$$(HOST_CRATES),$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\n \n ifeq ($(1),0)\n # Don't run the stage0 compiler under valgrind - that ship has sailed"}, {"sha": "83fd4509da875201f10542cffb236b26c54903c5", "filename": "mk/platform.mk", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -118,6 +118,18 @@ endef\n $(foreach target,$(CFG_TARGET), \\\n   $(eval $(call DEFINE_LINKER,$(target))))\n \n+define ADD_JEMALLOC_DEP\n+  ifndef CFG_DISABLE_JEMALLOC_$(1)\n+    ifndef CFG_DISABLE_JEMALLOC\n+      RUST_DEPS_std_T_$(1) += alloc_jemalloc\n+      TARGET_CRATES_$(1) += alloc_jemalloc\n+    endif\n+  endif\n+endef\n+\n+$(foreach target,$(CFG_TARGET), \\\n+  $(eval $(call ADD_JEMALLOC_DEP,$(target))))\n+\n # The -Qunused-arguments sidesteps spurious warnings from clang\n define FILTER_FLAGS\n   ifeq ($$(CFG_USING_CLANG),1)"}, {"sha": "20e20e9b5df7eb166b677e13c2b4e2c4a8d39fcd", "filename": "mk/prepare.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -122,7 +122,7 @@ prepare-host-lib-$(1)-$(2)-$(3)-$(4): \\\n prepare-host-lib-$(1)-$(2)-$(3)-$(4): \\\n \tPREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_DIR)/$$(call PREPARE_TAR_LIB_DIR,$$(HLIB_RELATIVE$(2)_H_$(3)))\n prepare-host-lib-$(1)-$(2)-$(3)-$(4): prepare-maybe-clean-$(4) \\\n-                                 $$(foreach dep,$$(RUST_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4)) \\\n+                                 $$(foreach dep,$$(RUST_DEPS_$(1)_T_$(3)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4)) \\\n                                  $$(HLIB$(2)_H_$(3))/stamp.$(1) \\\n                                  prepare-host-dirs-$(4)\n \t$$(if $$(findstring $(2), $$(PREPARE_STAGE)), \\\n@@ -147,7 +147,7 @@ prepare-target-$(2)-host-$(3)-$(1)-$(4): \\\n prepare-target-$(2)-host-$(3)-$(1)-$(4): \\\n \tPREPARE_DEST_BIN_DIR=$$(PREPARE_DEST_LIB_DIR)/rustlib/$(3)/bin\n prepare-target-$(2)-host-$(3)-$(1)-$(4): prepare-maybe-clean-$(4) \\\n-        $$(foreach crate,$$(TARGET_CRATES), \\\n+        $$(foreach crate,$$(TARGET_CRATES_$(2)), \\\n           $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n         $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n           $$(foreach crate,$$(HOST_CRATES), \\\n@@ -161,7 +161,7 @@ prepare-target-$(2)-host-$(3)-$(1)-$(4): prepare-maybe-clean-$(4) \\\n         $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n           $$(call PREPARE_DIR,$$(PREPARE_WORKING_DEST_LIB_DIR)) \\\n           $$(call PREPARE_DIR,$$(PREPARE_DEST_BIN_DIR)) \\\n-          $$(foreach crate,$$(TARGET_CRATES), \\\n+          $$(foreach crate,$$(TARGET_CRATES_$(2)), \\\n \t    $$(if $$(or $$(findstring 1, $$(ONLY_RLIB_$$(crate))),$$(findstring 1,$$(CFG_INSTALL_ONLY_RLIB_$(2)))),, \\\n               $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))) \\\n             $$(call PREPARE_LIB,$$(call CFG_RLIB_GLOB,$$(crate)))) \\"}, {"sha": "cdd8abd7fb770002d7a6954595a2938e717f202d", "filename": "mk/target.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -28,7 +28,7 @@ define RUST_CRATE_FULLDEPS\n CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4) := \\\n \t\t$$(CRATEFILE_$(4)) \\\n \t\t$$(RSINPUTS_$(4)) \\\n-\t\t$$(foreach dep,$$(RUST_DEPS_$(4)), \\\n+\t\t$$(foreach dep,$$(RUST_DEPS_$(4)_T_$(2)), \\\n \t\t  $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n \t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)), \\\n \t\t  $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),$$(dep))) \\\n@@ -147,7 +147,7 @@ ifeq ($$(CFG_RUSTRT_HAS_STARTUP_OBJS_$(2)), 1)\n # Add dependencies on Rust startup objects to all crates that depend on core.\n # This ensures that they are built after core (since they depend on it),\n # but before everything else (since they are needed for linking dylib crates).\n-$$(foreach crate, $$(TARGET_CRATES), \\\n+$$(foreach crate, $$(TARGET_CRATES_$(2)), \\\n \t$$(if $$(findstring core,$$(DEPS_$$(crate))), \\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate))) : $$(TLIB$(1)_T_$(2)_H_$(3))/$(4).o\n endif"}, {"sha": "ea88a7d34f54e2da90ca86df8468e9cd92558d93", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f59fd4642534e80a61982ce3e10c147d97054212/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=f59fd4642534e80a61982ce3e10c147d97054212", "patch": "@@ -135,7 +135,7 @@ $(info check: android device test dir $(CFG_ADB_TEST_DIR) ready \\\n  $(foreach target,$(CFG_TARGET), \\\n   $(if $(findstring android, $(target)), \\\n    $(shell $(CFG_ADB) shell mkdir $(CFG_ADB_TEST_DIR)/$(target)) \\\n-   $(foreach crate,$(TARGET_CRATES), \\\n+   $(foreach crate,$(TARGET_CRATES_$(target)), \\\n     $(shell $(CFG_ADB) push $(TLIB2_T_$(target)_H_$(CFG_BUILD))/$(call CFG_LIB_GLOB_$(target),$(crate)) \\\n                     $(CFG_ADB_TEST_DIR)/$(target))), \\\n  )))\n@@ -364,7 +364,7 @@ define TEST_RUNNER\n # parent crates.\n ifeq ($(NO_REBUILD),)\n TESTDEP_$(1)_$(2)_$(3)_$(4) = $$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t\t    $$(foreach crate,$$(TARGET_CRATES), \\\n+\t\t\t    $$(foreach crate,$$(TARGET_CRATES_$(2)), \\\n \t\t\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n \t\t\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\n "}]}