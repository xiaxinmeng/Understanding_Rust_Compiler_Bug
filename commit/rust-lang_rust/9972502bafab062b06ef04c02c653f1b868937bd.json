{"sha": "9972502bafab062b06ef04c02c653f1b868937bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NzI1MDJiYWZhYjA2MmIwNmVmMDRjMDJjNjUzZjFiODY4OTM3YmQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-12T21:38:11Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-12T22:45:18Z"}, "message": "Reenable peek test for indirect mutation analysis\n\nThis uses the new `MaybeMutBorrowedLocals` pass but we keep the\n`rustc_peek_indirectly_mutable` since the two are interchangable except\nwhen inspecting a local after it has been marked `StorageDead`.", "tree": {"sha": "6d203d5b700ed93928454c034870a75f136a9482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d203d5b700ed93928454c034870a75f136a9482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9972502bafab062b06ef04c02c653f1b868937bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9972502bafab062b06ef04c02c653f1b868937bd", "html_url": "https://github.com/rust-lang/rust/commit/9972502bafab062b06ef04c02c653f1b868937bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9972502bafab062b06ef04c02c653f1b868937bd/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34783b73bd891a66fb2af613fef7492376fc7c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34783b73bd891a66fb2af613fef7492376fc7c8a", "html_url": "https://github.com/rust-lang/rust/commit/34783b73bd891a66fb2af613fef7492376fc7c8a"}], "stats": {"total": 26, "additions": 6, "deletions": 20}, "files": [{"sha": "16edb7d552b24b294c30adfe7a2cd643f61ef9e2", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9972502bafab062b06ef04c02c653f1b868937bd/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9972502bafab062b06ef04c02c653f1b868937bd/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=9972502bafab062b06ef04c02c653f1b868937bd", "patch": "@@ -12,9 +12,8 @@ use rustc_index::bit_set::BitSet;\n use crate::dataflow::generic::{Analysis, Results, ResultsCursor};\n use crate::dataflow::move_paths::{HasMoveData, MoveData};\n use crate::dataflow::move_paths::{LookupResult, MovePathIndex};\n-use crate::dataflow::IndirectlyMutableLocals;\n+use crate::dataflow::MaybeMutBorrowedLocals;\n use crate::dataflow::MoveDataParamEnv;\n-use crate::dataflow::{do_dataflow, DebugFormatted};\n use crate::dataflow::{\n     DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces,\n };\n@@ -24,7 +23,6 @@ pub struct SanityCheck;\n impl<'tcx> MirPass<'tcx> for SanityCheck {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         use crate::dataflow::has_rustc_mir_with;\n-\n         let def_id = src.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));\n@@ -37,7 +35,6 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n         let param_env = tcx.param_env(def_id);\n         let move_data = MoveData::gather_moves(body, tcx, param_env).unwrap();\n         let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n-        let dead_unwinds = BitSet::new_empty(body.basic_blocks().len());\n \n         let flow_inits = MaybeInitializedPlaces::new(tcx, body, &mdpe)\n             .into_engine(tcx, body, def_id)\n@@ -48,15 +45,9 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n         let flow_def_inits = DefinitelyInitializedPlaces::new(tcx, body, &mdpe)\n             .into_engine(tcx, body, def_id)\n             .iterate_to_fixpoint();\n-        let _flow_indirectly_mut = do_dataflow(\n-            tcx,\n-            body,\n-            def_id,\n-            &attributes,\n-            &dead_unwinds,\n-            IndirectlyMutableLocals::new(tcx, body, param_env),\n-            |_, i| DebugFormatted::new(&i),\n-        );\n+        let flow_mut_borrowed = MaybeMutBorrowedLocals::new_mut_only(tcx, body, param_env)\n+            .into_engine(tcx, body, def_id)\n+            .iterate_to_fixpoint();\n \n         if has_rustc_mir_with(&attributes, sym::rustc_peek_maybe_init).is_some() {\n             sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_inits);\n@@ -67,12 +58,9 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_definite_init).is_some() {\n             sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_def_inits);\n         }\n-        // FIXME: Uncomment these as analyses are migrated to the new framework\n-        /*\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_indirectly_mutable).is_some() {\n-            sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_indirectly_mut);\n+            sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_mut_borrowed);\n         }\n-        */\n         if has_rustc_mir_with(&attributes, sym::stop_after_dataflow).is_some() {\n             tcx.sess.fatal(\"stop_after_dataflow ended compilation\");\n         }\n@@ -276,8 +264,7 @@ where\n     }\n }\n \n-/* FIXME: Add this back once `IndirectlyMutableLocals` uses the new dataflow framework.\n-impl<'tcx> RustcPeekAt<'tcx> for IndirectlyMutableLocals<'_, 'tcx> {\n+impl<'tcx> RustcPeekAt<'tcx> for MaybeMutBorrowedLocals<'_, 'tcx> {\n     fn peek_at(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -298,4 +285,3 @@ impl<'tcx> RustcPeekAt<'tcx> for IndirectlyMutableLocals<'_, 'tcx> {\n         }\n     }\n }\n-*/"}]}