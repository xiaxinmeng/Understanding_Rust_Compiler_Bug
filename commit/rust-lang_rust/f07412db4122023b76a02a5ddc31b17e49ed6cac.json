{"sha": "f07412db4122023b76a02a5ddc31b17e49ed6cac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNzQxMmRiNDEyMjAyM2I3NmEwMmE1ZGRjMzFiMTdlNDllZDZjYWM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-08T12:50:16Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-08T13:13:54Z"}, "message": "Destructure OpaqueTypeKey in certain cases to simplify code", "tree": {"sha": "f646ae6f617337adc84c229fc24c6bbda5186ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f646ae6f617337adc84c229fc24c6bbda5186ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07412db4122023b76a02a5ddc31b17e49ed6cac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC/bRMACgkQgTGiTgx5\n76/07g/9FWQ/JAXtWzJdDyeTA2BQuPOTgPGesplIbaZ0iNl/73CehlRWsmZfrUqg\nmi4rm4z/taT7FgwcAA09yQMjA9cHk5fSu4hNCgtEWZMB4Ev8ybxO60h1nBRoM0YH\nPl5n/dSD/O2TTiygVzjjBNOpoJ2scEmGVrYPoyrrrlkwne8amFmafmU00ernKpRo\ngZWHZU9L3x3DMU7b2GTIPokjh/Wga3+dwTjc7MXPc8fnvsIdk5BjSo/vwKbP6ha7\no5g7mBXu9Og+DPn45LdTFWH/YvJGIVfy9QY/Lj5dZW2z+MQiOfzdPdmd/m8WFWCz\nm1chEbXnk4t/i3upGGyme1kYrsG+XabHS+7LVfSWSh6MR2EHtr8cms0O+2V7buOQ\nbotsXQ6uotHyfuJWLxCSFJ8L2fQiN/yPRbo0ouBW7qmAaSqV2GdIf0ISPFx9JATS\nO5WKsdgsim5uyv4fRQRLl7+wJSNa1BT0rSQy3mwIR5h3SUHxKnnzmgE/Lu1wjCB0\nS076ysHORd87cBmlViUeo7rb2TSM+ZapKPvrBuPraGYcFXasyB23aXPK2J42umkl\ntiGT4SD8rYBXcvbmvGyjbFEa5L/nqeKNNj+0WQV1lxaCd1nPOFaJnfrPGRTQQRnd\nQMq96JLpR9h/GS1+KpfZ53mApt10izIx0+pDfQYoaSOi0qFT/Wc=\n=Js6N\n-----END PGP SIGNATURE-----", "payload": "tree f646ae6f617337adc84c229fc24c6bbda5186ccb\nparent 1278f3f29586e58a196772e8680df19045e9930e\nauthor Santiago Pastorino <spastorino@gmail.com> 1623156616 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623158034 -0300\n\nDestructure OpaqueTypeKey in certain cases to simplify code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07412db4122023b76a02a5ddc31b17e49ed6cac", "html_url": "https://github.com/rust-lang/rust/commit/f07412db4122023b76a02a5ddc31b17e49ed6cac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07412db4122023b76a02a5ddc31b17e49ed6cac/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1278f3f29586e58a196772e8680df19045e9930e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1278f3f29586e58a196772e8680df19045e9930e", "html_url": "https://github.com/rust-lang/rust/commit/1278f3f29586e58a196772e8680df19045e9930e"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "70d85796d002e961a70149c3cb06e1d1818699d0", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f07412db4122023b76a02a5ddc31b17e49ed6cac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07412db4122023b76a02a5ddc31b17e49ed6cac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=f07412db4122023b76a02a5ddc31b17e49ed6cac", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::layout::MAX_SIMD_LANES;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, ParamEnv, RegionKind, Ty, TyCtxt};\n+use rustc_middle::ty::{self, OpaqueTypeKey, ParamEnv, RegionKind, Ty, TyCtxt};\n use rustc_session::lint::builtin::UNINHABITED_STATIC;\n use rustc_span::symbol::sym;\n use rustc_span::{self, MultiSpan, Span};\n@@ -716,11 +716,11 @@ fn check_opaque_meets_bounds<'tcx>(\n             infcx.instantiate_opaque_types(def_id, hir_id, param_env, opaque_ty, span),\n         );\n \n-        for (opaque_type_key, opaque_defn) in opaque_type_map {\n-            match infcx.at(&misc_cause, param_env).eq(\n-                opaque_defn.concrete_ty,\n-                tcx.type_of(opaque_type_key.def_id).subst(tcx, opaque_type_key.substs),\n-            ) {\n+        for (OpaqueTypeKey { def_id, substs }, opaque_defn) in opaque_type_map {\n+            match infcx\n+                .at(&misc_cause, param_env)\n+                .eq(opaque_defn.concrete_ty, tcx.type_of(def_id).subst(tcx, substs))\n+            {\n                 Ok(infer_ok) => inh.register_infer_ok_obligations(infer_ok),\n                 Err(ty_err) => tcx.sess.delay_span_bug(\n                     opaque_defn.definition_span,"}, {"sha": "8754c8cd136a829b6c8482cb99c4aba0ef4aecaa", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f07412db4122023b76a02a5ddc31b17e49ed6cac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07412db4122023b76a02a5ddc31b17e49ed6cac/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=f07412db4122023b76a02a5ddc31b17e49ed6cac", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::InferCtxtExt;\n@@ -475,9 +475,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     }\n \n     fn visit_opaque_types(&mut self, span: Span) {\n-        for &(opaque_type_key, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n-            let hir_id =\n-                self.tcx().hir().local_def_id_to_hir_id(opaque_type_key.def_id.expect_local());\n+        for &(opaque_type_key @ OpaqueTypeKey { def_id, substs }, opaque_defn) in\n+            self.fcx.opaque_types.borrow().iter()\n+        {\n+            let hir_id = self.tcx().hir().local_def_id_to_hir_id(def_id.expect_local());\n             let instantiated_ty = self.resolve(opaque_defn.concrete_ty, &hir_id);\n \n             debug_assert!(!instantiated_ty.has_escaping_bound_vars());\n@@ -505,7 +506,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             if let ty::Opaque(defin_ty_def_id, _substs) = *definition_ty.kind() {\n                 if let hir::OpaqueTyOrigin::Misc | hir::OpaqueTyOrigin::TyAlias = opaque_defn.origin\n                 {\n-                    if opaque_type_key.def_id == defin_ty_def_id {\n+                    if def_id == defin_ty_def_id {\n                         debug!(\n                             \"skipping adding concrete definition for opaque type {:?} {:?}\",\n                             opaque_defn, defin_ty_def_id\n@@ -515,7 +516,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 }\n             }\n \n-            if !opaque_type_key.substs.needs_infer() {\n+            if !substs.needs_infer() {\n                 // We only want to add an entry into `concrete_opaque_types`\n                 // if we actually found a defining usage of this opaque type.\n                 // Otherwise, we do nothing - we'll either find a defining usage\n@@ -532,7 +533,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                                 span,\n                                 \"`visit_opaque_types` tried to write different types for the same \\\n                                  opaque type: {:?}, {:?}, {:?}, {:?}\",\n-                                opaque_type_key.def_id,\n+                                def_id,\n                                 definition_ty,\n                                 opaque_defn,\n                                 old_concrete_ty,"}]}