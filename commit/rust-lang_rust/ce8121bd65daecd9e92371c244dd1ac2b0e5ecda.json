{"sha": "ce8121bd65daecd9e92371c244dd1ac2b0e5ecda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlODEyMWJkNjVkYWVjZDllOTIzNzFjMjQ0ZGQxYWMyYjBlNWVjZGE=", "commit": {"author": {"name": "Matt Niemeir", "email": "matt.niemeir@gmail.com", "date": "2020-03-10T02:34:33Z"}, "committer": {"name": "Matt Niemeir", "email": "matt.niemeir@gmail.com", "date": "2020-03-10T03:14:17Z"}, "message": "Renaming a local renames struct field shorthand", "tree": {"sha": "7782adb94467f268349d9f86b16d55af22c46b49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7782adb94467f268349d9f86b16d55af22c46b49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce8121bd65daecd9e92371c244dd1ac2b0e5ecda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8121bd65daecd9e92371c244dd1ac2b0e5ecda", "html_url": "https://github.com/rust-lang/rust/commit/ce8121bd65daecd9e92371c244dd1ac2b0e5ecda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce8121bd65daecd9e92371c244dd1ac2b0e5ecda/comments", "author": {"login": "m-n", "id": 1393649, "node_id": "MDQ6VXNlcjEzOTM2NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1393649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-n", "html_url": "https://github.com/m-n", "followers_url": "https://api.github.com/users/m-n/followers", "following_url": "https://api.github.com/users/m-n/following{/other_user}", "gists_url": "https://api.github.com/users/m-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-n/subscriptions", "organizations_url": "https://api.github.com/users/m-n/orgs", "repos_url": "https://api.github.com/users/m-n/repos", "events_url": "https://api.github.com/users/m-n/events{/privacy}", "received_events_url": "https://api.github.com/users/m-n/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-n", "id": 1393649, "node_id": "MDQ6VXNlcjEzOTM2NDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1393649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-n", "html_url": "https://github.com/m-n", "followers_url": "https://api.github.com/users/m-n/followers", "following_url": "https://api.github.com/users/m-n/following{/other_user}", "gists_url": "https://api.github.com/users/m-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-n/subscriptions", "organizations_url": "https://api.github.com/users/m-n/orgs", "repos_url": "https://api.github.com/users/m-n/repos", "events_url": "https://api.github.com/users/m-n/events{/privacy}", "received_events_url": "https://api.github.com/users/m-n/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9b6aec8a788d33ebe9667d53d127be59d93e555", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b6aec8a788d33ebe9667d53d127be59d93e555", "html_url": "https://github.com/rust-lang/rust/commit/a9b6aec8a788d33ebe9667d53d127be59d93e555"}], "stats": {"total": 72, "additions": 58, "deletions": 14}, "files": [{"sha": "1fca6de1ffcbc27bc7d8fea1fbfdf5757987728a", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ce8121bd65daecd9e92371c244dd1ac2b0e5ecda/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8121bd65daecd9e92371c244dd1ac2b0e5ecda/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=ce8121bd65daecd9e92371c244dd1ac2b0e5ecda", "patch": "@@ -48,17 +48,26 @@ fn find_name_and_module_at_offset(\n }\n \n fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFileEdit {\n-    let mut replacement_text = String::from(new_name);\n+    let mut replacement_text = String::new();\n     let file_id = reference.file_range.file_id;\n     let range = match reference.kind {\n-        ReferenceKind::StructFieldShorthand => {\n+        ReferenceKind::StructFieldShorthandForField => {\n+            replacement_text.push_str(new_name);\n             replacement_text.push_str(\": \");\n             TextRange::from_to(\n                 reference.file_range.range.start(),\n                 reference.file_range.range.start(),\n             )\n         }\n-        _ => reference.file_range.range,\n+        ReferenceKind::StructFieldShorthandForLocal => {\n+            replacement_text.push_str(\": \");\n+            replacement_text.push_str(new_name);\n+            TextRange::from_to(reference.file_range.range.end(), reference.file_range.range.end())\n+        }\n+        _ => {\n+            replacement_text.push_str(new_name);\n+            reference.file_range.range\n+        }\n     };\n     SourceFileEdit { file_id, edit: TextEdit::replace(range, replacement_text) }\n }\n@@ -286,7 +295,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_rename_for_struct_field() {\n+    fn test_rename_struct_field() {\n         test_rename(\n             r#\"\n     struct Foo {\n@@ -315,7 +324,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_rename_for_struct_field_shorthand() {\n+    fn test_rename_struct_field_for_shorthand() {\n         test_rename(\n             r#\"\n     struct Foo {\n@@ -343,6 +352,35 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_rename_local_for_field_shorthand() {\n+        test_rename(\n+            r#\"\n+    struct Foo {\n+        i: i32,\n+    }\n+\n+    impl Foo {\n+        fn new(i<|>: i32) -> Self {\n+            Self { i }\n+        }\n+    }\n+    \"#,\n+            \"j\",\n+            r#\"\n+    struct Foo {\n+        i: i32,\n+    }\n+\n+    impl Foo {\n+        fn new(j: i32) -> Self {\n+            Self { i: j }\n+        }\n+    }\n+    \"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_rename_mod() {\n         let (analysis, position) = analysis_and_position("}, {"sha": "b843b5b570270c41f694ef5bb36182e4897e8b05", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ce8121bd65daecd9e92371c244dd1ac2b0e5ecda/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8121bd65daecd9e92371c244dd1ac2b0e5ecda/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=ce8121bd65daecd9e92371c244dd1ac2b0e5ecda", "patch": "@@ -30,7 +30,8 @@ pub struct Reference {\n \n #[derive(Debug, Clone, PartialEq)]\n pub enum ReferenceKind {\n-    StructFieldShorthand,\n+    StructFieldShorthandForField,\n+    StructFieldShorthandForLocal,\n     StructLiteral,\n     Other,\n }\n@@ -238,8 +239,8 @@ impl Definition {\n                 // FIXME: reuse sb\n                 // See https://github.com/rust-lang/rust/pull/68198#issuecomment-574269098\n \n-                match (classify_name_ref(&sema, &name_ref), self) {\n-                    (Some(NameRefClass::Definition(def)), _) if &def == self => {\n+                match classify_name_ref(&sema, &name_ref) {\n+                    Some(NameRefClass::Definition(def)) if &def == self => {\n                         let kind = if is_record_lit_name_ref(&name_ref)\n                             || is_call_expr_name_ref(&name_ref)\n                         {\n@@ -255,14 +256,19 @@ impl Definition {\n                             access: reference_access(&def, &name_ref),\n                         });\n                     }\n-                    (\n-                        Some(NameRefClass::FieldShorthand { local, field: _ }),\n-                        Definition::StructField(_),\n-                    ) => {\n+                    Some(NameRefClass::FieldShorthand { local, field: _ }) => {\n+                        let kind = match self {\n+                            Definition::StructField(_) => {\n+                                ReferenceKind::StructFieldShorthandForField\n+                            }\n+                            Definition::Local(_) => ReferenceKind::StructFieldShorthandForLocal,\n+                            _ => continue,\n+                        };\n+\n                         let file_range = sema.original_range(name_ref.syntax());\n                         refs.push(Reference {\n-                            file_range: file_range,\n-                            kind: ReferenceKind::StructFieldShorthand,\n+                            file_range,\n+                            kind,\n                             access: reference_access(&Definition::Local(local), &name_ref),\n                         });\n                     }"}]}