{"sha": "4ae69f86179cb263b61621b8c4b9e90e861acb10", "node_id": "C_kwDOAAsO6NoAKDRhZTY5Zjg2MTc5Y2IyNjNiNjE2MjFiOGM0YjllOTBlODYxYWNiMTA", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-06-07T21:17:41Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-06-07T21:29:07Z"}, "message": "Extract lower_generic_and_bounds function", "tree": {"sha": "bb2a191b237cb959ce14d3a66f1080a1f0371941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2a191b237cb959ce14d3a66f1080a1f0371941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae69f86179cb263b61621b8c4b9e90e861acb10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmKfwyMACgkQgTGiTgx5\n768T8A/+IcQNuAIalJnil9tPf2ctq8jtFEINB7xpHWtr18XcqKEgvSVOrf5EOM01\nq5JGUg7vNa+adUqFKEGao8+GLS2O7x9fY3BDkTZseMVpGkjS1DL+35AfQ8wtlEge\nkOUPrSjUqujC0XwA4TaJIPTVE/6tZDJlOM4grq9dDdCBnmibrilnIJtfqjwsxGBg\nz9B0WsnSgS4G4qDDCRMRNX/lhTPC/Fi6tYSKTSWZgLjZghSPpSnCEbriKY6PzKIe\nJ5U4tEcHSCEUbm48gUwr3yQoTobHKU+TiNobhoMmZqs+H/StUt+CAkQAbxUi2j3L\ncSl2gVfQFUWhIW5IHHRNbqKNGYN8Io8VDumF1NgV0hulMB4EffD20COwBYBV6LR1\nNnSriwBhbIY2X75PUUB/kl1jvBOldAjTsvqS4qi33BFHUwgxnHzXVAKGHwytybLf\nIpnKdLDhJBNgtqnuEgP40t8Yjzee4AqP2DWWslzbgcIDdgG87mZD2aILxqn+me4H\n2O9KcE/N3DyrGrB6OaqKjylcJFSR9GCHcp/m6Zshd41WgZ+mALtUiVNxRl+YV5IS\nKYAavQn6lIXZNaAyhT+f7WN2blF1OukS85+oZ3MxVkIApfOykFy36VtLE5NJ0+LF\nD5Rfo7LecCp6UNIH+qFJQjSkG0iFplofJrtDqF73qwvTpW/V4Hw=\n=zHf4\n-----END PGP SIGNATURE-----", "payload": "tree bb2a191b237cb959ce14d3a66f1080a1f0371941\nparent b239611451e024f0323a7057e622564e72470f91\nauthor Santiago Pastorino <spastorino@gmail.com> 1654636661 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1654637347 -0300\n\nExtract lower_generic_and_bounds function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae69f86179cb263b61621b8c4b9e90e861acb10", "html_url": "https://github.com/rust-lang/rust/commit/4ae69f86179cb263b61621b8c4b9e90e861acb10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae69f86179cb263b61621b8c4b9e90e861acb10/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b239611451e024f0323a7057e622564e72470f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/b239611451e024f0323a7057e622564e72470f91", "html_url": "https://github.com/rust-lang/rust/commit/b239611451e024f0323a7057e622564e72470f91"}], "stats": {"total": 79, "additions": 47, "deletions": 32}, "files": [{"sha": "6d780b8448cc09e42272c5b2912618ff0586bdac", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 47, "deletions": 32, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4ae69f86179cb263b61621b8c4b9e90e861acb10/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ae69f86179cb263b61621b8c4b9e90e861acb10/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4ae69f86179cb263b61621b8c4b9e90e861acb10", "patch": "@@ -1221,41 +1221,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         )\n                     }\n                     ImplTraitContext::Universal => {\n-                        // Add a definition for the in-band `Param`.\n-                        let def_id = self.resolver.local_def_id(def_node_id);\n-\n-                        let hir_bounds =\n-                            self.lower_param_bounds(bounds, ImplTraitContext::Universal);\n-                        // Set the name to `impl Bound1 + Bound2`.\n+                        let span = t.span;\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n-                        let param = hir::GenericParam {\n-                            hir_id: self.lower_node_id(def_node_id),\n-                            name: ParamName::Plain(self.lower_ident(ident)),\n-                            pure_wrt_drop: false,\n-                            span: self.lower_span(span),\n-                            kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n-                            colon_span: None,\n-                        };\n+                        let (param, bounds, path) =\n+                            self.lower_generic_and_bounds(def_node_id, span, ident, bounds);\n                         self.impl_trait_defs.push(param);\n-\n-                        if let Some(preds) = self.lower_generic_bound_predicate(\n-                            ident,\n-                            def_node_id,\n-                            &GenericParamKind::Type { default: None },\n-                            hir_bounds,\n-                            hir::PredicateOrigin::ImplTrait,\n-                        ) {\n-                            self.impl_trait_bounds.push(preds)\n+                        if let Some(bounds) = bounds {\n+                            self.impl_trait_bounds.push(bounds);\n                         }\n-\n-                        hir::TyKind::Path(hir::QPath::Resolved(\n-                            None,\n-                            self.arena.alloc(hir::Path {\n-                                span: self.lower_span(span),\n-                                res: Res::Def(DefKind::TyParam, def_id.to_def_id()),\n-                                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n-                            }),\n-                        ))\n+                        path\n                     }\n                     ImplTraitContext::Disallowed(position) => {\n                         let mut err = struct_span_err!(\n@@ -1972,6 +1946,47 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx))\n     }\n \n+    fn lower_generic_and_bounds(\n+        &mut self,\n+        node_id: NodeId,\n+        span: Span,\n+        ident: Ident,\n+        bounds: &[GenericBound],\n+    ) -> (hir::GenericParam<'hir>, Option<hir::WherePredicate<'hir>>, hir::TyKind<'hir>) {\n+        // Add a definition for the in-band `Param`.\n+        let def_id = self.resolver.local_def_id(node_id);\n+\n+        let hir_bounds = self.lower_param_bounds(bounds, ImplTraitContext::Universal);\n+        // Set the name to `impl Bound1 + Bound2`.\n+        let param = hir::GenericParam {\n+            hir_id: self.lower_node_id(node_id),\n+            name: ParamName::Plain(self.lower_ident(ident)),\n+            pure_wrt_drop: false,\n+            span: self.lower_span(span),\n+            kind: hir::GenericParamKind::Type { default: None, synthetic: true },\n+            colon_span: None,\n+        };\n+\n+        let preds = self.lower_generic_bound_predicate(\n+            ident,\n+            node_id,\n+            &GenericParamKind::Type { default: None },\n+            hir_bounds,\n+            hir::PredicateOrigin::ImplTrait,\n+        );\n+\n+        let ty = hir::TyKind::Path(hir::QPath::Resolved(\n+            None,\n+            self.arena.alloc(hir::Path {\n+                span: self.lower_span(span),\n+                res: Res::Def(DefKind::TyParam, def_id.to_def_id()),\n+                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n+            }),\n+        ));\n+\n+        (param, preds, ty)\n+    }\n+\n     /// Lowers a block directly to an expression, presuming that it\n     /// has no attributes and is not targeted by a `break`.\n     fn lower_block_expr(&mut self, b: &Block) -> hir::Expr<'hir> {"}]}