{"sha": "112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMmU1M2YxMGVjNWM4M2M1ZTY3YzA4YzJmZWRlOGNiYjFmYTdhYzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-06T16:20:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-06T16:20:54Z"}, "message": "Merge #9500\n\n9500: internal: Only inline closure, literal and local arguments when used once r=Veykril a=Veykril\n\nSee https://github.com/rust-analyzer/rust-analyzer/pull/9474#discussion_r663881507 for reasoning.\r\n\r\nThis still inlines single use closures and literals as naming these is usually not as useful. Prime examples being the Option/Result consuming functions like `map_or` etc.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "cfb227ad4e86152b957d8c81ec3980bbb649bce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb227ad4e86152b957d8c81ec3980bbb649bce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5ILmCRBK7hj4Ov3rIwAA8YsIAC1NPdt6QGeHRLCLpimt7qlJ\nsNX+AtA4Kql7XCjUmoYdv9C1vQUINVETGfdUM1GmRr263gREpAAG7dSpZYDVj6KK\nc7Xr0ncRpaMgQjxPNc9fl2k4AQU7Mon6zszRKMkIMJ16z9/jBW/NX9S56Mb00BbG\nw1Do/QRdj8+IF81nZfOYWgi9CDTIlmFTa19ASCdggqMRDgLr0vnGyGDPXY0OovIZ\nsmvr7R0RvZynQog3kIWTObZZEmwHfUCMADVTomzuS9p8Bgyg6G/mTkfUhdTukoxh\nyab2NmGq7HWjZ8lBeDZchTOJoEEPrDL80G0ggT3Bqvfu/bciFmhyzR6R9/MrOJI=\n=zE4Z\n-----END PGP SIGNATURE-----\n", "payload": "tree cfb227ad4e86152b957d8c81ec3980bbb649bce8\nparent f9d20b674796cfaa04902420ef8bd567e472ff77\nparent e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625588454 +0000\ncommitter GitHub <noreply@github.com> 1625588454 +0000\n\nMerge #9500\n\n9500: internal: Only inline closure, literal and local arguments when used once r=Veykril a=Veykril\n\nSee https://github.com/rust-analyzer/rust-analyzer/pull/9474#discussion_r663881507 for reasoning.\r\n\r\nThis still inlines single use closures and literals as naming these is usually not as useful. Prime examples being the Option/Result consuming functions like `map_or` etc.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2", "html_url": "https://github.com/rust-lang/rust/commit/112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d20b674796cfaa04902420ef8bd567e472ff77", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d20b674796cfaa04902420ef8bd567e472ff77", "html_url": "https://github.com/rust-lang/rust/commit/f9d20b674796cfaa04902420ef8bd567e472ff77"}, {"sha": "e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9", "html_url": "https://github.com/rust-lang/rust/commit/e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9"}], "stats": {"total": 100, "additions": 56, "deletions": 44}, "files": [{"sha": "5bd81ba051355acc7bb1d504f77b9067821b75d3", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 56, "deletions": 44, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=112e53f10ec5c83c5e67c08c2fede8cbb1fa7ac2", "patch": "@@ -157,25 +157,28 @@ pub(crate) fn inline_(\n \n             // Inline parameter expressions or generate `let` statements depending on whether inlining works or not.\n             for ((pat, _), usages, expr) in izip!(params, param_use_nodes, arg_list).rev() {\n+                let expr_is_name_ref = matches!(&expr,\n+                    ast::Expr::PathExpr(expr)\n+                        if expr.path().and_then(|path| path.as_single_name_ref()).is_some()\n+                );\n                 match &*usages {\n-                    // inline single use parameters\n-                    [usage] => {\n-                        let expr = if matches!(expr, ast::Expr::ClosureExpr(_))\n-                            && usage.syntax().parent().and_then(ast::Expr::cast).is_some()\n-                        {\n-                            make::expr_paren(expr)\n-                        } else {\n-                            expr\n-                        };\n+                    // inline single use closure arguments\n+                    [usage]\n+                        if matches!(expr, ast::Expr::ClosureExpr(_))\n+                            && usage.syntax().parent().and_then(ast::Expr::cast).is_some() =>\n+                    {\n+                        cov_mark::hit!(inline_call_inline_closure);\n+                        let expr = make::expr_paren(expr);\n                         ted::replace(usage.syntax(), expr.syntax().clone_for_update());\n                     }\n-                    // inline parameters whose expression is a simple local reference\n-                    [_, ..]\n-                        if matches!(&expr,\n-                            ast::Expr::PathExpr(expr)\n-                                if expr.path().and_then(|path| path.as_single_name_ref()).is_some()\n-                        ) =>\n-                    {\n+                    // inline single use literals\n+                    [usage] if matches!(expr, ast::Expr::Literal(_)) => {\n+                        cov_mark::hit!(inline_call_inline_literal);\n+                        ted::replace(usage.syntax(), expr.syntax().clone_for_update());\n+                    }\n+                    // inline direct local arguments\n+                    [_, ..] if expr_is_name_ref => {\n+                        cov_mark::hit!(inline_call_inline_locals);\n                         usages.into_iter().for_each(|usage| {\n                             ted::replace(usage.syntax(), &expr.syntax().clone_for_update());\n                         });\n@@ -322,7 +325,10 @@ impl Foo {\n }\n \n fn main() {\n-    let x = Foo(Foo(3).0 + 2);\n+    let x = {\n+        let this = Foo(3);\n+        Foo(this.0 + 2)\n+    };\n }\n \"#,\n         );\n@@ -355,7 +361,10 @@ impl Foo {\n }\n \n fn main() {\n-    let x = Foo(Foo(3).0 + 2);\n+    let x = {\n+        let this = Foo(3);\n+        Foo(this.0 + 2)\n+    };\n }\n \"#,\n         );\n@@ -435,31 +444,6 @@ fn main() {\n         );\n     }\n \n-    #[test]\n-    fn function_single_use_expr_in_param() {\n-        check_assist(\n-            inline_call,\n-            r#\"\n-fn double(x: u32) -> u32 {\n-    2 * x\n-}\n-fn main() {\n-    let x = 51;\n-    let x = double$0(10 + x);\n-}\n-\"#,\n-            r#\"\n-fn double(x: u32) -> u32 {\n-    2 * x\n-}\n-fn main() {\n-    let x = 51;\n-    let x = 2 * 10 + x;\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn function_multi_use_expr_in_param() {\n         check_assist(\n@@ -489,7 +473,8 @@ fn main() {\n     }\n \n     #[test]\n-    fn function_multi_use_local_in_param() {\n+    fn function_use_local_in_param() {\n+        cov_mark::check!(inline_call_inline_locals);\n         check_assist(\n             inline_call,\n             r#\"\n@@ -550,6 +535,7 @@ impl Foo {\n \n     #[test]\n     fn wraps_closure_in_paren() {\n+        cov_mark::check!(inline_call_inline_closure);\n         check_assist(\n             inline_call,\n             r#\"\n@@ -594,6 +580,32 @@ fn main() {\n         main();\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_single_literal_expr() {\n+        cov_mark::check!(inline_call_inline_literal);\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn foo(x: u32) -> u32{\n+    x\n+}\n+\n+fn main() {\n+    foo$0(222);\n+}\n+\"#,\n+            r#\"\n+fn foo(x: u32) -> u32{\n+    x\n+}\n+\n+fn main() {\n+    222;\n+}\n \"#,\n         );\n     }"}]}