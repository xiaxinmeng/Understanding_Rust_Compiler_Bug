{"sha": "decfb4d123651a0673db47542e18ca60d1c501ac", "node_id": "C_kwDOAAsO6NoAKGRlY2ZiNGQxMjM2NTFhMDY3M2RiNDc1NDJlMThjYTYwZDFjNTAxYWM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-21T08:37:10Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-21T08:38:24Z"}, "message": "Use a lock-free datastructure for `source_span`", "tree": {"sha": "cdfb83b31154c07755eaf21b97fa51ddfe01e64f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdfb83b31154c07755eaf21b97fa51ddfe01e64f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/decfb4d123651a0673db47542e18ca60d1c501ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/decfb4d123651a0673db47542e18ca60d1c501ac", "html_url": "https://github.com/rust-lang/rust/commit/decfb4d123651a0673db47542e18ca60d1c501ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/decfb4d123651a0673db47542e18ca60d1c501ac/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a04e78730e501de7147ba8c09372348529b00c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04e78730e501de7147ba8c09372348529b00c17", "html_url": "https://github.com/rust-lang/rust/commit/a04e78730e501de7147ba8c09372348529b00c17"}], "stats": {"total": 77, "additions": 65, "deletions": 12}, "files": [{"sha": "93f8eda66bb85036dcf87c712846747ac1bbdd4b", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/decfb4d123651a0673db47542e18ca60d1c501ac/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/decfb4d123651a0673db47542e18ca60d1c501ac/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=decfb4d123651a0673db47542e18ca60d1c501ac", "patch": "@@ -1378,6 +1378,15 @@ dependencies = [\n  \"zeroize\",\n ]\n \n+[[package]]\n+name = \"elsa\"\n+version = \"1.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f74077c3c3aedb99a2683919698285596662518ea13e5eedcf8bdd43b0d0453b\"\n+dependencies = [\n+ \"stable_deref_trait\",\n+]\n+\n [[package]]\n name = \"ena\"\n version = \"0.14.0\"\n@@ -3882,6 +3891,7 @@ dependencies = [\n  \"arrayvec 0.7.0\",\n  \"bitflags\",\n  \"cfg-if\",\n+ \"elsa\",\n  \"ena\",\n  \"indexmap\",\n  \"jobserver\","}, {"sha": "a6601fbf43bde230c42f538f4c28b5692a4fd7f8", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=decfb4d123651a0673db47542e18ca60d1c501ac", "patch": "@@ -31,6 +31,7 @@ stacker = \"0.1.15\"\n tempfile = \"3.2\"\n thin-vec = \"0.2.9\"\n tracing = \"0.1\"\n+elsa = \"1.8\"\n \n [dependencies.parking_lot]\n version = \"0.11\""}, {"sha": "31323c21df0092cef38cc422c024e0738833d56f", "filename": "compiler/rustc_data_structures/src/sync.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync.rs?ref=decfb4d123651a0673db47542e18ca60d1c501ac", "patch": "@@ -26,6 +26,10 @@ use std::panic::{catch_unwind, resume_unwind, AssertUnwindSafe};\n pub use std::sync::atomic::Ordering;\n pub use std::sync::atomic::Ordering::SeqCst;\n \n+pub use vec::AppendOnlyVec;\n+\n+mod vec;\n+\n cfg_if! {\n     if #[cfg(not(parallel_compiler))] {\n         pub auto trait Send {}"}, {"sha": "cbea4f059992282ffe7d5f9dd9d3b9c4a92de9ad", "filename": "compiler/rustc_data_structures/src/sync/vec.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs?ref=decfb4d123651a0673db47542e18ca60d1c501ac", "patch": "@@ -0,0 +1,41 @@\n+use std::marker::PhantomData;\n+\n+use rustc_index::vec::Idx;\n+\n+pub struct AppendOnlyVec<I: Idx, T: Copy> {\n+    #[cfg(not(parallel_compiler))]\n+    vec: elsa::vec::FrozenVec<T>,\n+    #[cfg(parallel_compiler)]\n+    vec: elsa::sync::LockFreeFrozenVec<T>,\n+    _marker: PhantomData<fn(&I)>,\n+}\n+\n+impl<I: Idx, T: Copy> AppendOnlyVec<I, T> {\n+    pub fn new() -> Self {\n+        Self {\n+            #[cfg(not(parallel_compiler))]\n+            vec: elsa::vec::FrozenVec::new(),\n+            #[cfg(parallel_compiler)]\n+            vec: elsa::sync::LockFreeFrozenVec::new(),\n+            _marker: PhantomData,\n+        }\n+    }\n+\n+    pub fn push(&self, val: T) -> I {\n+        #[cfg(not(parallel_compiler))]\n+        let i = self.vec.len();\n+        #[cfg(not(parallel_compiler))]\n+        self.vec.push(val);\n+        #[cfg(parallel_compiler)]\n+        let i = self.vec.push(val);\n+        I::new(i)\n+    }\n+\n+    pub fn get(&self, i: I) -> Option<T> {\n+        let i = i.index();\n+        #[cfg(not(parallel_compiler))]\n+        return self.vec.get_copy(i);\n+        #[cfg(parallel_compiler)]\n+        return self.vec.get(i);\n+    }\n+}"}, {"sha": "a96cc95a38446666304d170be928beeead074b0a", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=decfb4d123651a0673db47542e18ca60d1c501ac", "patch": "@@ -7,11 +7,10 @@ use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{Lrc, OnceCell, RwLock, WorkerLocal};\n+use rustc_data_structures::sync::{AppendOnlyVec, Lrc, OnceCell, RwLock, WorkerLocal};\n use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_incremental::DepGraphFuture;\n-use rustc_index::vec::IndexVec;\n use rustc_lint::LintStore;\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n@@ -195,10 +194,9 @@ impl<'tcx> Queries<'tcx> {\n \n             let cstore = RwLock::new(Box::new(CStore::new(sess)) as _);\n             let definitions = RwLock::new(Definitions::new(sess.local_stable_crate_id()));\n-            let mut source_span = IndexVec::default();\n+            let source_span = AppendOnlyVec::new();\n             let _id = source_span.push(krate.spans.inner_span);\n             debug_assert_eq!(_id, CRATE_DEF_ID);\n-            let source_span = RwLock::new(source_span);\n             let untracked = Untracked { cstore, source_span, definitions };\n \n             let qcx = passes::create_global_ctxt("}, {"sha": "d95e4b56de074d4b9be3cba4a084111966124815", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=decfb4d123651a0673db47542e18ca60d1c501ac", "patch": "@@ -1030,7 +1030,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// system if the result is otherwise tracked through queries\n     #[inline]\n     pub fn source_span_untracked(self, def_id: LocalDefId) -> Span {\n-        self.untracked.source_span.read().get(def_id).copied().unwrap_or(DUMMY_SP)\n+        self.untracked.source_span.get(def_id).unwrap_or(DUMMY_SP)\n     }\n \n     #[inline(always)]\n@@ -2521,6 +2521,5 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };\n-    providers.source_span =\n-        |tcx, def_id| tcx.untracked.source_span.read().get(def_id).copied().unwrap_or(DUMMY_SP);\n+    providers.source_span = |tcx, def_id| tcx.untracked.source_span.get(def_id).unwrap_or(DUMMY_SP);\n }"}, {"sha": "5593a15412fb7eb8c4a9dcbef96a2551806215e2", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=decfb4d123651a0673db47542e18ca60d1c501ac", "patch": "@@ -146,7 +146,7 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n \n     #[inline]\n     fn def_span(&self, def_id: LocalDefId) -> Span {\n-        *self.untracked.source_span.read().get(def_id).unwrap_or(&DUMMY_SP)\n+        self.untracked.source_span.get(def_id).unwrap_or(DUMMY_SP)\n     }\n \n     #[inline]"}, {"sha": "9fd7edeb5a189682f6bb172f217ccd5f1e685bb3", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=decfb4d123651a0673db47542e18ca60d1c501ac", "patch": "@@ -1156,7 +1156,7 @@ impl<'tcx> Resolver<'_, 'tcx> {\n \n         // A relative span's parent must be an absolute span.\n         debug_assert_eq!(span.data_untracked().parent, None);\n-        let _id = self.tcx.untracked().source_span.write().push(span);\n+        let _id = self.tcx.untracked().source_span.push(span);\n         debug_assert_eq!(_id, def_id);\n \n         // Some things for which we allocate `LocalDefId`s don't correspond to"}, {"sha": "868ffdf0f1da076bfc957e77594e0a5f51d470cb", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decfb4d123651a0673db47542e18ca60d1c501ac/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=decfb4d123651a0673db47542e18ca60d1c501ac", "patch": "@@ -6,10 +6,9 @@ use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n use crate::Session;\n use rustc_ast as ast;\n-use rustc_data_structures::sync::{self, MetadataRef, RwLock};\n+use rustc_data_structures::sync::{self, AppendOnlyVec, MetadataRef, RwLock};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash, Definitions};\n-use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -255,6 +254,6 @@ pub type CrateStoreDyn = dyn CrateStore + sync::Sync + sync::Send;\n pub struct Untracked {\n     pub cstore: RwLock<Box<CrateStoreDyn>>,\n     /// Reference span for definitions.\n-    pub source_span: RwLock<IndexVec<LocalDefId, Span>>,\n+    pub source_span: AppendOnlyVec<LocalDefId, Span>,\n     pub definitions: RwLock<Definitions>,\n }"}, {"sha": "bddfdcfaf194165d826a5534a13573eb80a13bfc", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/decfb4d123651a0673db47542e18ca60d1c501ac/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decfb4d123651a0673db47542e18ca60d1c501ac/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=decfb4d123651a0673db47542e18ca60d1c501ac", "patch": "@@ -120,6 +120,7 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"dissimilar\",\n     \"dlmalloc\",\n     \"either\",\n+    \"elsa\",\n     \"ena\",\n     \"expect-test\",\n     \"fallible-iterator\", // dependency of `thorin`"}]}