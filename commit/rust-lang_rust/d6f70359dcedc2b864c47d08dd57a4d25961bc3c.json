{"sha": "d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZjcwMzU5ZGNlZGMyYjg2NGM0N2QwOGRkNTdhNGQyNTk2MWJjM2M=", "commit": {"author": {"name": "Irina-Gabriela Popa", "email": "irinagpopa@gmail.com", "date": "2017-11-23T14:41:51Z"}, "committer": {"name": "Irina-Gabriela Popa", "email": "irinagpopa@gmail.com", "date": "2017-12-04T16:25:06Z"}, "message": "rustc_back: remove slice module in favor of std::slice::from_ref.", "tree": {"sha": "a94cc7c4a73f84379b2f91c973fd620b9a65ab27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a94cc7c4a73f84379b2f91c973fd620b9a65ab27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "html_url": "https://github.com/rust-lang/rust/commit/d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdfbcf85d55da97ed1a00823510b876018047aaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdfbcf85d55da97ed1a00823510b876018047aaf", "html_url": "https://github.com/rust-lang/rust/commit/fdfbcf85d55da97ed1a00823510b876018047aaf"}], "stats": {"total": 82, "additions": 28, "deletions": 54}, "files": [{"sha": "87903731f6612376cc33f54d850a23eb1115b94d", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -1687,7 +1687,6 @@ dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -1701,7 +1700,6 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -1999,7 +1997,6 @@ dependencies = [\n  \"fmt_macros 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\","}, {"sha": "06c9995663e68e2cd5246054ba8bc53ae85dd321", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -46,6 +46,7 @@\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n+#![feature(from_ref)]\n #![feature(i128)]\n #![feature(i128_type)]\n #![feature(inclusive_range)]"}, {"sha": "75cd230e1e5e2a180bd5fb565353b4cf34fb7f8f", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -26,7 +26,7 @@\n \n use self::TargetLint::*;\n \n-use rustc_back::slice;\n+use std::slice;\n use lint::{EarlyLintPassObject, LateLintPassObject};\n use lint::{Level, Lint, LintId, LintPass, LintBuffer};\n use lint::levels::{LintLevelSets, LintLevelsBuilder};\n@@ -308,7 +308,7 @@ impl LintStore {\n                     Some(ids) => CheckLintNameResult::Ok(&ids.0),\n                 }\n             }\n-            Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::ref_slice(id)),\n+            Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n         }\n     }\n }"}, {"sha": "3683425cee5b45ab0a34ab25d9f692d480d32190", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -31,7 +31,7 @@ use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n use util::common::ErrorReported;\n use util::nodemap::{NodeMap, NodeSet, FxHashSet, FxHashMap, DefIdMap};\n-use rustc_back::slice;\n+use std::slice;\n \n use hir;\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n@@ -530,7 +530,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         if lifetime_ref.is_elided() {\n-            self.resolve_elided_lifetimes(slice::ref_slice(lifetime_ref));\n+            self.resolve_elided_lifetimes(slice::from_ref(lifetime_ref));\n             return;\n         }\n         if lifetime_ref.is_static() {"}, {"sha": "5e5b9dc4d8493d07726391ed6a151da3d40448be", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -25,7 +25,7 @@ use ty::subst::{Subst, Substs};\n use ty::{self, AdtDef, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use util::ppaux;\n-use rustc_back::slice;\n+use std::slice;\n use hir::{self, InlineAsm};\n use std::ascii;\n use std::borrow::{Cow};\n@@ -754,28 +754,28 @@ impl<'tcx> TerminatorKind<'tcx> {\n     pub fn successors(&self) -> Cow<[BasicBlock]> {\n         use self::TerminatorKind::*;\n         match *self {\n-            Goto { target: ref b } => slice::ref_slice(b).into_cow(),\n+            Goto { target: ref b } => slice::from_ref(b).into_cow(),\n             SwitchInt { targets: ref b, .. } => b[..].into_cow(),\n             Resume | GeneratorDrop => (&[]).into_cow(),\n             Return => (&[]).into_cow(),\n             Unreachable => (&[]).into_cow(),\n             Call { destination: Some((_, t)), cleanup: Some(c), .. } => vec![t, c].into_cow(),\n             Call { destination: Some((_, ref t)), cleanup: None, .. } =>\n-                slice::ref_slice(t).into_cow(),\n-            Call { destination: None, cleanup: Some(ref c), .. } => slice::ref_slice(c).into_cow(),\n+                slice::from_ref(t).into_cow(),\n+            Call { destination: None, cleanup: Some(ref c), .. } => slice::from_ref(c).into_cow(),\n             Call { destination: None, cleanup: None, .. } => (&[]).into_cow(),\n             Yield { resume: t, drop: Some(c), .. } => vec![t, c].into_cow(),\n-            Yield { resume: ref t, drop: None, .. } => slice::ref_slice(t).into_cow(),\n+            Yield { resume: ref t, drop: None, .. } => slice::from_ref(t).into_cow(),\n             DropAndReplace { target, unwind: Some(unwind), .. } |\n             Drop { target, unwind: Some(unwind), .. } => {\n                 vec![target, unwind].into_cow()\n             }\n             DropAndReplace { ref target, unwind: None, .. } |\n             Drop { ref target, unwind: None, .. } => {\n-                slice::ref_slice(target).into_cow()\n+                slice::from_ref(target).into_cow()\n             }\n             Assert { target, cleanup: Some(unwind), .. } => vec![target, unwind].into_cow(),\n-            Assert { ref target, .. } => slice::ref_slice(target).into_cow(),\n+            Assert { ref target, .. } => slice::from_ref(target).into_cow(),\n             FalseEdges { ref real_target, ref imaginary_targets } => {\n                 let mut s = vec![*real_target];\n                 s.extend_from_slice(imaginary_targets);"}, {"sha": "5ed7b7f75bbfc70e7e42ee2c0721b92fc801e274", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -40,7 +40,6 @@ extern crate serialize as rustc_serialize; // used by deriving\n \n pub mod tempdir;\n pub mod target;\n-pub mod slice;\n pub mod dynamic_lib;\n \n use std::str::FromStr;"}, {"sha": "5d8fc3acefd6f932829d8fefcbe86aa459ba2cc5", "filename": "src/librustc_back/slice.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibrustc_back%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfbcf85d55da97ed1a00823510b876018047aaf/src%2Flibrustc_back%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fslice.rs?ref=fdfbcf85d55da97ed1a00823510b876018047aaf", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::mem;\n-\n-pub fn ref_slice<T>(ptr: &T) -> &[T; 1] {\n-    unsafe { mem::transmute(ptr) }\n-}\n-\n-pub fn mut_ref_slice<T>(ptr: &mut T) -> &mut [T; 1] {\n-    unsafe { mem::transmute(ptr) }\n-}"}, {"sha": "25f02537490fa8d694a52ff0a366692622c54d45", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -15,6 +15,5 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n graphviz = { path = \"../libgraphviz\" }\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "ddee122d0a6bd1a4d91d7a248892ced94b2a7bff", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -13,7 +13,7 @@ use rustc::hir::{self, HirId};\n use rustc::lint::builtin::UNUSED_MUT;\n use rustc::ty;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n-use rustc_back::slice;\n+use std::slice;\n use syntax::ptr::P;\n \n use borrowck::BorrowckCtxt;\n@@ -26,7 +26,7 @@ pub fn check<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, body: &'tcx hir::Body) {\n     }.visit_expr(&body.value);\n     let mut cx = UnusedMutCx { bccx, used_mut };\n     for arg in body.arguments.iter() {\n-        cx.check_unused_mut_pat(slice::ref_slice(&arg.pat));\n+        cx.check_unused_mut_pat(slice::from_ref(&arg.pat));\n     }\n     cx.visit_expr(&body.value);\n }\n@@ -101,7 +101,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnusedMutCx<'a, 'tcx> {\n     }\n \n     fn visit_local(&mut self, local: &hir::Local) {\n-        self.check_unused_mut_pat(slice::ref_slice(&local.pat));\n+        self.check_unused_mut_pat(slice::from_ref(&local.pat));\n     }\n }\n "}, {"sha": "be173db23a52a3c4d2f7e86245143dd6ee383e87", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -15,14 +15,14 @@\n \n #![allow(non_camel_case_types)]\n \n+#![feature(from_ref)]\n #![feature(match_default_bindings)]\n #![feature(quote)]\n \n #[macro_use] extern crate log;\n extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n-extern crate rustc_back;\n \n // for \"clarity\", rename the graphviz crate to dot; graphviz within `borrowck`\n // refers to the borrowck-specific graphviz adapter traits."}, {"sha": "e8d404af4defa9a669b2073981e82cb9d3763735", "filename": "src/librustc_const_eval/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2FCargo.toml?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -12,7 +12,6 @@ crate-type = [\"dylib\"]\n arena = { path = \"../libarena\" }\n log = \"0.3\"\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "e22f7f141642d44a0cda87edf17c70a8ffa6e1fc", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -31,7 +31,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Pat, PatKind};\n \n-use rustc_back::slice;\n+use std::slice;\n \n use syntax::ast;\n use syntax::ptr::P;\n@@ -114,15 +114,15 @@ impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n         });\n \n         // Check legality of move bindings and `@` patterns.\n-        self.check_patterns(false, slice::ref_slice(&loc.pat));\n+        self.check_patterns(false, slice::from_ref(&loc.pat));\n     }\n \n     fn visit_body(&mut self, body: &'tcx hir::Body) {\n         intravisit::walk_body(self, body);\n \n         for arg in &body.arguments {\n             self.check_irrefutable(&arg.pat, \"function argument\");\n-            self.check_patterns(false, slice::ref_slice(&arg.pat));\n+            self.check_patterns(false, slice::from_ref(&arg.pat));\n         }\n     }\n }"}, {"sha": "d4110f0091aeb0bc83d9e18cf343dc76afacd0ad", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -24,12 +24,12 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(i128_type)]\n+#![feature(from_ref)]\n \n extern crate arena;\n #[macro_use] extern crate syntax;\n #[macro_use] extern crate log;\n #[macro_use] extern crate rustc;\n-extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate rustc_data_structures;\n extern crate rustc_errors;"}, {"sha": "c3245842b42562453cede6656306ffc69091fc8b", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -15,7 +15,6 @@ syntax = { path = \"../libsyntax\" }\n arena = { path = \"../libarena\" }\n fmt_macros = { path = \"../libfmt_macros\" }\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }"}, {"sha": "e20706a0d5abbae84e2b6d6ee33365347cfe31e7", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -23,7 +23,7 @@ use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits;\n use rustc::ty::{self, RegionKind, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::wf::object_region_bounds;\n-use rustc_back::slice;\n+use std::slice;\n use require_c_abi_if_variadic;\n use util::common::ErrorReported;\n use util::nodemap::FxHashSet;\n@@ -782,7 +782,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         debug!(\"associated_path_def_to_ty: {:?}::{}\", ty, assoc_name);\n \n-        self.prohibit_type_params(slice::ref_slice(item_segment));\n+        self.prohibit_type_params(slice::from_ref(item_segment));\n \n         // Find the type of the associated item, and the trait where the associated\n         // item is declared.\n@@ -859,7 +859,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let tcx = self.tcx();\n         let trait_def_id = tcx.parent_def_id(item_def_id).unwrap();\n \n-        self.prohibit_type_params(slice::ref_slice(item_segment));\n+        self.prohibit_type_params(slice::from_ref(item_segment));\n \n         let self_ty = if let Some(ty) = opt_self_ty {\n             ty"}, {"sha": "3b3214835808701f3096cd584414fc757370acfa", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -87,7 +87,7 @@ use self::TupleArgumentsFlag::*;\n use astconv::AstConv;\n use hir::def::{Def, CtorKind};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc_back::slice::ref_slice;\n+use std::slice;\n use namespace::Namespace;\n use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin};\n@@ -130,7 +130,6 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map::Node;\n use rustc::hir::{self, PatKind};\n use rustc::middle::lang_items;\n-use rustc_back::slice;\n use rustc_const_math::ConstInt;\n \n mod autoderef;\n@@ -4168,7 +4167,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         if let Some(cached_def) = self.tables.borrow().type_dependent_defs().get(hir_id) {\n             // Return directly on cache hit. This is useful to avoid doubly reporting\n             // errors with default match binding modes. See #44614.\n-            return (*cached_def, Some(ty), slice::ref_slice(&**item_segment))\n+            return (*cached_def, Some(ty), slice::from_ref(&**item_segment))\n         }\n         let item_name = item_segment.name;\n         let def = match self.resolve_ufcs(span, item_name, ty, node_id) {\n@@ -4187,7 +4186,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Write back the new resolution.\n         self.tables.borrow_mut().type_dependent_defs_mut().insert(hir_id, def);\n-        (def, Some(ty), slice::ref_slice(&**item_segment))\n+        (def, Some(ty), slice::from_ref(&**item_segment))\n     }\n \n     pub fn check_decl_initializer(&self,\n@@ -4325,7 +4324,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             CoerceMany::new(coerce_to_ty)\n         } else {\n             let tail_expr: &[P<hir::Expr>] = match tail_expr {\n-                Some(e) => ref_slice(e),\n+                Some(e) => slice::from_ref(e),\n                 None => &[],\n             };\n             CoerceMany::with_coercion_sites(coerce_to_ty, tail_expr)"}, {"sha": "bf8f9d8b24a0d2877cb795b12cc5315d6e65f892", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f70359dcedc2b864c47d08dd57a4d25961bc3c/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d6f70359dcedc2b864c47d08dd57a4d25961bc3c", "patch": "@@ -77,6 +77,7 @@ This API is completely unstable and subject to change.\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n #![feature(conservative_impl_trait)]\n+#![feature(from_ref)]\n #![feature(match_default_bindings)]\n #![feature(never_type)]\n #![feature(quote)]\n@@ -90,7 +91,6 @@ extern crate syntax_pos;\n extern crate arena;\n #[macro_use] extern crate rustc;\n extern crate rustc_platform_intrinsics as intrinsics;\n-extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate rustc_data_structures;\n extern crate rustc_errors as errors;"}]}