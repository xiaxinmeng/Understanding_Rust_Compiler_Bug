{"sha": "b48c4c8cf4f6366fd88693d2b359afc2b94bc575", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGM0YzhjZjRmNjM2NmZkODg2OTNkMmIzNTlhZmMyYjk0YmM1NzU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-18T09:20:29Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-29T22:27:12Z"}, "message": "rustc_typeck: cleanup coercion logic that has been obsolete/unused for a while now.", "tree": {"sha": "199053e5e135021897510956e2ebc6e88281b574", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/199053e5e135021897510956e2ebc6e88281b574"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48c4c8cf4f6366fd88693d2b359afc2b94bc575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48c4c8cf4f6366fd88693d2b359afc2b94bc575", "html_url": "https://github.com/rust-lang/rust/commit/b48c4c8cf4f6366fd88693d2b359afc2b94bc575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48c4c8cf4f6366fd88693d2b359afc2b94bc575/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a478bdfd24ccc4df99a23d275a82e71a990115d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a478bdfd24ccc4df99a23d275a82e71a990115d", "html_url": "https://github.com/rust-lang/rust/commit/6a478bdfd24ccc4df99a23d275a82e71a990115d"}], "stats": {"total": 126, "additions": 7, "deletions": 119}, "files": [{"sha": "c2ea8277fc868a36fcb715a5dd67227c1939fa0d", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 7, "deletions": 119, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/b48c4c8cf4f6366fd88693d2b359afc2b94bc575/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48c4c8cf4f6366fd88693d2b359afc2b94bc575/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=b48c4c8cf4f6366fd88693d2b359afc2b94bc575", "patch": "@@ -67,8 +67,7 @@ use middle::infer::combine::Combine;\n use middle::infer::sub::Sub;\n use middle::subst;\n use middle::ty::{AutoPtr, AutoDerefRef, AdjustDerefRef, AutoUnsize, AutoUnsafe};\n-use middle::ty::{mt};\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, mt, Ty};\n use util::common::indent;\n use util::ppaux;\n use util::ppaux::Repr;\n@@ -118,57 +117,15 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         // See above for details.\n         match b.sty {\n             ty::ty_ptr(mt_b) => {\n-                match mt_b.ty.sty {\n-                    ty::ty_str => {\n-                        return self.unpack_actual_value(a, |a| {\n-                            self.coerce_unsafe_ptr(a, b, ast::MutImmutable)\n-                        });\n-                    }\n-\n-                    ty::ty_trait(..) => {\n-                        let result = self.unpack_actual_value(a, |a| {\n-                            self.coerce_unsafe_object(a, b, mt_b.mutbl)\n-                        });\n-\n-                        match result {\n-                            Ok(t) => return Ok(t),\n-                            Err(..) => {}\n-                        }\n-                    }\n-\n-                    _ => {\n-                        return self.unpack_actual_value(a, |a| {\n-                            self.coerce_unsafe_ptr(a, b, mt_b.mutbl)\n-                        });\n-                    }\n-                };\n+                return self.unpack_actual_value(a, |a| {\n+                    self.coerce_unsafe_ptr(a, b, mt_b.mutbl)\n+                });\n             }\n \n             ty::ty_rptr(_, mt_b) => {\n-                match mt_b.ty.sty {\n-                    ty::ty_str => {\n-                        return self.unpack_actual_value(a, |a| {\n-                            self.coerce_borrowed_pointer(a, b, ast::MutImmutable)\n-                        });\n-                    }\n-\n-                    ty::ty_trait(..) => {\n-                        let result = self.unpack_actual_value(a, |a| {\n-                            self.coerce_borrowed_object(a, b, mt_b.mutbl)\n-                        });\n-\n-                        match result {\n-                            Ok(t) => return Ok(t),\n-                            Err(..) => {}\n-                        }\n-                    }\n-\n-                    _ => {\n-                        return self.unpack_actual_value(a, |a| {\n-                            self.coerce_borrowed_pointer(a, b, mt_b.mutbl)\n-                        });\n-                    }\n-                };\n+                return self.unpack_actual_value(a, |a| {\n+                    self.coerce_borrowed_pointer(a, b, mt_b.mutbl)\n+                });\n             }\n \n             _ => {}\n@@ -210,7 +167,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         let r_borrow = self.fcx.infcx().next_region_var(coercion);\n \n         let inner_ty = match a.sty {\n-            ty::ty_uniq(_) => return Err(ty::terr_mismatch),\n             ty::ty_rptr(_, mt_a) => {\n                 if !can_coerce_mutbls(mt_a.mutbl, mutbl_b) {\n                     return Err(ty::terr_mutability);\n@@ -397,74 +353,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         )\n     }\n \n-    fn coerce_borrowed_object(&self,\n-                              a: Ty<'tcx>,\n-                              b: Ty<'tcx>,\n-                              b_mutbl: ast::Mutability) -> CoerceResult<'tcx>\n-    {\n-        let tcx = self.tcx();\n-\n-        debug!(\"coerce_borrowed_object(a={}, b={}, b_mutbl={:?})\",\n-               a.repr(tcx),\n-               b.repr(tcx), b_mutbl);\n-\n-        let coercion = Coercion(self.trace.clone());\n-        let r_a = self.fcx.infcx().next_region_var(coercion);\n-\n-        self.coerce_object(a, b, b_mutbl,\n-                           |tr| ty::mk_rptr(tcx, tcx.mk_region(r_a),\n-                                            ty::mt{ mutbl: b_mutbl, ty: tr }),\n-                           || AutoPtr(r_a, b_mutbl, None))\n-    }\n-\n-    fn coerce_unsafe_object(&self,\n-                            a: Ty<'tcx>,\n-                            b: Ty<'tcx>,\n-                            b_mutbl: ast::Mutability) -> CoerceResult<'tcx>\n-    {\n-        let tcx = self.tcx();\n-\n-        debug!(\"coerce_unsafe_object(a={}, b={}, b_mutbl={:?})\",\n-               a.repr(tcx),\n-               b.repr(tcx), b_mutbl);\n-\n-        self.coerce_object(a, b, b_mutbl,\n-                           |tr| ty::mk_ptr(tcx, ty::mt{ mutbl: b_mutbl, ty: tr }),\n-                           || AutoUnsafe(b_mutbl, None))\n-    }\n-\n-    fn coerce_object<F, G>(&self,\n-                           a: Ty<'tcx>,\n-                           b: Ty<'tcx>,\n-                           b_mutbl: ast::Mutability,\n-                           mk_ty: F,\n-                           mk_adjust: G) -> CoerceResult<'tcx> where\n-        F: FnOnce(Ty<'tcx>) -> Ty<'tcx>,\n-        G: FnOnce() -> ty::AutoRef<'tcx>,\n-    {\n-        let tcx = self.tcx();\n-\n-        match a.sty {\n-            ty::ty_rptr(_, ty::mt{ty, mutbl}) => match ty.sty {\n-                ty::ty_trait(box ty::TyTrait { ref principal, ref bounds }) => {\n-                    debug!(\"mutbl={:?} b_mutbl={:?}\", mutbl, b_mutbl);\n-                    let tr = ty::mk_trait(tcx, principal.clone(), bounds.clone());\n-                    try!(self.subtype(mk_ty(tr), b));\n-                    Ok(Some(AdjustDerefRef(AutoDerefRef {\n-                        autoderefs: 1,\n-                        autoref: Some(mk_adjust())\n-                    })))\n-                }\n-                _ => {\n-                    self.subtype(a, b)\n-                }\n-            },\n-            _ => {\n-                self.subtype(a, b)\n-            }\n-        }\n-    }\n-\n     fn coerce_from_fn_item(&self,\n                            a: Ty<'tcx>,\n                            fn_def_id_a: ast::DefId,"}]}