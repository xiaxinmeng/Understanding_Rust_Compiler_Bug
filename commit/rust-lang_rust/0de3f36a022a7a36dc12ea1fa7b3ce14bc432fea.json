{"sha": "0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZTNmMzZhMDIyYTdhMzZkYzEyZWExZmE3YjNjZTE0YmM0MzJmZWE=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-26T09:08:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-26T09:08:19Z"}, "message": "Merge pull request #2849 from mikerite/issue_2741\n\nFix #2741", "tree": {"sha": "4b1aa808dc992e3031cf9d98234e5feeceaf34cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b1aa808dc992e3031cf9d98234e5feeceaf34cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbMgKDCRBK7hj4Ov3rIwAAdHIIAHvcPQ2gr1fEVxrYZLviDYbi\nTXg7jhHEvvvRCwqMCuOuDdWRu0klZB6K2ox/b27ydmPcaw4p4x6JNK3h/87hDG2Z\nixoCbzfWCMQWH0p1AkxWACODbErLanMSDPExB+dz2aq4dXruv2UXKro37PSmIRAE\n7FvK3mi3mWeDbm0jD5ulAoNaPPGUaLVkbPOoYZgk+YoqS98D0+KnAOiZXObvMAzm\ng04wHcTEkOOzFHwvvAP4XXCVJrRh2V9xol4DxllOsD/+Y4Tk9qkJAUQGp1AehAUI\nJm3DIxD5yZ4e/kJpZ2U1xVgYhqMbc4TBVjPBqQ5DAVKl28UzOlRv0KIvRr/4xgs=\n=qZFn\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b1aa808dc992e3031cf9d98234e5feeceaf34cf\nparent 3626d86eefa05ce12a4aa2972da3f20d5b4570de\nparent 4827bdcc1c234ef612c59d1720f7a6f268390999\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1530004099 +0200\ncommitter GitHub <noreply@github.com> 1530004099 +0200\n\nMerge pull request #2849 from mikerite/issue_2741\n\nFix #2741"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea", "html_url": "https://github.com/rust-lang/rust/commit/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3626d86eefa05ce12a4aa2972da3f20d5b4570de", "url": "https://api.github.com/repos/rust-lang/rust/commits/3626d86eefa05ce12a4aa2972da3f20d5b4570de", "html_url": "https://github.com/rust-lang/rust/commit/3626d86eefa05ce12a4aa2972da3f20d5b4570de"}, {"sha": "4827bdcc1c234ef612c59d1720f7a6f268390999", "url": "https://api.github.com/repos/rust-lang/rust/commits/4827bdcc1c234ef612c59d1720f7a6f268390999", "html_url": "https://github.com/rust-lang/rust/commit/4827bdcc1c234ef612c59d1720f7a6f268390999"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "36417cd0877788ac9a3a8dd02fdfc57ee3ec6e46", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea", "patch": "@@ -122,21 +122,32 @@ impl Hash for Constant {\n     }\n }\n \n-impl PartialOrd for Constant {\n-    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n-        match (self, other) {\n+impl Constant {\n+    pub fn partial_cmp(tcx: TyCtxt, cmp_type: &ty::TypeVariants, left: &Self, right: &Self) -> Option<Ordering> {\n+        match (left, right) {\n             (&Constant::Str(ref ls), &Constant::Str(ref rs)) => Some(ls.cmp(rs)),\n             (&Constant::Char(ref l), &Constant::Char(ref r)) => Some(l.cmp(r)),\n-            (&Constant::Int(l), &Constant::Int(r)) => Some(l.cmp(&r)),\n+            (&Constant::Int(l), &Constant::Int(r)) => {\n+                if let ty::TyInt(int_ty) = *cmp_type {\n+                    Some(sext(tcx, l, int_ty).cmp(&sext(tcx, r, int_ty)))\n+                } else {\n+                    Some(l.cmp(&r))\n+                }\n+            },\n             (&Constant::F64(l), &Constant::F64(r)) => l.partial_cmp(&r),\n             (&Constant::F32(l), &Constant::F32(r)) => l.partial_cmp(&r),\n             (&Constant::Bool(ref l), &Constant::Bool(ref r)) => Some(l.cmp(r)),\n-            (&Constant::Tuple(ref l), &Constant::Tuple(ref r)) | (&Constant::Vec(ref l), &Constant::Vec(ref r)) => {\n-                l.partial_cmp(r)\n-            },\n-            (&Constant::Repeat(ref lv, ref ls), &Constant::Repeat(ref rv, ref rs)) => match lv.partial_cmp(rv) {\n-                Some(Equal) => Some(ls.cmp(rs)),\n-                x => x,\n+            (&Constant::Tuple(ref l), &Constant::Tuple(ref r)) | (&Constant::Vec(ref l), &Constant::Vec(ref r)) => l\n+                .iter()\n+                .zip(r.iter())\n+                .map(|(li, ri)| Constant::partial_cmp(tcx, cmp_type, li, ri))\n+                .find(|r| r.map_or(true, |o| o != Ordering::Equal))\n+                .unwrap_or_else(|| Some(l.len().cmp(&r.len()))),\n+            (&Constant::Repeat(ref lv, ref ls), &Constant::Repeat(ref rv, ref rs)) => {\n+                match Constant::partial_cmp(tcx, cmp_type, lv, rv) {\n+                    Some(Equal) => Some(ls.cmp(rs)),\n+                    x => x,\n+                }\n             },\n             _ => None, // TODO: Are there any useful inter-type orderings?\n         }"}, {"sha": "4be2b9f522711a11f53c8dcb5e855d1e4979dc83", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea", "patch": "@@ -1,8 +1,8 @@\n use crate::consts::{constant_simple, Constant};\n-use rustc::lint::*;\n-use rustc::hir::*;\n-use std::cmp::{Ordering, PartialOrd};\n use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use std::cmp::Ordering;\n \n /// **What it does:** Checks for expressions where `std::cmp::min` and `max` are\n /// used to clamp values, but switched so that the result is constant.\n@@ -36,14 +36,22 @@ impl LintPass for MinMaxPass {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MinMaxPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some((outer_max, outer_c, oe)) = min_max(cx, expr) {\n-            if let Some((inner_max, inner_c, _)) = min_max(cx, oe) {\n+            if let Some((inner_max, inner_c, ie)) = min_max(cx, oe) {\n                 if outer_max == inner_max {\n                     return;\n                 }\n-                match (outer_max, outer_c.partial_cmp(&inner_c)) {\n+                match (\n+                    outer_max,\n+                    Constant::partial_cmp(cx.tcx, &cx.tables.expr_ty(ie).sty, &outer_c, &inner_c),\n+                ) {\n                     (_, None) | (MinMax::Max, Some(Ordering::Less)) | (MinMax::Min, Some(Ordering::Greater)) => (),\n                     _ => {\n-                        span_lint(cx, MIN_MAX, expr.span, \"this min/max combination leads to constant result\");\n+                        span_lint(\n+                            cx,\n+                            MIN_MAX,\n+                            expr.span,\n+                            \"this min/max combination leads to constant result\",\n+                        );\n                     },\n                 }\n             }"}, {"sha": "9b29f73b2ac2139c885b7214d55125a842f3f8bf", "filename": "tests/ui/min_max.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea/tests%2Fui%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea/tests%2Fui%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.rs?ref=0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea", "patch": "@@ -23,6 +23,9 @@ fn main() {\n \n     min(1, max(LARGE, x)); // no error, we don't lookup consts here\n \n+    let y = 2isize;\n+    min(max(y, -1), 3);\n+\n     let s;\n     s = \"Hello\";\n "}, {"sha": "b8ea183fcc942e40e07a1f6221c44f1112cf66b9", "filename": "tests/ui/min_max.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=0de3f36a022a7a36dc12ea1fa7b3ce14bc432fea", "patch": "@@ -31,15 +31,15 @@ error: this min/max combination leads to constant result\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this min/max combination leads to constant result\n-  --> $DIR/min_max.rs:29:5\n+  --> $DIR/min_max.rs:32:5\n    |\n-29 |     min(\"Apple\", max(\"Zoo\", s));\n+32 |     min(\"Apple\", max(\"Zoo\", s));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this min/max combination leads to constant result\n-  --> $DIR/min_max.rs:30:5\n+  --> $DIR/min_max.rs:33:5\n    |\n-30 |     max(min(s, \"Apple\"), \"Zoo\");\n+33 |     max(min(s, \"Apple\"), \"Zoo\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors"}]}