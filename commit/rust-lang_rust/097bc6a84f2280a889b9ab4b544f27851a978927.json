{"sha": "097bc6a84f2280a889b9ab4b544f27851a978927", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5N2JjNmE4NGYyMjgwYTg4OWI5YWI0YjU0NGYyNzg1MWE5Nzg5Mjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-09T18:37:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-09T18:37:33Z"}, "message": "Auto merge of #81892 - jyn514:no-inline, r=cjgillot\n\n[experiment] remove `#[inline]` from rustc_query_system::plumbing\n\nThese functions have a ton of generic parameters and are instantiated\nover and over again. Hopefully this will reduce binary bloat and speed\nup bootstrapping times.\n\nr? `@cjgillot`", "tree": {"sha": "57230bacad01f912d4abf600bf88c830e1ce61e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57230bacad01f912d4abf600bf88c830e1ce61e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/097bc6a84f2280a889b9ab4b544f27851a978927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/097bc6a84f2280a889b9ab4b544f27851a978927", "html_url": "https://github.com/rust-lang/rust/commit/097bc6a84f2280a889b9ab4b544f27851a978927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/097bc6a84f2280a889b9ab4b544f27851a978927/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "185de5f41a64e1b790524d5873dc1f7e368f64ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/185de5f41a64e1b790524d5873dc1f7e368f64ab", "html_url": "https://github.com/rust-lang/rust/commit/185de5f41a64e1b790524d5873dc1f7e368f64ab"}, {"sha": "4f77a1afc2143f7c09a81a605343e8a976d2fcce", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f77a1afc2143f7c09a81a605343e8a976d2fcce", "html_url": "https://github.com/rust-lang/rust/commit/4f77a1afc2143f7c09a81a605343e8a976d2fcce"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "cbbb449b4f8abda60dd4e564bbc6f7ef080b2078", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/097bc6a84f2280a889b9ab4b544f27851a978927/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097bc6a84f2280a889b9ab4b544f27851a978927/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=097bc6a84f2280a889b9ab4b544f27851a978927", "patch": "@@ -50,7 +50,6 @@ pub struct QueryState<D, Q, C: QueryCache> {\n }\n \n impl<D, Q, C: QueryCache> QueryState<D, Q, C> {\n-    #[inline]\n     pub(super) fn get_lookup<'tcx>(\n         &'tcx self,\n         key: &C::Key,\n@@ -84,7 +83,6 @@ where\n     Q: Clone,\n     C: QueryCache,\n {\n-    #[inline(always)]\n     pub fn iter_results<R>(\n         &self,\n         f: impl for<'a> FnOnce(\n@@ -94,7 +92,6 @@ where\n         self.cache.iter(&self.shards, |shard| &mut shard.cache, f)\n     }\n \n-    #[inline(always)]\n     pub fn all_inactive(&self) -> bool {\n         let shards = self.shards.lock_shards();\n         shards.iter().all(|shard| shard.active.is_empty())\n@@ -270,7 +267,6 @@ where\n \n     /// Completes the query by updating the query cache with the `result`,\n     /// signals the waiter and forgets the JobOwner, so it won't poison the query\n-    #[inline(always)]\n     fn complete(self, result: C::Value, dep_node_index: DepNodeIndex) -> C::Stored {\n         // We can move out of `self` here because we `mem::forget` it below\n         let key = unsafe { ptr::read(&self.key) };\n@@ -294,7 +290,6 @@ where\n     }\n }\n \n-#[inline(always)]\n fn with_diagnostics<F, R>(f: F) -> (R, ThinVec<Diagnostic>)\n where\n     F: FnOnce(Option<&Lock<ThinVec<Diagnostic>>>) -> R,\n@@ -362,7 +357,6 @@ where\n /// It returns the shard index and a lock guard to the shard,\n /// which will be used if the query is not in the cache and we need\n /// to compute it.\n-#[inline(always)]\n fn try_get_cached<CTX, C, R, OnHit, OnMiss>(\n     tcx: CTX,\n     state: &QueryState<CTX::DepKind, CTX::Query, C>,\n@@ -394,7 +388,6 @@ where\n     )\n }\n \n-#[inline(always)]\n fn try_execute_query<CTX, C>(\n     tcx: CTX,\n     state: &QueryState<CTX::DepKind, CTX::Query, C>,\n@@ -727,7 +720,6 @@ fn force_query_impl<CTX, C>(\n     );\n }\n \n-#[inline(always)]\n pub fn get_query<Q, CTX>(tcx: CTX, span: Span, key: Q::Key) -> Q::Stored\n where\n     Q: QueryDescription<CTX>,\n@@ -739,7 +731,6 @@ where\n     get_query_impl(tcx, Q::query_state(tcx), span, key, &Q::VTABLE)\n }\n \n-#[inline(always)]\n pub fn ensure_query<Q, CTX>(tcx: CTX, key: Q::Key)\n where\n     Q: QueryDescription<CTX>,\n@@ -749,7 +740,6 @@ where\n     ensure_query_impl(tcx, Q::query_state(tcx), key, &Q::VTABLE)\n }\n \n-#[inline(always)]\n pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, span: Span, dep_node: DepNode<CTX::DepKind>)\n where\n     Q: QueryDescription<CTX>,"}]}