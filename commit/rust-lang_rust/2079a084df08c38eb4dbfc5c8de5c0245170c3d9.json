{"sha": "2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzlhMDg0ZGYwOGMzOGViNGRiZmM1YzhkZTVjMDI0NTE3MGMzZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-09T03:59:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-09T03:59:42Z"}, "message": "Auto merge of #48860 - Manishearth:rollup, r=Manishearth\n\nRollup of 5 pull requests\n\n- Successful merges: #48527, #48588, #48801, #48856, #48857\n- Failed merges:", "tree": {"sha": "0fcabcc7de8c86c92497c331b5be41f45f79a579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fcabcc7de8c86c92497c331b5be41f45f79a579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "html_url": "https://github.com/rust-lang/rust/commit/2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "604d4ce7577b07b73d115c94fbd8007c1d9c9335", "url": "https://api.github.com/repos/rust-lang/rust/commits/604d4ce7577b07b73d115c94fbd8007c1d9c9335", "html_url": "https://github.com/rust-lang/rust/commit/604d4ce7577b07b73d115c94fbd8007c1d9c9335"}, {"sha": "b65b171f4433eb14b317c877ac84e4455caec837", "url": "https://api.github.com/repos/rust-lang/rust/commits/b65b171f4433eb14b317c877ac84e4455caec837", "html_url": "https://github.com/rust-lang/rust/commit/b65b171f4433eb14b317c877ac84e4455caec837"}], "stats": {"total": 1076, "additions": 640, "deletions": 436}, "files": [{"sha": "646ddf1a7447205ba9ba14d77318b11be718a8a3", "filename": "src/Cargo.lock", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -78,7 +78,7 @@ dependencies = [\n \n [[package]]\n name = \"atty\"\n-version = \"0.2.6\"\n+version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -179,7 +179,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"cargo\"\n version = \"0.26.0\"\n dependencies = [\n- \"atty 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargotest 0.1.0\",\n  \"core-foundation 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -289,7 +289,7 @@ version = \"2.29.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"atty 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"textwrap 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -645,7 +645,7 @@ name = \"env_logger\"\n version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"atty 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1923,9 +1923,11 @@ dependencies = [\n name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n+ \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n+ \"termcolor 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2843,7 +2845,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ansi_term 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6b3568b48b7cefa6b8ce125f9bb4989e52fbcc29ebea88df04cc7c5f12f70455\"\n \"checksum ar 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35c7a5669cb64f085739387e1308b74e6d44022464b7f1b63bbd4ceb6379ec31\"\n \"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\n-\"checksum atty 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8352656fd42c30a0c3c89d26dea01e3b77c0ab2af18230835c15e2e13cd51859\"\n+\"checksum atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af80143d6f7608d746df1520709e5d141c96f240b0e62b0aa41bdfb53374d9d4\"\n \"checksum backtrace 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ebbbf59b1c43eefa8c3ede390fcc36820b4999f7914104015be25025e0d62af2\"\n \"checksum backtrace-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44585761d6161b0f57afc49482ab6bd067e4edef48c12a152c237eb0203f7661\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\""}, {"sha": "8e1f76c5018008cd7ba6b8044db41a73da196a6e", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -17,7 +17,6 @@\n use errors::DiagnosticBuilder;\n use lint::{LintPass, LateLintPass, LintArray};\n use session::Session;\n-use session::config::Epoch;\n use syntax::codemap::Span;\n \n declare_lint! {\n@@ -264,9 +263,8 @@ declare_lint! {\n \n declare_lint! {\n     pub BARE_TRAIT_OBJECT,\n-    Warn,\n-    \"suggest using `dyn Trait` for trait objects\",\n-    Epoch::Epoch2018\n+    Allow,\n+    \"suggest using `dyn Trait` for trait objects\"\n }\n \n declare_lint! {"}, {"sha": "b1e28f729ed75ef68f0c44d2f12661e6369d5845", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -42,6 +42,7 @@ use util::nodemap::FxHashMap;\n use std::default::Default as StdDefault;\n use std::cell::{Ref, RefCell};\n use syntax::ast;\n+use syntax::epoch;\n use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n use hir;\n@@ -105,7 +106,7 @@ pub struct FutureIncompatibleInfo {\n     pub reference: &'static str,\n     /// If this is an epoch fixing lint, the epoch in which\n     /// this lint becomes obsolete\n-    pub epoch: Option<config::Epoch>,\n+    pub epoch: Option<epoch::Epoch>,\n }\n \n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n@@ -201,7 +202,7 @@ impl LintStore {\n                                         sess: Option<&Session>,\n                                         lints: Vec<FutureIncompatibleInfo>) {\n \n-        for epoch in config::ALL_EPOCHS {\n+        for epoch in epoch::ALL_EPOCHS {\n             let lints = lints.iter().filter(|f| f.epoch == Some(*epoch)).map(|f| f.id)\n                              .collect::<Vec<_>>();\n             if !lints.is_empty() {"}, {"sha": "668e099ebab4131a944d3a3a54096e05dee155bd", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -38,10 +38,11 @@ use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit::{self, FnKind};\n use hir;\n use lint::builtin::BuiltinLintDiagnostics;\n-use session::{config, Session, DiagnosticMessageId};\n+use session::{Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n use syntax::codemap::MultiSpan;\n+use syntax::epoch::Epoch;\n use syntax::symbol::Symbol;\n use syntax::visit as ast_visit;\n use syntax_pos::Span;\n@@ -77,7 +78,7 @@ pub struct Lint {\n     pub desc: &'static str,\n \n     /// Deny lint after this epoch\n-    pub epoch_deny: Option<config::Epoch>,\n+    pub epoch_deny: Option<Epoch>,\n }\n \n impl Lint {\n@@ -492,9 +493,14 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n     // Check for future incompatibility lints and issue a stronger warning.\n     let lints = sess.lint_store.borrow();\n     if let Some(future_incompatible) = lints.future_incompatible(LintId::of(lint)) {\n+        let future = if let Some(epoch) = future_incompatible.epoch {\n+            format!(\"the {} epoch\", epoch)\n+        } else {\n+            \"a future release\".to_owned()\n+        };\n         let explanation = format!(\"this was previously accepted by the compiler \\\n                                    but is being phased out; \\\n-                                   it will become a hard error in a future release!\");\n+                                   it will become a hard error in {}!\", future);\n         let citation = format!(\"for more information, see {}\",\n                                future_incompatible.reference);\n         err.warn(&explanation);"}, {"sha": "1c5cfa87ef46fde617218e09a0b890c132bce780", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 54, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -28,6 +28,7 @@ use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::codemap::{FileName, FilePathMapping};\n+use syntax::epoch::Epoch;\n use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n@@ -111,59 +112,6 @@ pub enum OutputType {\n     DepInfo,\n }\n \n-/// The epoch of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n-#[non_exhaustive]\n-pub enum Epoch {\n-    // epochs must be kept in order, newest to oldest\n-    /// The 2015 epoch\n-    Epoch2015,\n-    /// The 2018 epoch\n-    Epoch2018,\n-    // when adding new epochs, be sure to update:\n-    //\n-    // - the list in the `parse_epoch` static\n-    // - the match in the `parse_epoch` function\n-    // - add a `rust_####()` function to the session\n-    // - update the enum in Cargo's sources as well\n-    //\n-    // When -Zepoch becomes --epoch, there will\n-    // also be a check for the epoch being nightly-only\n-    // somewhere. That will need to be updated\n-    // whenever we're stabilizing/introducing a new epoch\n-    // as well as changing the default Cargo template.\n-}\n-\n-pub const ALL_EPOCHS: &[Epoch] = &[Epoch::Epoch2015, Epoch::Epoch2018];\n-\n-impl ToString for Epoch {\n-    fn to_string(&self) -> String {\n-        match *self {\n-            Epoch::Epoch2015 => \"2015\".into(),\n-            Epoch::Epoch2018 => \"2018\".into(),\n-        }\n-    }\n-}\n-\n-impl Epoch {\n-    pub fn lint_name(&self) -> &'static str {\n-        match *self {\n-            Epoch::Epoch2015 => \"epoch_2015\",\n-            Epoch::Epoch2018 => \"epoch_2018\",\n-        }\n-    }\n-}\n-\n-impl str::FromStr for Epoch {\n-    type Err = ();\n-    fn from_str(s: &str) -> Result<Self, ()> {\n-        match s {\n-            \"2015\" => Ok(Epoch::Epoch2015),\n-            \"2018\" => Ok(Epoch::Epoch2018),\n-            _ => Err(()),\n-        }\n-    }\n-}\n \n impl_stable_hash_for!(enum self::OutputType {\n     Bitcode,\n@@ -829,9 +777,10 @@ macro_rules! options {\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto, Epoch};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n         use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n+        use syntax::epoch::Epoch;\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {"}, {"sha": "cdbbcf6a8dd1b07af49c93d64333646b3f3abe65", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -20,7 +20,7 @@ use lint::builtin::BuiltinLintDiagnostics;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{DebugInfoLevel, Epoch, OutputType};\n+use session::config::{DebugInfoLevel, OutputType};\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n@@ -30,6 +30,7 @@ use rustc_data_structures::sync::Lrc;\n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId};\n use errors::emitter::{Emitter, EmitterWriter};\n+use syntax::epoch::Epoch;\n use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n use syntax::symbol::Symbol;"}, {"sha": "f020f86b6860bba07ec4740d80cf570e87fc6351", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -647,7 +647,9 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n {\n     let time_passes = sess.time_passes();\n \n-    let (mut krate, features) = syntax::config::features(krate, &sess.parse_sess, sess.opts.test);\n+    let (mut krate, features) = syntax::config::features(krate, &sess.parse_sess,\n+                                                         sess.opts.test,\n+                                                         sess.opts.debugging_opts.epoch);\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);\n "}, {"sha": "e412d1749d1b2608c880d317c920c9caf23bd177", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -13,3 +13,5 @@ serialize = { path = \"../libserialize\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n unicode-width = \"0.1.4\"\n+atty = \"0.2\"\n+termcolor = \"0.3\""}, {"sha": "f481b36daa346436fbfc9f4f3dcedf08e2c39d10", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 106, "deletions": 151, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -17,12 +17,14 @@ use snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledStrin\n use styled_buffer::StyledBuffer;\n \n use rustc_data_structures::sync::Lrc;\n+use atty;\n use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n-use term;\n use std::collections::{HashMap, HashSet};\n use std::cmp::min;\n+use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter};\n+use termcolor::{WriteColor, Color, Buffer};\n use unicode_width;\n \n const ANONYMIZED_LINE_NUM: &str = \"LL\";\n@@ -95,11 +97,14 @@ pub enum ColorConfig {\n }\n \n impl ColorConfig {\n-    fn use_color(&self) -> bool {\n+    fn to_color_choice(&self) -> ColorChoice {\n         match *self {\n-            ColorConfig::Always => true,\n-            ColorConfig::Never => false,\n-            ColorConfig::Auto => stderr_isatty(),\n+            ColorConfig::Always => ColorChoice::Always,\n+            ColorConfig::Never => ColorChoice::Never,\n+            ColorConfig::Auto if atty::is(atty::Stream::Stderr) => {\n+                ColorChoice::Auto\n+            }\n+            ColorConfig::Auto => ColorChoice::Never,\n         }\n     }\n }\n@@ -123,25 +128,26 @@ impl Drop for EmitterWriter {\n     fn drop(&mut self) {\n         if !self.short_message && !self.error_codes.is_empty() {\n             let mut error_codes = self.error_codes.clone().into_iter().collect::<Vec<_>>();\n+            let mut dst = self.dst.writable();\n             error_codes.sort();\n             if error_codes.len() > 1 {\n                 let limit = if error_codes.len() > 9 { 9 } else { error_codes.len() };\n-                writeln!(self.dst,\n+                writeln!(dst,\n                          \"You've got a few errors: {}{}\",\n                          error_codes[..limit].join(\", \"),\n                          if error_codes.len() > 9 { \"...\" } else { \"\" }\n                         ).expect(\"failed to give tips...\");\n-                writeln!(self.dst,\n+                writeln!(dst,\n                          \"If you want more information on an error, try using \\\n                           \\\"rustc --explain {}\\\"\",\n                          &error_codes[0]).expect(\"failed to give tips...\");\n             } else {\n-                writeln!(self.dst,\n+                writeln!(dst,\n                          \"If you want more information on this error, try using \\\n                           \\\"rustc --explain {}\\\"\",\n                          &error_codes[0]).expect(\"failed to give tips...\");\n             }\n-            self.dst.flush().expect(\"failed to emit errors\");\n+            dst.flush().expect(\"failed to emit errors\");\n         }\n     }\n }\n@@ -152,25 +158,14 @@ impl EmitterWriter {\n                   short_message: bool,\n                   teach: bool)\n                   -> EmitterWriter {\n-        if color_config.use_color() {\n-            let dst = Destination::from_stderr();\n-            EmitterWriter {\n-                dst,\n-                cm: code_map,\n-                short_message,\n-                teach,\n-                error_codes: HashSet::new(),\n-                ui_testing: false,\n-            }\n-        } else {\n-            EmitterWriter {\n-                dst: Raw(Box::new(io::stderr())),\n-                cm: code_map,\n-                short_message,\n-                teach,\n-                error_codes: HashSet::new(),\n-                ui_testing: false,\n-            }\n+        let dst = Destination::from_stderr(color_config);\n+        EmitterWriter {\n+            dst,\n+            cm: code_map,\n+            short_message,\n+            teach,\n+            error_codes: HashSet::new(),\n+            ui_testing: false,\n         }\n     }\n \n@@ -1356,10 +1351,12 @@ impl EmitterWriter {\n             }\n             Err(e) => panic!(\"failed to emit error: {}\", e),\n         }\n-        match write!(&mut self.dst, \"\\n\") {\n+\n+        let mut dst = self.dst.writable();\n+        match write!(dst, \"\\n\") {\n             Err(e) => panic!(\"failed to emit error: {}\", e),\n             _ => {\n-                match self.dst.flush() {\n+                match dst.flush() {\n                     Err(e) => panic!(\"failed to emit error: {}\", e),\n                     _ => (),\n                 }\n@@ -1424,6 +1421,8 @@ fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,\n                        -> io::Result<()> {\n     use lock;\n \n+    let mut dst = dst.writable();\n+\n     // In order to prevent error message interleaving, where multiple error lines get intermixed\n     // when multiple compiler processes error simultaneously, we emit errors with additional\n     // steps.\n@@ -1444,7 +1443,7 @@ fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,\n             if !short_message && part.text.len() == 12 && part.text.starts_with(\"error[E\") {\n                 error_codes.insert(part.text[6..11].to_owned());\n             }\n-            dst.reset_attrs()?;\n+            dst.reset()?;\n         }\n         if !short_message {\n             write!(dst, \"\\n\")?;\n@@ -1454,180 +1453,136 @@ fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,\n     Ok(())\n }\n \n-#[cfg(unix)]\n-fn stderr_isatty() -> bool {\n-    use libc;\n-    unsafe { libc::isatty(libc::STDERR_FILENO) != 0 }\n-}\n-#[cfg(windows)]\n-fn stderr_isatty() -> bool {\n-    type DWORD = u32;\n-    type BOOL = i32;\n-    type HANDLE = *mut u8;\n-    const STD_ERROR_HANDLE: DWORD = -12i32 as DWORD;\n-    extern \"system\" {\n-        fn GetStdHandle(which: DWORD) -> HANDLE;\n-        fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: *mut DWORD) -> BOOL;\n-    }\n-    unsafe {\n-        let handle = GetStdHandle(STD_ERROR_HANDLE);\n-        let mut out = 0;\n-        GetConsoleMode(handle, &mut out) != 0\n-    }\n-}\n-\n-pub type BufferedStderr = term::Terminal<Output = BufferedWriter> + Send;\n-\n pub enum Destination {\n-    Terminal(Box<term::StderrTerminal>),\n-    BufferedTerminal(Box<BufferedStderr>),\n+    Terminal(StandardStream),\n+    Buffered(BufferWriter),\n     Raw(Box<Write + Send>),\n }\n \n-/// Buffered writer gives us a way on Unix to buffer up an entire error message before we output\n-/// it.  This helps to prevent interleaving of multiple error messages when multiple compiler\n-/// processes error simultaneously\n-pub struct BufferedWriter {\n-    buffer: Vec<u8>,\n-}\n-\n-impl BufferedWriter {\n-    // note: we use _new because the conditional compilation at its use site may make this\n-    // this function unused on some platforms\n-    fn _new() -> BufferedWriter {\n-        BufferedWriter { buffer: vec![] }\n-    }\n-}\n-\n-impl Write for BufferedWriter {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        for b in buf {\n-            self.buffer.push(*b);\n-        }\n-        Ok(buf.len())\n-    }\n-    fn flush(&mut self) -> io::Result<()> {\n-        let mut stderr = io::stderr();\n-        let result = stderr.write_all(&self.buffer)\n-                           .and_then(|_| stderr.flush());\n-        self.buffer.clear();\n-        result\n-    }\n+pub enum WritableDst<'a> {\n+    Terminal(&'a mut StandardStream),\n+    Buffered(&'a mut BufferWriter, Buffer),\n+    Raw(&'a mut Box<Write + Send>),\n }\n \n impl Destination {\n-    #[cfg(not(windows))]\n-    /// When not on Windows, prefer the buffered terminal so that we can buffer an entire error\n-    /// to be emitted at one time.\n-    fn from_stderr() -> Destination {\n-        let stderr: Option<Box<BufferedStderr>> =\n-            term::TerminfoTerminal::new(BufferedWriter::_new())\n-                .map(|t| Box::new(t) as Box<BufferedStderr>);\n-\n-        match stderr {\n-            Some(t) => BufferedTerminal(t),\n-            None => Raw(Box::new(io::stderr())),\n+    fn from_stderr(color: ColorConfig) -> Destination {\n+        let choice = color.to_color_choice();\n+        // On Windows we'll be performing global synchronization on the entire\n+        // system for emitting rustc errors, so there's no need to buffer\n+        // anything.\n+        //\n+        // On non-Windows we rely on the atomicity of `write` to ensure errors\n+        // don't get all jumbled up.\n+        if cfg!(windows) {\n+            Terminal(StandardStream::stderr(choice))\n+        } else {\n+            Buffered(BufferWriter::stderr(choice))\n         }\n     }\n \n-    #[cfg(windows)]\n-    /// Return a normal, unbuffered terminal when on Windows.\n-    fn from_stderr() -> Destination {\n-        let stderr: Option<Box<term::StderrTerminal>> = term::TerminfoTerminal::new(io::stderr())\n-            .map(|t| Box::new(t) as Box<term::StderrTerminal>)\n-            .or_else(|| {\n-                term::WinConsole::new(io::stderr())\n-                    .ok()\n-                    .map(|t| Box::new(t) as Box<term::StderrTerminal>)\n-            });\n-\n-        match stderr {\n-            Some(t) => Terminal(t),\n-            None => Raw(Box::new(io::stderr())),\n+    fn writable<'a>(&'a mut self) -> WritableDst<'a> {\n+        match *self {\n+            Destination::Terminal(ref mut t) => WritableDst::Terminal(t),\n+            Destination::Buffered(ref mut t) => {\n+                let buf = t.buffer();\n+                WritableDst::Buffered(t, buf)\n+            }\n+            Destination::Raw(ref mut t) => WritableDst::Raw(t),\n         }\n     }\n+}\n \n+impl<'a> WritableDst<'a> {\n     fn apply_style(&mut self, lvl: Level, style: Style) -> io::Result<()> {\n+        let mut spec = ColorSpec::new();\n         match style {\n             Style::LineAndColumn => {}\n             Style::LineNumber => {\n-                self.start_attr(term::Attr::Bold)?;\n+                spec.set_bold(true);\n+                spec.set_intense(true);\n                 if cfg!(windows) {\n-                    self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_CYAN))?;\n+                    spec.set_fg(Some(Color::Cyan));\n                 } else {\n-                    self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_BLUE))?;\n+                    spec.set_fg(Some(Color::Blue));\n                 }\n             }\n             Style::Quotation => {}\n             Style::OldSchoolNoteText | Style::HeaderMsg => {\n-                self.start_attr(term::Attr::Bold)?;\n+                spec.set_bold(true);\n                 if cfg!(windows) {\n-                    self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_WHITE))?;\n+                    spec.set_intense(true)\n+                        .set_fg(Some(Color::White));\n                 }\n             }\n             Style::UnderlinePrimary | Style::LabelPrimary => {\n-                self.start_attr(term::Attr::Bold)?;\n-                self.start_attr(term::Attr::ForegroundColor(lvl.color()))?;\n+                spec = lvl.color();\n+                spec.set_bold(true);\n             }\n             Style::UnderlineSecondary |\n             Style::LabelSecondary => {\n-                self.start_attr(term::Attr::Bold)?;\n+                spec.set_bold(true)\n+                    .set_intense(true);\n                 if cfg!(windows) {\n-                    self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_CYAN))?;\n+                    spec.set_fg(Some(Color::Cyan));\n                 } else {\n-                    self.start_attr(term::Attr::ForegroundColor(term::color::BRIGHT_BLUE))?;\n+                    spec.set_fg(Some(Color::Blue));\n                 }\n             }\n             Style::NoStyle => {}\n-            Style::Level(l) => {\n-                self.start_attr(term::Attr::Bold)?;\n-                self.start_attr(term::Attr::ForegroundColor(l.color()))?;\n+            Style::Level(lvl) => {\n+                spec = lvl.color();\n+                spec.set_bold(true);\n+            }\n+            Style::Highlight => {\n+                spec.set_bold(true);\n             }\n-            Style::Highlight => self.start_attr(term::Attr::Bold)?,\n         }\n-        Ok(())\n+        self.set_color(&spec)\n     }\n \n-    fn start_attr(&mut self, attr: term::Attr) -> io::Result<()> {\n+    fn set_color(&mut self, color: &ColorSpec) -> io::Result<()> {\n         match *self {\n-            Terminal(ref mut t) => {\n-                t.attr(attr)?;\n-            }\n-            BufferedTerminal(ref mut t) => {\n-                t.attr(attr)?;\n-            }\n-            Raw(_) => {}\n+            WritableDst::Terminal(ref mut t) => t.set_color(color),\n+            WritableDst::Buffered(_, ref mut t) => t.set_color(color),\n+            WritableDst::Raw(_) => Ok(())\n         }\n-        Ok(())\n     }\n \n-    fn reset_attrs(&mut self) -> io::Result<()> {\n+    fn reset(&mut self) -> io::Result<()> {\n         match *self {\n-            Terminal(ref mut t) => {\n-                t.reset()?;\n-            }\n-            BufferedTerminal(ref mut t) => {\n-                t.reset()?;\n-            }\n-            Raw(_) => {}\n+            WritableDst::Terminal(ref mut t) => t.reset(),\n+            WritableDst::Buffered(_, ref mut t) => t.reset(),\n+            WritableDst::Raw(_) => Ok(()),\n         }\n-        Ok(())\n     }\n }\n \n-impl Write for Destination {\n+impl<'a> Write for WritableDst<'a> {\n     fn write(&mut self, bytes: &[u8]) -> io::Result<usize> {\n         match *self {\n-            Terminal(ref mut t) => t.write(bytes),\n-            BufferedTerminal(ref mut t) => t.write(bytes),\n-            Raw(ref mut w) => w.write(bytes),\n+            WritableDst::Terminal(ref mut t) => t.write(bytes),\n+            WritableDst::Buffered(_, ref mut buf) => buf.write(bytes),\n+            WritableDst::Raw(ref mut w) => w.write(bytes),\n         }\n     }\n+\n     fn flush(&mut self) -> io::Result<()> {\n         match *self {\n-            Terminal(ref mut t) => t.flush(),\n-            BufferedTerminal(ref mut t) => t.flush(),\n-            Raw(ref mut w) => w.flush(),\n+            WritableDst::Terminal(ref mut t) => t.flush(),\n+            WritableDst::Buffered(_, ref mut buf) => buf.flush(),\n+            WritableDst::Raw(ref mut w) => w.flush(),\n+        }\n+    }\n+}\n+\n+impl<'a> Drop for WritableDst<'a> {\n+    fn drop(&mut self) {\n+        match *self {\n+            WritableDst::Buffered(ref mut dst, ref mut buf) => {\n+                drop(dst.print(buf));\n+            }\n+            _ => {}\n         }\n     }\n }"}, {"sha": "924ed71ef0d653eb6c9e1d2c78216042b645b227", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -21,7 +21,8 @@\n #![feature(i128_type)]\n #![feature(optin_builtin_traits)]\n \n-extern crate term;\n+extern crate atty;\n+extern crate termcolor;\n #[cfg(unix)]\n extern crate libc;\n extern crate rustc_data_structures;\n@@ -47,6 +48,8 @@ use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering::SeqCst;\n use std::panic;\n \n+use termcolor::{ColorSpec, Color};\n+\n mod diagnostic;\n mod diagnostic_builder;\n pub mod emitter;\n@@ -660,20 +663,28 @@ impl fmt::Display for Level {\n }\n \n impl Level {\n-    fn color(self) -> term::color::Color {\n+    fn color(self) -> ColorSpec {\n+        let mut spec = ColorSpec::new();\n         match self {\n-            Bug | Fatal | PhaseFatal | Error => term::color::BRIGHT_RED,\n+            Bug | Fatal | PhaseFatal | Error => {\n+                spec.set_fg(Some(Color::Red))\n+                    .set_intense(true);\n+            }\n             Warning => {\n-                if cfg!(windows) {\n-                    term::color::BRIGHT_YELLOW\n-                } else {\n-                    term::color::YELLOW\n-                }\n+                spec.set_fg(Some(Color::Yellow))\n+                    .set_intense(cfg!(windows));\n+            }\n+            Note => {\n+                spec.set_fg(Some(Color::Green))\n+                    .set_intense(true);\n+            }\n+            Help => {\n+                spec.set_fg(Some(Color::Cyan))\n+                    .set_intense(true);\n             }\n-            Note => term::color::BRIGHT_GREEN,\n-            Help => term::color::BRIGHT_CYAN,\n             Cancelled => unreachable!(),\n         }\n+        return spec\n     }\n \n     pub fn to_str(self) -> &'static str {"}, {"sha": "d39e00ab18fcb44cb1414d8308340f604eba5a52", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -1263,7 +1263,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n pub struct UnreachablePub;\n \n declare_lint! {\n-    UNREACHABLE_PUB,\n+    pub UNREACHABLE_PUB,\n     Allow,\n     \"`pub` items not reachable from crate root\"\n }"}, {"sha": "81609db62923f5cec1e7d33fbfc897b24a31e7d0", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -43,10 +43,12 @@ extern crate rustc_mir;\n extern crate syntax_pos;\n \n use rustc::lint;\n+use rustc::lint::builtin::BARE_TRAIT_OBJECT;\n use rustc::session;\n use rustc::util;\n \n use session::Session;\n+use syntax::epoch::Epoch;\n use lint::LintId;\n use lint::FutureIncompatibleInfo;\n \n@@ -176,6 +178,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_FEATURES,\n                     UNUSED_PARENS);\n \n+    add_lint_group!(sess,\n+                    \"rust_2018_idioms\",\n+                    BARE_TRAIT_OBJECT,\n+                    UNREACHABLE_PUB);\n+\n     // Guidelines for creating a future incompatibility lint:\n     //\n     // - Create a lint defaulting to warn as normal, with ideally the same error\n@@ -274,13 +281,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         FutureIncompatibleInfo {\n             id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n             reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n-            epoch: None,\n-        },\n-         FutureIncompatibleInfo {\n-             id: LintId::of(lint::builtin::BARE_TRAIT_OBJECT),\n-             reference: \"issue #48457 <https://github.com/rust-lang/rust/issues/48457>\",\n-             epoch: Some(session::config::Epoch::Epoch2018),\n-         }\n+            epoch: Some(Epoch::Epoch2018),\n+        }\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "b804cf7cd9021711d818ad766f0ccfa3830318a9", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -472,7 +472,7 @@ pub mod builtin {\n     /// The expanded expression has type `u32` and is 1-based, so the first line\n     /// in each file evaluates to 1, the second to 2, etc. This is consistent\n     /// with error messages by common compilers or popular editors.\n-    /// The returned line is not the invocation of the `line!` macro itself,\n+    /// The returned line is *not necessarily* the line of the `line!` invocation itself,\n     /// but rather the first macro invocation leading up to the invocation\n     /// of the `line!` macro.\n     ///\n@@ -497,7 +497,7 @@ pub mod builtin {\n     /// The expanded expression has type `u32` and is 1-based, so the first column\n     /// in each line evaluates to 1, the second to 2, etc. This is consistent\n     /// with error messages by common compilers or popular editors.\n-    /// The returned column is not the invocation of the `column!` macro itself,\n+    /// The returned column is *not necessarily* the line of the `column!` invocation itself,\n     /// but rather the first macro invocation leading up to the invocation\n     /// of the `column!` macro.\n     ///"}, {"sha": "6013c20daf23551c9492613f63320ad19d5baf97", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -13,6 +13,7 @@ use feature_gate::{feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features\n use {fold, attr};\n use ast;\n use codemap::Spanned;\n+use epoch::Epoch;\n use parse::{token, ParseSess};\n \n use ptr::P;\n@@ -26,7 +27,7 @@ pub struct StripUnconfigured<'a> {\n }\n \n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool)\n+pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool, epoch: Epoch)\n                 -> (ast::Crate, Features) {\n     let features;\n     {\n@@ -46,7 +47,7 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool)\n             return (krate, Features::new());\n         }\n \n-        features = get_features(&sess.span_diagnostic, &krate.attrs);\n+        features = get_features(&sess.span_diagnostic, &krate.attrs, epoch);\n \n         // Avoid reconfiguring malformed `cfg_attr`s\n         if err_count == sess.span_diagnostic.err_count() {"}, {"sha": "32cbc79c550e3121a65a82a869318433cf488a4c", "filename": "src/libsyntax/epoch.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibsyntax%2Fepoch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibsyntax%2Fepoch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fepoch.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+use std::str::FromStr;\n+\n+/// The epoch of the compiler (RFC 2052)\n+#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n+#[non_exhaustive]\n+pub enum Epoch {\n+    // epochs must be kept in order, newest to oldest\n+\n+    /// The 2015 epoch\n+    Epoch2015,\n+    /// The 2018 epoch\n+    Epoch2018,\n+\n+    // when adding new epochs, be sure to update:\n+    //\n+    // - the list in the `parse_epoch` static in librustc::session::config\n+    // - add a `rust_####()` function to the session\n+    // - update the enum in Cargo's sources as well\n+    //\n+    // When -Zepoch becomes --epoch, there will\n+    // also be a check for the epoch being nightly-only\n+    // somewhere. That will need to be updated\n+    // whenever we're stabilizing/introducing a new epoch\n+    // as well as changing the default Cargo template.\n+}\n+\n+// must be in order from oldest to newest\n+pub const ALL_EPOCHS: &[Epoch] = &[Epoch::Epoch2015, Epoch::Epoch2018];\n+\n+impl fmt::Display for Epoch {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let s = match *self {\n+            Epoch::Epoch2015 => \"2015\",\n+            Epoch::Epoch2018 => \"2018\",\n+        };\n+        write!(f, \"{}\", s)\n+    }\n+}\n+\n+impl Epoch {\n+    pub fn lint_name(&self) -> &'static str {\n+        match *self {\n+            Epoch::Epoch2015 => \"epoch_2015\",\n+            Epoch::Epoch2018 => \"epoch_2018\",\n+        }\n+    }\n+}\n+\n+impl FromStr for Epoch {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Self, ()> {\n+        match s {\n+            \"2015\" => Ok(Epoch::Epoch2015),\n+            \"2018\" => Ok(Epoch::Epoch2018),\n+            _ => Err(())\n+        }\n+    }\n+}"}, {"sha": "ec9a15d9f2b44814a6eaf9914e4318d57ba1ca07", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 200, "deletions": 187, "changes": 387, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -28,8 +28,9 @@ use self::AttributeGate::*;\n use abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd, RangeSyntax};\n use attr;\n+use epoch::Epoch;\n use codemap::Spanned;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler, FatalError};\n use visit::{self, FnKind, Visitor};\n use parse::ParseSess;\n@@ -54,12 +55,13 @@ macro_rules! set {\n }\n \n macro_rules! declare_features {\n-    ($((active, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((active, $feature: ident, $ver: expr, $issue: expr, $epoch: expr),)+) => {\n         /// Represents active features that are currently being implemented or\n         /// currently being considered for addition/removal.\n         const ACTIVE_FEATURES:\n-                &'static [(&'static str, &'static str, Option<u32>, fn(&mut Features, Span))] =\n-            &[$((stringify!($feature), $ver, $issue, set!($feature))),+];\n+                &'static [(&'static str, &'static str, Option<u32>,\n+                           Option<Epoch>, fn(&mut Features, Span))] =\n+            &[$((stringify!($feature), $ver, $issue, $epoch, set!($feature))),+];\n \n         /// A set of features to be used by later passes.\n         #[derive(Clone)]\n@@ -88,21 +90,21 @@ macro_rules! declare_features {\n         }\n     };\n \n-    ($((removed, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((removed, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Represents unstable features which have since been removed (it was once Active)\n         const REMOVED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n             $((stringify!($feature), $ver, $issue)),+\n         ];\n     };\n \n-    ($((stable_removed, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((stable_removed, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Represents stable features which have since been removed (it was once Accepted)\n         const STABLE_REMOVED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n             $((stringify!($feature), $ver, $issue)),+\n         ];\n     };\n \n-    ($((accepted, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((accepted, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Those language feature has since been Accepted (it was once Active)\n         const ACCEPTED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n             $((stringify!($feature), $ver, $issue)),+\n@@ -122,436 +124,436 @@ macro_rules! declare_features {\n // source, so take care when modifying it.\n \n declare_features! (\n-    (active, asm, \"1.0.0\", Some(29722)),\n-    (active, concat_idents, \"1.0.0\", Some(29599)),\n-    (active, link_args, \"1.0.0\", Some(29596)),\n-    (active, log_syntax, \"1.0.0\", Some(29598)),\n-    (active, non_ascii_idents, \"1.0.0\", Some(28979)),\n-    (active, plugin_registrar, \"1.0.0\", Some(29597)),\n-    (active, thread_local, \"1.0.0\", Some(29594)),\n-    (active, trace_macros, \"1.0.0\", Some(29598)),\n+    (active, asm, \"1.0.0\", Some(29722), None),\n+    (active, concat_idents, \"1.0.0\", Some(29599), None),\n+    (active, link_args, \"1.0.0\", Some(29596), None),\n+    (active, log_syntax, \"1.0.0\", Some(29598), None),\n+    (active, non_ascii_idents, \"1.0.0\", Some(28979), None),\n+    (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n+    (active, thread_local, \"1.0.0\", Some(29594), None),\n+    (active, trace_macros, \"1.0.0\", Some(29598), None),\n \n     // rustc internal, for now:\n-    (active, intrinsics, \"1.0.0\", None),\n-    (active, lang_items, \"1.0.0\", None),\n+    (active, intrinsics, \"1.0.0\", None, None),\n+    (active, lang_items, \"1.0.0\", None, None),\n \n-    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602)),\n-    (active, linkage, \"1.0.0\", Some(29603)),\n-    (active, quote, \"1.0.0\", Some(29601)),\n+    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n+    (active, linkage, \"1.0.0\", Some(29603), None),\n+    (active, quote, \"1.0.0\", Some(29601), None),\n \n \n     // rustc internal\n-    (active, rustc_diagnostic_macros, \"1.0.0\", None),\n-    (active, rustc_const_unstable, \"1.0.0\", None),\n-    (active, advanced_slice_patterns, \"1.0.0\", Some(23121)),\n-    (active, box_syntax, \"1.0.0\", Some(27779)),\n-    (active, placement_in_syntax, \"1.0.0\", Some(27779)),\n-    (active, unboxed_closures, \"1.0.0\", Some(29625)),\n-\n-    (active, fundamental, \"1.0.0\", Some(29635)),\n-    (active, main, \"1.0.0\", Some(29634)),\n-    (active, needs_allocator, \"1.4.0\", Some(27389)),\n-    (active, on_unimplemented, \"1.0.0\", Some(29628)),\n-    (active, plugin, \"1.0.0\", Some(29597)),\n-    (active, simd_ffi, \"1.0.0\", Some(27731)),\n-    (active, start, \"1.0.0\", Some(29633)),\n-    (active, structural_match, \"1.8.0\", Some(31434)),\n-    (active, panic_runtime, \"1.10.0\", Some(32837)),\n-    (active, needs_panic_runtime, \"1.10.0\", Some(32837)),\n+    (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n+    (active, rustc_const_unstable, \"1.0.0\", None, None),\n+    (active, advanced_slice_patterns, \"1.0.0\", Some(23121), None),\n+    (active, box_syntax, \"1.0.0\", Some(27779), None),\n+    (active, placement_in_syntax, \"1.0.0\", Some(27779), None),\n+    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n+\n+    (active, fundamental, \"1.0.0\", Some(29635), None),\n+    (active, main, \"1.0.0\", Some(29634), None),\n+    (active, needs_allocator, \"1.4.0\", Some(27389), None),\n+    (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n+    (active, plugin, \"1.0.0\", Some(29597), None),\n+    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n+    (active, start, \"1.0.0\", Some(29633), None),\n+    (active, structural_match, \"1.8.0\", Some(31434), None),\n+    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n+    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n \n     // OIBIT specific features\n-    (active, optin_builtin_traits, \"1.0.0\", Some(13231)),\n+    (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n \n     // macro re-export needs more discussion and stabilization\n-    (active, macro_reexport, \"1.0.0\", Some(29638)),\n+    (active, macro_reexport, \"1.0.0\", Some(29638), None),\n \n     // Allows use of #[staged_api]\n     // rustc internal\n-    (active, staged_api, \"1.0.0\", None),\n+    (active, staged_api, \"1.0.0\", None, None),\n \n     // Allows using #![no_core]\n-    (active, no_core, \"1.3.0\", Some(29639)),\n+    (active, no_core, \"1.3.0\", Some(29639), None),\n \n     // Allows using `box` in patterns; RFC 469\n-    (active, box_patterns, \"1.0.0\", Some(29641)),\n+    (active, box_patterns, \"1.0.0\", Some(29641), None),\n \n     // Allows using the unsafe_destructor_blind_to_params attribute;\n     // RFC 1238\n-    (active, dropck_parametricity, \"1.3.0\", Some(28498)),\n+    (active, dropck_parametricity, \"1.3.0\", Some(28498), None),\n \n     // Allows using the may_dangle attribute; RFC 1327\n-    (active, dropck_eyepatch, \"1.10.0\", Some(34761)),\n+    (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n \n     // Allows the use of custom attributes; RFC 572\n-    (active, custom_attribute, \"1.0.0\", Some(29642)),\n+    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n \n     // Allows the use of #[derive(Anything)] as sugar for\n     // #[derive_Anything].\n-    (active, custom_derive, \"1.0.0\", Some(29644)),\n+    (active, custom_derive, \"1.0.0\", Some(29644), None),\n \n     // Allows the use of rustc_* attributes; RFC 572\n-    (active, rustc_attrs, \"1.0.0\", Some(29642)),\n+    (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n \n     // Allows the use of non lexical lifetimes; RFC 2094\n-    (active, nll, \"1.0.0\", Some(43234)),\n+    (active, nll, \"1.0.0\", Some(43234), None),\n \n     // Allows the use of #[allow_internal_unstable]. This is an\n     // attribute on macro_rules! and can't use the attribute handling\n     // below (it has to be checked before expansion possibly makes\n     // macros disappear).\n     //\n     // rustc internal\n-    (active, allow_internal_unstable, \"1.0.0\", None),\n+    (active, allow_internal_unstable, \"1.0.0\", None, None),\n \n     // Allows the use of #[allow_internal_unsafe]. This is an\n     // attribute on macro_rules! and can't use the attribute handling\n     // below (it has to be checked before expansion possibly makes\n     // macros disappear).\n     //\n     // rustc internal\n-    (active, allow_internal_unsafe, \"1.0.0\", None),\n+    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n \n     // #23121. Array patterns have some hazards yet.\n-    (active, slice_patterns, \"1.0.0\", Some(23121)),\n+    (active, slice_patterns, \"1.0.0\", Some(23121), None),\n \n     // Allows the definition of `const fn` functions.\n-    (active, const_fn, \"1.2.0\", Some(24111)),\n+    (active, const_fn, \"1.2.0\", Some(24111), None),\n \n     // Allows using #[prelude_import] on glob `use` items.\n     //\n     // rustc internal\n-    (active, prelude_import, \"1.2.0\", None),\n+    (active, prelude_import, \"1.2.0\", None, None),\n \n     // Allows default type parameters to influence type inference.\n-    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336)),\n+    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n \n     // Allows associated type defaults\n-    (active, associated_type_defaults, \"1.2.0\", Some(29661)),\n+    (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n \n     // allow `repr(simd)`, and importing the various simd intrinsics\n-    (active, repr_simd, \"1.4.0\", Some(27731)),\n+    (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n     // Allows cfg(target_feature = \"...\").\n-    (active, cfg_target_feature, \"1.4.0\", Some(29717)),\n+    (active, cfg_target_feature, \"1.4.0\", Some(29717), None),\n \n     // allow `extern \"platform-intrinsic\" { ... }`\n-    (active, platform_intrinsics, \"1.4.0\", Some(27731)),\n+    (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n \n     // allow `#[unwind(..)]`\n     // rust runtime internal\n-    (active, unwind_attributes, \"1.4.0\", None),\n+    (active, unwind_attributes, \"1.4.0\", None, None),\n \n     // allow the use of `#[naked]` on functions.\n-    (active, naked_functions, \"1.9.0\", Some(32408)),\n+    (active, naked_functions, \"1.9.0\", Some(32408), None),\n \n     // allow `#[no_debug]`\n-    (active, no_debug, \"1.5.0\", Some(29721)),\n+    (active, no_debug, \"1.5.0\", Some(29721), None),\n \n     // allow `#[omit_gdb_pretty_printer_section]`\n     // rustc internal.\n-    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None),\n+    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n \n     // Allows cfg(target_vendor = \"...\").\n-    (active, cfg_target_vendor, \"1.5.0\", Some(29718)),\n+    (active, cfg_target_vendor, \"1.5.0\", Some(29718), None),\n \n     // Allow attributes on expressions and non-item statements\n-    (active, stmt_expr_attributes, \"1.6.0\", Some(15701)),\n+    (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n \n     // allow using type ascription in expressions\n-    (active, type_ascription, \"1.6.0\", Some(23416)),\n+    (active, type_ascription, \"1.6.0\", Some(23416), None),\n \n     // Allows cfg(target_thread_local)\n-    (active, cfg_target_thread_local, \"1.7.0\", Some(29594)),\n+    (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n \n     // rustc internal\n-    (active, abi_vectorcall, \"1.7.0\", None),\n+    (active, abi_vectorcall, \"1.7.0\", None, None),\n \n     // a..=b and ..=b\n-    (active, inclusive_range_syntax, \"1.7.0\", Some(28237)),\n+    (active, inclusive_range_syntax, \"1.7.0\", Some(28237), None),\n \n     // X..Y patterns\n-    (active, exclusive_range_pattern, \"1.11.0\", Some(37854)),\n+    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n     // impl specialization (RFC 1210)\n-    (active, specialization, \"1.7.0\", Some(31844)),\n+    (active, specialization, \"1.7.0\", Some(31844), None),\n \n     // Allows cfg(target_has_atomic = \"...\").\n-    (active, cfg_target_has_atomic, \"1.9.0\", Some(32976)),\n+    (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n \n     // Allows `impl Trait` in function return types.\n-    (active, conservative_impl_trait, \"1.12.0\", Some(34511)),\n+    (active, conservative_impl_trait, \"1.12.0\", Some(34511), None),\n \n     // Allows `impl Trait` in function arguments.\n-    (active, universal_impl_trait, \"1.23.0\", Some(34511)),\n+    (active, universal_impl_trait, \"1.23.0\", Some(34511), None),\n \n     // The `!` type\n-    (active, never_type, \"1.13.0\", Some(35121)),\n+    (active, never_type, \"1.13.0\", Some(35121), None),\n \n     // Allows all literals in attribute lists and values of key-value pairs.\n-    (active, attr_literals, \"1.13.0\", Some(34981)),\n+    (active, attr_literals, \"1.13.0\", Some(34981), None),\n \n     // Allows untagged unions `union U { ... }`\n-    (active, untagged_unions, \"1.13.0\", Some(32836)),\n+    (active, untagged_unions, \"1.13.0\", Some(32836), None),\n \n     // Used to identify the `compiler_builtins` crate\n     // rustc internal\n-    (active, compiler_builtins, \"1.13.0\", None),\n+    (active, compiler_builtins, \"1.13.0\", None, None),\n \n     // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n-    (active, generic_param_attrs, \"1.11.0\", Some(34761)),\n+    (active, generic_param_attrs, \"1.11.0\", Some(34761), None),\n \n     // Allows #[link(..., cfg(..))]\n-    (active, link_cfg, \"1.14.0\", Some(37406)),\n+    (active, link_cfg, \"1.14.0\", Some(37406), None),\n \n-    (active, use_extern_macros, \"1.15.0\", Some(35896)),\n+    (active, use_extern_macros, \"1.15.0\", Some(35896), None),\n \n     // Allows #[target_feature(...)]\n-    (active, target_feature, \"1.15.0\", None),\n+    (active, target_feature, \"1.15.0\", None, None),\n \n     // `extern \"ptx-*\" fn()`\n-    (active, abi_ptx, \"1.15.0\", None),\n+    (active, abi_ptx, \"1.15.0\", None, None),\n \n     // The `i128` type\n-    (active, i128_type, \"1.16.0\", Some(35118)),\n+    (active, i128_type, \"1.16.0\", Some(35118), None),\n \n     // The `repr(i128)` annotation for enums\n-    (active, repr128, \"1.16.0\", Some(35118)),\n+    (active, repr128, \"1.16.0\", Some(35118), None),\n \n     // The `unadjusted` ABI. Perma unstable.\n-    (active, abi_unadjusted, \"1.16.0\", None),\n+    (active, abi_unadjusted, \"1.16.0\", None, None),\n \n     // Procedural macros 2.0.\n-    (active, proc_macro, \"1.16.0\", Some(38356)),\n+    (active, proc_macro, \"1.16.0\", Some(38356), None),\n \n     // Declarative macros 2.0 (`macro`).\n-    (active, decl_macro, \"1.17.0\", Some(39412)),\n+    (active, decl_macro, \"1.17.0\", Some(39412), None),\n \n     // Allows #[link(kind=\"static-nobundle\"...]\n-    (active, static_nobundle, \"1.16.0\", Some(37403)),\n+    (active, static_nobundle, \"1.16.0\", Some(37403), None),\n \n     // `extern \"msp430-interrupt\" fn()`\n-    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487)),\n+    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n \n     // Used to identify crates that contain sanitizer runtimes\n     // rustc internal\n-    (active, sanitizer_runtime, \"1.17.0\", None),\n+    (active, sanitizer_runtime, \"1.17.0\", None, None),\n \n     // Used to identify crates that contain the profiler runtime\n     // rustc internal\n-    (active, profiler_runtime, \"1.18.0\", None),\n+    (active, profiler_runtime, \"1.18.0\", None, None),\n \n     // `extern \"x86-interrupt\" fn()`\n-    (active, abi_x86_interrupt, \"1.17.0\", Some(40180)),\n+    (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n \n     // Allows the `catch {...}` expression\n-    (active, catch_expr, \"1.17.0\", Some(31436)),\n+    (active, catch_expr, \"1.17.0\", Some(31436), None),\n \n     // Used to preserve symbols (see llvm.used)\n-    (active, used, \"1.18.0\", Some(40289)),\n+    (active, used, \"1.18.0\", Some(40289), None),\n \n     // Allows module-level inline assembly by way of global_asm!()\n-    (active, global_asm, \"1.18.0\", Some(35119)),\n+    (active, global_asm, \"1.18.0\", Some(35119), None),\n \n     // Allows overlapping impls of marker traits\n-    (active, overlapping_marker_traits, \"1.18.0\", Some(29864)),\n+    (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n \n     // Allows use of the :vis macro fragment specifier\n-    (active, macro_vis_matcher, \"1.18.0\", Some(41022)),\n+    (active, macro_vis_matcher, \"1.18.0\", Some(41022), None),\n \n     // rustc internal\n-    (active, abi_thiscall, \"1.19.0\", None),\n+    (active, abi_thiscall, \"1.19.0\", None, None),\n \n     // Allows a test to fail without failing the whole suite\n-    (active, allow_fail, \"1.19.0\", Some(42219)),\n+    (active, allow_fail, \"1.19.0\", Some(42219), None),\n \n     // Allows unsized tuple coercion.\n-    (active, unsized_tuple_coercion, \"1.20.0\", Some(42877)),\n+    (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n \n     // Generators\n-    (active, generators, \"1.21.0\", None),\n+    (active, generators, \"1.21.0\", None, None),\n \n     // Trait aliases\n-    (active, trait_alias, \"1.24.0\", Some(41517)),\n+    (active, trait_alias, \"1.24.0\", Some(41517), None),\n \n     // global allocators and their internals\n-    (active, global_allocator, \"1.20.0\", None),\n-    (active, allocator_internals, \"1.20.0\", None),\n+    (active, global_allocator, \"1.20.0\", None, None),\n+    (active, allocator_internals, \"1.20.0\", None, None),\n \n     // #[doc(cfg(...))]\n-    (active, doc_cfg, \"1.21.0\", Some(43781)),\n+    (active, doc_cfg, \"1.21.0\", Some(43781), None),\n     // #[doc(masked)]\n-    (active, doc_masked, \"1.21.0\", Some(44027)),\n+    (active, doc_masked, \"1.21.0\", Some(44027), None),\n     // #[doc(spotlight)]\n-    (active, doc_spotlight, \"1.22.0\", Some(45040)),\n+    (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n     // #[doc(include=\"some-file\")]\n-    (active, external_doc, \"1.22.0\", Some(44732)),\n+    (active, external_doc, \"1.22.0\", Some(44732), None),\n \n     // allow `#[must_use]` on functions and comparison operators (RFC 1940)\n-    (active, fn_must_use, \"1.21.0\", Some(43302)),\n+    (active, fn_must_use, \"1.21.0\", Some(43302), None),\n \n     // Future-proofing enums/structs with #[non_exhaustive] attribute (RFC 2008)\n-    (active, non_exhaustive, \"1.22.0\", Some(44109)),\n+    (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n     // Copy/Clone closures (RFC 2132)\n-    (active, clone_closures, \"1.22.0\", Some(44490)),\n-    (active, copy_closures, \"1.22.0\", Some(44490)),\n+    (active, clone_closures, \"1.22.0\", Some(44490), None),\n+    (active, copy_closures, \"1.22.0\", Some(44490), None),\n \n     // allow `'_` placeholder lifetimes\n-    (active, underscore_lifetimes, \"1.22.0\", Some(44524)),\n+    (active, underscore_lifetimes, \"1.22.0\", Some(44524), None),\n \n     // allow `..=` in patterns (RFC 1192)\n-    (active, dotdoteq_in_patterns, \"1.22.0\", Some(28237)),\n+    (active, dotdoteq_in_patterns, \"1.22.0\", Some(28237), None),\n \n     // Default match binding modes (RFC 2005)\n-    (active, match_default_bindings, \"1.22.0\", Some(42640)),\n+    (active, match_default_bindings, \"1.22.0\", Some(42640), None),\n \n     // Trait object syntax with `dyn` prefix\n-    (active, dyn_trait, \"1.22.0\", Some(44662)),\n+    (active, dyn_trait, \"1.22.0\", Some(44662), Some(Epoch::Epoch2018)),\n \n     // `crate` as visibility modifier, synonymous to `pub(crate)`\n-    (active, crate_visibility_modifier, \"1.23.0\", Some(45388)),\n+    (active, crate_visibility_modifier, \"1.23.0\", Some(45388), None),\n \n     // extern types\n-    (active, extern_types, \"1.23.0\", Some(43467)),\n+    (active, extern_types, \"1.23.0\", Some(43467), None),\n \n     // Allow trait methods with arbitrary self types\n-    (active, arbitrary_self_types, \"1.23.0\", Some(44874)),\n+    (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n \n     // `crate` in paths\n-    (active, crate_in_paths, \"1.23.0\", Some(45477)),\n+    (active, crate_in_paths, \"1.23.0\", Some(45477), None),\n \n     // In-band lifetime bindings (e.g. `fn foo(x: &'a u8) -> &'a u8`)\n-    (active, in_band_lifetimes, \"1.23.0\", Some(44524)),\n+    (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n     // generic associated types (RFC 1598)\n-    (active, generic_associated_types, \"1.23.0\", Some(44265)),\n+    (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n     // Resolve absolute paths as paths from other crates\n-    (active, extern_absolute_paths, \"1.24.0\", Some(44660)),\n+    (active, extern_absolute_paths, \"1.24.0\", Some(44660), None),\n \n     // `foo.rs` as an alternative to `foo/mod.rs`\n-    (active, non_modrs_mods, \"1.24.0\", Some(44660)),\n+    (active, non_modrs_mods, \"1.24.0\", Some(44660), None),\n \n     // Termination trait in main (RFC 1937)\n-    (active, termination_trait, \"1.24.0\", Some(43301)),\n+    (active, termination_trait, \"1.24.0\", Some(43301), None),\n \n     // Allows use of the :lifetime macro fragment specifier\n-    (active, macro_lifetime_matcher, \"1.24.0\", Some(46895)),\n+    (active, macro_lifetime_matcher, \"1.24.0\", Some(46895), None),\n \n     // `extern` in paths\n-    (active, extern_in_paths, \"1.23.0\", Some(44660)),\n+    (active, extern_in_paths, \"1.23.0\", Some(44660), None),\n \n     // Allows `#[repr(transparent)]` attribute on newtype structs\n-    (active, repr_transparent, \"1.25.0\", Some(43036)),\n+    (active, repr_transparent, \"1.25.0\", Some(43036), None),\n \n     // Use `?` as the Kleene \"at most one\" operator\n-    (active, macro_at_most_once_rep, \"1.25.0\", Some(48075)),\n+    (active, macro_at_most_once_rep, \"1.25.0\", Some(48075), None),\n \n     // Multiple patterns with `|` in `if let` and `while let`\n-    (active, if_while_or_patterns, \"1.26.0\", Some(48215)),\n+    (active, if_while_or_patterns, \"1.26.0\", Some(48215), None),\n \n     // Parentheses in patterns\n-    (active, pattern_parentheses, \"1.26.0\", None),\n+    (active, pattern_parentheses, \"1.26.0\", None, None),\n );\n \n declare_features! (\n-    (removed, import_shadowing, \"1.0.0\", None),\n-    (removed, managed_boxes, \"1.0.0\", None),\n+    (removed, import_shadowing, \"1.0.0\", None, None),\n+    (removed, managed_boxes, \"1.0.0\", None, None),\n     // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n-    (removed, negate_unsigned, \"1.0.0\", Some(29645)),\n-    (removed, reflect, \"1.0.0\", Some(27749)),\n+    (removed, negate_unsigned, \"1.0.0\", Some(29645), None),\n+    (removed, reflect, \"1.0.0\", Some(27749), None),\n     // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n-    (removed, opt_out_copy, \"1.0.0\", None),\n-    (removed, quad_precision_float, \"1.0.0\", None),\n-    (removed, struct_inherit, \"1.0.0\", None),\n-    (removed, test_removed_feature, \"1.0.0\", None),\n-    (removed, visible_private_types, \"1.0.0\", None),\n-    (removed, unsafe_no_drop_flag, \"1.0.0\", None),\n+    (removed, opt_out_copy, \"1.0.0\", None, None),\n+    (removed, quad_precision_float, \"1.0.0\", None, None),\n+    (removed, struct_inherit, \"1.0.0\", None, None),\n+    (removed, test_removed_feature, \"1.0.0\", None, None),\n+    (removed, visible_private_types, \"1.0.0\", None, None),\n+    (removed, unsafe_no_drop_flag, \"1.0.0\", None, None),\n     // Allows using items which are missing stability attributes\n     // rustc internal\n-    (removed, unmarked_api, \"1.0.0\", None),\n-    (removed, pushpop_unsafe, \"1.2.0\", None),\n-    (removed, allocator, \"1.0.0\", None),\n+    (removed, unmarked_api, \"1.0.0\", None, None),\n+    (removed, pushpop_unsafe, \"1.2.0\", None, None),\n+    (removed, allocator, \"1.0.0\", None, None),\n     // Allows the `#[simd]` attribute -- removed in favor of `#[repr(simd)]`\n-    (removed, simd, \"1.0.0\", Some(27731)),\n+    (removed, simd, \"1.0.0\", Some(27731), None),\n );\n \n declare_features! (\n-    (stable_removed, no_stack_check, \"1.0.0\", None),\n+    (stable_removed, no_stack_check, \"1.0.0\", None, None),\n );\n \n declare_features! (\n-    (accepted, associated_types, \"1.0.0\", None),\n+    (accepted, associated_types, \"1.0.0\", None, None),\n     // allow overloading augmented assignment operations like `a += b`\n-    (accepted, augmented_assignments, \"1.8.0\", Some(28235)),\n+    (accepted, augmented_assignments, \"1.8.0\", Some(28235), None),\n     // allow empty structs and enum variants with braces\n-    (accepted, braced_empty_structs, \"1.8.0\", Some(29720)),\n+    (accepted, braced_empty_structs, \"1.8.0\", Some(29720), None),\n     // Allows indexing into constant arrays.\n-    (accepted, const_indexing, \"1.24.0\", Some(29947)),\n-    (accepted, default_type_params, \"1.0.0\", None),\n-    (accepted, globs, \"1.0.0\", None),\n-    (accepted, if_let, \"1.0.0\", None),\n+    (accepted, const_indexing, \"1.24.0\", Some(29947), None),\n+    (accepted, default_type_params, \"1.0.0\", None, None),\n+    (accepted, globs, \"1.0.0\", None, None),\n+    (accepted, if_let, \"1.0.0\", None, None),\n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n-    (accepted, issue_5723_bootstrap, \"1.0.0\", None),\n-    (accepted, macro_rules, \"1.0.0\", None),\n+    (accepted, issue_5723_bootstrap, \"1.0.0\", None, None),\n+    (accepted, macro_rules, \"1.0.0\", None, None),\n     // Allows using #![no_std]\n-    (accepted, no_std, \"1.6.0\", None),\n-    (accepted, slicing_syntax, \"1.0.0\", None),\n-    (accepted, struct_variant, \"1.0.0\", None),\n+    (accepted, no_std, \"1.6.0\", None, None),\n+    (accepted, slicing_syntax, \"1.0.0\", None, None),\n+    (accepted, struct_variant, \"1.0.0\", None, None),\n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n-    (accepted, test_accepted_feature, \"1.0.0\", None),\n-    (accepted, tuple_indexing, \"1.0.0\", None),\n+    (accepted, test_accepted_feature, \"1.0.0\", None, None),\n+    (accepted, tuple_indexing, \"1.0.0\", None, None),\n     // Allows macros to appear in the type position.\n-    (accepted, type_macros, \"1.13.0\", Some(27245)),\n-    (accepted, while_let, \"1.0.0\", None),\n+    (accepted, type_macros, \"1.13.0\", Some(27245), None),\n+    (accepted, while_let, \"1.0.0\", None, None),\n     // Allows `#[deprecated]` attribute\n-    (accepted, deprecated, \"1.9.0\", Some(29935)),\n+    (accepted, deprecated, \"1.9.0\", Some(29935), None),\n     // `expr?`\n-    (accepted, question_mark, \"1.13.0\", Some(31436)),\n+    (accepted, question_mark, \"1.13.0\", Some(31436), None),\n     // Allows `..` in tuple (struct) patterns\n-    (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627)),\n-    (accepted, item_like_imports, \"1.15.0\", Some(35120)),\n+    (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627), None),\n+    (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n     // Allows using `Self` and associated types in struct expressions and patterns.\n-    (accepted, more_struct_aliases, \"1.16.0\", Some(37544)),\n+    (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n     // elide `'static` lifetimes in `static`s and `const`s\n-    (accepted, static_in_const, \"1.17.0\", Some(35897)),\n+    (accepted, static_in_const, \"1.17.0\", Some(35897), None),\n     // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n-    (accepted, field_init_shorthand, \"1.17.0\", Some(37340)),\n+    (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n     // Allows the definition recursive static items.\n-    (accepted, static_recursion, \"1.17.0\", Some(29719)),\n+    (accepted, static_recursion, \"1.17.0\", Some(29719), None),\n     // pub(restricted) visibilities (RFC 1422)\n-    (accepted, pub_restricted, \"1.18.0\", Some(32409)),\n+    (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n     // The #![windows_subsystem] attribute\n-    (accepted, windows_subsystem, \"1.18.0\", Some(37499)),\n+    (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n     // Allows `break {expr}` with a value inside `loop`s.\n-    (accepted, loop_break_value, \"1.19.0\", Some(37339)),\n+    (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n     // Permits numeric fields in struct expressions and patterns.\n-    (accepted, relaxed_adts, \"1.19.0\", Some(35626)),\n+    (accepted, relaxed_adts, \"1.19.0\", Some(35626), None),\n     // Coerces non capturing closures to function pointers\n-    (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817)),\n+    (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n     // Allows attributes on struct literal fields.\n-    (accepted, struct_field_attributes, \"1.20.0\", Some(38814)),\n+    (accepted, struct_field_attributes, \"1.20.0\", Some(38814), None),\n     // Allows the definition of associated constants in `trait` or `impl`\n     // blocks.\n-    (accepted, associated_consts, \"1.20.0\", Some(29646)),\n+    (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n     // Usage of the `compile_error!` macro\n-    (accepted, compile_error, \"1.20.0\", Some(40872)),\n+    (accepted, compile_error, \"1.20.0\", Some(40872), None),\n     // See rust-lang/rfcs#1414. Allows code like `let x: &'static u32 = &42` to work.\n-    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865)),\n+    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865), None),\n     // Allow Drop types in constants (RFC 1440)\n-    (accepted, drop_types_in_const, \"1.22.0\", Some(33156)),\n+    (accepted, drop_types_in_const, \"1.22.0\", Some(33156), None),\n     // Allows the sysV64 ABI to be specified on all platforms\n     // instead of just the platforms on which it is the C ABI\n-    (accepted, abi_sysv64, \"1.24.0\", Some(36167)),\n+    (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n     // Allows `repr(align(16))` struct attribute (RFC 1358)\n-    (accepted, repr_align, \"1.25.0\", Some(33626)),\n+    (accepted, repr_align, \"1.25.0\", Some(33626), None),\n     // allow '|' at beginning of match arms (RFC 1925)\n-    (accepted, match_beginning_vert, \"1.25.0\", Some(44101)),\n+    (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n     // Nested groups in `use` (RFC 2128)\n-    (accepted, use_nested_groups, \"1.25.0\", Some(44494)),\n+    (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1793,11 +1795,22 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n }\n \n-pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> Features {\n+pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n+                    epoch: Epoch) -> Features {\n     let mut features = Features::new();\n \n     let mut feature_checker = FeatureChecker::default();\n \n+    for &(.., f_epoch, set) in ACTIVE_FEATURES.iter() {\n+        if let Some(f_epoch) = f_epoch {\n+            if epoch >= f_epoch {\n+                // FIXME(Manishearth) there is currently no way to set\n+                // lang features by epoch\n+                set(&mut features, DUMMY_SP);\n+            }\n+        }\n+    }\n+\n     for attr in krate_attrs {\n         if !attr.check_name(\"feature\") {\n             continue\n@@ -1818,8 +1831,8 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> F\n                         continue\n                     };\n \n-                    if let Some(&(_, _, _, set)) = ACTIVE_FEATURES.iter()\n-                        .find(|& &(n, _, _, _)| name == n) {\n+                    if let Some(&(_, _, _, _, set)) = ACTIVE_FEATURES.iter()\n+                        .find(|& &(n, ..)| name == n) {\n                         set(&mut features, mi.span);\n                         feature_checker.collect(&features, mi.span);\n                     }"}, {"sha": "50e94e5cba7ad6ca9145c69a48acb5435d538a2d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -23,6 +23,7 @@\n #![feature(unicode)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(match_default_bindings)]\n+#![feature(non_exhaustive)]\n #![feature(i128_type)]\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]\n@@ -114,6 +115,7 @@ pub mod codemap;\n #[macro_use]\n pub mod config;\n pub mod entry;\n+pub mod epoch;\n pub mod feature_gate;\n pub mod fold;\n pub mod parse;"}, {"sha": "847733e1e37b60ca5116595912d7d492b98189b9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -3318,7 +3318,7 @@ impl<'a> Parser<'a> {\n                           mut attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         // Parse: `for <src_pat> in <src_expr> <src_loop_block>`\n \n-        let pat = self.parse_pat()?;\n+        let pat = self.parse_top_level_pat()?;\n         if !self.eat_keyword(keywords::In) {\n             let in_span = self.prev_span.between(self.span);\n             let mut err = self.sess.span_diagnostic\n@@ -3528,7 +3528,7 @@ impl<'a> Parser<'a> {\n     fn parse_pats(&mut self) -> PResult<'a, Vec<P<Pat>>> {\n         let mut pats = Vec::new();\n         loop {\n-            pats.push(self.parse_pat()?);\n+            pats.push(self.parse_top_level_pat()?);\n \n             if self.token == token::OrOr {\n                 let mut err = self.struct_span_err(self.span,\n@@ -3554,7 +3554,12 @@ impl<'a> Parser<'a> {\n     // Trailing commas are significant because (p) and (p,) are different patterns.\n     fn parse_parenthesized_pat_list(&mut self) -> PResult<'a, (Vec<P<Pat>>, Option<usize>, bool)> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n+        let result = self.parse_pat_list()?;\n+        self.expect(&token::CloseDelim(token::Paren))?;\n+        Ok(result)\n+    }\n \n+    fn parse_pat_list(&mut self) -> PResult<'a, (Vec<P<Pat>>, Option<usize>, bool)> {\n         let mut fields = Vec::new();\n         let mut ddpos = None;\n         let mut trailing_comma = false;\n@@ -3584,8 +3589,6 @@ impl<'a> Parser<'a> {\n             self.span_err(self.prev_span, \"trailing comma is not permitted after `..`\");\n         }\n \n-        self.expect(&token::CloseDelim(token::Paren))?;\n-\n         Ok((fields, ddpos, trailing_comma))\n     }\n \n@@ -3767,6 +3770,37 @@ impl<'a> Parser<'a> {\n         }))\n     }\n \n+    /// A wrapper around `parse_pat` with some special error handling for the\n+    /// \"top-level\" patterns in a match arm, `for` loop, `let`, &c. (in contast\n+    /// to subpatterns within such).\n+    pub fn parse_top_level_pat(&mut self) -> PResult<'a, P<Pat>> {\n+        let pat = self.parse_pat()?;\n+        if self.token == token::Comma {\n+            // An unexpected comma after a top-level pattern is a clue that the\n+            // user (perhaps more accustomed to some other language) forgot the\n+            // parentheses in what should have been a tuple pattern; return a\n+            // suggestion-enhanced error here rather than choking on the comma\n+            // later.\n+            let comma_span = self.span;\n+            self.bump();\n+            if let Err(mut err) = self.parse_pat_list() {\n+                // We didn't expect this to work anyway; we just wanted\n+                // to advance to the end of the comma-sequence so we know\n+                // the span to suggest parenthesizing\n+                err.cancel();\n+            }\n+            let seq_span = pat.span.to(self.prev_span);\n+            let mut err = self.struct_span_err(comma_span,\n+                                               \"unexpected `,` in pattern\");\n+            if let Ok(seq_snippet) = self.sess.codemap().span_to_snippet(seq_span) {\n+                err.span_suggestion(seq_span, \"try adding parentheses\",\n+                                    format!(\"({})\", seq_snippet));\n+            }\n+            return Err(err);\n+        }\n+        Ok(pat)\n+    }\n+\n     /// Parse a pattern.\n     pub fn parse_pat(&mut self) -> PResult<'a, P<Pat>> {\n         maybe_whole!(self, NtPat, |x| x);\n@@ -3969,7 +4003,7 @@ impl<'a> Parser<'a> {\n     /// Parse a local variable declaration\n     fn parse_local(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Local>> {\n         let lo = self.prev_span;\n-        let pat = self.parse_pat()?;\n+        let pat = self.parse_top_level_pat()?;\n \n         let (err, ty) = if self.eat(&token::Colon) {\n             // Save the state of the parser before parsing type normally, in case there is a `:`"}, {"sha": "37d092c06e02b76acc1c14236b51a8ed3d1db321", "filename": "src/test/run-pass/epoch-gate-feature.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks if the correct registers are being used to pass arguments\n+// when the sysv64 ABI is specified.\n+\n+// compile-flags: -Zepoch=2018\n+\n+pub trait Foo {}\n+\n+// should compile without the dyn trait feature flag\n+fn foo(x: &dyn Foo) {}\n+\n+pub fn main() {}"}, {"sha": "7bdaaddad843286affad2c31390b0b2b40ed15c8", "filename": "src/test/ui/did_you_mean/issue-48492-tuple-destructure-missing-parens.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.rs?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+\n+#[derive(Copy, Clone)]\n+enum Nucleotide {\n+    Adenine,\n+    Thymine,\n+    Cytosine,\n+    Guanine\n+}\n+\n+#[derive(Clone)]\n+struct Autosome;\n+\n+#[derive(Clone)]\n+enum Allosome {\n+    X(Vec<Nucleotide>),\n+    Y(Vec<Nucleotide>)\n+}\n+\n+impl Allosome {\n+    fn is_x(&self) -> bool {\n+        match *self {\n+            Allosome::X(_) => true,\n+            Allosome::Y(_) => false,\n+        }\n+    }\n+}\n+\n+#[derive(Clone)]\n+struct Genome {\n+    autosomes: [Autosome; 22],\n+    allosomes: (Allosome, Allosome)\n+}\n+\n+fn find_start_codon(strand: &[Nucleotide]) -> Option<usize> {\n+    let mut reading_frame = strand.windows(3);\n+    // (missing parentheses in `while let` tuple pattern)\n+    while let b1, b2, b3 = reading_frame.next().expect(\"there should be a start codon\") {\n+        //~^ ERROR unexpected `,` in pattern\n+        // ...\n+    }\n+    None\n+}\n+\n+fn find_thr(strand: &[Nucleotide]) -> Option<usize> {\n+    let mut reading_frame = strand.windows(3);\n+    let mut i = 0;\n+    // (missing parentheses in `if let` tuple pattern)\n+    if let b1, b2, b3 = reading_frame.next().unwrap() {\n+        //~^ ERROR unexpected `,` in pattern\n+        // ...\n+    }\n+    None\n+}\n+\n+fn is_thr(codon: (Nucleotide, Nucleotide, Nucleotide)) -> bool {\n+    match codon {\n+        // (missing parentheses in match arm tuple pattern)\n+        Nucleotide::Adenine, Nucleotide::Cytosine, _ => true\n+        //~^ ERROR unexpected `,` in pattern\n+        _ => false\n+    }\n+}\n+\n+fn analyze_female_sex_chromosomes(women: &[Genome]) {\n+    // (missing parentheses in `for` tuple pattern)\n+    for x, _barr_body in women.iter().map(|woman| woman.allosomes.clone()) {\n+        //~^ ERROR unexpected `,` in pattern\n+        // ...\n+    }\n+}\n+\n+fn analyze_male_sex_chromosomes(men: &[Genome]) {\n+    // (missing parentheses in pattern with `@` binding)\n+    for x, y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()) {\n+        //~^ ERROR unexpected `,` in pattern\n+        // ...\n+    }\n+}\n+\n+fn main() {\n+    let genomes = Vec::new();\n+    // (missing parentheses in `let` pattern)\n+    let women, men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n+    //~^ ERROR unexpected `,` in pattern\n+        .partition(|g: &Genome| g.allosomes.0.is_x() && g.allosomes.1.is_x());\n+}"}, {"sha": "db3f93af444487acfe38685a9cd310e40baa520b", "filename": "src/test/ui/did_you_mean/issue-48492-tuple-destructure-missing-parens.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -0,0 +1,38 @@\n+error: unexpected `,` in pattern\n+  --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:48:17\n+   |\n+LL |     while let b1, b2, b3 = reading_frame.next().expect(\"there should be a start codon\") {\n+   |               --^------- help: try adding parentheses: `(b1, b2, b3)`\n+\n+error: unexpected `,` in pattern\n+  --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:59:14\n+   |\n+LL |     if let b1, b2, b3 = reading_frame.next().unwrap() {\n+   |            --^------- help: try adding parentheses: `(b1, b2, b3)`\n+\n+error: unexpected `,` in pattern\n+  --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:69:28\n+   |\n+LL |         Nucleotide::Adenine, Nucleotide::Cytosine, _ => true\n+   |         -------------------^------------------------ help: try adding parentheses: `(Nucleotide::Adenine, Nucleotide::Cytosine, _)`\n+\n+error: unexpected `,` in pattern\n+  --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:77:10\n+   |\n+LL |     for x, _barr_body in women.iter().map(|woman| woman.allosomes.clone()) {\n+   |         -^----------- help: try adding parentheses: `(x, _barr_body)`\n+\n+error: unexpected `,` in pattern\n+  --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:85:10\n+   |\n+LL |     for x, y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()) {\n+   |         -^------------------- help: try adding parentheses: `(x, y @ Allosome::Y(_))`\n+\n+error: unexpected `,` in pattern\n+  --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:94:14\n+   |\n+LL |     let women, men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n+   |         -----^---- help: try adding parentheses: `(women, men)`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "eb40151615dad8b80950c6baee3459dd9b7b0725", "filename": "src/test/ui/inference-variable-behind-raw-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2079a084df08c38eb4dbfc5c8de5c0245170c3d9/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr?ref=2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "patch": "@@ -5,6 +5,6 @@ LL |     if data.is_null() {}\n    |             ^^^^^^^\n    |\n    = note: #[warn(tyvar_behind_raw_pointer)] on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 epoch!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n "}]}