{"sha": "de5b26d7f03208f4fb18872772da4a7ff52f57df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNWIyNmQ3ZjAzMjA4ZjRmYjE4ODcyNzcyZGE0YTdmZjUyZjU3ZGY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-04T22:52:13Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-04T23:13:33Z"}, "message": "Use new std::alloc::Allocator interface.\n\nThis was changed in core.", "tree": {"sha": "a33aef69209aae13a6e113fa0a6d2579acb939db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a33aef69209aae13a6e113fa0a6d2579acb939db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5b26d7f03208f4fb18872772da4a7ff52f57df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5b26d7f03208f4fb18872772da4a7ff52f57df", "html_url": "https://github.com/rust-lang/rust/commit/de5b26d7f03208f4fb18872772da4a7ff52f57df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5b26d7f03208f4fb18872772da4a7ff52f57df/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47acece7aa25d7b5edfae0bfd4b94e6e55a7b4b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/47acece7aa25d7b5edfae0bfd4b94e6e55a7b4b0", "html_url": "https://github.com/rust-lang/rust/commit/47acece7aa25d7b5edfae0bfd4b94e6e55a7b4b0"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "58948e2fc69aea368314c96705ec547dc466f880", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de5b26d7f03208f4fb18872772da4a7ff52f57df/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/de5b26d7f03208f4fb18872772da4a7ff52f57df/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=de5b26d7f03208f4fb18872772da4a7ff52f57df", "patch": "@@ -1 +1 @@\n-88b81970ba7a989a728b32039dd075dc206f1360\n+3ff10e74a74ed093fcabac1de27fe1cd65bbbb4a"}, {"sha": "e428868af78bf6a9ba027e25129b0859c4d65263", "filename": "tests/run-pass/heap_allocator.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/de5b26d7f03208f4fb18872772da4a7ff52f57df/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5b26d7f03208f4fb18872772da4a7ff52f57df/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=de5b26d7f03208f4fb18872772da4a7ff52f57df", "patch": "@@ -1,22 +1,22 @@\n #![feature(allocator_api, slice_ptr_get)]\n \n use std::ptr::NonNull;\n-use std::alloc::{Global, AllocRef, Layout, System};\n+use std::alloc::{Global, Allocator, Layout, System};\n use std::slice;\n \n-fn check_alloc<T: AllocRef>(allocator: T) { unsafe {\n+fn check_alloc<T: Allocator>(allocator: T) { unsafe {\n     for &align in &[4, 8, 16, 32] {\n         let layout_20 = Layout::from_size_align(20, align).unwrap();\n         let layout_40 = Layout::from_size_align(40, 4*align).unwrap();\n         let layout_10 = Layout::from_size_align(10, align/2).unwrap();\n \n         for _ in 0..32 {\n-            let a = allocator.alloc(layout_20).unwrap().as_non_null_ptr();\n+            let a = allocator.allocate(layout_20).unwrap().as_non_null_ptr();\n             assert_eq!(a.as_ptr() as usize % layout_20.align(), 0, \"pointer is incorrectly aligned\");\n-            allocator.dealloc(a, layout_20);\n+            allocator.deallocate(a, layout_20);\n         }\n \n-        let p1 = allocator.alloc_zeroed(layout_20).unwrap().as_non_null_ptr();\n+        let p1 = allocator.allocate_zeroed(layout_20).unwrap().as_non_null_ptr();\n         assert_eq!(p1.as_ptr() as usize % layout_20.align(), 0, \"pointer is incorrectly aligned\");\n         assert_eq!(*p1.as_ptr(), 0);\n \n@@ -38,17 +38,17 @@ fn check_alloc<T: AllocRef>(allocator: T) { unsafe {\n         let slice = slice::from_raw_parts(p4.as_ptr(), 10);\n         assert_eq!(&slice, &[0_u8; 10]);\n \n-        allocator.dealloc(p4, layout_10);\n+        allocator.deallocate(p4, layout_10);\n     }\n } }\n \n-fn check_align_requests<T: AllocRef>(allocator: T) {\n+fn check_align_requests<T: Allocator>(allocator: T) {\n     for &size in &[2, 8, 64] { // size less than and bigger than alignment\n         for &align in &[4, 8, 16, 32] { // Be sure to cover less than and bigger than `MIN_ALIGN` for all architectures\n             let iterations = 32;\n             unsafe {\n                 let pointers: Vec<_> = (0..iterations).map(|_| {\n-                    allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap().as_non_null_ptr()\n+                    allocator.allocate(Layout::from_size_align(size, align).unwrap()).unwrap().as_non_null_ptr()\n                 }).collect();\n                 for &ptr in &pointers {\n                     assert_eq!((ptr.as_ptr() as usize) % align, 0,\n@@ -57,7 +57,7 @@ fn check_align_requests<T: AllocRef>(allocator: T) {\n \n                 // Clean up.\n                 for &ptr in &pointers {\n-                    allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+                    allocator.deallocate(ptr, Layout::from_size_align(size, align).unwrap())\n                 }\n             }\n         }\n@@ -69,7 +69,7 @@ fn global_to_box() {\n     let l = Layout::new::<T>();\n     // allocate manually with global allocator, then turn into Box and free there\n     unsafe {\n-        let ptr = Global.alloc(l).unwrap().as_non_null_ptr().as_ptr() as *mut T;\n+        let ptr = Global.allocate(l).unwrap().as_non_null_ptr().as_ptr() as *mut T;\n         let b = Box::from_raw(ptr);\n         drop(b);\n     }\n@@ -82,7 +82,7 @@ fn box_to_global() {\n     unsafe {\n         let b = Box::new(T::default());\n         let ptr = Box::into_raw(b);\n-        Global.dealloc(NonNull::new(ptr as *mut u8).unwrap(), l);\n+        Global.deallocate(NonNull::new(ptr as *mut u8).unwrap(), l);\n     }\n }\n "}]}