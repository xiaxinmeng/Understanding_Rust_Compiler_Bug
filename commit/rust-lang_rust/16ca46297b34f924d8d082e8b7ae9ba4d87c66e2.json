{"sha": "16ca46297b34f924d8d082e8b7ae9ba4d87c66e2", "node_id": "C_kwDOAAsO6NoAKDE2Y2E0NjI5N2IzNGY5MjRkOGQwODJlOGI3YWU5YmE0ZDg3YzY2ZTI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-31T02:31:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-31T02:31:38Z"}, "message": "Rollup merge of #102689 - ayrtonm:master, r=cjgillot\n\nAdd a tier 3 target for the Sony PlayStation 1\n\nThis adds a tier 3 target, `mipsel-sony-psx`, for the Sony PlayStation 1. I've tested it pretty thoroughly with [this SDK](https://github.com/ayrtonm/psx-sdk-rs) I wrote for it.\n\nFrom the [tier 3 target policy](https://doc.rust-lang.org/rustc/target-tier-policy.html#tier-3-target-policy) (I've omitted the subpoints for brevity, but read over everything)\n> A tier 3 target must have a designated developer or developers (the \"target maintainers\") on record to be CCed when issues arise regarding the target. (The mechanism to track and CC such developers may evolve over time.)\n\nI'd be the designated developer\n\n> Targets must use naming consistent with any existing targets; for instance, a target for the same CPU or OS as an existing Rust target should use the same name for that CPU or OS. Targets should normally use the same names and naming conventions as used elsewhere in the broader ecosystem beyond Rust (such as in other toolchains), unless they have a very good reason to diverge. Changing the name of a target can be highly disruptive, especially once the target reaches a higher tier, so getting the name right is important even for a tier 3 target.\n\nThe target name follows the conventions of the existing PSP target (`mipsel-sony-psp`) and uses `psx` following the convention of the broader [PlayStation homebrew community](https://psx-spx.consoledev.net/).\n\n> Tier 3 targets may have unusual requirements to build or use, but must not create legal issues or impose onerous legal terms for the Rust project or for Rust developers or users.\n\nNo legal issues with this target.\n\n> Neither this policy nor any decisions made regarding targets shall create any binding agreement or estoppel by any party. If any member of an approving Rust team serves as one of the maintainers of a target, or has any legal or employment requirement (explicit or implicit) that might affect their decisions regarding a target, they must recuse themselves from any approval decisions regarding the target's tier status, though they may otherwise participate in discussions.\n\n:+1:\n\n> Tier 3 targets should attempt to implement as much of the standard libraries as possible and appropriate (core for most targets, alloc for targets that can support dynamic memory allocation, std for targets with an operating system or equivalent layer of system-provided functionality), but may leave some code unimplemented (either unavailable or stubbed out as appropriate), whether because the target makes it impossible to implement or challenging to implement. The authors of pull requests are not obligated to avoid calling any portions of the standard library on the basis of a tier 3 target not implementing those portions.\n\nThe psx supports `core` and `alloc`, but will likely not support `std` anytime soon.\n\n> The target must provide documentation for the Rust community explaining how to build for the target, using cross-compilation if possible. If the target supports running binaries, or running tests (even if they do not pass), the documentation must explain how to run such binaries or tests for the target, using emulation if possible or dedicated hardware if necessary.\n\nThis target has an SDK and a `cargo-psx` tool for formatting binaries as psx executables. Documentation and examples are provided in the [psx-sdk-rs README](https://github.com/ayrtonm/psx-sdk-rs#psx-sdk-rs), the SDK and cargo tool are both available through crates.io and docs.rs has [SDK documentation](https://docs.rs/psx/latest/psx/).\n\n> Tier 3 targets must not impose burden on the authors of pull requests, or other developers in the community, to maintain the target. In particular, do not post comments (automated or manual) on a PR that derail or suggest a block on the PR based on a tier 3 target. Do not send automated messages or notifications (via any medium, including via `@)` to a PR author or others involved with a PR regarding a tier 3 target, unless they have opted into such messages.\n\n:+1:\n\n> Patches adding or updating tier 3 targets must not break any existing tier 2 or tier 1 target, and must not knowingly break another tier 3 target without approval of either the compiler team or the maintainers of the other tier 3 target.\n\nNo problem", "tree": {"sha": "98ec2335f9055ab92597f3e500ac864eb6a6e280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ec2335f9055ab92597f3e500ac864eb6a6e280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXzOKCRBK7hj4Ov3rIwAAG/cIAI+obq0Dm9umi/MQihbccFG7\nIP9tag6I4IBcEPVYpgFBrmSjE5kZz9rEPLusv27XgBbR/V6fKSGs5oNPtozJkBqf\n/g76qwCnZlqPesYJDIX86H6CabNgQA42SsvgCbcBqaKhIrueGNvFwZTwewvTFx/8\nb0ObEGGwkAKmJpIKLblgvc/WkaSZBZluP+zIg/TZZVYLOL6zYyr/klp3DNWT1kJQ\nQzlNEMm/iPbO7EGm4tzZBlcGBAKae6ucFd//qKogf6D8UmNA9NRfC4KH7pJR4boi\npIptnn0QdunHH+Uj1HZzClKqFFtf3c04aRyGjm52IKt465WiDNY0CcFT2ogWHLg=\n=8rKk\n-----END PGP SIGNATURE-----\n", "payload": "tree 98ec2335f9055ab92597f3e500ac864eb6a6e280\nparent f404246ce261de89cd71a336128892114a969a48\nparent d03185ed98b4ff022a111993d138923dbc8d5052\nauthor Michael Howell <michael@notriddle.com> 1667183498 -0700\ncommitter GitHub <noreply@github.com> 1667183498 -0700\n\nRollup merge of #102689 - ayrtonm:master, r=cjgillot\n\nAdd a tier 3 target for the Sony PlayStation 1\n\nThis adds a tier 3 target, `mipsel-sony-psx`, for the Sony PlayStation 1. I've tested it pretty thoroughly with [this SDK](https://github.com/ayrtonm/psx-sdk-rs) I wrote for it.\n\nFrom the [tier 3 target policy](https://doc.rust-lang.org/rustc/target-tier-policy.html#tier-3-target-policy) (I've omitted the subpoints for brevity, but read over everything)\n> A tier 3 target must have a designated developer or developers (the \"target maintainers\") on record to be CCed when issues arise regarding the target. (The mechanism to track and CC such developers may evolve over time.)\n\nI'd be the designated developer\n\n> Targets must use naming consistent with any existing targets; for instance, a target for the same CPU or OS as an existing Rust target should use the same name for that CPU or OS. Targets should normally use the same names and naming conventions as used elsewhere in the broader ecosystem beyond Rust (such as in other toolchains), unless they have a very good reason to diverge. Changing the name of a target can be highly disruptive, especially once the target reaches a higher tier, so getting the name right is important even for a tier 3 target.\n\nThe target name follows the conventions of the existing PSP target (`mipsel-sony-psp`) and uses `psx` following the convention of the broader [PlayStation homebrew community](https://psx-spx.consoledev.net/).\n\n> Tier 3 targets may have unusual requirements to build or use, but must not create legal issues or impose onerous legal terms for the Rust project or for Rust developers or users.\n\nNo legal issues with this target.\n\n> Neither this policy nor any decisions made regarding targets shall create any binding agreement or estoppel by any party. If any member of an approving Rust team serves as one of the maintainers of a target, or has any legal or employment requirement (explicit or implicit) that might affect their decisions regarding a target, they must recuse themselves from any approval decisions regarding the target's tier status, though they may otherwise participate in discussions.\n\n:+1:\n\n> Tier 3 targets should attempt to implement as much of the standard libraries as possible and appropriate (core for most targets, alloc for targets that can support dynamic memory allocation, std for targets with an operating system or equivalent layer of system-provided functionality), but may leave some code unimplemented (either unavailable or stubbed out as appropriate), whether because the target makes it impossible to implement or challenging to implement. The authors of pull requests are not obligated to avoid calling any portions of the standard library on the basis of a tier 3 target not implementing those portions.\n\nThe psx supports `core` and `alloc`, but will likely not support `std` anytime soon.\n\n> The target must provide documentation for the Rust community explaining how to build for the target, using cross-compilation if possible. If the target supports running binaries, or running tests (even if they do not pass), the documentation must explain how to run such binaries or tests for the target, using emulation if possible or dedicated hardware if necessary.\n\nThis target has an SDK and a `cargo-psx` tool for formatting binaries as psx executables. Documentation and examples are provided in the [psx-sdk-rs README](https://github.com/ayrtonm/psx-sdk-rs#psx-sdk-rs), the SDK and cargo tool are both available through crates.io and docs.rs has [SDK documentation](https://docs.rs/psx/latest/psx/).\n\n> Tier 3 targets must not impose burden on the authors of pull requests, or other developers in the community, to maintain the target. In particular, do not post comments (automated or manual) on a PR that derail or suggest a block on the PR based on a tier 3 target. Do not send automated messages or notifications (via any medium, including via `@)` to a PR author or others involved with a PR regarding a tier 3 target, unless they have opted into such messages.\n\n:+1:\n\n> Patches adding or updating tier 3 targets must not break any existing tier 2 or tier 1 target, and must not knowingly break another tier 3 target without approval of either the compiler team or the maintainers of the other tier 3 target.\n\nNo problem\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2", "html_url": "https://github.com/rust-lang/rust/commit/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f404246ce261de89cd71a336128892114a969a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/f404246ce261de89cd71a336128892114a969a48", "html_url": "https://github.com/rust-lang/rust/commit/f404246ce261de89cd71a336128892114a969a48"}, {"sha": "d03185ed98b4ff022a111993d138923dbc8d5052", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03185ed98b4ff022a111993d138923dbc8d5052", "html_url": "https://github.com/rust-lang/rust/commit/d03185ed98b4ff022a111993d138923dbc8d5052"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "12a66efdd46f9af10bd20ad8ed599a17247f4e27", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psx.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psx.rs?ref=16ca46297b34f924d8d082e8b7ae9ba4d87c66e2", "patch": "@@ -0,0 +1,37 @@\n+use crate::spec::{cvs, Cc, LinkerFlavor, Lld, PanicStrategy, RelocModel, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"mipsel-sony-psx\".into(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".into(),\n+        arch: \"mips\".into(),\n+\n+        options: TargetOptions {\n+            os: \"none\".into(),\n+            env: \"psx\".into(),\n+            vendor: \"sony\".into(),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n+            cpu: \"mips1\".into(),\n+            executables: true,\n+            linker: Some(\"rust-lld\".into()),\n+            relocation_model: RelocModel::Static,\n+            exe_suffix: \".exe\".into(),\n+\n+            // PSX doesn't natively support floats.\n+            features: \"+soft-float\".into(),\n+\n+            // This should be 16 bits, but LLVM incorrectly tries emitting MIPS-II SYNC instructions\n+            // for atomic loads and stores. This crashes rustc so we have to disable the Atomic* API\n+            // until this is fixed upstream. See https://reviews.llvm.org/D122427#3420144 for more\n+            // info.\n+            max_atomic_width: Some(0),\n+\n+            // PSX does not support trap-on-condition instructions.\n+            llvm_args: cvs![\"-mno-check-zero-division\"],\n+            llvm_abiname: \"o32\".into(),\n+            panic_strategy: PanicStrategy::Abort,\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "72b088d663b1f0bafaf144cfe4a6273f3b71be4d", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=16ca46297b34f924d8d082e8b7ae9ba4d87c66e2", "patch": "@@ -1222,6 +1222,7 @@ supported_targets! {\n     (\"armv7a-kmc-solid_asp3-eabihf\", armv7a_kmc_solid_asp3_eabihf),\n \n     (\"mipsel-sony-psp\", mipsel_sony_psp),\n+    (\"mipsel-sony-psx\", mipsel_sony_psx),\n     (\"mipsel-unknown-none\", mipsel_unknown_none),\n     (\"thumbv4t-none-eabi\", thumbv4t_none_eabi),\n     (\"armv4t-none-eabi\", armv4t_none_eabi),"}, {"sha": "86bb2c0d3816ae2c94b3fb4ba11f299cdcae8c2c", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=16ca46297b34f924d8d082e8b7ae9ba4d87c66e2", "patch": "@@ -29,6 +29,7 @@\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)\n     - [mips64-openwrt-linux-musl](platform-support/mips64-openwrt-linux-musl.md)\n+    - [mipsel-sony-psx](platform-support/mipsel-sony-psx.md)\n     - [nvptx64-nvidia-cuda](platform-support/nvptx64-nvidia-cuda.md)\n     - [riscv32imac-unknown-xous-elf](platform-support/riscv32imac-unknown-xous-elf.md)\n     - [*-pc-windows-gnullvm](platform-support/pc-windows-gnullvm.md)"}, {"sha": "3ae9872cf62d4e8304d7b34d1bbe63fffa347194", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=16ca46297b34f924d8d082e8b7ae9ba4d87c66e2", "patch": "@@ -260,6 +260,7 @@ target | std | host | notes\n `mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n [`mips64-openwrt-linux-musl`](platform-support/mips64-openwrt-linux-musl.md) | ? |  | MIPS64 for OpenWrt Linux MUSL\n `mipsel-sony-psp` | * |  | MIPS (LE) Sony PlayStation Portable (PSP)\n+[`mipsel-sony-psx`](platform-support/mipsel-sony-psx.md) | * |  | MIPS (LE) Sony PlayStation 1 (PSX)\n `mipsel-unknown-linux-uclibc` | \u2713 |  | MIPS (LE) Linux with uClibc\n `mipsel-unknown-none` | * |  | Bare MIPS (LE) softfloat\n `mipsisa32r6-unknown-linux-gnu` | ? |  |"}, {"sha": "589100e8888b32c22e91e41089f38128843b9647", "filename": "src/doc/rustc/src/platform-support/mipsel-sony-psx.md", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fmipsel-sony-psx.md", "raw_url": "https://github.com/rust-lang/rust/raw/16ca46297b34f924d8d082e8b7ae9ba4d87c66e2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fmipsel-sony-psx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fmipsel-sony-psx.md?ref=16ca46297b34f924d8d082e8b7ae9ba4d87c66e2", "patch": "@@ -0,0 +1,49 @@\n+# mipsel-sony-psx\n+\n+**Tier: 3**\n+\n+Sony PlayStation 1 (psx)\n+\n+## Designated Developer\n+\n+* [@ayrtonm](https://github.com/ayrtonm)\n+\n+## Requirements\n+\n+This target is cross-compiled.\n+It has no special requirements for the host.\n+\n+## Building\n+\n+The target can be built by enabling it for a `rustc` build:\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"mipsel-sony-psx\"]\n+```\n+\n+## Cross-compilation\n+\n+This target can be cross-compiled from any host.\n+\n+## Testing\n+\n+Currently there is no support to run the rustc test suite for this target.\n+\n+## Building Rust programs\n+\n+Since it is Tier 3, rust doesn't ship pre-compiled artifacts for this target.\n+\n+Just use the `build-std` nightly cargo feature to build the `core` and `alloc` libraries:\n+```shell\n+cargo build -Zbuild-std=core,alloc --target mipsel-sony-psx\n+```\n+\n+The command above generates an ELF. To generate binaries in the PSEXE format that emulators run, you can use [cargo-psx](https://github.com/ayrtonm/psx-sdk-rs#readme):\n+\n+```shell\n+cargo psx build\n+```\n+\n+or use `-Clink-arg=--oformat=binary` to produce a flat binary."}]}