{"sha": "364ecf50cb536efb22394668a341286d48713c54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NGVjZjUwY2I1MzZlZmIyMjM5NDY2OGEzNDEyODZkNDg3MTNjNTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:05:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T21:05:28Z"}, "message": "Rollup merge of #67130 - wesleywiser:const_prop_into_locals, r=oli-obk\n\nConst prop should finish propagation into user defined variables\n\nFixes #66638\n\n~~Temporarily rebased on top of #67015 to get those fixes.~~\n\nr? @oli-obk", "tree": {"sha": "168d40c4cfdab80b4ba246bc14e99088c1829648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/168d40c4cfdab80b4ba246bc14e99088c1829648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/364ecf50cb536efb22394668a341286d48713c54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/TeZCRBK7hj4Ov3rIwAAdHIIAGkIu8QAtJIIMTNsraVherOx\nYoeNeexSpE3Wnr6L6tVJxr3L463NOKVVKjbxUzvmYWGT4FQdWVQ7RISjts3DJ7DF\nqWU/YvaRlFnwK2HWPoUM6d0MPhr5Yi7syp5KMfdx8aUDZlB5nlECV0Nma90EsNJd\nAm7AVnwXXNkOHnpKLRMGasSyqmiyu/0ShC0N2AapH5pzTxeRBdRI5axjK6r3k7HF\nIqvjoRTLsSjLUAn1zeHZPXB3Ja/9kcp0TM8p8mw+iN5J32fZfc7R+hOdIHPXrZYV\n+V2m/uOCHiQ9eKlQYguiflBqAoSA38T8tRVwvylu46Kx3i+rD2vSTBTsfq0evEs=\n=K+tp\n-----END PGP SIGNATURE-----\n", "payload": "tree 168d40c4cfdab80b4ba246bc14e99088c1829648\nparent 01a46509a4c2dc430ebebf940a26232fdaeeba81\nparent 0745b8c5a248dffd25ad33611e044fab133bce00\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576875928 +0100\ncommitter GitHub <noreply@github.com> 1576875928 +0100\n\nRollup merge of #67130 - wesleywiser:const_prop_into_locals, r=oli-obk\n\nConst prop should finish propagation into user defined variables\n\nFixes #66638\n\n~~Temporarily rebased on top of #67015 to get those fixes.~~\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/364ecf50cb536efb22394668a341286d48713c54", "html_url": "https://github.com/rust-lang/rust/commit/364ecf50cb536efb22394668a341286d48713c54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/364ecf50cb536efb22394668a341286d48713c54/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a46509a4c2dc430ebebf940a26232fdaeeba81", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a46509a4c2dc430ebebf940a26232fdaeeba81", "html_url": "https://github.com/rust-lang/rust/commit/01a46509a4c2dc430ebebf940a26232fdaeeba81"}, {"sha": "0745b8c5a248dffd25ad33611e044fab133bce00", "url": "https://api.github.com/repos/rust-lang/rust/commits/0745b8c5a248dffd25ad33611e044fab133bce00", "html_url": "https://github.com/rust-lang/rust/commit/0745b8c5a248dffd25ad33611e044fab133bce00"}], "stats": {"total": 209, "additions": 187, "deletions": 22}, "files": [{"sha": "62aec1975c2160d0feeed16a925a2755d97a4983", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/364ecf50cb536efb22394668a341286d48713c54/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364ecf50cb536efb22394668a341286d48713c54/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=364ecf50cb536efb22394668a341286d48713c54", "patch": "@@ -262,7 +262,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine>,\n     tcx: TyCtxt<'tcx>,\n     source: MirSource<'tcx>,\n-    can_const_prop: IndexVec<Local, bool>,\n+    can_const_prop: IndexVec<Local, ConstPropMode>,\n     param_env: ParamEnv<'tcx>,\n     // FIXME(eddyb) avoid cloning these two fields more than once,\n     // by accessing them through `ecx` instead.\n@@ -708,17 +708,28 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n }\n \n+/// The mode that `ConstProp` is allowed to run in for a given `Local`.\n+#[derive(Clone, Copy, Debug, PartialEq)]\n+enum ConstPropMode {\n+    /// The `Local` can be propagated into and reads of this `Local` can also be propagated.\n+    FullConstProp,\n+    /// The `Local` can be propagated into but reads cannot be propagated.\n+    OnlyPropagateInto,\n+    /// No propagation is allowed at all.\n+    NoPropagation,\n+}\n+\n struct CanConstProp {\n-    can_const_prop: IndexVec<Local, bool>,\n+    can_const_prop: IndexVec<Local, ConstPropMode>,\n     // false at the beginning, once set, there are not allowed to be any more assignments\n     found_assignment: IndexVec<Local, bool>,\n }\n \n impl CanConstProp {\n     /// returns true if `local` can be propagated\n-    fn check(body: ReadOnlyBodyAndCache<'_, '_>) -> IndexVec<Local, bool> {\n+    fn check(body: ReadOnlyBodyAndCache<'_, '_>) -> IndexVec<Local, ConstPropMode> {\n         let mut cpv = CanConstProp {\n-            can_const_prop: IndexVec::from_elem(true, &body.local_decls),\n+            can_const_prop: IndexVec::from_elem(ConstPropMode::FullConstProp, &body.local_decls),\n             found_assignment: IndexVec::from_elem(false, &body.local_decls),\n         };\n         for (local, val) in cpv.can_const_prop.iter_enumerated_mut() {\n@@ -728,10 +739,10 @@ impl CanConstProp {\n             // FIXME(oli-obk): lint variables until they are used in a condition\n             // FIXME(oli-obk): lint if return value is constant\n             let local_kind = body.local_kind(local);\n-            *val = local_kind == LocalKind::Temp || local_kind == LocalKind::ReturnPointer;\n \n-            if !*val {\n-                trace!(\"local {:?} can't be propagated because it's not a temporary\", local);\n+            if local_kind == LocalKind::Arg || local_kind == LocalKind::Var {\n+                *val = ConstPropMode::OnlyPropagateInto;\n+                trace!(\"local {:?} can't be const propagated because it's not a temporary\", local);\n             }\n         }\n         cpv.visit_body(body);\n@@ -753,7 +764,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             // only occur in independent execution paths\n             MutatingUse(MutatingUseContext::Store) => if self.found_assignment[local] {\n                 trace!(\"local {:?} can't be propagated because of multiple assignments\", local);\n-                self.can_const_prop[local] = false;\n+                self.can_const_prop[local] = ConstPropMode::NoPropagation;\n             } else {\n                 self.found_assignment[local] = true\n             },\n@@ -766,7 +777,7 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n             NonUse(_) => {},\n             _ => {\n                 trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n-                self.can_const_prop[local] = false;\n+                self.can_const_prop[local] = ConstPropMode::NoPropagation;\n             },\n         }\n     }\n@@ -800,10 +811,10 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n                 if let Some(local) = place.as_local() {\n                     let source = statement.source_info;\n+                    let can_const_prop = self.can_const_prop[local];\n                     if let Some(()) = self.const_prop(rval, place_layout, source, place) {\n-                        if self.can_const_prop[local] {\n-                            trace!(\"propagated into {:?}\", local);\n-\n+                        if can_const_prop == ConstPropMode::FullConstProp ||\n+                           can_const_prop == ConstPropMode::OnlyPropagateInto {\n                             if let Some(value) = self.get_const(local) {\n                                 if self.should_const_prop(value) {\n                                     trace!(\"replacing {:?} with {:?}\", rval, value);\n@@ -812,21 +823,26 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                                         value,\n                                         statement.source_info,\n                                     );\n+\n+                                    if can_const_prop == ConstPropMode::FullConstProp {\n+                                        trace!(\"propagated into {:?}\", local);\n+                                    }\n                                 }\n                             }\n-                        } else {\n-                            trace!(\"can't propagate into {:?}\", local);\n-                            if local != RETURN_PLACE {\n-                                self.remove_const(local);\n-                            }\n+                        }\n+                    }\n+                    if self.can_const_prop[local] != ConstPropMode::FullConstProp {\n+                        trace!(\"can't propagate into {:?}\", local);\n+                        if local != RETURN_PLACE {\n+                            self.remove_const(local);\n                         }\n                     }\n                 }\n             }\n         } else {\n             match statement.kind {\n                 StatementKind::StorageLive(local) |\n-                StatementKind::StorageDead(local) if self.can_const_prop[local] => {\n+                StatementKind::StorageDead(local) => {\n                     let frame = self.ecx.frame_mut();\n                     frame.locals[local].value =\n                         if let StatementKind::StorageLive(_) = statement.kind {"}, {"sha": "d04dcc6a05ce183e870313133141a670c8312261", "filename": "src/test/mir-opt/const_prop/aggregate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364ecf50cb536efb22394668a341286d48713c54/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364ecf50cb536efb22394668a341286d48713c54/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs?ref=364ecf50cb536efb22394668a341286d48713c54", "patch": "@@ -19,7 +19,7 @@ fn main() {\n //      ...\n //      _3 = (const 0i32, const 1i32, const 2i32);\n //      _2 = const 1i32;\n-//      _1 = Add(move _2, const 0i32);\n+//      _1 = const 1i32;\n //      ...\n //  }\n // END rustc.main.ConstProp.after.mir"}, {"sha": "406585b5cab8e1b3299ff94dceeaa990728f2a1a", "filename": "src/test/mir-opt/const_prop/array_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364ecf50cb536efb22394668a341286d48713c54/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364ecf50cb536efb22394668a341286d48713c54/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index.rs?ref=364ecf50cb536efb22394668a341286d48713c54", "patch": "@@ -26,7 +26,7 @@ fn main() {\n //      assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1;\n //  }\n //  bb1: {\n-//      _1 = _2[_3];\n+//      _1 = const 2u32;\n //      ...\n //      return;\n //  }"}, {"sha": "93a53db9093608cf472185be56f729ff5b895002", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/364ecf50cb536efb22394668a341286d48713c54/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364ecf50cb536efb22394668a341286d48713c54/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs?ref=364ecf50cb536efb22394668a341286d48713c54", "patch": "@@ -0,0 +1,149 @@\n+// compile-flags: -C overflow-checks=on\n+\n+struct Point {\n+    x: u32,\n+    y: u32,\n+}\n+\n+fn main() {\n+    let x = 2 + 2;\n+    let y = [0, 1, 2, 3, 4, 5][3];\n+    let z = (Point { x: 12, y: 42}).y;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+// let mut _0: ();\n+// let _1: i32;\n+// let mut _2: (i32, bool);\n+// let mut _4: [i32; 6];\n+// let _5: usize;\n+// let mut _6: usize;\n+// let mut _7: bool;\n+// let mut _9: Point;\n+// scope 1 {\n+//   debug x => _1;\n+//   let _3: i32;\n+//   scope 2 {\n+//     debug y => _3;\n+//     let _8: u32;\n+//     scope 3 {\n+//       debug z => _8;\n+//     }\n+//   }\n+// }\n+// bb0: {\n+//   StorageLive(_1);\n+//   _2 = CheckedAdd(const 2i32, const 2i32);\n+//   assert(!move (_2.1: bool), \"attempt to add with overflow\") -> bb1;\n+// }\n+// bb1: {\n+//   _1 = move (_2.0: i32);\n+//   StorageLive(_3);\n+//   StorageLive(_4);\n+//   _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32];\n+//   StorageLive(_5);\n+//   _5 = const 3usize;\n+//   _6 = const 6usize;\n+//   _7 = Lt(_5, _6);\n+//   assert(move _7, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2;\n+// }\n+// bb2: {\n+//   _3 = _4[_5];\n+//   StorageDead(_5);\n+//   StorageDead(_4);\n+//   StorageLive(_8);\n+//   StorageLive(_9);\n+//   _9 = Point { x: const 12u32, y: const 42u32 };\n+//   _8 = (_9.1: u32);\n+//   StorageDead(_9);\n+//   _0 = ();\n+//   StorageDead(_8);\n+//   StorageDead(_3);\n+//   StorageDead(_1);\n+//   return;\n+// }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+// let mut _0: ();\n+// let _1: i32;\n+// let mut _2: (i32, bool);\n+// let mut _4: [i32; 6];\n+// let _5: usize;\n+// let mut _6: usize;\n+// let mut _7: bool;\n+// let mut _9: Point;\n+// scope 1 {\n+//   debug x => _1;\n+//   let _3: i32;\n+//   scope 2 {\n+//     debug y => _3;\n+//     let _8: u32;\n+//     scope 3 {\n+//       debug z => _8;\n+//     }\n+//   }\n+// }\n+// bb0: {\n+//   StorageLive(_1);\n+//   _2 = (const 4i32, const false);\n+//   assert(!const false, \"attempt to add with overflow\") -> bb1;\n+// }\n+// bb1: {\n+//   _1 = const 4i32;\n+//   StorageLive(_3);\n+//   StorageLive(_4);\n+//   _4 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32];\n+//   StorageLive(_5);\n+//   _5 = const 3usize;\n+//   _6 = const 6usize;\n+//   _7 = const true;\n+//   assert(const true, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2;\n+// }\n+// bb2: {\n+//   _3 = const 3i32;\n+//   StorageDead(_5);\n+//   StorageDead(_4);\n+//   StorageLive(_8);\n+//   StorageLive(_9);\n+//   _9 = Point { x: const 12u32, y: const 42u32 };\n+//   _8 = const 42u32;\n+//   StorageDead(_9);\n+//   _0 = ();\n+//   StorageDead(_8);\n+//   StorageDead(_3);\n+//   StorageDead(_1);\n+//   return;\n+// }\n+// END rustc.main.ConstProp.after.mir\n+// START rustc.main.SimplifyLocals.after.mir\n+// let mut _0: ();\n+// let _1: i32;\n+// let mut _3: [i32; 6];\n+// scope 1 {\n+//   debug x => _1;\n+//   let _2: i32;\n+//   scope 2 {\n+//     debug y => _2;\n+//     let _4: u32;\n+//     scope 3 {\n+//       debug z => _4;\n+//     }\n+//   }\n+// }\n+// bb0: {\n+//   StorageLive(_1);\n+//   _1 = const 4i32;\n+//   StorageLive(_2);\n+//   StorageLive(_3);\n+//   _3 = [const 0i32, const 1i32, const 2i32, const 3i32, const 4i32, const 5i32];\n+//   _2 = const 3i32;\n+//   StorageDead(_3);\n+//   StorageLive(_4);\n+//   _4 = const 42u32;\n+//   StorageDead(_4);\n+//   StorageDead(_2);\n+//   StorageDead(_1);\n+//   return;\n+// }\n+// END rustc.main.SimplifyLocals.after.mir"}, {"sha": "d9e0eb623afe11fdff9e921e6cf4e1ba102e624d", "filename": "src/test/mir-opt/const_prop/read_immutable_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364ecf50cb536efb22394668a341286d48713c54/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364ecf50cb536efb22394668a341286d48713c54/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs?ref=364ecf50cb536efb22394668a341286d48713c54", "patch": "@@ -25,7 +25,7 @@ fn main() {\n //      _2 = const 2u8;\n //      ...\n //      _4 = const 2u8;\n-//      _1 = Add(move _2, move _4);\n+//      _1 = const 4u8;\n //      ...\n //  }\n // END rustc.main.ConstProp.after.mir"}, {"sha": "48c06290cec00f387b7212395c39c368d5a1c63e", "filename": "src/test/mir-opt/const_prop/repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364ecf50cb536efb22394668a341286d48713c54/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364ecf50cb536efb22394668a341286d48713c54/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs?ref=364ecf50cb536efb22394668a341286d48713c54", "patch": "@@ -30,7 +30,7 @@ fn main() {\n //  }\n //  bb1: {\n //      _2 = const 42u32;\n-//      _1 = Add(move _2, const 0u32);\n+//      _1 = const 42u32;\n //      ...\n //      return;\n //  }"}]}