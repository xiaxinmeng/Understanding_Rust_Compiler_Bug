{"sha": "fd271adc75799435a920f1afaa0488e43badc749", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMjcxYWRjNzU3OTk0MzVhOTIwZjFhZmFhMDQ4OGU0M2JhZGM3NDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-05T19:57:50Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T06:32:51Z"}, "message": "libcore: Remove `extern mod { ... }` from libcore. rs=deexterning", "tree": {"sha": "594bedf848f413c01b91284f2dc320b15ea1a444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/594bedf848f413c01b91284f2dc320b15ea1a444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd271adc75799435a920f1afaa0488e43badc749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd271adc75799435a920f1afaa0488e43badc749", "html_url": "https://github.com/rust-lang/rust/commit/fd271adc75799435a920f1afaa0488e43badc749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd271adc75799435a920f1afaa0488e43badc749/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f0a105789d9d9cec4e89898109fb95238cc416", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f0a105789d9d9cec4e89898109fb95238cc416", "html_url": "https://github.com/rust-lang/rust/commit/88f0a105789d9d9cec4e89898109fb95238cc416"}], "stats": {"total": 1474, "additions": 836, "deletions": 638}, "files": [{"sha": "b6995c283193f60c5d71627792c0f0071389cd38", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -23,11 +23,18 @@ use vec;\n /// Code for dealing with @-vectors. This is pretty incomplete, and\n /// contains a bunch of duplication from the code for ~-vectors.\n \n-#[abi = \"cdecl\"]\n-pub extern mod rustrt {\n-    pub unsafe fn vec_reserve_shared_actual(++t: *sys::TypeDesc,\n-                                            ++v: **vec::raw::VecRepr,\n-                                            ++n: libc::size_t);\n+pub mod rustrt {\n+    use libc;\n+    use sys;\n+    use vec;\n+\n+    #[abi = \"cdecl\"]\n+    #[link_name = \"rustrt\"]\n+    pub extern {\n+        pub unsafe fn vec_reserve_shared_actual(++t: *sys::TypeDesc,\n+                                                ++v: **vec::raw::VecRepr,\n+                                                ++n: libc::size_t);\n+    }\n }\n \n /// Returns the number of elements the vector can hold without reallocating"}, {"sha": "9cd673e59a7027b08d7c0da324bed8b914546bcb", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -8,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    fn forget<T>(-x: T);\n-    fn reinterpret_cast<T, U>(&&e: T) -> U;\n+pub mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    #[link_name = \"rusti\"]\n+    pub extern {\n+        fn forget<T>(-x: T);\n+        fn reinterpret_cast<T, U>(&&e: T) -> U;\n+    }\n }\n \n /// Casts the value at `src` to U. The two types must have the same length."}, {"sha": "bf1ea5f1150a7c70c0388644a36b34b3dc7a25dc", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -218,9 +218,14 @@ pub unsafe fn annihilate() {\n }\n \n /// Bindings to the runtime\n-extern mod rustrt {\n-    #[rust_stack]\n-    // FIXME (#4386): Unable to make following method private.\n-    pub unsafe fn rust_get_task() -> *c_void;\n+pub mod rustrt {\n+    use libc::c_void;\n+\n+    #[link_name = \"rustrt\"]\n+    pub extern {\n+        #[rust_stack]\n+        // FIXME (#4386): Unable to make following method private.\n+        pub unsafe fn rust_get_task() -> *c_void;\n+    }\n }\n "}, {"sha": "8f7925e368cd013a850ededeaf15edb7c65b7bb4", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -21,16 +21,23 @@ use vec;\n \n #[cfg(test)] use rand;\n \n-extern mod rustrt {\n-    unsafe fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n-                                         src_buf_len: size_t,\n-                                         pout_len: *size_t,\n-                                         flags: c_int) -> *c_void;\n+pub mod rustrt {\n+    use libc::{c_int, c_void, size_t};\n \n-    unsafe fn tinfl_decompress_mem_to_heap(psrc_buf: *const c_void,\n-                                           src_buf_len: size_t,\n-                                           pout_len: *size_t,\n-                                           flags: c_int) -> *c_void;\n+    #[link_name = \"rustrt\"]\n+    pub extern {\n+        unsafe fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,\n+                                             src_buf_len: size_t,\n+                                             pout_len: *size_t,\n+                                             flags: c_int)\n+                                          -> *c_void;\n+\n+        unsafe fn tinfl_decompress_mem_to_heap(psrc_buf: *const c_void,\n+                                               src_buf_len: size_t,\n+                                               pout_len: *size_t,\n+                                               flags: c_int)\n+                                            -> *c_void;\n+    }\n }\n \n const lz_none : c_int = 0x0;   // Huffman-coding only."}, {"sha": "5f84f7f0d19e52ae5173affc7f0b11860da657a4", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -48,23 +48,30 @@ use sys;\n pub use stackwalk::Word;\n \n // Mirrors rust_stack.h stk_seg\n-struct StackSegment {\n+pub struct StackSegment {\n     prev: *StackSegment,\n     next: *StackSegment,\n     end: uintptr_t,\n     // And other fields which we don't care about...\n }\n \n-extern mod rustrt {\n-    #[rust_stack]\n-    pub unsafe fn rust_call_tydesc_glue(root: *Word,\n-                                        tydesc: *Word,\n-                                        field: size_t);\n+pub mod rustrt {\n+    use libc::size_t;\n+    use stackwalk::Word;\n+    use super::StackSegment;\n \n-    #[rust_stack]\n-    pub unsafe fn rust_gc_metadata() -> *Word;\n+    #[link_name = \"rustrt\"]\n+    pub extern {\n+        #[rust_stack]\n+        pub unsafe fn rust_call_tydesc_glue(root: *Word,\n+                                            tydesc: *Word,\n+                                            field: size_t);\n \n-    pub unsafe fn rust_get_stack_segment() -> *StackSegment;\n+        #[rust_stack]\n+        pub unsafe fn rust_gc_metadata() -> *Word;\n+\n+        pub unsafe fn rust_get_stack_segment() -> *StackSegment;\n+    }\n }\n \n unsafe fn bump<T, U>(ptr: *T, count: uint) -> *U {"}, {"sha": "65f0c57db6251216a2abb6ce673b29d16f98cfcc", "filename": "src/libcore/io.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -32,11 +32,16 @@ use vec;\n #[allow(non_camel_case_types)] // not sure what to do about this\n pub type fd_t = c_int;\n \n-#[abi = \"cdecl\"]\n-extern mod rustrt {\n-    unsafe fn rust_get_stdin() -> *libc::FILE;\n-    unsafe fn rust_get_stdout() -> *libc::FILE;\n-    unsafe fn rust_get_stderr() -> *libc::FILE;\n+pub mod rustrt {\n+    use libc;\n+\n+    #[abi = \"cdecl\"]\n+    #[link_name = \"rustrt\"]\n+    pub extern {\n+        unsafe fn rust_get_stdin() -> *libc::FILE;\n+        unsafe fn rust_get_stdout() -> *libc::FILE;\n+        unsafe fn rust_get_stderr() -> *libc::FILE;\n+    }\n }\n \n // Reading"}, {"sha": "f0f5910de95972feb952ee6b8a2e4897ed2a73d9", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 446, "deletions": 363, "changes": 809, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -1006,138 +1006,160 @@ pub mod funcs {\n     // or anything. The same is not true of POSIX.\n \n     pub mod c95 {\n-        use libc::types::common::c95::{FILE, c_void, fpos_t};\n-        use libc::types::os::arch::c95::{c_char, c_double, c_int, c_long};\n-        use libc::types::os::arch::c95::{c_uint, c_ulong, c_void, size_t};\n-\n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod ctype {\n-            unsafe fn isalnum(c: c_int) -> c_int;\n-            unsafe fn isalpha(c: c_int) -> c_int;\n-            unsafe fn iscntrl(c: c_int) -> c_int;\n-            unsafe fn isdigit(c: c_int) -> c_int;\n-            unsafe fn isgraph(c: c_int) -> c_int;\n-            unsafe fn islower(c: c_int) -> c_int;\n-            unsafe fn isprint(c: c_int) -> c_int;\n-            unsafe fn ispunct(c: c_int) -> c_int;\n-            unsafe fn isspace(c: c_int) -> c_int;\n-            unsafe fn isupper(c: c_int) -> c_int;\n-            unsafe fn isxdigit(c: c_int) -> c_int;\n-            unsafe fn tolower(c: c_char) -> c_char;\n-            unsafe fn toupper(c: c_char) -> c_char;\n+        pub mod ctype {\n+            use libc::types::os::arch::c95::{c_char, c_int};\n+\n+            pub extern {\n+                unsafe fn isalnum(c: c_int) -> c_int;\n+                unsafe fn isalpha(c: c_int) -> c_int;\n+                unsafe fn iscntrl(c: c_int) -> c_int;\n+                unsafe fn isdigit(c: c_int) -> c_int;\n+                unsafe fn isgraph(c: c_int) -> c_int;\n+                unsafe fn islower(c: c_int) -> c_int;\n+                unsafe fn isprint(c: c_int) -> c_int;\n+                unsafe fn ispunct(c: c_int) -> c_int;\n+                unsafe fn isspace(c: c_int) -> c_int;\n+                unsafe fn isupper(c: c_int) -> c_int;\n+                unsafe fn isxdigit(c: c_int) -> c_int;\n+                unsafe fn tolower(c: c_char) -> c_char;\n+                unsafe fn toupper(c: c_char) -> c_char;\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod stdio {\n-            unsafe fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n-            unsafe fn freopen(filename: *c_char, mode: *c_char,\n-                       file: *FILE) -> *FILE;\n-            unsafe fn fflush(file: *FILE) -> c_int;\n-            unsafe fn fclose(file: *FILE) -> c_int;\n-            unsafe fn remove(filename: *c_char) -> c_int;\n-            unsafe fn rename(oldname: *c_char, newname: *c_char) -> c_int;\n-            unsafe fn tmpfile() -> *FILE;\n-            unsafe fn setvbuf(stream: *FILE, buffer: *c_char,\n-                       mode: c_int, size: size_t) -> c_int;\n-            unsafe fn setbuf(stream: *FILE, buf: *c_char);\n-            // Omitted: printf and scanf variants.\n-            unsafe fn fgetc(stream: *FILE) -> c_int;\n-            unsafe fn fgets(buf: *mut c_char, n: c_int,\n-                     stream: *FILE) -> *c_char;\n-            unsafe fn fputc(c: c_int, stream: *FILE) -> c_int;\n-            unsafe fn fputs(s: *c_char, stream: *FILE) -> *c_char;\n-            // Omitted: getc, getchar (might be macros).\n-\n-            // Omitted: gets, so ridiculously unsafe that it should not\n-            // survive.\n-\n-            // Omitted: putc, putchar (might be macros).\n-            unsafe fn puts(s: *c_char) -> c_int;\n-            unsafe fn ungetc(c: c_int, stream: *FILE) -> c_int;\n-            unsafe fn fread(ptr: *mut c_void, size: size_t,\n-                     nobj: size_t, stream: *FILE) -> size_t;\n-            unsafe fn fwrite(ptr: *c_void, size: size_t,\n-                      nobj: size_t, stream: *FILE) -> size_t;\n-            unsafe fn fseek(stream: *FILE, offset: c_long,\n-                     whence: c_int) -> c_int;\n-            unsafe fn ftell(stream: *FILE) -> c_long;\n-            unsafe fn rewind(stream: *FILE);\n-            unsafe fn fgetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n-            unsafe fn fsetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n-            unsafe fn feof(stream: *FILE) -> c_int;\n-            unsafe fn ferror(stream: *FILE) -> c_int;\n-            unsafe fn perror(s: *c_char);\n+        pub mod stdio {\n+            use libc::types::common::c95::{FILE, c_void, fpos_t};\n+            use libc::types::os::arch::c95::{c_char, c_int, c_long, size_t};\n+\n+            pub extern {\n+                unsafe fn fopen(filename: *c_char, mode: *c_char) -> *FILE;\n+                unsafe fn freopen(filename: *c_char, mode: *c_char,\n+                           file: *FILE) -> *FILE;\n+                unsafe fn fflush(file: *FILE) -> c_int;\n+                unsafe fn fclose(file: *FILE) -> c_int;\n+                unsafe fn remove(filename: *c_char) -> c_int;\n+                unsafe fn rename(oldname: *c_char, newname: *c_char) -> c_int;\n+                unsafe fn tmpfile() -> *FILE;\n+                unsafe fn setvbuf(stream: *FILE, buffer: *c_char,\n+                           mode: c_int, size: size_t) -> c_int;\n+                unsafe fn setbuf(stream: *FILE, buf: *c_char);\n+                // Omitted: printf and scanf variants.\n+                unsafe fn fgetc(stream: *FILE) -> c_int;\n+                unsafe fn fgets(buf: *mut c_char, n: c_int,\n+                         stream: *FILE) -> *c_char;\n+                unsafe fn fputc(c: c_int, stream: *FILE) -> c_int;\n+                unsafe fn fputs(s: *c_char, stream: *FILE) -> *c_char;\n+                // Omitted: getc, getchar (might be macros).\n+\n+                // Omitted: gets, so ridiculously unsafe that it should not\n+                // survive.\n+\n+                // Omitted: putc, putchar (might be macros).\n+                unsafe fn puts(s: *c_char) -> c_int;\n+                unsafe fn ungetc(c: c_int, stream: *FILE) -> c_int;\n+                unsafe fn fread(ptr: *mut c_void, size: size_t,\n+                         nobj: size_t, stream: *FILE) -> size_t;\n+                unsafe fn fwrite(ptr: *c_void, size: size_t,\n+                          nobj: size_t, stream: *FILE) -> size_t;\n+                unsafe fn fseek(stream: *FILE, offset: c_long,\n+                         whence: c_int) -> c_int;\n+                unsafe fn ftell(stream: *FILE) -> c_long;\n+                unsafe fn rewind(stream: *FILE);\n+                unsafe fn fgetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n+                unsafe fn fsetpos(stream: *FILE, ptr: *fpos_t) -> c_int;\n+                unsafe fn feof(stream: *FILE) -> c_int;\n+                unsafe fn ferror(stream: *FILE) -> c_int;\n+                unsafe fn perror(s: *c_char);\n+            }\n         }\n \n-\n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod stdlib {\n-            unsafe fn abs(i: c_int) -> c_int;\n-            unsafe fn labs(i: c_long) -> c_long;\n-            // Omitted: div, ldiv (return pub type incomplete).\n-            unsafe fn atof(s: *c_char) -> c_double;\n-            unsafe fn atoi(s: *c_char) -> c_int;\n-            unsafe fn strtod(s: *c_char, endp: **c_char) -> c_double;\n-            unsafe fn strtol(s: *c_char, endp: **c_char, base: c_int)\n-                          -> c_long;\n-            unsafe fn strtoul(s: *c_char, endp: **c_char, base: c_int)\n-                           -> c_ulong;\n-            unsafe fn calloc(nobj: size_t, size: size_t) -> *c_void;\n-            unsafe fn malloc(size: size_t) -> *c_void;\n-            unsafe fn realloc(p: *c_void, size: size_t) -> *c_void;\n-            unsafe fn free(p: *c_void);\n-            unsafe fn abort() -> !;\n-            unsafe fn exit(status: c_int) -> !;\n-            // Omitted: atexit.\n-            unsafe fn system(s: *c_char) -> c_int;\n-            unsafe fn getenv(s: *c_char) -> *c_char;\n-            // Omitted: bsearch, qsort\n-            unsafe fn rand() -> c_int;\n-            unsafe fn srand(seed: c_uint);\n+        pub mod stdlib {\n+            use libc::types::common::c95::c_void;\n+            use libc::types::os::arch::c95::{c_char, c_double, c_int};\n+            use libc::types::os::arch::c95::{c_long, c_uint, c_ulong};\n+            use libc::types::os::arch::c95::{size_t};\n+\n+            pub extern {\n+                unsafe fn abs(i: c_int) -> c_int;\n+                unsafe fn labs(i: c_long) -> c_long;\n+                // Omitted: div, ldiv (return pub type incomplete).\n+                unsafe fn atof(s: *c_char) -> c_double;\n+                unsafe fn atoi(s: *c_char) -> c_int;\n+                unsafe fn strtod(s: *c_char, endp: **c_char) -> c_double;\n+                unsafe fn strtol(s: *c_char, endp: **c_char, base: c_int)\n+                              -> c_long;\n+                unsafe fn strtoul(s: *c_char, endp: **c_char, base: c_int)\n+                               -> c_ulong;\n+                unsafe fn calloc(nobj: size_t, size: size_t) -> *c_void;\n+                unsafe fn malloc(size: size_t) -> *c_void;\n+                unsafe fn realloc(p: *c_void, size: size_t) -> *c_void;\n+                unsafe fn free(p: *c_void);\n+                unsafe fn abort() -> !;\n+                unsafe fn exit(status: c_int) -> !;\n+                // Omitted: atexit.\n+                unsafe fn system(s: *c_char) -> c_int;\n+                unsafe fn getenv(s: *c_char) -> *c_char;\n+                // Omitted: bsearch, qsort\n+                unsafe fn rand() -> c_int;\n+                unsafe fn srand(seed: c_uint);\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod string {\n-            unsafe fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n-            unsafe fn strncpy(dst: *c_char, src: *c_char, n: size_t)\n-                           -> *c_char;\n-            unsafe fn strcat(s: *c_char, ct: *c_char) -> *c_char;\n-            unsafe fn strncat(s: *c_char, ct: *c_char, n: size_t) -> *c_char;\n-            unsafe fn strcmp(cs: *c_char, ct: *c_char) -> c_int;\n-            unsafe fn strncmp(cs: *c_char, ct: *c_char, n: size_t) -> c_int;\n-            unsafe fn strcoll(cs: *c_char, ct: *c_char) -> c_int;\n-            unsafe fn strchr(cs: *c_char, c: c_int) -> *c_char;\n-            unsafe fn strrchr(cs: *c_char, c: c_int) -> *c_char;\n-            unsafe fn strspn(cs: *c_char, ct: *c_char) -> size_t;\n-            unsafe fn strcspn(cs: *c_char, ct: *c_char) -> size_t;\n-            unsafe fn strpbrk(cs: *c_char, ct: *c_char) -> *c_char;\n-            unsafe fn strstr(cs: *c_char, ct: *c_char) -> *c_char;\n-            unsafe fn strlen(cs: *c_char) -> size_t;\n-            unsafe fn strerror(n: c_int) -> *c_char;\n-            unsafe fn strtok(s: *c_char, t: *c_char) -> *c_char;\n-            unsafe fn strxfrm(s: *c_char, ct: *c_char, n: size_t) -> size_t;\n-\n-            // These are fine to execute on the Rust stack. They must be, in\n-            // fact, because LLVM generates calls to them!\n-            #[rust_stack]\n-            #[inline(always)]\n-            unsafe fn memcpy(s: *c_void, ct: *c_void, n: size_t) -> *c_void;\n-            #[rust_stack]\n-            #[inline(always)]\n-            unsafe fn memmove(s: *c_void, ct: *c_void, n: size_t) -> *c_void;\n-            #[rust_stack]\n-            #[inline(always)]\n-            unsafe fn memcmp(cx: *c_void, ct: *c_void, n: size_t) -> c_int;\n-            #[rust_stack]\n-            #[inline(always)]\n-            unsafe fn memchr(cx: *c_void, c: c_int, n: size_t) -> *c_void;\n-            #[rust_stack]\n-            #[inline(always)]\n-            unsafe fn memset(s: *c_void, c: c_int, n: size_t) -> *c_void;\n+        pub mod string {\n+            use libc::types::common::c95::c_void;\n+            use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+\n+            pub extern {\n+                unsafe fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n+                unsafe fn strncpy(dst: *c_char, src: *c_char, n: size_t)\n+                               -> *c_char;\n+                unsafe fn strcat(s: *c_char, ct: *c_char) -> *c_char;\n+                unsafe fn strncat(s: *c_char, ct: *c_char, n: size_t)\n+                               -> *c_char;\n+                unsafe fn strcmp(cs: *c_char, ct: *c_char) -> c_int;\n+                unsafe fn strncmp(cs: *c_char, ct: *c_char, n: size_t)\n+                               -> c_int;\n+                unsafe fn strcoll(cs: *c_char, ct: *c_char) -> c_int;\n+                unsafe fn strchr(cs: *c_char, c: c_int) -> *c_char;\n+                unsafe fn strrchr(cs: *c_char, c: c_int) -> *c_char;\n+                unsafe fn strspn(cs: *c_char, ct: *c_char) -> size_t;\n+                unsafe fn strcspn(cs: *c_char, ct: *c_char) -> size_t;\n+                unsafe fn strpbrk(cs: *c_char, ct: *c_char) -> *c_char;\n+                unsafe fn strstr(cs: *c_char, ct: *c_char) -> *c_char;\n+                unsafe fn strlen(cs: *c_char) -> size_t;\n+                unsafe fn strerror(n: c_int) -> *c_char;\n+                unsafe fn strtok(s: *c_char, t: *c_char) -> *c_char;\n+                unsafe fn strxfrm(s: *c_char, ct: *c_char, n: size_t)\n+                               -> size_t;\n+\n+                // These are fine to execute on the Rust stack. They must be, in\n+                // fact, because LLVM generates calls to them!\n+                #[rust_stack]\n+                #[inline(always)]\n+                unsafe fn memcpy(s: *c_void, ct: *c_void, n: size_t)\n+                              -> *c_void;\n+                #[rust_stack]\n+                #[inline(always)]\n+                unsafe fn memmove(s: *c_void, ct: *c_void, n: size_t)\n+                               -> *c_void;\n+                #[rust_stack]\n+                #[inline(always)]\n+                unsafe fn memcmp(cx: *c_void, ct: *c_void, n: size_t)\n+                              -> c_int;\n+                #[rust_stack]\n+                #[inline(always)]\n+                unsafe fn memchr(cx: *c_void, c: c_int, n: size_t) -> *c_void;\n+                #[rust_stack]\n+                #[inline(always)]\n+                unsafe fn memset(s: *c_void, c: c_int, n: size_t) -> *c_void;\n+            }\n         }\n     }\n \n@@ -1151,127 +1173,136 @@ pub mod funcs {\n     pub mod posix88 {\n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod stat_ {\n+        pub mod stat_ {\n             use libc::types::os::common::posix01::stat;\n             use libc::types::os::arch::c95::{c_int, c_char};\n \n-            #[link_name = \"_chmod\"]\n-            unsafe fn chmod(path: *c_char, mode: c_int) -> c_int;\n+            pub extern {\n+                #[link_name = \"_chmod\"]\n+                unsafe fn chmod(path: *c_char, mode: c_int) -> c_int;\n \n-            #[link_name = \"_mkdir\"]\n-            unsafe fn mkdir(path: *c_char) -> c_int;\n+                #[link_name = \"_mkdir\"]\n+                unsafe fn mkdir(path: *c_char) -> c_int;\n \n-            #[link_name = \"_fstat64\"]\n-            unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n+                #[link_name = \"_fstat64\"]\n+                unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n-            #[link_name = \"_stat64\"]\n-            unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+                #[link_name = \"_stat64\"]\n+                unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod stdio {\n+        pub mod stdio {\n             use libc::types::common::c95::FILE;\n             use libc::types::os::arch::c95::{c_int, c_char};\n \n-            #[link_name = \"_popen\"]\n-            unsafe fn popen(command: *c_char, mode: *c_char) -> *FILE;\n+            pub extern {\n+                #[link_name = \"_popen\"]\n+                unsafe fn popen(command: *c_char, mode: *c_char) -> *FILE;\n \n-            #[link_name = \"_pclose\"]\n-            unsafe fn pclose(stream: *FILE) -> c_int;\n+                #[link_name = \"_pclose\"]\n+                unsafe fn pclose(stream: *FILE) -> c_int;\n \n-            #[link_name = \"_fdopen\"]\n-            unsafe fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n+                #[link_name = \"_fdopen\"]\n+                unsafe fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n \n-            #[link_name = \"_fileno\"]\n-            unsafe fn fileno(stream: *FILE) -> c_int;\n+                #[link_name = \"_fileno\"]\n+                unsafe fn fileno(stream: *FILE) -> c_int;\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod fcntl {\n-            use libc::types::os::arch::c95::{c_int, c_char};\n+        pub mod fcntl {\n+            pub extern {\n+                use libc::types::os::arch::c95::{c_int, c_char};\n \n-            #[link_name = \"_open\"]\n-            unsafe fn open(path: *c_char, oflag: c_int, mode: c_int) -> c_int;\n+                #[link_name = \"_open\"]\n+                unsafe fn open(path: *c_char, oflag: c_int, mode: c_int)\n+                            -> c_int;\n \n-            #[link_name = \"_creat\"]\n-            unsafe fn creat(path: *c_char, mode: c_int) -> c_int;\n+                #[link_name = \"_creat\"]\n+                unsafe fn creat(path: *c_char, mode: c_int) -> c_int;\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod dirent {\n+        pub mod dirent {\n             // Not supplied at all.\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod unistd {\n+        pub mod unistd {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_int, c_uint, c_char,\n                                              c_long, size_t};\n             use libc::types::os::arch::c99::intptr_t;\n \n-            #[link_name = \"_access\"]\n-            unsafe fn access(path: *c_char, amode: c_int) -> c_int;\n-\n-            #[link_name = \"_chdir\"]\n-            unsafe fn chdir(dir: *c_char) -> c_int;\n+            pub extern {\n+                #[link_name = \"_access\"]\n+                unsafe fn access(path: *c_char, amode: c_int) -> c_int;\n \n-            #[link_name = \"_close\"]\n-            unsafe fn close(fd: c_int) -> c_int;\n+                #[link_name = \"_chdir\"]\n+                unsafe fn chdir(dir: *c_char) -> c_int;\n \n-            #[link_name = \"_dup\"]\n-            unsafe fn dup(fd: c_int) -> c_int;\n+                #[link_name = \"_close\"]\n+                unsafe fn close(fd: c_int) -> c_int;\n \n-            #[link_name = \"_dup2\"]\n-            unsafe fn dup2(src: c_int, dst: c_int) -> c_int;\n+                #[link_name = \"_dup\"]\n+                unsafe fn dup(fd: c_int) -> c_int;\n \n-            #[link_name = \"_execv\"]\n-            unsafe fn execv(prog: *c_char, argv: **c_char) -> intptr_t;\n+                #[link_name = \"_dup2\"]\n+                unsafe fn dup2(src: c_int, dst: c_int) -> c_int;\n \n-            #[link_name = \"_execve\"]\n-            unsafe fn execve(prog: *c_char, argv: **c_char,\n-                      envp: **c_char) -> c_int;\n+                #[link_name = \"_execv\"]\n+                unsafe fn execv(prog: *c_char, argv: **c_char) -> intptr_t;\n \n-            #[link_name = \"_execvp\"]\n-            unsafe fn execvp(c: *c_char, argv: **c_char) -> c_int;\n+                #[link_name = \"_execve\"]\n+                unsafe fn execve(prog: *c_char, argv: **c_char,\n+                          envp: **c_char) -> c_int;\n \n-            #[link_name = \"_execvpe\"]\n-            unsafe fn execvpe(c: *c_char, argv: **c_char,\n-                       envp: **c_char) -> c_int;\n+                #[link_name = \"_execvp\"]\n+                unsafe fn execvp(c: *c_char, argv: **c_char) -> c_int;\n \n-            #[link_name = \"_getcwd\"]\n-            unsafe fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n+                #[link_name = \"_execvpe\"]\n+                unsafe fn execvpe(c: *c_char, argv: **c_char,\n+                           envp: **c_char) -> c_int;\n \n-            #[link_name = \"_getpid\"]\n-            unsafe fn getpid() -> c_int;\n+                #[link_name = \"_getcwd\"]\n+                unsafe fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n \n-            #[link_name = \"_isatty\"]\n-            unsafe fn isatty(fd: c_int) -> c_int;\n+                #[link_name = \"_getpid\"]\n+                unsafe fn getpid() -> c_int;\n \n-            #[link_name = \"_lseek\"]\n-            unsafe fn lseek(fd: c_int, offset: c_long, origin: c_int)\n-                         -> c_long;\n+                #[link_name = \"_isatty\"]\n+                unsafe fn isatty(fd: c_int) -> c_int;\n \n-            #[link_name = \"_pipe\"]\n-            unsafe fn pipe(fds: *mut c_int, psize: c_uint,\n-                    textmode: c_int) -> c_int;\n+                #[link_name = \"_lseek\"]\n+                unsafe fn lseek(fd: c_int, offset: c_long, origin: c_int)\n+                             -> c_long;\n \n-            #[link_name = \"_read\"]\n-            unsafe fn read(fd: c_int, buf: *mut c_void, count: c_uint)\n-                        -> c_int;\n+                #[link_name = \"_pipe\"]\n+                unsafe fn pipe(fds: *mut c_int, psize: c_uint,\n+                        textmode: c_int) -> c_int;\n \n-            #[link_name = \"_rmdir\"]\n-            unsafe fn rmdir(path: *c_char) -> c_int;\n+                #[link_name = \"_read\"]\n+                unsafe fn read(fd: c_int, buf: *mut c_void, count: c_uint)\n+                            -> c_int;\n \n-            #[link_name = \"_unlink\"]\n-            unsafe fn unlink(c: *c_char) -> c_int;\n+                #[link_name = \"_rmdir\"]\n+                unsafe fn rmdir(path: *c_char) -> c_int;\n \n-            #[link_name = \"_write\"]\n-            unsafe fn write(fd: c_int, buf: *c_void, count: c_uint) -> c_int;\n+                #[link_name = \"_unlink\"]\n+                unsafe fn unlink(c: *c_char) -> c_int;\n \n+                #[link_name = \"_write\"]\n+                unsafe fn write(fd: c_int, buf: *c_void, count: c_uint)\n+                             -> c_int;\n+            }\n         }\n     }\n \n@@ -1281,119 +1312,145 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix88 {\n-        use libc::types::common::c95::{FILE, c_void};\n-        use libc::types::common::posix88::{DIR, dirent_t};\n-        use libc::types::os::arch::c95::{c_char, c_int, c_long, c_uint};\n-        use libc::types::os::arch::c95::{size_t};\n-        use libc::types::os::arch::posix01::stat;\n-        use libc::types::os::arch::posix88::{gid_t, mode_t, off_t, pid_t};\n-        use libc::types::os::arch::posix88::{ssize_t, uid_t};\n-\n-        #[nolink]\n-        #[abi = \"cdecl\"]\n-        pub extern mod stat_ {\n-            unsafe fn chmod(path: *c_char, mode: mode_t) -> c_int;\n-            unsafe fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n-\n-            #[cfg(target_os = \"linux\")]\n-            #[cfg(target_os = \"freebsd\")]\n-            #[cfg(target_os = \"android\")]\n-           unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n-\n-            #[cfg(target_os = \"macos\")]\n-            #[link_name = \"fstat64\"]\n-            unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n-\n-            unsafe fn mkdir(path: *c_char, mode: mode_t) -> c_int;\n-            unsafe fn mkfifo(path: *c_char, mode: mode_t) -> c_int;\n-\n-            #[cfg(target_os = \"linux\")]\n-            #[cfg(target_os = \"freebsd\")]\n-            #[cfg(target_os = \"android\")]\n-            unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n-\n-            #[cfg(target_os = \"macos\")]\n-            #[link_name = \"stat64\"]\n-            unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+        pub mod stat_ {\n+            use libc::types::os::arch::c95::{c_char, c_int};\n+            use libc::types::os::arch::posix01::stat;\n+            use libc::types::os::arch::posix88::mode_t;\n+\n+            #[nolink]\n+            #[abi = \"cdecl\"]\n+            pub extern {\n+                unsafe fn chmod(path: *c_char, mode: mode_t) -> c_int;\n+                unsafe fn fchmod(fd: c_int, mode: mode_t) -> c_int;\n+\n+                #[cfg(target_os = \"linux\")]\n+                #[cfg(target_os = \"freebsd\")]\n+                #[cfg(target_os = \"android\")]\n+               unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n+\n+                #[cfg(target_os = \"macos\")]\n+                #[link_name = \"fstat64\"]\n+                unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n+\n+                unsafe fn mkdir(path: *c_char, mode: mode_t) -> c_int;\n+                unsafe fn mkfifo(path: *c_char, mode: mode_t) -> c_int;\n+\n+                #[cfg(target_os = \"linux\")]\n+                #[cfg(target_os = \"freebsd\")]\n+                #[cfg(target_os = \"android\")]\n+                unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+\n+                #[cfg(target_os = \"macos\")]\n+                #[link_name = \"stat64\"]\n+                unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod stdio {\n-            unsafe fn popen(command: *c_char, mode: *c_char) -> *FILE;\n-            unsafe fn pclose(stream: *FILE) -> c_int;\n-            unsafe fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n-            unsafe fn fileno(stream: *FILE) -> c_int;\n+        pub mod stdio {\n+            use libc::types::common::c95::FILE;\n+            use libc::types::os::arch::c95::{c_char, c_int};\n+\n+            pub extern {\n+                unsafe fn popen(command: *c_char, mode: *c_char) -> *FILE;\n+                unsafe fn pclose(stream: *FILE) -> c_int;\n+                unsafe fn fdopen(fd: c_int, mode: *c_char) -> *FILE;\n+                unsafe fn fileno(stream: *FILE) -> c_int;\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod fcntl {\n-            unsafe fn open(path: *c_char, oflag: c_int, mode: c_int) -> c_int;\n-            unsafe fn creat(path: *c_char, mode: mode_t) -> c_int;\n-            unsafe fn fcntl(fd: c_int, cmd: c_int) -> c_int;\n+        pub mod fcntl {\n+            use libc::types::os::arch::c95::{c_char, c_int};\n+            use libc::types::os::arch::posix88::mode_t;\n+\n+            pub extern {\n+                unsafe fn open(path: *c_char, oflag: c_int, mode: c_int)\n+                            -> c_int;\n+                unsafe fn creat(path: *c_char, mode: mode_t) -> c_int;\n+                unsafe fn fcntl(fd: c_int, cmd: c_int) -> c_int;\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod dirent {\n-            unsafe fn opendir(dirname: *c_char) -> *DIR;\n-            unsafe fn closedir(dirp: *DIR) -> c_int;\n-            unsafe fn readdir(dirp: *DIR) -> *dirent_t;\n-            unsafe fn rewinddir(dirp: *DIR);\n-            unsafe fn seekdir(dirp: *DIR, loc: c_long);\n-            unsafe fn telldir(dirp: *DIR) -> c_long;\n+        pub mod dirent {\n+            use libc::types::common::posix88::{DIR, dirent_t};\n+            use libc::types::os::arch::c95::{c_char, c_int, c_long};\n+\n+            pub extern {\n+                unsafe fn opendir(dirname: *c_char) -> *DIR;\n+                unsafe fn closedir(dirp: *DIR) -> c_int;\n+                unsafe fn readdir(dirp: *DIR) -> *dirent_t;\n+                unsafe fn rewinddir(dirp: *DIR);\n+                unsafe fn seekdir(dirp: *DIR, loc: c_long);\n+                unsafe fn telldir(dirp: *DIR) -> c_long;\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod unistd {\n-            unsafe fn access(path: *c_char, amode: c_int) -> c_int;\n-            unsafe fn alarm(seconds: c_uint) -> c_uint;\n-            unsafe fn chdir(dir: *c_char) -> c_int;\n-            unsafe fn chown(path: *c_char, uid: uid_t, gid: gid_t) -> c_int;\n-            unsafe fn close(fd: c_int) -> c_int;\n-            unsafe fn dup(fd: c_int) -> c_int;\n-            unsafe fn dup2(src: c_int, dst: c_int) -> c_int;\n-            unsafe fn execv(prog: *c_char, argv: **c_char) -> c_int;\n-            unsafe fn execve(prog: *c_char, argv: **c_char, envp: **c_char)\n-                          -> c_int;\n-            unsafe fn execvp(c: *c_char, argv: **c_char) -> c_int;\n-            unsafe fn fork() -> pid_t;\n-            unsafe fn fpathconf(filedes: c_int, name: c_int) -> c_long;\n-            unsafe fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n-            unsafe fn getegid() -> gid_t;\n-            unsafe fn geteuid() -> uid_t;\n-            unsafe fn getgid() -> gid_t ;\n-            unsafe fn getgroups(ngroups_max: c_int, groups: *mut gid_t)\n+        pub mod unistd {\n+            use libc::types::common::c95::c_void;\n+            use libc::types::os::arch::c95::{c_char, c_int, c_long, c_uint};\n+            use libc::types::os::arch::c95::{size_t};\n+            use libc::types::os::arch::posix88::{gid_t, off_t, pid_t};\n+            use libc::types::os::arch::posix88::{ssize_t, uid_t};\n+\n+            pub extern {\n+                unsafe fn access(path: *c_char, amode: c_int) -> c_int;\n+                unsafe fn alarm(seconds: c_uint) -> c_uint;\n+                unsafe fn chdir(dir: *c_char) -> c_int;\n+                unsafe fn chown(path: *c_char, uid: uid_t, gid: gid_t)\n                              -> c_int;\n-            unsafe fn getlogin() -> *c_char;\n-            unsafe fn getopt(argc: c_int, argv: **c_char, optstr: *c_char)\n-                          -> c_int;\n-            unsafe fn getpgrp() -> pid_t;\n-            unsafe fn getpid() -> pid_t;\n-            unsafe fn getppid() -> pid_t;\n-            unsafe fn getuid() -> uid_t;\n-            unsafe fn isatty(fd: c_int) -> c_int;\n-            unsafe fn link(src: *c_char, dst: *c_char) -> c_int;\n-            unsafe fn lseek(fd: c_int, offset: off_t, whence: c_int) -> off_t;\n-            unsafe fn pathconf(path: *c_char, name: c_int) -> c_long;\n-            unsafe fn pause() -> c_int;\n-            unsafe fn pipe(fds: *mut c_int) -> c_int;\n-            unsafe fn read(fd: c_int, buf: *mut c_void,\n-                    count: size_t) -> ssize_t;\n-            unsafe fn rmdir(path: *c_char) -> c_int;\n-            unsafe fn setgid(gid: gid_t) -> c_int;\n-            unsafe fn setpgid(pid: pid_t, pgid: pid_t) -> c_int;\n-            unsafe fn setsid() -> pid_t;\n-            unsafe fn setuid(uid: uid_t) -> c_int;\n-            unsafe fn sleep(secs: c_uint) -> c_uint;\n-            unsafe fn sysconf(name: c_int) -> c_long;\n-            unsafe fn tcgetpgrp(fd: c_int) -> pid_t;\n-            unsafe fn ttyname(fd: c_int) -> *c_char;\n-            unsafe fn unlink(c: *c_char) -> c_int;\n-            unsafe fn write(fd: c_int, buf: *c_void, count: size_t)\n-                         -> ssize_t;\n+                unsafe fn close(fd: c_int) -> c_int;\n+                unsafe fn dup(fd: c_int) -> c_int;\n+                unsafe fn dup2(src: c_int, dst: c_int) -> c_int;\n+                unsafe fn execv(prog: *c_char, argv: **c_char) -> c_int;\n+                unsafe fn execve(prog: *c_char,\n+                                 argv: **c_char,\n+                                 envp: **c_char)\n+                              -> c_int;\n+                unsafe fn execvp(c: *c_char, argv: **c_char) -> c_int;\n+                unsafe fn fork() -> pid_t;\n+                unsafe fn fpathconf(filedes: c_int, name: c_int) -> c_long;\n+                unsafe fn getcwd(buf: *c_char, size: size_t) -> *c_char;\n+                unsafe fn getegid() -> gid_t;\n+                unsafe fn geteuid() -> uid_t;\n+                unsafe fn getgid() -> gid_t ;\n+                unsafe fn getgroups(ngroups_max: c_int, groups: *mut gid_t)\n+                                 -> c_int;\n+                unsafe fn getlogin() -> *c_char;\n+                unsafe fn getopt(argc: c_int, argv: **c_char, optstr: *c_char)\n+                              -> c_int;\n+                unsafe fn getpgrp() -> pid_t;\n+                unsafe fn getpid() -> pid_t;\n+                unsafe fn getppid() -> pid_t;\n+                unsafe fn getuid() -> uid_t;\n+                unsafe fn isatty(fd: c_int) -> c_int;\n+                unsafe fn link(src: *c_char, dst: *c_char) -> c_int;\n+                unsafe fn lseek(fd: c_int, offset: off_t, whence: c_int)\n+                             -> off_t;\n+                unsafe fn pathconf(path: *c_char, name: c_int) -> c_long;\n+                unsafe fn pause() -> c_int;\n+                unsafe fn pipe(fds: *mut c_int) -> c_int;\n+                unsafe fn read(fd: c_int, buf: *mut c_void,\n+                        count: size_t) -> ssize_t;\n+                unsafe fn rmdir(path: *c_char) -> c_int;\n+                unsafe fn setgid(gid: gid_t) -> c_int;\n+                unsafe fn setpgid(pid: pid_t, pgid: pid_t) -> c_int;\n+                unsafe fn setsid() -> pid_t;\n+                unsafe fn setuid(uid: uid_t) -> c_int;\n+                unsafe fn sleep(secs: c_uint) -> c_uint;\n+                unsafe fn sysconf(name: c_int) -> c_long;\n+                unsafe fn tcgetpgrp(fd: c_int) -> pid_t;\n+                unsafe fn ttyname(fd: c_int) -> *c_char;\n+                unsafe fn unlink(c: *c_char) -> c_int;\n+                unsafe fn write(fd: c_int, buf: *c_void, count: size_t)\n+                             -> ssize_t;\n+            }\n         }\n     }\n \n@@ -1402,59 +1459,70 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix01 {\n-        use libc::types::os::arch::c95::{c_char, c_int, size_t};\n-        use libc::types::os::arch::posix01::stat;\n-        use libc::types::os::arch::posix88::{pid_t, ssize_t};\n-\n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod stat_ {\n-            #[cfg(target_os = \"linux\")]\n-            #[cfg(target_os = \"freebsd\")]\n-            #[cfg(target_os = \"android\")]\n-            unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n-\n-            #[cfg(target_os = \"macos\")]\n-            #[link_name = \"lstat64\"]\n-            unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n+        pub mod stat_ {\n+            use libc::types::os::arch::c95::{c_char, c_int};\n+            use libc::types::os::arch::posix01::stat;\n+\n+            pub extern {\n+                #[cfg(target_os = \"linux\")]\n+                #[cfg(target_os = \"freebsd\")]\n+                #[cfg(target_os = \"android\")]\n+                unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n+\n+                #[cfg(target_os = \"macos\")]\n+                #[link_name = \"lstat64\"]\n+                unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod unistd {\n-            unsafe fn readlink(path: *c_char, buf: *mut c_char,\n-                        bufsz: size_t) -> ssize_t;\n+        pub mod unistd {\n+            use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+            use libc::types::os::arch::posix88::{ssize_t};\n \n-            unsafe fn fsync(fd: c_int) -> c_int;\n+            pub extern {\n+                unsafe fn readlink(path: *c_char, buf: *mut c_char,\n+                            bufsz: size_t) -> ssize_t;\n \n-            #[cfg(target_os = \"linux\")]\n-            #[cfg(target_os = \"android\")]\n-            unsafe fn fdatasync(fd: c_int) -> c_int;\n+                unsafe fn fsync(fd: c_int) -> c_int;\n \n-            unsafe fn setenv(name: *c_char, val: *c_char,\n-                      overwrite: c_int) -> c_int;\n-            unsafe fn unsetenv(name: *c_char) -> c_int;\n-            unsafe fn putenv(string: *c_char) -> c_int;\n+                #[cfg(target_os = \"linux\")]\n+                #[cfg(target_os = \"android\")]\n+                unsafe fn fdatasync(fd: c_int) -> c_int;\n \n-            unsafe fn symlink(path1: *c_char, path2: *c_char) -> c_int;\n+                unsafe fn setenv(name: *c_char, val: *c_char,\n+                          overwrite: c_int) -> c_int;\n+                unsafe fn unsetenv(name: *c_char) -> c_int;\n+                unsafe fn putenv(string: *c_char) -> c_int;\n+\n+                unsafe fn symlink(path1: *c_char, path2: *c_char) -> c_int;\n+            }\n         }\n \n         #[nolink]\n         #[abi = \"cdecl\"]\n-        pub extern mod wait {\n-            unsafe fn waitpid(pid: pid_t, status: *mut c_int,\n-                       options: c_int) -> pid_t;\n+        pub mod wait {\n+            use libc::types::os::arch::c95::{c_int};\n+            use libc::types::os::arch::posix88::{pid_t};\n+\n+            pub extern {\n+                unsafe fn waitpid(pid: pid_t,\n+                                  status: *mut c_int,\n+                                  options: c_int)\n+                               -> pid_t;\n+            }\n         }\n     }\n \n     #[cfg(target_os = \"win32\")]\n     pub mod posix01 {\n-        #[nolink]\n-        pub extern mod stat_ {\n+        pub mod stat_ {\n         }\n \n-        #[nolink]\n-        pub extern mod unistd {\n+        pub mod unistd {\n         }\n     }\n \n@@ -1465,30 +1533,30 @@ pub mod funcs {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix08 {\n-        #[nolink]\n-        pub extern mod unistd {\n+        pub mod unistd {\n         }\n     }\n \n \n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n-    #[nolink]\n-    #[abi = \"cdecl\"]\n-    pub extern mod bsd44 {\n-        use libc::types::common::c95::{c_void};\n-        use libc::types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n+    pub mod bsd44 {\n+        #[abi = \"cdecl\"]\n+        pub extern {\n+            use libc::types::common::c95::{c_void};\n+            use libc::types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n \n-        unsafe fn sysctl(name: *c_int, namelen: c_uint,\n-                  oldp: *mut c_void, oldlenp: *mut size_t,\n-                  newp: *c_void, newlen: size_t) -> c_int;\n+            unsafe fn sysctl(name: *c_int, namelen: c_uint,\n+                      oldp: *mut c_void, oldlenp: *mut size_t,\n+                      newp: *c_void, newlen: size_t) -> c_int;\n \n-        unsafe fn sysctlbyname(name: *c_char,\n-                        oldp: *mut c_void, oldlenp: *mut size_t,\n-                        newp: *c_void, newlen: size_t) -> c_int;\n+            unsafe fn sysctlbyname(name: *c_char,\n+                            oldp: *mut c_void, oldlenp: *mut size_t,\n+                            newp: *c_void, newlen: size_t) -> c_int;\n \n-        unsafe fn sysctlnametomib(name: *c_char, mibp: *mut c_int,\n-                           sizep: *mut size_t) -> c_int;\n+            unsafe fn sysctlnametomib(name: *c_char, mibp: *mut c_int,\n+                               sizep: *mut size_t) -> c_int;\n+        }\n     }\n \n \n@@ -1500,12 +1568,15 @@ pub mod funcs {\n \n     #[cfg(target_os = \"macos\")]\n     #[nolink]\n-    #[abi = \"cdecl\"]\n-    pub extern mod extra {\n+    pub mod extra {\n         use libc::types::os::arch::c95::{c_char, c_int};\n \n-        unsafe fn _NSGetExecutablePath(buf: *mut c_char,\n-                                bufsize: *mut u32) -> c_int;\n+        #[abi = \"cdecl\"]\n+        pub extern {\n+            unsafe fn _NSGetExecutablePath(buf: *mut c_char,\n+                                           bufsize: *mut u32)\n+                                        -> c_int;\n+        }\n     }\n \n     #[cfg(target_os = \"freebsd\")]\n@@ -1520,38 +1591,50 @@ pub mod funcs {\n \n     #[cfg(target_os = \"win32\")]\n     pub mod extra {\n-        use libc::types::os::arch::c95::c_int;\n-        use libc::types::os::arch::extra::{DWORD, HMODULE, LPCWSTR, LPWSTR};\n-        use libc::types::os::arch::extra::{BOOL, LPSECURITY_ATTRIBUTES};\n-\n-        #[abi = \"stdcall\"]\n-        pub extern mod kernel32 {\n-            unsafe fn GetEnvironmentVariableW(n: LPCWSTR,\n-                                       v: LPWSTR,\n-                                       nsize: DWORD) -> DWORD;\n-            unsafe fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR) -> BOOL;\n-\n-            unsafe fn GetModuleFileNameW(hModule: HMODULE,\n-                                  lpFilename: LPWSTR,\n-                                  nSize: DWORD) -> DWORD;\n-            unsafe fn CreateDirectoryW(lpPathName: LPCWSTR,\n-                                lpSecurityAttributes:\n-                                LPSECURITY_ATTRIBUTES) -> BOOL;\n-            unsafe fn CopyFileW(lpExistingFileName: LPCWSTR,\n-                         lpNewFileName: LPCWSTR,\n-                         bFailIfExists: BOOL) -> BOOL;\n-            unsafe fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n-            unsafe fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n-            unsafe fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n-\n-            unsafe fn GetLastError() -> DWORD;\n+\n+        pub mod kernel32 {\n+            use libc::types::os::arch::extra::{BOOL, DWORD, HMODULE};\n+            use libc::types::os::arch::extra::{LPCWSTR, LPWSTR};\n+            use libc::types::os::arch::extra::{LPSECURITY_ATTRIBUTES};\n+\n+            #[abi = \"stdcall\"]\n+            pub extern {\n+                unsafe fn GetEnvironmentVariableW(n: LPCWSTR,\n+                                                  v: LPWSTR,\n+                                                  nsize: DWORD)\n+                                               -> DWORD;\n+                unsafe fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n+                                               -> BOOL;\n+\n+                unsafe fn GetModuleFileNameW(hModule: HMODULE,\n+                                             lpFilename: LPWSTR,\n+                                             nSize: DWORD)\n+                                          -> DWORD;\n+                unsafe fn CreateDirectoryW(lpPathName: LPCWSTR,\n+                                           lpSecurityAttributes:\n+                                           LPSECURITY_ATTRIBUTES)\n+                                        -> BOOL;\n+                unsafe fn CopyFileW(lpExistingFileName: LPCWSTR,\n+                                    lpNewFileName: LPCWSTR,\n+                                    bFailIfExists: BOOL)\n+                                 -> BOOL;\n+                unsafe fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n+                unsafe fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+                unsafe fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+\n+                unsafe fn GetLastError() -> DWORD;\n+            }\n         }\n \n-        #[abi = \"cdecl\"]\n-        #[nolink]\n-        pub extern mod msvcrt {\n-            #[link_name = \"_commit\"]\n-            unsafe fn commit(fd: c_int) -> c_int;\n+        pub mod msvcrt {\n+            use libc::types::os::arch::c95::c_int;\n+\n+            #[abi = \"cdecl\"]\n+            #[nolink]\n+            pub extern {\n+                #[link_name = \"_commit\"]\n+                unsafe fn commit(fd: c_int) -> c_int;\n+            }\n         }\n     }\n }"}, {"sha": "be6469abc92440ba11fc482731ca10487d3ed68f", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -12,13 +12,16 @@\n \n use libc;\n \n-#[nolink]\n-extern mod rustrt {\n-    unsafe fn rust_log_console_on();\n-    unsafe fn rust_log_console_off();\n-    unsafe fn rust_log_str(level: u32,\n-                           string: *libc::c_char,\n-                           size: libc::size_t);\n+pub mod rustrt {\n+    use libc;\n+\n+    pub extern {\n+        unsafe fn rust_log_console_on();\n+        unsafe fn rust_log_console_off();\n+        unsafe fn rust_log_str(level: u32,\n+                               string: *libc::c_char,\n+                               size: libc::size_t);\n+    }\n }\n \n /// Turns on logging to stdout globally"}, {"sha": "342a02c836a7e7d5e3b863bcf21102c50fc6096b", "filename": "src/libcore/num/cmath.rs", "status": "modified", "additions": 142, "deletions": 128, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fcmath.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -17,146 +17,160 @@ use libc::c_double;\n // function names are almost identical to C's libmath, a few have been\n // renamed, grep for \"rename:\"\n \n-#[link_name = \"m\"]\n-#[abi = \"cdecl\"]\n-pub extern mod c_double_utils {\n+pub mod c_double_utils {\n+    use libc::{c_double, c_int};\n \n-    // Alpabetically sorted by link_name\n+    #[link_name = \"m\"]\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        // Alpabetically sorted by link_name\n \n-    unsafe fn acos(n: c_double) -> c_double;\n-    unsafe fn asin(n: c_double) -> c_double;\n-    unsafe fn atan(n: c_double) -> c_double;\n-    unsafe fn atan2(a: c_double, b: c_double) -> c_double;\n-    unsafe fn cbrt(n: c_double) -> c_double;\n-    unsafe fn ceil(n: c_double) -> c_double;\n-    unsafe fn copysign(x: c_double, y: c_double) -> c_double;\n-    unsafe fn cos(n: c_double) -> c_double;\n-    unsafe fn cosh(n: c_double) -> c_double;\n-    unsafe fn erf(n: c_double) -> c_double;\n-    unsafe fn erfc(n: c_double) -> c_double;\n-    unsafe fn exp(n: c_double) -> c_double;\n-    unsafe fn expm1(n: c_double) -> c_double;\n-    unsafe fn exp2(n: c_double) -> c_double;\n-    #[link_name=\"fabs\"] unsafe fn abs(n: c_double) -> c_double;\n-    // rename: for clarity and consistency with add/sub/mul/div\n-    #[link_name=\"fdim\"]\n-    unsafe fn abs_sub(a: c_double, b: c_double) -> c_double;\n-    unsafe fn floor(n: c_double) -> c_double;\n-    // rename: for clarity and consistency with add/sub/mul/div\n-    #[link_name=\"fma\"] unsafe fn mul_add(a: c_double, b: c_double,\n-                                       c: c_double) -> c_double;\n-    #[link_name=\"fmax\"] unsafe fn fmax(a: c_double, b: c_double) -> c_double;\n-    #[link_name=\"fmin\"] unsafe fn fmin(a: c_double, b: c_double) -> c_double;\n-    unsafe fn nextafter(x: c_double, y: c_double) -> c_double;\n-    unsafe fn frexp(n: c_double, value: &mut c_int) -> c_double;\n-    unsafe fn hypot(x: c_double, y: c_double) -> c_double;\n-    unsafe fn ldexp(x: c_double, n: c_int) -> c_double;\n-    #[cfg(unix)]\n-    #[link_name=\"lgamma_r\"] unsafe fn lgamma(n: c_double,\n-                                           sign: &mut c_int) -> c_double;\n-    #[cfg(windows)]\n-    #[link_name=\"__lgamma_r\"] unsafe fn lgamma(n: c_double,\n-                                             sign: &mut c_int) -> c_double;\n-    // renamed: log is a reserved keyword; ln seems more natural, too\n-    #[link_name=\"log\"] unsafe fn ln(n: c_double) -> c_double;\n-    // renamed: \"logb\" /often/ is confused for log2 by beginners\n-    #[link_name=\"logb\"] unsafe fn log_radix(n: c_double) -> c_double;\n-    // renamed: to be consitent with log as ln\n-    #[link_name=\"log1p\"] unsafe fn ln1p(n: c_double) -> c_double;\n-    unsafe fn log10(n: c_double) -> c_double;\n-    unsafe fn log2(n: c_double) -> c_double;\n-    #[link_name=\"ilogb\"] unsafe fn ilog_radix(n: c_double) -> c_int;\n-    unsafe fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n-    unsafe fn pow(n: c_double, e: c_double) -> c_double;\n-// FIXME (#1379): enable when rounding modes become available\n-//    unsafe fn rint(n: c_double) -> c_double;\n-    unsafe fn round(n: c_double) -> c_double;\n-    // rename: for consistency with logradix\n-    #[link_name=\"scalbn\"] unsafe fn ldexp_radix(n: c_double, i: c_int) ->\n-        c_double;\n-    unsafe fn sin(n: c_double) -> c_double;\n-    unsafe fn sinh(n: c_double) -> c_double;\n-    unsafe fn sqrt(n: c_double) -> c_double;\n-    unsafe fn tan(n: c_double) -> c_double;\n-    unsafe fn tanh(n: c_double) -> c_double;\n-    unsafe fn tgamma(n: c_double) -> c_double;\n-    unsafe fn trunc(n: c_double) -> c_double;\n+        unsafe fn acos(n: c_double) -> c_double;\n+        unsafe fn asin(n: c_double) -> c_double;\n+        unsafe fn atan(n: c_double) -> c_double;\n+        unsafe fn atan2(a: c_double, b: c_double) -> c_double;\n+        unsafe fn cbrt(n: c_double) -> c_double;\n+        unsafe fn ceil(n: c_double) -> c_double;\n+        unsafe fn copysign(x: c_double, y: c_double) -> c_double;\n+        unsafe fn cos(n: c_double) -> c_double;\n+        unsafe fn cosh(n: c_double) -> c_double;\n+        unsafe fn erf(n: c_double) -> c_double;\n+        unsafe fn erfc(n: c_double) -> c_double;\n+        unsafe fn exp(n: c_double) -> c_double;\n+        unsafe fn expm1(n: c_double) -> c_double;\n+        unsafe fn exp2(n: c_double) -> c_double;\n+        #[link_name=\"fabs\"] unsafe fn abs(n: c_double) -> c_double;\n+        // rename: for clarity and consistency with add/sub/mul/div\n+        #[link_name=\"fdim\"]\n+        unsafe fn abs_sub(a: c_double, b: c_double) -> c_double;\n+        unsafe fn floor(n: c_double) -> c_double;\n+        // rename: for clarity and consistency with add/sub/mul/div\n+        #[link_name=\"fma\"]\n+        unsafe fn mul_add(a: c_double, b: c_double, c: c_double) -> c_double;\n+        #[link_name=\"fmax\"]\n+        unsafe fn fmax(a: c_double, b: c_double) -> c_double;\n+        #[link_name=\"fmin\"]\n+        unsafe fn fmin(a: c_double, b: c_double) -> c_double;\n+        unsafe fn nextafter(x: c_double, y: c_double) -> c_double;\n+        unsafe fn frexp(n: c_double, value: &mut c_int) -> c_double;\n+        unsafe fn hypot(x: c_double, y: c_double) -> c_double;\n+        unsafe fn ldexp(x: c_double, n: c_int) -> c_double;\n+        #[cfg(unix)]\n+        #[link_name=\"lgamma_r\"]\n+        unsafe fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n+        #[cfg(windows)]\n+        #[link_name=\"__lgamma_r\"]\n+        unsafe fn lgamma(n: c_double, sign: &mut c_int) -> c_double;\n+        // renamed: log is a reserved keyword; ln seems more natural, too\n+        #[link_name=\"log\"] unsafe fn ln(n: c_double) -> c_double;\n+        // renamed: \"logb\" /often/ is confused for log2 by beginners\n+        #[link_name=\"logb\"] unsafe fn log_radix(n: c_double) -> c_double;\n+        // renamed: to be consitent with log as ln\n+        #[link_name=\"log1p\"] unsafe fn ln1p(n: c_double) -> c_double;\n+        unsafe fn log10(n: c_double) -> c_double;\n+        unsafe fn log2(n: c_double) -> c_double;\n+        #[link_name=\"ilogb\"] unsafe fn ilog_radix(n: c_double) -> c_int;\n+        unsafe fn modf(n: c_double, iptr: &mut c_double) -> c_double;\n+        unsafe fn pow(n: c_double, e: c_double) -> c_double;\n+    // FIXME (#1379): enable when rounding modes become available\n+    //    unsafe fn rint(n: c_double) -> c_double;\n+        unsafe fn round(n: c_double) -> c_double;\n+        // rename: for consistency with logradix\n+        #[link_name=\"scalbn\"] unsafe fn ldexp_radix(n: c_double, i: c_int) ->\n+            c_double;\n+        unsafe fn sin(n: c_double) -> c_double;\n+        unsafe fn sinh(n: c_double) -> c_double;\n+        unsafe fn sqrt(n: c_double) -> c_double;\n+        unsafe fn tan(n: c_double) -> c_double;\n+        unsafe fn tanh(n: c_double) -> c_double;\n+        unsafe fn tgamma(n: c_double) -> c_double;\n+        unsafe fn trunc(n: c_double) -> c_double;\n \n-    // These are commonly only available for doubles\n+        // These are commonly only available for doubles\n \n-    unsafe fn j0(n: c_double) -> c_double;\n-    unsafe fn j1(n: c_double) -> c_double;\n-    unsafe fn jn(i: c_int, n: c_double) -> c_double;\n+        unsafe fn j0(n: c_double) -> c_double;\n+        unsafe fn j1(n: c_double) -> c_double;\n+        unsafe fn jn(i: c_int, n: c_double) -> c_double;\n \n-    unsafe fn y0(n: c_double) -> c_double;\n-    unsafe fn y1(n: c_double) -> c_double;\n-    unsafe fn yn(i: c_int, n: c_double) -> c_double;\n+        unsafe fn y0(n: c_double) -> c_double;\n+        unsafe fn y1(n: c_double) -> c_double;\n+        unsafe fn yn(i: c_int, n: c_double) -> c_double;\n+    }\n }\n \n-#[link_name = \"m\"]\n-#[abi = \"cdecl\"]\n-pub extern mod c_float_utils {\n+pub mod c_float_utils {\n+    use libc::{c_float, c_int};\n \n-    // Alpabetically sorted by link_name\n+    #[link_name = \"m\"]\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        // Alpabetically sorted by link_name\n \n-    #[link_name=\"acosf\"] unsafe fn acos(n: c_float) -> c_float;\n-    #[link_name=\"asinf\"] unsafe fn asin(n: c_float) -> c_float;\n-    #[link_name=\"atanf\"] unsafe fn atan(n: c_float) -> c_float;\n-    #[link_name=\"atan2f\"] unsafe fn atan2(a: c_float, b: c_float) -> c_float;\n-    #[link_name=\"cbrtf\"] unsafe fn cbrt(n: c_float) -> c_float;\n-    #[link_name=\"ceilf\"] unsafe fn ceil(n: c_float) -> c_float;\n-    #[link_name=\"copysignf\"] unsafe fn copysign(x: c_float,\n-                                              y: c_float) -> c_float;\n-    #[link_name=\"cosf\"] unsafe fn cos(n: c_float) -> c_float;\n-    #[link_name=\"coshf\"] unsafe fn cosh(n: c_float) -> c_float;\n-    #[link_name=\"erff\"] unsafe fn erf(n: c_float) -> c_float;\n-    #[link_name=\"erfcf\"] unsafe fn erfc(n: c_float) -> c_float;\n-    #[link_name=\"expf\"] unsafe fn exp(n: c_float) -> c_float;\n-    #[link_name=\"expm1f\"]unsafe fn expm1(n: c_float) -> c_float;\n-    #[link_name=\"exp2f\"] unsafe fn exp2(n: c_float) -> c_float;\n-    #[link_name=\"fabsf\"] unsafe fn abs(n: c_float) -> c_float;\n-    #[link_name=\"fdimf\"] unsafe fn abs_sub(a: c_float, b: c_float) -> c_float;\n-    #[link_name=\"floorf\"] unsafe fn floor(n: c_float) -> c_float;\n-    #[link_name=\"frexpf\"] unsafe fn frexp(n: c_float,\n-                                        value: &mut c_int) -> c_float;\n-    #[link_name=\"fmaf\"] unsafe fn mul_add(a: c_float,\n-                                        b: c_float, c: c_float) -> c_float;\n-    #[link_name=\"fmaxf\"] unsafe fn fmax(a: c_float, b: c_float) -> c_float;\n-    #[link_name=\"fminf\"] unsafe fn fmin(a: c_float, b: c_float) -> c_float;\n-    #[link_name=\"nextafterf\"] unsafe fn nextafter(x: c_float,\n-                                                y: c_float) -> c_float;\n-    #[link_name=\"hypotf\"] unsafe fn hypot(x: c_float, y: c_float) -> c_float;\n-    #[link_name=\"ldexpf\"] unsafe fn ldexp(x: c_float, n: c_int) -> c_float;\n+        #[link_name=\"acosf\"] unsafe fn acos(n: c_float) -> c_float;\n+        #[link_name=\"asinf\"] unsafe fn asin(n: c_float) -> c_float;\n+        #[link_name=\"atanf\"] unsafe fn atan(n: c_float) -> c_float;\n+        #[link_name=\"atan2f\"]\n+        unsafe fn atan2(a: c_float, b: c_float) -> c_float;\n+        #[link_name=\"cbrtf\"] unsafe fn cbrt(n: c_float) -> c_float;\n+        #[link_name=\"ceilf\"] unsafe fn ceil(n: c_float) -> c_float;\n+        #[link_name=\"copysignf\"] unsafe fn copysign(x: c_float,\n+                                                  y: c_float) -> c_float;\n+        #[link_name=\"cosf\"] unsafe fn cos(n: c_float) -> c_float;\n+        #[link_name=\"coshf\"] unsafe fn cosh(n: c_float) -> c_float;\n+        #[link_name=\"erff\"] unsafe fn erf(n: c_float) -> c_float;\n+        #[link_name=\"erfcf\"] unsafe fn erfc(n: c_float) -> c_float;\n+        #[link_name=\"expf\"] unsafe fn exp(n: c_float) -> c_float;\n+        #[link_name=\"expm1f\"]unsafe fn expm1(n: c_float) -> c_float;\n+        #[link_name=\"exp2f\"] unsafe fn exp2(n: c_float) -> c_float;\n+        #[link_name=\"fabsf\"] unsafe fn abs(n: c_float) -> c_float;\n+        #[link_name=\"fdimf\"]\n+        unsafe fn abs_sub(a: c_float, b: c_float) -> c_float;\n+        #[link_name=\"floorf\"] unsafe fn floor(n: c_float) -> c_float;\n+        #[link_name=\"frexpf\"] unsafe fn frexp(n: c_float,\n+                                            value: &mut c_int) -> c_float;\n+        #[link_name=\"fmaf\"]\n+        unsafe fn mul_add(a: c_float, b: c_float, c: c_float) -> c_float;\n+        #[link_name=\"fmaxf\"]\n+        unsafe fn fmax(a: c_float, b: c_float) -> c_float;\n+        #[link_name=\"fminf\"]\n+        unsafe fn fmin(a: c_float, b: c_float) -> c_float;\n+        #[link_name=\"nextafterf\"]\n+        unsafe fn nextafter(x: c_float, y: c_float) -> c_float;\n+        #[link_name=\"hypotf\"]\n+        unsafe fn hypot(x: c_float, y: c_float) -> c_float;\n+        #[link_name=\"ldexpf\"]\n+        unsafe fn ldexp(x: c_float, n: c_int) -> c_float;\n \n-    #[cfg(unix)]\n-    #[link_name=\"lgammaf_r\"] unsafe fn lgamma(n: c_float,\n-                                            sign: &mut c_int) -> c_float;\n+        #[cfg(unix)]\n+        #[link_name=\"lgammaf_r\"] unsafe fn lgamma(n: c_float,\n+                                                sign: &mut c_int) -> c_float;\n \n-    #[cfg(windows)]\n-    #[link_name=\"__lgammaf_r\"] unsafe fn lgamma(n: c_float,\n-                                              sign: &mut c_int) -> c_float;\n+        #[cfg(windows)]\n+        #[link_name=\"__lgammaf_r\"]\n+        unsafe fn lgamma(n: c_float, sign: &mut c_int) -> c_float;\n \n-    #[link_name=\"logf\"] unsafe fn ln(n: c_float) -> c_float;\n-    #[link_name=\"logbf\"] unsafe fn log_radix(n: c_float) -> c_float;\n-    #[link_name=\"log1pf\"] unsafe fn ln1p(n: c_float) -> c_float;\n-    #[link_name=\"log2f\"] unsafe fn log2(n: c_float) -> c_float;\n-    #[link_name=\"log10f\"] unsafe fn log10(n: c_float) -> c_float;\n-    #[link_name=\"ilogbf\"] unsafe fn ilog_radix(n: c_float) -> c_int;\n-    #[link_name=\"modff\"] unsafe fn modf(n: c_float,\n-                                      iptr: &mut c_float) -> c_float;\n-    #[link_name=\"powf\"] unsafe fn pow(n: c_float, e: c_float) -> c_float;\n-// FIXME (#1379): enable when rounding modes become available\n-//    #[link_name=\"rintf\"] unsafe fn rint(n: c_float) -> c_float;\n-    #[link_name=\"roundf\"] unsafe fn round(n: c_float) -> c_float;\n-    #[link_name=\"scalbnf\"] unsafe fn ldexp_radix(n: c_float, i: c_int)\n-        -> c_float;\n-    #[link_name=\"sinf\"] unsafe fn sin(n: c_float) -> c_float;\n-    #[link_name=\"sinhf\"] unsafe fn sinh(n: c_float) -> c_float;\n-    #[link_name=\"sqrtf\"] unsafe fn sqrt(n: c_float) -> c_float;\n-    #[link_name=\"tanf\"] unsafe fn tan(n: c_float) -> c_float;\n-    #[link_name=\"tanhf\"] unsafe fn tanh(n: c_float) -> c_float;\n-    #[link_name=\"tgammaf\"] unsafe fn tgamma(n: c_float) -> c_float;\n-    #[link_name=\"truncf\"] unsafe fn trunc(n: c_float) -> c_float;\n+        #[link_name=\"logf\"] unsafe fn ln(n: c_float) -> c_float;\n+        #[link_name=\"logbf\"] unsafe fn log_radix(n: c_float) -> c_float;\n+        #[link_name=\"log1pf\"] unsafe fn ln1p(n: c_float) -> c_float;\n+        #[link_name=\"log2f\"] unsafe fn log2(n: c_float) -> c_float;\n+        #[link_name=\"log10f\"] unsafe fn log10(n: c_float) -> c_float;\n+        #[link_name=\"ilogbf\"] unsafe fn ilog_radix(n: c_float) -> c_int;\n+        #[link_name=\"modff\"] unsafe fn modf(n: c_float,\n+                                          iptr: &mut c_float) -> c_float;\n+        #[link_name=\"powf\"] unsafe fn pow(n: c_float, e: c_float) -> c_float;\n+    // FIXME (#1379): enable when rounding modes become available\n+    //    #[link_name=\"rintf\"] unsafe fn rint(n: c_float) -> c_float;\n+        #[link_name=\"roundf\"] unsafe fn round(n: c_float) -> c_float;\n+        #[link_name=\"scalbnf\"] unsafe fn ldexp_radix(n: c_float, i: c_int)\n+            -> c_float;\n+        #[link_name=\"sinf\"] unsafe fn sin(n: c_float) -> c_float;\n+        #[link_name=\"sinhf\"] unsafe fn sinh(n: c_float) -> c_float;\n+        #[link_name=\"sqrtf\"] unsafe fn sqrt(n: c_float) -> c_float;\n+        #[link_name=\"tanf\"] unsafe fn tan(n: c_float) -> c_float;\n+        #[link_name=\"tanhf\"] unsafe fn tanh(n: c_float) -> c_float;\n+        #[link_name=\"tgammaf\"] unsafe fn tgamma(n: c_float) -> c_float;\n+        #[link_name=\"truncf\"] unsafe fn trunc(n: c_float) -> c_float;\n+    }\n }\n \n // PORT check these by running src/etc/machconsts.c for your architecture"}, {"sha": "39fe090433c0c06726ae80bf27c92bb11eeacef6", "filename": "src/libcore/os.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -51,15 +51,20 @@ pub fn close(fd: c_int) -> c_int {\n     }\n }\n \n-extern mod rustrt {\n-    unsafe fn rust_get_argc() -> c_int;\n-    unsafe fn rust_get_argv() -> **c_char;\n-    unsafe fn rust_getcwd() -> ~str;\n-    unsafe fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n-    unsafe fn rust_path_exists(path: *libc::c_char) -> c_int;\n-    unsafe fn rust_list_files2(&&path: ~str) -> ~[~str];\n-    unsafe fn rust_process_wait(handle: c_int) -> c_int;\n-    unsafe fn rust_set_exit_status(code: libc::intptr_t);\n+pub mod rustrt {\n+    use libc::{c_char, c_int};\n+    use libc;\n+\n+    pub extern {\n+        unsafe fn rust_get_argc() -> c_int;\n+        unsafe fn rust_get_argv() -> **c_char;\n+        unsafe fn rust_getcwd() -> ~str;\n+        unsafe fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n+        unsafe fn rust_path_exists(path: *libc::c_char) -> c_int;\n+        unsafe fn rust_list_files2(&&path: ~str) -> ~[~str];\n+        unsafe fn rust_process_wait(handle: c_int) -> c_int;\n+        unsafe fn rust_set_exit_status(code: libc::intptr_t);\n+    }\n }\n \n pub const TMPBUF_SZ : uint = 1000u;\n@@ -159,14 +164,14 @@ fn with_env_lock<T>(f: &fn() -> T) -> T {\n }\n \n pub fn env() -> ~[(~str,~str)] {\n-    extern mod rustrt {\n+    extern {\n         unsafe fn rust_env_pairs() -> ~[~str];\n     }\n \n     unsafe {\n         do with_env_lock {\n             let mut pairs = ~[];\n-            for vec::each(rustrt::rust_env_pairs()) |p| {\n+            for vec::each(rust_env_pairs()) |p| {\n                 let vs = str::splitn_char(*p, '=', 1u);\n                 assert vec::len(vs) == 2u;\n                 pairs.push((copy vs[0], copy vs[1]));"}, {"sha": "d0fa9c3793c1aaddd2521aa1eb77c910f8c1a9ef", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -288,22 +288,28 @@ pub fn swap_task(dst: &mut *rust_task, src: *rust_task) -> *rust_task {\n \n #[doc(hidden)]\n #[allow(non_camel_case_types)]\n-type rust_task = libc::c_void;\n+pub type rust_task = libc::c_void;\n \n #[doc(hidden)]\n-extern mod rustrt {\n-    #[rust_stack]\n-    unsafe fn rust_get_task() -> *rust_task;\n-    #[rust_stack]\n-    unsafe fn rust_task_ref(task: *rust_task);\n-    unsafe fn rust_task_deref(task: *rust_task);\n-\n-    #[rust_stack]\n-    unsafe fn task_clear_event_reject(task: *rust_task);\n-\n-    unsafe fn task_wait_event(this: *rust_task, killed: &mut *libc::c_void)\n-                        -> bool;\n-    unsafe fn task_signal_event(target: *rust_task, event: *libc::c_void);\n+pub mod rustrt {\n+    use libc;\n+    use super::rust_task;\n+\n+    pub extern {\n+        #[rust_stack]\n+        unsafe fn rust_get_task() -> *rust_task;\n+        #[rust_stack]\n+        unsafe fn rust_task_ref(task: *rust_task);\n+        unsafe fn rust_task_deref(task: *rust_task);\n+\n+        #[rust_stack]\n+        unsafe fn task_clear_event_reject(task: *rust_task);\n+\n+        unsafe fn task_wait_event(this: *rust_task,\n+                                  killed: &mut *libc::c_void)\n+                               -> bool;\n+        unsafe fn task_signal_event(target: *rust_task, event: *libc::c_void);\n+    }\n }\n \n #[doc(hidden)]"}, {"sha": "c10e12953a7df3640db3e9dfb1c6548a23bc06e6", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -20,25 +20,32 @@ use sys;\n #[cfg(test)] use str;\n #[cfg(notest)] use cmp::{Eq, Ord};\n \n-#[nolink]\n-#[abi = \"cdecl\"]\n-extern mod libc_ {\n-    #[rust_stack]\n-    unsafe fn memmove(dest: *mut c_void,\n-                      src: *const c_void,\n-                      n: libc::size_t)\n-                   -> *c_void;\n-\n-    #[rust_stack]\n-    unsafe fn memset(dest: *mut c_void,\n-                     c: libc::c_int,\n-                     len: libc::size_t)\n-                  -> *c_void;\n+pub mod libc_ {\n+    use libc::c_void;\n+    use libc;\n+\n+    #[nolink]\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        #[rust_stack]\n+        unsafe fn memmove(dest: *mut c_void,\n+                          src: *const c_void,\n+                          n: libc::size_t)\n+                       -> *c_void;\n+\n+        #[rust_stack]\n+        unsafe fn memset(dest: *mut c_void,\n+                         c: libc::c_int,\n+                         len: libc::size_t)\n+                      -> *c_void;\n+    }\n }\n \n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    fn addr_of<T>(&&val: T) -> *T;\n+pub mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        fn addr_of<T>(&&val: T) -> *T;\n+    }\n }\n \n /// Get an unsafe pointer to a value"}, {"sha": "6be435355eac30f8bdcc3c67bbe2a770b02a5883", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -117,15 +117,20 @@ impl<T:Rand> Rand for Option<T> {\n }\n \n #[allow(non_camel_case_types)] // runtime type\n-enum rust_rng {}\n+pub enum rust_rng {}\n \n #[abi = \"cdecl\"]\n-extern mod rustrt {\n-    unsafe fn rand_seed_size() -> size_t;\n-    unsafe fn rand_gen_seed(buf: *mut u8, sz: size_t);\n-    unsafe fn rand_new_seeded(buf: *u8, sz: size_t) -> *rust_rng;\n-    unsafe fn rand_next(rng: *rust_rng) -> u32;\n-    unsafe fn rand_free(rng: *rust_rng);\n+pub mod rustrt {\n+    use libc::size_t;\n+    use rand::rust_rng;\n+\n+    pub extern {\n+        unsafe fn rand_seed_size() -> size_t;\n+        unsafe fn rand_gen_seed(buf: *mut u8, sz: size_t);\n+        unsafe fn rand_new_seeded(buf: *u8, sz: size_t) -> *rust_rng;\n+        unsafe fn rand_next(rng: *rust_rng) -> u32;\n+        unsafe fn rand_free(rng: *rust_rng);\n+    }\n }\n \n /// A random number generator"}, {"sha": "8afd3e06b7cac5dea683b89387b8772639ef6bd9", "filename": "src/libcore/run.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -23,12 +23,20 @@ use str;\n use task;\n use vec;\n \n-#[abi = \"cdecl\"]\n-extern mod rustrt {\n-    unsafe fn rust_run_program(argv: **libc::c_char, envp: *c_void,\n-                               dir: *libc::c_char,\n-                               in_fd: c_int, out_fd: c_int, err_fd: c_int)\n-                            -> pid_t;\n+pub mod rustrt {\n+    use libc::{c_int, c_void, pid_t};\n+    use libc;\n+\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        unsafe fn rust_run_program(argv: **libc::c_char,\n+                                   envp: *c_void,\n+                                   dir: *libc::c_char,\n+                                   in_fd: c_int,\n+                                   out_fd: c_int,\n+                                   err_fd: c_int)\n+                                -> pid_t;\n+    }\n }\n \n /// A value representing a child process"}, {"sha": "107e52b245e37c33368334f1792a650d154de3ce", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -86,11 +86,16 @@ fn frame_address(f: fn(++x: *u8)) {\n     }\n }\n \n-extern mod rustrt {\n-    pub unsafe fn rust_dbg_breakpoint();\n+pub mod rustrt {\n+    pub extern {\n+        pub unsafe fn rust_dbg_breakpoint();\n+    }\n }\n \n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    pub fn frame_address(f: &once fn(++x: *u8));\n+pub mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        pub fn frame_address(f: &once fn(++x: *u8));\n+    }\n }\n+"}, {"sha": "f44f6f37985b292d1201ee448a98b7c51a176ffa", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -37,17 +37,25 @@ pub struct Closure {\n     env: *(),\n }\n \n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    fn get_tydesc<T>() -> *();\n-    fn size_of<T>() -> uint;\n-    fn pref_align_of<T>() -> uint;\n-    fn min_align_of<T>() -> uint;\n+pub mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        fn get_tydesc<T>() -> *();\n+        fn size_of<T>() -> uint;\n+        fn pref_align_of<T>() -> uint;\n+        fn min_align_of<T>() -> uint;\n+    }\n }\n \n-extern mod rustrt {\n-    #[rust_stack]\n-    unsafe fn rust_upcall_fail(expr: *c_char, file: *c_char, line: size_t);\n+pub mod rustrt {\n+    use libc::{c_char, size_t};\n+\n+    pub extern {\n+        #[rust_stack]\n+        unsafe fn rust_upcall_fail(expr: *c_char,\n+                                   file: *c_char,\n+                                   line: size_t);\n+    }\n }\n \n /// Compares contents of two pointers using the default method."}, {"sha": "0a471e6dfa03202f2def5a1bde69585b4bf11506", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -938,15 +938,17 @@ fn test_spawn_sched_childs_on_default_sched() {\n     po.recv();\n }\n \n-#[nolink]\n #[cfg(test)]\n-extern mod testrt {\n-    unsafe fn rust_dbg_lock_create() -> *libc::c_void;\n-    unsafe fn rust_dbg_lock_destroy(lock: *libc::c_void);\n-    unsafe fn rust_dbg_lock_lock(lock: *libc::c_void);\n-    unsafe fn rust_dbg_lock_unlock(lock: *libc::c_void);\n-    unsafe fn rust_dbg_lock_wait(lock: *libc::c_void);\n-    unsafe fn rust_dbg_lock_signal(lock: *libc::c_void);\n+pub mod testrt {\n+    #[nolink]\n+    pub extern {\n+        unsafe fn rust_dbg_lock_create() -> *libc::c_void;\n+        unsafe fn rust_dbg_lock_destroy(lock: *libc::c_void);\n+        unsafe fn rust_dbg_lock_lock(lock: *libc::c_void);\n+        unsafe fn rust_dbg_lock_unlock(lock: *libc::c_void);\n+        unsafe fn rust_dbg_lock_wait(lock: *libc::c_void);\n+        unsafe fn rust_dbg_lock_signal(lock: *libc::c_void);\n+    }\n }\n \n #[test]"}, {"sha": "8f084343c1a17bda061b2a34d9cd22e89a11e7bb", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -36,18 +36,22 @@ pub mod extfmt;\n #[cfg(notest)]\n pub mod lang;\n \n-extern mod rustrt {\n-    pub unsafe fn rust_create_little_lock() -> rust_little_lock;\n-    pub unsafe fn rust_destroy_little_lock(lock: rust_little_lock);\n-    pub unsafe fn rust_lock_little_lock(lock: rust_little_lock);\n-    pub unsafe fn rust_unlock_little_lock(lock: rust_little_lock);\n-\n-    pub unsafe fn rust_raw_thread_start(f: &fn()) -> *raw_thread;\n-    pub unsafe fn rust_raw_thread_join_delete(thread: *raw_thread);\n+mod rustrt {\n+    use unstable::{raw_thread, rust_little_lock};\n+\n+    pub extern {\n+        pub unsafe fn rust_create_little_lock() -> rust_little_lock;\n+        pub unsafe fn rust_destroy_little_lock(lock: rust_little_lock);\n+        pub unsafe fn rust_lock_little_lock(lock: rust_little_lock);\n+        pub unsafe fn rust_unlock_little_lock(lock: rust_little_lock);\n+\n+        pub unsafe fn rust_raw_thread_start(f: &fn()) -> *raw_thread;\n+        pub unsafe fn rust_raw_thread_join_delete(thread: *raw_thread);\n+    }\n }\n \n #[allow(non_camel_case_types)] // runtime type\n-type raw_thread = libc::c_void;\n+pub type raw_thread = libc::c_void;\n \n /**\n \n@@ -204,7 +208,7 @@ impl<T:Owned> Clone for SharedMutableState<T> {\n /****************************************************************************/\n \n #[allow(non_camel_case_types)] // runtime type\n-type rust_little_lock = *libc::c_void;\n+pub type rust_little_lock = *libc::c_void;\n \n struct LittleLock {\n     l: rust_little_lock,"}, {"sha": "58aba77e41effb3911d83424067af45ead2a3cdf", "filename": "src/libcore/unstable/at_exit.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Funstable%2Fat_exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Funstable%2Fat_exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fat_exit.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -37,8 +37,12 @@ pub fn at_exit(f: ~fn()) {\n // NB: The double pointer indirection here is because ~fn() is a fat\n // pointer and due to FFI problems I am more comfortable making the\n // interface use a normal pointer\n-extern mod rustrt {\n-    fn rust_register_exit_function(runner: *c_void, f: ~~fn());\n+mod rustrt {\n+    use libc::c_void;\n+\n+    pub extern {\n+        fn rust_register_exit_function(runner: *c_void, f: ~~fn());\n+    }\n }\n \n struct ExitFunctions {"}, {"sha": "db0b1cc33cd671d11753d634ec8de0276eaade58", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -26,12 +26,16 @@ pub const FROZEN_BIT: uint = 0x80000000;\n #[cfg(target_word_size = \"64\")]\n pub const FROZEN_BIT: uint = 0x8000000000000000;\n \n-pub extern mod rustrt {\n-    #[rust_stack]\n-    unsafe fn rust_upcall_malloc(td: *c_char, size: uintptr_t) -> *c_char;\n+pub mod rustrt {\n+    use libc::{c_char, uintptr_t};\n \n-    #[rust_stack]\n-    unsafe fn rust_upcall_free(ptr: *c_char);\n+    pub extern {\n+        #[rust_stack]\n+        unsafe fn rust_upcall_malloc(td: *c_char, size: uintptr_t) -> *c_char;\n+\n+        #[rust_stack]\n+        unsafe fn rust_upcall_free(ptr: *c_char);\n+    }\n }\n \n #[lang=\"fail_\"]"}, {"sha": "c749cbad3de4554659c26a2bcb1bb95d6f024bb1", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd271adc75799435a920f1afaa0488e43badc749/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=fd271adc75799435a920f1afaa0488e43badc749", "patch": "@@ -28,16 +28,22 @@ use sys;\n use uint;\n use vec;\n \n-#[abi = \"cdecl\"]\n-pub extern mod rustrt {\n-    // These names are terrible. reserve_shared applies\n-    // to ~[] and reserve_shared_actual applies to @[].\n-    unsafe fn vec_reserve_shared(++t: *sys::TypeDesc,\n-                                 ++v: **raw::VecRepr,\n-                                 ++n: libc::size_t);\n-    unsafe fn vec_reserve_shared_actual(++t: *sys::TypeDesc,\n-                                        ++v: **raw::VecRepr,\n-                                        ++n: libc::size_t);\n+pub mod rustrt {\n+    use libc;\n+    use sys;\n+    use vec::raw;\n+\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        // These names are terrible. reserve_shared applies\n+        // to ~[] and reserve_shared_actual applies to @[].\n+        unsafe fn vec_reserve_shared(++t: *sys::TypeDesc,\n+                                     ++v: **raw::VecRepr,\n+                                     ++n: libc::size_t);\n+        unsafe fn vec_reserve_shared_actual(++t: *sys::TypeDesc,\n+                                            ++v: **raw::VecRepr,\n+                                            ++n: libc::size_t);\n+    }\n }\n \n /// Returns true if a vector contains no elements"}]}