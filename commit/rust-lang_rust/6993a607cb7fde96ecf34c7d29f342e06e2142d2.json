{"sha": "6993a607cb7fde96ecf34c7d29f342e06e2142d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OTNhNjA3Y2I3ZmRlOTZlY2YzNGM3ZDI5ZjM0MmUwNmUyMTQyZDI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-28T23:38:10Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-28T23:38:10Z"}, "message": "Simplify", "tree": {"sha": "724d29aee980ba22a960dd59b84b45fc325dd96a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/724d29aee980ba22a960dd59b84b45fc325dd96a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6993a607cb7fde96ecf34c7d29f342e06e2142d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6993a607cb7fde96ecf34c7d29f342e06e2142d2", "html_url": "https://github.com/rust-lang/rust/commit/6993a607cb7fde96ecf34c7d29f342e06e2142d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6993a607cb7fde96ecf34c7d29f342e06e2142d2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99f1e66997798fdf7895ac58fc07ccb714545d88", "url": "https://api.github.com/repos/rust-lang/rust/commits/99f1e66997798fdf7895ac58fc07ccb714545d88", "html_url": "https://github.com/rust-lang/rust/commit/99f1e66997798fdf7895ac58fc07ccb714545d88"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "9f03c6467bf52bb1e4cbf372a8d5225ef49cc46d", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6993a607cb7fde96ecf34c7d29f342e06e2142d2/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6993a607cb7fde96ecf34c7d29f342e06e2142d2/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=6993a607cb7fde96ecf34c7d29f342e06e2142d2", "patch": "@@ -465,11 +465,12 @@ impl<'db> SemanticsImpl<'db> {\n         };\n         let sa = self.analyze(&parent);\n         let mut queue = vec![InFile::new(sa.file_id, token)];\n+        let mut cache = self.expansion_info_cache.borrow_mut();\n         let mut res = smallvec![];\n         while let Some(token) = queue.pop() {\n             self.db.unwind_if_cancelled();\n \n-            let mapped = (|| {\n+            let was_not_remapped = (|| {\n                 for node in token.value.ancestors() {\n                     match_ast! {\n                         match node {\n@@ -487,7 +488,6 @@ impl<'db> SemanticsImpl<'db> {\n                                     return None;\n                                 }\n                                 let file_id = sa.expand(self.db, token.with_value(&macro_call))?;\n-                                let mut cache = self.expansion_info_cache.borrow_mut();\n                                 let tokens = cache\n                                     .entry(file_id)\n                                     .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n@@ -503,36 +503,31 @@ impl<'db> SemanticsImpl<'db> {\n                                 return (queue.len() != len).then(|| ());\n                             },\n                             ast::Item(item) => {\n-                                match self.with_ctx(|ctx| ctx.item_to_macro_call(token.with_value(item))) {\n-                                    Some(call_id) => {\n-                                        let file_id = call_id.as_file();\n-                                        let mut cache = self.expansion_info_cache.borrow_mut();\n-                                        let tokens = cache\n-                                            .entry(file_id)\n-                                            .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n-                                            .as_ref()?\n-                                            .map_token_down(self.db.upcast(), None, token.as_ref())?;\n-\n-                                        let len = queue.len();\n-                                        queue.extend(tokens.inspect(|token| {\n-                                            if let Some(parent) = token.value.parent() {\n-                                                self.cache(find_root(&parent), token.file_id);\n-                                            }\n-                                        }));\n-                                        return (queue.len() != len).then(|| ());\n-                                    }\n-                                    None => {}\n+                                if let Some(call_id) = self.with_ctx(|ctx| ctx.item_to_macro_call(token.with_value(item.clone()))) {\n+                                    let file_id = call_id.as_file();\n+                                    let tokens = cache\n+                                        .entry(file_id)\n+                                        .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n+                                        .as_ref()?\n+                                        .map_token_down(self.db.upcast(), Some(item), token.as_ref())?;\n+\n+                                    let len = queue.len();\n+                                    queue.extend(tokens.inspect(|token| {\n+                                        if let Some(parent) = token.value.parent() {\n+                                            self.cache(find_root(&parent), token.file_id);\n+                                        }\n+                                    }));\n+                                    return (queue.len() != len).then(|| ());\n                                 }\n                             },\n                             _ => {}\n                         }\n                     }\n                 }\n                 None\n-            })();\n-            match mapped {\n-                Some(()) => (),\n-                None => res.push(token.value),\n+            })().is_none();\n+            if was_not_remapped {\n+                res.push(token.value)\n             }\n         }\n         res"}]}