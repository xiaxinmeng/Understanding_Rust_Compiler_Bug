{"sha": "8f2480420e5412e03d1b046be283573af312bdd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMjQ4MDQyMGU1NDEyZTAzZDFiMDQ2YmUyODM1NzNhZjMxMmJkZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-19T08:31:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-19T08:31:21Z"}, "message": "auto merge of #9932 : alexcrichton/rust/better-fmt-errors, r=cmr\n\nInstead of just saying \"unterminated format string\" and friends, instead print\r\ninformation about what was expected and what was found.\r\n\r\nCloses #9931", "tree": {"sha": "0176f143af64d5750072fde361dad0deeb6a9ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0176f143af64d5750072fde361dad0deeb6a9ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f2480420e5412e03d1b046be283573af312bdd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2480420e5412e03d1b046be283573af312bdd8", "html_url": "https://github.com/rust-lang/rust/commit/8f2480420e5412e03d1b046be283573af312bdd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f2480420e5412e03d1b046be283573af312bdd8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a1e3dc9a1649b5552d3221c558e6791b709336", "url": "https://api.github.com/repos/rust-lang/rust/commits/34a1e3dc9a1649b5552d3221c558e6791b709336", "html_url": "https://github.com/rust-lang/rust/commit/34a1e3dc9a1649b5552d3221c558e6791b709336"}, {"sha": "a447c3ca165dda7aa31d2be76ce1ff35a7884579", "url": "https://api.github.com/repos/rust-lang/rust/commits/a447c3ca165dda7aa31d2be76ce1ff35a7884579", "html_url": "https://github.com/rust-lang/rust/commit/a447c3ca165dda7aa31d2be76ce1ff35a7884579"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "504050f9a771a73026cea8aa88c03ae6dd838504", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8f2480420e5412e03d1b046be283573af312bdd8/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2480420e5412e03d1b046be283573af312bdd8/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=8f2480420e5412e03d1b046be283573af312bdd8", "patch": "@@ -170,9 +170,7 @@ impl<'self> Iterator<Piece<'self>> for Parser<'self> {\n             Some((_, '{')) => {\n                 self.cur.next();\n                 let ret = Some(Argument(self.argument()));\n-                if !self.consume('}') {\n-                    self.err(~\"unterminated format string\");\n-                }\n+                self.must_consume('}');\n                 ret\n             }\n             Some((pos, '\\\\')) => {\n@@ -223,6 +221,25 @@ impl<'self> Parser<'self> {\n         }\n     }\n \n+    /// Forces consumption of the specified character. If the character is not\n+    /// found, an error is emitted.\n+    fn must_consume(&mut self, c: char) {\n+        self.ws();\n+        match self.cur.clone().next() {\n+            Some((_, maybe)) if c == maybe => {\n+                self.cur.next();\n+            }\n+            Some((_, other)) => {\n+                parse_error::cond.raise(\n+                    format!(\"expected `{}` but found `{}`\", c, other));\n+            }\n+            None => {\n+                parse_error::cond.raise(\n+                    format!(\"expected `{}` but string was terminated\", c));\n+            }\n+        }\n+    }\n+\n     /// Attempts to consume any amount of whitespace followed by a character\n     fn wsconsume(&mut self, c: char) -> bool {\n         self.ws(); self.consume(c)\n@@ -386,15 +403,11 @@ impl<'self> Parser<'self> {\n         self.ws();\n         match self.word() {\n             \"select\" => {\n-                if !self.wsconsume(',') {\n-                    self.err(~\"`select` must be followed by `,`\");\n-                }\n+                self.must_consume(',');\n                 Some(self.select())\n             }\n             \"plural\" => {\n-                if !self.wsconsume(',') {\n-                    self.err(~\"`plural` must be followed by `,`\");\n-                }\n+                self.must_consume(',');\n                 Some(self.plural())\n             }\n             \"\" => {\n@@ -420,15 +433,11 @@ impl<'self> Parser<'self> {\n                 self.err(~\"cannot have an empty selector\");\n                 break\n             }\n-            if !self.wsconsume('{') {\n-                self.err(~\"selector must be followed by `{`\");\n-            }\n+            self.must_consume('{');\n             self.depth += 1;\n             let pieces = self.collect();\n             self.depth -= 1;\n-            if !self.wsconsume('}') {\n-                self.err(~\"selector case must be terminated by `}`\");\n-            }\n+            self.must_consume('}');\n             if selector == \"other\" {\n                 if !other.is_none() {\n                     self.err(~\"multiple `other` statements in `select\");\n@@ -475,9 +484,7 @@ impl<'self> Parser<'self> {\n                             self.err(format!(\"expected `offset`, found `{}`\",\n                                              word));\n                         } else {\n-                            if !self.consume(':') {\n-                                self.err(~\"`offset` must be followed by `:`\");\n-                            }\n+                            self.must_consume(':');\n                             match self.integer() {\n                                 Some(i) => { offset = Some(i); }\n                                 None => {\n@@ -524,15 +531,11 @@ impl<'self> Parser<'self> {\n                     }\n                 }\n             };\n-            if !self.wsconsume('{') {\n-                self.err(~\"selector must be followed by `{`\");\n-            }\n+            self.must_consume('{');\n             self.depth += 1;\n             let pieces = self.collect();\n             self.depth -= 1;\n-            if !self.wsconsume('}') {\n-                self.err(~\"selector case must be terminated by `}`\");\n-            }\n+            self.must_consume('}');\n             if isother {\n                 if !other.is_none() {\n                     self.err(~\"multiple `other` statements in `select\");"}, {"sha": "bf8f625f922dffdbadf830c93ba28446575270aa", "filename": "src/test/compile-fail/ifmt-bad-arg.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8f2480420e5412e03d1b046be283573af312bdd8/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2480420e5412e03d1b046be283573af312bdd8/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs?ref=8f2480420e5412e03d1b046be283573af312bdd8", "patch": "@@ -36,20 +36,20 @@ fn main() {\n \n     // bad syntax of the format string\n \n-    format!(\"{\"); //~ ERROR: unterminated format string\n+    format!(\"{\"); //~ ERROR: expected `}` but string was terminated\n     format!(\"\\\\ \"); //~ ERROR: invalid escape\n     format!(\"\\\\\"); //~ ERROR: expected an escape\n \n     format!(\"{0, }\", 1); //~ ERROR: expected method\n     format!(\"{0, foo}\", 1); //~ ERROR: unknown method\n-    format!(\"{0, select}\", \"a\"); //~ ERROR: must be followed by\n-    format!(\"{0, plural}\", 1); //~ ERROR: must be followed by\n+    format!(\"{0, select}\", \"a\"); //~ ERROR: expected `,` but found `}`\n+    format!(\"{0, plural}\", 1); //~ ERROR: expected `,` but found `}`\n \n-    format!(\"{0, select, a{{}\", 1); //~ ERROR: must be terminated\n+    format!(\"{0, select, a{{}\", 1); //~ ERROR: expected `}` but string was terminated\n     format!(\"{0, select, {} other{}}\", \"a\"); //~ ERROR: empty selector\n     format!(\"{0, select, other{} other{}}\", \"a\"); //~ ERROR: multiple `other`\n     format!(\"{0, plural, offset: other{}}\", \"a\"); //~ ERROR: must be an integer\n-    format!(\"{0, plural, offset 1 other{}}\", \"a\"); //~ ERROR: be followed by `:`\n+    format!(\"{0, plural, offset 1 other{}}\", \"a\"); //~ ERROR: expected `:` but found `1`\n     format!(\"{0, plural, =a{} other{}}\", \"a\"); //~ ERROR: followed by an integer\n     format!(\"{0, plural, a{} other{}}\", \"a\"); //~ ERROR: unexpected plural\n     format!(\"{0, select, a{}}\", \"a\"); //~ ERROR: must provide an `other`"}]}