{"sha": "6657d4e7ffac84cb51d3a7d9137132480992817e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NTdkNGU3ZmZhYzg0Y2I1MWQzYTdkOTEzNzEzMjQ4MDk5MjgxN2U=", "commit": {"author": {"name": "Zaki Manian", "email": "zaki@manian.org", "date": "2017-09-03T19:50:02Z"}, "committer": {"name": "Zaki Manian", "email": "zaki@manian.org", "date": "2017-09-03T19:50:02Z"}, "message": "Remove direct call for Deref\n\nRemove \"assigns\" from the lint", "tree": {"sha": "92bd44dc94936261dd303ee6aee4007d8ec4ba5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92bd44dc94936261dd303ee6aee4007d8ec4ba5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6657d4e7ffac84cb51d3a7d9137132480992817e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6657d4e7ffac84cb51d3a7d9137132480992817e", "html_url": "https://github.com/rust-lang/rust/commit/6657d4e7ffac84cb51d3a7d9137132480992817e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6657d4e7ffac84cb51d3a7d9137132480992817e/comments", "author": {"login": "zmanian", "id": 93434, "node_id": "MDQ6VXNlcjkzNDM0", "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmanian", "html_url": "https://github.com/zmanian", "followers_url": "https://api.github.com/users/zmanian/followers", "following_url": "https://api.github.com/users/zmanian/following{/other_user}", "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions", "organizations_url": "https://api.github.com/users/zmanian/orgs", "repos_url": "https://api.github.com/users/zmanian/repos", "events_url": "https://api.github.com/users/zmanian/events{/privacy}", "received_events_url": "https://api.github.com/users/zmanian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zmanian", "id": 93434, "node_id": "MDQ6VXNlcjkzNDM0", "avatar_url": "https://avatars.githubusercontent.com/u/93434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zmanian", "html_url": "https://github.com/zmanian", "followers_url": "https://api.github.com/users/zmanian/followers", "following_url": "https://api.github.com/users/zmanian/following{/other_user}", "gists_url": "https://api.github.com/users/zmanian/gists{/gist_id}", "starred_url": "https://api.github.com/users/zmanian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zmanian/subscriptions", "organizations_url": "https://api.github.com/users/zmanian/orgs", "repos_url": "https://api.github.com/users/zmanian/repos", "events_url": "https://api.github.com/users/zmanian/events{/privacy}", "received_events_url": "https://api.github.com/users/zmanian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc", "html_url": "https://github.com/rust-lang/rust/commit/e0caf26586caf8df3b683f4fe6ee4979a3c9e8dc"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "ad55d0b09731b8d176ca497b99d39cb5ba52373c", "filename": "clippy_lints/src/is_unit_expr.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6657d4e7ffac84cb51d3a7d9137132480992817e/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6657d4e7ffac84cb51d3a7d9137132480992817e/clippy_lints%2Fsrc%2Fis_unit_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fis_unit_expr.rs?ref=6657d4e7ffac84cb51d3a7d9137132480992817e", "patch": "@@ -1,6 +1,5 @@\n use rustc::lint::*;\n use syntax::ast::*;\n-use std::ops::Deref;\n use syntax::ext::quote::rt::Span;\n use utils::span_note_and_lint;\n \n@@ -43,7 +42,7 @@ impl EarlyLintPass for UnitExpr {\n                     cx,\n                     UNIT_EXPR,\n                     expr.span,\n-                    \"This expression assigns the Unit type ()\",\n+                        \"This expression evaluates to the Unit type ()\",\n                     span,\n                     \"Consider removing the trailing semicolon\",\n                 );\n@@ -56,7 +55,7 @@ impl EarlyLintPass for UnitExpr {\n                         cx,\n                         UNIT_EXPR,\n                         expr.span,\n-                        \"This expression assigns the Unit type ()\",\n+                        \"This expression evaluates to the Unit type ()\",\n                         span,\n                         \"Consider removing the trailing semicolon\",\n                     );\n@@ -70,7 +69,7 @@ impl EarlyLintPass for UnitExpr {\n                         cx,\n                         UNIT_EXPR,\n                         expr.span,\n-                        \"This expression assigns the Unit type ()\",\n+                        \"This expression evaluates to the Unit type ()\",\n                         span,\n                         \"Consider removing the trailing semicolon\",\n                     );\n@@ -90,7 +89,7 @@ impl EarlyLintPass for UnitExpr {\n                         cx,\n                         UNIT_EXPR,\n                         expr.span,\n-                        \"This expression assigns the Unit type ()\",\n+                        \"This expression evaluates to the Unit type ()\",\n                         span,\n                         \"Consider removing the trailing semicolon\",\n                     );\n@@ -109,7 +108,7 @@ fn is_unit_expr(expr: &Expr) -> Option<Span> {\n         ExprKind::If(_, ref then, ref else_) => {\n             let check_then = check_last_stmt_in_block(then);\n             if let Some(ref else_) = *else_ {\n-                let check_else = is_unit_expr(else_.deref());\n+                let check_else = is_unit_expr(&else_);\n                 if let Some(ref expr_else) = check_else {\n                     return Some(expr_else.clone());\n                 }"}]}