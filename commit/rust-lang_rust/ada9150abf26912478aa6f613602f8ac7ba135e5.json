{"sha": "ada9150abf26912478aa6f613602f8ac7ba135e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYTkxNTBhYmYyNjkxMjQ3OGFhNmY2MTM2MDJmOGFjN2JhMTM1ZTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-28T02:07:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:59Z"}, "message": "libsyntax: Correctly de-`@mut` the pretty printer writer", "tree": {"sha": "b190b9886e3d14fef2eea1c4b928bb7723eda4c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b190b9886e3d14fef2eea1c4b928bb7723eda4c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ada9150abf26912478aa6f613602f8ac7ba135e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ada9150abf26912478aa6f613602f8ac7ba135e5", "html_url": "https://github.com/rust-lang/rust/commit/ada9150abf26912478aa6f613602f8ac7ba135e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ada9150abf26912478aa6f613602f8ac7ba135e5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f0270544af19bf51b0088c93fe5cf58a8eccbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f0270544af19bf51b0088c93fe5cf58a8eccbe", "html_url": "https://github.com/rust-lang/rust/commit/39f0270544af19bf51b0088c93fe5cf58a8eccbe"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "917b8d2e391c117ce1c01fbcac1fea9ef70a7996", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ada9150abf26912478aa6f613602f8ac7ba135e5/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada9150abf26912478aa6f613602f8ac7ba135e5/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ada9150abf26912478aa6f613602f8ac7ba135e5", "patch": "@@ -1319,7 +1319,7 @@ mod test {\n     }\n \n     fn fake_print_crate(crate: &ast::Crate) {\n-        let out = @mut std::io::stderr() as @mut std::io::Writer;\n+        let mut out = ~std::io::stderr() as ~std::io::Writer;\n         let s = pprust::rust_printer(out, get_ident_interner());\n         pprust::print_crate_(s, crate);\n     }"}, {"sha": "45e9641c71b2dbf53defa166d98bb11afd97e05f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ada9150abf26912478aa6f613602f8ac7ba135e5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada9150abf26912478aa6f613602f8ac7ba135e5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ada9150abf26912478aa6f613602f8ac7ba135e5", "patch": "@@ -122,7 +122,7 @@ pub fn print_crate(cm: @CodeMap,\n                    span_diagnostic: @diagnostic::SpanHandler,\n                    crate: &ast::Crate,\n                    filename: @str,\n-                   input: @mut io::Reader,\n+                   input: &mut io::Reader,\n                    out: ~io::Writer,\n                    ann: @pp_ann,\n                    is_expanded: bool) {\n@@ -211,13 +211,8 @@ pub fn fun_to_str(decl: &ast::fn_decl, purity: ast::purity, name: ast::Ident,\n     end(&mut s); // Close the head box\n     end(&mut s); // Close the outer box\n     eof(&mut s.s);\n-\n-    // XXX(pcwalton): Need checked downcasts.\n     unsafe {\n-        let (_, wr): (uint, ~MemWriter) = cast::transmute(s.s.out);\n-        let result = str::from_utf8_owned(wr.inner_ref().to_owned());\n-        cast::forget(wr);\n-        result\n+        get_mem_writer(&mut s.s.out)\n     }\n }\n \n@@ -230,13 +225,8 @@ pub fn block_to_str(blk: &ast::Block, intr: @ident_interner) -> ~str {\n     ibox(&mut s, 0u);\n     print_block(&mut s, blk);\n     eof(&mut s.s);\n-\n-    // XXX(pcwalton): Need checked downcasts.\n     unsafe {\n-        let (_, wr): (uint, ~MemWriter) = cast::transmute(s.s.out);\n-        let result = str::from_utf8_owned(wr.inner_ref().to_owned());\n-        cast::forget(wr);\n-        result\n+        get_mem_writer(&mut s.s.out)\n     }\n }\n \n@@ -2318,17 +2308,23 @@ pub fn print_string(s: &mut ps, st: &str, style: ast::StrStyle) {\n     word(&mut s.s, st);\n }\n \n+// XXX(pcwalton): A nasty function to extract the string from an `io::Writer`\n+// that we \"know\" to be a `MemWriter` that works around the lack of checked\n+// downcasts.\n+unsafe fn get_mem_writer(writer: &mut ~io::Writer) -> ~str {\n+    let (_, wr): (uint, ~MemWriter) = cast::transmute_copy(writer);\n+    let result = str::from_utf8_owned(wr.inner_ref().to_owned());\n+    cast::forget(wr);\n+    result\n+}\n+\n pub fn to_str<T>(t: &T, f: |&mut ps, &T|, intr: @ident_interner) -> ~str {\n     let wr = ~MemWriter::new();\n     let mut s = rust_printer(wr as ~io::Writer, intr);\n     f(&mut s, t);\n     eof(&mut s.s);\n-    // XXX(pcwalton): Need checked downcasts.\n     unsafe {\n-        let (_, wr): (uint, ~MemWriter) = cast::transmute(s.s.out);\n-        let result = str::from_utf8_owned(wr.inner_ref().to_owned());\n-        cast::forget(wr);\n-        result\n+        get_mem_writer(&mut s.s.out)\n     }\n }\n "}]}