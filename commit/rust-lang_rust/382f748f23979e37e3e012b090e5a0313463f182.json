{"sha": "382f748f23979e37e3e012b090e5a0313463f182", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MmY3NDhmMjM5NzllMzdlM2UwMTJiMDkwZTVhMDMxMzQ2M2YxODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-11T07:44:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-11T07:44:16Z"}, "message": "Auto merge of #85100 - HKalbasi:issue-68049-fix, r=Aaron1011\n\nFix invalid suggestion of changing impl trait signature\n\nFix #68049", "tree": {"sha": "a46c0160d8d555947f70025c70cd25a3c93ae020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a46c0160d8d555947f70025c70cd25a3c93ae020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/382f748f23979e37e3e012b090e5a0313463f182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/382f748f23979e37e3e012b090e5a0313463f182", "html_url": "https://github.com/rust-lang/rust/commit/382f748f23979e37e3e012b090e5a0313463f182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/382f748f23979e37e3e012b090e5a0313463f182/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe62c6e2958abfe54a9410a24a5750baf4c157e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe62c6e2958abfe54a9410a24a5750baf4c157e0", "html_url": "https://github.com/rust-lang/rust/commit/fe62c6e2958abfe54a9410a24a5750baf4c157e0"}, {"sha": "1f20966e90cd964842054c284fb0ec5e8de6df7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f20966e90cd964842054c284fb0ec5e8de6df7b", "html_url": "https://github.com/rust-lang/rust/commit/1f20966e90cd964842054c284fb0ec5e8de6df7b"}], "stats": {"total": 159, "additions": 149, "deletions": 10}, "files": [{"sha": "1e2714a2c1b2b9f00b1e07f85740a9f0c7909ea6", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 82, "deletions": 10, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/382f748f23979e37e3e012b090e5a0313463f182/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382f748f23979e37e3e012b090e5a0313463f182/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=382f748f23979e37e3e012b090e5a0313463f182", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::mir::{Mutability, Place, PlaceRef, ProjectionElem};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::{\n     hir::place::PlaceBase,\n-    mir::{self, ClearCrossCrate, Local, LocalDecl, LocalInfo, Location},\n+    mir::{self, ClearCrossCrate, Local, LocalDecl, LocalInfo, LocalKind, Location},\n };\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n@@ -424,15 +424,28 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                         match label {\n                             Some((true, err_help_span, suggested_code)) => {\n-                                err.span_suggestion(\n-                                    err_help_span,\n-                                    &format!(\n-                                        \"consider changing this to be a mutable {}\",\n-                                        pointer_desc\n-                                    ),\n-                                    suggested_code,\n-                                    Applicability::MachineApplicable,\n-                                );\n+                                let (is_trait_sig, local_trait) = self.is_error_in_trait(local);\n+                                if !is_trait_sig {\n+                                    err.span_suggestion(\n+                                        err_help_span,\n+                                        &format!(\n+                                            \"consider changing this to be a mutable {}\",\n+                                            pointer_desc\n+                                        ),\n+                                        suggested_code,\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                } else if let Some(x) = local_trait {\n+                                    err.span_suggestion(\n+                                        x,\n+                                        &format!(\n+                                            \"consider changing that to be a mutable {}\",\n+                                            pointer_desc\n+                                        ),\n+                                        suggested_code,\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                }\n                             }\n                             Some((false, err_label_span, message)) => {\n                                 err.span_label(err_label_span, &message);\n@@ -503,6 +516,65 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         err.buffer(&mut self.errors_buffer);\n     }\n \n+    /// User cannot make signature of a trait mutable without changing the\n+    /// trait. So we find if this error belongs to a trait and if so we move\n+    /// suggestion to the trait or disable it if it is out of scope of this crate\n+    fn is_error_in_trait(&self, local: Local) -> (bool, Option<Span>) {\n+        if self.body.local_kind(local) != LocalKind::Arg {\n+            return (false, None);\n+        }\n+        let hir_map = self.infcx.tcx.hir();\n+        let my_def = self.body.source.def_id();\n+        let my_hir = hir_map.local_def_id_to_hir_id(my_def.as_local().unwrap());\n+        let td = if let Some(a) =\n+            self.infcx.tcx.impl_of_method(my_def).and_then(|x| self.infcx.tcx.trait_id_of_impl(x))\n+        {\n+            a\n+        } else {\n+            return (false, None);\n+        };\n+        (\n+            true,\n+            td.as_local().and_then(|tld| {\n+                let h = hir_map.local_def_id_to_hir_id(tld);\n+                match hir_map.find(h) {\n+                    Some(Node::Item(hir::Item {\n+                        kind: hir::ItemKind::Trait(_, _, _, _, items),\n+                        ..\n+                    })) => {\n+                        let mut f_in_trait_opt = None;\n+                        for hir::TraitItemRef { id: fi, kind: k, .. } in *items {\n+                            let hi = fi.hir_id();\n+                            if !matches!(k, hir::AssocItemKind::Fn { .. }) {\n+                                continue;\n+                            }\n+                            if hir_map.name(hi) != hir_map.name(my_hir) {\n+                                continue;\n+                            }\n+                            f_in_trait_opt = Some(hi);\n+                            break;\n+                        }\n+                        f_in_trait_opt.and_then(|f_in_trait| match hir_map.find(f_in_trait) {\n+                            Some(Node::TraitItem(hir::TraitItem {\n+                                kind:\n+                                    hir::TraitItemKind::Fn(\n+                                        hir::FnSig { decl: hir::FnDecl { inputs, .. }, .. },\n+                                        _,\n+                                    ),\n+                                ..\n+                            })) => {\n+                                let hir::Ty { span, .. } = inputs[local.index() - 1];\n+                                Some(span)\n+                            }\n+                            _ => None,\n+                        })\n+                    }\n+                    _ => None,\n+                }\n+            }),\n+        )\n+    }\n+\n     // point to span of upvar making closure call require mutable borrow\n     fn show_mutating_upvar(\n         &self,"}, {"sha": "0acb7b1bf2b787439d6852e48c96bf729dad7e41", "filename": "src/test/ui/suggestions/issue-68049-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/382f748f23979e37e3e012b090e5a0313463f182/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382f748f23979e37e3e012b090e5a0313463f182/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-1.rs?ref=382f748f23979e37e3e012b090e5a0313463f182", "patch": "@@ -0,0 +1,16 @@\n+use std::alloc::{GlobalAlloc, Layout};\n+\n+struct Test(u32);\n+\n+unsafe impl GlobalAlloc for Test {\n+    unsafe fn alloc(&self, _layout: Layout) -> *mut u8 {\n+        self.0 += 1; //~ ERROR cannot assign\n+        0 as *mut u8\n+    }\n+\n+    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {\n+        unimplemented!();\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "32367d2d0cf213b1acc49cd88865911899572709", "filename": "src/test/ui/suggestions/issue-68049-1.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/382f748f23979e37e3e012b090e5a0313463f182/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/382f748f23979e37e3e012b090e5a0313463f182/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-1.stderr?ref=382f748f23979e37e3e012b090e5a0313463f182", "patch": "@@ -0,0 +1,9 @@\n+error[E0594]: cannot assign to `self.0` which is behind a `&` reference\n+  --> $DIR/issue-68049-1.rs:7:9\n+   |\n+LL |         self.0 += 1;\n+   |         ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "1c3430c14e9f23f101c8cfd41c650da81eab6f07", "filename": "src/test/ui/suggestions/issue-68049-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/382f748f23979e37e3e012b090e5a0313463f182/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/382f748f23979e37e3e012b090e5a0313463f182/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.rs?ref=382f748f23979e37e3e012b090e5a0313463f182", "patch": "@@ -0,0 +1,21 @@\n+trait Hello {\n+  fn example(&self, input: &i32); // should suggest here\n+}\n+\n+struct Test1(i32);\n+\n+impl Hello for Test1 {\n+  fn example(&self, input: &i32) { // should not suggest here\n+      *input = self.0; //~ ERROR cannot assign\n+  }\n+}\n+\n+struct Test2(i32);\n+\n+impl Hello for Test2 {\n+  fn example(&self, input: &i32) { // should not suggest here\n+    self.0 += *input; //~ ERROR cannot assign\n+  }\n+}\n+\n+fn main() { }"}, {"sha": "f10a83c68a81b062a6cb84c8ab28b168f29ec447", "filename": "src/test/ui/suggestions/issue-68049-2.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/382f748f23979e37e3e012b090e5a0313463f182/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/382f748f23979e37e3e012b090e5a0313463f182/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-68049-2.stderr?ref=382f748f23979e37e3e012b090e5a0313463f182", "patch": "@@ -0,0 +1,21 @@\n+error[E0594]: cannot assign to `*input` which is behind a `&` reference\n+  --> $DIR/issue-68049-2.rs:9:7\n+   |\n+LL |   fn example(&self, input: &i32); // should suggest here\n+   |                            ---- help: consider changing that to be a mutable reference: `&mut i32`\n+...\n+LL |       *input = self.0;\n+   |       ^^^^^^^^^^^^^^^ `input` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0594]: cannot assign to `self.0` which is behind a `&` reference\n+  --> $DIR/issue-68049-2.rs:17:5\n+   |\n+LL |   fn example(&self, input: &i32); // should suggest here\n+   |              ----- help: consider changing that to be a mutable reference: `&mut self`\n+...\n+LL |     self.0 += *input;\n+   |     ^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0594`."}]}