{"sha": "0e8a64073c8d3f5493703ca0eba62b8b568c11ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOGE2NDA3M2M4ZDNmNTQ5MzcwM2NhMGViYTYyYjhiNTY4YzExY2U=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-19T16:23:43Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-22T08:58:01Z"}, "message": "debuginfo: Improved handling of function preludes.", "tree": {"sha": "eccd235044435439494418733d41a8795e9e4465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eccd235044435439494418733d41a8795e9e4465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e8a64073c8d3f5493703ca0eba62b8b568c11ce", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8a64073c8d3f5493703ca0eba62b8b568c11ce", "html_url": "https://github.com/rust-lang/rust/commit/0e8a64073c8d3f5493703ca0eba62b8b568c11ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e8a64073c8d3f5493703ca0eba62b8b568c11ce/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c09e2b790eeacc90ed8b9bfa4d04bf6624ad51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c09e2b790eeacc90ed8b9bfa4d04bf6624ad51c", "html_url": "https://github.com/rust-lang/rust/commit/8c09e2b790eeacc90ed8b9bfa4d04bf6624ad51c"}], "stats": {"total": 122, "additions": 92, "deletions": 30}, "files": [{"sha": "c7e3c4a8ee069a470e02ae9aab762c451d2cac6e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e8a64073c8d3f5493703ca0eba62b8b568c11ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8a64073c8d3f5493703ca0eba62b8b568c11ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0e8a64073c8d3f5493703ca0eba62b8b568c11ce", "patch": "@@ -1886,6 +1886,7 @@ pub fn trans_closure(ccx: @mut CrateContext,\n                                param_substs,\n                                body.info(),\n                                Some(body.span));\n+\n     let raw_llargs = create_llargs_for_fn_args(fcx, self_arg, decl.inputs);\n \n     // Set the fixed stack segment flag if necessary.\n@@ -1905,6 +1906,11 @@ pub fn trans_closure(ccx: @mut CrateContext,\n \n     maybe_load_env(fcx);\n \n+    // Up until here, IR instructions for this function have explicitly not been annotated with\n+    // source code location, so we don't step into call setup code. From here on, source location\n+    // emitting should be enabled.\n+    debuginfo::start_emitting_source_locations(fcx);\n+\n     // This call to trans_block is the place where we bridge between\n     // translation calls that don't have a return value (trans_crate,\n     // trans_mod, trans_item, et cetera) and those that do"}, {"sha": "f8f29ec47e426540d206597ca6b9c731c74dbf34", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 84, "deletions": 28, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/0e8a64073c8d3f5493703ca0eba62b8b568c11ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8a64073c8d3f5493703ca0eba62b8b568c11ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=0e8a64073c8d3f5493703ca0eba62b8b568c11ce", "patch": "@@ -96,7 +96,7 @@ pub struct DebugContext {\n     priv crate_file: ~str,\n     priv llcontext: ContextRef,\n     priv builder: DIBuilderRef,\n-    priv curr_loc: (uint, uint),\n+    priv curr_loc: DebugLocation,\n     priv created_files: HashMap<~str, DIFile>,\n     priv created_types: HashMap<uint, DIType>,\n }\n@@ -111,7 +111,7 @@ impl DebugContext {\n             crate_file: crate,\n             llcontext: llcontext,\n             builder: builder,\n-            curr_loc: (0, 0),\n+            curr_loc: UnknownLocation,\n             created_files: HashMap::new(),\n             created_types: HashMap::new(),\n         };\n@@ -122,6 +122,7 @@ pub struct FunctionDebugContext {\n     priv scope_map: HashMap<ast::NodeId, DIScope>,\n     priv fn_metadata: DISubprogram,\n     priv argument_counter: uint,\n+    priv source_locations_enabled: bool,\n }\n \n /// Create any deferred debug metadata nodes\n@@ -202,7 +203,7 @@ pub fn create_self_argument_metadata(bcx: @mut Block,\n         }\n     };\n \n-    set_debug_location(cx, scope, loc.line, loc.col.to_uint());\n+    set_debug_location(cx, DebugLocation::new(scope, loc.line, *loc.col));\n     unsafe {\n         let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(\n             DIB(cx),\n@@ -212,6 +213,7 @@ pub fn create_self_argument_metadata(bcx: @mut Block,\n \n         llvm::LLVMSetInstDebugLocation(trans::build::B(bcx).llbuilder, instr);\n     }\n+    set_debug_location(cx, UnknownLocation);\n }\n \n /// Creates debug information for the given function argument.\n@@ -274,7 +276,7 @@ pub fn create_argument_metadata(bcx: @mut Block,\n             }\n         };\n \n-        set_debug_location(cx, scope, loc.line, loc.col.to_uint());\n+        set_debug_location(cx, DebugLocation::new(scope, loc.line, *loc.col));\n         unsafe {\n             let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(\n                 DIB(cx),\n@@ -284,28 +286,39 @@ pub fn create_argument_metadata(bcx: @mut Block,\n \n             llvm::LLVMSetInstDebugLocation(trans::build::B(bcx).llbuilder, instr);\n         }\n+        set_debug_location(cx, UnknownLocation);\n     }\n }\n \n /// Sets the current debug location at the beginning of the span.\n ///\n /// Maps to a call to llvm::LLVMSetCurrentDebugLocation(...). The node_id parameter is used to\n /// reliably find the correct visibility scope for the code position.\n-pub fn update_source_pos(fcx: &FunctionContext,\n-                         node_id: ast::NodeId,\n-                         span: span) {\n+pub fn set_source_location(fcx: &FunctionContext,\n+                           node_id: ast::NodeId,\n+                           span: span) {\n     let cx: &mut CrateContext = fcx.ccx;\n \n     if !cx.sess.opts.debuginfo || (*span.lo == 0 && *span.hi == 0) {\n         return;\n     }\n \n-    debug!(\"update_source_pos: %s\", cx.sess.codemap.span_to_str(span));\n+    debug!(\"set_source_location: %s\", cx.sess.codemap.span_to_str(span));\n \n-    let loc = span_start(cx, span);\n-    let scope = scope_metadata(fcx, node_id, span);\n+    if fcx.debug_context.get_ref().source_locations_enabled {\n+        let loc = span_start(cx, span);\n+        let scope = scope_metadata(fcx, node_id, span);\n \n-    set_debug_location(cx, scope, loc.line, loc.col.to_uint());\n+        set_debug_location(cx, DebugLocation::new(scope, loc.line, *loc.col));\n+    } else {\n+        set_debug_location(cx, UnknownLocation);\n+    }\n+}\n+\n+pub fn start_emitting_source_locations(fcx: &mut FunctionContext) {\n+    for debug_context in fcx.debug_context.mut_iter() {\n+        debug_context.source_locations_enabled = true;\n+    }\n }\n \n pub fn create_function_debug_context(cx: &mut CrateContext,\n@@ -401,6 +414,8 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n         ptr::null()\n     };\n \n+    let scope_line = get_scope_line(cx, top_level_block, loc.line);\n+\n     let fn_metadata = do function_name.to_c_str().with_ref |function_name| {\n         unsafe {\n             llvm::LLVMDIBuilderCreateFunction(\n@@ -413,7 +428,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n                 function_type_metadata,\n                 false,\n                 true,\n-                loc.line as c_uint,\n+                scope_line as c_uint,\n                 FlagPrototyped as c_uint,\n                 cx.sess.opts.optimize != session::No,\n                 llfn,\n@@ -427,6 +442,7 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n         scope_map: HashMap::new(),\n         fn_metadata: fn_metadata,\n         argument_counter: 1,\n+        source_locations_enabled: false,\n     };\n \n     let arg_pats = do fn_decl.inputs.map |arg_ref| { arg_ref.pat };\n@@ -438,8 +454,6 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n                               fn_ast_id: ast::NodeId,\n                               fn_decl: &ast::fn_decl,\n                               param_substs: Option<@param_substs>) -> DIArray {\n-        //let cx = fcx.ccx;\n-\n         if !cx.sess.opts.extra_debuginfo {\n             return create_DIArray(DIB(cx), []);\n         }\n@@ -575,9 +589,22 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n \n         return create_DIArray(DIB(cx), template_params);\n     }\n-}\n-\n \n+    fn get_scope_line(cx: &CrateContext,\n+                      top_level_block: Option<&ast::Block>,\n+                      default: uint)\n+                   -> uint {\n+        match top_level_block {\n+            Some(&ast::Block { stmts: ref statements, _ }) if statements.len() > 0 => {\n+                span_start(cx, statements[0].span).line\n+            }\n+            Some(&ast::Block { expr: Some(@ref expr), _ }) => {\n+                span_start(cx, expr.span).line\n+            }\n+            _ => default\n+        }\n+    }\n+}\n \n //=-------------------------------------------------------------------------------------------------\n // Module-Internal debug info creation functions\n@@ -650,7 +677,7 @@ fn declare_local(bcx: @mut Block,\n         }\n     };\n \n-    set_debug_location(cx, scope, loc.line, loc.col.to_uint());\n+    set_debug_location(cx, DebugLocation::new(scope, loc.line, *loc.col));\n     unsafe {\n         let instr = llvm::LLVMDIBuilderInsertDeclareAtEnd(\n             DIB(cx),\n@@ -1409,22 +1436,51 @@ fn type_metadata(cx: &mut CrateContext,\n     return type_metadata;\n }\n \n-fn set_debug_location(cx: &mut CrateContext, scope: DIScope, line: uint, col: uint) {\n-    if dbg_cx(cx).curr_loc == (line, col) {\n+#[deriving(Eq)]\n+enum DebugLocation {\n+    KnownLocation { scope: DIScope, line: uint, col: uint },\n+    UnknownLocation\n+}\n+\n+impl DebugLocation {\n+    fn new(scope: DIScope, line: uint, col: uint) -> DebugLocation {\n+        KnownLocation {\n+            scope: scope,\n+            line: line,\n+            col: col,\n+        }\n+    }\n+}\n+\n+fn set_debug_location(cx: &mut CrateContext, debug_location: DebugLocation) {\n+    if debug_location == dbg_cx(cx).curr_loc {\n         return;\n     }\n-    debug!(\"setting debug location to %u %u\", line, col);\n-    dbg_cx(cx).curr_loc = (line, col);\n \n-    let elems = ~[C_i32(line as i32), C_i32(col as i32), scope, ptr::null()];\n-    unsafe {\n-        let dbg_loc = llvm::LLVMMDNodeInContext(\n-                dbg_cx(cx).llcontext,\n-                vec::raw::to_ptr(elems),\n-                elems.len() as c_uint);\n \n-        llvm::LLVMSetCurrentDebugLocation(cx.builder.B, dbg_loc);\n+    let metadata_node;\n+\n+    match debug_location {\n+        KnownLocation { scope, line, col } => {\n+            debug!(\"setting debug location to %u %u\", line, col);\n+            let elements = [C_i32(line as i32), C_i32(col as i32), scope, ptr::null()];\n+            unsafe {\n+                metadata_node = llvm::LLVMMDNodeInContext(dbg_cx(cx).llcontext,\n+                                                          vec::raw::to_ptr(elements),\n+                                                          elements.len() as c_uint);\n+            }\n+        }\n+        UnknownLocation => {\n+            debug!(\"clearing debug location \");\n+            metadata_node = ptr::null();\n+        }\n+    };\n+\n+    unsafe {\n+        llvm::LLVMSetCurrentDebugLocation(cx.builder.B, metadata_node);\n     }\n+\n+    dbg_cx(cx).curr_loc = debug_location;\n }\n \n //=-------------------------------------------------------------------------------------------------"}, {"sha": "4b051cb13b1bfe49b92440191a2f0a6c25122a5a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e8a64073c8d3f5493703ca0eba62b8b568c11ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8a64073c8d3f5493703ca0eba62b8b568c11ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=0e8a64073c8d3f5493703ca0eba62b8b568c11ce", "patch": "@@ -413,7 +413,7 @@ pub fn trans_into(bcx: @mut Block, expr: @ast::expr, dest: Dest) -> @mut Block {\n            dest.to_str(bcx.ccx()));\n     let _indenter = indenter();\n \n-    debuginfo::update_source_pos(bcx.fcx, expr.id, expr.span);\n+    debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n \n     let dest = {\n         if ty::type_is_voidish(ty) {\n@@ -485,7 +485,7 @@ fn trans_to_datum_unadjusted(bcx: @mut Block, expr: @ast::expr) -> DatumBlock {\n     debug!(\"trans_to_datum_unadjusted(expr=%s)\", bcx.expr_to_str(expr));\n     let _indenter = indenter();\n \n-    debuginfo::update_source_pos(bcx.fcx, expr.id, expr.span);\n+    debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n \n     match ty::expr_kind(bcx.tcx(), bcx.ccx().maps.method_map, expr) {\n         ty::LvalueExpr => {"}]}