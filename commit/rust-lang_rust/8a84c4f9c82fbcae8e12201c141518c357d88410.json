{"sha": "8a84c4f9c82fbcae8e12201c141518c357d88410", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhODRjNGY5YzgyZmJjYWU4ZTEyMjAxYzE0MTUxOGMzNTdkODg0MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-08T22:37:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-08T22:37:37Z"}, "message": "Auto merge of #77723 - jonas-schievink:rollup-htz44r4, r=jonas-schievink\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #76750 (Don't discourage implementing `core::fmt::Write`)\n - #77449 (BTreeMap: comment why drain_filter's size_hint is somewhat pessimistic)\n - #77660 ((docs): make mutex error comment consistent with codebase)\n - #77663 (Add compile fail test for issue 27675)\n - #77673 (Remove unnecessary lamda on emitter map.)\n - #77701 (Make `max_log_info` easily greppable (for figuring out why debug logging is disabled))\n - #77702 (Remove not needed lambda.)\n - #77710 (Update submodule llvm to get LVI bugfix)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "af5a86392d5cd688753b6aa264a1d1a01b072993", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5a86392d5cd688753b6aa264a1d1a01b072993"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a84c4f9c82fbcae8e12201c141518c357d88410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a84c4f9c82fbcae8e12201c141518c357d88410", "html_url": "https://github.com/rust-lang/rust/commit/8a84c4f9c82fbcae8e12201c141518c357d88410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a84c4f9c82fbcae8e12201c141518c357d88410/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3525087ada7018ef227b10846648660b7f07b6d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3525087ada7018ef227b10846648660b7f07b6d1", "html_url": "https://github.com/rust-lang/rust/commit/3525087ada7018ef227b10846648660b7f07b6d1"}, {"sha": "d252848c2e333c674691c37bff978eee073815a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d252848c2e333c674691c37bff978eee073815a5", "html_url": "https://github.com/rust-lang/rust/commit/d252848c2e333c674691c37bff978eee073815a5"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "066a61a7a7b5319c2fded4007478eccb177b4f23", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a84c4f9c82fbcae8e12201c141518c357d88410/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84c4f9c82fbcae8e12201c141518c357d88410/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=8a84c4f9c82fbcae8e12201c141518c357d88410", "patch": "@@ -155,8 +155,7 @@ pub fn run_compiler(\n             ),\n         }\n     }\n-    let diagnostic_output =\n-        emitter.map(|emitter| DiagnosticOutput::Raw(emitter)).unwrap_or(DiagnosticOutput::Default);\n+    let diagnostic_output = emitter.map_or(DiagnosticOutput::Default, DiagnosticOutput::Raw);\n     let matches = match handle_options(&args) {\n         Some(matches) => matches,\n         None => return Ok(()),"}, {"sha": "c1b359c7d0de5f0ca77bfeff9d25b6d7ed8f0eca", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a84c4f9c82fbcae8e12201c141518c357d88410/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84c4f9c82fbcae8e12201c141518c357d88410/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=8a84c4f9c82fbcae8e12201c141518c357d88410", "patch": "@@ -187,7 +187,7 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n         config = config.stack_size(size);\n     }\n \n-    let with_pool = move |pool: &rayon::ThreadPool| pool.install(move || f());\n+    let with_pool = move |pool: &rayon::ThreadPool| pool.install(f);\n \n     rustc_span::with_session_globals(edition, || {\n         rustc_span::SESSION_GLOBALS.with(|session_globals| {"}, {"sha": "6dc9eccbdfceb0cb81e0e4f5dc1074e1f0a0c72d", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a84c4f9c82fbcae8e12201c141518c357d88410/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/8a84c4f9c82fbcae8e12201c141518c357d88410/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=8a84c4f9c82fbcae8e12201c141518c357d88410", "patch": "@@ -382,6 +382,10 @@ changelog-seen = 1\n # Overrides the `debug-assertions` option, if defined.\n #\n # Defaults to rust.debug-assertions value\n+#\n+# If you see a message from `tracing` saying\n+# `max_level_info` is enabled and means logging won't be shown,\n+# set this value to `true`.\n #debug-logging = debug-assertions\n \n # Debuginfo level for most of Rust code, corresponds to the `-C debuginfo=N` option of `rustc`."}, {"sha": "606bf94f99867fe7d38e7b3074ced5820c68c8d8", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a84c4f9c82fbcae8e12201c141518c357d88410/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84c4f9c82fbcae8e12201c141518c357d88410/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=8a84c4f9c82fbcae8e12201c141518c357d88410", "patch": "@@ -1783,6 +1783,10 @@ impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n \n     /// Implementation of a typical `DrainFilter::size_hint` method.\n     pub(super) fn size_hint(&self) -> (usize, Option<usize>) {\n+        // In most of the btree iterators, `self.length` is the number of elements\n+        // yet to be visited. Here, it includes elements that were visited and that\n+        // the predicate decided not to drain. Making this upper bound more accurate\n+        // requires maintaining an extra field and is not worth while.\n         (0, Some(*self.length))\n     }\n }"}, {"sha": "0963c6d6cd7ea2bbdc506a0c877e1406a2d26f8b", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a84c4f9c82fbcae8e12201c141518c357d88410/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84c4f9c82fbcae8e12201c141518c357d88410/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=8a84c4f9c82fbcae8e12201c141518c357d88410", "patch": "@@ -92,18 +92,14 @@ pub type Result = result::Result<(), Error>;\n #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]\n pub struct Error;\n \n-/// A collection of methods that are required to format a message into a stream.\n+/// A trait for writing or formatting into Unicode-accepting buffers or streams.\n ///\n-/// This trait is the type which this modules requires when formatting\n-/// information. This is similar to the standard library's [`io::Write`] trait,\n-/// but it is only intended for use in libcore.\n+/// This trait only accepts UTF-8\u2013encoded data and is not [flushable]. If you only\n+/// want to accept Unicode and you don't need flushing, you should implement this trait;\n+/// otherwise you should implement [`std::io::Write`].\n ///\n-/// This trait should generally not be implemented by consumers of the standard\n-/// library. The [`write!`] macro accepts an instance of [`io::Write`], and the\n-/// [`io::Write`] trait is favored over implementing this trait.\n-///\n-/// [`write!`]: crate::write!\n-/// [`io::Write`]: ../../std/io/trait.Write.html\n+/// [`std::io::Write`]: ../../std/io/trait.Write.html\n+/// [flushable]: ../../std/io/trait.Write.html#tymethod.flush\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Write {\n     /// Writes a string slice into this writer, returning whether the write"}, {"sha": "a01ebb316e886a4989258c605456a61130d86118", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a84c4f9c82fbcae8e12201c141518c357d88410/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84c4f9c82fbcae8e12201c141518c357d88410/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=8a84c4f9c82fbcae8e12201c141518c357d88410", "patch": "@@ -276,7 +276,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n-    /// this call will return failure if the mutex would otherwise be\n+    /// this call will return an error if the mutex would otherwise be\n     /// acquired.\n     ///\n     /// # Examples"}, {"sha": "3adf16e0cb1a0d9d7216883ac47857a6d1ee6581", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=8a84c4f9c82fbcae8e12201c141518c357d88410", "patch": "@@ -1 +1 @@\n-Subproject commit e8b556b6a8836147429abe391d6ed18806867b45\n+Subproject commit 3adf16e0cb1a0d9d7216883ac47857a6d1ee6581"}, {"sha": "1cfc230453120a7ea7e790e6612565c8e9dc5346", "filename": "src/test/compile-fail/issue-27675-unchecked-bounds.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a84c4f9c82fbcae8e12201c141518c357d88410/src%2Ftest%2Fcompile-fail%2Fissue-27675-unchecked-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84c4f9c82fbcae8e12201c141518c357d88410/src%2Ftest%2Fcompile-fail%2Fissue-27675-unchecked-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27675-unchecked-bounds.rs?ref=8a84c4f9c82fbcae8e12201c141518c357d88410", "patch": "@@ -0,0 +1,19 @@\n+/// The compiler previously did not properly check the bound of `From` when it was used from type\n+/// of the dyn trait object (use in `copy_any` below). Since the associated type is under user\n+/// control in this usage, the compiler could be tricked to believe any type implemented any trait.\n+/// This would ICE, except for pure marker traits like `Copy`. It did not require providing an\n+/// instance of the dyn trait type, only name said type.\n+trait Setup {\n+    type From: Copy;\n+}\n+\n+fn copy<U: Setup + ?Sized>(from: &U::From) -> U::From {\n+    *from\n+}\n+\n+pub fn copy_any<T>(t: &T) -> T {\n+    copy::<dyn Setup<From=T>>(t)\n+    //~^ ERROR the trait bound `T: Copy` is not satisfied\n+}\n+\n+fn main() {}"}]}