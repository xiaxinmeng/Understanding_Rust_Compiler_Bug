{"sha": "bccc59a8e6e25c2b63308e77f853c6f23782e631", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjY2M1OWE4ZTZlMjVjMmI2MzMwOGU3N2Y4NTNjNmYyMzc4MmU2MzE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-21T21:20:47Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-21T21:20:47Z"}, "message": "Address review comments", "tree": {"sha": "3e618fce9facda6a978b40b28b13343aadb665ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e618fce9facda6a978b40b28b13343aadb665ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bccc59a8e6e25c2b63308e77f853c6f23782e631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bccc59a8e6e25c2b63308e77f853c6f23782e631", "html_url": "https://github.com/rust-lang/rust/commit/bccc59a8e6e25c2b63308e77f853c6f23782e631", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bccc59a8e6e25c2b63308e77f853c6f23782e631/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "025630d189c66a83b6f334e715cec6690cb85adf", "url": "https://api.github.com/repos/rust-lang/rust/commits/025630d189c66a83b6f334e715cec6690cb85adf", "html_url": "https://github.com/rust-lang/rust/commit/025630d189c66a83b6f334e715cec6690cb85adf"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "67681dd2da44a4f468f6dec240bec032796692b6", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bccc59a8e6e25c2b63308e77f853c6f23782e631/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccc59a8e6e25c2b63308e77f853c6f23782e631/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=bccc59a8e6e25c2b63308e77f853c6f23782e631", "patch": "@@ -689,13 +689,6 @@ pub struct LocalDecl<'tcx> {\n     /// Temporaries and the return place are always mutable.\n     pub mutability: Mutability,\n \n-    /// `Some(binding_mode)` if this corresponds to a user-declared local variable.\n-    ///\n-    /// This is solely used for local diagnostics when generating\n-    /// warnings/errors when compiling the current crate, and\n-    /// therefore it need not be visible across crates. pnkfelix\n-    /// currently hypothesized we *need* to wrap this in a\n-    /// `ClearCrossCrate` as long as it carries as `HirId`.\n     // FIXME(matthewjasper) Don't store in this in `Body`\n     pub local_info: LocalInfo<'tcx>,\n \n@@ -831,6 +824,10 @@ pub struct LocalDecl<'tcx> {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum LocalInfo<'tcx> {\n     /// A user-defined local variable or function parameter\n+    ///\n+    /// The `BindingForm` is solely used for local diagnostics when generating\n+    /// warnings/errors when compiling the current crate, and therefore it need\n+    /// not be visible across crates.\n     User(ClearCrossCrate<BindingForm<'tcx>>),\n     /// A temporary created that references the static with the given `DefId`.\n     StaticRef { def_id: DefId, is_thread_local: bool },"}, {"sha": "4dad9ab498f63c06a5959b5a3f94255074f1f61b", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bccc59a8e6e25c2b63308e77f853c6f23782e631/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccc59a8e6e25c2b63308e77f853c6f23782e631/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=bccc59a8e6e25c2b63308e77f853c6f23782e631", "patch": "@@ -65,8 +65,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 local_decl = local_decl.block_tail(tail_info);\n             }\n             if let ExprKind::StaticRef { def_id, .. } = expr.kind {\n-                let attrs = this.hir.tcx().get_attrs(def_id);\n-                let is_thread_local = attrs.iter().any(|attr| attr.check_name(sym::thread_local));\n+                let is_thread_local = this.hir.tcx().has_attr(def_id, sym::thread_local);\n                 local_decl.local_info = LocalInfo::StaticRef {def_id, is_thread_local };\n             }\n             this.local_decls.push(local_decl)"}, {"sha": "47644d9ba83725c511a800c5a07b2a5521ce48fb", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bccc59a8e6e25c2b63308e77f853c6f23782e631/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccc59a8e6e25c2b63308e77f853c6f23782e631/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=bccc59a8e6e25c2b63308e77f853c6f23782e631", "patch": "@@ -264,7 +264,10 @@ pub enum ExprKind<'tcx> {\n         literal: &'tcx Const<'tcx>,\n         user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n     },\n-    /// A literal containing the address of a `static`\n+    /// A literal containing the address of a `static`.\n+    ///\n+    /// This is only distinguished from `Literal` so that we can register some\n+    /// info for diagnostics.\n     StaticRef {\n         literal: &'tcx Const<'tcx>,\n         def_id: DefId,"}]}