{"sha": "c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OTE1ZWViZWFhZWY5ZjdjYzFjZmY2ZmZkOTdmNTc4YjAzYzJhYzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-07T18:20:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-07T18:20:12Z"}, "message": "Auto merge of #80790 - JohnTitor:rollup-js1noez, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #80012 (Add pointing const identifier when emitting E0435)\n - #80521 (MIR Inline is incompatible with coverage)\n - #80659 (Edit rustc_ast::tokenstream docs)\n - #80660 (Properly handle primitive disambiguators in rustdoc)\n - #80738 (Remove bottom margin from crate version when the docs sidebar is collapsed)\n - #80744 (rustdoc: Turn `next_def_id` comments into docs)\n - #80750 (Don't use to_string on Symbol in rustc_passes/check_attr.rs)\n - #80769 (Improve wording of parse doc)\n - #80780 (Return EOF_CHAR constant instead of magic char.)\n - #80784 (rustc_parse: Better spans for synthesized token streams)\n\nFailed merges:\n\n - #80785 (rustc_ast_pretty: Remove `PrintState::insert_extra_parens`)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4f7d314db8e68283fb153059aa2d18a6cf0b3a95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f7d314db8e68283fb153059aa2d18a6cf0b3a95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "html_url": "https://github.com/rust-lang/rust/commit/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0b945cfcc3d084583bc27a7ed23b27b1246751", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0b945cfcc3d084583bc27a7ed23b27b1246751", "html_url": "https://github.com/rust-lang/rust/commit/8f0b945cfcc3d084583bc27a7ed23b27b1246751"}, {"sha": "695f878332e9b6fb4900642eda036b8578588a56", "url": "https://api.github.com/repos/rust-lang/rust/commits/695f878332e9b6fb4900642eda036b8578588a56", "html_url": "https://github.com/rust-lang/rust/commit/695f878332e9b6fb4900642eda036b8578588a56"}], "stats": {"total": 979, "additions": 607, "deletions": 372}, "files": [{"sha": "90bfb01d6c7913e5b0026b9fb0fc3a67b510c4f1", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -771,7 +771,7 @@ impl fmt::Display for NonterminalKind {\n }\n \n impl Nonterminal {\n-    fn span(&self) -> Span {\n+    pub fn span(&self) -> Span {\n         match self {\n             NtItem(item) => item.span,\n             NtBlock(block) => block.span,"}, {"sha": "00354b42ebb7c85bc36026fca438b054a9267c8f", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -1,15 +1,15 @@\n //! # Token Streams\n //!\n //! `TokenStream`s represent syntactic objects before they are converted into ASTs.\n-//! A `TokenStream` is, roughly speaking, a sequence (eg stream) of `TokenTree`s,\n-//! which are themselves a single `Token` or a `Delimited` subsequence of tokens.\n+//! A `TokenStream` is, roughly speaking, a sequence of [`TokenTree`]s,\n+//! which are themselves a single [`Token`] or a `Delimited` subsequence of tokens.\n //!\n //! ## Ownership\n //!\n //! `TokenStream`s are persistent data structures constructed as ropes with reference\n //! counted-children. In general, this means that calling an operation on a `TokenStream`\n //! (such as `slice`) produces an entirely new `TokenStream` from the borrowed reference to\n-//! the original. This essentially coerces `TokenStream`s into 'views' of their subparts,\n+//! the original. This essentially coerces `TokenStream`s into \"views\" of their subparts,\n //! and a borrowed `TokenStream` is sufficient to build an owned `TokenStream` without taking\n //! ownership of the original.\n \n@@ -24,9 +24,9 @@ use smallvec::{smallvec, SmallVec};\n \n use std::{fmt, iter, mem};\n \n-/// When the main rust parser encounters a syntax-extension invocation, it\n-/// parses the arguments to the invocation as a token-tree. This is a very\n-/// loose structure, such that all sorts of different AST-fragments can\n+/// When the main Rust parser encounters a syntax-extension invocation, it\n+/// parses the arguments to the invocation as a token tree. This is a very\n+/// loose structure, such that all sorts of different AST fragments can\n /// be passed to syntax extensions using a uniform type.\n ///\n /// If the syntax extension is an MBE macro, it will attempt to match its\n@@ -38,9 +38,9 @@ use std::{fmt, iter, mem};\n /// Nothing special happens to misnamed or misplaced `SubstNt`s.\n #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]\n pub enum TokenTree {\n-    /// A single token\n+    /// A single token.\n     Token(Token),\n-    /// A delimited sequence of token trees\n+    /// A delimited sequence of token trees.\n     Delimited(DelimSpan, DelimToken, TokenStream),\n }\n \n@@ -62,7 +62,7 @@ where\n }\n \n impl TokenTree {\n-    /// Checks if this TokenTree is equal to the other, regardless of span information.\n+    /// Checks if this `TokenTree` is equal to the other, regardless of span information.\n     pub fn eq_unspanned(&self, other: &TokenTree) -> bool {\n         match (self, other) {\n             (TokenTree::Token(token), TokenTree::Token(token2)) => token.kind == token2.kind,\n@@ -73,7 +73,7 @@ impl TokenTree {\n         }\n     }\n \n-    /// Retrieves the TokenTree's span.\n+    /// Retrieves the `TokenTree`'s span.\n     pub fn span(&self) -> Span {\n         match self {\n             TokenTree::Token(token) => token.span,\n@@ -140,7 +140,7 @@ impl CreateTokenStream for TokenStream {\n     }\n }\n \n-/// A lazy version of `TokenStream`, which defers creation\n+/// A lazy version of [`TokenStream`], which defers creation\n /// of an actual `TokenStream` until it is needed.\n /// `Box` is here only to reduce the structure size.\n #[derive(Clone)]\n@@ -188,11 +188,12 @@ impl<CTX> HashStable<CTX> for LazyTokenStream {\n     }\n }\n \n-/// A `TokenStream` is an abstract sequence of tokens, organized into `TokenTree`s.\n+/// A `TokenStream` is an abstract sequence of tokens, organized into [`TokenTree`]s.\n ///\n /// The goal is for procedural macros to work with `TokenStream`s and `TokenTree`s\n /// instead of a representation of the abstract syntax tree.\n-/// Today's `TokenTree`s can still contain AST via `token::Interpolated` for back-compat.\n+/// Today's `TokenTree`s can still contain AST via `token::Interpolated` for\n+/// backwards compatability.\n #[derive(Clone, Debug, Default, Encodable, Decodable)]\n pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);\n \n@@ -429,7 +430,7 @@ impl TokenStreamBuilder {\n     }\n }\n \n-/// By-reference iterator over a `TokenStream`.\n+/// By-reference iterator over a [`TokenStream`].\n #[derive(Clone)]\n pub struct CursorRef<'t> {\n     stream: &'t TokenStream,\n@@ -457,8 +458,8 @@ impl<'t> Iterator for CursorRef<'t> {\n     }\n }\n \n-/// Owning by-value iterator over a `TokenStream`.\n-/// FIXME: Many uses of this can be replaced with by-reference iterator to avoid clones.\n+/// Owning by-value iterator over a [`TokenStream`].\n+// FIXME: Many uses of this can be replaced with by-reference iterator to avoid clones.\n #[derive(Clone)]\n pub struct Cursor {\n     pub stream: TokenStream,"}, {"sha": "ab9861b85ab03513823cd0341adb900ccd7e8695", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -206,8 +206,7 @@ pub trait ResolverAstLowering {\n     ) -> LocalDefId;\n }\n \n-type NtToTokenstream =\n-    fn(&Nonterminal, &ParseSess, Span, CanSynthesizeMissingTokens) -> TokenStream;\n+type NtToTokenstream = fn(&Nonterminal, &ParseSess, CanSynthesizeMissingTokens) -> TokenStream;\n \n /// Context of `impl Trait` in code, which determines whether it is allowed in an HIR subtree,\n /// and if so, what meaning it has.\n@@ -417,12 +416,7 @@ impl<'a> TokenStreamLowering<'a> {\n     fn lower_token(&mut self, token: Token) -> TokenStream {\n         match token.kind {\n             token::Interpolated(nt) => {\n-                let tts = (self.nt_to_tokenstream)(\n-                    &nt,\n-                    self.parse_sess,\n-                    token.span,\n-                    self.synthesize_tokens,\n-                );\n+                let tts = (self.nt_to_tokenstream)(&nt, self.parse_sess, self.synthesize_tokens);\n                 TokenTree::Delimited(\n                     DelimSpan::from_single(token.span),\n                     DelimToken::NoDelim,"}, {"sha": "798a20d48b65bcb5e4d1c928903c6938a7cb4a2b", "filename": "compiler/rustc_error_codes/src/error_codes/E0435.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0435.md", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0435.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0435.md?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -7,6 +7,12 @@ let foo = 42;\n let a: [u8; foo]; // error: attempt to use a non-constant value in a constant\n ```\n \n+'constant' means 'a compile-time value'.\n+\n+More details can be found in the [Variables and Mutability] section of the book.\n+\n+[Variables and Mutability]: https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n+\n To fix this error, please replace the value with a constant. Example:\n \n ```"}, {"sha": "b2ba720e0d735d6e5dc0f16772656631a3caa008", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -141,7 +141,7 @@ impl Annotatable {\n     }\n \n     crate fn into_tokens(self, sess: &ParseSess) -> TokenStream {\n-        nt_to_tokenstream(&self.into_nonterminal(), sess, DUMMY_SP, CanSynthesizeMissingTokens::No)\n+        nt_to_tokenstream(&self.into_nonterminal(), sess, CanSynthesizeMissingTokens::No)\n     }\n \n     pub fn expect_item(self) -> P<ast::Item> {"}, {"sha": "fa80a20dc8bb7dc9e58c76bb4b1b58277200b764", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -743,7 +743,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         AttrStyle::Inner => rustc_parse::fake_token_stream(\n                             &self.cx.sess.parse_sess,\n                             &item.into_nonterminal(),\n-                            span,\n                         ),\n                     };\n                     let attr_item = attr.unwrap_normal_item();"}, {"sha": "02129e9b5e548bbcbee3c91abe0e66ea45becad0", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -94,12 +94,7 @@ impl MultiItemModifier for ProcMacroDerive {\n         let input = if item.pretty_printing_compatibility_hack() {\n             TokenTree::token(token::Interpolated(Lrc::new(item)), DUMMY_SP).into()\n         } else {\n-            nt_to_tokenstream(\n-                &item,\n-                &ecx.sess.parse_sess,\n-                DUMMY_SP,\n-                CanSynthesizeMissingTokens::Yes,\n-            )\n+            nt_to_tokenstream(&item, &ecx.sess.parse_sess, CanSynthesizeMissingTokens::Yes)\n         };\n \n         let server = proc_macro_server::Rustc::new(ecx);"}, {"sha": "b6195d3bbc4a64c4b733896af9a09def81a93fc2", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -179,7 +179,7 @@ impl FromInternal<(TreeAndSpacing, &'_ ParseSess, &'_ mut Vec<Self>)>\n                 {\n                     TokenTree::Ident(Ident::new(sess, name.name, is_raw, name.span))\n                 } else {\n-                    let stream = nt_to_tokenstream(&nt, sess, span, CanSynthesizeMissingTokens::No);\n+                    let stream = nt_to_tokenstream(&nt, sess, CanSynthesizeMissingTokens::No);\n                     TokenTree::Group(Group {\n                         delimiter: Delimiter::None,\n                         stream,"}, {"sha": "297f3d19ca1781eb9cc5494584829b4cda07fd07", "filename": "compiler/rustc_lexer/src/cursor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_lexer%2Fsrc%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_lexer%2Fsrc%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Fcursor.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -33,7 +33,7 @@ impl<'a> Cursor<'a> {\n \n         #[cfg(not(debug_assertions))]\n         {\n-            '\\0'\n+            EOF_CHAR\n         }\n     }\n "}, {"sha": "52350c5d07844850ca3d0398ac4a12c2576145d1", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -41,6 +41,15 @@ impl<'tcx> MirPass<'tcx> for Inline {\n             return;\n         }\n \n+        if tcx.sess.opts.debugging_opts.instrument_coverage {\n+            // Since `Inline` happens after `InstrumentCoverage`, the function-specific coverage\n+            // counters can be invalidated, such as by merging coverage counter statements from\n+            // a pre-inlined function into a different function. This kind of change is invalid,\n+            // so inlining must be skipped. Note: This check is performed here so inlining can\n+            // be disabled without preventing other optimizations (regardless of `mir_opt_level`).\n+            return;\n+        }\n+\n         if inline(tcx, body) {\n             debug!(\"running simplify cfg on {:?}\", body.source);\n             CfgSimplifier::new(body).simplify();"}, {"sha": "4fa9768febb365eedad08f54ba8d8cb1ff45a746", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -236,7 +236,6 @@ pub fn parse_in<'a, T>(\n pub fn nt_to_tokenstream(\n     nt: &Nonterminal,\n     sess: &ParseSess,\n-    span: Span,\n     synthesize_tokens: CanSynthesizeMissingTokens,\n ) -> TokenStream {\n     // A `Nonterminal` is often a parsed AST item. At this point we now\n@@ -256,11 +255,9 @@ pub fn nt_to_tokenstream(\n         |tokens: Option<&LazyTokenStream>| tokens.as_ref().map(|t| t.create_token_stream());\n \n     let tokens = match *nt {\n-        Nonterminal::NtItem(ref item) => {\n-            prepend_attrs(sess, &item.attrs, nt, span, item.tokens.as_ref())\n-        }\n+        Nonterminal::NtItem(ref item) => prepend_attrs(sess, &item.attrs, nt, item.tokens.as_ref()),\n         Nonterminal::NtBlock(ref block) => convert_tokens(block.tokens.as_ref()),\n-        Nonterminal::NtStmt(ref stmt) => prepend_attrs(sess, stmt.attrs(), nt, span, stmt.tokens()),\n+        Nonterminal::NtStmt(ref stmt) => prepend_attrs(sess, stmt.attrs(), nt, stmt.tokens()),\n         Nonterminal::NtPat(ref pat) => convert_tokens(pat.tokens.as_ref()),\n         Nonterminal::NtTy(ref ty) => convert_tokens(ty.tokens.as_ref()),\n         Nonterminal::NtIdent(ident, is_raw) => {\n@@ -277,31 +274,30 @@ pub fn nt_to_tokenstream(\n             if expr.tokens.is_none() {\n                 debug!(\"missing tokens for expr {:?}\", expr);\n             }\n-            prepend_attrs(sess, &expr.attrs, nt, span, expr.tokens.as_ref())\n+            prepend_attrs(sess, &expr.attrs, nt, expr.tokens.as_ref())\n         }\n     };\n \n     if let Some(tokens) = tokens {\n         return tokens;\n     } else if matches!(synthesize_tokens, CanSynthesizeMissingTokens::Yes) {\n-        return fake_token_stream(sess, nt, span);\n+        return fake_token_stream(sess, nt);\n     } else {\n         let pretty = rustc_ast_pretty::pprust::nonterminal_to_string_no_extra_parens(&nt);\n-        panic!(\"Missing tokens at {:?} for nt {:?}\", span, pretty);\n+        panic!(\"Missing tokens for nt {:?}\", pretty);\n     }\n }\n \n-pub fn fake_token_stream(sess: &ParseSess, nt: &Nonterminal, span: Span) -> TokenStream {\n+pub fn fake_token_stream(sess: &ParseSess, nt: &Nonterminal) -> TokenStream {\n     let source = pprust::nonterminal_to_string(nt);\n     let filename = FileName::macro_expansion_source_code(&source);\n-    parse_stream_from_source_str(filename, source, sess, Some(span))\n+    parse_stream_from_source_str(filename, source, sess, Some(nt.span()))\n }\n \n fn prepend_attrs(\n     sess: &ParseSess,\n     attrs: &[ast::Attribute],\n     nt: &Nonterminal,\n-    span: Span,\n     tokens: Option<&tokenstream::LazyTokenStream>,\n ) -> Option<tokenstream::TokenStream> {\n     if attrs.is_empty() {\n@@ -312,7 +308,7 @@ fn prepend_attrs(\n         // FIXME: Correctly handle tokens for inner attributes.\n         // For now, we fall back to reparsing the original AST node\n         if attr.style == ast::AttrStyle::Inner {\n-            return Some(fake_token_stream(sess, nt, span));\n+            return Some(fake_token_stream(sess, nt));\n         }\n         builder.push(attr.tokens());\n     }"}, {"sha": "a6a61ffc5dae509e52e67f2705266452be1401ba", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -359,7 +359,7 @@ impl CheckAttrVisitor<'tcx> {\n             return false;\n         }\n         let item_name = self.tcx.hir().name(hir_id);\n-        if item_name.to_string() == doc_alias {\n+        if &*item_name.as_str() == doc_alias {\n             self.tcx\n                 .sess\n                 .struct_span_err("}, {"sha": "6a181dbab5af76b6a298caa604927c528bdcdd86", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -398,13 +398,19 @@ impl<'a> Resolver<'a> {\n                 err.help(\"use the `|| { ... }` closure form instead\");\n                 err\n             }\n-            ResolutionError::AttemptToUseNonConstantValueInConstant => {\n+            ResolutionError::AttemptToUseNonConstantValueInConstant(ident, sugg) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n                     E0435,\n                     \"attempt to use a non-constant value in a constant\"\n                 );\n+                err.span_suggestion(\n+                    ident.span,\n+                    &sugg,\n+                    \"\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n                 err.span_label(span, \"non-constant value\");\n                 err\n             }"}, {"sha": "4d956e7f0d2c364ea323c66e938f893525d675bc", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -92,6 +92,12 @@ crate enum HasGenericParams {\n     No,\n }\n \n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+crate enum ConstantItemKind {\n+    Const,\n+    Static,\n+}\n+\n /// The rib kind restricts certain accesses,\n /// e.g. to a `Res::Local` of an outer item.\n #[derive(Copy, Clone, Debug)]\n@@ -119,7 +125,7 @@ crate enum RibKind<'a> {\n     ///\n     /// The `bool` indicates if this constant may reference generic parameters\n     /// and is used to only allow generic parameters to be used in trivial constant expressions.\n-    ConstantItemRibKind(bool),\n+    ConstantItemRibKind(bool, Option<(Ident, ConstantItemKind)>),\n \n     /// We passed through a module.\n     ModuleRibKind(Module<'a>),\n@@ -145,7 +151,7 @@ impl RibKind<'_> {\n             NormalRibKind\n             | ClosureOrAsyncRibKind\n             | FnItemRibKind\n-            | ConstantItemRibKind(_)\n+            | ConstantItemRibKind(..)\n             | ModuleRibKind(_)\n             | MacroDefinition(_)\n             | ConstParamTyRibKind => false,\n@@ -634,7 +640,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             // Note that we might not be inside of an repeat expression here,\n                             // but considering that `IsRepeatExpr` is only relevant for\n                             // non-trivial constants this is doesn't matter.\n-                            self.with_constant_rib(IsRepeatExpr::No, true, |this| {\n+                            self.with_constant_rib(IsRepeatExpr::No, true, None, |this| {\n                                 this.smart_resolve_path(\n                                     ty.id,\n                                     qself.as_ref(),\n@@ -843,7 +849,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | ClosureOrAsyncRibKind\n                 | FnItemRibKind\n                 | ItemRibKind(..)\n-                | ConstantItemRibKind(_)\n+                | ConstantItemRibKind(..)\n                 | ModuleRibKind(..)\n                 | ForwardTyParamBanRibKind\n                 | ConstParamTyRibKind => {\n@@ -970,6 +976,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             this.with_constant_rib(\n                                                 IsRepeatExpr::No,\n                                                 true,\n+                                                None,\n                                                 |this| this.visit_expr(expr),\n                                             );\n                                         }\n@@ -1012,11 +1019,19 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n                     if let Some(expr) = expr {\n+                        let constant_item_kind = match item.kind {\n+                            ItemKind::Const(..) => ConstantItemKind::Const,\n+                            ItemKind::Static(..) => ConstantItemKind::Static,\n+                            _ => unreachable!(),\n+                        };\n                         // We already forbid generic params because of the above item rib,\n                         // so it doesn't matter whether this is a trivial constant.\n-                        this.with_constant_rib(IsRepeatExpr::No, true, |this| {\n-                            this.visit_expr(expr)\n-                        });\n+                        this.with_constant_rib(\n+                            IsRepeatExpr::No,\n+                            true,\n+                            Some((item.ident, constant_item_kind)),\n+                            |this| this.visit_expr(expr),\n+                        );\n                     }\n                 });\n             }\n@@ -1118,15 +1133,16 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         &mut self,\n         is_repeat: IsRepeatExpr,\n         is_trivial: bool,\n+        item: Option<(Ident, ConstantItemKind)>,\n         f: impl FnOnce(&mut Self),\n     ) {\n         debug!(\"with_constant_rib: is_repeat={:?} is_trivial={}\", is_repeat, is_trivial);\n-        self.with_rib(ValueNS, ConstantItemRibKind(is_trivial), |this| {\n+        self.with_rib(ValueNS, ConstantItemRibKind(is_trivial, item), |this| {\n             this.with_rib(\n                 TypeNS,\n-                ConstantItemRibKind(is_repeat == IsRepeatExpr::Yes || is_trivial),\n+                ConstantItemRibKind(is_repeat == IsRepeatExpr::Yes || is_trivial, item),\n                 |this| {\n-                    this.with_label_rib(ConstantItemRibKind(is_trivial), f);\n+                    this.with_label_rib(ConstantItemRibKind(is_trivial, item), f);\n                 },\n             )\n         });\n@@ -1266,6 +1282,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             this.with_constant_rib(\n                                                 IsRepeatExpr::No,\n                                                 true,\n+                                                None,\n                                                 |this| {\n                                                     visit::walk_assoc_item(\n                                                         this,\n@@ -2200,6 +2217,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_constant_rib(\n             is_repeat,\n             constant.value.is_potential_trivial_const_param(),\n+            None,\n             |this| {\n                 visit::walk_anon_const(this, constant);\n             },"}, {"sha": "a6d0240b6fdcf7a190fa4bc5b60d3af144b8ff59", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -64,7 +64,7 @@ use tracing::debug;\n use diagnostics::{extend_span_to_previous_binding, find_span_of_binding_until_next_binding};\n use diagnostics::{ImportSuggestion, LabelSuggestion, Suggestion};\n use imports::{Import, ImportKind, ImportResolver, NameResolution};\n-use late::{HasGenericParams, PathSource, Rib, RibKind::*};\n+use late::{ConstantItemKind, HasGenericParams, PathSource, Rib, RibKind::*};\n use macros::{MacroRulesBinding, MacroRulesScope, MacroRulesScopeRef};\n \n type Res = def::Res<NodeId>;\n@@ -210,7 +210,7 @@ enum ResolutionError<'a> {\n     /// Error E0434: can't capture dynamic environment in a fn item.\n     CannotCaptureDynamicEnvironmentInFnItem,\n     /// Error E0435: attempt to use a non-constant value in a constant.\n-    AttemptToUseNonConstantValueInConstant,\n+    AttemptToUseNonConstantValueInConstant(Ident, String),\n     /// Error E0530: `X` bindings cannot shadow `Y`s.\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n@@ -1837,14 +1837,16 @@ impl<'a> Resolver<'a> {\n             // Use the rib kind to determine whether we are resolving parameters\n             // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).\n             let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };\n-            if let Some(res) = ribs[i].bindings.get(&rib_ident).cloned() {\n+            if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)\n+            {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(\n                     i,\n                     rib_ident,\n-                    res,\n+                    *res,\n                     record_used,\n                     path_span,\n+                    *original_rib_ident_def,\n                     ribs,\n                 )));\n             }\n@@ -2556,6 +2558,7 @@ impl<'a> Resolver<'a> {\n         mut res: Res,\n         record_used: bool,\n         span: Span,\n+        original_rib_ident_def: Ident,\n         all_ribs: &[Rib<'a>],\n     ) -> Res {\n         const CG_BUG_STR: &str = \"min_const_generics resolve check didn't stop compilation\";\n@@ -2602,10 +2605,31 @@ impl<'a> Resolver<'a> {\n                                 res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);\n                             }\n                         }\n-                        ConstantItemRibKind(_) => {\n+                        ConstantItemRibKind(_, item) => {\n                             // Still doesn't deal with upvars\n                             if record_used {\n-                                self.report_error(span, AttemptToUseNonConstantValueInConstant);\n+                                let (span, resolution_error) =\n+                                    if let Some((ident, constant_item_kind)) = item {\n+                                        let kind_str = match constant_item_kind {\n+                                            ConstantItemKind::Const => \"const\",\n+                                            ConstantItemKind::Static => \"static\",\n+                                        };\n+                                        let sugg = format!(\n+                                            \"consider using `let` instead of `{}`\",\n+                                            kind_str\n+                                        );\n+                                        (span, AttemptToUseNonConstantValueInConstant(ident, sugg))\n+                                    } else {\n+                                        let sugg = \"consider using `const` instead of `let`\";\n+                                        (\n+                                            rib_ident.span,\n+                                            AttemptToUseNonConstantValueInConstant(\n+                                                original_rib_ident_def,\n+                                                sugg.to_string(),\n+                                            ),\n+                                        )\n+                                    };\n+                                self.report_error(span, resolution_error);\n                             }\n                             return Res::Err;\n                         }\n@@ -2641,7 +2665,7 @@ impl<'a> Resolver<'a> {\n                             in_ty_param_default = true;\n                             continue;\n                         }\n-                        ConstantItemRibKind(trivial) => {\n+                        ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial\n@@ -2734,7 +2758,7 @@ impl<'a> Resolver<'a> {\n                             in_ty_param_default = true;\n                             continue;\n                         }\n-                        ConstantItemRibKind(trivial) => {\n+                        ConstantItemRibKind(trivial, _) => {\n                             let features = self.session.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial"}, {"sha": "938edb76ca6b35cdbaa5a06ff14e13cf7590beb4", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -1829,11 +1829,17 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n \n         if debugging_opts.mir_opt_level > 1 {\n+            // Functions inlined during MIR transform can, at best, make it impossible to\n+            // effectively cover inlined functions, and, at worst, break coverage map generation\n+            // during LLVM codegen. For example, function counter IDs are only unique within a\n+            // function. Inlining after these counters are injected can produce duplicate counters,\n+            // resulting in an invalid coverage map (and ICE); so this option combination is not\n+            // allowed.\n             early_warn(\n                 error_format,\n                 &format!(\n-                    \"`-Z mir-opt-level={}` (any level > 1) enables function inlining, which \\\n-                    limits the effectiveness of `-Z instrument-coverage`.\",\n+                    \"`-Z mir-opt-level={}` (or any level > 1) enables function inlining, which \\\n+                    is incompatible with `-Z instrument-coverage`. Inlining will be disabled.\",\n                     debugging_opts.mir_opt_level,\n                 ),\n             );"}, {"sha": "ae7892291ed19b1aa1bba8f84e8c11e96c27cb23", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -2175,7 +2175,7 @@ impl str {\n     /// helps the inference algorithm understand specifically which type\n     /// you're trying to parse into.\n     ///\n-    /// `parse` can parse any type that implements the [`FromStr`] trait.\n+    /// `parse` can parse into any type that implements the [`FromStr`] trait.\n \n     ///\n     /// # Errors"}, {"sha": "38791fcea548428797d699f38173b941525aa551", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -291,7 +291,9 @@ impl Item {\n         }\n     }\n \n-    /// See comments on next_def_id\n+    /// See the documentation for [`next_def_id()`].\n+    ///\n+    /// [`next_def_id()`]: DocContext::next_def_id()\n     crate fn is_fake(&self) -> bool {\n         MAX_DEF_ID.with(|m| {\n             m.borrow().get(&self.def_id.krate).map(|id| self.def_id >= *id).unwrap_or(false)"}, {"sha": "43aaefa0870738618b2a77226b289a3f48874a92", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -120,14 +120,20 @@ impl<'tcx> DocContext<'tcx> {\n         r\n     }\n \n-    // This is an ugly hack, but it's the simplest way to handle synthetic impls without greatly\n-    // refactoring either librustdoc or librustc_middle. In particular, allowing new DefIds to be\n-    // registered after the AST is constructed would require storing the defid mapping in a\n-    // RefCell, decreasing the performance for normal compilation for very little gain.\n-    //\n-    // Instead, we construct 'fake' def ids, which start immediately after the last DefId.\n-    // In the Debug impl for clean::Item, we explicitly check for fake\n-    // def ids, as we'll end up with a panic if we use the DefId Debug impl for fake DefIds\n+    /// Create a new \"fake\" [`DefId`].\n+    ///\n+    /// This is an ugly hack, but it's the simplest way to handle synthetic impls without greatly\n+    /// refactoring either rustdoc or [`rustc_middle`]. In particular, allowing new [`DefId`]s\n+    /// to be registered after the AST is constructed would require storing the [`DefId`] mapping\n+    /// in a [`RefCell`], decreasing the performance for normal compilation for very little gain.\n+    ///\n+    /// Instead, we construct \"fake\" [`DefId`]s, which start immediately after the last `DefId`.\n+    /// In the [`Debug`] impl for [`clean::Item`], we explicitly check for fake `DefId`s,\n+    /// as we'll end up with a panic if we use the `DefId` `Debug` impl for fake `DefId`s.\n+    ///\n+    /// [`RefCell`]: std::cell::RefCell\n+    /// [`Debug`]: std::fmt::Debug\n+    /// [`clean::Item`]: crate::clean::types::Item\n     crate fn next_def_id(&self, crate_num: CrateNum) -> DefId {\n         let start_def_id = {\n             let num_def_ids = if crate_num == LOCAL_CRATE {"}, {"sha": "8dad26dced9561800b5b5318a183d703a941ed2b", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -1412,6 +1412,7 @@ h4 > .notable-traits {\n \t.sidebar > .block.version {\n \t\tborder-bottom: none;\n \t\tmargin-top: 12px;\n+\t\tmargin-bottom: 0;\n \t}\n \n \tnav.sub {"}, {"sha": "11ee59b2401c8592c5c1264338dcc478cb37e132", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 70, "deletions": 46, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -394,10 +394,14 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         ns,\n                         impl_,\n                     )\n-                    .map(|item| match item.kind {\n-                        ty::AssocKind::Fn => \"method\",\n-                        ty::AssocKind::Const => \"associatedconstant\",\n-                        ty::AssocKind::Type => \"associatedtype\",\n+                    .map(|item| {\n+                        let kind = item.kind;\n+                        self.kind_side_channel.set(Some((kind.as_def_kind(), item.def_id)));\n+                        match kind {\n+                            ty::AssocKind::Fn => \"method\",\n+                            ty::AssocKind::Const => \"associatedconstant\",\n+                            ty::AssocKind::Type => \"associatedtype\",\n+                        }\n                     })\n                     .map(|out| {\n                         (\n@@ -1142,55 +1146,75 @@ impl LinkCollector<'_, '_> {\n                 callback,\n             );\n         };\n-        match res {\n-            Res::Primitive(_) => match disambiguator {\n-                Some(Disambiguator::Primitive | Disambiguator::Namespace(_)) | None => {\n-                    Some(ItemLink { link: ori_link.link, link_text, did: None, fragment })\n-                }\n-                Some(other) => {\n-                    report_mismatch(other, Disambiguator::Primitive);\n-                    None\n-                }\n-            },\n-            Res::Def(kind, id) => {\n-                debug!(\"intra-doc link to {} resolved to {:?}\", path_str, res);\n-\n-                // Disallow e.g. linking to enums with `struct@`\n-                debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n-                match (self.kind_side_channel.take().map(|(kind, _)| kind).unwrap_or(kind), disambiguator) {\n-                    | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, Some(Disambiguator::Kind(DefKind::Const)))\n-                    // NOTE: this allows 'method' to mean both normal functions and associated functions\n-                    // This can't cause ambiguity because both are in the same namespace.\n-                    | (DefKind::Fn | DefKind::AssocFn, Some(Disambiguator::Kind(DefKind::Fn)))\n-                    // These are namespaces; allow anything in the namespace to match\n-                    | (_, Some(Disambiguator::Namespace(_)))\n-                    // If no disambiguator given, allow anything\n-                    | (_, None)\n-                    // All of these are valid, so do nothing\n-                    => {}\n-                    (actual, Some(Disambiguator::Kind(expected))) if actual == expected => {}\n-                    (_, Some(specified @ Disambiguator::Kind(_) | specified @ Disambiguator::Primitive)) => {\n-                        report_mismatch(specified, Disambiguator::Kind(kind));\n-                        return None;\n-                    }\n+\n+        let verify = |kind: DefKind, id: DefId| {\n+            debug!(\"intra-doc link to {} resolved to {:?}\", path_str, res);\n+\n+            // Disallow e.g. linking to enums with `struct@`\n+            debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n+            match (self.kind_side_channel.take().map(|(kind, _)| kind).unwrap_or(kind), disambiguator) {\n+                | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, Some(Disambiguator::Kind(DefKind::Const)))\n+                // NOTE: this allows 'method' to mean both normal functions and associated functions\n+                // This can't cause ambiguity because both are in the same namespace.\n+                | (DefKind::Fn | DefKind::AssocFn, Some(Disambiguator::Kind(DefKind::Fn)))\n+                // These are namespaces; allow anything in the namespace to match\n+                | (_, Some(Disambiguator::Namespace(_)))\n+                // If no disambiguator given, allow anything\n+                | (_, None)\n+                // All of these are valid, so do nothing\n+                => {}\n+                (actual, Some(Disambiguator::Kind(expected))) if actual == expected => {}\n+                (_, Some(specified @ Disambiguator::Kind(_) | specified @ Disambiguator::Primitive)) => {\n+                    report_mismatch(specified, Disambiguator::Kind(kind));\n+                    return None;\n                 }\n+            }\n+\n+            // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n+            if let Some((src_id, dst_id)) = id\n+                .as_local()\n+                .and_then(|dst_id| item.def_id.as_local().map(|src_id| (src_id, dst_id)))\n+            {\n+                use rustc_hir::def_id::LOCAL_CRATE;\n \n-                // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n-                if let Some((src_id, dst_id)) = id\n-                    .as_local()\n-                    .and_then(|dst_id| item.def_id.as_local().map(|src_id| (src_id, dst_id)))\n+                let hir_src = self.cx.tcx.hir().local_def_id_to_hir_id(src_id);\n+                let hir_dst = self.cx.tcx.hir().local_def_id_to_hir_id(dst_id);\n+\n+                if self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_src)\n+                    && !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_dst)\n                 {\n-                    use rustc_hir::def_id::LOCAL_CRATE;\n+                    privacy_error(cx, &item, &path_str, dox, &ori_link);\n+                }\n+            }\n \n-                    let hir_src = self.cx.tcx.hir().local_def_id_to_hir_id(src_id);\n-                    let hir_dst = self.cx.tcx.hir().local_def_id_to_hir_id(dst_id);\n+            Some((kind, id))\n+        };\n \n-                    if self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_src)\n-                        && !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_dst)\n-                    {\n-                        privacy_error(cx, &item, &path_str, dox, &ori_link);\n+        match res {\n+            Res::Primitive(_) => {\n+                if let Some((kind, id)) = self.kind_side_channel.take() {\n+                    // We're actually resolving an associated item of a primitive, so we need to\n+                    // verify the disambiguator (if any) matches the type of the associated item.\n+                    // This case should really follow the same flow as the `Res::Def` branch below,\n+                    // but attempting to add a call to `clean::register_res` causes an ICE. @jyn514\n+                    // thinks `register_res` is only needed for cross-crate re-exports, but Rust\n+                    // doesn't allow statements like `use str::trim;`, making this a (hopefully)\n+                    // valid omission. See https://github.com/rust-lang/rust/pull/80660#discussion_r551585677\n+                    // for discussion on the matter.\n+                    verify(kind, id)?;\n+                } else {\n+                    match disambiguator {\n+                        Some(Disambiguator::Primitive | Disambiguator::Namespace(_)) | None => {}\n+                        Some(other) => {\n+                            report_mismatch(other, Disambiguator::Primitive);\n+                            return None;\n+                        }\n                     }\n                 }\n+                Some(ItemLink { link: ori_link.link, link_text, did: None, fragment })\n+            }\n+            Res::Def(kind, id) => {\n+                let (kind, id) = verify(kind, id)?;\n                 let id = clean::register_res(cx, rustc_hir::def::Res::Def(kind, id));\n                 Some(ItemLink { link: ori_link.link, link_text, did: Some(id), fragment })\n             }"}, {"sha": "8f67170561a2a7fc5cb0d14c0cb52125585f6a15", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.doctest.txt", "status": "modified", "additions": 80, "deletions": 44, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.doctest.txt?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -21,50 +21,86 @@\n    20|       |//!\n    21|       |//! doctest returning a result:\n    22|      1|//! ```\n-   23|      1|//! #[derive(Debug)]\n-   24|      1|//! struct SomeError;\n-   25|      1|//! let mut res = Err(SomeError);\n-   26|      1|//! if res.is_ok() {\n-   27|      0|//!   res?;\n-   28|      1|//! } else {\n-   29|      1|//!   res = Ok(0);\n-   30|      1|//! }\n-   31|       |//! // need to be explicit because rustdoc cant infer the return type\n-   32|      1|//! Ok::<(), SomeError>(())\n-   33|      1|//! ```\n-   34|       |//!\n-   35|       |//! doctest with custom main:\n-   36|       |//! ```\n-   37|       |//! #[derive(Debug)]\n-   38|       |//! struct SomeError;\n-   39|       |//!\n-   40|       |//! extern crate doctest_crate;\n-   41|       |//!\n-   42|      1|//! fn doctest_main() -> Result<(), SomeError> {\n-   43|      1|//!     doctest_crate::fn_run_in_doctests(2);\n-   44|      1|//!     Ok(())\n-   45|      1|//! }\n-   46|       |//!\n-   47|       |//! // this `main` is not shown as covered, as it clashes with all the other\n-   48|       |//! // `main` functions that were automatically generated for doctests\n-   49|       |//! fn main() -> Result<(), SomeError> {\n-   50|       |//!     doctest_main()\n-   51|       |//! }\n-   52|       |//! ```\n-   53|       |\n-   54|       |/// doctest attached to fn testing external code:\n-   55|       |/// ```\n-   56|      1|/// extern crate doctest_crate;\n-   57|      1|/// doctest_crate::fn_run_in_doctests(3);\n-   58|      1|/// ```\n-   59|       |///\n-   60|      1|fn main() {\n-   61|      1|    if true {\n-   62|      1|        assert_eq!(1, 1);\n-   63|       |    } else {\n-   64|       |        assert_eq!(1, 2);\n-   65|       |    }\n-   66|      1|}\n+   23|      2|//! #[derive(Debug, PartialEq)]\n+                       ^1\n+   24|      1|//! struct SomeError {\n+   25|      1|//!     msg: String,\n+   26|      1|//! }\n+   27|      1|//! let mut res = Err(SomeError { msg: String::from(\"a message\") });\n+   28|      1|//! if res.is_ok() {\n+   29|      0|//!     res?;\n+   30|       |//! } else {\n+   31|      1|//!     if *res.as_ref().unwrap_err() == *res.as_ref().unwrap_err() {\n+   32|      1|//!         println!(\"{:?}\", res);\n+   33|      1|//!     }\n+                   ^0\n+   34|      1|//!     if *res.as_ref().unwrap_err() == *res.as_ref().unwrap_err() {\n+   35|      1|//!         res = Ok(1);\n+   36|      1|//!     }\n+                   ^0\n+   37|      1|//!     res = Ok(0);\n+   38|       |//! }\n+   39|       |//! // need to be explicit because rustdoc cant infer the return type\n+   40|      1|//! Ok::<(), SomeError>(())\n+   41|      1|//! ```\n+   42|       |//!\n+   43|       |//! doctest with custom main:\n+   44|       |//! ```\n+   45|      1|//! fn some_func() {\n+   46|      1|//!     println!(\"called some_func()\");\n+   47|      1|//! }\n+   48|       |//!\n+   49|       |//! #[derive(Debug)]\n+   50|       |//! struct SomeError;\n+   51|       |//!\n+   52|       |//! extern crate doctest_crate;\n+   53|       |//!\n+   54|      1|//! fn doctest_main() -> Result<(), SomeError> {\n+   55|      1|//!     some_func();\n+   56|      1|//!     doctest_crate::fn_run_in_doctests(2);\n+   57|      1|//!     Ok(())\n+   58|      1|//! }\n+   59|       |//!\n+   60|       |//! // this `main` is not shown as covered, as it clashes with all the other\n+   61|       |//! // `main` functions that were automatically generated for doctests\n+   62|       |//! fn main() -> Result<(), SomeError> {\n+   63|       |//!     doctest_main()\n+   64|       |//! }\n+   65|       |//! ```\n+   66|       |\n+   67|       |/// doctest attached to fn testing external code:\n+   68|       |/// ```\n+   69|      1|/// extern crate doctest_crate;\n+   70|      1|/// doctest_crate::fn_run_in_doctests(3);\n+   71|      1|/// ```\n+   72|       |///\n+   73|      1|fn main() {\n+   74|      1|    if true {\n+   75|      1|        assert_eq!(1, 1);\n+   76|       |    } else {\n+   77|       |        assert_eq!(1, 2);\n+   78|       |    }\n+   79|      1|}\n+   80|       |\n+   81|       |// FIXME(Swatinem): Fix known issue that coverage code region columns need to be offset by the\n+   82|       |// doc comment line prefix (`///` or `//!`) and any additional indent (before or after the doc\n+   83|       |// comment characters). This test produces `llvm-cov show` results demonstrating the problem.\n+   84|       |//\n+   85|       |// One of the above tests now includes: `derive(Debug, PartialEq)`, producing an `llvm-cov show`\n+   86|       |// result with a distinct count for `Debug`, denoted by `^1`, but the caret points to the wrong\n+   87|       |// column. Similarly, the `if` blocks without `else` blocks show `^0`, which should point at, or\n+   88|       |// one character past, the `if` block's closing brace. In both cases, these are most likely off\n+   89|       |// by the number of characters stripped from the beginning of each doc comment line: indent\n+   90|       |// whitespace, if any, doc comment prefix (`//!` in this case) and (I assume) one space character\n+   91|       |// (?). Note, when viewing `llvm-cov show` results in `--color` mode, the column offset errors are\n+   92|       |// more pronounced, and show up in more places, with background color used to show some distinct\n+   93|       |// code regions with different coverage counts.\n+   94|       |//\n+   95|       |// NOTE: Since the doc comment line prefix may vary, one possible solution is to replace each\n+   96|       |// character stripped from the beginning of doc comment lines with a space. This will give coverage\n+   97|       |// results the correct column offsets, and I think it should compile correctly, but I don't know\n+   98|       |// what affect it might have on diagnostic messages from the compiler, and whether anyone would care\n+   99|       |// if the indentation changed. I don't know if there is a more viable solution.\n \n ../coverage/lib/doctest_crate.rs:\n     1|       |/// A function run only from within doctests"}, {"sha": "333476a2df57390b1934eb11e967da276b676690", "filename": "src/test/run-make-fulldeps/coverage-spanview/expected_mir_dump.doctest/doctest.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview%2Fexpected_mir_dump.doctest%2Fdoctest.main.-------.InstrumentCoverage.0.html?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -69,59 +69,59 @@\n </style>\n </head>\n <body>\n-<div class=\"code\" style=\"counter-reset: line 59\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>fn main() <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"61:8-61:12: @0[1]: _1 = const true\n-61:8-61:12: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"62:9-62:26: @5[0]: _2 = const ()\"><span class=\"annotation\">@5\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"62:9-62:26: @6[5]: _75 = const main::promoted[3]\n-62:9-62:26: @6[6]: _18 = &amp;(*_75)\n-62:9-62:26: @6[7]: _17 = &amp;(*_18)\n-62:9-62:26: @6[8]: _16 = move _17 as &amp;[&amp;str] (Pointer(Unsize))\n-62:9-62:26: @6[17]: _26 = &amp;(*_8)\n-62:9-62:26: @6[18]: _25 = &amp;_26\n-62:9-62:26: @6[21]: _28 = &amp;(*_9)\n-62:9-62:26: @6[22]: _27 = &amp;_28\n-62:9-62:26: @6[23]: _24 = (move _25, move _27)\n-62:9-62:26: @6[26]: FakeRead(ForMatchedPlace, _24)\n-62:9-62:26: @6[28]: _29 = (_24.0: &amp;&amp;i32)\n-62:9-62:26: @6[30]: _30 = (_24.1: &amp;&amp;i32)\n-62:9-62:26: @6[33]: _32 = &amp;(*_29)\n-62:9-62:26: @6[35]: _33 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-62:9-62:26: @6.Call: _31 = ArgumentV1::new::&lt;&amp;i32&gt;(move _32, move _33) -&gt; [return: bb7, unwind: bb17]\n-62:9-62:26: @7[4]: _35 = &amp;(*_30)\n-62:9-62:26: @7[6]: _36 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-62:9-62:26: @7.Call: _34 = ArgumentV1::new::&lt;&amp;i32&gt;(move _35, move _36) -&gt; [return: bb8, unwind: bb17]\n-62:9-62:26: @8[2]: _23 = [move _31, move _34]\n-62:9-62:26: @8[7]: _22 = &amp;_23\n-62:9-62:26: @8[8]: _21 = &amp;(*_22)\n-62:9-62:26: @8[9]: _20 = move _21 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-62:9-62:26: @8.Call: _15 = Arguments::new_v1(move _16, move _20) -&gt; [return: bb9, unwind: bb17]\n-62:9-62:26: @9.Call: core::panicking::panic_fmt(move _15) -&gt; bb17\"><span class=\"annotation\">@4,6,7,8,9\u298a</span>assert_eq!(1, 1);<span class=\"annotation\">\u2989@4,6,7,8,9</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"62:9-62:26: @5[0]: _2 = const ()\"><span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<div class=\"code\" style=\"counter-reset: line 72\"><span class=\"line\"><span><span class=\"code even\" style=\"--layer: 1\"><span class=\"annotation\">@0\u298a</span>fn main() <span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">{</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"74:8-74:12: @0[1]: _1 = const true\n+74:8-74:12: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @5[0]: _2 = const ()\"><span class=\"annotation\">@5\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"75:9-75:26: @6[5]: _75 = const main::promoted[3]\n+75:9-75:26: @6[6]: _18 = &amp;(*_75)\n+75:9-75:26: @6[7]: _17 = &amp;(*_18)\n+75:9-75:26: @6[8]: _16 = move _17 as &amp;[&amp;str] (Pointer(Unsize))\n+75:9-75:26: @6[17]: _26 = &amp;(*_8)\n+75:9-75:26: @6[18]: _25 = &amp;_26\n+75:9-75:26: @6[21]: _28 = &amp;(*_9)\n+75:9-75:26: @6[22]: _27 = &amp;_28\n+75:9-75:26: @6[23]: _24 = (move _25, move _27)\n+75:9-75:26: @6[26]: FakeRead(ForMatchedPlace, _24)\n+75:9-75:26: @6[28]: _29 = (_24.0: &amp;&amp;i32)\n+75:9-75:26: @6[30]: _30 = (_24.1: &amp;&amp;i32)\n+75:9-75:26: @6[33]: _32 = &amp;(*_29)\n+75:9-75:26: @6[35]: _33 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+75:9-75:26: @6.Call: _31 = ArgumentV1::new::&lt;&amp;i32&gt;(move _32, move _33) -&gt; [return: bb7, unwind: bb17]\n+75:9-75:26: @7[4]: _35 = &amp;(*_30)\n+75:9-75:26: @7[6]: _36 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+75:9-75:26: @7.Call: _34 = ArgumentV1::new::&lt;&amp;i32&gt;(move _35, move _36) -&gt; [return: bb8, unwind: bb17]\n+75:9-75:26: @8[2]: _23 = [move _31, move _34]\n+75:9-75:26: @8[7]: _22 = &amp;_23\n+75:9-75:26: @8[8]: _21 = &amp;(*_22)\n+75:9-75:26: @8[9]: _20 = move _21 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+75:9-75:26: @8.Call: _15 = Arguments::new_v1(move _16, move _20) -&gt; [return: bb9, unwind: bb17]\n+75:9-75:26: @9.Call: core::panicking::panic_fmt(move _15) -&gt; bb17\"><span class=\"annotation\">@4,6,7,8,9\u298a</span>assert_eq!(1, 1);<span class=\"annotation\">\u2989@4,6,7,8,9</span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"75:9-75:26: @5[0]: _2 = const ()\"><span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"64:9-64:26: @11[0]: _37 = const ()\"><span class=\"annotation\">@11\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"64:9-64:26: @12[5]: _72 = const main::promoted[0]\n-64:9-64:26: @12[6]: _53 = &amp;(*_72)\n-64:9-64:26: @12[7]: _52 = &amp;(*_53)\n-64:9-64:26: @12[8]: _51 = move _52 as &amp;[&amp;str] (Pointer(Unsize))\n-64:9-64:26: @12[17]: _61 = &amp;(*_43)\n-64:9-64:26: @12[18]: _60 = &amp;_61\n-64:9-64:26: @12[21]: _63 = &amp;(*_44)\n-64:9-64:26: @12[22]: _62 = &amp;_63\n-64:9-64:26: @12[23]: _59 = (move _60, move _62)\n-64:9-64:26: @12[26]: FakeRead(ForMatchedPlace, _59)\n-64:9-64:26: @12[28]: _64 = (_59.0: &amp;&amp;i32)\n-64:9-64:26: @12[30]: _65 = (_59.1: &amp;&amp;i32)\n-64:9-64:26: @12[33]: _67 = &amp;(*_64)\n-64:9-64:26: @12[35]: _68 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-64:9-64:26: @12.Call: _66 = ArgumentV1::new::&lt;&amp;i32&gt;(move _67, move _68) -&gt; [return: bb13, unwind: bb17]\n-64:9-64:26: @13[4]: _70 = &amp;(*_65)\n-64:9-64:26: @13[6]: _71 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n-64:9-64:26: @13.Call: _69 = ArgumentV1::new::&lt;&amp;i32&gt;(move _70, move _71) -&gt; [return: bb14, unwind: bb17]\n-64:9-64:26: @14[2]: _58 = [move _66, move _69]\n-64:9-64:26: @14[7]: _57 = &amp;_58\n-64:9-64:26: @14[8]: _56 = &amp;(*_57)\n-64:9-64:26: @14[9]: _55 = move _56 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n-64:9-64:26: @14.Call: _50 = Arguments::new_v1(move _51, move _55) -&gt; [return: bb15, unwind: bb17]\n-64:9-64:26: @15.Call: core::panicking::panic_fmt(move _50) -&gt; bb17\"><span class=\"annotation\">@10,12,13,14,15\u298a</span>assert_eq!(1, 2);<span class=\"annotation\">\u2989@10,12,13,14,15</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"64:9-64:26: @11[0]: _37 = const ()\"><span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @11[0]: _37 = const ()\"><span class=\"annotation\">@11\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"77:9-77:26: @12[5]: _72 = const main::promoted[0]\n+77:9-77:26: @12[6]: _53 = &amp;(*_72)\n+77:9-77:26: @12[7]: _52 = &amp;(*_53)\n+77:9-77:26: @12[8]: _51 = move _52 as &amp;[&amp;str] (Pointer(Unsize))\n+77:9-77:26: @12[17]: _61 = &amp;(*_43)\n+77:9-77:26: @12[18]: _60 = &amp;_61\n+77:9-77:26: @12[21]: _63 = &amp;(*_44)\n+77:9-77:26: @12[22]: _62 = &amp;_63\n+77:9-77:26: @12[23]: _59 = (move _60, move _62)\n+77:9-77:26: @12[26]: FakeRead(ForMatchedPlace, _59)\n+77:9-77:26: @12[28]: _64 = (_59.0: &amp;&amp;i32)\n+77:9-77:26: @12[30]: _65 = (_59.1: &amp;&amp;i32)\n+77:9-77:26: @12[33]: _67 = &amp;(*_64)\n+77:9-77:26: @12[35]: _68 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+77:9-77:26: @12.Call: _66 = ArgumentV1::new::&lt;&amp;i32&gt;(move _67, move _68) -&gt; [return: bb13, unwind: bb17]\n+77:9-77:26: @13[4]: _70 = &amp;(*_65)\n+77:9-77:26: @13[6]: _71 = &lt;&amp;i32 as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r &amp;i32, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+77:9-77:26: @13.Call: _69 = ArgumentV1::new::&lt;&amp;i32&gt;(move _70, move _71) -&gt; [return: bb14, unwind: bb17]\n+77:9-77:26: @14[2]: _58 = [move _66, move _69]\n+77:9-77:26: @14[7]: _57 = &amp;_58\n+77:9-77:26: @14[8]: _56 = &amp;(*_57)\n+77:9-77:26: @14[9]: _55 = move _56 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+77:9-77:26: @14.Call: _50 = Arguments::new_v1(move _51, move _55) -&gt; [return: bb15, unwind: bb17]\n+77:9-77:26: @15.Call: core::panicking::panic_fmt(move _50) -&gt; bb17\"><span class=\"annotation\">@10,12,13,14,15\u298a</span>assert_eq!(1, 2);<span class=\"annotation\">\u2989@10,12,13,14,15</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"77:9-77:26: @11[0]: _37 = const ()\"><span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"66:2-66:2: @16.Return: return\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:2-79:2: @16.Return: return\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "ec04ea57063796851aa7bc1d0b758b6a51660c8d", "filename": "src/test/run-make-fulldeps/coverage/doctest.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fdoctest.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -20,26 +20,39 @@\n //!\n //! doctest returning a result:\n //! ```\n-//! #[derive(Debug)]\n-//! struct SomeError;\n-//! let mut res = Err(SomeError);\n+//! #[derive(Debug, PartialEq)]\n+//! struct SomeError {\n+//!     msg: String,\n+//! }\n+//! let mut res = Err(SomeError { msg: String::from(\"a message\") });\n //! if res.is_ok() {\n-//!   res?;\n+//!     res?;\n //! } else {\n-//!   res = Ok(0);\n+//!     if *res.as_ref().unwrap_err() == *res.as_ref().unwrap_err() {\n+//!         println!(\"{:?}\", res);\n+//!     }\n+//!     if *res.as_ref().unwrap_err() == *res.as_ref().unwrap_err() {\n+//!         res = Ok(1);\n+//!     }\n+//!     res = Ok(0);\n //! }\n //! // need to be explicit because rustdoc cant infer the return type\n //! Ok::<(), SomeError>(())\n //! ```\n //!\n //! doctest with custom main:\n //! ```\n+//! fn some_func() {\n+//!     println!(\"called some_func()\");\n+//! }\n+//!\n //! #[derive(Debug)]\n //! struct SomeError;\n //!\n //! extern crate doctest_crate;\n //!\n //! fn doctest_main() -> Result<(), SomeError> {\n+//!     some_func();\n //!     doctest_crate::fn_run_in_doctests(2);\n //!     Ok(())\n //! }\n@@ -64,3 +77,23 @@ fn main() {\n         assert_eq!(1, 2);\n     }\n }\n+\n+// FIXME(Swatinem): Fix known issue that coverage code region columns need to be offset by the\n+// doc comment line prefix (`///` or `//!`) and any additional indent (before or after the doc\n+// comment characters). This test produces `llvm-cov show` results demonstrating the problem.\n+//\n+// One of the above tests now includes: `derive(Debug, PartialEq)`, producing an `llvm-cov show`\n+// result with a distinct count for `Debug`, denoted by `^1`, but the caret points to the wrong\n+// column. Similarly, the `if` blocks without `else` blocks show `^0`, which should point at, or\n+// one character past, the `if` block's closing brace. In both cases, these are most likely off\n+// by the number of characters stripped from the beginning of each doc comment line: indent\n+// whitespace, if any, doc comment prefix (`//!` in this case) and (I assume) one space character\n+// (?). Note, when viewing `llvm-cov show` results in `--color` mode, the column offset errors are\n+// more pronounced, and show up in more places, with background color used to show some distinct\n+// code regions with different coverage counts.\n+//\n+// NOTE: Since the doc comment line prefix may vary, one possible solution is to replace each\n+// character stripped from the beginning of doc comment lines with a space. This will give coverage\n+// results the correct column offsets, and I think it should compile correctly, but I don't know\n+// what affect it might have on diagnostic messages from the compiler, and whether anyone would care\n+// if the indentation changed. I don't know if there is a more viable solution."}, {"sha": "0d1d5d1134b7b73e05b69075652f0c5a57790ab4", "filename": "src/test/rustdoc-ui/intra-doc/incompatible-primitive-disambiguator.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -0,0 +1,3 @@\n+#![deny(broken_intra_doc_links)]\n+//! [static@u8::MIN]\n+//~^ ERROR incompatible link kind"}, {"sha": "ed1c10f9e0cb803eabe1be99d3b7792a8a064d6f", "filename": "src/test/rustdoc-ui/intra-doc/incompatible-primitive-disambiguator.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fincompatible-primitive-disambiguator.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -0,0 +1,15 @@\n+error: incompatible link kind for `u8::MIN`\n+  --> $DIR/incompatible-primitive-disambiguator.rs:2:6\n+   |\n+LL | //! [static@u8::MIN]\n+   |      ^^^^^^^^^^^^^^ help: to link to the associated constant, prefix with `const@`: `const@u8::MIN`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/incompatible-primitive-disambiguator.rs:1:9\n+   |\n+LL | #![deny(broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this link resolved to an associated constant, which is not a static\n+\n+error: aborting due to previous error\n+"}, {"sha": "acdd07566c94d145540b0a4d19152916841ff535", "filename": "src/test/rustdoc/intra-doc/primitive-disambiguators.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-disambiguators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-disambiguators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprimitive-disambiguators.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -0,0 +1,4 @@\n+#![deny(broken_intra_doc_links)]\n+// @has primitive_disambiguators/index.html\n+// @has - '//a/@href' 'https://doc.rust-lang.org/nightly/std/primitive.str.html#method.trim'\n+//! [str::trim()]"}, {"sha": "21827d1fd874372ac93c3a0af9c663979202e7a6", "filename": "src/test/ui/error-codes/E0435.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -1,6 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/E0435.rs:3:17\n    |\n+LL |     let foo = 42u32;\n+   |         --- help: consider using `const` instead of `let`\n LL |     let _: [u8; foo];\n    |                 ^^^ non-constant value\n "}, {"sha": "ad5f13d0672306c07b63d41a0607aa87c44fc20e", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -2,25 +2,33 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:5:29\n    |\n LL |     const foo: impl Clone = x;\n-   |                             ^ non-constant value\n+   |           ---               ^ non-constant value\n+   |           |\n+   |           help: consider using `let` instead of `const`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:11:33\n    |\n LL |         const foo: impl Clone = x;\n-   |                                 ^ non-constant value\n+   |               ---               ^ non-constant value\n+   |               |\n+   |               help: consider using `let` instead of `const`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:18:33\n    |\n LL |         const foo: impl Clone = x;\n-   |                                 ^ non-constant value\n+   |               ---               ^ non-constant value\n+   |               |\n+   |               help: consider using `let` instead of `const`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:25:33\n    |\n LL |         const foo: impl Clone = x;\n-   |                                 ^ non-constant value\n+   |               ---               ^ non-constant value\n+   |               |\n+   |               help: consider using `let` instead of `const`\n \n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/bindings.rs:1:12"}, {"sha": "201b7e8549cb17ba06a4253d24fd89e9098f8ae5", "filename": "src/test/ui/issues/issue-27433.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -2,7 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-27433.rs:3:23\n    |\n LL |     const FOO : u32 = foo;\n-   |                       ^^^ non-constant value\n+   |           ---         ^^^ non-constant value\n+   |           |\n+   |           help: consider using `let` instead of `const`\n \n error: aborting due to previous error\n "}, {"sha": "ba29d1becb85afa1772ed8db8151b511461a0d85", "filename": "src/test/ui/issues/issue-3521-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -2,7 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3521-2.rs:4:23\n    |\n LL |     static y: isize = foo + 1;\n-   |                       ^^^ non-constant value\n+   |            -          ^^^ non-constant value\n+   |            |\n+   |            help: consider using `let` instead of `static`\n \n error: aborting due to previous error\n "}, {"sha": "8473526006c5c80fb3d365526d31aa9f4ce6e687", "filename": "src/test/ui/issues/issue-3521.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -1,6 +1,9 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3521.rs:6:15\n    |\n+LL |     let foo = 100;\n+   |         --- help: consider using `const` instead of `let`\n+...\n LL |         Bar = foo\n    |               ^^^ non-constant value\n "}, {"sha": "7cee497b0bcedffc8dacfdafb0095cc1539c470d", "filename": "src/test/ui/issues/issue-3668-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -2,7 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3668-2.rs:2:27\n    |\n LL |     static child: isize = x + 1;\n-   |                           ^ non-constant value\n+   |            -----          ^ non-constant value\n+   |            |\n+   |            help: consider using `let` instead of `static`\n \n error: aborting due to previous error\n "}, {"sha": "e45472929ab31ee1a0fc45155a70399adafb16ef", "filename": "src/test/ui/issues/issue-3668.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -2,7 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3668.rs:8:34\n    |\n LL |        static childVal: Box<P> = self.child.get();\n-   |                                  ^^^^ non-constant value\n+   |               --------           ^^^^ non-constant value\n+   |               |\n+   |               help: consider using `let` instead of `static`\n \n error: aborting due to previous error\n "}, {"sha": "dc089b856bb234531408b1e2316ec64186df506b", "filename": "src/test/ui/issues/issue-42060.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -1,12 +1,16 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-42060.rs:3:23\n    |\n+LL |     let thing = ();\n+   |         ----- help: consider using `const` instead of `let`\n LL |     let other: typeof(thing) = thing;\n    |                       ^^^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-42060.rs:9:13\n    |\n+LL |     let q = 1;\n+   |         - help: consider using `const` instead of `let`\n LL |     <typeof(q)>::N\n    |             ^ non-constant value\n "}, {"sha": "bbd3d116c9634530868aab405e404879c54e0141", "filename": "src/test/ui/issues/issue-44239.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -1,6 +1,9 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-44239.rs:6:26\n    |\n+LL |     let n = 0;\n+   |         - help: consider using `const` instead of `let`\n+...\n LL |         const N: usize = n;\n    |                          ^ non-constant value\n "}, {"sha": "2437155d9810a99436928de13da4b75a26e2cca3", "filename": "src/test/ui/mir/mir-inlining/inline-instrument-coverage-fail.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.rs?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -0,0 +1,21 @@\n+// Ensures -Zmir-opt-level=2 (specifically, inlining) is not allowed with -Zinstrument-coverage.\n+// Regression test for issue #80060.\n+//\n+// needs-profiler-support\n+// build-pass\n+// compile-flags: -Zmir-opt-level=2 -Zinstrument-coverage\n+#[inline(never)]\n+fn foo() {}\n+\n+pub fn baz() {\n+    bar();\n+}\n+\n+#[inline(always)]\n+fn bar() {\n+    foo();\n+}\n+\n+fn main() {\n+    bar();\n+}"}, {"sha": "eb50e5075ca8fbfa7d354148794e6786371e8925", "filename": "src/test/ui/mir/mir-inlining/inline-instrument-coverage-fail.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Finline-instrument-coverage-fail.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -0,0 +1,2 @@\n+warning: `-Z mir-opt-level=2` (or any level > 1) enables function inlining, which is incompatible with `-Z instrument-coverage`. Inlining will be disabled.\n+"}, {"sha": "01da6bcf49aaa815e5f5c49efa0c989ace49997e", "filename": "src/test/ui/non-constant-expr-for-arr-len.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -1,6 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/non-constant-expr-for-arr-len.rs:5:22\n    |\n+LL |     fn bar(n: usize) {\n+   |            - help: consider using `const` instead of `let`\n LL |         let _x = [0; n];\n    |                      ^ non-constant value\n "}, {"sha": "5f513684cfa6fee3d9391434dc82478e2d6413b3", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 128, "deletions": 128, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -1211,621 +1211,621 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"allow\",\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"dead_code\",\n-                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                     },\n                 ],\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n         ],\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"print_helper\",\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"b\",\n-                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                     },\n                 ],\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n         ],\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"print_helper\",\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"a\",\n-                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                     },\n                 ],\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n         ],\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Ident {\n         ident: \"Foo\",\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Punct {\n         ch: '<',\n         spacing: Alone,\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Ident {\n         ident: \"B\",\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Punct {\n         ch: '>',\n         spacing: Alone,\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [\n             Ident {\n                 ident: \"second\",\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Ident {\n                 ident: \"bool\",\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Punct {\n                 ch: ',',\n                 spacing: Alone,\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Ident {\n                 ident: \"third\",\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Group {\n                 delimiter: Bracket,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"u8\",\n-                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                     },\n                     Punct {\n                         ch: ';',\n                         spacing: Alone,\n-                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                     },\n                     Group {\n                         delimiter: Brace,\n                         stream: TokenStream [\n                             Punct {\n                                 ch: '#',\n                                 spacing: Alone,\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Group {\n                                 delimiter: Bracket,\n                                 stream: TokenStream [\n                                     Ident {\n                                         ident: \"cfg\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Parenthesis,\n                                         stream: TokenStream [\n                                             Ident {\n                                                 ident: \"not\",\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                             Group {\n                                                 delimiter: Parenthesis,\n                                                 stream: TokenStream [\n                                                     Ident {\n                                                         ident: \"FALSE\",\n-                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                     },\n                                                 ],\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                         ],\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                 ],\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Ident {\n                                 ident: \"struct\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Ident {\n                                 ident: \"Inner\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Punct {\n                                 ch: ';',\n                                 spacing: Alone,\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Ident {\n                                 ident: \"match\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Ident {\n                                 ident: \"true\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Group {\n                                 delimiter: Brace,\n                                 stream: TokenStream [\n                                     Punct {\n                                         ch: '#',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Bracket,\n                                         stream: TokenStream [\n                                             Ident {\n                                                 ident: \"allow\",\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                             Group {\n                                                 delimiter: Parenthesis,\n                                                 stream: TokenStream [\n                                                     Ident {\n                                                         ident: \"warnings\",\n-                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                     },\n                                                 ],\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                         ],\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Ident {\n                                         ident: \"false\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Punct {\n                                         ch: '=',\n                                         spacing: Joint,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Punct {\n                                         ch: '>',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Brace,\n                                         stream: TokenStream [],\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Ident {\n                                         ident: \"_\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Punct {\n                                         ch: '=',\n                                         spacing: Joint,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Punct {\n                                         ch: '>',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Brace,\n                                         stream: TokenStream [],\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                 ],\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Punct {\n                                 ch: ';',\n                                 spacing: Alone,\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Punct {\n                                 ch: '#',\n                                 spacing: Alone,\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Group {\n                                 delimiter: Bracket,\n                                 stream: TokenStream [\n                                     Ident {\n                                         ident: \"print_helper\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Parenthesis,\n                                         stream: TokenStream [\n                                             Ident {\n                                                 ident: \"c\",\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                         ],\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                 ],\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Punct {\n                                 ch: '#',\n                                 spacing: Alone,\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Group {\n                                 delimiter: Bracket,\n                                 stream: TokenStream [\n                                     Ident {\n                                         ident: \"cfg\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Parenthesis,\n                                         stream: TokenStream [\n                                             Ident {\n                                                 ident: \"not\",\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                             Group {\n                                                 delimiter: Parenthesis,\n                                                 stream: TokenStream [\n                                                     Ident {\n                                                         ident: \"FALSE\",\n-                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                     },\n                                                 ],\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                         ],\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                 ],\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Ident {\n                                 ident: \"fn\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Ident {\n                                 ident: \"kept_fn\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Group {\n                                 delimiter: Parenthesis,\n                                 stream: TokenStream [],\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Group {\n                                 delimiter: Brace,\n                                 stream: TokenStream [\n                                     Punct {\n                                         ch: '#',\n                                         spacing: Joint,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Punct {\n                                         ch: '!',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Bracket,\n                                         stream: TokenStream [\n                                             Ident {\n                                                 ident: \"cfg\",\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                             Group {\n                                                 delimiter: Parenthesis,\n                                                 stream: TokenStream [\n                                                     Ident {\n                                                         ident: \"not\",\n-                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                     },\n                                                     Group {\n                                                         delimiter: Parenthesis,\n                                                         stream: TokenStream [\n                                                             Ident {\n                                                                 ident: \"FALSE\",\n-                                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                             },\n                                                         ],\n-                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                     },\n                                                 ],\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                         ],\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Ident {\n                                         ident: \"let\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Ident {\n                                         ident: \"my_val\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Punct {\n                                         ch: '=',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Ident {\n                                         ident: \"true\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Punct {\n                                         ch: ';',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                 ],\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Ident {\n                                 ident: \"enum\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Ident {\n                                 ident: \"TupleEnum\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Group {\n                                 delimiter: Brace,\n                                 stream: TokenStream [\n                                     Ident {\n                                         ident: \"Foo\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Parenthesis,\n                                         stream: TokenStream [\n                                             Punct {\n                                                 ch: '#',\n                                                 spacing: Alone,\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                             Group {\n                                                 delimiter: Bracket,\n                                                 stream: TokenStream [\n                                                     Ident {\n                                                         ident: \"cfg\",\n-                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                     },\n                                                     Group {\n                                                         delimiter: Parenthesis,\n                                                         stream: TokenStream [\n                                                             Ident {\n                                                                 ident: \"not\",\n-                                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                             },\n                                                             Group {\n                                                                 delimiter: Parenthesis,\n                                                                 stream: TokenStream [\n                                                                     Ident {\n                                                                         ident: \"FALSE\",\n-                                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                                     },\n                                                                 ],\n-                                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                             },\n                                                         ],\n-                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                     },\n                                                 ],\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                             Ident {\n                                                 ident: \"i32\",\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                             Punct {\n                                                 ch: ',',\n                                                 spacing: Alone,\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                             Ident {\n                                                 ident: \"u8\",\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                         ],\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Punct {\n                                         ch: ',',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                 ],\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Ident {\n                                 ident: \"struct\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Ident {\n                                 ident: \"TupleStruct\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Group {\n                                 delimiter: Parenthesis,\n                                 stream: TokenStream [\n                                     Punct {\n                                         ch: '#',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Group {\n                                         delimiter: Bracket,\n                                         stream: TokenStream [\n                                             Ident {\n                                                 ident: \"cfg\",\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                             Group {\n                                                 delimiter: Parenthesis,\n                                                 stream: TokenStream [\n                                                     Ident {\n                                                         ident: \"not\",\n-                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                     },\n                                                     Group {\n                                                         delimiter: Parenthesis,\n                                                         stream: TokenStream [\n                                                             Ident {\n                                                                 ident: \"FALSE\",\n-                                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                             },\n                                                         ],\n-                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                                     },\n                                                 ],\n-                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                             },\n                                         ],\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Ident {\n                                         ident: \"i32\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Punct {\n                                         ch: ',',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                     Ident {\n                                         ident: \"u8\",\n-                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                                     },\n                                 ],\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Punct {\n                                 ch: ';',\n                                 spacing: Alone,\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                             Literal {\n                                 kind: Integer,\n                                 symbol: \"0\",\n                                 suffix: None,\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                         ],\n-                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                     },\n                 ],\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Punct {\n                 ch: ',',\n                 spacing: Alone,\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Punct {\n                 ch: '#',\n                 spacing: Alone,\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Group {\n                 delimiter: Bracket,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"print_helper\",\n-                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                     },\n                     Group {\n                         delimiter: Parenthesis,\n                         stream: TokenStream [\n                             Ident {\n                                 ident: \"d\",\n-                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                             },\n                         ],\n-                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n                     },\n                 ],\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Ident {\n                 ident: \"fourth\",\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Ident {\n                 ident: \"B\",\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n             Punct {\n                 ch: ',',\n                 spacing: Alone,\n-                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n             },\n         ],\n-        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 64:2 (#0),\n     },\n ]"}, {"sha": "40da5aa93bfa848906b64ac3c692d4c3f7f52420", "filename": "src/test/ui/proc-macro/issue-78675-captured-inner-attrs.stdout", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-78675-captured-inner-attrs.stdout?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -34,48 +34,48 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"mod\",\n-                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                        span: $DIR/issue-78675-captured-inner-attrs.rs:27:5: 29:6 (#0),\n                     },\n                     Ident {\n                         ident: \"bar\",\n-                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                        span: $DIR/issue-78675-captured-inner-attrs.rs:27:5: 29:6 (#0),\n                     },\n                     Group {\n                         delimiter: Brace,\n                         stream: TokenStream [\n                             Punct {\n                                 ch: '#',\n                                 spacing: Joint,\n-                                span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                                span: $DIR/issue-78675-captured-inner-attrs.rs:27:5: 29:6 (#0),\n                             },\n                             Punct {\n                                 ch: '!',\n                                 spacing: Alone,\n-                                span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                                span: $DIR/issue-78675-captured-inner-attrs.rs:27:5: 29:6 (#0),\n                             },\n                             Group {\n                                 delimiter: Bracket,\n                                 stream: TokenStream [\n                                     Ident {\n                                         ident: \"doc\",\n-                                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                                        span: $DIR/issue-78675-captured-inner-attrs.rs:27:5: 29:6 (#0),\n                                     },\n                                     Punct {\n                                         ch: '=',\n                                         spacing: Alone,\n-                                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                                        span: $DIR/issue-78675-captured-inner-attrs.rs:27:5: 29:6 (#0),\n                                     },\n                                     Literal {\n                                         kind: StrRaw(0),\n                                         symbol: \" Foo\",\n                                         suffix: None,\n-                                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                                        span: $DIR/issue-78675-captured-inner-attrs.rs:27:5: 29:6 (#0),\n                                     },\n                                 ],\n-                                span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                                span: $DIR/issue-78675-captured-inner-attrs.rs:27:5: 29:6 (#0),\n                             },\n                         ],\n-                        span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),\n+                        span: $DIR/issue-78675-captured-inner-attrs.rs:27:5: 29:6 (#0),\n                     },\n                 ],\n                 span: $DIR/issue-78675-captured-inner-attrs.rs:22:13: 22:18 (#4),"}, {"sha": "aa1b2e60d51f865408e06cc27a59a3ed6cd4b3f4", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -1,6 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/repeat_count.rs:5:17\n    |\n+LL |     let n = 1;\n+   |         - help: consider using `const` instead of `let`\n LL |     let a = [0; n];\n    |                 ^ non-constant value\n "}, {"sha": "df791435e88b95d8017f5f8cc5ed23c4868e6a21", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=c8915eebeaaef9f7cc1cff6ffd97f578b03c2ac9", "patch": "@@ -2,7 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/type-dependent-def-issue-49241.rs:3:22\n    |\n LL |     const l: usize = v.count();\n-   |                      ^ non-constant value\n+   |           -          ^ non-constant value\n+   |           |\n+   |           help: consider using `let` instead of `const`\n \n error: aborting due to previous error\n "}]}