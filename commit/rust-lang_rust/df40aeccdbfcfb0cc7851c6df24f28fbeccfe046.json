{"sha": "df40aeccdbfcfb0cc7851c6df24f28fbeccfe046", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNDBhZWNjZGJmY2ZiMGNjNzg1MWM2ZGYyNGYyOGZiZWNjZmUwNDY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-02-28T20:55:51Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-03-02T06:40:52Z"}, "message": "libstd: Add some functionality to `Vec<T>`", "tree": {"sha": "39c891c98cb2999f2b2df895ea660a1dc7824cc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39c891c98cb2999f2b2df895ea660a1dc7824cc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df40aeccdbfcfb0cc7851c6df24f28fbeccfe046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df40aeccdbfcfb0cc7851c6df24f28fbeccfe046", "html_url": "https://github.com/rust-lang/rust/commit/df40aeccdbfcfb0cc7851c6df24f28fbeccfe046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df40aeccdbfcfb0cc7851c6df24f28fbeccfe046/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81b3fb21a560f9eaacc06ceeabcd5b4339e54d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81b3fb21a560f9eaacc06ceeabcd5b4339e54d0", "html_url": "https://github.com/rust-lang/rust/commit/c81b3fb21a560f9eaacc06ceeabcd5b4339e54d0"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "0d319c5d74ef996957ec67943fccb21e87c2059b", "filename": "src/libstd/hash/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df40aeccdbfcfb0cc7851c6df24f28fbeccfe046/src%2Flibstd%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40aeccdbfcfb0cc7851c6df24f28fbeccfe046/src%2Flibstd%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fmod.rs?ref=df40aeccdbfcfb0cc7851c6df24f28fbeccfe046", "patch": "@@ -70,6 +70,7 @@ use option::{Option, Some, None};\n use rc::Rc;\n use str::{Str, StrSlice};\n use vec::{Vector, ImmutableVector};\n+use vec_ng::Vec;\n \n /// Reexport the `sip::hash` function as our default hasher.\n pub use hash = self::sip::hash;\n@@ -207,6 +208,13 @@ impl<S: Writer, T: Hash<S>> Hash<S> for ~[T] {\n     }\n }\n \n+impl<S: Writer, T: Hash<S>> Hash<S> for Vec<T> {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        self.as_slice().hash(state);\n+    }\n+}\n+\n impl<'a, S: Writer, T: Hash<S>> Hash<S> for &'a T {\n     #[inline]\n     fn hash(&self, state: &mut S) {"}, {"sha": "6cc3ccc345237f800f63a06ae38bf0f0f9585a4c", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/df40aeccdbfcfb0cc7851c6df24f28fbeccfe046/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df40aeccdbfcfb0cc7851c6df24f28fbeccfe046/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=df40aeccdbfcfb0cc7851c6df24f28fbeccfe046", "patch": "@@ -15,6 +15,7 @@ use cast::{forget, transmute};\n use clone::Clone;\n use cmp::{Eq, Ordering, TotalEq, TotalOrd};\n use container::Container;\n+use default::Default;\n use iter::{DoubleEndedIterator, FromIterator, Iterator};\n use libc::{free, c_void};\n use mem::{size_of, move_val_init};\n@@ -26,7 +27,8 @@ use ptr::RawPtr;\n use ptr;\n use rt::global_heap::{malloc_raw, realloc_raw};\n use raw::Slice;\n-use vec::{ImmutableVector, Items, MutItems, MutableVector, RevItems};\n+use vec::{ImmutableEqVector, ImmutableVector, Items, MutItems, MutableVector};\n+use vec::{RevItems};\n \n pub struct Vec<T> {\n     priv len: uint,\n@@ -340,6 +342,18 @@ impl<T> Vec<T> {\n     pub fn slice_from<'a>(&'a self, start: uint) -> &'a [T] {\n         self.as_slice().slice_from(start)\n     }\n+\n+    #[inline]\n+    pub fn init<'a>(&'a self) -> &'a [T] {\n+        self.slice(0, self.len() - 1)\n+    }\n+}\n+\n+impl<T:Eq> Vec<T> {\n+    /// Return true if a vector contains an element with the given value\n+    pub fn contains(&self, x: &T) -> bool {\n+        self.as_slice().contains(x)\n+    }\n }\n \n #[inline]\n@@ -348,6 +362,14 @@ pub fn append<T:Clone>(mut first: Vec<T>, second: &[T]) -> Vec<T> {\n     first\n }\n \n+/// Appends one element to the vector provided. The vector itself is then\n+/// returned for use again.\n+#[inline]\n+pub fn append_one<T>(mut lhs: Vec<T>, x: T) -> Vec<T> {\n+    lhs.push(x);\n+    lhs\n+}\n+\n #[unsafe_destructor]\n impl<T> Drop for Vec<T> {\n     fn drop(&mut self) {\n@@ -360,6 +382,12 @@ impl<T> Drop for Vec<T> {\n     }\n }\n \n+impl<T> Default for Vec<T> {\n+    fn default() -> Vec<T> {\n+        Vec::new()\n+    }\n+}\n+\n pub struct MoveItems<T> {\n     priv allocation: *mut c_void, // the block of memory allocated for the vector\n     priv iter: Items<'static, T>"}]}