{"sha": "36b6d0ecdc7cced17e1b7341883a33e42e03b7b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YjZkMGVjZGM3Y2NlZDE3ZTFiNzM0MTg4M2EzM2U0MmUwM2I3YjI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-28T10:14:06Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T00:55:13Z"}, "message": "Added tests for discriminant overflows.", "tree": {"sha": "6cb4d044ce6cf9ebff4e005699d98bcf269de5f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb4d044ce6cf9ebff4e005699d98bcf269de5f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2", "html_url": "https://github.com/rust-lang/rust/commit/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e04d57efa665ae62a2af4c2d785809f15c17599", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e04d57efa665ae62a2af4c2d785809f15c17599", "html_url": "https://github.com/rust-lang/rust/commit/4e04d57efa665ae62a2af4c2d785809f15c17599"}], "stats": {"total": 476, "additions": 476, "deletions": 0}, "files": [{"sha": "23106c99594a6f69e7f2c0ba3734453145a1df19", "filename": "src/test/compile-fail/discrim-ill-typed.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2/src%2Ftest%2Fcompile-fail%2Fdiscrim-ill-typed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2/src%2Ftest%2Fcompile-fail%2Fdiscrim-ill-typed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-ill-typed.rs?ref=36b6d0ecdc7cced17e1b7341883a33e42e03b7b2", "patch": "@@ -0,0 +1,118 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// When explicit discriminant value has\n+// a type that does not match the representation\n+// type, rustc should fail gracefully.\n+\n+// See also run-pass/discrim-explicit-23030.rs where the input types\n+// are correct.\n+\n+#![allow(dead_code, unused_variables, unused_imports)]\n+\n+use std::{i8,u8,i16,u16,i32,u32,i64, u64};\n+\n+fn f_i8() {\n+    #[repr(i8)]\n+    enum A {\n+        Ok = i8::MAX - 1,\n+        Ok2,\n+        OhNo = 0_u8,\n+        //~^ ERROR mismatched types\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_u8() {\n+    #[repr(u8)]\n+    enum A {\n+        Ok = u8::MAX - 1,\n+        Ok2,\n+        OhNo = 0_i8,\n+        //~^  ERROR mismatched types\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_i16() {\n+    #[repr(i16)]\n+    enum A {\n+        Ok = i16::MAX - 1,\n+        Ok2,\n+        OhNo = 0_u16,\n+        //~^ ERROR mismatched types\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_u16() {\n+    #[repr(u16)]\n+    enum A {\n+        Ok = u16::MAX - 1,\n+        Ok2,\n+        OhNo = 0_i16,\n+        //~^ ERROR mismatched types\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_i32() {\n+    #[repr(i32)]\n+    enum A {\n+        Ok = i32::MAX - 1,\n+        Ok2,\n+        OhNo = 0_u32,\n+        //~^ ERROR mismatched types\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_u32() {\n+    #[repr(u32)]\n+    enum A {\n+        Ok = u32::MAX - 1,\n+        Ok2,\n+        OhNo = 0_i32,\n+        //~^ ERROR mismatched types\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_i64() {\n+    #[repr(i64)]\n+    enum A {\n+        Ok = i64::MAX - 1,\n+        Ok2,\n+        OhNo = 0_u64,\n+        //~^ ERROR mismatched types\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_u64() {\n+    #[repr(u64)]\n+    enum A {\n+        Ok = u64::MAX - 1,\n+        Ok2,\n+        OhNo = 0_i64,\n+        //~^ ERROR mismatched types\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn main() { }"}, {"sha": "76378d5c8021bd03eac59f856ba9ad41e5c766aa", "filename": "src/test/compile-fail/discrim-overflow-2.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow-2.rs?ref=36b6d0ecdc7cced17e1b7341883a33e42e03b7b2", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+// Issue 23030: Detect overflowing discriminant\n+//\n+// Check that we detect the overflow even if enum is not used.\n+\n+// See also run-pass/discrim-explicit-23030.rs where the suggested\n+// workaround is tested.\n+\n+use std::{i8,u8,i16,u16,i32,u32,i64, u64};\n+\n+fn f_i8() {\n+    #[repr(i8)]\n+    enum A {\n+        Ok = i8::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed on value after 127: i8; set explicitly via OhNo = -128 if that is desired outcome\n+    }\n+}\n+\n+fn f_u8() {\n+    #[repr(u8)]\n+    enum A {\n+        Ok = u8::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed on value after 255: u8; set explicitly via OhNo = 0 if that is desired outcome\n+    }\n+}\n+\n+fn f_i16() {\n+    #[repr(i16)]\n+    enum A {\n+        Ok = i16::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+}\n+\n+fn f_u16() {\n+    #[repr(u16)]\n+    enum A {\n+        Ok = u16::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+}\n+\n+fn f_i32() {\n+    #[repr(i32)]\n+    enum A {\n+        Ok = i32::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+}\n+\n+fn f_u32() {\n+    #[repr(u32)]\n+    enum A {\n+        Ok = u32::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+}\n+\n+fn f_i64() {\n+    #[repr(i64)]\n+    enum A {\n+        Ok = i64::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+}\n+\n+fn f_u64() {\n+    #[repr(u64)]\n+    enum A {\n+        Ok = u64::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "5d7e61e9d1eec67fcb340de8ca036661ab9236e9", "filename": "src/test/compile-fail/discrim-overflow.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-overflow.rs?ref=36b6d0ecdc7cced17e1b7341883a33e42e03b7b2", "patch": "@@ -0,0 +1,108 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+// Issue 23030: Detect overflowing discriminant\n+\n+// See also run-pass/discrim-explicit-23030.rs where the suggested\n+// workaround is tested.\n+\n+use std::{i8,u8,i16,u16,i32,u32,i64, u64};\n+\n+fn f_i8() {\n+    #[repr(i8)]\n+    enum A {\n+        Ok = i8::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed on value after 127: i8; set explicitly via OhNo = -128 if that is desired outcome\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_u8() {\n+    #[repr(u8)]\n+    enum A {\n+        Ok = u8::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed on value after 255: u8; set explicitly via OhNo = 0 if that is desired outcome\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_i16() {\n+    #[repr(i16)]\n+    enum A {\n+        Ok = i16::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_u16() {\n+    #[repr(u16)]\n+    enum A {\n+        Ok = u16::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_i32() {\n+    #[repr(i32)]\n+    enum A {\n+        Ok = i32::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_u32() {\n+    #[repr(u32)]\n+    enum A {\n+        Ok = u32::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_i64() {\n+    #[repr(i64)]\n+    enum A {\n+        Ok = i64::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn f_u64() {\n+    #[repr(u64)]\n+    enum A {\n+        Ok = u64::MAX - 1,\n+        Ok2,\n+        OhNo, //~ ERROR enum discriminant overflowed\n+    }\n+\n+    let x = A::Ok;\n+}\n+\n+fn main() { }"}, {"sha": "aed7b1527ce76d1f2cf483058d9910505f9c177c", "filename": "src/test/run-pass/discrim-explicit-23030.rs", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2/src%2Ftest%2Frun-pass%2Fdiscrim-explicit-23030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b6d0ecdc7cced17e1b7341883a33e42e03b7b2/src%2Ftest%2Frun-pass%2Fdiscrim-explicit-23030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiscrim-explicit-23030.rs?ref=36b6d0ecdc7cced17e1b7341883a33e42e03b7b2", "patch": "@@ -0,0 +1,156 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue 23030: Workaround overflowing discriminant\n+// with explicit assignments.\n+\n+// See also compile-fail/overflow-discrim.rs, which shows what\n+// happens if you leave the OhNo explicit cases out here.\n+\n+use std::{i8,u8,i16,u16,i32,u32,i64,u64,isize,usize};\n+\n+fn f_i8() {\n+    #[repr(i8)]\n+    enum A {\n+        Ok = i8::MAX - 1,\n+        Ok2,\n+        OhNo = i8::MIN,\n+        NotTheEnd = -1,\n+        Zero,\n+    }\n+\n+    let _x = (A::Ok, A::Ok2, A::OhNo);\n+    let z = (A::NotTheEnd, A::Zero).1 as i8;\n+    assert_eq!(z, 0);\n+}\n+\n+fn f_u8() {\n+    #[repr(u8)]\n+    enum A {\n+        Ok = u8::MAX - 1,\n+        Ok2,\n+        OhNo = u8::MIN,\n+    }\n+\n+    let _x = (A::Ok, A::Ok2, A::OhNo);\n+}\n+\n+fn f_i16() {\n+    #[repr(i16)]\n+    enum A {\n+        Ok = i16::MAX - 1,\n+        Ok2,\n+        OhNo = i16::MIN,\n+        NotTheEnd = -1,\n+        Zero,\n+    }\n+\n+    let _x = (A::Ok, A::Ok2, A::OhNo);\n+    let z = (A::NotTheEnd, A::Zero).1 as i16;\n+    assert_eq!(z, 0);\n+}\n+\n+fn f_u16() {\n+    #[repr(u16)]\n+    enum A {\n+        Ok = u16::MAX - 1,\n+        Ok2,\n+        OhNo = u16::MIN,\n+    }\n+\n+    let _x = (A::Ok, A::Ok2, A::OhNo);\n+}\n+\n+fn f_i32() {\n+    #[repr(i32)]\n+    enum A {\n+        Ok = i32::MAX - 1,\n+        Ok2,\n+        OhNo = i32::MIN,\n+        NotTheEnd = -1,\n+        Zero,\n+    }\n+\n+    let _x = (A::Ok, A::Ok2, A::OhNo);\n+    let z = (A::NotTheEnd, A::Zero).1 as i32;\n+    assert_eq!(z, 0);\n+}\n+\n+fn f_u32() {\n+    #[repr(u32)]\n+    enum A {\n+        Ok = u32::MAX - 1,\n+        Ok2,\n+        OhNo = u32::MIN,\n+    }\n+\n+    let _x = (A::Ok, A::Ok2, A::OhNo);\n+}\n+\n+fn f_i64() {\n+    #[repr(i64)]\n+    enum A {\n+        Ok = i64::MAX - 1,\n+        Ok2,\n+        OhNo = i64::MIN,\n+        NotTheEnd = -1,\n+        Zero,\n+    }\n+\n+    let _x = (A::Ok, A::Ok2, A::OhNo);\n+    let z = (A::NotTheEnd, A::Zero).1 as i64;\n+    assert_eq!(z, 0);\n+}\n+\n+fn f_u64() {\n+    #[repr(u64)]\n+    enum A {\n+        Ok = u64::MAX - 1,\n+        Ok2,\n+        OhNo = u64::MIN,\n+    }\n+\n+    let _x = (A::Ok, A::Ok2, A::OhNo);\n+}\n+\n+fn f_isize() {\n+    #[repr(isize)]\n+    enum A {\n+        Ok = isize::MAX - 1,\n+        Ok2,\n+        OhNo = isize::MIN,\n+        NotTheEnd = -1,\n+        Zero,\n+    }\n+\n+    let _x = (A::Ok, A::Ok2, A::OhNo);\n+    let z = (A::NotTheEnd, A::Zero).1 as isize;\n+    assert_eq!(z, 0);\n+}\n+\n+fn f_usize() {\n+    #[repr(usize)]\n+    enum A {\n+        Ok = usize::MAX - 1,\n+        Ok2,\n+        OhNo = usize::MIN,\n+    }\n+\n+    let _x = (A::Ok, A::Ok2, A::OhNo);\n+}\n+\n+fn main() {\n+    f_i8(); f_u8();\n+    f_i16(); f_u16();\n+    f_i32(); f_u32();\n+    f_i64(); f_u64();\n+\n+    f_isize(); f_usize();\n+}"}]}