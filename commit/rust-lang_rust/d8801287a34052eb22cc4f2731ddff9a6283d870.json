{"sha": "d8801287a34052eb22cc4f2731ddff9a6283d870", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODAxMjg3YTM0MDUyZWIyMmNjNGYyNzMxZGRmZjlhNjI4M2Q4NzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-21T08:41:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-21T08:41:40Z"}, "message": "Auto merge of #39206 - MJDSys:fix_rustbuild_libdir, r=alexcrichton\n\nFix rustbuild to work with --libdir.\n\nSimilar to the makefiles, pass CFG_LIBDIR_RELATIVE to cargo when building\nrustc in stages > 0.  This tells rustc to check the different directory.\n\nI'm not sure how you want this handled in the toml system (my distribution, Gentoo, uses configure still).  I have a feeling the system needs a rework anyways for rustbuild.  If there is some discussion that needs to happen, could you merge this in the mean time?  I'd be happy to help transition this to a better method.", "tree": {"sha": "47f56121cd3b5f6ac5d891ce8daba6dae57d801d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47f56121cd3b5f6ac5d891ce8daba6dae57d801d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8801287a34052eb22cc4f2731ddff9a6283d870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8801287a34052eb22cc4f2731ddff9a6283d870", "html_url": "https://github.com/rust-lang/rust/commit/d8801287a34052eb22cc4f2731ddff9a6283d870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8801287a34052eb22cc4f2731ddff9a6283d870/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4cb1878f04b0edb91f978347a6cb9545e9a1275", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4cb1878f04b0edb91f978347a6cb9545e9a1275", "html_url": "https://github.com/rust-lang/rust/commit/b4cb1878f04b0edb91f978347a6cb9545e9a1275"}, {"sha": "4c02d9f6bf2404f0a077cced12cf434c70979fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c02d9f6bf2404f0a077cced12cf434c70979fd9", "html_url": "https://github.com/rust-lang/rust/commit/4c02d9f6bf2404f0a077cced12cf434c70979fd9"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "7c35151a6d274ea236e4316dbf9424cb8715f387", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8801287a34052eb22cc4f2731ddff9a6283d870/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8801287a34052eb22cc4f2731ddff9a6283d870/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=d8801287a34052eb22cc4f2731ddff9a6283d870", "patch": "@@ -194,8 +194,14 @@ pub fn rustc(build: &Build, target: &str, compiler: &Compiler) {\n     cargo.env(\"CFG_RELEASE\", &build.release)\n          .env(\"CFG_RELEASE_CHANNEL\", &build.config.channel)\n          .env(\"CFG_VERSION\", &build.version)\n-         .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or(PathBuf::new()))\n-         .env(\"CFG_LIBDIR_RELATIVE\", \"lib\");\n+         .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or(PathBuf::new()));\n+\n+    if compiler.stage == 0 {\n+        cargo.env(\"CFG_LIBDIR_RELATIVE\", \"lib\");\n+    } else {\n+        let libdir_relative = build.config.libdir_relative.clone().unwrap_or(PathBuf::from(\"lib\"));\n+        cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n+    }\n \n     // If we're not building a compiler with debugging information then remove\n     // these two env vars which would be set otherwise."}, {"sha": "152164342cdd2ba042a73babc851cc52263eddc2", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8801287a34052eb22cc4f2731ddff9a6283d870/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8801287a34052eb22cc4f2731ddff9a6283d870/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=d8801287a34052eb22cc4f2731ddff9a6283d870", "patch": "@@ -90,6 +90,7 @@ pub struct Config {\n     pub prefix: Option<PathBuf>,\n     pub docdir: Option<PathBuf>,\n     pub libdir: Option<PathBuf>,\n+    pub libdir_relative: Option<PathBuf>,\n     pub mandir: Option<PathBuf>,\n     pub codegen_tests: bool,\n     pub nodejs: Option<PathBuf>,\n@@ -477,6 +478,9 @@ impl Config {\n                 \"CFG_LIBDIR\" => {\n                     self.libdir = Some(PathBuf::from(value));\n                 }\n+                \"CFG_LIBDIR_RELATIVE\" => {\n+                    self.libdir_relative = Some(PathBuf::from(value));\n+                }\n                 \"CFG_MANDIR\" => {\n                     self.mandir = Some(PathBuf::from(value));\n                 }"}]}