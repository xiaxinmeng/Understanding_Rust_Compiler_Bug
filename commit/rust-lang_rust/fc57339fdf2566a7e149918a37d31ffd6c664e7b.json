{"sha": "fc57339fdf2566a7e149918a37d31ffd6c664e7b", "node_id": "C_kwDOAAsO6NoAKGZjNTczMzlmZGYyNTY2YTdlMTQ5OTE4YTM3ZDMxZmZkNmM2NjRlN2I", "commit": {"author": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-04-03T01:06:15Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T13:56:13Z"}, "message": "removing unused code", "tree": {"sha": "382a8dfa8561a4f760a3e9a689efe880f038be79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/382a8dfa8561a4f760a3e9a689efe880f038be79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc57339fdf2566a7e149918a37d31ffd6c664e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc57339fdf2566a7e149918a37d31ffd6c664e7b", "html_url": "https://github.com/rust-lang/rust/commit/fc57339fdf2566a7e149918a37d31ffd6c664e7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc57339fdf2566a7e149918a37d31ffd6c664e7b/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299382dacd53a4a19728d9e125cd490b1077c985", "url": "https://api.github.com/repos/rust-lang/rust/commits/299382dacd53a4a19728d9e125cd490b1077c985", "html_url": "https://github.com/rust-lang/rust/commit/299382dacd53a4a19728d9e125cd490b1077c985"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "8c2e55bcc26aa50bbdb18f4fb931bd530fd7aa17", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc57339fdf2566a7e149918a37d31ffd6c664e7b/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/fc57339fdf2566a7e149918a37d31ffd6c664e7b/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=fc57339fdf2566a7e149918a37d31ffd6c664e7b", "patch": "@@ -3,9 +3,7 @@ import * as os from \"os\";\n import * as path from \"path\";\n import * as readline from \"readline\";\n import * as vscode from \"vscode\";\n-import { execute, log, memoizeAsync } from \"./util\";\n-\n-const TOOLCHAIN_PATTERN = new RegExp(/(.*)\\s\\(.*\\)/);\n+import {execute, log, memoizeAsync} from \"./util\";\n \n interface CompilationArtifact {\n     fileName: string;\n@@ -24,7 +22,7 @@ export class Cargo {\n         readonly rootFolder: string,\n         readonly output: vscode.OutputChannel,\n         readonly env: Record<string, string>\n-    ) { }\n+    ) {}\n \n     // Made public for testing purposes\n     static artifactSpec(args: readonly string[]): ArtifactSpec {\n@@ -44,7 +42,7 @@ export class Cargo {\n             }\n         }\n \n-        const result: ArtifactSpec = { cargoArgs: cargoArgs };\n+        const result: ArtifactSpec = {cargoArgs: cargoArgs};\n         if (cargoArgs[0] === \"test\" || cargoArgs[0] === \"bench\") {\n             // for instance, `crates\\rust-analyzer\\tests\\heavy_tests\\main.rs` tests\n             // produce 2 artifacts: {\"kind\": \"bin\"} and {\"kind\": \"test\"}\n@@ -149,7 +147,7 @@ export class Cargo {\n \n             cargo.stderr.on(\"data\", (chunk) => onStderrString(chunk.toString()));\n \n-            const rl = readline.createInterface({ input: cargo.stdout });\n+            const rl = readline.createInterface({input: cargo.stdout});\n             rl.on(\"line\", (line) => {\n                 const message = JSON.parse(line);\n                 onStdoutJson(message);\n@@ -191,14 +189,14 @@ export async function getSysroot(dir: string): Promise<string> {\n     const rustcPath = await getPathForExecutable(\"rustc\");\n \n     // do not memoize the result because the toolchain may change between runs\n-    return await execute(`${rustcPath} --print sysroot`, { cwd: dir });\n+    return await execute(`${rustcPath} --print sysroot`, {cwd: dir});\n }\n \n export async function getRustcId(dir: string): Promise<string> {\n     const rustcPath = await getPathForExecutable(\"rustc\");\n \n     // do not memoize the result because the toolchain may change between runs\n-    const data = await execute(`${rustcPath} -V -v`, { cwd: dir });\n+    const data = await execute(`${rustcPath} -V -v`, {cwd: dir});\n     const rx = /commit-hash:\\s(.*)$/m;\n \n     return rx.exec(data)![1];\n@@ -219,11 +217,6 @@ export function cargoPath(): Promise<string> {\n     return getPathForExecutable(\"cargo\");\n }\n \n-/** Mirrors `toolchain::cargo()` implementation */\n-export function rustupPath(): Promise<string> {\n-    return getPathForExecutable(\"rustup\");\n-}\n-\n /** Mirrors `toolchain::get_path_for_executable()` implementation */\n export const getPathForExecutable = memoizeAsync(\n     // We apply caching to decrease file-system interactions"}]}