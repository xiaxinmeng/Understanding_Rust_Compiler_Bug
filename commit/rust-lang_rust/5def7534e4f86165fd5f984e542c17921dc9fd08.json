{"sha": "5def7534e4f86165fd5f984e542c17921dc9fd08", "node_id": "C_kwDOAAsO6NoAKDVkZWY3NTM0ZTRmODYxNjVmZDVmOTg0ZTU0MmMxNzkyMWRjOWZkMDg", "commit": {"author": {"name": "beetrees", "email": "b@beetr.ee", "date": "2022-10-05T21:27:17Z"}, "committer": {"name": "beetrees", "email": "b@beetr.ee", "date": "2022-10-14T14:13:20Z"}, "message": "Fix `checked_{add,sub}_duration` incorrectly returning `None` when `other` has more than `i64::MAX` seconds", "tree": {"sha": "af6313250749536ee84d8dc77a820db63fadb062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af6313250749536ee84d8dc77a820db63fadb062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5def7534e4f86165fd5f984e542c17921dc9fd08", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQT9oej+Slbzs/bk2IuHkb11QZHr1gUCY0lugAAKCRCHkb11QZHr\n1p2HAP9EiC7Pyh0Baf0qcspymt/fQVOuFmz61LEOuFYtSPb3HgD/b5gofG+8/KTJ\n1oEhWPbyAD6Jui7IJbXVZBpEiTfMVQQ=\n=ZwX4\n-----END PGP SIGNATURE-----", "payload": "tree af6313250749536ee84d8dc77a820db63fadb062\nparent 9b0a099dfc9a97ecd10adb319396c731c4b2d169\nauthor beetrees <b@beetr.ee> 1665005237 +0100\ncommitter beetrees <b@beetr.ee> 1665756800 +0100\n\nFix `checked_{add,sub}_duration` incorrectly returning `None` when `other` has more than `i64::MAX` seconds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5def7534e4f86165fd5f984e542c17921dc9fd08", "html_url": "https://github.com/rust-lang/rust/commit/5def7534e4f86165fd5f984e542c17921dc9fd08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5def7534e4f86165fd5f984e542c17921dc9fd08/comments", "author": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "committer": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b0a099dfc9a97ecd10adb319396c731c4b2d169", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0a099dfc9a97ecd10adb319396c731c4b2d169", "html_url": "https://github.com/rust-lang/rust/commit/9b0a099dfc9a97ecd10adb319396c731c4b2d169"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "d6d2b1a3027942e7da7bd228f373e6c11aec8289", "filename": "library/std/src/sys/hermit/time.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5def7534e4f86165fd5f984e542c17921dc9fd08/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5def7534e4f86165fd5f984e542c17921dc9fd08/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs?ref=5def7534e4f86165fd5f984e542c17921dc9fd08", "patch": "@@ -39,11 +39,7 @@ impl Timespec {\n     }\n \n     fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n-        let mut secs = other\n-            .as_secs()\n-            .try_into() // <- target type would be `libc::time_t`\n-            .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_add(secs))?;\n+        let mut secs = self.tv_sec.checked_add_unsigned(other.as_secs())?;\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n@@ -56,11 +52,7 @@ impl Timespec {\n     }\n \n     fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n-        let mut secs = other\n-            .as_secs()\n-            .try_into() // <- target type would be `libc::time_t`\n-            .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_sub(secs))?;\n+        let mut secs = self.tv_sec.checked_sub_unsigned(other.as_secs())?;\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.t.tv_nsec as i32 - other.subsec_nanos() as i32;"}, {"sha": "f83f1644fe854483629bde2c4fbefed46c07ec15", "filename": "library/std/src/sys/solid/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5def7534e4f86165fd5f984e542c17921dc9fd08/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5def7534e4f86165fd5f984e542c17921dc9fd08/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs?ref=5def7534e4f86165fd5f984e542c17921dc9fd08", "patch": "@@ -47,10 +47,10 @@ impl SystemTime {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        Some(SystemTime(self.0.checked_add(other.as_secs().try_into().ok()?)?))\n+        Some(SystemTime(self.0.checked_add_unsigned(other.as_secs())?))\n     }\n \n     pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        Some(SystemTime(self.0.checked_sub(other.as_secs().try_into().ok()?)?))\n+        Some(SystemTime(self.0.checked_sub_unsigned(other.as_secs())?))\n     }\n }"}, {"sha": "5cf70110812f9d8b9257d10a4b77a4f7928a90ca", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5def7534e4f86165fd5f984e542c17921dc9fd08/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5def7534e4f86165fd5f984e542c17921dc9fd08/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=5def7534e4f86165fd5f984e542c17921dc9fd08", "patch": "@@ -102,11 +102,7 @@ impl Timespec {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n-        let mut secs = other\n-            .as_secs()\n-            .try_into() // <- target type would be `i64`\n-            .ok()\n-            .and_then(|secs| self.tv_sec.checked_add(secs))?;\n+        let mut secs = self.tv_sec.checked_add_unsigned(other.as_secs())?;\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n@@ -115,23 +111,19 @@ impl Timespec {\n             nsec -= NSEC_PER_SEC as u32;\n             secs = secs.checked_add(1)?;\n         }\n-        Some(Timespec::new(secs, nsec as i64))\n+        Some(Timespec::new(secs, nsec.into()))\n     }\n \n     pub fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n-        let mut secs = other\n-            .as_secs()\n-            .try_into() // <- target type would be `i64`\n-            .ok()\n-            .and_then(|secs| self.tv_sec.checked_sub(secs))?;\n+        let mut secs = self.tv_sec.checked_sub_unsigned(other.as_secs())?;\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.tv_nsec.0 as i32 - other.subsec_nanos() as i32;\n         if nsec < 0 {\n             nsec += NSEC_PER_SEC as i32;\n             secs = secs.checked_sub(1)?;\n         }\n-        Some(Timespec::new(secs, nsec as i64))\n+        Some(Timespec::new(secs, nsec.into()))\n     }\n \n     #[allow(dead_code)]"}, {"sha": "4472a9625607ac702dedbb9ebe6c63f08263cb0d", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5def7534e4f86165fd5f984e542c17921dc9fd08/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5def7534e4f86165fd5f984e542c17921dc9fd08/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=5def7534e4f86165fd5f984e542c17921dc9fd08", "patch": "@@ -1,4 +1,5 @@\n use super::{Duration, Instant, SystemTime, UNIX_EPOCH};\n+use core::fmt::Debug;\n #[cfg(not(target_arch = \"wasm32\"))]\n use test::{black_box, Bencher};\n \n@@ -193,6 +194,32 @@ fn since_epoch() {\n     assert!(a < hundred_twenty_years);\n }\n \n+#[test]\n+fn big_math() {\n+    // Check that the same result occurs when adding/subtracting each duration one at a time as when\n+    // adding/subtracting them all at once.\n+    #[track_caller]\n+    fn check<T: Eq + Copy + Debug>(start: Option<T>, op: impl Fn(&T, Duration) -> Option<T>) {\n+        const DURATIONS: [Duration; 2] =\n+            [Duration::from_secs(i64::MAX as _), Duration::from_secs(50)];\n+        if let Some(start) = start {\n+            assert_eq!(\n+                op(&start, DURATIONS.into_iter().sum()),\n+                DURATIONS.into_iter().try_fold(start, |t, d| op(&t, d))\n+            )\n+        }\n+    }\n+\n+    check(SystemTime::UNIX_EPOCH.checked_sub(Duration::from_secs(100)), SystemTime::checked_add);\n+    check(SystemTime::UNIX_EPOCH.checked_add(Duration::from_secs(100)), SystemTime::checked_sub);\n+\n+    let instant = Instant::now();\n+    check(instant.checked_sub(Duration::from_secs(100)), Instant::checked_add);\n+    check(instant.checked_sub(Duration::from_secs(i64::MAX as _)), Instant::checked_add);\n+    check(instant.checked_add(Duration::from_secs(100)), Instant::checked_sub);\n+    check(instant.checked_add(Duration::from_secs(i64::MAX as _)), Instant::checked_sub);\n+}\n+\n macro_rules! bench_instant_threaded {\n     ($bench_name:ident, $thread_count:expr) => {\n         #[bench]"}]}