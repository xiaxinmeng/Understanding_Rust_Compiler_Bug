{"sha": "3dd830b70ccb2d6937857e07470a5c15dd574ddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZDgzMGI3MGNjYjJkNjkzNzg1N2UwNzQ3MGE1YzE1ZGQ1NzRkZGQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-11T18:23:15Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T13:44:34Z"}, "message": "ptr eq for `Predicate`", "tree": {"sha": "113c7df65f23c9bcc86d6630c28b632ad509b43e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/113c7df65f23c9bcc86d6630c28b632ad509b43e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd830b70ccb2d6937857e07470a5c15dd574ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd830b70ccb2d6937857e07470a5c15dd574ddd", "html_url": "https://github.com/rust-lang/rust/commit/3dd830b70ccb2d6937857e07470a5c15dd574ddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd830b70ccb2d6937857e07470a5c15dd574ddd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6544d7b6b1c06b1c5607118365fb992a39075b0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6544d7b6b1c06b1c5607118365fb992a39075b0c", "html_url": "https://github.com/rust-lang/rust/commit/6544d7b6b1c06b1c5607118365fb992a39075b0c"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "9e8456689094f3acafac772a29cc5c1b9f3f80b4", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3dd830b70ccb2d6937857e07470a5c15dd574ddd/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd830b70ccb2d6937857e07470a5c15dd574ddd/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=3dd830b70ccb2d6937857e07470a5c15dd574ddd", "patch": "@@ -1016,14 +1016,23 @@ impl<'tcx> GenericPredicates<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Lift)]\n+#[derive(Clone, Copy, Hash, RustcEncodable, RustcDecodable, Lift)]\n #[derive(HashStable)]\n pub struct Predicate<'tcx> {\n     kind: &'tcx PredicateKind<'tcx>,\n }\n \n-impl Predicate<'tcx> {\n-    pub fn kind(&self) -> &'tcx PredicateKind<'tcx> {\n+impl<'tcx> PartialEq for Predicate<'tcx> {\n+    fn eq(&self, other: &Self) -> bool {\n+        // `self.kind` is always interned.\n+        ptr::eq(self.kind, other.kind)\n+    }\n+}\n+\n+impl<'tcx> Eq for Predicate<'tcx> {}\n+\n+impl<'tcx> Predicate<'tcx> {\n+    pub fn kind(self) -> &'tcx PredicateKind<'tcx> {\n         self.kind\n     }\n }\n@@ -1098,7 +1107,7 @@ impl<'tcx> Predicate<'tcx> {\n     /// substitution in terms of what happens with bound regions. See\n     /// lengthy comment below for details.\n     pub fn subst_supertrait(\n-        &self,\n+        self,\n         tcx: TyCtxt<'tcx>,\n         trait_ref: &ty::PolyTraitRef<'tcx>,\n     ) -> ty::Predicate<'tcx> {\n@@ -1369,7 +1378,7 @@ impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n }\n \n impl<'tcx> Predicate<'tcx> {\n-    pub fn to_opt_poly_trait_ref(&self) -> Option<PolyTraitRef<'tcx>> {\n+    pub fn to_opt_poly_trait_ref(self) -> Option<PolyTraitRef<'tcx>> {\n         match self.kind() {\n             &PredicateKind::Trait(ref t, _) => Some(t.to_poly_trait_ref()),\n             PredicateKind::Projection(..)\n@@ -1384,7 +1393,7 @@ impl<'tcx> Predicate<'tcx> {\n         }\n     }\n \n-    pub fn to_opt_type_outlives(&self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {\n+    pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {\n         match self.kind() {\n             &PredicateKind::TypeOutlives(data) => Some(data),\n             PredicateKind::Trait(..)"}]}