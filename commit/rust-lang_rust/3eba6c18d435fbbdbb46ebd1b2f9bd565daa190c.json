{"sha": "3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYmE2YzE4ZDQzNWZiYmRiYjQ2ZWJkMWIyZjliZDU2NWRhYTE5MGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-29T04:21:20Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-29T05:11:26Z"}, "message": "syntax: recover trailing `|` in or-patterns.", "tree": {"sha": "7a71729840cb5361eee1af6d0d95f8361ae80d56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a71729840cb5361eee1af6d0d95f8361ae80d56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "html_url": "https://github.com/rust-lang/rust/commit/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "488381ce9ef0ceabe83b73127c659e5d38137df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/488381ce9ef0ceabe83b73127c659e5d38137df0", "html_url": "https://github.com/rust-lang/rust/commit/488381ce9ef0ceabe83b73127c659e5d38137df0"}], "stats": {"total": 360, "additions": 323, "deletions": 37}, "files": [{"sha": "7eb2a73a11a82c28664129ec9e465ef1a5cb13ee", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 79, "deletions": 26, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "patch": "@@ -18,6 +18,8 @@ type Expected = Option<&'static str>;\n /// `Expected` for function and lambda parameter patterns.\n pub(super) const PARAM_EXPECTED: Expected = Some(\"parameter name\");\n \n+const WHILE_PARSING_OR_MSG: &str = \"while parsing this or-pattern starting here\";\n+\n /// Whether or not an or-pattern should be gated when occurring in the current context.\n #[derive(PartialEq)]\n pub enum GateOr { Yes, No }\n@@ -40,7 +42,7 @@ impl<'a> Parser<'a> {\n     /// Corresponds to `top_pat` in RFC 2535 and allows or-pattern at the top level.\n     pub(super) fn parse_top_pat(&mut self, gate_or: GateOr) -> PResult<'a, P<Pat>> {\n         // Allow a '|' before the pats (RFCs 1925, 2530, and 2535).\n-        let gated_leading_vert = self.eat_or_separator() && gate_or == GateOr::Yes;\n+        let gated_leading_vert = self.eat_or_separator(None) && gate_or == GateOr::Yes;\n         let leading_vert_span = self.prev_span;\n \n         // Parse the possibly-or-pattern.\n@@ -63,7 +65,7 @@ impl<'a> Parser<'a> {\n     /// Parse the pattern for a function or function pointer parameter.\n     /// Special recovery is provided for or-patterns and leading `|`.\n     pub(super) fn parse_fn_param_pat(&mut self) -> PResult<'a, P<Pat>> {\n-        self.recover_leading_vert(\"not allowed in a parameter pattern\");\n+        self.recover_leading_vert(None, \"not allowed in a parameter pattern\");\n         let pat = self.parse_pat_with_or(PARAM_EXPECTED, GateOr::No, RecoverComma::No)?;\n \n         if let PatKind::Or(..) = &pat.kind {\n@@ -90,7 +92,7 @@ impl<'a> Parser<'a> {\n         gate_or: GateOr,\n         rc: RecoverComma,\n     ) -> PResult<'a, P<Pat>> {\n-        // Parse the first pattern.\n+        // Parse the first pattern (`p_0`).\n         let first_pat = self.parse_pat(expected)?;\n         self.maybe_recover_unexpected_comma(first_pat.span, rc)?;\n \n@@ -100,11 +102,12 @@ impl<'a> Parser<'a> {\n             return Ok(first_pat)\n         }\n \n+        // Parse the patterns `p_1 | ... | p_n` where `n > 0`.\n         let lo = first_pat.span;\n         let mut pats = vec![first_pat];\n-        while self.eat_or_separator() {\n+        while self.eat_or_separator(Some(lo)) {\n             let pat = self.parse_pat(expected).map_err(|mut err| {\n-                err.span_label(lo, \"while parsing this or-pattern starting here\");\n+                err.span_label(lo, WHILE_PARSING_OR_MSG);\n                 err\n             })?;\n             self.maybe_recover_unexpected_comma(pat.span, rc)?;\n@@ -122,28 +125,65 @@ impl<'a> Parser<'a> {\n \n     /// Eat the or-pattern `|` separator.\n     /// If instead a `||` token is encountered, recover and pretend we parsed `|`.\n-    fn eat_or_separator(&mut self) -> bool {\n+    fn eat_or_separator(&mut self, lo: Option<Span>) -> bool {\n+        if self.recover_trailing_vert(lo) {\n+            return false;\n+        }\n+\n         match self.token.kind {\n             token::OrOr => {\n                 // Found `||`; Recover and pretend we parsed `|`.\n-                self.ban_unexpected_or_or();\n+                self.ban_unexpected_or_or(lo);\n                 self.bump();\n                 true\n             }\n             _ => self.eat(&token::BinOp(token::Or)),\n         }\n     }\n \n+    /// Recover if `|` or `||` is the current token and we have one of the\n+    /// tokens `=>`, `if`, `=`, `:`, `;`, `,`, `]`, `)`, or `}` ahead of us.\n+    ///\n+    /// These tokens all indicate that we reached the end of the or-pattern\n+    /// list and can now reliably say that the `|` was an illegal trailing vert.\n+    /// Note that there are more tokens such as `@` for which we know that the `|`\n+    /// is an illegal parse. However, the user's intent is less clear in that case.\n+    fn recover_trailing_vert(&mut self, lo: Option<Span>) -> bool {\n+        let is_end_ahead = self.look_ahead(1, |token| match &token.kind {\n+            token::FatArrow // e.g. `a | => 0,`.\n+            | token::Ident(kw::If, false) // e.g. `a | if expr`.\n+            | token::Eq // e.g. `let a | = 0`.\n+            | token::Semi // e.g. `let a |;`.\n+            | token::Colon // e.g. `let a | :`.\n+            | token::Comma // e.g. `let (a |,)`.\n+            | token::CloseDelim(token::Bracket) // e.g. `let [a | ]`.\n+            | token::CloseDelim(token::Paren) // e.g. `let (a | )`.\n+            | token::CloseDelim(token::Brace) => true, // e.g. `let A { f: a | }`.\n+            _ => false,\n+        });\n+        match (is_end_ahead, &self.token.kind) {\n+            (true, token::BinOp(token::Or)) | (true, token::OrOr) => {\n+                self.ban_illegal_vert(lo, \"trailing\", \"not allowed in an or-pattern\");\n+                self.bump();\n+                true\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     /// We have parsed `||` instead of `|`. Error and suggest `|` instead.\n-    fn ban_unexpected_or_or(&mut self) {\n-        self.struct_span_err(self.token.span, \"unexpected token `||` after pattern\")\n-            .span_suggestion(\n-                self.token.span,\n-                \"use a single `|` to separate multiple alternative patterns\",\n-                \"|\".to_owned(),\n-                Applicability::MachineApplicable\n-            )\n-            .emit();\n+    fn ban_unexpected_or_or(&mut self, lo: Option<Span>) {\n+        let mut err = self.struct_span_err(self.token.span, \"unexpected token `||` after pattern\");\n+        err.span_suggestion(\n+            self.token.span,\n+            \"use a single `|` to separate multiple alternative patterns\",\n+            \"|\".to_owned(),\n+            Applicability::MachineApplicable\n+        );\n+        if let Some(lo) = lo {\n+            err.span_label(lo, WHILE_PARSING_OR_MSG);\n+        }\n+        err.emit();\n     }\n \n     /// Some special error handling for the \"top-level\" patterns in a match arm,\n@@ -198,25 +238,38 @@ impl<'a> Parser<'a> {\n     /// Recursive possibly-or-pattern parser with recovery for an erroneous leading `|`.\n     /// See `parse_pat_with_or` for details on parsing or-patterns.\n     fn parse_pat_with_or_inner(&mut self) -> PResult<'a, P<Pat>> {\n-        self.recover_leading_vert(\"only allowed in a top-level pattern\");\n+        self.recover_leading_vert(None, \"only allowed in a top-level pattern\");\n         self.parse_pat_with_or(None, GateOr::Yes, RecoverComma::No)\n     }\n \n     /// Recover if `|` or `||` is here.\n     /// The user is thinking that a leading `|` is allowed in this position.\n-    fn recover_leading_vert(&mut self, ctx: &str) {\n+    fn recover_leading_vert(&mut self, lo: Option<Span>, ctx: &str) {\n         if let token::BinOp(token::Or) | token::OrOr = self.token.kind {\n-            let span = self.token.span;\n-            let rm_msg = format!(\"remove the `{}`\", pprust::token_to_string(&self.token));\n-\n-            self.struct_span_err(span, &format!(\"a leading `|` is {}\", ctx))\n-                .span_suggestion(span, &rm_msg, String::new(), Applicability::MachineApplicable)\n-                .emit();\n-\n+            self.ban_illegal_vert(lo, \"leading\", ctx);\n             self.bump();\n         }\n     }\n \n+    /// A `|` or possibly `||` token shouldn't be here. Ban it.\n+    fn ban_illegal_vert(&mut self, lo: Option<Span>, pos: &str, ctx: &str) {\n+        let span = self.token.span;\n+        let mut err = self.struct_span_err(span, &format!(\"a {} `|` is {}\", pos, ctx));\n+        err.span_suggestion(\n+            span,\n+            &format!(\"remove the `{}`\", pprust::token_to_string(&self.token)),\n+            String::new(),\n+            Applicability::MachineApplicable,\n+        );\n+        if let Some(lo) = lo {\n+            err.span_label(lo, WHILE_PARSING_OR_MSG);\n+        }\n+        if let token::OrOr = self.token.kind {\n+            err.note(\"alternatives in or-patterns are separated with `|`, not `||`\");\n+        }\n+        err.emit();\n+    }\n+\n     /// Parses a pattern, with a setting whether modern range patterns (e.g., `a..=b`, `a..b` are\n     /// allowed).\n     fn parse_pat_with_range_pat(\n@@ -259,7 +312,7 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 self.parse_pat_range_to(RangeEnd::Included(RangeSyntax::DotDotDot), \"...\")?\n             }\n-            // At this point, token != &, &&, (, [\n+            // At this point, token != `&`, `&&`, `(`, `[`, `..`, `..=`, or `...`.\n             _ => if self.eat_keyword(kw::Underscore) {\n                 // Parse _\n                 PatKind::Wild"}, {"sha": "181c770096a5f78063c78847294045366e6d8458", "filename": "src/test/ui/or-patterns/issue-64879-trailing-before-guard.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.rs?ref=3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "patch": "@@ -0,0 +1,15 @@\n+// In this regression test we check that a trailing `|` in an or-pattern just\n+// before the `if` token of a `match` guard will receive parser recovery with\n+// an appropriate error message.\n+\n+enum E { A, B }\n+\n+fn main() {\n+    match E::A {\n+        E::A |\n+        E::B | //~ ERROR a trailing `|` is not allowed in an or-pattern\n+        if true => {\n+            let recovery_witness: bool = 0; //~ ERROR mismatched types\n+        }\n+    }\n+}"}, {"sha": "db6670fc5b1e074ab194b4283076a1a5c982f216", "filename": "src/test/ui/or-patterns/issue-64879-trailing-before-guard.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-64879-trailing-before-guard.stderr?ref=3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "patch": "@@ -0,0 +1,20 @@\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/issue-64879-trailing-before-guard.rs:10:14\n+   |\n+LL |         E::A |\n+   |         ---- while parsing this or-pattern starting here\n+LL |         E::B |\n+   |              ^ help: remove the `|`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-64879-trailing-before-guard.rs:12:42\n+   |\n+LL |             let recovery_witness: bool = 0;\n+   |                                          ^ expected bool, found integer\n+   |\n+   = note: expected type `bool`\n+              found type `{integer}`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c71c760b1e30374cd2571139f1ec2602f5c96b72", "filename": "src/test/ui/or-patterns/multiple-pattern-typo.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fmultiple-pattern-typo.stderr?ref=3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "patch": "@@ -2,37 +2,49 @@ error: unexpected token `||` after pattern\n   --> $DIR/multiple-pattern-typo.rs:8:15\n    |\n LL |         1 | 2 || 3 => (),\n-   |               ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |         -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |         |\n+   |         while parsing this or-pattern starting here\n \n error: unexpected token `||` after pattern\n   --> $DIR/multiple-pattern-typo.rs:13:16\n    |\n LL |         (1 | 2 || 3) => (),\n-   |                ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |          -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |          |\n+   |          while parsing this or-pattern starting here\n \n error: unexpected token `||` after pattern\n   --> $DIR/multiple-pattern-typo.rs:18:16\n    |\n LL |         (1 | 2 || 3,) => (),\n-   |                ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |          -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |          |\n+   |          while parsing this or-pattern starting here\n \n error: unexpected token `||` after pattern\n   --> $DIR/multiple-pattern-typo.rs:25:18\n    |\n LL |         TS(1 | 2 || 3) => (),\n-   |                  ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |            -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |            |\n+   |            while parsing this or-pattern starting here\n \n error: unexpected token `||` after pattern\n   --> $DIR/multiple-pattern-typo.rs:32:23\n    |\n LL |         NS { f: 1 | 2 || 3 } => (),\n-   |                       ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |                 -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |                 |\n+   |                 while parsing this or-pattern starting here\n \n error: unexpected token `||` after pattern\n   --> $DIR/multiple-pattern-typo.rs:37:16\n    |\n LL |         [1 | 2 || 3] => (),\n-   |                ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |          -     ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |          |\n+   |          while parsing this or-pattern starting here\n \n error: unexpected token `||` after pattern\n   --> $DIR/multiple-pattern-typo.rs:42:9"}, {"sha": "6d08b47c058ed09ddf32bfadf0a82b795a4b66a5", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "patch": "@@ -51,24 +51,32 @@ error: a leading `|` is only allowed in a top-level pattern\n    |\n LL |     let ( || A | B) = E::A;\n    |           ^^ help: remove the `||`\n+   |\n+   = note: alternatives in or-patterns are separated with `|`, not `||`\n \n error: a leading `|` is only allowed in a top-level pattern\n   --> $DIR/or-patterns-syntactic-fail.rs:48:11\n    |\n LL |     let [ || A | B ] = [E::A];\n    |           ^^ help: remove the `||`\n+   |\n+   = note: alternatives in or-patterns are separated with `|`, not `||`\n \n error: a leading `|` is only allowed in a top-level pattern\n   --> $DIR/or-patterns-syntactic-fail.rs:49:13\n    |\n LL |     let TS( || A | B );\n    |             ^^ help: remove the `||`\n+   |\n+   = note: alternatives in or-patterns are separated with `|`, not `||`\n \n error: a leading `|` is only allowed in a top-level pattern\n   --> $DIR/or-patterns-syntactic-fail.rs:50:17\n    |\n LL |     let NS { f: || A | B };\n    |                 ^^ help: remove the `||`\n+   |\n+   = note: alternatives in or-patterns are separated with `|`, not `||`\n \n error: no rules expected the token `|`\n   --> $DIR/or-patterns-syntactic-fail.rs:14:15"}, {"sha": "443ef398293d9900a507149595d21e32d334508d", "filename": "src/test/ui/or-patterns/remove-leading-vert.fixed", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.fixed?ref=3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "patch": "@@ -1,4 +1,4 @@\n-// Test the suggestion to remove a leading `|`.\n+// Test the suggestion to remove a leading, or trailing `|`.\n \n // run-rustfix\n \n@@ -8,7 +8,7 @@\n fn main() {}\n \n #[cfg(FALSE)]\n-fn leading_vert() {\n+fn leading() {\n     fn fun1(  A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n     fn fun2(  A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n     let (  A): E; //~ ERROR a leading `|` is only allowed in a top-level pattern\n@@ -21,3 +21,26 @@ fn leading_vert() {\n     let NS { f:  A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n     let NS { f:  A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n }\n+\n+#[cfg(FALSE)]\n+fn trailing() {\n+    let ( A  ): E; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let (a ,): (E,); //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let ( A | B  ): E; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let [ A | B  ]: [E; 1]; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let S { f: B  }; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let ( A | B  ): E; //~ ERROR unexpected token `||` after pattern\n+    //~^ ERROR a trailing `|` is not allowed in an or-pattern\n+    match A {\n+        A  => {} //~ ERROR a trailing `|` is not allowed in an or-pattern\n+        A  => {} //~ ERROR a trailing `|` is not allowed in an or-pattern\n+        A | B  => {} //~ ERROR unexpected token `||` after pattern\n+        //~^ ERROR a trailing `|` is not allowed in an or-pattern\n+        | A | B  => {}\n+        //~^ ERROR a trailing `|` is not allowed in an or-pattern\n+    }\n+\n+    let a  : u8 = 0; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let a  = 0; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let a  ; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+}"}, {"sha": "3c427a6f7b23ef9ed7656617e1968d26c70865b1", "filename": "src/test/ui/or-patterns/remove-leading-vert.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.rs?ref=3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "patch": "@@ -1,4 +1,4 @@\n-// Test the suggestion to remove a leading `|`.\n+// Test the suggestion to remove a leading, or trailing `|`.\n \n // run-rustfix\n \n@@ -8,7 +8,7 @@\n fn main() {}\n \n #[cfg(FALSE)]\n-fn leading_vert() {\n+fn leading() {\n     fn fun1( | A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n     fn fun2( || A: E) {} //~ ERROR a leading `|` is not allowed in a parameter pattern\n     let ( | A): E; //~ ERROR a leading `|` is only allowed in a top-level pattern\n@@ -21,3 +21,26 @@ fn leading_vert() {\n     let NS { f: | A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n     let NS { f: || A }: NS; //~ ERROR a leading `|` is only allowed in a top-level pattern\n }\n+\n+#[cfg(FALSE)]\n+fn trailing() {\n+    let ( A | ): E; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let (a |,): (E,); //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let ( A | B | ): E; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let [ A | B | ]: [E; 1]; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let S { f: B | }; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let ( A || B | ): E; //~ ERROR unexpected token `||` after pattern\n+    //~^ ERROR a trailing `|` is not allowed in an or-pattern\n+    match A {\n+        A | => {} //~ ERROR a trailing `|` is not allowed in an or-pattern\n+        A || => {} //~ ERROR a trailing `|` is not allowed in an or-pattern\n+        A || B | => {} //~ ERROR unexpected token `||` after pattern\n+        //~^ ERROR a trailing `|` is not allowed in an or-pattern\n+        | A | B | => {}\n+        //~^ ERROR a trailing `|` is not allowed in an or-pattern\n+    }\n+\n+    let a | : u8 = 0; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let a | = 0; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+    let a | ; //~ ERROR a trailing `|` is not allowed in an or-pattern\n+}"}, {"sha": "53025230a63c221d99b7db8b9b874be63cb55a3d", "filename": "src/test/ui/or-patterns/remove-leading-vert.stderr", "status": "modified", "additions": 133, "deletions": 1, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fremove-leading-vert.stderr?ref=3eba6c18d435fbbdbb46ebd1b2f9bd565daa190c", "patch": "@@ -9,6 +9,8 @@ error: a leading `|` is not allowed in a parameter pattern\n    |\n LL |     fn fun2( || A: E) {}\n    |              ^^ help: remove the `||`\n+   |\n+   = note: alternatives in or-patterns are separated with `|`, not `||`\n \n error: a leading `|` is only allowed in a top-level pattern\n   --> $DIR/remove-leading-vert.rs:14:11\n@@ -21,6 +23,8 @@ error: a leading `|` is only allowed in a top-level pattern\n    |\n LL |     let ( || A): (E);\n    |           ^^ help: remove the `||`\n+   |\n+   = note: alternatives in or-patterns are separated with `|`, not `||`\n \n error: a leading `|` is only allowed in a top-level pattern\n   --> $DIR/remove-leading-vert.rs:16:11\n@@ -39,6 +43,8 @@ error: a leading `|` is only allowed in a top-level pattern\n    |\n LL |     let [ || A ]: [E; 1];\n    |           ^^ help: remove the `||`\n+   |\n+   = note: alternatives in or-patterns are separated with `|`, not `||`\n \n error: a leading `|` is only allowed in a top-level pattern\n   --> $DIR/remove-leading-vert.rs:19:13\n@@ -51,6 +57,8 @@ error: a leading `|` is only allowed in a top-level pattern\n    |\n LL |     let TS( || A ): TS;\n    |             ^^ help: remove the `||`\n+   |\n+   = note: alternatives in or-patterns are separated with `|`, not `||`\n \n error: a leading `|` is only allowed in a top-level pattern\n   --> $DIR/remove-leading-vert.rs:21:17\n@@ -63,6 +71,130 @@ error: a leading `|` is only allowed in a top-level pattern\n    |\n LL |     let NS { f: || A }: NS;\n    |                 ^^ help: remove the `||`\n+   |\n+   = note: alternatives in or-patterns are separated with `|`, not `||`\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:27:13\n+   |\n+LL |     let ( A | ): E;\n+   |           - ^ help: remove the `|`\n+   |           |\n+   |           while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:28:12\n+   |\n+LL |     let (a |,): (E,);\n+   |          - ^ help: remove the `|`\n+   |          |\n+   |          while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:29:17\n+   |\n+LL |     let ( A | B | ): E;\n+   |           -     ^ help: remove the `|`\n+   |           |\n+   |           while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:30:17\n+   |\n+LL |     let [ A | B | ]: [E; 1];\n+   |           -     ^ help: remove the `|`\n+   |           |\n+   |           while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:31:18\n+   |\n+LL |     let S { f: B | };\n+   |                - ^ help: remove the `|`\n+   |                |\n+   |                while parsing this or-pattern starting here\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/remove-leading-vert.rs:32:13\n+   |\n+LL |     let ( A || B | ): E;\n+   |           - ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |           |\n+   |           while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:32:18\n+   |\n+LL |     let ( A || B | ): E;\n+   |           -      ^ help: remove the `|`\n+   |           |\n+   |           while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:35:11\n+   |\n+LL |         A | => {}\n+   |         - ^ help: remove the `|`\n+   |         |\n+   |         while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:36:11\n+   |\n+LL |         A || => {}\n+   |         - ^^ help: remove the `||`\n+   |         |\n+   |         while parsing this or-pattern starting here\n+   |\n+   = note: alternatives in or-patterns are separated with `|`, not `||`\n+\n+error: unexpected token `||` after pattern\n+  --> $DIR/remove-leading-vert.rs:37:11\n+   |\n+LL |         A || B | => {}\n+   |         - ^^ help: use a single `|` to separate multiple alternative patterns: `|`\n+   |         |\n+   |         while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:37:16\n+   |\n+LL |         A || B | => {}\n+   |         -      ^ help: remove the `|`\n+   |         |\n+   |         while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:39:17\n+   |\n+LL |         | A | B | => {}\n+   |           -     ^ help: remove the `|`\n+   |           |\n+   |           while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:43:11\n+   |\n+LL |     let a | : u8 = 0;\n+   |         - ^ help: remove the `|`\n+   |         |\n+   |         while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:44:11\n+   |\n+LL |     let a | = 0;\n+   |         - ^ help: remove the `|`\n+   |         |\n+   |         while parsing this or-pattern starting here\n+\n+error: a trailing `|` is not allowed in an or-pattern\n+  --> $DIR/remove-leading-vert.rs:45:11\n+   |\n+LL |     let a | ;\n+   |         - ^ help: remove the `|`\n+   |         |\n+   |         while parsing this or-pattern starting here\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 26 previous errors\n "}]}