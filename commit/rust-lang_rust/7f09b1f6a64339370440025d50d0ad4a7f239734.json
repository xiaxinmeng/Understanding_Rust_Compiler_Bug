{"sha": "7f09b1f6a64339370440025d50d0ad4a7f239734", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMDliMWY2YTY0MzM5MzcwNDQwMDI1ZDUwZDBhZDRhN2YyMzk3MzQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-26T22:23:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-27T06:35:59Z"}, "message": "std: Allow creating ExitStatus from raw values\n\nSometimes a process may be waited on externally from the standard library, in\nwhich case it can be useful to create a raw `ExitStatus` structure to return.\nThis commit extends the existing Unix `ExitStatusExt` extension trait and adds a\nnew Windows-specific `ExitStatusExt` extension trait to do this. The methods are\ncurrently called `ExitStatus::from_raw`.\n\ncc #32713", "tree": {"sha": "48c65ea79997aa1193467936a1ecadd5091a317d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48c65ea79997aa1193467936a1ecadd5091a317d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f09b1f6a64339370440025d50d0ad4a7f239734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f09b1f6a64339370440025d50d0ad4a7f239734", "html_url": "https://github.com/rust-lang/rust/commit/7f09b1f6a64339370440025d50d0ad4a7f239734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f09b1f6a64339370440025d50d0ad4a7f239734/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092b0738b7f00740c997a3fb99dd0b8b50c4c157", "url": "https://api.github.com/repos/rust-lang/rust/commits/092b0738b7f00740c997a3fb99dd0b8b50c4c157", "html_url": "https://github.com/rust-lang/rust/commit/092b0738b7f00740c997a3fb99dd0b8b50c4c157"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "3ff76a7bee30291ceecc20b64022b923a6a995e1", "filename": "src/libstd/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f09b1f6a64339370440025d50d0ad4a7f239734/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f09b1f6a64339370440025d50d0ad4a7f239734/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=7f09b1f6a64339370440025d50d0ad4a7f239734", "patch": "@@ -459,6 +459,12 @@ impl AsInner<imp::ExitStatus> for ExitStatus {\n     fn as_inner(&self) -> &imp::ExitStatus { &self.0 }\n }\n \n+impl FromInner<imp::ExitStatus> for ExitStatus {\n+    fn from_inner(s: imp::ExitStatus) -> ExitStatus {\n+        ExitStatus(s)\n+    }\n+}\n+\n #[stable(feature = \"process\", since = \"1.0.0\")]\n impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "b0fed2f4694bfcd4163fc53509e1ab9e0de9d225", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f09b1f6a64339370440025d50d0ad4a7f239734/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f09b1f6a64339370440025d50d0ad4a7f239734/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=7f09b1f6a64339370440025d50d0ad4a7f239734", "patch": "@@ -132,13 +132,22 @@ impl CommandExt for process::Command {\n /// Unix-specific extensions to `std::process::ExitStatus`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt {\n+    /// Creates a new `ExitStatus` from the raw underlying `i32` return value of\n+    /// a process.\n+    #[unstable(feature = \"exit_status_from\", issue = \"32713\")]\n+    fn from_raw(raw: i32) -> Self;\n+\n     /// If the process was terminated by a signal, returns that signal.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn signal(&self) -> Option<i32>;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ExitStatusExt for process::ExitStatus {\n+    fn from_raw(raw: i32) -> Self {\n+        process::ExitStatus::from_inner(From::from(raw))\n+    }\n+\n     fn signal(&self) -> Option<i32> {\n         self.as_inner().signal()\n     }"}, {"sha": "72e02a487e36cb7a01e6ae1366b9d83225ce9962", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f09b1f6a64339370440025d50d0ad4a7f239734/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f09b1f6a64339370440025d50d0ad4a7f239734/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=7f09b1f6a64339370440025d50d0ad4a7f239734", "patch": "@@ -550,6 +550,12 @@ impl ExitStatus {\n     }\n }\n \n+impl From<c_int> for ExitStatus {\n+    fn from(a: c_int) -> ExitStatus {\n+        ExitStatus(a)\n+    }\n+}\n+\n impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if let Some(code) = self.code() {"}, {"sha": "56c6a73d4f82b768760c058e88ae44ebae40c7ea", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f09b1f6a64339370440025d50d0ad4a7f239734/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f09b1f6a64339370440025d50d0ad4a7f239734/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=7f09b1f6a64339370440025d50d0ad4a7f239734", "patch": "@@ -81,3 +81,18 @@ impl IntoRawHandle for process::ChildStderr {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }\n }\n+\n+/// Windows-specific extensions to `std::process::ExitStatus`\n+#[unstable(feature = \"exit_status_from\", issue = \"32713\")]\n+pub trait ExitStatusExt {\n+    /// Creates a new `ExitStatus` from the raw underlying `u32` return value of\n+    /// a process.\n+    fn from_raw(raw: u32) -> Self;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl ExitStatusExt for process::ExitStatus {\n+    fn from_raw(raw: u32) -> Self {\n+        process::ExitStatus::from_inner(From::from(raw))\n+    }\n+}"}, {"sha": "a0ad866c69d413b8b77097ef274d0acf68b4445c", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f09b1f6a64339370440025d50d0ad4a7f239734/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f09b1f6a64339370440025d50d0ad4a7f239734/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=7f09b1f6a64339370440025d50d0ad4a7f239734", "patch": "@@ -337,6 +337,12 @@ impl ExitStatus {\n     }\n }\n \n+impl From<c::DWORD> for ExitStatus {\n+    fn from(u: c::DWORD) -> ExitStatus {\n+        ExitStatus(u)\n+    }\n+}\n+\n impl fmt::Display for ExitStatus {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"exit code: {}\", self.0)"}]}