{"sha": "503dec1d62c0432aff140758ad7bcb34ef6c060a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwM2RlYzFkNjJjMDQzMmFmZjE0MDc1OGFkN2JjYjM0ZWY2YzA2MGE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-02-09T22:16:12Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-02-09T22:36:43Z"}, "message": "Further WIP on classes\n\nChanges to resolve and typeck. Still nothning working yet.", "tree": {"sha": "8c14911757819af21af46ce5554d5f0164845268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c14911757819af21af46ce5554d5f0164845268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/503dec1d62c0432aff140758ad7bcb34ef6c060a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/503dec1d62c0432aff140758ad7bcb34ef6c060a", "html_url": "https://github.com/rust-lang/rust/commit/503dec1d62c0432aff140758ad7bcb34ef6c060a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/503dec1d62c0432aff140758ad7bcb34ef6c060a/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9effae841391db2557e645c6af0cedcbfcd3a8b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9effae841391db2557e645c6af0cedcbfcd3a8b4", "html_url": "https://github.com/rust-lang/rust/commit/9effae841391db2557e645c6af0cedcbfcd3a8b4"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "4d8042477d0d16b7aa897162ec0681704a7df13b", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=503dec1d62c0432aff140758ad7bcb34ef6c060a", "patch": "@@ -192,6 +192,13 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         w.write_char(']');\n       }\n       ty::ty_opaque_box { w.write_char('B'); }\n+      ty::ty_class(def, tys) {\n+          w.write_str(\"c[\");\n+          w.write_str(cx.ds(def));\n+          w.write_char('|');\n+          for t: ty::t in tys { enc_ty(w, cx, t); }\n+          w.write_char(']');\n+      }\n     }\n }\n fn enc_proto(w: io::writer, proto: proto) {"}, {"sha": "1d47fb0857a3c480ab83b07a0fe39b2a18911648", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=503dec1d62c0432aff140758ad7bcb34ef6c060a", "patch": "@@ -472,6 +472,16 @@ fn visit_item_with_scope(e: @env, i: @ast::item, sc: scopes, v: vt<scopes>) {\n             v.visit_ty(m.decl.output, msc, v);\n         }\n       }\n+      ast::item_class(tps, members, ctor_id, ctor_decl, ctor_block) {\n+        visit::visit_ty_params(tps, sc, v);\n+        let ctor_scope = cons(scope_fn_expr(ctor_decl, ctor_id, tps), @sc);\n+        for cm in members {\n+            alt cm.node.decl {\n+              class_method(i) { visit_item_with_scope(e, i, ctor_scope, v); }\n+              _ { } // instance var -- nothing to do\n+            }\n+        }\n+      }\n       _ { visit::visit_item(i, sc, v); }\n     }\n \n@@ -1209,7 +1219,9 @@ fn found_def_item(i: @ast::item, ns: namespace) -> option<def> {\n         }\n       }\n       ast::item_class(_, _, _, _, _) {\n-          fail \"class! don't know what to do\";\n+          if ns == ns_type {\n+            ret some(ast::def_class(local_def(i.id)));\n+          }\n       }\n       ast::item_impl(_,_,_,_) { /* ??? */ }\n     }"}, {"sha": "bdd43b883db5169c7c04235e801301f9fde0ee35", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=503dec1d62c0432aff140758ad7bcb34ef6c060a", "patch": "@@ -63,6 +63,7 @@ const shape_stack_fn: u8 = 26u8;\n const shape_bare_fn: u8 = 27u8;\n const shape_tydesc: u8 = 28u8;\n const shape_send_tydesc: u8 = 29u8;\n+const shape_class: u8 = 30u8;\n \n // FIXME: This is a bad API in trans_common.\n fn C_u8(n: u8) -> ValueRef { ret trans::common::C_u8(n as uint); }\n@@ -404,6 +405,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n         add_substr(s, sub);\n       }\n       ty::ty_iface(_, _) { s += [shape_iface]; }\n+      ty::ty_class(_, _) { s += [shape_class]; }\n       ty::ty_res(did, raw_subt, tps) {\n         let subt = ty::substitute_type_params(ccx.tcx, tps, raw_subt);\n         let ri = {did: did, t: subt};"}, {"sha": "a90e04c0373d57b3071a89d6ddaea01a434bb497", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=503dec1d62c0432aff140758ad7bcb34ef6c060a", "patch": "@@ -40,6 +40,7 @@ export is_pred_ty;\n export lookup_item_type;\n export method;\n export method_idx;\n+export mk_class;\n export mk_ctxt;\n export mk_named, type_name;\n export mt;\n@@ -225,6 +226,7 @@ enum sty {\n     ty_rec([field]),\n     ty_fn(fn_ty),\n     ty_iface(def_id, [t]),\n+    ty_class(def_id, [t]),\n     ty_res(def_id, t, [t]),\n     ty_tup([t]),\n \n@@ -354,7 +356,7 @@ fn mk_t_named(cx: ctxt, st: sty, name: option<str>) -> t {\n       ty_opaque_box {}\n       ty_param(_, _) { has_params = true; }\n       ty_var(_) | ty_self(_) { has_vars = true; }\n-      ty_enum(_, tys) | ty_iface(_, tys) {\n+      ty_enum(_, tys) | ty_iface(_, tys) | ty_class(_, tys) {\n         for tt in tys { derive_flags(has_params, has_vars, tt); }\n       }\n       ty_box(m) | ty_uniq(m) | ty_vec(m) | ty_ptr(m) {\n@@ -442,6 +444,10 @@ fn mk_iface(cx: ctxt, did: ast::def_id, tys: [t]) -> t {\n     mk_t(cx, ty_iface(did, tys))\n }\n \n+fn mk_class(cx: ctxt, class_id: ast::def_id, tys: [t]) -> t {\n+    mk_t(cx, ty_class(class_id, tys))\n+}\n+\n fn mk_res(cx: ctxt, did: ast::def_id, inner: t, tps: [t]) -> t {\n     mk_t(cx, ty_res(did, inner, tps))\n }\n@@ -487,7 +493,8 @@ fn walk_ty(cx: ctxt, ty: t, f: fn(t)) {\n       ty_str | ty_send_type | ty_type | ty_opaque_box |\n       ty_opaque_closure_ptr(_) | ty_var(_) | ty_param(_, _) {}\n       ty_box(tm) | ty_vec(tm) | ty_ptr(tm) { walk_ty(cx, tm.ty, f); }\n-      ty_enum(_, subtys) | ty_iface(_, subtys) | ty_self(subtys) {\n+      ty_enum(_, subtys) | ty_iface(_, subtys) | ty_class(_, subtys)\n+       | ty_self(subtys) {\n         for subty: t in subtys { walk_ty(cx, subty, f); }\n       }\n       ty_rec(fields) {\n@@ -1155,6 +1162,11 @@ fn hash_type_structure(st: sty) -> uint {\n       ty_opaque_closure_ptr(ck_box) { 42u }\n       ty_opaque_closure_ptr(ck_uniq) { 43u }\n       ty_opaque_box { 44u }\n+      ty_class(did, tys) {\n+          let h = hash_def(45u, did);\n+          for typ: t in tys { h = hash_subty(h, typ); }\n+          h\n+      }\n     }\n }\n \n@@ -2410,6 +2422,9 @@ fn lookup_item_type(cx: ctxt, did: ast::def_id) -> ty_param_bounds_and_ty {\n     alt cx.tcache.find(did) {\n       some(tpt) { ret tpt; }\n       none {\n+          /* where do things get added to the cache?\n+             Have to add class members */\n+\n         // The item is in this crate. The caller should have added it to the\n         // type cache already\n         assert did.crate != ast::local_crate;"}, {"sha": "3a7f8e2d55e41ecd5aefe9f9a6fdcfd6ba73642f", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=503dec1d62c0432aff140758ad7bcb34ef6c060a", "patch": "@@ -108,7 +108,9 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n         }\n       }\n       ast::def_fn(id, _) | ast::def_const(id) |\n-      ast::def_variant(_, id) { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n+      ast::def_variant(_, id) | ast::def_class(id)\n+          | ast::def_class_method(_, id) | ast::def_class_field(_, id)\n+         { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n       ast::def_binding(id) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n@@ -422,8 +424,12 @@ fn ty_of_item(tcx: ty::ctxt, mode: mode, it: @ast::item)\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n-      ast::item_class(_,_,_,_,_) {\n-          fail \"ty_of_item: implement item_class\";\n+      ast::item_class(tps,_,_,_,_) {\n+          let {bounds,params} = mk_ty_params(tcx, tps);\n+          let t = ty::mk_class(tcx, local_def(it.id), params);\n+          let tpt = {bounds: bounds, ty: t};\n+          tcx.tcache.insert(local_def(it.id), tpt);\n+          ret tpt;\n       }\n       ast::item_impl(_, _, _, _) | ast::item_mod(_) |\n       ast::item_native_mod(_) { fail; }\n@@ -755,6 +761,10 @@ mod collect {\n           _ { fail; }\n         }\n     }\n+    fn convert_class_item(cx: @ctxt, parent_ty: ty::t,\n+                          ci: ast::class_member) {\n+        /* TODO */\n+    }\n     fn convert(cx: @ctxt, it: @ast::item) {\n         alt it.node {\n           // These don't define types.\n@@ -847,6 +857,19 @@ mod collect {\n             write_ty(cx.tcx, it.id, tpt.ty);\n             ensure_iface_methods(cx.tcx, it.id);\n           }\n+          ast::item_class(tps, members, ctor_id, ctor_decl, ctor_block) {\n+              let parent_ty = ty::lookup_item_type(cx.tcx, local_def(it.id));\n+              // Write the ctor type\n+              let t_ctor = ty::mk_fn(cx.tcx,\n+                                     ty_of_fn_decl(cx.tcx, m_collect,\n+                                             ast::proto_any, ctor_decl));\n+              write_ty(cx.tcx, ctor_id, t_ctor);\n+              /* FIXME: check for proper public/privateness */\n+              // Write the type of each of the members\n+              for m in members {\n+                 convert_class_item(cx, parent_ty.ty, m.node.decl);\n+              }\n+          }\n           _ {\n             // This call populates the type cache with the converted type\n             // of the item in passing. All we have to do here is to write"}, {"sha": "006c6392a6b7a4b65719e4177d6199001d7f0ada", "filename": "src/test/run-pass/classes-simple.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503dec1d62c0432aff140758ad7bcb34ef6c060a/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=503dec1d62c0432aff140758ad7bcb34ef6c060a", "patch": "@@ -0,0 +1,10 @@\n+// xfail-test\n+class cat {\n+  priv {\n+    let mutable meows : uint;\n+  }\n+\n+  let how_hungry : int;\n+\n+  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+}\n\\ No newline at end of file"}]}