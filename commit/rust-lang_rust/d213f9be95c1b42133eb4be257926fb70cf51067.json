{"sha": "d213f9be95c1b42133eb4be257926fb70cf51067", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMTNmOWJlOTVjMWI0MjEzM2ViNGJlMjU3OTI2ZmI3MGNmNTEwNjc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-09T23:19:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-09T23:19:38Z"}, "message": "Simplify second pass of collect_item_types so I can understand it better.", "tree": {"sha": "43a98b2cfc24640a3f5c804b828505d8005b681f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43a98b2cfc24640a3f5c804b828505d8005b681f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d213f9be95c1b42133eb4be257926fb70cf51067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d213f9be95c1b42133eb4be257926fb70cf51067", "html_url": "https://github.com/rust-lang/rust/commit/d213f9be95c1b42133eb4be257926fb70cf51067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d213f9be95c1b42133eb4be257926fb70cf51067/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e344622c12bd25d73bfc5a2844e96705bf8d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e344622c12bd25d73bfc5a2844e96705bf8d8a", "html_url": "https://github.com/rust-lang/rust/commit/b7e344622c12bd25d73bfc5a2844e96705bf8d8a"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "fa05ca6c42157f203b369fa186b7280e72921317", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d213f9be95c1b42133eb4be257926fb70cf51067/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d213f9be95c1b42133eb4be257926fb70cf51067/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=d213f9be95c1b42133eb4be257926fb70cf51067", "patch": "@@ -356,61 +356,57 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n \n     type ty_item_table = hashmap[ast.def_id,@ast.item];\n \n-    fn trans_ty_item_id_to_ty(@ty_item_table id_to_ty_item,\n-                              @ty_table item_to_ty,\n-                              ast.def_id id) -> @ty {\n+    fn getter(@ty_item_table id_to_ty_item,\n+              @ty_table item_to_ty,\n+              ast.def_id id) -> @ty {\n         check (id_to_ty_item.contains_key(id));\n         auto item = id_to_ty_item.get(id);\n-        ret trans_ty_item_to_ty(id_to_ty_item, item_to_ty, item);\n+        ret ty_of_item(id_to_ty_item, item_to_ty, item);\n     }\n \n-    fn trans_fn_arg_to_ty(@ty_item_table id_to_ty_item,\n-                          @ty_table item_to_ty,\n-                          &ast.arg a) -> arg {\n-        auto f = bind trans_ty_item_id_to_ty(id_to_ty_item, item_to_ty, _);\n+    fn ty_of_arg(@ty_item_table id_to_ty_item,\n+                 @ty_table item_to_ty,\n+                 &ast.arg a) -> arg {\n+        auto f = bind getter(id_to_ty_item, item_to_ty, _);\n         ret rec(mode=a.mode, ty=ast_ty_to_ty(f, a.ty));\n     }\n \n-    fn trans_ty_item_to_ty(@ty_item_table id_to_ty_item,\n-                           @ty_table item_to_ty,\n-                           @ast.item it) -> @ty {\n+    fn ty_of_item(@ty_item_table id_to_ty_item,\n+                  @ty_table item_to_ty,\n+                  @ast.item it) -> @ty {\n+\n+        auto get = bind getter(id_to_ty_item, item_to_ty, _);\n+        auto convert = bind ast_ty_to_ty(get, _);\n+\n         alt (it.node) {\n \n             case (ast.item_const(?ident, ?t, _, ?def_id, _)) {\n-                auto f = bind trans_ty_item_id_to_ty(id_to_ty_item,\n-                                                     item_to_ty, _);\n-                item_to_ty.insert(def_id, ast_ty_to_ty(f, t));\n+                item_to_ty.insert(def_id, convert(t));\n             }\n \n             case (ast.item_fn(?ident, ?fn_info, _, ?def_id, _)) {\n                 // TODO: handle ty-params\n \n-                auto f = bind trans_fn_arg_to_ty(id_to_ty_item, item_to_ty,\n-                                                 _);\n+                auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n                 auto input_tys = _vec.map[ast.arg,arg](f, fn_info.inputs);\n-\n-                auto g = bind trans_ty_item_id_to_ty(id_to_ty_item,\n-                                                     item_to_ty, _);\n-                auto output_ty = ast_ty_to_ty(g, fn_info.output);\n+                auto output_ty = convert(fn_info.output);\n \n                 auto t_fn = plain_ty(ty_fn(input_tys, output_ty));\n                 item_to_ty.insert(def_id, t_fn);\n                 ret t_fn;\n             }\n \n-            case (ast.item_ty(?ident, ?referent_ty, _, ?def_id, _)) {\n+            case (ast.item_ty(?ident, ?ty, _, ?def_id, _)) {\n                 if (item_to_ty.contains_key(def_id)) {\n                     // Avoid repeating work.\n                     ret item_to_ty.get(def_id);\n                 }\n \n                 // Tell ast_ty_to_ty() that we want to perform a recursive\n                 // call to resolve any named types.\n-                auto f = bind trans_ty_item_id_to_ty(id_to_ty_item,\n-                                                     item_to_ty, _);\n-                auto ty = ast_ty_to_ty(f, referent_ty);\n-                item_to_ty.insert(def_id, ty);\n-                ret ty;\n+                auto ty_ = convert(ty);\n+                item_to_ty.insert(def_id, ty_);\n+                ret ty_;\n             }\n \n             case (ast.item_mod(_, _, _)) { fail; }\n@@ -432,8 +428,7 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n             } else {\n                 // As above, tell ast_ty_to_ty() that trans_ty_item_to_ty()\n                 // should be called to resolve named types.\n-                auto f = bind trans_ty_item_id_to_ty(id_to_ty_item,\n-                                                     item_to_ty, _);\n+                auto f = bind getter(id_to_ty_item, item_to_ty, _);\n \n                 let vec[arg] args = vec();\n                 for (ast.variant_arg va in variant.args) {\n@@ -478,20 +473,20 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n     for (@ast.item it in module.items) {\n         let ast.item_ result;\n         alt (it.node) {\n-            case (ast.item_const(?ident, ?t, ?e, ?def_id, _)) {\n-                auto ty = trans_ty_item_to_ty(id_to_ty_item, item_to_ty, it);\n-                result = ast.item_const(ident, t, e, def_id,\n-                                        ast.ann_type(ty));\n+            case (ast.item_const(?ident, ?at, ?e, ?def_id, _)) {\n+                auto t = ty_of_item(id_to_ty_item, item_to_ty, it);\n+                result = ast.item_const(ident, at, e, def_id,\n+                                        ast.ann_type(t));\n             }\n             case (ast.item_fn(?ident, ?fn_info, ?tps, ?def_id, _)) {\n                 // TODO: type-params\n \n-                auto t = trans_ty_item_to_ty(id_to_ty_item, item_to_ty, it);\n+                auto t = ty_of_item(id_to_ty_item, item_to_ty, it);\n                 result = ast.item_fn(ident, fn_info, tps, def_id,\n                                      ast.ann_type(t));\n             }\n             case (ast.item_ty(?ident, ?referent_ty, ?tps, ?def_id, _)) {\n-                auto t = trans_ty_item_to_ty(id_to_ty_item, item_to_ty, it);\n+                auto t = ty_of_item(id_to_ty_item, item_to_ty, it);\n                 auto ann = ast.ann_type(t);\n                 result = ast.item_ty(ident, referent_ty, tps, def_id, ann);\n             }"}]}