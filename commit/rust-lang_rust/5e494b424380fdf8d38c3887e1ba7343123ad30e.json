{"sha": "5e494b424380fdf8d38c3887e1ba7343123ad30e", "node_id": "C_kwDOAAsO6NoAKDVlNDk0YjQyNDM4MGZkZjhkMzhjMzg4N2UxYmE3MzQzMTIzYWQzMGU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-30T05:56:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-30T05:56:51Z"}, "message": "Rollup merge of #101101 - RalfJung:read-pointer-as-bytes, r=oli-obk\n\ninterpret: make read-pointer-as-bytes a CTFE-only error with extra information\n\nNext step in the reaction to https://github.com/rust-lang/rust/issues/99923. Also teaches Miri to implicitly strip provenance in more situations when transmuting pointers to integers, which fixes https://github.com/rust-lang/miri/issues/2456.\n\nPointer-to-int transmutation during CTFE now produces a message like this:\n```\n   = help: this code performed an operation that depends on the underlying bytes representing a pointer\n   = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n```\n\nr? ``@oli-obk``", "tree": {"sha": "deeda64b30b493c387950b08f5565f1aeeff716c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deeda64b30b493c387950b08f5565f1aeeff716c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e494b424380fdf8d38c3887e1ba7343123ad30e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e494b424380fdf8d38c3887e1ba7343123ad30e", "html_url": "https://github.com/rust-lang/rust/commit/5e494b424380fdf8d38c3887e1ba7343123ad30e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e494b424380fdf8d38c3887e1ba7343123ad30e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "663b8949b79fd28ed0e96e485ef2ca682bf5802a", "url": "https://api.github.com/repos/rust-lang/rust/commits/663b8949b79fd28ed0e96e485ef2ca682bf5802a", "html_url": "https://github.com/rust-lang/rust/commit/663b8949b79fd28ed0e96e485ef2ca682bf5802a"}, {"sha": "94f2fef4ccadb716f4662475afdb9905143d53f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f2fef4ccadb716f4662475afdb9905143d53f2", "html_url": "https://github.com/rust-lang/rust/commit/94f2fef4ccadb716f4662475afdb9905143d53f2"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "cb5d73a7e0ba9bd277c6318a70da19d284360bb4", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e494b424380fdf8d38c3887e1ba7343123ad30e/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e494b424380fdf8d38c3887e1ba7343123ad30e/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=5e494b424380fdf8d38c3887e1ba7343123ad30e", "patch": "@@ -430,7 +430,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n         let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(0..alloc.len()).to_vec();\n         data_ctx.define(bytes.into_boxed_slice());\n \n-        for &(offset, alloc_id) in alloc.relocations().iter() {\n+        for &(offset, alloc_id) in alloc.provenance().iter() {\n             let addend = {\n                 let endianness = tcx.data_layout.endian;\n                 let offset = offset.bytes() as usize;"}, {"sha": "1f358b1bbb96edb89a2893cf9bc526f6dbcc79b9", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e494b424380fdf8d38c3887e1ba7343123ad30e/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e494b424380fdf8d38c3887e1ba7343123ad30e/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=5e494b424380fdf8d38c3887e1ba7343123ad30e", "patch": "@@ -186,7 +186,10 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         let size = Size::from_bytes(\n                             4 * ret_lane_count, /* size_of([u32; ret_lane_count]) */\n                         );\n-                        alloc.inner().get_bytes(fx, alloc_range(offset, size)).unwrap()\n+                        alloc\n+                            .inner()\n+                            .get_bytes_strip_provenance(fx, alloc_range(offset, size))\n+                            .unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),\n                 };"}]}