{"sha": "e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MWFlNjhiMmRmZDk2YTFiODFiY2FhYjIwZmQ0ODlkNTA3NWZjZjk=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-05T14:33:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-05T14:43:16Z"}, "message": "Only inline closure, literal and local arguments when used once", "tree": {"sha": "5775200edb62f4e2dd61d86f1976b382a4e272f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5775200edb62f4e2dd61d86f1976b382a4e272f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9", "html_url": "https://github.com/rust-lang/rust/commit/e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc", "html_url": "https://github.com/rust-lang/rust/commit/ac300eaceb76fbd3f81a7c10d70b2a91ca5b89bc"}], "stats": {"total": 100, "additions": 56, "deletions": 44}, "files": [{"sha": "5bd81ba051355acc7bb1d504f77b9067821b75d3", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 56, "deletions": 44, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=e71ae68b2dfd96a1b81bcaab20fd489d5075fcf9", "patch": "@@ -157,25 +157,28 @@ pub(crate) fn inline_(\n \n             // Inline parameter expressions or generate `let` statements depending on whether inlining works or not.\n             for ((pat, _), usages, expr) in izip!(params, param_use_nodes, arg_list).rev() {\n+                let expr_is_name_ref = matches!(&expr,\n+                    ast::Expr::PathExpr(expr)\n+                        if expr.path().and_then(|path| path.as_single_name_ref()).is_some()\n+                );\n                 match &*usages {\n-                    // inline single use parameters\n-                    [usage] => {\n-                        let expr = if matches!(expr, ast::Expr::ClosureExpr(_))\n-                            && usage.syntax().parent().and_then(ast::Expr::cast).is_some()\n-                        {\n-                            make::expr_paren(expr)\n-                        } else {\n-                            expr\n-                        };\n+                    // inline single use closure arguments\n+                    [usage]\n+                        if matches!(expr, ast::Expr::ClosureExpr(_))\n+                            && usage.syntax().parent().and_then(ast::Expr::cast).is_some() =>\n+                    {\n+                        cov_mark::hit!(inline_call_inline_closure);\n+                        let expr = make::expr_paren(expr);\n                         ted::replace(usage.syntax(), expr.syntax().clone_for_update());\n                     }\n-                    // inline parameters whose expression is a simple local reference\n-                    [_, ..]\n-                        if matches!(&expr,\n-                            ast::Expr::PathExpr(expr)\n-                                if expr.path().and_then(|path| path.as_single_name_ref()).is_some()\n-                        ) =>\n-                    {\n+                    // inline single use literals\n+                    [usage] if matches!(expr, ast::Expr::Literal(_)) => {\n+                        cov_mark::hit!(inline_call_inline_literal);\n+                        ted::replace(usage.syntax(), expr.syntax().clone_for_update());\n+                    }\n+                    // inline direct local arguments\n+                    [_, ..] if expr_is_name_ref => {\n+                        cov_mark::hit!(inline_call_inline_locals);\n                         usages.into_iter().for_each(|usage| {\n                             ted::replace(usage.syntax(), &expr.syntax().clone_for_update());\n                         });\n@@ -322,7 +325,10 @@ impl Foo {\n }\n \n fn main() {\n-    let x = Foo(Foo(3).0 + 2);\n+    let x = {\n+        let this = Foo(3);\n+        Foo(this.0 + 2)\n+    };\n }\n \"#,\n         );\n@@ -355,7 +361,10 @@ impl Foo {\n }\n \n fn main() {\n-    let x = Foo(Foo(3).0 + 2);\n+    let x = {\n+        let this = Foo(3);\n+        Foo(this.0 + 2)\n+    };\n }\n \"#,\n         );\n@@ -435,31 +444,6 @@ fn main() {\n         );\n     }\n \n-    #[test]\n-    fn function_single_use_expr_in_param() {\n-        check_assist(\n-            inline_call,\n-            r#\"\n-fn double(x: u32) -> u32 {\n-    2 * x\n-}\n-fn main() {\n-    let x = 51;\n-    let x = double$0(10 + x);\n-}\n-\"#,\n-            r#\"\n-fn double(x: u32) -> u32 {\n-    2 * x\n-}\n-fn main() {\n-    let x = 51;\n-    let x = 2 * 10 + x;\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn function_multi_use_expr_in_param() {\n         check_assist(\n@@ -489,7 +473,8 @@ fn main() {\n     }\n \n     #[test]\n-    fn function_multi_use_local_in_param() {\n+    fn function_use_local_in_param() {\n+        cov_mark::check!(inline_call_inline_locals);\n         check_assist(\n             inline_call,\n             r#\"\n@@ -550,6 +535,7 @@ impl Foo {\n \n     #[test]\n     fn wraps_closure_in_paren() {\n+        cov_mark::check!(inline_call_inline_closure);\n         check_assist(\n             inline_call,\n             r#\"\n@@ -594,6 +580,32 @@ fn main() {\n         main();\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_single_literal_expr() {\n+        cov_mark::check!(inline_call_inline_literal);\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn foo(x: u32) -> u32{\n+    x\n+}\n+\n+fn main() {\n+    foo$0(222);\n+}\n+\"#,\n+            r#\"\n+fn foo(x: u32) -> u32{\n+    x\n+}\n+\n+fn main() {\n+    222;\n+}\n \"#,\n         );\n     }"}]}