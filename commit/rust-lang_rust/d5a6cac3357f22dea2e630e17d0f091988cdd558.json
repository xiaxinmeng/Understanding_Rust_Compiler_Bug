{"sha": "d5a6cac3357f22dea2e630e17d0f091988cdd558", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YTZjYWMzMzU3ZjIyZGVhMmU2MzBlMTdkMGYwOTE5ODhjZGQ1NTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-09T08:16:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-09T08:16:18Z"}, "message": "Merge #1970\n\n1970: Add <> when completing generics r=matklad a=matklad\n\n@flodiebold wdyt? Is it correct that we always need to add `<>` in generic types? \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "416648fde13020d33d62068a5d52221c66c210b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/416648fde13020d33d62068a5d52221c66c210b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5a6cac3357f22dea2e630e17d0f091988cdd558", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdnZdSCRBK7hj4Ov3rIwAAdHIIAHDsDfj+enVppLiY4Wp8RN+4\nBzfJrB/2yUdH81O3ewl1Z2yWK/eWC0XHI5uGaYgLL9zYQ0v594DPNjQxjN/d0u25\nq2OWkGBx5jgRUcLTVFVMHyt3FoHX73IhQoz0AbCEeZaOrvJ1G2i1d1maSrTCbgrJ\n1ZG8/A7b86o1hbUeGkzLmfLf6drGZwQIbCZDjH8vsBaGh8AKSgasR0bng08JzsEQ\nY7haRQviGwlLLFs1K08XwLzvLvfcqJ/vAqqxgFgITihYfHcCJe0/nlg9N7bzIG6k\n12lvLJUbj3hd3ndhxsOhMlLZuXDSeUmDSHBlZ2o1UUH80DlicZt9ArQcJK1v5E8=\n=+MJi\n-----END PGP SIGNATURE-----\n", "payload": "tree 416648fde13020d33d62068a5d52221c66c210b5\nparent 06a8deae4a29949f438d66c54eed4e016ac35432\nparent e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1570608978 +0000\ncommitter GitHub <noreply@github.com> 1570608978 +0000\n\nMerge #1970\n\n1970: Add <> when completing generics r=matklad a=matklad\n\n@flodiebold wdyt? Is it correct that we always need to add `<>` in generic types? \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a6cac3357f22dea2e630e17d0f091988cdd558", "html_url": "https://github.com/rust-lang/rust/commit/d5a6cac3357f22dea2e630e17d0f091988cdd558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5a6cac3357f22dea2e630e17d0f091988cdd558/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06a8deae4a29949f438d66c54eed4e016ac35432", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a8deae4a29949f438d66c54eed4e016ac35432", "html_url": "https://github.com/rust-lang/rust/commit/06a8deae4a29949f438d66c54eed4e016ac35432"}, {"sha": "e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207", "html_url": "https://github.com/rust-lang/rust/commit/e0b1c17dcb367a3edfd9df4b1d7cfbcd059cd207"}], "stats": {"total": 318, "additions": 222, "deletions": 96}, "files": [{"sha": "8533b4f5e6376c40d81d05264216077574cf9d11", "filename": "crates/ra_hir/src/code_model/docs.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5a6cac3357f22dea2e630e17d0f091988cdd558/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a6cac3357f22dea2e630e17d0f091988cdd558/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs?ref=d5a6cac3357f22dea2e630e17d0f091988cdd558", "patch": "@@ -6,21 +6,19 @@ use ra_syntax::ast;\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    Const, Enum, EnumVariant, FieldSource, Function, HasSource, MacroDef, Module, Static, Struct,\n-    StructField, Trait, TypeAlias, Union,\n+    Adt, Const, Enum, EnumVariant, FieldSource, Function, HasSource, MacroDef, Module, Static,\n+    Struct, StructField, Trait, TypeAlias, Union,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum DocDef {\n     Module(Module),\n     StructField(StructField),\n-    Struct(Struct),\n-    Enum(Enum),\n+    Adt(Adt),\n     EnumVariant(EnumVariant),\n     Static(Static),\n     Const(Const),\n     Function(Function),\n-    Union(Union),\n     Trait(Trait),\n     TypeAlias(TypeAlias),\n     MacroDef(MacroDef),\n@@ -29,13 +27,11 @@ pub enum DocDef {\n impl_froms!(\n     DocDef: Module,\n     StructField,\n-    Struct,\n-    Enum,\n+    Adt(Struct, Enum, Union),\n     EnumVariant,\n     Static,\n     Const,\n     Function,\n-    Union,\n     Trait,\n     TypeAlias,\n     MacroDef\n@@ -79,13 +75,15 @@ pub(crate) fn documentation_query(\n             FieldSource::Named(named) => docs_from_ast(&named),\n             FieldSource::Pos(..) => None,\n         },\n-        DocDef::Struct(it) => docs_from_ast(&it.source(db).ast),\n-        DocDef::Enum(it) => docs_from_ast(&it.source(db).ast),\n+        DocDef::Adt(it) => match it {\n+            Adt::Struct(it) => docs_from_ast(&it.source(db).ast),\n+            Adt::Enum(it) => docs_from_ast(&it.source(db).ast),\n+            Adt::Union(it) => docs_from_ast(&it.source(db).ast),\n+        },\n         DocDef::EnumVariant(it) => docs_from_ast(&it.source(db).ast),\n         DocDef::Static(it) => docs_from_ast(&it.source(db).ast),\n         DocDef::Const(it) => docs_from_ast(&it.source(db).ast),\n         DocDef::Function(it) => docs_from_ast(&it.source(db).ast),\n-        DocDef::Union(it) => docs_from_ast(&it.source(db).ast),\n         DocDef::Trait(it) => docs_from_ast(&it.source(db).ast),\n         DocDef::TypeAlias(it) => docs_from_ast(&it.source(db).ast),\n         DocDef::MacroDef(it) => docs_from_ast(&it.source(db).ast),"}, {"sha": "84826cdcce1f8b952498334d50c2979766754bf9", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 81, "deletions": 73, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/d5a6cac3357f22dea2e630e17d0f091988cdd558/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a6cac3357f22dea2e630e17d0f091988cdd558/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=d5a6cac3357f22dea2e630e17d0f091988cdd558", "patch": "@@ -290,22 +290,24 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"T\",\n-        source_range: [54; 54),\n-        delete: [54; 54),\n-        insert: \"T\",\n-        kind: TypeParam,\n-    },\n-    CompletionItem {\n-        label: \"X\",\n-        source_range: [54; 54),\n-        delete: [54; 54),\n-        insert: \"X\",\n-        kind: Struct,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"T\",\n+                source_range: [54; 54),\n+                delete: [54; 54),\n+                insert: \"T\",\n+                kind: TypeParam,\n+            },\n+            CompletionItem {\n+                label: \"X\",\n+                source_range: [54; 54),\n+                delete: [54; 54),\n+                insert: \"X<$0>\",\n+                kind: Struct,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -319,22 +321,24 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Self\",\n-        source_range: [48; 48),\n-        delete: [48; 48),\n-        insert: \"Self\",\n-        kind: TypeParam,\n-    },\n-    CompletionItem {\n-        label: \"X\",\n-        source_range: [48; 48),\n-        delete: [48; 48),\n-        insert: \"X\",\n-        kind: Enum,\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Self\",\n+                source_range: [48; 48),\n+                delete: [48; 48),\n+                insert: \"Self\",\n+                kind: TypeParam,\n+            },\n+            CompletionItem {\n+                label: \"X\",\n+                source_range: [48; 48),\n+                delete: [48; 48),\n+                insert: \"X\",\n+                kind: Enum,\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -442,23 +446,25 @@ mod tests {\n                 fn x() -> <|>\n                 \"\n             ),\n-            @r###\"[\n-    CompletionItem {\n-        label: \"Foo\",\n-        source_range: [55; 55),\n-        delete: [55; 55),\n-        insert: \"Foo\",\n-        kind: Struct,\n-    },\n-    CompletionItem {\n-        label: \"x\",\n-        source_range: [55; 55),\n-        delete: [55; 55),\n-        insert: \"x()$0\",\n-        kind: Function,\n-        detail: \"fn x()\",\n-    },\n-]\"###\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Foo\",\n+                source_range: [55; 55),\n+                delete: [55; 55),\n+                insert: \"Foo\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"x\",\n+                source_range: [55; 55),\n+                delete: [55; 55),\n+                insert: \"x()$0\",\n+                kind: Function,\n+                detail: \"fn x()\",\n+            },\n+        ]\n+        \"###\n         );\n     }\n \n@@ -538,30 +544,32 @@ mod tests {\n                 }\n                 \"\n             ),\n-            @r#\"[\n-    CompletionItem {\n-        label: \"Option\",\n-        source_range: [18; 18),\n-        delete: [18; 18),\n-        insert: \"Option\",\n-        kind: Struct,\n-    },\n-    CompletionItem {\n-        label: \"foo\",\n-        source_range: [18; 18),\n-        delete: [18; 18),\n-        insert: \"foo()$0\",\n-        kind: Function,\n-        detail: \"fn foo()\",\n-    },\n-    CompletionItem {\n-        label: \"std\",\n-        source_range: [18; 18),\n-        delete: [18; 18),\n-        insert: \"std\",\n-        kind: Module,\n-    },\n-]\"#\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Option\",\n+                source_range: [18; 18),\n+                delete: [18; 18),\n+                insert: \"Option\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [18; 18),\n+                delete: [18; 18),\n+                insert: \"foo()$0\",\n+                kind: Function,\n+                detail: \"fn foo()\",\n+            },\n+            CompletionItem {\n+                label: \"std\",\n+                source_range: [18; 18),\n+                delete: [18; 18),\n+                insert: \"std\",\n+                kind: Module,\n+            },\n+        ]\n+        \"###\n         );\n     }\n "}, {"sha": "73f3f3960c67ccf0e4082e1dc8891aa8e0282ace", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a6cac3357f22dea2e630e17d0f091988cdd558/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a6cac3357f22dea2e630e17d0f091988cdd558/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=d5a6cac3357f22dea2e630e17d0f091988cdd558", "patch": "@@ -40,6 +40,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) dot_receiver: Option<ast::Expr>,\n     /// If this is a call (method or function) in particular, i.e. the () are already there.\n     pub(super) is_call: bool,\n+    pub(super) is_path_type: bool,\n+    pub(super) has_type_args: bool,\n }\n \n impl<'a> CompletionContext<'a> {\n@@ -76,6 +78,8 @@ impl<'a> CompletionContext<'a> {\n             is_new_item: false,\n             dot_receiver: None,\n             is_call: false,\n+            is_path_type: false,\n+            has_type_args: false,\n         };\n         ctx.fill(&original_parse, position.offset);\n         Some(ctx)\n@@ -176,6 +180,9 @@ impl<'a> CompletionContext<'a> {\n                 .and_then(|it| it.syntax().parent().and_then(ast::CallExpr::cast))\n                 .is_some();\n \n+            self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n+            self.has_type_args = segment.type_arg_list().is_some();\n+\n             if let Some(mut path) = hir::Path::from_ast(path.clone()) {\n                 if !path.is_ident() {\n                     path.segments.pop().unwrap();"}, {"sha": "400a266a2a44276e5d984b582b5c67358c3eeab3", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 124, "deletions": 12, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/d5a6cac3357f22dea2e630e17d0f091988cdd558/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a6cac3357f22dea2e630e17d0f091988cdd558/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=d5a6cac3357f22dea2e630e17d0f091988cdd558", "patch": "@@ -1,12 +1,12 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n-use hir::{Docs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n+use hir::{db::HirDatabase, Docs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n use join_to_string::join;\n use ra_syntax::ast::NameOwner;\n use test_utils::tested_by;\n \n use crate::completion::{\n-    CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n+    db, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n };\n \n use crate::display::{const_label, function_label, macro_label, type_label};\n@@ -50,14 +50,8 @@ impl Completions {\n             ScopeDef::ModuleDef(Function(func)) => {\n                 return self.add_function_with_name(ctx, Some(local_name), *func);\n             }\n-            ScopeDef::ModuleDef(Adt(hir::Adt::Struct(it))) => {\n-                (CompletionItemKind::Struct, it.docs(ctx.db))\n-            }\n-            ScopeDef::ModuleDef(Adt(hir::Adt::Union(it))) => {\n-                (CompletionItemKind::Struct, it.docs(ctx.db))\n-            }\n-            ScopeDef::ModuleDef(Adt(hir::Adt::Enum(it))) => {\n-                (CompletionItemKind::Enum, it.docs(ctx.db))\n+            ScopeDef::ModuleDef(Adt(adt)) => {\n+                return self.add_adt_with_name(ctx, local_name, *adt);\n             }\n             ScopeDef::ModuleDef(EnumVariant(it)) => {\n                 (CompletionItemKind::EnumVariant, it.docs(ctx.db))\n@@ -156,7 +150,8 @@ impl Completions {\n             })\n             .set_documentation(func.docs(ctx.db))\n             .detail(detail);\n-        // If not an import, add parenthesis automatically.\n+\n+        // Add `<>` for generic types\n         if ctx.use_item_syntax.is_none()\n             && !ctx.is_call\n             && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n@@ -170,9 +165,36 @@ impl Completions {\n                 };\n             builder = builder.insert_snippet(snippet);\n         }\n+\n         self.add(builder)\n     }\n \n+    fn add_adt_with_name(&mut self, ctx: &CompletionContext, name: String, adt: hir::Adt) {\n+        let mut builder =\n+            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.clone());\n+\n+        let kind = match adt {\n+            hir::Adt::Struct(_) => CompletionItemKind::Struct,\n+            // FIXME: add CompletionItemKind::Union\n+            hir::Adt::Union(_) => CompletionItemKind::Struct,\n+            hir::Adt::Enum(_) => CompletionItemKind::Enum,\n+        };\n+        let docs = adt.docs(ctx.db);\n+\n+        // If not an import, add parenthesis automatically.\n+        if ctx.is_path_type\n+            && !ctx.has_type_args\n+            && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n+        {\n+            if has_non_default_type_params(adt, ctx.db) {\n+                tested_by!(inserts_angle_brackets_for_generics);\n+                builder = builder.insert_snippet(format!(\"{}<$0>\", name));\n+            }\n+        }\n+\n+        builder.kind(kind).set_documentation(docs).add_to(self)\n+    }\n+\n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n         let ast_node = constant.source(ctx.db).ast;\n         let name = match ast_node.name() {\n@@ -213,7 +235,6 @@ impl Completions {\n             .separator(\", \")\n             .surround_with(\"(\", \")\")\n             .to_string();\n-\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n             .kind(CompletionItemKind::EnumVariant)\n             .set_documentation(variant.docs(ctx.db))\n@@ -222,6 +243,11 @@ impl Completions {\n     }\n }\n \n+fn has_non_default_type_params(adt: hir::Adt, db: &db::RootDatabase) -> bool {\n+    let subst = db.generic_defaults(adt.into());\n+    subst.iter().any(|ty| ty == &Ty::Unknown)\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::completion::{do_completion, CompletionItem, CompletionKind};\n@@ -389,4 +415,90 @@ mod tests {\n ]\"#\n         );\n     }\n+\n+    #[test]\n+    fn inserts_angle_brackets_for_generics() {\n+        covers!(inserts_angle_brackets_for_generics);\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                struct Vec<T> {}\n+                fn foo(xs: Ve<|>)\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Vec\",\n+                source_range: [61; 63),\n+                delete: [61; 63),\n+                insert: \"Vec<$0>\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [61; 63),\n+                delete: [61; 63),\n+                insert: \"foo($0)\",\n+                kind: Function,\n+                detail: \"fn foo(xs: Ve)\",\n+            },\n+        ]\n+        \"###\n+        );\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                struct Vec<T = i128> {}\n+                fn foo(xs: Ve<|>)\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Vec\",\n+                source_range: [68; 70),\n+                delete: [68; 70),\n+                insert: \"Vec\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [68; 70),\n+                delete: [68; 70),\n+                insert: \"foo($0)\",\n+                kind: Function,\n+                detail: \"fn foo(xs: Ve)\",\n+            },\n+        ]\n+        \"###\n+        );\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                struct Vec<T> {}\n+                fn foo(xs: Ve<|><i128>)\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"Vec\",\n+                source_range: [61; 63),\n+                delete: [61; 63),\n+                insert: \"Vec\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"foo\",\n+                source_range: [61; 63),\n+                delete: [61; 63),\n+                insert: \"foo($0)\",\n+                kind: Function,\n+                detail: \"fn foo(xs: Ve<i128>)\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n }"}, {"sha": "848ae4dc743e81a23bfd7b40267a32dee52afbc1", "filename": "crates/ra_ide_api/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5a6cac3357f22dea2e630e17d0f091988cdd558/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a6cac3357f22dea2e630e17d0f091988cdd558/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs?ref=d5a6cac3357f22dea2e630e17d0f091988cdd558", "patch": "@@ -1,6 +1,7 @@\n //! See test_utils/src/marks.rs\n \n test_utils::marks!(\n+    inserts_angle_brackets_for_generics\n     inserts_parens_for_function_calls\n     goto_definition_works_for_macros\n     goto_definition_works_for_methods"}]}