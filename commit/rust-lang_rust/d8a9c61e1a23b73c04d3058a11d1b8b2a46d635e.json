{"sha": "d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YTljNjFlMWEyM2I3M2MwNGQzMDU4YTExZDFiOGIyYTQ2ZDYzNWU=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-06-28T18:30:35Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-06-28T18:33:18Z"}, "message": "Use impl for Weak::as_ptr that works for unsized T", "tree": {"sha": "195ca4652812df625e854155e1fc34a0fbba1033", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/195ca4652812df625e854155e1fc34a0fbba1033"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e", "html_url": "https://github.com/rust-lang/rust/commit/d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4bdf47f4c0773bba93f50900612242b929eca0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4bdf47f4c0773bba93f50900612242b929eca0b", "html_url": "https://github.com/rust-lang/rust/commit/e4bdf47f4c0773bba93f50900612242b929eca0b"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "423122a690090dcabf2104c21f0475a0b498a22e", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e", "patch": "@@ -245,7 +245,7 @@ use core::hash::{Hash, Hasher};\n use core::intrinsics::abort;\n use core::iter;\n use core::marker::{self, PhantomData, Unpin, Unsize};\n-use core::mem::{self, align_of, align_of_val_raw, forget, size_of_val};\n+use core::mem::{self, align_of_val_raw, forget, size_of_val};\n use core::ops::{CoerceUnsized, Deref, DispatchFromDyn, Receiver};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n@@ -1704,9 +1704,18 @@ impl<T> Weak<T> {\n     /// [`null`]: ../../std/ptr/fn.null.html\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n-        let offset = data_offset_sized::<T>();\n-        let ptr = self.ptr.cast::<u8>().as_ptr().wrapping_offset(offset);\n-        ptr as *const T\n+        let ptr: *mut RcBox<T> = NonNull::as_ptr(self.ptr);\n+        let fake_ptr = ptr as *mut T;\n+\n+        // SAFETY: we must offset the pointer manually, and said pointer may be\n+        // a dangling weak (usize::MAX). data_offset is safe to call, because we\n+        // know a pointer to unsized T must be derived from a real unsized T,\n+        // because dangling weaks are only created for sized T. wrapping_offset\n+        // is used so that we can use the same code path for dangling weak refs.\n+        unsafe {\n+            let offset = data_offset(&raw const (*ptr).value);\n+            set_data_ptr(fake_ptr, (ptr as *mut u8).wrapping_offset(offset))\n+        }\n     }\n \n     /// Consumes the `Weak<T>` and turns it into a raw pointer.\n@@ -2117,13 +2126,6 @@ unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     unsafe { data_offset_align(align_of_val_raw(ptr)) }\n }\n \n-/// Computes the offset of the data field within `RcBox`.\n-///\n-/// Unlike [`data_offset`], this doesn't need the pointer, but it works only on `T: Sized`.\n-fn data_offset_sized<T>() -> isize {\n-    data_offset_align(align_of::<T>())\n-}\n-\n #[inline]\n fn data_offset_align(align: usize) -> isize {\n     let layout = Layout::new::<RcBox<()>>();"}, {"sha": "289aea3afcce9b351bf3feca5b01fb91c95eda65", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=d8a9c61e1a23b73c04d3058a11d1b8b2a46d635e", "patch": "@@ -16,7 +16,7 @@ use core::hash::{Hash, Hasher};\n use core::intrinsics::abort;\n use core::iter;\n use core::marker::{PhantomData, Unpin, Unsize};\n-use core::mem::{self, align_of, align_of_val, size_of_val};\n+use core::mem::{self, align_of_val, size_of_val};\n use core::ops::{CoerceUnsized, Deref, DispatchFromDyn, Receiver};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n@@ -1472,9 +1472,18 @@ impl<T> Weak<T> {\n     /// [`null`]: ../../std/ptr/fn.null.html\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n-        let offset = data_offset_sized::<T>();\n-        let ptr = self.ptr.cast::<u8>().as_ptr().wrapping_offset(offset);\n-        ptr as *const T\n+        let ptr: *mut ArcInner<T> = NonNull::as_ptr(self.ptr);\n+        let fake_ptr = ptr as *mut T;\n+\n+        // SAFETY: we must offset the pointer manually, and said pointer may be\n+        // a dangling weak (usize::MAX). data_offset is safe to call, because we\n+        // know a pointer to unsized T must be derived from a real unsized T,\n+        // because dangling weaks are only created for sized T. wrapping_offset\n+        // is used so that we can use the same code path for dangling weak refs.\n+        unsafe {\n+            let offset = data_offset(&raw const (*ptr).data);\n+            set_data_ptr(fake_ptr, (ptr as *mut u8).wrapping_offset(offset))\n+        }\n     }\n \n     /// Consumes the `Weak<T>` and turns it into a raw pointer.\n@@ -2275,13 +2284,6 @@ unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     unsafe { data_offset_align(align_of_val(&*ptr)) }\n }\n \n-/// Computes the offset of the data field within `ArcInner`.\n-///\n-/// Unlike [`data_offset`], this doesn't need the pointer, but it works only on `T: Sized`.\n-fn data_offset_sized<T>() -> isize {\n-    data_offset_align(align_of::<T>())\n-}\n-\n #[inline]\n fn data_offset_align(align: usize) -> isize {\n     let layout = Layout::new::<ArcInner<()>>();"}]}