{"sha": "ca50af7f03f7be722f1406a4fbcd2fb74cd751dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNTBhZjdmMDNmN2JlNzIyZjE0MDZhNGZiY2QyZmI3NGNkNzUxZGM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-10-21T21:08:17Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-10-21T21:08:17Z"}, "message": "Merge pull request #516 from eefriedman/remove-walk\n\nDon't use `visit::walk_*`.  Instead, recurse by hand.", "tree": {"sha": "c9a0f9bd5b59b91ee67b1e76b3c64b3154f9ef1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a0f9bd5b59b91ee67b1e76b3c64b3154f9ef1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc", "html_url": "https://github.com/rust-lang/rust/commit/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2547b6bcdbac2cadfafe0d8f2795bf9fa1c4da", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2547b6bcdbac2cadfafe0d8f2795bf9fa1c4da", "html_url": "https://github.com/rust-lang/rust/commit/8e2547b6bcdbac2cadfafe0d8f2795bf9fa1c4da"}, {"sha": "be9e7dc68963db304533f3885ea6d27fddc81ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/be9e7dc68963db304533f3885ea6d27fddc81ae6", "html_url": "https://github.com/rust-lang/rust/commit/be9e7dc68963db304533f3885ea6d27fddc81ae6"}], "stats": {"total": 166, "additions": 129, "deletions": 37}, "files": [{"sha": "c58d16809aa1a708c5da19efb6cef3aeb72b3644", "filename": "src/visitor.rs", "status": "modified", "additions": 89, "deletions": 37, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=ca50af7f03f7be722f1406a4fbcd2fb74cd751dc", "patch": "@@ -31,17 +31,13 @@ pub struct FmtVisitor<'a> {\n     pub config: &'a Config,\n }\n \n-impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n-    fn visit_expr(&mut self, _: &'v ast::Expr) {\n-        unreachable!()\n-    }\n-\n-    fn visit_stmt(&mut self, stmt: &'v ast::Stmt) {\n+impl<'a> FmtVisitor<'a> {\n+    fn visit_stmt(&mut self, stmt: &ast::Stmt) {\n         match stmt.node {\n             ast::Stmt_::StmtDecl(ref decl, _) => {\n                 match decl.node {\n                     ast::Decl_::DeclLocal(ref local) => self.visit_let(local, stmt.span),\n-                    ast::Decl_::DeclItem(..) => visit::walk_stmt(self, stmt),\n+                    ast::Decl_::DeclItem(ref item) => self.visit_item(item),\n                 }\n             }\n             ast::Stmt_::StmtExpr(ref ex, _) | ast::Stmt_::StmtSemi(ref ex, _) => {\n@@ -57,14 +53,14 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                                 .map(|s| s + suffix);\n                 self.push_rewrite(stmt.span, rewrite);\n             }\n-            ast::Stmt_::StmtMac(ref _mac, _macro_style) => {\n+            ast::Stmt_::StmtMac(ref mac, _macro_style) => {\n                 self.format_missing_with_indent(stmt.span.lo);\n-                visit::walk_stmt(self, stmt);\n+                self.visit_mac(mac);\n             }\n         }\n     }\n \n-    fn visit_block(&mut self, b: &'v ast::Block) {\n+    pub fn visit_block(&mut self, b: &ast::Block) {\n         debug!(\"visit_block: {:?} {:?}\",\n                self.codemap.lookup_char_pos(b.span.lo),\n                self.codemap.lookup_char_pos(b.span.hi));\n@@ -122,9 +118,9 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n     // Note that this only gets called for function definitions. Required methods\n     // on traits do not get handled here.\n     fn visit_fn(&mut self,\n-                fk: visit::FnKind<'v>,\n-                fd: &'v ast::FnDecl,\n-                b: &'v ast::Block,\n+                fk: visit::FnKind,\n+                fd: &ast::FnDecl,\n+                b: &ast::Block,\n                 s: Span,\n                 _: ast::NodeId) {\n         let indent = self.block_indent;\n@@ -167,7 +163,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n         self.visit_block(b)\n     }\n \n-    fn visit_item(&mut self, item: &'v ast::Item) {\n+    fn visit_item(&mut self, item: &ast::Item) {\n         // Don't look at attributes for modules.\n         // We want to avoid looking at attributes in another file, which the AST\n         // doesn't distinguish. FIXME This is overly conservative and means we miss\n@@ -185,12 +181,22 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             ast::Item_::ItemUse(ref vp) => {\n                 self.format_import(item.vis, vp, item.span);\n             }\n-            // FIXME(#78): format traits and impl definitions.\n-            ast::Item_::ItemImpl(..) |\n-            ast::Item_::ItemTrait(..) => {\n+            // FIXME(#78): format impl definitions.\n+            ast::Item_::ItemImpl(_, _, _, _, _, ref impl_items) => {\n+                self.format_missing_with_indent(item.span.lo);\n+                self.block_indent = self.block_indent.block_indent(self.config);\n+                for item in impl_items {\n+                    self.visit_impl_item(&item);\n+                }\n+                self.block_indent = self.block_indent.block_unindent(self.config);\n+            }\n+            // FIXME(#78): format traits.\n+            ast::Item_::ItemTrait(_, _, _, ref trait_items) => {\n                 self.format_missing_with_indent(item.span.lo);\n                 self.block_indent = self.block_indent.block_indent(self.config);\n-                visit::walk_item(self, item);\n+                for item in trait_items {\n+                    self.visit_trait_item(&item);\n+                }\n                 self.block_indent = self.block_indent.block_unindent(self.config);\n             }\n             ast::Item_::ItemExternCrate(_) => {\n@@ -232,7 +238,6 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 self.last_pos = item.span.hi;\n                 // FIXME: we cannot format these yet, because of a bad span.\n                 // See rust lang issue #28424.\n-                // visit::walk_item(self, item);\n             }\n             ast::Item_::ItemForeignMod(ref foreign_mod) => {\n                 self.format_missing_with_indent(item.span.lo);\n@@ -258,37 +263,80 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                                              &self.get_context());\n                 self.push_rewrite(item.span, rewrite);\n             }\n-            // FIXME(#486): format type aliases.\n-            ast::Item_::ItemDefaultImpl(..) |\n-            ast::Item_::ItemFn(..) |\n+            ast::Item_::ItemDefaultImpl(..) => {\n+                // FIXME(#78): format impl definitions.\n+            }\n+            ast::ItemFn(ref declaration, unsafety, constness, abi, ref generics, ref body) => {\n+                self.visit_fn(visit::FnKind::ItemFn(item.ident,\n+                                                    generics,\n+                                                    unsafety,\n+                                                    constness,\n+                                                    abi,\n+                                                    item.vis),\n+                              declaration,\n+                              body,\n+                              item.span,\n+                              item.id)\n+            }\n             ast::Item_::ItemTy(..) => {\n-                visit::walk_item(self, item);\n+                // FIXME(#486): format type aliases.\n             }\n         }\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'v ast::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n         if self.visit_attrs(&ti.attrs) {\n             return;\n         }\n \n-        if let ast::TraitItem_::MethodTraitItem(ref sig, None) = ti.node {\n-            let indent = self.block_indent;\n-            let rewrite = self.rewrite_required_fn(indent, ti.ident, sig, ti.span);\n-            self.push_rewrite(ti.span, rewrite);\n+        match ti.node {\n+            ast::ConstTraitItem(..) => {\n+                // FIXME: Implement\n+            }\n+            ast::MethodTraitItem(ref sig, None) => {\n+                let indent = self.block_indent;\n+                let rewrite = self.rewrite_required_fn(indent, ti.ident, sig, ti.span);\n+                self.push_rewrite(ti.span, rewrite);\n+            }\n+            ast::MethodTraitItem(ref sig, Some(ref body)) => {\n+                self.visit_fn(visit::FnKind::Method(ti.ident, sig, None),\n+                              &sig.decl,\n+                              &body,\n+                              ti.span,\n+                              ti.id);\n+            }\n+            ast::TypeTraitItem(..) => {\n+                // FIXME: Implement\n+            }\n         }\n-\n-        visit::walk_trait_item(self, ti)\n     }\n \n-    fn visit_impl_item(&mut self, ii: &'v ast::ImplItem) {\n+    fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n         if self.visit_attrs(&ii.attrs) {\n             return;\n         }\n-        visit::walk_impl_item(self, ii)\n+\n+        match ii.node {\n+            ast::MethodImplItem(ref sig, ref body) => {\n+                self.visit_fn(visit::FnKind::Method(ii.ident, sig, Some(ii.vis)),\n+                              &sig.decl,\n+                              body,\n+                              ii.span,\n+                              ii.id);\n+            }\n+            ast::ConstImplItem(..) => {\n+                // FIXME: Implement\n+            }\n+            ast::TypeImplItem(_) => {\n+                // FIXME: Implement\n+            }\n+            ast::MacImplItem(ref mac) => {\n+                self.visit_mac(mac);\n+            }\n+        }\n     }\n \n-    fn visit_mac(&mut self, mac: &'v ast::Mac) {\n+    fn visit_mac(&mut self, mac: &ast::Mac) {\n         // 1 = ;\n         let width = self.config.max_width - self.block_indent.width() - 1;\n         let rewrite = rewrite_macro(mac, &self.get_context(), width, self.block_indent);\n@@ -298,9 +346,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             self.last_pos = mac.span.hi;\n         }\n     }\n-}\n \n-impl<'a> FmtVisitor<'a> {\n     fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n         self.format_missing_with_indent(span.lo);\n \n@@ -366,6 +412,12 @@ impl<'a> FmtVisitor<'a> {\n         false\n     }\n \n+    fn walk_mod_items(&mut self, m: &ast::Mod) {\n+        for item in &m.items {\n+            self.visit_item(&item);\n+        }\n+    }\n+\n     fn format_mod(&mut self, m: &ast::Mod, s: Span, ident: ast::Ident) {\n         debug!(\"FmtVisitor::format_mod: ident: {:?}, span: {:?}\", ident, s);\n \n@@ -377,7 +429,7 @@ impl<'a> FmtVisitor<'a> {\n \n         if is_internal {\n             self.block_indent = self.block_indent.block_indent(self.config);\n-            visit::walk_mod(self, m);\n+            self.walk_mod_items(m);\n             self.block_indent = self.block_indent.block_unindent(self.config);\n \n             self.format_missing_with_indent(m.inner.hi - BytePos(1));\n@@ -390,7 +442,7 @@ impl<'a> FmtVisitor<'a> {\n         let filemap = self.codemap.get_filemap(filename);\n         self.last_pos = filemap.start_pos;\n         self.block_indent = Indent::empty();\n-        visit::walk_mod(self, m);\n+        self.walk_mod_items(m);\n         self.format_missing(filemap.end_pos);\n     }\n "}, {"sha": "e04c718242147de216360f7af5304fab5a08fbc9", "filename": "tests/source/trait.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc/tests%2Fsource%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc/tests%2Fsource%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftrait.rs?ref=ca50af7f03f7be722f1406a4fbcd2fb74cd751dc", "patch": "@@ -0,0 +1,33 @@\n+// Test traits\n+\n+trait Foo {\n+    fn bar(x: i32   ) -> Baz<   U> {       Baz::new()\n+  }\n+\n+    fn baz(a: AAAAAAAAAAAAAAAAAAAAAA,\n+b: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)\n+-> RetType;\n+\n+    fn foo(a: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, // Another comment\n+b: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB)\n+           -> RetType              ; // Some comment\n+\n+    fn baz(&mut self        ) -> i32          ;\n+\n+fn increment(&     mut self, x: i32         );\n+\n+    fn read(&mut self,          x: BufReader<R> /* Used to be MemReader */)\n+    where R: Read;\n+}\n+\n+pub trait WriteMessage {\n+    fn write_message  (&mut self, &FrontendMessage) ->   io::Result<()>;\n+}\n+\n+trait Runnable {\n+    fn handler(self: & Runnable   );\n+}\n+\n+trait TraitWithExpr {\n+    fn fn_with_expr(x: [i32;       1]);\n+}"}, {"sha": "df44377a6bf9814ad30eed55237d32d03cc14037", "filename": "tests/target/impl.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc/tests%2Ftarget%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc/tests%2Ftarget%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimpl.rs?ref=ca50af7f03f7be722f1406a4fbcd2fb74cd751dc", "patch": "@@ -0,0 +1,3 @@\n+// Test impls\n+\n+impl<T> JSTraceable for SmallVec<[T; 1]> {}"}, {"sha": "ffc5b87c6ea9f6452b775fd130f181487833a74a", "filename": "tests/target/trait.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca50af7f03f7be722f1406a4fbcd2fb74cd751dc/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=ca50af7f03f7be722f1406a4fbcd2fb74cd751dc", "patch": "@@ -25,3 +25,7 @@ pub trait WriteMessage {\n trait Runnable {\n     fn handler(self: &Runnable);\n }\n+\n+trait TraitWithExpr {\n+    fn fn_with_expr(x: [i32; 1]);\n+}"}]}