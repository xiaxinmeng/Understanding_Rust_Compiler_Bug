{"sha": "7b33d39da93a9873fa002c6875c934fd13ec7d4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMzNkMzlkYTkzYTk4NzNmYTAwMmM2ODc1YzkzNGZkMTNlYzdkNGE=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-12-30T21:03:35Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-01-28T14:13:43Z"}, "message": "Improve computation of `EscapeUnicode` offset field\n\nInstead of iteratively scanning the bits, use `leading_zeros`.", "tree": {"sha": "930104bc16eb179b14bc4553465656ca79ba6d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/930104bc16eb179b14bc4553465656ca79ba6d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b33d39da93a9873fa002c6875c934fd13ec7d4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b33d39da93a9873fa002c6875c934fd13ec7d4a", "html_url": "https://github.com/rust-lang/rust/commit/7b33d39da93a9873fa002c6875c934fd13ec7d4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b33d39da93a9873fa002c6875c934fd13ec7d4a/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5", "html_url": "https://github.com/rust-lang/rust/commit/2fd2670ea0a55b7f7481c5ce2a95c5c5033941d5"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "1df2d0d3bc8cc3d24ee2a6fc62aec3973deff31d", "filename": "src/libcore/char.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b33d39da93a9873fa002c6875c934fd13ec7d4a/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b33d39da93a9873fa002c6875c934fd13ec7d4a/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=7b33d39da93a9873fa002c6875c934fd13ec7d4a", "patch": "@@ -299,14 +299,16 @@ impl CharExt for char {\n \n     #[inline]\n     fn escape_unicode(self) -> EscapeUnicode {\n-        let mut n = 0;\n-        while (self as u32) >> (4 * (n + 1)) != 0 {\n-            n += 1;\n-        }\n+        let c = self as u32;\n+        // or-ing 1 ensures that for c==0 the code computes that one\n+        // digit should be printed and (which is the same) avoids the\n+        // (31 - 32) underflow\n+        let msb = 31 - (c | 1).leading_zeros();\n+        let msdigit = msb / 4;\n         EscapeUnicode {\n             c: self,\n             state: EscapeUnicodeState::Backslash,\n-            offset: n,\n+            offset: msdigit as usize,\n         }\n     }\n "}]}