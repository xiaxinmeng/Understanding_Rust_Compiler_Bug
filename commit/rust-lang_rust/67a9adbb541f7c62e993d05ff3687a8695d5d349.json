{"sha": "67a9adbb541f7c62e993d05ff3687a8695d5d349", "node_id": "C_kwDOAAsO6NoAKDY3YTlhZGJiNTQxZjdjNjJlOTkzZDA1ZmYzNjg3YTg2OTVkNWQzNDk", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-02-17T20:28:07Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-03-24T05:31:57Z"}, "message": "Refactor, handle fields better, add field tests", "tree": {"sha": "3a957fdbde1fdef634d6ea682feaf686f0015616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a957fdbde1fdef634d6ea682feaf686f0015616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67a9adbb541f7c62e993d05ff3687a8695d5d349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67a9adbb541f7c62e993d05ff3687a8695d5d349", "html_url": "https://github.com/rust-lang/rust/commit/67a9adbb541f7c62e993d05ff3687a8695d5d349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67a9adbb541f7c62e993d05ff3687a8695d5d349/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80e57e223e98f7075cc4af83fa0eef948493d0df", "url": "https://api.github.com/repos/rust-lang/rust/commits/80e57e223e98f7075cc4af83fa0eef948493d0df", "html_url": "https://github.com/rust-lang/rust/commit/80e57e223e98f7075cc4af83fa0eef948493d0df"}], "stats": {"total": 88, "additions": 66, "deletions": 22}, "files": [{"sha": "38e67790d748e94caea191cb5a12e9e41f4e4e2d", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/67a9adbb541f7c62e993d05ff3687a8695d5d349/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a9adbb541f7c62e993d05ff3687a8695d5d349/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=67a9adbb541f7c62e993d05ff3687a8695d5d349", "patch": "@@ -156,10 +156,15 @@ impl AttemptLocalParseRecovery {\n     }\n }\n \n+/// Information for emitting suggestions and recovering from\n+/// C-style `i++`, `--i`, etc.\n #[derive(Debug, Copy, Clone)]\n struct IncDecRecovery {\n+    /// This increment/decrement is not a subexpression.\n     standalone: bool,\n+    /// Is this an increment or decrement?\n     op: IncOrDec,\n+    /// Is this pre- or postfix?\n     fixity: UnaryFixity,\n }\n \n@@ -1278,20 +1283,16 @@ impl<'a> Parser<'a> {\n         }\n \n         if kind.standalone {\n-            self.inc_dec_standalone_recovery(base, err, kind, ident, spans)\n+            self.inc_dec_standalone_recovery(base, err, kind, spans)\n         } else {\n             match kind.fixity {\n-                UnaryFixity::Pre => {\n-                    self.prefix_inc_dec_suggest_and_recover(base, err, kind, ident, spans)\n-                }\n-                UnaryFixity::Post => {\n-                    self.postfix_inc_dec_suggest_and_recover(base, err, kind, ident, spans)\n-                }\n+                UnaryFixity::Pre => self.prefix_inc_dec_suggest(base, err, kind, ident, spans),\n+                UnaryFixity::Post => self.postfix_inc_dec_suggest(base, err, kind, ident, spans),\n             }\n         }\n     }\n \n-    fn prefix_inc_dec_suggest_and_recover(\n+    fn prefix_inc_dec_suggest(\n         &mut self,\n         _base: P<Expr>,\n         mut err: DiagnosticBuilder<'a>,\n@@ -1310,7 +1311,7 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n-    fn postfix_inc_dec_suggest_and_recover(\n+    fn postfix_inc_dec_suggest(\n         &mut self,\n         _base: P<Expr>,\n         mut err: DiagnosticBuilder<'a>,\n@@ -1334,7 +1335,6 @@ impl<'a> Parser<'a> {\n         _base: P<Expr>,\n         mut err: DiagnosticBuilder<'a>,\n         kind: IncDecRecovery,\n-        _ident: Ident,\n         (pre_span, post_span): (Span, Span),\n     ) -> PResult<'a, P<Expr>> {\n         err.multipart_suggestion("}, {"sha": "34ccd167e4ec1eebf523e14ecc3689c56e604c93", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67a9adbb541f7c62e993d05ff3687a8695d5d349/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a9adbb541f7c62e993d05ff3687a8695d5d349/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=67a9adbb541f7c62e993d05ff3687a8695d5d349", "patch": "@@ -592,13 +592,7 @@ impl<'a> Parser<'a> {\n                 this.bump();\n                 this.parse_prefix_expr(None)\n             } // `+expr`\n-            token::Ident(..) if this.token.is_keyword(kw::Box) => {\n-                make_it!(this, attrs, |this, _| this.parse_box_expr(lo))\n-            }\n-            token::Ident(..) if this.is_mistaken_not_ident_negation() => {\n-                make_it!(this, attrs, |this, _| this.recover_not_expr(lo))\n-            }\n-            // Recover from `++x`\n+            // Recover from `++x`:\n             token::BinOp(token::Plus)\n                 if this.look_ahead(1, |t| *t == token::BinOp(token::Plus)) =>\n             {\n@@ -608,9 +602,15 @@ impl<'a> Parser<'a> {\n                 this.bump();\n                 this.bump();\n \n-                let operand_expr = this.parse_path_start_expr(Default::default())?;\n+                let operand_expr = this.parse_dot_or_call_expr(Default::default())?;\n                 this.maybe_recover_from_prefix_increment(operand_expr, pre_span, prev_is_semi)\n             }\n+            token::Ident(..) if this.token.is_keyword(kw::Box) => {\n+                make_it!(this, attrs, |this, _| this.parse_box_expr(lo))\n+            }\n+            token::Ident(..) if this.is_mistaken_not_ident_negation() => {\n+                make_it!(this, attrs, |this, _| this.recover_not_expr(lo))\n+            }\n             _ => return this.parse_dot_or_call_expr(Some(attrs)),\n         }\n     }"}, {"sha": "ad61c4e66d28c484b65c23aa0102d301c3b673f4", "filename": "src/test/ui/parser/increment-autofix.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67a9adbb541f7c62e993d05ff3687a8695d5d349/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/67a9adbb541f7c62e993d05ff3687a8695d5d349/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.fixed?ref=67a9adbb541f7c62e993d05ff3687a8695d5d349", "previous_filename": "src/test/ui/parser/increment.fixed"}, {"sha": "f31031fed3aff368f3eac3d5bacd218c9709f9ab", "filename": "src/test/ui/parser/increment-autofix.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/67a9adbb541f7c62e993d05ff3687a8695d5d349/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a9adbb541f7c62e993d05ff3687a8695d5d349/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.rs?ref=67a9adbb541f7c62e993d05ff3687a8695d5d349", "previous_filename": "src/test/ui/parser/increment.rs"}, {"sha": "46ab48f36843b2a876078fbb72c05de47020a392", "filename": "src/test/ui/parser/increment-autofix.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67a9adbb541f7c62e993d05ff3687a8695d5d349/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67a9adbb541f7c62e993d05ff3687a8695d5d349/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr?ref=67a9adbb541f7c62e993d05ff3687a8695d5d349", "patch": "@@ -1,5 +1,5 @@\n error: Rust has no postfix increment operator\n-  --> $DIR/increment.rs:5:6\n+  --> $DIR/increment-autofix.rs:5:6\n    |\n LL |     i++;\n    |      ^^ not a valid postfix operator\n@@ -10,7 +10,7 @@ LL |     { let tmp = i; i += 1; tmp };\n    |     +++++++++++  ~~~~~~~~~~~~~~~\n \n error: Rust has no postfix increment operator\n-  --> $DIR/increment.rs:11:12\n+  --> $DIR/increment-autofix.rs:11:12\n    |\n LL |     while i++ < 5 {\n    |            ^^ not a valid postfix operator\n@@ -21,7 +21,7 @@ LL |     while { let tmp = i; i += 1; tmp } < 5 {\n    |           +++++++++++  ~~~~~~~~~~~~~~~\n \n error: Rust has no prefix increment operator\n-  --> $DIR/increment.rs:19:5\n+  --> $DIR/increment-autofix.rs:19:5\n    |\n LL |     ++i;\n    |     ^^ not a valid prefix operator\n@@ -33,7 +33,7 @@ LL +     i += 1;\n    | \n \n error: Rust has no prefix increment operator\n-  --> $DIR/increment.rs:25:11\n+  --> $DIR/increment-autofix.rs:25:11\n    |\n LL |     while ++i < 5 {\n    |           ^^ not a valid prefix operator", "previous_filename": "src/test/ui/parser/increment.stderr"}, {"sha": "d0efe952982345c15bac8e7262ab3a4e1ea28b7c", "filename": "src/test/ui/parser/increment-notfixed.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/67a9adbb541f7c62e993d05ff3687a8695d5d349/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67a9adbb541f7c62e993d05ff3687a8695d5d349/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.rs?ref=67a9adbb541f7c62e993d05ff3687a8695d5d349", "patch": "@@ -0,0 +1,26 @@\n+struct Foo {\n+    bar: Bar,\n+}\n+\n+struct Bar {\n+    qux: i32,\n+}\n+\n+fn post_field() {\n+    let foo = Foo { bar: Bar { qux: 0 } };\n+    foo.bar.qux++;\n+    //~^ ERROR Rust has no postfix increment operator\n+    println!(\"{}\", foo.bar.qux);\n+}\n+\n+fn pre_field() {\n+    let foo = Foo { bar: Bar { qux: 0 } };\n+    ++foo.bar.qux;\n+    //~^ ERROR Rust has no prefix increment operator\n+    println!(\"{}\", foo.bar.qux);\n+}\n+\n+fn main() {\n+    post_field();\n+    pre_field();\n+}"}, {"sha": "cf60075d00cde702b6101d5360b710c674219450", "filename": "src/test/ui/parser/increment-notfixed.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/67a9adbb541f7c62e993d05ff3687a8695d5d349/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67a9adbb541f7c62e993d05ff3687a8695d5d349/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr?ref=67a9adbb541f7c62e993d05ff3687a8695d5d349", "patch": "@@ -0,0 +1,18 @@\n+error: Rust has no postfix increment operator\n+  --> $DIR/increment-notfixed.rs:11:16\n+   |\n+LL |     foo.bar.qux++;\n+   |                ^^ not a valid postfix operator\n+   |\n+   = help: use `+= 1` instead\n+\n+error: Rust has no prefix increment operator\n+  --> $DIR/increment-notfixed.rs:18:5\n+   |\n+LL |     ++foo.bar.qux;\n+   |     ^^ not a valid prefix operator\n+   |\n+   = help: use `+= 1` instead\n+\n+error: aborting due to 2 previous errors\n+"}]}