{"sha": "ff996853feeb2f87608c49988553ff4e85f1c319", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOTk2ODUzZmVlYjJmODc2MDhjNDk5ODg1NTNmZjRlODVmMWMzMTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-22T03:48:46Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:47:55Z"}, "message": "Fix more tests with `GeneratorState` rename", "tree": {"sha": "11d7aca9719bc5b5f33f1b10afa36b3d6ab6719a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11d7aca9719bc5b5f33f1b10afa36b3d6ab6719a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff996853feeb2f87608c49988553ff4e85f1c319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff996853feeb2f87608c49988553ff4e85f1c319", "html_url": "https://github.com/rust-lang/rust/commit/ff996853feeb2f87608c49988553ff4e85f1c319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff996853feeb2f87608c49988553ff4e85f1c319/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be0a9b89583d712557268e9d813e5fac87846561", "url": "https://api.github.com/repos/rust-lang/rust/commits/be0a9b89583d712557268e9d813e5fac87846561", "html_url": "https://github.com/rust-lang/rust/commit/be0a9b89583d712557268e9d813e5fac87846561"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "798c182bc6e3870090f677de808fc1620cc92131", "filename": "src/libcore/ops/generator.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff996853feeb2f87608c49988553ff4e85f1c319/src%2Flibcore%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff996853feeb2f87608c49988553ff4e85f1c319/src%2Flibcore%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fgenerator.rs?ref=ff996853feeb2f87608c49988553ff4e85f1c319", "patch": "@@ -48,7 +48,7 @@ pub enum GeneratorState<Y, R> {\n /// ```rust\n /// #![feature(generators, generator_trait)]\n ///\n-/// use std::ops::{Generator, State};\n+/// use std::ops::{Generator, GeneratorState};\n ///\n /// fn main() {\n ///     let mut generator = || {\n@@ -57,11 +57,11 @@ pub enum GeneratorState<Y, R> {\n ///     };\n ///\n ///     match generator.resume() {\n-///         State::Yielded(1) => {}\n+///         GeneratorState::Yielded(1) => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n ///     match generator.resume() {\n-///         State::Complete(\"foo\") => {}\n+///         GeneratorState::Complete(\"foo\") => {}\n ///         _ => panic!(\"unexpected return from resume\"),\n ///     }\n /// }\n@@ -100,11 +100,11 @@ pub trait Generator {\n     ///\n     /// # Return value\n     ///\n-    /// The `State` enum returned from this function indicates what state the\n-    /// generator is in upon returning. If the `Yielded` variant is returned\n-    /// then the generator has reached a suspension point and a value has been\n-    /// yielded out. Generators in this state are available for resumption at a\n-    /// later point.\n+    /// The `GeneratorState` enum returned from this function indicates what\n+    /// state the generator is in upon returning. If the `Yielded` variant is\n+    /// returned then the generator has reached a suspension point and a value\n+    /// has been yielded out. Generators in this state are available for\n+    /// resumption at a later point.\n     ///\n     /// If `Complete` is returned then the generator has completely finished\n     /// with the value provided. It is invalid for the generator to be resumed"}, {"sha": "87edbb22baae1661d998d2891d6ab9c6ebf2a725", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff996853feeb2f87608c49988553ff4e85f1c319/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff996853feeb2f87608c49988553ff4e85f1c319/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.rs?ref=ff996853feeb2f87608c49988553ff4e85f1c319", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(generators, generator_trait)]\n \n-use std::ops::{State, Generator};\n+use std::ops::{GeneratorState, Generator};\n use std::cell::Cell;\n \n fn foo(x: &i32) {"}, {"sha": "bc53448cb08e6d2ba02588aa1ebf91275bb599d2", "filename": "src/test/ui/generator/yield-while-iterating.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff996853feeb2f87608c49988553ff4e85f1c319/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff996853feeb2f87608c49988553ff4e85f1c319/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.rs?ref=ff996853feeb2f87608c49988553ff4e85f1c319", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(generators, generator_trait)]\n \n-use std::ops::{State, Generator};\n+use std::ops::{GeneratorState, Generator};\n use std::cell::Cell;\n \n fn yield_during_iter_owned_data(x: Vec<i32>) {"}, {"sha": "d21c86e88681e156a293fcffbcbdb00db9b119a2", "filename": "src/test/ui/generator/yield-while-local-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff996853feeb2f87608c49988553ff4e85f1c319/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff996853feeb2f87608c49988553ff4e85f1c319/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.rs?ref=ff996853feeb2f87608c49988553ff4e85f1c319", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(generators, generator_trait)]\n \n-use std::ops::{State, Generator};\n+use std::ops::{GeneratorState, Generator};\n use std::cell::Cell;\n \n fn borrow_local_inline() {"}, {"sha": "b9c963ae740777a55a2cc5163da6dec4edecb1b9", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff996853feeb2f87608c49988553ff4e85f1c319/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff996853feeb2f87608c49988553ff4e85f1c319/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.rs?ref=ff996853feeb2f87608c49988553ff4e85f1c319", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(generators, generator_trait)]\n \n-use std::ops::{State, Generator};\n+use std::ops::{GeneratorState, Generator};\n use std::cell::Cell;\n \n fn reborrow_shared_ref(x: &i32) {"}]}