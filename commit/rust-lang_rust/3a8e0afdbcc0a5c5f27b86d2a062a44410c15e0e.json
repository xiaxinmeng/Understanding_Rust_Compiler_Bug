{"sha": "3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOGUwYWZkYmNjMGE1YzVmMjdiODZkMmEwNjJhNDQ0MTBjMTVlMGU=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-08T12:39:44Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2018-10-08T12:39:46Z"}, "message": "Reattach all grandchildren when constructing specialization graph.\n\nThis commit fixes the issue #50452.", "tree": {"sha": "2814331bad6c3835490ef8a3c19d86cae5e8cab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2814331bad6c3835490ef8a3c19d86cae5e8cab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e", "html_url": "https://github.com/rust-lang/rust/commit/3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96734ae0d4e376c3abd03b4b16f6dfc00f886ea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/96734ae0d4e376c3abd03b4b16f6dfc00f886ea1", "html_url": "https://github.com/rust-lang/rust/commit/96734ae0d4e376c3abd03b4b16f6dfc00f886ea1"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "24e8f8ef75080c08e3e95ff900b3f43a3c32a63b", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e", "patch": "@@ -73,8 +73,8 @@ enum Inserted {\n     /// The impl was inserted as a new child in this group of children.\n     BecameNewSibling(Option<OverlapError>),\n \n-    /// The impl should replace an existing impl X, because the impl specializes X.\n-    ReplaceChild(DefId),\n+    /// The impl should replace existing impls [X1, ..], because the impl specializes X1, X2, etc.\n+    ReplaceChildren(Vec<DefId>),\n \n     /// The impl is a specialization of an existing child.\n     ShouldRecurseOn(DefId),\n@@ -124,6 +124,7 @@ impl<'a, 'gcx, 'tcx> Children {\n               -> Result<Inserted, OverlapError>\n     {\n         let mut last_lint = None;\n+        let mut replace_children = Vec::new();\n \n         debug!(\n             \"insert(impl_def_id={:?}, simplified_self={:?})\",\n@@ -194,7 +195,7 @@ impl<'a, 'gcx, 'tcx> Children {\n                 debug!(\"placing as parent of TraitRef {:?}\",\n                        tcx.impl_trait_ref(possible_sibling).unwrap());\n \n-                return Ok(Inserted::ReplaceChild(possible_sibling));\n+                replace_children.push(possible_sibling);\n             } else {\n                 if !tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling) {\n                     traits::overlapping_impls(\n@@ -211,6 +212,10 @@ impl<'a, 'gcx, 'tcx> Children {\n             }\n         }\n \n+        if !replace_children.is_empty() {\n+            return Ok(Inserted::ReplaceChildren(replace_children));\n+        }\n+\n         // no overlap with any potential siblings, so add as a new sibling\n         debug!(\"placing as new sibling\");\n         self.insert_blindly(tcx, impl_def_id);\n@@ -282,7 +287,7 @@ impl<'a, 'gcx, 'tcx> Graph {\n                     last_lint = opt_lint;\n                     break;\n                 }\n-                ReplaceChild(grand_child_to_be) => {\n+                ReplaceChildren(grand_children_to_be) => {\n                     // We currently have\n                     //\n                     //     P\n@@ -302,17 +307,23 @@ impl<'a, 'gcx, 'tcx> Graph {\n                         let siblings = self.children\n                             .get_mut(&parent)\n                             .unwrap();\n-                        siblings.remove_existing(tcx, grand_child_to_be);\n+                        for &grand_child_to_be in &grand_children_to_be {\n+                            siblings.remove_existing(tcx, grand_child_to_be);\n+                        }\n                         siblings.insert_blindly(tcx, impl_def_id);\n                     }\n \n                     // Set G's parent to N and N's parent to P\n-                    self.parent.insert(grand_child_to_be, impl_def_id);\n+                    for &grand_child_to_be in &grand_children_to_be {\n+                        self.parent.insert(grand_child_to_be, impl_def_id);\n+                    }\n                     self.parent.insert(impl_def_id, parent);\n \n                     // Add G as N's child.\n-                    self.children.entry(impl_def_id).or_default()\n-                        .insert_blindly(tcx, grand_child_to_be);\n+                    for &grand_child_to_be in &grand_children_to_be {\n+                        self.children.entry(impl_def_id).or_default()\n+                            .insert_blindly(tcx, grand_child_to_be);\n+                    }\n                     break;\n                 }\n                 ShouldRecurseOn(new_parent) => {"}, {"sha": "4a8d01d0de2f5d886033203aafdda28dedd3bd9b", "filename": "src/test/compile-fail/specialization/issue-50452.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-50452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-50452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-50452.rs?ref=3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-fail\n+\n+#![feature(specialization)]\n+\n+pub trait Foo {\n+    fn foo();\n+}\n+\n+impl Foo for i32 {}\n+impl Foo for i64 {\n+    fn foo() {}\n+    //~^ERROR `foo` specializes an item from a parent `impl`\n+}\n+impl<T> Foo for T {\n+    fn foo() {}\n+}\n+\n+fn main() {\n+    i32::foo();\n+    i64::foo();\n+    u8::foo();\n+}"}, {"sha": "6dec03f77819bbfdfa6d9a3e76f851b672543676", "filename": "src/test/run-pass/specialization/issue-50452.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e/src%2Ftest%2Frun-pass%2Fspecialization%2Fissue-50452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e/src%2Ftest%2Frun-pass%2Fspecialization%2Fissue-50452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fissue-50452.rs?ref=3a8e0afdbcc0a5c5f27b86d2a062a44410c15e0e", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+#![feature(specialization)]\n+\n+pub trait Foo {\n+    fn foo();\n+}\n+\n+impl Foo for i32 {}\n+impl Foo for i64 {}\n+impl<T> Foo for T {\n+    fn foo() {}\n+}\n+\n+fn main() {\n+    i32::foo();\n+    i64::foo();\n+    u8::foo();\n+}"}]}