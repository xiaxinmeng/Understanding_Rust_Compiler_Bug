{"sha": "317daf77de8e3cc065982de7975647b4fb8fcc85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxN2RhZjc3ZGU4ZTNjYzA2NTk4MmRlNzk3NTY0N2I0ZmI4ZmNjODU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-04-29T01:58:40Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-05-15T10:07:06Z"}, "message": "Do some simple constant propagation in the ConstProp pass", "tree": {"sha": "a326082f8c92a27b4f92314fbbff32fcb425c758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a326082f8c92a27b4f92314fbbff32fcb425c758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/317daf77de8e3cc065982de7975647b4fb8fcc85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/317daf77de8e3cc065982de7975647b4fb8fcc85", "html_url": "https://github.com/rust-lang/rust/commit/317daf77de8e3cc065982de7975647b4fb8fcc85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/317daf77de8e3cc065982de7975647b4fb8fcc85/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f64ed091570f222d9a8eeb210dd6d1676ff38ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f64ed091570f222d9a8eeb210dd6d1676ff38ceb", "html_url": "https://github.com/rust-lang/rust/commit/f64ed091570f222d9a8eeb210dd6d1676ff38ceb"}], "stats": {"total": 71, "additions": 62, "deletions": 9}, "files": [{"sha": "a6e01918529d9e3a9dd633e41fa180b0387e5686", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/317daf77de8e3cc065982de7975647b4fb8fcc85/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317daf77de8e3cc065982de7975647b4fb8fcc85/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=317daf77de8e3cc065982de7975647b4fb8fcc85", "patch": "@@ -3,23 +3,25 @@\n \n use rustc::hir::def::DefKind;\n use rustc::mir::{\n-    Constant, Location, Place, PlaceBase, Mir, Operand, Rvalue, Local,\n+    AggregateKind, Constant, Location, Place, PlaceBase, Mir, Operand, Rvalue, Local,\n     NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp, ProjectionElem,\n     SourceScope, SourceScopeLocalData, LocalDecl, Promoted,\n };\n-use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUseContext};\n+use rustc::mir::visit::{\n+    Visitor, PlaceContext, MutatingUseContext, MutVisitor, NonMutatingUseContext,\n+};\n use rustc::mir::interpret::{InterpError, Scalar, GlobalId, EvalResult};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n-use syntax::source_map::DUMMY_SP;\n+use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::layout::{\n     LayoutOf, TyLayout, LayoutError,\n     HasTyCtxt, TargetDataLayout, HasDataLayout,\n };\n \n-use crate::interpret::{InterpretCx, ScalarMaybeUndef, Immediate, OpTy, ImmTy, MemoryKind};\n+use crate::interpret::{self, InterpretCx, ScalarMaybeUndef, Immediate, OpTy, ImmTy, MemoryKind};\n use crate::const_eval::{\n     CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_eval_cx,\n };\n@@ -497,6 +499,53 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             },\n         }\n     }\n+\n+    fn operand_from_scalar(&self, scalar: Scalar, ty: Ty<'tcx>, span: Span) -> Operand<'tcx> {\n+        Operand::Constant(Box::new(\n+            Constant {\n+                span,\n+                ty,\n+                user_ty: None,\n+                literal: self.tcx.mk_const(ty::Const::from_scalar(\n+                    scalar,\n+                    ty,\n+                ))\n+            }\n+        ))\n+    }\n+\n+    fn replace_with_const(&self, rval: &mut Rvalue<'tcx>, value: Const<'tcx>, span: Span) {\n+        self.ecx.validate_operand(\n+            value,\n+            vec![],\n+            None,\n+            true,\n+        ).expect(\"value should already be a valid const\");\n+\n+        if let interpret::Operand::Immediate(im) = *value {\n+            match im {\n+                interpret::Immediate::Scalar(ScalarMaybeUndef::Scalar(scalar)) => {\n+                    *rval = Rvalue::Use(self.operand_from_scalar(scalar, value.layout.ty, span));\n+                },\n+                Immediate::ScalarPair(\n+                    ScalarMaybeUndef::Scalar(one),\n+                    ScalarMaybeUndef::Scalar(two)\n+                ) => {\n+                    let ty = &value.layout.ty.sty;\n+                    if let ty::Tuple(substs) = ty {\n+                        *rval = Rvalue::Aggregate(\n+                            Box::new(AggregateKind::Tuple),\n+                            vec![\n+                                self.operand_from_scalar(one, substs[0].expect_ty(), span),\n+                                self.operand_from_scalar(two, substs[1].expect_ty(), span),\n+                            ],\n+                        );\n+                    }\n+                },\n+                _ => { }\n+            }\n+        }\n+    }\n }\n \n fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -560,10 +609,10 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n     }\n }\n \n-impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n+impl<'b, 'a, 'tcx> MutVisitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n     fn visit_constant(\n         &mut self,\n-        constant: &Constant<'tcx>,\n+        constant: &mut Constant<'tcx>,\n         location: Location,\n     ) {\n         trace!(\"visit_constant: {:?}\", constant);\n@@ -573,11 +622,11 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n \n     fn visit_statement(\n         &mut self,\n-        statement: &Statement<'tcx>,\n+        statement: &mut Statement<'tcx>,\n         location: Location,\n     ) {\n         trace!(\"visit_statement: {:?}\", statement);\n-        if let StatementKind::Assign(ref place, ref rval) = statement.kind {\n+        if let StatementKind::Assign(ref place, ref mut rval) = statement.kind {\n             let place_ty: Ty<'tcx> = place\n                 .ty(&self.local_decls, self.tcx)\n                 .ty;\n@@ -589,6 +638,10 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                             trace!(\"storing {:?} to {:?}\", value, local);\n                             assert!(self.places[local].is_none());\n                             self.places[local] = Some(value);\n+\n+                            if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 3 {\n+                                self.replace_with_const(rval, value, statement.source_info.span);\n+                            }\n                         }\n                     }\n                 }\n@@ -599,7 +652,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n \n     fn visit_terminator(\n         &mut self,\n-        terminator: &Terminator<'tcx>,\n+        terminator: &mut Terminator<'tcx>,\n         location: Location,\n     ) {\n         self.super_terminator(terminator, location);"}]}