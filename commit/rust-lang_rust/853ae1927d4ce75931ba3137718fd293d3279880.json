{"sha": "853ae1927d4ce75931ba3137718fd293d3279880", "node_id": "C_kwDOAAsO6NoAKDg1M2FlMTkyN2Q0Y2U3NTkzMWJhMzEzNzcxOGZkMjkzZDMyNzk4ODA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-14T16:24:40Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-14T16:40:24Z"}, "message": "Slim down GenericArgs by one usize", "tree": {"sha": "118d35a7acf41af39bc1b77e3beffe97895044fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/118d35a7acf41af39bc1b77e3beffe97895044fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/853ae1927d4ce75931ba3137718fd293d3279880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/853ae1927d4ce75931ba3137718fd293d3279880", "html_url": "https://github.com/rust-lang/rust/commit/853ae1927d4ce75931ba3137718fd293d3279880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/853ae1927d4ce75931ba3137718fd293d3279880/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c2aef650ae115d0fc504d0511a4f4809d625050", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2aef650ae115d0fc504d0511a4f4809d625050", "html_url": "https://github.com/rust-lang/rust/commit/4c2aef650ae115d0fc504d0511a4f4809d625050"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "d4d3c5ef19a60d84d89e7eea8fbc39c1a8a7ca29", "filename": "crates/hir-def/src/item_tree/lower.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs?ref=853ae1927d4ce75931ba3137718fd293d3279880", "patch": "@@ -659,15 +659,16 @@ fn desugar_future_path(orig: TypeRef) -> Path {\n     let path = path![core::future::Future];\n     let mut generic_args: Vec<_> =\n         std::iter::repeat(None).take(path.segments().len() - 1).collect();\n-    let mut last = GenericArgs::empty();\n     let binding = AssociatedTypeBinding {\n         name: name![Output],\n         args: None,\n         type_ref: Some(orig),\n         bounds: Box::default(),\n     };\n-    last.bindings.push(binding);\n-    generic_args.push(Some(Interned::new(last)));\n+    generic_args.push(Some(Interned::new(GenericArgs {\n+        bindings: Box::new([binding]),\n+        ..GenericArgs::empty()\n+    })));\n \n     Path::from_known_path(path, generic_args)\n }"}, {"sha": "0ebc5c9562ae61459c43c74027a7b0501ae8f654", "filename": "crates/hir-def/src/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath.rs?ref=853ae1927d4ce75931ba3137718fd293d3279880", "patch": "@@ -57,7 +57,7 @@ pub struct GenericArgs {\n     /// is left out.\n     pub has_self_type: bool,\n     /// Associated type bindings like in `Iterator<Item = T>`.\n-    pub bindings: Vec<AssociatedTypeBinding>,\n+    pub bindings: Box<[AssociatedTypeBinding]>,\n     /// Whether these generic args were desugared from `Trait(Arg) -> Output`\n     /// parenthesis notation typically used for the `Fn` traits.\n     pub desugared_from_fn: bool,\n@@ -214,7 +214,7 @@ impl GenericArgs {\n         GenericArgs {\n             args: Vec::new(),\n             has_self_type: false,\n-            bindings: Vec::new(),\n+            bindings: Box::default(),\n             desugared_from_fn: false,\n         }\n     }"}, {"sha": "e82f6b786d037e3d42f6db00d7b150147db1a0a7", "filename": "crates/hir-def/src/path/lower.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs?ref=853ae1927d4ce75931ba3137718fd293d3279880", "patch": "@@ -208,7 +208,12 @@ pub(super) fn lower_generic_args(\n     if args.is_empty() && bindings.is_empty() {\n         return None;\n     }\n-    Some(GenericArgs { args, has_self_type: false, bindings, desugared_from_fn: false })\n+    Some(GenericArgs {\n+        args,\n+        has_self_type: false,\n+        bindings: bindings.into_boxed_slice(),\n+        desugared_from_fn: false,\n+    })\n }\n \n /// Collect `GenericArgs` from the parts of a fn-like path, i.e. `Fn(X, Y)\n@@ -219,7 +224,6 @@ fn lower_generic_args_from_fn_path(\n     ret_type: Option<ast::RetType>,\n ) -> Option<GenericArgs> {\n     let mut args = Vec::new();\n-    let mut bindings = Vec::new();\n     let params = params?;\n     let mut param_types = Vec::new();\n     for param in params.params() {\n@@ -228,23 +232,23 @@ fn lower_generic_args_from_fn_path(\n     }\n     let arg = GenericArg::Type(TypeRef::Tuple(param_types));\n     args.push(arg);\n-    if let Some(ret_type) = ret_type {\n+    let bindings = if let Some(ret_type) = ret_type {\n         let type_ref = TypeRef::from_ast_opt(ctx, ret_type.ty());\n-        bindings.push(AssociatedTypeBinding {\n+        Box::new([AssociatedTypeBinding {\n             name: name![Output],\n             args: None,\n             type_ref: Some(type_ref),\n             bounds: Box::default(),\n-        });\n+        }])\n     } else {\n         // -> ()\n         let type_ref = TypeRef::Tuple(Vec::new());\n-        bindings.push(AssociatedTypeBinding {\n+        Box::new([AssociatedTypeBinding {\n             name: name![Output],\n             args: None,\n             type_ref: Some(type_ref),\n             bounds: Box::default(),\n-        });\n-    }\n+        }])\n+    };\n     Some(GenericArgs { args, has_self_type: false, bindings, desugared_from_fn: true })\n }"}, {"sha": "2d45c8c8da1a5ba56db35223a4a59abf06bf0d6f", "filename": "crates/hir-def/src/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-def%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-def%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpretty.rs?ref=853ae1927d4ce75931ba3137718fd293d3279880", "patch": "@@ -71,7 +71,7 @@ pub(crate) fn print_generic_args(generics: &GenericArgs, buf: &mut dyn Write) ->\n         first = false;\n         print_generic_arg(arg, buf)?;\n     }\n-    for binding in &generics.bindings {\n+    for binding in generics.bindings.iter() {\n         if !first {\n             write!(buf, \", \")?;\n         }"}, {"sha": "7f3c3154807099e980c26e8274f370770a9ecf17", "filename": "crates/hir-def/src/type_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs?ref=853ae1927d4ce75931ba3137718fd293d3279880", "patch": "@@ -301,7 +301,7 @@ impl TypeRef {\n                             | crate::path::GenericArg::Lifetime(_) => {}\n                         }\n                     }\n-                    for binding in &args_and_bindings.bindings {\n+                    for binding in args_and_bindings.bindings.iter() {\n                         if let Some(type_ref) = &binding.type_ref {\n                             go(type_ref, f);\n                         }"}, {"sha": "3390c7b1e5617f61d787361b5f2b2765c4e2ee63", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=853ae1927d4ce75931ba3137718fd293d3279880", "patch": "@@ -1431,7 +1431,7 @@ impl HirDisplay for Path {\n                     }\n                     arg.hir_fmt(f)?;\n                 }\n-                for binding in &generic_args.bindings {\n+                for binding in generic_args.bindings.iter() {\n                     if first {\n                         first = false;\n                     } else {"}, {"sha": "299646737221d9cdd97d45d636b51dda9700f4c5", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853ae1927d4ce75931ba3137718fd293d3279880/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=853ae1927d4ce75931ba3137718fd293d3279880", "patch": "@@ -1025,7 +1025,7 @@ impl<'a> TyLoweringContext<'a> {\n         last_segment\n             .into_iter()\n             .filter_map(|segment| segment.args_and_bindings)\n-            .flat_map(|args_and_bindings| &args_and_bindings.bindings)\n+            .flat_map(|args_and_bindings| args_and_bindings.bindings.iter())\n             .flat_map(move |binding| {\n                 let found = associated_type_by_name_including_super_traits(\n                     self.db,"}]}