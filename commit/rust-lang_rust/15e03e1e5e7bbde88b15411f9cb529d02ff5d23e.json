{"sha": "15e03e1e5e7bbde88b15411f9cb529d02ff5d23e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZTAzZTFlNWU3YmJkZTg4YjE1NDExZjljYjUyOWQwMmZmNWQyM2U=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-11-22T03:38:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-29T20:09:11Z"}, "message": "Forbid attrs on macros, since we don't handle them properly yet.", "tree": {"sha": "4f89df9dc67c07379682e6f03025aff1e85266c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f89df9dc67c07379682e6f03025aff1e85266c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e", "html_url": "https://github.com/rust-lang/rust/commit/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6174a30d7c136c0fd163d512dfac840741a39f7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6174a30d7c136c0fd163d512dfac840741a39f7c", "html_url": "https://github.com/rust-lang/rust/commit/6174a30d7c136c0fd163d512dfac840741a39f7c"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "52e001f8d5ccefcf323471c0b612ae8b5fa1bb13", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=15e03e1e5e7bbde88b15411f9cb529d02ff5d23e", "patch": "@@ -2197,7 +2197,7 @@ impl Parser {\n         fn check_expected_item(p: Parser, current_attrs: ~[attribute]) {\n             // If we have attributes then we should have an item\n             if vec::is_not_empty(current_attrs) {\n-                p.fatal(~\"expected item\");\n+                p.fatal(~\"expected item after attrs\");\n             }\n         }\n \n@@ -2210,6 +2210,9 @@ impl Parser {\n         } else if is_ident(self.token)\n             && !self.is_any_keyword(copy self.token)\n             && self.look_ahead(1) == token::NOT {\n+\n+            check_expected_item(self, first_item_attrs);\n+\n             // Potential trouble: if we allow macros with paths instead of\n             // idents, we'd need to look ahead past the whole path here...\n             let pth = self.parse_value_path();\n@@ -2381,7 +2384,7 @@ impl Parser {\n                             }\n                         }\n \n-                        stmt_mac(m, false) => {\n+                        stmt_mac(m, _) => {\n                             // Statement macro; might be an expr\n                             match self.token {\n                                 token::SEMI => {\n@@ -3590,6 +3593,10 @@ impl Parser {\n                 && (is_plain_ident(self.look_ahead(2))\n                     || self.look_ahead(2) == token::LPAREN\n                     || self.look_ahead(2) == token::LBRACE) {\n+            if attrs.len() > 0 {\n+                self.fatal(~\"attrs on macros are not yet supported\");\n+            }\n+\n             // item macro.\n             let pth = self.parse_path_without_tps();\n             self.expect(token::NOT);"}, {"sha": "c38895f39f1efa51f3e5a82e6a4e4b10453f55bf", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=15e03e1e5e7bbde88b15411f9cb529d02ff5d23e", "patch": "@@ -344,7 +344,7 @@ impl ident_interner {\n     }\n }\n \n-/** Key for thread-local data for sneaking interner information to the\n+/* Key for thread-local data for sneaking interner information to the\n  * serializer/deserializer. It sounds like a hack because it is one.\n  * Bonus ultra-hack: functions as keys don't work across crates,\n  * so we have to use a unique number. See taskgroup_key! in task.rs"}, {"sha": "e474b63be857a36ac5ec5b17acc37cba3f700d3d", "filename": "src/test/compile-fail/attr-before-ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-ext.rs?ref=15e03e1e5e7bbde88b15411f9cb529d02ff5d23e", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     #[attr]\n-    debug!(\"hi\"); //~ ERROR expected item\n+    debug!(\"hi\"); //~ ERROR expected item after attrs\n }\n\\ No newline at end of file"}, {"sha": "948a7bf17925ddc6b9928d6ca99a2aedb7443e75", "filename": "src/test/compile-fail/ext-after-attrib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e/src%2Ftest%2Fcompile-fail%2Fext-after-attrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e03e1e5e7bbde88b15411f9cb529d02ff5d23e/src%2Ftest%2Fcompile-fail%2Fext-after-attrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fext-after-attrib.rs?ref=15e03e1e5e7bbde88b15411f9cb529d02ff5d23e", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected item but found `fmt`\n+// error-pattern:attrs on macros are not yet supported\n \n // Don't know how to deal with a syntax extension appearing after an\n // item attribute. Probably could use a better error message."}]}