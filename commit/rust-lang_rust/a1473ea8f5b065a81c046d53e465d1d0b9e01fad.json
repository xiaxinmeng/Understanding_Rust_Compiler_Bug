{"sha": "a1473ea8f5b065a81c046d53e465d1d0b9e01fad", "node_id": "C_kwDOAAsO6NoAKGExNDczZWE4ZjViMDY1YTgxYzA0NmQ1M2U0NjVkMWQwYjllMDFmYWQ", "commit": {"author": {"name": "Christian Legnitto", "email": "christian@legnitto.com", "date": "2022-07-02T02:05:15Z"}, "committer": {"name": "Christian Legnitto", "email": "christian@legnitto.com", "date": "2022-07-02T02:10:17Z"}, "message": "Support (stat/fstat/lstat)64 on macos\n\n\"In order to accommodate advanced capabilities of newer file systems,\n     the struct stat, struct statfs, and struct dirent data structures\n     were updated in Mac OSX 10.5.\"\n\n\"TRANSITIONAL DESCRIPTION (NOW DEPRECATED)\n     The fstat64, lstat64 and stat64 routines are equivalent to their\n     corresponding non-64-suffixed routine, when 64-bit inodes are in\n     effect.  They were added before there was support for the symbol\n     variants, and so are now deprecated.  Instead of using these, set\n     the _DARWIN_USE_64_BIT_INODE macro before including header files to\n     force 64-bit inode support.\n\n     The stat64 structure used by these deprecated routines is the same\n     as the stat structure when 64-bit inodes are in effect (see above).\"\n\n\"HISTORY\n     An lstat() function call appeared in 4.2BSD.  The stat64(),\n     fstat64(), and lstat64() system calls first appeared in Mac OS X\n     10.5 (Leopard) and are now deprecated in favor of the corresponding\n     symbol variants.  The fstatat() system call appeared in OS X 10.10\"", "tree": {"sha": "4305098ebe22f3f562ba4bf35b3d87d54138f57a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4305098ebe22f3f562ba4bf35b3d87d54138f57a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1473ea8f5b065a81c046d53e465d1d0b9e01fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1473ea8f5b065a81c046d53e465d1d0b9e01fad", "html_url": "https://github.com/rust-lang/rust/commit/a1473ea8f5b065a81c046d53e465d1d0b9e01fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1473ea8f5b065a81c046d53e465d1d0b9e01fad/comments", "author": {"login": "LegNeato", "id": 368904, "node_id": "MDQ6VXNlcjM2ODkwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/368904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegNeato", "html_url": "https://github.com/LegNeato", "followers_url": "https://api.github.com/users/LegNeato/followers", "following_url": "https://api.github.com/users/LegNeato/following{/other_user}", "gists_url": "https://api.github.com/users/LegNeato/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegNeato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegNeato/subscriptions", "organizations_url": "https://api.github.com/users/LegNeato/orgs", "repos_url": "https://api.github.com/users/LegNeato/repos", "events_url": "https://api.github.com/users/LegNeato/events{/privacy}", "received_events_url": "https://api.github.com/users/LegNeato/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LegNeato", "id": 368904, "node_id": "MDQ6VXNlcjM2ODkwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/368904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegNeato", "html_url": "https://github.com/LegNeato", "followers_url": "https://api.github.com/users/LegNeato/followers", "following_url": "https://api.github.com/users/LegNeato/following{/other_user}", "gists_url": "https://api.github.com/users/LegNeato/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegNeato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegNeato/subscriptions", "organizations_url": "https://api.github.com/users/LegNeato/orgs", "repos_url": "https://api.github.com/users/LegNeato/repos", "events_url": "https://api.github.com/users/LegNeato/events{/privacy}", "received_events_url": "https://api.github.com/users/LegNeato/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f50296309850e20f54732c51c0d9593e1529e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f50296309850e20f54732c51c0d9593e1529e7a", "html_url": "https://github.com/rust-lang/rust/commit/9f50296309850e20f54732c51c0d9593e1529e7a"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "5cd885db7099b90ceec35cd88407f59c13849d76", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1473ea8f5b065a81c046d53e465d1d0b9e01fad/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1473ea8f5b065a81c046d53e465d1d0b9e01fad/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=a1473ea8f5b065a81c046d53e465d1d0b9e01fad", "patch": "@@ -33,19 +33,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.close(result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"stat\" | \"stat$INODE64\" => {\n+            \"stat\" | \"stat64\" | \"stat$INODE64\" => {\n                 let [path, buf] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.macos_stat(path, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"lstat\" | \"lstat$INODE64\" => {\n+            \"lstat\" | \"lstat64\" | \"lstat$INODE64\" => {\n                 let [path, buf] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.macos_lstat(path, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"fstat\" | \"fstat$INODE64\" => {\n+            \"fstat\" | \"fstat64\" | \"fstat$INODE64\" => {\n                 let [fd, buf] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.macos_fstat(fd, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;"}]}