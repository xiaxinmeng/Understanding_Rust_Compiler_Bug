{"sha": "6792bd99febc646f22814b6759e31e622850f405", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OTJiZDk5ZmViYzY0NmYyMjgxNGI2NzU5ZTMxZTYyMjg1MGY0MDU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-10T18:00:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:34Z"}, "message": "Support unions in rustdoc", "tree": {"sha": "ef62d2ebe021001507bf7470c8d3c68f97367f7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef62d2ebe021001507bf7470c8d3c68f97367f7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6792bd99febc646f22814b6759e31e622850f405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6792bd99febc646f22814b6759e31e622850f405", "html_url": "https://github.com/rust-lang/rust/commit/6792bd99febc646f22814b6759e31e622850f405", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6792bd99febc646f22814b6759e31e622850f405/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "url": "https://api.github.com/repos/rust-lang/rust/commits/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00", "html_url": "https://github.com/rust-lang/rust/commit/641d8e9e4c12b3753cf4e2a9ac901ad08ea90e00"}], "stats": {"total": 212, "additions": 204, "deletions": 8}, "files": [{"sha": "4250979a24033c3df940c890e91aeec62f213e07", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -88,6 +88,11 @@ fn try_inline_def<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             ret.extend(build_impls(cx, tcx, did));\n             clean::StructItem(build_struct(cx, tcx, did))\n         }\n+        Def::Union(did) => {\n+            record_extern_fqn(cx, did, clean::TypeUnion);\n+            ret.extend(build_impls(cx, tcx, did));\n+            clean::UnionItem(build_union(cx, tcx, did))\n+        }\n         Def::TyAlias(did) => {\n             record_extern_fqn(cx, did, clean::TypeTypedef);\n             ret.extend(build_impls(cx, tcx, did));\n@@ -214,6 +219,20 @@ fn build_struct<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n+fn build_union<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          did: DefId) -> clean::Union {\n+    let t = tcx.lookup_item_type(did);\n+    let predicates = tcx.lookup_predicates(did);\n+    let variant = tcx.lookup_adt_def(did).struct_variant();\n+\n+    clean::Union {\n+        struct_type: doctree::Plain,\n+        generics: (&t.generics, &predicates, subst::TypeSpace).clean(cx),\n+        fields: variant.fields.clean(cx),\n+        fields_stripped: false,\n+    }\n+}\n+\n fn build_type<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         did: DefId) -> clean::ItemEnum {\n     let t = tcx.lookup_item_type(did);"}, {"sha": "f8ec5a55e7d4c895d5a20ad1ef6aa8a9b4139242", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -321,6 +321,7 @@ impl Item {\n     pub fn has_stripped_fields(&self) -> Option<bool> {\n         match self.inner {\n             StructItem(ref _struct) => Some(_struct.fields_stripped),\n+            UnionItem(ref union) => Some(union.fields_stripped),\n             VariantItem(Variant { kind: StructVariant(ref vstruct)} ) => {\n                 Some(vstruct.fields_stripped)\n             },\n@@ -351,6 +352,7 @@ pub enum ItemEnum {\n     ExternCrateItem(String, Option<String>),\n     ImportItem(Import),\n     StructItem(Struct),\n+    UnionItem(Union),\n     EnumItem(Enum),\n     FunctionItem(Function),\n     ModuleItem(Module),\n@@ -414,6 +416,7 @@ impl Clean<Item> for doctree::Module {\n         items.extend(self.extern_crates.iter().map(|x| x.clean(cx)));\n         items.extend(self.imports.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.structs.iter().map(|x| x.clean(cx)));\n+        items.extend(self.unions.iter().map(|x| x.clean(cx)));\n         items.extend(self.enums.iter().map(|x| x.clean(cx)));\n         items.extend(self.fns.iter().map(|x| x.clean(cx)));\n         items.extend(self.foreigns.iter().flat_map(|x| x.clean(cx)));\n@@ -1464,6 +1467,7 @@ pub enum TypeKind {\n     TypeConst,\n     TypeStatic,\n     TypeStruct,\n+    TypeUnion,\n     TypeTrait,\n     TypeVariant,\n     TypeTypedef,\n@@ -1801,12 +1805,13 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 decl: (cx.map.local_def_id(0), &fty.sig).clean(cx),\n                 abi: fty.abi,\n             }),\n-            ty::TyUnion(..) => unimplemented_unions!(),\n             ty::TyStruct(def, substs) |\n+            ty::TyUnion(def, substs) |\n             ty::TyEnum(def, substs) => {\n                 let did = def.did;\n                 let kind = match self.sty {\n                     ty::TyStruct(..) => TypeStruct,\n+                    ty::TyUnion(..) => TypeUnion,\n                     _ => TypeEnum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n@@ -1929,6 +1934,14 @@ pub struct Struct {\n     pub fields_stripped: bool,\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct Union {\n+    pub struct_type: doctree::StructType,\n+    pub generics: Generics,\n+    pub fields: Vec<Item>,\n+    pub fields_stripped: bool,\n+}\n+\n impl Clean<Item> for doctree::Struct {\n     fn clean(&self, cx: &DocContext) -> Item {\n         Item {\n@@ -1949,6 +1962,26 @@ impl Clean<Item> for doctree::Struct {\n     }\n }\n \n+impl Clean<Item> for doctree::Union {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        Item {\n+            name: Some(self.name.clean(cx)),\n+            attrs: self.attrs.clean(cx),\n+            source: self.whence.clean(cx),\n+            def_id: cx.map.local_def_id(self.id),\n+            visibility: self.vis.clean(cx),\n+            stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n+            inner: UnionItem(Union {\n+                struct_type: self.struct_type,\n+                generics: self.generics.clean(cx),\n+                fields: self.fields.clean(cx),\n+                fields_stripped: false,\n+            }),\n+        }\n+    }\n+}\n+\n /// This is a more limited form of the standard Struct, different in that\n /// it lacks the things most items have (name, id, parameterization). Found\n /// only as a variant in an enum.\n@@ -2748,6 +2781,7 @@ fn register_def(cx: &DocContext, def: Def) -> DefId {\n         Def::Enum(i) => (i, TypeEnum),\n         Def::Trait(i) => (i, TypeTrait),\n         Def::Struct(i) => (i, TypeStruct),\n+        Def::Union(i) => (i, TypeUnion),\n         Def::Mod(i) => (i, TypeModule),\n         Def::Static(i, _) => (i, TypeStatic),\n         Def::Variant(i, _) => (i, TypeEnum),"}, {"sha": "cc62fcfa0aa8bdccc1e0bde42e5d0b1dd31e3a30", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -30,6 +30,7 @@ pub struct Module {\n     pub extern_crates: Vec<ExternCrate>,\n     pub imports: Vec<Import>,\n     pub structs: Vec<Struct>,\n+    pub unions: Vec<Union>,\n     pub enums: Vec<Enum>,\n     pub fns: Vec<Function>,\n     pub mods: Vec<Module>,\n@@ -62,6 +63,7 @@ impl Module {\n             extern_crates: Vec::new(),\n             imports    : Vec::new(),\n             structs    : Vec::new(),\n+            unions     : Vec::new(),\n             enums      : Vec::new(),\n             fns        : Vec::new(),\n             mods       : Vec::new(),\n@@ -108,6 +110,19 @@ pub struct Struct {\n     pub whence: Span,\n }\n \n+pub struct Union {\n+    pub vis: hir::Visibility,\n+    pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n+    pub id: NodeId,\n+    pub struct_type: StructType,\n+    pub name: Name,\n+    pub generics: hir::Generics,\n+    pub attrs: hir::HirVec<ast::Attribute>,\n+    pub fields: hir::HirVec<hir::StructField>,\n+    pub whence: Span,\n+}\n+\n pub struct Enum {\n     pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,"}, {"sha": "8d6ab221c4fcedc3952adb208b9e3faaff08daf6", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -49,6 +49,13 @@ pub trait DocFolder : Sized {\n                                      i.fields.iter().any(|f| f.is_stripped());\n                 StructItem(i)\n             },\n+            UnionItem(mut i) => {\n+                let num_fields = i.fields.len();\n+                i.fields = i.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n+                i.fields_stripped |= num_fields != i.fields.len() ||\n+                                     i.fields.iter().any(|f| f.is_stripped());\n+                UnionItem(i)\n+            },\n             EnumItem(mut i) => {\n                 let num_variants = i.variants.len();\n                 i.variants = i.variants.into_iter().filter_map(|x| self.fold_item(x)).collect();"}, {"sha": "9ce3c79e2f19b1e1b93cad304225cc39a851302a", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -40,6 +40,7 @@ pub enum ItemType {\n     AssociatedType  = 16,\n     Constant        = 17,\n     AssociatedConst = 18,\n+    Union           = 19,\n }\n \n \n@@ -62,6 +63,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::ExternCrateItem(..)     => ItemType::ExternCrate,\n             clean::ImportItem(..)          => ItemType::Import,\n             clean::StructItem(..)          => ItemType::Struct,\n+            clean::UnionItem(..)           => ItemType::Union,\n             clean::EnumItem(..)            => ItemType::Enum,\n             clean::FunctionItem(..)        => ItemType::Function,\n             clean::TypedefItem(..)         => ItemType::Typedef,\n@@ -89,6 +91,7 @@ impl From<clean::TypeKind> for ItemType {\n     fn from(kind: clean::TypeKind) -> ItemType {\n         match kind {\n             clean::TypeStruct   => ItemType::Struct,\n+            clean::TypeUnion    => ItemType::Union,\n             clean::TypeEnum     => ItemType::Enum,\n             clean::TypeFunction => ItemType::Function,\n             clean::TypeTrait    => ItemType::Trait,\n@@ -108,6 +111,7 @@ impl ItemType {\n             ItemType::ExternCrate     => \"externcrate\",\n             ItemType::Import          => \"import\",\n             ItemType::Struct          => \"struct\",\n+            ItemType::Union           => \"union\",\n             ItemType::Enum            => \"enum\",\n             ItemType::Function        => \"fn\",\n             ItemType::Typedef         => \"type\","}, {"sha": "c1bb9d9f633bc617c92136bdd0f857c26a8d582e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 78, "deletions": 3, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -1053,6 +1053,7 @@ impl DocFolder for Cache {\n                             // information if present.\n                             Some(&(ref fqp, ItemType::Trait)) |\n                             Some(&(ref fqp, ItemType::Struct)) |\n+                            Some(&(ref fqp, ItemType::Union)) |\n                             Some(&(ref fqp, ItemType::Enum)) =>\n                                 Some(&fqp[..fqp.len() - 1]),\n                             Some(..) => Some(&*self.stack),\n@@ -1106,7 +1107,8 @@ impl DocFolder for Cache {\n             clean::TypedefItem(..) | clean::TraitItem(..) |\n             clean::FunctionItem(..) | clean::ModuleItem(..) |\n             clean::ForeignFunctionItem(..) | clean::ForeignStaticItem(..) |\n-            clean::ConstantItem(..) | clean::StaticItem(..)\n+            clean::ConstantItem(..) | clean::StaticItem(..) |\n+            clean::UnionItem(..)\n             if !self.stripped_mod => {\n                 // Reexported items mean that the same id can show up twice\n                 // in the rustdoc ast that we're looking at. We know,\n@@ -1141,7 +1143,8 @@ impl DocFolder for Cache {\n         // Maintain the parent stack\n         let orig_parent_is_trait_impl = self.parent_is_trait_impl;\n         let parent_pushed = match item.inner {\n-            clean::TraitItem(..) | clean::EnumItem(..) | clean::StructItem(..) => {\n+            clean::TraitItem(..) | clean::EnumItem(..) |\n+            clean::StructItem(..) | clean::UnionItem(..) => {\n                 self.parent_stack.push(item.def_id);\n                 self.parent_is_trait_impl = false;\n                 true\n@@ -1557,6 +1560,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::FunctionItem(..) => write!(fmt, \"Function \")?,\n             clean::TraitItem(..) => write!(fmt, \"Trait \")?,\n             clean::StructItem(..) => write!(fmt, \"Struct \")?,\n+            clean::UnionItem(..) => write!(fmt, \"Union \")?,\n             clean::EnumItem(..) => write!(fmt, \"Enum \")?,\n             clean::PrimitiveItem(..) => write!(fmt, \"Primitive Type \")?,\n             _ => {}\n@@ -1613,6 +1617,7 @@ impl<'a> fmt::Display for Item<'a> {\n                 item_function(fmt, self.cx, self.item, f),\n             clean::TraitItem(ref t) => item_trait(fmt, self.cx, self.item, t),\n             clean::StructItem(ref s) => item_struct(fmt, self.cx, self.item, s),\n+            clean::UnionItem(ref s) => item_union(fmt, self.cx, self.item, s),\n             clean::EnumItem(ref e) => item_enum(fmt, self.cx, self.item, e),\n             clean::TypedefItem(ref t, _) => item_typedef(fmt, self.cx, self.item, t),\n             clean::MacroItem(ref m) => item_macro(fmt, self.cx, self.item, m),\n@@ -1715,7 +1720,8 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n             ItemType::Trait           => 9,\n             ItemType::Function        => 10,\n             ItemType::Typedef         => 12,\n-            _                         => 13 + ty as u8,\n+            ItemType::Union           => 13,\n+            _                         => 14 + ty as u8,\n         }\n     }\n \n@@ -1759,6 +1765,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                 ItemType::Import          => (\"reexports\", \"Reexports\"),\n                 ItemType::Module          => (\"modules\", \"Modules\"),\n                 ItemType::Struct          => (\"structs\", \"Structs\"),\n+                ItemType::Union           => (\"unions\", \"Unions\"),\n                 ItemType::Enum            => (\"enums\", \"Enums\"),\n                 ItemType::Function        => (\"functions\", \"Functions\"),\n                 ItemType::Typedef         => (\"types\", \"Type Definitions\"),\n@@ -2312,6 +2319,40 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n }\n \n+fn item_union(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n+               s: &clean::Union) -> fmt::Result {\n+    write!(w, \"<pre class='rust union'>\")?;\n+    render_attributes(w, it)?;\n+    render_union(w,\n+                 it,\n+                 Some(&s.generics),\n+                 &s.fields,\n+                 \"\",\n+                 true)?;\n+    write!(w, \"</pre>\")?;\n+\n+    document(w, cx, it)?;\n+    let mut fields = s.fields.iter().filter_map(|f| {\n+        match f.inner {\n+            clean::StructFieldItem(ref ty) => Some((f, ty)),\n+            _ => None,\n+        }\n+    }).peekable();\n+    if fields.peek().is_some() {\n+        write!(w, \"<h2 class='fields'>Fields</h2>\")?;\n+        for (field, ty) in fields {\n+            write!(w, \"<span id='{shortty}.{name}' class='{shortty}'><code>{name}: {ty}</code>\n+                       </span><span class='stab {stab}'></span>\",\n+                   shortty = ItemType::StructField,\n+                   stab = field.stability_class(),\n+                   name = field.name.as_ref().unwrap(),\n+                   ty = ty)?;\n+            document(w, cx, field)?;\n+        }\n+    }\n+    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+}\n+\n fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n              e: &clean::Enum) -> fmt::Result {\n     write!(w, \"<pre class='rust enum'>\")?;\n@@ -2514,6 +2555,40 @@ fn render_struct(w: &mut fmt::Formatter, it: &clean::Item,\n     Ok(())\n }\n \n+fn render_union(w: &mut fmt::Formatter, it: &clean::Item,\n+                g: Option<&clean::Generics>,\n+                fields: &[clean::Item],\n+                tab: &str,\n+                structhead: bool) -> fmt::Result {\n+    write!(w, \"{}{}{}\",\n+           VisSpace(&it.visibility),\n+           if structhead {\"union \"} else {\"\"},\n+           it.name.as_ref().unwrap())?;\n+    if let Some(g) = g {\n+        write!(w, \"{}\", g)?\n+    }\n+    if let Some(g) = g {\n+        write!(w, \"{}\", WhereClause(g))?\n+    }\n+\n+    write!(w, \" {{\\n{}\", tab)?;\n+    for field in fields {\n+        if let clean::StructFieldItem(ref ty) = field.inner {\n+            write!(w, \"    {}{}: {},\\n{}\",\n+                   VisSpace(&field.visibility),\n+                   field.name.as_ref().unwrap(),\n+                   *ty,\n+                   tab)?;\n+        }\n+    }\n+\n+    if it.has_stripped_fields().unwrap() {\n+        write!(w, \"    // some fields omitted\\n{}\", tab)?;\n+    }\n+    write!(w, \"}}\")?;\n+    Ok(())\n+}\n+\n #[derive(Copy, Clone)]\n enum AssocItemLink<'a> {\n     Anchor(Option<&'a str>),"}, {"sha": "9bb7246e7a92e8ea1374ccc44a89fc777302ae35", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -34,7 +34,8 @@\n                      \"primitive\",\n                      \"associatedtype\",\n                      \"constant\",\n-                     \"associatedconstant\"];\n+                     \"associatedconstant\",\n+                     \"union\"];\n \n     // used for special search precedence\n     var TY_PRIMITIVE = itemTypes.indexOf(\"primitive\");"}, {"sha": "c60e22824965f97248cee5444111f0b20758c88d", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -113,7 +113,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             clean::TraitItem(..) | clean::FunctionItem(..) |\n             clean::VariantItem(..) | clean::MethodItem(..) |\n             clean::ForeignFunctionItem(..) | clean::ForeignStaticItem(..) |\n-            clean::ConstantItem(..) => {\n+            clean::ConstantItem(..) | clean::UnionItem(..) => {\n                 if i.def_id.is_local() {\n                     if !self.access_levels.is_exported(i.def_id) {\n                         return None;"}, {"sha": "16a6e994b5a0b3c5bf4aa1033d3c064d00bd720d", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -108,6 +108,25 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n     }\n \n+    pub fn visit_union_data(&mut self, item: &hir::Item,\n+                            name: ast::Name, sd: &hir::VariantData,\n+                            generics: &hir::Generics) -> Union {\n+        debug!(\"Visiting union\");\n+        let struct_type = struct_type_from_def(&*sd);\n+        Union {\n+            id: item.id,\n+            struct_type: struct_type,\n+            name: name,\n+            vis: item.vis.clone(),\n+            stab: self.stability(item.id),\n+            depr: self.deprecation(item.id),\n+            attrs: item.attrs.clone(),\n+            generics: generics.clone(),\n+            fields: sd.fields().iter().cloned().collect(),\n+            whence: item.span\n+        }\n+    }\n+\n     pub fn visit_enum_def(&mut self, it: &hir::Item,\n                           name: ast::Name, def: &hir::EnumDef,\n                           params: &hir::Generics) -> Enum {\n@@ -258,6 +277,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             match def {\n                 Def::Trait(did) |\n                 Def::Struct(did) |\n+                Def::Union(did) |\n                 Def::Enum(did) |\n                 Def::TyAlias(did) if !self_is_hidden => {\n                     self.cx.access_levels.borrow_mut().map.insert(did, AccessLevel::Public);\n@@ -365,8 +385,8 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 om.enums.push(self.visit_enum_def(item, name, ed, gen)),\n             hir::ItemStruct(ref sd, ref gen) =>\n                 om.structs.push(self.visit_variant_data(item, name, sd, gen)),\n-            hir::ItemUnion(..) =>\n-                unimplemented_unions!(),\n+            hir::ItemUnion(ref sd, ref gen) =>\n+                om.unions.push(self.visit_union_data(item, name, sd, gen)),\n             hir::ItemFn(ref fd, ref unsafety, constness, ref abi, ref gen, _) =>\n                 om.fns.push(self.visit_fn(item, name, &**fd, unsafety,\n                                           constness, abi, gen)),"}, {"sha": "3af030706b739ba647a8f519c45445c91c8bedb1", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -73,6 +73,7 @@ impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n                     Def::ForeignMod(did) |\n                     Def::Trait(did) |\n                     Def::Struct(did) |\n+                    Def::Union(did) |\n                     Def::Enum(did) |\n                     Def::TyAlias(did) |\n                     Def::Fn(did) |"}, {"sha": "0dcc9098ad75cbe54c87fe7fa6bbd7d9ced64cd2", "filename": "src/test/rustdoc/union.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6792bd99febc646f22814b6759e31e622850f405/src%2Ftest%2Frustdoc%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6792bd99febc646f22814b6759e31e622850f405/src%2Ftest%2Frustdoc%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funion.rs?ref=6792bd99febc646f22814b6759e31e622850f405", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+// @has union/union.U.html\n+pub union U {\n+    // @has - //pre \"pub a: u8\"\n+    pub a: u8,\n+    // @has - //pre \"// some fields omitted\"\n+    // @!has - //pre \"b: u16\"\n+    b: u16,\n+}"}]}