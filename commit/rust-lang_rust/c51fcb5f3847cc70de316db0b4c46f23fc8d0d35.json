{"sha": "c51fcb5f3847cc70de316db0b4c46f23fc8d0d35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MWZjYjVmMzg0N2NjNzBkZTMxNmRiMGI0YzQ2ZjIzZmM4ZDBkMzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-29T09:50:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-29T09:50:10Z"}, "message": "Rollup merge of #68692 - jyn514:vec-from-array, r=LukasKalbertodt\n\nimpl From<[T; N]> for Vec<T>\n\nCloses https://github.com/rust-lang/rust/issues/67963", "tree": {"sha": "d25010c3d8e7cc78871c38cfb7acf0d8f8eb2805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d25010c3d8e7cc78871c38cfb7acf0d8f8eb2805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJegG9SCRBK7hj4Ov3rIwAAdHIIAFtmGZhjghPc2JHiMREEzWkc\nRLoFKPBdLWRVaQRUhyxGSURgpPZou0tF2DUxIjCkkE9mqbfgAKimW1CfNSSM+QZ3\nVrp/V+sRwLOEvVjuuzch4ovbID5szKeePFZZcTNJv9afkSr1ik8f7VRfkRBLcxGj\nGDTt2QlR7DD6S+9bV5L7yTaVMDa+HeFLKf2DSmOopbf3W7N8hg5HJ5XYWNYHA7fM\n9UqfKbumI7nJGYlkK7VYDkrHZgEooQLDuUUUtNLVeno7so9CCRCzrclrTicn2bKO\nWmHBiEp65B7NmlvWvFKhne2ZPRa54zzVuHv7T++7RVKjp5l70/n29UOGsfpgBOc=\n=26Oh\n-----END PGP SIGNATURE-----\n", "payload": "tree d25010c3d8e7cc78871c38cfb7acf0d8f8eb2805\nparent 8045865873f7cdbb864d0f66ef5ecb0d3ad847b2\nparent 3477e67a92878adae48b975915cb7a5c21026cd4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585475410 +0200\ncommitter GitHub <noreply@github.com> 1585475410 +0200\n\nRollup merge of #68692 - jyn514:vec-from-array, r=LukasKalbertodt\n\nimpl From<[T; N]> for Vec<T>\n\nCloses https://github.com/rust-lang/rust/issues/67963\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35", "html_url": "https://github.com/rust-lang/rust/commit/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8045865873f7cdbb864d0f66ef5ecb0d3ad847b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8045865873f7cdbb864d0f66ef5ecb0d3ad847b2", "html_url": "https://github.com/rust-lang/rust/commit/8045865873f7cdbb864d0f66ef5ecb0d3ad847b2"}, {"sha": "3477e67a92878adae48b975915cb7a5c21026cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3477e67a92878adae48b975915cb7a5c21026cd4", "html_url": "https://github.com/rust-lang/rust/commit/3477e67a92878adae48b975915cb7a5c21026cd4"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "e171edef736098d493980e47b8ce710fa722735d", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=c51fcb5f3847cc70de316db0b4c46f23fc8d0d35", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-filelength\n //! A contiguous growable array type with heap-allocated contents, written\n //! `Vec<T>`.\n //!\n@@ -2398,6 +2399,21 @@ impl<T: Clone> From<&mut [T]> for Vec<T> {\n     }\n }\n \n+#[stable(feature = \"vec_from_array\", since = \"1.44.0\")]\n+impl<T, const N: usize> From<[T; N]> for Vec<T>\n+where\n+    [T; N]: LengthAtMost32,\n+{\n+    #[cfg(not(test))]\n+    fn from(s: [T; N]) -> Vec<T> {\n+        <[T]>::into_vec(box s)\n+    }\n+    #[cfg(test)]\n+    fn from(s: [T; N]) -> Vec<T> {\n+        crate::slice::into_vec(box s)\n+    }\n+}\n+\n #[stable(feature = \"vec_from_cow_slice\", since = \"1.14.0\")]\n impl<'a, T> From<Cow<'a, [T]>> for Vec<T>\n where"}, {"sha": "0d0765e971d50a053c6c5d7c173ee345fe3a4d80", "filename": "src/test/ui/const-generics/array-impls/alloc-traits-impls-length-32.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-32.rs?ref=c51fcb5f3847cc70de316db0b4c46f23fc8d0d35", "patch": "@@ -14,6 +14,10 @@ where\n     Vec::<A>::new()\n }\n \n+pub fn yes_array_into_vec<T>() -> Vec<T> {\n+    [].into()\n+}\n+\n use std::collections::VecDeque;\n \n pub fn yes_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<[B; 32]>"}, {"sha": "4b195f3a06edc730bcd14217e0af83b6e164e64f", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs?ref=c51fcb5f3847cc70de316db0b4c46f23fc8d0d35", "patch": "@@ -2,6 +2,11 @@\n \n use std::{convert::TryFrom, rc::Rc, sync::Arc};\n \n+pub fn no_vec() {\n+    let v: Vec<_> = [0; 33].into();\n+    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n+}\n+\n pub fn no_box() {\n     let boxed_slice = Box::new([0; 33]) as Box<[i32]>;\n     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);"}, {"sha": "d795840551c50175184f374be842eaedaf5e2957", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.stderr", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c51fcb5f3847cc70de316db0b4c46f23fc8d0d35/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr?ref=c51fcb5f3847cc70de316db0b4c46f23fc8d0d35", "patch": "@@ -1,5 +1,14 @@\n+error[E0277]: arrays only have std trait implementations for lengths 0..=32\n+  --> $DIR/alloc-types-no-impls-length-33.rs:6:29\n+   |\n+LL |     let v: Vec<_> = [0; 33].into();\n+   |                             ^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[{integer}; 33]`\n+   |\n+   = note: required because of the requirements on the impl of `std::convert::From<[{integer}; 33]>` for `std::vec::Vec<{integer}>`\n+   = note: required because of the requirements on the impl of `std::convert::Into<std::vec::Vec<{integer}>>` for `[{integer}; 33]`\n+\n error[E0277]: the trait bound `std::boxed::Box<[i32; 33]>: std::convert::From<std::boxed::Box<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:7:23\n+  --> $DIR/alloc-types-no-impls-length-33.rs:12:23\n    |\n LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::boxed::Box<[i32]>>` is not implemented for `std::boxed::Box<[i32; 33]>`\n@@ -14,7 +23,7 @@ LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n    = note: required because of the requirements on the impl of `std::convert::TryFrom<std::boxed::Box<[i32]>>` for `std::boxed::Box<[i32; 33]>`\n \n error[E0277]: the trait bound `std::boxed::Box<[i32; 33]>: std::convert::TryFrom<std::boxed::Box<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:7:23\n+  --> $DIR/alloc-types-no-impls-length-33.rs:12:23\n    |\n LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::boxed::Box<[i32]>>` is not implemented for `std::boxed::Box<[i32; 33]>`\n@@ -23,7 +32,7 @@ LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n              <std::boxed::Box<[T; _]> as std::convert::TryFrom<std::boxed::Box<[T]>>>\n \n error[E0277]: the trait bound `std::rc::Rc<[i32; 33]>: std::convert::From<std::rc::Rc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:14:23\n+  --> $DIR/alloc-types-no-impls-length-33.rs:19:23\n    |\n LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n@@ -38,7 +47,7 @@ LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n    = note: required because of the requirements on the impl of `std::convert::TryFrom<std::rc::Rc<[i32]>>` for `std::rc::Rc<[i32; 33]>`\n \n error[E0277]: the trait bound `std::rc::Rc<[i32; 33]>: std::convert::TryFrom<std::rc::Rc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:14:23\n+  --> $DIR/alloc-types-no-impls-length-33.rs:19:23\n    |\n LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n@@ -47,7 +56,7 @@ LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n              <std::rc::Rc<[T; _]> as std::convert::TryFrom<std::rc::Rc<[T]>>>\n \n error[E0277]: the trait bound `std::sync::Arc<[i32; 33]>: std::convert::From<std::sync::Arc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:21:23\n+  --> $DIR/alloc-types-no-impls-length-33.rs:26:23\n    |\n LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n@@ -62,14 +71,14 @@ LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n    = note: required because of the requirements on the impl of `std::convert::TryFrom<std::sync::Arc<[i32]>>` for `std::sync::Arc<[i32; 33]>`\n \n error[E0277]: the trait bound `std::sync::Arc<[i32; 33]>: std::convert::TryFrom<std::sync::Arc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:21:23\n+  --> $DIR/alloc-types-no-impls-length-33.rs:26:23\n    |\n LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n    |\n    = help: the following implementations were found:\n              <std::sync::Arc<[T; _]> as std::convert::TryFrom<std::sync::Arc<[T]>>>\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}