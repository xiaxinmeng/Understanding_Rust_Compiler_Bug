{"sha": "23f5fbee45273879d185ab18b64ac2cd8c708fec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZjVmYmVlNDUyNzM4NzlkMTg1YWIxOGI2NGFjMmNkOGM3MDhmZWM=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-10-02T02:25:48Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-10-02T02:25:48Z"}, "message": "document trait impls when the type appears in the trait's generics", "tree": {"sha": "5d88e1763b653258ca5bcfe45f3db83c7910df88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d88e1763b653258ca5bcfe45f3db83c7910df88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23f5fbee45273879d185ab18b64ac2cd8c708fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23f5fbee45273879d185ab18b64ac2cd8c708fec", "html_url": "https://github.com/rust-lang/rust/commit/23f5fbee45273879d185ab18b64ac2cd8c708fec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23f5fbee45273879d185ab18b64ac2cd8c708fec/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b5225e8b67adab52dda2b5ed5c8b805b716a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b5225e8b67adab52dda2b5ed5c8b805b716a6d", "html_url": "https://github.com/rust-lang/rust/commit/f1b5225e8b67adab52dda2b5ed5c8b805b716a6d"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "6da0d8a8a98d3997874f6c591c53661ca0fa07f4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23f5fbee45273879d185ab18b64ac2cd8c708fec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f5fbee45273879d185ab18b64ac2cd8c708fec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=23f5fbee45273879d185ab18b64ac2cd8c708fec", "patch": "@@ -1681,6 +1681,21 @@ impl Type {\n             _ => false\n         }\n     }\n+\n+    pub fn generics(&self) -> Option<&[Type]> {\n+        match *self {\n+            ResolvedPath { ref path, .. } => {\n+                path.segments.last().and_then(|seg| {\n+                    if let PathParameters::AngleBracketed { ref types, .. } = seg.params {\n+                        Some(&**types)\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n impl GetDefId for Type {"}, {"sha": "56f56994f7876a3048a6c3c073e9b25f99d2dab6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/23f5fbee45273879d185ab18b64ac2cd8c708fec/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f5fbee45273879d185ab18b64ac2cd8c708fec/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=23f5fbee45273879d185ab18b64ac2cd8c708fec", "patch": "@@ -1306,7 +1306,8 @@ impl DocFolder for Cache {\n                 // Figure out the id of this impl. This may map to a\n                 // primitive rather than always to a struct/enum.\n                 // Note: matching twice to restrict the lifetime of the `i` borrow.\n-                let did = if let clean::Item { inner: clean::ImplItem(ref i), .. } = item {\n+                let mut dids = vec![];\n+                if let clean::Item { inner: clean::ImplItem(ref i), .. } = item {\n                     let masked_trait = i.trait_.def_id().map_or(false,\n                         |d| self.masked_crates.contains(&d.krate));\n                     if !masked_trait {\n@@ -1315,23 +1316,33 @@ impl DocFolder for Cache {\n                             clean::BorrowedRef {\n                                 type_: box clean::ResolvedPath { did, .. }, ..\n                             } => {\n-                                Some(did)\n+                                dids.push(did);\n                             }\n                             ref t => {\n-                                t.primitive_type().and_then(|t| {\n+                                let did = t.primitive_type().and_then(|t| {\n                                     self.primitive_locations.get(&t).cloned()\n-                                })\n+                                });\n+\n+                                if let Some(did) = did {\n+                                    dids.push(did);\n+                                }\n+                            }\n+                        }\n+                    }\n+\n+                    if let Some(generics) = i.trait_.as_ref().and_then(|t| t.generics()) {\n+                        for bound in generics {\n+                            if let Some(did) = bound.def_id() {\n+                                dids.push(did);\n                             }\n                         }\n-                    } else {\n-                        None\n                     }\n                 } else {\n                     unreachable!()\n                 };\n-                if let Some(did) = did {\n+                for did in dids {\n                     self.impls.entry(did).or_insert(vec![]).push(Impl {\n-                        impl_item: item,\n+                        impl_item: item.clone(),\n                     });\n                 }\n                 None"}]}