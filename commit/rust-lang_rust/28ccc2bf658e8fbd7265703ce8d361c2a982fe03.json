{"sha": "28ccc2bf658e8fbd7265703ce8d361c2a982fe03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Y2NjMmJmNjU4ZThmYmQ3MjY1NzAzY2U4ZDM2MWMyYTk4MmZlMDM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T00:41:39Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T00:41:39Z"}, "message": "Implement the __rust_allocate C ABI function.", "tree": {"sha": "a3fa7bcae2b541f8b95757fb0b984572989cca9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3fa7bcae2b541f8b95757fb0b984572989cca9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ccc2bf658e8fbd7265703ce8d361c2a982fe03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ccc2bf658e8fbd7265703ce8d361c2a982fe03", "html_url": "https://github.com/rust-lang/rust/commit/28ccc2bf658e8fbd7265703ce8d361c2a982fe03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ccc2bf658e8fbd7265703ce8d361c2a982fe03/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a000b37cc468947d080c761b68a7a8da7cd29b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a000b37cc468947d080c761b68a7a8da7cd29b3", "html_url": "https://github.com/rust-lang/rust/commit/6a000b37cc468947d080c761b68a7a8da7cd29b3"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "e5a593239cf6b3e62fa229ffdadf67ab5daf1b97", "filename": "src/interpreter.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/28ccc2bf658e8fbd7265703ce8d361c2a982fe03/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ccc2bf658e8fbd7265703ce8d361c2a982fe03/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=28ccc2bf658e8fbd7265703ce8d361c2a982fe03", "patch": "@@ -14,6 +14,7 @@ use std::iter;\n use std::ops::Deref;\n use std::rc::Rc;\n use syntax::ast;\n+use syntax::attr;\n use syntax::codemap::DUMMY_SP;\n \n use error::{EvalError, EvalResult};\n@@ -248,6 +249,9 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                                 }\n                             }\n \n+                            Abi::C =>\n+                                try!(self.call_c_abi(def_id, args, return_ptr.unwrap())),\n+\n                             Abi::Rust | Abi::RustCall => {\n                                 // TODO(tsion): Adjust the first argument when calling a Fn or\n                                 // FnMut closure via FnOnce::call_once.\n@@ -295,7 +299,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                                 TerminatorTarget::Call\n                             }\n \n-                            abi => panic!(\"can't handle function with ABI {:?}\", abi),\n+                            abi => panic!(\"can't handle function with {:?} ABI\", abi),\n                         }\n                     }\n \n@@ -397,6 +401,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 try!(self.memory.copy(src, dest, dest_size));\n             }\n \n+            // TODO(tsion): Mark bytes as undef.\n             \"uninit\" => {}\n \n             name => panic!(\"can't handle intrinsic: {}\", name),\n@@ -408,6 +413,34 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         Ok(TerminatorTarget::Call)\n     }\n \n+    fn call_c_abi(&mut self, def_id: DefId, args: &[mir::Operand<'tcx>], dest: Pointer)\n+        -> EvalResult<TerminatorTarget>\n+    {\n+        let name = self.tcx.item_name(def_id);\n+        let attrs = self.tcx.get_attrs(def_id);\n+        let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n+            Some(ln) => ln.clone(),\n+            None => name.as_str(),\n+        };\n+\n+        match &link_name[..] {\n+            \"__rust_allocate\" => {\n+                let size_arg  = try!(self.eval_operand(&args[0]));\n+                let _align_arg = try!(self.eval_operand(&args[1]));\n+                let size = try!(self.memory.read_uint(size_arg, self.memory.pointer_size));\n+                let ptr = self.memory.allocate(size as usize);\n+                try!(self.memory.write_ptr(dest, ptr));\n+            }\n+\n+            _ => panic!(\"can't call C ABI function: {}\", link_name),\n+        }\n+\n+        // Since we pushed no stack frame, the main loop will act\n+        // as if the call just completed and it's returning to the\n+        // current frame.\n+        Ok(TerminatorTarget::Call)\n+    }\n+\n     fn assign_to_aggregate(&mut self, dest: Pointer, dest_repr: &Repr, variant: usize,\n                          operands: &[mir::Operand<'tcx>]) -> EvalResult<()> {\n         match *dest_repr {"}]}