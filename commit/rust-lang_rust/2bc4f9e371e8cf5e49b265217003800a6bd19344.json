{"sha": "2bc4f9e371e8cf5e49b265217003800a6bd19344", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYzRmOWUzNzFlOGNmNWU0OWIyNjUyMTcwMDM4MDBhNmJkMTkzNDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-05T11:50:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-05T11:50:18Z"}, "message": "Merge #9474\n\n9474: fix: Inline parameters in `inline_call` if possible r=Veykril a=Veykril\n\nFixes #9491\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e12f4507ab6c0afeab23eec3e5fdaf65b439cf40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e12f4507ab6c0afeab23eec3e5fdaf65b439cf40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc4f9e371e8cf5e49b265217003800a6bd19344", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg4vH6CRBK7hj4Ov3rIwAAqdEIABdcYuMY2Cl1QKkCS1NwXm2n\np+2ci//mMvcmjQYByXoMsZArjfhX0n2wLjafpTmpG1WpMvS6XcZXoltIhgQ9bC1k\nMSZndrIcrR0sEOXjKj1+r2G6E/uVAqMGdpQ671PY+/i52DuNqens65NDn5oM1fMz\ny2b0kiAtQMuBfY9Znxb0bFQ5n0CISc2oHcYvm8TU9vYJOnA1l1Zxic56v/2AIylt\nM+wW50VQVjZykb/MW3YTT9sBM4HpZX/LA+/0a8lOKxuN3wJrpKaUrRz+t4QaeUut\n7JfAsPqn/SreoGx+tea+jDohC5Ywru5IvuXcECL5Sx4uEZKRn7wmbc5OLbATDY4=\n=7eMp\n-----END PGP SIGNATURE-----\n", "payload": "tree e12f4507ab6c0afeab23eec3e5fdaf65b439cf40\nparent b52306ed37525afc1853b645e4155485b8016291\nparent ea02d27a1e5632466cb437bad7432783bebba70f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625485818 +0000\ncommitter GitHub <noreply@github.com> 1625485818 +0000\n\nMerge #9474\n\n9474: fix: Inline parameters in `inline_call` if possible r=Veykril a=Veykril\n\nFixes #9491\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc4f9e371e8cf5e49b265217003800a6bd19344", "html_url": "https://github.com/rust-lang/rust/commit/2bc4f9e371e8cf5e49b265217003800a6bd19344", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc4f9e371e8cf5e49b265217003800a6bd19344/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b52306ed37525afc1853b645e4155485b8016291", "url": "https://api.github.com/repos/rust-lang/rust/commits/b52306ed37525afc1853b645e4155485b8016291", "html_url": "https://github.com/rust-lang/rust/commit/b52306ed37525afc1853b645e4155485b8016291"}, {"sha": "ea02d27a1e5632466cb437bad7432783bebba70f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea02d27a1e5632466cb437bad7432783bebba70f", "html_url": "https://github.com/rust-lang/rust/commit/ea02d27a1e5632466cb437bad7432783bebba70f"}], "stats": {"total": 329, "additions": 259, "deletions": 70}, "files": [{"sha": "5b6992b64097a46b6a57ce54eae0401d405384fb", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 230, "deletions": 65, "changes": 295, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4f9e371e8cf5e49b265217003800a6bd19344/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4f9e371e8cf5e49b265217003800a6bd19344/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=2bc4f9e371e8cf5e49b265217003800a6bd19344", "patch": "@@ -1,5 +1,7 @@\n use ast::make;\n use hir::{HasSource, PathResolution};\n+use ide_db::{defs::Definition, search::FileReference};\n+use itertools::izip;\n use syntax::{\n     ast::{self, edit::AstNodeEdit, ArgListOwner},\n     ted, AstNode,\n@@ -15,19 +17,22 @@ use crate::{\n // Inlines a function or method body.\n //\n // ```\n-// fn add(a: u32, b: u32) -> u32 { a + b }\n+// fn align(a: u32, b: u32) -> u32 {\n+//     (a + b - 1) & !(b - 1)\n+// }\n // fn main() {\n-//     let x = add$0(1, 2);\n+//     let x = align$0(1, 2);\n // }\n // ```\n // ->\n // ```\n-// fn add(a: u32, b: u32) -> u32 { a + b }\n+// fn align(a: u32, b: u32) -> u32 {\n+//     (a + b - 1) & !(b - 1)\n+// }\n // fn main() {\n //     let x = {\n-//         let a = 1;\n //         let b = 2;\n-//         a + b\n+//         (1 + b - 1) & !(b - 1)\n //     };\n // }\n // ```\n@@ -69,23 +74,25 @@ pub(crate) fn inline_(\n     arg_list: Vec<ast::Expr>,\n     expr: ast::Expr,\n ) -> Option<()> {\n-    let hir::InFile { value: function_source, .. } = function.source(ctx.db())?;\n+    let hir::InFile { value: function_source, file_id } = function.source(ctx.db())?;\n     let param_list = function_source.param_list()?;\n+    let mut assoc_fn_params = function.assoc_fn_params(ctx.sema.db).into_iter();\n \n     let mut params = Vec::new();\n     if let Some(self_param) = param_list.self_param() {\n         // FIXME this should depend on the receiver as well as the self_param\n-        params.push(\n+        params.push((\n             make::ident_pat(\n                 self_param.amp_token().is_some(),\n                 self_param.mut_token().is_some(),\n                 make::name(\"this\"),\n             )\n             .into(),\n-        );\n+            assoc_fn_params.next()?,\n+        ));\n     }\n     for param in param_list.params() {\n-        params.push(param.pat()?);\n+        params.push((param.pat()?, assoc_fn_params.next()?));\n     }\n \n     if arg_list.len() != params.len() {\n@@ -95,41 +102,94 @@ pub(crate) fn inline_(\n         return None;\n     }\n \n-    let new_bindings = params.into_iter().zip(arg_list);\n-\n     let body = function_source.body()?;\n \n     acc.add(\n         AssistId(\"inline_call\", AssistKind::RefactorInline),\n         label,\n         expr.syntax().text_range(),\n         |builder| {\n-            // FIXME: emit type ascriptions when a coercion happens?\n-            // FIXME: dont create locals when its not required\n-            let statements = new_bindings\n-                .map(|(pattern, value)| make::let_stmt(pattern, Some(value)).into())\n-                .chain(body.statements());\n+            let body = body.clone_for_update();\n+\n+            let file_id = file_id.original_file(ctx.sema.db);\n+            let usages_for_locals = |local| {\n+                Definition::Local(local)\n+                    .usages(&ctx.sema)\n+                    .all()\n+                    .references\n+                    .remove(&file_id)\n+                    .unwrap_or_default()\n+                    .into_iter()\n+            };\n+            // Contains the nodes of usages of parameters.\n+            // If the inner Vec for a parameter is empty it either means there are no usages or that the parameter\n+            // has a pattern that does not allow inlining\n+            let param_use_nodes: Vec<Vec<_>> = params\n+                .iter()\n+                .map(|(pat, param)| {\n+                    if !matches!(pat, ast::Pat::IdentPat(pat) if pat.is_simple_ident()) {\n+                        return Vec::new();\n+                    }\n+                    usages_for_locals(param.as_local(ctx.sema.db))\n+                        .map(|FileReference { name, range, .. }| match name {\n+                            ast::NameLike::NameRef(_) => body\n+                                .syntax()\n+                                .covering_element(range)\n+                                .ancestors()\n+                                .nth(3)\n+                                .filter(|it| ast::PathExpr::can_cast(it.kind())),\n+                            _ => None,\n+                        })\n+                        .collect::<Option<Vec<_>>>()\n+                        .unwrap_or_default()\n+                })\n+                .collect();\n+\n+            // Rewrite `self` to `this`\n+            if param_list.self_param().is_some() {\n+                let this = || make::name_ref(\"this\").syntax().clone_for_update();\n+                usages_for_locals(params[0].1.as_local(ctx.sema.db))\n+                    .flat_map(|FileReference { name, range, .. }| match name {\n+                        ast::NameLike::NameRef(_) => Some(body.syntax().covering_element(range)),\n+                        _ => None,\n+                    })\n+                    .for_each(|it| {\n+                        ted::replace(it, &this());\n+                    })\n+            }\n+\n+            // Inline parameter expressions or generate `let` statements depending on whether inlining works or not.\n+            for ((pat, _), usages, expr) in izip!(params, param_use_nodes, arg_list).rev() {\n+                match &*usages {\n+                    // inline single use parameters\n+                    [usage] => {\n+                        ted::replace(usage, expr.syntax().clone_for_update());\n+                    }\n+                    // inline parameters whose expression is a simple local reference\n+                    [_, ..]\n+                        if matches!(&expr,\n+                            ast::Expr::PathExpr(expr)\n+                                if expr.path().and_then(|path| path.as_single_name_ref()).is_some()\n+                        ) =>\n+                    {\n+                        usages.into_iter().for_each(|usage| {\n+                            ted::replace(usage, &expr.syntax().clone_for_update());\n+                        });\n+                    }\n+                    // cant inline, emit a let statement\n+                    // FIXME: emit type ascriptions when a coercion happens?\n+                    _ => body.push_front(make::let_stmt(pat, Some(expr)).clone_for_update().into()),\n+                }\n+            }\n \n             let original_indentation = expr.indent_level();\n-            let mut replacement = make::block_expr(statements, body.tail_expr())\n-                .reset_indent()\n-                .indent(original_indentation);\n+            let replacement = body.reset_indent().indent(original_indentation);\n \n-            if param_list.self_param().is_some() {\n-                replacement = replacement.clone_for_update();\n-                let this = make::name_ref(\"this\").syntax().clone_for_update();\n-                // FIXME dont look into descendant methods\n-                replacement\n-                    .syntax()\n-                    .descendants()\n-                    .filter_map(ast::NameRef::cast)\n-                    .filter(|n| n.self_token().is_some())\n-                    .collect::<Vec<_>>()\n-                    .into_iter()\n-                    .rev()\n-                    .for_each(|self_ref| ted::replace(self_ref.syntax(), &this));\n-            }\n-            builder.replace_ast(expr, ast::Expr::BlockExpr(replacement));\n+            let replacement = match replacement.tail_expr() {\n+                Some(expr) if replacement.statements().next().is_none() => expr,\n+                _ => ast::Expr::BlockExpr(replacement),\n+            };\n+            builder.replace_ast(expr, replacement);\n         },\n     )\n }\n@@ -153,26 +213,40 @@ fn main() {\n             r#\"\n fn foo() { println!(\"Hello, World!\"); }\n fn main() {\n-    {\n-        println!(\"Hello, World!\");\n-    };\n+    { println!(\"Hello, World!\"); };\n }\n \"#,\n         );\n     }\n \n+    #[test]\n+    fn not_applicable_when_incorrect_number_of_parameters_are_provided() {\n+        cov_mark::check!(inline_call_incorrect_number_of_arguments);\n+        check_assist_not_applicable(\n+            inline_call,\n+            r#\"\n+fn add(a: u32, b: u32) -> u32 { a + b }\n+fn main() { let x = add$0(42); }\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn args_with_side_effects() {\n         check_assist(\n             inline_call,\n             r#\"\n-fn foo(name: String) { println!(\"Hello, {}!\", name); }\n+fn foo(name: String) {\n+    println!(\"Hello, {}!\", name);\n+}\n fn main() {\n     foo$0(String::from(\"Michael\"));\n }\n \"#,\n             r#\"\n-fn foo(name: String) { println!(\"Hello, {}!\", name); }\n+fn foo(name: String) {\n+    println!(\"Hello, {}!\", name);\n+}\n fn main() {\n     {\n         let name = String::from(\"Michael\");\n@@ -183,18 +257,6 @@ fn main() {\n         );\n     }\n \n-    #[test]\n-    fn not_applicable_when_incorrect_number_of_parameters_are_provided() {\n-        cov_mark::check!(inline_call_incorrect_number_of_arguments);\n-        check_assist_not_applicable(\n-            inline_call,\n-            r#\"\n-fn add(a: u32, b: u32) -> u32 { a + b }\n-fn main() { let x = add$0(42); }\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn function_with_multiple_statements() {\n         check_assist(\n@@ -219,9 +281,8 @@ fn foo(a: u32, b: u32) -> u32 {\n \n fn main() {\n     let x = {\n-        let a = 1;\n         let b = 2;\n-        let x = a + b;\n+        let x = 1 + b;\n         let y = x - b;\n         x * y\n     };\n@@ -257,11 +318,7 @@ impl Foo {\n }\n \n fn main() {\n-    let x = {\n-        let this = Foo(3);\n-        let a = 2;\n-        Foo(this.0 + a)\n-    };\n+    let x = Foo(Foo(3).0 + 2);\n }\n \"#,\n         );\n@@ -294,11 +351,7 @@ impl Foo {\n }\n \n fn main() {\n-    let x = {\n-        let this = Foo(3);\n-        let a = 2;\n-        Foo(this.0 + a)\n-    };\n+    let x = Foo(Foo(3).0 + 2);\n }\n \"#,\n         );\n@@ -333,8 +386,7 @@ impl Foo {\n fn main() {\n     let x = {\n         let ref this = Foo(3);\n-        let a = 2;\n-        Foo(this.0 + a)\n+        Foo(this.0 + 2)\n     };\n }\n \"#,\n@@ -375,6 +427,119 @@ fn main() {\n         this.0 = 0;\n     };\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn function_single_use_expr_in_param() {\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn double(x: u32) -> u32 {\n+    2 * x\n+}\n+fn main() {\n+    let x = 51;\n+    let x = double$0(10 + x);\n+}\n+\"#,\n+            r#\"\n+fn double(x: u32) -> u32 {\n+    2 * x\n+}\n+fn main() {\n+    let x = 51;\n+    let x = 2 * 10 + x;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn function_multi_use_expr_in_param() {\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+fn main() {\n+    let x = 51;\n+    let y = square$0(10 + x);\n+}\n+\"#,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+fn main() {\n+    let x = 51;\n+    let y = {\n+        let x = 10 + x;\n+        x * x\n+    };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn function_multi_use_local_in_param() {\n+        check_assist(\n+            inline_call,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+fn main() {\n+    let local = 51;\n+    let y = square$0(local);\n+}\n+\"#,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+fn main() {\n+    let local = 51;\n+    let y = local * local;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn method_in_impl() {\n+        check_assist(\n+            inline_call,\n+            r#\"\n+struct Foo;\n+impl Foo {\n+    fn foo(&self) {\n+        self;\n+        self;\n+    }\n+    fn bar(&self) {\n+        self.foo$0();\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Foo;\n+impl Foo {\n+    fn foo(&self) {\n+        self;\n+        self;\n+    }\n+    fn bar(&self) {\n+        {\n+            let ref this = self;\n+            this;\n+            this;\n+        };\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "c24c380345010e10efff79de2075c82eada06471", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4f9e371e8cf5e49b265217003800a6bd19344/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4f9e371e8cf5e49b265217003800a6bd19344/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=2bc4f9e371e8cf5e49b265217003800a6bd19344", "patch": "@@ -923,18 +923,21 @@ fn doctest_inline_call() {\n     check_doc_test(\n         \"inline_call\",\n         r#####\"\n-fn add(a: u32, b: u32) -> u32 { a + b }\n+fn align(a: u32, b: u32) -> u32 {\n+    (a + b - 1) & !(b - 1)\n+}\n fn main() {\n-    let x = add$0(1, 2);\n+    let x = align$0(1, 2);\n }\n \"#####,\n         r#####\"\n-fn add(a: u32, b: u32) -> u32 { a + b }\n+fn align(a: u32, b: u32) -> u32 {\n+    (a + b - 1) & !(b - 1)\n+}\n fn main() {\n     let x = {\n-        let a = 1;\n         let b = 2;\n-        a + b\n+        (1 + b - 1) & !(b - 1)\n     };\n }\n \"#####,"}, {"sha": "30af469bc7eb128a208e5123bbc5087fbcb5e926", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4f9e371e8cf5e49b265217003800a6bd19344/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4f9e371e8cf5e49b265217003800a6bd19344/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=2bc4f9e371e8cf5e49b265217003800a6bd19344", "patch": "@@ -431,6 +431,12 @@ impl ast::RecordExprFieldList {\n     }\n }\n \n+impl ast::BlockExpr {\n+    pub fn push_front(&self, statement: ast::Stmt) {\n+        ted::insert(Position::after(self.l_curly_token().unwrap()), statement.syntax());\n+    }\n+}\n+\n fn normalize_ws_between_braces(node: &SyntaxNode) -> Option<()> {\n     let l = node\n         .children_with_tokens()"}, {"sha": "e54c3f430c3e0b447170ffe72c1930c4e55c91eb", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4f9e371e8cf5e49b265217003800a6bd19344/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4f9e371e8cf5e49b265217003800a6bd19344/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=2bc4f9e371e8cf5e49b265217003800a6bd19344", "patch": "@@ -641,6 +641,15 @@ impl ast::SlicePat {\n     }\n }\n \n+impl ast::IdentPat {\n+    pub fn is_simple_ident(&self) -> bool {\n+        self.at_token().is_none()\n+            && self.mut_token().is_none()\n+            && self.ref_token().is_none()\n+            && self.pat().is_none()\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum SelfParamKind {\n     /// self"}, {"sha": "3c05b4881572f3fb4dfc830c07e53380c07766ba", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4f9e371e8cf5e49b265217003800a6bd19344/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4f9e371e8cf5e49b265217003800a6bd19344/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=2bc4f9e371e8cf5e49b265217003800a6bd19344", "patch": "@@ -187,6 +187,12 @@ fn ws_between(left: &SyntaxElement, right: &SyntaxElement) -> Option<SyntaxToken\n         return None;\n     }\n \n+    if left.kind() == T!['{'] && right.kind() == SyntaxKind::LET_STMT {\n+        let mut indent = IndentLevel::from_element(left);\n+        indent.0 += 1;\n+        return Some(make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n+    }\n+\n     if right.kind() == SyntaxKind::USE {\n         let mut indent = IndentLevel::from_element(left);\n         if left.kind() == SyntaxKind::USE {"}]}