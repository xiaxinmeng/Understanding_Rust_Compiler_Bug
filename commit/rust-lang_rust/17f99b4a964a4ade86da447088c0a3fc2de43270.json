{"sha": "17f99b4a964a4ade86da447088c0a3fc2de43270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Zjk5YjRhOTY0YTRhZGU4NmRhNDQ3MDg4YzBhM2ZjMmRlNDMyNzA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-02T15:23:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-02T15:23:15Z"}, "message": "Take Place by value instead of by reference", "tree": {"sha": "5db7aeec378c6409068179da8db4c544988c7fda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db7aeec378c6409068179da8db4c544988c7fda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17f99b4a964a4ade86da447088c0a3fc2de43270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17f99b4a964a4ade86da447088c0a3fc2de43270", "html_url": "https://github.com/rust-lang/rust/commit/17f99b4a964a4ade86da447088c0a3fc2de43270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17f99b4a964a4ade86da447088c0a3fc2de43270/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "786c7d8d8ce3a21a394404c41a01a666c26071f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/786c7d8d8ce3a21a394404c41a01a666c26071f3", "html_url": "https://github.com/rust-lang/rust/commit/786c7d8d8ce3a21a394404c41a01a666c26071f3"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "aa89a3d4e29ed21bffe3c342a6409154d16aa707", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17f99b4a964a4ade86da447088c0a3fc2de43270/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f99b4a964a4ade86da447088c0a3fc2de43270/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=17f99b4a964a4ade86da447088c0a3fc2de43270", "patch": "@@ -428,16 +428,15 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     span: Span,\n     func: &Operand<'tcx>,\n     args: &[Operand<'tcx>],\n-    destination: &Option<(Place<'tcx>, BasicBlock)>,\n+    destination: Option<(Place<'tcx>, BasicBlock)>,\n ) {\n     let fn_ty = fx.monomorphize(&func.ty(fx.mir, fx.tcx));\n     let sig = fx\n         .tcx\n         .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_ty.fn_sig(fx.tcx));\n \n     let destination = destination\n-        .as_ref()\n-        .map(|&(ref place, bb)| (trans_place(fx, place), bb));\n+        .map(|(place, bb)| (trans_place(fx, place), bb));\n \n     if let ty::FnDef(def_id, substs) = fn_ty.kind {\n         let instance ="}, {"sha": "0970b0d1695223d07e9fee2b05772ff335ae64c3", "filename": "src/base.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/17f99b4a964a4ade86da447088c0a3fc2de43270/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17f99b4a964a4ade86da447088c0a3fc2de43270/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=17f99b4a964a4ade86da447088c0a3fc2de43270", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n                     bb_data.terminator().source_info.span,\n                     func,\n                     args,\n-                    destination,\n+                    *destination,\n                 ));\n                 destination.map(|(_ret_place, ret_block)| ret_block)\n             }\n@@ -126,7 +126,7 @@ pub(crate) fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n                         bb_data.terminator().source_info.span,\n                         func,\n                         args,\n-                        destination,\n+                        *destination,\n                     ));\n                     destination.map(|(_ret_place, ret_block)| ret_block)\n                 }\n@@ -336,7 +336,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                     bb_data.terminator().source_info.span,\n                     func,\n                     args,\n-                    destination,\n+                    *destination,\n                 ));\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort => {\n@@ -357,7 +357,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 target,\n                 unwind: _,\n             } => {\n-                let drop_place = trans_place(fx, location);\n+                let drop_place = trans_place(fx, *location);\n                 crate::abi::codegen_drop(fx, bb_data.terminator().source_info.span, drop_place);\n \n                 let target_block = fx.get_block(*target);\n@@ -394,19 +394,19 @@ fn trans_stmt<'tcx>(\n             place,\n             variant_index,\n         } => {\n-            let place = trans_place(fx, place);\n+            let place = trans_place(fx, **place);\n             crate::discriminant::codegen_set_discriminant(fx, place, *variant_index);\n         }\n         StatementKind::Assign(to_place_and_rval) => {\n-            let lval = trans_place(fx, &to_place_and_rval.0);\n+            let lval = trans_place(fx, to_place_and_rval.0);\n             let dest_layout = lval.layout();\n             match &to_place_and_rval.1 {\n                 Rvalue::Use(operand) => {\n                     let val = trans_operand(fx, operand);\n                     lval.write_cvalue(fx, val);\n                 }\n                 Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n-                    let place = trans_place(fx, place);\n+                    let place = trans_place(fx, *place);\n                     place.write_place_ref(fx, lval);\n                 }\n                 Rvalue::BinaryOp(bin_op, lhs, rhs) => {\n@@ -565,7 +565,7 @@ fn trans_stmt<'tcx>(\n                     operand.unsize_value(fx, lval);\n                 }\n                 Rvalue::Discriminant(place) => {\n-                    let place = trans_place(fx, place);\n+                    let place = trans_place(fx, *place);\n                     let value = place.to_cvalue(fx);\n                     let discr =\n                         crate::discriminant::codegen_get_discriminant(fx, value, dest_layout);\n@@ -586,7 +586,7 @@ fn trans_stmt<'tcx>(\n                     }\n                 }\n                 Rvalue::Len(place) => {\n-                    let place = trans_place(fx, place);\n+                    let place = trans_place(fx, *place);\n                     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n                     let len = codegen_array_len(fx, place);\n                     lval.write_cvalue(fx, CValue::by_val(len, usize_layout));\n@@ -739,11 +739,11 @@ fn codegen_array_len<'tcx>(\n \n pub(crate) fn trans_place<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    place: &Place<'tcx>,\n+    place: Place<'tcx>,\n ) -> CPlace<'tcx> {\n     let mut cplace = fx.get_local_place(place.local);\n \n-    for elem in &*place.projection {\n+    for elem in place.projection {\n         match *elem {\n             PlaceElem::Deref => {\n                 cplace = cplace.place_deref(fx);\n@@ -811,7 +811,7 @@ pub(crate) fn trans_operand<'tcx>(\n ) -> CValue<'tcx> {\n     match operand {\n         Operand::Move(place) | Operand::Copy(place) => {\n-            let cplace = trans_place(fx, place);\n+            let cplace = trans_place(fx, *place);\n             cplace.to_cvalue(fx)\n         }\n         Operand::Constant(const_) => crate::constant::trans_constant(fx, const_),"}]}