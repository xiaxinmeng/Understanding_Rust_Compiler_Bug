{"sha": "9cc117930b02b86795946e6b8748166c17fd4f16", "node_id": "C_kwDOAAsO6NoAKDljYzExNzkzMGIwMmI4Njc5NTk0NmU2Yjg3NDgxNjZjMTdmZDRmMTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-11-23T18:34:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-11-23T19:05:07Z"}, "message": "Fix printing unit return ty, don't elaborate FnOnce unless we see it", "tree": {"sha": "23294b8f79aa89f212353ceb7e22f9208cbbd033", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23294b8f79aa89f212353ceb7e22f9208cbbd033"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cc117930b02b86795946e6b8748166c17fd4f16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc117930b02b86795946e6b8748166c17fd4f16", "html_url": "https://github.com/rust-lang/rust/commit/9cc117930b02b86795946e6b8748166c17fd4f16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cc117930b02b86795946e6b8748166c17fd4f16/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae575c795a809f2a25ce487cfb0297511297a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae575c795a809f2a25ce487cfb0297511297a8a", "html_url": "https://github.com/rust-lang/rust/commit/9ae575c795a809f2a25ce487cfb0297511297a8a"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "175295b3199e8e2e2c1bf0cc5115ba53133d8657", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -839,19 +839,25 @@ pub trait PrettyPrinter<'tcx>:\n                         p!(print(ty));\n                     }\n \n-                    p!(\") -> \", print(return_ty), write(\"{}\", if paren_needed { \")\" } else { \"\" }));\n+                    p!(\")\");\n+                    if !return_ty.skip_binder().is_unit() {\n+                        p!(\"-> \", print(return_ty));\n+                    }\n+                    p!(write(\"{}\", if paren_needed { \")\" } else { \"\" }));\n \n                     first = false;\n                 }\n                 // If we got here, we can't print as a `impl Fn(A, B) -> C`. Just record the\n                 // trait_refs we collected in the OpaqueFnEntry as normal trait refs.\n                 _ => {\n-                    traits.entry(fn_once_trait_ref).or_default().extend(\n-                        // Group the return ty with its def id, if we had one.\n-                        entry\n-                            .return_ty\n-                            .map(|ty| (self.tcx().lang_items().fn_once_output().unwrap(), ty)),\n-                    );\n+                    if entry.has_fn_once {\n+                        traits.entry(fn_once_trait_ref).or_default().extend(\n+                            // Group the return ty with its def id, if we had one.\n+                            entry\n+                                .return_ty\n+                                .map(|ty| (self.tcx().lang_items().fn_once_output().unwrap(), ty)),\n+                        );\n+                    }\n                     if let Some(trait_ref) = entry.fn_mut_trait_ref {\n                         traits.entry(trait_ref).or_default();\n                     }\n@@ -943,6 +949,7 @@ pub trait PrettyPrinter<'tcx>:\n                 if let Some((_, ty)) = proj_ty {\n                     entry.return_ty = Some(ty);\n                 }\n+                entry.has_fn_once = true;\n                 return;\n             } else if Some(trait_def_id) == self.tcx().lang_items().fn_mut_trait() {\n                 let super_trait_ref = crate::traits::util::supertraits(self.tcx(), trait_ref)\n@@ -2695,6 +2702,8 @@ pub fn provide(providers: &mut ty::query::Providers) {\n \n #[derive(Default)]\n pub struct OpaqueFnEntry<'tcx> {\n+    // The trait ref is already stored as a key, so just track if we have it as a real predicate\n+    has_fn_once: bool,\n     fn_mut_trait_ref: Option<ty::PolyTraitRef<'tcx>>,\n     fn_trait_ref: Option<ty::PolyTraitRef<'tcx>>,\n     return_ty: Option<ty::Binder<'tcx, Ty<'tcx>>>,"}, {"sha": "045bc720ca70126c9616819fbbe9da04d270c810", "filename": "src/test/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -19,16 +19,16 @@\n +         _4 = hide_foo() -> [return: bb1, unwind: bb3]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:13\n-                                           // + literal: Const { ty: fn() -> impl Fn() -> () {hide_foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n--         _2 = <impl Fn() -> () as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+-         _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n -                                          // mir::Constant\n -                                          // + span: $DIR/issue-78442.rs:11:5: 11:15\n--                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn() -> (), ()) -> <impl Fn() -> () as std::ops::FnOnce<()>>::Output {<impl Fn() -> () as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as std::ops::FnOnce<()>>::Output {<impl Fn() as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n +         _2 = move (*_3)() -> [return: bb5, unwind: bb3]; // scope 1 at $DIR/issue-78442.rs:11:5: 11:17\n       }\n   "}, {"sha": "3190db52286bc9f0755045bf2ed904c6d0848dd0", "filename": "src/test/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -5,8 +5,8 @@\n       debug _baz => _1;                    // in scope 0 at $DIR/issue-78442.rs:9:5: 9:9\n       let mut _0: ();                      // return place in scope 0 at $DIR/issue-78442.rs:10:3: 10:3\n       let _2: ();                          // in scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n--     let mut _3: &impl Fn() -> ();        // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n--     let _4: impl Fn() -> ();             // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+-     let mut _3: &impl Fn();              // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n+-     let _4: impl Fn();                   // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n +     let mut _3: &fn() {foo};             // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n +     let _4: fn() {foo};                  // in scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n       let mut _5: ();                      // in scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n@@ -18,17 +18,17 @@\n           _4 = hide_foo() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:13\n-                                           // + literal: Const { ty: fn() -> impl Fn() -> () {hide_foo}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: fn() -> impl Fn() {hide_foo}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n           _3 = &_4;                        // scope 0 at $DIR/issue-78442.rs:11:5: 11:15\n           StorageLive(_5);                 // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n           nop;                             // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n-          _2 = <impl Fn() -> () as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n+          _2 = <impl Fn() as Fn<()>>::call(move _3, move _5) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-78442.rs:11:5: 11:17\n                                            // mir::Constant\n                                            // + span: $DIR/issue-78442.rs:11:5: 11:15\n-                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn() -> (), ()) -> <impl Fn() -> () as std::ops::FnOnce<()>>::Output {<impl Fn() -> () as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n+                                           // + literal: Const { ty: for<'r> extern \"rust-call\" fn(&'r impl Fn(), ()) -> <impl Fn() as std::ops::FnOnce<()>>::Output {<impl Fn() as std::ops::Fn<()>>::call}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {"}, {"sha": "c731c32832222f7d480fadea359dd2a641920362", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -21,7 +21,7 @@ LL |     type MainFn = impl Fn();\n LL |     pub const BAR: MainFn = bar;\n    |                             ^^^ expected opaque type, found fn item\n    |\n-   = note: expected opaque type `impl Fn() -> ()`\n+   = note: expected opaque type `impl Fn()`\n                   found fn item `fn() {bar}`\n \n error: could not find defining uses"}, {"sha": "37ae3c6802964212393ce02234250e4f84204d72", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -2,16 +2,16 @@ error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak2.rs:13:10\n    |\n LL | fn before() -> impl Fn(i32) {\n-   |                ------------ within this `impl Fn(i32) -> ()`\n+   |                ------------ within this `impl Fn(i32)`\n ...\n LL |     send(before());\n    |     ---- ^^^^^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: within `impl Fn(i32) -> ()`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n+   = help: within `impl Fn(i32)`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22]`\n-   = note: required because it appears within the type `impl Fn(i32) -> ()`\n+   = note: required because it appears within the type `impl Fn(i32)`\n note: required by a bound in `send`\n   --> $DIR/auto-trait-leak2.rs:10:12\n    |\n@@ -27,11 +27,11 @@ LL |     send(after());\n    |     required by a bound introduced by this call\n ...\n LL | fn after() -> impl Fn(i32) {\n-   |               ------------ within this `impl Fn(i32) -> ()`\n+   |               ------------ within this `impl Fn(i32)`\n    |\n-   = help: within `impl Fn(i32) -> ()`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n+   = help: within `impl Fn(i32)`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22]`\n-   = note: required because it appears within the type `impl Fn(i32) -> ()`\n+   = note: required because it appears within the type `impl Fn(i32)`\n note: required by a bound in `send`\n   --> $DIR/auto-trait-leak2.rs:10:12\n    |"}, {"sha": "5019e544bd562566540a1a8b2a94823bfa9f6cfd", "filename": "src/test/ui/impl-trait/issue-87450.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-87450.stderr?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -17,10 +17,10 @@ LL | fn foo() -> impl Fn() {\n    |             ^^^^^^^^^ recursive opaque type\n ...\n LL |     wrap(wrap(wrap(wrap(wrap(wrap(wrap(foo())))))))\n-   |     ----------------------------------------------- returning here with type `impl Fn() -> ()`\n+   |     ----------------------------------------------- returning here with type `impl Fn()`\n ...\n LL | fn wrap(f: impl Fn()) -> impl Fn() {\n-   |                          --------- returning this opaque type `impl Fn() -> ()`\n+   |                          --------- returning this opaque type `impl Fn()`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "b1460096ded66d3119023e21099d1886ce602f53", "filename": "src/test/ui/impl-trait/issues/issue-86201.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86201.stderr?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | static STATIC_FN: FunType = some_fn;\n    |                             ^^^^^^^ expected opaque type, found fn item\n    |\n-   = note: expected opaque type `impl Fn<()> + FnOnce<()>`\n+   = note: expected opaque type `impl Fn<()>`\n                   found fn item `fn() {some_fn}`\n \n error: could not find defining uses"}, {"sha": "a53e28f7246e64fd8f2b7b4a82152bfa6a0ea478", "filename": "src/test/ui/issues/issue-59494.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fissues%2Fissue-59494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fissues%2Fissue-59494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59494.rs?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -19,5 +19,5 @@ fn main() {\n     let g = |(a, _)| a;\n     let t7 = |env| |a| |b| t7p(f, g)(((env, a), b));\n     let t8 = t8n(t7, t7p(f, g));\n-    //~^ ERROR: expected a `Fn<(_,)>` closure, found `impl Fn(((_, _), _)) -> ()` [E0277]\n+    //~^ ERROR: expected a `Fn<(_,)>` closure, found `impl Fn(((_, _), _))` [E0277]\n }"}, {"sha": "a9284535e4dc4221a6c1faf198fc113706f2ec5c", "filename": "src/test/ui/issues/issue-59494.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -1,12 +1,12 @@\n-error[E0277]: expected a `Fn<(_,)>` closure, found `impl Fn(((_, _), _)) -> ()`\n+error[E0277]: expected a `Fn<(_,)>` closure, found `impl Fn(((_, _), _))`\n   --> $DIR/issue-59494.rs:21:22\n    |\n LL |     let t8 = t8n(t7, t7p(f, g));\n-   |              ---     ^^^^^^^^^ expected an `Fn<(_,)>` closure, found `impl Fn(((_, _), _)) -> ()`\n+   |              ---     ^^^^^^^^^ expected an `Fn<(_,)>` closure, found `impl Fn(((_, _), _))`\n    |              |\n    |              required by a bound introduced by this call\n    |\n-   = help: the trait `Fn<(_,)>` is not implemented for `impl Fn(((_, _), _)) -> ()`\n+   = help: the trait `Fn<(_,)>` is not implemented for `impl Fn(((_, _), _))`\n note: required by a bound in `t8n`\n   --> $DIR/issue-59494.rs:5:45\n    |"}, {"sha": "3a62b6a21a56a6dc859d77adc2bece27ea285ebc", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -9,7 +9,7 @@ pub fn ret_closure() -> A {\n \n extern \"C\" {\n     pub fn a(_: A);\n-    //~^ ERROR `extern` block uses type `impl Fn() -> ()`, which is not FFI-safe [improper_ctypes]\n+    //~^ ERROR `extern` block uses type `impl Fn()`, which is not FFI-safe [improper_ctypes]\n }\n \n fn main() {}"}, {"sha": "5afbef778b3e35d29b38472d517b0f48729794fd", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cc117930b02b86795946e6b8748166c17fd4f16/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=9cc117930b02b86795946e6b8748166c17fd4f16", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl Fn() -> ()`, which is not FFI-safe\n+error: `extern` block uses type `impl Fn()`, which is not FFI-safe\n   --> $DIR/opaque-ty-ffi-unsafe.rs:11:17\n    |\n LL |     pub fn a(_: A);"}]}