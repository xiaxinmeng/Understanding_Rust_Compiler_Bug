{"sha": "27393d5ca63c55313182bd6cbb8ef2ecd4c1472f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MzkzZDVjYTYzYzU1MzEzMTgyYmQ2Y2JiOGVmMmVjZDRjMTQ3MmY=", "commit": {"author": {"name": "Count Count", "email": "countvoncount123456@gmail.com", "date": "2021-03-21T07:19:34Z"}, "committer": {"name": "Count Count", "email": "countvoncount123456@gmail.com", "date": "2021-03-24T06:10:22Z"}, "message": "fix incomplete UTF-8 writes in Windows console stdio", "tree": {"sha": "7d4761317fd8b31ae15d8919c8e6f4e1f571c154", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d4761317fd8b31ae15d8919c8e6f4e1f571c154"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27393d5ca63c55313182bd6cbb8ef2ecd4c1472f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27393d5ca63c55313182bd6cbb8ef2ecd4c1472f", "html_url": "https://github.com/rust-lang/rust/commit/27393d5ca63c55313182bd6cbb8ef2ecd4c1472f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27393d5ca63c55313182bd6cbb8ef2ecd4c1472f/comments", "author": {"login": "Count-Count", "id": 51271955, "node_id": "MDQ6VXNlcjUxMjcxOTU1", "avatar_url": "https://avatars.githubusercontent.com/u/51271955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Count-Count", "html_url": "https://github.com/Count-Count", "followers_url": "https://api.github.com/users/Count-Count/followers", "following_url": "https://api.github.com/users/Count-Count/following{/other_user}", "gists_url": "https://api.github.com/users/Count-Count/gists{/gist_id}", "starred_url": "https://api.github.com/users/Count-Count/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Count-Count/subscriptions", "organizations_url": "https://api.github.com/users/Count-Count/orgs", "repos_url": "https://api.github.com/users/Count-Count/repos", "events_url": "https://api.github.com/users/Count-Count/events{/privacy}", "received_events_url": "https://api.github.com/users/Count-Count/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Count-Count", "id": 51271955, "node_id": "MDQ6VXNlcjUxMjcxOTU1", "avatar_url": "https://avatars.githubusercontent.com/u/51271955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Count-Count", "html_url": "https://github.com/Count-Count", "followers_url": "https://api.github.com/users/Count-Count/followers", "following_url": "https://api.github.com/users/Count-Count/following{/other_user}", "gists_url": "https://api.github.com/users/Count-Count/gists{/gist_id}", "starred_url": "https://api.github.com/users/Count-Count/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Count-Count/subscriptions", "organizations_url": "https://api.github.com/users/Count-Count/orgs", "repos_url": "https://api.github.com/users/Count-Count/repos", "events_url": "https://api.github.com/users/Count-Count/events{/privacy}", "received_events_url": "https://api.github.com/users/Count-Count/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db492ecd5ba6bd82205612cebb9034710653f0c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/db492ecd5ba6bd82205612cebb9034710653f0c2", "html_url": "https://github.com/rust-lang/rust/commit/db492ecd5ba6bd82205612cebb9034710653f0c2"}], "stats": {"total": 116, "additions": 102, "deletions": 14}, "files": [{"sha": "160d9bcd4d22616efb0a5fce3d51330d270152a8", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 102, "deletions": 14, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/27393d5ca63c55313182bd6cbb8ef2ecd4c1472f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27393d5ca63c55313182bd6cbb8ef2ecd4c1472f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=27393d5ca63c55313182bd6cbb8ef2ecd4c1472f", "patch": "@@ -14,8 +14,18 @@ use crate::sys::handle::Handle;\n pub struct Stdin {\n     surrogate: u16,\n }\n-pub struct Stdout;\n-pub struct Stderr;\n+pub struct Stdout {\n+    incomplete_utf8: IncompleteUtf8,\n+}\n+\n+pub struct Stderr {\n+    incomplete_utf8: IncompleteUtf8,\n+}\n+\n+struct IncompleteUtf8 {\n+    bytes: [u8; 4],\n+    len: u8,\n+}\n \n // Apparently Windows doesn't handle large reads on stdin or writes to stdout/stderr well (see\n // #13304 for details).\n@@ -50,7 +60,27 @@ fn is_console(handle: c::HANDLE) -> bool {\n     unsafe { c::GetConsoleMode(handle, &mut mode) != 0 }\n }\n \n-fn write(handle_id: c::DWORD, data: &[u8]) -> io::Result<usize> {\n+// Simple reimplementation of std::str::utf8_char_width() which is feature-gated\n+fn utf8_char_width(b: u8) -> usize {\n+    match b {\n+        0x00..=0x7F => 1,\n+        0x80..=0xC1 => 0,\n+        0xC2..=0xDF => 2,\n+        0xE0..=0xEF => 3,\n+        0xF0..=0xF4 => 4,\n+        0xF5..=0xFF => 0,\n+    }\n+}\n+\n+fn write(\n+    handle_id: c::DWORD,\n+    data: &[u8],\n+    incomplete_utf8: &mut IncompleteUtf8,\n+) -> io::Result<usize> {\n+    if data.is_empty() {\n+        return Ok(0);\n+    }\n+\n     let handle = get_handle(handle_id)?;\n     if !is_console(handle) {\n         let handle = Handle::new(handle);\n@@ -59,22 +89,74 @@ fn write(handle_id: c::DWORD, data: &[u8]) -> io::Result<usize> {\n         return ret;\n     }\n \n-    // As the console is meant for presenting text, we assume bytes of `data` come from a string\n-    // and are encoded as UTF-8, which needs to be encoded as UTF-16.\n+    match incomplete_utf8.len {\n+        0 => {}\n+        1..=3 => {\n+            if data[0] >> 6 != 0b10 {\n+                incomplete_utf8.len = 0;\n+                // not a continuation byte - reject\n+                return Err(io::Error::new(\n+                    io::ErrorKind::InvalidData,\n+                    \"Windows stdio in console mode does not support writing non-UTF-8 byte sequences\",\n+                ));\n+            }\n+            incomplete_utf8.bytes[incomplete_utf8.len as usize] = data[0];\n+            incomplete_utf8.len += 1;\n+            let char_width = utf8_char_width(incomplete_utf8.bytes[0]);\n+            if (incomplete_utf8.len as usize) < char_width {\n+                // more bytes needed\n+                return Ok(1);\n+            }\n+            let s = str::from_utf8(&incomplete_utf8.bytes[0..incomplete_utf8.len as usize]);\n+            incomplete_utf8.len = 0;\n+            match s {\n+                Ok(s) => {\n+                    assert_eq!(char_width, s.len());\n+                    let written = write_valid_utf8(handle, s)?;\n+                    assert_eq!(written, s.len()); // guaranteed by write0() for single codepoint writes\n+                    return Ok(1);\n+                }\n+                Err(_) => {\n+                    return Err(io::Error::new(\n+                        io::ErrorKind::InvalidData,\n+                        \"Windows stdio in console mode does not support writing non-UTF-8 byte sequences\",\n+                    ));\n+                }\n+            }\n+        }\n+        _ => {\n+            panic!(\"Unexpected number of incomplete UTF-8 chars.\");\n+        }\n+    }\n+\n+    // As the console is meant for presenting text, we assume bytes of `data` are encoded as UTF-8,\n+    // which needs to be encoded as UTF-16.\n     //\n     // If the data is not valid UTF-8 we write out as many bytes as are valid.\n-    // Only when there are no valid bytes (which will happen on the next call), return an error.\n+    // If the first byte is invalid it is either first byte of a multi-byte sequence but the\n+    // provided byte slice is too short or it is the first byte of an invalide multi-byte sequence.\n     let len = cmp::min(data.len(), MAX_BUFFER_SIZE / 2);\n     let utf8 = match str::from_utf8(&data[..len]) {\n         Ok(s) => s,\n         Err(ref e) if e.valid_up_to() == 0 => {\n-            return Err(io::Error::new_const(\n-                io::ErrorKind::InvalidData,\n-                &\"Windows stdio in console mode does not support writing non-UTF-8 byte sequences\",\n-            ));\n+            if data.len() < utf8_char_width(data[0]) {\n+                incomplete_utf8.bytes[0] = data[0];\n+                incomplete_utf8.len = 1;\n+                return Ok(1);\n+            } else {\n+                return Err(io::Error::new_const(\n+                    io::ErrorKind::InvalidData,\n+                    &\"Windows stdio in console mode does not support writing non-UTF-8 byte sequences\",\n+                ));\n+            }\n         }\n         Err(e) => str::from_utf8(&data[..e.valid_up_to()]).unwrap(),\n     };\n+\n+    write_valid_utf8(handle, utf8)\n+}\n+\n+fn write_valid_utf8(handle: c::HANDLE, utf8: &str) -> io::Result<usize> {\n     let mut utf16 = [0u16; MAX_BUFFER_SIZE / 2];\n     let mut len_utf16 = 0;\n     for (chr, dest) in utf8.encode_utf16().zip(utf16.iter_mut()) {\n@@ -254,15 +336,21 @@ fn utf16_to_utf8(utf16: &[u16], utf8: &mut [u8]) -> io::Result<usize> {\n     Ok(written)\n }\n \n+impl IncompleteUtf8 {\n+    pub const fn new() -> IncompleteUtf8 {\n+        IncompleteUtf8 { bytes: [0; 4], len: 0 }\n+    }\n+}\n+\n impl Stdout {\n     pub const fn new() -> Stdout {\n-        Stdout\n+        Stdout { incomplete_utf8: IncompleteUtf8::new() }\n     }\n }\n \n impl io::Write for Stdout {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        write(c::STD_OUTPUT_HANDLE, buf)\n+        write(c::STD_ERROR_HANDLE, buf, &mut self.incomplete_utf8)\n     }\n \n     fn flush(&mut self) -> io::Result<()> {\n@@ -272,13 +360,13 @@ impl io::Write for Stdout {\n \n impl Stderr {\n     pub const fn new() -> Stderr {\n-        Stderr\n+        Stderr { incomplete_utf8: IncompleteUtf8::new() }\n     }\n }\n \n impl io::Write for Stderr {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        write(c::STD_ERROR_HANDLE, buf)\n+        write(c::STD_ERROR_HANDLE, buf, &mut self.incomplete_utf8)\n     }\n \n     fn flush(&mut self) -> io::Result<()> {"}]}