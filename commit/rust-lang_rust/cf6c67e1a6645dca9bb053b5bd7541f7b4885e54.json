{"sha": "cf6c67e1a6645dca9bb053b5bd7541f7b4885e54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNmM2N2UxYTY2NDVkY2E5YmIwNTNiNWJkNzU0MWY3YjQ4ODVlNTQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-25T22:32:48Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-25T22:32:48Z"}, "message": "Replace MacroStyle with ast::DelimToken", "tree": {"sha": "ce15107b3bb5cecc53d500bb5f80186d62df4783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce15107b3bb5cecc53d500bb5f80186d62df4783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf6c67e1a6645dca9bb053b5bd7541f7b4885e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6c67e1a6645dca9bb053b5bd7541f7b4885e54", "html_url": "https://github.com/rust-lang/rust/commit/cf6c67e1a6645dca9bb053b5bd7541f7b4885e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf6c67e1a6645dca9bb053b5bd7541f7b4885e54/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903de92dae924f65821abe446f7ef1ebe29a945e", "url": "https://api.github.com/repos/rust-lang/rust/commits/903de92dae924f65821abe446f7ef1ebe29a945e", "html_url": "https://github.com/rust-lang/rust/commit/903de92dae924f65821abe446f7ef1ebe29a945e"}], "stats": {"total": 47, "additions": 15, "deletions": 32}, "files": [{"sha": "0387fb3a96356193ff473f7e6eb6cb751c063dcd", "filename": "src/macros.rs", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cf6c67e1a6645dca9bb053b5bd7541f7b4885e54/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf6c67e1a6645dca9bb053b5bd7541f7b4885e54/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=cf6c67e1a6645dca9bb053b5bd7541f7b4885e54", "patch": "@@ -45,14 +45,6 @@ use utils::{format_visibility, mk_sp, wrap_str};\n \n const FORCED_BRACKET_MACROS: &[&str] = &[\"vec!\"];\n \n-// FIXME: use the enum from libsyntax?\n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n-enum MacroStyle {\n-    Parens,\n-    Brackets,\n-    Braces,\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum MacroPosition {\n     Item,\n@@ -61,16 +53,6 @@ pub enum MacroPosition {\n     Pat,\n }\n \n-impl MacroStyle {\n-    fn opener(&self) -> &'static str {\n-        match *self {\n-            MacroStyle::Parens => \"(\",\n-            MacroStyle::Brackets => \"[\",\n-            MacroStyle::Braces => \"{\",\n-        }\n-    }\n-}\n-\n #[derive(Debug)]\n pub enum MacroArg {\n     Expr(ptr::P<ast::Expr>),\n@@ -177,7 +159,7 @@ pub fn rewrite_macro_inner(\n     let macro_name = rewrite_macro_name(&mac.node.path, extra_ident);\n \n     let style = if FORCED_BRACKET_MACROS.contains(&&macro_name[..]) {\n-        MacroStyle::Brackets\n+        DelimToken::Bracket\n     } else {\n         original_style\n     };\n@@ -186,12 +168,13 @@ pub fn rewrite_macro_inner(\n     let has_comment = contains_comment(context.snippet(mac.span));\n     if ts.is_empty() && !has_comment {\n         return match style {\n-            MacroStyle::Parens if position == MacroPosition::Item => {\n+            DelimToken::Paren if position == MacroPosition::Item => {\n                 Some(format!(\"{}();\", macro_name))\n             }\n-            MacroStyle::Parens => Some(format!(\"{}()\", macro_name)),\n-            MacroStyle::Brackets => Some(format!(\"{}[]\", macro_name)),\n-            MacroStyle::Braces => Some(format!(\"{}{{}}\", macro_name)),\n+            DelimToken::Paren => Some(format!(\"{}()\", macro_name)),\n+            DelimToken::Bracket => Some(format!(\"{}[]\", macro_name)),\n+            DelimToken::Brace => Some(format!(\"{}{{}}\", macro_name)),\n+            _ => unreachable!(),\n         };\n     }\n     // Format well-known macros which cannot be parsed as a valid AST.\n@@ -207,7 +190,7 @@ pub fn rewrite_macro_inner(\n     let mut vec_with_semi = false;\n     let mut trailing_comma = false;\n \n-    if MacroStyle::Braces != style {\n+    if DelimToken::Brace != style {\n         loop {\n             match parse_macro_arg(&mut parser) {\n                 Some(arg) => arg_vec.push(arg),\n@@ -250,7 +233,7 @@ pub fn rewrite_macro_inner(\n     }\n \n     match style {\n-        MacroStyle::Parens => {\n+        DelimToken::Paren => {\n             // Format macro invocation as function call, preserve the trailing\n             // comma because not all macros support them.\n             overflow::rewrite_with_parens(\n@@ -270,8 +253,7 @@ pub fn rewrite_macro_inner(\n                 _ => rw,\n             })\n         }\n-        MacroStyle::Brackets => {\n-            let mac_shape = shape.offset_left(macro_name.len())?;\n+        DelimToken::Bracket => {\n             // Handle special case: `vec![expr; expr]`\n             if vec_with_semi {\n                 let (lbr, rbr) = if context.config.spaces_within_parens_and_brackets() {\n@@ -326,10 +308,11 @@ pub fn rewrite_macro_inner(\n                 Some(format!(\"{}{}{}\", macro_name, rewrite, comma))\n             }\n         }\n-        MacroStyle::Braces => {\n+        DelimToken::Brace => {\n             // Skip macro invocations with braces, for now.\n             indent_macro_snippet(context, context.snippet(mac.span), shape.indent)\n         }\n+        _ => unreachable!(),\n     }\n }\n \n@@ -1010,18 +993,18 @@ pub fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext) -> Option<ast::\n     }\n }\n \n-fn macro_style(mac: &ast::Mac, context: &RewriteContext) -> MacroStyle {\n+fn macro_style(mac: &ast::Mac, context: &RewriteContext) -> DelimToken {\n     let snippet = context.snippet(mac.span);\n     let paren_pos = snippet.find_uncommented(\"(\").unwrap_or(usize::max_value());\n     let bracket_pos = snippet.find_uncommented(\"[\").unwrap_or(usize::max_value());\n     let brace_pos = snippet.find_uncommented(\"{\").unwrap_or(usize::max_value());\n \n     if paren_pos < bracket_pos && paren_pos < brace_pos {\n-        MacroStyle::Parens\n+        DelimToken::Paren\n     } else if bracket_pos < brace_pos {\n-        MacroStyle::Brackets\n+        DelimToken::Bracket\n     } else {\n-        MacroStyle::Braces\n+        DelimToken::Brace\n     }\n }\n "}]}