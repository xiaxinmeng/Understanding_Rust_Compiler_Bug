{"sha": "82c4f5915bfb330db596d06b74eb406d21845f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYzRmNTkxNWJmYjMzMGRiNTk2ZDA2Yjc0ZWI0MDZkMjE4NDVmOWU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-05-11T13:27:42Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-05-11T13:27:42Z"}, "message": "Rollup merge of #33260 - mrmiywj:help-on-pattern-guard, r=guillaumegomez\n\nadd help on pattern guard", "tree": {"sha": "67172938ee476ca5630b4a81d94b5d0cbe542890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67172938ee476ca5630b4a81d94b5d0cbe542890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82c4f5915bfb330db596d06b74eb406d21845f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82c4f5915bfb330db596d06b74eb406d21845f9e", "html_url": "https://github.com/rust-lang/rust/commit/82c4f5915bfb330db596d06b74eb406d21845f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82c4f5915bfb330db596d06b74eb406d21845f9e/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e0099a2085e3c3de68242d8550970d2ba88f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e0099a2085e3c3de68242d8550970d2ba88f12", "html_url": "https://github.com/rust-lang/rust/commit/c5e0099a2085e3c3de68242d8550970d2ba88f12"}, {"sha": "201d9ed0bbf05a8cc7015165a8f36bb87ef79a60", "url": "https://api.github.com/repos/rust-lang/rust/commits/201d9ed0bbf05a8cc7015165a8f36bb87ef79a60", "html_url": "https://github.com/rust-lang/rust/commit/201d9ed0bbf05a8cc7015165a8f36bb87ef79a60"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "c86c22b1e0f3b7f1b56070e2fce4d685554e92ac", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/82c4f5915bfb330db596d06b74eb406d21845f9e/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82c4f5915bfb330db596d06b74eb406d21845f9e/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=82c4f5915bfb330db596d06b74eb406d21845f9e", "patch": "@@ -215,22 +215,63 @@ match Some(\"hi\".to_string()) {\n The variable `s` has type `String`, and its use in the guard is as a variable of\n type `String`. The guard code effectively executes in a separate scope to the\n body of the arm, so the value would be moved into this anonymous scope and\n-therefore become unavailable in the body of the arm. Although this example seems\n-innocuous, the problem is most clear when considering functions that take their\n-argument by value.\n+therefore becomes unavailable in the body of the arm.\n \n-```compile_fail\n+The problem above can be solved by using the `ref` keyword.\n+\n+```\n match Some(\"hi\".to_string()) {\n-    Some(s) if { drop(s); false } => (),\n-    Some(s) => {}, // use s.\n+    Some(ref s) if s.len() == 0 => {},\n     _ => {},\n }\n ```\n \n-The value would be dropped in the guard then become unavailable not only in the\n-body of that arm but also in all subsequent arms! The solution is to bind by\n-reference when using guards or refactor the entire expression, perhaps by\n-putting the condition inside the body of the arm.\n+Though this example seems innocuous and easy to solve, the problem becomes clear\n+when it encounters functions which consume the value:\n+\n+```compile_fail\n+struct A{}\n+\n+impl A {\n+    fn consume(self) -> usize {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let a = Some(A{});\n+    match a {\n+        Some(y) if y.consume() > 0 => {}\n+        _ => {}\n+    }\n+}\n+```\n+\n+In this situation, even the `ref` keyword cannot solve it, since borrowed\n+content cannot be moved. This problem cannot be solved generally. If the value\n+can be cloned, here is a not-so-specific solution:\n+\n+```\n+#[derive(Clone)]\n+struct A{}\n+\n+impl A {\n+    fn consume(self) -> usize {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let a = Some(A{});\n+    match a{\n+        Some(ref y) if y.clone().consume() > 0 => {}\n+        _ => {}\n+    }\n+}\n+```\n+\n+If the value will be consumed in the pattern guard, using its clone will not\n+move its ownership, so the code works.\n \"##,\n \n E0009: r##\""}]}