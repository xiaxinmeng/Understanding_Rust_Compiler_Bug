{"sha": "c6cd57dd860efbe0cb7506dfad93462bcb520d74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2Y2Q1N2RkODYwZWZiZTBjYjc1MDZkZmFkOTM0NjJiY2I1MjBkNzQ=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T10:25:03Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T15:06:28Z"}, "message": "Rollup merge of #55292 - estebank:macro-eof, r=pnkfelix\n\nMacro diagnostics tweaks\n\nFix #30128, fix #10951 by adding an appropriate span to the diagnostic.\nFix #26288 by suggesting adding semicolon to macro call.", "tree": {"sha": "3f744ab35258bbdd04afe712247a31e20cd6b521", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f744ab35258bbdd04afe712247a31e20cd6b521"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6cd57dd860efbe0cb7506dfad93462bcb520d74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvTLXUACgkQ/vbIBR0O\nATxjFg//Xs6mezFm9TCR0ct9WF/TOiF36BWCpCg+67Jces69EGTo+J1i60yTBMaW\nuDNi8OQfYYCdUr9YI6h5QWwkT7+NpKDSuOUTAj6uTec0caTwxeDCoiOxrV201pK7\nkosYRYIOb97lKb9Gd9kemf2T6tNpsWRztAYHth/f++iYufdxYCNpKbTsUwvH+TrA\n5Q12L30QNxaaGZd7oPkbQVnDkLzDt9YKFUGrxkmgkJXnPDlLBPdfkQnOQ5HQSUgN\nHBnLAgflkIttF7+zMwjP4o2oYvBpVc0Cb+/ZAOvtYZUS+WbU53lL9dltnJlzVlrI\nOD0yDMLYbbHCq28lP7rcULID1mYOh/3MfdWvvq/RrYb+sxe3kHBnx6aQX8eMakOs\n08WHNSI8QLjyI/jtLny94YL3BV+RNPKNxeybRHY+53fMYb7S04FOmdmMRcLCCOYD\niQvnsQO+rt1Ar7ng/00czVojRWi10qjB5cQJ/14vH0f7NVrExQydoiQMg+CgKN8i\ncQefFYMfjfDhIN9HYbvL3CXw4BHvyUyEFpLU2RhEdsf4cJ9GMrbKEWxbklQ3jGxS\nwWir02GwOX5j5JBYKfPizHD908tc7kaRf1eibBvRdr1oxPTYsr6IsPP7qBhGHV9h\nEfQ/K8t+h9VQXbNC5G/tc+0SAF6zBqq+5qV5OPuh1/tY9pblbCA=\n=v/QZ\n-----END PGP SIGNATURE-----", "payload": "tree 3f744ab35258bbdd04afe712247a31e20cd6b521\nparent 9111fab74df4e0f6f2b8bfb5936f3772ba59a960\nparent f8818cbf8fc30ac626b2a0a306736c1293257209\nauthor kennytm <kennytm@gmail.com> 1540549503 +0800\ncommitter kennytm <kennytm@gmail.com> 1540566388 +0800\n\nRollup merge of #55292 - estebank:macro-eof, r=pnkfelix\n\nMacro diagnostics tweaks\n\nFix #30128, fix #10951 by adding an appropriate span to the diagnostic.\nFix #26288 by suggesting adding semicolon to macro call.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6cd57dd860efbe0cb7506dfad93462bcb520d74", "html_url": "https://github.com/rust-lang/rust/commit/c6cd57dd860efbe0cb7506dfad93462bcb520d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6cd57dd860efbe0cb7506dfad93462bcb520d74/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9111fab74df4e0f6f2b8bfb5936f3772ba59a960", "url": "https://api.github.com/repos/rust-lang/rust/commits/9111fab74df4e0f6f2b8bfb5936f3772ba59a960", "html_url": "https://github.com/rust-lang/rust/commit/9111fab74df4e0f6f2b8bfb5936f3772ba59a960"}, {"sha": "f8818cbf8fc30ac626b2a0a306736c1293257209", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8818cbf8fc30ac626b2a0a306736c1293257209", "html_url": "https://github.com/rust-lang/rust/commit/f8818cbf8fc30ac626b2a0a306736c1293257209"}], "stats": {"total": 158, "additions": 123, "deletions": 35}, "files": [{"sha": "4deeb4a43d994f25df6c4eaad2096022177ac7ab", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -1036,10 +1036,28 @@ impl<'a> Parser<'a> {\n             // Avoid emitting backtrace info twice.\n             let def_site_span = self.span.with_ctxt(SyntaxContext::empty());\n             let mut err = self.diagnostic().struct_span_err(def_site_span, &msg);\n-            let msg = format!(\"caused by the macro expansion here; the usage \\\n-                               of `{}!` is likely invalid in {} context\",\n-                               macro_path, kind_name);\n-            err.span_note(span, &msg).emit();\n+            err.span_label(span, \"caused by the macro expansion here\");\n+            let msg = format!(\n+                \"the usage of `{}!` is likely invalid in {} context\",\n+                macro_path,\n+                kind_name,\n+            );\n+            err.note(&msg);\n+            let semi_span = self.sess.source_map().next_point(span);\n+\n+            let semi_full_span = semi_span.to(self.sess.source_map().next_point(semi_span));\n+            match self.sess.source_map().span_to_snippet(semi_full_span) {\n+                Ok(ref snippet) if &snippet[..] != \";\" && kind_name == \"expression\" => {\n+                    err.span_suggestion_with_applicability(\n+                        semi_span,\n+                        \"you might be missing a semicolon here\",\n+                        \";\".to_owned(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                _ => {}\n+            }\n+            err.emit();\n         }\n     }\n }"}, {"sha": "5e53b8b99c77142e3e3e56ab800962acf13e88f7", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -50,7 +50,12 @@ pub struct ParserAnyMacro<'a> {\n impl<'a> ParserAnyMacro<'a> {\n     pub fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser } = *self;\n-        let fragment = panictry!(parser.parse_ast_fragment(kind, true));\n+        let fragment = panictry!(parser.parse_ast_fragment(kind, true).map_err(|mut e| {\n+            if e.span.is_dummy() {  // Get around lack of span in error (#30128)\n+                e.set_span(site_span);\n+            }\n+            e\n+        }));\n \n         // We allow semicolons at the end of expressions -- e.g. the semicolon in\n         // `macro_rules! m { () => { panic!(); } }` isn't parsed by `.parse_expr()`,"}, {"sha": "639155636edfa9ecf7f1e7375d9f3aaeaff79f34", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -612,6 +612,17 @@ impl MultiSpan {\n         &self.primary_spans\n     }\n \n+    /// Returns `true` if this contains only a dummy primary span with any hygienic context.\n+    pub fn is_dummy(&self) -> bool {\n+        let mut is_dummy = true;\n+        for span in &self.primary_spans {\n+            if !span.is_dummy() {\n+                is_dummy = false;\n+            }\n+        }\n+        is_dummy\n+    }\n+\n     /// Replaces all occurrences of one Span with another. Used to move Spans in areas that don't\n     /// display well (like std macros). Returns true if replacements occurred.\n     pub fn replace(&mut self, before: Span, after: Span) -> bool {"}, {"sha": "028ed048d6525c768d29334178b0f0fcc2fd4401", "filename": "src/test/ui/issues/issue-30007.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fissues%2Fissue-30007.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fissues%2Fissue-30007.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30007.stderr?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -3,12 +3,11 @@ error: macro expansion ignores token `;` and any following\n    |\n LL |     () => ( String ; );     //~ ERROR macro expansion ignores token `;`\n    |                    ^\n-   |\n-note: caused by the macro expansion here; the usage of `t!` is likely invalid in type context\n-  --> $DIR/issue-30007.rs:16:16\n-   |\n+...\n LL |     let i: Vec<t!()>;\n-   |                ^^^^\n+   |                ---- caused by the macro expansion here\n+   |\n+   = note: the usage of `t!` is likely invalid in type context\n \n error: aborting due to previous error\n "}, {"sha": "005e1d1c8e7cf95679894b7dfd197f52ab0ea5dd", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -3,36 +3,33 @@ error: macro expansion ignores token `;` and any following\n    |\n LL |     () => ( i ; typeof );   //~ ERROR expected expression, found reserved keyword `typeof`\n    |               ^\n-   |\n-note: caused by the macro expansion here; the usage of `m!` is likely invalid in type context\n-  --> $DIR/macro-context.rs:20:12\n-   |\n+...\n LL |     let a: m!();\n-   |            ^^^^\n+   |            ---- caused by the macro expansion here\n+   |\n+   = note: the usage of `m!` is likely invalid in type context\n \n error: macro expansion ignores token `typeof` and any following\n   --> $DIR/macro-context.rs:13:17\n    |\n LL |     () => ( i ; typeof );   //~ ERROR expected expression, found reserved keyword `typeof`\n    |                 ^^^^^^\n-   |\n-note: caused by the macro expansion here; the usage of `m!` is likely invalid in expression context\n-  --> $DIR/macro-context.rs:21:13\n-   |\n+...\n LL |     let i = m!();\n-   |             ^^^^\n+   |             ---- caused by the macro expansion here\n+   |\n+   = note: the usage of `m!` is likely invalid in expression context\n \n error: macro expansion ignores token `;` and any following\n   --> $DIR/macro-context.rs:13:15\n    |\n LL |     () => ( i ; typeof );   //~ ERROR expected expression, found reserved keyword `typeof`\n    |               ^\n-   |\n-note: caused by the macro expansion here; the usage of `m!` is likely invalid in pattern context\n-  --> $DIR/macro-context.rs:23:9\n-   |\n+...\n LL |         m!() => {}\n-   |         ^^^^\n+   |         ---- caused by the macro expansion here\n+   |\n+   = note: the usage of `m!` is likely invalid in pattern context\n \n error: expected expression, found reserved keyword `typeof`\n   --> $DIR/macro-context.rs:13:17"}, {"sha": "cf8572aefa242eaa050f7b52132933f0d6596a5b", "filename": "src/test/ui/macros/macro-in-expression-context-2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -0,0 +1,7 @@\n+macro_rules! empty { () => () }\n+\n+fn main() {\n+    match 42 {\n+        _ => { empty!() }\n+    };\n+}"}, {"sha": "80d5dbd66cc29f4e3a1213a5b34c3c0dab88669d", "filename": "src/test/ui/macros/macro-in-expression-context-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -0,0 +1,8 @@\n+error: expected expression, found `<eof>`\n+  --> $DIR/macro-in-expression-context-2.rs:5:16\n+   |\n+LL |         _ => { empty!() }\n+   |                ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "df36db0f49e72b6a46186e169bd7c34bc3a426db", "filename": "src/test/ui/macros/macro-in-expression-context.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+macro_rules! foo {\n+    () => {\n+        assert_eq!(\"A\", \"A\");\n+        assert_eq!(\"B\", \"B\");\n+    }\n+    //~^^ ERROR macro expansion ignores token `assert_eq` and any following\n+    //~| NOTE the usage of `foo!` is likely invalid in expression context\n+}\n+\n+fn main() {\n+    foo!();\n+    //~^ NOTE caused by the macro expansion here\n+}"}, {"sha": "b3f5e568967e8604a1ae0153575140d0e6113128", "filename": "src/test/ui/macros/macro-in-expression-context.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+macro_rules! foo {\n+    () => {\n+        assert_eq!(\"A\", \"A\");\n+        assert_eq!(\"B\", \"B\");\n+    }\n+    //~^^ ERROR macro expansion ignores token `assert_eq` and any following\n+    //~| NOTE the usage of `foo!` is likely invalid in expression context\n+}\n+\n+fn main() {\n+    foo!()\n+    //~^ NOTE caused by the macro expansion here\n+}"}, {"sha": "d27d6fbaef7a68fef3f963bf260ca75ba5a375a6", "filename": "src/test/ui/macros/macro-in-expression-context.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -0,0 +1,15 @@\n+error: macro expansion ignores token `assert_eq` and any following\n+  --> $DIR/macro-in-expression-context.rs:6:9\n+   |\n+LL |         assert_eq!(\"B\", \"B\");\n+   |         ^^^^^^^^^\n+...\n+LL |     foo!()\n+   |     ------- help: you might be missing a semicolon here: `;`\n+   |     |\n+   |     caused by the macro expansion here\n+   |\n+   = note: the usage of `foo!` is likely invalid in expression context\n+\n+error: aborting due to previous error\n+"}, {"sha": "806aca511d0ae9483b79a6258421b903a65b85f7", "filename": "src/test/ui/parser/macro/macro-incomplete-parse.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6cd57dd860efbe0cb7506dfad93462bcb520d74/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr?ref=c6cd57dd860efbe0cb7506dfad93462bcb520d74", "patch": "@@ -3,12 +3,11 @@ error: macro expansion ignores token `,` and any following\n    |\n LL |         , //~ ERROR macro expansion ignores token `,`\n    |         ^\n-   |\n-note: caused by the macro expansion here; the usage of `ignored_item!` is likely invalid in item context\n-  --> $DIR/macro-incomplete-parse.rs:31:1\n-   |\n+...\n LL | ignored_item!();\n-   | ^^^^^^^^^^^^^^^^\n+   | ---------------- caused by the macro expansion here\n+   |\n+   = note: the usage of `ignored_item!` is likely invalid in item context\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n   --> $DIR/macro-incomplete-parse.rs:22:14\n@@ -24,12 +23,11 @@ error: macro expansion ignores token `,` and any following\n    |\n LL |     () => ( 1, 2 ) //~ ERROR macro expansion ignores token `,`\n    |              ^\n-   |\n-note: caused by the macro expansion here; the usage of `ignored_pat!` is likely invalid in pattern context\n-  --> $DIR/macro-incomplete-parse.rs:36:9\n-   |\n+...\n LL |         ignored_pat!() => (),\n-   |         ^^^^^^^^^^^^^^\n+   |         -------------- caused by the macro expansion here\n+   |\n+   = note: the usage of `ignored_pat!` is likely invalid in pattern context\n \n error: aborting due to 3 previous errors\n "}]}