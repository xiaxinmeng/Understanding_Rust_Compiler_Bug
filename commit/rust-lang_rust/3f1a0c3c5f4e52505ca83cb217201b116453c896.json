{"sha": "3f1a0c3c5f4e52505ca83cb217201b116453c896", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMWEwYzNjNWY0ZTUyNTA1Y2E4M2NiMjE3MjAxYjExNjQ1M2M4OTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-21T17:56:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-21T17:56:12Z"}, "message": "Merge #2341\n\n2341: Fix mbe fail to parse TokenTree with endings whitespace r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "755daab26e5e92fb424a04bcca95a7e0c0f52e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/755daab26e5e92fb424a04bcca95a7e0c0f52e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f1a0c3c5f4e52505ca83cb217201b116453c896", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1s+8CRBK7hj4Ov3rIwAAdHIIAJWl3mpteQaVaOYeuKXDw1yr\n4UvsANkrS9uLSdy1mZdidqgEo7HsLXA92IoEShYACDbFKedUr9uGGgsJEWRI1pZ/\nY4kL3DKzYxGDFlkVRlJTz/aMzBdPGyMUlbgzT/Qb2vta5oP6BxorGk/YW7paBDvh\n2IR3HUGlvOYRkZ96XavwNX6RqnwFjJKaSJ3aGvnGYmfWBXZ+htVZD+6hP9ijI7Dj\nXAmeWAOazmNKpFea34Wo+qOTQ4HASZRFECpqRFVzrqitccNdU4y5G/ghZfezUIXo\nOM5Q+eo90CkwQWJQzdSbDr1WLKBFzKWPvMpW2XE15clRq4KwWKhTZkC5uSX2TqE=\n=E5YL\n-----END PGP SIGNATURE-----\n", "payload": "tree 755daab26e5e92fb424a04bcca95a7e0c0f52e85\nparent d0a9ed50da054d74721c6c51124696a20de5843b\nparent bf537eefb5dd05894344d49abf8598e5f67f3abf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574358972 +0000\ncommitter GitHub <noreply@github.com> 1574358972 +0000\n\nMerge #2341\n\n2341: Fix mbe fail to parse TokenTree with endings whitespace r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1a0c3c5f4e52505ca83cb217201b116453c896", "html_url": "https://github.com/rust-lang/rust/commit/3f1a0c3c5f4e52505ca83cb217201b116453c896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f1a0c3c5f4e52505ca83cb217201b116453c896/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a9ed50da054d74721c6c51124696a20de5843b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a9ed50da054d74721c6c51124696a20de5843b", "html_url": "https://github.com/rust-lang/rust/commit/d0a9ed50da054d74721c6c51124696a20de5843b"}, {"sha": "bf537eefb5dd05894344d49abf8598e5f67f3abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf537eefb5dd05894344d49abf8598e5f67f3abf", "html_url": "https://github.com/rust-lang/rust/commit/bf537eefb5dd05894344d49abf8598e5f67f3abf"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "1de399fee45ce130b90904225064c772d4a4a087", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3f1a0c3c5f4e52505ca83cb217201b116453c896/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1a0c3c5f4e52505ca83cb217201b116453c896/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=3f1a0c3c5f4e52505ca83cb217201b116453c896", "patch": "@@ -5,6 +5,7 @@ use ra_syntax::{\n     ast, AstNode, AstToken, NodeOrToken, Parse, SmolStr, SyntaxKind, SyntaxKind::*, SyntaxNode,\n     SyntaxTreeBuilder, TextRange, TextUnit, T,\n };\n+use std::iter::successors;\n use tt::buffer::{Cursor, TokenBuffer};\n \n use crate::subtree_source::SubtreeTokenSource;\n@@ -160,6 +161,31 @@ impl Convertor {\n \n         let first_child = tt.first_child_or_token()?;\n         let last_child = tt.last_child_or_token()?;\n+\n+        // ignore trivial first_child and last_child\n+        let first_child = successors(Some(first_child), |it| {\n+            if it.kind().is_trivia() {\n+                it.next_sibling_or_token()\n+            } else {\n+                None\n+            }\n+        })\n+        .last()\n+        .unwrap();\n+        if first_child.kind().is_trivia() {\n+            return Some(tt::Subtree { token_trees: vec![], delimiter: tt::Delimiter::None });\n+        }\n+\n+        let last_child = successors(Some(last_child), |it| {\n+            if it.kind().is_trivia() {\n+                it.prev_sibling_or_token()\n+            } else {\n+                None\n+            }\n+        })\n+        .last()\n+        .unwrap();\n+\n         let (delimiter, skip_first) = match (first_child.kind(), last_child.kind()) {\n             (T!['('], T![')']) => (tt::Delimiter::Parenthesis, true),\n             (T!['{'], T!['}']) => (tt::Delimiter::Brace, true),\n@@ -363,6 +389,7 @@ mod tests {\n     use super::*;\n     use crate::tests::{create_rules, expand};\n     use ra_parser::TokenSource;\n+    use ra_syntax::algo::{insert_children, InsertPosition};\n \n     #[test]\n     fn convert_tt_token_source() {\n@@ -423,4 +450,45 @@ mod tests {\n         let expansion = expand(&rules, \"stmts!();\");\n         assert!(token_tree_to_syntax_node(&expansion, FragmentKind::Expr).is_err());\n     }\n+\n+    #[test]\n+    fn test_token_tree_last_child_is_white_space() {\n+        let source_file = ast::SourceFile::parse(\"f!({} );\").ok().unwrap();\n+        let macro_call = source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n+        let token_tree = macro_call.token_tree().unwrap();\n+\n+        // Token Tree now is :\n+        // TokenTree\n+        // - T!['(']\n+        // - TokenTree\n+        //   - T!['{']\n+        //   - T!['}']\n+        // - WHITE_SPACE\n+        // - T![')']\n+\n+        let rbrace =\n+            token_tree.syntax().descendants_with_tokens().find(|it| it.kind() == T!['}']).unwrap();\n+        let space = token_tree\n+            .syntax()\n+            .descendants_with_tokens()\n+            .find(|it| it.kind() == SyntaxKind::WHITESPACE)\n+            .unwrap();\n+\n+        // reorder th white space, such that the white is inside the inner token-tree.\n+        let token_tree = insert_children(\n+            &rbrace.parent().unwrap(),\n+            InsertPosition::Last,\n+            &mut std::iter::once(space),\n+        );\n+\n+        // Token Tree now is :\n+        // TokenTree\n+        // - T!['{']\n+        // - T!['}']\n+        // - WHITE_SPACE\n+        let token_tree = ast::TokenTree::cast(token_tree).unwrap();\n+        let tt = ast_to_token_tree(&token_tree).unwrap().0;\n+\n+        assert_eq!(tt.delimiter, tt::Delimiter::Brace);\n+    }\n }"}]}