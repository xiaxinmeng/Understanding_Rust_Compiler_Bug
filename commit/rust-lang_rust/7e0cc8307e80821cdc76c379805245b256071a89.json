{"sha": "7e0cc8307e80821cdc76c379805245b256071a89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMGNjODMwN2U4MDgyMWNkYzc2YzM3OTgwNTI0NWIyNTYwNzFhODk=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T14:21:02Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T15:30:08Z"}, "message": "fix 'magic boolean' to enum", "tree": {"sha": "b083dab21a8c8f483efbe6a957ec3ae3d5e3fb9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b083dab21a8c8f483efbe6a957ec3ae3d5e3fb9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e0cc8307e80821cdc76c379805245b256071a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0cc8307e80821cdc76c379805245b256071a89", "html_url": "https://github.com/rust-lang/rust/commit/7e0cc8307e80821cdc76c379805245b256071a89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e0cc8307e80821cdc76c379805245b256071a89/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe9ecb50d1dd1b8facd001e634449a9e8d52ad22", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22", "html_url": "https://github.com/rust-lang/rust/commit/fe9ecb50d1dd1b8facd001e634449a9e8d52ad22"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "59cedc6e9df77c26ea57295d95cd5269342c6d89", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7e0cc8307e80821cdc76c379805245b256071a89/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0cc8307e80821cdc76c379805245b256071a89/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=7e0cc8307e80821cdc76c379805245b256071a89", "patch": "@@ -179,7 +179,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str: &'a OsStr = this.read_os_str_from_c_str(scalar)?;\n \n-        Ok(match convert_path_separator(os_str, &this.tcx.sess.target.target.target_os, false) {\n+        Ok(match convert_path_separator(os_str, &this.tcx.sess.target.target.target_os, PathConversionDirection::TargetToHost) {\n             Cow::Borrowed(x) => Cow::Borrowed(Path::new(x)),\n             Cow::Owned(y) => Cow::Owned(PathBuf::from(y)),\n         })\n@@ -190,7 +190,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_ref();\n         let os_str: OsString = this.read_os_str_from_wide_str(scalar)?;\n \n-        Ok(PathBuf::from(&convert_path_separator(&os_str, &this.tcx.sess.target.target.target_os, false)))\n+        Ok(PathBuf::from(&convert_path_separator(&os_str, &this.tcx.sess.target.target.target_os, PathConversionDirection::TargetToHost)))\n     }\n \n     /// Write a Path to the machine memory (as a null-terminated sequence of bytes),\n@@ -202,7 +202,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, true);\n+        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, PathConversionDirection::HostToTarget);\n         this.write_os_str_to_c_str(&os_str, scalar, size)\n     }\n \n@@ -215,26 +215,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n-        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, true);\n+        let os_str = convert_path_separator(path.as_os_str(), &this.tcx.sess.target.target.target_os, PathConversionDirection::HostToTarget);\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n }\n \n+enum PathConversionDirection {\n+    HostToTarget,\n+    TargetToHost,\n+}\n+\n /// Perform path separator conversion if needed.\n-/// if direction == true, Convert from 'host' to 'target'.\n-/// if direction == false, Convert from 'target' to 'host'.\n fn convert_path_separator<'a>(\n     os_str: &'a OsStr,\n     target_os: &str,\n-    direction: bool,\n+    direction: PathConversionDirection,\n ) -> Cow<'a, OsStr> {\n     #[cfg(windows)]\n     return if target_os == \"windows\" {\n         // Windows-on-Windows, all fine.\n         Cow::Borrowed(os_str)\n     } else {\n         // Unix target, Windows host.\n-        let (from, to) = if direction { ('\\\\', '/') } else { ('/', '\\\\') };\n+        let (from, to) = match direction {\n+            PathConversionDirection::HostToTarget => ('\\\\', '/'),\n+            PathConversionDirection::TargetToHost => ('/', '\\\\'),\n+        };\n         let converted = os_str\n             .encode_wide()\n             .map(|wchar| if wchar == from as u16 { to as u16 } else { wchar })\n@@ -244,7 +250,10 @@ fn convert_path_separator<'a>(\n     #[cfg(unix)]\n     return if target_os == \"windows\" {\n         // Windows target, Unix host.\n-        let (from, to) = if direction { ('/', '\\\\') } else { ('\\\\', '/') };\n+        let (from, to) = match direction {\n+            PathConversionDirection::HostToTarget => ('/', '\\\\'),\n+            PathConversionDirection::TargetToHost => ('\\\\', '/'),\n+        };\n         let converted = os_str\n             .as_bytes()\n             .iter()"}]}