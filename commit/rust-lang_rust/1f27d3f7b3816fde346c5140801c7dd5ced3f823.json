{"sha": "1f27d3f7b3816fde346c5140801c7dd5ced3f823", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMjdkM2Y3YjM4MTZmZGUzNDZjNTE0MDgwMWM3ZGQ1Y2VkM2Y4MjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-08T08:17:26Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-08T08:26:48Z"}, "message": "don't cache the MIR in the Stepper", "tree": {"sha": "f48e568ae40796fa6b8d4ebbc569dc35a2438902", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f48e568ae40796fa6b8d4ebbc569dc35a2438902"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f27d3f7b3816fde346c5140801c7dd5ced3f823", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXV9bKAAoJEFbW7qD8Z6xGrHMP/R7x4nDW5ouMhCXMTk3KDtPS\nfTRiD/mfOjx1CgXuVQYV6EX9/PXp1EHdQjEdezSQKgw+mbPdFOW2Tr6CCHbMVppH\nzCJ9bVbRztF8KGGgSGJNnRTIX8FE7ZShdQ5LzdeURoXZiuJ7cuq+jhJVaqKUMJT6\nf1Nu4FcQev5kgmc54+hxMOdgnoCUKvgA5q7qKCV0IV21zkToTswahWsq7tJ+ovsw\nfvO+SHSAq+QaWT/nxeoal1Wz9hdnDf2NgZzGkJXoagvFArFaLmuOxvpkFlqglYve\nriHG58/mYyn5YrIRaSIM4p7gjLj2S6jwLgply2ojnxu56tE1Y12mjHjyhWXgf8Bq\nkFxOF/1zrzWr/iRLYUU2jJtCVUJoAkL6gk/qPbhaJ8Jolwe2MJDX6rLLosOsUDp+\nvFfKcwxgiwZKAtmkbQEPCcms5F7Ia9jScUid3oaBqWd+A6li1by8mRn+ENq8BB6T\nNx0XATgm67+g31Mu0ct++ZdpMVWFlDweo9AbNgkbBZycPUJBfpl0cHznTu8WMznO\nIOSL+xmW734+uwUIsmqlGA+SuT/vvLR7B4JTcpp3ZY+I20uu739wZnOPg9qE1ovT\nD28f4SEYQlm9lYAhvLX41zOO3qK4hBR3I3xKl3LztNPVgOVRnbIz0lacQXCpGVOk\nsn3ALP9hxpnQ3sFIoN8O\n=hlUO\n-----END PGP SIGNATURE-----", "payload": "tree f48e568ae40796fa6b8d4ebbc569dc35a2438902\nparent c881cf10d86deca32093eb40319a24a793de7d0b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465373846 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465374408 +0200\n\ndon't cache the MIR in the Stepper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f27d3f7b3816fde346c5140801c7dd5ced3f823", "html_url": "https://github.com/rust-lang/rust/commit/1f27d3f7b3816fde346c5140801c7dd5ced3f823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f27d3f7b3816fde346c5140801c7dd5ced3f823/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c881cf10d86deca32093eb40319a24a793de7d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c881cf10d86deca32093eb40319a24a793de7d0b", "html_url": "https://github.com/rust-lang/rust/commit/c881cf10d86deca32093eb40319a24a793de7d0b"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "8807dbcafab6a7f5383420594d7fdd5a2ade0c4e", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f27d3f7b3816fde346c5140801c7dd5ced3f823/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f27d3f7b3816fde346c5140801c7dd5ced3f823/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=1f27d3f7b3816fde346c5140801c7dd5ced3f823", "patch": "@@ -22,14 +22,12 @@ pub enum Event {\n \n pub struct Stepper<'fncx, 'a: 'fncx, 'b: 'a + 'mir, 'mir: 'fncx, 'tcx: 'b>{\n     fncx: &'fncx mut FnEvalContext<'a, 'b, 'mir, 'tcx>,\n-    mir: CachedMir<'mir, 'tcx>,\n     process: fn (&mut Stepper<'fncx, 'a, 'b, 'mir, 'tcx>) -> EvalResult<()>,\n }\n \n impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx> {\n     pub(super) fn new(fncx: &'fncx mut FnEvalContext<'a, 'b, 'mir, 'tcx>) -> Self {\n         Stepper {\n-            mir: fncx.mir(),\n             fncx: fncx,\n             process: Self::dummy,\n         }\n@@ -38,7 +36,8 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n     fn dummy(&mut self) -> EvalResult<()> { Ok(()) }\n \n     fn statement(&mut self) -> EvalResult<()> {\n-        let block_data = self.mir.basic_block_data(self.fncx.frame().next_block);\n+        let mir = self.fncx.mir();\n+        let block_data = mir.basic_block_data(self.fncx.frame().next_block);\n         let stmt = &block_data.statements[self.fncx.frame().stmt];\n         let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n         let result = self.fncx.eval_assignment(lvalue, rvalue);\n@@ -51,7 +50,8 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         // after a terminator we go to a new block\n         self.fncx.frame_mut().stmt = 0;\n         let term = {\n-            let block_data = self.mir.basic_block_data(self.fncx.frame().next_block);\n+            let mir = self.fncx.mir();\n+            let block_data = mir.basic_block_data(self.fncx.frame().next_block);\n             let terminator = block_data.terminator();\n             let result = self.fncx.eval_terminator(terminator);\n             self.fncx.maybe_report(terminator.span, result)?\n@@ -61,13 +61,8 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             TerminatorTarget::Return => {\n                 assert!(self.fncx.frame().constants.is_empty());\n                 self.fncx.pop_stack_frame();\n-                if !self.fncx.stack.is_empty() {\n-                    self.mir = self.fncx.mir();\n-                }\n-            },\n-            TerminatorTarget::Call => {\n-                self.mir = self.fncx.mir();\n             },\n+            TerminatorTarget::Call => {},\n         }\n         Ok(())\n     }\n@@ -77,7 +72,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         let def_id = cid.def_id();\n         let substs = cid.substs();\n         self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n-        self.mir = self.fncx.mir();\n         Ok(())\n     }\n \n@@ -97,13 +91,13 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n \n         let block = self.fncx.frame().next_block;\n         let stmt = self.fncx.frame().stmt;\n-        let basic_block = self.mir.basic_block_data(block);\n+        let mir = self.fncx.mir();\n+        let basic_block = mir.basic_block_data(block);\n \n         if let Some(ref stmt) = basic_block.statements.get(stmt) {\n             assert!(self.fncx.frame().constants.is_empty());\n             ConstantExtractor {\n                 span: stmt.span,\n-                mir: &self.mir,\n                 gecx: self.fncx.gecx,\n                 frame: self.fncx.stack.last_mut().expect(\"stack empty\"),\n             }.visit_statement(block, stmt);\n@@ -120,7 +114,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         assert!(self.fncx.frame().constants.is_empty());\n         ConstantExtractor {\n             span: terminator.span,\n-            mir: &self.mir,\n             gecx: self.fncx.gecx,\n             frame: self.fncx.stack.last_mut().expect(\"stack empty\"),\n         }.visit_terminator(block, terminator);\n@@ -150,7 +143,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n \n struct ConstantExtractor<'a, 'b: 'mir, 'mir: 'a, 'tcx: 'b> {\n     span: Span,\n-    mir: &'a CachedMir<'mir, 'tcx>,\n     frame: &'a mut Frame<'mir, 'tcx>,\n     gecx: &'a mut GlobalEvalContext<'b, 'tcx>,\n }\n@@ -194,7 +186,7 @@ impl<'a, 'b, 'mir, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'mir, 'tcx>\n                 if self.gecx.statics.contains_key(&cid) {\n                     return;\n                 }\n-                let mir = self.mir.promoted[index].clone();\n+                let mir = self.frame.mir.promoted[index].clone();\n                 let return_ty = mir.return_ty;\n                 let return_ptr = self.gecx.alloc_ret_ptr(return_ty, cid.substs()).expect(\"there's no such thing as an unreachable static\");\n                 let mir = CachedMir::Owned(Rc::new(mir));"}]}