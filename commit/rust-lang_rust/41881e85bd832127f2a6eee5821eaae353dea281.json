{"sha": "41881e85bd832127f2a6eee5821eaae353dea281", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxODgxZTg1YmQ4MzIxMjdmMmE2ZWVlNTgyMWVhYWUzNTNkZWEyODE=", "commit": {"author": {"name": "athulappadan", "email": "a4athulappadan@gmail.com", "date": "2016-09-11T17:28:01Z"}, "committer": {"name": "athulappadan", "email": "a4athulappadan@gmail.com", "date": "2016-09-11T17:28:01Z"}, "message": "Documentation for default types modified", "tree": {"sha": "730da8b3d9bd50eec2c578ae76e9eca931942bb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/730da8b3d9bd50eec2c578ae76e9eca931942bb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41881e85bd832127f2a6eee5821eaae353dea281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41881e85bd832127f2a6eee5821eaae353dea281", "html_url": "https://github.com/rust-lang/rust/commit/41881e85bd832127f2a6eee5821eaae353dea281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41881e85bd832127f2a6eee5821eaae353dea281/comments", "author": {"login": "athulappadan", "id": 7713733, "node_id": "MDQ6VXNlcjc3MTM3MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/7713733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/athulappadan", "html_url": "https://github.com/athulappadan", "followers_url": "https://api.github.com/users/athulappadan/followers", "following_url": "https://api.github.com/users/athulappadan/following{/other_user}", "gists_url": "https://api.github.com/users/athulappadan/gists{/gist_id}", "starred_url": "https://api.github.com/users/athulappadan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/athulappadan/subscriptions", "organizations_url": "https://api.github.com/users/athulappadan/orgs", "repos_url": "https://api.github.com/users/athulappadan/repos", "events_url": "https://api.github.com/users/athulappadan/events{/privacy}", "received_events_url": "https://api.github.com/users/athulappadan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "athulappadan", "id": 7713733, "node_id": "MDQ6VXNlcjc3MTM3MzM=", "avatar_url": "https://avatars.githubusercontent.com/u/7713733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/athulappadan", "html_url": "https://github.com/athulappadan", "followers_url": "https://api.github.com/users/athulappadan/followers", "following_url": "https://api.github.com/users/athulappadan/following{/other_user}", "gists_url": "https://api.github.com/users/athulappadan/gists{/gist_id}", "starred_url": "https://api.github.com/users/athulappadan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/athulappadan/subscriptions", "organizations_url": "https://api.github.com/users/athulappadan/orgs", "repos_url": "https://api.github.com/users/athulappadan/repos", "events_url": "https://api.github.com/users/athulappadan/events{/privacy}", "received_events_url": "https://api.github.com/users/athulappadan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e77dbf25ed6526fb5d37c32e55797fb04522f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e77dbf25ed6526fb5d37c32e55797fb04522f0", "html_url": "https://github.com/rust-lang/rust/commit/49e77dbf25ed6526fb5d37c32e55797fb04522f0"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "3d579641b96583961f48466c346e1c23d355ca84", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -718,7 +718,7 @@ impl<T: ?Sized> Clone for Weak<T> {\n \n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n-    /// Creates a new `Weak<T>`.\n+    /// Constructs a new `Weak<T>` without an accompanying instance of T.\n     fn default() -> Weak<T> {\n         Weak::new()\n     }"}, {"sha": "700f88dc0f267688bb91e057616256fc84c00e1c", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -249,7 +249,7 @@ impl<'a, B: ?Sized> Default for Cow<'a, B>\n     where B: ToOwned,\n           <B as ToOwned>::Owned: Default\n {\n-    /// Creates a `Cow<'a, B>` pointer.\n+    /// Creates an owned Cow<'a, B> with the default value for the contained owned value.\n     fn default() -> Cow<'a, B> {\n         Owned(<B as ToOwned>::Owned::default())\n     }"}, {"sha": "49da3aa480c319e85257ad770be265ca9b7f5b0b", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -674,7 +674,7 @@ impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BTreeSet<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Default for BTreeSet<T> {\n-    /// Creates a new `BTreeSet<T>`.\n+    /// Makes a empty `BTreeSet<T>` with a reasonable choice of B.\n     fn default() -> BTreeSet<T> {\n         BTreeSet::new()\n     }"}, {"sha": "2e561dabb479451bef0aae4621d8f8243180e219", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -84,7 +84,7 @@ impl<T> Drop for VecDeque<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for VecDeque<T> {\n-    /// Creates a `VecDeque<T>` with a constant initial capacity.\n+    /// Creates an empty `VecDeque<T>`.\n     #[inline]\n     fn default() -> VecDeque<T> {\n         VecDeque::new()"}, {"sha": "7733b90ec01a81b736abb2ac2f8a917c3f1632ab", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -698,7 +698,7 @@ fn expect_failed(msg: &str) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n-    /// Creates an instance of None.\n+    /// Returns None.\n     #[inline]\n     fn default() -> Option<T> { None }\n }"}, {"sha": "7b147faccd20fbaa16079ef095f77aaeb7d730be", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -755,13 +755,13 @@ impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for [T] {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Default for &'a [T] {\n-    /// Creates an empty Slice.\n+    /// Creates an empty slice.\n     fn default() -> &'a [T] { &[] }\n }\n \n #[stable(feature = \"mut_slice_default\", since = \"1.5.0\")]\n impl<'a, T> Default for &'a mut [T] {\n-    /// Creates a mutable empty Slice.\n+    /// Creates a mutable empty slice.\n     fn default() -> &'a mut [T] { &mut [] }\n }\n "}, {"sha": "f5f37be52de6ec7ea82258933d38cbf62a545507", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -118,7 +118,7 @@ pub struct AtomicPtr<T> {\n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for AtomicPtr<T> {\n-    /// Creates an `AtomicPtr<T>` with an initial mutable null pointer.\n+    /// Creates a null `AtomicPtr<T>`.\n     fn default() -> AtomicPtr<T> {\n         AtomicPtr::new(::ptr::null_mut())\n     }"}, {"sha": "4ea42644ecdfdd1f605f2aa1834167a5ad377a9f", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -18,7 +18,6 @@ struct MyHasher {\n }\n \n impl Default for MyHasher {\n-    /// Constructs a `MyHasher` with initial value zero.\n     fn default() -> MyHasher {\n         MyHasher { hash: 0 }\n     }\n@@ -91,7 +90,6 @@ impl Hasher for CustomHasher {\n }\n \n impl Default for CustomHasher {\n-    /// Constructs a `CustomHasher` with initial value zero.\n     fn default() -> CustomHasher {\n         CustomHasher { output: 0 }\n     }"}, {"sha": "2009e18f6ee2016c8a404d776d393693fb729ecf", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -84,7 +84,6 @@ pub enum ErrorOutputType {\n }\n \n impl Default for ErrorOutputType {\n-    /// Creates an `HumanReadble`, initialised with `ColorConfig` enum type `Auto`.\n     fn default() -> ErrorOutputType {\n         ErrorOutputType::HumanReadable(ColorConfig::Auto)\n     }"}, {"sha": "eb1653f18cba18001d6ad0628345f3407766bc9e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -1218,7 +1218,7 @@ impl<K, V, S> Default for HashMap<K, V, S>\n     where K: Eq + Hash,\n           S: BuildHasher + Default,\n {\n-    /// Creates a `HashMap<K, V, S>`, with initial `Default` hasher.\n+    /// Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.\n     fn default() -> HashMap<K, V, S> {\n         HashMap::with_hasher(Default::default())\n     }"}, {"sha": "ff56747fee6af42069f084cffb52be2bf15e26cc", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -665,7 +665,7 @@ impl<T, S> Default for HashSet<T, S>\n     where T: Eq + Hash,\n           S: BuildHasher + Default,\n {\n-    /// Creates a `HashSet<T, S>` with initial `Default` hasher.\n+    /// Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.\n     fn default() -> HashSet<T, S> {\n         HashSet::with_hasher(Default::default())\n     }"}, {"sha": "0f7dc3889f0b8f6ed576effd7003b0e0272d9500", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -339,7 +339,7 @@ impl<'a> Default for &'a CStr {\n \n #[stable(feature = \"cstr_default\", since = \"1.10.0\")]\n impl Default for CString {\n-    /// Creates a new `CString`, by calling the `Default` of `CStr`, and then owns it.\n+    /// Creates an empty `CString`.\n     fn default() -> CString {\n         let a: &CStr = Default::default();\n         a.to_owned()"}, {"sha": "5875015893144db01dc58244a4f110a43774ebc9", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41881e85bd832127f2a6eee5821eaae353dea281/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=41881e85bd832127f2a6eee5821eaae353dea281", "patch": "@@ -154,7 +154,7 @@ impl<T> P<[T]> {\n }\n \n impl<T> Default for P<[T]> {\n-    /// Creates a new `P`, with the `Default` value for T.\n+    /// Creates an empty `P<[T]>`.\n     fn default() -> P<[T]> {\n         P::new()\n     }"}]}