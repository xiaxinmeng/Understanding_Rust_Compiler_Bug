{"sha": "0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZGUzYjFmODBmNjQyODMxZDhkZTVjZDc2ZTkwZmM0NjhkZDNhYjU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T12:39:04Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:46Z"}, "message": "Use () for codegen queries.", "tree": {"sha": "ee80ce19f9aabd2ae6d66c91a5b31176bc58ee43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee80ce19f9aabd2ae6d66c91a5b31176bc58ee43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "html_url": "https://github.com/rust-lang/rust/commit/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7", "html_url": "https://github.com/rust-lang/rust/commit/4e8d4bdf4b5f185a6096c29147dff7d2d3daa7d7"}], "stats": {"total": 96, "additions": 40, "deletions": 56}, "files": [{"sha": "e776cd0c620afa2611418eb8bde074d99c0ac32e", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -41,7 +41,7 @@ fn emit_module(\n \n     unwind_context.emit(&mut product);\n \n-    let tmp_file = tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(&name));\n+    let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n     let obj = product.object.write().unwrap();\n     if let Err(err) = std::fs::write(&tmp_file, obj) {\n         tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n@@ -73,7 +73,7 @@ fn reuse_workproduct_for_cgu(\n     let work_product = cgu.work_product(tcx);\n     if let Some(saved_file) = &work_product.saved_file {\n         let obj_out = tcx\n-            .output_filenames(LOCAL_CRATE)\n+            .output_filenames(())\n             .temp_path(OutputType::Object, Some(&cgu.name().as_str()));\n         object = Some(obj_out.clone());\n         let source_file = rustc_incremental::in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n@@ -179,7 +179,7 @@ pub(crate) fn run_aot(\n     let mut work_products = FxHashMap::default();\n \n     let cgus = if tcx.sess.opts.output_types.should_codegen() {\n-        tcx.collect_and_partition_mono_items(LOCAL_CRATE).1\n+        tcx.collect_and_partition_mono_items(()).1\n     } else {\n         // If only `--emit metadata` is used, we shouldn't perform any codegen.\n         // Also `tcx.collect_and_partition_mono_items` may panic in that case.\n@@ -265,7 +265,7 @@ pub(crate) fn run_aot(\n                 .to_string();\n \n             let tmp_file = tcx\n-                .output_filenames(LOCAL_CRATE)\n+                .output_filenames(())\n                 .temp_path(OutputType::Metadata, Some(&metadata_cgu_name));\n \n             let obj = crate::backend::with_object(tcx.sess, &metadata_cgu_name, |object| {\n@@ -342,7 +342,7 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n         .join(\"\\n\");\n \n     let output_object_file =\n-        tcx.output_filenames(LOCAL_CRATE).temp_path(OutputType::Object, Some(cgu_name));\n+        tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu_name));\n \n     // Assemble `global_asm`\n     let global_asm_object_file = add_file_stem_postfix(output_object_file.clone(), \".asm\");"}, {"sha": "632e86da736ab235530d52e7d25512fefe83b590", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -8,7 +8,6 @@ use std::os::raw::{c_char, c_int};\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n-use rustc_session::config::EntryFnType;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -66,7 +65,7 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         matches!(backend_config.codegen_mode, CodegenMode::JitLazy),\n     );\n \n-    let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+    let (_, cgus) = tcx.collect_and_partition_mono_items(());\n     let mono_items = cgus\n         .iter()\n         .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())"}, {"sha": "cd8c5b516083611ee316c93c816c523d29863fa3", "filename": "compiler/rustc_codegen_cranelift/src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -214,7 +214,7 @@ pub(crate) fn write_ir_file(\n         return;\n     }\n \n-    let clif_output_dir = tcx.output_filenames(LOCAL_CRATE).with_extension(\"clif\");\n+    let clif_output_dir = tcx.output_filenames(()).with_extension(\"clif\");\n \n     match std::fs::create_dir(&clif_output_dir) {\n         Ok(()) => {}"}, {"sha": "5b4a187a1d56f16ed41afc7964987339718a8f58", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -20,7 +20,6 @@ use rustc_codegen_ssa::{CompiledModule, ModuleCodegen};\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_errors::{FatalError, Handler, Level};\n use rustc_fs_util::{link_or_copy, path_to_c_string};\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, Lto, OutputType, Passes, SwitchWithOptPath};\n@@ -92,13 +91,12 @@ pub fn create_informational_target_machine(sess: &Session) -> &'static mut llvm:\n \n pub fn create_target_machine(tcx: TyCtxt<'_>, mod_name: &str) -> &'static mut llvm::TargetMachine {\n     let split_dwarf_file = if tcx.sess.target_can_use_split_dwarf() {\n-        tcx.output_filenames(LOCAL_CRATE)\n-            .split_dwarf_path(tcx.sess.split_debuginfo(), Some(mod_name))\n+        tcx.output_filenames(()).split_dwarf_path(tcx.sess.split_debuginfo(), Some(mod_name))\n     } else {\n         None\n     };\n     let config = TargetMachineFactoryConfig { split_dwarf_file };\n-    target_machine_factory(&tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE))(config)\n+    target_machine_factory(&tcx.sess, tcx.backend_optimization_level(()))(config)\n         .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise())\n }\n "}, {"sha": "d2a2e739ff31ef450117a7729737b14e4fcef61c", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -6,7 +6,7 @@ use llvm::coverageinfo::CounterMappingRegion;\n use rustc_codegen_ssa::coverageinfo::map::{Counter, CounterExpression};\n use rustc_codegen_ssa::traits::{ConstMethods, CoverageInfoMethods};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n-use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_llvm::RustString;\n use rustc_middle::mir::coverage::CodeRegion;\n use rustc_span::Symbol;\n@@ -276,7 +276,7 @@ fn add_unused_functions<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n         })\n         .collect();\n \n-    let codegenned_def_ids = tcx.codegened_and_inlined_items(LOCAL_CRATE);\n+    let codegenned_def_ids = tcx.codegened_and_inlined_items(());\n \n     let mut unused_def_ids_by_file: FxHashMap<Symbol, Vec<DefId>> = FxHashMap::default();\n     for &non_codegenned_def_id in all_def_ids.difference(codegenned_def_ids) {"}, {"sha": "9aa87af75865973538023ff3002bdab15e983488", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -995,9 +995,10 @@ pub fn compile_unit_metadata(\n     let name_in_debuginfo = name_in_debuginfo.to_string_lossy();\n     let work_dir = tcx.sess.working_dir.0.to_string_lossy();\n     let flags = \"\\0\";\n-    let out_dir = &tcx.output_filenames(LOCAL_CRATE).out_directory;\n+    let output_filenames = tcx.output_filenames(());\n+    let out_dir = &output_filenames.out_directory;\n     let split_name = if tcx.sess.target_can_use_split_dwarf() {\n-        tcx.output_filenames(LOCAL_CRATE)\n+        output_filenames\n             .split_dwarf_path(tcx.sess.split_debuginfo(), Some(codegen_unit_name))\n             .map(|f| out_dir.join(f))\n     } else {\n@@ -1058,15 +1059,12 @@ pub fn compile_unit_metadata(\n         if tcx.sess.opts.debugging_opts.profile {\n             let cu_desc_metadata =\n                 llvm::LLVMRustMetadataAsValue(debug_context.llcontext, unit_metadata);\n-            let default_gcda_path = &tcx.output_filenames(LOCAL_CRATE).with_extension(\"gcda\");\n+            let default_gcda_path = &output_filenames.with_extension(\"gcda\");\n             let gcda_path =\n                 tcx.sess.opts.debugging_opts.profile_emit.as_ref().unwrap_or(default_gcda_path);\n \n             let gcov_cu_info = [\n-                path_to_mdstring(\n-                    debug_context.llcontext,\n-                    &tcx.output_filenames(LOCAL_CRATE).with_extension(\"gcno\"),\n-                ),\n+                path_to_mdstring(debug_context.llcontext, &output_filenames.with_extension(\"gcno\")),\n                 path_to_mdstring(debug_context.llcontext, &gcda_path),\n                 cu_desc_metadata,\n             ];"}, {"sha": "14d6f0ba147b53773c15ed6509d46d4270ef4f89", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -230,7 +230,7 @@ fn exported_symbols_provider_local(\n         // external linkage is enough for monomorphization to be linked to.\n         let need_visibility = tcx.sess.target.dynamic_linking && !tcx.sess.target.only_cdylib;\n \n-        let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+        let (_, cgus) = tcx.collect_and_partition_mono_items(());\n \n         for (mono_item, &(linkage, visibility)) in cgus.iter().flat_map(|cgu| cgu.items().iter()) {\n             if linkage != Linkage::External {\n@@ -275,10 +275,8 @@ fn exported_symbols_provider_local(\n \n fn upstream_monomorphizations_provider(\n     tcx: TyCtxt<'_>,\n-    cnum: CrateNum,\n+    (): (),\n ) -> DefIdMap<FxHashMap<SubstsRef<'_>, CrateNum>> {\n-    debug_assert!(cnum == LOCAL_CRATE);\n-\n     let cnums = tcx.all_crate_nums(());\n \n     let mut instances: DefIdMap<FxHashMap<_, _>> = Default::default();\n@@ -341,7 +339,7 @@ fn upstream_monomorphizations_for_provider(\n     def_id: DefId,\n ) -> Option<&FxHashMap<SubstsRef<'_>, CrateNum>> {\n     debug_assert!(!def_id.is_local());\n-    tcx.upstream_monomorphizations(LOCAL_CRATE).get(&def_id)\n+    tcx.upstream_monomorphizations(()).get(&def_id)\n }\n \n fn upstream_drop_glue_for_provider<'tcx>("}, {"sha": "49774dc6d5c7d4626dfcfd556d6a98cd169e93c5", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -482,7 +482,7 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         codegen_worker_receive,\n         shared_emitter_main,\n         future: coordinator_thread,\n-        output_filenames: tcx.output_filenames(LOCAL_CRATE),\n+        output_filenames: tcx.output_filenames(()),\n     }\n }\n \n@@ -1042,7 +1042,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         // If we know that we won\u2019t be doing codegen, create target machines without optimisation.\n         config::OptLevel::No\n     } else {\n-        tcx.backend_optimization_level(LOCAL_CRATE)\n+        tcx.backend_optimization_level(())\n     };\n     let cgcx = CodegenContext::<B> {\n         backend: backend.clone(),\n@@ -1061,7 +1061,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         cgu_reuse_tracker: sess.cgu_reuse_tracker.clone(),\n         coordinator_send,\n         diag_emitter: shared_emitter.clone(),\n-        output_filenames: tcx.output_filenames(LOCAL_CRATE),\n+        output_filenames: tcx.output_filenames(()),\n         regular_module_config: regular_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,"}, {"sha": "e6126a06baa010d2e3d4eb30ea9c2a382258769a", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -485,7 +485,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n \n     // Run the monomorphization collector and partition the collected items into\n     // codegen units.\n-    let codegen_units = tcx.collect_and_partition_mono_items(LOCAL_CRATE).1;\n+    let codegen_units = tcx.collect_and_partition_mono_items(()).1;\n \n     // Force all codegen_unit queries so they are already either red or green\n     // when compile_codegen_unit accesses them. We are not able to re-execute"}, {"sha": "8220eb6c6570f5bfbe29df85a1dd35907e6579f5", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -36,7 +36,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n         }\n \n         let available_cgus = tcx\n-            .collect_and_partition_mono_items(LOCAL_CRATE)\n+            .collect_and_partition_mono_items(())\n             .1\n             .iter()\n             .map(|cgu| cgu.name().to_string())"}, {"sha": "8b126d5a404d03c8fc2b6b08766d4516e107ca35", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -1150,11 +1150,9 @@ rustc_queries! {\n     /// added or removed in any upstream crate. Instead use the narrower\n     /// `upstream_monomorphizations_for`, `upstream_drop_glue_for`, or, even\n     /// better, `Instance::upstream_monomorphization()`.\n-    query upstream_monomorphizations(\n-        k: CrateNum\n-    ) -> DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+    query upstream_monomorphizations(_: ()) -> DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n         storage(ArenaCacheSelector<'tcx>)\n-        desc { \"collecting available upstream monomorphizations `{:?}`\", k }\n+        desc { \"collecting available upstream monomorphizations\" }\n     }\n \n     /// Returns the set of upstream monomorphizations available for the\n@@ -1434,8 +1432,7 @@ rustc_queries! {\n         desc { \"exported_symbols\" }\n     }\n \n-    query collect_and_partition_mono_items(_: CrateNum)\n-        -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n+    query collect_and_partition_mono_items(_: ()) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n         eval_always\n         desc { \"collect_and_partition_mono_items\" }\n     }\n@@ -1444,8 +1441,7 @@ rustc_queries! {\n     }\n \n     /// All items participating in code generation together with items inlined into them.\n-    query codegened_and_inlined_items(_: CrateNum)\n-        -> &'tcx DefIdSet {\n+    query codegened_and_inlined_items(_: ()) -> &'tcx DefIdSet {\n         eval_always\n        desc { \"codegened_and_inlined_items\" }\n     }\n@@ -1460,11 +1456,11 @@ rustc_queries! {\n                 tcx.def_path_str(key)\n         }\n     }\n-    query backend_optimization_level(_: CrateNum) -> OptLevel {\n+    query backend_optimization_level(_: ()) -> OptLevel {\n         desc { \"optimization level used by backend\" }\n     }\n \n-    query output_filenames(_: CrateNum) -> Arc<OutputFilenames> {\n+    query output_filenames(_: ()) -> Arc<OutputFilenames> {\n         eval_always\n         desc { \"output_filenames\" }\n     }"}, {"sha": "db24be76785089428588ff12dec8bc4c022e1e09", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -2816,10 +2816,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     };\n     providers.extern_mod_stmt_cnum = |tcx, id| tcx.extern_crate_map.get(&id).cloned();\n     providers.all_crate_nums = |tcx, ()| tcx.arena.alloc_slice(&tcx.cstore.crates_untracked());\n-    providers.output_filenames = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.output_filenames.clone()\n-    };\n+    providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();\n     providers.features_query = |tcx, ()| tcx.sess.features_untracked();\n     providers.is_panic_runtime = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "451307b7916950bd755c95920fde5c76e7ef4f25", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -184,7 +184,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n use rustc_errors::{ErrorReported, FatalError};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n@@ -452,7 +452,7 @@ fn shrunk_instance_name(\n             after = &s[positions().rev().nth(after).unwrap_or(0)..],\n         );\n \n-        let path = tcx.output_filenames(LOCAL_CRATE).temp_path_ext(\"long-type.txt\", None);\n+        let path = tcx.output_filenames(()).temp_path_ext(\"long-type.txt\", None);\n         let written_to_path = std::fs::write(&path, s).ok().map(|_| path);\n \n         (shrunk, written_to_path)"}, {"sha": "6ed0ab8be41ee95a1dcc0518c92adffbf24eaaa9", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -97,7 +97,7 @@ mod merging;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync;\n-use rustc_hir::def_id::{CrateNum, DefIdSet, LOCAL_CRATE};\n+use rustc_hir::def_id::DefIdSet;\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{CodegenUnit, Linkage};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -311,10 +311,8 @@ where\n \n fn collect_and_partition_mono_items<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    cnum: CrateNum,\n+    (): (),\n ) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n     let collection_mode = match tcx.sess.opts.debugging_opts.print_mono_items {\n         Some(ref s) => {\n             let mode_string = s.to_lowercase();\n@@ -426,8 +424,8 @@ fn collect_and_partition_mono_items<'tcx>(\n     (tcx.arena.alloc(mono_items), codegen_units)\n }\n \n-fn codegened_and_inlined_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx DefIdSet {\n-    let (items, cgus) = tcx.collect_and_partition_mono_items(cnum);\n+fn codegened_and_inlined_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx DefIdSet {\n+    let (items, cgus) = tcx.collect_and_partition_mono_items(());\n     let mut visited = DefIdSet::default();\n     let mut result = items.clone();\n \n@@ -455,12 +453,12 @@ pub fn provide(providers: &mut Providers) {\n     providers.codegened_and_inlined_items = codegened_and_inlined_items;\n \n     providers.is_codegened_item = |tcx, def_id| {\n-        let (all_mono_items, _) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+        let (all_mono_items, _) = tcx.collect_and_partition_mono_items(());\n         all_mono_items.contains(&def_id)\n     };\n \n     providers.codegen_unit = |tcx, name| {\n-        let (_, all) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+        let (_, all) = tcx.collect_and_partition_mono_items(());\n         all.iter()\n             .find(|cgu| cgu.name() == name)\n             .unwrap_or_else(|| panic!(\"failed to find cgu with name {:?}\", name))"}, {"sha": "09258863580f22d598399b9a85a5ab3f0ca36c71", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bde3b1f80f642831d8de5cd76e90fc468dd3ab5/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=0bde3b1f80f642831d8de5cd76e90fc468dd3ab5", "patch": "@@ -95,7 +95,7 @@ impl<'tcx> SaveContext<'tcx> {\n         let sess = &self.tcx.sess;\n         // Save-analysis is emitted per whole session, not per each crate type\n         let crate_type = sess.crate_types()[0];\n-        let outputs = &*self.tcx.output_filenames(LOCAL_CRATE);\n+        let outputs = &*self.tcx.output_filenames(());\n \n         if outputs.outputs.contains_key(&OutputType::Metadata) {\n             filename_for_metadata(sess, crate_name, outputs)"}]}