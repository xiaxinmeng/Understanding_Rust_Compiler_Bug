{"sha": "d342a3490b6f85f5bec80a7b90a576e5044719aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDJhMzQ5MGI2Zjg1ZjViZWM4MGE3YjkwYTU3NmU1MDQ0NzE5YWE=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-04-11T19:51:28Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-05-13T21:31:57Z"}, "message": "Add support for const operands and options to global_asm!\n\nOn x86, the default syntax is also switched to Intel to match asm!", "tree": {"sha": "3e1887a66c82d751bbe8100abf357b0769d8d6f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e1887a66c82d751bbe8100abf357b0769d8d6f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d342a3490b6f85f5bec80a7b90a576e5044719aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d342a3490b6f85f5bec80a7b90a576e5044719aa", "html_url": "https://github.com/rust-lang/rust/commit/d342a3490b6f85f5bec80a7b90a576e5044719aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d342a3490b6f85f5bec80a7b90a576e5044719aa/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40a62a998fafc81d8b21260a151831b5d79537d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/40a62a998fafc81d8b21260a151831b5d79537d8", "html_url": "https://github.com/rust-lang/rust/commit/40a62a998fafc81d8b21260a151831b5d79537d8"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "004e6bddaf3ee72c5db5b814df90eb788fe52a04", "filename": "src/driver/aot.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d342a3490b6f85f5bec80a7b90a576e5044719aa/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d342a3490b6f85f5bec80a7b90a576e5044719aa/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=d342a3490b6f85f5bec80a7b90a576e5044719aa", "patch": "@@ -3,6 +3,7 @@\n \n use std::path::PathBuf;\n \n+use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule, CrateInfo, ModuleKind};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -125,9 +126,19 @@ fn module_codegen(\n             MonoItem::Static(def_id) => crate::constant::codegen_static(tcx, &mut module, def_id),\n             MonoItem::GlobalAsm(item_id) => {\n                 let item = cx.tcx.hir().item(item_id);\n-                if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {\n-                    cx.global_asm.push_str(&*asm.as_str());\n-                    cx.global_asm.push_str(\"\\n\\n\");\n+                if let rustc_hir::ItemKind::GlobalAsm(asm) = item.kind {\n+                    if !asm.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n+                        cx.global_asm.push_str(\"\\n.intel_syntax noprefix\\n\");\n+                    } else {\n+                        cx.global_asm.push_str(\"\\n.att_syntax\\n\");\n+                    }\n+                    for piece in asm.template {\n+                        match *piece {\n+                            InlineAsmTemplatePiece::String(ref s) => cx.global_asm.push_str(s),\n+                            InlineAsmTemplatePiece::Placeholder { .. } => todo!(),\n+                        }\n+                    }\n+                    cx.global_asm.push_str(\"\\n.att_syntax\\n\\n\");\n                 } else {\n                     bug!(\"Expected GlobalAsm found {:?}\", item);\n                 }"}]}