{"sha": "680e21687d5540a425f11d468edcda0ce39c6289", "node_id": "C_kwDOAAsO6NoAKDY4MGUyMTY4N2Q1NTQwYTQyNWYxMWQ0NjhlZGNkYTBjZTM5YzYyODk", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-02-17T07:59:13Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-02-17T07:59:13Z"}, "message": "Use `partial_cmp` to implement tuple `lt`/`le`/`ge`/`gt`", "tree": {"sha": "835fb93e8a06c2a3a9a3045efdf32dfebff8c0c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835fb93e8a06c2a3a9a3045efdf32dfebff8c0c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/680e21687d5540a425f11d468edcda0ce39c6289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/680e21687d5540a425f11d468edcda0ce39c6289", "html_url": "https://github.com/rust-lang/rust/commit/680e21687d5540a425f11d468edcda0ce39c6289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/680e21687d5540a425f11d468edcda0ce39c6289/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc37e373292d00572ff884a1a095cc4574d9fe82", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc37e373292d00572ff884a1a095cc4574d9fe82", "html_url": "https://github.com/rust-lang/rust/commit/dc37e373292d00572ff884a1a095cc4574d9fe82"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "0620e7173bc1779dc818f2e80afa5aa6bb1b0fac", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/680e21687d5540a425f11d468edcda0ce39c6289/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680e21687d5540a425f11d468edcda0ce39c6289/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=680e21687d5540a425f11d468edcda0ce39c6289", "patch": "@@ -1,7 +1,7 @@\n // See src/libstd/primitive_docs.rs for documentation.\n \n-use crate::cmp::Ordering::*;\n-use crate::cmp::*;\n+use crate::cmp::Ordering::{self, *};\n+use crate::mem::transmute;\n \n // Recursive macro for implementing n-ary tuple functions and operations\n //\n@@ -61,19 +61,19 @@ macro_rules! tuple_impls {\n                 }\n                 #[inline]\n                 fn lt(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(lt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+                    lexical_ord!(lt, Less, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn le(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(le, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+                    lexical_ord!(le, Less, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn ge(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(ge, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+                    lexical_ord!(ge, Greater, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn gt(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(gt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n+                    lexical_ord!(gt, Greater, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n             }\n         }\n@@ -123,16 +123,38 @@ macro_rules! maybe_tuple_doc {\n     };\n }\n \n-// Constructs an expression that performs a lexical ordering using method $rel.\n+#[inline]\n+const fn ordering_is_some(c: Option<Ordering>, x: Ordering) -> bool {\n+    // FIXME: Just use `==` once that's const-stable on `Option`s.\n+    // This isn't using `match` because that optimizes worse due to\n+    // making a two-step check (`Some` *then* the inner value).\n+\n+    // SAFETY: There's no public guarantee for `Option<Ordering>`,\n+    // but we're core so we know that it's definitely a byte.\n+    unsafe {\n+        let c: i8 = transmute(c);\n+        let x: i8 = transmute(Some(x));\n+        c == x\n+    }\n+}\n+\n+// Constructs an expression that performs a lexical ordering using method `$rel`.\n // The values are interleaved, so the macro invocation for\n-// `(a1, a2, a3) < (b1, b2, b3)` would be `lexical_ord!(lt, a1, b1, a2, b2,\n-// a3, b3)` (and similarly for `lexical_cmp`)\n+// `(a1, a2, a3) < (b1, b2, b3)` would be `lexical_ord!(lt, opt_is_lt, a1, b1,\n+// a2, b2, a3, b3)` (and similarly for `lexical_cmp`)\n+//\n+// `$ne_rel` is only used to determine the result after checking that they're\n+// not equal, so `lt` and `le` can both just use `Less`.\n macro_rules! lexical_ord {\n-    ($rel: ident, $a:expr, $b:expr, $($rest_a:expr, $rest_b:expr),+) => {\n-        if $a != $b { lexical_ord!($rel, $a, $b) }\n-        else { lexical_ord!($rel, $($rest_a, $rest_b),+) }\n+    ($rel: ident, $ne_rel: ident, $a:expr, $b:expr, $($rest_a:expr, $rest_b:expr),+) => {{\n+        let c = PartialOrd::partial_cmp(&$a, &$b);\n+        if !ordering_is_some(c, Equal) { ordering_is_some(c, $ne_rel) }\n+        else { lexical_ord!($rel, $ne_rel, $($rest_a, $rest_b),+) }\n+    }};\n+    ($rel: ident, $ne_rel: ident, $a:expr, $b:expr) => {\n+        // Use the specific method for the last element\n+        PartialOrd::$rel(&$a, &$b)\n     };\n-    ($rel: ident, $a:expr, $b:expr) => { ($a) . $rel (& $b) };\n }\n \n macro_rules! lexical_partial_cmp {"}, {"sha": "a9d25e3b53cffa386c180a5540070e7a9bd3a576", "filename": "tests/codegen/comparison-operators-2-tuple.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/680e21687d5540a425f11d468edcda0ce39c6289/tests%2Fcodegen%2Fcomparison-operators-2-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680e21687d5540a425f11d468edcda0ce39c6289/tests%2Fcodegen%2Fcomparison-operators-2-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fcomparison-operators-2-tuple.rs?ref=680e21687d5540a425f11d468edcda0ce39c6289", "patch": "@@ -11,6 +11,9 @@ type TwoTuple = (i16, u16);\n //\n // The operators are all overridden directly, so should optimize easily.\n //\n+// Yes, the `s[lg]t` is correct for the `[lg]e` version because it's only used\n+// in the side of the select where we know the values are *not* equal.\n+//\n \n // CHECK-LABEL: @check_lt_direct\n // CHECK-SAME: (i16 noundef %[[A0:.+]], i16 noundef %[[A1:.+]], i16 noundef %[[B0:.+]], i16 noundef %[[B1:.+]])\n@@ -29,7 +32,7 @@ pub fn check_lt_direct(a: TwoTuple, b: TwoTuple) -> bool {\n #[no_mangle]\n pub fn check_le_direct(a: TwoTuple, b: TwoTuple) -> bool {\n     // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n-    // CHECK-DAG: %[[CMP0:.+]] = icmp sle i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp slt i16 %[[A0]], %[[B0]]\n     // CHECK-DAG: %[[CMP1:.+]] = icmp ule i16 %[[A1]], %[[B1]]\n     // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n     // CHECK: ret i1 %[[R]]\n@@ -53,7 +56,7 @@ pub fn check_gt_direct(a: TwoTuple, b: TwoTuple) -> bool {\n #[no_mangle]\n pub fn check_ge_direct(a: TwoTuple, b: TwoTuple) -> bool {\n     // CHECK-DAG: %[[EQ:.+]] = icmp eq i16 %[[A0]], %[[B0]]\n-    // CHECK-DAG: %[[CMP0:.+]] = icmp sge i16 %[[A0]], %[[B0]]\n+    // CHECK-DAG: %[[CMP0:.+]] = icmp sgt i16 %[[A0]], %[[B0]]\n     // CHECK-DAG: %[[CMP1:.+]] = icmp uge i16 %[[A1]], %[[B1]]\n     // CHECK: %[[R:.+]] = select i1 %[[EQ]], i1 %[[CMP1]], i1 %[[CMP0]]\n     // CHECK: ret i1 %[[R]]"}]}