{"sha": "62ac10ffdec716ca1763bf0a1e45430449a7bbde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYWMxMGZmZGVjNzE2Y2ExNzYzYmYwYTFlNDU0MzA0NDlhN2JiZGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-05T00:50:05Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-05T11:47:11Z"}, "message": "simplify reexports in rustc::hir", "tree": {"sha": "49f994dbda4e38ce40c84f9dd8e7ea49cc97cd94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f994dbda4e38ce40c84f9dd8e7ea49cc97cd94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ac10ffdec716ca1763bf0a1e45430449a7bbde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ac10ffdec716ca1763bf0a1e45430449a7bbde", "html_url": "https://github.com/rust-lang/rust/commit/62ac10ffdec716ca1763bf0a1e45430449a7bbde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ac10ffdec716ca1763bf0a1e45430449a7bbde/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7785834159030e8d734af31d27bef4acfeabd9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7785834159030e8d734af31d27bef4acfeabd9f2", "html_url": "https://github.com/rust-lang/rust/commit/7785834159030e8d734af31d27bef4acfeabd9f2"}], "stats": {"total": 150, "additions": 72, "deletions": 78}, "files": [{"sha": "f20ad203685058aef7caf7d9d78257cd7f2da781", "filename": "src/librustc/hir.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -3,22 +3,11 @@\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n \n pub mod check_attr;\n-pub use rustc_hir::def;\n pub mod exports;\n-pub use rustc_hir::def_id;\n-pub use rustc_hir::hir_id::*;\n pub mod intravisit;\n-pub use rustc_hir::itemlikevisit;\n pub mod map;\n-pub use rustc_hir::pat_util;\n-pub use rustc_hir::print;\n pub mod upvars;\n \n-pub use rustc_hir::BlockCheckMode::*;\n-pub use rustc_hir::FunctionRetTy::*;\n-pub use rustc_hir::PrimTy::*;\n-pub use rustc_hir::UnOp::*;\n-pub use rustc_hir::UnsafeSource::*;\n pub use rustc_hir::*;\n \n use crate::ty::query::Providers;"}, {"sha": "2c0da208d87aac80a7277584ffc3ab05503c5227", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -867,7 +867,7 @@ pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n }\n \n pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FunctionRetTy<'v>) {\n-    if let Return(ref output_ty) = *ret_ty {\n+    if let FunctionRetTy::Return(ref output_ty) = *ret_ty {\n         visitor.visit_ty(output_ty)\n     }\n }"}, {"sha": "6caba1a18a228750f437d359d8a2d15d6ff681cc", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -207,9 +207,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_unop(&mut self, u: UnOp) -> hir::UnOp {\n         match u {\n-            UnOp::Deref => hir::UnDeref,\n-            UnOp::Not => hir::UnNot,\n-            UnOp::Neg => hir::UnNeg,\n+            UnOp::Deref => hir::UnOp::UnDeref,\n+            UnOp::Not => hir::UnOp::UnNot,\n+            UnOp::Neg => hir::UnOp::UnNeg,\n         }\n     }\n \n@@ -1374,7 +1374,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     stmts: &[],\n                     expr: Some(expr),\n                     hir_id,\n-                    rules: hir::UnsafeBlock(hir::CompilerGenerated),\n+                    rules: hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::CompilerGenerated),\n                     span,\n                     targeted_by_break: false,\n                 }),"}, {"sha": "2c61255f96dc86b22c90b4790165988a0498dd82", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -2144,12 +2144,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             match decl.output {\n                 FunctionRetTy::Ty(ref ty) => match in_band_ty_params {\n-                    Some((def_id, _)) if impl_trait_return_allow => {\n-                        hir::Return(self.lower_ty(ty, ImplTraitContext::OpaqueTy(Some(def_id))))\n-                    }\n-                    _ => hir::Return(self.lower_ty(ty, ImplTraitContext::disallowed())),\n+                    Some((def_id, _)) if impl_trait_return_allow => hir::FunctionRetTy::Return(\n+                        self.lower_ty(ty, ImplTraitContext::OpaqueTy(Some(def_id))),\n+                    ),\n+                    _ => hir::FunctionRetTy::Return(\n+                        self.lower_ty(ty, ImplTraitContext::disallowed()),\n+                    ),\n                 },\n-                FunctionRetTy::Default(span) => hir::DefaultReturn(span),\n+                FunctionRetTy::Default(span) => hir::FunctionRetTy::DefaultReturn(span),\n             }\n         };\n \n@@ -2940,8 +2942,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     fn lower_block_check_mode(&mut self, b: &BlockCheckMode) -> hir::BlockCheckMode {\n         match *b {\n-            BlockCheckMode::Default => hir::DefaultBlock,\n-            BlockCheckMode::Unsafe(u) => hir::UnsafeBlock(self.lower_unsafe_source(u)),\n+            BlockCheckMode::Default => hir::BlockCheckMode::DefaultBlock,\n+            BlockCheckMode::Unsafe(u) => {\n+                hir::BlockCheckMode::UnsafeBlock(self.lower_unsafe_source(u))\n+            }\n         }\n     }\n \n@@ -2956,8 +2960,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     fn lower_unsafe_source(&mut self, u: UnsafeSource) -> hir::UnsafeSource {\n         match u {\n-            CompilerGenerated => hir::CompilerGenerated,\n-            UserProvided => hir::UserProvided,\n+            CompilerGenerated => hir::UnsafeSource::CompilerGenerated,\n+            UserProvided => hir::UnsafeSource::UserProvided,\n         }\n     }\n \n@@ -3004,7 +3008,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             stmts,\n             expr,\n             hir_id: self.next_id(),\n-            rules: hir::DefaultBlock,\n+            rules: hir::BlockCheckMode::DefaultBlock,\n             span,\n             targeted_by_break: false,\n         };"}, {"sha": "c494a285bf870991f63f622af3347092c54b92c8", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -376,7 +376,7 @@ fn lint_literal<'a, 'tcx>(\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr<'tcx>) {\n         match e.kind {\n-            hir::ExprKind::Unary(hir::UnNeg, ref expr) => {\n+            hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => {\n                 // propagate negation, if the negation itself isn't negated\n                 if self.negated_expr_id != e.hir_id {\n                     self.negated_expr_id = expr.hir_id;\n@@ -969,7 +969,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty, false);\n         }\n \n-        if let hir::Return(ref ret_hir) = decl.output {\n+        if let hir::FunctionRetTy::Return(ref ret_hir) = decl.output {\n             let ret_ty = sig.output();\n             if !ret_ty.is_unit() {\n                 self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty, false);"}, {"sha": "235821f0936a778669fd54146617a7ee349f0965", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -814,7 +814,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 }\n             }\n             hir::ExprKind::Path(ref qpath) => *self.lower_path(qpath, expr.hir_id, expr.span).kind,\n-            hir::ExprKind::Unary(hir::UnNeg, ref expr) => {\n+            hir::ExprKind::Unary(hir::UnOp::UnNeg, ref expr) => {\n                 let ty = self.tables.expr_ty(expr);\n                 let lit = match expr.kind {\n                     hir::ExprKind::Lit(ref lit) => lit,"}, {"sha": "26f59bf895f6fdd662075762cb93a251cd7bacf3", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -482,7 +482,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n     fn visit_block(&mut self, block: &'tcx hir::Block<'tcx>) {\n         hir::intravisit::walk_block(self, block);\n \n-        if let hir::UnsafeBlock(hir::UserProvided) = block.rules {\n+        if let hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::UserProvided) = block.rules {\n             self.unsafe_blocks.push((block.hir_id, self.used_unsafe.contains(&block.hir_id)));\n         }\n     }"}, {"sha": "2fc30ccd4e082e5a8a223842eb2a2b1fc1fb0823", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -651,7 +651,7 @@ fn resolve_local<'tcx>(\n \n             match expr.kind {\n                 hir::ExprKind::AddrOf(_, _, ref subexpr)\n-                | hir::ExprKind::Unary(hir::UnDeref, ref subexpr)\n+                | hir::ExprKind::Unary(hir::UnOp::UnDeref, ref subexpr)\n                 | hir::ExprKind::Field(ref subexpr, _)\n                 | hir::ExprKind::Index(ref subexpr, _) => {\n                     expr = &subexpr;"}, {"sha": "87a10d1170503fb17fdcb32b517593ead3b39991", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -26,7 +26,7 @@ use rustc::hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, Partial\n use rustc::hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::hir::exports::ExportMap;\n use rustc::hir::map::Definitions;\n-use rustc::hir::{Bool, Char, Float, Int, PrimTy, Str, Uint};\n+use rustc::hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n use rustc::hir::{GlobMap, TraitMap};\n use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};"}, {"sha": "7f51aeb46cd439a0bb018751de72897a5e496b67", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -846,8 +846,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_fn_decl(&mut self, fd: &'tcx hir::FnDecl<'tcx>) {\n         let output = match fd.output {\n-            hir::DefaultReturn(_) => None,\n-            hir::Return(ref ty) => Some(&**ty),\n+            hir::FunctionRetTy::DefaultReturn(_) => None,\n+            hir::FunctionRetTy::Return(ref ty) => Some(&**ty),\n         };\n         self.visit_fn_like_elision(&fd.inputs, output);\n     }"}, {"sha": "b9a2eeb55fcf4685b8943ed3bbd31a476a19fb1c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -2554,12 +2554,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 assert_eq!(opt_self_ty, None);\n                 self.prohibit_generics(path.segments);\n                 match prim_ty {\n-                    hir::Bool => tcx.types.bool,\n-                    hir::Char => tcx.types.char,\n-                    hir::Int(it) => tcx.mk_mach_int(it),\n-                    hir::Uint(uit) => tcx.mk_mach_uint(uit),\n-                    hir::Float(ft) => tcx.mk_mach_float(ft),\n-                    hir::Str => tcx.mk_str(),\n+                    hir::PrimTy::Bool => tcx.types.bool,\n+                    hir::PrimTy::Char => tcx.types.char,\n+                    hir::PrimTy::Int(it) => tcx.mk_mach_int(it),\n+                    hir::PrimTy::Uint(uit) => tcx.mk_mach_uint(uit),\n+                    hir::PrimTy::Float(ft) => tcx.mk_mach_float(ft),\n+                    hir::PrimTy::Str => tcx.mk_str(),\n                 }\n             }\n             Res::Err => {\n@@ -2773,11 +2773,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n         let input_tys = decl.inputs.iter().map(|a| self.ty_of_arg(a, None));\n         let output_ty = match decl.output {\n-            hir::Return(ref output) => {\n+            hir::FunctionRetTy::Return(ref output) => {\n                 visitor.visit_ty(output);\n                 self.ast_ty_to_ty(output)\n             }\n-            hir::DefaultReturn(..) => tcx.mk_unit(),\n+            hir::FunctionRetTy::DefaultReturn(..) => tcx.mk_unit(),\n         };\n \n         debug!(\"ty_of_fn: output_ty={:?}\", output_ty);"}, {"sha": "89b82ca3e54ad579d0210000e86b2dd3c44a8c04", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -548,8 +548,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // First, convert the types that the user supplied (if any).\n         let supplied_arguments = decl.inputs.iter().map(|a| astconv.ast_ty_to_ty(a));\n         let supplied_return = match decl.output {\n-            hir::Return(ref output) => astconv.ast_ty_to_ty(&output),\n-            hir::DefaultReturn(_) => match body.generator_kind {\n+            hir::FunctionRetTy::Return(ref output) => astconv.ast_ty_to_ty(&output),\n+            hir::FunctionRetTy::DefaultReturn(_) => match body.generator_kind {\n                 // In the case of the async block that we create for a function body,\n                 // we expect the return type of the block to match that of the enclosing\n                 // function.\n@@ -696,7 +696,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.types.err\n         });\n \n-        if let hir::Return(ref output) = decl.output {\n+        if let hir::FunctionRetTy::Return(ref output) = decl.output {\n             astconv.ast_ty_to_ty(&output);\n         }\n "}, {"sha": "753f9b9c9349a41d401a6e45fb154906a36a0059", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -306,19 +306,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let expected_inner = match unop {\n-            hir::UnNot | hir::UnNeg => expected,\n-            hir::UnDeref => NoExpectation,\n+            hir::UnOp::UnNot | hir::UnOp::UnNeg => expected,\n+            hir::UnOp::UnDeref => NoExpectation,\n         };\n         let needs = match unop {\n-            hir::UnDeref => needs,\n+            hir::UnOp::UnDeref => needs,\n             _ => Needs::None,\n         };\n         let mut oprnd_t = self.check_expr_with_expectation_and_needs(&oprnd, expected_inner, needs);\n \n         if !oprnd_t.references_error() {\n             oprnd_t = self.structurally_resolved_type(expr.span, oprnd_t);\n             match unop {\n-                hir::UnDeref => {\n+                hir::UnOp::UnDeref => {\n                     if let Some(mt) = oprnd_t.builtin_deref(true) {\n                         oprnd_t = mt.ty;\n                     } else if let Some(ok) = self.try_overloaded_deref(expr.span, oprnd_t, needs) {\n@@ -362,14 +362,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         oprnd_t = tcx.types.err;\n                     }\n                 }\n-                hir::UnNot => {\n+                hir::UnOp::UnNot => {\n                     let result = self.check_user_unop(expr, oprnd_t, unop);\n                     // If it's builtin, we can reuse the type, this helps inference.\n                     if !(oprnd_t.is_integral() || oprnd_t.kind == ty::Bool) {\n                         oprnd_t = result;\n                     }\n                 }\n-                hir::UnNeg => {\n+                hir::UnOp::UnNeg => {\n                     let result = self.check_user_unop(expr, oprnd_t, unop);\n                     // If it's builtin, we can reuse the type, this helps inference.\n                     if !oprnd_t.is_numeric() {"}, {"sha": "43a27ec3f3391fb9e33271b07b94157afd12db11", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -425,7 +425,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             match exprs.last().unwrap().kind {\n                 hir::ExprKind::Field(ref expr, _)\n                 | hir::ExprKind::Index(ref expr, _)\n-                | hir::ExprKind::Unary(hir::UnDeref, ref expr) => exprs.push(&expr),\n+                | hir::ExprKind::Unary(hir::UnOp::UnDeref, ref expr) => exprs.push(&expr),\n                 _ => break,\n             }\n         }\n@@ -471,7 +471,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                         &[index_expr_ty],\n                     );\n                 }\n-                hir::ExprKind::Unary(hir::UnDeref, ref base_expr) => {\n+                hir::ExprKind::Unary(hir::UnOp::UnDeref, ref base_expr) => {\n                     self.convert_place_op_to_mutable(PlaceOp::Deref, expr, base_expr, &[]);\n                 }\n                 _ => {}"}, {"sha": "85c3495425499ad24730211cf6ed25770bc085ed", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -390,6 +390,7 @@ impl UnsafetyState {\n     }\n \n     pub fn recurse(&mut self, blk: &hir::Block<'_>) -> UnsafetyState {\n+        use hir::BlockCheckMode;\n         match self.unsafety {\n             // If this unsafe, then if the outer function was already marked as\n             // unsafe we shouldn't attribute the unsafe'ness to the block. This\n@@ -399,16 +400,16 @@ impl UnsafetyState {\n \n             unsafety => {\n                 let (unsafety, def, count) = match blk.rules {\n-                    hir::PushUnsafeBlock(..) => {\n+                    BlockCheckMode::PushUnsafeBlock(..) => {\n                         (unsafety, blk.hir_id, self.unsafe_push_count.checked_add(1).unwrap())\n                     }\n-                    hir::PopUnsafeBlock(..) => {\n+                    BlockCheckMode::PopUnsafeBlock(..) => {\n                         (unsafety, blk.hir_id, self.unsafe_push_count.checked_sub(1).unwrap())\n                     }\n-                    hir::UnsafeBlock(..) => {\n+                    BlockCheckMode::UnsafeBlock(..) => {\n                         (hir::Unsafety::Unsafe, blk.hir_id, self.unsafe_push_count)\n                     }\n-                    hir::DefaultBlock => (unsafety, self.def, self.unsafe_push_count),\n+                    BlockCheckMode::DefaultBlock => (unsafety, self.def, self.unsafe_push_count),\n                 };\n                 UnsafetyState { def, unsafety, unsafe_push_count: count, from_fn: false }\n             }"}, {"sha": "35e4e3849543fdc73e4c24b9037f568e3ceb64e0", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -689,16 +689,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ),\n                     );\n                     match actual.kind {\n-                        Uint(_) if op == hir::UnNeg => {\n+                        Uint(_) if op == hir::UnOp::UnNeg => {\n                             err.note(\"unsigned values cannot be negated\");\n                         }\n                         Str | Never | Char | Tuple(_) | Array(_, _) => {}\n                         Ref(_, ref lty, _) if lty.kind == Str => {}\n                         _ => {\n                             let missing_trait = match op {\n-                                hir::UnNeg => \"std::ops::Neg\",\n-                                hir::UnNot => \"std::ops::Not\",\n-                                hir::UnDeref => \"std::ops::UnDerf\",\n+                                hir::UnOp::UnNeg => \"std::ops::Neg\",\n+                                hir::UnOp::UnNot => \"std::ops::Not\",\n+                                hir::UnOp::UnDeref => \"std::ops::UnDerf\",\n                             };\n                             err.note(&format!(\n                                 \"an implementation of `{}` might \\\n@@ -771,9 +771,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     span_bug!(span, \"&& and || are not overloadable\")\n                 }\n             }\n-        } else if let Op::Unary(hir::UnNot, _) = op {\n+        } else if let Op::Unary(hir::UnOp::UnNot, _) = op {\n             (\"not\", lang.not_trait())\n-        } else if let Op::Unary(hir::UnNeg, _) = op {\n+        } else if let Op::Unary(hir::UnOp::UnNeg, _) = op {\n             (\"neg\", lang.neg_trait())\n         } else {\n             bug!(\"lookup_op_method: op not supported: {:?}\", op)"}, {"sha": "367c455fe49348db80aa628331db7ff8e79790fa", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -492,7 +492,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n         if is_method_call {\n             let origin = match expr.kind {\n                 hir::ExprKind::MethodCall(..) => infer::ParameterOrigin::MethodCall,\n-                hir::ExprKind::Unary(op, _) if op == hir::UnDeref => {\n+                hir::ExprKind::Unary(op, _) if op == hir::UnOp::UnDeref => {\n                     infer::ParameterOrigin::OverloadedDeref\n                 }\n                 _ => infer::ParameterOrigin::OverloadedOperator,\n@@ -577,7 +577,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n                 intravisit::walk_expr(self, expr);\n             }\n \n-            hir::ExprKind::Unary(hir::UnDeref, ref base) => {\n+            hir::ExprKind::Unary(hir::UnOp::UnDeref, ref base) => {\n                 // For *a, the lifetime of a must enclose the deref\n                 if is_method_call {\n                     self.constrain_call(expr, Some(base), None::<hir::Expr<'_>>.iter());"}, {"sha": "51cee12cfdd080db0d846ea397f219aa38ed04eb", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -133,8 +133,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     // operating on scalars, we clear the overload.\n     fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr<'_>) {\n         match e.kind {\n-            hir::ExprKind::Unary(hir::UnNeg, ref inner)\n-            | hir::ExprKind::Unary(hir::UnNot, ref inner) => {\n+            hir::ExprKind::Unary(hir::UnOp::UnNeg, ref inner)\n+            | hir::ExprKind::Unary(hir::UnOp::UnNot, ref inner) => {\n                 let inner_ty = self.fcx.node_ty(inner.hir_id);\n                 let inner_ty = self.fcx.resolve_vars_if_possible(&inner_ty);\n "}, {"sha": "fb2e04191ee1a087f9e637652021988471ab64a2", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -2499,7 +2499,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n         for (input, ty) in decl.inputs.iter().zip(*fty.inputs().skip_binder()) {\n             check(&input, ty)\n         }\n-        if let hir::Return(ref ty) = decl.output {\n+        if let hir::FunctionRetTy::Return(ref ty) = decl.output {\n             check(&ty, *fty.output().skip_binder())\n         }\n     }"}, {"sha": "0c631d69f4747e289797d20a2667dfced502729c", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n             hir::ExprKind::Type(ref subexpr, _) => self.walk_expr(subexpr),\n \n-            hir::ExprKind::Unary(hir::UnDeref, ref base) => {\n+            hir::ExprKind::Unary(hir::UnOp::UnDeref, ref base) => {\n                 // *base\n                 self.select_from_expr(base);\n             }"}, {"sha": "3e003f00f6eaeaaef32ad39699ee3857cea60dc0", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -347,7 +347,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n \n         let expr_ty = self.expr_ty(expr)?;\n         match expr.kind {\n-            hir::ExprKind::Unary(hir::UnDeref, ref e_base) => {\n+            hir::ExprKind::Unary(hir::UnOp::UnDeref, ref e_base) => {\n                 if self.tables.is_method_call(expr) {\n                     self.cat_overloaded_place(expr, e_base)\n                 } else {"}, {"sha": "f6ccc79ba58236e662cd92ee96f6f2a8bd9b18b2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -1003,8 +1003,8 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n impl Clean<FunctionRetTy> for hir::FunctionRetTy<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> FunctionRetTy {\n         match *self {\n-            hir::Return(ref typ) => Return(typ.clean(cx)),\n-            hir::DefaultReturn(..) => DefaultReturn,\n+            Self::Return(ref typ) => Return(typ.clean(cx)),\n+            Self::DefaultReturn(..) => DefaultReturn,\n         }\n     }\n }"}, {"sha": "d50084322ea61199af6c532a7a5953b01e71f823", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ac10ffdec716ca1763bf0a1e45430449a7bbde/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=62ac10ffdec716ca1763bf0a1e45430449a7bbde", "patch": "@@ -567,12 +567,12 @@ pub fn resolve_type(cx: &DocContext<'_>, path: Path, id: hir::HirId) -> Type {\n \n     let is_generic = match path.res {\n         Res::PrimTy(p) => match p {\n-            hir::Str => return Primitive(PrimitiveType::Str),\n-            hir::Bool => return Primitive(PrimitiveType::Bool),\n-            hir::Char => return Primitive(PrimitiveType::Char),\n-            hir::Int(int_ty) => return Primitive(int_ty.into()),\n-            hir::Uint(uint_ty) => return Primitive(uint_ty.into()),\n-            hir::Float(float_ty) => return Primitive(float_ty.into()),\n+            hir::PrimTy::Str => return Primitive(PrimitiveType::Str),\n+            hir::PrimTy::Bool => return Primitive(PrimitiveType::Bool),\n+            hir::PrimTy::Char => return Primitive(PrimitiveType::Char),\n+            hir::PrimTy::Int(int_ty) => return Primitive(int_ty.into()),\n+            hir::PrimTy::Uint(uint_ty) => return Primitive(uint_ty.into()),\n+            hir::PrimTy::Float(float_ty) => return Primitive(float_ty.into()),\n         },\n         Res::SelfTy(..) if path.segments.len() == 1 => {\n             return Generic(kw::SelfUpper.to_string());"}]}