{"sha": "a48e33f1391596f5a746279a6e456024254fe908", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OGUzM2YxMzkxNTk2ZjVhNzQ2Mjc5YTZlNDU2MDI0MjU0ZmU5MDg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-05T02:21:26Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-05T02:32:57Z"}, "message": "Fixed missing empty vars", "tree": {"sha": "eb4c2f6f30944ebdc8bee7aa6c548986f7595228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb4c2f6f30944ebdc8bee7aa6c548986f7595228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a48e33f1391596f5a746279a6e456024254fe908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a48e33f1391596f5a746279a6e456024254fe908", "html_url": "https://github.com/rust-lang/rust/commit/a48e33f1391596f5a746279a6e456024254fe908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a48e33f1391596f5a746279a6e456024254fe908/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9239a13159d8c9217991ec08cc878c35da019a87", "url": "https://api.github.com/repos/rust-lang/rust/commits/9239a13159d8c9217991ec08cc878c35da019a87", "html_url": "https://github.com/rust-lang/rust/commit/9239a13159d8c9217991ec08cc878c35da019a87"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "3a4dbb5f53829937d004b66c7a959e3b4a4221c2", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a48e33f1391596f5a746279a6e456024254fe908/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e33f1391596f5a746279a6e456024254fe908/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=a48e33f1391596f5a746279a6e456024254fe908", "patch": "@@ -177,6 +177,9 @@ fn collect_vars(subtree: &crate::Subtree) -> Vec<SmolStr> {\n             crate::TokenTree::Subtree(subtree) => {\n                 res.extend(collect_vars(subtree));\n             }\n+            crate::TokenTree::Repeat(crate::Repeat { subtree, .. }) => {\n+                res.extend(collect_vars(subtree));\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "004faf77e91ebdead9be0329a642f882824d9f0a", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a48e33f1391596f5a746279a6e456024254fe908/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a48e33f1391596f5a746279a6e456024254fe908/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=a48e33f1391596f5a746279a6e456024254fe908", "patch": "@@ -1397,3 +1397,55 @@ quick_error ! (SORT [enum Wrapped # [derive (Debug)]] items [\n \n     assert_eq!(expanded.to_string(), \"quick_error ! (ENUM_DEFINITION [enum Wrapped # [derive (Debug)]] body [] queue [=> One : UNIT [] => Two : TUPLE [s : String]]) ;\");\n }\n+\n+#[test]\n+fn test_empty_repeat_vars_in_empty_repeat_vars() {\n+    let rules = create_rules(r#\"\n+macro_rules! delegate_impl {\n+    ([$self_type:ident, $self_wrap:ty, $self_map:ident]\n+     pub trait $name:ident $(: $sup:ident)* $(+ $more_sup:ident)* {\n+\n+        // \"Escaped\" associated types. Stripped before making the `trait`\n+        // itself, but forwarded when delegating impls.\n+        $(\n+        @escape [type $assoc_name_ext:ident]\n+        // Associated types. Forwarded.\n+        )*\n+        $(\n+        @section type\n+        $(\n+            $(#[$_assoc_attr:meta])*\n+            type $assoc_name:ident $(: $assoc_bound:ty)*;\n+        )+\n+        )*\n+        // Methods. Forwarded. Using $self_map!(self) around the self argument.\n+        // Methods must use receiver `self` or explicit type like `self: &Self`\n+        // &self and &mut self are _not_ supported.\n+        $(\n+        @section self\n+        $(\n+            $(#[$_method_attr:meta])*\n+            fn $method_name:ident(self $(: $self_selftype:ty)* $(,$marg:ident : $marg_ty:ty)*) -> $mret:ty;\n+        )+\n+        )*\n+        // Arbitrary tail that is ignored when forwarding.\n+        $(\n+        @section nodelegate\n+        $($tail:tt)*\n+        )*\n+    }) => {\n+        impl<> $name for $self_wrap where $self_type: $name {\n+            $(\n+            $(\n+                fn $method_name(self $(: $self_selftype)* $(,$marg: $marg_ty)*) -> $mret {\n+                    $self_map!(self).$method_name($($marg),*)\n+                }\n+            )*\n+            )*\n+        }\n+    }\n+}\n+\"#);\n+\n+    assert_expansion(MacroKind::Items, &rules, r#\"delegate_impl ! {[G , & 'a mut G , deref] pub trait Data : GraphBase {@ section type type NodeWeight ;}}\"#, \"impl <> Data for & \\'a mut G where G : Data {}\");\n+}"}]}