{"sha": "529c369c9bc15a73e7a03260eca84ccef99ac281", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyOWMzNjljOWJjMTVhNzNlN2EwMzI2MGVjYTg0Y2NlZjk5YWMyODE=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2020-09-11T17:03:28Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2020-09-11T17:08:50Z"}, "message": "Fix type walking about type of async block", "tree": {"sha": "a7b7d23711cdc583467c1ab5c5b8e608e8530861", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7b7d23711cdc583467c1ab5c5b8e608e8530861"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/529c369c9bc15a73e7a03260eca84ccef99ac281", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl9brzAACgkQztOS3gxI\nPQCLzxAAsXcF3JHyKvjBYA4xkbPrMqb29y/OhljxI/LCHQnjxRn99+yuFvYbq6U5\nxkwlbzJgAia/R/q3fUwEw/vQ3qKSTm9QShuFZmmtHtMcrYbcq14Haa87bA7ARqWu\nwCerabVfVVLgJl4svTgJY6aUxIC61iRAv5kjSqPxs/5M8XaSfoPyrtb0EdVT+pjP\nrzl9ioG5YRT/f/OytAJZyVz8n1CTdAEk3zCVhG78b8GQe0wB2CshfQ7JRMr6Caxs\nfgWXLt6RkCIzOiwUG+mbusN1HmBlwt7h9+5S1I/+aMtj7uEgO30Ttt32O0fExjbv\nxNgpzXYfXfZax3aKVB5HqX1QIg+5f9qlFQAZaOQPfTVh9Fg0e8OS5UhKTyLO1C9z\n9xWcA7DaklhkQ4KNujcd3tlMA+abQaS/+da75+FKdCuDA5niOYNCEAlpidM4CPGc\nVD7ch6N+6+3+F8xVjv8Oosqpowz8FVV0jQhZtcBZQRySgJUFqi5uwWPMVy8JIj6G\nW0AWTEN1yGb0VGUlMXJeSklXlogTDwUwNa+JWCTnfu1C6Q9nzoO5ANm1K2HDBfE6\nnlR4zErbpb3oRbYdvFGOXoid9PKORQv10ntYAt0hHk7rh3EOaNc2U2rcyljGIgoY\nTlBT8VNoijRhcuPIZoIMPZpORkh4TfTgbSQwJtRkGEmHsABoqow=\n=E4KF\n-----END PGP SIGNATURE-----", "payload": "tree a7b7d23711cdc583467c1ab5c5b8e608e8530861\nparent cc4e287bb519565e1d6d79d6e9bba19adbe9cc77\nauthor oxalica <oxalicc@pm.me> 1599843808 +0800\ncommitter oxalica <oxalicc@pm.me> 1599844130 +0800\n\nFix type walking about type of async block\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/529c369c9bc15a73e7a03260eca84ccef99ac281", "html_url": "https://github.com/rust-lang/rust/commit/529c369c9bc15a73e7a03260eca84ccef99ac281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/529c369c9bc15a73e7a03260eca84ccef99ac281/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4e287bb519565e1d6d79d6e9bba19adbe9cc77", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e287bb519565e1d6d79d6e9bba19adbe9cc77", "html_url": "https://github.com/rust-lang/rust/commit/cc4e287bb519565e1d6d79d6e9bba19adbe9cc77"}], "stats": {"total": 92, "additions": 78, "deletions": 14}, "files": [{"sha": "7a9747fc71024968b4d39875c990b61963317405", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/529c369c9bc15a73e7a03260eca84ccef99ac281/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c369c9bc15a73e7a03260eca84ccef99ac281/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=529c369c9bc15a73e7a03260eca84ccef99ac281", "patch": "@@ -1602,6 +1602,11 @@ impl Type {\n                                 cb(type_.derived(ty.clone()));\n                             }\n                         }\n+                        TypeCtor::OpaqueType(..) => {\n+                            if let Some(bounds) = ty.impl_trait_bounds(db) {\n+                                walk_bounds(db, &type_.derived(ty.clone()), &bounds, cb);\n+                            }\n+                        }\n                         _ => (),\n                     }\n "}, {"sha": "f16d1fc979f0bd8fe1848da57b381d78874bb2e3", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/529c369c9bc15a73e7a03260eca84ccef99ac281/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c369c9bc15a73e7a03260eca84ccef99ac281/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=529c369c9bc15a73e7a03260eca84ccef99ac281", "patch": "@@ -33,7 +33,6 @@ use hir_def::{\n     AdtId, AssocContainerId, DefWithBodyId, GenericDefId, HasModule, Lookup, TraitId, TypeAliasId,\n     TypeParamId,\n };\n-use hir_expand::name::name;\n use itertools::Itertools;\n \n use crate::{\n@@ -848,26 +847,22 @@ impl Ty {\n \n     pub fn impl_trait_bounds(&self, db: &dyn HirDatabase) -> Option<Vec<GenericPredicate>> {\n         match self {\n-            Ty::Apply(ApplicationTy { ctor: TypeCtor::OpaqueType(opaque_ty_id), parameters }) => {\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::OpaqueType(opaque_ty_id), .. }) => {\n                 match opaque_ty_id {\n                     OpaqueTyId::AsyncBlockTypeImplTrait(def, _expr) => {\n                         let krate = def.module(db.upcast()).krate;\n-                        if let Some(future_output) = db\n+                        if let Some(future_trait) = db\n                             .lang_item(krate, \"future_trait\".into())\n                             .and_then(|item| item.as_trait())\n-                            .and_then(|trait_| {\n-                                db.trait_data(trait_).associated_type_by_name(&name![Output])\n-                            })\n                         {\n-                            let proj = GenericPredicate::Projection(ProjectionPredicate {\n-                                projection_ty: ProjectionTy {\n-                                    associated_ty: future_output,\n-                                    // Self type.\n-                                    parameters: Substs::single(self.clone()),\n-                                },\n-                                ty: parameters[0].clone(),\n+                            // This is only used by type walking.\n+                            // Parameters will be walked outside, and projection predicate is not used.\n+                            // So just provide the Future trait.\n+                            let impl_bound = GenericPredicate::Implemented(TraitRef {\n+                                trait_: future_trait,\n+                                substs: Substs::empty(),\n                             });\n-                            Some(vec![proj])\n+                            Some(vec![impl_bound])\n                         } else {\n                             None\n                         }"}, {"sha": "37171cbef33ae552cd644e46e36ac45a1143abde", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/529c369c9bc15a73e7a03260eca84ccef99ac281/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529c369c9bc15a73e7a03260eca84ccef99ac281/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=529c369c9bc15a73e7a03260eca84ccef99ac281", "patch": "@@ -2646,6 +2646,70 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n         );\n     }\n \n+    #[test]\n+    fn test_hover_async_block_impl_trait_has_goto_type_action() {\n+        check_actions(\n+            r#\"\n+struct S;\n+fn foo() {\n+    let fo<|>o = async { S };\n+}\n+\n+#[prelude_import] use future::*;\n+mod future {\n+    #[lang = \"future_trait\"]\n+    pub trait Future { type Output; }\n+}\n+\"#,\n+            expect![[r#\"\n+                [\n+                    GoToType(\n+                        [\n+                            HoverGotoTypeData {\n+                                mod_path: \"test::future::Future\",\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        1,\n+                                    ),\n+                                    full_range: 101..163,\n+                                    focus_range: Some(\n+                                        140..146,\n+                                    ),\n+                                    name: \"Future\",\n+                                    kind: TRAIT,\n+                                    container_name: None,\n+                                    description: Some(\n+                                        \"pub trait Future\",\n+                                    ),\n+                                    docs: None,\n+                                },\n+                            },\n+                            HoverGotoTypeData {\n+                                mod_path: \"test::S\",\n+                                nav: NavigationTarget {\n+                                    file_id: FileId(\n+                                        1,\n+                                    ),\n+                                    full_range: 0..9,\n+                                    focus_range: Some(\n+                                        7..8,\n+                                    ),\n+                                    name: \"S\",\n+                                    kind: STRUCT,\n+                                    container_name: None,\n+                                    description: Some(\n+                                        \"struct S\",\n+                                    ),\n+                                    docs: None,\n+                                },\n+                            },\n+                        ],\n+                    ),\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_hover_arg_generic_impl_trait_has_goto_type_action() {\n         check_actions("}]}