{"sha": "db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMGMxY2IxM2M5YTFlNjhjMDllMjA3NGI2ZDNhN2IzODEyMmZiNzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-10T21:02:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-10T21:02:08Z"}, "message": "Auto merge of #24689 - SimonSapin:formatter-write-char, r=alexcrichton\n\nThis is the logical next step after #24661, but I\u2019m less sure about this one.\r\n\r\nr? @alexcrichton", "tree": {"sha": "ce750a4a1a1377aeadabec5990944fa2cf4a41d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce750a4a1a1377aeadabec5990944fa2cf4a41d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76", "html_url": "https://github.com/rust-lang/rust/commit/db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae8a3c92a77e9295a764fc98998245aa1e0336b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8a3c92a77e9295a764fc98998245aa1e0336b1", "html_url": "https://github.com/rust-lang/rust/commit/ae8a3c92a77e9295a764fc98998245aa1e0336b1"}, {"sha": "63da18b269128c6594b0fa60064b187a9b5d0418", "url": "https://api.github.com/repos/rust-lang/rust/commits/63da18b269128c6594b0fa60064b187a9b5d0418", "html_url": "https://github.com/rust-lang/rust/commit/63da18b269128c6594b0fa60064b187a9b5d0418"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "da4d24bdc7b3401bd1bea7661695a6cefc570823", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76", "patch": "@@ -892,6 +892,21 @@ impl<'a> Formatter<'a> {\n     }\n }\n \n+#[stable(since = \"1.2.0\", feature = \"formatter_write\")]\n+impl<'a> Write for Formatter<'a> {\n+    fn write_str(&mut self, s: &str) -> Result {\n+        self.buf.write_str(s)\n+    }\n+\n+    fn write_char(&mut self, c: char) -> Result {\n+        self.buf.write_char(c)\n+    }\n+\n+    fn write_fmt(&mut self, args: Arguments) -> Result {\n+        write(self.buf, args)\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for Error {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n@@ -965,10 +980,7 @@ impl Debug for char {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Display for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        let mut utf8 = [0; 4];\n-        let amt = self.encode_utf8(&mut utf8).unwrap_or(0);\n-        let s: &str = unsafe { mem::transmute(&utf8[..amt]) };\n-        Display::fmt(s, f)\n+        f.write_char(*self)\n     }\n }\n "}, {"sha": "c8adb6ccc0ab8598379bbf2388d27c04d206871c", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=db0c1cb13c9a1e68c09e2074b6d3a7b38122fb76", "patch": "@@ -15,12 +15,13 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-use std::fmt;\n+use std::fmt::{self, Write};\n use std::usize;\n \n struct A;\n struct B;\n struct C;\n+struct D;\n \n impl fmt::LowerHex for A {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -37,6 +38,13 @@ impl fmt::Display for C {\n         f.pad_integral(true, \"\u2603\", \"123\")\n     }\n }\n+impl fmt::Binary for D {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(f.write_str(\"aa\"));\n+        try!(f.write_char('\u2603'));\n+        f.write_str(\"bb\")\n+    }\n+}\n \n macro_rules! t {\n     ($a:expr, $b:expr) => { assert_eq!($a, $b) }\n@@ -90,6 +98,7 @@ pub fn main() {\n     t!(format!(\"{foo_bar}\", foo_bar=1), \"1\");\n     t!(format!(\"{}\", 5 + 5), \"10\");\n     t!(format!(\"{:#4}\", C), \"\u2603123\");\n+    t!(format!(\"{:b}\", D), \"aa\u2603bb\");\n \n     let a: &fmt::Debug = &1;\n     t!(format!(\"{:?}\", a), \"1\");"}]}