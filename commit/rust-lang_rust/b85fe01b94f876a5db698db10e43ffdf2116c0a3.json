{"sha": "b85fe01b94f876a5db698db10e43ffdf2116c0a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NWZlMDFiOTRmODc2YTVkYjY5OGRiMTBlNDNmZmRmMjExNmMwYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-25T19:16:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-25T19:16:29Z"}, "message": "auto merge of #11725 : derekchiang/rust/add-barrier, r=alexcrichton", "tree": {"sha": "42afbedb0015b9dfc224eea540449e9c2e69572a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42afbedb0015b9dfc224eea540449e9c2e69572a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85fe01b94f876a5db698db10e43ffdf2116c0a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85fe01b94f876a5db698db10e43ffdf2116c0a3", "html_url": "https://github.com/rust-lang/rust/commit/b85fe01b94f876a5db698db10e43ffdf2116c0a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85fe01b94f876a5db698db10e43ffdf2116c0a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60260b6d43053490b9bd46d3d5e0364290f80393", "url": "https://api.github.com/repos/rust-lang/rust/commits/60260b6d43053490b9bd46d3d5e0364290f80393", "html_url": "https://github.com/rust-lang/rust/commit/60260b6d43053490b9bd46d3d5e0364290f80393"}, {"sha": "a937d1875eba9367c9a4b43d1a9b113ecbf72b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/a937d1875eba9367c9a4b43d1a9b113ecbf72b37", "html_url": "https://github.com/rust-lang/rust/commit/a937d1875eba9367c9a4b43d1a9b113ecbf72b37"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "c4277bddac7187e680b66deba0e62dbdd39e58e0", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/b85fe01b94f876a5db698db10e43ffdf2116c0a3/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85fe01b94f876a5db698db10e43ffdf2116c0a3/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=b85fe01b94f876a5db698db10e43ffdf2116c0a3", "patch": "@@ -27,6 +27,8 @@ use std::unstable::finally::Finally;\n use std::util;\n use std::util::NonCopyable;\n \n+use arc::MutexArc;\n+\n /****************************************************************************\n  * Internals\n  ****************************************************************************/\n@@ -682,6 +684,67 @@ impl<'a> RWLockReadMode<'a> {\n     pub fn read<U>(&self, blk: || -> U) -> U { blk() }\n }\n \n+/// A barrier enables multiple tasks to synchronize the beginning\n+/// of some computation.\n+/// ```rust\n+/// use extra::sync::Barrier;\n+///\n+/// let barrier = Barrier::new(10);\n+/// 10.times(|| {\n+///     let c = barrier.clone();\n+///     // The same messages will be printed together.\n+///     // You will NOT see any interleaving.\n+///     do spawn {\n+///         println!(\"before wait\");\n+///         c.wait();\n+///         println!(\"after wait\");\n+///     }\n+/// });\n+/// ```\n+#[deriving(Clone)]\n+pub struct Barrier {\n+    priv arc: MutexArc<BarrierState>,\n+    priv num_tasks: uint,\n+}\n+\n+// The inner state of a double barrier\n+struct BarrierState {\n+    priv count: uint,\n+    priv generation_id: uint,\n+}\n+\n+impl Barrier {\n+    /// Create a new barrier that can block a given number of tasks.\n+    pub fn new(num_tasks: uint) -> Barrier {\n+        Barrier {\n+            arc: MutexArc::new(BarrierState {\n+                count: 0,\n+                generation_id: 0,\n+            }),\n+            num_tasks: num_tasks,\n+        }\n+    }\n+\n+    /// Block the current task until a certain number of tasks is waiting.\n+    pub fn wait(&self) {\n+        self.arc.access_cond(|state, cond| {\n+            let local_gen = state.generation_id;\n+            state.count += 1;\n+            if state.count < self.num_tasks {\n+                // We need a while loop to guard against spurious wakeups.\n+                // http://en.wikipedia.org/wiki/Spurious_wakeup\n+                while local_gen == state.generation_id && state.count < self.num_tasks {\n+                    cond.wait();\n+                }\n+            } else {\n+                state.count = 0;\n+                state.generation_id += 1;\n+                cond.broadcast();\n+            }\n+        });\n+    }\n+}\n+\n /****************************************************************************\n  * Tests\n  ****************************************************************************/\n@@ -693,6 +756,7 @@ mod tests {\n     use std::cast;\n     use std::result;\n     use std::task;\n+    use std::comm::{SharedChan, Empty};\n \n     /************************************************************************\n      * Semaphore tests\n@@ -1315,4 +1379,35 @@ mod tests {\n             })\n         })\n     }\n+\n+    /************************************************************************\n+     * Barrier tests\n+     ************************************************************************/\n+    #[test]\n+    fn test_barrier() {\n+        let barrier = Barrier::new(10);\n+        let (port, chan) = SharedChan::new();\n+\n+        9.times(|| {\n+            let c = barrier.clone();\n+            let chan = chan.clone();\n+            do spawn {\n+                c.wait();\n+                chan.send(true);\n+            }\n+        });\n+\n+        // At this point, all spawned tasks should be blocked,\n+        // so we shouldn't get anything from the port\n+        assert!(match port.try_recv() {\n+            Empty => true,\n+            _ => false,\n+        });\n+\n+        barrier.wait();\n+        // Now, the barrier is cleared and we should get data.\n+        9.times(|| {\n+            port.recv();\n+        });\n+    }\n }"}]}