{"sha": "83e75f92079909aa07306633f26f42eccfb608e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZTc1ZjkyMDc5OTA5YWEwNzMwNjYzM2YyNmY0MmVjY2ZiNjA4ZTE=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-11-05T17:00:34Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-11-05T17:00:34Z"}, "message": "Fix incorrect suggestion for `try_err` lint when `Err` arg is itself a macro", "tree": {"sha": "d3199ebaad04be47776c11a52cbe7dbe658b50a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3199ebaad04be47776c11a52cbe7dbe658b50a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e75f92079909aa07306633f26f42eccfb608e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e75f92079909aa07306633f26f42eccfb608e1", "html_url": "https://github.com/rust-lang/rust/commit/83e75f92079909aa07306633f26f42eccfb608e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e75f92079909aa07306633f26f42eccfb608e1/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/f83762b79cf23bfa91d77d6f04ec2b87b2159b07", "html_url": "https://github.com/rust-lang/rust/commit/f83762b79cf23bfa91d77d6f04ec2b87b2159b07"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "e1dec63a98a4036076e81e39c375bb20e0941c26", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83e75f92079909aa07306633f26f42eccfb608e1/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e75f92079909aa07306633f26f42eccfb608e1/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=83e75f92079909aa07306633f26f42eccfb608e1", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    in_macro, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet, snippet_with_macro_callsite,\n-    span_lint_and_sugg,\n+    differing_macro_contexts, in_macro, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet,\n+    snippet_with_macro_callsite, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -91,8 +91,11 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n                 };\n \n                 let expr_err_ty = cx.typeck_results().expr_ty(err_arg);\n+                let differing_contexts = differing_macro_contexts(expr.span, err_arg.span);\n \n-                let origin_snippet = if err_arg.span.from_expansion() && !in_macro(expr.span) {\n+                let origin_snippet = if in_macro(expr.span) && in_macro(err_arg.span) && differing_contexts {\n+                    snippet(cx, err_arg.span.ctxt().outer_expn_data().call_site, \"_\")\n+                } else if err_arg.span.from_expansion() && !in_macro(expr.span) {\n                     snippet_with_macro_callsite(cx, err_arg.span, \"_\")\n                 } else {\n                     snippet(cx, err_arg.span, \"_\")"}, {"sha": "aa43e69f79e8b0bd40a36c5c299c820f361dc6f7", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/83e75f92079909aa07306633f26f42eccfb608e1/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/83e75f92079909aa07306633f26f42eccfb608e1/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=83e75f92079909aa07306633f26f42eccfb608e1", "patch": "@@ -88,8 +88,26 @@ macro_rules! try_validation {\n     }};\n }\n \n+macro_rules! ret_one {\n+    () => {\n+        1\n+    };\n+}\n+\n+macro_rules! try_validation_in_macro {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => return Err(ret_one!()),\n+        }\n+    }};\n+}\n+\n fn calling_macro() -> Result<i32, i32> {\n+    // macro\n     try_validation!(Ok::<_, i32>(5));\n+    // `Err` arg is another macro\n+    try_validation_in_macro!(Ok::<_, i32>(5));\n     Ok(5)\n }\n "}, {"sha": "df3a9dc5367f3861a266f44e77da87818c514481", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/83e75f92079909aa07306633f26f42eccfb608e1/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e75f92079909aa07306633f26f42eccfb608e1/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=83e75f92079909aa07306633f26f42eccfb608e1", "patch": "@@ -88,8 +88,26 @@ macro_rules! try_validation {\n     }};\n }\n \n+macro_rules! ret_one {\n+    () => {\n+        1\n+    };\n+}\n+\n+macro_rules! try_validation_in_macro {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => Err(ret_one!())?,\n+        }\n+    }};\n+}\n+\n fn calling_macro() -> Result<i32, i32> {\n+    // macro\n     try_validation!(Ok::<_, i32>(5));\n+    // `Err` arg is another macro\n+    try_validation_in_macro!(Ok::<_, i32>(5));\n     Ok(5)\n }\n "}, {"sha": "3905ed2476b0852883cae0a23393d7780afa27c0", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/83e75f92079909aa07306633f26f42eccfb608e1/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83e75f92079909aa07306633f26f42eccfb608e1/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=83e75f92079909aa07306633f26f42eccfb608e1", "patch": "@@ -40,28 +40,39 @@ LL |     try_validation!(Ok::<_, i32>(5));\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:122:9\n+  --> $DIR/try_err.rs:101:23\n+   |\n+LL |             Err(_) => Err(ret_one!())?,\n+   |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(ret_one!())`\n+...\n+LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n+   |     ------------------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:140:9\n    |\n LL |         Err(foo!())?;\n    |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:129:9\n+  --> $DIR/try_err.rs:147:9\n    |\n LL |         Err(io::ErrorKind::WriteZero)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::ErrorKind::WriteZero.into()))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:131:9\n+  --> $DIR/try_err.rs:149:9\n    |\n LL |         Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\"))?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\")))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:139:9\n+  --> $DIR/try_err.rs:157:9\n    |\n LL |         Err(io::ErrorKind::NotFound)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Some(Err(io::ErrorKind::NotFound.into())))`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n "}]}