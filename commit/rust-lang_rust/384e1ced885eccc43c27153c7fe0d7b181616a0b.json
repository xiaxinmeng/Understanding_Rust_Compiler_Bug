{"sha": "384e1ced885eccc43c27153c7fe0d7b181616a0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NGUxY2VkODg1ZWNjYzQzYzI3MTUzYzdmZTBkN2IxODE2MTZhMGI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-01-10T12:36:09Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-01-12T12:25:58Z"}, "message": "Use prev_token and next_token", "tree": {"sha": "867ca5d143d0a737a7522e8c13c32e8e4c04842d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/867ca5d143d0a737a7522e8c13c32e8e4c04842d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/384e1ced885eccc43c27153c7fe0d7b181616a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/384e1ced885eccc43c27153c7fe0d7b181616a0b", "html_url": "https://github.com/rust-lang/rust/commit/384e1ced885eccc43c27153c7fe0d7b181616a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/384e1ced885eccc43c27153c7fe0d7b181616a0b/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7ab0792114fe66c61c921b08f6262123fb8ddd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ab0792114fe66c61c921b08f6262123fb8ddd0", "html_url": "https://github.com/rust-lang/rust/commit/b7ab0792114fe66c61c921b08f6262123fb8ddd0"}], "stats": {"total": 91, "additions": 47, "deletions": 44}, "files": [{"sha": "9b6bbe82df12bcc94ed47ae216b0735ac4a6b908", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 47, "deletions": 44, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/384e1ced885eccc43c27153c7fe0d7b181616a0b/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384e1ced885eccc43c27153c7fe0d7b181616a0b/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=384e1ced885eccc43c27153c7fe0d7b181616a0b", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n \n use crate::{db::RootDatabase, expand::descend_into_macros, FileId, FileRange};\n use hir::db::AstDatabase;\n-use itertools::Itertools;\n+use std::iter::successors;\n \n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n     let src = db.parse(frange.file_id).tree();\n@@ -110,46 +110,28 @@ fn extend_tokens_from_range(\n     macro_call: ast::MacroCall,\n     original_range: TextRange,\n ) -> Option<TextRange> {\n-    // Find all non-whitespace tokens under MacroCall\n-    let all_tokens: Vec<_> = macro_call\n-        .syntax()\n-        .descendants_with_tokens()\n-        .filter_map(|n| {\n-            let token = n.as_token()?;\n-            if token.kind() == WHITESPACE {\n-                None\n-            } else {\n-                Some(token.clone())\n-            }\n-        })\n-        .sorted_by(|a, b| Ord::cmp(&a.text_range().start(), &b.text_range().start()))\n-        .collect();\n-\n-    // Get all indices which is in original range\n-    let indices: Vec<_> =\n-        all_tokens\n-            .iter()\n-            .enumerate()\n-            .filter_map(|(i, token)| {\n-                if token.text_range().is_subrange(&original_range) {\n-                    Some(i)\n-                } else {\n-                    None\n-                }\n-            })\n-            .collect();\n+    let src = find_covering_element(&macro_call.syntax(), original_range);\n+    let (first_token, last_token) = match src {\n+        NodeOrToken::Node(it) => (it.first_token()?, it.last_token()?),\n+        NodeOrToken::Token(it) => (it.clone(), it),\n+    };\n+\n+    let mut first_token = skip_whitespace(first_token, Direction::Next)?;\n+    let mut last_token = skip_whitespace(last_token, Direction::Prev)?;\n \n-    // The first and last token index in original_range\n-    // Note that the indices is sorted\n-    let first_idx = *indices.first()?;\n-    let last_idx = *indices.last()?;\n+    while !first_token.text_range().is_subrange(&original_range) {\n+        first_token = skip_whitespace(first_token.next_token()?, Direction::Next)?;\n+    }\n+    while !last_token.text_range().is_subrange(&original_range) {\n+        last_token = skip_whitespace(last_token.prev_token()?, Direction::Prev)?;\n+    }\n \n     // compute original mapped token range\n     let expanded = {\n-        let first_node = descend_into_macros(db, file_id, all_tokens[first_idx].clone());\n+        let first_node = descend_into_macros(db, file_id, first_token.clone());\n         let first_node = first_node.map(|it| it.text_range());\n \n-        let last_node = descend_into_macros(db, file_id, all_tokens[last_idx].clone());\n+        let last_node = descend_into_macros(db, file_id, last_token.clone());\n         if last_node.file_id == file_id.into() || first_node.file_id != last_node.file_id {\n             return None;\n         }\n@@ -160,27 +142,48 @@ fn extend_tokens_from_range(\n     let src = db.parse_or_expand(expanded.file_id)?;\n     let parent = shallowest_node(&find_covering_element(&src, expanded.value))?.parent()?;\n \n-    let validate = |&idx: &usize| {\n-        let token: &SyntaxToken = &all_tokens[idx];\n+    let validate = |token: SyntaxToken| {\n         let node = descend_into_macros(db, file_id, token.clone());\n-\n-        node.file_id == expanded.file_id\n+        if node.file_id == expanded.file_id\n             && node.value.text_range().is_subrange(&parent.text_range())\n+        {\n+            Some(token)\n+        } else {\n+            None\n+        }\n     };\n \n     // Find the first and last text range under expanded parent\n-    let first = (0..=first_idx).rev().take_while(validate).last()?;\n-    let last = (last_idx..all_tokens.len()).take_while(validate).last()?;\n-\n-    let range = union_range(all_tokens[first].text_range(), all_tokens[last].text_range());\n-\n+    let first = successors(Some(first_token), |token| {\n+        validate(skip_whitespace(token.prev_token()?, Direction::Prev)?)\n+    })\n+    .last()?;\n+    let last = successors(Some(last_token), |token| {\n+        validate(skip_whitespace(token.next_token()?, Direction::Next)?)\n+    })\n+    .last()?;\n+\n+    let range = union_range(first.text_range(), last.text_range());\n     if original_range.is_subrange(&range) && original_range != range {\n         Some(range)\n     } else {\n         None\n     }\n }\n \n+fn skip_whitespace(\n+    mut token: SyntaxToken,\n+    direction: Direction,\n+) -> Option<SyntaxToken> {\n+    while token.kind() == WHITESPACE {\n+        token = match direction {\n+            Direction::Next => token.next_token()?,\n+            Direction::Prev =>  token.prev_token()?,\n+        }\n+    }\n+    Some(token)\n+}\n+\n fn union_range(range: TextRange, r: TextRange) -> TextRange {\n     let start = range.start().min(r.start());\n     let end = range.end().max(r.end());"}]}