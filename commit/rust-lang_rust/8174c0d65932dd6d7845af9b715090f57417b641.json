{"sha": "8174c0d65932dd6d7845af9b715090f57417b641", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNzRjMGQ2NTkzMmRkNmQ3ODQ1YWY5YjcxNTA5MGY1NzQxN2I2NDE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-02-20T00:08:36Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-02-20T00:08:36Z"}, "message": "rustbuild: make libdir_relative a method", "tree": {"sha": "7700f534d67f7551f6a7cd9dc60d9a3e7a5e93ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7700f534d67f7551f6a7cd9dc60d9a3e7a5e93ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8174c0d65932dd6d7845af9b715090f57417b641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8174c0d65932dd6d7845af9b715090f57417b641", "html_url": "https://github.com/rust-lang/rust/commit/8174c0d65932dd6d7845af9b715090f57417b641", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8174c0d65932dd6d7845af9b715090f57417b641/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80970e6953faaba886215d8abd34e70f1d510103", "url": "https://api.github.com/repos/rust-lang/rust/commits/80970e6953faaba886215d8abd34e70f1d510103", "html_url": "https://github.com/rust-lang/rust/commit/80970e6953faaba886215d8abd34e70f1d510103"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "fcb78c479fa278daa5d0d3b84d9902453a21b1f2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8174c0d65932dd6d7845af9b715090f57417b641/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8174c0d65932dd6d7845af9b715090f57417b641/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=8174c0d65932dd6d7845af9b715090f57417b641", "patch": "@@ -444,10 +444,11 @@ impl<'a> Builder<'a> {\n \n             fn run(self, builder: &Builder) -> Interned<PathBuf> {\n                 let compiler = self.compiler;\n-                let lib = if compiler.stage >= 1 && builder.build.config.libdir_relative.is_some() {\n-                    builder.build.config.libdir_relative.clone().unwrap()\n+                let config = &builder.build.config;\n+                let lib = if compiler.stage >= 1 && config.libdir_relative().is_some() {\n+                    builder.build.config.libdir_relative().unwrap()\n                 } else {\n-                    PathBuf::from(\"lib\")\n+                    Path::new(\"lib\")\n                 };\n                 let sysroot = builder.sysroot(self.compiler).join(lib)\n                     .join(\"rustlib\").join(self.target).join(\"lib\");"}, {"sha": "c85b04ddc02458fb82a63c655ff5db6ebd80ed10", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8174c0d65932dd6d7845af9b715090f57417b641/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8174c0d65932dd6d7845af9b715090f57417b641/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=8174c0d65932dd6d7845af9b715090f57417b641", "patch": "@@ -516,8 +516,7 @@ fn rustc_cargo_env(build: &Build, cargo: &mut Command) {\n          .env(\"CFG_VERSION\", build.rust_version())\n          .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or_default());\n \n-    let libdir_relative =\n-        build.config.libdir_relative.clone().unwrap_or(PathBuf::from(\"lib\"));\n+    let libdir_relative = build.config.libdir_relative().unwrap_or(Path::new(\"lib\"));\n     cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n \n     // If we're not building a compiler with debugging information then remove"}, {"sha": "3cf8f36df25ee683d1c319a92ad2a991e02fbcb0", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8174c0d65932dd6d7845af9b715090f57417b641/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8174c0d65932dd6d7845af9b715090f57417b641/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8174c0d65932dd6d7845af9b715090f57417b641", "patch": "@@ -17,7 +17,7 @@ use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs::File;\n use std::io::prelude::*;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::process;\n use std::cmp;\n \n@@ -126,7 +126,6 @@ pub struct Config {\n     pub docdir: Option<PathBuf>,\n     pub bindir: Option<PathBuf>,\n     pub libdir: Option<PathBuf>,\n-    pub libdir_relative: Option<PathBuf>,\n     pub mandir: Option<PathBuf>,\n     pub codegen_tests: bool,\n     pub nodejs: Option<PathBuf>,\n@@ -418,22 +417,6 @@ impl Config {\n             config.mandir = install.mandir.clone().map(PathBuf::from);\n         }\n \n-        // Try to infer `libdir_relative` from `libdir`.\n-        if let Some(ref libdir) = config.libdir {\n-            let mut libdir = libdir.as_path();\n-            if !libdir.is_relative() {\n-                // Try to make it relative to the prefix.\n-                if let Some(ref prefix) = config.prefix {\n-                    if let Ok(suffix) = libdir.strip_prefix(prefix) {\n-                        libdir = suffix;\n-                    }\n-                }\n-            }\n-            if libdir.is_relative() {\n-                config.libdir_relative = Some(libdir.to_path_buf());\n-            }\n-        }\n-\n         // Store off these values as options because if they're not provided\n         // we'll infer default values for them later\n         let mut thinlto = None;\n@@ -581,6 +564,17 @@ impl Config {\n         config\n     }\n \n+    /// Try to find the relative path of `libdir`.\n+    pub fn libdir_relative(&self) -> Option<&Path> {\n+        let libdir = self.libdir.as_ref()?;\n+        if libdir.is_relative() {\n+            Some(libdir)\n+        } else {\n+            // Try to make it relative to the prefix.\n+            libdir.strip_prefix(self.prefix.as_ref()?).ok()\n+        }\n+    }\n+\n     pub fn verbose(&self) -> bool {\n         self.verbose > 0\n     }"}]}