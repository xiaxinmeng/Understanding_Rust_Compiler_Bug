{"sha": "a05c4a1e5f9e2c5cc718abb8aa035af565fe8b01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNWM0YTFlNWY5ZTJjNWNjNzE4YWJiOGFhMDM1YWY1NjVmZThiMDE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-15T04:44:48Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-15T04:44:48Z"}, "message": "remove old internal iterator range tests\n\nThe cases they test are well covered in the `std::iter` tests.", "tree": {"sha": "eba63d5914d3a43534f2bf388375c4a08e9d70ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eba63d5914d3a43534f2bf388375c4a08e9d70ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a05c4a1e5f9e2c5cc718abb8aa035af565fe8b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a05c4a1e5f9e2c5cc718abb8aa035af565fe8b01", "html_url": "https://github.com/rust-lang/rust/commit/a05c4a1e5f9e2c5cc718abb8aa035af565fe8b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a05c4a1e5f9e2c5cc718abb8aa035af565fe8b01/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e3d5c62e79026920d09833889ea837b19b0a9d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3d5c62e79026920d09833889ea837b19b0a9d0", "html_url": "https://github.com/rust-lang/rust/commit/6e3d5c62e79026920d09833889ea837b19b0a9d0"}], "stats": {"total": 254, "additions": 0, "deletions": 254}, "files": [{"sha": "05b84c059c4b37788539b86cde4f3544e284126e", "filename": "src/test/run-pass/num-range-rev.rs", "status": "removed", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d5c62e79026920d09833889ea837b19b0a9d0/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d5c62e79026920d09833889ea837b19b0a9d0/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs?ref=6e3d5c62e79026920d09833889ea837b19b0a9d0", "patch": "@@ -1,126 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::int;\n-use std::uint;\n-\n-fn uint_range(lo: uint, hi: uint, it: &fn(uint) -> bool) -> bool {\n-    range(lo, hi).advance(it)\n-}\n-\n-fn int_range(lo: int,  hi: int, it: &fn(int) -> bool) -> bool {\n-    range(lo, hi).advance(it)\n-}\n-\n-fn uint_range_rev(hi: uint, lo: uint, it: &fn(uint) -> bool) -> bool {\n-    range(lo, hi).invert().advance(it)\n-}\n-\n-fn int_range_rev(hi: int,  lo: int, it: &fn(int) -> bool) -> bool {\n-    range(lo, hi).invert().advance(it)\n-}\n-\n-fn int_range_step(a: int, b: int, step: int, it: &fn(int) -> bool) -> bool {\n-    std::iter::range_step(a, b, step).advance(it)\n-}\n-\n-fn uint_range_step(a: uint, b: uint, step: int, it: &fn(uint) -> bool) -> bool {\n-    std::iter::range_step(a, b, step).advance(it)\n-}\n-\n-\n-pub fn main() {\n-    // int and uint have same result for\n-    //   Sum{100 > i >= 2} == (Sum{1 <= i <= 99} - 1) == n*(n+1)/2 - 1 for n=99\n-    let mut sum = 0u;\n-    do uint_range_rev(100, 2) |i| {\n-        sum += i;\n-        true\n-    };\n-    assert_eq!(sum, 4949);\n-\n-    let mut sum = 0i;\n-    do int_range_rev(100, 2) |i| {\n-        sum += i;\n-        true\n-    };\n-    assert_eq!(sum, 4949);\n-\n-\n-    // elements are visited in correct order\n-    let primes = [2,3,5,7,11];\n-    let mut prod = 1i;\n-    do uint_range_rev(5, 0) |i| {\n-        printfln!(\"uint 4 downto 0: %u\", i);\n-        prod *= int::pow(primes[i], i);\n-        true\n-    };\n-    assert_eq!(prod, 11*11*11*11*7*7*7*5*5*3*1);\n-    let mut prod = 1i;\n-    do int_range_rev(5, 0) |i| {\n-        printfln!(\"int 4 downto 0: %d\", i);\n-        prod *= int::pow(primes[i], i as uint);\n-        true\n-    };\n-    assert_eq!(prod, 11*11*11*11*7*7*7*5*5*3*1);\n-\n-\n-    // range and range_rev are symmetric.\n-    let mut sum_up = 0u;\n-    do uint_range(10, 30) |i| {\n-        sum_up += i;\n-        true\n-    };\n-    let mut sum_down = 0u;\n-    do uint_range_rev(30, 10) |i| {\n-        sum_down += i;\n-        true\n-    };\n-    assert_eq!(sum_up, sum_down);\n-\n-    let mut sum_up = 0;\n-    do int_range(-20, 10) |i| {\n-        sum_up += i;\n-        true\n-    };\n-    let mut sum_down = 0;\n-    do int_range_rev(10, -20) |i| {\n-        sum_down += i;\n-        true\n-    };\n-    assert_eq!(sum_up, sum_down);\n-\n-\n-    // empty ranges\n-    do int_range_rev(10, 10) |_| {\n-        fail!(\"range should be empty when start == stop\");\n-        true\n-    };\n-\n-    do uint_range_rev(0, 1) |_| {\n-        fail!(\"range should be empty when start-1 underflows\");\n-        true\n-    };\n-\n-    // range iterations do not wrap/underflow\n-    let mut uflo_loop_visited = ~[];\n-    do int_range_step(int::min_value+15, int::min_value, -4) |x| {\n-        uflo_loop_visited.push(x - int::min_value);\n-        true\n-    };\n-    assert_eq!(uflo_loop_visited, ~[15, 11, 7, 3]);\n-\n-    let mut uflo_loop_visited = ~[];\n-    do uint_range_step(uint::min_value+15, uint::min_value, -4) |x| {\n-        uflo_loop_visited.push(x - uint::min_value);\n-        true\n-    };\n-    assert_eq!(uflo_loop_visited, ~[15, 11, 7, 3]);\n-}"}, {"sha": "5f87d01719ec08f17e1760b1eea127e8bee212b7", "filename": "src/test/run-pass/num-range.rs", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/6e3d5c62e79026920d09833889ea837b19b0a9d0/src%2Ftest%2Frun-pass%2Fnum-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3d5c62e79026920d09833889ea837b19b0a9d0/src%2Ftest%2Frun-pass%2Fnum-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range.rs?ref=6e3d5c62e79026920d09833889ea837b19b0a9d0", "patch": "@@ -1,128 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::int;\n-use std::uint;\n-\n-fn uint_range(lo: uint, hi: uint, it: &fn(uint) -> bool) -> bool {\n-    range(lo, hi).advance(it)\n-}\n-\n-fn int_range(lo: int, hi: int, it: &fn(int) -> bool) -> bool {\n-    range(lo, hi).advance(it)\n-}\n-\n-fn int_range_step(a: int, b: int, step: int, it: &fn(int) -> bool) -> bool {\n-    std::iter::range_step(a, b, step).advance(it)\n-}\n-\n-fn uint_range_step(a: uint, b: uint, s: int, it: &fn(uint) -> bool) -> bool {\n-    std::iter::range_step(a, b, s).advance(it)\n-}\n-\n-pub fn main() {\n-    println(\"num-range start\");\n-    // int and uint have same result for\n-    //   Sum{2 <= i < 100} == (Sum{1 <= i <= 99} - 1) == n*(n+1)/2 - 1 for n=99\n-    let mut sum = 0u;\n-    do uint_range(2, 100) |i| {\n-        sum += i;\n-        true\n-    };\n-    assert_eq!(sum, 4949);\n-\n-    let mut sum = 0i;\n-    do int_range(2, 100) |i| {\n-        sum += i;\n-        true\n-    };\n-    assert_eq!(sum, 4949);\n-\n-\n-    // elements are visited in correct order\n-    let primes = [2,3,5,7];\n-    let mut prod = 1i;\n-    do uint_range(0, 4) |i| {\n-        prod *= int::pow(primes[i], i);\n-        true\n-    };\n-    assert_eq!(prod, 1*3*5*5*7*7*7);\n-    let mut prod = 1i;\n-    do int_range(0, 4) |i| {\n-        prod *= int::pow(primes[i], i as uint);\n-        true\n-    };\n-    assert_eq!(prod, 1*3*5*5*7*7*7);\n-\n-\n-    // empty ranges\n-    do int_range(10, 10) |_| {\n-        fail!(\"range should be empty when start == stop\");\n-        true\n-    };\n-\n-    do uint_range(10, 10) |_| {\n-        fail!(\"range should be empty when start == stop\");\n-        true\n-    };\n-\n-\n-    // range iterations do not wrap/overflow\n-    let mut oflo_loop_visited = ~[];\n-    do uint_range_step(uint::max_value-15, uint::max_value, 4) |x| {\n-        oflo_loop_visited.push(uint::max_value - x);\n-        true\n-    };\n-    assert_eq!(oflo_loop_visited, ~[15, 11, 7, 3]);\n-\n-    let mut oflo_loop_visited = ~[];\n-    do int_range_step(int::max_value-15, int::max_value, 4) |x| {\n-        oflo_loop_visited.push(int::max_value - x);\n-        true\n-    };\n-    assert_eq!(oflo_loop_visited, ~[15, 11, 7, 3]);\n-\n-\n-    // range_step never passes nor visits the stop element\n-    do int_range_step(0, 21, 3) |x| {\n-        assert!(x < 21);\n-        true\n-    };\n-\n-    // range_step_inclusive will never pass stop element, and may skip it.\n-    let mut saw21 = false;\n-    for x in std::iter::range_step_inclusive(0, 21, 4) {\n-        assert!(x <= 21);\n-        if x == 21 { saw21 = true; }\n-    }\n-    assert!(!saw21);\n-    let mut saw21 = false;\n-    for x in std::iter::range_step_inclusive(0, 21, 4) {\n-        assert!(x <= 21);\n-        if x == 21 { saw21 = true; }\n-    }\n-    assert!(!saw21);\n-\n-    // range_step_inclusive will never pass stop element, but may visit it.\n-    let mut saw21 = false;\n-    for x in std::iter::range_step_inclusive(0, 21, 3) {\n-        assert!(x <= 21);\n-        printfln!(\"saw: %u\", x);\n-        if x == 21 { saw21 = true; }\n-    }\n-    assert!(saw21);\n-    let mut saw21 = false;\n-    for x in std::iter::range_step_inclusive(0, 21, 3) {\n-        assert!(x <= 21);\n-        if x == 21 { saw21 = true; }\n-    }\n-    assert!(saw21);\n-\n-}"}]}