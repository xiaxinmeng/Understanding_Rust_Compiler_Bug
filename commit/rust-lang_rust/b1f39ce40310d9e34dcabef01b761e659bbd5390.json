{"sha": "b1f39ce40310d9e34dcabef01b761e659bbd5390", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZjM5Y2U0MDMxMGQ5ZTM0ZGNhYmVmMDFiNzYxZTY1OWJiZDUzOTA=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-06-13T02:02:33Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-15T21:17:50Z"}, "message": "Move CrateContext into it's own file", "tree": {"sha": "a0648214cb9db6fbdff0e9cbc01f762b21fd57da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0648214cb9db6fbdff0e9cbc01f762b21fd57da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1f39ce40310d9e34dcabef01b761e659bbd5390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f39ce40310d9e34dcabef01b761e659bbd5390", "html_url": "https://github.com/rust-lang/rust/commit/b1f39ce40310d9e34dcabef01b761e659bbd5390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1f39ce40310d9e34dcabef01b761e659bbd5390/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98b1c9e2072328177b73b44c4aa3a962fc66647f", "url": "https://api.github.com/repos/rust-lang/rust/commits/98b1c9e2072328177b73b44c4aa3a962fc66647f", "html_url": "https://github.com/rust-lang/rust/commit/98b1c9e2072328177b73b44c4aa3a962fc66647f"}], "stats": {"total": 208, "additions": 127, "deletions": 81}, "files": [{"sha": "3a9c68fcbe51c534056a2fe436d6651a8ec773fe", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1f39ce40310d9e34dcabef01b761e659bbd5390/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f39ce40310d9e34dcabef01b761e659bbd5390/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=b1f39ce40310d9e34dcabef01b761e659bbd5390", "patch": "@@ -18,7 +18,7 @@ use lib::llvm::ModuleRef;\n use lib;\n use metadata::common::LinkMeta;\n use metadata::{encoder, csearch, cstore};\n-use middle::trans::common::CrateContext;\n+use middle::trans::context::CrateContext;\n use middle::ty;\n use util::ppaux;\n "}, {"sha": "abfce366007078bad2e341e3b43780481afeeed2", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 80, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b1f39ce40310d9e34dcabef01b761e659bbd5390/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f39ce40310d9e34dcabef01b761e659bbd5390/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b1f39ce40310d9e34dcabef01b761e659bbd5390", "patch": "@@ -55,6 +55,8 @@ use syntax::parse::token;\n use syntax::{ast, ast_map};\n use syntax::abi::{X86, X86_64, Arm, Mips};\n \n+pub use middle::trans::context::CrateContext;\n+\n // NOTE: this thunk is totally pointless now that we're not passing\n // interners around...\n pub type namegen = @fn(s: &str) -> ident;\n@@ -156,86 +158,6 @@ pub fn BuilderRef_res(B: BuilderRef) -> BuilderRef_res {\n \n pub type ExternMap = @mut HashMap<@str, ValueRef>;\n \n-// Crate context.  Every crate we compile has one of these.\n-pub struct CrateContext {\n-     sess: session::Session,\n-     llmod: ModuleRef,\n-     llcx: ContextRef,\n-     td: TargetData,\n-     tn: @TypeNames,\n-     externs: ExternMap,\n-     intrinsics: HashMap<&'static str, ValueRef>,\n-     item_vals: @mut HashMap<ast::node_id, ValueRef>,\n-     exp_map2: resolve::ExportMap2,\n-     reachable: reachable::map,\n-     item_symbols: @mut HashMap<ast::node_id, ~str>,\n-     link_meta: LinkMeta,\n-     enum_sizes: @mut HashMap<ty::t, uint>,\n-     discrims: @mut HashMap<ast::def_id, ValueRef>,\n-     discrim_symbols: @mut HashMap<ast::node_id, @str>,\n-     tydescs: @mut HashMap<ty::t, @mut tydesc_info>,\n-     // Set when running emit_tydescs to enforce that no more tydescs are\n-     // created.\n-     finished_tydescs: @mut bool,\n-     // Track mapping of external ids to local items imported for inlining\n-     external: @mut HashMap<ast::def_id, Option<ast::node_id>>,\n-     // Cache instances of monomorphized functions\n-     monomorphized: @mut HashMap<mono_id, ValueRef>,\n-     monomorphizing: @mut HashMap<ast::def_id, uint>,\n-     // Cache computed type parameter uses (see type_use.rs)\n-     type_use_cache: @mut HashMap<ast::def_id, @~[type_use::type_uses]>,\n-     // Cache generated vtables\n-     vtables: @mut HashMap<mono_id, ValueRef>,\n-     // Cache of constant strings,\n-     const_cstr_cache: @mut HashMap<@str, ValueRef>,\n-\n-     // Reverse-direction for const ptrs cast from globals.\n-     // Key is an int, cast from a ValueRef holding a *T,\n-     // Val is a ValueRef holding a *[T].\n-     //\n-     // Needed because LLVM loses pointer->pointee association\n-     // when we ptrcast, and we have to ptrcast during translation\n-     // of a [T] const because we form a slice, a [*T,int] pair, not\n-     // a pointer to an LLVM array type.\n-     const_globals: @mut HashMap<int, ValueRef>,\n-\n-     // Cache of emitted const values\n-     const_values: @mut HashMap<ast::node_id, ValueRef>,\n-\n-     // Cache of external const values\n-     extern_const_values: @mut HashMap<ast::def_id, ValueRef>,\n-\n-     impl_method_cache: @mut HashMap<(ast::def_id, ast::ident), ast::def_id>,\n-\n-     module_data: @mut HashMap<~str, ValueRef>,\n-     lltypes: @mut HashMap<ty::t, TypeRef>,\n-     llsizingtypes: @mut HashMap<ty::t, TypeRef>,\n-     adt_reprs: @mut HashMap<ty::t, @adt::Repr>,\n-     names: namegen,\n-     next_addrspace: addrspace_gen,\n-     symbol_hasher: @mut hash::State,\n-     type_hashcodes: @mut HashMap<ty::t, @str>,\n-     type_short_names: @mut HashMap<ty::t, ~str>,\n-     all_llvm_symbols: @mut HashSet<@str>,\n-     tcx: ty::ctxt,\n-     maps: astencode::Maps,\n-     stats: @mut Stats,\n-     upcalls: @upcall::Upcalls,\n-     tydesc_type: TypeRef,\n-     int_type: TypeRef,\n-     float_type: TypeRef,\n-     opaque_vec_type: TypeRef,\n-     builder: BuilderRef_res,\n-     shape_cx: shape::Ctxt,\n-     crate_map: ValueRef,\n-     // Set when at least one function uses GC. Needed so that\n-     // decl_gc_metadata knows whether to link to the module metadata, which\n-     // is not emitted by LLVM's GC pass when no functions use GC.\n-     uses_gc: @mut bool,\n-     dbg_cx: Option<debuginfo::DebugContext>,\n-     do_not_commit_warning_issued: @mut bool\n-}\n-\n // Types used for llself.\n pub struct ValSelfData {\n     v: ValueRef,"}, {"sha": "6d090e444bf322b91bfeb1547ec1100bb35b7c15", "filename": "src/librustc/middle/trans/context.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/b1f39ce40310d9e34dcabef01b761e659bbd5390/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f39ce40310d9e34dcabef01b761e659bbd5390/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=b1f39ce40310d9e34dcabef01b761e659bbd5390", "patch": "@@ -0,0 +1,123 @@\n+use core::prelude::*;\n+\n+use back::{abi, upcall};\n+use driver::session;\n+use driver::session::Session;\n+use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n+use lib::llvm::{ContextRef, True, False, Bool};\n+use lib::llvm::{llvm, TargetData, TypeNames, associate_type, name_has_type};\n+use lib;\n+use metadata::common::LinkMeta;\n+use middle::astencode;\n+use middle::resolve;\n+use middle::trans::adt;\n+use middle::trans::base;\n+use middle::trans::build;\n+use middle::trans::datum;\n+use middle::trans::debuginfo;\n+use middle::trans::glue;\n+use middle::trans::reachable;\n+use middle::trans::shape;\n+use middle::trans::type_of;\n+use middle::trans::type_use;\n+use middle::trans::write_guard;\n+use middle::ty::substs;\n+use middle::ty;\n+use middle::typeck;\n+use middle::borrowck::root_map_key;\n+\n+use core::cast::transmute;\n+use core::cast;\n+use core::hash;\n+use core::hashmap::{HashMap, HashSet};\n+use core::libc::{c_uint, c_longlong, c_ulonglong};\n+use core::str;\n+use core::to_bytes;\n+use core::vec::raw::to_ptr;\n+use core::vec;\n+use syntax::ast::ident;\n+use syntax::ast_map::{path, path_elt};\n+use syntax::codemap::span;\n+use syntax::parse::token;\n+use syntax::{ast, ast_map};\n+use syntax::abi::{X86, X86_64, Arm, Mips};\n+\n+use middle::trans::common::{ExternMap,tydesc_info,BuilderRef_res,Stats,namegen,addrspace_gen};\n+use middle::trans::common::{mono_id};\n+\n+pub struct CrateContext {\n+     sess: session::Session,\n+     llmod: ModuleRef,\n+     llcx: ContextRef,\n+     td: TargetData,\n+     tn: @TypeNames,\n+     externs: ExternMap,\n+     intrinsics: HashMap<&'static str, ValueRef>,\n+     item_vals: @mut HashMap<ast::node_id, ValueRef>,\n+     exp_map2: resolve::ExportMap2,\n+     reachable: reachable::map,\n+     item_symbols: @mut HashMap<ast::node_id, ~str>,\n+     link_meta: LinkMeta,\n+     enum_sizes: @mut HashMap<ty::t, uint>,\n+     discrims: @mut HashMap<ast::def_id, ValueRef>,\n+     discrim_symbols: @mut HashMap<ast::node_id, @str>,\n+     tydescs: @mut HashMap<ty::t, @mut tydesc_info>,\n+     // Set when running emit_tydescs to enforce that no more tydescs are\n+     // created.\n+     finished_tydescs: @mut bool,\n+     // Track mapping of external ids to local items imported for inlining\n+     external: @mut HashMap<ast::def_id, Option<ast::node_id>>,\n+     // Cache instances of monomorphized functions\n+     monomorphized: @mut HashMap<mono_id, ValueRef>,\n+     monomorphizing: @mut HashMap<ast::def_id, uint>,\n+     // Cache computed type parameter uses (see type_use.rs)\n+     type_use_cache: @mut HashMap<ast::def_id, @~[type_use::type_uses]>,\n+     // Cache generated vtables\n+     vtables: @mut HashMap<mono_id, ValueRef>,\n+     // Cache of constant strings,\n+     const_cstr_cache: @mut HashMap<@str, ValueRef>,\n+\n+     // Reverse-direction for const ptrs cast from globals.\n+     // Key is an int, cast from a ValueRef holding a *T,\n+     // Val is a ValueRef holding a *[T].\n+     //\n+     // Needed because LLVM loses pointer->pointee association\n+     // when we ptrcast, and we have to ptrcast during translation\n+     // of a [T] const because we form a slice, a [*T,int] pair, not\n+     // a pointer to an LLVM array type.\n+     const_globals: @mut HashMap<int, ValueRef>,\n+\n+     // Cache of emitted const values\n+     const_values: @mut HashMap<ast::node_id, ValueRef>,\n+\n+     // Cache of external const values\n+     extern_const_values: @mut HashMap<ast::def_id, ValueRef>,\n+\n+     module_data: @mut HashMap<~str, ValueRef>,\n+     lltypes: @mut HashMap<ty::t, TypeRef>,\n+     llsizingtypes: @mut HashMap<ty::t, TypeRef>,\n+     adt_reprs: @mut HashMap<ty::t, @adt::Repr>,\n+     names: namegen,\n+     next_addrspace: addrspace_gen,\n+     symbol_hasher: @mut hash::State,\n+     type_hashcodes: @mut HashMap<ty::t, @str>,\n+     type_short_names: @mut HashMap<ty::t, ~str>,\n+     all_llvm_symbols: @mut HashSet<@str>,\n+     tcx: ty::ctxt,\n+     maps: astencode::Maps,\n+     stats: @mut Stats,\n+     upcalls: @upcall::Upcalls,\n+     tydesc_type: TypeRef,\n+     int_type: TypeRef,\n+     float_type: TypeRef,\n+     opaque_vec_type: TypeRef,\n+     builder: BuilderRef_res,\n+     shape_cx: shape::Ctxt,\n+     crate_map: ValueRef,\n+     // Set when at least one function uses GC. Needed so that\n+     // decl_gc_metadata knows whether to link to the module metadata, which\n+     // is not emitted by LLVM's GC pass when no functions use GC.\n+     uses_gc: @mut bool,\n+     dbg_cx: Option<debuginfo::DebugContext>,\n+     do_not_commit_warning_issued: @mut bool\n+}"}, {"sha": "49cadfbcc81a3edea1061a72c53a9367fe358e04", "filename": "src/librustc/middle/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1f39ce40310d9e34dcabef01b761e659bbd5390/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f39ce40310d9e34dcabef01b761e659bbd5390/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmod.rs?ref=b1f39ce40310d9e34dcabef01b761e659bbd5390", "patch": "@@ -18,6 +18,7 @@ pub mod write_guard;\n pub mod callee;\n pub mod expr;\n pub mod common;\n+pub mod context;\n pub mod consts;\n pub mod type_of;\n pub mod build;"}]}