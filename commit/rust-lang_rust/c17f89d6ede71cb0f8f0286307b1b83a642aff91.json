{"sha": "c17f89d6ede71cb0f8f0286307b1b83a642aff91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxN2Y4OWQ2ZWRlNzFjYjBmOGYwMjg2MzA3YjFiODNhNjQyYWZmOTE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-30T16:54:40Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-30T16:54:40Z"}, "message": "caller_location: point to macro invocation sites, like file!/line!.", "tree": {"sha": "66666d0fd2591bf4b71db78b53356f14f3ac13ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66666d0fd2591bf4b71db78b53356f14f3ac13ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c17f89d6ede71cb0f8f0286307b1b83a642aff91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c17f89d6ede71cb0f8f0286307b1b83a642aff91", "html_url": "https://github.com/rust-lang/rust/commit/c17f89d6ede71cb0f8f0286307b1b83a642aff91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c17f89d6ede71cb0f8f0286307b1b83a642aff91/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7e28a1610924a27471ffdb59a2885709b3b415", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7e28a1610924a27471ffdb59a2885709b3b415", "html_url": "https://github.com/rust-lang/rust/commit/0b7e28a1610924a27471ffdb59a2885709b3b415"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "43a9ae9ba5d835091b3e6af12096145dfeff977f", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c17f89d6ede71cb0f8f0286307b1b83a642aff91/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17f89d6ede71cb0f8f0286307b1b83a642aff91/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=c17f89d6ede71cb0f8f0286307b1b83a642aff91", "patch": "@@ -995,7 +995,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         span: Span,\n     ) -> OperandRef<'tcx, Bx::Value> {\n-        let caller = bx.tcx().sess.source_map().lookup_char_pos(span.lo());\n+        let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n+        let caller = bx.tcx().sess.source_map().lookup_char_pos(topmost.lo());\n         let const_loc = bx.tcx().const_caller_location((\n             Symbol::intern(&caller.file.name.to_string()),\n             caller.line as u32,"}, {"sha": "abbf430f21eb27cdc3a73562b69974dd787c3af3", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c17f89d6ede71cb0f8f0286307b1b83a642aff91/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17f89d6ede71cb0f8f0286307b1b83a642aff91/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=c17f89d6ede71cb0f8f0286307b1b83a642aff91", "patch": "@@ -98,7 +98,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let intrinsic_name = &self.tcx.item_name(instance.def_id()).as_str()[..];\n         match intrinsic_name {\n             \"caller_location\" => {\n-                let caller = self.tcx.sess.source_map().lookup_char_pos(span.lo());\n+                let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n+                let caller = self.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n                 let location = self.alloc_caller_location(\n                     Symbol::intern(&caller.file.name.to_string()),\n                     caller.line as u32,"}, {"sha": "e8be57dfd4ce98be8e9ee9f05e07616bca664d55", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c17f89d6ede71cb0f8f0286307b1b83a642aff91/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17f89d6ede71cb0f8f0286307b1b83a642aff91/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=c17f89d6ede71cb0f8f0286307b1b83a642aff91", "patch": "@@ -954,18 +954,7 @@ impl<'a> ExtCtxt<'a> {\n     ///\n     /// Stops backtracing at include! boundary.\n     pub fn expansion_cause(&self) -> Option<Span> {\n-        let mut expn_id = self.current_expansion.id;\n-        let mut last_macro = None;\n-        loop {\n-            let expn_data = expn_id.expn_data();\n-            // Stop going up the backtrace once include! is encountered\n-            if expn_data.is_root() || expn_data.kind.descr() == sym::include {\n-                break;\n-            }\n-            expn_id = expn_data.call_site.ctxt().outer_expn();\n-            last_macro = Some(expn_data.call_site);\n-        }\n-        last_macro\n+        self.current_expansion.id.expansion_cause()\n     }\n \n     pub fn struct_span_warn<S: Into<MultiSpan>>(&self,"}, {"sha": "2a48f8e44aa1259a2e7d6add29b70c9cc8589e16", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c17f89d6ede71cb0f8f0286307b1b83a642aff91/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17f89d6ede71cb0f8f0286307b1b83a642aff91/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=c17f89d6ede71cb0f8f0286307b1b83a642aff91", "patch": "@@ -28,7 +28,7 @@\n use crate::GLOBALS;\n use crate::{Span, DUMMY_SP};\n use crate::edition::Edition;\n-use crate::symbol::{kw, Symbol};\n+use crate::symbol::{kw, sym, Symbol};\n \n use rustc_serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::FxHashMap;\n@@ -119,6 +119,23 @@ impl ExpnId {\n     pub fn outer_expn_is_descendant_of(self, ctxt: SyntaxContext) -> bool {\n         HygieneData::with(|data| data.is_descendant_of(self, data.outer_expn(ctxt)))\n     }\n+\n+    /// Returns span for the macro which originally caused this expansion to happen.\n+    ///\n+    /// Stops backtracing at include! boundary.\n+    pub fn expansion_cause(mut self) -> Option<Span> {\n+        let mut last_macro = None;\n+        loop {\n+            let expn_data = self.expn_data();\n+            // Stop going up the backtrace once include! is encountered\n+            if expn_data.is_root() || expn_data.kind.descr() == sym::include {\n+                break;\n+            }\n+            self = expn_data.call_site.ctxt().outer_expn();\n+            last_macro = Some(expn_data.call_site);\n+        }\n+        last_macro\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "1c4d4666fa1800c2a57bc06849facfe660a20dca", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-intrinsic.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c17f89d6ede71cb0f8f0286307b1b83a642aff91/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17f89d6ede71cb0f8f0286307b1b83a642aff91/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-intrinsic.rs?ref=c17f89d6ede71cb0f8f0286307b1b83a642aff91", "patch": "@@ -1,9 +1,21 @@\n // run-pass\n \n #![feature(core_intrinsics)]\n+\n+macro_rules! caller_location_from_macro {\n+    () => (core::intrinsics::caller_location());\n+}\n+\n fn main() {\n     let loc = core::intrinsics::caller_location();\n     assert_eq!(loc.file(), file!());\n-    assert_eq!(loc.line(), 5);\n+    assert_eq!(loc.line(), 10);\n     assert_eq!(loc.column(), 15);\n+\n+    // `caller_location()` in a macro should behave similarly to `file!` and `line!`,\n+    // i.e. point to where the macro was invoked, instead of the macro itself.\n+    let loc2 = caller_location_from_macro!();\n+    assert_eq!(loc2.file(), file!());\n+    assert_eq!(loc2.line(), 17);\n+    assert_eq!(loc2.column(), 16);\n }"}]}