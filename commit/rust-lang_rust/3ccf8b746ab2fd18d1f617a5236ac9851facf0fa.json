{"sha": "3ccf8b746ab2fd18d1f617a5236ac9851facf0fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjY2Y4Yjc0NmFiMmZkMThkMWY2MTdhNTIzNmFjOTg1MWZhY2YwZmE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-12T16:52:29Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-12T16:52:29Z"}, "message": "Also consider associated constants", "tree": {"sha": "563ee354e5fb3c4a8d545f93fe6431036412301b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/563ee354e5fb3c4a8d545f93fe6431036412301b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ccf8b746ab2fd18d1f617a5236ac9851facf0fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ccf8b746ab2fd18d1f617a5236ac9851facf0fa", "html_url": "https://github.com/rust-lang/rust/commit/3ccf8b746ab2fd18d1f617a5236ac9851facf0fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ccf8b746ab2fd18d1f617a5236ac9851facf0fa/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f65daf23dfb14677d6b23557e4356aec6fdee065", "url": "https://api.github.com/repos/rust-lang/rust/commits/f65daf23dfb14677d6b23557e4356aec6fdee065", "html_url": "https://github.com/rust-lang/rust/commit/f65daf23dfb14677d6b23557e4356aec6fdee065"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8d8fe464574ce1cb4fcf6b931f96f14d8547c5df", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ccf8b746ab2fd18d1f617a5236ac9851facf0fa/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ccf8b746ab2fd18d1f617a5236ac9851facf0fa/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=3ccf8b746ab2fd18d1f617a5236ac9851facf0fa", "patch": "@@ -115,7 +115,7 @@ impl AutoImportAssets {\n         match &self.import_candidate {\n             ImportCandidate::UnqualifiedName(name) => name,\n             ImportCandidate::QualifierStart(qualifier_start) => qualifier_start,\n-            ImportCandidate::TraitFunction(_, trait_function_name) => trait_function_name,\n+            ImportCandidate::TraitAssocItem(_, trait_function_name) => trait_function_name,\n             ImportCandidate::TraitMethod(_, trait_method_name) => trait_method_name,\n         }\n     }\n@@ -126,8 +126,8 @@ impl AutoImportAssets {\n             ImportCandidate::QualifierStart(qualifier_start) => {\n                 format!(\"Import {}\", qualifier_start)\n             }\n-            ImportCandidate::TraitFunction(_, trait_function_name) => {\n-                format!(\"Import a trait for function {}\", trait_function_name)\n+            ImportCandidate::TraitAssocItem(_, trait_function_name) => {\n+                format!(\"Import a trait for item {}\", trait_function_name)\n             }\n             ImportCandidate::TraitMethod(_, trait_method_name) => {\n                 format!(\"Import a trait for method {}\", trait_method_name)\n@@ -142,7 +142,7 @@ impl AutoImportAssets {\n             .find_imports(&self.get_search_query())\n             .into_iter()\n             .map(|module_def| match &self.import_candidate {\n-                ImportCandidate::TraitFunction(function_callee, _) => {\n+                ImportCandidate::TraitAssocItem(function_callee, _) => {\n                     let mut applicable_traits = Vec::new();\n                     if let ModuleDef::Function(located_function) = module_def {\n                         let trait_candidates: FxHashSet<_> =\n@@ -255,10 +255,10 @@ enum ImportCandidate {\n     /// First part of the qualified name.\n     /// For 'std::collections::HashMap', that will be 'std'.\n     QualifierStart(String),\n-    /// A trait function that has no self parameter.\n+    /// A trait associated function (with no self parameter) or associated constant.\n     /// For 'test_mod::TestEnum::test_function', `Type` is the `test_mod::TestEnum` expression type\n-    /// and `String`is the `test_function`\n-    TraitFunction(Type, String),\n+    /// and `String` is the `test_function`\n+    TraitAssocItem(Type, String),\n     /// A trait method with self parameter.\n     /// For 'test_enum.test_method()', `Type` is the `test_enum` expression type\n     /// and `String` is the `test_method`\n@@ -303,7 +303,7 @@ impl ImportCandidate {\n                     source_analyzer.resolve_path(db, &qualifier)?\n                 };\n                 if let PathResolution::Def(ModuleDef::Adt(function_callee)) = qualifier_resolution {\n-                    Some(ImportCandidate::TraitFunction(\n+                    Some(ImportCandidate::TraitAssocItem(\n                         function_callee.ty(db),\n                         segment.syntax().to_string(),\n                     ))"}]}