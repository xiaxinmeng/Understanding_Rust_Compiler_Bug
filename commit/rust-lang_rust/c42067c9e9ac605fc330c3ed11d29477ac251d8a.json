{"sha": "c42067c9e9ac605fc330c3ed11d29477ac251d8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MjA2N2M5ZTlhYzYwNWZjMzMwYzNlZDExZDI5NDc3YWMyNTFkOGE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-16T22:11:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-18T12:24:57Z"}, "message": "ast: Document Expr_, UnOp, and BinOp", "tree": {"sha": "73daf7f764c4900ab3f94b4f64bd0bf0c5d0508c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73daf7f764c4900ab3f94b4f64bd0bf0c5d0508c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c42067c9e9ac605fc330c3ed11d29477ac251d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c42067c9e9ac605fc330c3ed11d29477ac251d8a", "html_url": "https://github.com/rust-lang/rust/commit/c42067c9e9ac605fc330c3ed11d29477ac251d8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c42067c9e9ac605fc330c3ed11d29477ac251d8a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f649c479ce40f3b4590590dda6c2895e8d60f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f649c479ce40f3b4590590dda6c2895e8d60f6", "html_url": "https://github.com/rust-lang/rust/commit/46f649c479ce40f3b4590590dda6c2895e8d60f6"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "1188e2921eb713803c697a145a699b9fbd303749", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c42067c9e9ac605fc330c3ed11d29477ac251d8a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42067c9e9ac605fc330c3ed11d29477ac251d8a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c42067c9e9ac605fc330c3ed11d29477ac251d8a", "patch": "@@ -594,33 +594,55 @@ pub enum Mutability {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum BinOp_ {\n+    /// The `+` operator (addition)\n     BiAdd,\n+    /// The `-` operator (subtraction)\n     BiSub,\n+    /// The `*` operator (multiplication)\n     BiMul,\n+    /// The `/` operator (division)\n     BiDiv,\n+    /// The `%` operator (modulus)\n     BiRem,\n+    /// The `&&` operator (logical and)\n     BiAnd,\n+    /// The `||` operator (logical or)\n     BiOr,\n+    /// The `^` operator (bitwise xor)\n     BiBitXor,\n+    /// The `&` operator (bitwise and)\n     BiBitAnd,\n+    /// The `|` operator (bitwise or)\n     BiBitOr,\n+    /// The `<<` operator (shift left)\n     BiShl,\n+    /// The `>>` operator (shift right)\n     BiShr,\n+    /// The `==` operator (equality)\n     BiEq,\n+    /// The `<` operator (less than)\n     BiLt,\n+    /// The `<=` operator (less than or equal to)\n     BiLe,\n+    /// The `!=` operator (not equal to)\n     BiNe,\n+    /// The `>=` operator (greater than or equal to)\n     BiGe,\n+    /// The `>` operator (greater than)\n     BiGt,\n }\n \n pub type BinOp = Spanned<BinOp_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum UnOp {\n+    /// The `box` operator\n     UnUniq,\n+    /// The `*` operator for dereferencing\n     UnDeref,\n+    /// The `!` operator for logical inversion\n     UnNot,\n+    /// The `-` operator for negation\n     UnNeg\n }\n \n@@ -725,54 +747,101 @@ pub struct Expr {\n pub enum Expr_ {\n     /// First expr is the place; second expr is the value.\n     ExprBox(Option<P<Expr>>, P<Expr>),\n+    /// An array (`[a, b, c, d]`)\n     ExprVec(Vec<P<Expr>>),\n+    /// A function cal\n     ExprCall(P<Expr>, Vec<P<Expr>>),\n+    /// A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)\n+    /// The `SpannedIdent` is the identifier for the method name\n+    /// The vector of `Ty`s are the ascripted type parameters for the method\n+    /// (within the angle brackets)\n+    /// The first element of the vector of `Expr`s is the expression that evaluates\n+    /// to the object on which the method is being called on, and the remaining elements\n+    /// are the arguments\n     ExprMethodCall(SpannedIdent, Vec<P<Ty>>, Vec<P<Expr>>),\n+    /// A tuple (`(a, b, c ,d)`)\n     ExprTup(Vec<P<Expr>>),\n+    /// A binary operation (For example: `a + b`, `a * b`)\n     ExprBinary(BinOp, P<Expr>, P<Expr>),\n+    /// A unary operation (For example: `!x`, `*x`)\n     ExprUnary(UnOp, P<Expr>),\n+    /// A literal (For example: `1u8`, `\"foo\"`)\n     ExprLit(P<Lit>),\n+    /// A cast (`foo as f64`)\n     ExprCast(P<Expr>, P<Ty>),\n+    /// An `if` block, with an optional else block\n+    /// `if expr { block } else { expr }`\n     ExprIf(P<Expr>, P<Block>, Option<P<Expr>>),\n+    /// An `if let` expression with an optional else block\n+    /// `if let pat = expr { block } else { expr }`\n+    /// This is desugared to a `match` expression\n     ExprIfLet(P<Pat>, P<Expr>, P<Block>, Option<P<Expr>>),\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n+    /// A while loop, with an optional label\n+    /// `'label while expr { block }`\n     ExprWhile(P<Expr>, P<Block>, Option<Ident>),\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n+    /// A while-let loop, with an optional label\n+    /// `'label while let pat = expr { block }`\n+    /// This is desugared to a combination of `loop` and `match` expressions\n     ExprWhileLet(P<Pat>, P<Expr>, P<Block>, Option<Ident>),\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n+    /// A for loop, with an optional label\n+    /// `'label for pat in expr { block }`\n+    /// This is desugared to a combination of `loop` and `match` expressions\n     ExprForLoop(P<Pat>, P<Expr>, P<Block>, Option<Ident>),\n-    // Conditionless loop (can be exited with break, cont, or ret)\n+    /// Conditionless loop (can be exited with break, cont, or ret)\n+    /// `'label loop { block }`\n     // FIXME #6993: change to Option<Name> ... or not, if these are hygienic.\n     ExprLoop(P<Block>, Option<Ident>),\n+    /// A `match` block, with a desugar source\n     ExprMatch(P<Expr>, Vec<Arm>, MatchSource),\n+    /// A closure (for example, `move |a, b, c| {a + b + c}`)\n     ExprClosure(CaptureClause, P<FnDecl>, P<Block>),\n+    /// A block\n     ExprBlock(P<Block>),\n \n+    /// An assignment (`a = foo()`)\n     ExprAssign(P<Expr>, P<Expr>),\n+    /// An assignment with an operator\n+    /// For example, `a += 1`\n     ExprAssignOp(BinOp, P<Expr>, P<Expr>),\n+    /// Access of a named struct field (`obj.foo`)\n     ExprField(P<Expr>, SpannedIdent),\n+    /// Access of an unnamed field of a struct or tuple-struct\n+    /// For example, `foo.0`\n     ExprTupField(P<Expr>, Spanned<usize>),\n+    /// An indexing operation (`foo[2]`)\n     ExprIndex(P<Expr>, P<Expr>),\n+    /// A range (`[1..2]`, `[1..]`, or `[..2]`)\n     ExprRange(Option<P<Expr>>, Option<P<Expr>>),\n \n     /// Variable reference, possibly containing `::` and/or type\n     /// parameters, e.g. foo::bar::<baz>. Optionally \"qualified\",\n     /// e.g. `<Vec<T> as SomeTrait>::SomeType`.\n     ExprPath(Option<QSelf>, Path),\n \n+    /// A referencing operation (`&a` or `&mut a`)\n     ExprAddrOf(Mutability, P<Expr>),\n+    /// A `break`, with an optional label to break\n     ExprBreak(Option<Ident>),\n+    /// A `continue`, with an optional label\n     ExprAgain(Option<Ident>),\n+    /// A `return`, with an optional value to be returned\n     ExprRet(Option<P<Expr>>),\n \n+    /// Output of the `asm!()` macro\n     ExprInlineAsm(InlineAsm),\n \n+    /// A macro invocation; pre-expansion\n     ExprMac(Mac),\n \n     /// A struct literal expression.\n+    /// For example, `Foo {x: 1, y: 2}`\n     ExprStruct(Path, Vec<Field>, Option<P<Expr>> /* base */),\n \n     /// A vector literal constructed from one repeated element.\n+    /// For example, `[u8; 5]`\n     ExprRepeat(P<Expr> /* element */, P<Expr> /* count */),\n \n     /// No-op: used solely so we can pretty-print faithfully"}]}