{"sha": "b7360fa23f6e029770acae390b47e828f1f08347", "node_id": "C_kwDOAAsO6NoAKGI3MzYwZmEyM2Y2ZTAyOTc3MGFjYWUzOTBiNDdlODI4ZjFmMDgzNDc", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-11-04T12:25:40Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2022-11-04T12:26:21Z"}, "message": "Give a specific lint for unsafety not being inherited", "tree": {"sha": "7be0d127d3635dcf77a90d33f770199af19273c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7be0d127d3635dcf77a90d33f770199af19273c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7360fa23f6e029770acae390b47e828f1f08347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7360fa23f6e029770acae390b47e828f1f08347", "html_url": "https://github.com/rust-lang/rust/commit/b7360fa23f6e029770acae390b47e828f1f08347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7360fa23f6e029770acae390b47e828f1f08347/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2efb0cd4b2240c878c36112a5ec207837c15928a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2efb0cd4b2240c878c36112a5ec207837c15928a", "html_url": "https://github.com/rust-lang/rust/commit/2efb0cd4b2240c878c36112a5ec207837c15928a"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "80e1246ec6bf325096cd5aa8cfdb98087f4a7513", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b7360fa23f6e029770acae390b47e828f1f08347/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7360fa23f6e029770acae390b47e828f1f08347/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=b7360fa23f6e029770acae390b47e828f1f08347", "patch": "@@ -1,3 +1,4 @@\n+use hir::{BlockCheckMode, ExprKind, Node};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -517,24 +518,49 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     for &UnsafetyViolation { source_info, lint_root, kind, details } in violations.iter() {\n         let (description, note) = details.description_and_note();\n \n-        // Report an error.\n-        let unsafe_fn_msg =\n-            if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root) { \" function or\" } else { \"\" };\n-\n         match kind {\n             UnsafetyViolationKind::General => {\n                 // once\n-                struct_span_err!(\n+                // Mutable statics always require an unsafe block\n+                let unsafe_fn_msg = if unsafe_op_in_unsafe_fn_allowed(tcx, lint_root)\n+                    && details != UnsafetyViolationDetails::UseOfMutableStatic\n+                {\n+                    \" function or\"\n+                } else {\n+                    \"\"\n+                };\n+\n+                let mut err = struct_span_err!(\n                     tcx.sess,\n                     source_info.span,\n                     E0133,\n                     \"{} is unsafe and requires unsafe{} block\",\n                     description,\n                     unsafe_fn_msg,\n-                )\n-                .span_label(source_info.span, description)\n-                .note(note)\n-                .emit();\n+                );\n+                err.span_label(source_info.span, description).note(note);\n+                let note_non_inherited = tcx.hir().parent_iter(lint_root).find(|(id, node)| {\n+                    if let Node::Expr(block) = node\n+                        && let ExprKind::Block(block, _) = block.kind\n+                        && let BlockCheckMode::UnsafeBlock(_) = block.rules {\n+                            true\n+                        }\n+                    else if let Some(sig) = tcx.hir().fn_sig_by_hir_id(*id)\n+                        && sig.header.is_unsafe() {\n+                            true\n+                    } else {\n+                        false\n+                    }\n+                });\n+                if let Some((id, _)) = note_non_inherited {\n+                    let span = tcx.hir().span(id);\n+                    err.span_label(\n+                        tcx.sess.source_map().guess_head_span(span),\n+                        \"items do not inherit unsafety from separate enclosing items\",\n+                    );\n+                }\n+\n+                err.emit();\n             }\n             UnsafetyViolationKind::UnsafeFn => tcx.struct_span_lint_hir(\n                 UNSAFE_OP_IN_UNSAFE_FN,"}]}