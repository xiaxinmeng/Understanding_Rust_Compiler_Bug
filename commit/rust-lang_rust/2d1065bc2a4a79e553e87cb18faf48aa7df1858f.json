{"sha": "2d1065bc2a4a79e553e87cb18faf48aa7df1858f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTA2NWJjMmE0YTc5ZTU1M2U4N2NiMThmYWY0OGFhN2RmMTg1OGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-02T01:09:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-02T01:09:36Z"}, "message": "Auto merge of #54694 - csmoe:self_this, r=estebank\n\nSuggest to use self for fake-self from other languages\n\nCloses https://github.com/rust-lang/rust/issues/54019\nr? @estebank", "tree": {"sha": "389b5f58996facba4cbf8d65a1a3788175337524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/389b5f58996facba4cbf8d65a1a3788175337524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d1065bc2a4a79e553e87cb18faf48aa7df1858f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1065bc2a4a79e553e87cb18faf48aa7df1858f", "html_url": "https://github.com/rust-lang/rust/commit/2d1065bc2a4a79e553e87cb18faf48aa7df1858f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d1065bc2a4a79e553e87cb18faf48aa7df1858f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cbcdae81879893f02f681d945402acedba89c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbcdae81879893f02f681d945402acedba89c7c", "html_url": "https://github.com/rust-lang/rust/commit/7cbcdae81879893f02f681d945402acedba89c7c"}, {"sha": "4470b1cec0a5b8eb580a8cce96009a46f54bf2c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4470b1cec0a5b8eb580a8cce96009a46f54bf2c2", "html_url": "https://github.com/rust-lang/rust/commit/4470b1cec0a5b8eb580a8cce96009a46f54bf2c2"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "b4e7f3a8b746c97ad3ddd1906f085565cd7c7c23", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d1065bc2a4a79e553e87cb18faf48aa7df1858f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1065bc2a4a79e553e87cb18faf48aa7df1858f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2d1065bc2a4a79e553e87cb18faf48aa7df1858f", "patch": "@@ -2968,13 +2968,13 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             // Make the base error.\n             let expected = source.descr_expected();\n             let path_str = names_to_string(path);\n+            let item_str = path[path.len() - 1];\n             let code = source.error_code(def.is_some());\n             let (base_msg, fallback_label, base_span) = if let Some(def) = def {\n                 (format!(\"expected {}, found {} `{}`\", expected, def.kind_name(), path_str),\n                  format!(\"not a {}\", expected),\n                  span)\n             } else {\n-                let item_str = path[path.len() - 1];\n                 let item_span = path[path.len() - 1].span;\n                 let (mod_prefix, mod_str) = if path.len() == 1 {\n                     (String::new(), \"this scope\".to_string())\n@@ -2997,6 +2997,20 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             let code = DiagnosticId::Error(code.into());\n             let mut err = this.session.struct_span_err_with_code(base_span, &base_msg, code);\n \n+            // Emit help message for fake-self from other languages like `this`(javascript)\n+            let fake_self: Vec<Ident> = [\"this\", \"my\"].iter().map(\n+                |s| Ident::from_str(*s)\n+            ).collect();\n+            if fake_self.contains(&item_str)\n+                && this.self_value_is_available(path[0].span, span) {\n+                err.span_suggestion_with_applicability(\n+                    span,\n+                    \"did you mean\",\n+                    \"self\".to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+\n             // Emit special messages for unresolved `Self` and `self`.\n             if is_self_type(path, ns) {\n                 __diagnostic_used!(E0411);"}, {"sha": "f648d781cafea603ce896011fe85a60523899150", "filename": "src/test/ui/self/suggest-self.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2d1065bc2a4a79e553e87cb18faf48aa7df1858f/src%2Ftest%2Fui%2Fself%2Fsuggest-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1065bc2a4a79e553e87cb18faf48aa7df1858f/src%2Ftest%2Fui%2Fself%2Fsuggest-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fsuggest-self.rs?ref=2d1065bc2a4a79e553e87cb18faf48aa7df1858f", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: i32,\n+}\n+\n+impl Foo {\n+    fn this1(&self) -> i32 {\n+        let this = self;\n+        let a = 1;\n+        this.x\n+    }\n+\n+    fn this2(&self) -> i32 {\n+        let a = Foo {\n+            x: 2\n+        };\n+        let this = a;\n+        this.x\n+    }\n+\n+    fn foo(&self) -> i32 {\n+        this.x\n+        //~^ ERROR cannot find value `this` in this scope\n+    }\n+\n+    fn bar(&self) -> i32 {\n+        this.foo()\n+        //~^ ERROR cannot find value `this` in this scope\n+    }\n+\n+    fn baz(&self) -> i32 {\n+        my.bar()\n+        //~^ ERROR cannot find value `my` in this scope\n+    }\n+}\n+\n+fn main() {\n+    let this = vec![1, 2, 3];\n+    let my = vec![1, 2, 3];\n+    let len = this.len();\n+    let len = my.len();\n+}\n+"}, {"sha": "9035dc0fe7d2997bcfd4c5a242afdfdea786b3cc", "filename": "src/test/ui/self/suggest-self.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2d1065bc2a4a79e553e87cb18faf48aa7df1858f/src%2Ftest%2Fui%2Fself%2Fsuggest-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d1065bc2a4a79e553e87cb18faf48aa7df1858f/src%2Ftest%2Fui%2Fself%2Fsuggest-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fsuggest-self.stderr?ref=2d1065bc2a4a79e553e87cb18faf48aa7df1858f", "patch": "@@ -0,0 +1,30 @@\n+error[E0425]: cannot find value `this` in this scope\n+  --> $DIR/suggest-self.rs:31:9\n+   |\n+LL |         this.x\n+   |         ^^^^\n+   |         |\n+   |         not found in this scope\n+   |         help: did you mean: `self`\n+\n+error[E0425]: cannot find value `this` in this scope\n+  --> $DIR/suggest-self.rs:36:9\n+   |\n+LL |         this.foo()\n+   |         ^^^^\n+   |         |\n+   |         not found in this scope\n+   |         help: did you mean: `self`\n+\n+error[E0425]: cannot find value `my` in this scope\n+  --> $DIR/suggest-self.rs:41:9\n+   |\n+LL |         my.bar()\n+   |         ^^\n+   |         |\n+   |         not found in this scope\n+   |         help: did you mean: `self`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}