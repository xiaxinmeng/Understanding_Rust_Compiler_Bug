{"sha": "7c0479bd8c1c811e25ac285b43187cef52b71f2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMDQ3OWJkOGMxYzgxMWUyNWFjMjg1YjQzMTg3Y2VmNTJiNzFmMmU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-31T14:24:58Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-31T14:26:27Z"}, "message": "Use and_then instead of unwrap_or_default.", "tree": {"sha": "861d162815ac7593d4c9927f96579fb818028f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/861d162815ac7593d4c9927f96579fb818028f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c0479bd8c1c811e25ac285b43187cef52b71f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0479bd8c1c811e25ac285b43187cef52b71f2e", "html_url": "https://github.com/rust-lang/rust/commit/7c0479bd8c1c811e25ac285b43187cef52b71f2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c0479bd8c1c811e25ac285b43187cef52b71f2e/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc0fb38b19809e6f134a3409863b445216ae9c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0fb38b19809e6f134a3409863b445216ae9c61", "html_url": "https://github.com/rust-lang/rust/commit/fc0fb38b19809e6f134a3409863b445216ae9c61"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "05f1b3740aeb1d5fa3264c5b0d8561dccf76d199", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7c0479bd8c1c811e25ac285b43187cef52b71f2e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0479bd8c1c811e25ac285b43187cef52b71f2e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=7c0479bd8c1c811e25ac285b43187cef52b71f2e", "patch": "@@ -273,11 +273,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 method_name.name\n             ));\n \n-            let mut self_ty_name = self\n-                .sess()\n-                .source_map()\n-                .span_to_snippet(self_ty_span.find_ancestor_inside(span).unwrap_or_default())\n-                .unwrap_or_else(|_| self_ty.to_string());\n+            let mut self_ty_name = self_ty_span\n+                .find_ancestor_inside(span)\n+                .and_then(|span| self.sess().source_map().span_to_snippet(span).ok())\n+                .unwrap_or_else(|| self_ty.to_string());\n \n             // Get the number of generics the self type has (if an Adt) unless we can determine that\n             // the user has written the self type with generics already which we (naively) do by looking\n@@ -385,10 +384,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Some(probe::AutorefOrPtrAdjustment::ToConstPtr) | None => \"\",\n         };\n \n-        let (expr_text, precise) = if let Ok(expr_text) = self\n-            .sess()\n-            .source_map()\n-            .span_to_snippet(expr.span.find_ancestor_inside(outer).unwrap_or_default())\n+        let (expr_text, precise) = if let Some(expr_text) = expr\n+            .span\n+            .find_ancestor_inside(outer)\n+            .and_then(|span| self.sess().source_map().span_to_snippet(span).ok())\n         {\n             (expr_text, true)\n         } else {"}]}