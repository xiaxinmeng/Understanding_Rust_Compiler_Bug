{"sha": "0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "node_id": "C_kwDOAAsO6NoAKDBkNTg4ZTkyOGU3ZGI3N2Y5YTgxMGIxYjVkZTAyNTIxZGJmNWVlNWU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-08-13T04:56:16Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-08-13T04:56:16Z"}, "message": "rustdoc: Fix incorrect usage of `@!has` and `@!matches`\n\n`@!has` (and `@!matches`) with two arguments used to treat the second\nargument as a literal string of HTML code. Now, that feature has been\nrenamed into `@!hasraw` (and `@!matchesraw`), and the arity-2 `@!has`\nversion is an error.\n\nThese uses thought the second argument was being treated as an XPath, as\nwith the arity-3 version, but in fact was being treated as literal HTML.\nBecause these were checking for the *absence* of the string, the tests\nsilently did nothing -- an XPath string won't ever be showing up in the\ntest's generated HTML!", "tree": {"sha": "471a099d3bb3758f804a4f9a15f2144e7d4ecb42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/471a099d3bb3758f804a4f9a15f2144e7d4ecb42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "html_url": "https://github.com/rust-lang/rust/commit/0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b34e2404fd375e1bc18c1191639e4e67bdbc7d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/b34e2404fd375e1bc18c1191639e4e67bdbc7d19", "html_url": "https://github.com/rust-lang/rust/commit/b34e2404fd375e1bc18c1191639e4e67bdbc7d19"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "caad43a087c4eda9f516e6cc98710d51ee6acdc1", "filename": "src/test/rustdoc/internal.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finternal.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -2,14 +2,16 @@\n \n // Check that the unstable marker is not added for \"rustc_private\".\n \n-// @!matchesraw internal/index.html \\\n-//      '//*[@class=\"item-right docblock-short\"]/span[@class=\"stab unstable\"]'\n-// @!matchesraw internal/index.html \\\n-//      '//*[@class=\"item-right docblock-short\"]/span[@class=\"stab internal\"]'\n+// @!matches internal/index.html \\\n+//      '//*[@class=\"item-right docblock-short\"]/span[@class=\"stab unstable\"]' \\\n+//      ''\n+// @!matches internal/index.html \\\n+//      '//*[@class=\"item-right docblock-short\"]/span[@class=\"stab internal\"]' \\\n+//      ''\n // @matches - '//*[@class=\"item-right docblock-short\"]' 'Docs'\n \n-// @!hasraw internal/struct.S.html '//*[@class=\"stab unstable\"]'\n-// @!hasraw internal/struct.S.html '//*[@class=\"stab internal\"]'\n+// @!has internal/struct.S.html '//*[@class=\"stab unstable\"]' ''\n+// @!has internal/struct.S.html '//*[@class=\"stab internal\"]' ''\n /// Docs\n pub struct S;\n "}, {"sha": "4b6c37b94aa71535ffcdb2185bef8580d57d4592", "filename": "src/test/rustdoc/issue-61592.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Fissue-61592.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Fissue-61592.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-61592.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -5,11 +5,11 @@ extern crate foo;\n // @has issue_61592/index.html\n // @has - '//a[@href=\"#reexports\"]' 'Re-exports'\n // @has - '//code' 'pub use foo::FooTrait as _;'\n-// @!hasraw - '//a[@href=\"trait._.html\"]'\n+// @!has - '//a[@href=\"trait._.html\"]' ''\n pub use foo::FooTrait as _;\n \n // @has issue_61592/index.html\n // @has - '//a[@href=\"#reexports\"]' 'Re-exports'\n // @has - '//code' 'pub use foo::FooStruct as _;'\n-// @!hasraw - '//a[@href=\"struct._.html\"]'\n+// @!has - '//a[@href=\"struct._.html\"]' ''\n pub use foo::FooStruct as _;"}, {"sha": "b2f89906480d6c22f692544c3e09e7529998e523", "filename": "src/test/rustdoc/no-crate-filter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Fno-crate-filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Fno-crate-filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fno-crate-filter.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -2,5 +2,5 @@\n \n // compile-flags: -Z unstable-options --disable-per-crate-search\n \n-// @!hasraw 'foo/struct.Foo.html' '//*[id=\"crate-search\"]'\n+// @!has 'foo/struct.Foo.html' '//*[id=\"crate-search\"]' ''\n pub struct Foo;"}, {"sha": "2ab9d44be6dac9f3267f9e9485414d582397cf91", "filename": "src/test/rustdoc/recursive-deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Frecursive-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Frecursive-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursive-deref.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -51,7 +51,7 @@ impl G {\n \n // @has recursive_deref/struct.D.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for D'\n // We also check that `G::g` method isn't rendered because there is no `self` argument.\n-// @!hasraw '-' '//*[@id=\"deref-methods-G\"]'\n+// @!has '-' '//*[@id=\"deref-methods-G\"]' ''\n impl Deref for D {\n     type Target = E;\n \n@@ -62,7 +62,7 @@ impl Deref for D {\n \n // @has recursive_deref/struct.E.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for E'\n // We also check that `G::g` method isn't rendered because there is no `self` argument.\n-// @!hasraw '-' '//*[@id=\"deref-methods-G\"]'\n+// @!has '-' '//*[@id=\"deref-methods-G\"]' ''\n impl Deref for E {\n     type Target = F;\n \n@@ -73,7 +73,7 @@ impl Deref for E {\n \n // @has recursive_deref/struct.F.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for F'\n // We also check that `G::g` method isn't rendered because there is no `self` argument.\n-// @!hasraw '-' '//*[@id=\"deref-methods-G\"]'\n+// @!has '-' '//*[@id=\"deref-methods-G\"]' ''\n impl Deref for F {\n     type Target = G;\n \n@@ -101,7 +101,7 @@ impl I {\n }\n \n // @has recursive_deref/struct.H.html '//h3[@class=\"code-header in-band\"]' 'impl Deref for H'\n-// @!hasraw '-' '//*[@id=\"deref-methods-I\"]'\n+// @!has '-' '//*[@id=\"deref-methods-I\"]' ''\n impl Deref for H {\n     type Target = I;\n "}, {"sha": "599c429a6e1de388f306ae803c44ecdfb95ce2bd", "filename": "src/test/rustdoc/remove-url-from-headings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Fremove-url-from-headings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Fremove-url-from-headings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fremove-url-from-headings.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -1,7 +1,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @!hasraw - '//a[@href=\"http://a.a\"]'\n+// @!has - '//a[@href=\"http://a.a\"]' ''\n // @has - '//a[@href=\"#implementing-stuff-somewhere\"]' 'Implementing stuff somewhere'\n // @has - '//a[@href=\"#another-one-urg\"]' 'Another one urg'\n "}, {"sha": "36718ebe1a6302712bfe1b8b9efaac5125c93bff", "filename": "src/test/rustdoc/sized_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Fsized_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsized_trait.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -1,13 +1,13 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Bar.html\n-// @!hasraw - '//*[@id=\"impl-Sized\"]'\n+// @!has - '//*[@id=\"impl-Sized\"]' ''\n pub struct Bar {\n     a: u16,\n }\n \n // @has foo/struct.Foo.html\n-// @!hasraw - '//*[@id=\"impl-Sized\"]'\n+// @!has - '//*[@id=\"impl-Sized\"]' ''\n pub struct Foo<T: ?Sized>(T);\n \n // @has foo/struct.Unsized.html"}, {"sha": "194f49f16d007cb6f6f603f776bcae982471b923", "filename": "src/test/rustdoc/table-in-docblock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Ftable-in-docblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Ftable-in-docblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftable-in-docblock.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -2,7 +2,7 @@\n \n // @has foo/struct.Foo.html\n // @count - '//*[@class=\"docblock\"]/div/table' 2\n-// @!hasraw - '//*[@class=\"docblock\"]/table'\n+// @!has - '//*[@class=\"docblock\"]/table' ''\n /// | hello | hello2 |\n /// | ----- | ------ |\n /// | data  | data2  |"}, {"sha": "dbaf195e1a9636b369fa09e1ef46449663383dba", "filename": "src/test/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -62,7 +62,7 @@ pub struct PrivStruct {\n }\n \n // @has 'toggle_item_contents/enum.Enum.html'\n-// @!hasraw - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]'\n+// @!has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' ''\n pub enum Enum {\n     A, B, C,\n     D {\n@@ -72,7 +72,7 @@ pub enum Enum {\n }\n \n // @has 'toggle_item_contents/enum.EnumStructVariant.html'\n-// @!hasraw - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]'\n+// @!has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' ''\n pub enum EnumStructVariant {\n     A, B, C,\n     D {"}, {"sha": "fba594c38273cfb2f2a5b55ad666fcb13a354c9b", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -59,7 +59,7 @@ pub struct MyStruct;\n \n // We check that associated items with default values aren't generated in the implementors list.\n impl MyTrait for (u8, u8) {\n-    // @!hasraw trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-4\"]'\n+    // @!has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-4\"]' ''\n     type Assoc = bool;\n     fn trait_function(&self) {}\n }"}, {"sha": "4d5173f6024c774e167a88a348408c3795ab9f7e", "filename": "src/test/rustdoc/trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Ftrait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -40,7 +40,7 @@ impl Trait for Struct {\n     fn c() {}\n \n     // @has - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]/p' 'Escaped formatting a*b*c* works'\n-    // @!hasraw - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]/p/em'\n+    // @!has - '//*[@id=\"method.d\"]/../../div[@class=\"docblock\"]/p/em' ''\n     fn d() {}\n \n     // @has - '//*[@id=\"impl-Trait-for-Struct\"]/h3//a/@href' 'trait.Trait.html'"}, {"sha": "66bb409325c9980908dc4d89ac776b6a76d2a127", "filename": "src/test/rustdoc/tuple-struct-fields-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d588e928e7db77f9a810b1b5de02521dbf5ee5e/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs?ref=0d588e928e7db77f9a810b1b5de02521dbf5ee5e", "patch": "@@ -5,7 +5,7 @@\n // @has - '//h3[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Tuple Fields'\n // @has - '//*[@id=\"structfield.0\"]' '0: u32'\n // @has - '//*[@id=\"main-content\"]/div[@class=\"docblock\"]' 'hello'\n-// @!hasraw - '//*[@id=\"structfield.1\"]'\n+// @!has - '//*[@id=\"structfield.1\"]' ''\n // @has - '//*[@id=\"structfield.2\"]' '2: char'\n // @has - '//*[@id=\"structfield.3\"]' '3: i8'\n // @has - '//*[@id=\"main-content\"]/div[@class=\"docblock\"]' 'not hello'"}]}