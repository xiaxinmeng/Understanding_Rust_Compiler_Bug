{"sha": "2efc6004b5e155174f2e66ff694b11ed42f8bcce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZmM2MDA0YjVlMTU1MTc0ZjJlNjZmZjY5NGIxMWVkNDJmOGJjY2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T05:20:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T05:20:17Z"}, "message": "rustdoc: Parse resource doc attributes", "tree": {"sha": "a0baa7514eb1ba897c234e16073f99bbf4133c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0baa7514eb1ba897c234e16073f99bbf4133c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2efc6004b5e155174f2e66ff694b11ed42f8bcce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2efc6004b5e155174f2e66ff694b11ed42f8bcce", "html_url": "https://github.com/rust-lang/rust/commit/2efc6004b5e155174f2e66ff694b11ed42f8bcce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2efc6004b5e155174f2e66ff694b11ed42f8bcce/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97a1110c5f66e4cc6a3ebf280066860d2efec397", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a1110c5f66e4cc6a3ebf280066860d2efec397", "html_url": "https://github.com/rust-lang/rust/commit/97a1110c5f66e4cc6a3ebf280066860d2efec397"}], "stats": {"total": 87, "additions": 76, "deletions": 11}, "files": [{"sha": "97c0f31ea5c93dad3e059d03bdd1efdc735da85a", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 76, "deletions": 11, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/2efc6004b5e155174f2e66ff694b11ed42f8bcce/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2efc6004b5e155174f2e66ff694b11ed42f8bcce/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=2efc6004b5e155174f2e66ff694b11ed42f8bcce", "patch": "@@ -10,9 +10,9 @@ import rustc::front::attr;\n import core::tuple;\n \n export crate_attrs, mod_attrs, fn_attrs, arg_attrs,\n-       const_attrs, enum_attrs, variant_attrs;\n+       const_attrs, enum_attrs, variant_attrs, res_attrs;\n export parse_crate, parse_mod, parse_fn, parse_const,\n-       parse_enum, parse_variant;\n+       parse_enum, parse_variant, parse_res;\n \n type crate_attrs = {\n     name: option<str>\n@@ -50,6 +50,12 @@ type variant_attrs = {\n     desc: option<str>\n };\n \n+type res_attrs = {\n+    brief: option<str>,\n+    desc: option<str>,\n+    args: [arg_attrs]\n+};\n+\n #[cfg(test)]\n mod test {\n \n@@ -248,7 +254,19 @@ fn parse_fn_long_doc(\n ) -> fn_attrs {\n     let return = attr::meta_item_value_from_list(items, \"return\");\n     let failure = attr::meta_item_value_from_list(items, \"failure\");\n-    let args = alt attr::meta_item_list_from_list(items, \"args\") {\n+    let args = parse_args(items);\n+\n+    {\n+        brief: brief,\n+        desc: desc,\n+        args: args,\n+        return: return,\n+        failure: failure\n+    }\n+}\n+\n+fn parse_args(items: [@ast::meta_item]) -> [arg_attrs] {\n+    alt attr::meta_item_list_from_list(items, \"args\") {\n       some(items) {\n         vec::filter_map(items) {|item|\n             option::map(attr::name_value_str_pair(item)) { |pair|\n@@ -260,14 +278,6 @@ fn parse_fn_long_doc(\n         }\n       }\n       none { [] }\n-    };\n-\n-    {\n-        brief: brief,\n-        desc: desc,\n-        args: args,\n-        return: return,\n-        failure: failure\n     }\n }\n \n@@ -417,3 +427,58 @@ fn should_parse_variant_long_doc() {\n     let attrs = parse_variant(attrs);\n     assert attrs.desc == some(\"a\");\n }\n+\n+fn parse_res(\n+    attrs: [ast::attribute]\n+) -> res_attrs {\n+\n+    parse_short_doc_or(\n+        attrs,\n+        {|desc|\n+            {\n+                brief: none,\n+                desc: desc,\n+                args: []\n+            }\n+        },\n+        parse_res_long_doc\n+    )\n+}\n+\n+fn parse_res_long_doc(\n+    items: [@ast::meta_item],\n+    brief: option<str>,\n+    desc: option<str>\n+) -> res_attrs {\n+    {\n+        brief: brief,\n+        desc: desc,\n+        args: parse_args(items)\n+    }\n+}\n+\n+#[test]\n+fn should_parse_resource_short_desc() {\n+    let source = \"#[doc = \\\"a\\\"]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_res(attrs);\n+    assert attrs.desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_parse_resource_long_desc() {\n+    let source = \"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_res(attrs);\n+    assert attrs.brief == some(\"a\");\n+    assert attrs.desc == some(\"b\");\n+}\n+\n+#[test]\n+fn shoulde_parse_resource_arg() {\n+    let source = \"#[doc(args(a = \\\"b\\\"))]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_res(attrs);\n+    assert attrs.args[0].name == \"a\";\n+    assert attrs.args[0].desc == \"b\";\n+}\n\\ No newline at end of file"}]}