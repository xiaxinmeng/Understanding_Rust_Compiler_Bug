{"sha": "6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "node_id": "C_kwDOAAsO6NoAKDZkMThmYmJjM2YxZmVlOWU3MTdhZTVmNTViZDI5NzBkOTZlMmI1Y2I", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-04-05T18:13:48Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-04-05T18:13:48Z"}, "message": "diagnostics: tweak error message to give more rationale to unsafe Fn", "tree": {"sha": "4278d8e877dfe48cdbdcd1b5e465c5d729c7da3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4278d8e877dfe48cdbdcd1b5e465c5d729c7da3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "html_url": "https://github.com/rust-lang/rust/commit/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf7ce8356ce9182d65b0719216ec08db877d5cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf7ce8356ce9182d65b0719216ec08db877d5cc", "html_url": "https://github.com/rust-lang/rust/commit/dcf7ce8356ce9182d65b0719216ec08db877d5cc"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "ae879078739d3c70e73c62f9654110d6d22cfb51", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "patch": "@@ -61,8 +61,9 @@\n     ),\n     on(\n         _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n         // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n-        note = \"unsafe functions must be wrapped in closures: `|| unsafe {{ /* code */ }}`\"\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n     ),\n     message = \"expected a `{Fn}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `Fn<{Args}>` closure, found `{Self}`\"\n@@ -146,8 +147,9 @@ pub trait Fn<Args>: FnMut<Args> {\n     ),\n     on(\n         _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n         // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n-        note = \"unsafe functions must be wrapped in closures: `|| unsafe {{ /* code */ }}`\"\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n     ),\n     message = \"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnMut<{Args}>` closure, found `{Self}`\"\n@@ -223,8 +225,9 @@ pub trait FnMut<Args>: FnOnce<Args> {\n     ),\n     on(\n         _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n         // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n-        note = \"unsafe functions must be wrapped in closures: `|| unsafe {{ /* code */ }}`\"\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n     ),\n     message = \"expected a `{FnOnce}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnOnce<{Args}>` closure, found `{Self}`\""}, {"sha": "bd095c2d83d8a186cb49ed9e2a36514e251883df", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "patch": "@@ -2,12 +2,12 @@ error[E0277]: expected a `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-i\n   --> $DIR/coerce-unsafe-to-closure.rs:2:44\n    |\n LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n-   |                                        --- ^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   |                                        --- ^^^^^^^^^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |                                        |\n    |                                        required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<(&str,)>` is not implemented for `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n-   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |"}, {"sha": "94a90a568548988a4754644f771c8838c928d9a6", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "patch": "@@ -53,7 +53,7 @@ error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:28:10\n    |\n LL |     call(foo_unsafe);\n-   |     ---- ^^^^^^^^^^ expected an `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     ---- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -70,7 +70,7 @@ error[E0277]: expected a `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:30:14\n    |\n LL |     call_mut(foo_unsafe);\n-   |     -------- ^^^^^^^^^^ expected an `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     -------- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -87,7 +87,7 @@ error[E0277]: expected a `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:32:15\n    |\n LL |     call_once(foo_unsafe);\n-   |     --------- ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     --------- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "18e133957ba37fa5aebb201743715c2eb3b91caf", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "patch": "@@ -2,12 +2,12 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r i\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:20:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ------- ^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:9:15\n    |\n@@ -18,12 +18,12 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:25:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:19\n    |\n@@ -34,12 +34,12 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:30:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ------------ ^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:15:20\n    |"}, {"sha": "c826af3c4c38f0f263f775f1840ceadc377d81c0", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "patch": "@@ -2,12 +2,12 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isi\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:21:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ------- ^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n-   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:10:15\n    |\n@@ -18,12 +18,12 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `unsafe fn(isize) ->\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:26:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n-   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:19\n    |\n@@ -34,12 +34,12 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) ->\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:31:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ------------ ^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n-   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:16:20\n    |"}]}