{"sha": "5db4826410b4ffcc0e4cb45566a0411a0858b6bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYjQ4MjY0MTBiNGZmY2MwZTRjYjQ1NTY2YTA0MTFhMDg1OGI2YmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-30T12:50:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-30T12:50:09Z"}, "message": "Auto merge of #37989 - nrc:save-mod, r=nikomatsakis\n\nsave-analysis: redirect a module decl to the start of the defining file", "tree": {"sha": "7d72de4f13291732782b1a8fda4c5c9226a54d1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d72de4f13291732782b1a8fda4c5c9226a54d1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5db4826410b4ffcc0e4cb45566a0411a0858b6bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5db4826410b4ffcc0e4cb45566a0411a0858b6bf", "html_url": "https://github.com/rust-lang/rust/commit/5db4826410b4ffcc0e4cb45566a0411a0858b6bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5db4826410b4ffcc0e4cb45566a0411a0858b6bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3abaf43f770a8bae23da474690e3841041219029", "url": "https://api.github.com/repos/rust-lang/rust/commits/3abaf43f770a8bae23da474690e3841041219029", "html_url": "https://github.com/rust-lang/rust/commit/3abaf43f770a8bae23da474690e3841041219029"}, {"sha": "5787643800433d6e4cb2e2750670d571fac5bdbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5787643800433d6e4cb2e2750670d571fac5bdbc", "html_url": "https://github.com/rust-lang/rust/commit/5787643800433d6e4cb2e2750670d571fac5bdbc"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "f97272ad5440960a7d112fa3b4f8f4138ee89245", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5db4826410b4ffcc0e4cb45566a0411a0858b6bf/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5db4826410b4ffcc0e4cb45566a0411a0858b6bf/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=5db4826410b4ffcc0e4cb45566a0411a0858b6bf", "patch": "@@ -62,7 +62,6 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n     impl_fn!(function, FunctionData, defs);\n     impl_fn!(method, MethodData, defs);\n     impl_fn!(macro_data, MacroData, defs);\n-    impl_fn!(mod_data, ModData, defs);\n     impl_fn!(typedef, TypeDefData, defs);\n     impl_fn!(variable, VariableData, defs);\n \n@@ -75,6 +74,43 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n \n     impl_fn!(macro_use, MacroUseData, macro_refs);\n \n+    fn mod_data(&mut self, data: ModData) {\n+        let id: Id = From::from(data.id);\n+        let mut def = Def {\n+            kind: DefKind::Mod,\n+            id: id,\n+            span: data.span,\n+            name: data.name,\n+            qualname: data.qualname,\n+            value: data.filename,\n+            children: data.items.into_iter().map(|id| From::from(id)).collect(),\n+            decl_id: None,\n+            docs: data.docs,\n+        };\n+        if def.span.file_name != def.value {\n+            // If the module is an out-of-line defintion, then we'll make the\n+            // defintion the first character in the module's file and turn the\n+            // the declaration into a reference to it.\n+            let rf = Ref {\n+                kind: RefKind::Mod,\n+                span: def.span,\n+                ref_id: id,\n+            };\n+            self.result.refs.push(rf);\n+            def.span = SpanData {\n+                file_name: def.value.clone(),\n+                byte_start: 0,\n+                byte_end: 0,\n+                line_start: 1,\n+                line_end: 1,\n+                column_start: 1,\n+                column_end: 1,\n+            }\n+        }\n+\n+        self.result.defs.push(def);\n+    }\n+\n     // FIXME store this instead of throwing it away.\n     fn impl_data(&mut self, _data: ImplData) {}\n     fn inheritance(&mut self, _data: InheritanceData) {}\n@@ -111,7 +147,7 @@ impl Analysis {\n \n // DefId::index is a newtype and so the JSON serialisation is ugly. Therefore\n // we use our own Id which is the same, but without the newtype.\n-#[derive(Debug, RustcEncodable)]\n+#[derive(Clone, Copy, Debug, RustcEncodable)]\n struct Id {\n     krate: u32,\n     index: u32,\n@@ -337,21 +373,7 @@ impl From<MacroData> for Def {\n         }\n     }\n }\n-impl From<ModData> for Def {\n-    fn from(data:ModData) -> Def {\n-        Def {\n-            kind: DefKind::Mod,\n-            id: From::from(data.id),\n-            span: data.span,\n-            name: data.name,\n-            qualname: data.qualname,\n-            value: data.filename,\n-            children: data.items.into_iter().map(|id| From::from(id)).collect(),\n-            decl_id: None,\n-            docs: data.docs,\n-        }\n-    }\n-}\n+\n impl From<TypeDefData> for Def {\n     fn from(data: TypeDefData) -> Def {\n         Def {"}]}