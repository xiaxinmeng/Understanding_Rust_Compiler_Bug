{"sha": "b2b2be1cad5a3009f53f490ae09abf33958e40df", "node_id": "C_kwDOAAsO6NoAKGIyYjJiZTFjYWQ1YTMwMDlmNTNmNDkwYWUwOWFiZjMzOTU4ZTQwZGY", "commit": {"author": {"name": "bohan", "email": "bohan-zhang@foxmail.com", "date": "2023-05-15T17:39:35Z"}, "committer": {"name": "bohan", "email": "bohan-zhang@foxmail.com", "date": "2023-05-16T01:29:33Z"}, "message": "fix(diagnostic): wrap parens for ref impl trait param", "tree": {"sha": "9f5cf75c8c675452d12be3843fcdc19ee10a506e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f5cf75c8c675452d12be3843fcdc19ee10a506e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b2be1cad5a3009f53f490ae09abf33958e40df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b2be1cad5a3009f53f490ae09abf33958e40df", "html_url": "https://github.com/rust-lang/rust/commit/b2b2be1cad5a3009f53f490ae09abf33958e40df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b2be1cad5a3009f53f490ae09abf33958e40df/comments", "author": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8006510ab0f69ee75e9c3f7e8bff3776886dae51", "url": "https://api.github.com/repos/rust-lang/rust/commits/8006510ab0f69ee75e9c3f7e8bff3776886dae51", "html_url": "https://github.com/rust-lang/rust/commit/8006510ab0f69ee75e9c3f7e8bff3776886dae51"}], "stats": {"total": 107, "additions": 76, "deletions": 31}, "files": [{"sha": "550a87e6102bfffce5dbf3555347f7d6c6f32fc8", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b2b2be1cad5a3009f53f490ae09abf33958e40df/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b2be1cad5a3009f53f490ae09abf33958e40df/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=b2b2be1cad5a3009f53f490ae09abf33958e40df", "patch": "@@ -2633,47 +2633,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 Nothing,\n                             }\n                             let ast_generics = hir.get_generics(id.owner.def_id).unwrap();\n-                            let (sp, mut introducer) = if let Some(span) =\n-                                ast_generics.bounds_span_for_suggestions(def_id)\n-                            {\n-                                (span, Introducer::Plus)\n-                            } else if let Some(colon_span) = param.colon_span {\n-                                (colon_span.shrink_to_hi(), Introducer::Nothing)\n-                            } else {\n-                                (param.span.shrink_to_hi(), Introducer::Colon)\n-                            };\n-                            if matches!(\n-                                param.kind,\n-                                hir::GenericParamKind::Type { synthetic: true, .. },\n-                            ) {\n-                                introducer = Introducer::Plus\n-                            }\n                             let trait_def_ids: FxHashSet<DefId> = ast_generics\n                                 .bounds_for_param(def_id)\n                                 .flat_map(|bp| bp.bounds.iter())\n                                 .filter_map(|bound| bound.trait_ref()?.trait_def_id())\n                                 .collect();\n-                            if !candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n-                                err.span_suggestions(\n-                                    sp,\n-                                    message(format!(\n-                                        \"restrict type parameter `{}` with\",\n-                                        param.name.ident(),\n-                                    )),\n+                            if candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n+                                return;\n+                            }\n+                            let msg = message(format!(\n+                                \"restrict type parameter `{}` with\",\n+                                param.name.ident(),\n+                            ));\n+                            let bounds_span = ast_generics.bounds_span_for_suggestions(def_id);\n+                            if rcvr_ty.is_ref() && param.is_impl_trait() && bounds_span.is_some() {\n+                                err.multipart_suggestions(\n+                                    msg,\n                                     candidates.iter().map(|t| {\n-                                        format!(\n-                                            \"{} {}\",\n-                                            match introducer {\n-                                                Introducer::Plus => \" +\",\n-                                                Introducer::Colon => \":\",\n-                                                Introducer::Nothing => \"\",\n-                                            },\n-                                            self.tcx.def_path_str(t.def_id),\n-                                        )\n+                                        vec![\n+                                            (param.span.shrink_to_lo(), \"(\".to_string()),\n+                                            (\n+                                                bounds_span.unwrap(),\n+                                                format!(\" + {})\", self.tcx.def_path_str(t.def_id)),\n+                                            ),\n+                                        ]\n                                     }),\n                                     Applicability::MaybeIncorrect,\n                                 );\n+                                return;\n                             }\n+\n+                            let (sp, introducer) = if let Some(span) = bounds_span {\n+                                (span, Introducer::Plus)\n+                            } else if let Some(colon_span) = param.colon_span {\n+                                (colon_span.shrink_to_hi(), Introducer::Nothing)\n+                            } else if param.is_impl_trait() {\n+                                (param.span.shrink_to_hi(), Introducer::Plus)\n+                            } else {\n+                                (param.span.shrink_to_hi(), Introducer::Colon)\n+                            };\n+\n+                            err.span_suggestions(\n+                                sp,\n+                                msg,\n+                                candidates.iter().map(|t| {\n+                                    format!(\n+                                        \"{} {}\",\n+                                        match introducer {\n+                                            Introducer::Plus => \" +\",\n+                                            Introducer::Colon => \":\",\n+                                            Introducer::Nothing => \"\",\n+                                        },\n+                                        self.tcx.def_path_str(t.def_id)\n+                                    )\n+                                }),\n+                                Applicability::MaybeIncorrect,\n+                            );\n                             return;\n                         }\n                         Node::Item(hir::Item {"}, {"sha": "8ba9e1fdd62213fc09c20324ca4d85d56323bbdf", "filename": "tests/ui/suggestions/issue-99597.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2b2be1cad5a3009f53f490ae09abf33958e40df/tests%2Fui%2Fsuggestions%2Fissue-99597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b2be1cad5a3009f53f490ae09abf33958e40df/tests%2Fui%2Fsuggestions%2Fissue-99597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-99597.rs?ref=b2b2be1cad5a3009f53f490ae09abf33958e40df", "patch": "@@ -0,0 +1,15 @@\n+#![allow(dead_code)]\n+\n+trait T1 { }\n+\n+trait T2 {\n+    fn test(&self) { }\n+}\n+\n+fn go(s: &impl T1) {\n+    //~^ SUGGESTION (\n+    s.test();\n+    //~^ ERROR no method named `test`\n+}\n+\n+fn main() { }"}, {"sha": "bdf2a07c143b4db9fab2a8fde39284028253b55f", "filename": "tests/ui/suggestions/issue-99597.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2b2be1cad5a3009f53f490ae09abf33958e40df/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b2be1cad5a3009f53f490ae09abf33958e40df/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-99597.stderr?ref=b2b2be1cad5a3009f53f490ae09abf33958e40df", "patch": "@@ -0,0 +1,15 @@\n+error[E0599]: no method named `test` found for reference `&impl T1` in the current scope\n+  --> $DIR/issue-99597.rs:11:7\n+   |\n+LL |     s.test();\n+   |       ^^^^ method not found in `&impl T1`\n+   |\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `test`, perhaps you need to restrict type parameter `impl T1` with it:\n+   |\n+LL | fn go(s: &(impl T1 + T2)) {\n+   |           +        +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}