{"sha": "0d5a9e4104a88df341480aa05d1c8976996e6e13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNWE5ZTQxMDRhODhkZjM0MTQ4MGFhMDVkMWM4OTc2OTk2ZTZlMTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-23T17:06:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-23T17:06:57Z"}, "message": "Merge #7768\n\n7768: Fix visibility computation when inside a block expression r=jonas-schievink a=jonas-schievink\n\nfixes https://github.com/rust-analyzer/rust-analyzer/issues/7728\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "55290349625c8516fbb8fd24f7fa22582a57d35a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55290349625c8516fbb8fd24f7fa22582a57d35a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d5a9e4104a88df341480aa05d1c8976996e6e13", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgNTYxCRBK7hj4Ov3rIwAAdHIIABjIuuvrsIYLndnAe8gkZ/gS\nEGLl8lKC9vKOpqa59g5gG+8AdSG2SeMFxBGfdkIsjejpvvSw1jcQXRKYnz/czngS\nDTVGsbyQEDK8pD35fKUtFXrpoQWbS8LID1lfbgayZ1hABKB1t1KdA2/WR3QBzrii\nIUO2xx+dSjvKZlLquWiNzetYCx4urjtf+kWcLaMo5E/1feC1Kan22ref9hzGa3Hz\nf4KjmaZZWr5S2GUem9fQumbSaZeeaGLhYIUuqYo7ffB6qARgzXpZqinkA5ryF9Wq\n0ZXAcx1wVM2fHUjPazNQm6Lfawh/rTjBj76Tndf3fsFbnPyOiMxRpSyuIOsySrY=\n=IHHU\n-----END PGP SIGNATURE-----\n", "payload": "tree 55290349625c8516fbb8fd24f7fa22582a57d35a\nparent e837fb245aadf2dcfda51a17a6c19b5efd47dc42\nparent 338823f73aefbf7957b928ad76fc5f55cc43df9c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614100017 +0000\ncommitter GitHub <noreply@github.com> 1614100017 +0000\n\nMerge #7768\n\n7768: Fix visibility computation when inside a block expression r=jonas-schievink a=jonas-schievink\n\nfixes https://github.com/rust-analyzer/rust-analyzer/issues/7728\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d5a9e4104a88df341480aa05d1c8976996e6e13", "html_url": "https://github.com/rust-lang/rust/commit/0d5a9e4104a88df341480aa05d1c8976996e6e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d5a9e4104a88df341480aa05d1c8976996e6e13/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e837fb245aadf2dcfda51a17a6c19b5efd47dc42", "url": "https://api.github.com/repos/rust-lang/rust/commits/e837fb245aadf2dcfda51a17a6c19b5efd47dc42", "html_url": "https://github.com/rust-lang/rust/commit/e837fb245aadf2dcfda51a17a6c19b5efd47dc42"}, {"sha": "338823f73aefbf7957b928ad76fc5f55cc43df9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/338823f73aefbf7957b928ad76fc5f55cc43df9c", "html_url": "https://github.com/rust-lang/rust/commit/338823f73aefbf7957b928ad76fc5f55cc43df9c"}], "stats": {"total": 74, "additions": 65, "deletions": 9}, "files": [{"sha": "f92232eb32d2ee7b240e3255a9e4787ba8fad65a", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d5a9e4104a88df341480aa05d1c8976996e6e13/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5a9e4104a88df341480aa05d1c8976996e6e13/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=0d5a9e4104a88df341480aa05d1c8976996e6e13", "patch": "@@ -337,6 +337,12 @@ impl DefMap {\n         None\n     }\n \n+    /// If this `DefMap` is for a block expression, returns the module containing the block (which\n+    /// might again be a block, or a module inside a block).\n+    pub fn parent(&self) -> Option<ModuleId> {\n+        Some(self.block?.parent)\n+    }\n+\n     // FIXME: this can use some more human-readable format (ideally, an IR\n     // even), as this should be a great debugging aid.\n     pub fn dump(&self, db: &dyn DefDatabase) -> String {"}, {"sha": "9996a08072149f0f3b03779d79810eb927f76cd0", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d5a9e4104a88df341480aa05d1c8976996e6e13/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5a9e4104a88df341480aa05d1c8976996e6e13/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=0d5a9e4104a88df341480aa05d1c8976996e6e13", "patch": "@@ -608,7 +608,7 @@ impl DefCollector<'_> {\n                                 (\n                                     n,\n                                     res.filter_visibility(|v| {\n-                                        v.is_visible_from_def_map(&self.def_map, module_id)\n+                                        v.is_visible_from_def_map(self.db, &self.def_map, module_id)\n                                     }),\n                                 )\n                             })\n@@ -761,7 +761,7 @@ impl DefCollector<'_> {\n             .filter(|(glob_importing_module, _)| {\n                 // we know all resolutions have the same visibility (`vis`), so we\n                 // just need to check that once\n-                vis.is_visible_from_def_map(&self.def_map, *glob_importing_module)\n+                vis.is_visible_from_def_map(self.db, &self.def_map, *glob_importing_module)\n             })\n             .cloned()\n             .collect::<Vec<_>>();"}, {"sha": "0e39519100f8b7c725a822c6c9c3b36145337448", "filename": "crates/hir_def/src/visibility.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0d5a9e4104a88df341480aa05d1c8976996e6e13/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5a9e4104a88df341480aa05d1c8976996e6e13/crates%2Fhir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fvisibility.rs?ref=0d5a9e4104a88df341480aa05d1c8976996e6e13", "patch": "@@ -103,7 +103,7 @@ impl Visibility {\n             return false;\n         }\n         let def_map = from_module.def_map(db);\n-        self.is_visible_from_def_map(&def_map, from_module.local_id)\n+        self.is_visible_from_def_map(db, &def_map, from_module.local_id)\n     }\n \n     pub(crate) fn is_visible_from_other_crate(self) -> bool {\n@@ -115,19 +115,41 @@ impl Visibility {\n \n     pub(crate) fn is_visible_from_def_map(\n         self,\n+        db: &dyn DefDatabase,\n         def_map: &DefMap,\n-        from_module: crate::LocalModuleId,\n+        mut from_module: crate::LocalModuleId,\n     ) -> bool {\n         let to_module = match self {\n             Visibility::Module(m) => m,\n             Visibility::Public => return true,\n         };\n+\n         // from_module needs to be a descendant of to_module\n-        let mut ancestors = std::iter::successors(Some(from_module), |m| {\n-            let parent_id = def_map[*m].parent?;\n-            Some(parent_id)\n-        });\n-        ancestors.any(|m| m == to_module.local_id)\n+        let mut def_map = def_map;\n+        let mut parent_arc;\n+        loop {\n+            if def_map.module_id(from_module) == to_module {\n+                return true;\n+            }\n+            match def_map[from_module].parent {\n+                Some(parent) => {\n+                    from_module = parent;\n+                }\n+                None => {\n+                    match def_map.parent() {\n+                        Some(module) => {\n+                            parent_arc = module.def_map(db);\n+                            def_map = &*parent_arc;\n+                            from_module = module.local_id;\n+                        }\n+                        None => {\n+                            // Reached the root module, nothing left to check.\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     }\n \n     /// Returns the most permissive visibility of `self` and `other`."}, {"sha": "084d7721d7315050c3ed1ab0f33d5af4a6fab3fd", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0d5a9e4104a88df341480aa05d1c8976996e6e13/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d5a9e4104a88df341480aa05d1c8976996e6e13/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=0d5a9e4104a88df341480aa05d1c8976996e6e13", "patch": "@@ -428,4 +428,32 @@ fn main() { make_s!().f$0; }\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn completes_after_macro_call_in_submodule() {\n+        check(\n+            r#\"\n+macro_rules! empty {\n+    () => {};\n+}\n+\n+mod foo {\n+    #[derive(Debug, Default)]\n+    struct Template2 {}\n+\n+    impl Template2 {\n+        fn private(&self) {}\n+    }\n+    fn baz() {\n+        let goo: Template2 = Template2 {};\n+        empty!();\n+        goo.$0\n+    }\n+}\n+        \"#,\n+            expect![[r#\"\n+                me private() -> ()\n+            \"#]],\n+        );\n+    }\n }"}]}