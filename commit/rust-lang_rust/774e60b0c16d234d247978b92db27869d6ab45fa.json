{"sha": "774e60b0c16d234d247978b92db27869d6ab45fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NGU2MGIwYzE2ZDIzNGQyNDc5NzhiOTJkYjI3ODY5ZDZhYjQ1ZmE=", "commit": {"author": {"name": "Dmitry Kadashev", "email": "dkadashev@gmail.com", "date": "2019-11-02T07:51:10Z"}, "committer": {"name": "Dmitry Kadashev", "email": "dkadashev@gmail.com", "date": "2019-11-02T07:55:03Z"}, "message": "Prettify mismatched types error message in a special case\n\nType parameters are referenced in the error message after the previous\nfew commits (using span label). But when the main error message already\nreferences the very same type parameter it becomes clumsy. Do not show\nthe additional label in this case as per code review comment by\n@estebank.\n\nAlso this contains a small style fix.", "tree": {"sha": "d4b95d41c085f76a82c0eac3ecf42a65e18859e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4b95d41c085f76a82c0eac3ecf42a65e18859e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774e60b0c16d234d247978b92db27869d6ab45fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774e60b0c16d234d247978b92db27869d6ab45fa", "html_url": "https://github.com/rust-lang/rust/commit/774e60b0c16d234d247978b92db27869d6ab45fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774e60b0c16d234d247978b92db27869d6ab45fa/comments", "author": {"login": "dkadashev", "id": 1396608, "node_id": "MDQ6VXNlcjEzOTY2MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1396608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkadashev", "html_url": "https://github.com/dkadashev", "followers_url": "https://api.github.com/users/dkadashev/followers", "following_url": "https://api.github.com/users/dkadashev/following{/other_user}", "gists_url": "https://api.github.com/users/dkadashev/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkadashev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkadashev/subscriptions", "organizations_url": "https://api.github.com/users/dkadashev/orgs", "repos_url": "https://api.github.com/users/dkadashev/repos", "events_url": "https://api.github.com/users/dkadashev/events{/privacy}", "received_events_url": "https://api.github.com/users/dkadashev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkadashev", "id": 1396608, "node_id": "MDQ6VXNlcjEzOTY2MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1396608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkadashev", "html_url": "https://github.com/dkadashev", "followers_url": "https://api.github.com/users/dkadashev/followers", "following_url": "https://api.github.com/users/dkadashev/following{/other_user}", "gists_url": "https://api.github.com/users/dkadashev/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkadashev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkadashev/subscriptions", "organizations_url": "https://api.github.com/users/dkadashev/orgs", "repos_url": "https://api.github.com/users/dkadashev/repos", "events_url": "https://api.github.com/users/dkadashev/events{/privacy}", "received_events_url": "https://api.github.com/users/dkadashev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e10b75951e5ab7975952826a7591f8eca77e423", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e10b75951e5ab7975952826a7591f8eca77e423", "html_url": "https://github.com/rust-lang/rust/commit/4e10b75951e5ab7975952826a7591f8eca77e423"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "3c4db5e0e259e6394238289821080151b4283046", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/774e60b0c16d234d247978b92db27869d6ab45fa/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774e60b0c16d234d247978b92db27869d6ab45fa/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=774e60b0c16d234d247978b92db27869d6ab45fa", "patch": "@@ -1194,10 +1194,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // it's a actual definition. According to the comments (e.g. in\n         // librustc_typeck/check/compare_method.rs:compare_predicate_entailment) the latter\n         // is relied upon by some other code. This might (or might not) need cleanup.\n-        let body_owner_def_id = match self.tcx.hir().opt_local_def_id(cause.body_id) {\n-            Some(def_id) => def_id,\n-            None => self.tcx.hir().body_owner_def_id(hir::BodyId{hir_id: cause.body_id}),\n-        };\n+        let body_owner_def_id = self.tcx.hir().opt_local_def_id(cause.body_id)\n+            .unwrap_or_else(|| {\n+                self.tcx.hir().body_owner_def_id(hir::BodyId { hir_id: cause.body_id })\n+            });\n         self.check_and_note_conflicting_crates(diag, terr, span);\n         self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id);\n "}, {"sha": "0639a70ed0c49d598f7774f809bd5b93fc3fad0b", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/774e60b0c16d234d247978b92db27869d6ab45fa/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774e60b0c16d234d247978b92db27869d6ab45fa/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=774e60b0c16d234d247978b92db27869d6ab45fa", "patch": "@@ -291,14 +291,14 @@ impl<'tcx> TyCtxt<'tcx> {\n                     },\n                     (ty::Param(expected), ty::Param(found)) => {\n                         let generics = self.generics_of(body_owner_def_id);\n-                        db.span_label(\n-                            self.def_span(generics.type_param(expected, self).def_id),\n-                            \"expected type parameter\"\n-                        );\n-                        db.span_label(\n-                            self.def_span(generics.type_param(found, self).def_id),\n-                            \"found type parameter\"\n-                        );\n+                        let e_span = self.def_span(generics.type_param(expected, self).def_id);\n+                        if !sp.contains(e_span) {\n+                            db.span_label(e_span, \"expected type parameter\");\n+                        }\n+                        let f_span = self.def_span(generics.type_param(found, self).def_id);\n+                        if !sp.contains(f_span) {\n+                            db.span_label(f_span, \"found type parameter\");\n+                        }\n                         db.note(\"a type parameter was expected, but a different one was found; \\\n                                  you might be missing a type parameter or trait bound\");\n                         db.note(\"for more information, visit \\\n@@ -313,10 +313,10 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                     (ty::Param(p), _) | (_, ty::Param(p)) => {\n                         let generics = self.generics_of(body_owner_def_id);\n-                        db.span_label(\n-                            self.def_span(generics.type_param(p, self).def_id),\n-                            \"this type parameter\"\n-                        );\n+                        let p_span = self.def_span(generics.type_param(p, self).def_id);\n+                        if !sp.contains(p_span) {\n+                            db.span_label(p_span, \"this type parameter\");\n+                        }\n                         db.help(\"type parameters must be constrained to match other types\");\n                         if self.sess.teach(&db.get_code().unwrap()) {\n                             db.help(\"given a type parameter `T` and a method `foo`:"}, {"sha": "7cb4677a2b199c6970143fde8d39dffaa0897b7a", "filename": "src/test/ui/impl-trait/impl-generic-mismatch-ab.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/774e60b0c16d234d247978b92db27869d6ab45fa/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/774e60b0c16d234d247978b92db27869d6ab45fa/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch-ab.stderr?ref=774e60b0c16d234d247978b92db27869d6ab45fa", "patch": "@@ -5,10 +5,8 @@ LL |     fn foo<A: Debug>(&self, a: &A, b: &impl Debug);\n    |                                -- type in trait\n ...\n LL |     fn foo<B: Debug>(&self, a: &impl Debug, b: &B) { }\n-   |            -                   ^----------\n-   |            |                   ||\n-   |            |                   |found type parameter\n-   |            |                   expected type parameter `B`, found type parameter `impl Debug`\n+   |            -                   ^^^^^^^^^^^ expected type parameter `B`, found type parameter `impl Debug`\n+   |            |\n    |            expected type parameter\n    |\n    = note: expected type `fn(&(), &B, &impl Debug)`"}]}