{"sha": "fd14c5207544971aab92bbbd3d2a47723b91b284", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMTRjNTIwNzU0NDk3MWFhYjkyYmJiZDNkMmE0NzcyM2I5MWIyODQ=", "commit": {"author": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2021-06-05T11:06:10Z"}, "committer": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2021-06-05T11:06:10Z"}, "message": "Rename IoSlice(Mut)::advance_slice to advance_slices", "tree": {"sha": "9a1c769f7159c4792c44a02d5813ce8032c24ac0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a1c769f7159c4792c44a02d5813ce8032c24ac0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd14c5207544971aab92bbbd3d2a47723b91b284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd14c5207544971aab92bbbd3d2a47723b91b284", "html_url": "https://github.com/rust-lang/rust/commit/fd14c5207544971aab92bbbd3d2a47723b91b284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd14c5207544971aab92bbbd3d2a47723b91b284/comments", "author": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e25b5ef2be2577693aee585b58e0b6dbd79c1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e25b5ef2be2577693aee585b58e0b6dbd79c1d", "html_url": "https://github.com/rust-lang/rust/commit/49e25b5ef2be2577693aee585b58e0b6dbd79c1d"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "7187ec71bc9e3c3c34c6ba74fa773991eba85991", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd14c5207544971aab92bbbd3d2a47723b91b284/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd14c5207544971aab92bbbd3d2a47723b91b284/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=fd14c5207544971aab92bbbd3d2a47723b91b284", "patch": "@@ -1045,7 +1045,7 @@ impl<'a> IoSliceMut<'a> {\n \n     /// Advance the internal cursor of the slice.\n     ///\n-    /// Also see [`IoSliceMut::advance_slice`] to advance the cursors of\n+    /// Also see [`IoSliceMut::advance_slices`] to advance the cursors of\n     /// multiple buffers.\n     ///\n     /// # Examples\n@@ -1097,13 +1097,13 @@ impl<'a> IoSliceMut<'a> {\n     /// ][..];\n     ///\n     /// // Mark 10 bytes as read.\n-    /// IoSliceMut::advance_slice(&mut bufs, 10);\n+    /// IoSliceMut::advance_slices(&mut bufs, 10);\n     /// assert_eq!(bufs[0].deref(), [2; 14].as_ref());\n     /// assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n     /// ```\n     #[unstable(feature = \"io_slice_advance\", issue = \"62726\")]\n     #[inline]\n-    pub fn advance_slice(bufs: &mut &mut [IoSliceMut<'a>], n: usize) {\n+    pub fn advance_slices(bufs: &mut &mut [IoSliceMut<'a>], n: usize) {\n         // Number of buffers to remove.\n         let mut remove = 0;\n         // Total length of all the to be removed buffers.\n@@ -1179,7 +1179,7 @@ impl<'a> IoSlice<'a> {\n \n     /// Advance the internal cursor of the slice.\n     ///\n-    /// Also see [`IoSlice::advance_slice`] to advance the cursors of multiple\n+    /// Also see [`IoSlice::advance_slices`] to advance the cursors of multiple\n     /// buffers.\n     ///\n     /// # Examples\n@@ -1231,12 +1231,12 @@ impl<'a> IoSlice<'a> {\n     /// ][..];\n     ///\n     /// // Mark 10 bytes as written.\n-    /// IoSlice::advance_slice(&mut bufs, 10);\n+    /// IoSlice::advance_slices(&mut bufs, 10);\n     /// assert_eq!(bufs[0].deref(), [2; 14].as_ref());\n     /// assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n     #[unstable(feature = \"io_slice_advance\", issue = \"62726\")]\n     #[inline]\n-    pub fn advance_slice(bufs: &mut &mut [IoSlice<'a>], n: usize) {\n+    pub fn advance_slices(bufs: &mut &mut [IoSlice<'a>], n: usize) {\n         // Number of buffers to remove.\n         let mut remove = 0;\n         // Total length of all the to be removed buffers.\n@@ -1562,7 +1562,7 @@ pub trait Write {\n     fn write_all_vectored(&mut self, mut bufs: &mut [IoSlice<'_>]) -> Result<()> {\n         // Guarantee that bufs is empty if it contains no data,\n         // to avoid calling write_vectored if there is no data to be written.\n-        IoSlice::advance_slice(&mut bufs, 0);\n+        IoSlice::advance_slices(&mut bufs, 0);\n         while !bufs.is_empty() {\n             match self.write_vectored(bufs) {\n                 Ok(0) => {\n@@ -1571,7 +1571,7 @@ pub trait Write {\n                         &\"failed to write whole buffer\",\n                     ));\n                 }\n-                Ok(n) => IoSlice::advance_slice(&mut bufs, n),\n+                Ok(n) => IoSlice::advance_slices(&mut bufs, n),\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                 Err(e) => return Err(e),\n             }"}, {"sha": "df0dc7e9d31f699d206d7c3fc86b3397b797c580", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd14c5207544971aab92bbbd3d2a47723b91b284/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd14c5207544971aab92bbbd3d2a47723b91b284/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=fd14c5207544971aab92bbbd3d2a47723b91b284", "patch": "@@ -353,7 +353,7 @@ fn test_read_to_end_capacity() -> io::Result<()> {\n }\n \n #[test]\n-fn io_slice_mut_advance_slice() {\n+fn io_slice_mut_advance_slices() {\n     let mut buf1 = [1; 8];\n     let mut buf2 = [2; 16];\n     let mut buf3 = [3; 8];\n@@ -364,75 +364,75 @@ fn io_slice_mut_advance_slice() {\n     ][..];\n \n     // Only in a single buffer..\n-    IoSliceMut::advance_slice(&mut bufs, 1);\n+    IoSliceMut::advance_slices(&mut bufs, 1);\n     assert_eq!(bufs[0].deref(), [1; 7].as_ref());\n     assert_eq!(bufs[1].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[2].deref(), [3; 8].as_ref());\n \n     // Removing a buffer, leaving others as is.\n-    IoSliceMut::advance_slice(&mut bufs, 7);\n+    IoSliceMut::advance_slices(&mut bufs, 7);\n     assert_eq!(bufs[0].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n \n     // Removing a buffer and removing from the next buffer.\n-    IoSliceMut::advance_slice(&mut bufs, 18);\n+    IoSliceMut::advance_slices(&mut bufs, 18);\n     assert_eq!(bufs[0].deref(), [3; 6].as_ref());\n }\n \n #[test]\n-fn io_slice_mut_advance_slice_empty_slice() {\n+fn io_slice_mut_advance_slices_empty_slice() {\n     let mut empty_bufs = &mut [][..];\n     // Shouldn't panic.\n-    IoSliceMut::advance_slice(&mut empty_bufs, 1);\n+    IoSliceMut::advance_slices(&mut empty_bufs, 1);\n }\n \n #[test]\n-fn io_slice_mut_advance_slice_beyond_total_length() {\n+fn io_slice_mut_advance_slices_beyond_total_length() {\n     let mut buf1 = [1; 8];\n     let mut bufs = &mut [IoSliceMut::new(&mut buf1)][..];\n \n     // Going beyond the total length should be ok.\n-    IoSliceMut::advance_slice(&mut bufs, 9);\n+    IoSliceMut::advance_slices(&mut bufs, 9);\n     assert!(bufs.is_empty());\n }\n \n #[test]\n-fn io_slice_advance_slice() {\n+fn io_slice_advance_slices() {\n     let buf1 = [1; 8];\n     let buf2 = [2; 16];\n     let buf3 = [3; 8];\n     let mut bufs = &mut [IoSlice::new(&buf1), IoSlice::new(&buf2), IoSlice::new(&buf3)][..];\n \n     // Only in a single buffer..\n-    IoSlice::advance_slice(&mut bufs, 1);\n+    IoSlice::advance_slices(&mut bufs, 1);\n     assert_eq!(bufs[0].deref(), [1; 7].as_ref());\n     assert_eq!(bufs[1].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[2].deref(), [3; 8].as_ref());\n \n     // Removing a buffer, leaving others as is.\n-    IoSlice::advance_slice(&mut bufs, 7);\n+    IoSlice::advance_slices(&mut bufs, 7);\n     assert_eq!(bufs[0].deref(), [2; 16].as_ref());\n     assert_eq!(bufs[1].deref(), [3; 8].as_ref());\n \n     // Removing a buffer and removing from the next buffer.\n-    IoSlice::advance_slice(&mut bufs, 18);\n+    IoSlice::advance_slices(&mut bufs, 18);\n     assert_eq!(bufs[0].deref(), [3; 6].as_ref());\n }\n \n #[test]\n-fn io_slice_advance_slice_empty_slice() {\n+fn io_slice_advance_slices_empty_slice() {\n     let mut empty_bufs = &mut [][..];\n     // Shouldn't panic.\n-    IoSlice::advance_slice(&mut empty_bufs, 1);\n+    IoSlice::advance_slices(&mut empty_bufs, 1);\n }\n \n #[test]\n-fn io_slice_advance_slice_beyond_total_length() {\n+fn io_slice_advance_slices_beyond_total_length() {\n     let buf1 = [1; 8];\n     let mut bufs = &mut [IoSlice::new(&buf1)][..];\n \n     // Going beyond the total length should be ok.\n-    IoSlice::advance_slice(&mut bufs, 9);\n+    IoSlice::advance_slices(&mut bufs, 9);\n     assert!(bufs.is_empty());\n }\n "}]}