{"sha": "85e2e5a900eb1113b2cea1a4c828c64139692149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZTJlNWE5MDBlYjExMTNiMmNlYTFhNGM4MjhjNjQxMzk2OTIxNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-04T09:21:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-04T09:21:04Z"}, "message": "auto merge of #16964 : nodakai/rust/libnative-superfluous-retry, r=alexcrichton\n\nThose syscalls listed below don't return `EINTR`, so wrapping them with `retry()` is superfluous.\r\n\r\nBut I admit the current code is better from the viewpoint of difensive programming, given that the overhead of `retry()` is really cheap...\r\n\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/fstat.html\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/mkdir.html\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/unlink.html\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/rename.html\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/rmdir.html\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/readlink.html\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/symlink.html\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/link.html\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/fstatat.html\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/functions/utime.html", "tree": {"sha": "108c97b7ef758b9161a0daf43e82c0aa4237b0d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/108c97b7ef758b9161a0daf43e82c0aa4237b0d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85e2e5a900eb1113b2cea1a4c828c64139692149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85e2e5a900eb1113b2cea1a4c828c64139692149", "html_url": "https://github.com/rust-lang/rust/commit/85e2e5a900eb1113b2cea1a4c828c64139692149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85e2e5a900eb1113b2cea1a4c828c64139692149/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5924937a5a6d59baabb4f3d94b1cf5b2bf2136eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5924937a5a6d59baabb4f3d94b1cf5b2bf2136eb", "html_url": "https://github.com/rust-lang/rust/commit/5924937a5a6d59baabb4f3d94b1cf5b2bf2136eb"}, {"sha": "d90921a9d87b17df5eeab9e5f18581e8b04a1ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d90921a9d87b17df5eeab9e5f18581e8b04a1ba9", "html_url": "https://github.com/rust-lang/rust/commit/d90921a9d87b17df5eeab9e5f18581e8b04a1ba9"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "136652f3ebfc9e1e0cbc555b13ac812c67d8b3f9", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85e2e5a900eb1113b2cea1a4c828c64139692149/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e2e5a900eb1113b2cea1a4c828c64139692149/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=85e2e5a900eb1113b2cea1a4c828c64139692149", "patch": "@@ -154,7 +154,7 @@ impl rtio::RtioFileStream for FileDesc {\n \n     fn fstat(&mut self) -> IoResult<rtio::FileStat> {\n         let mut stat: libc::stat = unsafe { mem::zeroed() };\n-        match retry(|| unsafe { libc::fstat(self.fd(), &mut stat) }) {\n+        match unsafe { libc::fstat(self.fd(), &mut stat) } {\n             0 => Ok(mkstat(&stat)),\n             _ => Err(super::last_error()),\n         }\n@@ -346,9 +346,7 @@ pub fn open(path: &CString, fm: rtio::FileMode, fa: rtio::FileAccess)\n }\n \n pub fn mkdir(p: &CString, mode: uint) -> IoResult<()> {\n-    super::mkerr_libc(retry(|| unsafe {\n-        libc::mkdir(p.as_ptr(), mode as libc::mode_t)\n-    }))\n+    super::mkerr_libc(unsafe { libc::mkdir(p.as_ptr(), mode as libc::mode_t) })\n }\n \n pub fn readdir(p: &CString) -> IoResult<Vec<CString>> {\n@@ -393,13 +391,11 @@ pub fn readdir(p: &CString) -> IoResult<Vec<CString>> {\n }\n \n pub fn unlink(p: &CString) -> IoResult<()> {\n-    super::mkerr_libc(retry(|| unsafe { libc::unlink(p.as_ptr()) }))\n+    super::mkerr_libc(unsafe { libc::unlink(p.as_ptr()) })\n }\n \n pub fn rename(old: &CString, new: &CString) -> IoResult<()> {\n-    super::mkerr_libc(retry(|| unsafe {\n-        libc::rename(old.as_ptr(), new.as_ptr())\n-    }))\n+    super::mkerr_libc(unsafe { libc::rename(old.as_ptr(), new.as_ptr()) })\n }\n \n pub fn chmod(p: &CString, mode: uint) -> IoResult<()> {\n@@ -409,9 +405,7 @@ pub fn chmod(p: &CString, mode: uint) -> IoResult<()> {\n }\n \n pub fn rmdir(p: &CString) -> IoResult<()> {\n-    super::mkerr_libc(retry(|| unsafe {\n-        libc::rmdir(p.as_ptr())\n-    }))\n+    super::mkerr_libc(unsafe { libc::rmdir(p.as_ptr()) })\n }\n \n pub fn chown(p: &CString, uid: int, gid: int) -> IoResult<()> {\n@@ -428,10 +422,10 @@ pub fn readlink(p: &CString) -> IoResult<CString> {\n         len = 1024; // FIXME: read PATH_MAX from C ffi?\n     }\n     let mut buf: Vec<u8> = Vec::with_capacity(len as uint);\n-    match retry(|| unsafe {\n+    match unsafe {\n         libc::readlink(p, buf.as_ptr() as *mut libc::c_char,\n                        len as libc::size_t) as libc::c_int\n-    }) {\n+    } {\n         -1 => Err(super::last_error()),\n         n => {\n             assert!(n > 0);\n@@ -442,15 +436,11 @@ pub fn readlink(p: &CString) -> IoResult<CString> {\n }\n \n pub fn symlink(src: &CString, dst: &CString) -> IoResult<()> {\n-    super::mkerr_libc(retry(|| unsafe {\n-        libc::symlink(src.as_ptr(), dst.as_ptr())\n-    }))\n+    super::mkerr_libc(unsafe { libc::symlink(src.as_ptr(), dst.as_ptr()) })\n }\n \n pub fn link(src: &CString, dst: &CString) -> IoResult<()> {\n-    super::mkerr_libc(retry(|| unsafe {\n-        libc::link(src.as_ptr(), dst.as_ptr())\n-    }))\n+    super::mkerr_libc(unsafe { libc::link(src.as_ptr(), dst.as_ptr()) })\n }\n \n fn mkstat(stat: &libc::stat) -> rtio::FileStat {\n@@ -489,15 +479,15 @@ fn mkstat(stat: &libc::stat) -> rtio::FileStat {\n \n pub fn stat(p: &CString) -> IoResult<rtio::FileStat> {\n     let mut stat: libc::stat = unsafe { mem::zeroed() };\n-    match retry(|| unsafe { libc::stat(p.as_ptr(), &mut stat) }) {\n+    match unsafe { libc::stat(p.as_ptr(), &mut stat) } {\n         0 => Ok(mkstat(&stat)),\n         _ => Err(super::last_error()),\n     }\n }\n \n pub fn lstat(p: &CString) -> IoResult<rtio::FileStat> {\n     let mut stat: libc::stat = unsafe { mem::zeroed() };\n-    match retry(|| unsafe { libc::lstat(p.as_ptr(), &mut stat) }) {\n+    match unsafe { libc::lstat(p.as_ptr(), &mut stat) } {\n         0 => Ok(mkstat(&stat)),\n         _ => Err(super::last_error()),\n     }\n@@ -508,9 +498,7 @@ pub fn utime(p: &CString, atime: u64, mtime: u64) -> IoResult<()> {\n         actime: (atime / 1000) as libc::time_t,\n         modtime: (mtime / 1000) as libc::time_t,\n     };\n-    super::mkerr_libc(retry(|| unsafe {\n-        libc::utime(p.as_ptr(), &buf)\n-    }))\n+    super::mkerr_libc(unsafe { libc::utime(p.as_ptr(), &buf) })\n }\n \n #[cfg(test)]"}]}