{"sha": "e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "node_id": "C_kwDOAAsO6NoAKGU0OTc3ZTc0ZGUyYmM5YmYwOTEzYTU2Y2ViMWVjM2I1YWE1MTgyZWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T08:50:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T08:50:49Z"}, "message": "Auto merge of #14836 - Veykril:rustc-lexer, r=Veykril\n\ninternal: Bump rustc_lexer", "tree": {"sha": "236aff8bb4c979a5147eb7a03a9dd94331a3ddaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/236aff8bb4c979a5147eb7a03a9dd94331a3ddaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "html_url": "https://github.com/rust-lang/rust/commit/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0235e3fff040b23c812c0e78efb4bd5460702a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0235e3fff040b23c812c0e78efb4bd5460702a", "html_url": "https://github.com/rust-lang/rust/commit/1c0235e3fff040b23c812c0e78efb4bd5460702a"}, {"sha": "099b5b3b150a6cca3faffcf854d0ff798beed610", "url": "https://api.github.com/repos/rust-lang/rust/commits/099b5b3b150a6cca3faffcf854d0ff798beed610", "html_url": "https://github.com/rust-lang/rust/commit/099b5b3b150a6cca3faffcf854d0ff798beed610"}], "stats": {"total": 207, "additions": 134, "deletions": 73}, "files": [{"sha": "7980823a854fef9a078e51a3a8050b7cc1d2f972", "filename": "Cargo.lock", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1193,7 +1193,7 @@ dependencies = [\n  \"drop_bomb\",\n  \"expect-test\",\n  \"limit\",\n- \"rustc-ap-rustc_lexer\",\n+ \"ra-ap-rustc_lexer\",\n  \"sourcegen\",\n  \"stdx\",\n ]\n@@ -1396,6 +1396,16 @@ dependencies = [\n  \"proc-macro2\",\n ]\n \n+[[package]]\n+name = \"ra-ap-rustc_lexer\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e1c145702ed3f237918e512685185dc8a4d0edc3a5326c63d20361d8ba9b45b3\"\n+dependencies = [\n+ \"unic-emoji-char\",\n+ \"unicode-xid\",\n+]\n+\n [[package]]\n name = \"rayon\"\n version = \"1.7.0\"\n@@ -1524,15 +1534,6 @@ dependencies = [\n  \"xshell\",\n ]\n \n-[[package]]\n-name = \"rustc-ap-rustc_lexer\"\n-version = \"727.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8f40f26e7abdcd3b982f36c09a634cc6187988fbf6ec466c91f8d30a12ac0237\"\n-dependencies = [\n- \"unicode-xid\",\n-]\n-\n [[package]]\n name = \"rustc-demangle\"\n version = \"0.1.22\"\n@@ -1753,9 +1754,9 @@ dependencies = [\n  \"proc-macro2\",\n  \"profile\",\n  \"quote\",\n+ \"ra-ap-rustc_lexer\",\n  \"rayon\",\n  \"rowan\",\n- \"rustc-ap-rustc_lexer\",\n  \"rustc-hash\",\n  \"smol_str\",\n  \"sourcegen\",\n@@ -1998,6 +1999,47 @@ version = \"1.16.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a3e5df347f0bf3ec1d670aad6ca5c6a1859cd9ea61d2113125794654ccced68f\"\n \n+[[package]]\n+name = \"unic-char-property\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a8c57a407d9b6fa02b4795eb81c5b6652060a15a7903ea981f3d723e6c0be221\"\n+dependencies = [\n+ \"unic-char-range\",\n+]\n+\n+[[package]]\n+name = \"unic-char-range\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0398022d5f700414f6b899e10b8348231abf9173fa93144cbc1a43b9793c1fbc\"\n+\n+[[package]]\n+name = \"unic-common\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"80d7ff825a6a654ee85a63e80f92f054f904f21e7d12da4e22f9834a4aaa35bc\"\n+\n+[[package]]\n+name = \"unic-emoji-char\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0b07221e68897210270a38bde4babb655869637af0f69407f96053a34f76494d\"\n+dependencies = [\n+ \"unic-char-property\",\n+ \"unic-char-range\",\n+ \"unic-ucd-version\",\n+]\n+\n+[[package]]\n+name = \"unic-ucd-version\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"96bd2f2237fe450fcd0a1d2f5f4e91711124f7857ba2e964247776ebeeb7b0c4\"\n+dependencies = [\n+ \"unic-common\",\n+]\n+\n [[package]]\n name = \"unicase\"\n version = \"2.6.0\""}, {"sha": "513a769ca177d32e04cefd7486a2cf0167808bbc", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -89,3 +89,5 @@ text-size = \"1.1.0\"\n serde = { version = \"=1.0.156\", features = [\"derive\"] }\n serde_json = \"1.0.94\"\n triomphe = { version = \"0.1.8\", default-features = false, features = [\"std\"] }\n+\n+rustc_lexer = { version = \"0.1.0\", package = \"ra-ap-rustc_lexer\" }"}, {"sha": "09e62c35278e90308b229dd07aad45d883e5366a", "filename": "crates/parser/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2FCargo.toml?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -13,7 +13,7 @@ doctest = false\n \n [dependencies]\n drop_bomb = \"0.1.5\"\n-rustc_lexer = { version = \"727.0.0\", package = \"rustc-ap-rustc_lexer\" }\n+rustc_lexer.workspace = true\n \n limit.workspace = true\n "}, {"sha": "ace6985a583b219e45916b6d4690e93d56962a92", "filename": "crates/parser/src/lexed_str.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Fsrc%2Flexed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Fsrc%2Flexed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flexed_str.rs?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -36,7 +36,7 @@ impl<'a> LexedStr<'a> {\n         };\n \n         for token in rustc_lexer::tokenize(&text[conv.offset..]) {\n-            let token_text = &text[conv.offset..][..token.len];\n+            let token_text = &text[conv.offset..][..token.len as usize];\n \n             conv.extend_token(&token.kind, token_text);\n         }\n@@ -49,8 +49,8 @@ impl<'a> LexedStr<'a> {\n             return None;\n         }\n \n-        let token = rustc_lexer::first_token(text);\n-        if token.len != text.len() {\n+        let token = rustc_lexer::tokenize(text).next()?;\n+        if token.len as usize != text.len() {\n             return None;\n         }\n \n@@ -175,6 +175,10 @@ impl<'a> Converter<'a> {\n                 rustc_lexer::TokenKind::Ident => {\n                     SyntaxKind::from_keyword(token_text).unwrap_or(IDENT)\n                 }\n+                rustc_lexer::TokenKind::InvalidIdent => {\n+                    err = \"Ident contains invalid characters\";\n+                    IDENT\n+                }\n \n                 rustc_lexer::TokenKind::RawIdent => IDENT,\n                 rustc_lexer::TokenKind::Literal { kind, .. } => {\n@@ -221,6 +225,7 @@ impl<'a> Converter<'a> {\n                     err = \"unknown literal prefix\";\n                     IDENT\n                 }\n+                rustc_lexer::TokenKind::Eof => EOF,\n             }\n         };\n \n@@ -268,35 +273,30 @@ impl<'a> Converter<'a> {\n                 }\n                 BYTE_STRING\n             }\n-            rustc_lexer::LiteralKind::RawStr { err: raw_str_err, .. } => {\n-                if let Some(raw_str_err) = raw_str_err {\n-                    err = match raw_str_err {\n-                        rustc_lexer::RawStrError::InvalidStarter { .. } => \"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\",\n-                        rustc_lexer::RawStrError::NoTerminator { expected, found, .. } => if expected == found {\n-                            \"Missing trailing `\\\"` to terminate the raw string literal\"\n-                        } else {\n-                            \"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"\n-                        },\n-                        rustc_lexer::RawStrError::TooManyDelimiters { .. } => \"Too many `#` symbols: raw strings may be delimited by up to 65535 `#` symbols\",\n-                    };\n-                };\n+            rustc_lexer::LiteralKind::CStr { terminated } => {\n+                if !terminated {\n+                    err = \"Missing trailing `\\\"` symbol to terminate the string literal\";\n+                }\n                 STRING\n             }\n-            rustc_lexer::LiteralKind::RawByteStr { err: raw_str_err, .. } => {\n-                if let Some(raw_str_err) = raw_str_err {\n-                    err = match raw_str_err {\n-                        rustc_lexer::RawStrError::InvalidStarter { .. } => \"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\",\n-                        rustc_lexer::RawStrError::NoTerminator { expected, found, .. } => if expected == found {\n-                            \"Missing trailing `\\\"` to terminate the raw byte string literal\"\n-                        } else {\n-                            \"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"\n-                        },\n-                        rustc_lexer::RawStrError::TooManyDelimiters { .. } => \"Too many `#` symbols: raw byte strings may be delimited by up to 65535 `#` symbols\",\n-                    };\n-                };\n-\n+            rustc_lexer::LiteralKind::RawStr { n_hashes } => {\n+                if n_hashes.is_none() {\n+                    err = \"Invalid raw string literal\";\n+                }\n+                STRING\n+            }\n+            rustc_lexer::LiteralKind::RawByteStr { n_hashes } => {\n+                if n_hashes.is_none() {\n+                    err = \"Invalid raw string literal\";\n+                }\n                 BYTE_STRING\n             }\n+            rustc_lexer::LiteralKind::RawCStr { n_hashes } => {\n+                if n_hashes.is_none() {\n+                    err = \"Invalid raw string literal\";\n+                }\n+                STRING\n+            }\n         };\n \n         let err = if err.is_empty() { None } else { Some(err) };"}, {"sha": "a8fbcfacf7ece82712eb281440dbc80e1c4e92ea", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -117,6 +117,7 @@ pub enum SyntaxKind {\n     BYTE,\n     STRING,\n     BYTE_STRING,\n+    C_STRING,\n     ERROR,\n     IDENT,\n     WHITESPACE,\n@@ -379,7 +380,7 @@ impl SyntaxKind {\n         )\n     }\n     pub fn is_literal(self) -> bool {\n-        matches!(self, INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING)\n+        matches!(self, INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING | C_STRING)\n     }\n     pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n         let kw = match ident {"}, {"sha": "cab02d38af2edb783db5f0d1fb8b17a3b453b207", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_byte_string_at_eof.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_at_eof.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_at_eof.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_at_eof.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-BYTE_STRING \"br##\\\"\" error: Missing trailing `\"` with `#` symbols to terminate the raw byte string literal\n+BYTE_STRING \"br##\\\"\" error: Invalid raw string literal"}, {"sha": "0486a1e8e1d2321a108610e54ec25850ce5e315e", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_ascii_escape.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_ascii_escape.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_ascii_escape.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_ascii_escape.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-BYTE_STRING \"br##\\\"\\\\x7f\" error: Missing trailing `\"` with `#` symbols to terminate the raw byte string literal\n+BYTE_STRING \"br##\\\"\\\\x7f\" error: Invalid raw string literal"}, {"sha": "41e3455c1f3f8c0a506f62aa938bb69fd7d64e8b", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_ferris.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_ferris.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_ferris.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_ferris.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-BYTE_STRING \"br##\\\"\ud83e\udd80\" error: Missing trailing `\"` with `#` symbols to terminate the raw byte string literal\n+BYTE_STRING \"br##\\\"\ud83e\udd80\" error: Invalid raw string literal"}, {"sha": "a11208a81fe8d70263d6ae528409f7df72c41ba5", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_slash.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_slash.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_slash.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_slash.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-BYTE_STRING \"br##\\\"\\\\\" error: Missing trailing `\"` with `#` symbols to terminate the raw byte string literal\n+BYTE_STRING \"br##\\\"\\\\\" error: Invalid raw string literal"}, {"sha": "10a47ab844757313df88e8daa47417c2dff70c4b", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_slash_n.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_slash_n.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_slash_n.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_slash_n.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-BYTE_STRING \"br##\\\"\\\\n\" error: Missing trailing `\"` with `#` symbols to terminate the raw byte string literal\n+BYTE_STRING \"br##\\\"\\\\n\" error: Invalid raw string literal"}, {"sha": "b41ea3a1701555c81976d2ae339e8baa7c99f64e", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_space.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_space.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_space.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_space.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-BYTE_STRING \"br##\\\" \" error: Missing trailing `\"` with `#` symbols to terminate the raw byte string literal\n+BYTE_STRING \"br##\\\" \" error: Invalid raw string literal"}, {"sha": "63b8a5af80907a3f8147f41d84af8cada5445e84", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_byte_string_with_unicode_escape.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_unicode_escape.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_unicode_escape.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_byte_string_with_unicode_escape.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-BYTE_STRING \"br##\\\"\\\\u{20AA}\" error: Missing trailing `\"` with `#` symbols to terminate the raw byte string literal\n+BYTE_STRING \"br##\\\"\\\\u{20AA}\" error: Invalid raw string literal"}, {"sha": "096bb940315276f7961635c619fe80a569037e59", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_string_at_eof.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_at_eof.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_at_eof.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_at_eof.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-STRING \"r##\\\"\" error: Missing trailing `\"` with `#` symbols to terminate the raw string literal\n+STRING \"r##\\\"\" error: Invalid raw string literal"}, {"sha": "f0ad200fea5a5e0930cb1b7d9c94bc2e74610e0d", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_string_with_ascii_escape.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_ascii_escape.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_ascii_escape.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_ascii_escape.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-STRING \"r##\\\"\\\\x7f\" error: Missing trailing `\"` with `#` symbols to terminate the raw string literal\n+STRING \"r##\\\"\\\\x7f\" error: Invalid raw string literal"}, {"sha": "bc5996d1e67bac7e0eaf0b2bb1730c96b1a26cd7", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_string_with_ferris.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_ferris.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_ferris.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_ferris.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-STRING \"r##\\\"\ud83e\udd80\" error: Missing trailing `\"` with `#` symbols to terminate the raw string literal\n+STRING \"r##\\\"\ud83e\udd80\" error: Invalid raw string literal"}, {"sha": "b48ec5ddabbe532eb59ceaf498dfdbb0e84c3e60", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_string_with_slash.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_slash.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_slash.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_slash.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-STRING \"r##\\\"\\\\\" error: Missing trailing `\"` with `#` symbols to terminate the raw string literal\n+STRING \"r##\\\"\\\\\" error: Invalid raw string literal"}, {"sha": "9f32f677766c4c53fce40c721f60347edb759525", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_string_with_slash_n.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_slash_n.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_slash_n.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_slash_n.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-STRING \"r##\\\"\\\\n\" error: Missing trailing `\"` with `#` symbols to terminate the raw string literal\n+STRING \"r##\\\"\\\\n\" error: Invalid raw string literal"}, {"sha": "2804a43cf1feef76a13c7e673dbe0d78c53b0ea3", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_string_with_space.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_space.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_space.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_space.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-STRING \"r##\\\" \" error: Missing trailing `\"` with `#` symbols to terminate the raw string literal\n+STRING \"r##\\\" \" error: Invalid raw string literal"}, {"sha": "eb0a2d2da10afd6a8d614c1b7a5f820d622a2eb8", "filename": "crates/parser/test_data/lexer/err/unclosed_raw_string_with_unicode_escape.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_unicode_escape.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_unicode_escape.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funclosed_raw_string_with_unicode_escape.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-STRING \"r##\\\"\\\\u{20AA}\" error: Missing trailing `\"` with `#` symbols to terminate the raw string literal\n+STRING \"r##\\\"\\\\u{20AA}\" error: Invalid raw string literal"}, {"sha": "52a7f03b6f5598fca533d71668eb7de5edc4f0ff", "filename": "crates/parser/test_data/lexer/err/unstarted_raw_byte_string_at_eof.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_byte_string_at_eof.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_byte_string_at_eof.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_byte_string_at_eof.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-BYTE_STRING \"br##\" error: Missing `\"` symbol after `#` symbols to begin the raw byte string literal\n+BYTE_STRING \"br##\" error: Invalid raw string literal"}, {"sha": "da5550d4cc186d735a9fa4bb31c4ef314df17f3b", "filename": "crates/parser/test_data/lexer/err/unstarted_raw_byte_string_with_ascii.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_byte_string_with_ascii.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_byte_string_with_ascii.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_byte_string_with_ascii.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1,4 +1,4 @@\n-BYTE_STRING \"br## \" error: Missing `\"` symbol after `#` symbols to begin the raw byte string literal\n+BYTE_STRING \"br## \" error: Invalid raw string literal\n IDENT \"I\"\n WHITESPACE \" \"\n IDENT \"lack\""}, {"sha": "50b962e77a480802bf7e0e40a7a2ac1025e1dcb2", "filename": "crates/parser/test_data/lexer/err/unstarted_raw_string_at_eof.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_string_at_eof.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_string_at_eof.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_string_at_eof.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1 +1 @@\n-STRING \"r##\" error: Missing `\"` symbol after `#` symbols to begin the raw string literal\n+STRING \"r##\" error: Invalid raw string literal"}, {"sha": "1f484299af156e28336a856b5761c9dbe2f5e1e2", "filename": "crates/parser/test_data/lexer/err/unstarted_raw_string_with_ascii.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_string_with_ascii.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_string_with_ascii.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Flexer%2Ferr%2Funstarted_raw_string_with_ascii.rast?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -1,4 +1,4 @@\n-STRING \"r## \" error: Missing `\"` symbol after `#` symbols to begin the raw string literal\n+STRING \"r## \" error: Invalid raw string literal\n IDENT \"I\"\n WHITESPACE \" \"\n IDENT \"lack\""}, {"sha": "fb38d25ab541e46fe298ed7cc277ef8d64b4878f", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -17,13 +17,14 @@ cov-mark = \"2.0.0-pre.1\"\n either = \"1.7.0\"\n itertools = \"0.10.5\"\n rowan = \"0.15.11\"\n-rustc_lexer = { version = \"727.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n once_cell = \"1.17.0\"\n indexmap = \"1.9.1\"\n smol_str.workspace = true\n triomphe.workspace = true\n \n+rustc_lexer.workspace = true\n+\n parser.workspace = true\n profile.workspace = true\n stdx.workspace = true"}, {"sha": "c5783b91a0fdb8c2b7113a4efa7db0104b2cb76d", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -71,7 +71,7 @@ pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {\n         \"super\", \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\", \"yield\",\n     ],\n     contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\", \"yeet\"],\n-    literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n+    literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\", \"C_STRING\"],\n     tokens: &[\"ERROR\", \"IDENT\", \"WHITESPACE\", \"LIFETIME_IDENT\", \"COMMENT\", \"SHEBANG\"],\n     nodes: &[\n         \"SOURCE_FILE\","}, {"sha": "089ad74dadc137d887ace44bd3793c9dde445713", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=e4977e74de2bc9bf0913a56ceb1ec3b5aa5182ec", "patch": "@@ -5,7 +5,7 @@\n mod block;\n \n use rowan::Direction;\n-use rustc_lexer::unescape::{self, unescape_byte, unescape_char, unescape_literal, Mode};\n+use rustc_lexer::unescape::{self, unescape_literal, Mode};\n \n use crate::{\n     algo,\n@@ -44,7 +44,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n     errors\n }\n \n-fn rustc_unescape_error_to_string(err: unescape::EscapeError) -> &'static str {\n+fn rustc_unescape_error_to_string(err: unescape::EscapeError) -> (&'static str, bool) {\n     use unescape::EscapeError as EE;\n \n     #[rustfmt::skip]\n@@ -103,12 +103,15 @@ fn rustc_unescape_error_to_string(err: unescape::EscapeError) -> &'static str {\n         EE::UnicodeEscapeInByte => {\n             \"Byte literals must not contain unicode escapes\"\n         }\n-        EE::NonAsciiCharInByte | EE::NonAsciiCharInByteString => {\n+        EE::NonAsciiCharInByte  => {\n             \"Byte literals must not contain non-ASCII characters\"\n         }\n+        EE::UnskippedWhitespaceWarning => \"Whitespace after this escape is not skipped\",\n+        EE::MultipleSkippedLinesWarning => \"Multiple lines are skipped by this escape\",\n+\n     };\n \n-    err_message\n+    (err_message, err.is_fatal())\n }\n \n fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n@@ -121,9 +124,13 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n     let text = token.text();\n \n     // FIXME: lift this lambda refactor to `fn` (https://github.com/rust-lang/rust-analyzer/pull/2834#discussion_r366199205)\n-    let mut push_err = |prefix_len, (off, err): (usize, unescape::EscapeError)| {\n+    let mut push_err = |prefix_len, off, err: unescape::EscapeError| {\n         let off = token.text_range().start() + TextSize::try_from(off + prefix_len).unwrap();\n-        acc.push(SyntaxError::new_at_offset(rustc_unescape_error_to_string(err), off));\n+        let (message, is_err) = rustc_unescape_error_to_string(err);\n+        // FIXME: Emit lexer warnings\n+        if is_err {\n+            acc.push(SyntaxError::new_at_offset(message, off));\n+        }\n     };\n \n     match literal.kind() {\n@@ -132,7 +139,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                 if let Some(without_quotes) = unquote(text, 1, '\"') {\n                     unescape_literal(without_quotes, Mode::Str, &mut |range, char| {\n                         if let Err(err) = char {\n-                            push_err(1, (range.start, err));\n+                            push_err(1, range.start, err);\n                         }\n                     });\n                 }\n@@ -143,20 +150,28 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                 if let Some(without_quotes) = unquote(text, 2, '\"') {\n                     unescape_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n                         if let Err(err) = char {\n-                            push_err(2, (range.start, err));\n+                            push_err(1, range.start, err);\n                         }\n                     });\n                 }\n             }\n         }\n         ast::LiteralKind::Char(_) => {\n-            if let Some(Err(e)) = unquote(text, 1, '\\'').map(unescape_char) {\n-                push_err(1, e);\n+            if let Some(without_quotes) = unquote(text, 1, '\\'') {\n+                unescape_literal(without_quotes, Mode::Char, &mut |range, char| {\n+                    if let Err(err) = char {\n+                        push_err(1, range.start, err);\n+                    }\n+                });\n             }\n         }\n         ast::LiteralKind::Byte(_) => {\n-            if let Some(Err(e)) = unquote(text, 2, '\\'').map(unescape_byte) {\n-                push_err(2, e);\n+            if let Some(without_quotes) = unquote(text, 2, '\\'') {\n+                unescape_literal(without_quotes, Mode::Byte, &mut |range, char| {\n+                    if let Err(err) = char {\n+                        push_err(2, range.start, err);\n+                    }\n+                });\n             }\n         }\n         ast::LiteralKind::IntNumber(_)"}]}