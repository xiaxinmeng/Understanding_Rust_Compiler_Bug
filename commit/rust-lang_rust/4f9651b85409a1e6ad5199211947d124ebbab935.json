{"sha": "4f9651b85409a1e6ad5199211947d124ebbab935", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOTY1MWI4NTQwOWExZTZhZDUxOTkyMTE5NDdkMTI0ZWJiYWI5MzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T06:03:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-06T06:03:14Z"}, "message": "Rollup merge of #66139 - euclio:pluralize, r=nagisa\n\nuse American spelling for `pluralize!`", "tree": {"sha": "4d022868d407cf1bed36883037e4e97d1fa5094a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d022868d407cf1bed36883037e4e97d1fa5094a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f9651b85409a1e6ad5199211947d124ebbab935", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdwmIiCRBK7hj4Ov3rIwAAdHIIAJfk5ZpABKqQKhHTDhhYB8Fe\nm08feFtw9fpzJdvg1isIUiCK8vBy302T4CmsI4WMP8ND9nn8SmAYzxGV3q3Cwdov\nzhIvLgsad/F2imONB2mj+fhckjly/qaqr/9+FQHoFSaPuC5fq5PznnLGaCl+rIVS\nO89vI8hvAwxzzoFHOxfX5ycR8R/euEO/dWxzCAY/Xo7Peg0BBpxMn75vACpLkqgs\n6qG6i3rWjgBqNufozx5M4m85suFRtGb5sQN1qQzEFR4mLGgMQlB0cQLy+1/vsj+6\n+2J85NB0MDQcP+IRd7zBr6iDh7oIAZYoJkYPioBZtLaXLnncwUjJ33Rp2J4ZaWI=\n=Uk5u\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d022868d407cf1bed36883037e4e97d1fa5094a\nparent 7f7218fd2102a084b0fbfd08abe6e200c9da4409\nparent ad550b8ef32e336ad74a87669de041eba9f7d1c6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1573020194 +0100\ncommitter GitHub <noreply@github.com> 1573020194 +0100\n\nRollup merge of #66139 - euclio:pluralize, r=nagisa\n\nuse American spelling for `pluralize!`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9651b85409a1e6ad5199211947d124ebbab935", "html_url": "https://github.com/rust-lang/rust/commit/4f9651b85409a1e6ad5199211947d124ebbab935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f9651b85409a1e6ad5199211947d124ebbab935/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f7218fd2102a084b0fbfd08abe6e200c9da4409", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7218fd2102a084b0fbfd08abe6e200c9da4409", "html_url": "https://github.com/rust-lang/rust/commit/7f7218fd2102a084b0fbfd08abe6e200c9da4409"}, {"sha": "ad550b8ef32e336ad74a87669de041eba9f7d1c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad550b8ef32e336ad74a87669de041eba9f7d1c6", "html_url": "https://github.com/rust-lang/rust/commit/ad550b8ef32e336ad74a87669de041eba9f7d1c6"}], "stats": {"total": 114, "additions": 57, "deletions": 57}, "files": [{"sha": "65777fe78db3903232c0e13898dcab39b88f200a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -7,7 +7,7 @@\n use crate::lint::{LintPass, LateLintPass, LintArray, FutureIncompatibleInfo};\n use crate::middle::stability;\n use crate::session::Session;\n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use syntax::ast;\n use syntax::edition::Edition;\n use syntax::source_map::Span;\n@@ -651,7 +651,7 @@ pub(crate) fn add_elided_lifetime_in_path_suggestion(\n     };\n     db.span_suggestion(\n         replace_span,\n-        &format!(\"indicate the anonymous lifetime{}\", pluralise!(n)),\n+        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n         suggestion,\n         Applicability::MachineApplicable\n     );"}, {"sha": "488d6332f7e39fdb6c5a6b8f8863ca4e316848d9", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -17,7 +17,7 @@ use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use crate::rustc::lint;\n use crate::session::Session;\n use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use rustc_macros::HashStable;\n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -3044,7 +3044,7 @@ pub fn report_missing_lifetime_specifiers(\n         span,\n         E0106,\n         \"missing lifetime specifier{}\",\n-        pluralise!(count)\n+        pluralize!(count)\n     )\n }\n "}, {"sha": "fe18a14d890586c17595a823ef4da7b7db195f7a", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -33,7 +33,7 @@ use crate::ty::subst::Subst;\n use crate::ty::SubtypePredicate;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use std::fmt;\n use syntax::ast;\n use syntax::symbol::{sym, kw};\n@@ -1553,7 +1553,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 _ => format!(\"{} {}argument{}\",\n                              arg_length,\n                              if distinct && arg_length > 1 { \"distinct \" } else { \"\" },\n-                             pluralise!(arg_length))\n+                             pluralize!(arg_length))\n             }\n         };\n "}, {"sha": "723ed6b03dadc1294a84f8c6a2c08342009fd542", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -4,7 +4,7 @@ use std::borrow::Cow;\n use std::fmt;\n use rustc_target::spec::abi;\n use syntax::ast;\n-use syntax::errors::pluralise;\n+use syntax::errors::pluralize;\n use errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n \n@@ -100,17 +100,17 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 write!(f, \"expected a tuple with {} element{}, \\\n                            found one with {} element{}\",\n                        values.expected,\n-                       pluralise!(values.expected),\n+                       pluralize!(values.expected),\n                        values.found,\n-                       pluralise!(values.found))\n+                       pluralize!(values.found))\n             }\n             FixedArraySize(values) => {\n                 write!(f, \"expected an array with a fixed size of {} element{}, \\\n                            found one with {} element{}\",\n                        values.expected,\n-                       pluralise!(values.expected),\n+                       pluralize!(values.expected),\n                        values.found,\n-                       pluralise!(values.found))\n+                       pluralize!(values.found))\n             }\n             ArgCount => {\n                 write!(f, \"incorrect number of function parameters\")\n@@ -165,7 +165,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             ProjectionBoundsLength(ref values) => {\n                 write!(f, \"expected {} associated type binding{}, found {}\",\n                        values.expected,\n-                       pluralise!(values.expected),\n+                       pluralize!(values.expected),\n                        values.found)\n             },\n             ExistentialMismatch(ref values) => {\n@@ -196,7 +196,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 let n = tcx.lift(&n).unwrap();\n                 match n.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n                     Some(n) => {\n-                        format!(\"array of {} element{}\", n, pluralise!(n)).into()\n+                        format!(\"array of {} element{}\", n, pluralize!(n)).into()\n                     }\n                     None => \"array\".into(),\n                 }"}, {"sha": "291920f17f66d7fa1d94ab3c5c9a5fec0e934e15", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -12,7 +12,7 @@ use Destination::*;\n use syntax_pos::{SourceFile, Span, MultiSpan};\n \n use crate::{\n-    Level, CodeSuggestion, Diagnostic, SubDiagnostic, pluralise,\n+    Level, CodeSuggestion, Diagnostic, SubDiagnostic, pluralize,\n     SuggestionStyle, SourceMapper, SourceMapperDyn, DiagnosticId,\n };\n use crate::Level::Error;\n@@ -1581,7 +1581,7 @@ impl EmitterWriter {\n         }\n         if suggestions.len() > MAX_SUGGESTIONS {\n             let others = suggestions.len() - MAX_SUGGESTIONS;\n-            let msg = format!(\"and {} other candidate{}\", others, pluralise!(others));\n+            let msg = format!(\"and {} other candidate{}\", others, pluralize!(others));\n             buffer.puts(row_num, max_line_num_len + 3, &msg, Style::NoStyle);\n         } else if notice_capitalization {\n             let msg = \"notice the capitalization difference\";"}, {"sha": "67c180a05e9211bb7ed231f13393a5e90fb86a15", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -1027,7 +1027,7 @@ impl Level {\n }\n \n #[macro_export]\n-macro_rules! pluralise {\n+macro_rules! pluralize {\n     ($x:expr) => {\n         if $x != 1 { \"s\" } else { \"\" }\n     };"}, {"sha": "642b8e3279d6655b9707475d7e50cd58a510d82d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -10,7 +10,7 @@ use lint::{LintPass, EarlyLintPass, LateLintPass};\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::errors::{Applicability, pluralise};\n+use syntax::errors::{Applicability, pluralize};\n use syntax::feature_gate::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n@@ -144,7 +144,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 return true;\n             }\n \n-            let plural_suffix = pluralise!(plural_len);\n+            let plural_suffix = pluralize!(plural_len);\n \n             match ty.kind {\n                 ty::Adt(..) if ty.is_box() => {"}, {"sha": "29423536e653ad2d3cb7050ae01f95b7c92eb7c5", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -548,7 +548,7 @@ fn joined_uncovered_patterns(witnesses: &[super::Pat<'_>]) -> String {\n }\n \n fn pattern_not_covered_label(witnesses: &[super::Pat<'_>], joined_patterns: &str) -> String {\n-    format!(\"pattern{} {} not covered\", rustc_errors::pluralise!(witnesses.len()), joined_patterns)\n+    format!(\"pattern{} {} not covered\", rustc_errors::pluralize!(witnesses.len()), joined_patterns)\n }\n \n /// Point at the definition of non-covered `enum` variants."}, {"sha": "0624b5eedfb8aaa0660868d5dcd2d815c6cd3b10", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -26,7 +26,7 @@\n use crate::Resolver;\n use crate::resolve_imports::ImportDirectiveSubclass;\n \n-use errors::pluralise;\n+use errors::pluralize;\n \n use rustc::util::nodemap::NodeMap;\n use rustc::{lint, ty};\n@@ -297,7 +297,7 @@ impl Resolver<'_> {\n                 }).collect::<Vec<String>>();\n             span_snippets.sort();\n             let msg = format!(\"unused import{}{}\",\n-                            pluralise!(len),\n+                            pluralize!(len),\n                             if !span_snippets.is_empty() {\n                                 format!(\": {}\", span_snippets.join(\", \"))\n                             } else {"}, {"sha": "c06be18dc2c180c2bb3a4fd26843c9fbd96c9395", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -11,7 +11,7 @@ use crate::{Resolver, ResolutionError, BindingKey, Segment, ModuleKind};\n use crate::{names_to_string, module_to_string};\n use crate::diagnostics::Suggestion;\n \n-use errors::{Applicability, pluralise};\n+use errors::{Applicability, pluralize};\n \n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n@@ -730,7 +730,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n             let msg = format!(\n                 \"unresolved import{} {}\",\n-                pluralise!(paths.len()),\n+                pluralize!(paths.len()),\n                 paths.join(\", \"),\n             );\n "}, {"sha": "5c66151338272f9a7b0402a686ba088cfba5c07a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -23,7 +23,7 @@ use rustc_target::spec::abi;\n use crate::require_c_abi_if_c_variadic;\n use smallvec::SmallVec;\n use syntax::ast;\n-use syntax::errors::pluralise;\n+use syntax::errors::pluralize;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::symbol::sym;\n@@ -392,7 +392,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     quantifier,\n                     bound,\n                     kind,\n-                    pluralise!(bound),\n+                    pluralize!(bound),\n                 ))\n             };\n \n@@ -1360,7 +1360,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 span,\n                 E0191,\n                 \"the value of the associated type{} {} must be specified\",\n-                pluralise!(associated_types.len()),\n+                pluralize!(associated_types.len()),\n                 names,\n             );\n             let (suggest, potential_assoc_types_spans) ="}, {"sha": "af0943db4cc9e2293733c744b596c873d93cb91c", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -10,7 +10,7 @@ use rustc::util::common::ErrorReported;\n use errors::{Applicability, DiagnosticId};\n \n use syntax_pos::Span;\n-use syntax::errors::pluralise;\n+use syntax::errors::pluralize;\n \n use super::{Inherited, FnCtxt, potentially_plural_count};\n \n@@ -649,9 +649,9 @@ fn compare_number_of_generics<'tcx>(\n                      declaration has {} {kind} parameter{}\",\n                     trait_.ident,\n                     impl_count,\n-                    pluralise!(impl_count),\n+                    pluralize!(impl_count),\n                     trait_count,\n-                    pluralise!(trait_count),\n+                    pluralize!(trait_count),\n                     kind = kind,\n                 ),\n                 DiagnosticId::Error(\"E0049\".into()),\n@@ -666,7 +666,7 @@ fn compare_number_of_generics<'tcx>(\n                         \"expected {} {} parameter{}\",\n                         trait_count,\n                         kind,\n-                        pluralise!(trait_count),\n+                        pluralize!(trait_count),\n                     ));\n                 }\n                 for span in spans {\n@@ -681,7 +681,7 @@ fn compare_number_of_generics<'tcx>(\n                     \"found {} {} parameter{}{}\",\n                     impl_count,\n                     kind,\n-                    pluralise!(impl_count),\n+                    pluralize!(impl_count),\n                     suffix.unwrap_or_else(|| String::new()),\n                 ));\n             }"}, {"sha": "35870abbaefbd7acaf4cbe8440569dc67d2e7171", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -17,7 +17,7 @@ use crate::util::common::ErrorReported;\n use crate::util::nodemap::FxHashMap;\n use crate::astconv::AstConv as _;\n \n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use syntax_pos::hygiene::DesugaringKind;\n use syntax::ast;\n use syntax::symbol::{Symbol, kw, sym};\n@@ -1218,7 +1218,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             struct_span_err!(tcx.sess, span, E0063,\n                              \"missing field{} {}{} in initializer of `{}`\",\n-                             pluralise!(remaining_fields.len()),\n+                             pluralize!(remaining_fields.len()),\n                              remaining_fields_names,\n                              truncated_fields_error,\n                              adt_ty)"}, {"sha": "0b1657c4494f5ff14e1b0116438e0fb07b348c3c", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -5,7 +5,7 @@ use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n use crate::util::nodemap::FxHashSet;\n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use rustc::hir::{self, ExprKind, Node, QPath};\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n@@ -601,7 +601,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"{an}other candidate{s} {were} found in the following trait{s}, perhaps \\\n                          add a `use` for {one_of_them}:\",\n                         an = if candidates.len() == 1 {\"an\" } else { \"\" },\n-                        s = pluralise!(candidates.len()),\n+                        s = pluralize!(candidates.len()),\n                         were = if candidates.len() == 1 { \"was\" } else { \"were\" },\n                         one_of_them = if candidates.len() == 1 {\n                             \"it\""}, {"sha": "26f040810462f91405910bc1ae27065ce74563c7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -88,7 +88,7 @@ pub mod intrinsic;\n mod op;\n \n use crate::astconv::{AstConv, PathSeg};\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralize};\n use rustc::hir::{self, ExprKind, GenericArg, ItemKind, Node, PatKind, QPath};\n use rustc::hir::def::{CtorOf, Res, DefKind};\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -5162,5 +5162,5 @@ fn fatally_break_rust(sess: &Session) {\n }\n \n fn potentially_plural_count(count: usize, word: &str) -> String {\n-    format!(\"{} {}{}\", count, word, pluralise!(count))\n+    format!(\"{} {}{}\", count, word, pluralize!(count))\n }"}, {"sha": "a520ae13c58fbfd2a39d3b6c7cab1ed0bf0046e9", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -1,6 +1,6 @@\n use crate::check::FnCtxt;\n use crate::util::nodemap::FxHashMap;\n-use errors::{Applicability, DiagnosticBuilder, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, pluralize};\n use rustc::hir::{self, PatKind, Pat, HirId};\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n@@ -703,8 +703,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fields: &[ty::FieldDef],\n         expected: Ty<'tcx>\n     ) {\n-        let subpats_ending = pluralise!(subpats.len());\n-        let fields_ending = pluralise!(fields.len());\n+        let subpats_ending = pluralize!(subpats.len());\n+        let fields_ending = pluralize!(fields.len());\n         let res_span = self.tcx.def_span(res.def_id());\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n@@ -1174,10 +1174,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0527,\n             \"pattern requires {} element{} but array has {}\",\n             min_len,\n-            pluralise!(min_len),\n+            pluralize!(min_len),\n             size,\n         )\n-        .span_label(span, format!(\"expected {} element{}\", size, pluralise!(size)))\n+        .span_label(span, format!(\"expected {} element{}\", size, pluralize!(size)))\n         .emit();\n     }\n \n@@ -1188,14 +1188,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0528,\n             \"pattern requires at least {} element{} but array has {}\",\n             min_len,\n-            pluralise!(min_len),\n+            pluralize!(min_len),\n             size,\n         ).span_label(\n             span,\n             format!(\n                 \"pattern cannot match array of {} element{}\",\n                 size,\n-                pluralise!(size),\n+                pluralize!(size),\n             ),\n         ).emit();\n     }"}, {"sha": "49a517a5c44daf4199ec57bdc0ff005eb6973ea6", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -12,7 +12,7 @@ use crate::ptr::P;\n use crate::symbol::{kw, sym};\n use crate::ThinVec;\n use crate::util::parser::AssocOp;\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralise};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralize};\n use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n@@ -515,11 +515,11 @@ impl<'a> Parser<'a> {\n             self.diagnostic()\n                 .struct_span_err(\n                     span,\n-                    &format!(\"unmatched angle bracket{}\", pluralise!(total_num_of_gt)),\n+                    &format!(\"unmatched angle bracket{}\", pluralize!(total_num_of_gt)),\n                 )\n                 .span_suggestion(\n                     span,\n-                    &format!(\"remove extra angle bracket{}\", pluralise!(total_num_of_gt)),\n+                    &format!(\"remove extra angle bracket{}\", pluralize!(total_num_of_gt)),\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 )"}, {"sha": "f9944e36e2f6051f51354a8862b3c5f5a02e11d1", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -9,7 +9,7 @@ use crate::symbol::kw;\n \n use std::mem;\n use log::debug;\n-use errors::{Applicability, pluralise};\n+use errors::{Applicability, pluralize};\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]\n@@ -368,14 +368,14 @@ impl<'a> Parser<'a> {\n                         span,\n                         &format!(\n                             \"unmatched angle bracket{}\",\n-                            pluralise!(snapshot.unmatched_angle_bracket_count)\n+                            pluralize!(snapshot.unmatched_angle_bracket_count)\n                         ),\n                     )\n                     .span_suggestion(\n                         span,\n                         &format!(\n                             \"remove extra angle bracket{}\",\n-                            pluralise!(snapshot.unmatched_angle_bracket_count)\n+                            pluralize!(snapshot.unmatched_angle_bracket_count)\n                         ),\n                         String::new(),\n                         Applicability::MachineApplicable,"}, {"sha": "b770b90705cbe614559bbbd96af774d960320438", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -10,7 +10,7 @@ use crate::parse::token::{self, Token};\n use crate::source_map::Span;\n use crate::symbol::{kw};\n \n-use errors::{Applicability, pluralise};\n+use errors::{Applicability, pluralize};\n \n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`.\n@@ -412,7 +412,7 @@ impl<'a> Parser<'a> {\n                 }\n                 err.span_suggestion_hidden(\n                     bound_list,\n-                    &format!(\"remove the trait bound{}\", pluralise!(negative_bounds_len)),\n+                    &format!(\"remove the trait bound{}\", pluralize!(negative_bounds_len)),\n                     new_bound_list,\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "6f060103ef48ecacb6c01a9078aa04662057f48c", "filename": "src/libsyntax_expand/mbe/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -9,7 +9,7 @@ use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n \n-use errors::pluralise;\n+use errors::pluralize;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::hygiene::{ExpnId, Transparency};\n@@ -350,10 +350,10 @@ impl LockstepIterSize {\n                         \"meta-variable `{}` repeats {} time{}, but `{}` repeats {} time{}\",\n                         l_id,\n                         l_len,\n-                        pluralise!(l_len),\n+                        pluralize!(l_len),\n                         r_id,\n                         r_len,\n-                        pluralise!(r_len),\n+                        pluralize!(r_len),\n                     );\n                     LockstepIterSize::Contradiction(msg)\n                 }"}, {"sha": "314c2eefd4c74cf31579a31efb8ebf75ccf3c1cc", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f9651b85409a1e6ad5199211947d124ebbab935/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=4f9651b85409a1e6ad5199211947d124ebbab935", "patch": "@@ -5,7 +5,7 @@ use fmt_macros as parse;\n \n use errors::DiagnosticBuilder;\n use errors::Applicability;\n-use errors::pluralise;\n+use errors::pluralize;\n \n use syntax::ast;\n use syntax_expand::base::{self, *};\n@@ -300,7 +300,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 &format!(\n                     \"{} positional argument{} in format string, but {}\",\n                     count,\n-                    pluralise!(count),\n+                    pluralize!(count),\n                     self.describe_num_args(),\n                 ),\n             );"}]}