{"sha": "fe11483afa90628106971993049b4fd2f0dae6fc", "node_id": "C_kwDOAAsO6NoAKGZlMTE0ODNhZmE5MDYyODEwNjk3MTk5MzA0OWI0ZmQyZjBkYWU2ZmM", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-07-29T17:39:56Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-10-01T17:08:13Z"}, "message": "Add functions to add unsigned and signed integers", "tree": {"sha": "e5d97e0cba9ae2501e83360b8341f9357aab4652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5d97e0cba9ae2501e83360b8341f9357aab4652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe11483afa90628106971993049b4fd2f0dae6fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe11483afa90628106971993049b4fd2f0dae6fc", "html_url": "https://github.com/rust-lang/rust/commit/fe11483afa90628106971993049b4fd2f0dae6fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe11483afa90628106971993049b4fd2f0dae6fc/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed937594d3912ced11f6f35a90bb8bf591909d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed937594d3912ced11f6f35a90bb8bf591909d2a", "html_url": "https://github.com/rust-lang/rust/commit/ed937594d3912ced11f6f35a90bb8bf591909d2a"}], "stats": {"total": 127, "additions": 112, "deletions": 15}, "files": [{"sha": "2e419625d14f63b45473033dd5a4e4b58b161cb8", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe11483afa90628106971993049b4fd2f0dae6fc/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe11483afa90628106971993049b4fd2f0dae6fc/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=fe11483afa90628106971993049b4fd2f0dae6fc", "patch": "@@ -159,6 +159,7 @@\n #![feature(trait_alias)]\n #![feature(transparent_unions)]\n #![feature(try_blocks)]\n+#![feature(uint_add_signed)]\n #![feature(unboxed_closures)]\n #![feature(unsized_fn_params)]\n //"}, {"sha": "8966a9c11d2b48b7e9c2dd159db56baa4607e26b", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe11483afa90628106971993049b4fd2f0dae6fc/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe11483afa90628106971993049b4fd2f0dae6fc/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=fe11483afa90628106971993049b4fd2f0dae6fc", "patch": "@@ -245,7 +245,7 @@ const ASCII_CASE_MASK: u8 = 0b0010_0000;\n #[lang = \"u8\"]\n impl u8 {\n     widening_impl! { u8, u16, 8 }\n-    uint_impl! { u8, u8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n+    uint_impl! { u8, u8, i8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n     \"[0x12]\", \"\", \"\" }\n \n     /// Checks if the value is within the ASCII range.\n@@ -779,21 +779,21 @@ impl u8 {\n #[lang = \"u16\"]\n impl u16 {\n     widening_impl! { u16, u32, 16 }\n-    uint_impl! { u16, u16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n+    uint_impl! { u16, u16, i16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n     widening_impl! { u32, u64, 32 }\n-    uint_impl! { u32, u32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n+    uint_impl! { u32, u32, i32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n     widening_impl! { u64, u128, 64 }\n-    uint_impl! { u64, u64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n+    uint_impl! { u64, u64, i64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n@@ -802,7 +802,7 @@ impl u64 {\n \n #[lang = \"u128\"]\n impl u128 {\n-    uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, 16,\n+    uint_impl! { u128, u128, i128, 128, 340282366920938463463374607431768211455, 16,\n     \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n     \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n     \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n@@ -816,15 +816,15 @@ impl u128 {\n #[lang = \"usize\"]\n impl usize {\n     widening_impl! { usize, u32, 16 }\n-    uint_impl! { usize, u16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n+    uint_impl! { usize, u16, isize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n     widening_impl! { usize, u64, 32 }\n-    uint_impl! { usize, u32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n+    uint_impl! { usize, u32, isize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n@@ -833,7 +833,7 @@ impl usize {\n #[lang = \"usize\"]\n impl usize {\n     widening_impl! { usize, u128, 64 }\n-    uint_impl! { usize, u64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n+    uint_impl! { usize, u64, isize, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n      \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\","}, {"sha": "67d72a171350bae0f31a4219ed54fea85e8fd17a", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/fe11483afa90628106971993049b4fd2f0dae6fc/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe11483afa90628106971993049b4fd2f0dae6fc/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=fe11483afa90628106971993049b4fd2f0dae6fc", "patch": "@@ -1,5 +1,5 @@\n macro_rules! uint_impl {\n-    ($SelfT:ty, $ActualT:ident, $BITS:expr, $MaxV:expr,\n+    ($SelfT:ty, $ActualT:ident, $SignedT:ident, $BITS:expr, $MaxV:expr,\n         $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n         $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n         $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n@@ -442,6 +442,29 @@ macro_rules! uint_impl {\n             unsafe { intrinsics::unchecked_add(self, rhs) }\n         }\n \n+        /// Checked addition with a signed integer. Computes `self + rhs`,\n+        /// returning `None` if overflow occurred.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(uint_add_signed)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_add_signed(2), Some(3));\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_add_signed(-2), None);\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\")]\n+        /// ```\n+        #[unstable(feature = \"uint_add_signed\", issue = \"none\")]\n+        #[rustc_const_unstable(feature = \"uint_add_signed\", issue = \"none\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn checked_add_signed(self, rhs: $SignedT) -> Option<Self> {\n+            let (a, b) = self.overflowing_add_signed(rhs);\n+            if unlikely!(b) {None} else {Some(a)}\n+        }\n+\n         /// Checked integer subtraction. Computes `self - rhs`, returning\n         /// `None` if overflow occurred.\n         ///\n@@ -995,6 +1018,32 @@ macro_rules! uint_impl {\n             intrinsics::saturating_add(self, rhs)\n         }\n \n+        /// Saturating addition with a signed integer. Computes `self + rhs`,\n+        /// saturating at the numeric bounds instead of overflowing.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(uint_add_signed)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".saturating_add_signed(2), 3);\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".saturating_add_signed(-2), 0);\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).saturating_add_signed(4), \", stringify!($SelfT), \"::MAX);\")]\n+        /// ```\n+        #[unstable(feature = \"uint_add_signed\", issue = \"none\")]\n+        #[rustc_const_unstable(feature = \"uint_add_signed\", issue = \"none\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn saturating_add_signed(self, rhs: $SignedT) -> Self {\n+            if rhs >= 0 {\n+                self.saturating_add(rhs as Self)\n+            } else {\n+                self.saturating_sub(rhs.unsigned_abs())\n+            }\n+        }\n+\n         /// Saturating integer subtraction. Computes `self - rhs`, saturating\n         /// at the numeric bounds instead of overflowing.\n         ///\n@@ -1111,6 +1160,28 @@ macro_rules! uint_impl {\n             intrinsics::wrapping_add(self, rhs)\n         }\n \n+        /// Wrapping (modular) addition with a signed integer. Computes\n+        /// `self + rhs`, wrapping around at the boundary of the type.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(uint_add_signed)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".wrapping_add_signed(2), 3);\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".wrapping_add_signed(-2), \", stringify!($SelfT), \"::MAX);\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).wrapping_add_signed(4), 1);\")]\n+        /// ```\n+        #[unstable(feature = \"uint_add_signed\", issue = \"none\")]\n+        #[rustc_const_unstable(feature = \"uint_add_signed\", issue = \"none\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn wrapping_add_signed(self, rhs: $SignedT) -> Self {\n+            self.wrapping_add(rhs as Self)\n+        }\n+\n         /// Wrapping (modular) subtraction. Computes `self - rhs`,\n         /// wrapping around at the boundary of the type.\n         ///\n@@ -1435,6 +1506,35 @@ macro_rules! uint_impl {\n             (c, b | d)\n         }\n \n+        /// Calculates `self` + `rhs` with a signed `rhs`\n+        ///\n+        /// Returns a tuple of the addition along with a boolean indicating\n+        /// whether an arithmetic overflow would occur. If an overflow would\n+        /// have occurred then the wrapped value is returned.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// # #![feature(uint_add_signed)]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".overflowing_add_signed(2), (3, false));\")]\n+        #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".overflowing_add_signed(-2), (\", stringify!($SelfT), \"::MAX, true));\")]\n+        #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).overflowing_add_signed(4), (1, true));\")]\n+        /// ```\n+        #[unstable(feature = \"uint_add_signed\", issue = \"none\")]\n+        #[rustc_const_unstable(feature = \"uint_add_signed\", issue = \"none\")]\n+        #[must_use = \"this returns the result of the operation, \\\n+                      without modifying the original\"]\n+        #[inline]\n+        pub const fn overflowing_add_signed(self, rhs: $SignedT) -> (Self, bool) {\n+            if rhs >= 0 {\n+                self.overflowing_add(rhs as Self)\n+            } else {\n+                self.overflowing_sub(rhs.unsigned_abs())\n+            }\n+        }\n+\n         /// Calculates `self` - `rhs`\n         ///\n         /// Returns a tuple of the subtraction along with a boolean indicating"}, {"sha": "980b2531192e8649c422c21f4b83f9e28b633a09", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe11483afa90628106971993049b4fd2f0dae6fc/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe11483afa90628106971993049b4fd2f0dae6fc/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=fe11483afa90628106971993049b4fd2f0dae6fc", "patch": "@@ -292,12 +292,7 @@ where\n             SeekFrom::End(n) => (self.inner.as_ref().len() as u64, n),\n             SeekFrom::Current(n) => (self.pos, n),\n         };\n-        let new_pos = if offset >= 0 {\n-            base_pos.checked_add(offset as u64)\n-        } else {\n-            base_pos.checked_sub((offset.wrapping_neg()) as u64)\n-        };\n-        match new_pos {\n+        match base_pos.checked_add_signed(offset) {\n             Some(n) => {\n                 self.pos = n;\n                 Ok(self.pos)"}, {"sha": "e9a1aa41a63db2499cf4f836f7b9e546acc2189e", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe11483afa90628106971993049b4fd2f0dae6fc/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe11483afa90628106971993049b4fd2f0dae6fc/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=fe11483afa90628106971993049b4fd2f0dae6fc", "patch": "@@ -333,6 +333,7 @@\n #![feature(try_blocks)]\n #![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n+#![feature(uint_add_signed)]\n #![feature(unboxed_closures)]\n #![feature(unwrap_infallible)]\n #![feature(vec_into_raw_parts)]"}]}