{"sha": "5734b347ddfff0d285d3eecf5735cac30271696c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MzRiMzQ3ZGRmZmYwZDI4NWQzZWVjZjU3MzVjYWMzMDI3MTY5NmM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-17T15:10:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-17T16:00:08Z"}, "message": "Fix incorrect newline emission in Attrs::docs", "tree": {"sha": "86c372acd688079c9e623cda9a490266e2018c5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86c372acd688079c9e623cda9a490266e2018c5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5734b347ddfff0d285d3eecf5735cac30271696c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5734b347ddfff0d285d3eecf5735cac30271696c", "html_url": "https://github.com/rust-lang/rust/commit/5734b347ddfff0d285d3eecf5735cac30271696c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5734b347ddfff0d285d3eecf5735cac30271696c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec824a92d05caa1908cb25cbd5b969c8e995aaa7", "html_url": "https://github.com/rust-lang/rust/commit/ec824a92d05caa1908cb25cbd5b969c8e995aaa7"}], "stats": {"total": 142, "additions": 80, "deletions": 62}, "files": [{"sha": "b7353d868b22668f0ce987bfe3f2ced91a188541", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5734b347ddfff0d285d3eecf5735cac30271696c/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5734b347ddfff0d285d3eecf5735cac30271696c/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=5734b347ddfff0d285d3eecf5735cac30271696c", "patch": "@@ -76,7 +76,7 @@ impl ops::Deref for Attrs {\n impl RawAttrs {\n     pub(crate) const EMPTY: Self = Self { entries: None };\n \n-    pub(crate) fn new(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Self {\n+    pub(crate) fn new(owner: &dyn ast::AttrsOwner, hygiene: &Hygiene) -> Self {\n         let entries = collect_attrs(owner)\n             .enumerate()\n             .flat_map(|(i, attr)| match attr {\n@@ -92,7 +92,7 @@ impl RawAttrs {\n         Self { entries: if entries.is_empty() { None } else { Some(entries) } }\n     }\n \n-    fn from_attrs_owner(db: &dyn DefDatabase, owner: InFile<&dyn AttrsOwner>) -> Self {\n+    fn from_attrs_owner(db: &dyn DefDatabase, owner: InFile<&dyn ast::AttrsOwner>) -> Self {\n         let hygiene = Hygiene::new(db.upcast(), owner.file_id);\n         Self::new(owner.value, &hygiene)\n     }\n@@ -178,7 +178,7 @@ impl Attrs {\n                     Some(it) => {\n                         let raw_attrs = RawAttrs::from_attrs_owner(\n                             db,\n-                            it.as_ref().map(|it| it as &dyn AttrsOwner),\n+                            it.as_ref().map(|it| it as &dyn ast::AttrsOwner),\n                         );\n                         match mod_data.definition_source(db) {\n                             InFile { file_id, value: ModuleSource::SourceFile(file) } => raw_attrs\n@@ -189,9 +189,9 @@ impl Attrs {\n                     None => RawAttrs::from_attrs_owner(\n                         db,\n                         mod_data.definition_source(db).as_ref().map(|src| match src {\n-                            ModuleSource::SourceFile(file) => file as &dyn AttrsOwner,\n-                            ModuleSource::Module(module) => module as &dyn AttrsOwner,\n-                            ModuleSource::BlockExpr(block) => block as &dyn AttrsOwner,\n+                            ModuleSource::SourceFile(file) => file as &dyn ast::AttrsOwner,\n+                            ModuleSource::Module(module) => module as &dyn ast::AttrsOwner,\n+                            ModuleSource::BlockExpr(block) => block as &dyn ast::AttrsOwner,\n                         }),\n                     ),\n                 }\n@@ -249,7 +249,7 @@ impl Attrs {\n         let mut res = ArenaMap::default();\n \n         for (id, var) in src.value.iter() {\n-            let attrs = RawAttrs::from_attrs_owner(db, src.with_value(var as &dyn AttrsOwner))\n+            let attrs = RawAttrs::from_attrs_owner(db, src.with_value(var as &dyn ast::AttrsOwner))\n                 .filter(db, krate);\n \n             res.insert(id, attrs)\n@@ -283,7 +283,7 @@ impl Attrs {\n     /// Constructs a map that maps the lowered `Attr`s in this `Attrs` back to its original syntax nodes.\n     ///\n     /// `owner` must be the original owner of the attributes.\n-    pub fn source_map(&self, owner: &dyn AttrsOwner) -> AttrSourceMap {\n+    pub fn source_map(&self, owner: &dyn ast::AttrsOwner) -> AttrSourceMap {\n         AttrSourceMap { attrs: collect_attrs(owner).collect() }\n     }\n \n@@ -321,9 +321,7 @@ impl Attrs {\n         let mut buf = String::new();\n         for doc in docs {\n             // str::lines doesn't yield anything for the empty string\n-            if doc.is_empty() {\n-                buf.push('\\n');\n-            } else {\n+            if !doc.is_empty() {\n                 buf.extend(Itertools::intersperse(\n                     doc.lines().map(|line| {\n                         line.char_indices()\n@@ -436,7 +434,7 @@ impl Attr {\n     ///\n     /// Note that the returned syntax node might be a `#[cfg_attr]`, or a doc comment, instead of\n     /// the attribute represented by `Attr`.\n-    pub fn to_src(&self, owner: &dyn AttrsOwner) -> Either<ast::Attr, ast::Comment> {\n+    pub fn to_src(&self, owner: &dyn ast::AttrsOwner) -> Either<ast::Attr, ast::Comment> {\n         collect_attrs(owner).nth(self.index as usize).unwrap_or_else(|| {\n             panic!(\"cannot find `Attr` at index {} in {}\", self.index, owner.syntax())\n         })\n@@ -528,7 +526,7 @@ where\n     N: ast::AttrsOwner,\n {\n     let src = InFile::new(src.file_id, src.to_node(db.upcast()));\n-    RawAttrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn AttrsOwner))\n+    RawAttrs::from_attrs_owner(db, src.as_ref().map(|it| it as &dyn ast::AttrsOwner))\n }\n \n fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase) -> RawAttrs {\n@@ -537,7 +535,9 @@ fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase\n     tree.raw_attrs(mod_item.into()).clone()\n }\n \n-fn collect_attrs(owner: &dyn AttrsOwner) -> impl Iterator<Item = Either<ast::Attr, ast::Comment>> {\n+fn collect_attrs(\n+    owner: &dyn ast::AttrsOwner,\n+) -> impl Iterator<Item = Either<ast::Attr, ast::Comment>> {\n     let (inner_attrs, inner_docs) = inner_attributes(owner.syntax())\n         .map_or((None, None), |(attrs, docs)| ((Some(attrs), Some(docs))));\n "}, {"sha": "15d309d7d61146971bef759951d9085746f7466a", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5734b347ddfff0d285d3eecf5735cac30271696c/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5734b347ddfff0d285d3eecf5735cac30271696c/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=5734b347ddfff0d285d3eecf5735cac30271696c", "patch": "@@ -1533,12 +1533,21 @@ fn my() {}\n     fn test_hover_struct_doc_comment() {\n         check(\n             r#\"\n-/// bar docs\n+/// This is an example\n+/// multiline doc\n+///\n+/// # Example\n+///\n+/// ```\n+/// let five = 5;\n+///\n+/// assert_eq!(6, my_crate::add_one(5));\n+/// ```\n struct Bar;\n \n fn foo() { let bar = Ba$0r; }\n \"#,\n-            expect![[r#\"\n+            expect![[r##\"\n                 *Bar*\n \n                 ```rust\n@@ -1551,8 +1560,17 @@ fn foo() { let bar = Ba$0r; }\n \n                 ---\n \n-                bar docs\n-            \"#]],\n+                This is an example\n+                multiline doc\n+\n+                # Example\n+\n+                ```\n+                let five = 5;\n+\n+                assert_eq!(6, my_crate::add_one(5));\n+                ```\n+            \"##]],\n         );\n     }\n "}, {"sha": "7e26c3ccfd570727f044c3f88b427214db787d9e", "filename": "crates/ide_db/src/call_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5734b347ddfff0d285d3eecf5735cac30271696c/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5734b347ddfff0d285d3eecf5735cac30271696c/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info.rs?ref=5734b347ddfff0d285d3eecf5735cac30271696c", "patch": "@@ -53,15 +53,15 @@ pub fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo>\n \n     match callable.kind() {\n         hir::CallableKind::Function(func) => {\n-            res.doc = func.docs(db).map(|it| it.as_str().to_string());\n+            res.doc = func.docs(db).map(|it| it.into());\n             format_to!(res.signature, \"fn {}\", func.name(db));\n         }\n         hir::CallableKind::TupleStruct(strukt) => {\n-            res.doc = strukt.docs(db).map(|it| it.as_str().to_string());\n+            res.doc = strukt.docs(db).map(|it| it.into());\n             format_to!(res.signature, \"struct {}\", strukt.name(db));\n         }\n         hir::CallableKind::TupleEnumVariant(variant) => {\n-            res.doc = variant.docs(db).map(|it| it.as_str().to_string());\n+            res.doc = variant.docs(db).map(|it| it.into());\n             format_to!(\n                 res.signature,\n                 \"enum {}::{}\","}, {"sha": "75ab3eb6ea7936f55df7191bcb69bbb0ab6cff75", "filename": "crates/ide_db/src/call_info/tests.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5734b347ddfff0d285d3eecf5735cac30271696c/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5734b347ddfff0d285d3eecf5735cac30271696c/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs?ref=5734b347ddfff0d285d3eecf5735cac30271696c", "patch": "@@ -220,11 +220,11 @@ fn bar() {\n }\n \"#,\n         expect![[r#\"\n-                test\n-                ------\n-                fn foo(j: u32) -> u32\n-                (<j: u32>)\n-            \"#]],\n+            test\n+            ------\n+            fn foo(j: u32) -> u32\n+            (<j: u32>)\n+        \"#]],\n     );\n }\n \n@@ -249,19 +249,19 @@ pub fn do() {\n     add_one($0\n }\"#,\n         expect![[r##\"\n-                Adds one to the number given.\n+            Adds one to the number given.\n \n-                # Examples\n+            # Examples\n \n-                ```\n-                let five = 5;\n+            ```\n+            let five = 5;\n \n-                assert_eq!(6, my_crate::add_one(5));\n-                ```\n-                ------\n-                fn add_one(x: i32) -> i32\n-                (<x: i32>)\n-            \"##]],\n+            assert_eq!(6, my_crate::add_one(5));\n+            ```\n+            ------\n+            fn add_one(x: i32) -> i32\n+            (<x: i32>)\n+        \"##]],\n     );\n }\n \n@@ -291,19 +291,19 @@ pub fn do_it() {\n }\n \"#,\n         expect![[r##\"\n-                Adds one to the number given.\n+            Adds one to the number given.\n \n-                # Examples\n+            # Examples\n \n-                ```\n-                let five = 5;\n+            ```\n+            let five = 5;\n \n-                assert_eq!(6, my_crate::add_one(5));\n-                ```\n-                ------\n-                fn add_one(x: i32) -> i32\n-                (<x: i32>)\n-            \"##]],\n+            assert_eq!(6, my_crate::add_one(5));\n+            ```\n+            ------\n+            fn add_one(x: i32) -> i32\n+            (<x: i32>)\n+        \"##]],\n     );\n }\n \n@@ -335,13 +335,13 @@ pub fn foo(mut r: WriteHandler<()>) {\n }\n \"#,\n         expect![[r#\"\n-                Method is called when writer finishes.\n+            Method is called when writer finishes.\n \n-                By default this method stops actor's `Context`.\n-                ------\n-                fn finished(&mut self, ctx: &mut {unknown})\n-                (<ctx: &mut {unknown}>)\n-            \"#]],\n+            By default this method stops actor's `Context`.\n+            ------\n+            fn finished(&mut self, ctx: &mut {unknown})\n+            (<ctx: &mut {unknown}>)\n+        \"#]],\n     );\n }\n \n@@ -389,11 +389,11 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-                A cool tuple struct\n-                ------\n-                struct S(u32, i32)\n-                (u32, <i32>)\n-            \"#]],\n+            A cool tuple struct\n+            ------\n+            struct S(u32, i32)\n+            (u32, <i32>)\n+        \"#]],\n     );\n }\n \n@@ -431,11 +431,11 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-                A Variant\n-                ------\n-                enum E::A(i32)\n-                (<i32>)\n-            \"#]],\n+            A Variant\n+            ------\n+            enum E::A(i32)\n+            (<i32>)\n+        \"#]],\n     );\n }\n "}]}