{"sha": "8d56bcc59c92c5770f585cd433230e7771da2dad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNTZiY2M1OWM5MmM1NzcwZjU4NWNkNDMzMjMwZTc3NzFkYTJkYWQ=", "commit": {"author": {"name": "Guanqun Lu", "email": "guanqun.lu@gmail.com", "date": "2019-10-29T08:48:05Z"}, "committer": {"name": "Guanqun Lu", "email": "guanqun.lu@gmail.com", "date": "2019-11-10T08:34:31Z"}, "message": "download .tar.xz if python3 is used", "tree": {"sha": "b91d664abd04edd2d1872c0a7bc4901227c7da5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b91d664abd04edd2d1872c0a7bc4901227c7da5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d56bcc59c92c5770f585cd433230e7771da2dad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d56bcc59c92c5770f585cd433230e7771da2dad", "html_url": "https://github.com/rust-lang/rust/commit/8d56bcc59c92c5770f585cd433230e7771da2dad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d56bcc59c92c5770f585cd433230e7771da2dad/comments", "author": null, "committer": null, "parents": [{"sha": "76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "html_url": "https://github.com/rust-lang/rust/commit/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "9cc58e03d5649616e1dca0f9cb6244544ccb54cb", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8d56bcc59c92c5770f585cd433230e7771da2dad/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/8d56bcc59c92c5770f585cd433230e7771da2dad/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=8d56bcc59c92c5770f585cd433230e7771da2dad", "patch": "@@ -102,10 +102,10 @@ def verify(path, sha_path, verbose):\n     return verified\n \n \n-def unpack(tarball, dst, verbose=False, match=None):\n+def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n     \"\"\"Unpack the given tarball file\"\"\"\n     print(\"extracting\", tarball)\n-    fname = os.path.basename(tarball).replace(\".tar.gz\", \"\")\n+    fname = os.path.basename(tarball).replace(tarball_suffix, \"\")\n     with contextlib.closing(tarfile.open(tarball)) as tar:\n         for member in tar.getnames():\n             if \"/\" not in member:\n@@ -331,6 +331,18 @@ def __init__(self):\n         self.use_vendored_sources = ''\n         self.verbose = False\n \n+        def support_xz():\n+            try:\n+                with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+                    temp_path = temp_file.name\n+                with tarfile.open(temp_path, \"w:xz\") as tar:\n+                    pass\n+                return True\n+            except tarfile.CompressionError:\n+                return False\n+\n+        self.tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n+\n     def download_stage0(self):\n         \"\"\"Fetch the build system for Rust, written in Rust\n \n@@ -349,12 +361,13 @@ def download_stage0(self):\n                  self.program_out_of_date(self.rustc_stamp())):\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n-            filename = \"rust-std-{}-{}.tar.gz\".format(\n-                rustc_channel, self.build)\n+            filename = \"rust-std-{}-{}{}\".format(\n+                rustc_channel, self.build, self.tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n             self._download_stage0_helper(filename, pattern)\n \n-            filename = \"rustc-{}-{}.tar.gz\".format(rustc_channel, self.build)\n+            filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n+                                              self.tarball_suffix)\n             self._download_stage0_helper(filename, \"rustc\")\n             self.fix_executable(\"{}/bin/rustc\".format(self.bin_root()))\n             self.fix_executable(\"{}/bin/rustdoc\".format(self.bin_root()))\n@@ -365,14 +378,15 @@ def download_stage0(self):\n             # libraries/binaries that are included in rust-std with\n             # the system MinGW ones.\n             if \"pc-windows-gnu\" in self.build:\n-                filename = \"rust-mingw-{}-{}.tar.gz\".format(\n-                    rustc_channel, self.build)\n+                filename = \"rust-mingw-{}-{}{}\".format(\n+                    rustc_channel, self.build, self.tarball_suffix)\n                 self._download_stage0_helper(filename, \"rust-mingw\")\n \n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or\n                  self.program_out_of_date(self.cargo_stamp())):\n-            filename = \"cargo-{}-{}.tar.gz\".format(cargo_channel, self.build)\n+            filename = \"cargo-{}-{}{}\".format(cargo_channel, self.build,\n+                                              self.tarball_suffix)\n             self._download_stage0_helper(filename, \"cargo\")\n             self.fix_executable(\"{}/bin/cargo\".format(self.bin_root()))\n             with output(self.cargo_stamp()) as cargo_stamp:\n@@ -388,7 +402,7 @@ def _download_stage0_helper(self, filename, pattern):\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n             get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n-        unpack(tarball, self.bin_root(), match=pattern, verbose=self.verbose)\n+        unpack(tarball, self.tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n     @staticmethod\n     def fix_executable(fname):"}]}