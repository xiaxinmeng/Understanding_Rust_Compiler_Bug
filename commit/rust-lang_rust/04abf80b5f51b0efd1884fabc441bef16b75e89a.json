{"sha": "04abf80b5f51b0efd1884fabc441bef16b75e89a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YWJmODBiNWY1MWIwZWZkMTg4NGZhYmM0NDFiZWYxNmI3NWU4OWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-02T15:28:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-02T15:28:41Z"}, "message": "Merge #7824\n\n7824: feat: add type ascription r=matklad a=conradludgate\n\nBased on this conversation: https://twitter.com/rust_analyzer/status/1366092401278922757\r\nBuilt off of `add_turbo_fish`, finds the current `let` statement, checks if it has type/turbofish already and checks if the rhs function is generic.\r\n\r\nThere's one case I couldn't figure out how to implement that would be nice:\r\n\r\n```rust\r\n#[test]\r\nfn add_type_ascription_function_result() {\r\n    check_assist(\r\n        add_type_ascription,\r\n        r#\"\r\nfn make<T>() -> Result<T, &'static str> {}\r\nfn main() {\r\n    let x = make()$0;\r\n}\r\n\"#,\r\n        r#\"\r\nfn make<T>() -> Result<T, &'static str> {}\r\nfn main() {\r\n    let x: Result<${0:_}, &'static str> = make();\r\n}\r\n\"#,\r\n    );\r\n}\r\n```\r\n\r\nThe `Function::ret_type` fn wasn't returning anything much useful so I'm not sure how to identity such scenarios just yet\n\nCo-authored-by: Conrad Ludgate <conradludgate@gmail.com>", "tree": {"sha": "c83a205fd1684eb7427c20d99a9d4bc3f07ff5ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83a205fd1684eb7427c20d99a9d4bc3f07ff5ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04abf80b5f51b0efd1884fabc441bef16b75e89a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPlmpCRBK7hj4Ov3rIwAAdHIIAA5O9NgQhmTxXj4xnKUnTd8j\nsQMEWlvlA9NXwdBXMoi1lirvI8tNtMiJdJRI73Ywa5cXPiZxg/+joFOSN8QmMU9Z\nmnItfYd11zBAy6aY/rMO7EGMK1DJkN2KVD53GnhxwLks6S/TCTGOXNHa98zojyfN\nhxskL9EQ8a8wjivkyeTej8NxLJWnTSkwt6UwC2LZ8OWA77hESCfSMDumLbFcDbQu\ngFDlFX/WTHUtG6E2IKcdatfEgc0rOCmHyLFx9vGGaYBpbp2T9Vi+rraA1POV41dh\nW+cW130ZW9rHWpvw/s2LFUyhTxd+3DPFMsMhw8BdJO/mNZ+qs1zrHpm87ukjLCU=\n=nUHw\n-----END PGP SIGNATURE-----\n", "payload": "tree c83a205fd1684eb7427c20d99a9d4bc3f07ff5ae\nparent f8152171bbe160c4273d692d42c06eb7c6d66e1a\nparent 2c3c728e0aea90f80b6d066f97e59663371e91c5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1614698921 +0000\ncommitter GitHub <noreply@github.com> 1614698921 +0000\n\nMerge #7824\n\n7824: feat: add type ascription r=matklad a=conradludgate\n\nBased on this conversation: https://twitter.com/rust_analyzer/status/1366092401278922757\r\nBuilt off of `add_turbo_fish`, finds the current `let` statement, checks if it has type/turbofish already and checks if the rhs function is generic.\r\n\r\nThere's one case I couldn't figure out how to implement that would be nice:\r\n\r\n```rust\r\n#[test]\r\nfn add_type_ascription_function_result() {\r\n    check_assist(\r\n        add_type_ascription,\r\n        r#\"\r\nfn make<T>() -> Result<T, &'static str> {}\r\nfn main() {\r\n    let x = make()$0;\r\n}\r\n\"#,\r\n        r#\"\r\nfn make<T>() -> Result<T, &'static str> {}\r\nfn main() {\r\n    let x: Result<${0:_}, &'static str> = make();\r\n}\r\n\"#,\r\n    );\r\n}\r\n```\r\n\r\nThe `Function::ret_type` fn wasn't returning anything much useful so I'm not sure how to identity such scenarios just yet\n\nCo-authored-by: Conrad Ludgate <conradludgate@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04abf80b5f51b0efd1884fabc441bef16b75e89a", "html_url": "https://github.com/rust-lang/rust/commit/04abf80b5f51b0efd1884fabc441bef16b75e89a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04abf80b5f51b0efd1884fabc441bef16b75e89a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8152171bbe160c4273d692d42c06eb7c6d66e1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8152171bbe160c4273d692d42c06eb7c6d66e1a", "html_url": "https://github.com/rust-lang/rust/commit/f8152171bbe160c4273d692d42c06eb7c6d66e1a"}, {"sha": "2c3c728e0aea90f80b6d066f97e59663371e91c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c3c728e0aea90f80b6d066f97e59663371e91c5", "html_url": "https://github.com/rust-lang/rust/commit/2c3c728e0aea90f80b6d066f97e59663371e91c5"}], "stats": {"total": 108, "additions": 107, "deletions": 1}, "files": [{"sha": "a08b55ebbf1d1f573d437b402a62814f89c95e65", "filename": "crates/ide_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 107, "deletions": 1, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/04abf80b5f51b0efd1884fabc441bef16b75e89a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04abf80b5f51b0efd1884fabc441bef16b75e89a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=04abf80b5f51b0efd1884fabc441bef16b75e89a", "patch": "@@ -31,6 +31,7 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n             return None;\n         }\n         mark::hit!(add_turbo_fish_after_call);\n+        mark::hit!(add_type_ascription_after_call);\n         arg_list.l_paren_token()?.prev_token().filter(|it| it.kind() == SyntaxKind::IDENT)\n     })?;\n     let next_token = ident.next_token()?;\n@@ -52,6 +53,24 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         mark::hit!(add_turbo_fish_non_generic);\n         return None;\n     }\n+\n+    if let Some(let_stmt) = ctx.find_node_at_offset::<ast::LetStmt>() {\n+        if let_stmt.colon_token().is_none() {\n+            let type_pos = let_stmt.pat()?.syntax().last_token()?.text_range().end();\n+            acc.add(\n+                AssistId(\"add_type_ascription\", AssistKind::RefactorRewrite),\n+                \"Add `: _` before assignment operator\",\n+                ident.text_range(),\n+                |builder| match ctx.config.snippet_cap {\n+                    Some(cap) => builder.insert_snippet(cap, type_pos, \": ${0:_}\"),\n+                    None => builder.insert(type_pos, \": _\"),\n+                },\n+            )?\n+        } else {\n+            mark::hit!(add_type_ascription_already_typed);\n+        }\n+    }\n+\n     acc.add(\n         AssistId(\"add_turbo_fish\", AssistKind::RefactorRewrite),\n         \"Add `::<>`\",\n@@ -65,7 +84,7 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_by_label, check_assist_not_applicable};\n \n     use super::*;\n     use test_utils::mark;\n@@ -158,6 +177,93 @@ fn make() -> () {}\n fn main() {\n     make$0();\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_function() {\n+        check_assist_by_label(\n+            add_turbo_fish,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x = make$0();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: ${0:_} = make();\n+}\n+\"#,\n+            \"Add `: _` before assignment operator\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_after_call() {\n+        mark::check!(add_type_ascription_after_call);\n+        check_assist_by_label(\n+            add_turbo_fish,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x = make()$0;\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: ${0:_} = make();\n+}\n+\"#,\n+            \"Add `: _` before assignment operator\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_method() {\n+        check_assist_by_label(\n+            add_turbo_fish,\n+            r#\"\n+struct S;\n+impl S {\n+    fn make<T>(&self) -> T {}\n+}\n+fn main() {\n+    let x = S.make$0();\n+}\n+\"#,\n+            r#\"\n+struct S;\n+impl S {\n+    fn make<T>(&self) -> T {}\n+}\n+fn main() {\n+    let x: ${0:_} = S.make();\n+}\n+\"#,\n+            \"Add `: _` before assignment operator\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_already_typed() {\n+        mark::check!(add_type_ascription_already_typed);\n+        check_assist(\n+            add_turbo_fish,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: () = make$0();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: () = make::<${0:_}>();\n+}\n \"#,\n         );\n     }"}]}