{"sha": "5e4296767fadf87cea31c22edaef1a924dfbad40", "node_id": "C_kwDOAAsO6NoAKDVlNDI5Njc2N2ZhZGY4N2NlYTMxYzIyZWRhZWYxYTkyNGRmYmFkNDA", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-05-30T02:54:00Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-05-30T13:56:09Z"}, "message": "refactor: remove code for bad issue (e.g. todo/fixme) reporting", "tree": {"sha": "39fb0d88c72a0e059093cd478ce701f4b178c79d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39fb0d88c72a0e059093cd478ce701f4b178c79d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e4296767fadf87cea31c22edaef1a924dfbad40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e4296767fadf87cea31c22edaef1a924dfbad40", "html_url": "https://github.com/rust-lang/rust/commit/5e4296767fadf87cea31c22edaef1a924dfbad40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e4296767fadf87cea31c22edaef1a924dfbad40/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "825561deb86524107f1c22b59bddb16703d2c790", "url": "https://api.github.com/repos/rust-lang/rust/commits/825561deb86524107f1c22b59bddb16703d2c790", "html_url": "https://github.com/rust-lang/rust/commit/825561deb86524107f1c22b59bddb16703d2c790"}], "stats": {"total": 209, "additions": 2, "deletions": 207}, "files": [{"sha": "9809f72f5ae6b19ed9870120f5693f413e3c7691", "filename": "src/format_report_formatter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e4296767fadf87cea31c22edaef1a924dfbad40/src%2Fformat_report_formatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4296767fadf87cea31c22edaef1a924dfbad40/src%2Fformat_report_formatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat_report_formatter.rs?ref=5e4296767fadf87cea31c22edaef1a924dfbad40", "patch": "@@ -146,6 +146,6 @@ fn error_kind_to_snippet_annotation_type(error_kind: &ErrorKind) -> AnnotationTy\n         | ErrorKind::BadAttr\n         | ErrorKind::InvalidGlobPattern(_)\n         | ErrorKind::VersionMismatch => AnnotationType::Error,\n-        ErrorKind::BadIssue(_) | ErrorKind::DeprecatedAttr => AnnotationType::Warning,\n+        ErrorKind::DeprecatedAttr => AnnotationType::Warning,\n     }\n }"}, {"sha": "869c6db647d006ff0f9070eb96ad1ecb82b65683", "filename": "src/formatting.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e4296767fadf87cea31c22edaef1a924dfbad40/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4296767fadf87cea31c22edaef1a924dfbad40/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=5e4296767fadf87cea31c22edaef1a924dfbad40", "patch": "@@ -13,7 +13,6 @@ use self::newline_style::apply_newline_style;\n use crate::comment::{CharClasses, FullCodeCharKind};\n use crate::config::{Config, FileName, Verbosity};\n use crate::formatting::generated::is_generated_file;\n-use crate::issues::BadIssueSeeker;\n use crate::modules::Module;\n use crate::parse::parser::{DirectoryOwnership, Parser, ParserError};\n use crate::parse::session::ParseSess;\n@@ -332,7 +331,6 @@ impl FormattingError {\n             ErrorKind::LineOverflow(found, max) => (max, found - max),\n             ErrorKind::TrailingWhitespace\n             | ErrorKind::DeprecatedAttr\n-            | ErrorKind::BadIssue(_)\n             | ErrorKind::BadAttr\n             | ErrorKind::LostComment\n             | ErrorKind::LicenseCheck => {\n@@ -483,11 +481,9 @@ struct FormatLines<'a> {\n     cur_line: usize,\n     newline_count: usize,\n     errors: Vec<FormattingError>,\n-    issue_seeker: BadIssueSeeker,\n     line_buffer: String,\n     current_line_contains_string_literal: bool,\n     format_line: bool,\n-    allow_issue_seek: bool,\n     config: &'a Config,\n }\n \n@@ -497,7 +493,6 @@ impl<'a> FormatLines<'a> {\n         skipped_range: &'a [(usize, usize)],\n         config: &'a Config,\n     ) -> FormatLines<'a> {\n-        let issue_seeker = BadIssueSeeker::new();\n         FormatLines {\n             name,\n             skipped_range,\n@@ -506,8 +501,6 @@ impl<'a> FormatLines<'a> {\n             cur_line: 1,\n             newline_count: 0,\n             errors: vec![],\n-            allow_issue_seek: !issue_seeker.is_disabled(),\n-            issue_seeker,\n             line_buffer: String::with_capacity(config.max_width() * 2),\n             current_line_contains_string_literal: false,\n             format_line: config.file_lines().contains_line(name, 1),\n@@ -536,13 +529,6 @@ impl<'a> FormatLines<'a> {\n                 continue;\n             }\n \n-            if self.allow_issue_seek && self.format_line {\n-                // Add warnings for bad fixmes\n-                if let Some(issue) = self.issue_seeker.inspect(c) {\n-                    self.push_err(ErrorKind::BadIssue(issue), false, false);\n-                }\n-            }\n-\n             if c == '\\n' {\n                 self.new_line(kind);\n             } else {"}, {"sha": "d95a80fe7fd952b0623ea14e1bbc64c1cab2b470", "filename": "src/issues.rs", "status": "removed", "additions": 0, "deletions": 185, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/825561deb86524107f1c22b59bddb16703d2c790/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825561deb86524107f1c22b59bddb16703d2c790/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=825561deb86524107f1c22b59bddb16703d2c790", "patch": "@@ -1,185 +0,0 @@\n-// Objects for seeking through a char stream for occurrences of TODO and FIXME.\n-// Depending on the loaded configuration, may also check that these have an\n-// associated issue number.\n-\n-use std::fmt;\n-\n-use crate::config::ReportTactic;\n-\n-// Enabled implementation detail is here because it is\n-// irrelevant outside the issues module\n-fn is_enabled(report_tactic: ReportTactic) -> bool {\n-    report_tactic != ReportTactic::Never\n-}\n-\n-#[derive(Clone, Copy)]\n-enum Seeking {\n-    Issue {},\n-    Number { issue: Issue, part: NumberPart },\n-}\n-\n-#[derive(Clone, Copy)]\n-enum NumberPart {\n-    OpenParen,\n-    Pound,\n-    Number,\n-    CloseParen,\n-}\n-\n-#[derive(PartialEq, Eq, Debug, Clone, Copy)]\n-pub struct Issue {\n-    issue_type: Option<IssueType>,\n-    // Indicates whether we're looking for issues with missing numbers, or\n-    // all issues of this type.\n-    missing_number: bool,\n-}\n-\n-impl fmt::Display for Issue {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n-        let msg = match self.issue_type {\n-            _ => \"\",\n-        };\n-        let details = if self.missing_number {\n-            \" without issue number\"\n-        } else {\n-            \"\"\n-        };\n-\n-        write!(fmt, \"{}{}\", msg, details)\n-    }\n-}\n-\n-#[derive(PartialEq, Eq, Debug, Clone, Copy)]\n-enum IssueType {}\n-\n-enum IssueClassification {\n-    Good,\n-    Bad(Issue),\n-    None,\n-}\n-\n-pub(crate) struct BadIssueSeeker {\n-    state: Seeking,\n-}\n-\n-impl BadIssueSeeker {\n-    pub(crate) fn new() -> BadIssueSeeker {\n-        BadIssueSeeker {\n-            state: Seeking::Issue {},\n-        }\n-    }\n-\n-    pub(crate) fn is_disabled(&self) -> bool {\n-        true\n-    }\n-\n-    // Check whether or not the current char is conclusive evidence for an\n-    // unnumbered TO-DO or FIX-ME.\n-    pub(crate) fn inspect(&mut self, c: char) -> Option<Issue> {\n-        match self.state {\n-            Seeking::Issue {} => {\n-                self.state = self.inspect_issue(c, 0);\n-            }\n-            Seeking::Number { issue, part } => {\n-                let result = self.inspect_number(c, issue, part);\n-\n-                if let IssueClassification::None = result {\n-                    return None;\n-                }\n-\n-                self.state = Seeking::Issue {};\n-\n-                if let IssueClassification::Bad(issue) = result {\n-                    return Some(issue);\n-                }\n-            }\n-        }\n-\n-        None\n-    }\n-\n-    fn inspect_issue(&mut self, c: char, mut fixme_idx: usize) -> Seeking {\n-        if let Some(lower_case_c) = c.to_lowercase().next() {\n-            fixme_idx = 0;\n-        }\n-\n-        Seeking::Issue {}\n-    }\n-\n-    fn inspect_number(\n-        &mut self,\n-        c: char,\n-        issue: Issue,\n-        mut part: NumberPart,\n-    ) -> IssueClassification {\n-        if !issue.missing_number || c == '\\n' {\n-            return IssueClassification::Bad(issue);\n-        } else if c == ')' {\n-            return if let NumberPart::CloseParen = part {\n-                IssueClassification::Good\n-            } else {\n-                IssueClassification::Bad(issue)\n-            };\n-        }\n-\n-        match part {\n-            NumberPart::OpenParen => {\n-                if c != '(' {\n-                    return IssueClassification::Bad(issue);\n-                } else {\n-                    part = NumberPart::Pound;\n-                }\n-            }\n-            NumberPart::Pound => {\n-                if c == '#' {\n-                    part = NumberPart::Number;\n-                }\n-            }\n-            NumberPart::Number => {\n-                if ('0'..='9').contains(&c) {\n-                    part = NumberPart::CloseParen;\n-                } else {\n-                    return IssueClassification::Bad(issue);\n-                }\n-            }\n-            NumberPart::CloseParen => {}\n-        }\n-\n-        self.state = Seeking::Number { part, issue };\n-\n-        IssueClassification::None\n-    }\n-}\n-\n-#[test]\n-fn find_unnumbered_issue() {\n-    fn check_fail(text: &str, failing_pos: usize) {\n-        let mut seeker = BadIssueSeeker::new();\n-        assert_eq!(\n-            Some(failing_pos),\n-            text.find(|c| seeker.inspect(c).is_some())\n-        );\n-    }\n-\n-    fn check_pass(text: &str) {\n-        let mut seeker = BadIssueSeeker::new();\n-        assert_eq!(None, text.find(|c| seeker.inspect(c).is_some()));\n-    }\n-}\n-\n-#[test]\n-fn find_issue() {\n-    fn is_bad_issue(text: &str) -> bool {\n-        let mut seeker = BadIssueSeeker::new();\n-        text.chars().any(|c| seeker.inspect(c).is_some())\n-    }\n-}\n-\n-#[test]\n-fn issue_type() {\n-    let seeker = BadIssueSeeker::new();\n-    let expected = Some(Issue {\n-        issue_type: None,\n-        missing_number: true,\n-    });\n-}"}, {"sha": "f46a6914dd8e2c46b477abcebaacde0797c47bf7", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e4296767fadf87cea31c22edaef1a924dfbad40/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e4296767fadf87cea31c22edaef1a924dfbad40/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5e4296767fadf87cea31c22edaef1a924dfbad40", "patch": "@@ -39,7 +39,6 @@ use thiserror::Error;\n use crate::comment::LineClasses;\n use crate::emitter::Emitter;\n use crate::formatting::{FormatErrorMap, FormattingError, ReportedErrors, SourceFile};\n-use crate::issues::Issue;\n use crate::modules::ModuleResolutionError;\n use crate::parse::parser::DirectoryOwnership;\n use crate::shape::Indent;\n@@ -69,7 +68,6 @@ mod format_report_formatter;\n pub(crate) mod formatting;\n mod ignore_path;\n mod imports;\n-mod issues;\n mod items;\n mod lists;\n mod macros;\n@@ -110,9 +108,6 @@ pub enum ErrorKind {\n     /// Line ends in whitespace.\n     #[error(\"left behind trailing whitespace\")]\n     TrailingWhitespace,\n-    /// TODO or FIXME item without an issue number.\n-    #[error(\"found {0}\")]\n-    BadIssue(Issue),\n     /// License check has failed.\n     #[error(\"license check failed\")]\n     LicenseCheck,\n@@ -236,8 +231,7 @@ impl FormatReport {\n                 ErrorKind::LostComment => {\n                     errs.has_unformatted_code_errors = true;\n                 }\n-                ErrorKind::BadIssue(_)\n-                | ErrorKind::LicenseCheck\n+                ErrorKind::LicenseCheck\n                 | ErrorKind::DeprecatedAttr\n                 | ErrorKind::BadAttr\n                 | ErrorKind::VersionMismatch => {"}]}