{"sha": "cfae247ce0423d3b6a0114b8b64826cdec461edc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYWUyNDdjZTA0MjNkM2I2YTAxMTRiOGI2NDgyNmNkZWM0NjFlZGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T00:07:49Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T10:51:08Z"}, "message": "Rollup merge of #21941 - dotdash:with_cond_false, r=Aatch\n\n Currently \\\"k / 2\\\" generates one (k: uint) or two (k: int) \\\"br false,\n...\\\" instructions and the corresponding basic blocks, producing quite\nsome noise and making the code unnecessarily hard to read.\n\nAdditionally we can skip translation if the code would end up\nunreachable anyway.", "tree": {"sha": "8fe5c5ce3c04af18678ef14eaa9e454c8f990418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fe5c5ce3c04af18678ef14eaa9e454c8f990418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfae247ce0423d3b6a0114b8b64826cdec461edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfae247ce0423d3b6a0114b8b64826cdec461edc", "html_url": "https://github.com/rust-lang/rust/commit/cfae247ce0423d3b6a0114b8b64826cdec461edc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfae247ce0423d3b6a0114b8b64826cdec461edc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1a1d339ef3fb89599f74c0cbae2183c7cf2ee25", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a1d339ef3fb89599f74c0cbae2183c7cf2ee25", "html_url": "https://github.com/rust-lang/rust/commit/d1a1d339ef3fb89599f74c0cbae2183c7cf2ee25"}, {"sha": "db8f2d590385786c176b5f7d9e887814d31db9ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/db8f2d590385786c176b5f7d9e887814d31db9ad", "html_url": "https://github.com/rust-lang/rust/commit/db8f2d590385786c176b5f7d9e887814d31db9ad"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "1d7358b11c10ac72ea0a041160b6989f5814a46e", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfae247ce0423d3b6a0114b8b64826cdec461edc/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfae247ce0423d3b6a0114b8b64826cdec461edc/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=cfae247ce0423d3b6a0114b8b64826cdec461edc", "patch": "@@ -889,11 +889,13 @@ fn compile_guard<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         }\n     }\n \n+    for (_, &binding_info) in &data.bindings_map {\n+        bcx.fcx.lllocals.borrow_mut().remove(&binding_info.id);\n+    }\n+\n     with_cond(bcx, Not(bcx, val, guard_expr.debug_loc()), |bcx| {\n-        // Guard does not match: remove all bindings from the lllocals table\n         for (_, &binding_info) in &data.bindings_map {\n             call_lifetime_end(bcx, binding_info.llmatch);\n-            bcx.fcx.lllocals.borrow_mut().remove(&binding_info.id);\n         }\n         match chk {\n             // If the default arm is the only one left, move on to the next"}, {"sha": "58c7a979c3d4d1290314fb01b3656552b6fbf0ed", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfae247ce0423d3b6a0114b8b64826cdec461edc/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfae247ce0423d3b6a0114b8b64826cdec461edc/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=cfae247ce0423d3b6a0114b8b64826cdec461edc", "patch": "@@ -1081,6 +1081,12 @@ pub fn with_cond<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     F: FnOnce(Block<'blk, 'tcx>) -> Block<'blk, 'tcx>,\n {\n     let _icx = push_ctxt(\"with_cond\");\n+\n+    if bcx.unreachable.get() ||\n+            (common::is_const(val) && common::const_to_uint(val) == 0) {\n+        return bcx;\n+    }\n+\n     let fcx = bcx.fcx;\n     let next_cx = fcx.new_temp_block(\"next\");\n     let cond_cx = fcx.new_temp_block(\"cond\");"}]}