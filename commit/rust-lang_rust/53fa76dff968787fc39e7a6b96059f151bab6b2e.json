{"sha": "53fa76dff968787fc39e7a6b96059f151bab6b2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZmE3NmRmZjk2ODc4N2ZjMzllN2E2Yjk2MDU5ZjE1MWJhYjZiMmU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-01T22:35:49Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-01T22:35:49Z"}, "message": "new lint: needless_bool (TODO: The warnings could give more specific directions)", "tree": {"sha": "14f3c0317089ef81add3763c40bf136932bff3f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f3c0317089ef81add3763c40bf136932bff3f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53fa76dff968787fc39e7a6b96059f151bab6b2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53fa76dff968787fc39e7a6b96059f151bab6b2e", "html_url": "https://github.com/rust-lang/rust/commit/53fa76dff968787fc39e7a6b96059f151bab6b2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53fa76dff968787fc39e7a6b96059f151bab6b2e/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe", "html_url": "https://github.com/rust-lang/rust/commit/3a9bf24bb3d0fbcc8cabfecb03bb60c3cfa8babe"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "0fc9a6c88692b3aa934b54ec7f2fdb4294bdd042", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53fa76dff968787fc39e7a6b96059f151bab6b2e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/53fa76dff968787fc39e7a6b96059f151bab6b2e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=53fa76dff968787fc39e7a6b96059f151bab6b2e", "patch": "@@ -10,13 +10,13 @@ Lints included in this crate:\n  - `box_vec`: Warns on usage of `Box<Vec<T>>`\n  - `dlist`: Warns on usage of `DList`\n  - `str_to_string`: Warns on usage of `str::to_string()`\n- - `toplevel_ref_arg`: Warns when a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`).\n+ - `toplevel_ref_arg`: Warns when a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n  - `eq_op`: Warns on equal operands on both sides of a comparison or bitwise combination\n  - `bad_bit_mask`: Denies expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n+ - `needless_bool` : Warns on if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n \n You can allow/warn/deny the whole set using the `clippy` lint group (`#[allow(clippy)]`, etc)\n \n-\n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!\n \n Licensed under [MPL](https://www.mozilla.org/MPL/2.0/). If you're having issues with the license, let me know and I'll try to change it to something more permissive."}, {"sha": "ea8a39628108d59251978ee10c810f638d4d9b8a", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53fa76dff968787fc39e7a6b96059f151bab6b2e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53fa76dff968787fc39e7a6b96059f151bab6b2e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=53fa76dff968787fc39e7a6b96059f151bab6b2e", "patch": "@@ -18,6 +18,7 @@ pub mod types;\n pub mod misc;\n pub mod eq_op;\n pub mod bit_mask;\n+pub mod needless_bool;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -27,8 +28,10 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box misc::TopLevelRefPass as LintPassObject);\n     reg.register_lint_pass(box eq_op::EqOp as LintPassObject);\n     reg.register_lint_pass(box bit_mask::BitMask as LintPassObject);\n+    reg.register_lint_pass(box needless_bool::NeedlessBool as LintPassObject);\n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n                                            misc::TOPLEVEL_REF_ARG, eq_op::EQ_OP,\n-                                           bit_mask::BAD_BIT_MASK]);\n+                                           bit_mask::BAD_BIT_MASK, \n+                                           needless_bool::NEEDLESS_BOOL]);\n }"}, {"sha": "5b14e2fe1f335acc604f704ded710856d9e71697", "filename": "src/needless_bool.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/53fa76dff968787fc39e7a6b96059f151bab6b2e/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53fa76dff968787fc39e7a6b96059f151bab6b2e/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=53fa76dff968787fc39e7a6b96059f151bab6b2e", "patch": "@@ -0,0 +1,51 @@\n+//! Checks for needless boolean results of if-else expressions\n+//!\n+//! This lint is **deny** by default\n+\n+use rustc::plugin::Registry;\n+use rustc::lint::*;\n+use rustc::middle::const_eval::lookup_const_by_id;\n+use rustc::middle::def::*;\n+use syntax::ast::*;\n+use syntax::ast_util::{is_comparison_binop, binop_to_string};\n+use syntax::ptr::P;\n+use syntax::codemap::Span;\n+\n+declare_lint! {\n+    pub NEEDLESS_BOOL,\n+    Warn,\n+    \"Warn on needless use of if x { true } else { false } (or vice versa)\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct NeedlessBool;\n+\n+impl LintPass for NeedlessBool {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NEEDLESS_BOOL)\n+    }\n+    \n+    fn check_expr(&mut self, cx: &Context, e: &Expr) {\n+        if let ExprIf(_, ref then_block, Option::Some(ref else_expr)) = e.node {\n+\t\t\tmatch (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n+\t\t\t\t(Option::Some(true), Option::Some(true)) => { cx.span_lint(NEEDLESS_BOOL, e.span, \"your if-then-else expression will always return true\"); },\n+\t\t\t\t(Option::Some(true), Option::Some(false)) => { cx.span_lint(NEEDLESS_BOOL, e.span, \"you can reduce your if-statement to its predicate\"); },\n+\t\t\t\t(Option::Some(false), Option::Some(true)) => { cx.span_lint(NEEDLESS_BOOL, e.span, \"you can reduce your if-statement to '!' + your predicate\"); },\n+\t\t\t\t(Option::Some(false), Option::Some(false)) => { cx.span_lint(NEEDLESS_BOOL, e.span, \"your if-then-else expression will always return false\"); },\n+\t\t\t\t_ => ()\n+\t\t\t}\n+\t\t}\n+    }\n+}\n+\n+fn fetch_bool_block(block: &Block) -> Option<bool> {\n+\tif block.stmts.is_empty() { block.expr.as_ref().and_then(|e| fetch_bool_expr(e)) } else { Option::None }\n+}\n+\t\n+fn fetch_bool_expr(expr: &Expr) -> Option<bool> {\n+\tmatch &expr.node {\n+\t\t&ExprBlock(ref block) => fetch_bool_block(block),\n+\t\t&ExprLit(ref lit_ptr) => if let &LitBool(value) = &lit_ptr.node { Option::Some(value) } else { Option::None },\n+\t\t_ => Option::None\n+\t}\n+}"}, {"sha": "97a478ee410daf29ae2998461f1a4b505446c8b2", "filename": "tests/compile-fail/needless_bool.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53fa76dff968787fc39e7a6b96059f151bab6b2e/tests%2Fcompile-fail%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53fa76dff968787fc39e7a6b96059f151bab6b2e/tests%2Fcompile-fail%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_bool.rs?ref=53fa76dff968787fc39e7a6b96059f151bab6b2e", "patch": "@@ -0,0 +1,12 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(needless_bool)]\n+fn main() {\n+\tlet x = true;\n+\tif x { true } else { true }; //~ERROR \n+\tif x { false } else { false }; //~ERROR\n+\tif x { true } else { false }; //~ERROR\n+\tif x { false } else { true }; //~ERROR\n+\tif x { x } else { false }; // would also be questionable, but we don't catch this yet\n+}"}]}