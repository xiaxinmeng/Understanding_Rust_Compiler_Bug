{"sha": "aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "node_id": "C_kwDOAAsO6NoAKGFlY2YyNmQwOWI1ODlhYTMwNjM1ZTc4ZWQ1YTg2ZTlkNWU3ZmFiYzY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-04T19:40:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-06T12:50:18Z"}, "message": "feat: Add config to replace specific proc-macros with dummy expanders", "tree": {"sha": "b71d91a3666599f9976190198427dff8dc6567b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b71d91a3666599f9976190198427dff8dc6567b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "html_url": "https://github.com/rust-lang/rust/commit/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68bc12c3b80b0dce655c8602e683b1989640f00b", "url": "https://api.github.com/repos/rust-lang/rust/commits/68bc12c3b80b0dce655c8602e683b1989640f00b", "html_url": "https://github.com/rust-lang/rust/commit/68bc12c3b80b0dce655c8602e683b1989640f00b"}], "stats": {"total": 85, "additions": 68, "deletions": 17}, "files": [{"sha": "9f93bbd27b856d5ab192e4a021e976089ce22173", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "patch": "@@ -55,6 +55,8 @@ pub trait InternDatabase: SourceDatabase {\n pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::input]\n     fn enable_proc_attr_macros(&self) -> bool;\n+    #[salsa::input]\n+    fn enablse_proc_attr_macros(&self) -> bool;\n \n     #[salsa::invoke(ItemTree::file_item_tree_query)]\n     fn file_item_tree(&self, file_id: HirFileId) -> Arc<ItemTree>;"}, {"sha": "2977ff74e2a3d571e8e13081c8935285bf905c51", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "patch": "@@ -88,7 +88,7 @@ fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {\n }\n \n fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n-    project_workspace.to_crate_graph(&mut |_| Vec::new(), &mut {\n+    project_workspace.to_crate_graph(&Default::default(), &mut |_, _| Vec::new(), &mut {\n         let mut counter = 0;\n         move |_path| {\n             counter += 1;"}, {"sha": "869b064e1da406441c13c62ac3e65596e485430d", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "patch": "@@ -387,10 +387,14 @@ impl ProjectWorkspace {\n \n     pub fn to_crate_graph(\n         &self,\n-        load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+        dummy_replace: &FxHashMap<Box<str>, Box<[Box<str>]>>,\n+        load_proc_macro: &mut dyn FnMut(&AbsPath, &[Box<str>]) -> Vec<ProcMacro>,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     ) -> CrateGraph {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n+        let load_proc_macro = &mut |crate_name: &_, path: &_| {\n+            load_proc_macro(path, dummy_replace.get(crate_name).map(|it| &**it).unwrap_or_default())\n+        };\n \n         let mut crate_graph = match self {\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg } => project_json_to_crate_graph(\n@@ -432,7 +436,7 @@ impl ProjectWorkspace {\n \n fn project_json_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n-    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n@@ -452,7 +456,12 @@ fn project_json_to_crate_graph(\n         })\n         .map(|(crate_id, krate, file_id)| {\n             let env = krate.env.clone().into_iter().collect();\n-            let proc_macro = krate.proc_macro_dylib_path.clone().map(|it| load_proc_macro(&it));\n+            let proc_macro = krate.proc_macro_dylib_path.clone().map(|it| {\n+                load_proc_macro(\n+                    krate.display_name.as_ref().map(|it| it.canonical_name()).unwrap_or(\"\"),\n+                    &it,\n+                )\n+            });\n \n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => {\n@@ -513,7 +522,7 @@ fn project_json_to_crate_graph(\n fn cargo_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     override_cfg: &CfgOverrides,\n-    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n     build_scripts: &WorkspaceBuildScripts,\n@@ -571,7 +580,7 @@ fn cargo_to_crate_graph(\n                     &cargo[pkg],\n                     build_scripts.outputs.get(pkg),\n                     cfg_options,\n-                    load_proc_macro,\n+                    &mut |path| load_proc_macro(&cargo[tgt].name, path),\n                     file_id,\n                     &cargo[tgt].name,\n                 );\n@@ -702,7 +711,7 @@ fn handle_rustc_crates(\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     crate_graph: &mut CrateGraph,\n     cfg_options: &CfgOptions,\n-    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n     public_deps: &SysrootPublicDeps,\n     cargo: &CargoWorkspace,\n@@ -738,7 +747,7 @@ fn handle_rustc_crates(\n                         &rustc_workspace[pkg],\n                         None,\n                         cfg_options,\n-                        load_proc_macro,\n+                        &mut |path| load_proc_macro(&rustc_workspace[tgt].name, path),\n                         file_id,\n                         &rustc_workspace[tgt].name,\n                     );"}, {"sha": "19ce86e3ffad3983919d5a4f89a323c4b48ffc0b", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "patch": "@@ -66,7 +66,8 @@ pub fn load_workspace(\n     };\n \n     let crate_graph = ws.to_crate_graph(\n-        &mut |path: &AbsPath| load_proc_macro(proc_macro_client.as_ref(), path),\n+        &Default::default(),\n+        &mut |path: &AbsPath, _| load_proc_macro(proc_macro_client.as_ref(), path, &[]),\n         &mut |path: &AbsPath| {\n             let contents = loader.load_sync(path);\n             let path = vfs::VfsPath::from(path.to_path_buf());"}, {"sha": "665609cf9ab078d0dacd4270dfb96069b3e3ad83", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "patch": "@@ -301,6 +301,7 @@ config_data! {\n         /// Internal config, path to proc-macro server executable (typically,\n         /// this is rust-analyzer itself, but we override this in tests).\n         procMacro_server: Option<PathBuf>          = \"null\",\n+        procMacro_dummies: FxHashMap<Box<str>, Box<[Box<str>]>>          = \"{}\",\n \n         /// Command to be executed instead of 'cargo' for runnables.\n         runnables_overrideCargo: Option<String> = \"null\",\n@@ -716,6 +717,9 @@ impl Config {\n         };\n         Some((path, vec![\"proc-macro\".into()]))\n     }\n+    pub fn dummy_replacements(&self) -> &FxHashMap<Box<str>, Box<[Box<str>]>> {\n+        &self.data.procMacro_dummies\n+    }\n     pub fn expand_proc_attr_macros(&self) -> bool {\n         self.data.experimental_procAttrMacros\n     }"}, {"sha": "c687466bd2300547bd5b51751e23462a027ad592", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecf26d09b589aa30635e78ed5a86e9d5e7fabc6/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=aecf26d09b589aa30635e78ed5a86e9d5e7fabc6", "patch": "@@ -10,6 +10,7 @@ use ide_db::base_db::{\n };\n use proc_macro_api::{MacroDylib, ProcMacroServer};\n use project_model::{ProjectWorkspace, WorkspaceBuildScripts};\n+use syntax::SmolStr;\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n use crate::{\n@@ -290,6 +291,9 @@ impl GlobalState {\n                     }\n                 },\n             };\n+            self.analysis_host\n+                .raw_database_mut()\n+                .set_enable_proc_attr_macros(self.config.expand_proc_attr_macros());\n         }\n \n         let watch = match files_config.watcher {\n@@ -306,8 +310,9 @@ impl GlobalState {\n         // Create crate graph from all the workspaces\n         let crate_graph = {\n             let proc_macro_client = self.proc_macro_client.as_ref();\n-            let mut load_proc_macro =\n-                move |path: &AbsPath| load_proc_macro(proc_macro_client, path);\n+            let mut load_proc_macro = move |path: &AbsPath, dummy_replace: &_| {\n+                load_proc_macro(proc_macro_client, path, dummy_replace)\n+            };\n \n             let vfs = &mut self.vfs.write().0;\n             let loader = &mut self.loader;\n@@ -328,7 +333,11 @@ impl GlobalState {\n \n             let mut crate_graph = CrateGraph::default();\n             for ws in self.workspaces.iter() {\n-                crate_graph.extend(ws.to_crate_graph(&mut load_proc_macro, &mut load));\n+                crate_graph.extend(ws.to_crate_graph(\n+                    self.config.dummy_replacements(),\n+                    &mut load_proc_macro,\n+                    &mut load,\n+                ));\n             }\n             crate_graph\n         };\n@@ -505,7 +514,11 @@ impl SourceRootConfig {\n     }\n }\n \n-pub(crate) fn load_proc_macro(client: Option<&ProcMacroServer>, path: &AbsPath) -> Vec<ProcMacro> {\n+pub(crate) fn load_proc_macro(\n+    client: Option<&ProcMacroServer>,\n+    path: &AbsPath,\n+    dummy_replace: &[Box<str>],\n+) -> Vec<ProcMacro> {\n     let dylib = match MacroDylib::new(path.to_path_buf()) {\n         Ok(it) => it,\n         Err(err) => {\n@@ -532,17 +545,25 @@ pub(crate) fn load_proc_macro(client: Option<&ProcMacroServer>, path: &AbsPath)\n                 Vec::new()\n             }\n         })\n-        .map(expander_to_proc_macro)\n+        .map(|expander| expander_to_proc_macro(expander, dummy_replace))\n         .collect();\n \n-    fn expander_to_proc_macro(expander: proc_macro_api::ProcMacro) -> ProcMacro {\n-        let name = expander.name().into();\n+    fn expander_to_proc_macro(\n+        expander: proc_macro_api::ProcMacro,\n+        dummy_replace: &[Box<str>],\n+    ) -> ProcMacro {\n+        let name = SmolStr::from(expander.name());\n         let kind = match expander.kind() {\n             proc_macro_api::ProcMacroKind::CustomDerive => ProcMacroKind::CustomDerive,\n             proc_macro_api::ProcMacroKind::FuncLike => ProcMacroKind::FuncLike,\n             proc_macro_api::ProcMacroKind::Attr => ProcMacroKind::Attr,\n         };\n-        let expander = Arc::new(Expander(expander));\n+        let expander: Arc<dyn ProcMacroExpander> =\n+            if dummy_replace.iter().any(|replace| &**replace == name) {\n+                Arc::new(DummyExpander)\n+            } else {\n+                Arc::new(Expander(expander))\n+            };\n         ProcMacro { name, kind, expander }\n     }\n \n@@ -564,6 +585,20 @@ pub(crate) fn load_proc_macro(client: Option<&ProcMacroServer>, path: &AbsPath)\n             }\n         }\n     }\n+\n+    #[derive(Debug)]\n+    struct DummyExpander;\n+\n+    impl ProcMacroExpander for DummyExpander {\n+        fn expand(\n+            &self,\n+            subtree: &tt::Subtree,\n+            _: Option<&tt::Subtree>,\n+            _: &Env,\n+        ) -> Result<tt::Subtree, ProcMacroExpansionError> {\n+            Ok(subtree.clone())\n+        }\n+    }\n }\n \n pub(crate) fn should_refresh_for_change(path: &AbsPath, change_kind: ChangeKind) -> bool {"}]}