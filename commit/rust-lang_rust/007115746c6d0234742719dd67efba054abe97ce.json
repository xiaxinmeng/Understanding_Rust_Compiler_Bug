{"sha": "007115746c6d0234742719dd67efba054abe97ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNzExNTc0NmM2ZDAyMzQ3NDI3MTlkZDY3ZWZiYTA1NGFiZTk3Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-29T18:12:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-29T18:12:57Z"}, "message": "Auto merge of #57197 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #57149 (Fix typo in pin documentation)\n - #57153 (Small: Fix span in char documentation)\n - #57159 (Update references to closed issue)\n - #57163 (Give the crate select chevron room to breathe.)\n - #57168 (Removed aligned ZST requirement from docs of read_/write_unaligned.)\n - #57174 (Update link to rustc guide)\n - #57177 (Fix warning when compiling rustc)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2747628993f65d132462cee937827bc9054d8580", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2747628993f65d132462cee937827bc9054d8580"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/007115746c6d0234742719dd67efba054abe97ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/007115746c6d0234742719dd67efba054abe97ce", "html_url": "https://github.com/rust-lang/rust/commit/007115746c6d0234742719dd67efba054abe97ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/007115746c6d0234742719dd67efba054abe97ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d969c61e8c8be5b54fd96b7c3bc40cb9b3ace3c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d969c61e8c8be5b54fd96b7c3bc40cb9b3ace3c2", "html_url": "https://github.com/rust-lang/rust/commit/d969c61e8c8be5b54fd96b7c3bc40cb9b3ace3c2"}, {"sha": "68f370ce05405b73b7240d9eb25f23a4209687e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f370ce05405b73b7240d9eb25f23a4209687e2", "html_url": "https://github.com/rust-lang/rust/commit/68f370ce05405b73b7240d9eb25f23a4209687e2"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "46957c00bf95c749961c44af34d0e455871c5967", "filename": "src/doc/unstable-book/src/language-features/non-ascii-idents.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -1,8 +1,8 @@\n # `non_ascii_idents`\n \n-The tracking issue for this feature is: [#28979]\n+The tracking issue for this feature is: [#55467]\n \n-[#28979]: https://github.com/rust-lang/rust/issues/28979\n+[#55467]: https://github.com/rust-lang/rust/issues/55467\n \n ------------------------\n "}, {"sha": "e31ac691e3a3c0ba8c91e5d6bd9f8067a3c2c36a", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -25,7 +25,7 @@\n //! values.\n //!\n //! However, these restrictions are usually not necessary. Many types are always freely\n-//! movable. These types implement the [`Unpin`] auto-trait, which nullifies the affect\n+//! movable. These types implement the [`Unpin`] auto-trait, which nullifies the effect\n //! of [`Pin`]. For `T: Unpin`, `Pin<Box<T>>` and `Box<T>` function identically, as do\n //! `Pin<&mut T>` and `&mut T`.\n //!"}, {"sha": "55a72d7a9a94daffebd36f40971ec297f210ec12", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -591,7 +591,7 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// whether `T` is [`Copy`].  If `T` is not [`Copy`], using both the returned\n /// value and the value at `*src` can [violate memory safety][read-ownership].\n ///\n-/// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n+/// Note that even if `T` has size `0`, the pointer must be non-NULL.\n ///\n /// [`Copy`]: ../marker/trait.Copy.html\n /// [`read`]: ./fn.read.html\n@@ -759,7 +759,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n ///\n /// * `dst` must be [valid] for writes.\n ///\n-/// Note that even if `T` has size `0`, the pointer must be non-NULL and properly aligned.\n+/// Note that even if `T` has size `0`, the pointer must be non-NULL.\n ///\n /// [valid]: ../ptr/index.html#safety\n ///"}, {"sha": "6c47e8784e025c755adef37cce0c6d3ce25b1911", "filename": "src/librustc_borrowck/borrowck/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -3,7 +3,7 @@\n > WARNING: This README is more or less obsolete, and will be removed\n > soon! The new system is described in the [rustc guide].\n \n-[rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n+[rustc guide]: https://rust-lang.github.io/rustc-guide/borrow_check.html\n \n This pass has the job of enforcing memory safety. This is a subtle\n topic. This docs aim to explain both the practice and the theory"}, {"sha": "c0f59f0c36fce587574861b4dc50657155db5220", "filename": "src/librustdoc/html/static/down-arrow.svg", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fdown-arrow.svg", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fdown-arrow.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fdown-arrow.svg?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -1 +1 @@\n-<?xml version=\"1.0\" ?><!DOCTYPE svg  PUBLIC '-//W3C//DTD SVG 1.1//EN'  'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'><svg height=\"128px\" id=\"Layer_1\" style=\"enable-background:new 0 0 128 128;\" version=\"1.1\" viewBox=\"0 0 128 128\" width=\"128px\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><g><line style=\"fill:none;stroke:#2F3435;stroke-width:12;stroke-linecap:square;stroke-miterlimit:10;\" x1=\"111\" x2=\"64\" y1=\"40.5\" y2=\"87.499\"/><line style=\"fill:none;stroke:#2F3435;stroke-width:12;stroke-linecap:square;stroke-miterlimit:10;\" x1=\"64\" x2=\"17\" y1=\"87.499\" y2=\"40.5\"/></g></svg>\n\\ No newline at end of file\n+<?xml version=\"1.0\" ?><!DOCTYPE svg  PUBLIC '-//W3C//DTD SVG 1.1//EN'  'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'><svg height=\"128px\" id=\"Layer_1\" style=\"enable-background:new 0 0 128 128;\" version=\"1.1\" viewBox=\"-30 -20 176 176\" width=\"128px\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><g><line style=\"fill:none;stroke:#2F3435;stroke-width:12;stroke-linecap:square;stroke-miterlimit:10;\" x1=\"111\" x2=\"64\" y1=\"40.5\" y2=\"87.499\"/><line style=\"fill:none;stroke:#2F3435;stroke-width:12;stroke-linecap:square;stroke-miterlimit:10;\" x1=\"64\" x2=\"17\" y1=\"87.499\" y2=\"40.5\"/></g></svg>\n\\ No newline at end of file"}, {"sha": "6ded43dfed1f454015376321ef90a60085d5edd8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -248,7 +248,6 @@\n #![feature(const_cstr_unchecked)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n-#![cfg_attr(stage0, feature(duration_as_u128))]\n #![feature(exact_size_is_empty)]\n #![feature(external_doc)]\n #![feature(fixed_size_array)]"}, {"sha": "7755d9339e6f5c18904158a005c8c75927d7c773", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -302,7 +302,7 @@ mod prim_never { }\n /// ```text\n /// error: character literal may only contain one codepoint: 'e\u0301'\n /// let c = 'e\u0301';\n-///         ^^^^\n+///         ^^^\n /// ```\n ///\n /// Another implication of the 4-byte fixed size of a `char` is that"}, {"sha": "be49c55a54c420aa22fd7f49ff340c7b11e009a0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -111,7 +111,7 @@ declare_features! (\n     (active, concat_idents, \"1.0.0\", Some(29599), None),\n     (active, link_args, \"1.0.0\", Some(29596), None),\n     (active, log_syntax, \"1.0.0\", Some(29598), None),\n-    (active, non_ascii_idents, \"1.0.0\", Some(28979), None),\n+    (active, non_ascii_idents, \"1.0.0\", Some(55467), None),\n     (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n     (active, thread_local, \"1.0.0\", Some(29594), None),\n     (active, trace_macros, \"1.0.0\", Some(29598), None),"}, {"sha": "5c441189ea7cbbd16ab212e6102e5c2ce7999bc3", "filename": "src/test/ui/feature-gates/feature-gate-non_ascii_idents.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_ascii_idents.stderr?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -1,100 +1,100 @@\n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:1:22\n    |\n LL | extern crate core as b\u00e4z; //~ ERROR non-ascii idents\n    |                      ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:3:5\n    |\n LL | use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:5:5\n    |\n LL | mod f\u00f6\u00f6 { //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:9:4\n    |\n LL | fn b\u00e4r( //~ ERROR non-ascii idents\n    |    ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:10:5\n    |\n LL |     b\u00e4z: isize //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:12:9\n    |\n LL |     let _\u00f6: isize; //~ ERROR non-ascii idents\n    |         ^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:15:10\n    |\n LL |         (_\u00e4, _) => {} //~ ERROR non-ascii idents\n    |          ^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:19:8\n    |\n LL | struct F\u00f6\u00f6 { //~ ERROR non-ascii idents\n    |        ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:20:5\n    |\n LL |     f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:23:6\n    |\n LL | enum B\u00e4r { //~ ERROR non-ascii idents\n    |      ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:24:5\n    |\n LL |     B\u00e4z { //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:25:9\n    |\n LL |         q\u00fcx: isize //~ ERROR non-ascii idents\n    |         ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/feature-gate-non_ascii_idents.rs:30:8\n    |\n LL |     fn q\u00fcx();  //~ ERROR non-ascii idents"}, {"sha": "40cb10ced16f59d28c4a2cb19b9d86c1edcc1a28", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/local-modularized-tricky-fail-2.rs:20:32\n    |\n LL | exported!();\n@@ -9,7 +9,7 @@ LL |                 () => ( struct \u0411; ) //~ ERROR non-ascii idents are not ful\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/local-modularized-tricky-fail-2.rs:36:24\n    |\n LL |     panic!();\n@@ -20,7 +20,7 @@ LL |         () => ( struct \u0413; ) //~ ERROR non-ascii idents are not fully suppo\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/local-modularized-tricky-fail-2.rs:46:24\n    |\n LL | include!();"}, {"sha": "b1bb4a3001557a618113221ad9bb031c6f4cc32d", "filename": "src/test/ui/utf8_idents.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/007115746c6d0234742719dd67efba054abe97ce/src%2Ftest%2Fui%2Futf8_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/007115746c6d0234742719dd67efba054abe97ce/src%2Ftest%2Fui%2Futf8_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Futf8_idents.stderr?ref=007115746c6d0234742719dd67efba054abe97ce", "patch": "@@ -1,28 +1,28 @@\n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/utf8_idents.rs:4:5\n    |\n LL |     '\u03b2, //~ ERROR non-ascii idents are not fully supported\n    |     ^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/utf8_idents.rs:5:5\n    |\n LL |     \u03b3  //~ ERROR non-ascii idents are not fully supported\n    |     ^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/utf8_idents.rs:9:5\n    |\n LL |     \u03b4: usize //~ ERROR non-ascii idents are not fully supported\n    |     ^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #55467)\n   --> $DIR/utf8_idents.rs:13:9\n    |\n LL |     let \u03b1 = 0.00001f64; //~ ERROR non-ascii idents are not fully supported"}]}