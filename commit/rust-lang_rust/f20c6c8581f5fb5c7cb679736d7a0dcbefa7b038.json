{"sha": "f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMGM2Yzg1ODFmNWZiNWM3Y2I2Nzk3MzZkN2EwZGNiZWZhN2IwMzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-25T00:36:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-25T00:36:59Z"}, "message": "Rollup merge of #57294 - estebank:point-copy-less, r=nikomatsakis\n\nWhen using value after move, point at span of local\n\nWhen trying to use a value after move, instead of using a note, point\nat the local declaration that has a type that doesn't implement `Copy`\ntrait.\n\n```\nerror[E0382]: use of moved value: `x`\n  --> $DIR/issue-34721.rs:27:9\n   |\nLL |     pub fn baz<T: Foo>(x: T) -> T {\n   |                -       - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n   |                |\n   |                consider adding a `Copy` constraint to this type argument\nLL |         if 0 == 1 {\nLL |             bar::bar(x.zero())\n   |                      - value moved here\nLL |         } else {\nLL |             x.zero()\n   |             - value moved here\nLL |         };\nLL |         x.zero()\n   |         ^ value used here after move\n```\n\nFix #34721.", "tree": {"sha": "cb159db003b758c5142df8b6e46e35ed6bfad2a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb159db003b758c5142df8b6e46e35ed6bfad2a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcSlorCRBK7hj4Ov3rIwAAdHIIAKB7ne6myzyanhj7DKVnN5UC\nc2JfXaLqTYe5ZYakuoW7tWkVwO8z8bQw70ZTZjBJ1b9OqzXDFxgyytwQ+hcv6oJ1\nwCJpP+c0cvRrLdIbqJuVhpR//+gQu4qJ6VAVNMbT5vPoJhjZhw7z0oRcRNAdlG9W\naQlFuya2rwN2Dp7ZGLkhQlaPNlXvxuE73QGZ1O6zFrEn4C5QzXX0W+iNACCNECVY\nTiVRul5Q9ojxAWPtl5Ojt/tf7ZKPPZv0Hm8NTB0knNtkxwyeJ+eRMICauCQQzBOK\nfSNM8nPqimHkimfjOC7/jPjosN+6M1/Pjl/Z/pKD/WvTc2erDeCtibEHeSP8p20=\n=zqQd\n-----END PGP SIGNATURE-----\n", "payload": "tree cb159db003b758c5142df8b6e46e35ed6bfad2a0\nparent 284e1a86c0e3e3aed269b5c545d3e9dc78bafa8a\nparent baa0828ee35475987fd825d8eaf77e009dca2bbe\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548376619 +0100\ncommitter GitHub <noreply@github.com> 1548376619 +0100\n\nRollup merge of #57294 - estebank:point-copy-less, r=nikomatsakis\n\nWhen using value after move, point at span of local\n\nWhen trying to use a value after move, instead of using a note, point\nat the local declaration that has a type that doesn't implement `Copy`\ntrait.\n\n```\nerror[E0382]: use of moved value: `x`\n  --> $DIR/issue-34721.rs:27:9\n   |\nLL |     pub fn baz<T: Foo>(x: T) -> T {\n   |                -       - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n   |                |\n   |                consider adding a `Copy` constraint to this type argument\nLL |         if 0 == 1 {\nLL |             bar::bar(x.zero())\n   |                      - value moved here\nLL |         } else {\nLL |             x.zero()\n   |             - value moved here\nLL |         };\nLL |         x.zero()\n   |         ^ value used here after move\n```\n\nFix #34721.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "html_url": "https://github.com/rust-lang/rust/commit/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "284e1a86c0e3e3aed269b5c545d3e9dc78bafa8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/284e1a86c0e3e3aed269b5c545d3e9dc78bafa8a", "html_url": "https://github.com/rust-lang/rust/commit/284e1a86c0e3e3aed269b5c545d3e9dc78bafa8a"}, {"sha": "baa0828ee35475987fd825d8eaf77e009dca2bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa0828ee35475987fd825d8eaf77e009dca2bbe", "html_url": "https://github.com/rust-lang/rust/commit/baa0828ee35475987fd825d8eaf77e009dca2bbe"}], "stats": {"total": 894, "additions": 668, "deletions": 226}, "files": [{"sha": "56b87feb82b2c34f2ce9bf93e14fe72489960f47", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -198,19 +198,38 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 let place = &self.move_data.move_paths[mpi].place;\n \n                 let ty = place.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n-                let note_msg = match self.describe_place_with_options(\n-                    place,\n-                    IncludingDowncast(true),\n-                ) {\n-                    Some(name) => format!(\"`{}`\", name),\n+                let opt_name = self.describe_place_with_options(place, IncludingDowncast(true));\n+                let note_msg = match opt_name {\n+                    Some(ref name) => format!(\"`{}`\", name),\n                     None => \"value\".to_owned(),\n                 };\n-\n-                err.note(&format!(\n-                    \"move occurs because {} has type `{}`, \\\n-                     which does not implement the `Copy` trait\",\n-                    note_msg, ty\n-                ));\n+                if let ty::TyKind::Param(param_ty) = ty.sty {\n+                    let tcx = self.infcx.tcx;\n+                    let generics = tcx.generics_of(self.mir_def_id);\n+                    let def_id = generics.type_param(&param_ty, tcx).def_id;\n+                    if let Some(sp) = tcx.hir().span_if_local(def_id) {\n+                        err.span_label(\n+                            sp,\n+                            \"consider adding a `Copy` constraint to this type argument\",\n+                        );\n+                    }\n+                }\n+                if let Place::Local(local) = place {\n+                    let decl = &self.mir.local_decls[*local];\n+                    err.span_label(\n+                        decl.source_info.span,\n+                        format!(\n+                            \"move occurs because {} has type `{}`, \\\n+                                which does not implement the `Copy` trait\",\n+                            note_msg, ty,\n+                    ));\n+                } else {\n+                    err.note(&format!(\n+                        \"move occurs because {} has type `{}`, \\\n+                         which does not implement the `Copy` trait\",\n+                        note_msg, ty\n+                    ));\n+                }\n             }\n \n             if let Some((_, mut old_err)) = self.move_error_reported"}, {"sha": "59b5aba93cad4664d6554d1e27d364997f5eb38d", "filename": "src/test/ui/binop/binop-consume-args.nll.stderr", "status": "added", "additions": 253, "deletions": 0, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -0,0 +1,253 @@\n+error[E0382]: use of moved value: `lhs`\n+  --> $DIR/binop-consume-args.rs:7:10\n+   |\n+LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n+LL |     lhs + rhs;\n+   |     --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `rhs`\n+  --> $DIR/binop-consume-args.rs:8:10\n+   |\n+LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n+LL |     lhs + rhs;\n+   |           --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `lhs`\n+  --> $DIR/binop-consume-args.rs:13:10\n+   |\n+LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n+LL |     lhs - rhs;\n+   |     --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `rhs`\n+  --> $DIR/binop-consume-args.rs:14:10\n+   |\n+LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n+LL |     lhs - rhs;\n+   |           --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `lhs`\n+  --> $DIR/binop-consume-args.rs:19:10\n+   |\n+LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n+LL |     lhs * rhs;\n+   |     --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `rhs`\n+  --> $DIR/binop-consume-args.rs:20:10\n+   |\n+LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n+LL |     lhs * rhs;\n+   |           --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `lhs`\n+  --> $DIR/binop-consume-args.rs:25:10\n+   |\n+LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n+LL |     lhs / rhs;\n+   |     --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `rhs`\n+  --> $DIR/binop-consume-args.rs:26:10\n+   |\n+LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n+LL |     lhs / rhs;\n+   |           --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `lhs`\n+  --> $DIR/binop-consume-args.rs:31:10\n+   |\n+LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n+LL |     lhs % rhs;\n+   |     --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `rhs`\n+  --> $DIR/binop-consume-args.rs:32:10\n+   |\n+LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n+LL |     lhs % rhs;\n+   |           --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `lhs`\n+  --> $DIR/binop-consume-args.rs:37:10\n+   |\n+LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           -                           --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |           |\n+   |           consider adding a `Copy` constraint to this type argument\n+LL |     lhs & rhs;\n+   |     --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `rhs`\n+  --> $DIR/binop-consume-args.rs:38:10\n+   |\n+LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                                    -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                                    |\n+   |                                    consider adding a `Copy` constraint to this type argument\n+LL |     lhs & rhs;\n+   |           --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `lhs`\n+  --> $DIR/binop-consume-args.rs:43:10\n+   |\n+LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |          -                          --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |          |\n+   |          consider adding a `Copy` constraint to this type argument\n+LL |     lhs | rhs;\n+   |     --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `rhs`\n+  --> $DIR/binop-consume-args.rs:44:10\n+   |\n+LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                                  -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                                  |\n+   |                                  consider adding a `Copy` constraint to this type argument\n+LL |     lhs | rhs;\n+   |           --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `lhs`\n+  --> $DIR/binop-consume-args.rs:49:10\n+   |\n+LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |           -                           --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |           |\n+   |           consider adding a `Copy` constraint to this type argument\n+LL |     lhs ^ rhs;\n+   |     --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `rhs`\n+  --> $DIR/binop-consume-args.rs:50:10\n+   |\n+LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                                    -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                                    |\n+   |                                    consider adding a `Copy` constraint to this type argument\n+LL |     lhs ^ rhs;\n+   |           --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `lhs`\n+  --> $DIR/binop-consume-args.rs:55:10\n+   |\n+LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n+LL |     lhs << rhs;\n+   |     --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `rhs`\n+  --> $DIR/binop-consume-args.rs:56:10\n+   |\n+LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n+LL |     lhs << rhs;\n+   |            --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `lhs`\n+  --> $DIR/binop-consume-args.rs:61:10\n+   |\n+LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |        -                        --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n+LL |     lhs >> rhs;\n+   |     --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+   |          ^^^ value used here after move\n+\n+error[E0382]: use of moved value: `rhs`\n+  --> $DIR/binop-consume-args.rs:62:10\n+   |\n+LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n+   |                              -          --- move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n+   |                              |\n+   |                              consider adding a `Copy` constraint to this type argument\n+LL |     lhs >> rhs;\n+   |            --- value moved here\n+LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+   |          ^^^ value used here after move\n+\n+error: aborting due to 20 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "7c84e8833a9e6dfb860094e54cb2887762721c6d", "filename": "src/test/ui/binop/binop-move-semantics.nll.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,24 +1,28 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:8:5\n    |\n+LL | fn double_move<T: Add<Output=()>>(x: T) {\n+   |                -                  - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |                |\n+   |                consider adding a `Copy` constraint to this type argument\n LL |     x\n    |     - value moved here\n LL |     +\n LL |     x;  //~ ERROR: use of moved value\n    |     ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:14:5\n    |\n+LL | fn move_then_borrow<T: Add<Output=()> + Clone>(x: T) {\n+   |                     -                          - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |                     |\n+   |                     consider adding a `Copy` constraint to this type argument\n LL |     x\n    |     - value moved here\n LL |     +\n LL |     x.clone();  //~ ERROR: use of moved value\n    |     ^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/binop-move-semantics.rs:21:5"}, {"sha": "86e4832b3873ce49ae1bc09a2247e1b3e5af6fde", "filename": "src/test/ui/borrowck/borrowck-asm.ast.nll.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.ast.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,13 +1,14 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-asm.rs:27:17\n    |\n+LL |         let x = &mut 0isize;\n+   |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n+LL |         unsafe {\n LL |             asm!(\"nop\" : : \"r\"(x));\n    |                                - value moved here\n LL |         }\n LL |         let z = x;  //[ast]~ ERROR use of moved value: `x`\n    |                 ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/borrowck-asm.rs:35:32\n@@ -66,12 +67,13 @@ LL |         let z = y;\n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-asm.rs:86:40\n    |\n+LL |         let x = &mut 2;\n+   |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n+LL |         unsafe {\n LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //[ast]~ ERROR use of moved value\n    |                                -       ^ value used here after move\n    |                                |\n    |                                value moved here\n-   |\n-   = note: move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n \n error: aborting due to 7 previous errors\n "}, {"sha": "86e4832b3873ce49ae1bc09a2247e1b3e5af6fde", "filename": "src/test/ui/borrowck/borrowck-asm.mir.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,13 +1,14 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-asm.rs:27:17\n    |\n+LL |         let x = &mut 0isize;\n+   |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n+LL |         unsafe {\n LL |             asm!(\"nop\" : : \"r\"(x));\n    |                                - value moved here\n LL |         }\n LL |         let z = x;  //[ast]~ ERROR use of moved value: `x`\n    |                 ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/borrowck-asm.rs:35:32\n@@ -66,12 +67,13 @@ LL |         let z = y;\n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-asm.rs:86:40\n    |\n+LL |         let x = &mut 2;\n+   |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n+LL |         unsafe {\n LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //[ast]~ ERROR use of moved value\n    |                                -       ^ value used here after move\n    |                                |\n    |                                value moved here\n-   |\n-   = note: move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n \n error: aborting due to 7 previous errors\n "}, {"sha": "ea7683a91adfe92d21d6bb8a2cd7e1cd79fcb954", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -0,0 +1,13 @@\n+error[E0382]: use of moved value: `b`\n+  --> $DIR/borrowck-consume-unsize-vec.rs:8:13\n+   |\n+LL | fn foo(b: Box<[i32;5]>) {\n+   |        - move occurs because `b` has type `std::boxed::Box<[i32; 5]>`, which does not implement the `Copy` trait\n+LL |     consume(b);\n+   |             - value moved here\n+LL |     consume(b); //~ ERROR use of moved value\n+   |             ^ value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "15cf359326be96aea02e028e6ea26ba6a6d351c2", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `b`\n   --> $DIR/borrowck-consume-upcast-box.rs:10:13\n    |\n+LL | fn foo(b: Box<Foo+Send>) {\n+   |        - move occurs because `b` has type `std::boxed::Box<dyn Foo + std::marker::Send>`, which does not implement the `Copy` trait\n LL |     consume(b);\n    |             - value moved here\n LL |     consume(b); //~ ERROR use of moved value\n    |             ^ value used here after move\n-   |\n-   = note: move occurs because `b` has type `std::boxed::Box<dyn Foo + std::marker::Send>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "07b597f480feba33d7c40c018b55c80a6b18de8f", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,13 +1,14 @@\n error[E0382]: use of moved value: `my_str`\n   --> $DIR/borrowck-drop-from-guard.rs:11:23\n    |\n+LL |     let my_str = \"hello\".to_owned();\n+   |         ------ move occurs because `my_str` has type `std::string::String`, which does not implement the `Copy` trait\n+LL |     match Some(42) {\n LL |         Some(_) if { drop(my_str); false } => {}\n    |                           ------ value moved here\n LL |         Some(_) => {}\n LL |         None => { foo(my_str); } //~ ERROR [E0382]\n    |                       ^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `my_str` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "de4894d5b526b8e5baf7c6400836cbe765e3e502", "filename": "src/test/ui/borrowck/borrowck-issue-48962.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,22 +1,22 @@\n error[E0382]: use of moved value: `src`\n   --> $DIR/borrowck-issue-48962.rs:16:5\n    |\n+LL |     let mut src = &mut node;\n+   |         ------- move occurs because `src` has type `&mut Node`, which does not implement the `Copy` trait\n LL |     {src};\n    |      --- value moved here\n LL |     src.next = None; //~ ERROR use of moved value: `src` [E0382]\n    |     ^^^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `src` has type `&mut Node`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `src`\n   --> $DIR/borrowck-issue-48962.rs:22:5\n    |\n+LL |     let mut src = &mut (22, 44);\n+   |         ------- move occurs because `src` has type `&mut (i32, i32)`, which does not implement the `Copy` trait\n LL |     {src};\n    |      --- value moved here\n LL |     src.0 = 66; //~ ERROR use of moved value: `src` [E0382]\n    |     ^^^^^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `src` has type `&mut (i32, i32)`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "095ae7f56b22e5643219552e332d6538596c2a4c", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/borrowck-loan-in-overloaded-op.rs:21:20\n    |\n+LL |     let x = Foo(box 3);\n+   |         - move occurs because `x` has type `Foo`, which does not implement the `Copy` trait\n LL |     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n    |               -    ^ value borrowed here after move\n    |               |\n    |               value moved here\n-   |\n-   = note: move occurs because `x` has type `Foo`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "0789926563ce7fe6fdfcd07de377a7d2435cc185", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.ast.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.ast.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,6 +1,9 @@\n error[E0382]: use of moved value: `t`\n   --> $DIR/borrowck-move-moved-value-into-closure.rs:14:12\n    |\n+LL |     let t: Box<_> = box 3;\n+   |         - move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+LL | \n LL |     call_f(move|| { *t + 1 });\n    |            ------    - variable moved due to use in closure\n    |            |\n@@ -9,8 +12,6 @@ LL |     call_f(move|| { *t + 1 }); //[ast]~ ERROR capture of moved value\n    |            ^^^^^^    - use occurs due to use in closure\n    |            |\n    |            value used here after move\n-   |\n-   = note: move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "0789926563ce7fe6fdfcd07de377a7d2435cc185", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.mir.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.mir.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,6 +1,9 @@\n error[E0382]: use of moved value: `t`\n   --> $DIR/borrowck-move-moved-value-into-closure.rs:14:12\n    |\n+LL |     let t: Box<_> = box 3;\n+   |         - move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+LL | \n LL |     call_f(move|| { *t + 1 });\n    |            ------    - variable moved due to use in closure\n    |            |\n@@ -9,8 +12,6 @@ LL |     call_f(move|| { *t + 1 }); //[ast]~ ERROR capture of moved value\n    |            ^^^^^^    - use occurs due to use in closure\n    |            |\n    |            value used here after move\n-   |\n-   = note: move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "d0065a2e7dc3d817ee80f60761804a3b0403a91f", "filename": "src/test/ui/borrowck/borrowck-multiple-captures.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -29,28 +29,28 @@ LL |     borrow(&*p2);\n error[E0382]: use of moved value: `x1`\n   --> $DIR/borrowck-multiple-captures.rs:25:19\n    |\n+LL |     let x1: Box<_> = box 1;\n+   |         -- move occurs because `x1` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n LL |     drop(x1);\n    |          -- value moved here\n ...\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ value used here after move\n LL |         drop(x1); //~ ERROR capture of moved value: `x1`\n    |              -- use occurs due to use in closure\n-   |\n-   = note: move occurs because `x1` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x2`\n   --> $DIR/borrowck-multiple-captures.rs:25:19\n    |\n+LL |     let x2: Box<_> = box 2;\n+   |         -- move occurs because `x2` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n LL |     drop(x2);\n    |          -- value moved here\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ value used here after move\n LL |         drop(x1); //~ ERROR capture of moved value: `x1`\n LL |         drop(x2); //~ ERROR capture of moved value: `x2`\n    |              -- use occurs due to use in closure\n-   |\n-   = note: move occurs because `x2` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:36:14\n@@ -88,14 +88,14 @@ LL |         drop(x); //~ ERROR use of moved value: `x`\n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:44:19\n    |\n+LL |     let x: Box<_> = box 1;\n+   |         - move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n LL |     drop(x);\n    |          - value moved here\n LL |     thread::spawn(move|| {\n    |                   ^^^^^^ value used here after move\n LL |         drop(x); //~ ERROR capture of moved value: `x`\n    |              - use occurs due to use in closure\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to 8 previous errors\n "}, {"sha": "c5a4c4e005aa7d8177ee6e85b37b13ddd5766758", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -20,12 +20,13 @@ LL |     s(3);   //~ ERROR cannot borrow immutable local variable `s` as mutable\n error[E0382]: use of moved value: `s`\n   --> $DIR/borrowck-overloaded-call.rs:75:5\n    |\n+LL |     let s = SFnOnce {\n+   |         - move occurs because `s` has type `SFnOnce`, which does not implement the `Copy` trait\n+...\n LL |     s(\" world\".to_string());\n    |     - value moved here\n LL |     s(\" world\".to_string());    //~ ERROR use of moved value: `s`\n    |     ^ value used here after move\n-   |\n-   = note: move occurs because `s` has type `SFnOnce`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "de60067f1a613702080d4b60dccd47cbad3177bf", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-index.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -25,13 +25,14 @@ LL |     use_mut(rs);\n error[E0382]: use of moved value: `s`\n   --> $DIR/borrowck-overloaded-index-move-index.rs:53:7\n    |\n+LL |     let mut s = \"hello\".to_string();\n+   |         ----- move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+...\n LL |     println!(\"{}\", f[s]);\n    |                      - value moved here\n ...\n LL |     f[s] = 10;\n    |       ^ value used here after move\n-   |\n-   = note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "65f2bd6cfbda9c1b113e6f511051aa3f7f2dd0f0", "filename": "src/test/ui/borrowck/borrowck-partial-reinit-1.nll.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-1.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,22 +1,24 @@\n error[E0382]: assign of moved value: `t`\n   --> $DIR/borrowck-partial-reinit-1.rs:27:5\n    |\n+LL |     let mut t = Test2 { b: None };\n+   |         ----- move occurs because `t` has type `Test2`, which does not implement the `Copy` trait\n+LL |     let u = Test;\n LL |     drop(t);\n    |          - value moved here\n LL |     t.b = Some(u);\n    |     ^^^ value assigned here after move\n-   |\n-   = note: move occurs because `t` has type `Test2`, which does not implement the `Copy` trait\n \n error[E0382]: assign of moved value: `t`\n   --> $DIR/borrowck-partial-reinit-1.rs:33:5\n    |\n+LL |     let mut t = Test3(None);\n+   |         ----- move occurs because `t` has type `Test3`, which does not implement the `Copy` trait\n+LL |     let u = Test;\n LL |     drop(t);\n    |          - value moved here\n LL |     t.0 = Some(u);\n    |     ^^^ value assigned here after move\n-   |\n-   = note: move occurs because `t` has type `Test3`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "36a871fbb12a18d2bc2ef5e59f113be8b3a6bd01", "filename": "src/test/ui/borrowck/borrowck-partial-reinit-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-partial-reinit-2.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: assign of moved value: `t`\n   --> $DIR/borrowck-partial-reinit-2.rs:15:5\n    |\n+LL |     let mut t = Test { a: 1, b: None};\n+   |         ----- move occurs because `t` has type `Test`, which does not implement the `Copy` trait\n LL |     let mut u = Test { a: 2, b: Some(Box::new(t))};\n    |                                               - value moved here\n LL |     t.b = Some(Box::new(u));\n    |     ^^^ value assigned here after move\n-   |\n-   = note: move occurs because `t` has type `Test`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "96f3981ac2fe6b0c8eed50b25ebfa8b647df1a84", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -11,12 +11,13 @@ LL |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n error[E0382]: use of moved value: `x` (Mir)\n   --> $DIR/borrowck-reinit.rs:8:16\n    |\n+LL |     let mut x = Box::new(0);\n+   |         ----- move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+...\n LL |     drop(x);\n    |          - value moved here\n LL |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n    |                ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "363a5a69a07e394db6db4c63cf3706125b45473a", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.nll.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -19,12 +19,14 @@ LL |     f(1, 2);    //~ ERROR cannot borrow immutable argument\n error[E0382]: use of moved value: `f`\n   --> $DIR/borrowck-unboxed-closures.rs:12:5\n    |\n+LL | fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n+   |      -                                - move occurs because `f` has type `F`, which does not implement the `Copy` trait\n+   |      |\n+   |      consider adding a `Copy` constraint to this type argument\n LL |     f(1, 2);\n    |     - value moved here\n LL |     f(1, 2);    //~ ERROR use of moved value\n    |     ^ value used here after move\n-   |\n-   = note: move occurs because `f` has type `F`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e59fef2dc0d2f181305f5869861ac55931ab58b2", "filename": "src/test/ui/borrowck/borrowck-union-move-assign.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move-assign.rs:17:21\n    |\n+LL |             let mut u = U { a: A };\n+   |                 ----- move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |             let a = u.a;\n    |                     --- value moved here\n LL |             let a = u.a; //~ ERROR use of moved value: `u.a`\n    |                     ^^^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "1392a7931c30a157bb0e3f5eaa4e384bebd484c2", "filename": "src/test/ui/borrowck/borrowck-union-move.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,62 +1,62 @@\n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:26:21\n    |\n+LL |             let mut u = Unn { n1: NonCopy };\n+   |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n LL |             let a = u.n1; //~ ERROR use of moved value: `u.n1`\n    |                     ^^^^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:31:21\n    |\n+LL |             let mut u = Unn { n1: NonCopy };\n+   |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n LL |             let a = u; //~ ERROR use of partially moved value: `u`\n    |                     ^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:36:21\n    |\n+LL |             let mut u = Unn { n1: NonCopy };\n+   |                 ----- move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n LL |             let a = u.n1;\n    |                     ---- value moved here\n LL |             let a = u.n2; //~ ERROR use of moved value: `u.n2`\n    |                     ^^^^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `Unn`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:63:21\n    |\n+LL |             let mut u = Ucn { c: Copy };\n+   |                 ----- move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n LL |             let a = u.n;\n    |                     --- value moved here\n LL |             let a = u.n; //~ ERROR use of moved value: `u.n`\n    |                     ^^^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:68:21\n    |\n+LL |             let mut u = Ucn { c: Copy };\n+   |                 ----- move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n LL |             let a = u.n;\n    |                     --- value moved here\n LL |             let a = u.c; //~ ERROR use of moved value: `u.c`\n    |                     ^^^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `u`\n   --> $DIR/borrowck-union-move.rs:83:21\n    |\n+LL |             let mut u = Ucn { c: Copy };\n+   |                 ----- move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n LL |             let a = u.n;\n    |                     --- value moved here\n LL |             let a = u; //~ ERROR use of partially moved value: `u`\n    |                     ^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `Ucn`, which does not implement the `Copy` trait\n \n error: aborting due to 6 previous errors\n "}, {"sha": "42aa03817023813b752a67cc69ba2a93ed5a21a5", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-moved-out-with-mut.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,32 +1,32 @@\n error[E0382]: assign to part of moved value: `t`\n   --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:23:9\n    |\n+LL |         let mut t: Tuple = (S(0), 0);\n+   |             ----- move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n LL |         drop(t);\n    |              - value moved here\n LL |         t.0 = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `u`\n   --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:34:9\n    |\n+LL |         let mut u: Tpair = Tpair(S(0), 0);\n+   |             ----- move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n LL |         drop(u);\n    |              - value moved here\n LL |         u.0 = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `v`\n   --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:45:9\n    |\n+LL |         let mut v: Spair = Spair { x: S(0), y: 0 };\n+   |             ----- move occurs because `v` has type `Spair`, which does not implement the `Copy` trait\n LL |         drop(v);\n    |              - value moved here\n LL |         v.x = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `v` has type `Spair`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1184907f307cb8e541568f794858646e61c2aee8", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-moved-out.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -10,12 +10,12 @@ LL |         t.0 = S(1);\n error[E0382]: assign to part of moved value: `t`\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:23:9\n    |\n+LL |         let t: Tuple = (S(0), 0);\n+   |             - move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n LL |         drop(t);\n    |              - value moved here\n LL |         t.0 = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n \n error[E0594]: cannot assign to `t.1`, as `t` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:27:9\n@@ -38,12 +38,12 @@ LL |         u.0 = S(1);\n error[E0382]: assign to part of moved value: `u`\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:38:9\n    |\n+LL |         let u: Tpair = Tpair(S(0), 0);\n+   |             - move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n LL |         drop(u);\n    |              - value moved here\n LL |         u.0 = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n \n error[E0594]: cannot assign to `u.1`, as `u` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:42:9\n@@ -66,12 +66,12 @@ LL |         v.x = S(1);\n error[E0382]: assign to part of moved value: `v`\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:53:9\n    |\n+LL |         let v: Spair = Spair { x: S(0), y: 0 };\n+   |             - move occurs because `v` has type `Spair`, which does not implement the `Copy` trait\n LL |         drop(v);\n    |              - value moved here\n LL |         v.x = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `v` has type `Spair`, which does not implement the `Copy` trait\n \n error[E0594]: cannot assign to `v.y`, as `v` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:57:9"}, {"sha": "d026f81b7aad6f2ea7af7620f97c2f02dc0759f2", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -10,6 +10,8 @@ LL |         f(f(10));\n error[E0382]: use of moved value: `*f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:69:11\n    |\n+LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n+   |                     - consider adding a `Copy` constraint to this type argument\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |"}, {"sha": "d026f81b7aad6f2ea7af7620f97c2f02dc0759f2", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -10,6 +10,8 @@ LL |         f(f(10));\n error[E0382]: use of moved value: `*f`\n   --> $DIR/two-phase-nonrecv-autoref.rs:69:11\n    |\n+LL |     fn twice_ten_so<F: FnOnce(i32) -> i32>(f: Box<F>) {\n+   |                     - consider adding a `Copy` constraint to this type argument\n LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |"}, {"sha": "3b8507a067ded31725ab9219b7ce445c9417ca9a", "filename": "src/test/ui/codemap_tests/tab_3.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,13 +1,13 @@\n error[E0382]: borrow of moved value: `some_vec`\n   --> $DIR/tab_3.rs:7:20\n    |\n+LL |     let some_vec = vec![\"hi\"];\n+   |         -------- move occurs because `some_vec` has type `std::vec::Vec<&str>`, which does not implement the `Copy` trait\n LL |     some_vec.into_iter();\n    |     -------- value moved here\n LL |     {\n LL |         println!(\"{:?}\", some_vec); //~ ERROR use of moved\n    |                          ^^^^^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `some_vec` has type `std::vec::Vec<&str>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "20198f19dd5f54286075b5d9d4631ef28fbe6313", "filename": "src/test/ui/issues/issue-17385.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-17385.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-17385.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17385.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,23 +1,23 @@\n error[E0382]: use of moved value: `foo`\n   --> $DIR/issue-17385.rs:19:11\n    |\n+LL |     let foo = X(1);\n+   |         --- move occurs because `foo` has type `X`, which does not implement the `Copy` trait\n LL |     drop(foo);\n    |          --- value moved here\n LL |     match foo { //~ ERROR use of moved value\n LL |         X(1) => (),\n    |           ^ value used here after move\n-   |\n-   = note: move occurs because `foo` has type `X`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `e`\n   --> $DIR/issue-17385.rs:25:11\n    |\n+LL |     let e = Enum::Variant2;\n+   |         - move occurs because `e` has type `Enum`, which does not implement the `Copy` trait\n LL |     drop(e);\n    |          - value moved here\n LL |     match e { //~ ERROR use of moved value\n    |           ^ value used here after move\n-   |\n-   = note: move occurs because `e` has type `Enum`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "310535434cd0807185a8e358cf98d7653b8fcba8", "filename": "src/test/ui/issues/issue-24357.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-24357.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-24357.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24357.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,15 +1,15 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/issue-24357.rs:6:12\n    |\n+LL |    let x = NoCopy;\n+   |        - move occurs because `x` has type `NoCopy`, which does not implement the `Copy` trait\n LL |    let f = move || { let y = x; };\n    |            -------           - variable moved due to use in closure\n    |            |\n    |            value moved into closure here\n LL |    //~^ NOTE value moved (into closure) here\n LL |    let z = x;\n    |            ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `NoCopy`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "ba5403cca4d067f70f3507090e58158578d196a3", "filename": "src/test/ui/issues/issue-25700.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-25700.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-25700.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25700.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -0,0 +1,13 @@\n+error[E0382]: use of moved value: `t`\n+  --> $DIR/issue-25700.rs:13:10\n+   |\n+LL |     let t = S::<()>(None);\n+   |         - move occurs because `t` has type `S<()>`, which does not implement the `Copy` trait\n+LL |     drop(t);\n+   |          - value moved here\n+LL |     drop(t); //~ ERROR use of moved value\n+   |          ^ value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "6993419326c8e259323af3375cad48dba34e786c", "filename": "src/test/ui/issues/issue-27282-move-match-input-into-guard.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,15 +1,16 @@\n error[E0382]: use of moved value: `b`\n   --> $DIR/issue-27282-move-match-input-into-guard.rs:18:14\n    |\n+LL |     let b = &mut true;\n+   |         - move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait\n+...\n LL |         _ if { (|| { let bar = b; *bar = false; })();\n    |                 --             - variable moved due to use in closure\n    |                 |\n    |                 value moved into closure here\n LL |                      false } => { },\n LL |         &mut true => { println!(\"You might think we should get here\"); },\n    |              ^^^^ value used here after move\n-   |\n-   = note: move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "7928af5d5a5cd654df408173042b7b43be444fb4", "filename": "src/test/ui/issues/issue-29723.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,13 +1,14 @@\n error[E0382]: use of moved value: `s`\n   --> $DIR/issue-29723.rs:12:13\n    |\n+LL |     let s = String::new();\n+   |         - move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+LL |     let _s = match 0 {\n LL |         0 if { drop(s); false } => String::from(\"oops\"),\n    |                     - value moved here\n ...\n LL |             s\n    |             ^ value used here after move\n-   |\n-   = note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "226c21446b1ed5022795e7c8445e6cf09a4d2d75", "filename": "src/test/ui/issues/issue-34721.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.rs?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -0,0 +1,34 @@\n+#![feature(nll)]\n+\n+pub trait Foo {\n+    fn zero(self) -> Self;\n+}\n+\n+impl Foo for u32 {\n+    fn zero(self) -> u32 { 0u32 }\n+}\n+\n+pub mod bar {\n+    pub use Foo;\n+    pub fn bar<T: Foo>(x: T) -> T {\n+      x.zero()\n+    }\n+}\n+\n+mod baz {\n+    use bar;\n+    use Foo;\n+    pub fn baz<T: Foo>(x: T) -> T {\n+        if 0 == 1 {\n+            bar::bar(x.zero())\n+        } else {\n+            x.zero()\n+        };\n+        x.zero()\n+        //~^ ERROR use of moved value\n+    }\n+}\n+\n+fn main() {\n+    let _ = baz::baz(0u32);\n+}"}, {"sha": "2ed7b543e713c8b691e0e098b639793a995d9929", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -0,0 +1,20 @@\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/issue-34721.rs:27:9\n+   |\n+LL |     pub fn baz<T: Foo>(x: T) -> T {\n+   |                -       - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |                |\n+   |                consider adding a `Copy` constraint to this type argument\n+LL |         if 0 == 1 {\n+LL |             bar::bar(x.zero())\n+   |                      - value moved here\n+LL |         } else {\n+LL |             x.zero()\n+   |             - value moved here\n+LL |         };\n+LL |         x.zero()\n+   |         ^ value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "23cc88bab52d54dd7e83d3d4828784cd48e72394", "filename": "src/test/ui/issues/issue-42796.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-42796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fissues%2Fissue-42796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42796.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,13 +1,13 @@\n error[E0382]: borrow of moved value: `s`\n   --> $DIR/issue-42796.rs:18:20\n    |\n+LL |     let s = \"Hello!\".to_owned();\n+   |         - move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let mut s_copy = s;\n    |                      - value moved here\n ...\n LL |     println!(\"{}\", s); //~ ERROR use of moved value\n    |                    ^ value borrowed here after move\n-   |\n-   = note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "521304d560554850b7cfaa1498471c9c0a879774", "filename": "src/test/ui/liveness/liveness-move-call-arg.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,10 +1,11 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/liveness-move-call-arg.rs:9:14\n    |\n+LL |     let x: Box<isize> = box 25;\n+   |         - move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+LL |     loop {\n LL |         take(x); //~ ERROR use of moved value: `x`\n    |              ^ value moved here, in previous iteration of loop\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "b7e973bc9140d3ef3ef9d788a41ad2948247eede", "filename": "src/test/ui/liveness/liveness-move-in-loop.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,10 +1,11 @@\n error[E0382]: use of moved value: `y`\n   --> $DIR/liveness-move-in-loop.rs:11:25\n    |\n+LL |     let y: Box<isize> = box 42;\n+   |         - move occurs because `y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+...\n LL |                     x = y; //~ ERROR use of moved value\n    |                         ^ value moved here, in previous iteration of loop\n-   |\n-   = note: move occurs because `y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "167dcc6b6437207a70fdecfdee6ead7e7eacfab0", "filename": "src/test/ui/liveness/liveness-move-in-while.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,13 @@\n error[E0382]: borrow of moved value: `y`\n   --> $DIR/liveness-move-in-while.rs:7:24\n    |\n+LL |     let y: Box<isize> = box 42;\n+   |         - move occurs because `y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+...\n LL |         println!(\"{}\", y); //~ ERROR use of moved value: `y`\n    |                        ^ value borrowed here after move\n LL |         while true { while true { while true { x = y; x.clone(); } } }\n    |                                                    - value moved here, in previous iteration of loop\n-   |\n-   = note: move occurs because `y` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "36c25882ccd4f6ddfc75b36b44324f0cb957be57", "filename": "src/test/ui/liveness/liveness-use-after-move.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/liveness-use-after-move.rs:6:20\n    |\n+LL |     let x: Box<_> = box 5;\n+   |         - move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n LL |     let y = x;\n    |             - value moved here\n LL |     println!(\"{}\", *x); //~ ERROR use of moved value: `*x`\n    |                    ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "d9367c871165a72d93bbe3714436f74bee56884d", "filename": "src/test/ui/liveness/liveness-use-after-send.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: borrow of moved value: `message`\n   --> $DIR/liveness-use-after-send.rs:16:20\n    |\n+LL | fn test00_start(ch: Chan<Box<isize>>, message: Box<isize>, _count: Box<isize>) {\n+   |                                       ------- move occurs because `message` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n LL |     send(ch, message);\n    |              ------- value moved here\n LL |     println!(\"{}\", message); //~ ERROR use of moved value: `message`\n    |                    ^^^^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `message` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "43f99cabcae947cc5a9cc7af43ea3f4179fd0ccf", "filename": "src/test/ui/moves/move-guard-same-consts.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -0,0 +1,14 @@\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/move-guard-same-consts.rs:20:24\n+   |\n+LL |     let x: Box<_> = box 1;\n+   |         - move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+...\n+LL |         (1, 2) if take(x) => (),\n+   |                        - value moved here\n+LL |         (1, 2) if take(x) => (), //~ ERROR use of moved value: `x`\n+   |                        ^ value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "41abe6fa72a57abd163844617e1382191d636a8d", "filename": "src/test/ui/moves/move-in-guard-1.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -0,0 +1,14 @@\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/move-in-guard-1.rs:10:24\n+   |\n+LL |     let x: Box<_> = box 1;\n+   |         - move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+...\n+LL |         (1, _) if take(x) => (),\n+   |                        - value moved here\n+LL |         (_, 2) if take(x) => (), //~ ERROR use of moved value: `x`\n+   |                        ^ value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "0b14c1620d3cf17e5865486d1c69a57f53553fdc", "filename": "src/test/ui/moves/move-in-guard-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,10 +1,11 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/move-in-guard-2.rs:10:24\n    |\n+LL |     let x: Box<_> = box 1;\n+   |         - move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+...\n LL |         (_, 2) if take(x) => (), //~ ERROR use of moved value: `x`\n    |                        ^ value moved here, in previous iteration of loop\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "20bfdc2bbac7202a5f0c2d118ea2ea32a48fa8a8", "filename": "src/test/ui/moves/move-into-dead-array-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-2.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `a`\n   --> $DIR/move-into-dead-array-2.rs:14:5\n    |\n+LL | fn foo(mut a: [D; 4], i: usize) {\n+   |        ----- move occurs because `a` has type `[D; 4]`, which does not implement the `Copy` trait\n LL |     drop(a);\n    |          - value moved here\n LL |     a[i] = d(); //~ ERROR use of moved value: `a`\n    |     ^^^^ value used here after move\n-   |\n-   = note: move occurs because `a` has type `[D; 4]`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "6ad9a2d414c77027be2c0ba75dd86ea0d066a3bd", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-access-to-field.rs:11:12\n    |\n+LL |     let x = vec![\"hi\".to_string()];\n+   |         - move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n LL |     consume(x.into_iter().next().unwrap());\n    |             - value moved here\n LL |     touch(&x[0]); //~ ERROR use of moved value: `x`\n    |            ^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "bed0ae7275cc525cd9d4960db3d77ee9f2775cf3", "filename": "src/test/ui/moves/moves-based-on-type-capture-clause-bad.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,15 +1,15 @@\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-capture-clause-bad.rs:8:20\n    |\n+LL |     let x = \"Hello world!\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     thread::spawn(move|| {\n    |                   ------ value moved into closure here\n LL |         println!(\"{}\", x);\n    |                        - variable moved due to use in closure\n LL |     });\n LL |     println!(\"{}\", x); //~ ERROR use of moved value\n    |                    ^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "07f40274f9e310f129e823cb7ae4b1d478cc15de", "filename": "src/test/ui/moves/moves-based-on-type-distribute-copy-over-paren.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,24 +1,24 @@\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-distribute-copy-over-paren.rs:11:11\n    |\n+LL |     let x = \"hi\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = Foo { f:x };\n    |                      - value moved here\n LL |     //~^ NOTE value moved here\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-distribute-copy-over-paren.rs:20:11\n    |\n+LL |     let x = \"hi\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = Foo { f:(((x))) };\n    |                      ------- value moved here\n LL |     //~^ NOTE value moved here\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "162aec45f5f5743453f616c7c965b00880c8d3ec", "filename": "src/test/ui/moves/moves-based-on-type-exprs.nll.stderr", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,117 +1,122 @@\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:12:11\n    |\n+LL |     let x = \"hi\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = Foo { f:x };\n    |                      - value moved here\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:18:11\n    |\n+LL |     let x = \"hi\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = (x, 3);\n    |               - value moved here\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:35:11\n    |\n+LL |     let x = \"hi\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+...\n LL |         x\n    |         - value moved here\n ...\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `y`\n   --> $DIR/moves-based-on-type-exprs.rs:36:11\n    |\n+LL |     let y = \"ho\".to_string();\n+   |         - move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n+...\n LL |         y\n    |         - value moved here\n ...\n LL |     touch(&y); //~ ERROR use of moved value: `y`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:46:11\n    |\n+LL |     let x = \"hi\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+...\n LL |         true => x,\n    |                 - value moved here\n ...\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `y`\n   --> $DIR/moves-based-on-type-exprs.rs:47:11\n    |\n+LL |     let y = \"ho\".to_string();\n+   |         - move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n+...\n LL |         false => y\n    |                  - value moved here\n ...\n LL |     touch(&y); //~ ERROR use of moved value: `y`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `y` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:58:11\n    |\n+LL |     let x = \"hi\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+...\n LL |         _ if guard(x) => 10,\n    |                    - value moved here\n ...\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:65:11\n    |\n+LL |     let x = \"hi\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = [x];\n    |               - value moved here\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:71:11\n    |\n+LL |     let x = \"hi\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = vec![x];\n    |                   - value moved here\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:77:11\n    |\n+LL |     let x = vec![\"hi\".to_string()];\n+   |         - move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n LL |     let _y = x.into_iter().next().unwrap();\n    |              - value moved here\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:83:11\n    |\n+LL |     let x = vec![\"hi\".to_string()];\n+   |         - move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n LL |     let _y = [x.into_iter().next().unwrap(); 1];\n    |               - value moved here\n LL |     touch(&x); //~ ERROR use of moved value: `x`\n    |           ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n \n error: aborting due to 11 previous errors\n "}, {"sha": "391dd67dbf60aa469c7fad3a83c7afb5b57d74cf", "filename": "src/test/ui/moves/moves-based-on-type-no-recursive-stack-closure.nll.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-no-recursive-stack-closure.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -10,12 +10,14 @@ LL |                     (f.c)(f, true);\n error[E0382]: borrow of moved value: `f`\n   --> $DIR/moves-based-on-type-no-recursive-stack-closure.rs:32:5\n    |\n+LL | fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n+   |                -  ----- move occurs because `f` has type `F`, which does not implement the `Copy` trait\n+   |                |\n+   |                consider adding a `Copy` constraint to this type argument\n LL |     let mut r = R {c: Box::new(f)};\n    |                                - value moved here\n LL |     f(&mut r, false) //~ ERROR use of moved value\n    |     ^ value borrowed here after move\n-   |\n-   = note: move occurs because `f` has type `F`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c49dbdab402108d534b89a9f62d4be3bc522ebf8", "filename": "src/test/ui/moves/moves-based-on-type-tuple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -11,12 +11,12 @@ LL |     box (x, x)\n error[E0382]: use of moved value: `x` (Mir)\n   --> $DIR/moves-based-on-type-tuple.rs:6:13\n    |\n+LL | fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> {\n+   |        - move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n LL |     box (x, x)\n    |          -  ^ value used here after move\n    |          |\n    |          value moved here\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3ca0aefb592e0898ce1409b5a4924757d35ec897", "filename": "src/test/ui/nll/closure-access-spans.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -59,50 +59,50 @@ LL |     r.use_ref();\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:37:5\n    |\n+LL | fn closure_imm_capture_moved(mut x: String) {\n+   |                              ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let r = x;\n    |             - value moved here\n LL |     || x.len(); //~ ERROR\n    |     ^^ - borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:42:5\n    |\n+LL | fn closure_mut_capture_moved(mut x: String) {\n+   |                              ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let r = x;\n    |             - value moved here\n LL |     || x = String::new(); //~ ERROR\n    |     ^^ - borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:47:5\n    |\n+LL | fn closure_unique_capture_moved(x: &mut String) {\n+   |                                 - move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n LL |     let r = x;\n    |             - value moved here\n LL |     || *x = String::new(); //~ ERROR\n    |     ^^  - borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/closure-access-spans.rs:52:5\n    |\n+LL | fn closure_move_capture_moved(x: &mut String) {\n+   |                               - move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n LL |     let r = x;\n    |             - value moved here\n LL |     || x; //~ ERROR\n    |     ^^ - use occurs due to use in closure\n    |     |\n    |     value used here after move\n-   |\n-   = note: move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to 9 previous errors\n "}, {"sha": "6750c4047601a4b4627c10e760db135cca52ee44", "filename": "src/test/ui/nll/closure-move-spans.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,38 +1,38 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/closure-move-spans.rs:7:13\n    |\n+LL | fn move_after_move(x: String) {\n+   |                    - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     || x;\n    |     -- - variable moved due to use in closure\n    |     |\n    |     value moved into closure here\n LL |     let y = x; //~ ERROR\n    |             ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-move-spans.rs:12:13\n    |\n+LL | fn borrow_after_move(x: String) {\n+   |                      - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     || x;\n    |     -- - variable moved due to use in closure\n    |     |\n    |     value moved into closure here\n LL |     let y = &x; //~ ERROR\n    |             ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-move-spans.rs:17:13\n    |\n+LL | fn borrow_mut_after_move(mut x: String) {\n+   |                          ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     || x;\n    |     -- - variable moved due to use in closure\n    |     |\n    |     value moved into closure here\n LL |     let y = &mut x; //~ ERROR\n    |             ^^^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6c9e1639f88dd7f6c8066a9ee841dd8178a4bff3", "filename": "src/test/ui/nll/closures-in-loops.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,13 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/closures-in-loops.rs:8:9\n    |\n+LL | fn repreated_move(x: String) {\n+   |                   - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+LL |     for i in 0..10 {\n LL |         || x; //~ ERROR\n    |         ^^ - use occurs due to use in closure\n    |         |\n    |         value moved into closure here, in previous iteration of loop\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/closures-in-loops.rs:15:16"}, {"sha": "54c728e3d2783fdb1e6c53bdb672cf1f8353a58d", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -13,12 +13,12 @@ LL |     d.x = 10;\n error[E0382]: assign of moved value: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:43:5\n    |\n+LL |     let mut d = D { x: 0, s: S{ y: 0, z: 0 } };\n+   |         ----- move occurs because `d` has type `D`, which does not implement the `Copy` trait\n LL |     drop(d);\n    |          - value moved here\n LL |     d.x = 10;\n    |     ^^^^^^^^ value assigned here after move\n-   |\n-   = note: move occurs because `d` has type `D`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly uninitialized variable: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:49:5\n@@ -35,12 +35,12 @@ LL |     d.s.y = 20;\n error[E0382]: assign to part of moved value: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:62:5\n    |\n+LL |     let mut d = D { x: 0, s: S{ y: 0, z: 0} };\n+   |         ----- move occurs because `d` has type `D`, which does not implement the `Copy` trait\n LL |     drop(d);\n    |          - value moved here\n LL |     d.s.y = 20;\n    |     ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `d` has type `D`, which does not implement the `Copy` trait\n \n error: aborting due to 6 previous errors\n "}, {"sha": "23da533252cb9c6e64a4a7416410162c6f5c6f99", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.stderr", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -14,21 +14,21 @@ error[E0382]: assign to part of moved value: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:113:5\n    |\n LL |     let mut s: S<B> = S::new(); drop(s);\n-   |                                      - value moved here\n+   |         -----                        - value moved here\n+   |         |\n+   |         move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait\n LL |     s.x = 10; s.y = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `t`\n   --> $DIR/issue-21232-partial-init-and-use.rs:120:5\n    |\n LL |     let mut t: T = (0, Box::new(0)); drop(t);\n-   |                                           - value moved here\n+   |         -----                             - value moved here\n+   |         |\n+   |         move occurs because `t` has type `(u32, std::boxed::Box<u32>)`, which does not implement the `Copy` trait\n LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `t` has type `(u32, std::boxed::Box<u32>)`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly uninitialized variable: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:127:5\n@@ -46,21 +46,21 @@ error[E0382]: assign to part of moved value: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:141:5\n    |\n LL |     let mut s: S<B> = S::new(); drop(s);\n-   |                                      - value moved here\n+   |         -----                        - value moved here\n+   |         |\n+   |         move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait\n LL |     s.x = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `t`\n   --> $DIR/issue-21232-partial-init-and-use.rs:148:5\n    |\n LL |     let mut t: T = (0, Box::new(0)); drop(t);\n-   |                                           - value moved here\n+   |         -----                             - value moved here\n+   |         |\n+   |         move occurs because `t` has type `(u32, std::boxed::Box<u32>)`, which does not implement the `Copy` trait\n LL |     t.0 = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `t` has type `(u32, std::boxed::Box<u32>)`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly uninitialized variable: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:155:5\n@@ -153,22 +153,24 @@ LL |     q.r.f.0 = 10;\n error[E0382]: assign to part of moved value: `c`\n   --> $DIR/issue-21232-partial-init-and-use.rs:259:13\n    |\n+LL |     let mut c = (1, \"\".to_owned());\n+   |         ----- move occurs because `c` has type `(i32, std::string::String)`, which does not implement the `Copy` trait\n+LL |     match c {\n LL |         c2 => {\n    |         -- value moved here\n LL |             c.0 = 2; //~ ERROR assign to part of moved value\n    |             ^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `c` has type `(i32, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `c`\n   --> $DIR/issue-21232-partial-init-and-use.rs:269:13\n    |\n+LL |     let mut c = (1, (1, \"\".to_owned()));\n+   |         ----- move occurs because `c` has type `(i32, (i32, std::string::String))`, which does not implement the `Copy` trait\n+LL |     match c {\n LL |         c2 => {\n    |         -- value moved here\n LL |             (c.1).0 = 2; //~ ERROR assign to part of moved value\n    |             ^^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `c` has type `(i32, (i32, std::string::String))`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `c.1`\n   --> $DIR/issue-21232-partial-init-and-use.rs:277:13"}, {"sha": "a84a236ca77722995b7c5760985dc6f51d0d1236", "filename": "src/test/ui/nll/issue-51512.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `range`\n   --> $DIR/issue-51512.rs:7:13\n    |\n+LL |     let range = 0..1;\n+   |         ----- move occurs because `range` has type `std::ops::Range<i32>`, which does not implement the `Copy` trait\n LL |     let r = range;\n    |             ----- value moved here\n LL |     let x = range.start;\n    |             ^^^^^^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `range` has type `std::ops::Range<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "f51768c3859e4f3244ed795bdb74e56f9153d309", "filename": "src/test/ui/nll/issue-52669.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,13 @@\n error[E0382]: borrow of moved value: `a.b`\n   --> $DIR/issue-52669.rs:15:5\n    |\n+LL | fn bar(mut a: A) -> B {\n+   |        ----- move occurs because `a` has type `A`, which does not implement the `Copy` trait\n+LL |     a.b = B;\n LL |     foo(a);\n    |         - value moved here\n LL |     a.b.clone()\n    |     ^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `a` has type `A`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "476b6f75abb46b569595054dc363fae9dd51b168", "filename": "src/test/ui/no-capture-arc.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fno-capture-arc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fno-capture-arc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-capture-arc.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,15 +1,16 @@\n error[E0382]: borrow of moved value: `arc_v`\n   --> $DIR/no-capture-arc.rs:14:18\n    |\n+LL |     let arc_v = Arc::new(v);\n+   |         ----- move occurs because `arc_v` has type `std::sync::Arc<std::vec::Vec<i32>>`, which does not implement the `Copy` trait\n+LL | \n LL |     thread::spawn(move|| {\n    |                   ------ value moved into closure here\n LL |         assert_eq!((*arc_v)[3], 4);\n    |                      ----- variable moved due to use in closure\n ...\n LL |     assert_eq!((*arc_v)[2], 3);\n    |                  ^^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `arc_v` has type `std::sync::Arc<std::vec::Vec<i32>>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "0b14f65a770733b8894a9fcefbe21bfc0fca7876", "filename": "src/test/ui/no-reuse-move-arc.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fno-reuse-move-arc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fno-reuse-move-arc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-reuse-move-arc.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,15 +1,16 @@\n error[E0382]: borrow of moved value: `arc_v`\n   --> $DIR/no-reuse-move-arc.rs:12:18\n    |\n+LL |     let arc_v = Arc::new(v);\n+   |         ----- move occurs because `arc_v` has type `std::sync::Arc<std::vec::Vec<i32>>`, which does not implement the `Copy` trait\n+LL | \n LL |     thread::spawn(move|| {\n    |                   ------ value moved into closure here\n LL |         assert_eq!((*arc_v)[3], 4);\n    |                      ----- variable moved due to use in closure\n ...\n LL |     assert_eq!((*arc_v)[2], 3); //~ ERROR use of moved value: `arc_v`\n    |                  ^^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `arc_v` has type `std::sync::Arc<std::vec::Vec<i32>>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "ea53abc1b0f2d05d1551b94781a37ca227dbbc94", "filename": "src/test/ui/once-cant-call-twice-on-heap.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -0,0 +1,15 @@\n+error[E0382]: use of moved value: `blk`\n+  --> $DIR/once-cant-call-twice-on-heap.rs:9:5\n+   |\n+LL | fn foo<F:FnOnce()>(blk: F) {\n+   |        -           --- move occurs because `blk` has type `F`, which does not implement the `Copy` trait\n+   |        |\n+   |        consider adding a `Copy` constraint to this type argument\n+LL |     blk();\n+   |     --- value moved here\n+LL |     blk(); //~ ERROR use of moved value\n+   |     ^^^ value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "bef8dcca921e61a2b20b9cfe3c62af8e46bde921", "filename": "src/test/ui/ref-suggestion.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fref-suggestion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fref-suggestion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fref-suggestion.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,22 +1,22 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/ref-suggestion.rs:4:5\n    |\n+LL |     let x = vec![1];\n+   |         - move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n LL |     let y = x;\n    |             - value moved here\n LL |     x; //~ ERROR use of moved value\n    |     ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/ref-suggestion.rs:8:5\n    |\n+LL |     let x = vec![1];\n+   |         - move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n LL |     let mut y = x;\n    |                 - value moved here\n LL |     x; //~ ERROR use of moved value\n    |     ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/ref-suggestion.rs:16:5"}, {"sha": "5a730ad2be42c67bd8d8994949990bd5f2686baf", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.nll.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,13 @@\n error[E0382]: use of moved value: `a`\n   --> $DIR/dbg-macro-move-semantics.rs:9:18\n    |\n+LL |     let a = NoCopy(0);\n+   |         - move occurs because `a` has type `NoCopy`, which does not implement the `Copy` trait\n LL |     let _ = dbg!(a);\n    |             ------- value moved here\n LL |     let _ = dbg!(a); //~ ERROR use of moved value\n    |                  ^ value used here after move\n    |\n-   = note: move occurs because `a` has type `NoCopy`, which does not implement the `Copy` trait\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "b1b925d694ff9ba8e1acc6115425978cb989543f", "filename": "src/test/ui/try-block/try-block-bad-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -25,13 +25,14 @@ LL |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n error[E0382]: use of moved value: `k`\n   --> $DIR/try-block-bad-lifetime.rs:31:26\n    |\n+LL |         let k = &mut i;\n+   |             - move occurs because `k` has type `&mut i32`, which does not implement the `Copy` trait\n+LL |         let mut j: Result<(), &mut i32> = try {\n LL |             Err(k) ?;\n    |                 - value moved here\n ...\n LL |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n    |                          ^ value used here after move\n-   |\n-   = note: move occurs because `k` has type `&mut i32`, which does not implement the `Copy` trait\n \n error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-bad-lifetime.rs:32:9"}, {"sha": "dafbde6a5150bb461bcd861f1356e8acb958a802", "filename": "src/test/ui/try-block/try-block-maybe-bad-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -13,13 +13,14 @@ LL |         do_something_with(x);\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/try-block-maybe-bad-lifetime.rs:28:24\n    |\n+LL |         let x = String::new();\n+   |             - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+...\n LL |             ::std::mem::drop(x);\n    |                              - value moved here\n LL |         };\n LL |         println!(\"{}\", x); //~ ERROR borrow of moved value: `x`\n    |                        ^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-maybe-bad-lifetime.rs:40:9"}, {"sha": "29d161fe150e74b1fa856b6e8652161207327d53", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -13,12 +13,12 @@ LL |     use_borrow(a);\n error[E0382]: use of moved value: `u`\n   --> $DIR/union-borrow-move-parent-sibling.rs:22:13\n    |\n+LL |     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+   |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = u.x.0;\n    |             ----- value moved here\n LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |             ^^^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `u` (via `u.y`) as immutable because it is also borrowed as mutable (via `u.x.0.0`)\n   --> $DIR/union-borrow-move-parent-sibling.rs:28:13\n@@ -35,12 +35,12 @@ LL |     use_borrow(a);\n error[E0382]: use of moved value: `u`\n   --> $DIR/union-borrow-move-parent-sibling.rs:35:13\n    |\n+LL |     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+   |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = (u.x.0).0;\n    |             --------- value moved here\n LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |             ^^^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `u` (via `u.x`) as immutable because it is also borrowed as mutable (via `*u.y`)\n   --> $DIR/union-borrow-move-parent-sibling.rs:41:13\n@@ -57,12 +57,12 @@ LL |     use_borrow(a);\n error[E0382]: use of moved value: `u`\n   --> $DIR/union-borrow-move-parent-sibling.rs:48:13\n    |\n+LL |     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n+   |         - move occurs because `u` has type `U`, which does not implement the `Copy` trait\n LL |     let a = *u.y;\n    |             ---- value moved here\n LL |     let b = u.x; //~ ERROR use of moved value: `u.x`\n    |             ^^^ value used here after move\n-   |\n-   = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n error: aborting due to 6 previous errors\n "}, {"sha": "58953d55b1fbae40d7e1c903540c81f573843f4a", "filename": "src/test/ui/unop-move-semantics.nll.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,13 +1,15 @@\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/unop-move-semantics.rs:8:5\n    |\n+LL | fn move_then_borrow<T: Not<Output=T> + Clone>(x: T) {\n+   |                     -                         - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+   |                     |\n+   |                     consider adding a `Copy` constraint to this type argument\n LL |     !x;\n    |      - value moved here\n LL | \n LL |     x.clone();  //~ ERROR: use of moved value\n    |     ^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/unop-move-semantics.rs:15:6"}, {"sha": "0e6a6f6369a15f091dd93b15a782bf0ceb4f4ab3", "filename": "src/test/ui/unsized-locals/borrow-after-move.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -12,13 +12,13 @@ LL |         println!(\"{}\", &x);\n error[E0382]: borrow of moved value: `y`\n   --> $DIR/borrow-after-move.rs:22:24\n    |\n+LL |         let y = *x;\n+   |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n LL |         drop_unsized(y);\n    |                      - value moved here\n ...\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/borrow-after-move.rs:30:24\n@@ -34,13 +34,13 @@ LL |         println!(\"{}\", &x);\n error[E0382]: borrow of moved value: `y`\n   --> $DIR/borrow-after-move.rs:32:24\n    |\n+LL |         let y = *x;\n+   |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n LL |         y.foo();\n    |         - value moved here\n ...\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/borrow-after-move.rs:39:24"}, {"sha": "e40289af5ad3d7487f5dc53f7105f4b6be83efdc", "filename": "src/test/ui/unsized-locals/double-move.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `y`\n   --> $DIR/double-move.rs:20:22\n    |\n+LL |         let y = *x;\n+   |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n LL |         drop_unsized(y);\n    |                      - value moved here\n LL |         drop_unsized(y); //~ERROR use of moved value\n    |                      ^ value used here after move\n-   |\n-   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/double-move.rs:26:22\n@@ -21,22 +21,22 @@ LL |         drop_unsized(x); //~ERROR use of moved value\n error[E0382]: use of moved value: `*x`\n   --> $DIR/double-move.rs:32:18\n    |\n+LL |         let x = \"hello\".to_owned().into_boxed_str();\n+   |             - move occurs because `x` has type `std::boxed::Box<str>`, which does not implement the `Copy` trait\n LL |         drop_unsized(x);\n    |                      - value moved here\n LL |         let _y = *x; //~ERROR use of moved value\n    |                  ^^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<str>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `y`\n   --> $DIR/double-move.rs:39:9\n    |\n+LL |         let y = *x;\n+   |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n LL |         y.foo();\n    |         - value moved here\n LL |         y.foo(); //~ERROR use of moved value\n    |         ^ value used here after move\n-   |\n-   = note: move occurs because `y` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `*x`\n   --> $DIR/double-move.rs:45:9"}, {"sha": "8160ada9d62ea41d54136cb95d83d97a1a72a122", "filename": "src/test/ui/use/use-after-move-based-on-type.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/use-after-move-based-on-type.rs:4:20\n    |\n+LL |     let x = \"Hello!\".to_string();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let _y = x;\n    |              - value moved here\n LL |     println!(\"{}\", x); //~ ERROR use of moved value\n    |                    ^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "e16bca380679f5e982b409844d063f86f766dec7", "filename": "src/test/ui/use/use-after-move-implicity-coerced-object.nll.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,13 @@\n error[E0382]: borrow of moved value: `n`\n   --> $DIR/use-after-move-implicity-coerced-object.rs:28:13\n    |\n+LL |     let n: Box<_> = box Number { n: 42 };\n+   |         - move occurs because `n` has type `std::boxed::Box<Number>`, which does not implement the `Copy` trait\n+LL |     let mut l: Box<_> = box List { list: Vec::new() };\n LL |     l.push(n);\n    |            - value moved here\n LL |     let x = n.to_string();\n    |             ^ value borrowed here after move\n-   |\n-   = note: move occurs because `n` has type `std::boxed::Box<Number>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "4119741d805cd43b24f66975a099fdb8508ba6ee", "filename": "src/test/ui/use/use-after-move-self-based-on-type.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `self`\n   --> $DIR/use-after-move-self-based-on-type.rs:12:16\n    |\n+LL |     pub fn foo(self) -> isize {\n+   |                ---- move occurs because `self` has type `S`, which does not implement the `Copy` trait\n LL |         self.bar();\n    |         ---- value moved here\n LL |         return self.x;  //~ ERROR use of moved value: `self.x`\n    |                ^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `self` has type `S`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "e2ce3690cb9046c89b0898fdfff7f4bdb6eb7e35", "filename": "src/test/ui/use/use-after-move-self.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `self`\n   --> $DIR/use-after-move-self.rs:10:16\n    |\n+LL |     pub fn foo(self) -> isize {\n+   |                ---- move occurs because `self` has type `S`, which does not implement the `Copy` trait\n LL |         self.bar();\n    |         ---- value moved here\n LL |         return *self.x;  //~ ERROR use of moved value: `*self.x`\n    |                ^^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `self` has type `S`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "2263747607b9c94243df3279e3e056992e64d697", "filename": "src/test/ui/walk-struct-literal-with.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fwalk-struct-literal-with.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038/src%2Ftest%2Fui%2Fwalk-struct-literal-with.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwalk-struct-literal-with.nll.stderr?ref=f20c6c8581f5fb5c7cb679736d7a0dcbefa7b038", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: borrow of moved value: `start`\n   --> $DIR/walk-struct-literal-with.rs:16:20\n    |\n+LL |     let start = Mine{test:\"Foo\".to_string(), other_val:0};\n+   |         ----- move occurs because `start` has type `Mine`, which does not implement the `Copy` trait\n LL |     let end = Mine{other_val:1, ..start.make_string_bar()};\n    |                                   ----- value moved here\n LL |     println!(\"{}\", start.test); //~ ERROR use of moved value: `start.test`\n    |                    ^^^^^^^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `start` has type `Mine`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}]}