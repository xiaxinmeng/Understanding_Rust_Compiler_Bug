{"sha": "1f9701ab52d76cb404cf36e48dae278f41fed3bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTcwMWFiNTJkNzZjYjQwNGNmMzZlNDhkYWUyNzhmNDFmZWQzYmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-11-02T07:15:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-02T07:15:52Z"}, "message": "Merge pull request #2193 from sinkuu/u8_str_transmute\n\nLint `transmute::<&[u8], &str>`", "tree": {"sha": "bdea6054234232ec8fabc30cdf308358190c9240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdea6054234232ec8fabc30cdf308358190c9240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f9701ab52d76cb404cf36e48dae278f41fed3bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJZ+sYoCRBK7hj4Ov3rIwAAdHIIAAnbt+TQakv73ctCPlgO8AQt\nbBPqTOSXP/ltFQpJab5lhYdkZw8fMMhQFl6nNgHtyTLj+PYb3ALW8HvVs202uTxE\ni8KFdOiq7MbAX+woHxmcldr+C03VNjH/Ih4zS9lGn/T/MKmkGhK6knCQQKmHz8e9\ngSZN1nRiVMMYJm+aIgdLzgSxU6SdMhDVya3ol0eAVf6tyfmcNljpTEFysMAQp0Gs\nR4pg8SrkbLbA04817cdL3Rna2xmUex0kwaopCsh/fY9wDz5SGG0c82pfRq3Y2TTD\nVt2iqEsK0vpgX9fUHCbjowAPkGQtcFCE7dzglHfIu8nv23NHuPispF8ekhYYghY=\n=YtBk\n-----END PGP SIGNATURE-----\n", "payload": "tree bdea6054234232ec8fabc30cdf308358190c9240\nparent 3cba0579dbf542a9aeb6c50e32a2704e567e691d\nparent 0328d4c6e582f63e38f20803d9f3ab97649caf45\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1509606952 +0100\ncommitter GitHub <noreply@github.com> 1509606952 +0100\n\nMerge pull request #2193 from sinkuu/u8_str_transmute\n\nLint `transmute::<&[u8], &str>`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9701ab52d76cb404cf36e48dae278f41fed3bd", "html_url": "https://github.com/rust-lang/rust/commit/1f9701ab52d76cb404cf36e48dae278f41fed3bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f9701ab52d76cb404cf36e48dae278f41fed3bd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cba0579dbf542a9aeb6c50e32a2704e567e691d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cba0579dbf542a9aeb6c50e32a2704e567e691d", "html_url": "https://github.com/rust-lang/rust/commit/3cba0579dbf542a9aeb6c50e32a2704e567e691d"}, {"sha": "0328d4c6e582f63e38f20803d9f3ab97649caf45", "url": "https://api.github.com/repos/rust-lang/rust/commits/0328d4c6e582f63e38f20803d9f3ab97649caf45", "html_url": "https://github.com/rust-lang/rust/commit/0328d4c6e582f63e38f20803d9f3ab97649caf45"}], "stats": {"total": 100, "additions": 94, "deletions": 6}, "files": [{"sha": "d01a63f0494c87b4a4dad05521c6da98e89030cf", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 73, "deletions": 4, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1f9701ab52d76cb404cf36e48dae278f41fed3bd/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9701ab52d76cb404cf36e48dae278f41fed3bd/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=1f9701ab52d76cb404cf36e48dae278f41fed3bd", "patch": "@@ -80,22 +80,58 @@ declare_lint! {\n \n /// **What it does:** Checks for transmutes from an integer to a `char`.\n ///\n-/// **Why is this bad?** Not every integer is a unicode scalar value.\n+/// **Why is this bad?** Not every integer is a Unicode scalar value.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:**\n+/// - [`from_u32`] which this lint suggests using is slower than `transmute`\n+/// as it needs to validate the input.\n+/// If you are certain that the input is always a valid Unicode scalar value,\n+/// use [`from_u32_unchecked`] which is as fast as `transmute`\n+/// but has a semantically meaningful name.\n+/// - You might want to handle `None` returned from [`from_u32`] instead of calling `unwrap`.\n+///\n+/// [`from_u32`]: https://doc.rust-lang.org/std/char/fn.from_u32.html\n+/// [`from_u32_unchecked`]: https://doc.rust-lang.org/std/char/fn.from_u32_unchecked.html\n ///\n /// **Example:**\n /// ```rust\n /// let _: char = std::mem::transmute(x); // where x: u32\n /// // should be:\n-/// let _: Option<char> = std::char::from_u32(x);\n+/// let _ = std::char::from_u32(x).unwrap();\n /// ```\n declare_lint! {\n     pub TRANSMUTE_INT_TO_CHAR,\n     Warn,\n     \"transmutes from an integer to a `char`\"\n }\n \n+/// **What it does:** Checks for transmutes from a `&[u8]` to a `&str`.\n+///\n+/// **Why is this bad?** Not every byte slice is a valid UTF-8 string.\n+///\n+/// **Known problems:**\n+/// - [`from_utf8`] which this lint suggests using is slower than `transmute`\n+/// as it needs to validate the input.\n+/// If you are certain that the input is always a valid UTF-8,\n+/// use [`from_utf8_unchecked`] which is as fast as `transmute`\n+/// but has a semantically meaningful name.\n+/// - You might want to handle errors returned from [`from_utf8`] instead of calling `unwrap`.\n+///\n+/// [`from_utf8`]: https://doc.rust-lang.org/std/str/fn.from_utf8.html\n+/// [`from_utf8_unchecked`]: https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked.html\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _: &str = std::mem::transmute(b); // where b: &[u8]\n+/// // should be:\n+/// let _ = std::str::from_utf8(b).unwrap();\n+/// ```\n+declare_lint! {\n+    pub TRANSMUTE_BYTES_TO_STR,\n+    Warn,\n+    \"transmutes from a `&[u8]` to a `&str`\"\n+}\n+\n /// **What it does:** Checks for transmutes from an integer to a `bool`.\n ///\n /// **Why is this bad?** This might result in an invalid in-memory representation of a `bool`.\n@@ -142,6 +178,7 @@ impl LintPass for Transmute {\n             USELESS_TRANSMUTE,\n             WRONG_TRANSMUTE,\n             TRANSMUTE_INT_TO_CHAR,\n+            TRANSMUTE_BYTES_TO_STR,\n             TRANSMUTE_INT_TO_BOOL,\n             TRANSMUTE_INT_TO_FLOAT\n         )\n@@ -254,9 +291,41 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                     } else {\n                                         arg\n                                     };\n-                                    db.span_suggestion(e.span, \"consider using\", format!(\"std::char::from_u32({})\", arg.to_string()));\n+                                    db.span_suggestion(e.span, \"consider using\", format!(\"std::char::from_u32({}).unwrap()\", arg.to_string()));\n                                 }\n                             ),\n+                            (&ty::TyRef(_, ref ref_from), &ty::TyRef(_, ref ref_to)) => {\n+                                if_chain! {\n+                                    if let (&ty::TySlice(slice_ty), &ty::TyStr) = (&ref_from.ty.sty, &ref_to.ty.sty);\n+                                    if let ty::TyUint(ast::UintTy::U8) = slice_ty.sty;\n+                                    if ref_from.mutbl == ref_to.mutbl;\n+                                    then {\n+                                        let postfix = if ref_from.mutbl == Mutability::MutMutable {\n+                                            \"_mut\"\n+                                        } else {\n+                                            \"\"\n+                                        };\n+\n+                                        span_lint_and_then(\n+                                            cx,\n+                                            TRANSMUTE_BYTES_TO_STR,\n+                                            e.span,\n+                                            &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                                            |db| {\n+                                                db.span_suggestion(\n+                                                    e.span,\n+                                                    \"consider using\",\n+                                                    format!(\n+                                                        \"std::str::from_utf8{}({}).unwrap()\",\n+                                                        postfix,\n+                                                        snippet(cx, args[0].span, \"..\"),\n+                                                    ),\n+                                                );\n+                                            }\n+                                        )\n+                                    }\n+                                }\n+                            },\n                             (&ty::TyInt(ast::IntTy::I8), &ty::TyBool) |\n                             (&ty::TyUint(ast::UintTy::U8), &ty::TyBool) => span_lint_and_then(\n                                 cx,"}, {"sha": "b04297f01fb24ab0a384971ec3a966b278d9d341", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f9701ab52d76cb404cf36e48dae278f41fed3bd/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9701ab52d76cb404cf36e48dae278f41fed3bd/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=1f9701ab52d76cb404cf36e48dae278f41fed3bd", "patch": "@@ -135,4 +135,9 @@ fn int_to_float() {\n     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n }\n \n+fn bytes_to_str(b: &[u8], mb: &mut [u8]) {\n+    let _: &str = unsafe { std::mem::transmute(b) };\n+    let _: &mut str = unsafe { std::mem::transmute(mb) };\n+}\n+\n fn main() { }"}, {"sha": "6504f55845dd314323183d9dd190f66941013678", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f9701ab52d76cb404cf36e48dae278f41fed3bd/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f9701ab52d76cb404cf36e48dae278f41fed3bd/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=1f9701ab52d76cb404cf36e48dae278f41fed3bd", "patch": "@@ -158,15 +158,15 @@ error: transmute from a `u32` to a `char`\n    --> $DIR/transmute.rs:123:28\n     |\n 123 |     let _: char = unsafe { std::mem::transmute(0_u32) };\n-    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32)`\n+    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32).unwrap()`\n     |\n     = note: `-D transmute-int-to-char` implied by `-D warnings`\n \n error: transmute from a `i32` to a `char`\n    --> $DIR/transmute.rs:124:28\n     |\n 124 |     let _: char = unsafe { std::mem::transmute(0_i32) };\n-    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32)`\n+    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n    --> $DIR/transmute.rs:129:28\n@@ -190,3 +190,17 @@ error: transmute from a `i32` to a `f32`\n 135 |     let _: f32 = unsafe { std::mem::transmute(0_i32) };\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n+error: transmute from a `&[u8]` to a `&str`\n+   --> $DIR/transmute.rs:139:28\n+    |\n+139 |     let _: &str = unsafe { std::mem::transmute(b) };\n+    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n+    |\n+    = note: `-D transmute-bytes-to-str` implied by `-D warnings`\n+\n+error: transmute from a `&mut [u8]` to a `&mut str`\n+   --> $DIR/transmute.rs:140:32\n+    |\n+140 |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n+    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n+"}]}