{"sha": "48cab6744786cdc5cb5428d2b64efc967ae90496", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4Y2FiNjc0NDc4NmNkYzVjYjU0MjhkMmI2NGVmYzk2N2FlOTA0OTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-29T02:29:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-29T02:29:13Z"}, "message": "Auto merge of #77257 - ecstatic-morse:optimize-int-range-from-pat, r=Mark-Simulacrum\n\nOptimize `IntRange::from_pat`, then shrink `ParamEnv`\n\nResolves #77058.\n\nr? `@Mark-Simulacrum`\ncc `@vandenheuvel`\n\nLooking at the output of `perf report` for #76244, the hot instructions seemed to be around the call to `pat_constructor` in `IntRange::from_pat`. I carried out an obvious optimization, but it actually made the instruction count higher (see #77075). However, it seems to have mitigated whatever was causing the pipeline stalls, so when combined with #76244, it's a net win.\n\nAs you can see below, the regression in #76244 seems to have originated from something measured by `stalled-cycles-backend`. I'll try to collect some finer-grained stats to see if I can isolate it. I wish I had a better idea of what was going on here. I'd like to prevent the regression from reappearing in the future due to small changes in unrelated code.\n\n<details>\n<summary>Current `master`:</summary>\n\n```\n Performance counter stats for 'cargo +baseline-stage1 check':\n\n          2,275.67 msec task-clock:u              #    0.998 CPUs utilized\n                 0      context-switches:u        #    0.000 K/sec\n                 0      cpu-migrations:u          #    0.000 K/sec\n            49,826      page-faults:u             #    0.022 M/sec\n     5,117,221,678      cycles:u                  #    2.249 GHz\n       299,655,943      stalled-cycles-frontend:u #    5.86% frontend cycles idle\n     2,284,213,395      stalled-cycles-backend:u  #   44.64% backend cycles idle\n     8,051,871,959      instructions:u            #    1.57  insn per cycle\n                                                  #    0.28  stalled cycles per insn\n     1,359,589,402      branches:u                #  597.447 M/sec\n         7,359,347      branch-misses:u           #    0.54% of all branches\n\n       2.281030026 seconds time elapsed\n\n       2.108197000 seconds user\n       0.164183000 seconds sys\n```\n</details>\n\n<details>\n<summary>Shrink `ParamEnv` without changing `IntRange::from_pat`:</summary>\n\n```\n Performance counter stats for 'cargo +perf-stage1 check':\n\n          2,751.79 msec task-clock:u              #    0.996 CPUs utilized\n                 0      context-switches:u        #    0.000 K/sec\n                 0      cpu-migrations:u          #    0.000 K/sec\n            50,103      page-faults:u             #    0.018 M/sec\n     6,260,590,019      cycles:u                  #    2.275 GHz\n       317,355,920      stalled-cycles-frontend:u #    5.07% frontend cycles idle\n     3,397,743,582      stalled-cycles-backend:u  #   54.27% backend cycles idle\n     8,276,224,367      instructions:u            #    1.32  insn per cycle\n                                                  #    0.41  stalled cycles per insn\n     1,370,453,386      branches:u                #  498.023 M/sec\n         7,281,031      branch-misses:u           #    0.53% of all branches\n\n       2.763265838 seconds time elapsed\n\n       2.544578000 seconds user\n       0.204548000 seconds sys\n```\n</details>\n\n<details>\n<summary>Shrink `ParamEnv` and change `IntRange::from_pat`: </summary>\n\n```\n Performance counter stats for 'cargo +perf-stage1 check':\n\n          2,295.57 msec task-clock:u              #    0.996 CPUs utilized\n                 0      context-switches:u        #    0.000 K/sec\n                 0      cpu-migrations:u          #    0.000 K/sec\n            49,959      page-faults:u             #    0.022 M/sec\n     5,151,407,066      cycles:u                  #    2.244 GHz\n       324,517,829      stalled-cycles-frontend:u #    6.30% frontend cycles idle\n     2,301,671,001      stalled-cycles-backend:u  #   44.68% backend cycles idle\n     8,130,868,329      instructions:u            #    1.58  insn per cycle\n                                                  #    0.28  stalled cycles per insn\n     1,356,618,512      branches:u                #  590.972 M/sec\n         7,323,800      branch-misses:u           #    0.54% of all branches\n\n       2.304509653 seconds time elapsed\n\n       2.128090000 seconds user\n       0.163909000 seconds sys\n```\n</details>", "tree": {"sha": "647318f21e3d24c7da817f69d44856fd3af82d42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/647318f21e3d24c7da817f69d44856fd3af82d42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48cab6744786cdc5cb5428d2b64efc967ae90496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48cab6744786cdc5cb5428d2b64efc967ae90496", "html_url": "https://github.com/rust-lang/rust/commit/48cab6744786cdc5cb5428d2b64efc967ae90496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48cab6744786cdc5cb5428d2b64efc967ae90496/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2daaae610b5515438b551a2f3706196a997f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2daaae610b5515438b551a2f3706196a997f35", "html_url": "https://github.com/rust-lang/rust/commit/fc2daaae610b5515438b551a2f3706196a997f35"}, {"sha": "c4d8089f001cf6323a1bb8fac08b7f31de33171b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4d8089f001cf6323a1bb8fac08b7f31de33171b", "html_url": "https://github.com/rust-lang/rust/commit/c4d8089f001cf6323a1bb8fac08b7f31de33171b"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "a3c4920fa8af3dc593adff29ef4e209edb9b0165", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cab6744786cdc5cb5428d2b64efc967ae90496/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cab6744786cdc5cb5428d2b64efc967ae90496/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=48cab6744786cdc5cb5428d2b64efc967ae90496", "patch": "@@ -57,7 +57,7 @@ pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PredicateObligation<'_>, 40);\n+static_assert_size!(PredicateObligation<'_>, 32);\n \n pub type Obligations<'tcx, O> = Vec<Obligation<'tcx, O>>;\n pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;"}, {"sha": "b7530c077ccd126e61690596214279a6dda4a989", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48cab6744786cdc5cb5428d2b64efc967ae90496/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cab6744786cdc5cb5428d2b64efc967ae90496/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=48cab6744786cdc5cb5428d2b64efc967ae90496", "patch": "@@ -1751,9 +1751,6 @@ pub struct ParamEnv<'tcx> {\n     ///\n     /// Note: This is packed, use the reveal() method to access it.\n     packed: CopyTaggedPtr<&'tcx List<Predicate<'tcx>>, traits::Reveal, true>,\n-\n-    /// FIXME: This field is not used, but removing it causes a performance degradation. See #76913.\n-    unused_field: Option<DefId>,\n }\n \n unsafe impl rustc_data_structures::tagged_ptr::Tag for traits::Reveal {\n@@ -1834,7 +1831,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// Construct a trait environment with the given set of predicates.\n     #[inline]\n     pub fn new(caller_bounds: &'tcx List<Predicate<'tcx>>, reveal: Reveal) -> Self {\n-        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, reveal), unused_field: None }\n+        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, reveal) }\n     }\n \n     pub fn with_user_facing(mut self) -> Self {"}, {"sha": "04de9a7a58dda5394427ce410607a4becb31c6ea", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/48cab6744786cdc5cb5428d2b64efc967ae90496/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cab6744786cdc5cb5428d2b64efc967ae90496/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=48cab6744786cdc5cb5428d2b64efc967ae90496", "patch": "@@ -1787,9 +1787,32 @@ impl<'tcx> IntRange<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         pat: &Pat<'tcx>,\n     ) -> Option<IntRange<'tcx>> {\n-        match pat_constructor(tcx, param_env, pat)? {\n-            IntRange(range) => Some(range),\n-            _ => None,\n+        // This MUST be kept in sync with `pat_constructor`.\n+        match *pat.kind {\n+            PatKind::AscribeUserType { .. } => bug!(), // Handled by `expand_pattern`\n+            PatKind::Or { .. } => bug!(\"Or-pattern should have been expanded earlier on.\"),\n+\n+            PatKind::Binding { .. }\n+            | PatKind::Wild\n+            | PatKind::Leaf { .. }\n+            | PatKind::Deref { .. }\n+            | PatKind::Variant { .. }\n+            | PatKind::Array { .. }\n+            | PatKind::Slice { .. } => None,\n+\n+            PatKind::Constant { value } => Self::from_const(tcx, param_env, value, pat.span),\n+\n+            PatKind::Range(PatRange { lo, hi, end }) => {\n+                let ty = lo.ty;\n+                Self::from_range(\n+                    tcx,\n+                    lo.eval_bits(tcx, param_env, lo.ty),\n+                    hi.eval_bits(tcx, param_env, hi.ty),\n+                    ty,\n+                    &end,\n+                    pat.span,\n+                )\n+            }\n         }\n     }\n \n@@ -2196,6 +2219,7 @@ fn pat_constructor<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     pat: &Pat<'tcx>,\n ) -> Option<Constructor<'tcx>> {\n+    // This MUST be kept in sync with `IntRange::from_pat`.\n     match *pat.kind {\n         PatKind::AscribeUserType { .. } => bug!(), // Handled by `expand_pattern`\n         PatKind::Binding { .. } | PatKind::Wild => None,"}, {"sha": "fdebd88a086c7dadf4e820876515495e1aa9f7a4", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48cab6744786cdc5cb5428d2b64efc967ae90496/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48cab6744786cdc5cb5428d2b64efc967ae90496/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=48cab6744786cdc5cb5428d2b64efc967ae90496", "patch": "@@ -87,7 +87,7 @@ pub struct PendingPredicateObligation<'tcx> {\n \n // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PendingPredicateObligation<'_>, 64);\n+static_assert_size!(PendingPredicateObligation<'_>, 56);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context."}]}