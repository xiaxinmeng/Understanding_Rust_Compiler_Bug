{"sha": "dc3848a6a3e659004ba4f2160503be28ea0f9051", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMzg0OGE2YTNlNjU5MDA0YmE0ZjIxNjA1MDNiZTI4ZWEwZjkwNTE=", "commit": {"author": {"name": "Martin Asquino", "email": "martin.asquino@gmail.com", "date": "2019-11-02T02:52:59Z"}, "committer": {"name": "Martin Asquino", "email": "martin.asquino@gmail.com", "date": "2019-11-02T20:37:47Z"}, "message": "Set `deprecated` field on `CompletionItem`s", "tree": {"sha": "d146b883f6352cbc647d8ad484377242582a7c39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d146b883f6352cbc647d8ad484377242582a7c39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc3848a6a3e659004ba4f2160503be28ea0f9051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc3848a6a3e659004ba4f2160503be28ea0f9051", "html_url": "https://github.com/rust-lang/rust/commit/dc3848a6a3e659004ba4f2160503be28ea0f9051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc3848a6a3e659004ba4f2160503be28ea0f9051/comments", "author": {"login": "martskins", "id": 4250565, "node_id": "MDQ6VXNlcjQyNTA1NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/4250565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martskins", "html_url": "https://github.com/martskins", "followers_url": "https://api.github.com/users/martskins/followers", "following_url": "https://api.github.com/users/martskins/following{/other_user}", "gists_url": "https://api.github.com/users/martskins/gists{/gist_id}", "starred_url": "https://api.github.com/users/martskins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martskins/subscriptions", "organizations_url": "https://api.github.com/users/martskins/orgs", "repos_url": "https://api.github.com/users/martskins/repos", "events_url": "https://api.github.com/users/martskins/events{/privacy}", "received_events_url": "https://api.github.com/users/martskins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "martskins", "id": 4250565, "node_id": "MDQ6VXNlcjQyNTA1NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/4250565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martskins", "html_url": "https://github.com/martskins", "followers_url": "https://api.github.com/users/martskins/followers", "following_url": "https://api.github.com/users/martskins/following{/other_user}", "gists_url": "https://api.github.com/users/martskins/gists{/gist_id}", "starred_url": "https://api.github.com/users/martskins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martskins/subscriptions", "organizations_url": "https://api.github.com/users/martskins/orgs", "repos_url": "https://api.github.com/users/martskins/repos", "events_url": "https://api.github.com/users/martskins/events{/privacy}", "received_events_url": "https://api.github.com/users/martskins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb8f76a86fe88fcad370577b344f397dd6118cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8f76a86fe88fcad370577b344f397dd6118cfd", "html_url": "https://github.com/rust-lang/rust/commit/eb8f76a86fe88fcad370577b344f397dd6118cfd"}], "stats": {"total": 187, "additions": 186, "deletions": 1}, "files": [{"sha": "9c0abd59062b6b8a37fa6e431a4ae686c4ce066c", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=dc3848a6a3e659004ba4f2160503be28ea0f9051", "patch": "@@ -96,6 +96,7 @@ mod tests {\n        \u22ee        insert: \"the_field\",\n        \u22ee        kind: Field,\n        \u22ee        detail: \"u32\",\n+       \u22ee        deprecated: false,\n        \u22ee    },\n        \u22ee]\n         \"###\n@@ -128,6 +129,7 @@ mod tests {\n                 kind: Method,\n                 lookup: \"foo\",\n                 detail: \"fn foo(self)\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"the_field\",\n@@ -139,6 +141,7 @@ mod tests {\n                 documentation: Documentation(\n                     \"This is the_field\",\n                 ),\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -168,6 +171,7 @@ mod tests {\n                 kind: Method,\n                 lookup: \"foo\",\n                 detail: \"fn foo(&self)\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"the_field\",\n@@ -176,6 +180,7 @@ mod tests {\n                 insert: \"the_field\",\n                 kind: Field,\n                 detail: \"(u32, i32)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -221,6 +226,7 @@ mod tests {\n                 kind: Method,\n                 lookup: \"the_method\",\n                 detail: \"fn the_method(&self)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -250,6 +256,7 @@ mod tests {\n                 kind: Method,\n                 lookup: \"the_method\",\n                 detail: \"fn the_method(&self)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -279,6 +286,7 @@ mod tests {\n                 kind: Method,\n                 lookup: \"the_method\",\n                 detail: \"fn the_method(&self)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -331,6 +339,7 @@ mod tests {\n                 kind: Method,\n                 lookup: \"the_method\",\n                 detail: \"fn the_method(&self)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -401,6 +410,7 @@ mod tests {\n                 kind: Method,\n                 lookup: \"blah\",\n                 detail: \"pub fn blah(&self)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -427,6 +437,7 @@ mod tests {\n        \u22ee        insert: \"the_field\",\n        \u22ee        kind: Field,\n        \u22ee        detail: \"u32\",\n+       \u22ee        deprecated: false,\n        \u22ee    },\n        \u22ee]\n         \"###"}, {"sha": "a082a3c7c9b9fe984549dac3aa07fe3f42f3f26d", "filename": "crates/ra_ide_api/src/completion/complete_macro_in_item_position.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_macro_in_item_position.rs?ref=dc3848a6a3e659004ba4f2160503be28ea0f9051", "patch": "@@ -45,6 +45,7 @@ mod tests {\n         insert: \"foo!($0)\",\n         kind: Macro,\n         detail: \"macro_rules! foo\",\n+        deprecated: false,\n     },\n ]\"##\n         );\n@@ -86,6 +87,7 @@ mod tests {\n         documentation: Documentation(\n             \"Creates a [`Vec`] containing the arguments.\\n\\n- Create a [`Vec`] containing a given list of elements:\\n\\n```\\nlet v = vec![1, 2, 3];\\nassert_eq!(v[0], 1);\\nassert_eq!(v[1], 2);\\nassert_eq!(v[2], 3);\\n```\",\n         ),\n+        deprecated: false,\n     },\n ]\"##\n         );\n@@ -121,6 +123,7 @@ mod tests {\n         documentation: Documentation(\n             \"Foo\\n\\nNot call `fooo!()` `fooo!()`, or `_foo![]` `_foo![]`.\\nCall as `let _=foo!  { hello world };`\",\n         ),\n+        deprecated: false,\n     },\n     CompletionItem {\n         label: \"main()\",\n@@ -130,6 +133,7 @@ mod tests {\n         kind: Function,\n         lookup: \"main\",\n         detail: \"fn main()\",\n+        deprecated: false,\n     },\n ]\n         \"###"}, {"sha": "2c9c8645b97b0948c0eb76a03f9fca9012d71945", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=dc3848a6a3e659004ba4f2160503be28ea0f9051", "patch": "@@ -308,6 +308,7 @@ mod tests {\n         documentation: Documentation(\n             \"Bar Variant with i32\",\n         ),\n+        deprecated: false,\n     },\n     CompletionItem {\n         label: \"Foo\",\n@@ -319,6 +320,7 @@ mod tests {\n         documentation: Documentation(\n             \"Foo Variant\",\n         ),\n+        deprecated: false,\n     },\n ]\"###\n         );\n@@ -354,6 +356,7 @@ mod tests {\n         documentation: Documentation(\n             \"Bar Variant with i32 and u32\",\n         ),\n+        deprecated: false,\n     },\n     CompletionItem {\n         label: \"Foo\",\n@@ -365,6 +368,7 @@ mod tests {\n         documentation: Documentation(\n             \"Foo Variant (empty)\",\n         ),\n+        deprecated: false,\n     },\n     CompletionItem {\n         label: \"S\",\n@@ -376,6 +380,7 @@ mod tests {\n         documentation: Documentation(\n             \"\",\n         ),\n+        deprecated: false,\n     },\n ]\"###\n         );\n@@ -411,6 +416,7 @@ mod tests {\n                 documentation: Documentation(\n                     \"An associated method\",\n                 ),\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -445,6 +451,7 @@ mod tests {\n         documentation: Documentation(\n             \"An associated const\",\n         ),\n+        deprecated: false,\n     },\n ]\"###\n         );\n@@ -478,6 +485,7 @@ mod tests {\n         documentation: Documentation(\n             \"An associated type\",\n         ),\n+        deprecated: false,\n     },\n ]\"###\n         );\n@@ -513,6 +521,7 @@ mod tests {\n                 documentation: Documentation(\n                     \"An associated method\",\n                 ),\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -549,6 +558,7 @@ mod tests {\n                 documentation: Documentation(\n                     \"An associated method\",\n                 ),\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -608,6 +618,7 @@ mod tests {\n                 documentation: Documentation(\n                     \"A trait method\",\n                 ),\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -644,6 +655,7 @@ mod tests {\n                 documentation: Documentation(\n                     \"A trait method\",\n                 ),\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -680,6 +692,7 @@ mod tests {\n                 documentation: Documentation(\n                     \"A trait method\",\n                 ),\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -711,6 +724,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"bar\",\n                 detail: \"fn bar()\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"foo()\",\n@@ -720,6 +734,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -750,6 +765,7 @@ mod tests {\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n                 detail: \"#[macro_export]\\nmacro_rules! foo\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"main()\",\n@@ -759,6 +775,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"main\",\n                 detail: \"fn main()\",\n+                deprecated: false,\n             },\n         ]\n         \"###"}, {"sha": "33bea411f79807d6f86ae4f7df1d7b7659420bb2", "filename": "crates/ra_ide_api/src/completion/complete_record_literal.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_literal.rs?ref=dc3848a6a3e659004ba4f2160503be28ea0f9051", "patch": "@@ -31,6 +31,34 @@ mod tests {\n         do_completion(code, CompletionKind::Reference)\n     }\n \n+    #[test]\n+    fn test_record_literal_deprecated_field() {\n+        let completions = complete(\n+            r\"\n+            struct A {\n+                #[deprecated]\n+                the_field: u32,\n+            }\n+            fn foo() {\n+               A { the<|> }\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"\n+       \u22ee[\n+       \u22ee    CompletionItem {\n+       \u22ee        label: \"the_field\",\n+       \u22ee        source_range: [142; 145),\n+       \u22ee        delete: [142; 145),\n+       \u22ee        insert: \"the_field\",\n+       \u22ee        kind: Field,\n+       \u22ee        detail: \"u32\",\n+       \u22ee        deprecated: true,\n+       \u22ee    },\n+       \u22ee]\n+        \"###);\n+    }\n+\n     #[test]\n     fn test_record_literal_field() {\n         let completions = complete(\n@@ -50,6 +78,7 @@ mod tests {\n        \u22ee        insert: \"the_field\",\n        \u22ee        kind: Field,\n        \u22ee        detail: \"u32\",\n+       \u22ee        deprecated: false,\n        \u22ee    },\n        \u22ee]\n         \"###);\n@@ -76,6 +105,7 @@ mod tests {\n        \u22ee        insert: \"a\",\n        \u22ee        kind: Field,\n        \u22ee        detail: \"u32\",\n+       \u22ee        deprecated: false,\n        \u22ee    },\n        \u22ee]\n         \"###);\n@@ -102,6 +132,7 @@ mod tests {\n        \u22ee        insert: \"b\",\n        \u22ee        kind: Field,\n        \u22ee        detail: \"u32\",\n+       \u22ee        deprecated: false,\n        \u22ee    },\n        \u22ee]\n         \"###);\n@@ -127,6 +158,7 @@ mod tests {\n        \u22ee        insert: \"a\",\n        \u22ee        kind: Field,\n        \u22ee        detail: \"u32\",\n+       \u22ee        deprecated: false,\n        \u22ee    },\n        \u22ee]\n         \"###);"}, {"sha": "93c26f2297f9feb8b31ace4e31f39ccb9278b59c", "filename": "crates/ra_ide_api/src/completion/complete_record_pattern.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_record_pattern.rs?ref=dc3848a6a3e659004ba4f2160503be28ea0f9051", "patch": "@@ -52,6 +52,7 @@ mod tests {\n        \u22ee        insert: \"foo\",\n        \u22ee        kind: Field,\n        \u22ee        detail: \"u32\",\n+       \u22ee        deprecated: false,\n        \u22ee    },\n        \u22ee]\n         \"###);\n@@ -81,6 +82,7 @@ mod tests {\n        \u22ee        insert: \"bar\",\n        \u22ee        kind: Field,\n        \u22ee        detail: \"()\",\n+       \u22ee        deprecated: false,\n        \u22ee    },\n        \u22ee    CompletionItem {\n        \u22ee        label: \"foo\",\n@@ -89,6 +91,7 @@ mod tests {\n        \u22ee        insert: \"foo\",\n        \u22ee        kind: Field,\n        \u22ee        detail: \"u32\",\n+       \u22ee        deprecated: false,\n        \u22ee    },\n        \u22ee]\n         \"###);"}, {"sha": "9d2deee75fdc8a8dcb464309d32d02f3c445ec26", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=dc3848a6a3e659004ba4f2160503be28ea0f9051", "patch": "@@ -155,6 +155,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"quux\",\n                 detail: \"fn quux(x: i32)\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"x\",\n@@ -218,6 +219,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"quux\",\n                 detail: \"fn quux()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -246,6 +248,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"quux\",\n                 detail: \"fn quux()\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"x\",\n@@ -286,6 +289,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"quux\",\n                 detail: \"fn quux<T>()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -391,6 +395,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"quux\",\n                 detail: \"fn quux()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -450,6 +455,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"quux\",\n                 detail: \"fn quux()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -482,6 +488,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"x\",\n                 detail: \"fn x()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -520,6 +527,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -584,6 +592,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo()\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"std\",\n@@ -639,6 +648,7 @@ mod tests {\n                 insert: \"bar!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! bar\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"baz!\",\n@@ -647,6 +657,7 @@ mod tests {\n                 insert: \"baz!($0)\",\n                 kind: Macro,\n                 detail: \"#[macro_export]\\nmacro_rules! baz\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"foo!\",\n@@ -655,6 +666,7 @@ mod tests {\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! foo\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"m1\",\n@@ -678,6 +690,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"main\",\n                 detail: \"fn main()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -708,6 +721,7 @@ mod tests {\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! foo\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"foo()\",\n@@ -717,6 +731,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -747,6 +762,7 @@ mod tests {\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! foo\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"main()\",\n@@ -756,6 +772,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"main\",\n                 detail: \"fn main()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -786,6 +803,7 @@ mod tests {\n                 insert: \"foo!($0)\",\n                 kind: Macro,\n                 detail: \"macro_rules! foo\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"main()\",\n@@ -795,6 +813,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"main\",\n                 detail: \"fn main()\",\n+                deprecated: false,\n             },\n         ]\n         \"###"}, {"sha": "6753672ca4c0e79d203aaaca435fb19420d7bc93", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=dc3848a6a3e659004ba4f2160503be28ea0f9051", "patch": "@@ -44,6 +44,9 @@ pub struct CompletionItem {\n     /// Additional info to show in the UI pop up.\n     detail: Option<String>,\n     documentation: Option<Documentation>,\n+\n+    /// Whether this item is marked as deprecated\n+    deprecated: Option<bool>,\n }\n \n // We use custom debug for CompletionItem to make `insta`'s diffs more readable.\n@@ -70,6 +73,9 @@ impl fmt::Debug for CompletionItem {\n         if let Some(documentation) = self.documentation() {\n             s.field(\"documentation\", &documentation);\n         }\n+        if let Some(deprecated) = self.deprecated {\n+            s.field(\"deprecated\", &deprecated);\n+        }\n         s.finish()\n     }\n }\n@@ -132,6 +138,7 @@ impl CompletionItem {\n             lookup: None,\n             kind: None,\n             text_edit: None,\n+            deprecated: None,\n         }\n     }\n     /// What user sees in pop-up in the UI.\n@@ -166,6 +173,10 @@ impl CompletionItem {\n     pub fn kind(&self) -> Option<CompletionItemKind> {\n         self.kind\n     }\n+\n+    pub fn deprecated(&self) -> Option<bool> {\n+        self.deprecated\n+    }\n }\n \n /// A helper to make `CompletionItem`s.\n@@ -181,6 +192,7 @@ pub(crate) struct Builder {\n     lookup: Option<String>,\n     kind: Option<CompletionItemKind>,\n     text_edit: Option<TextEdit>,\n+    deprecated: Option<bool>,\n }\n \n impl Builder {\n@@ -208,6 +220,7 @@ impl Builder {\n             lookup: self.lookup,\n             kind: self.kind,\n             completion_kind: self.completion_kind,\n+            deprecated: self.deprecated,\n         }\n     }\n     pub(crate) fn lookup_by(mut self, lookup: impl Into<String>) -> Builder {\n@@ -254,6 +267,10 @@ impl Builder {\n         self.documentation = docs.map(Into::into);\n         self\n     }\n+    pub(crate) fn set_deprecated(mut self, deprecated: bool) -> Builder {\n+        self.deprecated = Some(deprecated);\n+        self\n+    }\n }\n \n impl<'a> Into<CompletionItem> for Builder {"}, {"sha": "d98201887e5159e5fd8608fbc6b55d65b6b39517", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=dc3848a6a3e659004ba4f2160503be28ea0f9051", "patch": "@@ -2,7 +2,7 @@\n \n use hir::{db::HirDatabase, Docs, HasSource, HirDisplay, ScopeDef, Ty, TypeWalk};\n use join_to_string::join;\n-use ra_syntax::ast::NameOwner;\n+use ra_syntax::ast::{AttrsOwner, NameOwner};\n use test_utils::tested_by;\n \n use crate::completion::{\n@@ -18,6 +18,11 @@ impl Completions {\n         field: hir::StructField,\n         substs: &hir::Substs,\n     ) {\n+        let ast_node = field.source(ctx.db).ast;\n+        let is_deprecated = match ast_node {\n+            hir::FieldSource::Named(m) => is_deprecated(m),\n+            hir::FieldSource::Pos(m) => is_deprecated(m),\n+        };\n         CompletionItem::new(\n             CompletionKind::Reference,\n             ctx.source_range(),\n@@ -26,6 +31,7 @@ impl Completions {\n         .kind(CompletionItemKind::Field)\n         .detail(field.ty(ctx.db).subst(substs).display(ctx.db).to_string())\n         .set_documentation(field.docs(ctx.db))\n+        .set_deprecated(is_deprecated)\n         .add_to(self);\n     }\n \n@@ -179,6 +185,7 @@ impl Completions {\n             CompletionItem::new(CompletionKind::Reference, ctx.source_range(), &macro_declaration)\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(docs.clone())\n+                .set_deprecated(is_deprecated(ast_node))\n                 .detail(detail);\n \n         builder = if ctx.use_item_syntax.is_some() {\n@@ -211,6 +218,7 @@ impl Completions {\n                     CompletionItemKind::Function\n                 })\n                 .set_documentation(func.docs(ctx.db))\n+                .set_deprecated(is_deprecated(ast_node))\n                 .detail(detail);\n \n         // Add `<>` for generic types\n@@ -242,6 +250,7 @@ impl Completions {\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n             .kind(CompletionItemKind::Const)\n             .set_documentation(constant.docs(ctx.db))\n+            .set_deprecated(is_deprecated(ast_node))\n             .detail(detail)\n             .add_to(self);\n     }\n@@ -257,11 +266,13 @@ impl Completions {\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n             .kind(CompletionItemKind::TypeAlias)\n             .set_documentation(type_alias.docs(ctx.db))\n+            .set_deprecated(is_deprecated(type_def))\n             .detail(detail)\n             .add_to(self);\n     }\n \n     pub(crate) fn add_enum_variant(&mut self, ctx: &CompletionContext, variant: hir::EnumVariant) {\n+        let is_deprecated = is_deprecated(variant.source(ctx.db).ast);\n         let name = match variant.name(ctx.db) {\n             Some(it) => it,\n             None => return,\n@@ -274,11 +285,16 @@ impl Completions {\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n             .kind(CompletionItemKind::EnumVariant)\n             .set_documentation(variant.docs(ctx.db))\n+            .set_deprecated(is_deprecated)\n             .detail(detail)\n             .add_to(self);\n     }\n }\n \n+fn is_deprecated(node: impl AttrsOwner) -> bool {\n+    node.attrs().filter_map(|x| x.simple_name()).any(|x| x == \"deprecated\")\n+}\n+\n fn has_non_default_type_params(def: hir::GenericDef, db: &db::RootDatabase) -> bool {\n     let subst = db.generic_defaults(def);\n     subst.iter().any(|ty| ty == &Ty::Unknown)\n@@ -295,6 +311,57 @@ mod tests {\n         do_completion(code, CompletionKind::Reference)\n     }\n \n+    #[test]\n+    fn sets_deprecated_flag_in_completion_items() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r#\"\n+                #[deprecated]\n+                fn something_deprecated() {}\n+\n+                #[deprecated(since = \"1.0.0\")]\n+                fn something_else_deprecated() {}\n+\n+                fn main() { som<|> }\n+                \"#,\n+            ),\n+            @r###\"\n+            [\n+                CompletionItem {\n+                    label: \"main()\",\n+                    source_range: [203; 206),\n+                    delete: [203; 206),\n+                    insert: \"main()$0\",\n+                    kind: Function,\n+                    lookup: \"main\",\n+                    detail: \"fn main()\",\n+                    deprecated: false,\n+                },\n+                CompletionItem {\n+                    label: \"something_deprecated()\",\n+                    source_range: [203; 206),\n+                    delete: [203; 206),\n+                    insert: \"something_deprecated()$0\",\n+                    kind: Function,\n+                    lookup: \"something_deprecated\",\n+                    detail: \"fn something_deprecated()\",\n+                    deprecated: true,\n+                },\n+                CompletionItem {\n+                    label: \"something_else_deprecated()\",\n+                    source_range: [203; 206),\n+                    delete: [203; 206),\n+                    insert: \"something_else_deprecated()$0\",\n+                    kind: Function,\n+                    lookup: \"something_else_deprecated\",\n+                    detail: \"fn something_else_deprecated()\",\n+                    deprecated: true,\n+                },\n+            ]\n+            \"###\n+        );\n+    }\n+\n     #[test]\n     fn inserts_parens_for_function_calls() {\n         covers!(inserts_parens_for_function_calls);\n@@ -315,6 +382,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"main\",\n                 detail: \"fn main()\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"no_args()\",\n@@ -324,6 +392,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"no_args\",\n                 detail: \"fn no_args()\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -345,6 +414,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"main\",\n                 detail: \"fn main()\",\n+                deprecated: false,\n             },\n             CompletionItem {\n                 label: \"with_args(\u2026)\",\n@@ -354,6 +424,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"with_args\",\n                 detail: \"fn with_args(x: i32, y: String)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -380,6 +451,7 @@ mod tests {\n                 kind: Method,\n                 lookup: \"foo\",\n                 detail: \"fn foo(&self)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -404,6 +476,7 @@ mod tests {\n         insert: \"foo\",\n         kind: Function,\n         detail: \"pub fn foo()\",\n+        deprecated: false,\n     },\n ]\"#\n         );\n@@ -429,6 +502,7 @@ mod tests {\n         insert: \"frobnicate\",\n         kind: Function,\n         detail: \"fn frobnicate()\",\n+        deprecated: false,\n     },\n     CompletionItem {\n         label: \"main\",\n@@ -437,6 +511,7 @@ mod tests {\n         insert: \"main\",\n         kind: Function,\n         detail: \"fn main()\",\n+        deprecated: false,\n     },\n ]\"#\n         );\n@@ -459,6 +534,7 @@ mod tests {\n         insert: \"new\",\n         kind: Function,\n         detail: \"fn new() -> Foo\",\n+        deprecated: false,\n     },\n ]\"#\n         );\n@@ -492,6 +568,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo(xs: Ve)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -521,6 +598,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo(xs: Ve)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -549,6 +627,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo(xs: Ve)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -577,6 +656,7 @@ mod tests {\n                 kind: Function,\n                 lookup: \"foo\",\n                 detail: \"fn foo(xs: Ve<i128>)\",\n+                deprecated: false,\n             },\n         ]\n         \"###\n@@ -607,6 +687,7 @@ mod tests {\n                 insert: \"frobnicate\",\n                 kind: Macro,\n                 detail: \"#[macro_export]\\nmacro_rules! frobnicate\",\n+                deprecated: false,\n             },\n         ]\n         \"###"}, {"sha": "a4667d28455628b664ddcdcf9fd779b61592ed0b", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc3848a6a3e659004ba4f2160503be28ea0f9051/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=dc3848a6a3e659004ba4f2160503be28ea0f9051", "patch": "@@ -127,6 +127,7 @@ impl ConvWith<(&LineIndex, LineEndings)> for CompletionItem {\n             text_edit: Some(text_edit),\n             additional_text_edits: Some(additional_text_edits),\n             documentation: self.documentation().map(|it| it.conv()),\n+            deprecated: self.deprecated(),\n             ..Default::default()\n         };\n         res.insert_text_format = Some(match self.insert_text_format() {"}]}