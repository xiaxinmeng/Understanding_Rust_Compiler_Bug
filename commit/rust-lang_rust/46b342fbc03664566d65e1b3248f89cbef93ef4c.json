{"sha": "46b342fbc03664566d65e1b3248f89cbef93ef4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YjM0MmZiYzAzNjY0NTY2ZDY1ZTFiMzI0OGY4OWNiZWY5M2VmNGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-25T22:23:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T18:01:01Z"}, "message": "simplify the MirPass traits and passes dramatically\n\nOverall goal: reduce the amount of context a mir pass needs so that it\nresembles a query.\n\n- The hooks are no longer \"threaded down\" to the pass, but rather run\n  automatically from the top-level (we also thread down the current pass\n  number, so that the files are sorted better).\n  - The hook now receives a *single* callback, rather than a callback per-MIR.\n- The traits are no longer lifetime parameters, which moved to the\n  methods -- given that we required\n  `for<'tcx>` objecs, there wasn't much point to that.\n- Several passes now store a `String` instead of a `&'l str` (again, no\n  point).", "tree": {"sha": "7240a1ab4273707acd552117d45621eee0adff18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7240a1ab4273707acd552117d45621eee0adff18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46b342fbc03664566d65e1b3248f89cbef93ef4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46b342fbc03664566d65e1b3248f89cbef93ef4c", "html_url": "https://github.com/rust-lang/rust/commit/46b342fbc03664566d65e1b3248f89cbef93ef4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46b342fbc03664566d65e1b3248f89cbef93ef4c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a", "html_url": "https://github.com/rust-lang/rust/commit/11b6b0663ae0a89eea913f44aa1eb859b0ef0d3a"}], "stats": {"total": 517, "additions": 251, "deletions": 266}, "files": [{"sha": "59dce6f6bb0975a83f35090a27ac576ef1fccc60", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -50,6 +50,12 @@ impl<A, B> DepGraphSafe for (A, B)\n {\n }\n \n+/// Shared ref to dep-graph-safe stuff should still be dep-graph-safe.\n+impl<'a, A> DepGraphSafe for &'a A\n+    where A: DepGraphSafe,\n+{\n+}\n+\n /// No data here! :)\n impl DepGraphSafe for () {\n }"}, {"sha": "89f2fb59d5187295f4fe3d9d179502b942a9819f", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 58, "deletions": 75, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -18,7 +18,6 @@ use syntax::ast::NodeId;\n use util::common::time;\n \n use std::borrow::Cow;\n-use std::fmt;\n \n /// Where a specific Mir comes from.\n #[derive(Debug, Copy, Clone)]\n@@ -73,59 +72,61 @@ impl<'a, 'tcx> MirSource {\n \n /// Various information about pass.\n pub trait Pass {\n-    // fn should_run(Session) to check if pass should run?\n-    fn name<'a>(&self) -> Cow<'static, str> {\n-        let name = unsafe { ::std::intrinsics::type_name::<Self>() };\n-        if let Some(tail) = name.rfind(\":\") {\n-            Cow::from(&name[tail+1..])\n-        } else {\n-            Cow::from(name)\n-        }\n+    fn name<'a>(&'a self) -> Cow<'a, str> {\n+        default_name::<Self>()\n     }\n-    fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> { None }\n+\n+    fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>);\n }\n \n-/// A pass which inspects the whole Mir map.\n-pub trait MirMapPass<'tcx>: Pass {\n-    fn run_pass<'a>(\n-        &self,\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        hooks: &mut [Box<for<'s> MirPassHook<'s>>]);\n+/// Generates a default name for the pass based on the name of the\n+/// type `T`.\n+pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n+    let name = unsafe { ::std::intrinsics::type_name::<T>() };\n+    if let Some(tail) = name.rfind(\":\") {\n+        Cow::from(&name[tail+1..])\n+    } else {\n+        Cow::from(name)\n+    }\n }\n \n-pub trait MirPassHook<'tcx>: Pass {\n-    fn on_mir_pass<'a>(\n-        &self,\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        src: MirSource,\n-        mir: &Mir<'tcx>,\n-        pass: &Pass,\n-        is_after: bool\n-    );\n+pub trait PassHook {\n+    fn on_mir_pass<'a, 'tcx>(&self,\n+                             tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                             pass: &Pass,\n+                             pass_num: usize,\n+                             is_after: bool);\n }\n \n-/// A pass which inspects Mir of functions in isolation.\n-pub trait MirPass<'tcx>: Pass {\n-    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    src: MirSource, mir: &mut Mir<'tcx>);\n+/// A streamlined trait that you can implement to create a pass; the\n+/// pass will be named after the type, and it will consist of a main\n+/// loop that goes over each available MIR and applies `run_pass`.\n+pub trait MirPass {\n+    fn name<'a>(&'a self) -> Cow<'a, str> {\n+        default_name::<Self>()\n+    }\n+\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          src: MirSource,\n+                          mir: &mut Mir<'tcx>);\n }\n \n-impl<'tcx, T: MirPass<'tcx>> MirMapPass<'tcx> for T {\n-    fn run_pass<'a>(&self,\n-                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    hooks: &mut [Box<for<'s> MirPassHook<'s>>])\n-    {\n+impl<T: MirPass> Pass for T {\n+    fn name<'a>(&'a self) -> Cow<'a, str> {\n+        MirPass::name(self)\n+    }\n+\n+    fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n-            run_hooks(tcx, hooks, self, false);\n             run_map_pass_task(tcx, self, def_id);\n-            run_hooks(tcx, hooks, self, false);\n         }\n     }\n }\n \n-fn run_map_pass_task<'a, 'tcx, T: MirPass<'tcx>>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                 pass: &T,\n-                                                 def_id: DefId) {\n+fn run_map_pass_task<'a, 'tcx, T: MirPass>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                           pass: &T,\n+                                           def_id: DefId) {\n     let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n     let mir = &mut tcx.mir(def_id).borrow_mut();\n     let id = tcx.hir.as_local_node_id(def_id).expect(\"mir source requires local def-id\");\n@@ -138,36 +139,11 @@ fn run_map_pass_task<'a, 'tcx, T: MirPass<'tcx>>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-/// Invokes `hooks` on all the MIR that exists. This is read-only, so\n-/// new new tasks need to be created.\n-pub fn run_hooks<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           hooks: &mut [Box<for<'s> MirPassHook<'s>>],\n-                           pass: &Pass,\n-                           is_after: bool)\n-{\n-    for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n-        let mir = tcx.item_mir(def_id);\n-        let id = tcx.hir.as_local_node_id(def_id).expect(\"mir source requires local def-id\");\n-\n-        let source = MirSource::from_node(tcx, id);\n-        for hook in &mut *hooks {\n-            hook.on_mir_pass(tcx, source, &mir, pass, is_after);\n-        }\n-\n-        for (i, mir) in mir.promoted.iter_enumerated() {\n-            let source = MirSource::Promoted(id, i);\n-            for hook in &mut *hooks {\n-                hook.on_mir_pass(tcx, source, &mir, pass, false);\n-            }\n-        }\n-    }\n-}\n-\n /// A manager for MIR passes.\n pub struct Passes {\n-    passes: Vec<Box<for<'tcx> MirMapPass<'tcx>>>,\n-    pass_hooks: Vec<Box<for<'tcx> MirPassHook<'tcx>>>,\n-    plugin_passes: Vec<Box<for<'tcx> MirMapPass<'tcx>>>\n+    passes: Vec<Box<Pass>>,\n+    pass_hooks: Vec<Box<PassHook>>,\n+    plugin_passes: Vec<Box<Pass>>\n }\n \n impl<'a, 'tcx> Passes {\n@@ -181,27 +157,34 @@ impl<'a, 'tcx> Passes {\n     }\n \n     pub fn run_passes(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-        let Passes { ref mut passes, ref mut plugin_passes, ref mut pass_hooks } = *self;\n-        for pass in plugin_passes.iter_mut().chain(passes.iter_mut()) {\n-            time(tcx.sess.time_passes(), &*pass.name(),\n-                 || pass.run_pass(tcx, pass_hooks));\n+        // NB: passes are numbered from 1, since \"construction\" is zero.\n+        for (pass, pass_num) in self.plugin_passes.iter().chain(&self.passes).zip(1..) {\n+            for hook in &self.pass_hooks {\n+                hook.on_mir_pass(tcx, &**pass, pass_num, false);\n+            }\n+\n+            time(tcx.sess.time_passes(), &*pass.name(), || pass.run_pass(tcx));\n+\n+            for hook in &self.pass_hooks {\n+                hook.on_mir_pass(tcx, &**pass, pass_num, true);\n+            }\n         }\n     }\n \n     /// Pushes a built-in pass.\n-    pub fn push_pass(&mut self, pass: Box<for<'b> MirMapPass<'b>>) {\n+    pub fn push_pass(&mut self, pass: Box<Pass>) {\n         self.passes.push(pass);\n     }\n \n     /// Pushes a pass hook.\n-    pub fn push_hook(&mut self, hook: Box<for<'b> MirPassHook<'b>>) {\n+    pub fn push_hook(&mut self, hook: Box<PassHook>) {\n         self.pass_hooks.push(hook);\n     }\n }\n \n /// Copies the plugin passes.\n-impl ::std::iter::Extend<Box<for<'a> MirMapPass<'a>>> for Passes {\n-    fn extend<I: IntoIterator<Item=Box<for <'a> MirMapPass<'a>>>>(&mut self, it: I) {\n+impl ::std::iter::Extend<Box<Pass>> for Passes {\n+    fn extend<I: IntoIterator<Item=Box<Pass>>>(&mut self, it: I) {\n         self.plugin_passes.extend(it);\n     }\n }"}, {"sha": "fdfcd83d5b43545bf67c1026a2b1ff1aaa4e5f54", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -1003,6 +1003,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"dump MIR state at various points in translation\"),\n     dump_mir_dir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n           \"the directory the MIR is dumped into\"),\n+    dump_mir_exclude_pass_number: bool = (false, parse_bool, [UNTRACKED],\n+          \"if set, exclude the pass number when dumping MIR (used in tests)\"),\n     perf_stats: bool = (false, parse_bool, [UNTRACKED],\n           \"print some performance-related statistics\"),\n     hir_stats: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "4ae8bdc284b226760c17ddcd924f71e715679711", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -16,7 +16,7 @@ use super::{drop_flag_effects_for_location, on_lookup_result_bits};\n use super::MoveDataParamEnv;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n-use rustc::mir::transform::{Pass, MirPass, MirSource};\n+use rustc::mir::transform::{MirPass, MirSource};\n use rustc::middle::const_val::ConstVal;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_set::IdxSetBuf;\n@@ -32,9 +32,11 @@ use std::u32;\n \n pub struct ElaborateDrops;\n \n-impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n-    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    src: MirSource, mir: &mut Mir<'tcx>)\n+impl MirPass for ElaborateDrops {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          src: MirSource,\n+                          mir: &mut Mir<'tcx>)\n     {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, mir.span);\n         match src {\n@@ -74,8 +76,6 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n     }\n }\n \n-impl Pass for ElaborateDrops {}\n-\n /// Return the set of basic blocks whose unwind edges are known\n /// to not be reachable, because they are `drop` terminators\n /// that can't drop anything."}, {"sha": "64fb2168ca1f1185040e0a421cd94942066ecefd", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -979,8 +979,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n             passes.push_pass(box mir::transform::simplify::SimplifyCfg::new(\"initial\"));\n             passes.push_pass(box mir::transform::type_check::TypeckMir);\n             passes.push_pass(box mir::transform::qualify_consts::QualifyAndPromoteConstants);\n-            passes.push_pass(\n-                box mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n+            passes.push_pass(box mir::transform::simplify_branches::SimplifyBranches::new(\"initial\"));\n             passes.push_pass(box mir::transform::simplify::SimplifyCfg::new(\"qualify-consts\"));\n             // And run everything.\n             passes.run_passes(tcx);"}, {"sha": "6aa7089e7a9069d37bbe11acef3ad16fa179f095", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -192,7 +192,7 @@ fn build_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n             mem::transmute::<Mir, Mir<'tcx>>(mir)\n         };\n \n-        mir_util::dump_mir(tcx, \"mir_map\", &0, src, &mir);\n+        mir_util::dump_mir(tcx, 0, \"mir_map\", &0, src, &mir);\n \n         tcx.alloc_mir(mir)\n     })\n@@ -251,7 +251,7 @@ fn create_constructor_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 mem::transmute::<Mir, Mir<'tcx>>(mir)\n             };\n \n-            mir_util::dump_mir(tcx, \"mir_map\", &0, src, &mir);\n+            mir_util::dump_mir(tcx, 0, \"mir_map\", &0, src, &mir);\n \n             tcx.alloc_mir(mir)\n         })"}, {"sha": "b7c7a1774dd356f3ab2aac43decccb7002904a36", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc::mir::transform::{MirPass, MirSource};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n \n pub struct AddCallGuards;\n@@ -35,8 +35,11 @@ pub struct AddCallGuards;\n  *\n  */\n \n-impl<'tcx> MirPass<'tcx> for AddCallGuards {\n-    fn run_pass<'a>(&self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n+impl MirPass for AddCallGuards {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _src: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n         add_call_guards(mir);\n     }\n }\n@@ -82,5 +85,3 @@ pub fn add_call_guards(mir: &mut Mir) {\n \n     mir.basic_blocks_mut().extend(new_blocks);\n }\n-\n-impl Pass for AddCallGuards {}"}, {"sha": "fbb67161bac9d82fb7d5034ccab663d481d9819c", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -30,21 +30,19 @@\n //! future.\n \n use rustc::mir::{Constant, Local, LocalKind, Location, Lvalue, Mir, Operand, Rvalue, StatementKind};\n-use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n use util::def_use::DefUseAnalysis;\n use transform::qualify_consts;\n \n pub struct CopyPropagation;\n \n-impl Pass for CopyPropagation {}\n-\n-impl<'tcx> MirPass<'tcx> for CopyPropagation {\n-    fn run_pass<'a>(&self,\n-                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    source: MirSource,\n-                    mir: &mut Mir<'tcx>) {\n+impl MirPass for CopyPropagation {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          source: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n         match source {\n             MirSource::Const(_) => {\n                 // Don't run on constants, because constant qualification might reject the"}, {"sha": "4309f91c635bb15bc6f733123354c0d24b733625", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -10,16 +10,16 @@\n \n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc::mir::transform::{MirPass, MirSource};\n use rustc_data_structures::indexed_vec::Idx;\n \n pub struct Deaggregator;\n \n-impl Pass for Deaggregator {}\n-\n-impl<'tcx> MirPass<'tcx> for Deaggregator {\n-    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    source: MirSource, mir: &mut Mir<'tcx>) {\n+impl MirPass for Deaggregator {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          source: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n         let node_id = source.item_id();\n         let node_path = tcx.item_path_str(tcx.hir.local_def_id(node_id));\n         debug!(\"running on: {:?}\", node_path);"}, {"sha": "528afd184c6c2c88ee8f24daef32a9a4727b7ad6", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -10,70 +10,71 @@\n \n //! This pass just dumps MIR at a specified point.\n \n+use std::borrow::Cow;\n use std::fmt;\n use std::fs::File;\n use std::io;\n \n+use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::TyCtxt;\n-use rustc::mir::*;\n-use rustc::mir::transform::{Pass, MirPass, MirPassHook, MirSource};\n+use rustc::mir::transform::{Pass, PassHook, MirSource};\n use util as mir_util;\n \n-pub struct Marker<'a>(pub &'a str);\n+pub struct Marker(pub &'static str);\n \n-impl<'b, 'tcx> MirPass<'tcx> for Marker<'b> {\n-    fn run_pass<'a>(&self, _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    _src: MirSource, _mir: &mut Mir<'tcx>)\n-    {}\n-}\n+impl Pass for Marker {\n+    fn name<'a>(&'a self) -> Cow<'a, str> {\n+        Cow::Borrowed(self.0)\n+    }\n \n-impl<'b> Pass for Marker<'b> {\n-    fn name(&self) -> ::std::borrow::Cow<'static, str> { String::from(self.0).into() }\n+    fn run_pass<'a, 'tcx>(&self, _tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+        // no-op\n+    }\n }\n \n-pub struct Disambiguator<'a> {\n-    pass: &'a Pass,\n+pub struct Disambiguator {\n     is_after: bool\n }\n \n-impl<'a> fmt::Display for Disambiguator<'a> {\n+impl fmt::Display for Disambiguator {\n     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         let title = if self.is_after { \"after\" } else { \"before\" };\n-        if let Some(fmt) = self.pass.disambiguator() {\n-            write!(formatter, \"{}-{}\", fmt, title)\n-        } else {\n-            write!(formatter, \"{}\", title)\n-        }\n+        write!(formatter, \"{}\", title)\n     }\n }\n \n pub struct DumpMir;\n \n-impl<'tcx> MirPassHook<'tcx> for DumpMir {\n-    fn on_mir_pass<'a>(\n+impl PassHook for DumpMir {\n+    fn on_mir_pass<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        src: MirSource,\n-        mir: &Mir<'tcx>,\n         pass: &Pass,\n+        pass_num: usize,\n         is_after: bool)\n     {\n-        mir_util::dump_mir(\n-            tcx,\n-            &*pass.name(),\n-            &Disambiguator {\n-                pass: pass,\n-                is_after: is_after\n-            },\n-            src,\n-            mir\n-        );\n+        // No dump filters enabled.\n+        if tcx.sess.opts.debugging_opts.dump_mir.is_none() {\n+            return;\n+        }\n+\n+        for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n+            let id = tcx.hir.as_local_node_id(def_id).unwrap();\n+            let source = MirSource::from_node(tcx, id);\n+            let mir = tcx.item_mir(def_id);\n+            mir_util::dump_mir(\n+                tcx,\n+                pass_num,\n+                &*pass.name(),\n+                &Disambiguator { is_after },\n+                source,\n+                &mir\n+            );\n+        }\n     }\n }\n \n-impl<'b> Pass for DumpMir {}\n-\n pub fn emit_mir<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     outputs: &OutputFilenames)"}, {"sha": "19714849b09141c252cb1c9640fe679852768aaf", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{Ty, TyCtxt, ClosureSubsts};\n use rustc::mir::*;\n use rustc::mir::visit::MutVisitor;\n-use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc::mir::transform::{MirPass, MirSource};\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -69,11 +69,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n \n pub struct EraseRegions;\n \n-impl Pass for EraseRegions {}\n-\n-impl<'tcx> MirPass<'tcx> for EraseRegions {\n-    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    _: MirSource, mir: &mut Mir<'tcx>) {\n+impl MirPass for EraseRegions {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n         EraseRegionsVisitor::new(tcx).visit_mir(mir);\n     }\n }"}, {"sha": "b0a067063dd60c4e74d15cc77d8ca317e549a031", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -10,15 +10,15 @@\n \n //! Inlining pass for MIR functions\n \n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::DefId;\n \n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::graph;\n \n use rustc::dep_graph::DepNode;\n use rustc::mir::*;\n-use rustc::mir::transform::{self, MirMapPass, MirPassHook, MirSource, Pass};\n+use rustc::mir::transform::{MirSource, Pass};\n use rustc::mir::visit::*;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -42,12 +42,8 @@ const UNKNOWN_SIZE_COST: usize = 10;\n \n pub struct Inline;\n \n-impl<'tcx> MirMapPass<'tcx> for Inline {\n-    fn run_pass<'a>(\n-        &self,\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        hooks: &mut [Box<for<'s> MirPassHook<'s>>]) {\n-\n+impl Pass for Inline {\n+    fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         if tcx.sess.opts.debugging_opts.mir_opt_level < 2 { return; }\n \n         let _ignore = tcx.dep_graph.in_ignore();\n@@ -58,18 +54,12 @@ impl<'tcx> MirMapPass<'tcx> for Inline {\n             tcx: tcx,\n         };\n \n-        transform::run_hooks(tcx, hooks, self, false);\n-\n         for scc in callgraph.scc_iter() {\n             inliner.inline_scc(&callgraph, &scc);\n         }\n-\n-        transform::run_hooks(tcx, hooks, self, true);\n     }\n }\n \n-impl<'tcx> Pass for Inline { }\n-\n struct Inliner<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }"}, {"sha": "88a368077d4f5e94248dc4e15bcec93ed2a29cff", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -11,7 +11,7 @@\n //! Performs various peephole optimizations.\n \n use rustc::mir::{Location, Lvalue, Mir, Operand, ProjectionElem, Rvalue, Local};\n-use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::visit::{MutVisitor, Visitor};\n use rustc::ty::TyCtxt;\n use rustc::util::nodemap::FxHashSet;\n@@ -20,13 +20,11 @@ use std::mem;\n \n pub struct InstCombine;\n \n-impl Pass for InstCombine {}\n-\n-impl<'tcx> MirPass<'tcx> for InstCombine {\n-    fn run_pass<'a>(&self,\n-                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    _: MirSource,\n-                    mir: &mut Mir<'tcx>) {\n+impl MirPass for InstCombine {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n         // We only run when optimizing MIR (at any level).\n         if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n             return"}, {"sha": "8595663ba18c4ea4051feaffa15dcd975f039ab3", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -14,10 +14,25 @@\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc::mir::visit::MutVisitor;\n-use rustc::mir::transform::{Pass, MirPass, MirSource};\n+use rustc::mir::transform::{MirPass, MirSource};\n \n pub struct NoLandingPads;\n \n+impl MirPass for NoLandingPads {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        no_landing_pads(tcx, mir)\n+    }\n+}\n+\n+pub fn no_landing_pads<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx>) {\n+    if tcx.sess.no_landing_pads() {\n+        NoLandingPads.visit_mir(mir);\n+    }\n+}\n+\n impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n     fn visit_terminator(&mut self,\n                         bb: BasicBlock,\n@@ -41,18 +56,3 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n         self.super_terminator(bb, terminator, location);\n     }\n }\n-\n-pub fn no_landing_pads<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx>) {\n-    if tcx.sess.no_landing_pads() {\n-        NoLandingPads.visit_mir(mir);\n-    }\n-}\n-\n-impl<'tcx> MirPass<'tcx> for NoLandingPads {\n-    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    _: MirSource, mir: &mut Mir<'tcx>) {\n-        no_landing_pads(tcx, mir)\n-    }\n-}\n-\n-impl Pass for NoLandingPads {}"}, {"sha": "7e7e85f2ec988cca3642124b21092070bb865eb0", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -27,7 +27,7 @@ use rustc::ty::cast::CastTy;\n use rustc::ty::maps::Providers;\n use rustc::mir::*;\n use rustc::mir::traversal::ReversePostorder;\n-use rustc::mir::transform::{Pass, MirMapPass, MirPassHook, MirSource};\n+use rustc::mir::transform::{Pass, MirSource};\n use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc::middle::lang_items;\n use syntax::abi::Abi;\n@@ -939,12 +939,9 @@ fn qualify_const_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub struct QualifyAndPromoteConstants;\n \n-impl Pass for QualifyAndPromoteConstants {}\n-\n-impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n-    fn run_pass<'a>(&self,\n-                    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    hooks: &mut [Box<for<'s> MirPassHook<'s>>])\n+impl Pass for QualifyAndPromoteConstants {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     {\n         for &def_id in tcx.mir_keys(LOCAL_CRATE).iter() {\n             let _task = tcx.dep_graph.in_task(DepNode::Mir(def_id));\n@@ -959,20 +956,15 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n             let mir = &mut tcx.mir(def_id).borrow_mut();\n             tcx.dep_graph.write(DepNode::Mir(def_id));\n \n-            for hook in &mut *hooks {\n-                hook.on_mir_pass(tcx, src, mir, self, false);\n-            }\n             self.run_pass(tcx, src, mir);\n-            for hook in &mut *hooks {\n-                hook.on_mir_pass(tcx, src, mir, self, true);\n-            }\n         }\n     }\n }\n \n-impl<'tcx> QualifyAndPromoteConstants {\n-    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    src: MirSource, mir: &mut Mir<'tcx>) {\n+impl<'a, 'tcx> QualifyAndPromoteConstants {\n+    fn run_pass(&self,\n+                tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                src: MirSource, mir: &mut Mir<'tcx>) {\n         let id = src.item_id();\n         let def_id = tcx.hir.local_def_id(id);\n         let mode = match src {"}, {"sha": "d5b79c0d1c3829595379951c9e6f199fcddf4bd8", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -41,15 +41,15 @@ use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::visit::{MutVisitor, Visitor, LvalueContext};\n-use std::fmt;\n+use std::borrow::Cow;\n \n-pub struct SimplifyCfg<'a> { label: &'a str }\n+pub struct SimplifyCfg { label: String }\n \n-impl<'a> SimplifyCfg<'a> {\n-    pub fn new(label: &'a str) -> Self {\n-        SimplifyCfg { label: label }\n+impl SimplifyCfg {\n+    pub fn new(label: &str) -> Self {\n+        SimplifyCfg { label: format!(\"SimplifyCfg-{}\", label) }\n     }\n }\n \n@@ -61,20 +61,18 @@ pub fn simplify_cfg(mir: &mut Mir) {\n     mir.basic_blocks_mut().raw.shrink_to_fit();\n }\n \n-impl<'l, 'tcx> MirPass<'tcx> for SimplifyCfg<'l> {\n-    fn run_pass<'a>(&self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n-        debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, mir);\n-        simplify_cfg(mir);\n+impl MirPass for SimplifyCfg {\n+    fn name<'a>(&'a self) -> Cow<'a, str> {\n+        Cow::Borrowed(&self.label)\n     }\n-}\n \n-impl<'l> Pass for SimplifyCfg<'l> {\n-    fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> {\n-        Some(Box::new(self.label))\n+    fn run_pass<'a, 'tcx>(&self,\n+                          _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _src: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, mir);\n+        simplify_cfg(mir);\n     }\n-\n-    // avoid calling `type_name` - it contains `<'static>`\n-    fn name(&self) -> ::std::borrow::Cow<'static, str> { \"SimplifyCfg\".into() }\n }\n \n pub struct CfgSimplifier<'a, 'tcx: 'a> {\n@@ -315,12 +313,11 @@ pub fn remove_dead_blocks(mir: &mut Mir) {\n \n pub struct SimplifyLocals;\n \n-impl Pass for SimplifyLocals {\n-    fn name(&self) -> ::std::borrow::Cow<'static, str> { \"SimplifyLocals\".into() }\n-}\n-\n-impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n-    fn run_pass<'a>(&self, _: TyCtxt<'a, 'tcx, 'tcx>, _: MirSource, mir: &mut Mir<'tcx>) {\n+impl MirPass for SimplifyLocals {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          _: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n         let mut marker = DeclMarker { locals: BitVector::new(mir.local_decls.len()) };\n         marker.visit_mir(mir);\n         // Return pointer and arguments are always live"}, {"sha": "d21a6ddfdfb970c85b57276238399370133ddeff", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -12,21 +12,28 @@\n \n use rustc::ty::TyCtxt;\n use rustc::middle::const_val::ConstVal;\n-use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::*;\n \n-use std::fmt;\n+use std::borrow::Cow;\n \n-pub struct SimplifyBranches<'a> { label: &'a str }\n+pub struct SimplifyBranches { label: String }\n \n-impl<'a> SimplifyBranches<'a> {\n-    pub fn new(label: &'a str) -> Self {\n-        SimplifyBranches { label: label }\n+impl SimplifyBranches {\n+    pub fn new(label: &str) -> Self {\n+        SimplifyBranches { label: format!(\"SimplifyBranches-{}\", label) }\n     }\n }\n \n-impl<'l, 'tcx> MirPass<'tcx> for SimplifyBranches<'l> {\n-    fn run_pass<'a>(&self, _tcx: TyCtxt<'a, 'tcx, 'tcx>, _src: MirSource, mir: &mut Mir<'tcx>) {\n+impl MirPass for SimplifyBranches {\n+    fn name<'a>(&'a self) -> Cow<'a, str> {\n+        Cow::Borrowed(&self.label)\n+    }\n+\n+    fn run_pass<'a, 'tcx>(&self,\n+                          _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _src: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n         for block in mir.basic_blocks_mut() {\n             let terminator = block.terminator_mut();\n             terminator.kind = match terminator.kind {\n@@ -60,11 +67,3 @@ impl<'l, 'tcx> MirPass<'tcx> for SimplifyBranches<'l> {\n     }\n }\n \n-impl<'l> Pass for SimplifyBranches<'l> {\n-    fn disambiguator<'a>(&'a self) -> Option<Box<fmt::Display+'a>> {\n-        Some(Box::new(self.label))\n-    }\n-\n-    // avoid calling `type_name` - it contains `<'static>`\n-    fn name(&self) -> ::std::borrow::Cow<'static, str> { \"SimplifyBranches\".into() }\n-}"}, {"sha": "b325470ec818cadcd33f6dd3309ec408400a5351", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -18,7 +18,7 @@ use rustc::ty::{self, Ty, TyCtxt, TypeVariants};\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n use rustc::mir::tcx::LvalueTy;\n-use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::visit::Visitor;\n use std::fmt;\n use syntax::ast;\n@@ -737,9 +737,11 @@ impl TypeckMir {\n     }\n }\n \n-impl<'tcx> MirPass<'tcx> for TypeckMir {\n-    fn run_pass<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                    src: MirSource, mir: &mut Mir<'tcx>) {\n+impl MirPass for TypeckMir {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          src: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n         let item_id = src.item_id();\n         let def_id = tcx.hir.local_def_id(item_id);\n         debug!(\"run_pass: {}\", tcx.item_path_str(def_id));\n@@ -765,6 +767,3 @@ impl<'tcx> MirPass<'tcx> for TypeckMir {\n         });\n     }\n }\n-\n-impl Pass for TypeckMir {\n-}"}, {"sha": "6c637f2b2a9d69541d0de242b1e235061fb0a011", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -28,7 +28,7 @@ const ALIGN: usize = 40;\n /// representation of the mir into:\n ///\n /// ```text\n-/// rustc.node<node_id>.<pass_name>.<disambiguator>\n+/// rustc.node<node_id>.<pass_num>.<pass_name>.<disambiguator>\n /// ```\n ///\n /// Output from this function is controlled by passing `-Z dump-mir=<filter>`,\n@@ -39,15 +39,16 @@ const ALIGN: usize = 40;\n ///   that can appear in the pass-name or the `item_path_str` for the given\n ///   node-id. If any one of the substrings match, the data is dumped out.\n pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          pass_num: usize,\n                           pass_name: &str,\n                           disambiguator: &Display,\n-                          src: MirSource,\n+                          source: MirSource,\n                           mir: &Mir<'tcx>) {\n     let filters = match tcx.sess.opts.debugging_opts.dump_mir {\n         None => return,\n         Some(ref filters) => filters,\n     };\n-    let node_id = src.item_id();\n+    let node_id = source.item_id();\n     let node_path = tcx.item_path_str(tcx.hir.local_def_id(node_id));\n     let is_matched =\n         filters.split(\"&\")\n@@ -60,26 +61,47 @@ pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return;\n     }\n \n-    let promotion_id = match src {\n+    dump_matched_mir_node(tcx, pass_num, pass_name, &node_path, disambiguator, source, mir);\n+    for (index, promoted_mir) in mir.promoted.iter_enumerated() {\n+        let promoted_source = MirSource::Promoted(source.item_id(), index);\n+        dump_matched_mir_node(tcx, pass_num, pass_name, &node_path, disambiguator,\n+                              promoted_source, promoted_mir);\n+    }\n+}\n+\n+fn dump_matched_mir_node<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   pass_num: usize,\n+                                   pass_name: &str,\n+                                   node_path: &str,\n+                                   disambiguator: &Display,\n+                                   source: MirSource,\n+                                   mir: &Mir<'tcx>) {\n+    let promotion_id = match source {\n         MirSource::Promoted(_, id) => format!(\"-{:?}\", id),\n         _ => String::new()\n     };\n \n+    let pass_num = if tcx.sess.opts.debugging_opts.dump_mir_exclude_pass_number {\n+        format!(\"\")\n+    } else {\n+        format!(\".{:03}\", pass_num)\n+    };\n+\n     let mut file_path = PathBuf::new();\n     if let Some(ref file_dir) = tcx.sess.opts.debugging_opts.dump_mir_dir {\n         let p = Path::new(file_dir);\n         file_path.push(p);\n     };\n-    let file_name = format!(\"rustc.node{}{}.{}.{}.mir\",\n-                            node_id, promotion_id, pass_name, disambiguator);\n+    let file_name = format!(\"rustc.node{}{}{}.{}.{}.mir\",\n+                            source.item_id(), promotion_id, pass_num, pass_name, disambiguator);\n     file_path.push(&file_name);\n     let _ = fs::File::create(&file_path).and_then(|mut file| {\n         writeln!(file, \"// MIR for `{}`\", node_path)?;\n-        writeln!(file, \"// node_id = {}\", node_id)?;\n+        writeln!(file, \"// source = {:?}\", source)?;\n         writeln!(file, \"// pass_name = {}\", pass_name)?;\n         writeln!(file, \"// disambiguator = {}\", disambiguator)?;\n         writeln!(file, \"\")?;\n-        write_mir_fn(tcx, src, mir, &mut file)?;\n+        write_mir_fn(tcx, source, mir, &mut file)?;\n         Ok(())\n     });\n }"}, {"sha": "e4eb1aeaf9be2db8e2576179d558ce6f0c49536d", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -36,7 +36,7 @@ fn main() {\n }\n \n // END RUST SOURCE\n-// START rustc.node4.SimplifyCfg.initial-after.mir\n+// START rustc.node4.SimplifyCfg-initial.after.mir\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = const false;\n@@ -82,4 +82,4 @@ fn main() {\n //         StorageDead(_1);\n //         return;\n //     }\n-// END rustc.node4.SimplifyCfg.initial-after.mir\n+// END rustc.node4.SimplifyCfg-initial.after.mir"}, {"sha": "5a9336e96592d6a287eb159eb6d667375622497d", "filename": "src/test/mir-opt/issue-38669.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Ftest%2Fmir-opt%2Fissue-38669.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-38669.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -21,7 +21,7 @@ fn main() {\n }\n \n // END RUST SOURCE\n-// START rustc.node4.SimplifyCfg.initial-after.mir\n+// START rustc.node4.SimplifyCfg-initial.after.mir\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = const false;\n@@ -48,4 +48,4 @@ fn main() {\n //         _2 = ();\n //         goto -> bb1;\n //     }\n-// END rustc.node4.SimplifyCfg.initial-after.mir\n+// END rustc.node4.SimplifyCfg-initial.after.mir"}, {"sha": "cff108246a550da31dd2e116b4460b8409e1f2fc", "filename": "src/test/mir-opt/simplify_if.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -15,13 +15,13 @@ fn main() {\n }\n \n // END RUST SOURCE\n-// START rustc.node4.SimplifyBranches.initial-before.mir\n+// START rustc.node4.SimplifyBranches-initial.before.mir\n // bb0: {\n //     switchInt(const false) -> [0u8: bb2, otherwise: bb1];\n // }\n-// END rustc.node4.SimplifyBranches.initial-before.mir\n-// START rustc.node4.SimplifyBranches.initial-after.mir\n+// END rustc.node4.SimplifyBranches-initial.before.mir\n+// START rustc.node4.SimplifyBranches-initial.after.mir\n // bb0: {\n //     goto -> bb2;\n // }\n-// END rustc.node4.SimplifyBranches.initial-after.mir\n+// END rustc.node4.SimplifyBranches-initial.after.mir"}, {"sha": "a044282666da0a7ec100086b2927bdf097f3c3c9", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46b342fbc03664566d65e1b3248f89cbef93ef4c/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=46b342fbc03664566d65e1b3248f89cbef93ef4c", "patch": "@@ -1402,18 +1402,16 @@ actual:\\n\\\n                 }\n             }\n             MirOpt => {\n-                args.extend([\"-Z\",\n-                             \"dump-mir=all\",\n-                             \"-Z\",\n-                             \"mir-opt-level=3\",\n-                             \"-Z\"]\n+                args.extend([\"-Zdump-mir=all\",\n+                             \"-Zmir-opt-level=3\",\n+                             \"-Zdump-mir-exclude-pass-number\"]\n                             .iter()\n                             .map(|s| s.to_string()));\n \n \n                 let mir_dump_dir = self.get_mir_dump_dir();\n                 create_dir_all(mir_dump_dir.as_path()).unwrap();\n-                let mut dir_opt = \"dump-mir-dir=\".to_string();\n+                let mut dir_opt = \"-Zdump-mir-dir=\".to_string();\n                 dir_opt.push_str(mir_dump_dir.to_str().unwrap());\n                 debug!(\"dir_opt: {:?}\", dir_opt);\n "}]}