{"sha": "80e7cde2238e837a9d6a240af9a3253f469bb2cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZTdjZGUyMjM4ZTgzN2E5ZDZhMjQwYWY5YTMyNTNmNDY5YmIyY2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-14T03:09:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-14T03:09:46Z"}, "message": "Auto merge of #60794 - Centril:rollup-vlguvns, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #60176 (Explain error when yielding a reference to a local variable)\n - #60201 (coretest: Downgrade deny to warn)\n - #60562 (Add #[doc(hidden)] attribute on compiler generated module.)\n - #60710 (Use `delay_span_bug` for error cases when checking `AnonConst` parent)\n - #60770 (add impl_trait_in_bindings to INCOMPLETE_FEATURES)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "35229ecf343b9905cbc4c405cc03aec8a059bbf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35229ecf343b9905cbc4c405cc03aec8a059bbf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e7cde2238e837a9d6a240af9a3253f469bb2cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e7cde2238e837a9d6a240af9a3253f469bb2cf", "html_url": "https://github.com/rust-lang/rust/commit/80e7cde2238e837a9d6a240af9a3253f469bb2cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e7cde2238e837a9d6a240af9a3253f469bb2cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ec99f4201ec33026a468ef1289f98a95b4d71a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ec99f4201ec33026a468ef1289f98a95b4d71a", "html_url": "https://github.com/rust-lang/rust/commit/a9ec99f4201ec33026a468ef1289f98a95b4d71a"}, {"sha": "b6986096242e8fda9a635d9a94d3917bf4147289", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6986096242e8fda9a635d9a94d3917bf4147289", "html_url": "https://github.com/rust-lang/rust/commit/b6986096242e8fda9a635d9a94d3917bf4147289"}], "stats": {"total": 278, "additions": 240, "deletions": 38}, "files": [{"sha": "b8075ef2942e083d67d7af6f5778b68fcb7b648a", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -31,7 +31,7 @@\n #![feature(slice_partition_dedup)]\n #![feature(copy_within)]\n #![feature(int_error_matching)]\n-#![deny(rust_2018_idioms)]\n+#![warn(rust_2018_idioms)]\n \n extern crate test;\n "}, {"sha": "1a1000f0bb41db9eaab73ab76d13ba7f562b213d", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -826,18 +826,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let borrow_span = borrow_spans.var_or_use();\n         if let BorrowExplanation::MustBeValidFor {\n-            category: ConstraintCategory::Return,\n+            category,\n             span,\n             ref opt_place_desc,\n             from_closure: false,\n             ..\n         } = explanation {\n-            return self.report_cannot_return_reference_to_local(\n+            if let Some(diag) = self.try_report_cannot_return_reference_to_local(\n                 borrow,\n                 borrow_span,\n                 span,\n+                category,\n                 opt_place_desc.as_ref(),\n-            );\n+            ) {\n+                return diag;\n+            }\n         }\n \n         let mut err = self.infcx.tcx.path_does_not_live_long_enough(\n@@ -1015,17 +1018,20 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n \n         if let BorrowExplanation::MustBeValidFor {\n-            category: ConstraintCategory::Return,\n+            category,\n             span,\n             from_closure: false,\n             ..\n         } = explanation {\n-            return self.report_cannot_return_reference_to_local(\n+            if let Some(diag) = self.try_report_cannot_return_reference_to_local(\n                 borrow,\n                 proper_span,\n                 span,\n+                category,\n                 None,\n-            );\n+            ) {\n+                return diag;\n+            }\n         }\n \n         let tcx = self.infcx.tcx;\n@@ -1064,15 +1070,22 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err\n     }\n \n-    fn report_cannot_return_reference_to_local(\n+    fn try_report_cannot_return_reference_to_local(\n         &self,\n         borrow: &BorrowData<'tcx>,\n         borrow_span: Span,\n         return_span: Span,\n+        category: ConstraintCategory,\n         opt_place_desc: Option<&String>,\n-    ) -> DiagnosticBuilder<'cx> {\n+    ) -> Option<DiagnosticBuilder<'cx>> {\n         let tcx = self.infcx.tcx;\n \n+        let return_kind = match category {\n+            ConstraintCategory::Return => \"return\",\n+            ConstraintCategory::Yield => \"yield\",\n+            _ => return None,\n+        };\n+\n         // FIXME use a better heuristic than Spans\n         let reference_desc = if return_span == self.mir.source_info(borrow.reserve_location).span {\n             \"reference to\"\n@@ -1110,7 +1123,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             let local = if let Place::Base(PlaceBase::Local(local)) = *root_place {\n                 local\n             } else {\n-                bug!(\"report_cannot_return_reference_to_local: not a local\")\n+                bug!(\"try_report_cannot_return_reference_to_local: not a local\")\n             };\n             match self.mir.local_kind(local) {\n                 LocalKind::ReturnPointer | LocalKind::Temp => {\n@@ -1131,6 +1144,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         let mut err = tcx.cannot_return_reference_to_local(\n             return_span,\n+            return_kind,\n             reference_desc,\n             &place_desc,\n             Origin::Mir,\n@@ -1140,7 +1154,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             err.span_label(borrow_span, note);\n         }\n \n-        err\n+        Some(err)\n     }\n \n     fn report_escaping_closure_capture("}, {"sha": "35efc6195be39709d4bfcdd273afe53e07a838bc", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -310,9 +310,13 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             opt_place_desc,\n                         }\n                     } else {\n+                        debug!(\"explain_why_borrow_contains_point: \\\n+                                Could not generate a region name\");\n                         BorrowExplanation::Unexplained\n                     }\n                 } else {\n+                    debug!(\"explain_why_borrow_contains_point: \\\n+                            Could not generate an error region vid\");\n                     BorrowExplanation::Unexplained\n                 }\n             }"}, {"sha": "4ced31593b1ae6cc0264bcdb6bb160eb4c51eb99", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -34,6 +34,7 @@ crate enum RegionNameSource {\n     MatchedAdtAndSegment(Span),\n     AnonRegionFromUpvar(Span, String),\n     AnonRegionFromOutput(Span, String, String),\n+    AnonRegionFromYieldTy(Span, String),\n }\n \n impl RegionName {\n@@ -48,7 +49,8 @@ impl RegionName {\n             RegionNameSource::MatchedHirTy(..) |\n             RegionNameSource::MatchedAdtAndSegment(..) |\n             RegionNameSource::AnonRegionFromUpvar(..) |\n-            RegionNameSource::AnonRegionFromOutput(..) => false,\n+            RegionNameSource::AnonRegionFromOutput(..) |\n+            RegionNameSource::AnonRegionFromYieldTy(..) => false,\n         }\n     }\n \n@@ -105,6 +107,12 @@ impl RegionName {\n                     format!(\"return type{} is {}\", mir_description, type_name),\n                 );\n             },\n+            RegionNameSource::AnonRegionFromYieldTy(span, type_name) => {\n+                diag.span_label(\n+                    *span,\n+                    format!(\"yield type is {}\", type_name),\n+                );\n+            }\n             RegionNameSource::Static => {},\n         }\n     }\n@@ -170,6 +178,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 self.give_name_if_anonymous_region_appears_in_output(\n                     infcx, mir, mir_def_id, fr, counter,\n                 )\n+            })\n+            .or_else(|| {\n+                self.give_name_if_anonymous_region_appears_in_yield_ty(\n+                    infcx, mir, mir_def_id, fr, counter,\n+                )\n             });\n \n         debug!(\"give_region_a_name: gave name {:?}\", value);\n@@ -676,10 +689,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             \"give_name_if_anonymous_region_appears_in_output: return_ty = {:?}\",\n             return_ty\n         );\n-        if !infcx\n-            .tcx\n-            .any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr)\n-        {\n+        if !tcx.any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr) {\n             return None;\n         }\n \n@@ -724,6 +734,57 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         })\n     }\n \n+    fn give_name_if_anonymous_region_appears_in_yield_ty(\n+        &self,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        mir: &Mir<'tcx>,\n+        mir_def_id: DefId,\n+        fr: RegionVid,\n+        counter: &mut usize,\n+    ) -> Option<RegionName> {\n+        // Note: generators from `async fn` yield `()`, so we don't have to\n+        // worry about them here.\n+        let yield_ty = self.universal_regions.yield_ty?;\n+        debug!(\n+            \"give_name_if_anonymous_region_appears_in_yield_ty: yield_ty = {:?}\",\n+            yield_ty,\n+        );\n+\n+        let tcx = infcx.tcx;\n+\n+        if !tcx.any_free_region_meets(&yield_ty, |r| r.to_region_vid() == fr) {\n+            return None;\n+        }\n+\n+        let mut highlight = RegionHighlightMode::default();\n+        highlight.highlighting_region_vid(fr, *counter);\n+        let type_name = infcx.extract_type_name(&yield_ty, Some(highlight));\n+\n+        let mir_node_id = tcx.hir().as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+\n+        let yield_span = match tcx.hir().get(mir_node_id) {\n+            hir::Node::Expr(hir::Expr {\n+                node: hir::ExprKind::Closure(_, _, _, span, _),\n+                ..\n+            }) => (\n+                tcx.sess.source_map().end_point(*span)\n+            ),\n+            _ => mir.span,\n+        };\n+\n+        debug!(\n+            \"give_name_if_anonymous_region_appears_in_yield_ty: \\\n+             type_name = {:?}, yield_span = {:?}\",\n+            yield_span,\n+            type_name,\n+        );\n+\n+        Some(RegionName {\n+            name: self.synthesize_region_name(counter),\n+            source: RegionNameSource::AnonRegionFromYieldTy(yield_span, type_name),\n+        })\n+    }\n+\n     /// Creates a synthetic region named `'1`, incrementing the\n     /// counter.\n     fn synthesize_region_name(&self, counter: &mut usize) -> InternedString {"}, {"sha": "a5dfb736b819c08762e55271fb496a69da20ad3b", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -634,6 +634,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_return_reference_to_local(\n         self,\n         span: Span,\n+        return_kind: &str,\n         reference_desc: &str,\n         path_desc: &str,\n         o: Origin,\n@@ -642,15 +643,16 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n             self,\n             span,\n             E0515,\n-            \"cannot return {REFERENCE} {LOCAL}{OGN}\",\n+            \"cannot {RETURN} {REFERENCE} {LOCAL}{OGN}\",\n+            RETURN=return_kind,\n             REFERENCE=reference_desc,\n             LOCAL=path_desc,\n             OGN = o\n         );\n \n         err.span_label(\n             span,\n-            format!(\"returns a {} data owned by the current function\", reference_desc),\n+            format!(\"{}s a {} data owned by the current function\", return_kind, reference_desc),\n         );\n \n         self.cancel_if_wrong_origin(err, o)"}, {"sha": "6527e8655b5ef21bb6d93a7b65f5fed7c8c098fa", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -1404,15 +1404,27 @@ pub fn checked_type_of<'a, 'tcx>(\n                                     if !fail {\n                                         return None;\n                                     }\n-                                    bug!(\"unexpected const parent path def {:?}\", x);\n+                                    tcx.sess.delay_span_bug(\n+                                        DUMMY_SP,\n+                                        &format!(\n+                                            \"unexpected const parent path def {:?}\", x\n+                                        ),\n+                                    );\n+                                    tcx.types.err\n                                 }\n                             }\n                         }\n                         x => {\n                             if !fail {\n                                 return None;\n                             }\n-                            bug!(\"unexpected const parent path {:?}\", x);\n+                            tcx.sess.delay_span_bug(\n+                                DUMMY_SP,\n+                                &format!(\n+                                    \"unexpected const parent path {:?}\", x\n+                                ),\n+                            );\n+                            tcx.types.err\n                         }\n                     }\n                 }\n@@ -1421,7 +1433,13 @@ pub fn checked_type_of<'a, 'tcx>(\n                     if !fail {\n                         return None;\n                     }\n-                    bug!(\"unexpected const parent in type_of_def_id(): {:?}\", x);\n+                    tcx.sess.delay_span_bug(\n+                        DUMMY_SP,\n+                        &format!(\n+                            \"unexpected const parent in type_of_def_id(): {:?}\", x\n+                        ),\n+                    );\n+                    tcx.types.err\n                 }\n             }\n         }"}, {"sha": "8a066f3f4a093a82c2fd96c84727d31a166520c3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -563,6 +563,7 @@ declare_features! (\n // unanticipated results, such as compiler crashes. We warn the user about these\n // to alert them.\n const INCOMPLETE_FEATURES: &[Symbol] = &[\n+    sym::impl_trait_in_bindings,\n     sym::generic_associated_types,\n     sym::const_generics\n ];"}, {"sha": "1eab739cf647064b292a83dc55de61bdbb1b61f4", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -328,6 +328,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n \n // Creates a new module which looks like:\n //\n+//      #[doc(hidden)]\n //      mod $gensym {\n //          extern crate proc_macro;\n //\n@@ -361,6 +362,10 @@ fn mk_decls(\n     });\n     let span = DUMMY_SP.apply_mark(mark);\n \n+    let hidden = cx.meta_list_item_word(span, Symbol::intern(\"hidden\"));\n+    let doc = cx.meta_list(span, Symbol::intern(\"doc\"), vec![hidden]);\n+    let doc_hidden = cx.attribute(span, doc);\n+\n     let proc_macro = Ident::from_str(\"proc_macro\");\n     let krate = cx.item(span,\n                         proc_macro,\n@@ -425,7 +430,7 @@ fn mk_decls(\n         span,\n         span,\n         ast::Ident::with_empty_ctxt(Symbol::gensym(\"decls\")),\n-        vec![],\n+        vec![doc_hidden],\n         vec![krate, decls_static],\n     ).map(|mut i| {\n         i.vis = respan(span, ast::VisibilityKind::Public);"}, {"sha": "1e3a641b7cf94cf621ae362aca26ed2d3d8a4383", "filename": "src/test/run-pass/impl-trait-in-bindings.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Frun-pass%2Fimpl-trait-in-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Frun-pass%2Fimpl-trait-in-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait-in-bindings.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -1,4 +1,5 @@\n #![feature(impl_trait_in_bindings)]\n+//~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n \n use std::fmt::Debug;\n "}, {"sha": "4896deb9d5c917678114e31ca2ad1c1c80354803", "filename": "src/test/run-pass/impl-trait-in-bindings.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Frun-pass%2Fimpl-trait-in-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Frun-pass%2Fimpl-trait-in-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait-in-bindings.stderr?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+  --> $DIR/impl-trait-in-bindings.rs:1:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "c3f5e360fe28084c73d7b0f8061f125a18966930", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+// We should probably be able to infer the types here. However, this test is checking that we don't\n+// get an ICE in this case. It may be modified later to not be an error.\n+\n+struct Foo<const NUM_BYTES: usize>(pub [u8; NUM_BYTES]);\n+\n+fn main() {\n+    let _ = Foo::<3>([1, 2, 3]); //~ ERROR type annotations needed\n+}"}, {"sha": "a0641bd2fdc96d1a56fca57c2f682ac0ffb7738e", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -0,0 +1,15 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/cannot-infer-type-for-const-param.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/cannot-infer-type-for-const-param.rs:10:19\n+   |\n+LL |     let _ = Foo::<3>([1, 2, 3]);\n+   |                   ^ cannot infer type for `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "b069cd89680c18f1fabdec11692c1107c3a5f9d8", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -0,0 +1,9 @@\n+use std::convert::TryInto;\n+\n+struct S;\n+\n+fn main() {\n+    let _: u32 = 5i32.try_into::<32>().unwrap(); //~ ERROR wrong number of const arguments\n+    S.f::<0>(); //~ ERROR no method named `f`\n+    S::<0>; //~ ERROR  wrong number of const arguments\n+}"}, {"sha": "8f3f91651edfb351ad700fc128c6a3bb7db01c2f", "filename": "src/test/ui/const-generics/invalid-const-arg-for-type-param.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-const-arg-for-type-param.stderr?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -0,0 +1,25 @@\n+error[E0107]: wrong number of const arguments: expected 0, found 1\n+  --> $DIR/invalid-const-arg-for-type-param.rs:6:34\n+   |\n+LL |     let _: u32 = 5i32.try_into::<32>().unwrap();\n+   |                                  ^^ unexpected const argument\n+\n+error[E0599]: no method named `f` found for type `S` in the current scope\n+  --> $DIR/invalid-const-arg-for-type-param.rs:7:7\n+   |\n+LL | struct S;\n+   | --------- method `f` not found for this\n+...\n+LL |     S.f::<0>();\n+   |       ^\n+\n+error[E0107]: wrong number of const arguments: expected 0, found 1\n+  --> $DIR/invalid-const-arg-for-type-param.rs:8:9\n+   |\n+LL |     S::<0>;\n+   |         ^ unexpected const argument\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0107, E0599.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "d4eef29ed32074cc5a2a8f8db7c48aa71de8af95", "filename": "src/test/ui/impl-trait/bindings-opaque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -1,4 +1,5 @@\n #![feature(impl_trait_in_bindings)]\n+//~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n \n const FOO: impl Copy = 42;\n "}, {"sha": "d0a6a4ee578f71fd0db0d8cfc8bb8643a503cd60", "filename": "src/test/ui/impl-trait/bindings-opaque.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -1,17 +1,23 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+  --> $DIR/bindings-opaque.rs:1:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:10:17\n+  --> $DIR/bindings-opaque.rs:11:17\n    |\n LL |     let _ = FOO.count_ones();\n    |                 ^^^^^^^^^^\n \n error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:12:17\n+  --> $DIR/bindings-opaque.rs:13:17\n    |\n LL |     let _ = BAR.count_ones();\n    |                 ^^^^^^^^^^\n \n error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n-  --> $DIR/bindings-opaque.rs:14:17\n+  --> $DIR/bindings-opaque.rs:15:17\n    |\n LL |     let _ = foo.count_ones();\n    |                 ^^^^^^^^^^"}, {"sha": "104a44d65662e94b40f06e8b877fa26f7e531189", "filename": "src/test/ui/impl-trait/bindings.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -1,4 +1,5 @@\n #![feature(impl_trait_in_bindings)]\n+//~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n \n fn a<T: Clone>(x: T) {\n     const foo: impl Clone = x;"}, {"sha": "c66836ab8e5af09ab003a8d8091c0dadc43a608c", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -1,23 +1,29 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+  --> $DIR/bindings.rs:1:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/bindings.rs:4:29\n+  --> $DIR/bindings.rs:5:29\n    |\n LL |     const foo: impl Clone = x;\n    |                             ^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/bindings.rs:10:33\n+  --> $DIR/bindings.rs:11:33\n    |\n LL |         const foo: impl Clone = x;\n    |                                 ^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/bindings.rs:17:33\n+  --> $DIR/bindings.rs:18:33\n    |\n LL |         const foo: impl Clone = x;\n    |                                 ^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/bindings.rs:24:33\n+  --> $DIR/bindings.rs:25:33\n    |\n LL |         const foo: impl Clone = x;\n    |                                 ^ non-constant value"}, {"sha": "a8f7299f89937a29898d7fd31052cec7de32bf22", "filename": "src/test/ui/nll/issue-55850.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -25,7 +25,7 @@ where\n fn bug<'a>() -> impl Iterator<Item = &'a str> {\n     GenIter(move || {\n         let mut s = String::new();\n-        yield &s[..] //~ ERROR `s` does not live long enough [E0597]\n+        yield &s[..] //~ ERROR cannot yield value referencing local variable `s` [E0515]\n         //~| ERROR borrow may still be in use when generator yields\n     })\n }"}, {"sha": "86a8cdc42ff9fdf1e344ae54ae628241c1a135c8", "filename": "src/test/ui/nll/issue-55850.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55850.stderr?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -1,11 +1,11 @@\n-error[E0597]: `s` does not live long enough\n-  --> $DIR/issue-55850.rs:28:16\n+error[E0515]: cannot yield value referencing local variable `s`\n+  --> $DIR/issue-55850.rs:28:9\n    |\n LL |         yield &s[..]\n-   |                ^ borrowed value does not live long enough\n-LL |\n-LL |     })\n-   |     - `s` dropped here while still borrowed\n+   |         ^^^^^^^-^^^^\n+   |         |      |\n+   |         |      `s` is borrowed here\n+   |         yields a value referencing data owned by the current function\n \n error[E0626]: borrow may still be in use when generator yields\n   --> $DIR/issue-55850.rs:28:16\n@@ -15,5 +15,5 @@ LL |         yield &s[..]\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0597, E0626.\n-For more information about an error, try `rustc --explain E0597`.\n+Some errors have detailed explanations: E0515, E0626.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "e5a5f8beb45857f111f5673c361cdf53a162bfc7", "filename": "src/test/ui/proc-macro/no-missing-docs.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fproc-macro%2Fno-missing-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e7cde2238e837a9d6a240af9a3253f469bb2cf/src%2Ftest%2Fui%2Fproc-macro%2Fno-missing-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fno-missing-docs.rs?ref=80e7cde2238e837a9d6a240af9a3253f469bb2cf", "patch": "@@ -0,0 +1,16 @@\n+//! Verify that the `decls` module implicitly added by the compiler does not cause `missing_docs`\n+//! warnings.\n+\n+// compile-pass\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![deny(missing_docs)]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+/// Foo1.\n+#[proc_macro]\n+pub fn foo1(input: TokenStream) -> TokenStream { input }"}]}