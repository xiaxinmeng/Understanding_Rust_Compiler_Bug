{"sha": "8b12eee1120daaf8894a095904d814b52cdabc49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMTJlZWUxMTIwZGFhZjg4OTRhMDk1OTA0ZDgxNGI1MmNkYWJjNDk=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-13T07:30:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-13T07:30:19Z"}, "message": "Merge pull request #3233 from rust-lang-nursery/unused-unit\n\nnew lint: unused_unit", "tree": {"sha": "7d652d653e18eddbfa9c1bee24e134035bb334a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d652d653e18eddbfa9c1bee24e134035bb334a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b12eee1120daaf8894a095904d814b52cdabc49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwZ8LCRBK7hj4Ov3rIwAAdHIIAIvGgxm55wplf6dgZaO9eWVW\npws82eRuvbNvdiuNQLzMpiw00NWDWGfXjQIyqLa0bEC85/4xyXe1n9JZs87yJEHU\ntPvCdPuhDiqHObOSGU62cVV027dz5ssYvlbMuPL0G24Vprablc9dX1lkZ0ucGW/w\nPA3TBbUMGxH0Q67+XXs995CHhAf7M+wYiucG9NSHiS1kl/MsLAXWbkI3K8cKiCtV\nExqtDh8pSfzqSKJUVE7l5NrBMjKKll8AxmK04+KMilBuCNvB0hTfnRGcrP67AhEz\nsAdP8TfNGaTmjuzWquBmmgXuPvVqh1q+SyMamgDI2SHuI6CcZtq8LXojTqSzrgc=\n=SUao\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d652d653e18eddbfa9c1bee24e134035bb334a0\nparent 78860a71d85f87d6a5ab55d4f24e7d09b412cf86\nparent e8687a6677b2352228a6edd2ba05282cbb1ddb65\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1539415819 +0200\ncommitter GitHub <noreply@github.com> 1539415819 +0200\n\nMerge pull request #3233 from rust-lang-nursery/unused-unit\n\nnew lint: unused_unit"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b12eee1120daaf8894a095904d814b52cdabc49", "html_url": "https://github.com/rust-lang/rust/commit/8b12eee1120daaf8894a095904d814b52cdabc49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b12eee1120daaf8894a095904d814b52cdabc49/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "url": "https://api.github.com/repos/rust-lang/rust/commits/78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "html_url": "https://github.com/rust-lang/rust/commit/78860a71d85f87d6a5ab55d4f24e7d09b412cf86"}, {"sha": "e8687a6677b2352228a6edd2ba05282cbb1ddb65", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8687a6677b2352228a6edd2ba05282cbb1ddb65", "html_url": "https://github.com/rust-lang/rust/commit/e8687a6677b2352228a6edd2ba05282cbb1ddb65"}], "stats": {"total": 222, "additions": 215, "deletions": 7}, "files": [{"sha": "e6792c068949a1e5fc29ec3ef6b3700e704e433f", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b12eee1120daaf8894a095904d814b52cdabc49/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b12eee1120daaf8894a095904d814b52cdabc49/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8b12eee1120daaf8894a095904d814b52cdabc49", "patch": "@@ -878,6 +878,7 @@ All notable changes to this project will be documented in this file.\n [`unused_collect`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unused_collect\n [`unused_io_amount`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unused_io_amount\n [`unused_label`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unused_label\n+[`unused_unit`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unused_unit\n [`use_debug`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#use_debug\n [`use_self`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#use_self\n [`used_underscore_binding`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#used_underscore_binding"}, {"sha": "d32f66b5957417b9280fb4db7db9680bc70ff272", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b12eee1120daaf8894a095904d814b52cdabc49/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8b12eee1120daaf8894a095904d814b52cdabc49/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8b12eee1120daaf8894a095904d814b52cdabc49", "patch": "@@ -9,7 +9,7 @@ We are currently in the process of discussing Clippy 1.0 via the RFC process in\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 279 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 280 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "35c89e4efde4fe4b9c889d1d5a37032ebff2df2b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b12eee1120daaf8894a095904d814b52cdabc49/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b12eee1120daaf8894a095904d814b52cdabc49/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8b12eee1120daaf8894a095904d814b52cdabc49", "patch": "@@ -687,6 +687,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         regex::TRIVIAL_REGEX,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n+        returns::UNUSED_UNIT,\n         serde_api::SERDE_API_MISUSE,\n         strings::STRING_LIT_AS_BYTES,\n         suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL,\n@@ -803,6 +804,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         regex::TRIVIAL_REGEX,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n+        returns::UNUSED_UNIT,\n         strings::STRING_LIT_AS_BYTES,\n         types::FN_TO_NUMERIC_CAST,\n         types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,"}, {"sha": "d083387e852e51b52dcf9dbbd3393e2fbcd9d6b2", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 97, "deletions": 3, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/8b12eee1120daaf8894a095904d814b52cdabc49/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b12eee1120daaf8894a095904d814b52cdabc49/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=8b12eee1120daaf8894a095904d814b52cdabc49", "patch": "@@ -14,8 +14,8 @@ use if_chain::if_chain;\n use crate::syntax::ast;\n use crate::syntax::source_map::Span;\n use crate::syntax::visit::FnKind;\n+use crate::syntax_pos::BytePos;\n use crate::rustc_errors::Applicability;\n-\n use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n \n /// **What it does:** Checks for return statements at the end of a block.\n@@ -68,6 +68,25 @@ declare_clippy_lint! {\n      the end of a block\"\n }\n \n+/// **What it does:** Checks for unit (`()`) expressions that can be removed.\n+///\n+/// **Why is this bad?** Such expressions add no value, but can make the code\n+/// less readable. Depending on formatting they can make a `break` or `return`\n+/// statement look like a function call.\n+///\n+/// **Known problems:** The lint currently misses unit return types in types,\n+/// e.g. the `F` in `fn generic_unit<F: Fn() -> ()>(f: F) { .. }`.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn return_unit() -> () { () }\n+/// ```\n+declare_clippy_lint! {\n+    pub UNUSED_UNIT,\n+    style,\n+    \"needless unit expression\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct ReturnPass;\n \n@@ -162,23 +181,98 @@ impl ReturnPass {\n \n impl LintPass for ReturnPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_RETURN, LET_AND_RETURN)\n+        lint_array!(NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT)\n     }\n }\n \n impl EarlyLintPass for ReturnPass {\n-    fn check_fn(&mut self, cx: &EarlyContext<'_>, kind: FnKind<'_>, _: &ast::FnDecl, _: Span, _: ast::NodeId) {\n+    fn check_fn(&mut self, cx: &EarlyContext<'_>, kind: FnKind<'_>, decl: &ast::FnDecl, span: Span, _: ast::NodeId) {\n         match kind {\n             FnKind::ItemFn(.., block) | FnKind::Method(.., block) => self.check_block_return(cx, block),\n             FnKind::Closure(body) => self.check_final_expr(cx, body, Some(body.span)),\n         }\n+        if_chain! {\n+            if let ast::FunctionRetTy::Ty(ref ty) = decl.output;\n+            if let ast::TyKind::Tup(ref vals) = ty.node;\n+            if vals.is_empty() && !in_macro(ty.span) && get_def(span) == get_def(ty.span);\n+            then {\n+                let (rspan, appl) = if let Ok(fn_source) =\n+                        cx.sess().source_map()\n+                                 .span_to_snippet(span.with_hi(ty.span.hi())) {\n+                    if let Some(rpos) = fn_source.rfind(\"->\") {\n+                        (ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n+                            Applicability::MachineApplicable)\n+                    } else {\n+                        (ty.span, Applicability::MaybeIncorrect)\n+                    }\n+                } else {\n+                    (ty.span, Applicability::MaybeIncorrect)\n+                };\n+                span_lint_and_then(cx, UNUSED_UNIT, rspan, \"unneeded unit return type\", |db| {\n+                    db.span_suggestion_with_applicability(\n+                        rspan,\n+                        \"remove the `-> ()`\",\n+                        String::new(),\n+                        appl,\n+                    );\n+                });\n+            }\n+        }\n     }\n \n     fn check_block(&mut self, cx: &EarlyContext<'_>, block: &ast::Block) {\n         self.check_let_return(cx, block);\n+        if_chain! {\n+            if let Some(ref stmt) = block.stmts.last();\n+            if let ast::StmtKind::Expr(ref expr) = stmt.node;\n+            if is_unit_expr(expr) && !in_macro(expr.span);\n+            then {\n+                let sp = expr.span;\n+                span_lint_and_then(cx, UNUSED_UNIT, sp, \"unneeded unit expression\", |db| {\n+                    db.span_suggestion_with_applicability(\n+                        sp,\n+                        \"remove the final `()`\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                });\n+            }\n+        }\n+    }\n+\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n+        match e.node {\n+            ast::ExprKind::Ret(Some(ref expr)) | ast::ExprKind::Break(_, Some(ref expr)) => {\n+                if is_unit_expr(expr) && !in_macro(expr.span) {\n+                    span_lint_and_then(cx, UNUSED_UNIT, expr.span, \"unneeded `()`\", |db| {\n+                        db.span_suggestion_with_applicability(\n+                            expr.span,\n+                            \"remove the `()`\",\n+                            String::new(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    });\n+                }\n+            }\n+            _ => ()\n+        }\n     }\n }\n \n fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n     attr.meta_item_list().is_some() && attr.name() == \"cfg\"\n }\n+\n+// get the def site\n+fn get_def(span: Span) -> Option<Span> {\n+    span.ctxt().outer().expn_info().and_then(|info| info.def_site)\n+}\n+\n+// is this expr a `()` unit?\n+fn is_unit_expr(expr: &ast::Expr) -> bool {\n+    if let ast::ExprKind::Tup(ref vals) = expr.node {\n+        vals.is_empty()\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "5c4bbecf82206e02ae0967c030c72fcf798ef35f", "filename": "tests/ui/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b12eee1120daaf8894a095904d814b52cdabc49/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b12eee1120daaf8894a095904d814b52cdabc49/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=8b12eee1120daaf8894a095904d814b52cdabc49", "patch": "@@ -7,12 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(clippy::blacklisted_name, clippy::collapsible_if, clippy::cyclomatic_complexity, clippy::eq_op, clippy::needless_continue,\n+         clippy::needless_return, clippy::never_loop, clippy::no_effect, clippy::zero_divided_by_zero, clippy::unused_unit)]\n \n \n \n-#![allow(clippy::blacklisted_name, clippy::collapsible_if, clippy::cyclomatic_complexity, clippy::eq_op, clippy::needless_continue,\n-         clippy::needless_return, clippy::never_loop, clippy::no_effect, clippy::zero_divided_by_zero)]\n-\n fn bar<T>(_: T) {}\n fn foo() -> bool { unimplemented!() }\n \n@@ -28,6 +27,7 @@ pub enum Abc {\n \n #[warn(clippy::if_same_then_else)]\n #[warn(clippy::match_same_arms)]\n+#[allow(clippy::unused_unit)]\n fn if_same_then_else() -> Result<&'static str, ()> {\n     if true {\n         Foo { bar: 42 };"}, {"sha": "c27fd5be134522bc21f78eb2565d51f12d839e50", "filename": "tests/ui/my_lint.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b12eee1120daaf8894a095904d814b52cdabc49/tests%2Fui%2Fmy_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b12eee1120daaf8894a095904d814b52cdabc49/tests%2Fui%2Fmy_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmy_lint.rs?ref=8b12eee1120daaf8894a095904d814b52cdabc49", "patch": "@@ -0,0 +1,7 @@\n+#[clippy::author]\n+#[cfg(any(target_arch = \"x86\"))]\n+pub struct Foo {\n+    x: u32,\n+}\n+\n+fn main() {}"}, {"sha": "a7f08c28939d6b332116011789af5387725264a8", "filename": "tests/ui/unused_unit.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8b12eee1120daaf8894a095904d814b52cdabc49/tests%2Fui%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b12eee1120daaf8894a095904d814b52cdabc49/tests%2Fui%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.rs?ref=8b12eee1120daaf8894a095904d814b52cdabc49", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+// compile-pass\n+\n+// The output for humans should just highlight the whole span without showing\n+// the suggested replacement, but we also want to test that suggested\n+// replacement only removes one set of parentheses, rather than na\u00efvely\n+// stripping away any starting or ending parenthesis characters\u2014hence this\n+// test of the JSON error format.\n+\n+\n+#![deny(clippy::unused_unit)]\n+#![allow(clippy::needless_return)]\n+\n+struct Unitter;\n+\n+impl Unitter {\n+    // try to disorient the lint with multiple unit returns and newlines\n+    pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) ->\n+        ()\n+    where G: Fn() -> () {\n+        let _y: &Fn() -> () = &f;\n+        (); // this should not lint, as it's not in return type position\n+    }\n+}\n+\n+impl Into<()> for Unitter {\n+    fn into(self) -> () {\n+        ()\n+    }\n+}\n+\n+fn return_unit() -> () { () }\n+\n+fn main() {\n+    let u = Unitter;\n+    assert_eq!(u.get_unit(|| {}, return_unit), u.into());\n+    return_unit();\n+    loop {\n+        break();\n+    }\n+    return();\n+}"}, {"sha": "b5d5bdbcbee391cb8950449a2be4a99e6d3f8b7c", "filename": "tests/ui/unused_unit.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8b12eee1120daaf8894a095904d814b52cdabc49/tests%2Fui%2Funused_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b12eee1120daaf8894a095904d814b52cdabc49/tests%2Fui%2Funused_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.stderr?ref=8b12eee1120daaf8894a095904d814b52cdabc49", "patch": "@@ -0,0 +1,52 @@\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:28:59\n+   |\n+28 |       pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) ->\n+   |  ___________________________________________________________^\n+29 | |         ()\n+   | |__________^ help: remove the `-> ()`\n+   |\n+note: lint level defined here\n+  --> $DIR/unused_unit.rs:21:9\n+   |\n+21 | #![deny(clippy::unused_unit)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:37:19\n+   |\n+37 |     fn into(self) -> () {\n+   |                   ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit expression\n+  --> $DIR/unused_unit.rs:38:9\n+   |\n+38 |         ()\n+   |         ^^ help: remove the final `()`\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:42:18\n+   |\n+42 | fn return_unit() -> () { () }\n+   |                  ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit expression\n+  --> $DIR/unused_unit.rs:42:26\n+   |\n+42 | fn return_unit() -> () { () }\n+   |                          ^^ help: remove the final `()`\n+\n+error: unneeded `()`\n+  --> $DIR/unused_unit.rs:49:14\n+   |\n+49 |         break();\n+   |              ^^ help: remove the `()`\n+\n+error: unneeded `()`\n+  --> $DIR/unused_unit.rs:51:11\n+   |\n+51 |     return();\n+   |           ^^ help: remove the `()`\n+\n+error: aborting due to 7 previous errors\n+"}]}