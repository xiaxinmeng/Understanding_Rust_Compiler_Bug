{"sha": "379bfd0bc11a5f5a9311d4fb475502bb5120bfe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OWJmZDBiYzExYTVmNWE5MzExZDRmYjQ3NTUwMmJiNTEyMGJmZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-02T23:13:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-02T23:13:55Z"}, "message": "Auto merge of #35197 - eddyb:mir-cross-crate, r=nikomatsakis\n\nrustc_trans: don't lose the cross-crate DefId, MIR trans needs it.\n\nWe might have been missing out on some issues because MIR trans was never being used cross-crate.\n\ncc @rust-lang/compiler", "tree": {"sha": "6e65399384f87ccb1a347ad1d3c6c98652614b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e65399384f87ccb1a347ad1d3c6c98652614b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/379bfd0bc11a5f5a9311d4fb475502bb5120bfe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/379bfd0bc11a5f5a9311d4fb475502bb5120bfe5", "html_url": "https://github.com/rust-lang/rust/commit/379bfd0bc11a5f5a9311d4fb475502bb5120bfe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/379bfd0bc11a5f5a9311d4fb475502bb5120bfe5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a005b6785935d7e92e87774c8f585839ddd12e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/a005b6785935d7e92e87774c8f585839ddd12e46", "html_url": "https://github.com/rust-lang/rust/commit/a005b6785935d7e92e87774c8f585839ddd12e46"}, {"sha": "ee977e715f7714b728d2d1603b2f6e1b3f1a1e5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee977e715f7714b728d2d1603b2f6e1b3f1a1e5f", "html_url": "https://github.com/rust-lang/rust/commit/ee977e715f7714b728d2d1603b2f6e1b3f1a1e5f"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "6d9ae4deb718e2bdbc413582a9ebca19bebd58f4", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/379bfd0bc11a5f5a9311d4fb475502bb5120bfe5/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379bfd0bc11a5f5a9311d4fb475502bb5120bfe5/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=379bfd0bc11a5f5a9311d4fb475502bb5120bfe5", "patch": "@@ -1918,9 +1918,9 @@ pub fn trans_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n }\n \n pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance<'tcx>) {\n-    let instance = inline::maybe_inline_instance(ccx, instance);\n+    let local_instance = inline::maybe_inline_instance(ccx, instance);\n \n-    let fn_node_id = ccx.tcx().map.as_local_node_id(instance.def).unwrap();\n+    let fn_node_id = ccx.tcx().map.as_local_node_id(local_instance.def).unwrap();\n \n     let _s = StatRecorder::new(ccx, ccx.tcx().node_path_str(fn_node_id));\n     debug!(\"trans_instance(instance={:?})\", instance);\n@@ -1936,7 +1936,7 @@ pub fn trans_instance<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, instance: Instance\n     let sig = ccx.tcx().normalize_associated_type(&sig);\n     let abi = fn_ty.fn_abi();\n \n-    let lldecl = match ccx.instances().borrow().get(&instance) {\n+    let lldecl = match ccx.instances().borrow().get(&local_instance) {\n         Some(&val) => val,\n         None => bug!(\"Instance `{:?}` not already declared\", instance)\n     };"}, {"sha": "918935988a92f8a2a93aebe92226cba1c8feeb74", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/379bfd0bc11a5f5a9311d4fb475502bb5120bfe5/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379bfd0bc11a5f5a9311d4fb475502bb5120bfe5/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=379bfd0bc11a5f5a9311d4fb475502bb5120bfe5", "patch": "@@ -32,6 +32,7 @@ use rustc::hir;\n \n use abi::Abi;\n use common::{NodeIdAndSpan, CrateContext, FunctionContext, Block, BlockAndBuilder};\n+use inline;\n use monomorphize::{self, Instance};\n use rustc::ty::{self, Ty};\n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n@@ -238,6 +239,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     // Do this here already, in case we do an early exit from this function.\n     source_loc::set_debug_location(cx, None, UnknownLocation);\n \n+    let instance = inline::maybe_inline_instance(cx, instance);\n     let (containing_scope, span) = get_containing_scope_and_span(cx, instance);\n \n     // This can be the case for functions inlined from another crate"}, {"sha": "cc239d9f68b1355d14c33c855e6e67e3978b1cc9", "filename": "src/test/run-pass/mir_cross_crate.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/379bfd0bc11a5f5a9311d4fb475502bb5120bfe5/src%2Ftest%2Frun-pass%2Fmir_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379bfd0bc11a5f5a9311d4fb475502bb5120bfe5/src%2Ftest%2Frun-pass%2Fmir_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_cross_crate.rs?ref=379bfd0bc11a5f5a9311d4fb475502bb5120bfe5", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z orbit\n+// Tests that -Z orbit affects functions from other crates.\n+\n+#![feature(unsafe_no_drop_flag)]\n+\n+#[unsafe_no_drop_flag]\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        panic!(\"MIR trans is not enabled for mem::forget\");\n+    }\n+}\n+\n+fn main() {\n+    let x = Foo;\n+    std::mem::forget(x);\n+}"}]}