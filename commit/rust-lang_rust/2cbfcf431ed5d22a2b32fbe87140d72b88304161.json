{"sha": "2cbfcf431ed5d22a2b32fbe87140d72b88304161", "node_id": "C_kwDOAAsO6NoAKDJjYmZjZjQzMWVkNWQyMmEyYjMyZmJlODcxNDBkNzJiODgzMDQxNjE", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-27T18:17:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T14:00:55Z"}, "message": "add ssr fragment for statements", "tree": {"sha": "c3060bd7c3d2a0098e17e808b786b0abae243582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3060bd7c3d2a0098e17e808b786b0abae243582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cbfcf431ed5d22a2b32fbe87140d72b88304161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cbfcf431ed5d22a2b32fbe87140d72b88304161", "html_url": "https://github.com/rust-lang/rust/commit/2cbfcf431ed5d22a2b32fbe87140d72b88304161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cbfcf431ed5d22a2b32fbe87140d72b88304161/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df2a996cb0b50046cded86ea090d839d1ddfc0da", "url": "https://api.github.com/repos/rust-lang/rust/commits/df2a996cb0b50046cded86ea090d839d1ddfc0da", "html_url": "https://github.com/rust-lang/rust/commit/df2a996cb0b50046cded86ea090d839d1ddfc0da"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "4c768a970b19a414cd62aed67059beed8bd669f5", "filename": "crates/ide_ssr/src/fragments.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2cbfcf431ed5d22a2b32fbe87140d72b88304161/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbfcf431ed5d22a2b32fbe87140d72b88304161/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ffragments.rs?ref=2cbfcf431ed5d22a2b32fbe87140d72b88304161", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn ty(s: &str) -> Result<SyntaxNode, ()> {\n     if node.to_string() != s {\n         return Err(());\n     }\n-    Ok(node.syntax().clone())\n+    Ok(node.syntax().clone_subtree())\n }\n \n pub(crate) fn item(s: &str) -> Result<SyntaxNode, ()> {\n@@ -33,7 +33,7 @@ pub(crate) fn item(s: &str) -> Result<SyntaxNode, ()> {\n     if node.to_string() != s {\n         return Err(());\n     }\n-    Ok(node.syntax().clone())\n+    Ok(node.syntax().clone_subtree())\n }\n \n pub(crate) fn expr(s: &str) -> Result<SyntaxNode, ()> {\n@@ -47,5 +47,24 @@ pub(crate) fn expr(s: &str) -> Result<SyntaxNode, ()> {\n     if node.to_string() != s {\n         return Err(());\n     }\n-    Ok(node.syntax().clone())\n+    Ok(node.syntax().clone_subtree())\n+}\n+\n+pub(crate) fn stmt(s: &str) -> Result<SyntaxNode, ()> {\n+    let template = \"const _: () = { {}; };\";\n+    let input = template.replace(\"{}\", s);\n+    let parse = syntax::SourceFile::parse(&input);\n+    if !parse.errors().is_empty() {\n+        return Err(());\n+    }\n+    let mut node =\n+        parse.tree().syntax().descendants().skip(2).find_map(ast::Stmt::cast).ok_or(())?;\n+    if !s.ends_with(';') && node.to_string().ends_with(';') {\n+        node = node.clone_for_update();\n+        node.syntax().last_token().map(|it| it.detach());\n+    }\n+    if node.to_string() != s {\n+        return Err(());\n+    }\n+    Ok(node.syntax().clone_subtree())\n }"}, {"sha": "7d1947dda8ba7774fb78ada4a9cb93bb7749cb39", "filename": "crates/ide_ssr/src/parsing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cbfcf431ed5d22a2b32fbe87140d72b88304161/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cbfcf431ed5d22a2b32fbe87140d72b88304161/crates%2Fide_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fparsing.rs?ref=2cbfcf431ed5d22a2b32fbe87140d72b88304161", "patch": "@@ -73,17 +73,17 @@ impl ParsedRule {\n             rules: Vec::new(),\n         };\n \n-        let raw_template_stmt = raw_template.map(ast::Stmt::parse);\n+        let raw_template_stmt = raw_template.map(fragments::stmt);\n         if let raw_template_expr @ Some(Ok(_)) = raw_template.map(fragments::expr) {\n             builder.try_add2(fragments::expr(&raw_pattern), raw_template_expr);\n         } else {\n-            builder.try_add(ast::Expr::parse(&raw_pattern), raw_template_stmt.clone());\n+            builder.try_add2(fragments::expr(&raw_pattern), raw_template_stmt.clone());\n         }\n         builder.try_add2(fragments::ty(&raw_pattern), raw_template.map(fragments::ty));\n         builder.try_add2(fragments::item(&raw_pattern), raw_template.map(fragments::item));\n         builder.try_add(ast::Path::parse(&raw_pattern), raw_template.map(ast::Path::parse));\n         builder.try_add(ast::Pat::parse(&raw_pattern), raw_template.map(ast::Pat::parse));\n-        builder.try_add(ast::Stmt::parse(&raw_pattern), raw_template_stmt);\n+        builder.try_add2(fragments::stmt(&raw_pattern), raw_template_stmt);\n         builder.build()\n     }\n }"}]}