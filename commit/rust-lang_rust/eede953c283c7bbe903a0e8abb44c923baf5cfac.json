{"sha": "eede953c283c7bbe903a0e8abb44c923baf5cfac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZGU5NTNjMjgzYzdiYmU5MDNhMGU4YWJiNDRjOTIzYmFmNWNmYWM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-10T03:10:36Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-16T09:08:41Z"}, "message": "Only get ImplKind::Impl once", "tree": {"sha": "679df6342572b7101c7729179d739897843b6708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/679df6342572b7101c7729179d739897843b6708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eede953c283c7bbe903a0e8abb44c923baf5cfac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eede953c283c7bbe903a0e8abb44c923baf5cfac", "html_url": "https://github.com/rust-lang/rust/commit/eede953c283c7bbe903a0e8abb44c923baf5cfac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eede953c283c7bbe903a0e8abb44c923baf5cfac/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e4485a052857e5dd32ea29ceb7b1a8223e83cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e4485a052857e5dd32ea29ceb7b1a8223e83cc", "html_url": "https://github.com/rust-lang/rust/commit/f4e4485a052857e5dd32ea29ceb7b1a8223e83cc"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "931355b82f5035288db5f3cc50931a7e148d5aba", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/eede953c283c7bbe903a0e8abb44c923baf5cfac/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eede953c283c7bbe903a0e8abb44c923baf5cfac/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=eede953c283c7bbe903a0e8abb44c923baf5cfac", "patch": "@@ -350,14 +350,22 @@ pub fn build_impl(\n         }\n     }\n \n-    let for_ = if let Some(did) = did.as_local() {\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n-        match tcx.hir().expect_item(hir_id).kind {\n-            hir::ItemKind::Impl { self_ty, .. } => self_ty.clean(cx),\n-            _ => panic!(\"did given to build_impl was not an impl\"),\n+    let impl_item = match did.as_local() {\n+        Some(did) => {\n+            let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n+            match tcx.hir().expect_item(hir_id).kind {\n+                hir::ItemKind::Impl { self_ty, ref generics, ref items, .. } => {\n+                    Some((self_ty, generics, items))\n+                }\n+                _ => panic!(\"`DefID` passed to `build_impl` is not an `impl\"),\n+            }\n         }\n-    } else {\n-        tcx.type_of(did).clean(cx)\n+        None => None,\n+    };\n+\n+    let for_ = match impl_item {\n+        Some((self_ty, _, _)) => self_ty.clean(cx),\n+        None => tcx.type_of(did).clean(cx),\n     };\n \n     // Only inline impl if the implementing type is\n@@ -377,17 +385,12 @@ pub fn build_impl(\n     }\n \n     let predicates = tcx.explicit_predicates_of(did);\n-    let (trait_items, generics) = if let Some(did) = did.as_local() {\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n-        match tcx.hir().expect_item(hir_id).kind {\n-            hir::ItemKind::Impl { ref generics, ref items, .. } => (\n-                items.iter().map(|item| tcx.hir().impl_item(item.id).clean(cx)).collect::<Vec<_>>(),\n-                generics.clean(cx),\n-            ),\n-            _ => panic!(\"did given to build_impl was not an impl\"),\n-        }\n-    } else {\n-        (\n+    let (trait_items, generics) = match impl_item {\n+        Some((_, generics, items)) => (\n+            items.iter().map(|item| tcx.hir().impl_item(item.id).clean(cx)).collect::<Vec<_>>(),\n+            generics.clean(cx),\n+        ),\n+        None => (\n             tcx.associated_items(did)\n                 .in_definition_order()\n                 .filter_map(|item| {\n@@ -399,7 +402,7 @@ pub fn build_impl(\n                 })\n                 .collect::<Vec<_>>(),\n             clean::enter_impl_trait(cx, || (tcx.generics_of(did), predicates).clean(cx)),\n-        )\n+        ),\n     };\n     let polarity = tcx.impl_polarity(did);\n     let trait_ = associated_trait.clean(cx).map(|bound| match bound {"}]}