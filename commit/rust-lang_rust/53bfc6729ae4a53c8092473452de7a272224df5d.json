{"sha": "53bfc6729ae4a53c8092473452de7a272224df5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzYmZjNjcyOWFlNGE1M2M4MDkyNDczNDUyZGU3YTI3MjIyNGRmNWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-07T09:52:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-07T09:52:11Z"}, "message": "Centralize all configuration into config.rs", "tree": {"sha": "4afae3c9d545328d747076545beb0a1ec85bbdaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4afae3c9d545328d747076545beb0a1ec85bbdaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53bfc6729ae4a53c8092473452de7a272224df5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53bfc6729ae4a53c8092473452de7a272224df5d", "html_url": "https://github.com/rust-lang/rust/commit/53bfc6729ae4a53c8092473452de7a272224df5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53bfc6729ae4a53c8092473452de7a272224df5d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee0aa9416b9da220d7370007c5e3c402d6714b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee0aa9416b9da220d7370007c5e3c402d6714b0", "html_url": "https://github.com/rust-lang/rust/commit/1ee0aa9416b9da220d7370007c5e3c402d6714b0"}], "stats": {"total": 151, "additions": 94, "deletions": 57}, "files": [{"sha": "08f9373be6262ba35226ceb02fb0a3f5aba22be8", "filename": "Readme.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53bfc6729ae4a53c8092473452de7a272224df5d/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/53bfc6729ae4a53c8092473452de7a272224df5d/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=53bfc6729ae4a53c8092473452de7a272224df5d", "patch": "@@ -44,9 +44,10 @@ This will build your project with rustc_codegen_cranelift instead of the usual L\n \n For additional ways to use rustc_codegen_cranelift like the JIT mode see [usage.md](docs/usage.md).\n \n-## Env vars\n+## Configuration\n \n-See [env_vars.md](docs/env_vars.md) for all env vars used by rustc_codegen_cranelift.\n+See the documentation on the `BackendConfig` struct in [config.rs](src/config.rs) for all\n+configuration options.\n \n ## Not yet supported\n "}, {"sha": "f7fde1b4f3a873bbfc694a4bdaeb8cd5fe03fdb3", "filename": "docs/env_vars.md", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0aa9416b9da220d7370007c5e3c402d6714b0/docs%2Fenv_vars.md", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0aa9416b9da220d7370007c5e3c402d6714b0/docs%2Fenv_vars.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fenv_vars.md?ref=1ee0aa9416b9da220d7370007c5e3c402d6714b0", "patch": "@@ -1,15 +0,0 @@\n-# List of env vars recognized by cg_clif\n-\n-<dl>\n-    <dt>CG_CLIF_JIT_ARGS</dt>\n-    <dd>When JIT mode is enable pass these arguments to the program.</dd>\n-    <dt>CG_CLIF_INCR_CACHE_DISABLED</dt>\n-    <dd>Don't cache object files in the incremental cache. Useful during development of cg_clif\n-    to make it possible to use incremental mode for all analyses performed by rustc without caching\n-    object files when their content should have been changed by a change to cg_clif.</dd>\n-    <dt>CG_CLIF_DISPLAY_CG_TIME</dt>\n-    <dd>If \"1\", display the time it took to perform codegen for a crate.</dd>\n-    <dt>CG_CLIF_ENABLE_VERIFIER</dt>\n-    <dd>Enable the Cranelift ir verifier for all compilation passes. If not set it will only run once\n-    before passing the clif ir to Cranelift for compilation.</dt>\n-</dl>"}, {"sha": "3f98d77d76cad82fe2d7546f64f7b0407b576de4", "filename": "scripts/ext_config.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53bfc6729ae4a53c8092473452de7a272224df5d/scripts%2Fext_config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/53bfc6729ae4a53c8092473452de7a272224df5d/scripts%2Fext_config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fext_config.sh?ref=53bfc6729ae4a53c8092473452de7a272224df5d", "patch": "@@ -5,7 +5,7 @@\n set -e\n \n export CG_CLIF_DISPLAY_CG_TIME=1\n-export CG_CLIF_INCR_CACHE_DISABLED=1\n+export CG_CLIF_DISABLE_INCR_CACHE=1\n \n export HOST_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n export TARGET_TRIPLE=${TARGET_TRIPLE:-$HOST_TRIPLE}"}, {"sha": "eca88dd31727cf2045ac956c445d5451272acad6", "filename": "src/backend.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=53bfc6729ae4a53c8092473452de7a272224df5d", "patch": "@@ -5,13 +5,13 @@ use std::convert::{TryFrom, TryInto};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_session::Session;\n \n+use cranelift_codegen::isa::TargetIsa;\n use cranelift_module::FuncId;\n+use cranelift_object::{ObjectBuilder, ObjectModule, ObjectProduct};\n \n use object::write::*;\n use object::{RelocationEncoding, SectionKind, SymbolFlags};\n \n-use cranelift_object::{ObjectBuilder, ObjectModule, ObjectProduct};\n-\n use gimli::SectionId;\n \n use crate::debuginfo::{DebugReloc, DebugRelocName};\n@@ -113,7 +113,7 @@ impl WriteDebugInfo for ObjectProduct {\n }\n \n pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object)) -> Vec<u8> {\n-    let triple = crate::build_isa(sess).triple().clone();\n+    let triple = crate::target_triple(sess);\n \n     let binary_format = match triple.binary_format {\n         target_lexicon::BinaryFormat::Elf => object::BinaryFormat::Elf,\n@@ -141,9 +141,9 @@ pub(crate) fn with_object(sess: &Session, name: &str, f: impl FnOnce(&mut Object\n     metadata_object.write().unwrap()\n }\n \n-pub(crate) fn make_module(sess: &Session, name: String) -> ObjectModule {\n+pub(crate) fn make_module(sess: &Session, isa: Box<dyn TargetIsa>, name: String) -> ObjectModule {\n     let mut builder = ObjectBuilder::new(\n-        crate::build_isa(sess),\n+        isa,\n         name + \".o\",\n         cranelift_module::default_libcall_names(),\n     )"}, {"sha": "0cf02e2bbb565ccbd59a880ebe471d102b31030d", "filename": "src/config.rs", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=53bfc6729ae4a53c8092473452de7a272224df5d", "patch": "@@ -1,18 +1,17 @@\n+use std::env;\n use std::str::FromStr;\n \n+fn bool_env_var(key: &str) -> bool {\n+    env::var(key).as_ref().map(|val| &**val) == Ok(\"1\")\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub enum CodegenMode {\n     Aot,\n     Jit,\n     JitLazy,\n }\n \n-impl Default for CodegenMode {\n-    fn default() -> Self {\n-        CodegenMode::Aot\n-    }\n-}\n-\n impl FromStr for CodegenMode {\n     type Err = String;\n \n@@ -26,24 +25,77 @@ impl FromStr for CodegenMode {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, Default)]\n+#[derive(Clone, Debug)]\n pub struct BackendConfig {\n+    /// Should the crate be AOT compiled or JIT executed.\n+    ///\n+    /// Defaults to AOT compilation. Can be set using `-Cllvm-args=mode=...`.\n     pub codegen_mode: CodegenMode,\n+\n+    /// When JIT mode is enable pass these arguments to the program.\n+    ///\n+    /// Defaults to the value of `CG_CLIF_JIT_ARGS`.\n+    pub jit_args: Vec<String>,\n+\n+    /// Display the time it took to perform codegen for a crate.\n+    ///\n+    /// Defaults to true when the `CG_CLIF_DISPLAY_CG_TIME` env var is set to 1 or false otherwise.\n+    /// Can be set using `-Cllvm-args=display_cg_time=...`.\n+    pub display_cg_time: bool,\n+\n+    /// Enable the Cranelift ir verifier for all compilation passes. If not set it will only run\n+    /// once before passing the clif ir to Cranelift for compilation.\n+    ///\n+    /// Defaults to true when the `CG_CLIF_ENABLE_VERIFIER` env var is set to 1 or when cg_clif is\n+    /// compiled with debug assertions enabled or false otherwise. Can be set using\n+    /// `-Cllvm-args=enable_verifier=...`.\n+    pub enable_verifier: bool,\n+\n+    /// Don't cache object files in the incremental cache. Useful during development of cg_clif\n+    /// to make it possible to use incremental mode for all analyses performed by rustc without\n+    /// caching object files when their content should have been changed by a change to cg_clif.\n+    ///\n+    /// Defaults to true when the `CG_CLIF_DISABLE_INCR_CACHE` env var is set to 1 or false\n+    /// otherwise. Can be set using `-Cllvm-args=disable_incr_cache=...`.\n+    pub disable_incr_cache: bool,\n+}\n+\n+impl Default for BackendConfig {\n+    fn default() -> Self {\n+        BackendConfig {\n+            codegen_mode: CodegenMode::Aot,\n+            jit_args: {\n+                let args = std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n+                args.split(' ').map(|arg| arg.to_string()).collect()\n+            },\n+            display_cg_time: bool_env_var(\"CG_CLIF_DISPLAY_CG_TIME\"),\n+            enable_verifier: cfg!(debug_assertions) || bool_env_var(\"CG_CLIF_ENABLE_VERIFIER\"),\n+            disable_incr_cache: bool_env_var(\"CG_CLIF_DISABLE_INCR_CACHE\"),\n+        }\n+    }\n }\n \n impl BackendConfig {\n     pub fn from_opts(opts: &[String]) -> Result<Self, String> {\n+        fn parse_bool(name: &str, value: &str) -> Result<bool, String> {\n+            value.parse().map_err(|_| format!(\"failed to parse value `{}` for {}\", value, name))\n+        }\n+\n         let mut config = BackendConfig::default();\n         for opt in opts {\n             if let Some((name, value)) = opt.split_once('=') {\n                 match name {\n                     \"mode\" => config.codegen_mode = value.parse()?,\n+                    \"display_cg_time\" => config.display_cg_time = parse_bool(name, value)?,\n+                    \"enable_verifier\" => config.enable_verifier = parse_bool(name, value)?,\n+                    \"disable_incr_cache\" => config.disable_incr_cache = parse_bool(name, value)?,\n                     _ => return Err(format!(\"Unknown option `{}`\", name)),\n                 }\n             } else {\n                 return Err(format!(\"Invalid option `{}`\", opt));\n             }\n         }\n+\n         Ok(config)\n     }\n }"}, {"sha": "6ce174eec81c286cbb931bd0881d7dda00be3404", "filename": "src/driver/aot.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=53bfc6729ae4a53c8092473452de7a272224df5d", "patch": "@@ -16,12 +16,6 @@ use cranelift_object::ObjectModule;\n \n use crate::{prelude::*, BackendConfig};\n \n-fn new_module(tcx: TyCtxt<'_>, name: String) -> ObjectModule {\n-    let module = crate::backend::make_module(tcx.sess, name);\n-    assert_eq!(pointer_ty(tcx), module.target_config().pointer_type());\n-    module\n-}\n-\n struct ModuleCodegenResult(CompiledModule, Option<(WorkProductId, WorkProduct)>);\n \n impl<HCX> HashStable<HCX> for ModuleCodegenResult {\n@@ -32,6 +26,7 @@ impl<HCX> HashStable<HCX> for ModuleCodegenResult {\n \n fn emit_module(\n     tcx: TyCtxt<'_>,\n+    backend_config: &BackendConfig,\n     name: String,\n     kind: ModuleKind,\n     module: ObjectModule,\n@@ -52,7 +47,7 @@ fn emit_module(\n         tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n     }\n \n-    let work_product = if std::env::var(\"CG_CLIF_INCR_CACHE_DISABLED\").is_ok() {\n+    let work_product = if backend_config.disable_incr_cache {\n         None\n     } else {\n         rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n@@ -110,11 +105,13 @@ fn module_codegen(\n     let cgu = tcx.codegen_unit(cgu_name);\n     let mono_items = cgu.items_in_deterministic_order(tcx);\n \n-    let mut module = new_module(tcx, cgu_name.as_str().to_string());\n+    let isa = crate::build_isa(tcx.sess, &backend_config);\n+    let mut module = crate::backend::make_module(tcx.sess, isa, cgu_name.as_str().to_string());\n+    assert_eq!(pointer_ty(tcx), module.target_config().pointer_type());\n \n     let mut cx = crate::CodegenCx::new(\n         tcx,\n-        backend_config,\n+        backend_config.clone(),\n         &mut module,\n         tcx.sess.opts.debuginfo != DebugInfo::None,\n     );\n@@ -144,6 +141,7 @@ fn module_codegen(\n \n     let codegen_result = emit_module(\n         tcx,\n+        &backend_config,\n         cgu.name().as_str().to_string(),\n         ModuleKind::Regular,\n         module,\n@@ -193,14 +191,14 @@ pub(super) fn run_aot(\n         }\n     }\n \n-    let modules = super::time(tcx, \"codegen mono items\", || {\n+    let modules = super::time(tcx, backend_config.display_cg_time, \"codegen mono items\", || {\n         cgus.iter()\n             .map(|cgu| {\n                 let cgu_reuse = determine_cgu_reuse(tcx, cgu);\n                 tcx.sess.cgu_reuse_tracker.set_actual_reuse(&cgu.name().as_str(), cgu_reuse);\n \n                 match cgu_reuse {\n-                    _ if std::env::var(\"CG_CLIF_INCR_CACHE_DISABLED\").is_ok() => {}\n+                    _ if backend_config.disable_incr_cache => {}\n                     CguReuse::No => {}\n                     CguReuse::PreLto => {\n                         return reuse_workproduct_for_cgu(tcx, &*cgu, &mut work_products);\n@@ -212,7 +210,7 @@ pub(super) fn run_aot(\n                 let (ModuleCodegenResult(module, work_product), _) = tcx.dep_graph.with_task(\n                     dep_node,\n                     tcx,\n-                    (backend_config, cgu.name()),\n+                    (backend_config.clone(), cgu.name()),\n                     module_codegen,\n                     rustc_middle::dep_graph::hash_result,\n                 );\n@@ -228,14 +226,17 @@ pub(super) fn run_aot(\n \n     tcx.sess.abort_if_errors();\n \n-    let mut allocator_module = new_module(tcx, \"allocator_shim\".to_string());\n+    let isa = crate::build_isa(tcx.sess, &backend_config);\n+    let mut allocator_module = crate::backend::make_module(tcx.sess, isa, \"allocator_shim\".to_string());\n+    assert_eq!(pointer_ty(tcx), allocator_module.target_config().pointer_type());\n     let mut allocator_unwind_context = UnwindContext::new(tcx, allocator_module.isa(), true);\n     let created_alloc_shim =\n         crate::allocator::codegen(tcx, &mut allocator_module, &mut allocator_unwind_context);\n \n     let allocator_module = if created_alloc_shim {\n         let ModuleCodegenResult(module, work_product) = emit_module(\n             tcx,\n+            &backend_config,\n             \"allocator_shim\".to_string(),\n             ModuleKind::Allocator,\n             allocator_module,"}, {"sha": "e19283af10da7a9d8250c6dc6a63ce9b8accfbd0", "filename": "src/driver/jit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=53bfc6729ae4a53c8092473452de7a272224df5d", "patch": "@@ -27,8 +27,8 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n \n     let imported_symbols = load_imported_symbols_for_jit(tcx);\n \n-    let mut jit_builder =\n-        JITBuilder::with_isa(crate::build_isa(tcx.sess), cranelift_module::default_libcall_names());\n+    let isa = crate::build_isa(tcx.sess, &backend_config);\n+    let mut jit_builder = JITBuilder::with_isa(isa, cranelift_module::default_libcall_names());\n     jit_builder.hotswap(matches!(backend_config.codegen_mode, CodegenMode::JitLazy));\n     crate::compiler_builtins::register_functions_for_jit(&mut jit_builder);\n     jit_builder.symbols(imported_symbols);\n@@ -44,9 +44,9 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         .into_iter()\n         .collect::<Vec<(_, (_, _))>>();\n \n-    let mut cx = crate::CodegenCx::new(tcx, backend_config, &mut jit_module, false);\n+    let mut cx = crate::CodegenCx::new(tcx, backend_config.clone(), &mut jit_module, false);\n \n-    super::time(tcx, \"codegen mono items\", || {\n+    super::time(tcx, backend_config.display_cg_time, \"codegen mono items\", || {\n         super::predefine_mono_items(&mut cx, &mono_items);\n         for (mono_item, _) in mono_items {\n             match mono_item {\n@@ -87,9 +87,8 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         \"Rustc codegen cranelift will JIT run the executable, because -Cllvm-args=mode=jit was passed\"\n     );\n \n-    let args = ::std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n     let args = std::iter::once(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string())\n-        .chain(args.split(' '))\n+        .chain(backend_config.jit_args.iter().map(|arg| &**arg))\n         .map(|arg| CString::new(arg).unwrap())\n         .collect::<Vec<_>>();\n     let mut argv = args.iter().map(|arg| arg.as_ptr()).collect::<Vec<_>>();"}, {"sha": "960e10182d812d2622d610b8b7df762bb0c7df3b", "filename": "src/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=53bfc6729ae4a53c8092473452de7a272224df5d", "patch": "@@ -65,8 +65,8 @@ fn predefine_mono_items<'tcx>(\n     });\n }\n \n-fn time<R>(tcx: TyCtxt<'_>, name: &'static str, f: impl FnOnce() -> R) -> R {\n-    if std::env::var(\"CG_CLIF_DISPLAY_CG_TIME\").as_ref().map(|val| &**val) == Ok(\"1\") {\n+fn time<R>(tcx: TyCtxt<'_>, display: bool, name: &'static str, f: impl FnOnce() -> R) -> R {\n+    if display {\n         println!(\"[{:<30}: {}] start\", tcx.crate_name(LOCAL_CRATE), name);\n         let before = std::time::Instant::now();\n         let res = tcx.sess.time(name, f);"}, {"sha": "9a417f35ae2004fadb0eaa8dc7f9ba850e91b6b7", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=53bfc6729ae4a53c8092473452de7a272224df5d", "patch": "@@ -193,7 +193,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n-        let config = if let Some(config) = self.config {\n+        let config = if let Some(config) = self.config.clone() {\n             config\n         } else {\n             BackendConfig::from_opts(&tcx.sess.opts.cg.llvm_args)\n@@ -237,17 +237,16 @@ fn target_triple(sess: &Session) -> target_lexicon::Triple {\n     sess.target.llvm_target.parse().unwrap()\n }\n \n-fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n+fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::TargetIsa + 'static> {\n     use target_lexicon::BinaryFormat;\n \n     let target_triple = crate::target_triple(sess);\n \n     let mut flags_builder = settings::builder();\n     flags_builder.enable(\"is_pic\").unwrap();\n     flags_builder.set(\"enable_probestack\", \"false\").unwrap(); // __cranelift_probestack is not provided\n-    let enable_verifier =\n-        cfg!(debug_assertions) || std::env::var(\"CG_CLIF_ENABLE_VERIFIER\").is_ok();\n-    flags_builder.set(\"enable_verifier\", if enable_verifier { \"true\" } else { \"false\" }).unwrap();\n+    let enable_verifier = if backend_config.enable_verifier { \"true\" } else { \"false\" };\n+    flags_builder.set(\"enable_verifier\", enable_verifier).unwrap();\n \n     let tls_model = match target_triple.binary_format {\n         BinaryFormat::Elf => \"elf_gd\","}, {"sha": "166151ecc70cc9ad7afa79af95b2f8331dad1d8a", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bfc6729ae4a53c8092473452de7a272224df5d/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=53bfc6729ae4a53c8092473452de7a272224df5d", "patch": "@@ -248,7 +248,7 @@ pub(crate) fn write_clif_file<'tcx>(\n             &mut clif,\n             &context.func,\n             &DisplayFunctionAnnotations {\n-                isa: Some(&*crate::build_isa(tcx.sess)),\n+                isa,\n                 value_ranges: value_ranges.as_ref(),\n             },\n         )"}]}