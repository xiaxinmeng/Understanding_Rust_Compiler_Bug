{"sha": "1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "node_id": "C_kwDOAAsO6NoAKDFjYzBhZTRjYmJjYjk5MDkwMzViNWI5OWZjMjBiZjZiNzlmNDAxMGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-17T05:29:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-17T05:29:57Z"}, "message": "Rollup merge of #89869 - kpreid:from-doc, r=yaahc\n\nAdd documentation to more `From::from` implementations.\n\nFor users looking at documentation through IDE popups, this gives them relevant information rather than the generic trait documentation wording \u201cPerforms the conversion\u201d. For users reading the documentation for a specific type for any reason, this informs them when the conversion may allocate or copy significant memory versus when it is always a move or cheap copy.\n\nNotes on specific cases:\n* The new documentation for `From<T> for T` explains that it is not a conversion at all.\n* Also documented `impl<T, U> Into<U> for T where U: From<T>`, the other central blanket implementation of conversion.\n* The new documentation for construction of maps and sets from arrays of keys mentions the handling of duplicates. Future work could be to do this for *all* code paths that convert an iterable to a map or set.\n* I did not add documentation to conversions of a specific error type to a more general error type.\n* I did not add documentation to unstable code.\n\nThis change was prepared by searching for the text \"From<... for\" and so may have missed some cases that for whatever reason did not match. I also looked for `Into` impls but did not find any worth documenting by the above criteria.", "tree": {"sha": "5a6133d1341637821d26a31af27b8923e244e134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a6133d1341637821d26a31af27b8923e244e134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiDd1VCRBK7hj4Ov3rIwAAHAoIABufap2+Tz20rA0gPkFa6RZg\nNaGvra/IfKbJVHdZfJNm2LgCSTTCWNVAcWgN7UdRnALrkbjVxbQ7e59uo05VjC45\n+66GQfq9WQBHoJvmdhxWVvFjnDGn22WKng7Cqg9yXSMDHSnai71i732pRg+tRj1E\nRldhsqkQjI88YxuYMwKbvP6Prps9TFgpluG7+Ez1ej0VVCMPQAdaRzKSjTI6cjJZ\nGckkFvn51Xt4IbZb8p/Zqvx6l3Np4JaXkYwKJm/RcJZ8SkIV2hhZBpBAYt6KyQem\nBn0siyImrMXDvte/Jac4T5dy4XiQk4xgUXOKA8WGZ/LZFvYwHNIwn8Ng9pD6pl4=\n=VCSH\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a6133d1341637821d26a31af27b8923e244e134\nparent 930fc4f59ddeb9f26d554a2c75c5355989189540\nparent 6fd5cf51c1528c16f8a186ced5d6d21b1d70e319\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645075797 +0100\ncommitter GitHub <noreply@github.com> 1645075797 +0100\n\nRollup merge of #89869 - kpreid:from-doc, r=yaahc\n\nAdd documentation to more `From::from` implementations.\n\nFor users looking at documentation through IDE popups, this gives them relevant information rather than the generic trait documentation wording \u201cPerforms the conversion\u201d. For users reading the documentation for a specific type for any reason, this informs them when the conversion may allocate or copy significant memory versus when it is always a move or cheap copy.\n\nNotes on specific cases:\n* The new documentation for `From<T> for T` explains that it is not a conversion at all.\n* Also documented `impl<T, U> Into<U> for T where U: From<T>`, the other central blanket implementation of conversion.\n* The new documentation for construction of maps and sets from arrays of keys mentions the handling of duplicates. Future work could be to do this for *all* code paths that convert an iterable to a map or set.\n* I did not add documentation to conversions of a specific error type to a more general error type.\n* I did not add documentation to unstable code.\n\nThis change was prepared by searching for the text \"From<... for\" and so may have missed some cases that for whatever reason did not match. I also looked for `Into` impls but did not find any worth documenting by the above criteria.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "html_url": "https://github.com/rust-lang/rust/commit/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "930fc4f59ddeb9f26d554a2c75c5355989189540", "url": "https://api.github.com/repos/rust-lang/rust/commits/930fc4f59ddeb9f26d554a2c75c5355989189540", "html_url": "https://github.com/rust-lang/rust/commit/930fc4f59ddeb9f26d554a2c75c5355989189540"}, {"sha": "6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319", "html_url": "https://github.com/rust-lang/rust/commit/6fd5cf51c1528c16f8a186ced5d6d21b1d70e319"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "67f5b386ecd7fd05a58f1baccabb51695e863853", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -2052,6 +2052,8 @@ where\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<K: Ord, V, const N: usize> From<[(K, V); N]> for BTreeMap<K, V> {\n+    /// Converts a `[(K, V); N]` into a `BTreeMap<(K, V)>`.\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///"}, {"sha": "a4315be74e36c27bea4195f1d80574042e089a85", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -1097,6 +1097,8 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T: Ord, const N: usize> From<[T; N]> for BTreeSet<T> {\n+    /// Converts a `[T; N]` into a `BTreeSet<T>`.\n+    ///\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///"}, {"sha": "d81f24e72024d5ea7688ca30fd44e5cbffb8386b", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -1953,6 +1953,8 @@ impl<T: Hash> Hash for LinkedList<T> {\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T, const N: usize> From<[T; N]> for LinkedList<T> {\n+    /// Converts a `[T; N]` into a `LinkedList<T>`.\n+    ///\n     /// ```\n     /// use std::collections::LinkedList;\n     ///"}, {"sha": "763175fc0451f07861189357e870bd8b91496e1b", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -3049,6 +3049,8 @@ impl<T, A: Allocator> From<VecDeque<T, A>> for Vec<T, A> {\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T, const N: usize> From<[T; N]> for VecDeque<T> {\n+    /// Converts a `[T; N]` into a `VecDeque<T>`.\n+    ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///"}, {"sha": "3dc3eee4133b6413f2bfaa4b4059b06cb585b426", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -2906,17 +2906,18 @@ impl<T: Clone> From<&mut [T]> for Vec<T> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"vec_from_array\", since = \"1.44.0\")]\n impl<T, const N: usize> From<[T; N]> for Vec<T> {\n-    #[cfg(not(test))]\n-    fn from(s: [T; N]) -> Vec<T> {\n-        <[T]>::into_vec(box s)\n-    }\n     /// Allocate a `Vec<T>` and move `s`'s items into it.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// assert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n     /// ```\n+    #[cfg(not(test))]\n+    fn from(s: [T; N]) -> Vec<T> {\n+        <[T]>::into_vec(box s)\n+    }\n+\n     #[cfg(test)]\n     fn from(s: [T; N]) -> Vec<T> {\n         crate::slice::into_vec(box s)"}, {"sha": "aef7ad77568036d29752182ea18a404ae1fc711b", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -315,6 +315,7 @@ impl<T: Ord + Copy> Ord for Cell<T> {\n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for Cell<T> {\n+    /// Creates a new `Cell<T>` containing the given value.\n     fn from(t: T) -> Cell<T> {\n         Cell::new(t)\n     }\n@@ -1244,6 +1245,7 @@ impl<T: ?Sized + Ord> Ord for RefCell<T> {\n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for RefCell<T> {\n+    /// Creates a new `RefCell<T>` containing the given value.\n     fn from(t: T) -> RefCell<T> {\n         RefCell::new(t)\n     }\n@@ -1979,6 +1981,7 @@ impl<T: Default> Default for UnsafeCell<T> {\n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for UnsafeCell<T> {\n+    /// Creates a new `UnsafeCell<T>` containing the given value.\n     fn from(t: T) -> UnsafeCell<T> {\n         UnsafeCell::new(t)\n     }"}, {"sha": "0ceedf936333d6d4659998664d0e0b89d6b8d168", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -538,6 +538,10 @@ impl<T, U> const Into<U> for T\n where\n     U: ~const From<T>,\n {\n+    /// Calls `U::from(self)`.\n+    ///\n+    /// That is, this conversion is whatever the implementation of\n+    /// <code>[From]&lt;T&gt; for U</code> chooses to do.\n     fn into(self) -> U {\n         U::from(self)\n     }\n@@ -547,6 +551,7 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for T {\n+    /// Returns the argument unchanged.\n     fn from(t: T) -> T {\n         t\n     }"}, {"sha": "88826782a3d607318a61348d4ad666b9392c830e", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -75,6 +75,7 @@ impl<T: Eq> Eq for OnceCell<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> const From<T> for OnceCell<T> {\n+    /// Creates a new `OnceCell<T>` which already contains the given `value`.\n     fn from(value: T) -> Self {\n         OnceCell { inner: UnsafeCell::new(Some(value)) }\n     }"}, {"sha": "0aa8e9960a8dd706db63cd1575f4a4ced3804880", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -721,6 +721,9 @@ impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T: ?Sized> const From<&mut T> for NonNull<T> {\n+    /// Converts a `&mut T` to a `NonNull<T>`.\n+    ///\n+    /// This conversion is safe and infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         // SAFETY: A mutable reference cannot be null.\n@@ -731,6 +734,9 @@ impl<T: ?Sized> const From<&mut T> for NonNull<T> {\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T: ?Sized> const From<&T> for NonNull<T> {\n+    /// Converts a `&T` to a `NonNull<T>`.\n+    ///\n+    /// This conversion is safe and infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &T) -> Self {\n         // SAFETY: A reference cannot be null, so the conditions for"}, {"sha": "661d111c99d5294b7d7bf79db10aad7c5bb2b936", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -178,6 +178,9 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n \n #[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> const From<&mut T> for Unique<T> {\n+    /// Converts a `&mut T` to a `Unique<T>`.\n+    ///\n+    /// This conversion is infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         // SAFETY: A mutable reference cannot be null"}, {"sha": "9ee88dd601493a03f910e583dd674801a0bf811c", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -1295,6 +1295,7 @@ impl const From<bool> for AtomicBool {\n #[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<*mut T> for AtomicPtr<T> {\n+    /// Converts a `*mut T` into an `AtomicPtr<T>`.\n     #[inline]\n     fn from(p: *mut T) -> Self {\n         Self::new(p)"}, {"sha": "41f0a25dbc3e08daa688c5b6202ba987d468765a", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -243,7 +243,7 @@ impl<T, E> Poll<Option<Result<T, E>>> {\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for Poll<T> {\n-    /// Convert to a `Ready` variant.\n+    /// Moves the value into a [`Poll::Ready`] to make a `Poll<T>`.\n     ///\n     /// # Example\n     ///"}, {"sha": "6e70d5ca02d7532f48359ce5bc2cb98f129a294c", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -871,6 +871,8 @@ impl Borrow<CStr> for CString {\n \n #[stable(feature = \"cstring_from_cow_cstr\", since = \"1.28.0\")]\n impl<'a> From<Cow<'a, CStr>> for CString {\n+    /// Converts a `Cow<'a, CStr>` into a `CString`, by copying the contents if they are\n+    /// borrowed.\n     #[inline]\n     fn from(s: Cow<'a, CStr>) -> Self {\n         s.into_owned()\n@@ -879,6 +881,8 @@ impl<'a> From<Cow<'a, CStr>> for CString {\n \n #[stable(feature = \"box_from_c_str\", since = \"1.17.0\")]\n impl From<&CStr> for Box<CStr> {\n+    /// Converts a `&CStr` into a `Box<CStr>`,\n+    /// by copying the contents into a newly allocated [`Box`].\n     fn from(s: &CStr) -> Box<CStr> {\n         let boxed: Box<[u8]> = Box::from(s.to_bytes_with_nul());\n         unsafe { Box::from_raw(Box::into_raw(boxed) as *mut CStr) }\n@@ -887,6 +891,8 @@ impl From<&CStr> for Box<CStr> {\n \n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl From<Cow<'_, CStr>> for Box<CStr> {\n+    /// Converts a `Cow<'a, CStr>` into a `Box<CStr>`,\n+    /// by copying the contents if they are borrowed.\n     #[inline]\n     fn from(cow: Cow<'_, CStr>) -> Box<CStr> {\n         match cow {\n@@ -984,6 +990,8 @@ impl From<CString> for Arc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&CStr> for Arc<CStr> {\n+    /// Converts a `&CStr` into a `Arc<CStr>`,\n+    /// by copying the contents into a newly allocated [`Arc`].\n     #[inline]\n     fn from(s: &CStr) -> Arc<CStr> {\n         let arc: Arc<[u8]> = Arc::from(s.to_bytes_with_nul());\n@@ -1004,6 +1012,8 @@ impl From<CString> for Rc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&CStr> for Rc<CStr> {\n+    /// Converts a `&CStr` into a `Rc<CStr>`,\n+    /// by copying the contents into a newly allocated [`Rc`].\n     #[inline]\n     fn from(s: &CStr) -> Rc<CStr> {\n         let rc: Rc<[u8]> = Rc::from(s.to_bytes_with_nul());\n@@ -1530,6 +1540,7 @@ impl ToOwned for CStr {\n \n #[stable(feature = \"cstring_asref\", since = \"1.7.0\")]\n impl From<&CStr> for CString {\n+    /// Copies the contents of the `&CStr` into a newly allocated `CString`.\n     fn from(s: &CStr) -> CString {\n         s.to_owned()\n     }"}, {"sha": "9b5e5d6c0cc4b1d377896ba1ba8d7dc444a2bfe3", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -452,6 +452,8 @@ impl From<String> for OsString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + AsRef<OsStr>> From<&T> for OsString {\n+    /// Copies any value implementing <code>[AsRef]&lt;[OsStr]&gt;</code>\n+    /// into a newly allocated [`OsString`].\n     fn from(s: &T) -> OsString {\n         s.as_ref().to_os_string()\n     }\n@@ -942,6 +944,7 @@ impl OsStr {\n \n #[stable(feature = \"box_from_os_str\", since = \"1.17.0\")]\n impl From<&OsStr> for Box<OsStr> {\n+    /// Copies the string into a newly allocated <code>[Box]&lt;[OsStr]&gt;</code>.\n     #[inline]\n     fn from(s: &OsStr) -> Box<OsStr> {\n         let rw = Box::into_raw(s.inner.into_box()) as *mut OsStr;\n@@ -951,6 +954,8 @@ impl From<&OsStr> for Box<OsStr> {\n \n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl From<Cow<'_, OsStr>> for Box<OsStr> {\n+    /// Converts a `Cow<'a, OsStr>` into a <code>[Box]&lt;[OsStr]&gt;</code>,\n+    /// by copying the contents if they are borrowed.\n     #[inline]\n     fn from(cow: Cow<'_, OsStr>) -> Box<OsStr> {\n         match cow {\n@@ -1000,6 +1005,7 @@ impl From<OsString> for Arc<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&OsStr> for Arc<OsStr> {\n+    /// Copies the string into a newly allocated <code>[Arc]&lt;[OsStr]&gt;</code>.\n     #[inline]\n     fn from(s: &OsStr) -> Arc<OsStr> {\n         let arc = s.inner.into_arc();\n@@ -1020,6 +1026,7 @@ impl From<OsString> for Rc<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&OsStr> for Rc<OsStr> {\n+    /// Copies the string into a newly allocated <code>[Rc]&lt;[OsStr]&gt;</code>.\n     #[inline]\n     fn from(s: &OsStr) -> Rc<OsStr> {\n         let rc = s.inner.into_rc();\n@@ -1029,6 +1036,7 @@ impl From<&OsStr> for Rc<OsStr> {\n \n #[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n impl<'a> From<OsString> for Cow<'a, OsStr> {\n+    /// Moves the string into a [`Cow::Owned`].\n     #[inline]\n     fn from(s: OsString) -> Cow<'a, OsStr> {\n         Cow::Owned(s)\n@@ -1037,6 +1045,7 @@ impl<'a> From<OsString> for Cow<'a, OsStr> {\n \n #[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n impl<'a> From<&'a OsStr> for Cow<'a, OsStr> {\n+    /// Converts the string reference into a [`Cow::Borrowed`].\n     #[inline]\n     fn from(s: &'a OsStr) -> Cow<'a, OsStr> {\n         Cow::Borrowed(s)\n@@ -1045,6 +1054,7 @@ impl<'a> From<&'a OsStr> for Cow<'a, OsStr> {\n \n #[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n impl<'a> From<&'a OsString> for Cow<'a, OsStr> {\n+    /// Converts the string reference into a [`Cow::Borrowed`].\n     #[inline]\n     fn from(s: &'a OsString) -> Cow<'a, OsStr> {\n         Cow::Borrowed(s.as_os_str())\n@@ -1053,6 +1063,8 @@ impl<'a> From<&'a OsString> for Cow<'a, OsStr> {\n \n #[stable(feature = \"osstring_from_cow_osstr\", since = \"1.28.0\")]\n impl<'a> From<Cow<'a, OsStr>> for OsString {\n+    /// Converts a `Cow<'a, OsStr>` into an [`OsString`],\n+    /// by copying the contents if they are borrowed.\n     #[inline]\n     fn from(s: Cow<'a, OsStr>) -> Self {\n         s.into_owned()"}, {"sha": "adb8b30ec08930b0c7c8827e4f580e67c2576dee", "filename": "library/std/src/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -1600,7 +1600,7 @@ impl From<Cow<'_, Path>> for Box<Path> {\n \n #[stable(feature = \"path_buf_from_box\", since = \"1.18.0\")]\n impl From<Box<Path>> for PathBuf {\n-    /// Converts a `Box<Path>` into a `PathBuf`\n+    /// Converts a <code>[Box]&lt;[Path]&gt;</code> into a [`PathBuf`].\n     ///\n     /// This conversion does not allocate or copy memory.\n     #[inline]\n@@ -1611,7 +1611,7 @@ impl From<Box<Path>> for PathBuf {\n \n #[stable(feature = \"box_from_path_buf\", since = \"1.20.0\")]\n impl From<PathBuf> for Box<Path> {\n-    /// Converts a `PathBuf` into a `Box<Path>`\n+    /// Converts a [`PathBuf`] into a <code>[Box]&lt;[Path]&gt;</code>.\n     ///\n     /// This conversion currently should not allocate memory,\n     /// but this behavior is not guaranteed on all platforms or in all future versions.\n@@ -1631,7 +1631,7 @@ impl Clone for Box<Path> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + AsRef<OsStr>> From<&T> for PathBuf {\n-    /// Converts a borrowed `OsStr` to a `PathBuf`.\n+    /// Converts a borrowed [`OsStr`] to a [`PathBuf`].\n     ///\n     /// Allocates a [`PathBuf`] and copies the data into it.\n     #[inline]"}, {"sha": "e3fff155e47224b6728fa5c355d4de98ca9acbe1", "filename": "library/std/src/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=1cc0ae4cbbcb9909035b5b99fc20bf6b79f4010c", "patch": "@@ -1277,7 +1277,7 @@ impl fmt::Debug for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStdin> for Stdio {\n-    /// Converts a `ChildStdin` into a `Stdio`\n+    /// Converts a [`ChildStdin`] into a [`Stdio`].\n     ///\n     /// # Examples\n     ///\n@@ -1306,7 +1306,7 @@ impl From<ChildStdin> for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStdout> for Stdio {\n-    /// Converts a `ChildStdout` into a `Stdio`\n+    /// Converts a [`ChildStdout`] into a [`Stdio`].\n     ///\n     /// # Examples\n     ///\n@@ -1335,7 +1335,7 @@ impl From<ChildStdout> for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStderr> for Stdio {\n-    /// Converts a `ChildStderr` into a `Stdio`\n+    /// Converts a [`ChildStderr`] into a [`Stdio`].\n     ///\n     /// # Examples\n     ///\n@@ -1366,7 +1366,7 @@ impl From<ChildStderr> for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<fs::File> for Stdio {\n-    /// Converts a `File` into a `Stdio`\n+    /// Converts a [`File`](fs::File) into a [`Stdio`].\n     ///\n     /// # Examples\n     ///"}]}