{"sha": "a5da29cf8f45f831e52c1e027eea73f3937c810d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZGEyOWNmOGY0NWY4MzFlNTJjMWUwMjdlZWE3M2YzOTM3YzgxMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-14T12:58:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-14T12:58:58Z"}, "message": "Auto merge of #83640 - bjorn3:shared_metadata_reader, r=nagisa\n\nUse the object crate for metadata reading\n\nThis allows sharing the metadata reader between cg_llvm, cg_clif and other codegen backends.\n\nThis is not currently useful for rlib reading with cg_spirv ([rust-gpu](https://github.com/EmbarkStudios/rust-gpu/)) as it uses tar rather than ar as .rlib format, but it is useful for dylib reading required for loading proc macros. (cc `@eddyb)`\n\nThe object crate is already trusted as dependency of libstd through backtrace. As far as I know it supports reading all object file formats used by targets for which we support rust dylibs with crate metadata, but I am not certain. If this happens to not be the case, I could keep using LLVM for reading dylib metadata.\n\nMarked as WIP for a perf run and as it is based on #83637.", "tree": {"sha": "9a537ddc165cbef6fef0c0a86f1cf03f71120f96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a537ddc165cbef6fef0c0a86f1cf03f71120f96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5da29cf8f45f831e52c1e027eea73f3937c810d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5da29cf8f45f831e52c1e027eea73f3937c810d", "html_url": "https://github.com/rust-lang/rust/commit/a5da29cf8f45f831e52c1e027eea73f3937c810d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5da29cf8f45f831e52c1e027eea73f3937c810d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d342a3490b6f85f5bec80a7b90a576e5044719aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d342a3490b6f85f5bec80a7b90a576e5044719aa", "html_url": "https://github.com/rust-lang/rust/commit/d342a3490b6f85f5bec80a7b90a576e5044719aa"}, {"sha": "62f64af43051fde2b9e643a0f5f06cf88e602a59", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f64af43051fde2b9e643a0f5f06cf88e602a59", "html_url": "https://github.com/rust-lang/rust/commit/62f64af43051fde2b9e643a0f5f06cf88e602a59"}], "stats": {"total": 68, "additions": 2, "deletions": 66}, "files": [{"sha": "ff6e1856059af0066f85b7f8023f9ec5e03990c8", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5da29cf8f45f831e52c1e027eea73f3937c810d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5da29cf8f45f831e52c1e027eea73f3937c810d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a5da29cf8f45f831e52c1e027eea73f3937c810d", "patch": "@@ -165,7 +165,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     }\n \n     fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n-        Box::new(crate::metadata::CraneliftMetadataLoader)\n+        Box::new(rustc_codegen_ssa::back::metadata::DefaultMetadataLoader)\n     }\n \n     fn provide(&self, _providers: &mut Providers) {}"}, {"sha": "ab238244d68d504c983bfff1ffea366fd6eb7c5f", "filename": "src/metadata.rs", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a5da29cf8f45f831e52c1e027eea73f3937c810d/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5da29cf8f45f831e52c1e027eea73f3937c810d/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=a5da29cf8f45f831e52c1e027eea73f3937c810d", "patch": "@@ -1,73 +1,9 @@\n-//! Reading and writing of the rustc metadata for rlibs and dylibs\n+//! Writing of the rustc metadata for dylibs\n \n-use std::fs::File;\n-use std::path::Path;\n-\n-use rustc_codegen_ssa::METADATA_FILENAME;\n-use rustc_data_structures::memmap::Mmap;\n-use rustc_data_structures::owning_ref::OwningRef;\n-use rustc_data_structures::rustc_erase_owner;\n-use rustc_data_structures::sync::MetadataRef;\n-use rustc_middle::middle::cstore::MetadataLoader;\n use rustc_middle::ty::TyCtxt;\n-use rustc_target::spec::Target;\n \n use crate::backend::WriteMetadata;\n \n-/// The metadata loader used by cg_clif.\n-///\n-/// The metadata is stored in the same format as cg_llvm.\n-///\n-/// # Metadata location\n-///\n-/// <dl>\n-/// <dt>rlib</dt>\n-/// <dd>The metadata can be found in the `lib.rmeta` file inside of the ar archive.</dd>\n-/// <dt>dylib</dt>\n-/// <dd>The metadata can be found in the `.rustc` section of the shared library.</dd>\n-/// </dl>\n-pub(crate) struct CraneliftMetadataLoader;\n-\n-fn load_metadata_with(\n-    path: &Path,\n-    f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n-) -> Result<MetadataRef, String> {\n-    let file = File::open(path).map_err(|e| format!(\"{:?}\", e))?;\n-    let data = unsafe { Mmap::map(file) }.map_err(|e| format!(\"{:?}\", e))?;\n-    let metadata = OwningRef::new(data).try_map(f)?;\n-    return Ok(rustc_erase_owner!(metadata.map_owner_box()));\n-}\n-\n-impl MetadataLoader for CraneliftMetadataLoader {\n-    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n-        load_metadata_with(path, |data| {\n-            let archive = object::read::archive::ArchiveFile::parse(&*data)\n-                .map_err(|e| format!(\"{:?}\", e))?;\n-\n-            for entry_result in archive.members() {\n-                let entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n-                if entry.name() == METADATA_FILENAME.as_bytes() {\n-                    return Ok(entry.data());\n-                }\n-            }\n-\n-            Err(\"couldn't find metadata entry\".to_string())\n-        })\n-    }\n-\n-    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n-        use object::{Object, ObjectSection};\n-\n-        load_metadata_with(path, |data| {\n-            let file = object::File::parse(&data).map_err(|e| format!(\"parse: {:?}\", e))?;\n-            file.section_by_name(\".rustc\")\n-                .ok_or(\"no .rustc section\")?\n-                .data()\n-                .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))\n-        })\n-    }\n-}\n-\n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n pub(crate) fn write_metadata<O: WriteMetadata>(tcx: TyCtxt<'_>, object: &mut O) {\n     use snap::write::FrameEncoder;"}]}