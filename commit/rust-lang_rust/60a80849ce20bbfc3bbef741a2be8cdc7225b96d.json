{"sha": "60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTgwODQ5Y2UyMGJiZmMzYmJlZjc0MWEyYmU4Y2RjNzIyNWI5NmQ=", "commit": {"author": {"name": "Joe Frikker", "email": "jfrikker@gmail.com", "date": "2019-06-19T03:22:51Z"}, "committer": {"name": "Joe Frikker", "email": "jfrikker@gmail.com", "date": "2019-06-22T20:37:05Z"}, "message": "Adding try_err lint", "tree": {"sha": "9b3b65ba228f1e7a523f571325dd762215aba839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b3b65ba228f1e7a523f571325dd762215aba839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "html_url": "https://github.com/rust-lang/rust/commit/60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/comments", "author": {"login": "jfrikker", "id": 1620319, "node_id": "MDQ6VXNlcjE2MjAzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1620319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrikker", "html_url": "https://github.com/jfrikker", "followers_url": "https://api.github.com/users/jfrikker/followers", "following_url": "https://api.github.com/users/jfrikker/following{/other_user}", "gists_url": "https://api.github.com/users/jfrikker/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrikker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrikker/subscriptions", "organizations_url": "https://api.github.com/users/jfrikker/orgs", "repos_url": "https://api.github.com/users/jfrikker/repos", "events_url": "https://api.github.com/users/jfrikker/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrikker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jfrikker", "id": 1620319, "node_id": "MDQ6VXNlcjE2MjAzMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1620319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfrikker", "html_url": "https://github.com/jfrikker", "followers_url": "https://api.github.com/users/jfrikker/followers", "following_url": "https://api.github.com/users/jfrikker/following{/other_user}", "gists_url": "https://api.github.com/users/jfrikker/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfrikker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfrikker/subscriptions", "organizations_url": "https://api.github.com/users/jfrikker/orgs", "repos_url": "https://api.github.com/users/jfrikker/repos", "events_url": "https://api.github.com/users/jfrikker/events{/privacy}", "received_events_url": "https://api.github.com/users/jfrikker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f", "html_url": "https://github.com/rust-lang/rust/commit/c5d1ecd4747d73e0c8a62b82b97cb6d5f83db45f"}], "stats": {"total": 233, "additions": 231, "deletions": 2}, "files": [{"sha": "461adb729f9b31ec97028e28bed1d463f3f7a987", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "patch": "@@ -1134,6 +1134,7 @@ Released 2018-09-13\n [`transmuting_null`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmuting_null\n [`trivial_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivial_regex\n [`trivially_copy_pass_by_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\n+[`try_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#try_err\n [`type_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n [`unicode_not_nfc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unicode_not_nfc\n [`unimplemented`]: https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented"}, {"sha": "c1a25aa13006b02bb6dd456d24890cc9f78faad4", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 305 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 306 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "d239f14339f561ac4e512c31d01f963dfae2d6b5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "patch": "@@ -263,6 +263,7 @@ pub mod temporary_assignment;\n pub mod transmute;\n pub mod transmuting_null;\n pub mod trivially_copy_pass_by_ref;\n+pub mod try_err;\n pub mod types;\n pub mod unicode;\n pub mod unsafe_removed_from_name;\n@@ -546,6 +547,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_early_lint_pass(box literal_representation::DecimalLiteralRepresentation::new(\n             conf.literal_representation_threshold\n     ));\n+    reg.register_late_lint_pass(box try_err::TryErr);\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::InfiniteIter);\n@@ -861,6 +863,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         transmute::WRONG_TRANSMUTE,\n         transmuting_null::TRANSMUTING_NULL,\n         trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF,\n+        try_err::TRY_ERR,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BORROWED_BOX,\n         types::BOX_VEC,\n@@ -963,6 +966,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         returns::NEEDLESS_RETURN,\n         returns::UNUSED_UNIT,\n         strings::STRING_LIT_AS_BYTES,\n+        try_err::TRY_ERR,\n         types::FN_TO_NUMERIC_CAST,\n         types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n         types::IMPLICIT_HASHER,"}, {"sha": "ec0b96174da4e61f4c1f83d6cd12591b3a0478e1", "filename": "clippy_lints/src/try_err.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "patch": "@@ -0,0 +1,120 @@\n+use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n+use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::Ty;\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usages of `Err(x)?`.\n+    ///\n+    /// **Why is this bad?** The `?` operator is designed to allow calls that\n+    /// can fail to be easily chained. For example, `foo()?.bar()` or\n+    /// `foo(bar()?)`. Because `Err(x)?` can't be used that way (it will\n+    /// always return), it is more clear to write `return Err(x)`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// // Bad\n+    /// fn foo(fail: bool) -> Result<i32, String> {\n+    ///     if fail {\n+    ///       Err(\"failed\")?;\n+    ///     }\n+    ///     Ok(0)\n+    /// }\n+    ///\n+    /// // Good\n+    /// fn foo(fail: bool) -> Result<i32, String> {\n+    ///     if fail {\n+    ///       return Err(\"failed\".into());\n+    ///     }\n+    ///     Ok(0)\n+    /// }\n+    /// ```\n+    pub TRY_ERR,\n+    style,\n+    \"return errors explicitly rather than hiding them behind a `?`\"\n+}\n+\n+declare_lint_pass!(TryErr => [TRY_ERR]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TryErr {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        // Looks for a structure like this:\n+        // match ::std::ops::Try::into_result(Err(5)) {\n+        //     ::std::result::Result::Err(err) =>\n+        //         #[allow(unreachable_code)]\n+        //         return ::std::ops::Try::from_error(::std::convert::From::from(err)),\n+        //     ::std::result::Result::Ok(val) =>\n+        //         #[allow(unreachable_code)]\n+        //         val,\n+        // };\n+        if_chain! {\n+            if let ExprKind::Match(ref match_arg, _, MatchSource::TryDesugar) = expr.node;\n+            if let ExprKind::Call(ref match_fun, ref try_args) = match_arg.node;\n+            if let ExprKind::Path(ref match_fun_path) = match_fun.node;\n+            if match_qpath(match_fun_path, &[\"std\", \"ops\", \"Try\", \"into_result\"]);\n+            if let Some(ref try_arg) = try_args.get(0);\n+            if let ExprKind::Call(ref err_fun, ref err_args) = try_arg.node;\n+            if let Some(ref err_arg) = err_args.get(0);\n+            if let ExprKind::Path(ref err_fun_path) = err_fun.node;\n+            if match_qpath(err_fun_path, &paths::RESULT_ERR);\n+            if let Some(return_type) = find_err_return_type(cx, &expr.node);\n+\n+            then {\n+                let err_type = cx.tables.expr_ty(err_arg);\n+                let suggestion = if err_type == return_type {\n+                    format!(\"return Err({})\", snippet(cx, err_arg.span, \"_\"))\n+                } else {\n+                    format!(\"return Err({}.into())\", snippet(cx, err_arg.span, \"_\"))\n+                };\n+\n+                span_lint_and_then(\n+                    cx,\n+                    TRY_ERR,\n+                    expr.span,\n+                    &format!(\"confusing error return, consider using `{}`\", suggestion),\n+                    |db| {\n+                        db.span_suggestion(\n+                            expr.span,\n+                            \"try this\",\n+                            suggestion,\n+                            Applicability::MaybeIncorrect\n+                        );\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+// In order to determine whether to suggest `.into()` or not, we need to find the error type the\n+// function returns. To do that, we look for the From::from call (see tree above), and capture\n+// its output type.\n+fn find_err_return_type<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx ExprKind) -> Option<Ty<'tcx>> {\n+    if let ExprKind::Match(_, ref arms, MatchSource::TryDesugar) = expr {\n+        arms.iter().filter_map(|ty| find_err_return_type_arm(cx, ty)).nth(0)\n+    } else {\n+        None\n+    }\n+}\n+\n+// Check for From::from in one of the match arms.\n+fn find_err_return_type_arm<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arm: &'tcx Arm) -> Option<Ty<'tcx>> {\n+    if_chain! {\n+        if let ExprKind::Ret(Some(ref err_ret)) = arm.body.node;\n+        if let ExprKind::Call(ref from_error_path, ref from_error_args) = err_ret.node;\n+        if let ExprKind::Path(ref from_error_fn) = from_error_path.node;\n+        if match_qpath(from_error_fn, &[\"std\", \"ops\", \"Try\", \"from_error\"]);\n+        if let Some(from_error_arg) = from_error_args.get(0);\n+        then {\n+            Some(cx.tables.expr_ty(from_error_arg))\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "e8abb198e78bcc9d20eee8857bf6ef05c6a50303", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 305] = [\n+pub const ALL_LINTS: [Lint; 306] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1820,6 +1820,13 @@ pub const ALL_LINTS: [Lint; 305] = [\n         deprecation: None,\n         module: \"trivially_copy_pass_by_ref\",\n     },\n+    Lint {\n+        name: \"try_err\",\n+        group: \"style\",\n+        desc: \"TODO\",\n+        deprecation: None,\n+        module: \"try_err\",\n+    },\n     Lint {\n         name: \"type_complexity\",\n         group: \"complexity\","}, {"sha": "d8decbbac668aad6a33c8a69b6a0072e9388e786", "filename": "tests/ui/try_err.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "patch": "@@ -0,0 +1,65 @@\n+#![deny(clippy::try_err)]\n+\n+// Tests that a simple case works\n+// Should flag `Err(err)?`\n+pub fn basic_test() -> Result<i32, i32> {\n+    let err: i32 = 1;\n+    Err(err)?;\n+    Ok(0)\n+}\n+\n+// Tests that `.into()` is added when appropriate\n+pub fn into_test() -> Result<i32, i32> {\n+    let err: u8 = 1;\n+    Err(err)?;\n+    Ok(0)\n+}\n+\n+// Tests that tries in general don't trigger the error\n+pub fn negative_test() -> Result<i32, i32> {\n+    Ok(nested_error()? + 1)\n+}\n+\n+\n+// Tests that `.into()` isn't added when the error type\n+// matches the surrounding closure's return type, even\n+// when it doesn't match the surrounding function's.\n+pub fn closure_matches_test() -> Result<i32, i32> {\n+    let res: Result<i32, i8> = Some(1).into_iter()\n+        .map(|i| {\n+            let err: i8 = 1;\n+            Err(err)?;\n+            Ok(i)\n+        })\n+        .next()\n+        .unwrap();\n+\n+    Ok(res?)\n+}\n+\n+// Tests that `.into()` isn't added when the error type\n+// doesn't match the surrounding closure's return type.\n+pub fn closure_into_test() -> Result<i32, i32> {\n+    let res: Result<i32, i16> = Some(1).into_iter()\n+        .map(|i| {\n+            let err: i8 = 1;\n+            Err(err)?;\n+            Ok(i)\n+        })\n+        .next()\n+        .unwrap();\n+\n+    Ok(res?)\n+}\n+\n+fn nested_error() -> Result<i32, i32> {\n+    Ok(1)\n+}\n+\n+fn main() {\n+    basic_test().unwrap();\n+    into_test().unwrap();\n+    negative_test().unwrap();\n+    closure_matches_test().unwrap();\n+    closure_into_test().unwrap();\n+}"}, {"sha": "4e6f273052fe4ca526a90c584f022ab633649acd", "filename": "tests/ui/try_err.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60a80849ce20bbfc3bbef741a2be8cdc7225b96d/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=60a80849ce20bbfc3bbef741a2be8cdc7225b96d", "patch": "@@ -0,0 +1,32 @@\n+error: confusing error return, consider using `return Err(err)`\n+  --> $DIR/try_err.rs:7:5\n+   |\n+LL |     Err(err)?;\n+   |     ^^^^^^^^^ help: try this: `return Err(err)`\n+   |\n+note: lint level defined here\n+  --> $DIR/try_err.rs:1:9\n+   |\n+LL | #![deny(clippy::try_err)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: confusing error return, consider using `return Err(err.into())`\n+  --> $DIR/try_err.rs:14:5\n+   |\n+LL |     Err(err)?;\n+   |     ^^^^^^^^^ help: try this: `return Err(err.into())`\n+\n+error: confusing error return, consider using `return Err(err)`\n+  --> $DIR/try_err.rs:31:13\n+   |\n+LL |             Err(err)?;\n+   |             ^^^^^^^^^ help: try this: `return Err(err)`\n+\n+error: confusing error return, consider using `return Err(err.into())`\n+  --> $DIR/try_err.rs:46:13\n+   |\n+LL |             Err(err)?;\n+   |             ^^^^^^^^^ help: try this: `return Err(err.into())`\n+\n+error: aborting due to 4 previous errors\n+"}]}