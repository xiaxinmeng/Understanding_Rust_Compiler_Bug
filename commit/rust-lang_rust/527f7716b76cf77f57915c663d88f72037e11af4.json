{"sha": "527f7716b76cf77f57915c663d88f72037e11af4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyN2Y3NzE2Yjc2Y2Y3N2Y1NzkxNWM2NjNkODhmNzIwMzdlMTFhZjQ=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-18T23:55:48Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-30T23:31:55Z"}, "message": "after syntax fixes, these tests appear to pass", "tree": {"sha": "39f559956ad76fc6428722987458e315d13be72e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39f559956ad76fc6428722987458e315d13be72e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/527f7716b76cf77f57915c663d88f72037e11af4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/527f7716b76cf77f57915c663d88f72037e11af4", "html_url": "https://github.com/rust-lang/rust/commit/527f7716b76cf77f57915c663d88f72037e11af4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/527f7716b76cf77f57915c663d88f72037e11af4/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5361aec990ff2b07cabf9d9fbfac67f056d97f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5361aec990ff2b07cabf9d9fbfac67f056d97f", "html_url": "https://github.com/rust-lang/rust/commit/3a5361aec990ff2b07cabf9d9fbfac67f056d97f"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "96921f2a065c2351f9b0473a8c861e403beffa09", "filename": "src/test/run-pass/tag-align-dyn-variants.rs", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/527f7716b76cf77f57915c663d88f72037e11af4/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527f7716b76cf77f57915c663d88f72037e11af4/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs?ref=527f7716b76cf77f57915c663d88f72037e11af4", "patch": "@@ -8,64 +8,62 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n-tag a_tag<A,B> {\n-    varA(A);\n-    varB(B);\n+enum a_tag<A,B> {\n+    varA(A),\n+    varB(B)\n }\n \n-type t_rec<A,B> = {\n+struct t_rec<A,B> {\n     chA: u8,\n     tA: a_tag<A,B>,\n     chB: u8,\n     tB: a_tag<A,B>\n-};\n+}\n \n-fn mk_rec<A:copy,B:copy>(a: A, b: B) -> t_rec<A,B> {\n-    return { chA:0u8, tA:varA(a), chB:1u8, tB:varB(b) };\n+fn mk_rec<A:Copy,B:Copy>(a: A, b: B) -> t_rec<A,B> {\n+    return t_rec{ chA:0u8, tA:varA(a), chB:1u8, tB:varB(b) };\n }\n \n-fn is_aligned<A>(amnt: uint, &&u: A) -> bool {\n+fn is_aligned<A>(amnt: uint, u: &A) -> bool {\n     let p = ptr::to_unsafe_ptr(u) as uint;\n     return (p & (amnt-1u)) == 0u;\n }\n \n-fn variant_data_is_aligned<A,B>(amnt: uint, &&u: a_tag<A,B>) -> bool {\n+fn variant_data_is_aligned<A,B>(amnt: uint, u: &a_tag<A,B>) -> bool {\n     match u {\n-      varA(a) { is_aligned(amnt, a) }\n-      varB(b) { is_aligned(amnt, b) }\n+      &varA(ref a) => is_aligned(amnt, a),\n+      &varB(ref b) => is_aligned(amnt, b)\n     }\n }\n \n pub fn main() {\n     let x = mk_rec(22u64, 23u64);\n-    assert!(is_aligned(8u, x.tA));\n-    assert!(variant_data_is_aligned(8u, x.tA));\n-    assert!(is_aligned(8u, x.tB));\n-    assert!(variant_data_is_aligned(8u, x.tB));\n+    assert!(is_aligned(8u, &x.tA));\n+    assert!(variant_data_is_aligned(8u, &x.tA));\n+    assert!(is_aligned(8u, &x.tB));\n+    assert!(variant_data_is_aligned(8u, &x.tB));\n \n     let x = mk_rec(22u64, 23u32);\n-    assert!(is_aligned(8u, x.tA));\n-    assert!(variant_data_is_aligned(8u, x.tA));\n-    assert!(is_aligned(8u, x.tB));\n-    assert!(variant_data_is_aligned(4u, x.tB));\n+    assert!(is_aligned(8u, &x.tA));\n+    assert!(variant_data_is_aligned(8u, &x.tA));\n+    assert!(is_aligned(8u, &x.tB));\n+    assert!(variant_data_is_aligned(4u, &x.tB));\n \n     let x = mk_rec(22u32, 23u64);\n-    assert!(is_aligned(8u, x.tA));\n-    assert!(variant_data_is_aligned(4u, x.tA));\n-    assert!(is_aligned(8u, x.tB));\n-    assert!(variant_data_is_aligned(8u, x.tB));\n+    assert!(is_aligned(8u, &x.tA));\n+    assert!(variant_data_is_aligned(4u, &x.tA));\n+    assert!(is_aligned(8u, &x.tB));\n+    assert!(variant_data_is_aligned(8u, &x.tB));\n \n     let x = mk_rec(22u32, 23u32);\n-    assert!(is_aligned(4u, x.tA));\n-    assert!(variant_data_is_aligned(4u, x.tA));\n-    assert!(is_aligned(4u, x.tB));\n-    assert!(variant_data_is_aligned(4u, x.tB));\n+    assert!(is_aligned(4u, &x.tA));\n+    assert!(variant_data_is_aligned(4u, &x.tA));\n+    assert!(is_aligned(4u, &x.tB));\n+    assert!(variant_data_is_aligned(4u, &x.tB));\n \n     let x = mk_rec(22f64, 23f64);\n-    assert!(is_aligned(8u, x.tA));\n-    assert!(variant_data_is_aligned(8u, x.tA));\n-    assert!(is_aligned(8u, x.tB));\n-    assert!(variant_data_is_aligned(8u, x.tB));\n+    assert!(is_aligned(8u, &x.tA));\n+    assert!(variant_data_is_aligned(8u, &x.tA));\n+    assert!(is_aligned(8u, &x.tB));\n+    assert!(variant_data_is_aligned(8u, &x.tB));\n }"}]}