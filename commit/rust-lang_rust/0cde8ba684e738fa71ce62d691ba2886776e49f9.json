{"sha": "0cde8ba684e738fa71ce62d691ba2886776e49f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZGU4YmE2ODRlNzM4ZmE3MWNlNjJkNjkxYmEyODg2Nzc2ZTQ5Zjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-02T22:33:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-10T06:46:18Z"}, "message": "Implement a new protocol for `for` loops that's much more easily composable", "tree": {"sha": "03e2b976872095fa549630f576fd6137a4e9b434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e2b976872095fa549630f576fd6137a4e9b434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cde8ba684e738fa71ce62d691ba2886776e49f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cde8ba684e738fa71ce62d691ba2886776e49f9", "html_url": "https://github.com/rust-lang/rust/commit/0cde8ba684e738fa71ce62d691ba2886776e49f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cde8ba684e738fa71ce62d691ba2886776e49f9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8e236f32fccf6ec99025e2ba77f79b4c98d399", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8e236f32fccf6ec99025e2ba77f79b4c98d399", "html_url": "https://github.com/rust-lang/rust/commit/ad8e236f32fccf6ec99025e2ba77f79b4c98d399"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "c530cd973978b2eb6a264008473e98dfe2a5d1e6", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cde8ba684e738fa71ce62d691ba2886776e49f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cde8ba684e738fa71ce62d691ba2886776e49f9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=0cde8ba684e738fa71ce62d691ba2886776e49f9", "patch": "@@ -550,7 +550,14 @@ pub fn trans_call_inner(in_cx: block,\n                 // drop the value if it is not being saved.\n                 unsafe {\n                     if llvm::LLVMIsUndef(llretslot) != lib::llvm::True {\n-                        if ty::type_is_immediate(ret_ty) {\n+                        if ty::type_is_nil(ret_ty) {\n+                            // When implementing the for-loop sugar syntax, the\n+                            // type of the for-loop is nil, but the function\n+                            // it's invoking returns a bool. This is a special\n+                            // case to ignore instead of invoking the Store\n+                            // below into a scratch pointer of a mismatched\n+                            // type.\n+                        } else if ty::type_is_immediate(ret_ty) {\n                             let llscratchptr = alloc_ty(bcx, ret_ty);\n                             Store(bcx, llresult, llscratchptr);\n                             bcx = glue::drop_ty(bcx, llscratchptr, ret_ty);"}, {"sha": "89eef1c7cb7f126533c28c133d51ced81eeed020", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0cde8ba684e738fa71ce62d691ba2886776e49f9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cde8ba684e738fa71ce62d691ba2886776e49f9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=0cde8ba684e738fa71ce62d691ba2886776e49f9", "patch": "@@ -1294,6 +1294,26 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         // The callee checks for bot / err, we don't need to\n     }\n \n+    fn write_call(fcx: @mut FnCtxt,\n+                  call_expr: @ast::expr,\n+                  output: ty::t,\n+                  sugar: ast::CallSugar) {\n+        let ret_ty = match sugar {\n+            ast::ForSugar => {\n+                match ty::get(output).sty {\n+                    ty::ty_bool => {}\n+                    _ => fcx.type_error_message(call_expr.span, |actual| {\n+                            fmt!(\"expected `for` closure to return `bool`, \\\n+                                  but found `%s`\", actual) },\n+                            output, None)\n+                }\n+                ty::mk_nil()\n+            }\n+            _ => output\n+        };\n+        fcx.write_ty(call_expr.id, ret_ty);\n+    }\n+\n     // A generic function for doing all of the checking for call expressions\n     fn check_call(fcx: @mut FnCtxt,\n                   call_expr: @ast::expr,\n@@ -1344,8 +1364,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         check_argument_types(fcx, call_expr.span, fn_sig.inputs, f,\n                              args, sugar, DontDerefArgs);\n \n-        // Pull the return type out of the type of the function.\n-        fcx.write_ty(call_expr.id, fn_sig.output);\n+        write_call(fcx, call_expr, fn_sig.output, sugar);\n     }\n \n     // Checks a method call.\n@@ -1401,8 +1420,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                                  fn_ty, expr, args, sugar,\n                                                  DontDerefArgs);\n \n-        // Pull the return type out of the type of the function.\n-        fcx.write_ty(expr.id, ret_ty);\n+        write_call(fcx, expr, ret_ty, sugar);\n     }\n \n     // A generic function for checking the then and else in an if"}]}