{"sha": "36bd28633baf6015b767e9e70d2d53185271db50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YmQyODYzM2JhZjYwMTViNzY3ZTllNzBkMmQ1MzE4NTI3MWRiNTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-09T13:03:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-09T13:03:21Z"}, "message": "Extract runnables", "tree": {"sha": "8b660150cf128c0fdee4cd8734215a4116a520e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b660150cf128c0fdee4cd8734215a4116a520e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36bd28633baf6015b767e9e70d2d53185271db50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36bd28633baf6015b767e9e70d2d53185271db50", "html_url": "https://github.com/rust-lang/rust/commit/36bd28633baf6015b767e9e70d2d53185271db50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36bd28633baf6015b767e9e70d2d53185271db50/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e847a1b7a6b53d5663aae7396ea0f65485f1283e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e847a1b7a6b53d5663aae7396ea0f65485f1283e", "html_url": "https://github.com/rust-lang/rust/commit/e847a1b7a6b53d5663aae7396ea0f65485f1283e"}], "stats": {"total": 131, "additions": 130, "deletions": 1}, "files": [{"sha": "387859d4affa7dac77281475ef62ecc4f3f42182", "filename": "libeditor/src/lib.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36bd28633baf6015b767e9e70d2d53185271db50/libeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36bd28633baf6015b767e9e70d2d53185271db50/libeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2Fsrc%2Flib.rs?ref=36bd28633baf6015b767e9e70d2d53185271db50", "patch": "@@ -26,6 +26,18 @@ pub struct Symbol {\n     pub range: TextRange,\n }\n \n+#[derive(Debug)]\n+pub struct Runnable {\n+    pub range: TextRange,\n+    pub kind: RunnableKind,\n+}\n+\n+#[derive(Debug)]\n+pub enum RunnableKind {\n+    Test { name: String },\n+    Bin,\n+}\n+\n impl File {\n     pub fn new(text: &str) -> File {\n         File {\n@@ -78,6 +90,28 @@ impl File {\n         let syntax = self.inner.syntax();\n         extend_selection::extend_selection(syntax.as_ref(), range)\n     }\n+\n+    pub fn runnables(&self) -> Vec<Runnable> {\n+        self.inner\n+            .functions()\n+            .filter_map(|f| {\n+                let name = f.name()?.text();\n+                let kind = if name == \"main\" {\n+                    RunnableKind::Bin\n+                } else if f.has_atom_attr(\"test\") {\n+                    RunnableKind::Test {\n+                        name: name.to_string()\n+                    }\n+                } else {\n+                    return None;\n+                };\n+                Some(Runnable {\n+                    range: f.syntax().range(),\n+                    kind,\n+                })\n+            })\n+            .collect()\n+    }\n }\n \n "}, {"sha": "ab8254d16aef4f6c140773a941fdb2a25100436d", "filename": "libeditor/tests/test.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/36bd28633baf6015b767e9e70d2d53185271db50/libeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36bd28633baf6015b767e9e70d2d53185271db50/libeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/libeditor%2Ftests%2Ftest.rs?ref=36bd28633baf6015b767e9e70d2d53185271db50", "patch": "@@ -37,11 +37,33 @@ fn main() {}\n     );\n }\n \n+#[test]\n+fn test_runnables() {\n+    let file = file(r#\"\n+fn main() {}\n+\n+#[test]\n+fn test_foo() {}\n+\n+#[test]\n+#[ignore]\n+fn test_foo() {}\n+\"#);\n+    let runnables = file.runnables();\n+    dbg_eq(\n+        &runnables,\n+        r#\"[Runnable { range: [1; 13), kind: Bin },\n+            Runnable { range: [15; 39), kind: Test { name: \"test_foo\" } },\n+            Runnable { range: [41; 75), kind: Test { name: \"test_foo\" } }]\"#,\n+    )\n+}\n+\n fn file(text: &str) -> File {\n     File::new(text)\n }\n \n fn dbg_eq(actual: &impl fmt::Debug, expected: &str) {\n+    let actual = format!(\"{:?}\", actual);\n     let expected = expected.lines().map(|l| l.trim()).join(\" \");\n     assert_eq!(actual, expected);\n }"}, {"sha": "a595b9324de4ffe3095abc8a6a2c6aa3343df285", "filename": "src/ast.rs", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/36bd28633baf6015b767e9e70d2d53185271db50/src%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36bd28633baf6015b767e9e70d2d53185271db50/src%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fast.rs?ref=36bd28633baf6015b767e9e70d2d53185271db50", "patch": "@@ -1,11 +1,25 @@\n use std::sync::Arc;\n-use {SyntaxNode, SyntaxRoot, TreeRoot};\n+use {\n+    SyntaxNode, SyntaxRoot, TreeRoot,\n+    SyntaxKind::*,\n+};\n \n #[derive(Debug)]\n pub struct File<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n }\n \n+#[derive(Debug)]\n+pub struct Function<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+#[derive(Debug)]\n+pub struct Name<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+\n impl File<Arc<SyntaxRoot>> {\n     pub fn parse(text: &str) -> Self {\n         File {\n@@ -14,6 +28,65 @@ impl File<Arc<SyntaxRoot>> {\n     }\n }\n \n+impl<R: TreeRoot> File<R> {\n+    pub fn functions<'a>(&'a self) -> impl Iterator<Item = Function<R>> + 'a {\n+        self.syntax\n+            .children()\n+            .filter(|node| node.kind() == FN_ITEM)\n+            .map(|node| Function { syntax: node })\n+    }\n+}\n+\n+impl<R: TreeRoot> Function<R> {\n+    pub fn syntax(&self) -> SyntaxNode<R> {\n+        self.syntax.clone()\n+    }\n+\n+    pub fn name(&self) -> Option<Name<R>> {\n+        self.syntax\n+            .children()\n+            .filter(|node| node.kind() == NAME)\n+            .map(|node| Name { syntax: node })\n+            .next()\n+    }\n+\n+    pub fn has_atom_attr(&self, atom: &str) -> bool {\n+        self.syntax\n+            .children()\n+            .filter(|node| node.kind() == ATTR)\n+            .any(|attr| {\n+                let mut metas = attr.children().filter(|node| node.kind() == META_ITEM);\n+                let meta = match metas.next() {\n+                    None => return false,\n+                    Some(meta) => {\n+                        if metas.next().is_some() {\n+                            return false;\n+                        }\n+                        meta\n+                    }\n+                };\n+                let mut children = meta.children();\n+                match children.next() {\n+                    None => false,\n+                    Some(child) => {\n+                        if children.next().is_some() {\n+                            return false;\n+                        }\n+                        child.kind() == IDENT && child.text() == atom\n+                    }\n+                }\n+            })\n+    }\n+}\n+\n+impl<R: TreeRoot> Name<R> {\n+    pub fn text(&self) -> String {\n+        self.syntax.text()\n+    }\n+}\n+\n+\n+\n impl<R: TreeRoot> File<R> {\n     pub fn syntax(&self) -> SyntaxNode<R> {\n         self.syntax.clone()"}]}