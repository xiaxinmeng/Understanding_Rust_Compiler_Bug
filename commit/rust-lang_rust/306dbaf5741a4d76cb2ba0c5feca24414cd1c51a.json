{"sha": "306dbaf5741a4d76cb2ba0c5feca24414cd1c51a", "node_id": "C_kwDOAAsO6NoAKDMwNmRiYWY1NzQxYTRkNzZjYjJiYTBjNWZlY2EyNDQxNGNkMWM1MWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-07T16:57:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-07T16:57:15Z"}, "message": "Rollup merge of #107662 - cjgillot:copy-projection, r=oli-obk\n\nTurn projections into copies in CopyProp.\n\nThe current implementation can leave behind projections that are moved out several times.\n\nThis PR widens the check to turn such moves into copies: a move out of a projection of a copy is equivalent to a copy of the original projection.", "tree": {"sha": "973f07147ec1cb78d44affe7e98cba80604550eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/973f07147ec1cb78d44affe7e98cba80604550eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj4oLrCRBK7hj4Ov3rIwAABHMIADIdukJQQNLLUa0i+hlZ6oDk\ns8IHBfJHEJCrPbzxPUEuKWubFDKVfMpvDpCAfGKNy87ROkApAFgbEM2vbSz1z865\nrUVuWNVjtc4wIDRKY20oTWN1LrxIVZyAoForEAjCqAnagfKyKw7yEgfnYmMl5ZUW\n82xoSBm7TPIbwqgNKRgRczTXIYWbuXR7LQTvBgMQNj4Ok3MJsKNe9qMA2mybXdUW\nAflD460Mr44qdK4UPJD/uX2fIemGF/WKNBMFyYBLdKR99haLgODh/qX5eDotoFvX\n2aoz3tKhipnnFfejhI/CBydn2PgpUO4z2GzVMUBk92MhYfP7xmEjnqkMMW9zX80=\n=cFNq\n-----END PGP SIGNATURE-----\n", "payload": "tree 973f07147ec1cb78d44affe7e98cba80604550eb\nparent 917662a8f6f4ddce6993ed7a528f1d8d8dd2764d\nparent 9c5add14e7c1695bc018a941c383f01a7dde8730\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675789035 +0100\ncommitter GitHub <noreply@github.com> 1675789035 +0100\n\nRollup merge of #107662 - cjgillot:copy-projection, r=oli-obk\n\nTurn projections into copies in CopyProp.\n\nThe current implementation can leave behind projections that are moved out several times.\n\nThis PR widens the check to turn such moves into copies: a move out of a projection of a copy is equivalent to a copy of the original projection.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a", "html_url": "https://github.com/rust-lang/rust/commit/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "917662a8f6f4ddce6993ed7a528f1d8d8dd2764d", "url": "https://api.github.com/repos/rust-lang/rust/commits/917662a8f6f4ddce6993ed7a528f1d8d8dd2764d", "html_url": "https://github.com/rust-lang/rust/commit/917662a8f6f4ddce6993ed7a528f1d8d8dd2764d"}, {"sha": "9c5add14e7c1695bc018a941c383f01a7dde8730", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5add14e7c1695bc018a941c383f01a7dde8730", "html_url": "https://github.com/rust-lang/rust/commit/9c5add14e7c1695bc018a941c383f01a7dde8730"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "6e279232bcb48ce3e22ed586e0d9b6c96ec6dde9", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=306dbaf5741a4d76cb2ba0c5feca24414cd1c51a", "patch": "@@ -153,8 +153,9 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n \n     fn visit_operand(&mut self, operand: &mut Operand<'tcx>, loc: Location) {\n         if let Operand::Move(place) = *operand\n-            && let Some(local) = place.as_local()\n-            && !self.fully_moved.contains(local)\n+            // A move out of a projection of a copy is equivalent to a copy of the original projection.\n+            && !place.has_deref()\n+            && !self.fully_moved.contains(place.local)\n         {\n             *operand = Operand::Copy(place);\n         }"}, {"sha": "02308beb88af27b42bd9fcfed01d5c11bed855bf", "filename": "tests/mir-opt/copy-prop/move_projection.f.CopyProp.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.f.CopyProp.diff?ref=306dbaf5741a4d76cb2ba0c5feca24414cd1c51a", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: Foo) -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/move_projection.rs:+0:17: +0:21\n+      let mut _2: Foo;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+-         _2 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _3 = move (_2.0: u8);            // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+-         _0 = opaque::<Foo>(move _1) -> bb1; // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n++         _3 = (_1.0: u8);                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n++         _0 = opaque::<Foo>(_1) -> bb1;   // scope 0 at $DIR/move_projection.rs:+6:13: +6:44\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_projection.rs:19:28: 19:34\n+                                           // + literal: Const { ty: fn(Foo) -> bool {opaque::<Foo>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _0 = opaque::<u8>(move _3) -> bb2; // scope 0 at $DIR/move_projection.rs:+9:13: +9:44\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_projection.rs:22:28: 22:34\n+                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/move_projection.rs:+12:13: +12:21\n+      }\n+  }\n+  "}, {"sha": "2a1bbae99a4c8b3c4899f3ea9d4096c9ef70df06", "filename": "tests/mir-opt/copy-prop/move_projection.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_projection.rs?ref=306dbaf5741a4d76cb2ba0c5feca24414cd1c51a", "patch": "@@ -0,0 +1,34 @@\n+// unit-test: CopyProp\n+\n+#![feature(custom_mir, core_intrinsics)]\n+#![allow(unused_assignments)]\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+fn opaque(_: impl Sized) -> bool { true }\n+\n+struct Foo(u8);\n+\n+#[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n+fn f(a: Foo) -> bool {\n+    mir!(\n+        {\n+            let b = a;\n+            // This is a move out of a copy, so must become a copy of `a.0`.\n+            let c = Move(b.0);\n+            Call(RET, bb1, opaque(Move(a)))\n+        }\n+        bb1 = {\n+            Call(RET, ret, opaque(Move(c)))\n+        }\n+        ret = {\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert!(f(Foo(0)));\n+}\n+\n+// EMIT_MIR move_projection.f.CopyProp.diff"}, {"sha": "66ba4df767ccf2ff004604ac17d3070affa706c1", "filename": "tests/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/306dbaf5741a4d76cb2ba0c5feca24414cd1c51a/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=306dbaf5741a4d76cb2ba0c5feca24414cd1c51a", "patch": "@@ -34,7 +34,7 @@ fn ezmap(_1: Option<i32>) -> Option<i32> {\n     }\n \n     bb3: {\n-        _4 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+        _4 = ((_1 as Some).0: i32);      // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n         StorageLive(_5);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n         _5 = Add(_4, const 1_i32);       // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n         _0 = Option::<i32>::Some(move _5); // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30"}]}