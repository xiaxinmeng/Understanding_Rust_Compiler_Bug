{"sha": "2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYTFiOTRlNmQ3ZTFhMDc4YjdmY2VmOWExMGUyZWQwNzE0NWUxYmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T14:03:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T08:07:21Z"}, "message": "update to FnVal changes; implement basic Dlsym support and use it for getentropy", "tree": {"sha": "32ff4b7a2c08dd6fb8117ac83aad25883261e5c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32ff4b7a2c08dd6fb8117ac83aad25883261e5c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "html_url": "https://github.com/rust-lang/rust/commit/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30", "html_url": "https://github.com/rust-lang/rust/commit/cb09fab5ffc8f204f59c887ad4fb7c75c3d95c30"}], "stats": {"total": 155, "additions": 111, "deletions": 44}, "files": [{"sha": "bf99d3e61166b2069f56c740cbff7760e3aedfee", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "patch": "@@ -11,7 +11,7 @@ use rustc::mir;\n \n use crate::{\n     InterpResult, InterpError, InterpCx, StackPopCleanup, struct_error,\n-    Scalar, Tag, Pointer,\n+    Scalar, Tag, Pointer, FnVal,\n     MemoryExtra, MiriMemoryKind, Evaluator, TlsEvalContextExt,\n };\n \n@@ -93,7 +93,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let mut args = ecx.frame().body.args_iter();\n \n     // First argument: pointer to `main()`.\n-    let main_ptr = ecx.memory_mut().create_fn_alloc(main_instance);\n+    let main_ptr = ecx.memory_mut().create_fn_alloc(FnVal::Instance(main_instance));\n     let dest = ecx.eval_place(&mir::Place::Base(mir::PlaceBase::Local(args.next().unwrap())))?;\n     ecx.write_scalar(Scalar::Ptr(main_ptr), dest)?;\n "}, {"sha": "295c8e519e13df4d4343d4ba911d812dffd91f35", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "patch": "@@ -31,6 +31,7 @@ pub use crate::shims::{EvalContextExt as ShimsEvalContextExt};\n pub use crate::shims::foreign_items::EvalContextExt as ForeignItemsEvalContextExt;\n pub use crate::shims::intrinsics::EvalContextExt as IntrinsicsEvalContextExt;\n pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n+pub use crate::shims::dlsym::{Dlsym, EvalContextExt as DlsymEvalContextExt};\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};"}, {"sha": "77e02dba266a2dcff12b7ac7cdabca80d32a3855", "filename": "src/machine.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "patch": "@@ -135,6 +135,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryExtra = MemoryExtra;\n     type AllocExtra = AllocExtra;\n     type PointerTag = Tag;\n+    type ExtraFnVal = Dlsym;\n \n     type MemoryMap = MonoHashMap<AllocId, (MemoryKind<MiriMemoryKind>, Allocation<Tag, Self::AllocExtra>)>;\n \n@@ -145,7 +146,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         ecx.memory().extra.validate\n     }\n \n-    /// Returns `Ok()` when the function was handled; fail otherwise.\n     #[inline(always)]\n     fn find_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n@@ -157,6 +157,17 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         ecx.find_fn(instance, args, dest, ret)\n     }\n \n+    #[inline(always)]\n+    fn call_extra_fn(\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        fn_val: Dlsym,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: Option<PlaceTy<'tcx, Tag>>,\n+        ret: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        ecx.call_dlsym(fn_val, args, dest, ret)\n+    }\n+\n     #[inline(always)]\n     fn call_intrinsic(\n         ecx: &mut rustc_mir::interpret::InterpCx<'mir, 'tcx, Self>,"}, {"sha": "1c2567b951ca0bc6c22a100d697a0e100c11183c", "filename": "src/shims/dlsym.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "patch": "@@ -0,0 +1,49 @@\n+use rustc::mir;\n+\n+use crate::*;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub enum Dlsym {\n+    GetEntropy,\n+}\n+\n+impl Dlsym {\n+    pub fn from_str(name: &str) -> Option<Dlsym> {\n+        use self::Dlsym::*;\n+        Some(match name {\n+            \"getentropy\" => GetEntropy,\n+            _ => return None,\n+        })\n+    }\n+}\n+\n+impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    fn call_dlsym(\n+        &mut self,\n+        dlsym: Dlsym,\n+        args: &[OpTy<'tcx, Tag>],\n+        dest: Option<PlaceTy<'tcx, Tag>>,\n+        ret: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        use self::Dlsym::*;\n+\n+        let this = self.eval_context_mut();\n+\n+        let dest = dest.expect(\"we don't support any diverging dlsym\");\n+        let ret = ret.expect(\"dest is `Some` but ret is `None`\");\n+        \n+        match dlsym {\n+            GetEntropy => {\n+                let ptr = this.read_scalar(args[0])?.not_undef()?;\n+                let len = this.read_scalar(args[1])?.to_usize(this)?;\n+                this.gen_random(len as usize, ptr)?;\n+                this.write_null(dest)?;\n+            }\n+        }\n+\n+        this.goto_block(Some(ret))?;\n+        this.dump_place(*dest);\n+        Ok(())\n+    }\n+}"}, {"sha": "fb1d08d0bc201f9a361634de6486c49c0afdcb97", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "patch": "@@ -307,7 +307,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         // neither of which have any effect on our current PRNG\n                         let _flags = this.read_scalar(args[3])?.to_i32()?;\n \n-                        gen_random(this, len as usize, ptr)?;\n+                        this.gen_random(len as usize, ptr)?;\n                         this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n                     }\n                     id => {\n@@ -324,10 +324,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let symbol_name = this.memory().get(symbol.alloc_id)?.read_c_str(tcx, symbol)?;\n                 let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n                 let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n-                return err!(Unimplemented(format!(\n-                    \"miri does not support dynamically loading libraries (requested symbol: {})\",\n-                    symbol_name\n-                )));\n+                if let Some(dlsym) = Dlsym::from_str(symbol_name) {\n+                    let ptr = this.memory_mut().create_fn_alloc(FnVal::Other(dlsym));\n+                    this.write_scalar(Scalar::from(ptr), dest)?;\n+                } else {\n+                    return err!(Unimplemented(format!(\n+                        \"Unsupported dlsym: {}\", symbol_name\n+                    )));\n+                }\n             }\n \n             \"__rust_maybe_catch_panic\" => {\n@@ -340,7 +344,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // We abort on panic, so not much is going on here, but we still have to call the closure.\n                 let f = this.read_scalar(args[0])?.to_ptr()?;\n                 let data = this.read_scalar(args[1])?.not_undef()?;\n-                let f_instance = this.memory().get_fn(f)?;\n+                let f_instance = this.memory().get_fn(f)?.as_instance()?;\n                 this.write_null(dest)?;\n                 trace!(\"__rust_maybe_catch_panic: {:?}\", f_instance);\n \n@@ -659,7 +663,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 // Extract the function type out of the signature (that seems easier than constructing it ourselves).\n                 let dtor = match this.test_null(this.read_scalar(args[1])?.not_undef()?)? {\n-                    Some(dtor_ptr) => Some(this.memory().get_fn(dtor_ptr.to_ptr()?)?),\n+                    Some(dtor_ptr) => Some(this.memory().get_fn(dtor_ptr)?.as_instance()?),\n                     None => None,\n                 };\n \n@@ -766,7 +770,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"SecRandomCopyBytes\" => {\n                 let len = this.read_scalar(args[1])?.to_usize(this)?;\n                 let ptr = this.read_scalar(args[2])?.not_undef()?;\n-                gen_random(this, len as usize, ptr)?;\n+                this.gen_random(len as usize, ptr)?;\n                 this.write_null(dest)?;\n             }\n \n@@ -934,7 +938,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"SystemFunction036\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let len = this.read_scalar(args[1])?.to_u32()?;\n-                gen_random(this, len as usize, ptr)?;\n+                this.gen_random(len as usize, ptr)?;\n                 this.write_scalar(Scalar::from_bool(true), dest)?;\n             }\n \n@@ -966,36 +970,37 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         return Ok(None);\n     }\n-}\n-\n-fn gen_random<'mir, 'tcx>(\n-    this: &mut MiriEvalContext<'mir, 'tcx>,\n-    len: usize,\n-    dest: Scalar<Tag>,\n-) -> InterpResult<'tcx>  {\n-    if len == 0 {\n-        // Nothing to do\n-        return Ok(());\n-    }\n-    let ptr = dest.to_ptr()?;\n-\n-    let data = match &mut this.memory_mut().extra.rng {\n-        Some(rng) => {\n-            let mut rng = rng.borrow_mut();\n-            let mut data = vec![0; len];\n-            rng.fill_bytes(&mut data);\n-            data\n-        }\n-        None => {\n-            return err!(Unimplemented(\n-                \"miri does not support gathering system entropy in deterministic mode!\n-                Use '-Zmiri-seed=<seed>' to enable random number generation.\n-                WARNING: Miri does *not* generate cryptographically secure entropy -\n-                do not use Miri to run any program that needs secure random number generation\".to_owned(),\n-            ));\n+\n+    fn gen_random(\n+        &mut self,\n+        len: usize,\n+        dest: Scalar<Tag>,\n+    ) -> InterpResult<'tcx>  {\n+        if len == 0 {\n+            // Nothing to do\n+            return Ok(());\n         }\n-    };\n-    let tcx = &{this.tcx.tcx};\n-    this.memory_mut().get_mut(ptr.alloc_id)?\n-        .write_bytes(tcx, ptr, &data)\n-}\n+        let this = self.eval_context_mut();\n+        let ptr = dest.to_ptr()?;\n+\n+        let data = match &mut this.memory_mut().extra.rng {\n+            Some(rng) => {\n+                let mut rng = rng.borrow_mut();\n+                let mut data = vec![0; len];\n+                rng.fill_bytes(&mut data);\n+                data\n+            }\n+            None => {\n+                return err!(Unimplemented(\n+                    \"miri does not support gathering system entropy in deterministic mode!\n+                    Use '-Zmiri-seed=<seed>' to enable random number generation.\n+                    WARNING: Miri does *not* generate cryptographically secure entropy -\n+                    do not use Miri to run any program that needs secure random number generation\".to_owned(),\n+                ));\n+            }\n+        };\n+        let tcx = &{this.tcx.tcx};\n+        this.memory_mut().get_mut(ptr.alloc_id)?\n+            .write_bytes(tcx, ptr, &data)\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "c06373005ff9919155009afa5b2f1964f37da7e4", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "patch": "@@ -1,6 +1,7 @@\n pub mod foreign_items;\n pub mod intrinsics;\n pub mod tls;\n+pub mod dlsym;\n \n use rustc::{ty, mir};\n "}]}