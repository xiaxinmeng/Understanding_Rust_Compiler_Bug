{"sha": "c4b6c98f351b9d86975ca11276b7920d4dd2fe07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YjZjOThmMzUxYjlkODY5NzVjYTExMjc2Yjc5MjBkNGRkMmZlMDc=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-28T13:33:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-28T13:33:09Z"}, "message": "Rollup merge of #40126 - GuillaumeGomez:fmt-write-docs, r=frewsxcv\n\nAdd missing docs and examples for fmt::Write\n\nr? @frewsxcv", "tree": {"sha": "a4eb0de77c63454118adc1dafea7e1147337b399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4eb0de77c63454118adc1dafea7e1147337b399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4b6c98f351b9d86975ca11276b7920d4dd2fe07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b6c98f351b9d86975ca11276b7920d4dd2fe07", "html_url": "https://github.com/rust-lang/rust/commit/c4b6c98f351b9d86975ca11276b7920d4dd2fe07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4b6c98f351b9d86975ca11276b7920d4dd2fe07/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da703a810b8d081de27617e0086548d34c24e985", "url": "https://api.github.com/repos/rust-lang/rust/commits/da703a810b8d081de27617e0086548d34c24e985", "html_url": "https://github.com/rust-lang/rust/commit/da703a810b8d081de27617e0086548d34c24e985"}, {"sha": "593356032423f65f75d72bfff4d21b669dd01068", "url": "https://api.github.com/repos/rust-lang/rust/commits/593356032423f65f75d72bfff4d21b669dd01068", "html_url": "https://github.com/rust-lang/rust/commit/593356032423f65f75d72bfff4d21b669dd01068"}], "stats": {"total": 71, "additions": 62, "deletions": 9}, "files": [{"sha": "dc5a662cdb0445fea0fca104923710cb80fbaec8", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c4b6c98f351b9d86975ca11276b7920d4dd2fe07/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b6c98f351b9d86975ca11276b7920d4dd2fe07/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c4b6c98f351b9d86975ca11276b7920d4dd2fe07", "patch": "@@ -65,12 +65,15 @@ pub struct Error;\n /// A collection of methods that are required to format a message into a stream.\n ///\n /// This trait is the type which this modules requires when formatting\n-/// information. This is similar to the standard library's `io::Write` trait,\n+/// information. This is similar to the standard library's [`io::Write`] trait,\n /// but it is only intended for use in libcore.\n ///\n /// This trait should generally not be implemented by consumers of the standard\n-/// library. The `write!` macro accepts an instance of `io::Write`, and the\n-/// `io::Write` trait is favored over implementing this trait.\n+/// library. The [`write!`] macro accepts an instance of [`io::Write`], and the\n+/// [`io::Write`] trait is favored over implementing this trait.\n+///\n+/// [`write!`]: ../../std/macro.write.html\n+/// [`io::Write`]: ../../std/io/trait.Write.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Write {\n     /// Writes a slice of bytes into this writer, returning whether the write\n@@ -82,29 +85,79 @@ pub trait Write {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an instance of `Error` on error.\n+    /// This function will return an instance of [`Error`] on error.\n+    ///\n+    /// [`Error`]: struct.Error.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt::{Error, Write};\n+    ///\n+    /// fn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n+    ///     f.write_str(s)\n+    /// }\n+    ///\n+    /// let mut buf = String::new();\n+    /// writer(&mut buf, \"hola\").unwrap();\n+    /// assert_eq!(&buf, \"hola\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write_str(&mut self, s: &str) -> Result;\n \n-    /// Writes a `char` into this writer, returning whether the write succeeded.\n+    /// Writes a [`char`] into this writer, returning whether the write succeeded.\n     ///\n-    /// A single `char` may be encoded as more than one byte.\n+    /// A single [`char`] may be encoded as more than one byte.\n     /// This method can only succeed if the entire byte sequence was successfully\n     /// written, and this method will not return until all data has been\n     /// written or an error occurs.\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an instance of `Error` on error.\n+    /// This function will return an instance of [`Error`] on error.\n+    ///\n+    /// [`char`]: ../../std/primitive.char.html\n+    /// [`Error`]: struct.Error.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt::{Error, Write};\n+    ///\n+    /// fn writer<W: Write>(f: &mut W, c: char) -> Result<(), Error> {\n+    ///     f.write_char(c)\n+    /// }\n+    ///\n+    /// let mut buf = String::new();\n+    /// writer(&mut buf, 'a').unwrap();\n+    /// writer(&mut buf, 'b').unwrap();\n+    /// assert_eq!(&buf, \"ab\");\n+    /// ```\n     #[stable(feature = \"fmt_write_char\", since = \"1.1.0\")]\n     fn write_char(&mut self, c: char) -> Result {\n         self.write_str(c.encode_utf8(&mut [0; 4]))\n     }\n \n-    /// Glue for usage of the `write!` macro with implementors of this trait.\n+    /// Glue for usage of the [`write!`] macro with implementors of this trait.\n     ///\n     /// This method should generally not be invoked manually, but rather through\n-    /// the `write!` macro itself.\n+    /// the [`write!`] macro itself.\n+    ///\n+    /// [`write!`]: ../../std/macro.write.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fmt::{Error, Write};\n+    ///\n+    /// fn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n+    ///     f.write_fmt(format_args!(\"{}\", s))\n+    /// }\n+    ///\n+    /// let mut buf = String::new();\n+    /// writer(&mut buf, \"world\").unwrap();\n+    /// assert_eq!(&buf, \"world\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write_fmt(&mut self, args: Arguments) -> Result {\n         // This Adapter is needed to allow `self` (of type `&mut"}]}