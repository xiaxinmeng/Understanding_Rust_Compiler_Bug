{"sha": "84cb71b2530d7942cfec1baf4c884c7518ecff05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0Y2I3MWIyNTMwZDc5NDJjZmVjMWJhZjRjODg0Yzc1MThlY2ZmMDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-13T19:30:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-13T19:30:31Z"}, "message": "Audit integer type usage in `core::ptr`", "tree": {"sha": "dbdcdbcc3032f11d1124523d42db9f4978d0151e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbdcdbcc3032f11d1124523d42db9f4978d0151e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84cb71b2530d7942cfec1baf4c884c7518ecff05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84cb71b2530d7942cfec1baf4c884c7518ecff05", "html_url": "https://github.com/rust-lang/rust/commit/84cb71b2530d7942cfec1baf4c884c7518ecff05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84cb71b2530d7942cfec1baf4c884c7518ecff05/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf636c233dfeef5abf0de8fb35e23c0a161810d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf636c233dfeef5abf0de8fb35e23c0a161810d2", "html_url": "https://github.com/rust-lang/rust/commit/cf636c233dfeef5abf0de8fb35e23c0a161810d2"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "072c60c7036cffceb2c5c88beb2e14841ebb7a17", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/84cb71b2530d7942cfec1baf4c884c7518ecff05/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84cb71b2530d7942cfec1baf4c884c7518ecff05/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=84cb71b2530d7942cfec1baf4c884c7518ecff05", "patch": "@@ -27,10 +27,10 @@\n //! ## 1. Coerce a reference (`&T`) or mutable reference (`&mut T`).\n //!\n //! ```\n-//! let my_num: int = 10;\n-//! let my_num_ptr: *const int = &my_num;\n-//! let mut my_speed: int = 88;\n-//! let my_speed_ptr: *mut int = &mut my_speed;\n+//! let my_num: i32 = 10;\n+//! let my_num_ptr: *const i32 = &my_num;\n+//! let mut my_speed: i32 = 88;\n+//! let my_speed_ptr: *mut i32 = &mut my_speed;\n //! ```\n //!\n //! This does not take ownership of the original allocation\n@@ -49,15 +49,15 @@\n //! use std::mem;\n //!\n //! unsafe {\n-//!     let my_num: Box<int> = Box::new(10);\n-//!     let my_num: *const int = mem::transmute(my_num);\n-//!     let my_speed: Box<int> = Box::new(88);\n-//!     let my_speed: *mut int = mem::transmute(my_speed);\n+//!     let my_num: Box<i32> = Box::new(10);\n+//!     let my_num: *const i32 = mem::transmute(my_num);\n+//!     let my_speed: Box<i32> = Box::new(88);\n+//!     let my_speed: *mut i32 = mem::transmute(my_speed);\n //!\n //!     // By taking ownership of the original `Box<T>` though\n //!     // we are obligated to transmute it back later to be destroyed.\n-//!     drop(mem::transmute::<_, Box<int>>(my_speed));\n-//!     drop(mem::transmute::<_, Box<int>>(my_num));\n+//!     drop(mem::transmute::<_, Box<i32>>(my_speed));\n+//!     drop(mem::transmute::<_, Box<i32>>(my_num));\n //! }\n //! ```\n //!\n@@ -73,7 +73,7 @@\n //!\n //! fn main() {\n //!     unsafe {\n-//!         let my_num: *mut int = libc::malloc(mem::size_of::<int>() as libc::size_t) as *mut int;\n+//!         let my_num: *mut i32 = libc::malloc(mem::size_of::<i32>() as libc::size_t) as *mut i32;\n //!         if my_num.is_null() {\n //!             panic!(\"failed to allocate memory\");\n //!         }\n@@ -117,7 +117,7 @@ pub use intrinsics::set_memory;\n /// ```\n /// use std::ptr;\n ///\n-/// let p: *const int = ptr::null();\n+/// let p: *const i32 = ptr::null();\n /// assert!(p.is_null());\n /// ```\n #[inline]\n@@ -131,7 +131,7 @@ pub fn null<T>() -> *const T { 0 as *const T }\n /// ```\n /// use std::ptr;\n ///\n-/// let p: *mut int = ptr::null_mut();\n+/// let p: *mut i32 = ptr::null_mut();\n /// assert!(p.is_null());\n /// ```\n #[inline]\n@@ -148,7 +148,7 @@ pub fn null_mut<T>() -> *mut T { 0 as *mut T }\n #[inline]\n #[unstable(feature = \"core\",\n            reason = \"may play a larger role in std::ptr future extensions\")]\n-pub unsafe fn zero_memory<T>(dst: *mut T, count: uint) {\n+pub unsafe fn zero_memory<T>(dst: *mut T, count: usize) {\n     set_memory(dst, 0, count);\n }\n \n@@ -276,7 +276,7 @@ pub trait PtrExt: Sized {\n     /// Otherwise `offset` invokes Undefined Behaviour, regardless of whether\n     /// the pointer is used.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    unsafe fn offset(self, count: int) -> Self;\n+    unsafe fn offset(self, count: isize) -> Self;\n }\n \n /// Methods on mutable raw pointers\n@@ -303,11 +303,11 @@ impl<T> PtrExt for *const T {\n \n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn is_null(self) -> bool { self as uint == 0 }\n+    fn is_null(self) -> bool { self as usize == 0 }\n \n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    unsafe fn offset(self, count: int) -> *const T {\n+    unsafe fn offset(self, count: isize) -> *const T {\n         intrinsics::offset(self, count)\n     }\n \n@@ -330,11 +330,11 @@ impl<T> PtrExt for *mut T {\n \n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn is_null(self) -> bool { self as uint == 0 }\n+    fn is_null(self) -> bool { self as usize == 0 }\n \n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    unsafe fn offset(self, count: int) -> *mut T {\n+    unsafe fn offset(self, count: isize) -> *mut T {\n         intrinsics::offset(self, count) as *mut T\n     }\n \n@@ -553,7 +553,7 @@ impl<T> Unique<T> {\n     /// Return an (unsafe) pointer into the memory owned by `self`.\n     #[unstable(feature = \"core\",\n                reason = \"recently added to this module\")]\n-    pub unsafe fn offset(self, offset: int) -> *mut T {\n+    pub unsafe fn offset(self, offset: isize) -> *mut T {\n         self.ptr.offset(offset)\n     }\n }"}]}