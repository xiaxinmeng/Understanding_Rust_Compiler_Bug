{"sha": "7094291573dc819e3115950ec3b2316bd5e9ea33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOTQyOTE1NzNkYzgxOWUzMTE1OTUwZWMzYjIzMTZiZDVlOWVhMzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-16T09:51:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-16T09:51:40Z"}, "message": "tt-attrs", "tree": {"sha": "be18ef6c5baab68acac484d00277125484d15820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be18ef6c5baab68acac484d00277125484d15820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7094291573dc819e3115950ec3b2316bd5e9ea33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7094291573dc819e3115950ec3b2316bd5e9ea33", "html_url": "https://github.com/rust-lang/rust/commit/7094291573dc819e3115950ec3b2316bd5e9ea33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7094291573dc819e3115950ec3b2316bd5e9ea33/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1193c5f829dc96683132c12d5395d7805787af2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1193c5f829dc96683132c12d5395d7805787af2a", "html_url": "https://github.com/rust-lang/rust/commit/1193c5f829dc96683132c12d5395d7805787af2a"}], "stats": {"total": 536, "additions": 260, "deletions": 276}, "files": [{"sha": "85c23e4d97055a92ce24d9ffe0042bed5b57aca7", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -26,9 +26,8 @@ use std::{\n use libsyntax2::{\n     TextUnit,\n     ast::{self, AstNode},\n-    algo::{find_leaf_at_offset, ancestors},\n };\n-use libeditor::{LineIndex, FileSymbol};\n+use libeditor::{LineIndex, FileSymbol, find_node};\n \n use self::symbol_index::FileSymbols;\n pub use self::symbol_index::Query;\n@@ -123,13 +122,7 @@ impl World {\n         let file = self.file_syntax(id)?;\n         let syntax = file.syntax();\n         let syntax = syntax.as_ref();\n-        let name_ref =\n-            find_leaf_at_offset(syntax, offset)\n-                .left_biased()\n-                .into_iter()\n-                .flat_map(|node| ancestors(node))\n-                .flat_map(ast::NameRef::cast)\n-                .next();\n+        let name_ref = find_node::<ast::NameRef<_>>(syntax, offset);\n         let name = match name_ref {\n             None => return Ok(vec![]),\n             Some(name_ref) => name_ref.text(),"}, {"sha": "4987964d29d7d1dba9f0d9c4c5422318c4022ef6", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -66,7 +66,7 @@ fn find_non_trivia_leaf(syntax: SyntaxNodeRef, offset: TextUnit) -> Option<Synta\n         .find(|leaf| !leaf.kind().is_trivia())\n }\n \n-fn find_node<'a, N: AstNode<&'a SyntaxRoot>>(syntax: SyntaxNodeRef<'a>, offset: TextUnit) -> Option<N> {\n+pub fn find_node<'a, N: AstNode<&'a SyntaxRoot>>(syntax: SyntaxNodeRef<'a>, offset: TextUnit) -> Option<N> {\n     let leaf = find_non_trivia_leaf(syntax, offset)?;\n     ancestors(leaf)\n         .filter_map(N::cast)"}, {"sha": "76cb4d0285569491a396212f050c92bba1ebf309", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -21,7 +21,10 @@ pub use self::{\n     extend_selection::extend_selection,\n     symbols::{StructureNode, file_structure, FileSymbol, file_symbols},\n     edit::{EditBuilder, Edit, AtomEdit},\n-    code_actions::{flip_comma, add_derive, ActionResult, CursorPosition},\n+    code_actions::{\n+        ActionResult, CursorPosition, find_node,\n+        flip_comma, add_derive,\n+    },\n };\n \n #[derive(Debug)]\n@@ -59,9 +62,7 @@ pub fn matching_brace(file: &ast::File, offset: TextUnit) -> Option<TextUnit> {\n         L_PAREN, R_PAREN,\n         L_ANGLE, R_ANGLE,\n     ];\n-    let syntax = file.syntax();\n-    let syntax = syntax.as_ref();\n-    let (brace_node, brace_idx) = find_leaf_at_offset(syntax, offset)\n+    let (brace_node, brace_idx) = find_leaf_at_offset(file.syntax_ref(), offset)\n         .filter_map(|node| {\n             let idx = BRACES.iter().position(|&brace| brace == node.kind())?;\n             Some((node, idx))\n@@ -75,9 +76,8 @@ pub fn matching_brace(file: &ast::File, offset: TextUnit) -> Option<TextUnit> {\n }\n \n pub fn highlight(file: &ast::File) -> Vec<HighlightedRange> {\n-    let syntax = file.syntax();\n     let mut res = Vec::new();\n-    for node in walk::preorder(syntax.as_ref()) {\n+    for node in walk::preorder(file.syntax_ref()) {\n         let tag = match node.kind() {\n             ERROR => \"error\",\n             COMMENT | DOC_COMMENT => \"comment\",\n@@ -99,10 +99,9 @@ pub fn highlight(file: &ast::File) -> Vec<HighlightedRange> {\n }\n \n pub fn diagnostics(file: &ast::File) -> Vec<Diagnostic> {\n-    let syntax = file.syntax();\n     let mut res = Vec::new();\n \n-    for node in walk::preorder(syntax.as_ref()) {\n+    for node in walk::preorder(file.syntax_ref()) {\n         if node.kind() == ERROR {\n             res.push(Diagnostic {\n                 range: node.range(),"}, {"sha": "2585d9579e2e39574e9d7d356a5bb7adca1d3960", "filename": "crates/libeditor/src/symbols.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fsymbols.rs?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -26,8 +26,7 @@ pub struct FileSymbol {\n }\n \n pub fn file_symbols(file: &ast::File) -> Vec<FileSymbol> {\n-    let syntax = file.syntax();\n-    preorder(syntax.as_ref())\n+    preorder(file.syntax_ref())\n         .filter_map(to_symbol)\n         .collect()\n }\n@@ -57,9 +56,8 @@ fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n pub fn file_structure(file: &ast::File) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();\n-    let syntax = file.syntax();\n \n-    for event in walk(syntax.as_ref()) {\n+    for event in walk(file.syntax_ref()) {\n         match event {\n             WalkEvent::Enter(node) => {\n                 match structure_node(node) {"}, {"sha": "c575e15df8ec8d4f789b97481d37fe1ef19dfd60", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -23,6 +23,31 @@ impl<R: TreeRoot> AstNode<R> for ArrayType<R> {\n \n impl<R: TreeRoot> ArrayType<R> {}\n \n+// Attr\n+#[derive(Debug, Clone, Copy)]\n+pub struct Attr<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for Attr<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            ATTR => Some(Attr { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+\n+impl<R: TreeRoot> Attr<R> {\n+    pub fn value(&self) -> Option<TokenTree<R>> {\n+        self.syntax()\n+            .children()\n+            .filter_map(TokenTree::cast)\n+            .next()\n+    }\n+}\n+\n // ConstDef\n #[derive(Debug, Clone, Copy)]\n pub struct ConstDef<R: TreeRoot = Arc<SyntaxRoot>> {\n@@ -40,6 +65,7 @@ impl<R: TreeRoot> AstNode<R> for ConstDef<R> {\n }\n \n impl<R: TreeRoot> ast::NameOwner<R> for ConstDef<R> {}\n+impl<R: TreeRoot> ast::AttrsOwner<R> for ConstDef<R> {}\n impl<R: TreeRoot> ConstDef<R> {}\n \n // DynTraitType\n@@ -77,6 +103,7 @@ impl<R: TreeRoot> AstNode<R> for EnumDef<R> {\n }\n \n impl<R: TreeRoot> ast::NameOwner<R> for EnumDef<R> {}\n+impl<R: TreeRoot> ast::AttrsOwner<R> for EnumDef<R> {}\n impl<R: TreeRoot> EnumDef<R> {}\n \n // File\n@@ -120,6 +147,7 @@ impl<R: TreeRoot> AstNode<R> for FnDef<R> {\n }\n \n impl<R: TreeRoot> ast::NameOwner<R> for FnDef<R> {}\n+impl<R: TreeRoot> ast::AttrsOwner<R> for FnDef<R> {}\n impl<R: TreeRoot> FnDef<R> {}\n \n // FnPointerType\n@@ -211,6 +239,7 @@ impl<R: TreeRoot> AstNode<R> for Module<R> {\n }\n \n impl<R: TreeRoot> ast::NameOwner<R> for Module<R> {}\n+impl<R: TreeRoot> ast::AttrsOwner<R> for Module<R> {}\n impl<R: TreeRoot> Module<R> {}\n \n // Name\n@@ -266,6 +295,7 @@ impl<R: TreeRoot> AstNode<R> for NamedField<R> {\n }\n \n impl<R: TreeRoot> ast::NameOwner<R> for NamedField<R> {}\n+impl<R: TreeRoot> ast::AttrsOwner<R> for NamedField<R> {}\n impl<R: TreeRoot> NamedField<R> {}\n \n // NeverType\n@@ -436,6 +466,7 @@ impl<R: TreeRoot> AstNode<R> for StaticDef<R> {\n }\n \n impl<R: TreeRoot> ast::NameOwner<R> for StaticDef<R> {}\n+impl<R: TreeRoot> ast::AttrsOwner<R> for StaticDef<R> {}\n impl<R: TreeRoot> StaticDef<R> {}\n \n // StructDef\n@@ -455,6 +486,7 @@ impl<R: TreeRoot> AstNode<R> for StructDef<R> {\n }\n \n impl<R: TreeRoot> ast::NameOwner<R> for StructDef<R> {}\n+impl<R: TreeRoot> ast::AttrsOwner<R> for StructDef<R> {}\n impl<R: TreeRoot> StructDef<R> {\n     pub fn fields<'a>(&'a self) -> impl Iterator<Item = NamedField<R>> + 'a {\n         self.syntax()\n@@ -463,6 +495,24 @@ impl<R: TreeRoot> StructDef<R> {\n     }\n }\n \n+// TokenTree\n+#[derive(Debug, Clone, Copy)]\n+pub struct TokenTree<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>,\n+}\n+\n+impl<R: TreeRoot> AstNode<R> for TokenTree<R> {\n+    fn cast(syntax: SyntaxNode<R>) -> Option<Self> {\n+        match syntax.kind() {\n+            TOKEN_TREE => Some(TokenTree { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n+}\n+\n+impl<R: TreeRoot> TokenTree<R> {}\n+\n // TraitDef\n #[derive(Debug, Clone, Copy)]\n pub struct TraitDef<R: TreeRoot = Arc<SyntaxRoot>> {\n@@ -480,6 +530,7 @@ impl<R: TreeRoot> AstNode<R> for TraitDef<R> {\n }\n \n impl<R: TreeRoot> ast::NameOwner<R> for TraitDef<R> {}\n+impl<R: TreeRoot> ast::AttrsOwner<R> for TraitDef<R> {}\n impl<R: TreeRoot> TraitDef<R> {}\n \n // TupleType\n@@ -517,6 +568,7 @@ impl<R: TreeRoot> AstNode<R> for TypeDef<R> {\n }\n \n impl<R: TreeRoot> ast::NameOwner<R> for TypeDef<R> {}\n+impl<R: TreeRoot> ast::AttrsOwner<R> for TypeDef<R> {}\n impl<R: TreeRoot> TypeDef<R> {}\n \n // TypeRef"}, {"sha": "fe8f91d152815fbf00f0b9391083eecd201efb2c", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -2,10 +2,11 @@ mod generated;\n \n use std::sync::Arc;\n \n+use itertools::Itertools;\n use smol_str::SmolStr;\n \n use {\n-    SyntaxNode, SyntaxRoot, TreeRoot, SyntaxError,\n+    SyntaxNode, SyntaxNodeRef, SyntaxRoot, TreeRoot, SyntaxError,\n     SyntaxKind::*,\n };\n pub use self::generated::*;\n@@ -14,6 +15,9 @@ pub trait AstNode<R: TreeRoot> {\n     fn cast(syntax: SyntaxNode<R>) -> Option<Self>\n         where Self: Sized;\n     fn syntax(&self) -> &SyntaxNode<R>;\n+    fn syntax_ref<'a>(&'a self) -> SyntaxNodeRef<'a> where R: 'a {\n+        self.syntax().as_ref()\n+    }\n }\n \n pub trait NameOwner<R: TreeRoot>: AstNode<R> {\n@@ -25,6 +29,14 @@ pub trait NameOwner<R: TreeRoot>: AstNode<R> {\n     }\n }\n \n+pub trait AttrsOwner<R: TreeRoot>: AstNode<R> {\n+    fn attrs<'a>(&'a self) -> Box<Iterator<Item=Attr<R>> + 'a> where R: 'a {\n+        let it = self.syntax().children()\n+            .filter_map(Attr::cast);\n+        Box::new(it)\n+    }\n+}\n+\n impl File<Arc<SyntaxRoot>> {\n     pub fn parse(text: &str) -> Self {\n         File::cast(::parse(text)).unwrap()\n@@ -39,31 +51,20 @@ impl<R: TreeRoot> File<R> {\n \n impl<R: TreeRoot> FnDef<R> {\n     pub fn has_atom_attr(&self, atom: &str) -> bool {\n-        self.syntax()\n-            .children()\n-            .filter(|node| node.kind() == ATTR)\n-            .any(|attr| {\n-                let mut metas = attr.children().filter(|node| node.kind() == META_ITEM);\n-                let meta = match metas.next() {\n-                    None => return false,\n-                    Some(meta) => {\n-                        if metas.next().is_some() {\n-                            return false;\n-                        }\n-                        meta\n-                    }\n-                };\n-                let mut children = meta.children();\n-                match children.next() {\n-                    None => false,\n-                    Some(child) => {\n-                        if children.next().is_some() {\n-                            return false;\n-                        }\n-                        child.kind() == IDENT && child.text() == atom\n-                    }\n-                }\n-            })\n+        self.attrs()\n+            .filter_map(|x| x.value())\n+            .filter_map(|x| as_atom(x))\n+            .any(|x| x == atom)\n+    }\n+}\n+\n+fn as_atom<R: TreeRoot>(tt: TokenTree<R>) -> Option<SmolStr> {\n+    let syntax = tt.syntax_ref();\n+    let (_bra, attr, _ket) = syntax.children().collect_tuple()?;\n+    if attr.kind() == IDENT {\n+        Some(attr.leaf_text().unwrap())\n+    } else {\n+        None\n     }\n }\n "}, {"sha": "4e523da9abb7f5a748b2c46feeb4fcb9540df234", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -221,24 +221,26 @@ Grammar(\n                 [\"functions\", \"FnDef\"]\n             ]\n         ),\n-        \"FnDef\": ( traits: [\"NameOwner\"] ),\n+        \"FnDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n         \"StructDef\": (\n-            traits: [\"NameOwner\"],\n+            traits: [\"NameOwner\", \"AttrsOwner\"],\n             collections: [\n                 [\"fields\", \"NamedField\"]\n             ]\n         ),\n-        \"NamedField\": ( traits: [\"NameOwner\"] ),\n-        \"EnumDef\": ( traits: [\"NameOwner\"] ),\n-        \"TraitDef\": ( traits: [\"NameOwner\"] ),\n-        \"Module\": ( traits: [\"NameOwner\"] ),\n-        \"ConstDef\": ( traits: [\"NameOwner\"] ),\n-        \"StaticDef\": ( traits: [\"NameOwner\"] ),\n-        \"TypeDef\": ( traits: [\"NameOwner\"] ),\n+        \"NamedField\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n+        \"EnumDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n+        \"TraitDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n+        \"Module\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n+        \"ConstDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n+        \"StaticDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n+        \"TypeDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n         \"ImplItem\": (),\n \n         \"Name\": (),\n         \"NameRef\": (),\n+        \"Attr\": ( options: [ [\"value\", \"TokenTree\"] ] ),\n+        \"TokenTree\": (),\n \n         \"ParenType\": (),\n         \"TupleType\": (),"}, {"sha": "cd30e8a450c6192c9a9ef5ba3fec3a211db84646", "filename": "crates/libsyntax2/src/grammar/attributes.rs", "status": "modified", "additions": 4, "deletions": 52, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fattributes.rs?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -22,58 +22,10 @@ fn attribute(p: &mut Parser, inner: bool) {\n         p.bump();\n     }\n \n-    if p.expect(L_BRACK) {\n-        meta_item(p);\n-        p.expect(R_BRACK);\n-    }\n-    attr.complete(p, ATTR);\n-}\n-\n-fn meta_item(p: &mut Parser) {\n-    if p.at(IDENT) {\n-        let meta_item = p.start();\n-        p.bump();\n-        match p.current() {\n-            EQ => {\n-                p.bump();\n-                if expressions::literal(p).is_none() {\n-                    p.error(\"expected literal\");\n-                }\n-            }\n-            L_PAREN => meta_item_arg_list(p),\n-            _ => (),\n-        }\n-        meta_item.complete(p, META_ITEM);\n+    if p.at(L_BRACK) {\n+        items::token_tree(p);\n     } else {\n-        p.error(\"expected attribute value\");\n-    }\n-}\n-\n-fn meta_item_arg_list(p: &mut Parser) {\n-    assert!(p.at(L_PAREN));\n-    p.bump();\n-    loop {\n-        match p.current() {\n-            EOF | R_PAREN => break,\n-            IDENT => meta_item(p),\n-            c => if expressions::literal(p).is_none() {\n-                let message = \"expected attribute\";\n-\n-                if items::ITEM_FIRST.contains(c) {\n-                    p.error(message);\n-                    return;\n-                }\n-\n-                let err = p.start();\n-                p.error(message);\n-                p.bump();\n-                err.complete(p, ERROR);\n-                continue;\n-            },\n-        }\n-        if !p.at(R_PAREN) {\n-            p.expect(COMMA);\n-        }\n+        p.error(\"expected `[`\");\n     }\n-    p.expect(R_PAREN);\n+    attr.complete(p, ATTR);\n }"}, {"sha": "84cb477488b717d8969fdd20e07ea35b6d67910d", "filename": "crates/libsyntax2/src/grammar/items/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -55,9 +55,6 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemF\n     }\n }\n \n-pub(super) const ITEM_FIRST: TokenSet =\n-    token_set![EXTERN_KW, MOD_KW, USE_KW, STRUCT_KW, ENUM_KW, FN_KW, PUB_KW, POUND];\n-\n pub(super) enum MaybeItem {\n     None,\n     Item(SyntaxKind),\n@@ -322,13 +319,14 @@ pub(super) fn macro_call_after_excl(p: &mut Parser) -> BlockLike {\n     flavor\n }\n \n-fn token_tree(p: &mut Parser) {\n+pub(super) fn token_tree(p: &mut Parser) {\n     let closing_paren_kind = match p.current() {\n         L_CURLY => R_CURLY,\n         L_PAREN => R_PAREN,\n         L_BRACK => R_BRACK,\n         _ => unreachable!(),\n     };\n+    let m = p.start();\n     p.bump();\n     while !p.at(EOF) && !p.at(closing_paren_kind) {\n         match p.current() {\n@@ -338,4 +336,5 @@ fn token_tree(p: &mut Parser) {\n         }\n     };\n     p.expect(closing_paren_kind);\n+    m.complete(p, TOKEN_TREE);\n }"}, {"sha": "12451c892eac5c5ac74155aacc1234373eee0ef2", "filename": "crates/libsyntax2/tests/data/parser/err/0005_attribute_recover.txt", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0005_attribute_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0005_attribute_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0005_attribute_recover.txt?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -2,25 +2,20 @@ FILE@[0; 54)\n   FN_DEF@[0; 31)\n     ATTR@[0; 18)\n       POUND@[0; 1)\n-      L_BRACK@[1; 2)\n-      META_ITEM@[2; 17)\n+      TOKEN_TREE@[1; 18)\n+        L_BRACK@[1; 2)\n         IDENT@[2; 5) \"foo\"\n-        L_PAREN@[5; 6)\n-        META_ITEM@[6; 9)\n+        TOKEN_TREE@[5; 17)\n+          L_PAREN@[5; 6)\n           IDENT@[6; 9) \"foo\"\n-        COMMA@[9; 10)\n-        WHITESPACE@[10; 11)\n-        err: `expected attribute`\n-        ERROR@[11; 12)\n+          COMMA@[9; 10)\n+          WHITESPACE@[10; 11)\n           PLUS@[11; 12)\n-          err: `expected attribute`\n-        ERROR@[12; 13)\n           COMMA@[12; 13)\n-        WHITESPACE@[13; 14)\n-        LITERAL@[14; 16)\n+          WHITESPACE@[13; 14)\n           INT_NUMBER@[14; 16) \"92\"\n-        R_PAREN@[16; 17)\n-      R_BRACK@[17; 18)\n+          R_PAREN@[16; 17)\n+        R_BRACK@[17; 18)\n     WHITESPACE@[18; 19)\n     FN_KW@[19; 21)\n     WHITESPACE@[21; 22)\n@@ -35,26 +30,26 @@ FILE@[0; 54)\n       WHITESPACE@[29; 30)\n       R_CURLY@[30; 31)\n   WHITESPACE@[31; 34)\n-  FN_DEF@[34; 53)\n-    ATTR@[34; 40)\n-      POUND@[34; 35)\n+  ATTR@[34; 53)\n+    POUND@[34; 35)\n+    TOKEN_TREE@[35; 53)\n       L_BRACK@[35; 36)\n-      META_ITEM@[36; 40)\n-        IDENT@[36; 39) \"foo\"\n+      IDENT@[36; 39) \"foo\"\n+      TOKEN_TREE@[39; 53)\n         L_PAREN@[39; 40)\n-        err: `expected attribute`\n-        err: `expected R_BRACK`\n-    WHITESPACE@[40; 41)\n-    FN_KW@[41; 43)\n-    WHITESPACE@[43; 44)\n-    NAME@[44; 47)\n-      IDENT@[44; 47) \"foo\"\n-    PARAM_LIST@[47; 49)\n-      L_PAREN@[47; 48)\n-      R_PAREN@[48; 49)\n-    WHITESPACE@[49; 50)\n-    BLOCK_EXPR@[50; 53)\n-      L_CURLY@[50; 51)\n-      WHITESPACE@[51; 52)\n-      R_CURLY@[52; 53)\n+        WHITESPACE@[40; 41)\n+        FN_KW@[41; 43)\n+        WHITESPACE@[43; 44)\n+        IDENT@[44; 47) \"foo\"\n+        TOKEN_TREE@[47; 49)\n+          L_PAREN@[47; 48)\n+          R_PAREN@[48; 49)\n+        WHITESPACE@[49; 50)\n+        TOKEN_TREE@[50; 53)\n+          L_CURLY@[50; 51)\n+          WHITESPACE@[51; 52)\n+          R_CURLY@[52; 53)\n+          err: `expected R_PAREN`\n+          err: `expected R_BRACK`\n+          err: `expected an item`\n   WHITESPACE@[53; 54)"}, {"sha": "68f2b8aa5c794ea94d642f70e4c36bcc8803eb56", "filename": "crates/libsyntax2/tests/data/parser/err/0008_item_block_recovery.txt", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0008_item_block_recovery.txt?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -19,9 +19,10 @@ FILE@[0; 95)\n         NAME_REF@[14; 17)\n           IDENT@[14; 17) \"bar\"\n           err: `expected EXCL`\n-    L_PAREN@[17; 18)\n-    R_PAREN@[18; 19)\n-    err: `expected SEMI`\n+    TOKEN_TREE@[17; 19)\n+      L_PAREN@[17; 18)\n+      R_PAREN@[18; 19)\n+      err: `expected SEMI`\n   WHITESPACE@[19; 20)\n   err: `expected an item`\n   ERROR@[20; 80)"}, {"sha": "629a8ec9bcda8f87928d5bc1ffb6b9e1cfb34873", "filename": "crates/libsyntax2/tests/data/parser/inline/0039_path_expr.txt", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0039_path_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0039_path_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0039_path_expr.txt?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -86,8 +86,9 @@ FILE@[0; 91)\n               NAME_REF@[78; 84)\n                 IDENT@[78; 84) \"format\"\n           EXCL@[84; 85)\n-          L_PAREN@[85; 86)\n-          R_PAREN@[86; 87)\n+          TOKEN_TREE@[85; 87)\n+            L_PAREN@[85; 86)\n+            R_PAREN@[86; 87)\n         SEMI@[87; 88)\n       WHITESPACE@[88; 89)\n       R_CURLY@[89; 90)"}, {"sha": "696695ebadf7a20331f926b64b31da1d7bc027d8", "filename": "crates/libsyntax2/tests/data/parser/inline/0078_mod_contents.txt", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0078_mod_contents.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0078_mod_contents.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0078_mod_contents.txt?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -21,8 +21,9 @@ FILE@[0; 70)\n     WHITESPACE@[24; 25)\n     IDENT@[25; 28) \"foo\"\n     WHITESPACE@[28; 29)\n-    L_CURLY@[29; 30)\n-    R_CURLY@[30; 31)\n+    TOKEN_TREE@[29; 31)\n+      L_CURLY@[29; 30)\n+      R_CURLY@[30; 31)\n   WHITESPACE@[31; 32)\n   MACRO_CALL@[32; 44)\n     PATH@[32; 40)\n@@ -35,8 +36,9 @@ FILE@[0; 70)\n         NAME_REF@[37; 40)\n           IDENT@[37; 40) \"bar\"\n     EXCL@[40; 41)\n-    L_PAREN@[41; 42)\n-    R_PAREN@[42; 43)\n+    TOKEN_TREE@[41; 43)\n+      L_PAREN@[41; 42)\n+      R_PAREN@[42; 43)\n     SEMI@[43; 44)\n   WHITESPACE@[44; 45)\n   MACRO_CALL@[45; 59)\n@@ -50,8 +52,9 @@ FILE@[0; 70)\n           IDENT@[52; 55) \"baz\"\n     EXCL@[55; 56)\n     WHITESPACE@[56; 57)\n-    L_CURLY@[57; 58)\n-    R_CURLY@[58; 59)\n+    TOKEN_TREE@[57; 59)\n+      L_CURLY@[57; 58)\n+      R_CURLY@[58; 59)\n   WHITESPACE@[59; 60)\n   STRUCT_DEF@[60; 69)\n     STRUCT_KW@[60; 66)"}, {"sha": "d5a170144fd01348937c38fd5b1d5a04961d56f9", "filename": "crates/libsyntax2/tests/data/parser/ok/0006_inner_attributes.txt", "status": "modified", "additions": 83, "deletions": 95, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0006_inner_attributes.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0006_inner_attributes.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0006_inner_attributes.txt?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -2,175 +2,163 @@ FILE@[0; 236)\n   ATTR@[0; 8)\n     POUND@[0; 1)\n     EXCL@[1; 2)\n-    L_BRACK@[2; 3)\n-    META_ITEM@[3; 7)\n+    TOKEN_TREE@[2; 8)\n+      L_BRACK@[2; 3)\n       IDENT@[3; 7) \"attr\"\n-    R_BRACK@[7; 8)\n+      R_BRACK@[7; 8)\n   WHITESPACE@[8; 9)\n   ATTR@[9; 23)\n     POUND@[9; 10)\n     EXCL@[10; 11)\n-    L_BRACK@[11; 12)\n-    META_ITEM@[12; 22)\n+    TOKEN_TREE@[11; 23)\n+      L_BRACK@[11; 12)\n       IDENT@[12; 16) \"attr\"\n-      L_PAREN@[16; 17)\n-      LITERAL@[17; 21)\n+      TOKEN_TREE@[16; 22)\n+        L_PAREN@[16; 17)\n         TRUE_KW@[17; 21)\n-      R_PAREN@[21; 22)\n-    R_BRACK@[22; 23)\n+        R_PAREN@[21; 22)\n+      R_BRACK@[22; 23)\n   WHITESPACE@[23; 24)\n   ATTR@[24; 39)\n     POUND@[24; 25)\n     EXCL@[25; 26)\n-    L_BRACK@[26; 27)\n-    META_ITEM@[27; 38)\n+    TOKEN_TREE@[26; 39)\n+      L_BRACK@[26; 27)\n       IDENT@[27; 31) \"attr\"\n-      L_PAREN@[31; 32)\n-      META_ITEM@[32; 37)\n+      TOKEN_TREE@[31; 38)\n+        L_PAREN@[31; 32)\n         IDENT@[32; 37) \"ident\"\n-      R_PAREN@[37; 38)\n-    R_BRACK@[38; 39)\n+        R_PAREN@[37; 38)\n+      R_BRACK@[38; 39)\n   WHITESPACE@[39; 40)\n   ATTR@[40; 116)\n     POUND@[40; 41)\n     EXCL@[41; 42)\n-    L_BRACK@[42; 43)\n-    META_ITEM@[43; 115)\n+    TOKEN_TREE@[42; 116)\n+      L_BRACK@[42; 43)\n       IDENT@[43; 47) \"attr\"\n-      L_PAREN@[47; 48)\n-      META_ITEM@[48; 53)\n+      TOKEN_TREE@[47; 115)\n+        L_PAREN@[47; 48)\n         IDENT@[48; 53) \"ident\"\n-      COMMA@[53; 54)\n-      WHITESPACE@[54; 55)\n-      LITERAL@[55; 58)\n+        COMMA@[53; 54)\n+        WHITESPACE@[54; 55)\n         INT_NUMBER@[55; 58) \"100\"\n-      COMMA@[58; 59)\n-      WHITESPACE@[59; 60)\n-      LITERAL@[60; 64)\n+        COMMA@[58; 59)\n+        WHITESPACE@[59; 60)\n         TRUE_KW@[60; 64)\n-      COMMA@[64; 65)\n-      WHITESPACE@[65; 66)\n-      LITERAL@[66; 72)\n+        COMMA@[64; 65)\n+        WHITESPACE@[65; 66)\n         STRING@[66; 72)\n-      COMMA@[72; 73)\n-      WHITESPACE@[73; 74)\n-      META_ITEM@[74; 85)\n+        COMMA@[72; 73)\n+        WHITESPACE@[73; 74)\n         IDENT@[74; 79) \"ident\"\n         WHITESPACE@[79; 80)\n         EQ@[80; 81)\n         WHITESPACE@[81; 82)\n-        LITERAL@[82; 85)\n-          INT_NUMBER@[82; 85) \"100\"\n-      COMMA@[85; 86)\n-      WHITESPACE@[86; 87)\n-      META_ITEM@[87; 102)\n+        INT_NUMBER@[82; 85) \"100\"\n+        COMMA@[85; 86)\n+        WHITESPACE@[86; 87)\n         IDENT@[87; 92) \"ident\"\n         WHITESPACE@[92; 93)\n         EQ@[93; 94)\n         WHITESPACE@[94; 95)\n-        LITERAL@[95; 102)\n-          STRING@[95; 102)\n-      COMMA@[102; 103)\n-      WHITESPACE@[103; 104)\n-      META_ITEM@[104; 114)\n+        STRING@[95; 102)\n+        COMMA@[102; 103)\n+        WHITESPACE@[103; 104)\n         IDENT@[104; 109) \"ident\"\n-        L_PAREN@[109; 110)\n-        LITERAL@[110; 113)\n+        TOKEN_TREE@[109; 114)\n+          L_PAREN@[109; 110)\n           INT_NUMBER@[110; 113) \"100\"\n-        R_PAREN@[113; 114)\n-      R_PAREN@[114; 115)\n-    R_BRACK@[115; 116)\n+          R_PAREN@[113; 114)\n+        R_PAREN@[114; 115)\n+      R_BRACK@[115; 116)\n   WHITESPACE@[116; 117)\n   ATTR@[117; 130)\n     POUND@[117; 118)\n     EXCL@[118; 119)\n-    L_BRACK@[119; 120)\n-    META_ITEM@[120; 129)\n+    TOKEN_TREE@[119; 130)\n+      L_BRACK@[119; 120)\n       IDENT@[120; 124) \"attr\"\n-      L_PAREN@[124; 125)\n-      LITERAL@[125; 128)\n+      TOKEN_TREE@[124; 129)\n+        L_PAREN@[124; 125)\n         INT_NUMBER@[125; 128) \"100\"\n-      R_PAREN@[128; 129)\n-    R_BRACK@[129; 130)\n+        R_PAREN@[128; 129)\n+      R_BRACK@[129; 130)\n   WHITESPACE@[130; 131)\n   ATTR@[131; 155)\n     POUND@[131; 132)\n     EXCL@[132; 133)\n-    L_BRACK@[133; 134)\n-    META_ITEM@[134; 154)\n+    TOKEN_TREE@[133; 155)\n+      L_BRACK@[133; 134)\n       IDENT@[134; 138) \"attr\"\n-      L_PAREN@[138; 139)\n-      META_ITEM@[139; 153)\n+      TOKEN_TREE@[138; 154)\n+        L_PAREN@[138; 139)\n         IDENT@[139; 146) \"enabled\"\n         WHITESPACE@[146; 147)\n         EQ@[147; 148)\n         WHITESPACE@[148; 149)\n-        LITERAL@[149; 153)\n-          TRUE_KW@[149; 153)\n-      R_PAREN@[153; 154)\n-    R_BRACK@[154; 155)\n+        TRUE_KW@[149; 153)\n+        R_PAREN@[153; 154)\n+      R_BRACK@[154; 155)\n   WHITESPACE@[155; 156)\n   ATTR@[156; 173)\n     POUND@[156; 157)\n     EXCL@[157; 158)\n-    L_BRACK@[158; 159)\n-    META_ITEM@[159; 172)\n+    TOKEN_TREE@[158; 173)\n+      L_BRACK@[158; 159)\n       IDENT@[159; 166) \"enabled\"\n-      L_PAREN@[166; 167)\n-      LITERAL@[167; 171)\n+      TOKEN_TREE@[166; 172)\n+        L_PAREN@[166; 167)\n         TRUE_KW@[167; 171)\n-      R_PAREN@[171; 172)\n-    R_BRACK@[172; 173)\n+        R_PAREN@[171; 172)\n+      R_BRACK@[172; 173)\n   WHITESPACE@[173; 174)\n   ATTR@[174; 191)\n     POUND@[174; 175)\n     EXCL@[175; 176)\n-    L_BRACK@[176; 177)\n-    META_ITEM@[177; 190)\n+    TOKEN_TREE@[176; 191)\n+      L_BRACK@[176; 177)\n       IDENT@[177; 181) \"attr\"\n-      L_PAREN@[181; 182)\n-      LITERAL@[182; 189)\n+      TOKEN_TREE@[181; 190)\n+        L_PAREN@[181; 182)\n         STRING@[182; 189)\n-      R_PAREN@[189; 190)\n-    R_BRACK@[190; 191)\n+        R_PAREN@[189; 190)\n+      R_BRACK@[190; 191)\n   WHITESPACE@[191; 192)\n   ATTR@[192; 214)\n     POUND@[192; 193)\n     EXCL@[193; 194)\n-    L_BRACK@[194; 195)\n-    META_ITEM@[195; 213)\n+    TOKEN_TREE@[194; 214)\n+      L_BRACK@[194; 195)\n       IDENT@[195; 199) \"repr\"\n-      L_PAREN@[199; 200)\n-      META_ITEM@[200; 201)\n+      TOKEN_TREE@[199; 213)\n+        L_PAREN@[199; 200)\n         IDENT@[200; 201) \"C\"\n-      COMMA@[201; 202)\n-      WHITESPACE@[202; 203)\n-      META_ITEM@[203; 212)\n+        COMMA@[201; 202)\n+        WHITESPACE@[202; 203)\n         IDENT@[203; 208) \"align\"\n         WHITESPACE@[208; 209)\n         EQ@[209; 210)\n         WHITESPACE@[210; 211)\n-        LITERAL@[211; 212)\n-          INT_NUMBER@[211; 212) \"4\"\n-      R_PAREN@[212; 213)\n-    R_BRACK@[213; 214)\n+        INT_NUMBER@[211; 212) \"4\"\n+        R_PAREN@[212; 213)\n+      R_BRACK@[213; 214)\n   WHITESPACE@[214; 215)\n   ATTR@[215; 236)\n     POUND@[215; 216)\n     EXCL@[216; 217)\n-    L_BRACK@[217; 218)\n-    META_ITEM@[218; 235)\n+    TOKEN_TREE@[217; 236)\n+      L_BRACK@[217; 218)\n       IDENT@[218; 222) \"repr\"\n-      L_PAREN@[222; 223)\n-      META_ITEM@[223; 224)\n+      TOKEN_TREE@[222; 235)\n+        L_PAREN@[222; 223)\n         IDENT@[223; 224) \"C\"\n-      COMMA@[224; 225)\n-      WHITESPACE@[225; 226)\n-      META_ITEM@[226; 234)\n+        COMMA@[224; 225)\n+        WHITESPACE@[225; 226)\n         IDENT@[226; 231) \"align\"\n-        L_PAREN@[231; 232)\n-        LITERAL@[232; 233)\n+        TOKEN_TREE@[231; 234)\n+          L_PAREN@[231; 232)\n           INT_NUMBER@[232; 233) \"4\"\n-        R_PAREN@[233; 234)\n-      R_PAREN@[234; 235)\n-    R_BRACK@[235; 236)\n+          R_PAREN@[233; 234)\n+        R_PAREN@[234; 235)\n+      R_BRACK@[235; 236)"}, {"sha": "54fe69baf6d258151cefc3c8b3dc59910ae6e790", "filename": "crates/libsyntax2/tests/data/parser/ok/0008_mod_item.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0008_mod_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0008_mod_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0008_mod_item.txt?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -60,10 +60,10 @@ FILE@[0; 118)\n     ATTR@[79; 87)\n       POUND@[79; 80)\n       EXCL@[80; 81)\n-      L_BRACK@[81; 82)\n-      META_ITEM@[82; 86)\n+      TOKEN_TREE@[81; 87)\n+        L_BRACK@[81; 82)\n         IDENT@[82; 86) \"attr\"\n-      R_BRACK@[86; 87)\n+        R_BRACK@[86; 87)\n     WHITESPACE@[87; 92)\n     MODULE@[92; 98)\n       MOD_KW@[92; 95)"}, {"sha": "24647fb06468b4dc8383c4c0830c7e8ad30c7bc4", "filename": "crates/libsyntax2/tests/data/parser/ok/0011_outer_attribute.txt", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0011_outer_attribute.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0011_outer_attribute.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0011_outer_attribute.txt?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -2,21 +2,21 @@ FILE@[0; 35)\n   FN_DEF@[0; 34)\n     ATTR@[0; 12)\n       POUND@[0; 1)\n-      L_BRACK@[1; 2)\n-      META_ITEM@[2; 11)\n+      TOKEN_TREE@[1; 12)\n+        L_BRACK@[1; 2)\n         IDENT@[2; 5) \"cfg\"\n-        L_PAREN@[5; 6)\n-        META_ITEM@[6; 10)\n+        TOKEN_TREE@[5; 11)\n+          L_PAREN@[5; 6)\n           IDENT@[6; 10) \"test\"\n-        R_PAREN@[10; 11)\n-      R_BRACK@[11; 12)\n+          R_PAREN@[10; 11)\n+        R_BRACK@[11; 12)\n     WHITESPACE@[12; 13)\n     ATTR@[13; 22)\n       POUND@[13; 14)\n-      L_BRACK@[14; 15)\n-      META_ITEM@[15; 21)\n+      TOKEN_TREE@[14; 22)\n+        L_BRACK@[14; 15)\n         IDENT@[15; 21) \"ignore\"\n-      R_BRACK@[21; 22)\n+        R_BRACK@[21; 22)\n     WHITESPACE@[22; 23)\n     FN_KW@[23; 25)\n     WHITESPACE@[25; 26)"}, {"sha": "6acd842c68943f5d401bd16da5514be4b6d0cf49", "filename": "crates/libsyntax2/tests/data/parser/ok/0017_attr_trailing_comma.txt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0017_attr_trailing_comma.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0017_attr_trailing_comma.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Fok%2F0017_attr_trailing_comma.txt?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -2,15 +2,15 @@ FILE@[0; 23)\n   FN_DEF@[0; 22)\n     ATTR@[0; 10)\n       POUND@[0; 1)\n-      L_BRACK@[1; 2)\n-      META_ITEM@[2; 9)\n+      TOKEN_TREE@[1; 10)\n+        L_BRACK@[1; 2)\n         IDENT@[2; 5) \"foo\"\n-        L_PAREN@[5; 6)\n-        META_ITEM@[6; 7)\n+        TOKEN_TREE@[5; 9)\n+          L_PAREN@[5; 6)\n           IDENT@[6; 7) \"a\"\n-        COMMA@[7; 8)\n-        R_PAREN@[8; 9)\n-      R_BRACK@[9; 10)\n+          COMMA@[7; 8)\n+          R_PAREN@[8; 9)\n+        R_BRACK@[9; 10)\n     WHITESPACE@[10; 11)\n     FN_KW@[11; 13)\n     WHITESPACE@[13; 14)"}, {"sha": "802dba0e9ab25b76900c28fc7f8cc2ed1b99870d", "filename": "crates/libsyntax2/tests/test/main.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7094291573dc819e3115950ec3b2316bd5e9ea33/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs?ref=7094291573dc819e3115950ec3b2316bd5e9ea33", "patch": "@@ -70,19 +70,19 @@ fn assert_equal_text(expected: &str, actual: &str, path: &Path) {\n         return;\n     }\n     let dir = project_dir();\n-    let path = path.strip_prefix(&dir).unwrap_or_else(|_| path);\n+    let pretty_path = path.strip_prefix(&dir).unwrap_or_else(|_| path);\n     if expected.trim() == actual.trim() {\n         println!(\"whitespace difference, rewriting\");\n-        println!(\"file: {}\\n\", path.display());\n+        println!(\"file: {}\\n\", pretty_path.display());\n         fs::write(path, actual).unwrap();\n         return;\n     }\n     if REWRITE {\n-        println!(\"rewriting {}\", path.display());\n+        println!(\"rewriting {}\", pretty_path.display());\n         fs::write(path, actual).unwrap();\n         return;\n     }\n-    assert_eq_text!(expected, actual, \"file: {}\", path.display());\n+    assert_eq_text!(expected, actual, \"file: {}\", pretty_path.display());\n }\n \n fn collect_tests(paths: &[&str]) -> Vec<PathBuf> {"}]}