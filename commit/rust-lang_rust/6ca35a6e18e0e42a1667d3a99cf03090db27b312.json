{"sha": "6ca35a6e18e0e42a1667d3a99cf03090db27b312", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYTM1YTZlMThlMGU0MmExNjY3ZDNhOTljZjAzMDkwZGIyN2IzMTI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-25T16:08:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-25T16:08:14Z"}, "message": "Rollup merge of #38930 - insaneinside:place-left-arrow-syntax-docs, r=brson\n\nUpdates to src/libcore/ops.rs docs for RFC#1228 (Placement Left Arrow)\n\nAlso fixed a minor typo in docs for `core::ops::Place`.", "tree": {"sha": "9d97ade640c837022597b64ab3694d408cee7b5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d97ade640c837022597b64ab3694d408cee7b5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ca35a6e18e0e42a1667d3a99cf03090db27b312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca35a6e18e0e42a1667d3a99cf03090db27b312", "html_url": "https://github.com/rust-lang/rust/commit/6ca35a6e18e0e42a1667d3a99cf03090db27b312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ca35a6e18e0e42a1667d3a99cf03090db27b312/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1283c029557bcde106adde71f467fe133b3ffeff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1283c029557bcde106adde71f467fe133b3ffeff", "html_url": "https://github.com/rust-lang/rust/commit/1283c029557bcde106adde71f467fe133b3ffeff"}, {"sha": "af221a221fe85bd4b0acaf3203d9f0977ea97f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/af221a221fe85bd4b0acaf3203d9f0977ea97f2e", "html_url": "https://github.com/rust-lang/rust/commit/af221a221fe85bd4b0acaf3203d9f0977ea97f2e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "9ff4725c9b36526809649c93a7a6c2731b2dd8ed", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ca35a6e18e0e42a1667d3a99cf03090db27b312/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca35a6e18e0e42a1667d3a99cf03090db27b312/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=6ca35a6e18e0e42a1667d3a99cf03090db27b312", "patch": "@@ -2776,7 +2776,7 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n \n-/// Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\n+/// Both `PLACE <- EXPR` and `box EXPR` desugar into expressions\n /// that allocate an intermediate \"place\" that holds uninitialized\n /// state.  The desugaring evaluates EXPR, and writes the result at\n /// the address returned by the `pointer` method of this trait.\n@@ -2791,7 +2791,7 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n /// converting the agent to an instance of the owning pointer, via the\n /// appropriate `finalize` method (see the `InPlace`.\n ///\n-/// If evaluating EXPR fails, then the destructor for the\n+/// If evaluating EXPR fails, then it is up to the destructor for the\n /// implementation of Place to clean up any intermediate state\n /// (e.g. deallocate box storage, pop a stack, etc).\n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n@@ -2802,9 +2802,9 @@ pub trait Place<Data: ?Sized> {\n     fn pointer(&mut self) -> *mut Data;\n }\n \n-/// Interface to implementations of  `in (PLACE) EXPR`.\n+/// Interface to implementations of  `PLACE <- EXPR`.\n ///\n-/// `in (PLACE) EXPR` effectively desugars into:\n+/// `PLACE <- EXPR` effectively desugars into:\n ///\n /// ```rust,ignore\n /// let p = PLACE;\n@@ -2817,7 +2817,7 @@ pub trait Place<Data: ?Sized> {\n /// }\n /// ```\n ///\n-/// The type of `in (PLACE) EXPR` is derived from the type of `PLACE`;\n+/// The type of `PLACE <- EXPR` is derived from the type of `PLACE`;\n /// if the type of `PLACE` is `P`, then the final type of the whole\n /// expression is `P::Place::Owner` (see the `InPlace` and `Boxed`\n /// traits).\n@@ -2835,12 +2835,12 @@ pub trait Placer<Data: ?Sized> {\n     fn make_place(self) -> Self::Place;\n }\n \n-/// Specialization of `Place` trait supporting `in (PLACE) EXPR`.\n+/// Specialization of `Place` trait supporting `PLACE <- EXPR`.\n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait InPlace<Data: ?Sized>: Place<Data> {\n-    /// `Owner` is the type of the end value of `in (PLACE) EXPR`\n+    /// `Owner` is the type of the end value of `PLACE <- EXPR`\n     ///\n-    /// Note that when `in (PLACE) EXPR` is solely used for\n+    /// Note that when `PLACE <- EXPR` is solely used for\n     /// side-effecting an existing data-structure,\n     /// e.g. `Vec::emplace_back`, then `Owner` need not carry any\n     /// information at all (e.g. it can be the unit type `()` in that"}]}