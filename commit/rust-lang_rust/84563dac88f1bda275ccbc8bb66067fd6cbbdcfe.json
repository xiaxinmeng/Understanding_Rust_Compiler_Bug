{"sha": "84563dac88f1bda275ccbc8bb66067fd6cbbdcfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NTYzZGFjODhmMWJkYTI3NWNjYmM4YmI2NjA2N2ZkNmNiYmRjZmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-12T19:11:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:30:54Z"}, "message": "build up a map of the region-bound pairs for each body-id\n\nPresently unused.", "tree": {"sha": "73dd04fe2bd507861e71f9a8237046e9f5bb1de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73dd04fe2bd507861e71f9a8237046e9f5bb1de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84563dac88f1bda275ccbc8bb66067fd6cbbdcfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84563dac88f1bda275ccbc8bb66067fd6cbbdcfe", "html_url": "https://github.com/rust-lang/rust/commit/84563dac88f1bda275ccbc8bb66067fd6cbbdcfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84563dac88f1bda275ccbc8bb66067fd6cbbdcfe/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb4ea91f2844b3a2b0efbfd3cefe16bdb946d23", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb4ea91f2844b3a2b0efbfd3cefe16bdb946d23", "html_url": "https://github.com/rust-lang/rust/commit/1fb4ea91f2844b3a2b0efbfd3cefe16bdb946d23"}], "stats": {"total": 74, "additions": 63, "deletions": 11}, "files": [{"sha": "6808e9dc9e33ebf0f35d7269e8c76c00c3e07f1e", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/84563dac88f1bda275ccbc8bb66067fd6cbbdcfe/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84563dac88f1bda275ccbc8bb66067fd6cbbdcfe/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=84563dac88f1bda275ccbc8bb66067fd6cbbdcfe", "patch": "@@ -10,11 +10,11 @@\n \n use infer::outlives::free_region_map::FreeRegionMap;\n use infer::{GenericKind, InferCtxt};\n-use traits::query::outlives_bounds::{self, OutlivesBound};\n-use ty::{self, Ty};\n-\n+use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n use syntax_pos::Span;\n+use traits::query::outlives_bounds::{self, OutlivesBound};\n+use ty::{self, Ty};\n \n /// The `OutlivesEnvironment` collects information about what outlives\n /// what in a given type-checking setting. For example, if we have a\n@@ -39,15 +39,51 @@ use syntax_pos::Span;\n pub struct OutlivesEnvironment<'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n     free_region_map: FreeRegionMap<'tcx>,\n-    region_bound_pairs: Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>,\n+\n+    // Contains, for each body B that we are checking (that is, the fn\n+    // item, but also any nested closures), the set of implied region\n+    // bounds that are in scope in that particular body.\n+    //\n+    // Example:\n+    //\n+    // ```\n+    // fn foo<'a, 'b, T>(x: &'a T, y: &'b ()) {\n+    //   bar(x, y, |y: &'b T| { .. } // body B1)\n+    // } // body B0\n+    // ```\n+    //\n+    // Here, for body B0, the list would be `[T: 'a]`, because we\n+    // infer that `T` must outlive `'a` from the implied bounds on the\n+    // fn declaration.\n+    //\n+    // For the body B1, the list would be `[T: 'a, T: 'b]`, because we\n+    // also can see that -- within the closure body! -- `T` must\n+    // outlive `'b`. This is not necessarily true outside the closure\n+    // body, since the closure may never be called.\n+    //\n+    // We collect this map as we descend the tree. We then use the\n+    // results when proving outlives obligations like `T: 'x` later\n+    // (e.g., if `T: 'x` must be proven within the body B1, then we\n+    // know it is true if either `'a: 'x` or `'b: 'x`).\n+    region_bound_pairs_map: FxHashMap<ast::NodeId, RegionBoundPairs<'tcx>>,\n+\n+    // Used to compute `region_bound_pairs_map`: contains the set of\n+    // in-scope region-bound pairs thus far.\n+    region_bound_pairs_accum: RegionBoundPairs<'tcx>,\n }\n \n+/// \"Region-bound pairs\" tracks outlives relations that are known to\n+/// be true, either because of explicit where clauses like `T: 'a` or\n+/// because of implied bounds.\n+pub type RegionBoundPairs<'tcx> = Vec<(ty::Region<'tcx>, GenericKind<'tcx>)>;\n+\n impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n     pub fn new(param_env: ty::ParamEnv<'tcx>) -> Self {\n         let mut env = OutlivesEnvironment {\n             param_env,\n             free_region_map: FreeRegionMap::new(),\n-            region_bound_pairs: vec![],\n+            region_bound_pairs_map: FxHashMap::default(),\n+            region_bound_pairs_accum: vec![],\n         };\n \n         env.add_outlives_bounds(None, outlives_bounds::explicit_outlives_bounds(param_env));\n@@ -62,7 +98,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n \n     /// Borrows current value of the `region_bound_pairs`.\n     pub fn region_bound_pairs(&self) -> &[(ty::Region<'tcx>, GenericKind<'tcx>)] {\n-        &self.region_bound_pairs\n+        &self.region_bound_pairs_accum\n     }\n \n     /// Returns ownership of the `free_region_map`.\n@@ -108,12 +144,12 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n     /// similar leaks around givens that seem equally suspicious, to\n     /// be honest. --nmatsakis\n     pub fn push_snapshot_pre_closure(&self) -> usize {\n-        self.region_bound_pairs.len()\n+        self.region_bound_pairs_accum.len()\n     }\n \n     /// See `push_snapshot_pre_closure`.\n     pub fn pop_snapshot_post_closure(&mut self, len: usize) {\n-        self.region_bound_pairs.truncate(len);\n+        self.region_bound_pairs_accum.truncate(len);\n     }\n \n     /// This method adds \"implied bounds\" into the outlives environment.\n@@ -149,6 +185,15 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n         }\n     }\n \n+    /// Save the current set of region-bound pairs under the given `body_id`.\n+    pub fn save_implied_bounds(&mut self, body_id: ast::NodeId) {\n+        let old = self.region_bound_pairs_map.insert(\n+            body_id,\n+            self.region_bound_pairs_accum.clone(),\n+        );\n+        assert!(old.is_none());\n+    }\n+\n     /// Processes outlives bounds that are known to hold, whether from implied or other sources.\n     ///\n     /// The `infcx` parameter is optional; if the implied bounds may\n@@ -174,11 +219,11 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> OutlivesEnvironment<'tcx> {\n                         .add_given(r_a, vid_b);\n                 }\n                 OutlivesBound::RegionSubParam(r_a, param_b) => {\n-                    self.region_bound_pairs\n+                    self.region_bound_pairs_accum\n                         .push((r_a, GenericKind::Param(param_b)));\n                 }\n                 OutlivesBound::RegionSubProjection(r_a, projection_b) => {\n-                    self.region_bound_pairs\n+                    self.region_bound_pairs_accum\n                         .push((r_a, GenericKind::Projection(projection_b)));\n                 }\n                 OutlivesBound::RegionSubRegion(r_a, r_b) => {"}, {"sha": "aad474d0a885991b2e510fc662310ec38b0c0203", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84563dac88f1bda275ccbc8bb66067fd6cbbdcfe/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84563dac88f1bda275ccbc8bb66067fd6cbbdcfe/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=84563dac88f1bda275ccbc8bb66067fd6cbbdcfe", "patch": "@@ -130,6 +130,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Subject(subject),\n             self.param_env,\n         );\n+\n+        // There are no add'l implied bounds when checking a\n+        // standalone expr (e.g., the `E` in a type like `[u32; E]`).\n+        rcx.outlives_environment.save_implied_bounds(id);\n+\n         if self.err_count_since_creation() == 0 {\n             // regionck assumes typeck succeeded\n             rcx.visit_body(body);\n@@ -155,6 +160,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         );\n         rcx.outlives_environment\n             .add_implied_bounds(self, wf_tys, item_id, span);\n+        rcx.outlives_environment.save_implied_bounds(item_id);\n         rcx.visit_region_obligations(item_id);\n         rcx.resolve_regions_and_report_errors();\n     }\n@@ -308,7 +314,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         id: ast::NodeId, // the id of the fn itself\n         body: &'gcx hir::Body,\n         span: Span,\n-    ) {\n+   ) {\n         // When we enter a function, we can derive\n         debug!(\"visit_fn_body(id={})\", id);\n \n@@ -349,6 +355,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n             body_id.node_id,\n             span,\n         );\n+        self.outlives_environment.save_implied_bounds(body_id.node_id);\n         self.link_fn_args(\n             region::Scope {\n                 id: body.value.hir_id.local_id,"}]}