{"sha": "21e924975d8236572d3abcf8e0b997138389c37f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZTkyNDk3NWQ4MjM2NTcyZDNhYmNmOGUwYjk5NzEzODM4OWMzN2Y=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-21T13:57:13Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-21T13:57:13Z"}, "message": "only split the Fn* arguments in case of closures and function pointers", "tree": {"sha": "ddf1c2bbc00ee54f17aa5c89f49c7887c7be0279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddf1c2bbc00ee54f17aa5c89f49c7887c7be0279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21e924975d8236572d3abcf8e0b997138389c37f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX4pG5AAoJEFbW7qD8Z6xGXVwP/39m04YxuAlR9o5Izzkj9SPE\nITYbbf144AYup88kU7+xrEJ2OFyTaA/82+qGXeeFBQks4NRzsO5lsAygTsuioW04\nqA7XcxsAz1J/JbG67YtNPAANDck0JIzlgwiV6iwY3DjqMroa51muTf7Mlqy3C0S0\nSq4kdwS5Qk0fz50IoOrhISrOO1hVgUx8yUkmRkg88TyStKihMbpEkmQlZL/IVWJJ\nGsGDvuM8yHZ0ejfB/4WwZsb5O9UDv6utv67PaEvrrvpf5rDkWZUJjOZhQWzrqSef\n6G1eQq3WGeLE7h/7GE3n7HwuLPhUkVaNCQHT9UHwOHEwZcg/5SHgqzYLkX/SmMja\nYL2MtUpT57HBtR1TkStO2A+L1JHvLQ+hpTUpsZQ30OfcznkYWmpWotF8+e0WmsC0\nt6vUVRKHI7SNzS69vy4YWizs6clIw6RprWMPvvqiZUh8kZnRut4XSchk85q/BeXH\nlXxw4DV8BBFjN6lQJxwXWaSP5CMUf7OGHVEk3qsopNjoFj7Fs8WSqPnNNxxiY7HY\n9K9b3SO3D/L+tQEGebWisePRbA+6cPdDk22XH4mulXtcOC/RN8/+3wDMFbP8RO2W\nxSJq/ZhUIoQwQTB91BC8w99xZF+jtonYk41u0WCLtzXJ6kuk+GC6HwZRZg1w8c5S\nFUtShV8rpYVAdsjH0sAK\n=LOoz\n-----END PGP SIGNATURE-----", "payload": "tree ddf1c2bbc00ee54f17aa5c89f49c7887c7be0279\nparent 07b8500505e31d8a5e8afe56bcee5d2827697c79\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474466233 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474466233 +0200\n\nonly split the Fn* arguments in case of closures and function pointers"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21e924975d8236572d3abcf8e0b997138389c37f", "html_url": "https://github.com/rust-lang/rust/commit/21e924975d8236572d3abcf8e0b997138389c37f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21e924975d8236572d3abcf8e0b997138389c37f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07b8500505e31d8a5e8afe56bcee5d2827697c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/07b8500505e31d8a5e8afe56bcee5d2827697c79", "html_url": "https://github.com/rust-lang/rust/commit/07b8500505e31d8a5e8afe56bcee5d2827697c79"}], "stats": {"total": 87, "additions": 65, "deletions": 22}, "files": [{"sha": "8f0375936ccfafadbe7cc381c43752dff72e6b49", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/21e924975d8236572d3abcf8e0b997138389c37f/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e924975d8236572d3abcf8e0b997138389c37f/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=21e924975d8236572d3abcf8e0b997138389c37f", "patch": "@@ -178,9 +178,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Abi::Rust | Abi::RustCall => {\n-                // TODO(solson): Adjust the first argument when calling a Fn or\n-                // FnMut closure via FnOnce::call_once.\n-\n                 let mut arg_srcs = Vec::new();\n                 for arg in args {\n                     let src = self.eval_operand_to_ptr(arg)?;\n@@ -196,25 +193,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         (def_id, substs)\n                     };\n \n-                if fn_ty.abi == Abi::RustCall {\n-                    if let Some((last, last_ty)) = arg_srcs.pop() {\n-                        let last_layout = self.type_layout(last_ty);\n-                        match (&last_ty.sty, last_layout) {\n-                            (&ty::TyTuple(fields),\n-                             &Layout::Univariant { ref variant, .. }) => {\n-                                let offsets = iter::once(0)\n-                                    .chain(variant.offset_after_field.iter()\n-                                        .map(|s| s.bytes()));\n-                                for (offset, ty) in offsets.zip(fields) {\n-                                    let src = last.offset(offset as isize);\n-                                    arg_srcs.push((src, ty));\n-                                }\n-                            }\n-                            ty => bug!(\"expected tuple as last argument in function with 'rust-call' ABI, got {:?}\", ty),\n-                        }\n-                    }\n-                }\n-\n                 let mir = self.load_mir(resolved_def_id);\n                 let (return_ptr, return_to_block) = match destination {\n                     Some((ptr, block)) => (Some(ptr), StackPopCleanup::Goto(block)),\n@@ -366,6 +344,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         })\n     }\n \n+    fn unpack_fn_args(&self, args: &mut Vec<(Pointer, Ty<'tcx>)>) {\n+        if let Some((last, last_ty)) = args.pop() {\n+            let last_layout = self.type_layout(last_ty);\n+            match (&last_ty.sty, last_layout) {\n+                (&ty::TyTuple(fields),\n+                 &Layout::Univariant { ref variant, .. }) => {\n+                    let offsets = iter::once(0)\n+                        .chain(variant.offset_after_field.iter()\n+                            .map(|s| s.bytes()));\n+                    for (offset, ty) in offsets.zip(fields) {\n+                        let src = last.offset(offset as isize);\n+                        args.push((src, ty));\n+                    }\n+                }\n+                ty => bug!(\"expected tuple as last argument in function with 'rust-call' ABI, got {:?}\", ty),\n+            }\n+        }\n+    }\n+\n     /// Trait method, which has to be resolved to an impl method.\n     fn trait_method(\n         &mut self,\n@@ -395,6 +392,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     .expect(\"The substitutions should have no type parameters remaining after passing through fulfill_obligation\");\n                 let closure_kind = self.tcx.closure_kind(vtable_closure.closure_def_id);\n                 trace!(\"closures {:?}, {:?}\", closure_kind, trait_closure_kind);\n+                self.unpack_fn_args(args);\n                 match (closure_kind, trait_closure_kind) {\n                     (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n                     (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n@@ -426,6 +424,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             traits::VtableFnPointer(vtable_fn_ptr) => {\n                 if let ty::TyFnDef(did, ref substs, _) = vtable_fn_ptr.fn_ty.sty {\n                     args.remove(0);\n+                    self.unpack_fn_args(args);\n                     Ok((did, substs))\n                 } else {\n                     bug!(\"VtableFnPointer did not contain a concrete function: {:?}\", vtable_fn_ptr)"}, {"sha": "4f597d4a2e94ffca531f97d332668ddb32948e21", "filename": "tests/run-pass/function_pointers.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/21e924975d8236572d3abcf8e0b997138389c37f/tests%2Frun-pass%2Ffunction_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e924975d8236572d3abcf8e0b997138389c37f/tests%2Frun-pass%2Ffunction_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_pointers.rs?ref=21e924975d8236572d3abcf8e0b997138389c37f", "patch": "@@ -6,6 +6,10 @@ fn g(i: i32) -> i32 {\n     i*42\n }\n \n+fn h(i: i32, j: i32) -> i32 {\n+    j * i * 7\n+}\n+\n fn return_fn_ptr() -> fn() -> i32 {\n     f\n }\n@@ -22,6 +26,10 @@ fn indirect2<F: Fn(i32) -> i32>(f: F) -> i32 { f(10) }\n fn indirect_mut2<F: FnMut(i32) -> i32>(mut f: F) -> i32 { f(10) }\n fn indirect_once2<F: FnOnce(i32) -> i32>(f: F) -> i32 { f(10) }\n \n+fn indirect3<F: Fn(i32, i32) -> i32>(f: F) -> i32 { f(10, 3) }\n+fn indirect_mut3<F: FnMut(i32, i32) -> i32>(mut f: F) -> i32 { f(10, 3) }\n+fn indirect_once3<F: FnOnce(i32, i32) -> i32>(f: F) -> i32 { f(10, 3) }\n+\n fn main() {\n     assert_eq!(call_fn_ptr(), 42);\n     assert_eq!(indirect(f), 42);\n@@ -30,6 +38,9 @@ fn main() {\n     assert_eq!(indirect2(g), 420);\n     assert_eq!(indirect_mut2(g), 420);\n     assert_eq!(indirect_once2(g), 420);\n+    assert_eq!(indirect3(h), 210);\n+    assert_eq!(indirect_mut3(h), 210);\n+    assert_eq!(indirect_once3(h), 210);\n     assert!(return_fn_ptr() == f);\n     assert!(return_fn_ptr() as unsafe fn() -> i32 == f as fn() -> i32 as unsafe fn() -> i32);\n }"}, {"sha": "1eeda12ca06f8101abf9e0182c5c0baa46582e96", "filename": "tests/run-pass/overloaded-calls-simple.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/21e924975d8236572d3abcf8e0b997138389c37f/tests%2Frun-pass%2Foverloaded-calls-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e924975d8236572d3abcf8e0b997138389c37f/tests%2Frun-pass%2Foverloaded-calls-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Foverloaded-calls-simple.rs?ref=21e924975d8236572d3abcf8e0b997138389c37f", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(lang_items, unboxed_closures, fn_traits)]\n+\n+struct S3 {\n+    x: i32,\n+    y: i32,\n+}\n+\n+impl FnOnce<(i32,i32)> for S3 {\n+    type Output = i32;\n+    extern \"rust-call\" fn call_once(self, (z,zz): (i32,i32)) -> i32 {\n+        self.x * self.y * z * zz\n+    }\n+}\n+\n+fn main() {\n+    let s = S3 {\n+        x: 3,\n+        y: 3,\n+    };\n+    let ans = s(3, 1);\n+    assert_eq!(ans, 27);\n+}"}]}