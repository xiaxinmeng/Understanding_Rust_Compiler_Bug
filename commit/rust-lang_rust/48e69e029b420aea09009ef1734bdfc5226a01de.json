{"sha": "48e69e029b420aea09009ef1734bdfc5226a01de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZTY5ZTAyOWI0MjBhZWEwOTAwOWVmMTczNGJkZmM1MjI2YTAxZGU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-09-18T19:17:49Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-09-18T19:17:49Z"}, "message": "save-analysis: better 'parent' info\n\nIn particular, this fixes some bugs displaying doc URLs for method calls.", "tree": {"sha": "2029fc40ba6a8a0e77125d1baca05d82c74aaf8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2029fc40ba6a8a0e77125d1baca05d82c74aaf8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48e69e029b420aea09009ef1734bdfc5226a01de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48e69e029b420aea09009ef1734bdfc5226a01de", "html_url": "https://github.com/rust-lang/rust/commit/48e69e029b420aea09009ef1734bdfc5226a01de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48e69e029b420aea09009ef1734bdfc5226a01de/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d15eaca99fe992f39e0f64291d4046622b3467", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d15eaca99fe992f39e0f64291d4046622b3467", "html_url": "https://github.com/rust-lang/rust/commit/22d15eaca99fe992f39e0f64291d4046622b3467"}], "stats": {"total": 112, "additions": 69, "deletions": 43}, "files": [{"sha": "4e03ea4218f0a67d1b150aac218e1cc5fd3c60fd", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48e69e029b420aea09009ef1734bdfc5226a01de/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e69e029b420aea09009ef1734bdfc5226a01de/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=48e69e029b420aea09009ef1734bdfc5226a01de", "patch": "@@ -167,7 +167,7 @@ pub struct FunctionData {\n     pub scope: NodeId,\n     pub value: String,\n     pub visibility: Visibility,\n-    pub parent: Option<NodeId>,\n+    pub parent: Option<DefId>,\n     pub docs: String,\n }\n \n@@ -250,6 +250,7 @@ pub struct MethodData {\n     pub scope: NodeId,\n     pub value: String,\n     pub decl_id: Option<DefId>,\n+    pub parent: Option<DefId>,\n     pub visibility: Visibility,\n     pub docs: String,\n }\n@@ -300,7 +301,7 @@ pub struct StructVariantData {\n     pub type_value: String,\n     pub value: String,\n     pub scope: NodeId,\n-    pub parent: Option<NodeId>,\n+    pub parent: Option<DefId>,\n     pub docs: String,\n }\n \n@@ -326,7 +327,7 @@ pub struct TupleVariantData {\n     pub type_value: String,\n     pub value: String,\n     pub scope: NodeId,\n-    pub parent: Option<NodeId>,\n+    pub parent: Option<DefId>,\n     pub docs: String,\n }\n \n@@ -339,7 +340,7 @@ pub struct TypeDefData {\n     pub qualname: String,\n     pub value: String,\n     pub visibility: Visibility,\n-    pub parent: Option<NodeId>,\n+    pub parent: Option<DefId>,\n     pub docs: String,\n }\n \n@@ -380,7 +381,7 @@ pub struct VariableData {\n     pub qualname: String,\n     pub span: Span,\n     pub scope: NodeId,\n-    pub parent: Option<NodeId>,\n+    pub parent: Option<DefId>,\n     pub value: String,\n     pub type_value: String,\n     pub visibility: Visibility,"}, {"sha": "8820f3616d50d6846e287a8b36977601dbe82336", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 47, "deletions": 25, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/48e69e029b420aea09009ef1734bdfc5226a01de/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e69e029b420aea09009ef1734bdfc5226a01de/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=48e69e029b420aea09009ef1734bdfc5226a01de", "patch": "@@ -27,9 +27,10 @@\n //! is used for recording the output in a format-agnostic way (see CsvDumper\n //! for an example).\n \n+use rustc::hir;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::map::Node;\n+use rustc::hir::map::{Node, NodeItem};\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt, ImplOrTraitItem, ImplOrTraitItemContainer};\n \n@@ -47,7 +48,7 @@ use syntax_pos::*;\n use super::{escape, generated_code, SaveContext, PathCollector, docs_for_attrs};\n use super::data::*;\n use super::dump::Dump;\n-use super::external_data::Lower;\n+use super::external_data::{Lower, make_def_id};\n use super::span_utils::SpanUtils;\n use super::recorder;\n \n@@ -271,11 +272,13 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n \n     // looks up anything, not just a type\n     fn lookup_type_ref(&self, ref_id: NodeId) -> Option<DefId> {\n-        match self.tcx.expect_def(ref_id) {\n-            Def::PrimTy(..) => None,\n-            Def::SelfTy(..) => None,\n-            def => Some(def.def_id()),\n-        }\n+        self.tcx.expect_def_or_none(ref_id).and_then(|def| {\n+            match def {\n+                Def::PrimTy(..) => None,\n+                Def::SelfTy(..) => None,\n+                def => Some(def.def_id()),\n+            }\n+        })\n     }\n \n     fn process_def_kind(&mut self,\n@@ -399,20 +402,36 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             if !self.span.filter_generated(Some(method_data.span), span) {\n                 let container =\n                     self.tcx.impl_or_trait_item(self.tcx.map.local_def_id(id)).container();\n-                let decl_id = if let ImplOrTraitItemContainer::ImplContainer(id) = container {\n-                    self.tcx.trait_id_of_impl(id).and_then(|id| {\n-                        for item in &**self.tcx.trait_items(id) {\n-                            if let &ImplOrTraitItem::MethodTraitItem(ref m) = item {\n-                                if m.name == name {\n-                                    return Some(m.def_id);\n+                let mut trait_id;\n+                let mut decl_id = None;\n+                match container {\n+                    ImplOrTraitItemContainer::ImplContainer(id) => {\n+                        trait_id = self.tcx.trait_id_of_impl(id);\n+\n+                        match trait_id {\n+                            Some(id) => {\n+                                for item in &**self.tcx.trait_items(id) {\n+                                    if let &ImplOrTraitItem::MethodTraitItem(ref m) = item {\n+                                        if m.name == name {\n+                                            decl_id = Some(m.def_id);\n+                                            break;\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            None => {\n+                                if let Some(NodeItem(item)) = self.tcx.map.get_if_local(id) {\n+                                    if let hir::ItemImpl(_, _, _, _, ref ty, _) = item.node {\n+                                        trait_id = self.lookup_type_ref(ty.id);\n+                                    }\n                                 }\n                             }\n                         }\n-                        None\n-                    })\n-                } else {\n-                    None\n-                };\n+                    }\n+                    ImplOrTraitItemContainer::TraitContainer(id) => {\n+                        trait_id = Some(id);\n+                    }\n+                }\n \n                 self.dumper.method(MethodData {\n                     id: method_data.id,\n@@ -422,6 +441,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     qualname: method_data.qualname.clone(),\n                     value: sig_str,\n                     decl_id: decl_id,\n+                    parent: trait_id,\n                     visibility: vis,\n                     docs: docs_for_attrs(attrs),\n                 }.lower(self.tcx));\n@@ -544,7 +564,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                            span: Span,\n                            typ: &ast::Ty,\n                            expr: &ast::Expr,\n-                           parent_id: NodeId,\n+                           parent_id: DefId,\n                            vis: Visibility,\n                            attrs: &[Attribute]) {\n         let qualname = format!(\"::{}\", self.tcx.node_path_str(id));\n@@ -659,7 +679,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             type_value: enum_data.qualname.clone(),\n                             value: val,\n                             scope: enum_data.scope,\n-                            parent: Some(item.id),\n+                            parent: Some(make_def_id(item.id, &self.tcx.map)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n                         }.lower(self.tcx));\n                     }\n@@ -684,7 +704,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             type_value: enum_data.qualname.clone(),\n                             value: val,\n                             scope: enum_data.scope,\n-                            parent: Some(item.id),\n+                            parent: Some(make_def_id(item.id, &self.tcx.map)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n                         }.lower(self.tcx));\n                     }\n@@ -738,7 +758,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         }\n         self.process_generic_params(type_parameters, item.span, \"\", item.id);\n         for impl_item in impl_items {\n-            self.process_impl_item(impl_item, item.id);\n+            let map = &self.tcx.map;\n+            self.process_impl_item(impl_item, make_def_id(item.id, map));\n         }\n     }\n \n@@ -809,7 +830,8 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         // walk generics and methods\n         self.process_generic_params(generics, item.span, &qualname, item.id);\n         for method in methods {\n-            self.process_trait_item(method, item.id)\n+            let map = &self.tcx.map;\n+            self.process_trait_item(method, make_def_id(item.id, map))\n         }\n     }\n \n@@ -1076,7 +1098,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         }\n     }\n \n-    fn process_trait_item(&mut self, trait_item: &ast::TraitItem, trait_id: NodeId) {\n+    fn process_trait_item(&mut self, trait_item: &ast::TraitItem, trait_id: DefId) {\n         self.process_macro_use(trait_item.span, trait_item.id);\n         match trait_item.node {\n             ast::TraitItemKind::Const(ref ty, Some(ref expr)) => {\n@@ -1104,7 +1126,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n         }\n     }\n \n-    fn process_impl_item(&mut self, impl_item: &ast::ImplItem, impl_id: NodeId) {\n+    fn process_impl_item(&mut self, impl_item: &ast::ImplItem, impl_id: DefId) {\n         self.process_macro_use(impl_item.span, impl_item.id);\n         match impl_item.node {\n             ast::ImplItemKind::Const(ref ty, ref expr) => {"}, {"sha": "32280a5c9262a7176ac67ae9272fa2145af47685", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/48e69e029b420aea09009ef1734bdfc5226a01de/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e69e029b420aea09009ef1734bdfc5226a01de/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=48e69e029b420aea09009ef1734bdfc5226a01de", "patch": "@@ -23,7 +23,7 @@ pub trait Lower {\n     fn lower(self, tcx: TyCtxt) -> Self::Target;\n }\n \n-fn make_def_id(id: NodeId, map: &Map) -> DefId {\n+pub fn make_def_id(id: NodeId, map: &Map) -> DefId {\n     map.opt_local_def_id(id).unwrap_or(null_def_id())\n }\n \n@@ -188,7 +188,7 @@ impl Lower for data::FunctionData {\n             scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n             visibility: self.visibility,\n-            parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n+            parent: self.parent,\n             docs: self.docs,\n         }\n     }\n@@ -353,7 +353,7 @@ impl Lower for data::MethodData {\n             value: self.value,\n             decl_id: self.decl_id,\n             visibility: self.visibility,\n-            parent: Some(make_def_id(self.scope, &tcx.map)),\n+            parent: self.parent,\n             docs: self.docs,\n         }\n     }\n@@ -471,7 +471,7 @@ impl Lower for data::StructVariantData {\n             type_value: self.type_value,\n             value: self.value,\n             scope: make_def_id(self.scope, &tcx.map),\n-            parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n+            parent: self.parent,\n             docs: self.docs,\n         }\n     }\n@@ -533,7 +533,7 @@ impl Lower for data::TupleVariantData {\n             type_value: self.type_value,\n             value: self.value,\n             scope: make_def_id(self.scope, &tcx.map),\n-            parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n+            parent: self.parent,\n             docs: self.docs,\n         }\n     }\n@@ -563,7 +563,7 @@ impl Lower for data::TypeDefData {\n             qualname: self.qualname,\n             value: self.value,\n             visibility: self.visibility,\n-            parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n+            parent: self.parent,\n             docs: self.docs,\n         }\n     }\n@@ -668,7 +668,7 @@ impl Lower for data::VariableData {\n             scope: make_def_id(self.scope, &tcx.map),\n             value: self.value,\n             type_value: self.type_value,\n-            parent: self.parent.map(|id| make_def_id(id, &tcx.map)),\n+            parent: self.parent,\n             visibility: self.visibility,\n             docs: self.docs,\n         }"}, {"sha": "51274068b26ca39b371c275fd39f6d6230995b30", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/48e69e029b420aea09009ef1734bdfc5226a01de/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48e69e029b420aea09009ef1734bdfc5226a01de/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=48e69e029b420aea09009ef1734bdfc5226a01de", "patch": "@@ -64,6 +64,7 @@ pub use self::csv_dumper::CsvDumper;\n pub use self::json_api_dumper::JsonApiDumper;\n pub use self::json_dumper::JsonDumper;\n pub use self::data::*;\n+pub use self::external_data::make_def_id;\n pub use self::dump::Dump;\n pub use self::dump_visitor::DumpVisitor;\n use self::span_utils::SpanUtils;\n@@ -295,7 +296,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 qualname: qualname,\n                 span: sub_span.unwrap(),\n                 scope: scope,\n-                parent: Some(scope),\n+                parent: Some(make_def_id(scope, &self.tcx.map)),\n                 value: \"\".to_owned(),\n                 type_value: typ,\n                 visibility: From::from(&field.vis),\n@@ -312,20 +313,22 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                            name: ast::Name, span: Span) -> Option<FunctionData> {\n         // The qualname for a method is the trait name or name of the struct in an impl in\n         // which the method is declared in, followed by the method's name.\n-        let (qualname, vis, docs) = match self.tcx.impl_of_method(self.tcx.map.local_def_id(id)) {\n+        let (qualname, parent_scope, vis, docs) =\n+          match self.tcx.impl_of_method(self.tcx.map.local_def_id(id)) {\n             Some(impl_id) => match self.tcx.map.get_if_local(impl_id) {\n                 Some(NodeItem(item)) => {\n                     match item.node {\n                         hir::ItemImpl(.., ref ty, _) => {\n                             let mut result = String::from(\"<\");\n                             result.push_str(&rustc::hir::print::ty_to_string(&ty));\n \n-                            if let Some(def_id) = self.tcx.trait_id_of_impl(impl_id) {\n+                            let trait_id = self.tcx.trait_id_of_impl(impl_id);\n+                            if let Some(def_id) = trait_id {\n                                 result.push_str(\" as \");\n                                 result.push_str(&self.tcx.item_path_str(def_id));\n                             }\n                             result.push_str(\">\");\n-                            (result, From::from(&item.vis), docs_for_attrs(&item.attrs))\n+                            (result, trait_id, From::from(&item.vis), docs_for_attrs(&item.attrs))\n                         }\n                         _ => {\n                             span_bug!(span,\n@@ -348,6 +351,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     match self.tcx.map.get_if_local(def_id) {\n                         Some(NodeItem(item)) => {\n                             (format!(\"::{}\", self.tcx.item_path_str(def_id)),\n+                             Some(def_id),\n                              From::from(&item.vis),\n                              docs_for_attrs(&item.attrs))\n                         }\n@@ -381,7 +385,6 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n         let sub_span = self.span_utils.sub_span_after_keyword(span, keywords::Fn);\n         filter!(self.span_utils, sub_span, span, None);\n-        let parent_scope = self.enclosing_scope(id);\n         Some(FunctionData {\n             id: id,\n             name: name.to_string(),\n@@ -392,7 +395,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             // FIXME you get better data here by using the visitor.\n             value: String::new(),\n             visibility: vis,\n-            parent: Some(parent_scope),\n+            parent: parent_scope,\n             docs: docs,\n         })\n     }"}]}