{"sha": "6717727fcbc8e07f471b4a6d8fecd600230a5616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MTc3MjdmY2JjOGUwN2Y0NzFiNGE2ZDhmZWNkNjAwMjMwYTU2MTY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-02-04T18:12:46Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-02-06T20:10:43Z"}, "message": "Lower constant patterns with ascribed types.\n\nThis commit fixes a bug introduced by #55937 which started checking user\ntype annotations for associated type patterns. Where lowering a\nassociated constant expression would previously return a\n`PatternKind::Constant`, it now returns a `PatternKind::AscribeUserType`\nwith a `PatternKind::Constant` inside, this commit unwraps that to\naccess the constant pattern inside and behaves as before.", "tree": {"sha": "74a4860ffa0319a181aaf5de2d148f2cb5d207a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a4860ffa0319a181aaf5de2d148f2cb5d207a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6717727fcbc8e07f471b4a6d8fecd600230a5616", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlxbP0MACgkQAXYLT59T\n8VR7cQ//fbIgv7xF7gtNsH/ezhdSluPuvbB5YECGVXXwLiuV6r4xaWUtrS84ADxT\nJpzj8WxqS4Hkq84CdZs1h66wn+utIT8eebYKshQBON+mhfDeFE/FhVbEAcuMVgga\n4BlznpxVUCRt4n8JF70wxn5Ekn4Ll+tos1o55g2jeKMRnO6uoPzVrwViD3kMt3ir\nzFi125t01IFxP4VgneAC6gfxAs7qj9jq9dvPOgReI9+tZzO7Maq6bywMUdz+DQMi\nqOQcCXP+EMFTOGUiH+S01GclSSb1RUJN1tNfnQ7kImC8HmpnXQMIp3mn68mSkWD9\nrNdnzzQFgz21ep4pDV5I1ysMVxgIpErrNAV5u9M/GRWfDUps1Q7mqoKcXNXUsjxT\nU9AH4t+oKRu1FQ8pJiQVG6RhO5L3JIw2jSVXNyaIsubT8UX9ItPYdEbqq6nIXeqW\nVrsf5glg0sTjMU2Mg7JRjJPGb6HUfnQtaDCEpApmjXUfTws1wDDMhZWuwWOK+/W1\nc+zJBPEAWygJR8fBy05JSiT4k1lihq5LbDvemQd7AZNzA2p8XI6WUVuth2/YPZcH\nN9Q2gt5U8JLAiFlpmT7JudlVQKHFYjnspB2Vg3TSS/4mIizVzlr3aaEBq7F/pVNP\nsDlKMUrNd2rQqMDmZwDWUH9zP7yGGMQHEjYRbnJqIrC2sl/li20=\n=+YHY\n-----END PGP SIGNATURE-----", "payload": "tree 74a4860ffa0319a181aaf5de2d148f2cb5d207a5\nparent 8ae730a442cc8af6a487a137ae9ba78f89edbba6\nauthor David Wood <david@davidtw.co> 1549303966 +0100\ncommitter David Wood <david@davidtw.co> 1549483843 +0100\n\nLower constant patterns with ascribed types.\n\nThis commit fixes a bug introduced by #55937 which started checking user\ntype annotations for associated type patterns. Where lowering a\nassociated constant expression would previously return a\n`PatternKind::Constant`, it now returns a `PatternKind::AscribeUserType`\nwith a `PatternKind::Constant` inside, this commit unwraps that to\naccess the constant pattern inside and behaves as before.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6717727fcbc8e07f471b4a6d8fecd600230a5616", "html_url": "https://github.com/rust-lang/rust/commit/6717727fcbc8e07f471b4a6d8fecd600230a5616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6717727fcbc8e07f471b4a6d8fecd600230a5616/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae730a442cc8af6a487a137ae9ba78f89edbba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae730a442cc8af6a487a137ae9ba78f89edbba6", "html_url": "https://github.com/rust-lang/rust/commit/8ae730a442cc8af6a487a137ae9ba78f89edbba6"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "eacb11fc1ac07d7709b4717f9a12c65ed92db8ce", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6717727fcbc8e07f471b4a6d8fecd600230a5616/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6717727fcbc8e07f471b4a6d8fecd600230a5616/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=6717727fcbc8e07f471b4a6d8fecd600230a5616", "patch": "@@ -167,6 +167,17 @@ pub enum PatternKind<'tcx> {\n     },\n }\n \n+impl<'tcx> PatternKind<'tcx> {\n+    /// If this is a `PatternKind::AscribeUserType` then return the subpattern kind, otherwise\n+    /// return this pattern kind.\n+    fn with_user_type_ascription_subpattern(self) -> Self {\n+        match self {\n+            PatternKind::AscribeUserType { subpattern: Pattern { box kind, ..  }, ..  } => kind,\n+            kind => kind,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq)]\n pub struct PatternRange<'tcx> {\n     pub lo: ty::Const<'tcx>,\n@@ -403,9 +414,15 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             PatKind::Lit(ref value) => self.lower_lit(value),\n \n             PatKind::Range(ref lo_expr, ref hi_expr, end) => {\n-                match (self.lower_lit(lo_expr), self.lower_lit(hi_expr)) {\n-                    (PatternKind::Constant { value: lo },\n-                     PatternKind::Constant { value: hi }) => {\n+                match (\n+                    // Look for `PatternKind::Constant` patterns inside of any\n+                    // `PatternKind::AscribeUserType` patterns. Type ascriptions can be safely\n+                    // ignored for the purposes of lowering a range correctly - these are checked\n+                    // elsewhere for well-formedness.\n+                    self.lower_lit(lo_expr).with_user_type_ascription_subpattern(),\n+                    self.lower_lit(hi_expr).with_user_type_ascription_subpattern(),\n+                ) {\n+                    (PatternKind::Constant { value: lo }, PatternKind::Constant { value: hi }) => {\n                         use std::cmp::Ordering;\n                         let cmp = compare_const_vals(\n                             self.tcx,\n@@ -454,7 +471,15 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    _ => PatternKind::Wild\n+                    ref pats => {\n+                        self.tcx.sess.delay_span_bug(\n+                            pat.span,\n+                            &format!(\"found bad range pattern `{:?}` outside of error recovery\",\n+                                     pats),\n+                        );\n+\n+                        PatternKind::Wild\n+                    }\n                 }\n             }\n "}, {"sha": "0b52e46c45989b9ea2d76ce845edb3d1912b2471", "filename": "src/test/ui/nll/issue-57960.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6717727fcbc8e07f471b4a6d8fecd600230a5616/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6717727fcbc8e07f471b4a6d8fecd600230a5616/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57960.rs?ref=6717727fcbc8e07f471b4a6d8fecd600230a5616", "patch": "@@ -0,0 +1,39 @@\n+// run-pass\n+\n+#![allow(dead_code)]\n+\n+trait Range {\n+    const FIRST: u8;\n+    const LAST: u8;\n+}\n+\n+struct OneDigit;\n+impl Range for OneDigit {\n+    const FIRST: u8 = 0;\n+    const LAST: u8 = 9;\n+}\n+\n+struct TwoDigits;\n+impl Range for TwoDigits {\n+    const FIRST: u8 = 10;\n+    const LAST: u8 = 99;\n+}\n+\n+struct ThreeDigits;\n+impl Range for ThreeDigits {\n+    const FIRST: u8 = 100;\n+    const LAST: u8 = 255;\n+}\n+\n+fn digits(x: u8) -> u32 {\n+    match x {\n+        OneDigit::FIRST...OneDigit::LAST => 1,\n+        TwoDigits::FIRST...TwoDigits::LAST => 2,\n+        ThreeDigits::FIRST...ThreeDigits::LAST => 3,\n+        _ => unreachable!(),\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(digits(100), 3);\n+}"}]}