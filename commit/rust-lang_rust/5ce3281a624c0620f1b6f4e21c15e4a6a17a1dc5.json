{"sha": "5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZTMyODFhNjI0YzA2MjBmMWI2ZjRlMjFjMTVlNGE2YTE3YTFkYzU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-08T01:54:44Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-08T01:55:19Z"}, "message": "rustc: Parse variant structs; add a trivial test case", "tree": {"sha": "148f8334840c3005d551c1d0b5d83be953422945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148f8334840c3005d551c1d0b5d83be953422945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "html_url": "https://github.com/rust-lang/rust/commit/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c95feda3961efaffe4461d775b029f92a1744c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c95feda3961efaffe4461d775b029f92a1744c4", "html_url": "https://github.com/rust-lang/rust/commit/8c95feda3961efaffe4461d775b029f92a1744c4"}], "stats": {"total": 150, "additions": 116, "deletions": 34}, "files": [{"sha": "f1c5f63bd1d6a130d2049318cb11f0f1a4047c76", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -636,7 +636,7 @@ type variant_arg = {ty: @ty, id: node_id};\n #[auto_serialize]\n enum variant_kind {\n     tuple_variant_kind(~[variant_arg]),\n-    struct_variant_kind\n+    struct_variant_kind(@struct_def)\n }\n \n #[auto_serialize]"}, {"sha": "20cc04b2c79538d406cd26a197ee1c47c7833400", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -912,7 +912,7 @@ fn deser_enum(cx: ext_ctxt, tps: deser_tps_map, e_name: ast::ident,\n                     }\n                 };\n             }\n-            ast::struct_variant_kind =>\n+            ast::struct_variant_kind(*) =>\n                 fail ~\"struct variants unimplemented\"\n         }\n "}, {"sha": "2271361822227843068402171b07f21cf0ce770b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -549,8 +549,21 @@ fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n         tuple_variant_kind(variant_args) =>\n             kind = tuple_variant_kind(vec::map(variant_args,\n                                                fold_variant_arg)),\n-        struct_variant_kind =>\n-            kind = struct_variant_kind\n+        struct_variant_kind(struct_def) => {\n+            let dtor = do option::map(struct_def.dtor) |dtor| {\n+                let dtor_body = fld.fold_block(dtor.node.body);\n+                let dtor_id   = fld.new_id(dtor.node.id);\n+                {node: {body: dtor_body,\n+                        id: dtor_id with dtor.node}\n+                    with dtor}};\n+            kind = struct_variant_kind(@{\n+                traits: ~[],\n+                members: vec::map(struct_def.members,\n+                                  |x| fld.fold_class_item(x)),\n+                ctor: none,\n+                dtor: dtor\n+            })\n+        }\n     }\n \n     let fold_attribute = |x| fold_attribute_(x, fld);"}, {"sha": "6f19f27233161f25f619b7a536cafb44d1b804a4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 69, "deletions": 18, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -43,24 +43,21 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              match_nonterminal, match_seq, match_tok, method, mode, mt, mul,\n              mutability, neg, noreturn, not, pat, pat_box, pat_enum,\n              pat_ident, pat_lit, pat_range, pat_rec, pat_struct, pat_tup,\n-             pat_uniq,\n-             pat_wild, path, private, proto, proto_bare, proto_block,\n-             proto_box, proto_uniq, provided, public, pure_fn, purity,\n-             re_anon, re_named, region, rem, required, ret_style, return_val,\n-             self_ty, shl, shr, stmt, stmt_decl, stmt_expr, stmt_semi,\n-             subtract, sty_box, sty_by_ref, sty_region, sty_static,\n-             sty_uniq, sty_value,\n-             token_tree, trait_method, trait_ref, tt_delim, tt_seq, tt_tok,\n+             pat_uniq, pat_wild, path, private, proto, proto_bare,\n+             proto_block, proto_box, proto_uniq, provided, public, pure_fn,\n+             purity, re_anon, re_named, region, rem, required, ret_style,\n+             return_val, self_ty, shl, shr, stmt, stmt_decl, stmt_expr,\n+             stmt_semi, struct_variant_kind, subtract, sty_box, sty_by_ref,\n+             sty_region, sty_static, sty_uniq, sty_value, token_tree,\n+             trait_method, trait_ref, tt_delim, tt_seq, tt_tok,\n              tt_nonterminal, ty, ty_, ty_bot, ty_box, ty_field, ty_fn,\n              ty_infer, ty_mac, ty_method, ty_nil, ty_param, ty_param_bound,\n-             ty_path, ty_ptr,\n-             ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec,\n-             ty_fixed_length, tuple_variant_kind,\n-             unchecked_blk, uniq, unsafe_blk, unsafe_fn,\n-             variant, view_item, view_item_, view_item_export,\n-             view_item_import, view_item_use, view_path, view_path_glob,\n-             view_path_list, view_path_simple, visibility, vstore, vstore_box,\n-             vstore_fixed, vstore_slice, vstore_uniq};\n+             ty_path, ty_ptr, ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq,\n+             ty_vec, ty_fixed_length, tuple_variant_kind, unchecked_blk, uniq,\n+             unsafe_blk, unsafe_fn, variant, view_item, view_item_,\n+             view_item_export, view_item_import, view_item_use, view_path,\n+             view_path_glob, view_path_list, view_path_simple, visibility,\n+             vstore, vstore_box, vstore_fixed, vstore_slice, vstore_uniq};\n \n export file_type;\n export parser;\n@@ -2877,7 +2874,57 @@ class parser {\n             let vis = self.parse_visibility();\n             let ident = self.parse_value_ident();\n             let mut args = ~[], disr_expr = none;\n-            if self.token == token::LPAREN {\n+            let kind;\n+            if self.eat(token::LBRACE) {\n+                // Parse a struct variant.\n+                all_nullary = false;\n+                let path = self.ident_to_path_tys(ident, ty_params);\n+                let mut the_dtor: option<(blk, ~[attribute], codemap::span)> =\n+                    none;\n+                let mut ms: ~[@class_member] = ~[];\n+                while self.token != token::RBRACE {\n+                    match self.parse_class_item(path) {\n+                        ctor_decl(*) => {\n+                            self.span_fatal(copy self.span,\n+                                            ~\"deprecated explicit \\\n+                                              constructors are not allowed \\\n+                                              here\");\n+                        }\n+                        dtor_decl(blk, attrs, s) => {\n+                            match the_dtor {\n+                                some((_, _, s_first)) => {\n+                                    self.span_note(s, ~\"duplicate destructor \\\n+                                                        declaration\");\n+                                    self.span_fatal(copy s_first,\n+                                                    ~\"first destructor \\\n+                                                      declared here\");\n+                                }\n+                                none => {\n+                                    the_dtor = some((blk, attrs, s));\n+                                }\n+                            }\n+                        }\n+                        members(mms) =>\n+                            ms = vec::append(ms, mms)\n+                    }\n+                }\n+                self.bump();\n+                let mut actual_dtor = do option::map(the_dtor) |dtor| {\n+                    let (d_body, d_attrs, d_s) = dtor;\n+                    {node: {id: self.get_id(),\n+                            attrs: d_attrs,\n+                            self_id: self.get_id(),\n+                            body: d_body},\n+                     span: d_s}\n+                };\n+                \n+                kind = struct_variant_kind(@{\n+                    traits: ~[],\n+                    members: ms,\n+                    ctor: none,\n+                    dtor: actual_dtor\n+                });\n+            } else if self.token == token::LPAREN {\n                 all_nullary = false;\n                 let arg_tys = self.parse_unspanned_seq(\n                     token::LPAREN, token::RPAREN,\n@@ -2886,13 +2933,17 @@ class parser {\n                 for arg_tys.each |ty| {\n                     vec::push(args, {ty: ty, id: self.get_id()});\n                 }\n+                kind = tuple_variant_kind(args);\n             } else if self.eat(token::EQ) {\n                 have_disr = true;\n                 disr_expr = some(self.parse_expr());\n+                kind = tuple_variant_kind(args);\n+            } else {\n+                kind = tuple_variant_kind(~[]);\n             }\n \n             let vr = {name: ident, attrs: variant_attrs,\n-                      kind: tuple_variant_kind(args), id: self.get_id(),\n+                      kind: kind, id: self.get_id(),\n                       disr_expr: disr_expr, vis: vis};\n             vec::push(variants, spanned(vlo, self.last_span.hi, vr));\n "}, {"sha": "4b23fbf74a915347ff57fb9578ab7a2c321073d0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -694,9 +694,9 @@ fn print_tt(s: ps, tt: ast::token_tree) {\n }\n \n fn print_variant(s: ps, v: ast::variant) {\n-    word(s.s, *v.node.name);\n     match v.node.kind {\n         ast::tuple_variant_kind(args) => {\n+            word(s.s, *v.node.name);\n             if vec::len(args) > 0u {\n                 popen(s);\n                 fn print_variant_arg(s: ps, arg: ast::variant_arg) {\n@@ -706,7 +706,10 @@ fn print_variant(s: ps, v: ast::variant) {\n                 pclose(s);\n             }\n         }\n-        ast::struct_variant_kind => {}\n+        ast::struct_variant_kind(struct_def) => {\n+            head(s, ~\"\");\n+            print_struct(s, struct_def, ~[], v.node.name, v.span);\n+        }\n     }\n     match v.node.disr_expr {\n       some(d) => {"}, {"sha": "a47685dd42cb0e4731be007b6e1d8b6642a3f88b", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -140,9 +140,13 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n         v.visit_ty_params(tps, e, v);\n         for variants.each |vr| {\n             match vr.node.kind {\n-                tuple_variant_kind(variant_args) =>\n-                    for variant_args.each |va| { v.visit_ty(va.ty, e, v); },\n-                struct_variant_kind => {}\n+                tuple_variant_kind(variant_args) => {\n+                    for variant_args.each |va| { v.visit_ty(va.ty, e, v); }\n+                }\n+                struct_variant_kind(struct_def) => {\n+                    v.visit_struct_def(struct_def, vr.node.name, tps,\n+                                       vr.node.id, e, v);\n+                }\n             }\n         }\n       }"}, {"sha": "07d12a1286632b8c04946e7fe886106ee37d9a94", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -398,7 +398,7 @@ fn encode_enum_variant_info(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                     if args.len() > 0 && ty_params.len() == 0 => {\n                 encode_symbol(ecx, ebml_w, variant.node.id);\n             }\n-            ast::tuple_variant_kind(_) | ast::struct_variant_kind => {}\n+            ast::tuple_variant_kind(_) | ast::struct_variant_kind(_) => {}\n         }\n         encode_discriminant(ecx, ebml_w, variant.node.id);\n         if vi[i].disr_val != disr_val {"}, {"sha": "fd13d8fa1efbf276f2ddd01f1a75db48e3793072", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -2187,7 +2187,8 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n                                    this_tv.disr_val, (*tvs).len() == 1u,\n                                    psubsts, d);\n             }\n-            ast::struct_variant_kind => {}\n+            ast::struct_variant_kind(_) =>\n+                ccx.tcx.sess.bug(~\"can't monomorphize struct variants\")\n         }\n         d\n       }\n@@ -4894,9 +4895,13 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n                                            vi[i].disr_val, degen,\n                                            none, llfn);\n                     }\n-                    ast::tuple_variant_kind(_) | ast::struct_variant_kind => {\n+                    ast::tuple_variant_kind(_) => {\n                         // Nothing to do.\n                     }\n+                    ast::struct_variant_kind(struct_def) => {\n+                        trans_struct_def(ccx, struct_def, tps, path,\n+                                         variant.node.name, variant.node.id);\n+                    }\n                 }\n                 i += 1;\n             }\n@@ -5210,7 +5215,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                       }\n                     };\n                 }\n-                ast::struct_variant_kind => {\n+                ast::struct_variant_kind(_) => {\n                     fail ~\"struct unexpected in get_item_val\"\n                 }\n             }"}, {"sha": "ad7824fabe55b9e280e9c557a39cf08e94b51527", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -2868,7 +2868,7 @@ fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[variant_info] {\n                           disr_val: disr_val\n                          }\n                     }\n-                    ast::struct_variant_kind =>\n+                    ast::struct_variant_kind(_) =>\n                         fail ~\"struct variant kinds unimpl in enum_variants\"\n                 }\n             })"}, {"sha": "ec7e642c09da40327ad8a2cd9655ff91177e796d", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -2081,7 +2081,7 @@ fn check_enum_variants(ccx: @crate_ctxt,\n         match v.node.kind {\n             ast::tuple_variant_kind(args) if args.len() > 0u =>\n                 arg_tys = ty::ty_fn_args(ctor_ty).map(|a| a.ty),\n-            ast::tuple_variant_kind(_) | ast::struct_variant_kind =>\n+            ast::tuple_variant_kind(_) | ast::struct_variant_kind(_) =>\n                 arg_tys = ~[]\n         };\n         vec::push(variants, @{args: arg_tys, ctor_ty: ctor_ty,"}, {"sha": "64021f216c35edefce1a0975699e7405b19456dd", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -131,7 +131,7 @@ fn get_enum_variant_types(ccx: @crate_ctxt,\n                                             output: enum_ty,\n                                             ret_style: ast::return_val});\n             }\n-            ast::tuple_variant_kind(_) | ast::struct_variant_kind =>\n+            ast::tuple_variant_kind(_) | ast::struct_variant_kind(_) =>\n                 result_ty = enum_ty\n         };\n         let tpt = {bounds: ty_param_bounds(ccx, ty_params),"}, {"sha": "c8c6a88ddf203f6194bb24e5864bb3f72725ad0c", "filename": "src/test/run-pass/variant-structs-trivial.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs?ref=5ce3281a624c0620f1b6f4e21c15e4a6a17a1dc5", "patch": "@@ -0,0 +1,6 @@\n+enum Foo {\n+    Bar { x: int; },\n+    Baz { y: int; }\n+}\n+\n+fn main() { }"}]}