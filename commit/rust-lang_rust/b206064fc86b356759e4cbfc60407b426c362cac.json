{"sha": "b206064fc86b356759e4cbfc60407b426c362cac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMDYwNjRmYzg2YjM1Njc1OWU0Y2JmYzYwNDA3YjQyNmMzNjJjYWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-01-08T22:00:57Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-01-09T00:07:14Z"}, "message": "Teach diagnostics to correct margin on multiline messages\n\nMake any diagnostic line to have the correct margin to align with the\nfirst line:\n\n```\nerror: message\n --> file.rs:3:20\n  |\n3 |     <CODE>\n  |      ^^^^\n  |\n  = note: this is a multiline\n          note with a correct\n          margin\n  = note: this is a single line note\n  = help: here are some functions which might fulfill your needs:\n          - .len()\n          - .foo()\n          - .bar()\n  = suggestion: this is a multiline\n                suggestion with a\n                correct margin\n```", "tree": {"sha": "c77cbd402fec8ae5e7d45717516a48a12afefa29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c77cbd402fec8ae5e7d45717516a48a12afefa29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b206064fc86b356759e4cbfc60407b426c362cac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b206064fc86b356759e4cbfc60407b426c362cac", "html_url": "https://github.com/rust-lang/rust/commit/b206064fc86b356759e4cbfc60407b426c362cac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b206064fc86b356759e4cbfc60407b426c362cac/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f65a907ef9e21a350118d2efa323ebf49c3ec1cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f65a907ef9e21a350118d2efa323ebf49c3ec1cf", "html_url": "https://github.com/rust-lang/rust/commit/f65a907ef9e21a350118d2efa323ebf49c3ec1cf"}], "stats": {"total": 97, "additions": 28, "deletions": 69}, "files": [{"sha": "730ca8f9e2e4474e97735ffd13ad6a553f51183c", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b206064fc86b356759e4cbfc60407b426c362cac/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b206064fc86b356759e4cbfc60407b426c362cac/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=b206064fc86b356759e4cbfc60407b426c362cac", "patch": "@@ -32,7 +32,6 @@ pub struct SubDiagnostic {\n     pub message: String,\n     pub span: MultiSpan,\n     pub render_span: Option<RenderSpan>,\n-    pub list: Vec<String>,\n }\n \n impl Diagnostic {\n@@ -133,11 +132,6 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn help_with_list(&mut self , msg: &str, list: Vec<String>) -> &mut Self {\n-        self.sub_with_list(Level::Help, msg, MultiSpan::new(), None, list);\n-        self\n-    }\n-\n     pub fn span_help<S: Into<MultiSpan>>(&mut self,\n                                          sp: S,\n                                          msg: &str)\n@@ -197,23 +191,11 @@ impl Diagnostic {\n            message: &str,\n            span: MultiSpan,\n            render_span: Option<RenderSpan>) {\n-        self.sub_with_list(level, message, span, render_span, vec![]);\n-    }\n-\n-    /// Convenience function for internal use, clients should use one of the\n-    /// public methods above.\n-    fn sub_with_list(&mut self,\n-           level: Level,\n-           message: &str,\n-           span: MultiSpan,\n-           render_span: Option<RenderSpan>,\n-           list: Vec<String>) {\n         let sub = SubDiagnostic {\n             level: level,\n             message: message.to_owned(),\n             span: span,\n             render_span: render_span,\n-            list: list,\n         };\n         self.children.push(sub);\n     }"}, {"sha": "7dfea6b8951b05f2aebd649e338124e57af9fbf6", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b206064fc86b356759e4cbfc60407b426c362cac/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b206064fc86b356759e4cbfc60407b426c362cac/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=b206064fc86b356759e4cbfc60407b426c362cac", "patch": "@@ -135,7 +135,6 @@ impl<'a> DiagnosticBuilder<'a> {\n     forward!(pub fn warn(&mut self, msg: &str) -> &mut Self);\n     forward!(pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self);\n     forward!(pub fn help(&mut self , msg: &str) -> &mut Self);\n-    forward!(pub fn help_with_list(&mut self , msg: &str, list: Vec<String>) -> &mut Self);\n     forward!(pub fn span_help<S: Into<MultiSpan>>(&mut self,\n                                                   sp: S,\n                                                   msg: &str)"}, {"sha": "dbef287f11337ff43ada1a52c62b4e4b236e2120", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 24, "deletions": 47, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/b206064fc86b356759e4cbfc60407b426c362cac/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b206064fc86b356759e4cbfc60407b426c362cac/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=b206064fc86b356759e4cbfc60407b426c362cac", "patch": "@@ -699,11 +699,25 @@ impl EmitterWriter {\n                     .to_string(),\n                 span: MultiSpan::new(),\n                 render_span: None,\n-                list: vec![],\n             });\n         }\n     }\n \n+    fn msg_with_padding(&self, msg: &str, padding: usize) -> String {\n+        let padding = (0..padding)\n+            .map(|_| \" \")\n+            .collect::<String>();\n+        msg.split('\\n').enumerate().fold(\"\".to_owned(), |mut acc, x| {\n+            if x.0 != 0 {\n+                acc.push_str(\"\\n\");\n+                // Align every line with first one.\n+                acc.push_str(&padding);\n+            }\n+            acc.push_str(&x.1);\n+            acc\n+        })\n+    }\n+\n     fn emit_message_default(&mut self,\n                             msp: &MultiSpan,\n                             msg: &str,\n@@ -722,7 +736,10 @@ impl EmitterWriter {\n             draw_note_separator(&mut buffer, 0, max_line_num_len + 1);\n             buffer.append(0, &level.to_string(), Style::HeaderMsg);\n             buffer.append(0, \": \", Style::NoStyle);\n-            buffer.append(0, msg, Style::NoStyle);\n+\n+            // The extra 9 ` ` is the padding that's always needed to align to the `note: `.\n+            let message = self.msg_with_padding(msg, max_line_num_len + 9);\n+            buffer.append(0, &message, Style::NoStyle);\n         } else {\n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n             match code {\n@@ -855,7 +872,10 @@ impl EmitterWriter {\n \n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n             buffer.append(0, \": \", Style::HeaderMsg);\n-            buffer.append(0, msg, Style::HeaderMsg);\n+\n+            // The extra 15 ` ` is the padding that's always needed to align to the `suggestion: `.\n+            let message = self.msg_with_padding(msg, max_line_num_len + 15);\n+            buffer.append(0, &message, Style::HeaderMsg);\n \n             let lines = cm.span_to_lines(primary_span).unwrap();\n \n@@ -924,51 +944,8 @@ impl EmitterWriter {\n                             }\n                         },\n                         None => {\n-                            // Diagnostic with lists need to render the list items at the\n-                            // appropriate depth and composed into the body of the message.\n-                            let msg = if child.list.len() == 0 {\n-                                // Diagnostics without lists just need the original message\n-                                child.message.to_owned()\n-                            } else {\n-                                // Diagnostic with a list of items needs to be rendered with the\n-                                // appropriate padding at the left to have a consistent margin with\n-                                // the `note: ` text.\n-\n-                                // Add as many ` ` chars at the beggining to align the `- item`\n-                                // text to the beggining of the `note: ` text. The extra 9 ` ` is\n-                                // the padding that's always needed to align to the `note: `.\n-                                let padding = (0..max_line_num_len + 9)\n-                                    .map(|_| \" \")\n-                                    .collect::<String>();\n-\n-                                // Concatenate the message and all the list items, properly aligned\n-                                child.list.iter().fold(child.message.to_owned(), |mut acc, x| {\n-                                    acc.push_str(\"\\n\");\n-                                    acc.push_str(&padding);\n-                                    acc.push_str(\"- \");\n-                                    acc.push_str(x);\n-                                    acc\n-                                })\n-                                // msg will now be:\n-                                //\n-                                //     child.message's content\n-                                //              - item 1\n-                                //              - item 2\n-                                //\n-                                // and the diagnostic will look like\n-                                //\n-                                //     error: message\n-                                //      --> file.rs:3:20\n-                                //       |\n-                                //     3 |     <Code>\n-                                //       |      ^^^^ highlight\n-                                //       |\n-                                //       = help: child.message's content\n-                                //               - item 1\n-                                //               - item 2\n-                            };\n                             match self.emit_message_default(&child.span,\n-                                                            &msg,\n+                                                            &child.message,\n                                                             &None,\n                                                             &child.level,\n                                                             max_line_num_len,"}, {"sha": "3bc3d1a2c970eece32250b1b74fda5b41540d384", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b206064fc86b356759e4cbfc60407b426c362cac/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b206064fc86b356759e4cbfc60407b426c362cac/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=b206064fc86b356759e4cbfc60407b426c362cac", "patch": "@@ -70,15 +70,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                          ast::DUMMY_NODE_ID);\n             let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n             if suggestions.len() > 0 {\n-                err.help_with_list(\"here are some functions which might fulfill your needs:\",\n-                                   self.get_best_match(&suggestions));\n+                err.help(&format!(\"here are some functions which \\\n+                                   might fulfill your needs:\\n{}\",\n+                                  self.get_best_match(&suggestions).join(\"\\n\")));\n             };\n             err.emit();\n         }\n     }\n \n     fn format_method_suggestion(&self, method: &AssociatedItem) -> String {\n-        format!(\".{}({})\",\n+        format!(\"- .{}({})\",\n                 method.name,\n                 if self.has_no_input_arg(method) {\n                     \"\""}]}