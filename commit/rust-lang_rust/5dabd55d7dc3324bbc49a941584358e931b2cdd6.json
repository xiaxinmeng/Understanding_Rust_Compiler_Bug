{"sha": "5dabd55d7dc3324bbc49a941584358e931b2cdd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYWJkNTVkN2RjMzMyNGJiYzQ5YTk0MTU4NDM1OGU5MzFiMmNkZDY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T20:34:36Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-07T22:08:43Z"}, "message": "Use substs from opaque type key instead of using it from opaque_decl", "tree": {"sha": "23aba2373c0299e00787e81841fbfaf33ddb966d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23aba2373c0299e00787e81841fbfaf33ddb966d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dabd55d7dc3324bbc49a941584358e931b2cdd6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC+mOwACgkQgTGiTgx5\n768dshAAllJmIcbF2JvoT1mE/uoE9o5RpZkc/X0ajdcVIr+xVLPDN9NiWTtPfvVA\nWEmeyHYKPsZuHc/oC3XwJwNTWdxBiHOw6vsnYl6bOcUDchEyr9W0ZBt9gqzTAvww\nSqzeC+FVdBBkD9oYWOEGj6KkQ0HchipyQPEyjthn+bazVr2/KOMisGXUlAOXnfbt\n3U6h8QN2NRObxEdobncBHArs91+ShlA+9TAC9Ub/LOe0kZwBkpYUhHuC5lywcd4r\n1i1bRrsvinNn9O3dA5R6kbm/ifQFvhH9x7yhVnV5Jj+PYSpAnk4ntr6w3Lstxrt1\nohTBnh1VRk7jKjj1JOlZuqsg5VRUiEzuml7JCHfX52cGvsBRQyZWoHPTr4cQZrUr\n0gk9in0MBaB7Sc8I1ZETVDnmaO3Dvov5labFDMeOzeh2S1HKFHC2nBAZwrmO3dAi\nK0Kc6I4Uandrgte+ca6D5BnV/PvXwArzKf/85gA0fblY37JvYTC3QmPDvwLqvf4V\nUPyXDdmDHGT7MymdaB0dPNJ/Xbv6kJOPSFeRqhkfrw9PggEmZLdu+rZ+iLyQbQiR\n9ibnrGH6FshIkHRT9gwRxE+vdoW5GZFsIYAIg3Z7CigRJUsuIRG703xxx+3QYsCv\nTezoIfLamHzqBYA8UpWxMBN3otsyApy9iYEk4mBuXus//MljQkc=\n=HHDs\n-----END PGP SIGNATURE-----", "payload": "tree 23aba2373c0299e00787e81841fbfaf33ddb966d\nparent 37ab718350453a328b1a925825d8d9bbea9fe9e6\nauthor Santiago Pastorino <spastorino@gmail.com> 1623098076 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623103723 -0300\n\nUse substs from opaque type key instead of using it from opaque_decl\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dabd55d7dc3324bbc49a941584358e931b2cdd6", "html_url": "https://github.com/rust-lang/rust/commit/5dabd55d7dc3324bbc49a941584358e931b2cdd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dabd55d7dc3324bbc49a941584358e931b2cdd6/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37ab718350453a328b1a925825d8d9bbea9fe9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ab718350453a328b1a925825d8d9bbea9fe9e6", "html_url": "https://github.com/rust-lang/rust/commit/37ab718350453a328b1a925825d8d9bbea9fe9e6"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "e03ae3869ef3c322aa4d5531dbe22ac1532063d9", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5dabd55d7dc3324bbc49a941584358e931b2cdd6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dabd55d7dc3324bbc49a941584358e931b2cdd6/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=5dabd55d7dc3324bbc49a941584358e931b2cdd6", "patch": "@@ -1283,28 +1283,25 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n \n                     for &(opaque_type_key, opaque_decl) in &opaque_type_map {\n-                        let opaque_def_id = opaque_type_key.def_id;\n                         let resolved_ty = infcx.resolve_vars_if_possible(opaque_decl.concrete_ty);\n                         let concrete_is_opaque = if let ty::Opaque(def_id, _) = resolved_ty.kind() {\n-                            *def_id == opaque_def_id\n+                            *def_id == opaque_type_key.def_id\n                         } else {\n                             false\n                         };\n \n-                        let opaque_type_key =\n-                            OpaqueTypeKey { def_id: opaque_def_id, substs: opaque_decl.substs };\n                         let concrete_ty = match concrete_opaque_types\n                             .iter()\n-                            .find(|(opaque_type_key, _)| opaque_type_key.def_id == opaque_def_id)\n-                            .map(|(_, concrete_ty)| concrete_ty)\n+                            .find(|(key, _)| key.def_id == opaque_type_key.def_id)\n+                            .map(|(_, ty)| ty)\n                         {\n                             None => {\n                                 if !concrete_is_opaque {\n                                     tcx.sess.delay_span_bug(\n                                         body.span,\n                                         &format!(\n                                             \"Non-defining use of {:?} with revealed type\",\n-                                            opaque_def_id,\n+                                            opaque_type_key.def_id,\n                                         ),\n                                     );\n                                 }\n@@ -1313,7 +1310,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             Some(concrete_ty) => concrete_ty,\n                         };\n                         debug!(\"concrete_ty = {:?}\", concrete_ty);\n-                        let subst_opaque_defn_ty = concrete_ty.subst(tcx, opaque_decl.substs);\n+                        let subst_opaque_defn_ty = concrete_ty.subst(tcx, opaque_type_key.substs);\n                         let renumbered_opaque_defn_ty =\n                             renumber::renumber_regions(infcx, subst_opaque_defn_ty);\n \n@@ -1353,7 +1350,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             // gets 'revealed' into\n                             debug!(\n                                 \"eq_opaque_type_and_type: non-defining use of {:?}\",\n-                                opaque_def_id,\n+                                opaque_type_key.def_id,\n                             );\n                         }\n                     }\n@@ -1379,14 +1376,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // instantiated it with).\n         if let Some(opaque_type_map) = opaque_type_map {\n             for (opaque_type_key, opaque_decl) in opaque_type_map {\n-                let opaque_def_id = opaque_type_key.def_id;\n                 self.fully_perform_op(\n                     locations,\n                     ConstraintCategory::OpaqueType,\n                     CustomTypeOp::new(\n                         |_cx| {\n                             infcx.constrain_opaque_type(\n-                                opaque_def_id,\n+                                opaque_type_key.def_id,\n                                 &opaque_decl,\n                                 GenerateMemberConstraints::IfNoStaticBound,\n                                 universal_region_relations,"}, {"sha": "9bb08503712f3e40eb6172e4bfb5920c6c2f529c", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5dabd55d7dc3324bbc49a941584358e931b2cdd6/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dabd55d7dc3324bbc49a941584358e931b2cdd6/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=5dabd55d7dc3324bbc49a941584358e931b2cdd6", "patch": "@@ -371,9 +371,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         debug!(\"constrain_opaque_types()\");\n \n         for &(opaque_type_key, opaque_defn) in opaque_types {\n-            let OpaqueTypeKey { def_id, substs: _ } = opaque_type_key;\n             self.constrain_opaque_type(\n-                def_id,\n+                opaque_type_key.def_id,\n                 &opaque_defn,\n                 GenerateMemberConstraints::WhenRequired,\n                 free_region_relations,"}, {"sha": "5df5fb7ea688c5a37c52e35e645ca94297051047", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5dabd55d7dc3324bbc49a941584358e931b2cdd6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dabd55d7dc3324bbc49a941584358e931b2cdd6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5dabd55d7dc3324bbc49a941584358e931b2cdd6", "patch": "@@ -717,11 +717,10 @@ fn check_opaque_meets_bounds<'tcx>(\n         );\n \n         for (opaque_type_key, opaque_defn) in opaque_type_map {\n-            let def_id = opaque_type_key.def_id;\n-            match infcx\n-                .at(&misc_cause, param_env)\n-                .eq(opaque_defn.concrete_ty, tcx.type_of(def_id).subst(tcx, opaque_defn.substs))\n-            {\n+            match infcx.at(&misc_cause, param_env).eq(\n+                opaque_defn.concrete_ty,\n+                tcx.type_of(opaque_type_key.def_id).subst(tcx, opaque_defn.substs),\n+            ) {\n                 Ok(infer_ok) => inh.register_infer_ok_obligations(infer_ok),\n                 Err(ty_err) => tcx.sess.delay_span_bug(\n                     opaque_defn.definition_span,"}, {"sha": "e8f606455f2afa7594ac53e5e680f29c1e2045ef", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5dabd55d7dc3324bbc49a941584358e931b2cdd6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dabd55d7dc3324bbc49a941584358e931b2cdd6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=5dabd55d7dc3324bbc49a941584358e931b2cdd6", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n-use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::InferCtxtExt;\n@@ -476,8 +476,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n     fn visit_opaque_types(&mut self, span: Span) {\n         for &(opaque_type_key, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n-            let OpaqueTypeKey { def_id, substs: _ } = opaque_type_key;\n-            let hir_id = self.tcx().hir().local_def_id_to_hir_id(def_id.expect_local());\n+            let hir_id =\n+                self.tcx().hir().local_def_id_to_hir_id(opaque_type_key.def_id.expect_local());\n             let instantiated_ty = self.resolve(opaque_defn.concrete_ty, &hir_id);\n \n             debug_assert!(!instantiated_ty.has_escaping_bound_vars());\n@@ -494,7 +494,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             // fn foo<U>() -> Foo<U> { .. }\n             // ```\n             // figures out the concrete type with `U`, but the stored type is with `T`.\n-            let opaque_type_key = OpaqueTypeKey { def_id, substs: opaque_defn.substs };\n             let definition_ty = self.fcx.infer_opaque_definition_from_instantiation(\n                 opaque_type_key,\n                 instantiated_ty,\n@@ -506,7 +505,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             if let ty::Opaque(defin_ty_def_id, _substs) = *definition_ty.kind() {\n                 if let hir::OpaqueTyOrigin::Misc | hir::OpaqueTyOrigin::TyAlias = opaque_defn.origin\n                 {\n-                    if def_id == defin_ty_def_id {\n+                    if opaque_type_key.def_id == defin_ty_def_id {\n                         debug!(\n                             \"skipping adding concrete definition for opaque type {:?} {:?}\",\n                             opaque_defn, defin_ty_def_id\n@@ -516,14 +515,13 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 }\n             }\n \n-            if !opaque_defn.substs.needs_infer() {\n+            if !opaque_type_key.substs.needs_infer() {\n                 // We only want to add an entry into `concrete_opaque_types`\n                 // if we actually found a defining usage of this opaque type.\n                 // Otherwise, we do nothing - we'll either find a defining usage\n                 // in some other location, or we'll end up emitting an error due\n                 // to the lack of defining usage\n                 if !skip_add {\n-                    let opaque_type_key = OpaqueTypeKey { def_id, substs: opaque_defn.substs };\n                     let old_concrete_ty = self\n                         .typeck_results\n                         .concrete_opaque_types\n@@ -534,7 +532,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                                 span,\n                                 \"`visit_opaque_types` tried to write different types for the same \\\n                                  opaque type: {:?}, {:?}, {:?}, {:?}\",\n-                                def_id,\n+                                opaque_type_key.def_id,\n                                 definition_ty,\n                                 opaque_defn,\n                                 old_concrete_ty,"}]}