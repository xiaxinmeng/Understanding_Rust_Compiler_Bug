{"sha": "843b174e93b253824a62fba3ac4be2753e30c9c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0M2IxNzRlOTNiMjUzODI0YTYyZmJhM2FjNGJlMjc1M2UzMGM5YzI=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-02T12:52:48Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-12T05:53:17Z"}, "message": "typeck: if a private field exists, also check for a public method\n\nFor example, `Vec::len` is both a field and a method, and usually\nencountering `vec.len` just means that the parens were forgotten.\n\nFixes: #26472", "tree": {"sha": "1ef1f5f7151fb95ba269d5d1c0e074dab82da394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef1f5f7151fb95ba269d5d1c0e074dab82da394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/843b174e93b253824a62fba3ac4be2753e30c9c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/843b174e93b253824a62fba3ac4be2753e30c9c2", "html_url": "https://github.com/rust-lang/rust/commit/843b174e93b253824a62fba3ac4be2753e30c9c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/843b174e93b253824a62fba3ac4be2753e30c9c2/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22ac88f1a47a82195a49fbff3cf24a2c395d7a81", "url": "https://api.github.com/repos/rust-lang/rust/commits/22ac88f1a47a82195a49fbff3cf24a2c395d7a81", "html_url": "https://github.com/rust-lang/rust/commit/22ac88f1a47a82195a49fbff3cf24a2c395d7a81"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "00eeefa0449ce628eb9032c2a1710b652550d794", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/843b174e93b253824a62fba3ac4be2753e30c9c2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843b174e93b253824a62fba3ac4be2753e30c9c2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=843b174e93b253824a62fba3ac4be2753e30c9c2", "patch": "@@ -84,7 +84,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                          span: Span,\n                          method_name: ast::Name,\n                          self_ty: ty::Ty<'tcx>,\n-                         call_expr_id: ast::NodeId)\n+                         call_expr_id: ast::NodeId,\n+                         allow_private: bool)\n                          -> bool\n     {\n         let mode = probe::Mode::MethodCall;\n@@ -93,7 +94,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Err(NoMatch(..)) => false,\n             Err(Ambiguity(..)) => true,\n             Err(ClosureAmbiguity(..)) => true,\n-            Err(PrivateMatch(..)) => true,\n+            Err(PrivateMatch(..)) => allow_private,\n         }\n     }\n "}, {"sha": "060075e6f0d90efd630ce1a87d950766bc60b799", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/843b174e93b253824a62fba3ac4be2753e30c9c2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843b174e93b253824a62fba3ac4be2753e30c9c2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=843b174e93b253824a62fba3ac4be2753e30c9c2", "patch": "@@ -3045,12 +3045,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         if let Some((did, field_ty)) = private_candidate {\n             let struct_path = self.tcx().item_path_str(did);\n-            let msg = format!(\"field `{}` of struct `{}` is private\", field.node, struct_path);\n-            self.tcx().sess.span_err(expr.span, &msg);\n             self.write_ty(expr.id, field_ty);\n+            let msg = format!(\"field `{}` of struct `{}` is private\", field.node, struct_path);\n+            let mut err = self.tcx().sess.struct_span_err(expr.span, &msg);\n+            // Also check if an accessible method exists, which is often what is meant.\n+            if self.method_exists(field.span, field.node, expr_t, expr.id, false) {\n+                err.note(&format!(\"a method `{}` also exists, perhaps you wish to call it\",\n+                                  field.node));\n+            }\n+            err.emit();\n         } else if field.node == keywords::Invalid.name() {\n             self.write_error(expr.id);\n-        } else if self.method_exists(field.span, field.node, expr_t, expr.id) {\n+        } else if self.method_exists(field.span, field.node, expr_t, expr.id, true) {\n             self.type_error_struct(field.span, |actual| {\n                 format!(\"attempted to take value of method `{}` on type \\\n                          `{}`\", field.node, actual)"}, {"sha": "0d59a897ef1af419f71d69f0cc83739cddf5b6e0", "filename": "src/test/compile-fail/issue-26472.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/843b174e93b253824a62fba3ac4be2753e30c9c2/src%2Ftest%2Fcompile-fail%2Fissue-26472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843b174e93b253824a62fba3ac4be2753e30c9c2/src%2Ftest%2Fcompile-fail%2Fissue-26472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26472.rs?ref=843b174e93b253824a62fba3ac4be2753e30c9c2", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod sub {\n+    pub struct S { len: usize }\n+    impl S {\n+        pub fn new() -> S { S { len: 0 } }\n+        pub fn len(&self) -> usize { self.len }\n+    }\n+}\n+\n+fn main() {\n+    let s = sub::S::new();\n+    let v = s.len;\n+    //~^ ERROR field `len` of struct `sub::S` is private\n+    //~| NOTE a method `len` also exists, perhaps you wish to call it\n+}"}]}