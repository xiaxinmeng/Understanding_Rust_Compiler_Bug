{"sha": "0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "node_id": "C_kwDOAAsO6NoAKDBiYTI3ZGUzYWMwYTMzZThkNmIwODJlN2ViZWY0NGI2MDFiMDM4ZjQ", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-09T23:05:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-09T23:05:36Z"}, "message": "Rollup merge of #106639 - RalfJung:miri, r=RalfJung\n\nupdate Miri\n\nNotable PRs:\n- https://github.com/rust-lang/miri/pull/2748\n- https://github.com/rust-lang/miri/pull/2752\n\nr? `@ghost`", "tree": {"sha": "a2e891bc1190d7756ad52878d2b7d8c87f826dd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e891bc1190d7756ad52878d2b7d8c87f826dd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvJ3ACRBK7hj4Ov3rIwAAFx8IAGHN1QyNXY55TA63qZnt2m9/\nGh75scGd83nj3SCz3u4yTdpaZbJBrqYSnXlaC4f3w/qJElGMUTYSXX8EFth+Y9U1\nHe6jpV42GfPe/K68ESUAeQw8OzGbtfA3bA+616Y0P4UNgBFnS6pVh0rF9NBUi6Qy\n3HT3qx6X3eQzQcurtPE1uZiQb/gZBButAs3CBtP8aeIZbnm3yqvoQRpi3VtlYO72\n2aLO8xIzd9NM+2xbjdWOxQWbIHFiISQzHSmd8IGcnGIliIiLXBVJIOd6tmQAjbY8\nCxpwwQ6awohvA0nCVrv9/LEJk+Ju+RTOGnP/Oh+Dxp2XvfFdW2Qxysu34taulS0=\n=VKvO\n-----END PGP SIGNATURE-----\n", "payload": "tree a2e891bc1190d7756ad52878d2b7d8c87f826dd9\nparent 96e53c0c6c122325d55d8664032ae05c8127df58\nparent cb1592518e09098c19d90b4f4f0a8f0373cc1bd5\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673305536 +0900\ncommitter GitHub <noreply@github.com> 1673305536 +0900\n\nRollup merge of #106639 - RalfJung:miri, r=RalfJung\n\nupdate Miri\n\nNotable PRs:\n- https://github.com/rust-lang/miri/pull/2748\n- https://github.com/rust-lang/miri/pull/2752\n\nr? `@ghost`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "html_url": "https://github.com/rust-lang/rust/commit/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e53c0c6c122325d55d8664032ae05c8127df58", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e53c0c6c122325d55d8664032ae05c8127df58", "html_url": "https://github.com/rust-lang/rust/commit/96e53c0c6c122325d55d8664032ae05c8127df58"}, {"sha": "cb1592518e09098c19d90b4f4f0a8f0373cc1bd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb1592518e09098c19d90b4f4f0a8f0373cc1bd5", "html_url": "https://github.com/rust-lang/rust/commit/cb1592518e09098c19d90b4f4f0a8f0373cc1bd5"}], "stats": {"total": 281, "additions": 246, "deletions": 35}, "files": [{"sha": "37f66d0033f068e640bfbb15a5d023c66e22c6ff", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -185,7 +185,7 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     // explicitly do this even if RUSTC_STAGE is set, since for these builds we do *not* want the\n     // bootstrap `rustc` thing in our way! Instead, we have MIRI_HOST_SYSROOT to use for host\n     // builds.\n-    cmd.env(\"RUSTC\", &fs::canonicalize(find_miri()).unwrap());\n+    cmd.env(\"RUSTC\", fs::canonicalize(find_miri()).unwrap());\n     cmd.env(\"MIRI_BE_RUSTC\", \"target\"); // we better remember to *unset* this in the other phases!\n \n     // Set rustdoc to us as well, so we can run doctests."}, {"sha": "e01bfbc74d98acaccc77489e6d823024732fab4d", "filename": "src/tools/miri/ci.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fci.sh?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -108,7 +108,8 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec panic/panic concurrency/simple atomic data_race env/var\n     MIRI_TEST_TARGET=aarch64-linux-android run_tests_minimal hello integer vec panic/panic\n-    MIRI_TEST_TARGET=wasm32-wasi run_tests_minimal no_std integer\n+    MIRI_TEST_TARGET=wasm32-wasi run_tests_minimal no_std integer strings\n+    MIRI_TEST_TARGET=wasm32-unknown-unknown run_tests_minimal no_std integer strings\n     MIRI_TEST_TARGET=thumbv7em-none-eabihf MIRI_NO_STD=1 run_tests_minimal no_std # no_std embedded architecture\n     MIRI_TEST_TARGET=tests/avr.json MIRI_NO_STD=1 run_tests_minimal no_std # JSON target file\n     ;;"}, {"sha": "cf6d9c2808048547170f649926b6ef8cd24cda7b", "filename": "src/tools/miri/rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Frust-version", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Frust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Frust-version?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -1 +1 @@\n-4f4d0586ad20c66a16d547581ca379beafece93a\n+c54c8cbac882e149e04a9e1f2d146fd548ae30ae"}, {"sha": "2cc8f03546602a880a7225ffcb6e938738cb8360", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fdiagnostics.rs?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -88,11 +88,7 @@ impl fmt::Display for InvalidationCause {\n         match self {\n             InvalidationCause::Access(kind) => write!(f, \"{kind}\"),\n             InvalidationCause::Retag(perm, kind) =>\n-                if *kind == RetagCause::FnEntry {\n-                    write!(f, \"{perm:?} FnEntry retag\")\n-                } else {\n-                    write!(f, \"{perm:?} retag\")\n-                },\n+                write!(f, \"{perm:?} {retag}\", retag = kind.summary()),\n         }\n     }\n }\n@@ -193,7 +189,7 @@ struct RetagOp {\n #[derive(Debug, Clone, Copy, PartialEq)]\n pub enum RetagCause {\n     Normal,\n-    FnReturn,\n+    FnReturnPlace,\n     FnEntry,\n     TwoPhase,\n }\n@@ -495,8 +491,8 @@ impl RetagCause {\n     fn summary(&self) -> String {\n         match self {\n             RetagCause::Normal => \"retag\",\n-            RetagCause::FnEntry => \"FnEntry retag\",\n-            RetagCause::FnReturn => \"FnReturn retag\",\n+            RetagCause::FnEntry => \"function-entry retag\",\n+            RetagCause::FnReturnPlace => \"return-place retag\",\n             RetagCause::TwoPhase => \"two-phase retag\",\n         }\n         .to_string()"}, {"sha": "ec555ba2895c8468b82bcaae0008fcfb34b13ad0", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -998,7 +998,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             access: Some(AccessKind::Write),\n             protector: Some(ProtectorKind::StrongProtector),\n         };\n-        let val = this.sb_retag_reference(&val, new_perm, RetagCause::FnReturn)?;\n+        let val = this.sb_retag_reference(&val, new_perm, RetagCause::FnReturnPlace)?;\n         // And use reborrowed pointer for return place.\n         let return_place = this.ref_to_mplace(&val)?;\n         this.frame_mut().return_place = return_place.into();"}, {"sha": "527d31d1f0ae8acc199671562b425742a8a0eb15", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -943,7 +943,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         link_name: Symbol,\n     ) -> InterpResult<'tcx, ()> {\n         self.check_abi(abi, exp_abi)?;\n-        if let Some((body, _)) = self.eval_context_mut().lookup_exported_symbol(link_name)? {\n+        if let Some((body, instance)) = self.eval_context_mut().lookup_exported_symbol(link_name)? {\n+            // If compiler-builtins is providing the symbol, then don't treat it as a clash.\n+            // We'll use our built-in implementation in `emulate_foreign_item_by_name` for increased\n+            // performance. Note that this means we won't catch any undefined behavior in\n+            // compiler-builtins when running other crates, but Miri can still be run on\n+            // compiler-builtins itself (or any crate that uses it as a normal dependency)\n+            if self.eval_context_ref().tcx.is_compiler_builtins(instance.def_id().krate) {\n+                return Ok(());\n+            }\n+\n             throw_machine_stop!(TerminationInfo::SymbolShimClashing {\n                 link_name,\n                 span: body.span.data(),"}, {"sha": "62198061827adb3f1ab3fd1527586102705cdc69", "filename": "src/tools/miri/src/range_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Frange_map.rs?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -219,7 +219,6 @@ mod tests {\n     /// Query the map at every offset in the range and collect the results.\n     fn to_vec<T: Copy>(map: &RangeMap<T>, offset: u64, len: u64) -> Vec<T> {\n         (offset..offset + len)\n-            .into_iter()\n             .map(|i| {\n                 map.iter(Size::from_bytes(i), Size::from_bytes(1)).next().map(|(_, &t)| t).unwrap()\n             })"}, {"sha": "ce24b23ca327333b95eb2c6cf0e9493599a06637", "filename": "src/tools/miri/src/shims/env.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -166,7 +166,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // `buf_size` represents the size in characters.\n                 let buf_size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n                 Scalar::from_u32(windows_check_buffer_size(\n-                    this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?,\n+                    this.write_os_str_to_wide_str(\n+                        &var, buf_ptr, buf_size, /*truncate*/ false,\n+                    )?,\n                 ))\n             }\n             None => {\n@@ -366,7 +368,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         match env::current_dir() {\n             Ok(cwd) =>\n                 return Ok(Scalar::from_u32(windows_check_buffer_size(\n-                    this.write_path_to_wide_str(&cwd, buf, size)?,\n+                    this.write_path_to_wide_str(&cwd, buf, size, /*truncate*/ false)?,\n                 ))),\n             Err(e) => this.set_last_error_from_io_error(e.kind())?,\n         }"}, {"sha": "f010d4251f4799efd2007251d3a74bb3da21f0da", "filename": "src/tools/miri/src/shims/os_str.rs", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fos_str.rs?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -101,17 +101,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         self.eval_context_mut().write_c_str(bytes, ptr, size)\n     }\n \n-    /// Helper function to write an OsStr as a 0x0000-terminated u16-sequence, which is what\n-    /// the Windows APIs usually handle. This function returns `Ok((false, length))` without trying\n-    /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n-    /// terminator. It returns `Ok((true, length))` if the writing process was successful. The\n-    /// string length returned does include the null terminator. Length is measured in units of\n-    /// `u16.`\n+    /// Helper function to write an OsStr as a 0x0000-terminated u16-sequence, which is what the\n+    /// Windows APIs usually handle.\n+    ///\n+    /// If `truncate == false` (the usual mode of operation), this function returns `Ok((false,\n+    /// length))` without trying to write if `size` is not large enough to fit the contents of\n+    /// `os_string` plus a null terminator. It returns `Ok((true, length))` if the writing process\n+    /// was successful. The string length returned does include the null terminator. Length is\n+    /// measured in units of `u16.`\n+    ///\n+    /// If `truncate == true`, then in case `size` is not large enough it *will* write the first\n+    /// `size.saturating_sub(1)` many items, followed by a null terminator (if `size > 0`).\n     fn write_os_str_to_wide_str(\n         &mut self,\n         os_str: &OsStr,\n         ptr: Pointer<Option<Provenance>>,\n         size: u64,\n+        truncate: bool,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         #[cfg(windows)]\n         fn os_str_to_u16vec<'tcx>(os_str: &OsStr) -> InterpResult<'tcx, Vec<u16>> {\n@@ -129,7 +135,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         }\n \n         let u16_vec = os_str_to_u16vec(os_str)?;\n-        self.eval_context_mut().write_wide_str(&u16_vec, ptr, size)\n+        let (written, size_needed) = self.eval_context_mut().write_wide_str(&u16_vec, ptr, size)?;\n+        if truncate && !written && size > 0 {\n+            // Write the truncated part that fits.\n+            let truncated_data = &u16_vec[..size.saturating_sub(1).try_into().unwrap()];\n+            let (written, written_len) =\n+                self.eval_context_mut().write_wide_str(truncated_data, ptr, size)?;\n+            assert!(written && written_len == size);\n+        }\n+        Ok((written, size_needed))\n     }\n \n     /// Allocate enough memory to store the given `OsStr` as a null-terminated sequence of bytes.\n@@ -143,7 +157,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u8, size);\n         let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind)?;\n-        assert!(self.write_os_str_to_c_str(os_str, arg_place.ptr, size).unwrap().0);\n+        let (written, _) = self.write_os_str_to_c_str(os_str, arg_place.ptr, size).unwrap();\n+        assert!(written);\n         Ok(arg_place.ptr)\n     }\n \n@@ -158,7 +173,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u16, size);\n         let arg_place = this.allocate(this.layout_of(arg_type).unwrap(), memkind)?;\n-        assert!(self.write_os_str_to_wide_str(os_str, arg_place.ptr, size).unwrap().0);\n+        let (written, _) =\n+            self.write_os_str_to_wide_str(os_str, arg_place.ptr, size, /*truncate*/ false).unwrap();\n+        assert!(written);\n         Ok(arg_place.ptr)\n     }\n \n@@ -212,11 +229,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         path: &Path,\n         ptr: Pointer<Option<Provenance>>,\n         size: u64,\n+        truncate: bool,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         let this = self.eval_context_mut();\n         let os_str =\n             this.convert_path(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n-        this.write_os_str_to_wide_str(&os_str, ptr, size)\n+        this.write_os_str_to_wide_str(&os_str, ptr, size, truncate)\n     }\n \n     /// Allocate enough memory to store a Path as a null-terminated sequence of bytes,\n@@ -232,6 +250,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         this.alloc_os_str_as_c_str(&os_str, memkind)\n     }\n \n+    /// Allocate enough memory to store a Path as a null-terminated sequence of `u16`s,\n+    /// adjusting path separators if needed.\n+    fn alloc_path_as_wide_str(\n+        &mut self,\n+        path: &Path,\n+        memkind: MemoryKind<MiriMemoryKind>,\n+    ) -> InterpResult<'tcx, Pointer<Option<Provenance>>> {\n+        let this = self.eval_context_mut();\n+        let os_str =\n+            this.convert_path(Cow::Borrowed(path.as_os_str()), PathConversion::HostToTarget);\n+        this.alloc_os_str_as_wide_str(&os_str, memkind)\n+    }\n+\n     #[allow(clippy::get_first)]\n     fn convert_path<'a>(\n         &self,"}, {"sha": "f310d16e86198fcae581464bdf0be90253caa106", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -381,6 +381,46 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n                 this.write_scalar(Scalar::from_u32(1), dest)?;\n             }\n+            \"GetModuleFileNameW\" => {\n+                let [handle, filename, size] =\n+                    this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n+                this.check_no_isolation(\"`GetModuleFileNameW`\")?;\n+\n+                let handle = this.read_machine_usize(handle)?;\n+                let filename = this.read_pointer(filename)?;\n+                let size = this.read_scalar(size)?.to_u32()?;\n+\n+                if handle != 0 {\n+                    throw_unsup_format!(\"`GetModuleFileNameW` only supports the NULL handle\");\n+                }\n+\n+                // Using the host current_exe is a bit off, but consistent with Linux\n+                // (where stdlib reads /proc/self/exe).\n+                // Unfortunately this Windows function has a crazy behavior so we can't just use\n+                // `write_path_to_wide_str`...\n+                let path = std::env::current_exe().unwrap();\n+                let (all_written, size_needed) = this.write_path_to_wide_str(\n+                    &path,\n+                    filename,\n+                    size.into(),\n+                    /*truncate*/ true,\n+                )?;\n+\n+                if all_written {\n+                    // If the function succeeds, the return value is the length of the string that\n+                    // is copied to the buffer, in characters, not including the terminating null\n+                    // character.\n+                    this.write_int(size_needed.checked_sub(1).unwrap(), dest)?;\n+                } else {\n+                    // If the buffer is too small to hold the module name, the string is truncated\n+                    // to nSize characters including the terminating null character, the function\n+                    // returns nSize, and the function sets the last error to\n+                    // ERROR_INSUFFICIENT_BUFFER.\n+                    this.write_int(size, dest)?;\n+                    let insufficient_buffer = this.eval_windows(\"c\", \"ERROR_INSUFFICIENT_BUFFER\");\n+                    this.set_last_error(insufficient_buffer)?;\n+                }\n+            }\n \n             // Threading\n             \"CreateThread\" => {"}, {"sha": "a84ed85976367794549d7ba0544c91bb404830ae", "filename": "src/tools/miri/test_dependencies/Cargo.lock", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -14,6 +14,12 @@ version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n+[[package]]\n+name = \"bumpalo\"\n+version = \"3.11.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"572f695136211188308f16ad2ca5c851a712c464060ae6974944458eb83880ba\"\n+\n [[package]]\n name = \"bytes\"\n version = \"1.3.0\"\n@@ -44,8 +50,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31\"\n dependencies = [\n  \"cfg-if\",\n+ \"js-sys\",\n  \"libc\",\n  \"wasi 0.11.0+wasi-snapshot-preview1\",\n+ \"wasm-bindgen\",\n ]\n \n [[package]]\n@@ -57,6 +65,15 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"js-sys\"\n+version = \"0.3.60\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"49409df3e3bf0856b916e2ceaca09ee28e6871cf7d9ce97a692cacfdb2a25a47\"\n+dependencies = [\n+ \"wasm-bindgen\",\n+]\n+\n [[package]]\n name = \"libc\"\n version = \"0.2.139\"\n@@ -123,6 +140,12 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"once_cell\"\n+version = \"1.17.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6f61fba1741ea2b3d6a1e3178721804bb716a68a6aeba1149b5d52e3d464ea66\"\n+\n [[package]]\n name = \"page_size\"\n version = \"0.5.0\"\n@@ -269,9 +292,9 @@ dependencies = [\n \n [[package]]\n name = \"tokio\"\n-version = \"1.23.0\"\n+version = \"1.23.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"eab6d665857cc6ca78d6e80303a02cea7a7851e85dfbd77cbdc09bd129f1ef46\"\n+checksum = \"38a54aca0c15d014013256222ba0ebed095673f89345dd79119d912eb561b7a8\"\n dependencies = [\n  \"autocfg\",\n  \"bytes\",\n@@ -316,6 +339,60 @@ version = \"0.11.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n \n+[[package]]\n+name = \"wasm-bindgen\"\n+version = \"0.2.83\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eaf9f5aceeec8be17c128b2e93e031fb8a4d469bb9c4ae2d7dc1888b26887268\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"wasm-bindgen-macro\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-backend\"\n+version = \"0.2.83\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4c8ffb332579b0557b52d268b91feab8df3615f265d5270fec2a8c95b17c1142\"\n+dependencies = [\n+ \"bumpalo\",\n+ \"log\",\n+ \"once_cell\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-shared\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-macro\"\n+version = \"0.2.83\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"052be0f94026e6cbc75cdefc9bae13fd6052cdcaf532fa6c45e7ae33a1e6c810\"\n+dependencies = [\n+ \"quote\",\n+ \"wasm-bindgen-macro-support\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-macro-support\"\n+version = \"0.2.83\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"07bc0c051dc5f23e307b13285f9d75df86bfdf816c5721e573dec1f9b8aa193c\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+ \"wasm-bindgen-backend\",\n+ \"wasm-bindgen-shared\",\n+]\n+\n+[[package]]\n+name = \"wasm-bindgen-shared\"\n+version = \"0.2.83\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1c38c045535d93ec4f0b4defec448e4291638ee608530863b1e2ba115d4fff7f\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.3.9\""}, {"sha": "f5ab6acf008c5feefdee242bb95af65a01e97f95", "filename": "src/tools/miri/test_dependencies/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.toml?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -13,11 +13,11 @@ libc = \"0.2\"\n num_cpus = \"1.10.1\"\n \n getrandom_1 = { package = \"getrandom\", version = \"0.1\" }\n-getrandom = { version = \"0.2\" }\n+getrandom = { version = \"0.2\", features = [\"js\"] }\n rand = { version = \"0.8\", features = [\"small_rng\"] }\n \n [target.'cfg(not(any(target_arch = \"wasm32\", target_arch = \"wasm64\")))'.dependencies]\n page_size = \"0.5\"\n-tokio = { version = \"1.0\", features = [\"full\"] }\n+tokio = { version = \"1.23\", features = [\"full\"] }\n \n [workspace]"}, {"sha": "ae54d0248dc3d5689138062084612fa6317a4fcc", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -5,7 +5,7 @@ LL | pub fn safe(_x: &mut i32, _y: &i32) {}\n    |                           ^^\n    |                           |\n    |                           trying to retag from <TAG> for SharedReadOnly permission at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n-   |                           this error occurs as part of FnEntry retag at ALLOC[0x0..0x4]\n+   |                           this error occurs as part of function-entry retag at ALLOC[0x0..0x4]\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n    |\n LL |     safe_raw(xraw, xshr);\n    |                    ^^^^\n-help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag inside this call\n+help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique function-entry retag inside this call\n   --> $DIR/aliasing_mut3.rs:LL:CC\n    |\n LL |     safe_raw(xraw, xshr);"}, {"sha": "236c8fb0187de7b3a0ad90807f243bcf44a8bf45", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadWrite retag at offsets [0x0..0x4]\n    |\n LL |     let z = &mut x as *mut i32;\n    |             ^^^^^^\n-help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag inside this call\n+help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique function-entry retag inside this call\n   --> $DIR/fnentry_invalidation.rs:LL:CC\n    |\n LL |     x.do_bad();"}, {"sha": "45c2197050a1bd16e0a0bb161cf136e54402ae14", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0xc]\n    |\n LL |     let ptr = t.sli.as_ptr();\n    |               ^^^^^^^^^^^^^^\n-help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique FnEntry retag inside this call\n+help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique function-entry retag inside this call\n   --> $DIR/fnentry_invalidation2.rs:LL:CC\n    |\n LL |     let _ = t.sli.as_mut_ptr();"}, {"sha": "7ccafec60372d5fbd249d45e06a48abcc25e2d68", "filename": "src/tools/miri/tests/pass/concurrency/tls_lib_drop.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -186,8 +186,65 @@ fn join_orders_after_tls_destructors() {\n     }\n }\n \n+fn dtors_in_dtors_in_dtors() {\n+    use std::cell::UnsafeCell;\n+    use std::sync::{Arc, Condvar, Mutex};\n+\n+    #[derive(Clone, Default)]\n+    struct Signal(Arc<(Mutex<bool>, Condvar)>);\n+\n+    impl Signal {\n+        fn notify(&self) {\n+            let (set, cvar) = &*self.0;\n+            *set.lock().unwrap() = true;\n+            cvar.notify_one();\n+        }\n+\n+        fn wait(&self) {\n+            let (set, cvar) = &*self.0;\n+            let mut set = set.lock().unwrap();\n+            while !*set {\n+                set = cvar.wait(set).unwrap();\n+            }\n+        }\n+    }\n+\n+    struct NotifyOnDrop(Signal);\n+\n+    impl Drop for NotifyOnDrop {\n+        fn drop(&mut self) {\n+            let NotifyOnDrop(ref f) = *self;\n+            f.notify();\n+        }\n+    }\n+\n+    struct S1(Signal);\n+    thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));\n+    thread_local!(static K2: UnsafeCell<Option<NotifyOnDrop>> = UnsafeCell::new(None));\n+\n+    impl Drop for S1 {\n+        fn drop(&mut self) {\n+            let S1(ref signal) = *self;\n+            unsafe {\n+                let _ = K2.try_with(|s| *s.get() = Some(NotifyOnDrop(signal.clone())));\n+            }\n+        }\n+    }\n+\n+    let signal = Signal::default();\n+    let signal2 = signal.clone();\n+    let _t = thread::spawn(move || unsafe {\n+        let mut signal = Some(signal2);\n+        K1.with(|s| *s.get() = Some(S1(signal.take().unwrap())));\n+    });\n+    // Note that this test will deadlock if TLS destructors aren't run (this\n+    // requires the destructor to be run to pass the test).\n+    signal.wait();\n+}\n+\n fn main() {\n     check_destructors();\n     check_blocking();\n     join_orders_after_tls_destructors();\n+    dtors_in_dtors_in_dtors();\n }"}, {"sha": "898a42b72d134819f25b46e0b80bda1ad6c42c88", "filename": "src/tools/miri/tests/pass/shims/env/current_exe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ba27de3ac0a33e8d6b082e7ebef44b601b038f4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fenv%2Fcurrent_exe.rs?ref=0ba27de3ac0a33e8d6b082e7ebef44b601b038f4", "patch": "@@ -1,4 +1,3 @@\n-//@ignore-target-windows: current_exe not supported on Windows\n //@only-on-host: the Linux std implementation opens /proc/self/exe, which doesn't work cross-target\n //@compile-flags: -Zmiri-disable-isolation\n use std::env;"}]}