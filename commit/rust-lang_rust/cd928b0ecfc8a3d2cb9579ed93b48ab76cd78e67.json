{"sha": "cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67", "node_id": "C_kwDOAAsO6NoAKGNkOTI4YjBlY2ZjOGEzZDJjYjk1NzllZDkzYjQ4YWI3NmNkNzhlNjc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-06T14:59:46Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-06T14:59:46Z"}, "message": "Test bump", "tree": {"sha": "07e99a614ca9bc0c843bf2695ff769b42793a72c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e99a614ca9bc0c843bf2695ff769b42793a72c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67", "html_url": "https://github.com/rust-lang/rust/commit/cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7348284073e31c1ff357ff1e7810bf7a07fcf7e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7348284073e31c1ff357ff1e7810bf7a07fcf7e9", "html_url": "https://github.com/rust-lang/rust/commit/7348284073e31c1ff357ff1e7810bf7a07fcf7e9"}], "stats": {"total": 450, "additions": 2, "deletions": 448}, "files": [{"sha": "d9898d8e0f0152331e17d27f8255454d861b5cc6", "filename": "src/test/mir-opt/lower_intrinsics.assume.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67/src%2Ftest%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67/src%2Ftest%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff?ref=cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67", "patch": "@@ -11,7 +11,7 @@\n           StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n -         _1 = std::intrinsics::assume(const true) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:97:9: 97:32\n+-                                          // + span: $DIR/lower_intrinsics.rs:72:9: 72:32\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(bool) {std::intrinsics::assume}, val: Value(<ZST>) }\n +         assume(const true);              // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38"}, {"sha": "4fb6752b6196522f6098b69533b9b1c7f02ddce2", "filename": "src/test/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=cd928b0ecfc8a3d2cb9579ed93b48ab76cd78e67", "patch": "@@ -49,7 +49,7 @@\n           StorageDead(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:90: +4:91\n -         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> bb1; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:90:9: 90:28\n+-                                          // + span: $DIR/lower_intrinsics.rs:65:9: 65:28\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, *mut i32, usize) {copy_nonoverlapping::<i32>}, val: Value(<ZST>) }\n +         copy_nonoverlapping(dst = move _8, src = move _4, count = const 0_usize); // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n +         goto -> bb1;                     // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95"}, {"sha": "28536dc28a722fde154d3cffb445a3e73d3fd62c", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "removed", "additions": 0, "deletions": 146, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/7348284073e31c1ff357ff1e7810bf7a07fcf7e9/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7348284073e31c1ff357ff1e7810bf7a07fcf7e9/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=7348284073e31c1ff357ff1e7810bf7a07fcf7e9", "patch": "@@ -1,146 +0,0 @@\n-- // MIR for `identity` before ConstProp\n-+ // MIR for `identity` after ConstProp\n-  \n-  fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:+0:13: +0:14\n-      let mut _0: std::result::Result<i32, i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:+0:37: +0:53\n-      let mut _2: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      let mut _4: std::result::Result<i32, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-      let mut _5: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let mut _7: !;                       // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let mut _8: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let _9: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      scope 1 {\n-          debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          scope 2 {\n-              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  scope 9 {\n-                      debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                      }\n-                  }\n-              }\n-          }\n-      }\n-      scope 3 {\n-          debug val => _9;                 // in scope 3 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          scope 4 {\n-          }\n-      }\n-      scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-          debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _12: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let _13: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _15: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          scope 6 {\n-              debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          }\n-          scope 7 {\n-              debug e => _13;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-          _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-          _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-      }\n-  \n-      bb1: {\n-          StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n-          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      }\n-  \n-      bb3: {\n-          StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageLive(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _16 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n-          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n-      }\n-  \n-      bb4: {\n-          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_14);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         _5 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(const 1_isize) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      }\n-  \n-      bb5: {\n-          unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-      }\n-  \n-      bb6: {\n-          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         _5 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(const 0_isize) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      }\n-  }\n-  "}, {"sha": "df20f0ed36b6045d90742d06a0aac4db9bd1aba9", "filename": "src/test/mir-opt/separate_const_switch.identity.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/7348284073e31c1ff357ff1e7810bf7a07fcf7e9/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7348284073e31c1ff357ff1e7810bf7a07fcf7e9/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir?ref=7348284073e31c1ff357ff1e7810bf7a07fcf7e9", "patch": "@@ -1,124 +0,0 @@\n-// MIR for `identity` after PreCodegen\n-\n-fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:+0:13: +0:14\n-    let mut _0: std::result::Result<i32, i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:+0:37: +0:53\n-    let mut _2: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-    let mut _4: std::result::Result<i32, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-    let _5: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-    let mut _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-    let _7: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-    scope 1 {\n-        debug residual => _5;            // in scope 1 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        scope 2 {\n-            scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                debug residual => _6;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let _14: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _15: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _16: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                scope 9 {\n-                    debug e => _14;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-                    scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                        debug t => _16;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                    }\n-                }\n-            }\n-        }\n-    }\n-    scope 3 {\n-        debug val => _7;                 // in scope 3 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        scope 4 {\n-        }\n-    }\n-    scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-        debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _8: isize;               // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let _9: i32;                     // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _10: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _12: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _13: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        scope 6 {\n-            debug v => _9;               // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        }\n-        scope 7 {\n-            debug e => _11;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-        _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-        _8 = discriminant(_4);           // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-    }\n-\n-    bb1: {\n-        StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _11 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _13 = move _11;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        Deinit(_12);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_12 as Err).0: i32) = move _13; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_12) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _12; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageLive(_5);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        _5 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageLive(_6);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        _6 = _5;                         // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageLive(_14);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _14 = move ((_6 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _16 = move _14;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _15 = move _16;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageDead(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_0 as Err).0: i32) = move _15; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_14);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_6);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageDead(_5);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n-        StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n-    }\n-\n-    bb2: {\n-        unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-    }\n-\n-    bb3: {\n-        StorageLive(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _9 = move ((_4 as Ok).0: i32);   // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _10 = move _9;                   // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_3 as Continue).0: i32) = move _10; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageLive(_7);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        _7 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        _2 = _7;                         // scope 4 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        StorageDead(_7);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-        ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-        discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-        StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n-        StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n-    }\n-}"}, {"sha": "28269165e1c27a672f7a863d855940195ee24102", "filename": "src/test/mir-opt/separate_const_switch.too_complex.ConstProp.diff", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/7348284073e31c1ff357ff1e7810bf7a07fcf7e9/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7348284073e31c1ff357ff1e7810bf7a07fcf7e9/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff?ref=7348284073e31c1ff357ff1e7810bf7a07fcf7e9", "patch": "@@ -1,103 +0,0 @@\n-- // MIR for `too_complex` before ConstProp\n-+ // MIR for `too_complex` after ConstProp\n-  \n-  fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:+0:16: +0:17\n-      let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:+0:42: +0:53\n-      let mut _2: std::ops::ControlFlow<usize, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-      let mut _3: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:+7:13: +7:18\n-      let _4: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-      let mut _5: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-      let _6: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-      let mut _7: usize;                   // in scope 0 at $DIR/separate_const_switch.rs:+8:42: +8:43\n-      let mut _8: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:+11:9: +11:33\n-      let _9: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-      let mut _10: i32;                    // in scope 0 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-      let _11: usize;                      // in scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-      scope 1 {\n-          debug v => _4;                   // in scope 1 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-      }\n-      scope 2 {\n-          debug r => _6;                   // in scope 2 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-      }\n-      scope 3 {\n-          debug v => _9;                   // in scope 3 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-      }\n-      scope 4 {\n-          debug r => _11;                  // in scope 4 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-          _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-          switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n-      }\n-  \n-      bb1: {\n-          StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-          _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-          StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:42: +8:43\n-          _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:+8:42: +8:43\n-          Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:43: +8:44\n-          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n--         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n--         switchInt(move _8) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-+         _8 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-+         switchInt(const 1_isize) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-      }\n-  \n-      bb3: {\n-          StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-          _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-          StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-          _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-          Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:45: +7:46\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n--         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n--         switchInt(move _8) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-+         _8 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-+         switchInt(const 0_isize) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-      }\n-  \n-      bb4: {\n-          StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-          _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-          Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n-          discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n-          StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-          goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-      }\n-  \n-      bb5: {\n-          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-      }\n-  \n-      bb6: {\n-          StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-          _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-          StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-          _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-          Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          ((_0 as Some).0: i32) = move _10; // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-          StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-          goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-      }\n-  \n-      bb7: {\n-          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n-          return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n-      }\n-  }\n-  "}, {"sha": "0ee070619e79d4315022f132eddb88af3894e8a1", "filename": "src/test/mir-opt/separate_const_switch.too_complex.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7348284073e31c1ff357ff1e7810bf7a07fcf7e9/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7348284073e31c1ff357ff1e7810bf7a07fcf7e9/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir?ref=7348284073e31c1ff357ff1e7810bf7a07fcf7e9", "patch": "@@ -1,73 +0,0 @@\n-// MIR for `too_complex` after PreCodegen\n-\n-fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:+0:16: +0:17\n-    let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:+0:42: +0:53\n-    let mut _2: std::ops::ControlFlow<usize, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-    let mut _3: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:+7:13: +7:18\n-    let _4: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-    let mut _5: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-    let _6: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-    let _7: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-    let mut _8: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-    let _9: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-    scope 1 {\n-        debug v => _4;                   // in scope 1 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-    }\n-    scope 2 {\n-        debug r => _6;                   // in scope 2 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-    }\n-    scope 3 {\n-        debug v => _7;                   // in scope 3 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-    }\n-    scope 4 {\n-        debug r => _9;                   // in scope 4 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-    }\n-\n-    bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-        _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n-    }\n-\n-    bb1: {\n-        StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-        StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n-        StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-        Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n-        discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n-        StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-        goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-    }\n-\n-    bb2: {\n-        unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-    }\n-\n-    bb3: {\n-        StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-        _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-        StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-        _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-        Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-        ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-        discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-        StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:45: +7:46\n-        StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n-        StorageLive(_7);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-        _7 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-        StorageLive(_8);                 // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-        _8 = _7;                         // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-        Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-        ((_0 as Some).0: i32) = move _8; // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-        discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-        StorageDead(_8);                 // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-        StorageDead(_7);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-        goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-    }\n-\n-    bb4: {\n-        StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n-        return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n-    }\n-}"}]}