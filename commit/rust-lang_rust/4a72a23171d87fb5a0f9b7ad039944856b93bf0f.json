{"sha": "4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNzJhMjMxNzFkODdmYjVhMGY5YjdhZDAzOTk0NDg1NmI5M2JmMGY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-15T02:17:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-15T02:17:31Z"}, "message": "Add basic front-end support for 'for each' loops.", "tree": {"sha": "c89be3ff4f534ad3d506456a818b5ab7f92a591d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c89be3ff4f534ad3d506456a818b5ab7f92a591d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "html_url": "https://github.com/rust-lang/rust/commit/4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a01f5c3691a152793d8933a7be9d16a0fc7030", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a01f5c3691a152793d8933a7be9d16a0fc7030", "html_url": "https://github.com/rust-lang/rust/commit/15a01f5c3691a152793d8933a7be9d16a0fc7030"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "9e43d3496b461fc515048563199cd0559a5f2b93", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "patch": "@@ -151,6 +151,7 @@ tag expr_ {\n     expr_if(@expr, block, vec[tup(@expr, block)], option.t[block], ann);\n     expr_while(@expr, block, ann);\n     expr_for(@decl, @expr, block, ann);\n+    expr_for_each(@decl, @expr, block, ann);\n     expr_do_while(block, @expr, ann);\n     expr_alt(@expr, vec[arm], ann);\n     expr_block(block, ann);"}, {"sha": "ddadc7897649c01230a976401091555426e0ee1d", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "patch": "@@ -1049,8 +1049,14 @@ impure fn parse_head_local(parser p) -> @ast.decl {\n impure fn parse_for_expr(parser p) -> @ast.expr {\n     auto lo = p.get_span();\n     auto hi = lo;\n+    auto is_each = false;\n \n     expect(p, token.FOR);\n+    if (p.peek() == token.EACH) {\n+        is_each = true;\n+        p.bump();\n+    }\n+\n     expect (p, token.LPAREN);\n \n     auto decl = parse_head_local(p);\n@@ -1060,9 +1066,16 @@ impure fn parse_for_expr(parser p) -> @ast.expr {\n     expect(p, token.RPAREN);\n     auto body = parse_block(p);\n     hi = body.span;\n-    ret @spanned(lo, hi, ast.expr_for(decl, seq, body, ast.ann_none));\n+    if (is_each) {\n+        ret @spanned(lo, hi, ast.expr_for_each(decl, seq, body,\n+                                               ast.ann_none));\n+    } else {\n+        ret @spanned(lo, hi, ast.expr_for(decl, seq, body,\n+                                          ast.ann_none));\n+    }\n }\n \n+\n impure fn parse_while_expr(parser p) -> @ast.expr {\n     auto lo = p.get_span();\n     auto hi = lo;\n@@ -1422,6 +1435,8 @@ fn stmt_ends_with_semi(@ast.stmt stmt) -> bool {\n                 case (ast.expr_cast(_,_,_))     { ret true; }\n                 case (ast.expr_if(_,_,_,_,_))   { ret false; }\n                 case (ast.expr_for(_,_,_,_))    { ret false; }\n+                case (ast.expr_for_each(_,_,_,_))\n+                                                { ret false; }\n                 case (ast.expr_while(_,_,_))    { ret false; }\n                 case (ast.expr_do_while(_,_,_)) { ret false; }\n                 case (ast.expr_alt(_,_,_))      { ret false; }"}, {"sha": "3cafa9610b6ede3f5bb78b4edf0e30cae4e990a3", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "patch": "@@ -112,6 +112,10 @@ type ast_fold[ENV] =\n          @decl decl, @expr seq, &block body,\n          ann a) -> @expr)                         fold_expr_for,\n \n+     (fn(&ENV e, &span sp,\n+         @decl decl, @expr seq, &block body,\n+         ann a) -> @expr)                         fold_expr_for_each,\n+\n      (fn(&ENV e, &span sp,\n          @expr cond, &block body,\n          ann a) -> @expr)                         fold_expr_while,\n@@ -574,6 +578,13 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_for(env_, e.span, ddecl, sseq, bbody, t);\n         }\n \n+        case (ast.expr_for_each(?decl, ?seq, ?body, ?t)) {\n+            auto ddecl = fold_decl(env_, fld, decl);\n+            auto sseq = fold_expr(env_, fld, seq);\n+            auto bbody = fold_block(env_, fld, body);\n+            ret fld.fold_expr_for_each(env_, e.span, ddecl, sseq, bbody, t);\n+        }\n+\n         case (ast.expr_while(?cnd, ?body, ?t)) {\n             auto ccnd = fold_expr(env_, fld, cnd);\n             auto bbody = fold_block(env_, fld, body);\n@@ -1087,6 +1098,12 @@ fn identity_fold_expr_for[ENV](&ENV env, &span sp,\n     ret @respan(sp, ast.expr_for(d, seq, body, a));\n }\n \n+fn identity_fold_expr_for_each[ENV](&ENV env, &span sp,\n+                                    @decl d, @expr seq,\n+                                    &block body, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_for_each(d, seq, body, a));\n+}\n+\n fn identity_fold_expr_while[ENV](&ENV env, &span sp,\n                                  @expr cond, &block body, ann a) -> @expr {\n     ret @respan(sp, ast.expr_while(cond, body, a));\n@@ -1402,6 +1419,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_cast   = bind identity_fold_expr_cast[ENV](_,_,_,_,_),\n          fold_expr_if     = bind identity_fold_expr_if[ENV](_,_,_,_,_,_,_),\n          fold_expr_for    = bind identity_fold_expr_for[ENV](_,_,_,_,_,_),\n+         fold_expr_for_each\n+             = bind identity_fold_expr_for_each[ENV](_,_,_,_,_,_),\n          fold_expr_while  = bind identity_fold_expr_while[ENV](_,_,_,_,_),\n          fold_expr_do_while\n                           = bind identity_fold_expr_do_while[ENV](_,_,_,_,_),"}, {"sha": "d4ad907e32a1038e3d8c35c475e0c04c565f7498", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "patch": "@@ -565,6 +565,9 @@ fn update_env_for_expr(&env e, @ast.expr x) -> env {\n         case (ast.expr_for(?d, _, _, _)) {\n             ret rec(scopes = cons[scope](scope_loop(d), @e.scopes) with e);\n         }\n+        case (ast.expr_for_each(?d, _, _, _)) {\n+            ret rec(scopes = cons[scope](scope_loop(d), @e.scopes) with e);\n+        }\n         case (_) { }\n     }\n     ret e;"}, {"sha": "c4e5c9c4f3395568bfcfd9b0fc362aded36d344e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "patch": "@@ -2116,6 +2116,15 @@ fn trans_for(@block_ctxt cx,\n                       bind inner(_, local, _, _, body));\n }\n \n+fn trans_for_each(@block_ctxt cx,\n+                  @ast.decl decl,\n+                  @ast.expr seq,\n+                  &ast.block body) -> result {\n+    cx.fcx.ccx.sess.unimpl(\"for each loop\");\n+    fail;\n+}\n+\n+\n fn trans_while(@block_ctxt cx, @ast.expr cond,\n                &ast.block body) -> result {\n \n@@ -3035,6 +3044,10 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_for(cx, decl, seq, body);\n         }\n \n+        case (ast.expr_for_each(?decl, ?seq, ?body, _)) {\n+            ret trans_for_each(cx, decl, seq, body);\n+        }\n+\n         case (ast.expr_while(?cond, ?body, _)) {\n             ret trans_while(cx, cond, body);\n         }"}, {"sha": "499ed74d8a9fcf558a56f4447f178f225eea0037", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "patch": "@@ -676,6 +676,8 @@ fn expr_ty(@ast.expr expr) -> @t {\n         case (ast.expr_cast(_, _, ?ann))      { ret ann_to_type(ann); }\n         case (ast.expr_if(_, _, _, _, ?ann))  { ret ann_to_type(ann); }\n         case (ast.expr_for(_, _, _, ?ann))    { ret ann_to_type(ann); }\n+        case (ast.expr_for_each(_, _, _, ?ann))\n+                                              { ret ann_to_type(ann); }\n         case (ast.expr_while(_, _, ?ann))     { ret ann_to_type(ann); }\n         case (ast.expr_do_while(_, _, ?ann))  { ret ann_to_type(ann); }\n         case (ast.expr_alt(_, _, ?ann))       { ret ann_to_type(ann); }"}, {"sha": "a062f79d4d0663ac713827f9a694b859782ee647", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a72a23171d87fb5a0f9b7ad039944856b93bf0f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4a72a23171d87fb5a0f9b7ad039944856b93bf0f", "patch": "@@ -995,6 +995,10 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n             e_1 = ast.expr_for(decl, seq, bloc, ast.ann_type(t));\n         }\n+        case (ast.expr_for_each(?decl, ?seq, ?bloc, ?ann)) {\n+            auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n+            e_1 = ast.expr_for_each(decl, seq, bloc, ast.ann_type(t));\n+        }\n         case (ast.expr_while(?cond, ?bloc, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n             e_1 = ast.expr_while(cond, bloc, ast.ann_type(t));\n@@ -1448,6 +1452,17 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                                                      body_1, ann));\n         }\n \n+        case (ast.expr_for_each(?decl, ?seq, ?body, _)) {\n+            auto decl_1 = check_decl_local(fcx, decl);\n+            auto seq_1 = check_expr(fcx, seq);\n+            auto body_1 = check_block(fcx, body);\n+\n+            auto ann = ast.ann_type(plain_ty(ty.ty_nil));\n+            ret @fold.respan[ast.expr_](expr.span,\n+                                        ast.expr_for_each(decl_1, seq_1,\n+                                                          body_1, ann));\n+        }\n+\n         case (ast.expr_while(?cond, ?body, _)) {\n             auto cond_0 = check_expr(fcx, cond);\n             auto cond_1 = demand_expr(fcx, plain_ty(ty.ty_bool), cond_0);"}]}