{"sha": "dac6adbef90286f053f034eace9df65d6a19c0ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYzZhZGJlZjkwMjg2ZjA1M2YwMzRlYWNlOWRmNjVkNmExOWMwZmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-20T11:27:50Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-20T11:27:50Z"}, "message": "Merge #1562\n\n1562: Continue support for .await r=matklad a=unrealhoang\n\n- add await expr to ast and HIR Expr\r\n- infer type for `.await`\n\nCo-authored-by: Unreal Hoang <unrealhoang@gmail.com>", "tree": {"sha": "fe3376a1bdd3649240465fb6711f4b21cffd47f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe3376a1bdd3649240465fb6711f4b21cffd47f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac6adbef90286f053f034eace9df65d6a19c0ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac6adbef90286f053f034eace9df65d6a19c0ff", "html_url": "https://github.com/rust-lang/rust/commit/dac6adbef90286f053f034eace9df65d6a19c0ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac6adbef90286f053f034eace9df65d6a19c0ff/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "html_url": "https://github.com/rust-lang/rust/commit/6b352ffeb346eb7c7e46e00e790c2f395907eaa6"}, {"sha": "bacf926a77a3e4040ccaf64cce1b1517e41a8d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/bacf926a77a3e4040ccaf64cce1b1517e41a8d47", "html_url": "https://github.com/rust-lang/rust/commit/bacf926a77a3e4040ccaf64cce1b1517e41a8d47"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "4dcea19a93972576f4e79e7eee226b5b7fcd5ed2", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=dac6adbef90286f053f034eace9df65d6a19c0ff", "patch": "@@ -220,6 +220,9 @@ pub enum Expr {\n         expr: ExprId,\n         name: Name,\n     },\n+    Await {\n+        expr: ExprId,\n+    },\n     Try {\n         expr: ExprId,\n     },\n@@ -359,6 +362,7 @@ impl Expr {\n                 f(*rhs);\n             }\n             Expr::Field { expr, .. }\n+            | Expr::Await { expr }\n             | Expr::Try { expr }\n             | Expr::Cast { expr, .. }\n             | Expr::Ref { expr, .. }\n@@ -729,6 +733,10 @@ where\n                 };\n                 self.alloc_expr(Expr::Field { expr, name }, syntax_ptr)\n             }\n+            ast::ExprKind::AwaitExpr(e) => {\n+                let expr = self.collect_expr_opt(e.expr());\n+                self.alloc_expr(Expr::Await { expr }, syntax_ptr)\n+            }\n             ast::ExprKind::TryExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n                 self.alloc_expr(Expr::Try { expr }, syntax_ptr)"}, {"sha": "6d14eea8ecf43817142df2240c60c046cde5dee7", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=dac6adbef90286f053f034eace9df65d6a19c0ff", "patch": "@@ -118,6 +118,9 @@ pub(crate) const ITEM: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"Item\n pub(crate) const OPS: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"ops\"));\n pub(crate) const TRY: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"Try\"));\n pub(crate) const OK: Name = Name::new(SmolStr::new_inline_from_ascii(2, b\"Ok\"));\n+pub(crate) const FUTURE_MOD: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"future\"));\n+pub(crate) const FUTURE_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Future\"));\n+pub(crate) const OUTPUT: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Output\"));\n \n fn resolve_name(text: &SmolStr) -> SmolStr {\n     let raw_start = \"r#\";"}, {"sha": "a82dff711db0eae41aa695b95d48d5d8411fecee", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=dac6adbef90286f053f034eace9df65d6a19c0ff", "patch": "@@ -1114,6 +1114,25 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 .unwrap_or(Ty::Unknown);\n                 self.insert_type_vars(ty)\n             }\n+            Expr::Await { expr } => {\n+                let inner_ty = self.infer_expr(*expr, &Expectation::none());\n+                let ty = match self.resolve_future_future_output() {\n+                    Some(future_future_output_alias) => {\n+                        let ty = self.new_type_var();\n+                        let projection = ProjectionPredicate {\n+                            ty: ty.clone(),\n+                            projection_ty: ProjectionTy {\n+                                associated_ty: future_future_output_alias,\n+                                parameters: vec![inner_ty].into(),\n+                            },\n+                        };\n+                        self.obligations.push(Obligation::Projection(projection));\n+                        self.resolve_ty_as_possible(&mut vec![], ty)\n+                    }\n+                    None => Ty::Unknown,\n+                };\n+                ty\n+            }\n             Expr::Try { expr } => {\n                 let inner_ty = self.infer_expr(*expr, &Expectation::none());\n                 let ty = match self.resolve_ops_try_ok() {\n@@ -1368,6 +1387,28 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             _ => None,\n         }\n     }\n+\n+    fn resolve_future_future_output(&self) -> Option<TypeAlias> {\n+        let future_future_path = Path {\n+            kind: PathKind::Abs,\n+            segments: vec![\n+                PathSegment { name: name::STD, args_and_bindings: None },\n+                PathSegment { name: name::FUTURE_MOD, args_and_bindings: None },\n+                PathSegment { name: name::FUTURE_TYPE, args_and_bindings: None },\n+            ],\n+        };\n+\n+        match self\n+            .resolver\n+            .resolve_path_segments(self.db, &future_future_path)\n+            .into_fully_resolved()\n+        {\n+            PerNs { types: Some(Def(Trait(trait_))), .. } => {\n+                Some(trait_.associated_type_by_name(self.db, name::OUTPUT)?)\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n /// The ID of a type variable."}, {"sha": "706500484f8348eafce5e2e37ebe00878339e7a7", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=dac6adbef90286f053f034eace9df65d6a19c0ff", "patch": "@@ -20,6 +20,41 @@ use crate::{\n // against snapshots of the expected results using insta. Use cargo-insta to\n // update the snapshots.\n \n+#[test]\n+fn infer_await() {\n+    let (mut db, pos) = MockDatabase::with_position(\n+        r#\"\n+//- /main.rs\n+\n+struct IntFuture;\n+\n+impl Future for IntFuture {\n+    type Output = u64;\n+}\n+\n+fn test() {\n+    let r = IntFuture;\n+    let v = r.await;\n+    v<|>;\n+}\n+\n+//- /std.rs\n+#[prelude_import] use future::*;\n+mod future {\n+    trait Future {\n+        type Output;\n+    }\n+}\n+\n+\"#,\n+    );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"std\"]),\n+        \"std\": (\"/std.rs\", []),\n+    });\n+    assert_eq!(\"u64\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_try() {\n     let (mut db, pos) = MockDatabase::with_position("}, {"sha": "da8cf4ae8e15bd072b285f00aa97e4bdd64734e0", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=dac6adbef90286f053f034eace9df65d6a19c0ff", "patch": "@@ -175,6 +175,32 @@ impl Attr {\n     }\n }\n \n+// AwaitExpr\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct AwaitExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+\n+impl AstNode for AwaitExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            AWAIT_EXPR => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) { Some(AwaitExpr { syntax }) } else { None }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+\n+impl AwaitExpr {\n+    pub fn expr(&self) -> Option<Expr> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // BinExpr\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BinExpr {\n@@ -566,7 +592,7 @@ pub struct Expr {\n impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-             | TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | STRUCT_LIT | CALL_EXPR | INDEX_EXPR | METHOD_CALL_EXPR | FIELD_EXPR | TRY_EXPR | TRY_BLOCK_EXPR | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL => true,\n+             | TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | STRUCT_LIT | CALL_EXPR | INDEX_EXPR | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | TRY_BLOCK_EXPR | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL => true,\n             _ => false,\n         }\n     }\n@@ -599,6 +625,7 @@ pub enum ExprKind {\n     IndexExpr(IndexExpr),\n     MethodCallExpr(MethodCallExpr),\n     FieldExpr(FieldExpr),\n+    AwaitExpr(AwaitExpr),\n     TryExpr(TryExpr),\n     TryBlockExpr(TryBlockExpr),\n     CastExpr(CastExpr),\n@@ -669,6 +696,9 @@ impl From<MethodCallExpr> for Expr {\n impl From<FieldExpr> for Expr {\n     fn from(n: FieldExpr) -> Expr { Expr { syntax: n.syntax } }\n }\n+impl From<AwaitExpr> for Expr {\n+    fn from(n: AwaitExpr) -> Expr { Expr { syntax: n.syntax } }\n+}\n impl From<TryExpr> for Expr {\n     fn from(n: TryExpr) -> Expr { Expr { syntax: n.syntax } }\n }\n@@ -719,6 +749,7 @@ impl Expr {\n             INDEX_EXPR => ExprKind::IndexExpr(IndexExpr::cast(self.syntax.clone()).unwrap()),\n             METHOD_CALL_EXPR => ExprKind::MethodCallExpr(MethodCallExpr::cast(self.syntax.clone()).unwrap()),\n             FIELD_EXPR => ExprKind::FieldExpr(FieldExpr::cast(self.syntax.clone()).unwrap()),\n+            AWAIT_EXPR => ExprKind::AwaitExpr(AwaitExpr::cast(self.syntax.clone()).unwrap()),\n             TRY_EXPR => ExprKind::TryExpr(TryExpr::cast(self.syntax.clone()).unwrap()),\n             TRY_BLOCK_EXPR => ExprKind::TryBlockExpr(TryBlockExpr::cast(self.syntax.clone()).unwrap()),\n             CAST_EXPR => ExprKind::CastExpr(CastExpr::cast(self.syntax.clone()).unwrap()),"}, {"sha": "817dedfbfaa15fdfc290a8ea6e460e8d55dca1a2", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/dac6adbef90286f053f034eace9df65d6a19c0ff/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=dac6adbef90286f053f034eace9df65d6a19c0ff", "patch": "@@ -477,6 +477,7 @@ Grammar(\n         ),\n         \"IndexExpr\": (),\n         \"FieldExpr\": (options: [\"Expr\", \"NameRef\"]),\n+        \"AwaitExpr\": (options: [\"Expr\"]),\n         \"TryExpr\": (options: [\"Expr\"]),\n         \"CastExpr\": (options: [\"Expr\", \"TypeRef\"]),\n         \"RefExpr\": (options: [\"Expr\"]),\n@@ -508,6 +509,7 @@ Grammar(\n                 \"IndexExpr\",\n                 \"MethodCallExpr\",\n                 \"FieldExpr\",\n+                \"AwaitExpr\",\n                 \"TryExpr\",\n                 \"TryBlockExpr\",\n                 \"CastExpr\","}]}