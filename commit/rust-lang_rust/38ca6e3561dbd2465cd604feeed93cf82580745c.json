{"sha": "38ca6e3561dbd2465cd604feeed93cf82580745c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4Y2E2ZTM1NjFkYmQyNDY1Y2Q2MDRmZWVlZDkzY2Y4MjU4MDc0NWM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-12T18:46:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-12T18:46:19Z"}, "message": "Rollup merge of #78987 - lcnr:integer-sizes, r=varkor\n\nextend min_const_generics param ty tests\n\nApparently we never tested for `u128` and `i128` before this, so I added a test for all types which are allowed.\n\nr? ``@varkor``", "tree": {"sha": "4b8950bc77d07a409c0c444ac07d6816785eede1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b8950bc77d07a409c0c444ac07d6816785eede1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ca6e3561dbd2465cd604feeed93cf82580745c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrYL7CRBK7hj4Ov3rIwAAdHIIAHGTiTpZXwJNJJWro9But64w\nElGZ2gcTYs7NQkEGIzrP8lT3LMPGxjoy05qlnL6Wmsyw9TNIfIejLJQQOeFKM2KQ\n9BcGvis3NC2mh2dwdFitoLvefgnNs0ORM5re8JHDRO1Avk/s49l9peo13eDGhhsI\n/XfW3q3W5p65C3D/bJMTemrwe4AH5B9XIF84vhuaVWZJ0wklI0e3FeyEwuv/cNY7\nlfJua9CDbE5LFkXHMuF4h0XrgdzhZkywiFiNJvX4I/k23kQdWKJQo+gU8sYbBSBK\nHeA2Q05+SA6ugoa6XvllzTAhLQzu4n09ItyaZUZvPQNSv4N88mAfO35kQeJkepw=\n=Ov7P\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b8950bc77d07a409c0c444ac07d6816785eede1\nparent ef77a434020aaff598d35fd34b68150ef20f8014\nparent 80b2835dbfab7846db422282ae953b4bfb7ba9f2\nauthor Mara Bos <m-ou.se@m-ou.se> 1605206779 +0100\ncommitter GitHub <noreply@github.com> 1605206779 +0100\n\nRollup merge of #78987 - lcnr:integer-sizes, r=varkor\n\nextend min_const_generics param ty tests\n\nApparently we never tested for `u128` and `i128` before this, so I added a test for all types which are allowed.\n\nr? ``@varkor``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ca6e3561dbd2465cd604feeed93cf82580745c", "html_url": "https://github.com/rust-lang/rust/commit/38ca6e3561dbd2465cd604feeed93cf82580745c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ca6e3561dbd2465cd604feeed93cf82580745c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef77a434020aaff598d35fd34b68150ef20f8014", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef77a434020aaff598d35fd34b68150ef20f8014", "html_url": "https://github.com/rust-lang/rust/commit/ef77a434020aaff598d35fd34b68150ef20f8014"}, {"sha": "80b2835dbfab7846db422282ae953b4bfb7ba9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b2835dbfab7846db422282ae953b4bfb7ba9f2", "html_url": "https://github.com/rust-lang/rust/commit/80b2835dbfab7846db422282ae953b4bfb7ba9f2"}], "stats": {"total": 99, "additions": 94, "deletions": 5}, "files": [{"sha": "c4351e059dec6a5ab2e740d7d677fb10b6594380", "filename": "src/test/ui/const-generics/core-types.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/38ca6e3561dbd2465cd604feeed93cf82580745c/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ca6e3561dbd2465cd604feeed93cf82580745c/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs?ref=38ca6e3561dbd2465cd604feeed93cf82580745c", "patch": "@@ -0,0 +1,51 @@\n+// Check that all types allowed with `min_const_generics` work.\n+// run-pass\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+struct A<const N: u8>;\n+struct B<const N: u16>;\n+struct C<const N: u32>;\n+struct D<const N: u64>;\n+struct E<const N: u128>;\n+struct F<const N: usize>;\n+struct G<const N: i8>;\n+struct H<const N: i16>;\n+struct I<const N: i32>;\n+struct J<const N: i64>;\n+struct K<const N: i128>;\n+struct L<const N: isize>;\n+struct M<const N: char>;\n+struct N<const N: bool>;\n+\n+fn main() {\n+    let _ = A::<{u8::MIN}>;\n+    let _ = A::<{u8::MAX}>;\n+    let _ = B::<{u16::MIN}>;\n+    let _ = B::<{u16::MAX}>;\n+    let _ = C::<{u32::MIN}>;\n+    let _ = C::<{u32::MAX}>;\n+    let _ = D::<{u64::MIN}>;\n+    let _ = D::<{u64::MAX}>;\n+    let _ = E::<{u128::MIN}>;\n+    let _ = E::<{u128::MAX}>;\n+    let _ = F::<{usize::MIN}>;\n+    let _ = F::<{usize::MAX}>;\n+    let _ = G::<{i8::MIN}>;\n+    let _ = G::<{i8::MAX}>;\n+    let _ = H::<{i16::MIN}>;\n+    let _ = H::<{i16::MAX}>;\n+    let _ = I::<{i32::MIN}>;\n+    let _ = I::<{i32::MAX}>;\n+    let _ = J::<{i64::MIN}>;\n+    let _ = J::<{i64::MAX}>;\n+    let _ = K::<{i128::MIN}>;\n+    let _ = K::<{i128::MAX}>;\n+    let _ = L::<{isize::MIN}>;\n+    let _ = L::<{isize::MAX}>;\n+    let _ = M::<'A'>;\n+    let _ = N::<true>;\n+}"}, {"sha": "2aaf2c39875583ca9ec703a4ad04e5d9b103013b", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38ca6e3561dbd2465cd604feeed93cf82580745c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ca6e3561dbd2465cd604feeed93cf82580745c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs?ref=38ca6e3561dbd2465cd604feeed93cf82580745c", "patch": "@@ -1,4 +1,5 @@\n #![feature(min_const_generics)]\n+#![feature(never_type)]\n \n struct Foo<const N: [u8; 0]>;\n //~^ ERROR `[u8; 0]` is forbidden\n@@ -14,4 +15,14 @@ struct Fez<const N: No>;\n struct Faz<const N: &'static u8>;\n //~^ ERROR `&'static u8` is forbidden\n \n+struct Fiz<const N: !>;\n+//~^ ERROR `!` is forbidden\n+\n+enum Goo<const N: ()> { A, B }\n+//~^ ERROR `()` is forbidden\n+\n+union Boo<const N: ()> { a: () }\n+//~^ ERROR `()` is forbidden\n+\n+\n fn main() {}"}, {"sha": "52ed3c1c6ee8c80341234a9a915fb9997218a947", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.stderr", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/38ca6e3561dbd2465cd604feeed93cf82580745c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38ca6e3561dbd2465cd604feeed93cf82580745c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr?ref=38ca6e3561dbd2465cd604feeed93cf82580745c", "patch": "@@ -1,5 +1,5 @@\n error: `[u8; 0]` is forbidden as the type of a const generic parameter\n-  --> $DIR/complex-types.rs:3:21\n+  --> $DIR/complex-types.rs:4:21\n    |\n LL | struct Foo<const N: [u8; 0]>;\n    |                     ^^^^^^^\n@@ -8,7 +8,7 @@ LL | struct Foo<const N: [u8; 0]>;\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n-  --> $DIR/complex-types.rs:6:21\n+  --> $DIR/complex-types.rs:7:21\n    |\n LL | struct Bar<const N: ()>;\n    |                     ^^\n@@ -17,7 +17,7 @@ LL | struct Bar<const N: ()>;\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: `No` is forbidden as the type of a const generic parameter\n-  --> $DIR/complex-types.rs:11:21\n+  --> $DIR/complex-types.rs:12:21\n    |\n LL | struct Fez<const N: No>;\n    |                     ^^\n@@ -26,13 +26,40 @@ LL | struct Fez<const N: No>;\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/complex-types.rs:14:21\n+  --> $DIR/complex-types.rs:15:21\n    |\n LL | struct Faz<const N: &'static u8>;\n    |                     ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: aborting due to 4 previous errors\n+error: `!` is forbidden as the type of a const generic parameter\n+  --> $DIR/complex-types.rs:18:21\n+   |\n+LL | struct Fiz<const N: !>;\n+   |                     ^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: `()` is forbidden as the type of a const generic parameter\n+  --> $DIR/complex-types.rs:21:19\n+   |\n+LL | enum Goo<const N: ()> { A, B }\n+   |                   ^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: `()` is forbidden as the type of a const generic parameter\n+  --> $DIR/complex-types.rs:24:20\n+   |\n+LL | union Boo<const N: ()> { a: () }\n+   |                    ^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = note: more complex types are supported with `#[feature(const_generics)]`\n+\n+error: aborting due to 7 previous errors\n "}]}