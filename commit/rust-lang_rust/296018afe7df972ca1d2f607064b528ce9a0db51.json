{"sha": "296018afe7df972ca1d2f607064b528ce9a0db51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NjAxOGFmZTdkZjk3MmNhMWQyZjYwNzA2NGI1MjhjZTlhMGRiNTE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-15T07:34:22Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-15T07:34:22Z"}, "message": "Preserve trailing whitespaces only for doc comment", "tree": {"sha": "a9f30a1600017ea98cf6f8a57310ffcc7f9e57b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f30a1600017ea98cf6f8a57310ffcc7f9e57b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/296018afe7df972ca1d2f607064b528ce9a0db51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/296018afe7df972ca1d2f607064b528ce9a0db51", "html_url": "https://github.com/rust-lang/rust/commit/296018afe7df972ca1d2f607064b528ce9a0db51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/296018afe7df972ca1d2f607064b528ce9a0db51/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe30dab01785e047b98d89cb27aed84b8137adb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe30dab01785e047b98d89cb27aed84b8137adb2", "html_url": "https://github.com/rust-lang/rust/commit/fe30dab01785e047b98d89cb27aed84b8137adb2"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "523282396d04c59be6a2dde9fb7f163eaadb5ebe", "filename": "rustfmt-core/src/comment.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/296018afe7df972ca1d2f607064b528ce9a0db51/rustfmt-core%2Fsrc%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296018afe7df972ca1d2f607064b528ce9a0db51/rustfmt-core%2Fsrc%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fcomment.rs?ref=296018afe7df972ca1d2f607064b528ce9a0db51", "patch": "@@ -214,11 +214,25 @@ pub fn combine_strs_with_missing_comments(\n     ))\n }\n \n+pub fn rewrite_doc_comment(orig: &str, shape: Shape, config: &Config) -> Option<String> {\n+    _rewrite_comment(orig, false, shape, config, true)\n+}\n+\n pub fn rewrite_comment(\n     orig: &str,\n     block_style: bool,\n     shape: Shape,\n     config: &Config,\n+) -> Option<String> {\n+    _rewrite_comment(orig, block_style, shape, config, false)\n+}\n+\n+fn _rewrite_comment(\n+    orig: &str,\n+    block_style: bool,\n+    shape: Shape,\n+    config: &Config,\n+    is_doc_comment: bool,\n ) -> Option<String> {\n     // If there are lines without a starting sigil, we won't format them correctly\n     // so in that case we won't even re-align (if !config.normalize_comments()) and\n@@ -231,7 +245,7 @@ pub fn rewrite_comment(\n         return Some(orig.to_owned());\n     }\n     if !config.normalize_comments() && !config.wrap_comments() {\n-        return light_rewrite_comment(orig, shape.indent, config);\n+        return light_rewrite_comment(orig, shape.indent, config, is_doc_comment);\n     }\n \n     identify_comment(orig, block_style, shape, config)\n@@ -495,16 +509,23 @@ pub fn recover_missing_comment_in_span(\n }\n \n /// Trim trailing whitespaces unless they consist of two whitespaces.\n-fn trim_right_unless_two_whitespaces(s: &str) -> &str {\n-    if s.ends_with(\"  \") && !s.chars().rev().nth(2).map_or(true, char::is_whitespace) {\n+fn trim_right_unless_two_whitespaces(s: &str, is_doc_comment: bool) -> &str {\n+    if is_doc_comment && s.ends_with(\"  \")\n+        && !s.chars().rev().nth(2).map_or(true, char::is_whitespace)\n+    {\n         s\n     } else {\n         s.trim_right()\n     }\n }\n \n /// Trims whitespace and aligns to indent, but otherwise does not change comments.\n-fn light_rewrite_comment(orig: &str, offset: Indent, config: &Config) -> Option<String> {\n+fn light_rewrite_comment(\n+    orig: &str,\n+    offset: Indent,\n+    config: &Config,\n+    is_doc_comment: bool,\n+) -> Option<String> {\n     let lines: Vec<&str> = orig.lines()\n         .map(|l| {\n             // This is basically just l.trim(), but in the case that a line starts\n@@ -521,7 +542,7 @@ fn light_rewrite_comment(orig: &str, offset: Indent, config: &Config) -> Option<\n                 \"\"\n             };\n             // Preserve markdown's double-space line break syntax.\n-            trim_right_unless_two_whitespaces(left_trimmed)\n+            trim_right_unless_two_whitespaces(left_trimmed, is_doc_comment)\n         })\n         .collect();\n     Some(lines.join(&format!(\"\\n{}\", offset.to_string(config))))"}, {"sha": "2d10be39d092b21dca45c8a7921ba47099691b88", "filename": "rustfmt-core/src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/296018afe7df972ca1d2f607064b528ce9a0db51/rustfmt-core%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296018afe7df972ca1d2f607064b528ce9a0db51/rustfmt-core%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Fsrc%2Fvisitor.rs?ref=296018afe7df972ca1d2f607064b528ce9a0db51", "patch": "@@ -19,7 +19,7 @@ use syntax::parse::ParseSess;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, CodeCharKind,\n               CommentCodeSlices, FindUncommented};\n-use comment::rewrite_comment;\n+use comment::rewrite_doc_comment;\n use config::{BraceStyle, Config};\n use expr::rewrite_literal;\n use items::{format_impl, format_trait, format_trait_alias, rewrite_associated_impl_type,\n@@ -892,7 +892,7 @@ impl Rewrite for ast::Attribute {\n                     .unwrap_or(0),\n                 ..shape\n             };\n-            rewrite_comment(snippet, false, doc_shape, context.config)\n+            rewrite_doc_comment(snippet, doc_shape, context.config)\n         } else {\n             if contains_comment(snippet) {\n                 return Some(snippet.to_owned());\n@@ -957,7 +957,7 @@ fn rewrite_first_group_attrs(\n             .join(\"\\n\");\n         return Some((\n             sugared_docs.len(),\n-            rewrite_comment(&snippet, false, shape, context.config)?,\n+            rewrite_doc_comment(&snippet, shape, context.config)?,\n         ));\n     }\n     // Rewrite `#[derive(..)]`s."}, {"sha": "c3633141ba5d59b32feec43b2b62cb2935ef36e4", "filename": "rustfmt-core/tests/source/markdown-comment.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/296018afe7df972ca1d2f607064b528ce9a0db51/rustfmt-core%2Ftests%2Fsource%2Fmarkdown-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296018afe7df972ca1d2f607064b528ce9a0db51/rustfmt-core%2Ftests%2Fsource%2Fmarkdown-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Fmarkdown-comment.rs?ref=296018afe7df972ca1d2f607064b528ce9a0db51", "patch": "@@ -1,8 +1,12 @@\n+// Preserve two trailing whitespaces in doc comment,\n+// but trim any whitespaces in normal comment.\n+\n //! hello world  \n //! hello world \n \n /// hello world  \n /// hello world \n+/// hello world  \n fn foo() {\n     // hello world  \n     // hello world "}, {"sha": "5c4c413bddf5959b51b3b22091cf3dde6c6c1738", "filename": "rustfmt-core/tests/target/markdown-comment.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/296018afe7df972ca1d2f607064b528ce9a0db51/rustfmt-core%2Ftests%2Ftarget%2Fmarkdown-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296018afe7df972ca1d2f607064b528ce9a0db51/rustfmt-core%2Ftests%2Ftarget%2Fmarkdown-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Ftarget%2Fmarkdown-comment.rs?ref=296018afe7df972ca1d2f607064b528ce9a0db51", "patch": "@@ -1,10 +1,14 @@\n+// Preserve two trailing whitespaces in doc comment,\n+// but trim any whitespaces in normal comment.\n+\n //! hello world  \n //! hello world\n \n /// hello world  \n /// hello world\n+/// hello world  \n fn foo() {\n-    // hello world  \n+    // hello world\n     // hello world\n     let x = 3;\n     println!(\"x = {}\", x);"}]}