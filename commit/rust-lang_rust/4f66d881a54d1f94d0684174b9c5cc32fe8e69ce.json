{"sha": "4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNjZkODgxYTU0ZDFmOTRkMDY4NDE3NGI5YzVjYzMyZmU4ZTY5Y2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-28T09:20:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-28T09:20:49Z"}, "message": "Auto merge of #25843 - shepmaster:remove-public-int-and-uint, r=huonw", "tree": {"sha": "7928c4318efcf1c0f22088ba0a7540996bfbce3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7928c4318efcf1c0f22088ba0a7540996bfbce3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "html_url": "https://github.com/rust-lang/rust/commit/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "448ce12bc1c20e19fb5c798f1583d8e69969b5f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/448ce12bc1c20e19fb5c798f1583d8e69969b5f1", "html_url": "https://github.com/rust-lang/rust/commit/448ce12bc1c20e19fb5c798f1583d8e69969b5f1"}, {"sha": "a959cc435f4f5821d26ae36716d6a46e2af550af", "url": "https://api.github.com/repos/rust-lang/rust/commits/a959cc435f4f5821d26ae36716d6a46e2af550af", "html_url": "https://github.com/rust-lang/rust/commit/a959cc435f4f5821d26ae36716d6a46e2af550af"}], "stats": {"total": 62, "additions": 23, "deletions": 39}, "files": [{"sha": "e887ed0cc5297042cf6dd712b6ddaf97e5415b1b", "filename": "src/doc/complement-design-faq.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fcomplement-design-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fcomplement-design-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-design-faq.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -160,7 +160,7 @@ that all delimiters be balanced.\n ## `->` for function return type\n \n This is to make the language easier to parse for humans, especially in the face\n-of higher-order functions. `fn foo<T>(f: fn(int): int, fn(T): U): U` is not\n+of higher-order functions. `fn foo<T>(f: fn(i32): i32, fn(T): U): U` is not\n particularly easy to read.\n \n ## Why is `let` used to introduce variables?"}, {"sha": "d530301a90939ec4fbf69858c4f6a4a570d11621", "filename": "src/doc/style/errors/ergonomics.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -14,8 +14,8 @@ use std::io::{File, Open, Write, IoError};\n \n struct Info {\n     name: String,\n-    age: int,\n-    rating: int\n+    age: i32,\n+    rating: i32\n }\n \n fn write_info(info: &Info) -> Result<(), IoError> {\n@@ -36,8 +36,8 @@ use std::io::{File, Open, Write, IoError};\n \n struct Info {\n     name: String,\n-    age: int,\n-    rating: int\n+    age: i32,\n+    rating: i32\n }\n \n fn write_info(info: &Info) -> Result<(), IoError> {"}, {"sha": "9b9500008c2f6a774457c3effaf1637d2dcee1d3", "filename": "src/doc/style/features/functions-and-methods/input.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -57,15 +57,15 @@ it becomes.\n Prefer\n \n ```rust\n-fn foo<T: Iterator<int>>(c: T) { ... }\n+fn foo<T: Iterator<i32>>(c: T) { ... }\n ```\n \n over any of\n \n ```rust\n-fn foo(c: &[int]) { ... }\n-fn foo(c: &Vec<int>) { ... }\n-fn foo(c: &SomeOtherCollection<int>) { ... }\n+fn foo(c: &[i32]) { ... }\n+fn foo(c: &Vec<i32>) { ... }\n+fn foo(c: &SomeOtherCollection<i32>) { ... }\n ```\n \n if the function only needs to iterate over the data.\n@@ -121,7 +121,7 @@ The primary exception: sometimes a function is meant to modify data\n that the caller already owns, for example to re-use a buffer:\n \n ```rust\n-fn read(&mut self, buf: &mut [u8]) -> IoResult<uint>\n+fn read(&mut self, buf: &mut [u8]) -> IoResult<usize>\n ```\n \n (From the [Reader trait](http://static.rust-lang.org/doc/master/std/io/trait.Reader.html#tymethod.read).)"}, {"sha": "3e43d1e416d7696759d37a7dae545655fb951810", "filename": "src/doc/style/features/functions-and-methods/output.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Foutput.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Foutput.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Foutput.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -19,15 +19,15 @@ Prefer\n ```rust\n struct SearchResult {\n     found: bool,          // item in container?\n-    expected_index: uint  // what would the item's index be?\n+    expected_index: usize // what would the item's index be?\n }\n \n fn binary_search(&self, k: Key) -> SearchResult\n ```\n or\n \n ```rust\n-fn binary_search(&self, k: Key) -> (bool, uint)\n+fn binary_search(&self, k: Key) -> (bool, usize)\n ```\n \n over"}, {"sha": "f13a84f6fee862bbc4f58692d967e97d6e4dba06", "filename": "src/doc/style/features/let.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ffeatures%2Flet.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ffeatures%2Flet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Flet.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -5,7 +5,7 @@\n Prefer\n \n ```rust\n-fn use_mutex(m: sync::mutex::Mutex<int>) {\n+fn use_mutex(m: sync::mutex::Mutex<i32>) {\n     let guard = m.lock();\n     do_work(guard);\n     drop(guard); // unlock the lock\n@@ -16,7 +16,7 @@ fn use_mutex(m: sync::mutex::Mutex<int>) {\n over\n \n ```rust\n-fn use_mutex(m: sync::mutex::Mutex<int>) {\n+fn use_mutex(m: sync::mutex::Mutex<i32>) {\n     do_work(m.lock());\n     // do other work\n }"}, {"sha": "61f8db87cde8983fc068c154614f24fef95324e4", "filename": "src/doc/style/features/traits/reuse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Freuse.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Freuse.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Freuse.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -15,7 +15,7 @@ trait Printable {\n     fn print(&self) { println!(\"{:?}\", *self) }\n }\n \n-impl Printable for int {}\n+impl Printable for i32 {}\n \n impl Printable for String {\n     fn print(&self) { println!(\"{}\", *self) }"}, {"sha": "e69aa3b83bfa4ecf08367516beec54986db65551", "filename": "src/doc/style/features/types/newtype.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ffeatures%2Ftypes%2Fnewtype.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Ffeatures%2Ftypes%2Fnewtype.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ftypes%2Fnewtype.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -43,12 +43,12 @@ promises to the client.\n \n For example, consider a function `my_transform` that returns a compound iterator\n type `Enumerate<Skip<vec::MoveItems<T>>>`. We wish to hide this type from the\n-client, so that the client's view of the return type is roughly `Iterator<(uint,\n+client, so that the client's view of the return type is roughly `Iterator<(usize,\n T)>`. We can do so using the newtype pattern:\n \n ```rust\n struct MyTransformResult<T>(Enumerate<Skip<vec::MoveItems<T>>>);\n-impl<T> Iterator<(uint, T)> for MyTransformResult<T> { ... }\n+impl<T> Iterator<(usize, T)> for MyTransformResult<T> { ... }\n \n fn my_transform<T, Iter: Iterator<T>>(iter: Iter) -> MyTransformResult<T> {\n     ..."}, {"sha": "b5d0b484ccda5ad4819fb8d174f29a3a19e16aa5", "filename": "src/doc/style/style/features.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Fstyle%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Fstyle%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Ffeatures.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -3,7 +3,7 @@\n Terminate `return` statements with semicolons:\n \n ``` rust\n-fn foo(bar: int) -> Option<int> {\n+fn foo(bar: i32) -> Option<i32> {\n     if some_condition() {\n         return None;\n     }"}, {"sha": "cf3fd4163a26e6b16ed8ab584ae93f466128ae27", "filename": "src/doc/style/style/imports.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Fstyle%2Fimports.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Fstyle%2Fimports.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Fimports.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -44,7 +44,7 @@ For example:\n use option::Option;\n use mem;\n \n-let i: int = mem::transmute(Option(0));\n+let i: isize = mem::transmute(Option(0));\n ```\n \n > **[FIXME]** Add rationale."}, {"sha": "c28a723209563c1c7aeb663e8ebe74c4d17db1d7", "filename": "src/doc/style/style/whitespace.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Fstyle%2Fwhitespace.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Fstyle%2Fstyle%2Fwhitespace.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Fwhitespace.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -10,7 +10,7 @@\n \n ``` rust\n #[deprecated = \"Use `bar` instead.\"]\n-fn foo(a: uint, b: uint) -> uint {\n+fn foo(a: usize, b: usize) -> usize {\n     a + b\n }\n ```"}, {"sha": "ec96880f12a95c0310b8ae7451d18da14601fe32", "filename": "src/doc/trpl/associated-types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Ftrpl%2Fassociated-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Ftrpl%2Fassociated-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fassociated-types.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -43,7 +43,7 @@ trait Graph {\n Now, our clients can be abstract over a given `Graph`:\n \n ```rust,ignore\n-fn distance<G: Graph>(graph: &G, start: &G::N, end: &G::N) -> uint { ... }\n+fn distance<G: Graph>(graph: &G, start: &G::N, end: &G::N) -> usize { ... }\n ```\n \n No need to deal with the `E`dge type here!"}, {"sha": "8d83b64d68313441c4a704e438de8eab5ff4f296", "filename": "src/doc/trpl/box-syntax-and-patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Ftrpl%2Fbox-syntax-and-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Ftrpl%2Fbox-syntax-and-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fbox-syntax-and-patterns.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -58,7 +58,7 @@ fn main() {\n ```\n \n The idea is that by passing around a box, you're only copying a pointer, rather\n-than the hundred `int`s that make up the `BigStruct`.\n+than the hundred `i32`s that make up the `BigStruct`.\n \n This is an antipattern in Rust. Instead, write this:\n "}, {"sha": "9ac170ddec2985ab82c0cf2381b49966f29e7c2c", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -146,7 +146,7 @@ print_area(5);\n We get a compile-time error:\n \n ```text\n-error: failed to find an implementation of trait main::HasArea for int\n+error: the trait `HasArea` is not implemented for the type `_` [E0277]\n ```\n \n So far, we\u2019ve only added trait implementations to structs, but you can"}, {"sha": "2cdfe03eafe7f10ebb2760f13a42937ea47b84c0", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -9,10 +9,6 @@\n // except according to those terms.\n \n //! Operations and constants for pointer-sized signed integers (`isize` type)\n-//!\n-//! This type was recently added to replace `int`. The rollout of the\n-//! new type will gradually take place over the alpha cycle along with\n-//! the development of clearer conventions around integer types.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"isize\")]"}, {"sha": "6fd23425e4d897476b53c73ec3a5ea7b3f360f04", "filename": "src/libcore/num/usize.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Flibcore%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Flibcore%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fusize.rs?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -9,10 +9,6 @@\n // except according to those terms.\n \n //! Operations and constants for pointer-sized unsigned integers (`usize` type)\n-//!\n-//! This type was recently added to replace `uint`. The rollout of the\n-//! new type will gradually take place over the alpha cycle along with\n-//! the development of clearer conventions around integer types.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"usize\")]"}, {"sha": "aa89f858f6f63b0c34b78577ece88320996c4391", "filename": "src/libstd/num/isize.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Flibstd%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Flibstd%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fisize.rs?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -9,10 +9,6 @@\n // except according to those terms.\n \n //! Operations and constants for pointer-sized signed integers (`isize` type)\n-//!\n-//! This type was recently added to replace `int`. The rollout of the\n-//! new type will gradually take place over the alpha cycle along with\n-//! the development of clearer conventions around integer types.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"isize\")]"}, {"sha": "b54d8ae96c5cf468f8508e80e118ffcb9d8bf60e", "filename": "src/libstd/num/usize.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Flibstd%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f66d881a54d1f94d0684174b9c5cc32fe8e69ce/src%2Flibstd%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fusize.rs?ref=4f66d881a54d1f94d0684174b9c5cc32fe8e69ce", "patch": "@@ -9,10 +9,6 @@\n // except according to those terms.\n \n //! Operations and constants for pointer-sized unsigned integers (`usize` type)\n-//!\n-//! This type was recently added to replace `uint`. The rollout of the\n-//! new type will gradually take place over the alpha cycle along with\n-//! the development of clearer conventions around integer types.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"usize\")]"}]}