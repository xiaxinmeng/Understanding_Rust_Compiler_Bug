{"sha": "6739299d18a16851140bc6b24b8eeae31e3d5878", "node_id": "C_kwDOAAsO6NoAKDY3MzkyOTlkMThhMTY4NTExNDBiYzZiMjRiOGVlYWUzMWUzZDU4Nzg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-02T01:02:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-02T01:39:51Z"}, "message": "Miri/CTFE: properly treat overflow in (signed) division/rem as UB", "tree": {"sha": "03a1d2f6a86748a6bc5c7811fb6c8de4664c8785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03a1d2f6a86748a6bc5c7811fb6c8de4664c8785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6739299d18a16851140bc6b24b8eeae31e3d5878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6739299d18a16851140bc6b24b8eeae31e3d5878", "html_url": "https://github.com/rust-lang/rust/commit/6739299d18a16851140bc6b24b8eeae31e3d5878", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6739299d18a16851140bc6b24b8eeae31e3d5878/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c4da49983aa699f715caf681e3154b445fb60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c4da49983aa699f715caf681e3154b445fb60b", "html_url": "https://github.com/rust-lang/rust/commit/f0c4da49983aa699f715caf681e3154b445fb60b"}], "stats": {"total": 169, "additions": 93, "deletions": 76}, "files": [{"sha": "bf7e811c76f8edc4dfa228d5f8a26de4d08a2f73", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6739299d18a16851140bc6b24b8eeae31e3d5878/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6739299d18a16851140bc6b24b8eeae31e3d5878/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=6739299d18a16851140bc6b24b8eeae31e3d5878", "patch": "@@ -500,15 +500,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // `x % y != 0` or `y == 0` or `x == T::MIN && y == -1`.\n         // First, check x % y != 0 (or if that computation overflows).\n         let (res, overflow, _ty) = self.overflowing_binary_op(BinOp::Rem, &a, &b)?;\n-        if overflow || res.assert_bits(a.layout.size) != 0 {\n-            // Then, check if `b` is -1, which is the \"MIN / -1\" case.\n-            let minus1 = Scalar::from_int(-1, dest.layout.size);\n-            let b_scalar = b.to_scalar().unwrap();\n-            if b_scalar == minus1 {\n-                throw_ub_format!(\"exact_div: result of dividing MIN by -1 cannot be represented\")\n-            } else {\n-                throw_ub_format!(\"exact_div: {} cannot be divided by {} without remainder\", a, b,)\n-            }\n+        assert!(!overflow); // All overflow is UB, so this should never return on overflow.\n+        if res.assert_bits(a.layout.size) != 0 {\n+            throw_ub_format!(\"exact_div: {} cannot be divided by {} without remainder\", a, b)\n         }\n         // `Rem` says this is all right, so we can let `Div` do its job.\n         self.binop_ignore_overflow(BinOp::Div, &a, &b, dest)"}, {"sha": "079ce9f07b8e10f5e322ec4c03add05fc224dfec", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6739299d18a16851140bc6b24b8eeae31e3d5878/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6739299d18a16851140bc6b24b8eeae31e3d5878/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=6739299d18a16851140bc6b24b8eeae31e3d5878", "patch": "@@ -196,16 +196,20 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 _ => None,\n             };\n             if let Some(op) = op {\n+                let l = self.sign_extend(l, left_layout) as i128;\n                 let r = self.sign_extend(r, right_layout) as i128;\n-                // We need a special check for overflowing remainder:\n-                // \"int_min % -1\" overflows and returns 0, but after casting things to a larger int\n-                // type it does *not* overflow nor give an unrepresentable result!\n-                if bin_op == Rem {\n-                    if r == -1 && l == (1 << (size.bits() - 1)) {\n-                        return Ok((Scalar::from_int(0, size), true, left_layout.ty));\n+\n+                // We need a special check for overflowing Rem and Div since they are *UB*\n+                // on overflow, which can happen with \"int_min $OP -1\".\n+                if matches!(bin_op, Rem | Div) {\n+                    if l == size.signed_int_min() && r == -1 {\n+                        if bin_op == Rem {\n+                            throw_ub!(RemainderOverflow)\n+                        } else {\n+                            throw_ub!(DivisionOverflow)\n+                        }\n                     }\n                 }\n-                let l = self.sign_extend(l, left_layout) as i128;\n \n                 let (result, oflo) = op(l, r);\n                 // This may be out-of-bounds for the result type, so we have to truncate ourselves."}, {"sha": "389d31ea0c47264a0706cf18778ffd0cf57ab612", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6739299d18a16851140bc6b24b8eeae31e3d5878/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6739299d18a16851140bc6b24b8eeae31e3d5878/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=6739299d18a16851140bc6b24b8eeae31e3d5878", "patch": "@@ -233,6 +233,10 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n     DivisionByZero,\n     /// Something was \"remainded\" by 0 (x % 0).\n     RemainderByZero,\n+    /// Signed division overflowed (INT_MIN / -1).\n+    DivisionOverflow,\n+    /// Signed remainder overflowed (INT_MIN % -1).\n+    RemainderOverflow,\n     /// Overflowing inbounds pointer arithmetic.\n     PointerArithOverflow,\n     /// Invalid metadata in a wide pointer (using `str` to avoid allocations).\n@@ -310,6 +314,8 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             }\n             DivisionByZero => write!(f, \"dividing by zero\"),\n             RemainderByZero => write!(f, \"calculating the remainder with a divisor of zero\"),\n+            DivisionOverflow => write!(f, \"overflow in signed division (dividing MIN by -1)\"),\n+            RemainderOverflow => write!(f, \"overflow in signed remainder (dividing MIN by -1)\"),\n             PointerArithOverflow => write!(f, \"overflowing in-bounds pointer arithmetic\"),\n             InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {}\", msg),\n             InvalidVtableDropFn(sig) => write!("}, {"sha": "b724b527c7dfb0613306e61022fdb7663988b849", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6739299d18a16851140bc6b24b8eeae31e3d5878/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6739299d18a16851140bc6b24b8eeae31e3d5878/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=6739299d18a16851140bc6b24b8eeae31e3d5878", "patch": "@@ -1200,12 +1200,21 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                             AssertKind::RemainderByZero(op) => {\n                                 Some(AssertKind::RemainderByZero(eval_to_int(op)))\n                             }\n+                            AssertKind::Overflow(bin_op @ (BinOp::Div | BinOp::Rem), op1, op2) => {\n+                                // Division overflow is *UB* in the MIR, and different than the\n+                                // other overflow checks.\n+                                Some(AssertKind::Overflow(\n+                                    *bin_op,\n+                                    eval_to_int(op1),\n+                                    eval_to_int(op2),\n+                                ))\n+                            }\n                             AssertKind::BoundsCheck { ref len, ref index } => {\n                                 let len = eval_to_int(len);\n                                 let index = eval_to_int(index);\n                                 Some(AssertKind::BoundsCheck { len, index })\n                             }\n-                            // Overflow is are already covered by checks on the binary operators.\n+                            // Remaining overflow errors are already covered by checks on the binary operators.\n                             AssertKind::Overflow(..) | AssertKind::OverflowNeg(_) => None,\n                             // Need proper const propagator for these.\n                             _ => None,"}, {"sha": "8ded139a1809f7ef14017e78661d255b39c1d023", "filename": "library/core/tests/num/wrapping.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6739299d18a16851140bc6b24b8eeae31e3d5878/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6739299d18a16851140bc6b24b8eeae31e3d5878/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fwrapping.rs?ref=6739299d18a16851140bc6b24b8eeae31e3d5878", "patch": "@@ -308,3 +308,13 @@ fn wrapping_int_api() {\n         }\n     }\n }\n+\n+#[test]\n+fn wrapping_const() {\n+    // Specifically the wrapping behavior of division and remainder is subtle,\n+    // see https://github.com/rust-lang/rust/pull/94512.\n+    const _: () = {\n+        assert!(i32::MIN.wrapping_div(-1) == i32::MIN);\n+        assert!(i32::MIN.wrapping_rem(-1) == 0);\n+    };\n+}"}, {"sha": "ad880d56d904d8eb1d7ac2165704839be9e9626f", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6739299d18a16851140bc6b24b8eeae31e3d5878/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6739299d18a16851140bc6b24b8eeae31e3d5878/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=6739299d18a16851140bc6b24b8eeae31e3d5878", "patch": "@@ -266,7 +266,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-int-unchecked.rs:134:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_div(i32::MIN, -1) };\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_div`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow in signed division (dividing MIN by -1)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-int-unchecked.rs:137:25\n@@ -278,7 +278,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const-int-unchecked.rs:139:25\n    |\n LL | const _: i32 = unsafe { std::intrinsics::unchecked_rem(i32::MIN, -1) };\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_rem`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow in signed remainder (dividing MIN by -1)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const-int-unchecked.rs:144:25"}, {"sha": "e2eee1ccdc98cf753eb72dec0614620ac7d056e6", "filename": "src/test/ui/numbers-arithmetic/issue-8460-const.noopt.stderr", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6739299d18a16851140bc6b24b8eeae31e3d5878/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6739299d18a16851140bc6b24b8eeae31e3d5878/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.noopt.stderr?ref=6739299d18a16851140bc6b24b8eeae31e3d5878", "patch": "@@ -1,36 +1,36 @@\n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n-   = note: `#[deny(arithmetic_overflow)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n@@ -41,8 +41,6 @@ error: this operation will panic at runtime\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n-   |\n-   = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:27:36\n@@ -74,37 +72,37 @@ error: this operation will panic at runtime\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());"}, {"sha": "e2eee1ccdc98cf753eb72dec0614620ac7d056e6", "filename": "src/test/ui/numbers-arithmetic/issue-8460-const.opt.stderr", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6739299d18a16851140bc6b24b8eeae31e3d5878/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6739299d18a16851140bc6b24b8eeae31e3d5878/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt.stderr?ref=6739299d18a16851140bc6b24b8eeae31e3d5878", "patch": "@@ -1,36 +1,36 @@\n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n-   = note: `#[deny(arithmetic_overflow)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n@@ -41,8 +41,6 @@ error: this operation will panic at runtime\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n-   |\n-   = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:27:36\n@@ -74,37 +72,37 @@ error: this operation will panic at runtime\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());"}, {"sha": "e2eee1ccdc98cf753eb72dec0614620ac7d056e6", "filename": "src/test/ui/numbers-arithmetic/issue-8460-const.opt_with_overflow_checks.stderr", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6739299d18a16851140bc6b24b8eeae31e3d5878/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6739299d18a16851140bc6b24b8eeae31e3d5878/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.opt_with_overflow_checks.stderr?ref=6739299d18a16851140bc6b24b8eeae31e3d5878", "patch": "@@ -1,36 +1,36 @@\n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute `isize::MIN / -1_isize`, which would overflow\n    |\n-   = note: `#[deny(arithmetic_overflow)]` on by default\n+   = note: `#[deny(unconditional_panic)]` on by default\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute `i8::MIN / -1_i8`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i16::MIN / -1_i16`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i32::MIN / -1_i32`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute `i64::MIN / -1_i64`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n@@ -41,8 +41,6 @@ error: this operation will panic at runtime\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide `1_isize` by zero\n-   |\n-   = note: `#[deny(unconditional_panic)]` on by default\n \n error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:27:36\n@@ -74,37 +72,37 @@ error: this operation will panic at runtime\n LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n    |                                    ^^^^^^^^^ attempt to divide `1_i128` by zero\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:37:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to compute the remainder of `isize::MIN % -1_isize`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to compute the remainder of `i8::MIN % -1_i8`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i16::MIN % -1_i16`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i32::MIN % -1_i32`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to compute the remainder of `i64::MIN % -1_i64`, which would overflow\n \n-error: this arithmetic operation will overflow\n+error: this operation will panic at runtime\n   --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());"}, {"sha": "8cad6deb3db5e2df3b71341b41d45ac05a708f1b", "filename": "src/test/ui/numbers-arithmetic/issue-8460-const.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6739299d18a16851140bc6b24b8eeae31e3d5878/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6739299d18a16851140bc6b24b8eeae31e3d5878/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fissue-8460-const.rs?ref=6739299d18a16851140bc6b24b8eeae31e3d5878", "patch": "@@ -11,17 +11,17 @@ use std::thread;\n \n fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n@@ -35,17 +35,17 @@ fn main() {\n     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n     //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n-    //~^ ERROR arithmetic operation will overflow\n+    //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR operation will panic\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());"}]}