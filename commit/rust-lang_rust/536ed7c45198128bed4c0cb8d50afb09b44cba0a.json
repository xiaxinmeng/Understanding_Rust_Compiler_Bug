{"sha": "536ed7c45198128bed4c0cb8d50afb09b44cba0a", "node_id": "C_kwDOAAsO6NoAKDUzNmVkN2M0NTE5ODEyOGJlZDRjMGNiOGQ1MGFmYjA5YjQ0Y2JhMGE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-14T09:15:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-14T09:15:19Z"}, "message": "Merge #11004\n\n11004: Fix: Infer associated method in local scope r=flodiebold a=XFFXFF\n\nfixes #10936 \n\nCo-authored-by: zhoufan <1247714429@qq.com>", "tree": {"sha": "a2e72451a295d557fa06d5d5d9e297710df9c7fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e72451a295d557fa06d5d5d9e297710df9c7fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/536ed7c45198128bed4c0cb8d50afb09b44cba0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhuGCnCRBK7hj4Ov3rIwAAVA0IAGh5BwEcTgB6hbxK9mVXjWa9\n0alzdcwoR/uSyk3+xPar15ecZG4MvAhjX/IZKvw7ulQF+K3kCORIoqbAWT9oHzJ7\ng68eF061fd/65Ehve8zRJuKNJG1hiIk6wleBW7NmQ6NDJxwThEltsh3sRK3ZiTg1\nBM/GbLqvhUc2Qn0E0w83HAOX7Nx0dO9x/3e49GBGHFX9bbOksL5wZ+X+MLrowYv9\naIQkLV44+sxM6HjlopMHpV1JLDxG7v9bYQ8eB/8meWV6joWY4794UOTBeE4Cp5xv\nVxJXTM1rn/4E6Tdn4Nae96NrqbEUd/h9UVSYAM5j2cFa9v+tslYq3kBB7T7VOcU=\n=Cstb\n-----END PGP SIGNATURE-----\n", "payload": "tree a2e72451a295d557fa06d5d5d9e297710df9c7fa\nparent 791722b70ad08641a48f96faedffdda6d2880366\nparent c3ad945d9b820c3e31177dc394bf35383d57b468\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639473319 +0000\ncommitter GitHub <noreply@github.com> 1639473319 +0000\n\nMerge #11004\n\n11004: Fix: Infer associated method in local scope r=flodiebold a=XFFXFF\n\nfixes #10936 \n\nCo-authored-by: zhoufan <1247714429@qq.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/536ed7c45198128bed4c0cb8d50afb09b44cba0a", "html_url": "https://github.com/rust-lang/rust/commit/536ed7c45198128bed4c0cb8d50afb09b44cba0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/536ed7c45198128bed4c0cb8d50afb09b44cba0a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791722b70ad08641a48f96faedffdda6d2880366", "url": "https://api.github.com/repos/rust-lang/rust/commits/791722b70ad08641a48f96faedffdda6d2880366", "html_url": "https://github.com/rust-lang/rust/commit/791722b70ad08641a48f96faedffdda6d2880366"}, {"sha": "c3ad945d9b820c3e31177dc394bf35383d57b468", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ad945d9b820c3e31177dc394bf35383d57b468", "html_url": "https://github.com/rust-lang/rust/commit/c3ad945d9b820c3e31177dc394bf35383d57b468"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "06689e1d29f90329a0e6ffeaa2c48e22cdf7a3e3", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/536ed7c45198128bed4c0cb8d50afb09b44cba0a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536ed7c45198128bed4c0cb8d50afb09b44cba0a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=536ed7c45198128bed4c0cb8d50afb09b44cba0a", "patch": "@@ -227,7 +227,7 @@ impl<'a> InferenceContext<'a> {\n             self.table.trait_env.clone(),\n             krate,\n             &traits_in_scope,\n-            None,\n+            self.resolver.module(),\n             Some(name),\n             method_resolution::LookupMode::Path,\n             move |_ty, item| {"}, {"sha": "9c0c00da3b1d2ecf8ae69930aa70ab7eedbac620", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/536ed7c45198128bed4c0cb8d50afb09b44cba0a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536ed7c45198128bed4c0cb8d50afb09b44cba0a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=536ed7c45198128bed4c0cb8d50afb09b44cba0a", "patch": "@@ -84,6 +84,37 @@ fn infer_associated_method_struct() {\n     );\n }\n \n+#[test]\n+fn infer_associated_method_struct_in_local_scope() {\n+    check_infer(\n+        r#\"\n+        fn mismatch() {\n+            struct A;\n+\n+            impl A {\n+                fn from(_: i32, _: i32) -> Self {\n+                    A\n+                }\n+            }\n+\n+            let _a = A::from(1, 2);\n+        }\n+        \"#,\n+        expect![[r#\"\n+            14..146 '{     ... 2); }': ()\n+            125..127 '_a': A\n+            130..137 'A::from': fn from(i32, i32) -> A\n+            130..143 'A::from(1, 2)': A\n+            138..139 '1': i32\n+            141..142 '2': i32\n+            60..61 '_': i32\n+            68..69 '_': i32\n+            84..109 '{     ...     }': A\n+            98..99 'A': A\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn infer_associated_method_enum() {\n     check_infer(\n@@ -277,7 +308,7 @@ fn test() {\n pub mod foo {\n     pub struct S;\n     impl S {\n-        fn thing() -> i128 { 0 }\n+        pub fn thing() -> i128 { 0 }\n     }\n }\n \"#,"}, {"sha": "28dd2afa02a381203848670912ac7fad22d87efa", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/536ed7c45198128bed4c0cb8d50afb09b44cba0a/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/536ed7c45198128bed4c0cb8d50afb09b44cba0a/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=536ed7c45198128bed4c0cb8d50afb09b44cba0a", "patch": "@@ -823,10 +823,10 @@ fn test_hover_infer_associated_method_exact() {\n     check(\n         r#\"\n mod wrapper {\n-    struct Thing { x: u32 }\n+    pub struct Thing { x: u32 }\n \n     impl Thing {\n-        fn new() -> Thing { Thing { x: 0 } }\n+        pub fn new() -> Thing { Thing { x: 0 } }\n     }\n }\n \n@@ -840,9 +840,9 @@ fn main() { let foo_test = wrapper::Thing::new$0(); }\n                 ```\n \n                 ```rust\n-                fn new() -> Thing\n+                pub fn new() -> Thing\n                 ```\n-            \"#]],\n+        \"#]],\n     )\n }\n "}]}