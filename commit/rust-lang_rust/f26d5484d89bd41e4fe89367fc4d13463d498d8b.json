{"sha": "f26d5484d89bd41e4fe89367fc4d13463d498d8b", "node_id": "C_kwDOAAsO6NoAKGYyNmQ1NDg0ZDg5YmQ0MWU0ZmU4OTM2N2ZjNGQxMzQ2M2Q0OThkOGI", "commit": {"author": {"name": "yue4u", "email": "github@yue.coffee", "date": "2022-11-12T13:33:40Z"}, "committer": {"name": "yue4u", "email": "github@yue.coffee", "date": "2022-11-12T13:33:40Z"}, "message": "fix: filter unnecessary completions after colon", "tree": {"sha": "d57d637494672dce93bb94c7f0abec6539eb6eb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d57d637494672dce93bb94c7f0abec6539eb6eb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f26d5484d89bd41e4fe89367fc4d13463d498d8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f26d5484d89bd41e4fe89367fc4d13463d498d8b", "html_url": "https://github.com/rust-lang/rust/commit/f26d5484d89bd41e4fe89367fc4d13463d498d8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f26d5484d89bd41e4fe89367fc4d13463d498d8b/comments", "author": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yue4u", "id": 26110087, "node_id": "MDQ6VXNlcjI2MTEwMDg3", "avatar_url": "https://avatars.githubusercontent.com/u/26110087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yue4u", "html_url": "https://github.com/yue4u", "followers_url": "https://api.github.com/users/yue4u/followers", "following_url": "https://api.github.com/users/yue4u/following{/other_user}", "gists_url": "https://api.github.com/users/yue4u/gists{/gist_id}", "starred_url": "https://api.github.com/users/yue4u/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yue4u/subscriptions", "organizations_url": "https://api.github.com/users/yue4u/orgs", "repos_url": "https://api.github.com/users/yue4u/repos", "events_url": "https://api.github.com/users/yue4u/events{/privacy}", "received_events_url": "https://api.github.com/users/yue4u/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45ec315e01dc8dd1146dfeb65f0ef6e5c2efed78", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ec315e01dc8dd1146dfeb65f0ef6e5c2efed78", "html_url": "https://github.com/rust-lang/rust/commit/45ec315e01dc8dd1146dfeb65f0ef6e5c2efed78"}], "stats": {"total": 178, "additions": 162, "deletions": 16}, "files": [{"sha": "27f6745d2417e319a632e2658f069ba03c14f8ed", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f26d5484d89bd41e4fe89367fc4d13463d498d8b/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26d5484d89bd41e4fe89367fc4d13463d498d8b/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=f26d5484d89bd41e4fe89367fc4d13463d498d8b", "patch": "@@ -19,7 +19,7 @@ use syntax::{\n     ast::{self, AttrKind, NameOrNameRef},\n     AstNode,\n     SyntaxKind::{self, *},\n-    SyntaxToken, TextRange, TextSize,\n+    SyntaxToken, TextRange, TextSize, T,\n };\n use text_edit::Indel;\n \n@@ -569,6 +569,28 @@ impl<'a> CompletionContext<'a> {\n         // completing on\n         let original_token = original_file.syntax().token_at_offset(offset).left_biased()?;\n \n+        // try to skip completions on path with qinvalid colons\n+        // this approach works in normal path and inside token tree\n+        match original_token.kind() {\n+            T![:] => {\n+                // return if no prev token before colon\n+                let prev_token = original_token.prev_token()?;\n+\n+                // only has a single colon\n+                if prev_token.kind() != T![:] {\n+                    return None;\n+                }\n+\n+                if !is_prev_token_valid_path_start_or_segment(&prev_token) {\n+                    return None;\n+                }\n+            }\n+            T![::] if !is_prev_token_valid_path_start_or_segment(&original_token) => {\n+                return None;\n+            }\n+            _ => {}\n+        }\n+\n         let AnalysisResult {\n             analysis,\n             expected: (expected_type, expected_name),\n@@ -618,6 +640,24 @@ impl<'a> CompletionContext<'a> {\n     }\n }\n \n+fn is_prev_token_valid_path_start_or_segment(token: &SyntaxToken) -> bool {\n+    if let Some(prev_token) = token.prev_token() {\n+        // token before coloncolon is invalid\n+        if !matches!(\n+            prev_token.kind(),\n+            // trival\n+            WHITESPACE | COMMENT\n+            // PathIdentSegment\n+            | IDENT | T![super] | T![self] | T![Self] | T![crate]\n+            // QualifiedPath\n+            | T![>]\n+        ) {\n+            return false;\n+        }\n+    }\n+    true\n+}\n+\n const OP_TRAIT_LANG_NAMES: &[&str] = &[\n     \"add_assign\",\n     \"add\","}, {"sha": "4b48ec6bc33930f5b68493311a8dd6defea63413", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f26d5484d89bd41e4fe89367fc4d13463d498d8b/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26d5484d89bd41e4fe89367fc4d13463d498d8b/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=f26d5484d89bd41e4fe89367fc4d13463d498d8b", "patch": "@@ -164,7 +164,6 @@ pub fn completions(\n                 completions::vis::complete_vis_path(&mut completions, ctx, path_ctx, has_in_token);\n             }\n         }\n-        // prevent `(` from triggering unwanted completion noise\n         return Some(completions.into());\n     }\n "}, {"sha": "4e60820dd6d60c6a936b93027ddab6d0c7d14131", "filename": "crates/ide-completion/src/tests/attribute.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f26d5484d89bd41e4fe89367fc4d13463d498d8b/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26d5484d89bd41e4fe89367fc4d13463d498d8b/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fattribute.rs?ref=f26d5484d89bd41e4fe89367fc4d13463d498d8b", "patch": "@@ -607,6 +607,30 @@ fn attr_in_source_file_end() {\n     );\n }\n \n+#[test]\n+fn invalid_path() {\n+    check(\n+        r#\"\n+//- proc_macros: identity\n+#[proc_macros:::$0]\n+struct Foo;\n+\"#,\n+        expect![[r#\"\"#]],\n+    );\n+\n+    check(\n+        r#\"\n+//- minicore: derive, copy\n+mod foo {\n+    pub use Copy as Bar;\n+}\n+#[derive(foo:::::$0)]\n+struct Foo;\n+\"#,\n+        expect![\"\"],\n+    );\n+}\n+\n mod cfg {\n     use super::*;\n "}, {"sha": "1aea5d89b4a0fcea42052eac207a16a2fb21a546", "filename": "crates/ide-completion/src/tests/special.rs", "status": "modified", "additions": 96, "deletions": 1, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/f26d5484d89bd41e4fe89367fc4d13463d498d8b/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26d5484d89bd41e4fe89367fc4d13463d498d8b/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs?ref=f26d5484d89bd41e4fe89367fc4d13463d498d8b", "patch": "@@ -2,13 +2,22 @@\n \n use expect_test::{expect, Expect};\n \n-use crate::tests::{check_edit, completion_list_no_kw};\n+use crate::tests::{check_edit, completion_list_no_kw, completion_list_with_trigger_character};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list_no_kw(ra_fixture);\n     expect.assert_eq(&actual)\n }\n \n+pub(crate) fn check_with_trigger_character(\n+    ra_fixture: &str,\n+    trigger_character: Option<char>,\n+    expect: Expect,\n+) {\n+    let actual = completion_list_with_trigger_character(ra_fixture, trigger_character);\n+    expect.assert_eq(&actual)\n+}\n+\n #[test]\n fn completes_if_prefix_is_keyword() {\n     check_edit(\n@@ -893,3 +902,89 @@ fn f() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn completes_after_colon_with_trigger() {\n+    check_with_trigger_character(\n+        r#\"\n+//- minicore: option\n+fn foo { ::$0 }\n+\"#,\n+        Some(':'),\n+        expect![[r#\"\n+            md core\n+        \"#]],\n+    );\n+    check_with_trigger_character(\n+        r#\"\n+//- minicore: option\n+fn foo { /* test */::$0 }\n+\"#,\n+        Some(':'),\n+        expect![[r#\"\n+            md core\n+        \"#]],\n+    );\n+\n+    check_with_trigger_character(\n+        r#\"\n+fn foo { crate::$0 }\n+\"#,\n+        Some(':'),\n+        expect![[r#\"\n+            fn foo() fn()\n+        \"#]],\n+    );\n+\n+    check_with_trigger_character(\n+        r#\"\n+fn foo { crate:$0 }\n+\"#,\n+        Some(':'),\n+        expect![\"\"],\n+    );\n+}\n+\n+#[test]\n+fn completes_after_colon_without_trigger() {\n+    check_with_trigger_character(\n+        r#\"\n+fn foo { crate::$0 }\n+\"#,\n+        None,\n+        expect![[r#\"\n+            fn foo() fn()\n+        \"#]],\n+    );\n+\n+    check_with_trigger_character(\n+        r#\"\n+fn foo { crate:$0 }\n+\"#,\n+        None,\n+        expect![\"\"],\n+    );\n+}\n+\n+#[test]\n+fn no_completions_in_invalid_path() {\n+    check(\n+        r#\"\n+fn foo { crate:::$0 }\n+\"#,\n+        expect![\"\"],\n+    );\n+    check(\n+        r#\"\n+fn foo { crate::::$0 }\n+\"#,\n+        expect![\"\"],\n+    );\n+\n+    check(\n+        r#\"\n+fn foo { crate:::::$0 }\n+\"#,\n+        expect![\"\"],\n+    );\n+}"}, {"sha": "4f318f39de5f476ced36ec7df9548ce375b1b6d0", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f26d5484d89bd41e4fe89367fc4d13463d498d8b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f26d5484d89bd41e4fe89367fc4d13463d498d8b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f26d5484d89bd41e4fe89367fc4d13463d498d8b", "patch": "@@ -28,7 +28,7 @@ use lsp_types::{\n use project_model::{ManifestPath, ProjectWorkspace, TargetKind};\n use serde_json::json;\n use stdx::{format_to, never};\n-use syntax::{algo, ast, AstNode, TextRange, TextSize, T};\n+use syntax::{algo, ast, AstNode, TextRange, TextSize};\n use vfs::AbsPathBuf;\n \n use crate::{\n@@ -812,18 +812,6 @@ pub(crate) fn handle_completion(\n     let completion_trigger_character =\n         params.context.and_then(|ctx| ctx.trigger_character).and_then(|s| s.chars().next());\n \n-    if Some(':') == completion_trigger_character {\n-        let source_file = snap.analysis.parse(position.file_id)?;\n-        let left_token = source_file.syntax().token_at_offset(position.offset).left_biased();\n-        let completion_triggered_after_single_colon = match left_token {\n-            Some(left_token) => left_token.kind() == T![:],\n-            None => true,\n-        };\n-        if completion_triggered_after_single_colon {\n-            return Ok(None);\n-        }\n-    }\n-\n     let completion_config = &snap.config.completion();\n     let items = match snap.analysis.completions(\n         completion_config,"}]}