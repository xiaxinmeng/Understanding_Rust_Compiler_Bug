{"sha": "e512c19ed5451a4f0e9f17eac488b1414c1c6aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MTJjMTllZDU0NTFhNGYwZTlmMTdlYWM0ODhiMTQxNGMxYzZhZWQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-04-28T05:03:14Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-04-28T05:03:14Z"}, "message": "Use format_empty_struct_or_tuple over format_missing_no_indent\n\nCloses #2594.", "tree": {"sha": "2226603a9532a8e75be8c3212e801b1768a88581", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2226603a9532a8e75be8c3212e801b1768a88581"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e512c19ed5451a4f0e9f17eac488b1414c1c6aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e512c19ed5451a4f0e9f17eac488b1414c1c6aed", "html_url": "https://github.com/rust-lang/rust/commit/e512c19ed5451a4f0e9f17eac488b1414c1c6aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e512c19ed5451a4f0e9f17eac488b1414c1c6aed/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0c6affa5b76001af2ea04c41c2204f6724fc63", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0c6affa5b76001af2ea04c41c2204f6724fc63", "html_url": "https://github.com/rust-lang/rust/commit/fb0c6affa5b76001af2ea04c41c2204f6724fc63"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "c2a2d0d21807e8b12f9b67f27e6970790d02cef4", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e512c19ed5451a4f0e9f17eac488b1414c1c6aed/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e512c19ed5451a4f0e9f17eac488b1414c1c6aed/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e512c19ed5451a4f0e9f17eac488b1414c1c6aed", "patch": "@@ -453,35 +453,39 @@ impl<'a> FmtVisitor<'a> {\n \n         self.last_pos = body_start;\n \n-        self.block_indent = self.block_indent.block_indent(self.config);\n-        let variant_list = self.format_variant_list(enum_def, body_start, span.hi() - BytePos(1));\n-        match variant_list {\n-            Some(ref body_str) => self.push_str(body_str),\n-            None => self.format_missing_no_indent(span.hi() - BytePos(1)),\n-        }\n-        self.block_indent = self.block_indent.block_unindent(self.config);\n-\n-        if variant_list.is_some() || contains_comment(&enum_snippet[brace_pos..]) {\n-            let indent_str = self.block_indent.to_string(self.config);\n-            self.push_str(&indent_str);\n+        match self.format_variant_list(enum_def, body_start, span.hi()) {\n+            Some(ref s) if enum_def.variants.is_empty() => self.push_str(s),\n+            rw => {\n+                self.push_rewrite(mk_sp(body_start, span.hi()), rw);\n+                self.block_indent = self.block_indent.block_unindent(self.config);\n+            }\n         }\n-        self.push_str(\"}\");\n-        self.last_pos = span.hi();\n     }\n \n     // Format the body of an enum definition\n     fn format_variant_list(\n-        &self,\n+        &mut self,\n         enum_def: &ast::EnumDef,\n         body_lo: BytePos,\n         body_hi: BytePos,\n     ) -> Option<String> {\n         if enum_def.variants.is_empty() {\n-            return None;\n+            let mut buffer = String::with_capacity(128);\n+            // 1 = \"}\"\n+            let span = mk_sp(body_lo, body_hi - BytePos(1));\n+            format_empty_struct_or_tuple(\n+                &self.get_context(),\n+                span,\n+                self.block_indent,\n+                &mut buffer,\n+                \"\",\n+                \"}\",\n+            );\n+            return Some(buffer);\n         }\n         let mut result = String::with_capacity(1024);\n-        let indentation = self.block_indent.to_string_with_newline(self.config);\n-        result.push_str(&indentation);\n+        let original_offset = self.block_indent;\n+        self.block_indent = self.block_indent.block_indent(self.config);\n \n         let itemize_list_with = |one_line_width: usize| {\n             itemize_list(\n@@ -526,7 +530,8 @@ impl<'a> FmtVisitor<'a> {\n \n         let list = write_list(&items, &fmt)?;\n         result.push_str(&list);\n-        result.push('\\n');\n+        result.push_str(&original_offset.to_string_with_newline(self.config));\n+        result.push('}');\n         Some(result)\n     }\n "}]}