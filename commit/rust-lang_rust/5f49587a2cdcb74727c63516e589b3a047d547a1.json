{"sha": "5f49587a2cdcb74727c63516e589b3a047d547a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNDk1ODdhMmNkY2I3NDcyN2M2MzUxNmU1ODliM2EwNDdkNTQ3YTE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-23T12:54:59Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-23T12:54:59Z"}, "message": "Update configuration tests\n\nThis commit adds following functionalities to `configuration_snippet_tests`:\n\n1. Error if there is an unknown configuration option in Configuration.md.\n2. Error if there are multiple guides for the same configuration option in\n   Configuration.md.\n3. Error if an user-facing configuration option does not have its guide in\n   Configuration.md.\n\nWe will be able to catch outdated Configuration.md. Should prevent issues\nlike #2459.", "tree": {"sha": "65d8672524095d3e3486aad959be18877b186b5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d8672524095d3e3486aad959be18877b186b5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f49587a2cdcb74727c63516e589b3a047d547a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f49587a2cdcb74727c63516e589b3a047d547a1", "html_url": "https://github.com/rust-lang/rust/commit/5f49587a2cdcb74727c63516e589b3a047d547a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f49587a2cdcb74727c63516e589b3a047d547a1/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "html_url": "https://github.com/rust-lang/rust/commit/cc2c7433e249005c0fb70744f999b4d7f2ad17fe"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "bace9dba8ff17965e56e6702c7c5ddcd803dd798", "filename": "rustfmt-config/src/config_type.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5f49587a2cdcb74727c63516e589b3a047d547a1/rustfmt-config%2Fsrc%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f49587a2cdcb74727c63516e589b3a047d547a1/rustfmt-config%2Fsrc%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-config%2Fsrc%2Fconfig_type.rs?ref=5f49587a2cdcb74727c63516e589b3a047d547a1", "patch": "@@ -74,6 +74,8 @@ macro_rules! is_nightly_channel {\n \n macro_rules! create_config {\n     ($($i:ident: $ty:ty, $def:expr, $stb:expr, $( $dstring:expr ),+ );+ $(;)*) => (\n+        use std::collections::HashSet;\n+\n         #[derive(Clone)]\n         pub struct Config {\n             // For each config item, we store a bool indicating whether it has\n@@ -190,6 +192,24 @@ macro_rules! create_config {\n                 self\n             }\n \n+            /// Returns a hash set initialized with every user-facing config option name.\n+            pub fn hash_set() -> HashSet<String> {\n+                let mut hash_set = HashSet::new();\n+                $(\n+                    hash_set.insert(stringify!($i).to_owned());\n+                )+\n+                hash_set\n+            }\n+\n+            pub fn is_valid_name(name: &str) -> bool {\n+                match name {\n+                    $(\n+                        stringify!($i) => true,\n+                    )+\n+                        _ => false,\n+                }\n+            }\n+\n             pub fn from_toml(toml: &str) -> Result<Config, String> {\n                 let parsed: toml::Value =\n                     toml.parse().map_err(|e| format!(\"Could not parse TOML: {}\", e))?;\n@@ -199,15 +219,9 @@ macro_rules! create_config {\n                         .as_table()\n                         .ok_or(String::from(\"Parsed config was not table\"))?;\n                     for key in table.keys() {\n-                        match &**key {\n-                            $(\n-                                stringify!($i) => (),\n-                            )+\n-                            _ => {\n-                                let msg =\n-                                    &format!(\"Warning: Unknown configuration option `{}`\\n\", key);\n-                                err.push_str(msg)\n-                            }\n+                        if !Config::is_valid_name(key) {\n+                            let msg = &format!(\"Warning: Unknown configuration option `{}`\\n\", key);\n+                            err.push_str(msg)\n                         }\n                     }\n                 }\n@@ -324,10 +338,13 @@ macro_rules! create_config {\n                 }\n             }\n \n+            pub fn is_hidden_option(name: &str) -> bool {\n+                const HIDE_OPTIONS: [&str; 3] = [\"verbose\", \"file_lines\", \"width_heuristics\"];\n+                HIDE_OPTIONS.contains(&name)\n+            }\n \n             pub fn print_docs() {\n                 use std::cmp;\n-                const HIDE_OPTIONS: [&str; 3] = [\"verbose\", \"file_lines\", \"width_heuristics\"];\n                 let max = 0;\n                 $( let max = cmp::max(max, stringify!($i).len()+1); )+\n                 let mut space_str = String::with_capacity(max);\n@@ -338,7 +355,7 @@ macro_rules! create_config {\n                 $(\n                     let name_raw = stringify!($i);\n \n-                    if !HIDE_OPTIONS.contains(&name_raw) {\n+                    if !Config::is_hidden_option(name_raw) {\n                         let mut name_out = String::with_capacity(max);\n                         for _ in name_raw.len()..max-1 {\n                             name_out.push(' ')"}, {"sha": "00988dc6fc5ce40d4e9d466770790c5e4b7fd773", "filename": "rustfmt-core/tests/lib.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f49587a2cdcb74727c63516e589b3a047d547a1/rustfmt-core%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f49587a2cdcb74727c63516e589b3a047d547a1/rustfmt-core%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Flib.rs?ref=5f49587a2cdcb74727c63516e589b3a047d547a1", "patch": "@@ -17,7 +17,7 @@ extern crate rustfmt_config as config;\n extern crate rustfmt_core as rustfmt;\n extern crate term;\n \n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::fs;\n use std::io::{self, BufRead, BufReader, Read};\n use std::iter::{Enumerate, Peekable};\n@@ -795,6 +795,7 @@ impl ConfigCodeBlock {\n     fn extract<I: Iterator<Item = String>>(\n         file: &mut Enumerate<I>,\n         prev: Option<&ConfigCodeBlock>,\n+        hash_set: &mut HashSet<String>,\n     ) -> Option<ConfigCodeBlock> {\n         let mut code_block = ConfigCodeBlock::new();\n         code_block.config_name = prev.and_then(|cb| cb.config_name.clone());\n@@ -806,6 +807,16 @@ impl ConfigCodeBlock {\n                     break;\n                 }\n                 Some(ConfigurationSection::ConfigName(name)) => {\n+                    assert!(\n+                        Config::is_valid_name(&name),\n+                        \"an unknown configuration option was found: {}\",\n+                        name\n+                    );\n+                    assert!(\n+                        hash_set.remove(&name),\n+                        \"multiple configuration guides found for option {}\",\n+                        name\n+                    );\n                     code_block.set_config_name(Some(name));\n                 }\n                 Some(ConfigurationSection::ConfigValue(value)) => {\n@@ -831,11 +842,20 @@ fn configuration_snippet_tests() {\n             .map(|l| l.unwrap())\n             .enumerate();\n         let mut code_blocks: Vec<ConfigCodeBlock> = Vec::new();\n+        let mut hash_set = Config::hash_set();\n \n-        while let Some(cb) = ConfigCodeBlock::extract(&mut file_iter, code_blocks.last()) {\n+        while let Some(cb) =\n+            ConfigCodeBlock::extract(&mut file_iter, code_blocks.last(), &mut hash_set)\n+        {\n             code_blocks.push(cb);\n         }\n \n+        for name in hash_set {\n+            if !Config::is_hidden_option(&name) {\n+                panic!(\"{} does not have a configuration guide\", name);\n+            }\n+        }\n+\n         code_blocks\n     }\n "}]}