{"sha": "29d853dd19a67c77ee6e03653a02289b6319abc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZDg1M2RkMTlhNjdjNzdlZTZlMDM2NTNhMDIyODliNjMxOWFiYzM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-24T21:56:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-24T21:56:51Z"}, "message": "Remove obsolete Makefiles.", "tree": {"sha": "20fdc226bd9c59172c063bb43205443b3047a776", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20fdc226bd9c59172c063bb43205443b3047a776"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29d853dd19a67c77ee6e03653a02289b6319abc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29d853dd19a67c77ee6e03653a02289b6319abc3", "html_url": "https://github.com/rust-lang/rust/commit/29d853dd19a67c77ee6e03653a02289b6319abc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29d853dd19a67c77ee6e03653a02289b6319abc3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01485f31edda7e13c10b9aeb06589352f3fcc9cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/01485f31edda7e13c10b9aeb06589352f3fcc9cc", "html_url": "https://github.com/rust-lang/rust/commit/01485f31edda7e13c10b9aeb06589352f3fcc9cc"}], "stats": {"total": 1006, "additions": 0, "deletions": 1006}, "files": [{"sha": "15808de619620a292cfd362159dd879083c760ea", "filename": "doc/Makefile", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01485f31edda7e13c10b9aeb06589352f3fcc9cc/doc%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/01485f31edda7e13c10b9aeb06589352f3fcc9cc/doc%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2FMakefile?ref=01485f31edda7e13c10b9aeb06589352f3fcc9cc", "patch": "@@ -1,21 +0,0 @@\n-DOC_VER  := $(shell date +\"%Y-%m-%d\")-snap\n-\n-all: rust.pdf rust.html\n-\n-version.texi: Makefile rust.texi\n-\tgit log -1 \\\n-      --pretty=format:'@macro gitversion%n%h %ci%n@end macro%n' >$@\n-\n-%.pdf: %.texi version.texi\n-\ttexi2pdf $<\n-\n-%.html: %.texi version.texi\n-\tmakeinfo --html --ifhtml --force --no-split --output=$@ $<\n-\n-snap: rust.pdf\n-\tmv $< rust-$(DOC_VER).pdf\n-\n-clean:\n-\trm -f rust.aux rust.cp rust.fn rust.ky rust.log rust.pdf \\\n-          rust.html rust.pg rust.toc rust.tp rust.vr rust.cps \\\n-          version.texi"}, {"sha": "5079548f11ad8c948f17109dcf4f45cf4b0aca60", "filename": "src/Makefile", "status": "removed", "additions": 0, "deletions": 985, "changes": 985, "blob_url": "https://github.com/rust-lang/rust/blob/01485f31edda7e13c10b9aeb06589352f3fcc9cc/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/01485f31edda7e13c10b9aeb06589352f3fcc9cc/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=01485f31edda7e13c10b9aeb06589352f3fcc9cc", "patch": "@@ -1,985 +0,0 @@\n-# Delete the built-in rules.\n-# This speeds builds up substantially on win32, maybe elsewhere.\n-\n-.SUFFIXES:\n-%:: %,v\n-%:: RCS/%,v\n-%:: RCS/%\n-%:: s.%\n-%:: SCCS/s.%\n-\n-######################################################################\n-# Auto-configuration\n-######################################################################\n-\n-ifdef VERBOSE\n-  CFG_QUIET :=\n-  CFG_ECHO =\n-else\n-  CFG_QUIET := @\n-  CFG_ECHO = echo $(1)\n-endif\n-\n-CFG_OSTYPE := $(shell uname -s)\n-CFG_CPUTYPE := $(shell uname -m)\n-\n-ifneq ($(MAKE_RESTARTS),)\n-CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))\n-endif\n-\n-CFG_INFO := $(info cfg: building on $(CFG_OSTYPE) $(CFG_CPUTYPE))\n-\n-CFG_GCC_CFLAGS :=\n-CFG_GCC_LINK_FLAGS :=\n-CFG_VALGRIND :=\n-\n-CFG_LLVM_CONFIG ?= llvm-config\n-CFG_BOOT_FLAGS := $(FLAGS)\n-CFG_RUSTC_FLAGS := -nowarn\n-\n-# On Darwin, we need to run dsymutil so the debugging information ends\n-# up in the right place.  On other platforms, it automatically gets\n-# embedded into the executable, so use a no-op command.\n-DSYMUTIL := true\n-\n-ifeq ($(CFG_OSTYPE), FreeBSD)\n-  CFG_RUNTIME := librustrt.so\n-  CFG_SUPPORT := librustllvm.so\n-  CFG_STDLIB := libstd.so\n-  CFG_GCC_CFLAGS += -fPIC -march=i686 -I/usr/local/include\n-  CFG_GCC_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n-  ifeq ($(CFG_CPUTYPE), x86_64)\n-    CFG_GCC_CFLAGS += -m32\n-    CFG_GCC_LINK_FLAGS += -m32\n-  endif\n-  CFG_NATIVE := 1\n-  CFG_UNIXY := 1\n-endif\n-\n-ifeq ($(CFG_OSTYPE), Linux)\n-  CFG_RUNTIME := librustrt.so\n-  CFG_SUPPORT := librustllvm.so\n-  CFG_STDLIB := libstd.so\n-  CFG_GCC_CFLAGS += -fPIC -march=i686\n-  CFG_GCC_LINK_FLAGS += -shared -fPIC -ldl -lpthread -lrt\n-  ifeq ($(CFG_CPUTYPE), x86_64)\n-    CFG_GCC_CFLAGS += -m32\n-    CFG_GCC_LINK_FLAGS += -m32\n-  endif\n-  CFG_NATIVE := 1\n-  CFG_UNIXY := 1\n-endif\n-\n-ifeq ($(CFG_OSTYPE), Darwin)\n-  CFG_RUNTIME := librustrt.dylib\n-  CFG_SUPPORT := librustllvm.dylib\n-  CFG_STDLIB := libstd.dylib\n-  CFG_UNIXY := 1\n-  CFG_GCC_LINK_FLAGS += -dynamiclib -lpthread\n-  # Darwin has a very blurry notion of \"64 bit\", and claims it's running\n-  # \"on an i386\" when the whole userspace is 64-bit and the compiler\n-  # emits 64-bit binaries by default. So we just force -m32 here. Smarter\n-  # approaches welcome!\n-  CFG_NATIVE := 1\n-  CFG_GCC_CFLAGS += -m32\n-  CFG_GCC_LINK_FLAGS += -m32\n-  DSYMUTIL := dsymutil\n-endif\n-\n-ifneq ($(findstring MINGW,$(CFG_OSTYPE)),)\n-  CFG_WINDOWSY := 1\n-endif\n-\n-ifdef CFG_WINDOWSY\n-  CFG_INFO := $(info cfg: windows-y environment)\n-  CFG_PATH_MUNGE := | sed -e 's/\\\\\\(.\\)/\\/\\1/g'\n-  CFG_FLEXLINK := $(shell which flexlink)\n-  ifdef CFG_FLEXLINK\n-    CFG_NATIVE := 1\n-  endif\n-  CFG_RUNTIME := rustrt.dll\n-  CFG_SUPPORT := rustllvm.dll\n-  CFG_STDLIB := std.dll\n-  CFG_EXE_SUFFIX := .exe\n-  CFG_BOOT := ./rustboot.exe\n-  CFG_RUSTC := ./rustc.exe\n-  CFG_GCC_CFLAGS += -march=i686\n-  CFG_GCC_LINK_FLAGS += -shared -fPIC\n-  CFG_RUN_TARG = $(1)\n-  # FIXME: support msvc at some point\n-  CFG_GCC := 1\n-endif\n-\n-ifdef CFG_UNIXY\n-  CFG_INFO := $(info cfg: unix-y environment)\n-  CFG_BOOT := ./rustboot\n-  CFG_RUSTC := ./rustc\n-  CFG_RUN_TARG = LD_LIBRARY_PATH=. $(CFG_VALGRIND) $(1)\n-  CFG_GCC := 1\n-  ifdef MINGW_CROSS\n-    CFG_INFO := $(info cfg: mingw-cross)\n-    CFG_GCC_CROSS := i586-mingw32msvc-\n-    CFG_BOOT_FLAGS += -t win32-x86-pe\n-    CFG_RUNTIME := rustrt.dll\n-    CFG_SUPPORT := rustllvm.dll\n-    CFG_STDLIB := std.dll\n-    CFG_RUSTC := ./rustc.exe\n-    ifdef CFG_VALGRIND\n-      CFG_VALGRIND += wine\n-    endif\n-    CFG_EXE_SUFFIX := .exe\n-    CFG_GCC_CFLAGS := -march=i686\n-    CFG_GCC_LINK_FLAGS := -shared\n-    ifeq ($(CFG_CPUTYPE), x86_64)\n-      CFG_GCC_CFLAGS += -m32\n-      CFG_GCC_LINK_FLAGS += -m32\n-    endif\n-  endif\n-  CFG_VALGRIND := $(shell which valgrind)\n-  ifdef CFG_VALGRIND\n-    CFG_VALGRIND += --leak-check=full \\\n-                    --error-exitcode=1 \\\n-                    --quiet --vex-iropt-level=0 \\\n-                    --suppressions=etc/x86.supp\n-  endif\n-endif\n-\n-ifdef CFG_GCC\n-  CFG_INFO := $(info cfg: using gcc)\n-  CFG_GCC_CFLAGS += -Wall -Werror -fno-rtti -fno-exceptions -g\n-  CFG_GCC_LINK_FLAGS += -g\n-  CFG_COMPILE_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_CFLAGS) -c -o $(1) $(2)\n-  CFG_LINK_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_LINK_FLAGS) -o $(1)\n-  CFG_DEPEND_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_CFLAGS) -MT \"$(1)\" -MM $(2)\n-else\n-  CFG_ERR := $(error please try on a system with gcc)\n-endif\n-\n-CFG_OCAMLC_OPT := $(shell which ocamlc.opt)\n-ifdef CFG_OCAMLC_OPT\n-  $(info cfg: using ocaml native compiler)\n-  OPT=.opt\n-else\n-  $(info cfg: using ocaml bytecode compiler)\n-endif\n-\n-ifdef PROFILE\n-  $(info cfg: building with profiling info (forcing native output))\n-  CFG_NATIVE := 1\n-  CFG_OCAMLOPT_PROFILE_FLAGS := -p\n-endif\n-\n-ifdef DEBUG\n-  $(info cfg: forcing bytecode output)\n-  CFG_NATIVE :=\n-endif\n-\n-ifdef CFG_NATIVE\n-  $(info cfg: building native compiler)\n-else\n-  $(info cfg: building bytecode compiler)\n-endif\n-\n-ifdef NO_VALGRIND\n-    CFG_VALGRIND :=\n-endif\n-\n-ifdef NO_LLVM\n-    CFG_LLVM_CONFIG :=\n-endif\n-\n-ifneq ($(CFG_LLVM_CONFIG),)\n-  CFG_LLVM_CONFIG := $(shell which $(CFG_LLVM_CONFIG))\n-endif\n-ifneq ($(CFG_LLVM_CONFIG),)\n-  CFG_LLVM_VERSION := $(shell $(CFG_LLVM_CONFIG) --version)\n-  $(info cfg: found llvm-config at $(CFG_LLVM_CONFIG))\n-  CFG_LLVM_ALLOWED_VERSIONS := 3.0svn\n-  ifneq ($(findstring $(CFG_LLVM_VERSION),$(CFG_LLVM_ALLOWED_VERSIONS)),)\n-    $(info cfg: using LLVM version $(CFG_LLVM_VERSION))\n-  else\n-    CFG_LLVM_CONFIG :=\n-    $(info cfg: incompatible LLVM version $(CFG_LLVM_VERSION), \\\n-      expected one of $(CFG_LLVM_ALLOWED_VERSIONS))\n-  endif\n-endif\n-\n-ifdef CFG_LLVM_CONFIG\n-  LLC := \"$(shell $(CFG_LLVM_CONFIG) --bindir)/llc\"\n-  CFG_LLC_CFLAGS := -march=x86\n-  LLVM-DIS := \"$(shell $(CFG_LLVM_CONFIG) --bindir)/llvm-dis\"\n-  CFG_LLVM_INCDIR := $(shell $(CFG_LLVM_CONFIG) --includedir)\n-  CFG_LLVM_CXXFLAGS := $(shell $(CFG_LLVM_CONFIG) --cxxflags)\n-  CFG_LLVM_LDFLAGS := $(shell $(CFG_LLVM_CONFIG) --ldflags)\n-  CFG_LLVM_LIBS := $(shell $(CFG_LLVM_CONFIG) --libs)\n-endif\n-\n-MKFILES := Makefile\n-\n-# Add current directory to library search path of CFG_BOOT command line.\n-\n-CFG_BOOT_FLAGS += -L .\n-\n-# Commands we now know how to run.\n-\n-BOOT := $(CFG_QUIET)OCAMLRUNPARAM=\"b1\" $(CFG_BOOT) $(CFG_BOOT_FLAGS)\n-RUSTC := $(CFG_QUIET)$(CFG_RUSTC) $(CFG_RUSTC_FLAGS)\n-\n-######################################################################\n-# Boot targets and rules\n-######################################################################\n-\n-ML_DEP_INCS := -I boot/fe -I boot/me -I boot/be \\\n-  -I boot/driver -I boot/util\n-ML_INCS := $(ML_DEP_INCS)\n-ML_LIBS := unix.cma nums.cma bigarray.cma\n-ML_NATIVE_LIBS := unix.cmxa nums.cmxa bigarray.cmxa\n-OCAMLC_FLAGS := -g $(ML_INCS) -w Ael -warn-error Ael\n-OCAMLOPT_FLAGS := $(ML_INCS) -w Ael -warn-error Ael \\\n-                    $(CFG_OCAMLOPT_PROFILE_FLAGS)\n-\n-# List them in link order.\n-# Nobody calculates the link-order DAG automatically, sadly.\n-\n-UTIL_BOT_MLS := $(addprefix boot/util/, version.ml fmt.ml common.ml bits.ml)\n-DRIVER_BOT_MLS := $(addprefix boot/driver/, session.ml)\n-BE_MLS := $(addprefix boot/be/, x86.ml ra.ml pe.ml elf.ml \\\n-          macho.ml)\n-IL_MLS := $(addprefix boot/be/, asm.ml il.ml abi.ml)\n-ME_MLS := $(addprefix boot/me/, walk.ml semant.ml resolve.ml alias.ml \\\n-            simplify.ml type.ml dead.ml layer.ml effect.ml typestate.ml \\\n-            loop.ml layout.ml transutil.ml trans.ml dwarf.ml)\n-FE_MLS := $(addprefix boot/fe/, ast.ml token.ml lexer.ml parser.ml \\\n-            extfmt.ml pexp.ml item.ml cexp.ml fuzz.ml)\n-DRIVER_TOP_MLS := $(addprefix boot/driver/, lib.ml glue.ml main.ml)\n-\n-BOOT_MLS := $(UTIL_BOT_MLS) $(DRIVER_BOT_MLS) $(FE_MLS) $(IL_MLS) $(ME_MLS) \\\n-  $(BE_MLS) $(DRIVER_TOP_MLS)\n-BOOT_CMOS := $(BOOT_MLS:.ml=.cmo)\n-BOOT_CMXS := $(BOOT_MLS:.ml=.cmx)\n-BOOT_OBJS := $(BOOT_MLS:.ml=.o)\n-BOOT_CMIS := $(BOOT_MLS:.ml=.cmi)\n-\n-RUNTIME_CS := rt/sync/timer.cpp \\\n-              rt/sync/sync.cpp \\\n-              rt/sync/lock_and_signal.cpp \\\n-              rt/rust.cpp \\\n-              rt/rust_builtin.cpp \\\n-              rt/rust_run_program.cpp \\\n-              rt/rust_crate.cpp \\\n-              rt/rust_crate_cache.cpp \\\n-              rt/rust_crate_reader.cpp \\\n-              rt/rust_comm.cpp \\\n-              rt/rust_dom.cpp \\\n-              rt/rust_task.cpp \\\n-              rt/rust_task_list.cpp \\\n-              rt/rust_proxy.cpp \\\n-              rt/rust_chan.cpp \\\n-              rt/rust_port.cpp \\\n-              rt/rust_upcall.cpp \\\n-              rt/rust_log.cpp \\\n-              rt/rust_message.cpp \\\n-              rt/rust_timer.cpp \\\n-              rt/circular_buffer.cpp \\\n-              rt/isaac/randport.cpp \\\n-              rt/rust_srv.cpp \\\n-              rt/rust_kernel.cpp \\\n-              rt/memory_region.cpp \\\n-              rt/test/rust_test_harness.cpp \\\n-              rt/test/rust_test_runtime.cpp \\\n-              rt/test/rust_test_util.cpp\n-\n-RUNTIME_HDR := rt/globals.h \\\n-               rt/rust.h \\\n-               rt/rust_dwarf.h \\\n-               rt/rust_internal.h \\\n-               rt/rust_util.h \\\n-               rt/rust_chan.h \\\n-               rt/rust_port.h \\\n-               rt/rust_dom.h \\\n-               rt/rust_task.h \\\n-               rt/rust_task_list.h \\\n-               rt/rust_proxy.h \\\n-               rt/rust_log.h \\\n-               rt/rust_message.h \\\n-               rt/circular_buffer.h \\\n-               rt/util/array_list.h \\\n-               rt/util/indexed_list.h \\\n-               rt/util/synchronized_indexed_list.h \\\n-               rt/util/hash_map.h \\\n-               rt/sync/sync.h \\\n-               rt/sync/timer.h \\\n-               rt/sync/lock_free_queue.h \\\n-               rt/rust_srv.h \\\n-               rt/rust_kernel.h \\\n-               rt/memory_region.h \\\n-               rt/memory.h \\\n-               rt/test/rust_test_harness.h \\\n-               rt/test/rust_test_runtime.h \\\n-               rt/test/rust_test_util.h\n-\n-RUNTIME_INCS := -Irt/isaac -Irt/uthash\n-RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o)\n-\n-SUPPORT_CS := $(addprefix rustllvm/, \\\n-    MachOObjectFile.cpp Object.cpp RustWrapper.cpp)\n-\n-SUPPORT_HDR := rustllvm/include/llvm-c/Object.h\n-\n-SUPPORT_INCS := -iquote $(CFG_LLVM_INCDIR) -iquote rustllvm/include\n-SUPPORT_OBJS := $(SUPPORT_CS:.cpp=.o)\n-SUPPORT_LIBS := $(CFG_LLVM_LDFLAGS) $(CFG_LLVM_LIBS)\n-\n-STDLIB_CRATE := lib/std.rc\n-STDLIB_INPUTS := $(wildcard lib/*.rc lib/*.rs lib/*/*.rs)\n-COMPILER_CRATE := comp/rustc.rc\n-COMPILER_INPUTS := $(wildcard comp/rustc.rc comp/*.rs comp/*/*.rs)\n-\n-GENERATED := boot/fe/lexer.ml boot/util/version.ml glue.o\n-\n-all: $(CFG_RUSTC) $(MKFILES) $(GENERATED)\n-\n-boot/util/version.ml: Makefile\n-\t$(CFG_QUIET)git log -1 \\\n-      --pretty=format:'let version = \"prerelease (%h %ci)\";;' >$@ || exit 1\n-\n-loc:\n-\t$(CFG_QUIET)wc -l $(BOOT_MLS) $(RUNTIME_CS) $(RUNTIME_HDR)\n-\n-$(CFG_RUNTIME): $(RUNTIME_OBJS) $(MKFILES) $(RUNTIME_HDR)\n-\t@$(call CFG_ECHO, compile: $<)\n-\t$(CFG_QUIET)$(call CFG_LINK_C, $@) $(RUNTIME_OBJS)\n-\n-$(CFG_SUPPORT): $(SUPPORT_OBJS) $(MKFILES) $(SUPPORT_HDR)\n-\t@$(call CFG_ECHO, compile: $<)\n-\t$(CFG_QUIET)$(call CFG_LINK_C, $@ $(SUPPORT_OBJS) \\\n-        $(CFG_LLVM_LIBS) $(CFG_LLVM_LDFLAGS))\n-\n-$(CFG_STDLIB): $(STDLIB_CRATE) $(CFG_BOOT) $(MKFILES)\n-\t@$(call CFG_ECHO, compile: $<)\n-\t$(BOOT) -shared -o $@ $(STDLIB_CRATE)\n-\n-rt/%.o: rt/%.cpp $(MKFILES)\n-\t@$(call CFG_ECHO, compile: $<)\n-\t$(CFG_QUIET)$(call CFG_COMPILE_C, $@, $(RUNTIME_INCS)) $<\n-\n-rustllvm/%.o: rustllvm/%.cpp $(MKFILES)\n-\t@$(call CFG_ECHO, compile: $<)\n-\t$(CFG_QUIET)$(call CFG_COMPILE_C, $@, $(CFG_LLVM_CXXFLAGS) \\\n-\t\t$(SUPPORT_INCS)) $<\n-\n-ifdef CFG_NATIVE\n-$(CFG_BOOT): $(BOOT_CMXS) $(MKFILES)\n-\t@$(call CFG_ECHO, compile: $<)\n-\t$(CFG_QUIET)ocamlopt$(OPT) -o $@ $(OCAMLOPT_FLAGS) $(ML_NATIVE_LIBS) \\\n-      $(BOOT_CMXS)\n-else\n-$(CFG_BOOT): $(BOOT_CMOS) $(MKFILES)\n-\t@$(call CFG_ECHO, compile: $<)\n-\t$(CFG_QUIET)ocamlc$(OPT) -o $@ $(OCAMLC_FLAGS) $(ML_LIBS) $(BOOT_CMOS)\n-endif\n-\n-%.cmo: %.ml $(MKFILES)\n-\t@$(call CFG_ECHO, compile: $<)\n-\t$(CFG_QUIET)ocamlc$(OPT) -c -o $@ $(OCAMLC_FLAGS) $<\n-\n-%.cmo: %.cmi $(MKFILES)\n-\n-%.cmx %.o: %.ml $(MKFILES)\n-\t@$(call CFG_ECHO, compile: $<)\n-\t$(CFG_QUIET)ocamlopt$(OPT) -c -o $@ $(OCAMLOPT_FLAGS) $<\n-\n-%.ml: %.mll $(MKFILES)\n-\t@$(call CFG_ECHO, lex-gen: $<)\n-\t$(CFG_QUIET)ocamllex$(OPT) -q -o $@ $<\n-\n-\n-######################################################################\n-# Main compiler targets and rules\n-######################################################################\n-\n-$(CFG_RUSTC): $(COMPILER_INPUTS) $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB) \\\n-\t\t$(CFG_SUPPORT)\n-\t@$(call CFG_ECHO, compile: $<)\n-\t$(BOOT) -minimal -o $@ $<\n-\t$(CFG_QUIET)chmod 0755 $@\n-\n-glue.bc: $(CFG_RUSTC) $(CFG_RUNTIME) $(CFG_STDLIB)\n-\t@$(call CFG_ECHO, generate: $@)\n-\t$(RUSTC) -o $@ -glue\n-\n-self: $(CFG_RUSTC)\n-\t@$(call CFG_ECHO, compile: $(COMPILER_CRATE))\n-\t$(RUSTC) $(COMPILER_CRATE)\n-\n-\n-######################################################################\n-# Testing\n-######################################################################\n-\n-# Float doesn't work in boot\n-\n-FLOAT_XFAILS := test/run-pass/float.rs \\\n-                test/run-pass/float2.rs \\\n-                test/run-pass/float-signature.rs\n-\n-# Temporarily xfail tests broken by the nominal-tags change.\n-\n-NOMINAL_TAG_XFAILS := test/run-pass/mlist.rs\n-\n-# Temporarily xfail tests broken by the constant-tags change.\n-\n-CONST_TAG_XFAILS := test/run-pass/generic-tag.rs\n-\n-# Temporarily xfail some of the task tests, while debugging the\n-# overhauled inter-domain messaging system.\n-\n-TASK_XFAILS := test/run-pass/task-comm-8.rs \\\n-               test/run-pass/task-comm-10.rs \\\n-               test/run-pass/task-comm-15.rs \\\n-               test/run-pass/task-comm-12.rs \\\n-               test/run-pass/task-comm-2.rs \\\n-               test/run-pass/task-comm-9.rs \\\n-               test/run-pass/task-comm-chan-nil.rs \\\n-               test/run-pass/task-life-0.rs \\\n-               test/run-pass/alt-type-simple.rs \\\n-               test/run-pass/many.rs\n-\n-TEST_XFAILS_BOOT :=  $(TASK_XFAILS) \\\n-                    $(NOMINAL_TAG_XFAILS) \\\n-                    $(CONST_TAG_XFAILS) \\\n-                    $(FLOAT_XFAILS) \\\n-                    test/run-pass/arith-unsigned.rs \\\n-                    test/run-pass/box-compare.rs \\\n-                    test/run-pass/child-outlives-parent.rs \\\n-                    test/run-pass/clone-with-exterior.rs \\\n-                    test/run-pass/constrained-type.rs \\\n-                    test/run-pass/destructor-ordering.rs \\\n-                    test/run-pass/obj-as.rs \\\n-                    test/run-pass/vec-slice.rs \\\n-                    test/run-pass/fn-lval.rs \\\n-                    test/run-pass/empty-mutable-vec.rs \\\n-                    test/run-pass/generic-bind-2.rs \\\n-                    test/run-pass/generic-fn-box.rs \\\n-                    test/run-pass/generic-tup.rs \\\n-                    test/run-pass/iter-ret.rs \\\n-                    test/run-pass/leak-tag-copy.rs \\\n-                    test/run-pass/lib-io.rs \\\n-                    test/run-pass/maybe-mutable.rs \\\n-                    test/run-pass/mlist-cycle.rs \\\n-                    test/run-pass/obj-as.rs \\\n-                    test/run-pass/seq-compare.rs \\\n-                    test/run-pass/task-comm.rs \\\n-                    test/run-pass/task-comm-3.rs \\\n-                    test/run-pass/vec-slice.rs \\\n-                    test/run-pass/while-and-do-while.rs \\\n-                    test/run-fail/task-comm-14.rs \\\n-                    test/compile-fail/bad-expr-path.rs \\\n-                    test/compile-fail/import.rs \\\n-                    test/compile-fail/import2.rs \\\n-                    test/compile-fail/import3.rs \\\n-                    test/compile-fail/import4.rs \\\n-                    test/compile-fail/bad-recv.rs \\\n-                    test/compile-fail/bad-send.rs \\\n-                    test/compile-fail/infinite-vec-type-recursion.rs \\\n-                    test/compile-fail/tail-non-call.rs \\\n-                    test/compile-fail/writing-through-read-alias.rs\n-\n-TEST_XFAILS_RUSTC := $(addprefix test/run-pass/, \\\n-                        acyclic-unwind.rs \\\n-                        alt-pattern-drop.rs \\\n-                        alt-type-simple.rs \\\n-                        basic-1.rs \\\n-                        basic-2.rs \\\n-                        basic.rs \\\n-                        child-outlives-parent.rs \\\n-                        clone-with-exterior.rs \\\n-                        comm.rs \\\n-                        constrained-type.rs \\\n-                        destructor-ordering.rs \\\n-                        iter-ret.rs \\\n-                        lazychan.rs \\\n-                        lib-bitv.rs \\\n-                        lib-deque.rs \\\n-                        lib-int.rs \\\n-                        lib-io.rs \\\n-                        lib-map.rs \\\n-                        lib-rand.rs \\\n-                        lib-sha1.rs \\\n-                        lib-sort.rs \\\n-                        lib-str.rs \\\n-                        lib-str-buf.rs \\\n-                        lib-task.rs \\\n-                        lib-uint.rs \\\n-                        lib-vec-str-conversions.rs \\\n-                        lib-vec.rs \\\n-                        many.rs \\\n-                        mlist-cycle.rs \\\n-                        mlist.rs \\\n-                        mutable-alias-vec.rs \\\n-                        obj-as.rs \\\n-                        obj-dtor.rs \\\n-                        pred.rs \\\n-                        preempt.rs \\\n-                        rt-circular-buffer.rs \\\n-                        size-and-align.rs \\\n-                        spawn-fn.rs \\\n-                        spawn-module-qualified.rs \\\n-                        spawn.rs \\\n-                        str-append.rs \\\n-                        syntax-extension-fmt.rs \\\n-                        syntax-extension-shell.rs \\\n-                        task-comm-0.rs \\\n-                        task-comm-1.rs \\\n-                        task-comm-10.rs \\\n-                        task-comm-11.rs \\\n-                        task-comm-12.rs \\\n-                        task-comm-13-thread.rs \\\n-                        task-comm-13.rs \\\n-                        task-comm-15.rs \\\n-                        task-comm-2.rs \\\n-                        task-comm-3.rs \\\n-                        task-comm-7.rs \\\n-                        task-comm-8.rs \\\n-                        task-comm-9.rs \\\n-                        task-comm.rs \\\n-                        task-killjoin.rs \\\n-                        task-life-0.rs \\\n-                        threads.rs \\\n-                        type-sizes.rs \\\n-                        typestate-cfg-nesting.rs \\\n-                        user.rs \\\n-                        utf8.rs \\\n-                        vec-alloc-append.rs \\\n-                        vec-append.rs \\\n-                        vec-slice.rs \\\n-                        while-with-break.rs \\\n-                        yield.rs \\\n-                        yield2.rs \\\n-                        multi.rc \\\n-                        native-mod.rc \\\n-                        native.rc \\\n-                        ) \\\n-                     $(filter-out \\\n-                      $(addprefix test/compile-fail/, \\\n-                        alt-tag-nullary.rs \\\n-                        alt-tag-unary.rs \\\n-                        arg-count-mismatch.rs \\\n-                        arg-type-mismatch.rs \\\n-                        bad-expr-path.rs \\\n-                        bad-expr-path2.rs \\\n-                        bogus-tag.rs \\\n-                        fru-extra-field.rs \\\n-                        import.rs \\\n-                        import2.rs \\\n-                        import3.rs \\\n-                        import4.rs \\\n-                        import-loop.rs \\\n-                        import-loop-2.rs \\\n-                        multiline-comment-line-tracking.rs \\\n-                        output-type-mismatch.rs \\\n-                        rec-missing-fields.rs \\\n-                        reserved-dec.rs \\\n-                        reserved-f128.rs \\\n-                        reserved-f16.rs \\\n-                        reserved-f80.rs \\\n-                        reserved-m128.rs \\\n-                        reserved-m32.rs \\\n-                        reserved-m64.rs \\\n-                        tail-non-call.rs \\\n-                        tail-typeck.rs \\\n-                        type-shadow.rs \\\n-                        while-type-error.rs \\\n-                        wrong-ret-type.rs \\\n-                        ), \\\n-                      $(wildcard test/*fail/*.rs test/*fail/*.rc)) \\\n-                     test/bench/shootout/fannkuchredux.rs \\\n-                     test/bench/shootout/fasta.rs \\\n-                     test/bench/shootout/binarytrees.rs \\\n-                     $(wildcard test/bench/99-bottles/*rs)\n-\n-ifdef MINGW_CROSS\n-TEST_XFAILS_BOOT += test/run-pass/native-mod.rc\n-TEST_XFAILS_RUSTC += test/run-pass/native-mod.rc\n-endif\n-ifdef CFG_WINDOWSY\n-TEST_XFAILS_BOOT += test/run-pass/native-mod.rc\n-TEST_XFAILS_RUSTC += test/run-pass/native-mod.rc\n-endif\n-\n-BENCH_RS := $(wildcard test/bench/shootout/*rs) \\\n-            $(wildcard test/bench/99-bottles/*rs)\n-RPASS_RC := $(wildcard test/run-pass/*.rc)\n-RPASS_RS := $(wildcard test/run-pass/*.rs) $(BENCH_RS)\n-RFAIL_RC := $(wildcard test/run-fail/*.rc)\n-RFAIL_RS := $(wildcard test/run-fail/*.rs)\n-CFAIL_RC := $(wildcard test/compile-fail/*.rc)\n-CFAIL_RS := $(wildcard test/compile-fail/*.rs)\n-\n-ifdef CHECK_XFAILS\n-TEST_RPASS_CRATES_BOOT := $(filter $(TEST_XFAILS_BOOT), $(RPASS_RC))\n-TEST_RPASS_CRATES_RUSTC := $(filter $(TEST_XFAILS_RUSTC), $(RPASS_RC))\n-TEST_RPASS_SOURCES_BOOT := $(filter $(TEST_XFAILS_BOOT), $(RPASS_RS))\n-TEST_RPASS_SOURCES_RUSTC := $(filter $(TEST_XFAILS_RUSTC), $(RPASS_RS))\n-else\n-TEST_RPASS_CRATES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RPASS_RC))\n-TEST_RPASS_CRATES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(RPASS_RC))\n-TEST_RPASS_SOURCES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RPASS_RS))\n-TEST_RPASS_SOURCES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(RPASS_RS))\n-endif\n-\n-TEST_RPASS_EXES_BOOT := \\\n-              $(TEST_RPASS_CRATES_BOOT:.rc=.boot$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_RPASS_SOURCES_BOOT:.rs=.boot$(CFG_EXE_SUFFIX))\n-TEST_RPASS_EXES_RUSTC := \\\n-              $(TEST_RPASS_CRATES_RUSTC:.rc=.rustc$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_RPASS_SOURCES_RUSTC:.rs=.rustc$(CFG_EXE_SUFFIX))\n-\n-TEST_RPASS_OUTS_BOOT  := \\\n-                 $(TEST_RPASS_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot.out)\n-TEST_RPASS_OUTS_RUSTC := \\\n-                 $(TEST_RPASS_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc.out)\n-\n-TEST_RPASS_TMPS_BOOT  := \\\n-  $(TEST_RPASS_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot$(CFG_EXE_SUFFIX).tmp)\n-TEST_RPASS_TMPS_RUSTC := \\\n-  $(TEST_RPASS_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc$(CFG_EXE_SUFFIX).tmp)\n-\n-\n-TEST_RFAIL_CRATES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RFAIL_RC))\n-TEST_RFAIL_CRATES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(RFAIL_RC))\n-TEST_RFAIL_SOURCES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(RFAIL_RS))\n-TEST_RFAIL_SOURCES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(RFAIL_RS))\n-\n-TEST_RFAIL_EXES_BOOT := \\\n-              $(TEST_RFAIL_CRATES_BOOT:.rc=.boot$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_RFAIL_SOURCES_BOOT:.rs=.boot$(CFG_EXE_SUFFIX))\n-TEST_RFAIL_EXES_RUSTC := \\\n-              $(TEST_RFAIL_CRATES_RUSTC:.rc=.rustc$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_RFAIL_SOURCES_RUSTC:.rs=.rustc$(CFG_EXE_SUFFIX))\n-\n-TEST_RFAIL_OUTS_BOOT  := \\\n-                  $(TEST_RFAIL_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot.out)\n-TEST_RFAIL_OUTS_RUSTC := \\\n-                  $(TEST_RFAIL_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc.out)\n-\n-TEST_RFAIL_TMPS_BOOT  := \\\n-  $(TEST_RFAIL_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot$(CFG_EXE_SUFFIX).tmp)\n-TEST_RFAIL_TMPS_RUSTC := \\\n-  $(TEST_RFAIL_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc$(CFG_EXE_SUFFIX).tmp)\n-\n-\n-TEST_CFAIL_CRATES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(CFAIL_RC))\n-TEST_CFAIL_CRATES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(CFAIL_RC))\n-TEST_CFAIL_SOURCES_BOOT := $(filter-out $(TEST_XFAILS_BOOT), $(CFAIL_RS))\n-TEST_CFAIL_SOURCES_RUSTC := $(filter-out $(TEST_XFAILS_RUSTC), $(CFAIL_RS))\n-\n-TEST_CFAIL_EXES_BOOT := \\\n-              $(TEST_CFAIL_CRATES_BOOT:.rc=.boot$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_CFAIL_SOURCES_BOOT:.rs=.boot$(CFG_EXE_SUFFIX))\n-TEST_CFAIL_EXES_RUSTC := \\\n-              $(TEST_CFAIL_CRATES_RUSTC:.rc=.rustc$(CFG_EXE_SUFFIX)) \\\n-              $(TEST_CFAIL_SOURCES_RUSTC:.rs=.rustc$(CFG_EXE_SUFFIX))\n-\n-TEST_CFAIL_OUTS_BOOT := \\\n-                $(TEST_CFAIL_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot.out)\n-TEST_CFAIL_OUTS_RUSTC := \\\n-                $(TEST_CFAIL_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc.out)\n-\n-TEST_CFAIL_TMPS_BOOT := \\\n-  $(TEST_CFAIL_EXES_BOOT:.boot$(CFG_EXE_SUFFIX)=.boot$(CFG_EXE_SUFFIX).tmp)\n-TEST_CFAIL_TMPS_RUSTC := \\\n-  $(TEST_CFAIL_EXES_RUSTC:.rustc$(CFG_EXE_SUFFIX)=.rustc$(CFG_EXE_SUFFIX).tmp)\n-\n-\n-ALL_TEST_CRATES := $(TEST_CFAIL_CRATES_BOOT) \\\n-                   $(TEST_RFAIL_CRATES_BOOT) \\\n-                   $(TEST_RPASS_CRATES_BOOT)\n-\n-ALL_TEST_SOURCES := $(TEST_CFAIL_SOURCES_BOOT) \\\n-                    $(TEST_RFAIL_SOURCES_BOOT) \\\n-                    $(TEST_RPASS_SOURCES_BOOT)\n-\n-ALL_TEST_INPUTS := $(wildcard test/*/*.rs test/*/*/*.rs test/*/*.rc)\n-\n-# The test suite currently relies on logging to validate results so\n-# make sure that logging uses the default configuration\n-unexport RUST_LOG\n-\n-\n-check_nocompile: $(TEST_CFAIL_OUTS_BOOT)\n-\n-check: tidy \\\n-       $(TEST_RPASS_EXES_BOOT) $(TEST_RFAIL_EXES_BOOT) \\\n-       $(TEST_RPASS_OUTS_BOOT) $(TEST_RFAIL_OUTS_BOOT) \\\n-       $(TEST_CFAIL_OUTS_BOOT)\n-\n-compile-check: tidy \\\n-       $(TEST_RPASS_EXES_BOOT) $(TEST_RFAIL_EXES_BOOT)\n-\n-\n-ifdef CFG_LLVM_CONFIG\n-\n-ALL_TEST_CRATES += $(TEST_CFAIL_CRATES_RUSTC) \\\n-                   $(TEST_RFAIL_CRATES_RUSTC) \\\n-                   $(TEST_RPASS_CRATES_RUSTC)\n-\n-ALL_TEST_SOURCES += $(TEST_CFAIL_SOURCES_RUSTC) \\\n-                    $(TEST_RFAIL_SOURCES_RUSTC) \\\n-                    $(TEST_RPASS_SOURCES_RUSTC)\n-\n-check_nocompile: $(TEST_CFAIL_OUTS_RUSTC)\n-\n-check:  tidy \\\n-        $(TEST_RPASS_EXES_RUSTC) $(TEST_RFAIL_EXES_RUSTC) \\\n-        $(TEST_RPASS_OUTS_RUSTC) $(TEST_RFAIL_OUTS_RUSTC) \\\n-        $(TEST_CFAIL_OUTS_RUSTC)\n-\n-compile-check: tidy \\\n-       $(TEST_RPASS_EXES_RUSTC) $(TEST_RFAIL_EXES_RUSTC)\n-\n-endif\n-\n-BREQ := $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n-SREQ := $(CFG_RUSTC) $(CFG_RUNTIME) $(CFG_STDLIB)\n-\n-# Cancel the implicit .out rule in GNU make.\n-%.out: %\n-\n-%.out: %.out.tmp\n-\t$(CFG_QUIET)mv $< $@\n-\n-test/run-pass/%.out.tmp: test/run-pass/%$(CFG_EXE_SUFFIX) $(CFG_RUNTIME)\n-\t$(CFG_QUIET)rm -f $<.tmp\n-\t@$(call CFG_ECHO, run: $<)\n-\t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) > $@\n-\n-test/bench/shootout/%.out.tmp: test/bench/shootout/%$(CFG_EXE_SUFFIX) \\\n-                                  $(CFG_RUNTIME)\n-\t$(CFG_QUIET)rm -f $<.tmp\n-\t@$(call CFG_ECHO, run: $<)\n-\t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) > $@\n-\n-test/bench/99-bottles/%.out.tmp: test/bench/99-bottles/%$(CFG_EXE_SUFFIX) \\\n-                                  $(CFG_RUNTIME)\n-\t$(CFG_QUIET)rm -f $<.tmp\n-\t@$(call CFG_ECHO, run: $<)\n-\t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) > $@\n-\n-test/run-fail/%.out.tmp: test/run-fail/%$(CFG_EXE_SUFFIX) \\\n-                                  $(CFG_RUNTIME)\n-\t$(CFG_QUIET)rm -f $<.tmp\n-\t@$(call CFG_ECHO, run: $<)\n-\t$(CFG_QUIET)grep -q error-pattern test/run-fail/$(basename $*).rs\n-\t$(CFG_QUIET)rm -f $@\n-\t$(CFG_QUIET)$(call CFG_RUN_TARG, $<) >$@ 2>&1 ; X=$$? ; \\\n-      if [ $$X -eq 0 ] ; then exit 1 ; else exit 0 ; fi\n-\t$(CFG_QUIET)grep --text --quiet \\\n-      \"$$(grep error-pattern test/run-fail/$(basename $*).rs \\\n-        | cut -d : -f 2- | tr -d '\\n\\r')\" $@\n-\n-test/compile-fail/%.boot.out.tmp: test/compile-fail/%.rs $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot]: $<)\n-\t$(CFG_QUIET)grep -q error-pattern $<\n-\t$(CFG_QUIET)rm -f $@\n-\t$(BOOT) -o $(@:.out=$(CFG_EXE_SUFFIX)) $< >$@ 2>&1; test $$? -ne 0\n-\t$(CFG_QUIET)grep --text --quiet \\\n-      \"$$(grep error-pattern $< | cut -d : -f 2- | tr -d '\\n\\r')\" $@\n-\n-test/compile-fail/%.rustc.out.tmp: test/compile-fail/%.rs $(SREQ)\n-\t@$(call CFG_ECHO, compile [rustc]: $<)\n-\t$(CFG_QUIET)grep -q error-pattern $<\n-\t$(CFG_QUIET)rm -f $@\n-\t$(RUSTC) -o $(@:.out=$(CFG_EXE_SUFFIX)) $< >$@ 2>&1; test $$? -ne 0\n-\t$(CFG_QUIET)grep --text --quiet \\\n-      \"$$(grep error-pattern $< | cut -d : -f 2- | tr -d '\\n\\r')\" $@\n-\n-%.bc: %.rc $(SREQ)\n-\t@$(call CFG_ECHO, compile [rustc]: $<)\n-\t$(RUSTC) -o $@ $<\n-\n-%.bc: %.rs $(SREQ)\n-\t@$(call CFG_ECHO, compile [rustc]: $<)\n-\t$(RUSTC) -o $@ $<\n-\n-%.ll: %.bc\n-\t@$(call CFG_ECHO, dis [llvm]: $<)\n-\t$(CFG_QUIET)$(LLVM-DIS) -o $@ $<\n-\n-\n-%.s: %.bc\n-\t@$(call CFG_ECHO, compile [llvm]: $<)\n-\t$(CFG_QUIET)$(LLC) $(CFG_LLC_CFLAGS) -o $@ $<\n-\n-%.o: %.s\n-\t@$(call CFG_ECHO, assemble [llvm]: $<)\n-\t$(CFG_QUIET)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n-\n-%.rustc$(CFG_EXE_SUFFIX): %.o $(CFG_RUNTIME) glue.o\n-\t@$(call CFG_ECHO, link [llvm]: $<)\n-\t$(CFG_QUIET)gcc $(CFG_GCC_CFLAGS) glue.o -o $@ $< -L. -lrustrt\n-\t@# dsymutil sometimes fails or prints a warning, but the\n-\t@# program still runs.  Since it simplifies debugging other\n-\t@# programs, I\\'ll live with the noise.\n-\t-$(CFG_QUIET)$(DSYMUTIL) $@\n-\n-%.boot$(CFG_EXE_SUFFIX): %.rs $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot]: $<)\n-\t$(BOOT) -o $@ $<\n-\n-%.boot$(CFG_EXE_SUFFIX): %.rc $(BREQ)\n-\t@$(call CFG_ECHO, compile [boot]: $<)\n-\t$(BOOT) -o $@ $<\n-\n-\n-######################################################################\n-# Auto-dependency\n-######################################################################\n-\n-ML_DEPFILES := $(BOOT_MLS:%.ml=%.d)\n-C_DEPFILES := $(RUNTIME_CS:%.cpp=%.d)\n-\n-%.d: %.cpp $(MKFILES)\n-\t@$(call CFG_ECHO, dep: $<)\n-\t$(CFG_QUIET)$(call CFG_DEPEND_C, $@ \\\n-      $(patsubst %.cpp, %.o, $<), \\\n-      $(RUNTIME_INCS)) $< $(CFG_PATH_MUNGE) >$@.tmp \\\n-      && mv $@.tmp $@\n-\n-%.d: %.ml $(MKFILES)\n-\t@$(call CFG_ECHO, dep: $<)\n-\t$(CFG_QUIET)ocamldep$(OPT) $(ML_DEP_INCS) $< $(CFG_PATH_MUNGE) >$@.tmp \\\n-    && mv $@.tmp $@\n-\n-%.d: %.mli $(MKFILES)\n-\t@$(call CFG_ECHO, dep: $<)\n-\t$(CFG_QUIET)ocamldep$(OPT) $(ML_DEP_INCS) $< $(CFG_PATH_MUNGE) >$@.tmp \\\n-    && mv $@.tmp $@\n-\n-ifneq ($(MAKECMDGOALS),clean)\n--include $(ML_DEPFILES) $(C_DEPFILES)\n-endif\n-\n-RUSTBOOT_PROBE := $(wildcard $(CFG_BOOT))\n-\n-ifneq ($(RUSTBOOT_PROBE),)\n-CFG_INFO := $(info cfg: using built $(CFG_BOOT) for rust deps)\n-STDLIB_DEPFILE := $(CFG_STDLIB).d\n-RUSTC_DEPFILE := $(CFG_RUSTC).d\n-CRATE_DEPFILES := $(ALL_TEST_CRATES:%.rc=%.d) \\\n-                  $(STDLIB_DEPFILE) \\\n-                  $(RUSTC_DEPFILE)\n-\n-$(STDLIB_DEPFILE): $(STDLIB_CRATE) $(MKFILES) $(CFG_BOOT) $(STDLIB_INPUTS)\n-\t@$(call CFG_ECHO, dep: $<)\n-\t$(BOOT) -shared -rdeps $< $(CFG_PATH_MUNGE) >$@.tmp \\\n-    && mv $@.tmp $@\n-\n-$(RUSTC_DEPFILE): $(COMPILER_CRATE) $(COMPILER_INPUTS) \\\n-  $(STDLIB_CRATE) $(MKFILES) $(CFG_BOOT)\n-\t@$(call CFG_ECHO, dep: $<)\n-\t$(BOOT) -shared -rdeps $< $(CFG_PATH_MUNGE) >$@.tmp \\\n-    && mv $@.tmp $@\n-\n-%.d: %.rc $(MKFILES) $(CFG_BOOT)\n-\t@$(call CFG_ECHO, dep: $<)\n-\t$(BOOT) -rdeps $< $(CFG_PATH_MUNGE) >$@.tmp \\\n-    && mv $@.tmp $@\n-\n-%.d: %.rs $(MKFILES) $(CFG_BOOT)\n-\t@$(call CFG_ECHO, dep: $<)\n-\t$(BOOT) -rdeps $< $(CFG_PATH_MUNGE) >$@.tmp \\\n-    && mv $@.tmp $@\n-\n-ifneq ($(MAKECMDGOALS),clean)\n--include $(CRATE_DEPFILES)\n-endif\n-endif\n-\n-######################################################################\n-# Distribution\n-######################################################################\n-\n-PKG_NAME := rust\n-PKG_VER  := $(shell date +\"%Y-%m-%d\")-snap\n-PKG_DIR := $(PKG_NAME)-$(PKG_VER)\n-PKG_TAR := $(PKG_DIR).tar.gz\n-PKG_3RDPARTY := rt/valgrind.h rt/memcheck.h \\\n-                rt/isaac/rand.h rt/isaac/standard.h \\\n-                rt/uthash/uthash.h rt/uthash/utlist.h \\\n-                rt/bigint/bigint.h rt/bigint/bigint_int.cpp \\\n-                rt/bigint/bigint_ext.cpp rt/bigint/low_primes.h\n-PKG_FILES := README boot/README \\\n-             $(wildcard etc/*.*) \\\n-             $(MKFILES) $(BOOT_MLS) boot/fe/lexer.mll \\\n-             $(COMPILER_INPUTS) \\\n-             $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-             $(RUNTIME_CS) $(RUNTIME_HDR) $(PKG_3RDPARTY) \\\n-             $(ALL_TEST_INPUTS)\n-\n-dist:\n-\t@$(call CFG_ECHO, making dist dir)\n-\t$(CFG_QUIET)mkdir -p dist/$(PKG_DIR)\n-\t$(CFG_QUIET)tar -c $(PKG_FILES) | tar -x -C dist/$(PKG_DIR)\n-\t$(CFG_QUIET)cp ../LICENSE.txt dist/$(PKG_DIR)\n-\t$(CFG_QUIET)tar -czf $(PKG_TAR) -C dist $(PKG_DIR)\n-\t$(CFG_QUIET)rm -Rf dist\n-\n-distcheck:\n-\t@$(call CFG_ECHO, making dist dir)\n-\t$(CFG_QUIET)rm -Rf $(PKG_NAME)-*.tar.gz dist\n-\t$(CFG_QUIET)mkdir -p dist/$(PKG_DIR)\n-\t$(CFG_QUIET)tar -c $(PKG_FILES) | tar -x -C dist/$(PKG_DIR)\n-\t@$(call CFG_ECHO, making 'check' in dist dir)\n-\t$(CFG_QUIET)make -C dist/$(PKG_DIR) check\n-\t$(CFG_QUIET)make -C dist/$(PKG_DIR) clean\n-\t@$(call CFG_ECHO, making tarball)\n-\t$(CFG_QUIET)cp ../LICENSE.txt dist/$(PKG_DIR)\n-\t$(CFG_QUIET)tar -czf $(PKG_TAR) -C dist $(PKG_DIR)\n-\t$(CFG_QUIET)rm -Rf dist\n-\t@echo\n-\t@echo -----------------------------------------------\n-\t@echo $(PKG_TAR) ready for distribution\n-\t@echo -----------------------------------------------\n-\n-\n-######################################################################\n-# Cleanup\n-######################################################################\n-\n-.PHONY: clean native-clean tidy\n-\n-tidy:\n-\t@$(call CFG_ECHO, check: formatting)\n-\t$(CFG_QUIET) python etc/tidy.py \\\n-      $(wildcard ../*.txt) \\\n-      ../README \\\n-      $(filter-out $(GENERATED) $(PKG_3RDPARTY) etc/%, $(PKG_FILES))\n-\n-runtime-clean:\n-\t$(CFG_QUIET)rm -f $(RUNTIME_OBJS) $(CFG_RUNTIME)\n-\n-clean:\n-\t@$(call CFG_ECHO, cleaning)\n-\t$(CFG_QUIET)rm -f $(RUNTIME_OBJS)\n-\t$(CFG_QUIET)rm -f $(BOOT_CMOS) $(BOOT_CMIS) $(BOOT_CMXS) $(BOOT_OBJS)\n-\t$(CFG_QUIET)rm -f $(CFG_RUSTC)\n-\t$(CFG_QUIET)rm -f $(ML_DEPFILES) $(C_DEPFILES) $(CRATE_DEPFILES)\n-\t$(CFG_QUIET)rm -f $(ML_DEPFILES:%.d=%.d.tmp)\n-\t$(CFG_QUIET)rm -f $(C_DEPFILES:%.d=%.d.tmp)\n-\t$(CFG_QUIET)rm -f $(CRATE_DEPFILES:%.d=%.d.tmp)\n-\t$(CFG_QUIET)rm -f $(GENERATED) glue.bc glue.s\n-\t$(CFG_QUIET)rm -f $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n-\t$(CFG_QUIET)rm -Rf $(PKG_NAME)-*.tar.gz dist\n-\t$(CFG_QUIET)rm -f $(foreach ext,cmx cmi cmo cma bc o a d exe,\\\n-                        $(wildcard boot/*/*.$(ext) boot/*/*/*.$(ext)))\n-\t$(CFG_QUIET)rm -Rf $(foreach ext,out llvm x86 boot rustc bc o s exe dSYM,\\\n-                        $(wildcard test/*/*.$(ext)))\n-\n-\n-# Local Variables:\n-# mode: makefile-gmake\n-# fill-column: 78;\n-# buffer-file-coding-system: utf-8-unix\n-# compile-command: \"make -k 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-# End:"}]}