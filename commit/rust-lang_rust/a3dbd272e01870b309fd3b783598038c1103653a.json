{"sha": "a3dbd272e01870b309fd3b783598038c1103653a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZGJkMjcyZTAxODcwYjMwOWZkM2I3ODM1OTgwMzhjMTEwMzY1M2E=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-10T17:37:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-10T17:37:07Z"}, "message": "Merge #4406 #4410 #4411 #4417\n\n4406: Update cargo-metadata r=matklad a=edwin0cheng\n\nThis PR update `cargo-metadata` to  0.10.0 and it also relax the` serde-derive` deps to 1.0 for tests in `proc-macro-srv`.\r\n\r\ncc @robojumper \r\n\r\nr= @matklad  , I think you would have something to say related to https://github.com/serde-rs/json/issues/647#issue-593788429 ?\r\n\r\n\r\n\r\n\n\n4410: Improve wording in comment r=matklad a=edwin0cheng\n\n\n\n4411: do not remove then block when you unwrap else block #4361 r=matklad a=bnjjj\n\nclose #4361 \n\n4417: Omit default types in HirDisplay SourceCode mode r=matklad a=TimoFreiberg\n\nCloses #4390\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\nCo-authored-by: Timo Freiberg <timo.freiberg@gmail.com>", "tree": {"sha": "68cd7dcf07415b80ed0d6b7af2cbcc1565a1a640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68cd7dcf07415b80ed0d6b7af2cbcc1565a1a640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3dbd272e01870b309fd3b783598038c1103653a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeuDvDCRBK7hj4Ov3rIwAAdHIIABXrBgdibTM3bJHDg/Anw0p3\noarJB3DDDFFyBthT8gQlWQVupTjt8T7si9F8BQbHqlhBB2sY4k6KX94uWNc2BupG\ng4ThRbSoCUvZZAg0CokKCg0K1XYQdd2oTs7Hjemmg0mWWvxqoSfAapqe8P8o1exZ\nA0CR+w9Vj0uR7cdbmCkvQrzLZPq2ZlH+o53JxQGXmSkK6hj5w5ZToHwSAyUSp4Rw\nuxodiW15qlS2sttZB98iDltfERncHZgnIufn6LVCvRsHe3nKGroI5AHk+bT8fDYQ\n5pLYPa19kc2b0KpB0N/lqnAJTcFrvfS7GasDiXJ+rDtygdFEYKJ4CPDOwHTOTJw=\n=6SXN\n-----END PGP SIGNATURE-----\n", "payload": "tree 68cd7dcf07415b80ed0d6b7af2cbcc1565a1a640\nparent 348cbc054c91dbdae3633d5f401a1187e79232ee\nparent 3de3b52f10d6881a5e6cb5ccc6d6321eea9175fa\nparent 31d5c8d4878911b21280b144b1aac19545509973\nparent 98a7bb24358c0f1e9353195d6933f5973c8edaba\nparent cbbbd4832582256820695bb73fdb4ca125f1b1f9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589132227 +0000\ncommitter GitHub <noreply@github.com> 1589132227 +0000\n\nMerge #4406 #4410 #4411 #4417\n\n4406: Update cargo-metadata r=matklad a=edwin0cheng\n\nThis PR update `cargo-metadata` to  0.10.0 and it also relax the` serde-derive` deps to 1.0 for tests in `proc-macro-srv`.\r\n\r\ncc @robojumper \r\n\r\nr= @matklad  , I think you would have something to say related to https://github.com/serde-rs/json/issues/647#issue-593788429 ?\r\n\r\n\r\n\r\n\n\n4410: Improve wording in comment r=matklad a=edwin0cheng\n\n\n\n4411: do not remove then block when you unwrap else block #4361 r=matklad a=bnjjj\n\nclose #4361 \n\n4417: Omit default types in HirDisplay SourceCode mode r=matklad a=TimoFreiberg\n\nCloses #4390\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\nCo-authored-by: Timo Freiberg <timo.freiberg@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3dbd272e01870b309fd3b783598038c1103653a", "html_url": "https://github.com/rust-lang/rust/commit/a3dbd272e01870b309fd3b783598038c1103653a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3dbd272e01870b309fd3b783598038c1103653a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "348cbc054c91dbdae3633d5f401a1187e79232ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/348cbc054c91dbdae3633d5f401a1187e79232ee", "html_url": "https://github.com/rust-lang/rust/commit/348cbc054c91dbdae3633d5f401a1187e79232ee"}, {"sha": "3de3b52f10d6881a5e6cb5ccc6d6321eea9175fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de3b52f10d6881a5e6cb5ccc6d6321eea9175fa", "html_url": "https://github.com/rust-lang/rust/commit/3de3b52f10d6881a5e6cb5ccc6d6321eea9175fa"}, {"sha": "31d5c8d4878911b21280b144b1aac19545509973", "url": "https://api.github.com/repos/rust-lang/rust/commits/31d5c8d4878911b21280b144b1aac19545509973", "html_url": "https://github.com/rust-lang/rust/commit/31d5c8d4878911b21280b144b1aac19545509973"}, {"sha": "98a7bb24358c0f1e9353195d6933f5973c8edaba", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a7bb24358c0f1e9353195d6933f5973c8edaba", "html_url": "https://github.com/rust-lang/rust/commit/98a7bb24358c0f1e9353195d6933f5973c8edaba"}, {"sha": "cbbbd4832582256820695bb73fdb4ca125f1b1f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbbd4832582256820695bb73fdb4ca125f1b1f9", "html_url": "https://github.com/rust-lang/rust/commit/cbbbd4832582256820695bb73fdb4ca125f1b1f9"}], "stats": {"total": 382, "additions": 285, "deletions": 97}, "files": [{"sha": "eefa9a676cf73935196661dd1e2a104e7f58cae4", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -89,9 +89,9 @@ dependencies = [\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.9.1\"\n+version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"46e3374c604fb39d1a2f35ed5e4a4e30e60d01fab49446e08f1b3e9a90aef202\"\n+checksum = \"b8de60b887edf6d74370fc8eb177040da4847d971d6234c7b13a6da324ef0caf\"\n dependencies = [\n  \"semver\",\n  \"serde\",\n@@ -1514,18 +1514,18 @@ checksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.106\"\n+version = \"1.0.107\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"36df6ac6412072f67cf767ebbde4133a5b2e88e76dc6187fa7104cd16f783399\"\n+checksum = \"eba7550f2cdf88ffc23ab0f1607133486c390a8c0f89b57e589b9654ee15e04d\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.106\"\n+version = \"1.0.107\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9e549e3abf4fb8621bd1609f11dfc9f5e50320802273b12f3811a67e6716ea6c\"\n+checksum = \"10be45e22e5597d4b88afcc71f9d7bfadcd604bf0c78a3ab4582b8d2b37f39f3\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "7ced006266f2e7c3302e73618d8fa69c6c9ca0e7", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -209,7 +209,7 @@ struct Test<K, T = u8> {\n }\n \n fn main() {\n-    let test<|>: Test<i32, u8> = Test { t: 23, k: 33 };\n+    let test<|>: Test<i32> = Test { t: 23, k: 33 };\n }\"#,\n         );\n     }"}, {"sha": "e52ec557e1857bd48dd86a7fffa61840fc555eaf", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 193, "deletions": 28, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -1,6 +1,6 @@\n use crate::{AssistContext, AssistId, Assists};\n \n-use ast::LoopBodyOwner;\n+use ast::{ElseBranch, Expr, LoopBodyOwner};\n use ra_fmt::unwrap_trivial_block;\n use ra_syntax::{ast, match_ast, AstNode, TextRange, T};\n \n@@ -25,19 +25,11 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let l_curly_token = ctx.find_token_at_offset(T!['{'])?;\n     let block = ast::BlockExpr::cast(l_curly_token.parent())?;\n     let parent = block.syntax().parent()?;\n+    let assist_id = AssistId(\"unwrap_block\");\n+    let assist_label = \"Unwrap block\";\n+\n     let (expr, expr_to_unwrap) = match_ast! {\n         match parent {\n-            ast::IfExpr(if_expr) => {\n-                let expr_to_unwrap = if_expr.blocks().find_map(|expr| extract_expr(ctx.frange.range, expr));\n-                let expr_to_unwrap = expr_to_unwrap?;\n-                // Find if we are in a else if block\n-                let ancestor = if_expr.syntax().parent().and_then(ast::IfExpr::cast);\n-\n-                match ancestor {\n-                    None => (ast::Expr::IfExpr(if_expr), expr_to_unwrap),\n-                    Some(ancestor) => (ast::Expr::IfExpr(ancestor), expr_to_unwrap),\n-                }\n-            },\n             ast::ForExpr(for_expr) => {\n                 let block_expr = for_expr.loop_body()?;\n                 let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n@@ -53,27 +45,62 @@ pub(crate) fn unwrap_block(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                 let expr_to_unwrap = extract_expr(ctx.frange.range, block_expr)?;\n                 (ast::Expr::LoopExpr(loop_expr), expr_to_unwrap)\n             },\n+            ast::IfExpr(if_expr) => {\n+                let mut resp = None;\n+\n+                let then_branch = if_expr.then_branch()?;\n+                if then_branch.l_curly_token()?.text_range().contains_range(ctx.frange.range) {\n+                    if let Some(ancestor) = if_expr.syntax().parent().and_then(ast::IfExpr::cast) {\n+                        // For `else if` blocks\n+                        let ancestor_then_branch = ancestor.then_branch()?;\n+                        let l_curly_token = then_branch.l_curly_token()?;\n+\n+                        let target = then_branch.syntax().text_range();\n+                        return acc.add(assist_id, assist_label, target, |edit| {\n+                            let range_to_del_else_if = TextRange::new(ancestor_then_branch.syntax().text_range().end(), l_curly_token.text_range().start());\n+                            let range_to_del_rest = TextRange::new(then_branch.syntax().text_range().end(), if_expr.syntax().text_range().end());\n+\n+                            edit.set_cursor(ancestor_then_branch.syntax().text_range().end());\n+                            edit.delete(range_to_del_rest);\n+                            edit.delete(range_to_del_else_if);\n+                            edit.replace(target, update_expr_string(then_branch.to_string(), &[' ', '{']));\n+                        });\n+                    } else {\n+                        resp = Some((ast::Expr::IfExpr(if_expr.clone()), Expr::BlockExpr(then_branch)));\n+                    }\n+                } else if let Some(else_branch) = if_expr.else_branch() {\n+                    match else_branch {\n+                        ElseBranch::Block(else_block) => {\n+                            let l_curly_token = else_block.l_curly_token()?;\n+                            if l_curly_token.text_range().contains_range(ctx.frange.range) {\n+                                let target = else_block.syntax().text_range();\n+                                return acc.add(assist_id, assist_label, target, |edit| {\n+                                    let range_to_del = TextRange::new(then_branch.syntax().text_range().end(), l_curly_token.text_range().start());\n+\n+                                    edit.set_cursor(then_branch.syntax().text_range().end());\n+                                    edit.delete(range_to_del);\n+                                    edit.replace(target, update_expr_string(else_block.to_string(), &[' ', '{']));\n+                                });\n+                            }\n+                        },\n+                        ElseBranch::IfExpr(_) => {},\n+                    }\n+                }\n+\n+                resp?\n+            },\n             _ => return None,\n         }\n     };\n \n     let target = expr_to_unwrap.syntax().text_range();\n-    acc.add(AssistId(\"unwrap_block\"), \"Unwrap block\", target, |edit| {\n+    acc.add(assist_id, assist_label, target, |edit| {\n         edit.set_cursor(expr.syntax().text_range().start());\n \n-        let pat_start: &[_] = &[' ', '{', '\\n'];\n-        let expr_to_unwrap = expr_to_unwrap.to_string();\n-        let expr_string = expr_to_unwrap.trim_start_matches(pat_start);\n-        let mut expr_string_lines: Vec<&str> = expr_string.lines().collect();\n-        expr_string_lines.pop(); // Delete last line\n-\n-        let expr_string = expr_string_lines\n-            .into_iter()\n-            .map(|line| line.replacen(\"    \", \"\", 1)) // Delete indentation\n-            .collect::<Vec<String>>()\n-            .join(\"\\n\");\n-\n-        edit.replace(expr.syntax().text_range(), expr_string);\n+        edit.replace(\n+            expr.syntax().text_range(),\n+            update_expr_string(expr_to_unwrap.to_string(), &[' ', '{', '\\n']),\n+        );\n     })\n }\n \n@@ -87,6 +114,18 @@ fn extract_expr(cursor_range: TextRange, block: ast::BlockExpr) -> Option<ast::E\n     }\n }\n \n+fn update_expr_string(expr_str: String, trim_start_pat: &[char]) -> String {\n+    let expr_string = expr_str.trim_start_matches(trim_start_pat);\n+    let mut expr_string_lines: Vec<&str> = expr_string.lines().collect();\n+    expr_string_lines.pop(); // Delete last line\n+\n+    expr_string_lines\n+        .into_iter()\n+        .map(|line| line.replacen(\"    \", \"\", 1)) // Delete indentation\n+        .collect::<Vec<String>>()\n+        .join(\"\\n\")\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -142,7 +181,13 @@ mod tests {\n             r#\"\n             fn main() {\n                 bar();\n-                <|>println!(\"bar\");\n+                if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                }<|>\n+                println!(\"bar\");\n             }\n             \"#,\n         );\n@@ -170,7 +215,127 @@ mod tests {\n             r#\"\n             fn main() {\n                 //bar();\n-                <|>println!(\"bar\");\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                }<|>\n+                println!(\"bar\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_else_if_nested() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                } else if true {<|>\n+                    println!(\"foo\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                }<|>\n+                println!(\"foo\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_else_if_nested_else() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                } else if true {\n+                    println!(\"foo\");\n+                } else {<|>\n+                    println!(\"else\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                } else if true {\n+                    println!(\"foo\");\n+                }<|>\n+                println!(\"else\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_else_if_nested_middle() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                } else if true {<|>\n+                    println!(\"foo\");\n+                } else {\n+                    println!(\"else\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {\n+                    println!(\"bar\");\n+                }<|>\n+                println!(\"foo\");\n             }\n             \"#,\n         );"}, {"sha": "eac502da51f673df299d5968be51f62836b8b75b", "filename": "crates/ra_flycheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_flycheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_flycheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2FCargo.toml?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -11,7 +11,7 @@ doctest = false\n crossbeam-channel = \"0.4.0\"\n lsp-types = { version = \"0.74.0\", features = [\"proposed\"] }\n log = \"0.4.8\"\n-cargo_metadata = \"0.9.1\"\n+cargo_metadata = \"0.10.0\"\n serde_json = \"1.0.48\"\n jod-thread = \"0.1.1\"\n ra_toolchain = { path = \"../ra_toolchain\" }"}, {"sha": "24af75c953eb7d0625573136b20e2572cd48d43a", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -204,6 +204,8 @@ impl FlycheckThread {\n             }\n \n             CheckEvent::Msg(Message::BuildScriptExecuted(_msg)) => {}\n+            CheckEvent::Msg(Message::BuildFinished(_)) => {}\n+            CheckEvent::Msg(Message::TextLine(_)) => {}\n             CheckEvent::Msg(Message::Unknown) => {}\n         }\n     }"}, {"sha": "b9c4d2e89783f18a5513ffe81828c804d5004a86", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -136,6 +136,12 @@ enum DisplayTarget {\n     SourceCode { module_id: ModuleId },\n }\n \n+impl DisplayTarget {\n+    fn is_source_code(&self) -> bool {\n+        matches!(self, Self::SourceCode {..})\n+    }\n+}\n+\n #[derive(Debug)]\n pub enum DisplaySourceCodeError {\n     PathNotFound,\n@@ -303,37 +309,40 @@ impl HirDisplay for ApplicationTy {\n \n                 if self.parameters.len() > 0 {\n                     let mut non_default_parameters = Vec::with_capacity(self.parameters.len());\n-                    let parameters_to_write = if f.omit_verbose_types() {\n-                        match self\n-                            .ctor\n-                            .as_generic_def()\n-                            .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n-                            .filter(|defaults| !defaults.is_empty())\n-                        {\n-                            None => self.parameters.0.as_ref(),\n-                            Some(default_parameters) => {\n-                                for (i, parameter) in self.parameters.iter().enumerate() {\n-                                    match (parameter, default_parameters.get(i)) {\n-                                        (&Ty::Unknown, _) | (_, None) => {\n-                                            non_default_parameters.push(parameter.clone())\n-                                        }\n-                                        (_, Some(default_parameter))\n-                                            if parameter != default_parameter =>\n-                                        {\n-                                            non_default_parameters.push(parameter.clone())\n+                    let parameters_to_write =\n+                        if f.display_target.is_source_code() || f.omit_verbose_types() {\n+                            match self\n+                                .ctor\n+                                .as_generic_def()\n+                                .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n+                                .filter(|defaults| !defaults.is_empty())\n+                            {\n+                                None => self.parameters.0.as_ref(),\n+                                Some(default_parameters) => {\n+                                    for (i, parameter) in self.parameters.iter().enumerate() {\n+                                        match (parameter, default_parameters.get(i)) {\n+                                            (&Ty::Unknown, _) | (_, None) => {\n+                                                non_default_parameters.push(parameter.clone())\n+                                            }\n+                                            (_, Some(default_parameter))\n+                                                if parameter != default_parameter =>\n+                                            {\n+                                                non_default_parameters.push(parameter.clone())\n+                                            }\n+                                            _ => (),\n                                         }\n-                                        _ => (),\n                                     }\n+                                    &non_default_parameters\n                                 }\n-                                &non_default_parameters\n                             }\n-                        }\n-                    } else {\n-                        self.parameters.0.as_ref()\n-                    };\n-                    write!(f, \"<\")?;\n-                    f.write_joined(parameters_to_write, \", \")?;\n-                    write!(f, \">\")?;\n+                        } else {\n+                            self.parameters.0.as_ref()\n+                        };\n+                    if !parameters_to_write.is_empty() {\n+                        write!(f, \"<\")?;\n+                        f.write_joined(parameters_to_write, \", \")?;\n+                        write!(f, \">\")?;\n+                    }\n                 }\n             }\n             TypeCtor::AssociatedType(type_alias) => {"}, {"sha": "4088b1d22d9463bab869d349c9f8d5da62f20bcb", "filename": "crates/ra_hir_ty/src/tests/display_source_code.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -21,3 +21,30 @@ fn bar() {\n     );\n     assert_eq!(\"foo::Foo\", displayed_source_at_pos(&db, pos));\n }\n+\n+#[test]\n+fn omit_default_type_parameters() {\n+    let (db, pos) = TestDB::with_position(\n+        r\"\n+        //- /main.rs\n+        struct Foo<T = u8> { t: T }\n+        fn main() {\n+            let foo = Foo { t: 5 };\n+            foo<|>;\n+        }\n+        \",\n+    );\n+    assert_eq!(\"Foo\", displayed_source_at_pos(&db, pos));\n+\n+    let (db, pos) = TestDB::with_position(\n+        r\"\n+        //- /main.rs\n+        struct Foo<K, T = u8> { k: K, t: T }\n+        fn main() {\n+            let foo = Foo { k: 400, t: 5 };\n+            foo<|>;\n+        }\n+        \",\n+    );\n+    assert_eq!(\"Foo<i32>\", displayed_source_at_pos(&db, pos));\n+}"}, {"sha": "bb30032785167f63f379eb3f01dd8dbb322cd83e", "filename": "crates/ra_proc_macro_srv/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_proc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_proc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2FCargo.toml?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -18,7 +18,7 @@ memmap = \"0.7\"\n test_utils = { path = \"../test_utils\" }\n \n [dev-dependencies]\n-cargo_metadata = \"0.9.1\"\n+cargo_metadata = \"0.10.0\"\n difference = \"2.0.0\"\n # used as proc macro test target\n-serde_derive = \"=1.0.106\"\n+serde_derive = \"1.0.106\""}, {"sha": "bc010cfe99d68e9aa96577509e2046aee28eff7c", "filename": "crates/ra_proc_macro_srv/src/tests/fixtures/test_serialize_proc_macro.txt", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -20,26 +20,15 @@ SUBTREE $\n   PUNCH   = [alone] 4294967295\n   SUBTREE {} 4294967295\n     PUNCH   # [alone] 4294967295\n-    SUBTREE [] 4294967295\n-      IDENT   allow 4294967295\n-      SUBTREE () 4294967295\n-        IDENT   unknown_lints 4294967295\n-    PUNCH   # [alone] 4294967295\n-    SUBTREE [] 4294967295\n-      IDENT   cfg_attr 4294967295\n-      SUBTREE () 4294967295\n-        IDENT   feature 4294967295\n-        PUNCH   = [alone] 4294967295\n-        LITERAL \"cargo-clippy\" 0\n-        PUNCH   , [alone] 4294967295\n-        IDENT   allow 4294967295\n-        SUBTREE () 4294967295\n-          IDENT   useless_attribute 4294967295\n-    PUNCH   # [alone] 4294967295\n     SUBTREE [] 4294967295\n       IDENT   allow 4294967295\n       SUBTREE () 4294967295\n         IDENT   rust_2018_idioms 4294967295\n+        PUNCH   , [alone] 4294967295\n+        IDENT   clippy 4294967295\n+        PUNCH   : [joint] 4294967295\n+        PUNCH   : [alone] 4294967295\n+        IDENT   useless_attribute 4294967295\n     IDENT   extern 4294967295\n     IDENT   crate 4294967295\n     IDENT   serde 4294967295"}, {"sha": "82cefbb29a77882e917c2702f9560610a53e0a9e", "filename": "crates/ra_proc_macro_srv/src/tests/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Fmod.rs?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -10,7 +10,7 @@ fn test_derive_serialize_proc_macro() {\n     assert_expand(\n         \"serde_derive\",\n         \"Serialize\",\n-        \"1.0.106\",\n+        \"1.0\",\n         r##\"struct Foo {}\"##,\n         include_str!(\"fixtures/test_serialize_proc_macro.txt\"),\n     );\n@@ -21,7 +21,7 @@ fn test_derive_serialize_proc_macro_failed() {\n     assert_expand(\n         \"serde_derive\",\n         \"Serialize\",\n-        \"1.0.106\",\n+        \"1.0\",\n         r##\"\n     struct {}\n \"##,\n@@ -37,7 +37,7 @@ SUBTREE $\n \n #[test]\n fn test_derive_proc_macro_list() {\n-    let res = list(\"serde_derive\", \"1.0.106\").join(\"\\n\");\n+    let res = list(\"serde_derive\", \"1.0\").join(\"\\n\");\n \n     assert_eq_text!(\n         &res,"}, {"sha": "84348b5defced354f079b5601a2c48ac4d898438", "filename": "crates/ra_proc_macro_srv/src/tests/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -8,7 +8,7 @@ use std::str::FromStr;\n use test_utils::assert_eq_text;\n \n mod fixtures {\n-    use cargo_metadata::{parse_messages, Message};\n+    use cargo_metadata::Message;\n     use std::process::Command;\n \n     // Use current project metadata to get the proc-macro dylib path\n@@ -19,7 +19,7 @@ mod fixtures {\n             .unwrap()\n             .stdout;\n \n-        for message in parse_messages(command.as_slice()) {\n+        for message in Message::parse_stream(command.as_slice()) {\n             match message.unwrap() {\n                 Message::CompilerArtifact(artifact) => {\n                     if artifact.target.kind.contains(&\"proc-macro\".to_string()) {"}, {"sha": "e4a60f4c02fd17b5fb4efc0bbbf5c86afa335a09", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -11,7 +11,7 @@ doctest = false\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n \n-cargo_metadata = \"0.9.1\"\n+cargo_metadata = \"0.10.0\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_cfg = { path = \"../ra_cfg\" }"}, {"sha": "a306ce95f36e89f4539d2861506c68401b370f0d", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -161,7 +161,7 @@ impl CargoWorkspace {\n             meta.current_dir(parent);\n         }\n         if let Some(target) = cargo_features.target.as_ref() {\n-            meta.other_options(&[String::from(\"--filter-platform\"), target.clone()]);\n+            meta.other_options(vec![String::from(\"--filter-platform\"), target.clone()]);\n         }\n         let meta = meta.exec().with_context(|| {\n             format!(\"Failed to run `cargo metadata --manifest-path {}`\", cargo_toml.display())\n@@ -304,19 +304,13 @@ pub fn load_extern_resources(\n \n     let mut res = ExternResources::default();\n \n-    for message in cargo_metadata::parse_messages(output.stdout.as_slice()) {\n+    for message in cargo_metadata::Message::parse_stream(output.stdout.as_slice()) {\n         if let Ok(message) = message {\n             match message {\n                 Message::BuildScriptExecuted(BuildScript { package_id, out_dir, cfgs, .. }) => {\n                     res.out_dirs.insert(package_id.clone(), out_dir);\n-                    res.cfgs.insert(\n-                        package_id,\n-                        // FIXME: Current `cargo_metadata` uses `PathBuf` instead of `String`,\n-                        // change when https://github.com/oli-obk/cargo_metadata/pulls/112 reaches crates.io\n-                        cfgs.iter().filter_map(|c| c.to_str().map(|s| s.to_owned())).collect(),\n-                    );\n+                    res.cfgs.insert(package_id, cfgs);\n                 }\n-\n                 Message::CompilerArtifact(message) => {\n                     if message.target.kind.contains(&\"proc-macro\".to_string()) {\n                         let package_id = message.package_id;\n@@ -329,6 +323,8 @@ pub fn load_extern_resources(\n                 }\n                 Message::CompilerMessage(_) => (),\n                 Message::Unknown => (),\n+                Message::BuildFinished(_) => {}\n+                Message::TextLine(_) => {}\n             }\n         }\n     }"}, {"sha": "b80a18a47fe48754ee4684b528596872485c06fc", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3dbd272e01870b309fd3b783598038c1103653a/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a3dbd272e01870b309fd3b783598038c1103653a/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=a3dbd272e01870b309fd3b783598038c1103653a", "patch": "@@ -225,7 +225,7 @@ class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, D\n             return doc.positionAt(targetOffset);\n         }\n \n-        // Shitty workaround for crlf line endings\n+        // Dirty workaround for crlf line endings\n         // We are still in this prehistoric era of carriage returns here...\n \n         let line = 0;"}]}