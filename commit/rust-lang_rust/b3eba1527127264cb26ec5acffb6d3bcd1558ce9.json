{"sha": "b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZWJhMTUyNzEyNzI2NGNiMjZlYzVhY2ZmYjZkM2JjZDE1NThjZTk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-08-13T07:10:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-16T22:05:57Z"}, "message": "Port the tests to the expr foo::<T> syntax.", "tree": {"sha": "4267ce882c95a67d2fe93a631d8934bdd82171ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4267ce882c95a67d2fe93a631d8934bdd82171ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "html_url": "https://github.com/rust-lang/rust/commit/b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af21a2700278154bcfc81d61297add21c6870689", "url": "https://api.github.com/repos/rust-lang/rust/commits/af21a2700278154bcfc81d61297add21c6870689", "html_url": "https://github.com/rust-lang/rust/commit/af21a2700278154bcfc81d61297add21c6870689"}], "stats": {"total": 388, "additions": 198, "deletions": 190}, "files": [{"sha": "25a3756346a57424631c7925a9914f315e9c0ef3", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -40,7 +40,7 @@ fn select_random(r: u32, genelist: &[aminoacids]) -> char {\n             } else { be bisect(v, mid, hi, target); }\n         } else { ret v.(hi).ch; }\n     }\n-    ret bisect(genelist, 0u, vec::len[aminoacids](genelist) - 1u, r);\n+    ret bisect(genelist, 0u, vec::len::<aminoacids>(genelist) - 1u, r);\n }\n \n fn make_random_fasta(id: str, desc: str, genelist: &[aminoacids], n: int) {"}, {"sha": "67cbf77968ee115f09b8f7bdf415463b598bdb75", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -33,7 +33,7 @@ fn fib(n: int) -> int {\n         } else if (n <= 2) {\n             send(c, 1);\n         } else {\n-            let p = mk_port<int>();\n+            let p = mk_port::<int>();\n \n             let t1 = task::_spawn(bind pfib(p.mk_chan(), n - 1));\n             let t2 = task::_spawn(bind pfib(p.mk_chan(), n - 2));"}, {"sha": "914446e13002988d8103ec9ebec245882a3c4771", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -95,7 +95,7 @@ mod map_reduce {\n                 c = _c\n               }\n               none. {\n-                let p = mk_port<_chan<reduce_proto>>();\n+                let p = mk_port::<_chan<reduce_proto>>();\n                 let keyi = str::bytes(key);\n                 send(ctrl, find_reducer(keyi, p.mk_chan()));\n                 c = p.recv();\n@@ -147,7 +147,7 @@ mod map_reduce {\n     }\n \n     fn map_reduce(inputs: &[str]) {\n-        let ctrl = mk_port<ctrl_proto>();\n+        let ctrl = mk_port::<ctrl_proto>();\n \n         // This task becomes the master control task. It task::_spawns\n         // to do the rest."}, {"sha": "bfb27a5a98866b70b7b7787beffa10fe7b00d3ae", "filename": "src/test/compile-fail/bad-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fcompile-fail%2Fbad-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fcompile-fail%2Fbad-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-name.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: expecting\n \n fn main() {\n-  let x.y[int].z foo;\n+  let x.y::<int>.z foo;\n }"}, {"sha": "88da7c14350fd4119cee70707aa7867539d35765", "filename": "src/test/compile-fail/occurs-check-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-3.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:mismatched types\n // From Issue #778\n tag clam<T> { a(T); }\n-fn main() { let c; c = a(c); alt c { a[int](_) { } } }\n+fn main() { let c; c = a(c); alt c { a::<int>(_) { } } }"}, {"sha": "107ebf2c7b6b22510101367ce70bc84ae0d274b0", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -7,6 +7,6 @@ import std::option::some;\n \n tag bar { t1((), option::t<[int]>); t2; }\n \n-fn foo(t: bar) { alt t { t1(_, some[int](x)) { log x; } _ { fail; } } }\n+fn foo(t: bar) { alt t { t1(_, some::<int>(x)) { log x; } _ { fail; } } }\n \n fn main() { }"}, {"sha": "141649ff0edf79e2f2fc690aed4b826fda5dcfba", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -125,7 +125,7 @@ type tests_and_conv_fn =\n \n fn make_tests(cx: &cx) -> tests_and_conv_fn {\n     log #fmt(\"making tests from %s\", cx.config.src_base);\n-    let configport = mk_port<[u8]>();\n+    let configport = mk_port::<[u8]>();\n     let tests = ~[];\n     for file: str in fs::list_dir(cx.config.src_base) {\n         log #fmt(\"inspecting file %s\", file);"}, {"sha": "67628fc82dcbdc009980f9867e5d7ce4eb7bb5fc", "filename": "src/test/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fprocsrv.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -60,7 +60,7 @@ fn close(handle: &handle) {\n fn run(handle: &handle, lib_path: &str,\n        prog: &str, args: &[str], input: &option::t<str>) ->\n {status: int, out: str, err: str} {\n-    let p = mk_port<response>();\n+    let p = mk_port::<response>();\n     let ch = p.mk_chan();\n     send(handle.chan, exec(str::bytes(lib_path),\n                            str::bytes(prog),"}, {"sha": "7a414b3ca6ac541230d92837d394529e003c4275", "filename": "src/test/run-fail/alt-bot-fail.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-bot-fail.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -7,6 +7,9 @@ import std::option::*;\n fn foo(s: str) { }\n \n fn main() {\n-    let i = alt some[int](3) { none[int]. { fail } some[int](_) { fail } };\n+    let i = alt some::<int>(3) {\n+        none::<int>. { fail }\n+        some::<int>(_) { fail }\n+    };\n     foo(i);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9d076b0203c490ae988aaece40a2a514574ebf15", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -10,7 +10,7 @@ import std::comm::mk_port;\n fn child() { assert (1 == 2); }\n \n fn main() {\n-    let p = mk_port[int]();\n+    let p = mk_port::<int>();\n     task::_spawn(bind child());\n     let x = p.recv();\n }"}, {"sha": "a5c077d0f8fe6666c3c5a4e78073714eae3922f5", "filename": "src/test/run-fail/port-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-fail%2Fport-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-fail%2Fport-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fport-type.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -7,7 +7,7 @@ import std::comm::send;\n fn echo<~T>(c: _chan<T>, oc: _chan<_chan<T>>) {\n     // Tests that the type argument in port gets\n     // visited\n-    let p = mk_port[T]();\n+    let p = mk_port::<T>();\n     send(oc, p.mk_chan());\n \n     let x = p.recv();"}, {"sha": "22a14dc3e5041c25685a71d60279fd29f6224109", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -13,4 +13,4 @@ fn mk_raw_ty(st: sty, cname: &option::t<str>) -> raw_t {\n     ret {struct: st, cname: cname, hash: 0u};\n }\n \n-fn main() { mk_raw_ty(ty_nil, none[str]); }\n+fn main() { mk_raw_ty(ty_nil, none::<str>); }"}, {"sha": "a5369804d0008e2c5d17a3bb6f9d27ec429f7fd5", "filename": "src/test/run-pass/alt-bot.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Falt-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Falt-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,6 +2,9 @@ use std;\n import std::option::*;\n \n fn main() {\n-    let i: int = alt some[int](3) { none[int]. { fail } some[int](_) { 5 } };\n+    let i: int = alt some::<int>(3) {\n+        none::<int>. { fail }\n+        some::<int>(_) { 5 }\n+    };\n     log i;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "423d08fc66ae5f6bda1ab41a51910e26fedcae43", "filename": "src/test/run-pass/alt-join.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-join.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -12,8 +12,8 @@ fn foo<T>(y: &option::t<T>) {\n        entire if expression */\n \n     if true {\n-    } else { alt y { none[T]. { x = 17; } _ { x = 42; } } rs += ~[x]; }\n+    } else { alt y { none::<T>. { x = 17; } _ { x = 42; } } rs += ~[x]; }\n     ret;\n }\n \n-fn main() { log \"hello\"; foo[int](some[int](5)); }\n+fn main() { log \"hello\"; foo::<int>(some::<int>(5)); }"}, {"sha": "511dcda6b26f9de2ec719ea7ad79c399e6b76a3b", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -61,8 +61,8 @@ fn test_box() {\n }\n \n fn test_port() {\n-    let p1 = comm::mk_port[int]();\n-    let p2 = comm::mk_port[int]();\n+    let p1 = comm::mk_port::<int>();\n+    let p2 = comm::mk_port::<int>();\n \n     assert p1 == p1;\n     assert p1 != p2;"}, {"sha": "e27954d4d655e8ae621f29f460d84c724621a30f", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let foo: int = 17;\n     let bfoo: box<int> = {c: @foo};\n     log \"see what's in our box\";\n-    assert (unbox[int](bfoo) == foo);\n+    assert (unbox::<int>(bfoo) == foo);\n }"}, {"sha": "39e445b47ec60be5dc00dfb83c1b82ee1aadd96b", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -34,7 +34,7 @@ fn new() -> ctx {\n fn main() {\n     let cx = new();\n \n-    let p = mk_port<bool>();\n+    let p = mk_port::<bool>();\n     send(cx, close(p.mk_chan()));\n     send(cx, quit);\n }"}, {"sha": "f24cf65e70e65ca6256f1a23bf566f8d8cf1c65c", "filename": "src/test/run-pass/drop-parametric-closure-with-bound-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,4 +2,4 @@\n \n fn f<T>(i: @int, t: &T) { }\n \n-fn main() { let x = bind f[char](@0xdeafbeef, _); }\n+fn main() { let x = bind f::<char>(@0xdeafbeef, _); }"}, {"sha": "ec2995440947cbe3be1e121df6c2a9820362ec5a", "filename": "src/test/run-pass/expr-alt-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -12,7 +12,7 @@ fn test_generic<T>(expected: @T, eq: &compare<T>) {\n fn test_box() {\n     fn compare_box(b1: @bool, b2: @bool) -> bool { ret *b1 == *b2; }\n     let eq = bind compare_box(_, _);\n-    test_generic[bool](@true, eq);\n+    test_generic::<bool>(@true, eq);\n }\n \n fn main() { test_box(); }"}, {"sha": "f7e96af98d5fb6be00059af336df67b4e1ffa389", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -12,7 +12,7 @@ fn test_generic<T>(expected: &T, eq: &compare<T>) {\n fn test_vec() {\n     fn compare_box(v1: &@int, v2: &@int) -> bool { ret v1 == v2; }\n     let eq = bind compare_box(_, _);\n-    test_generic[@int](@1, eq);\n+    test_generic::<@int>(@1, eq);\n }\n \n fn main() { test_vec(); }"}, {"sha": "cfecd0302a1fa85d9c74890aa399d0e6b72b2fe4", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -12,15 +12,15 @@ fn test_generic<T>(expected: &T, eq: &compare<T>) {\n fn test_bool() {\n     fn compare_bool(b1: &bool, b2: &bool) -> bool { ret b1 == b2; }\n     let eq = bind compare_bool(_, _);\n-    test_generic[bool](true, eq);\n+    test_generic::<bool>(true, eq);\n }\n \n fn test_rec() {\n     type t = {a: int, b: int};\n \n     fn compare_rec(t1: &t, t2: &t) -> bool { ret t1 == t2; }\n     let eq = bind compare_rec(_, _);\n-    test_generic[t]({a: 1, b: 2}, eq);\n+    test_generic::<t>({a: 1, b: 2}, eq);\n }\n \n fn main() { test_bool(); test_rec(); }"}, {"sha": "d68f0cf5d890bcb14edef98b5a49980a1c6a272c", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -16,7 +16,7 @@ fn test_box() {\n         ret *b1 == *b2;\n     }\n     let eq = bind compare_box(_, _);\n-    test_generic[bool](@true, eq);\n+    test_generic::<bool>(@true, eq);\n }\n \n fn main() { test_box(); }"}, {"sha": "d630b65c82281dfac58539639ec5d6c7755e6f98", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -12,7 +12,7 @@ fn test_generic<T>(expected: &T, eq: &compare<T>) {\n fn test_vec() {\n     fn compare_vec(v1: &@int, v2: &@int) -> bool { ret v1 == v2; }\n     let eq = bind compare_vec(_, _);\n-    test_generic[@int](@1, eq);\n+    test_generic::<@int>(@1, eq);\n }\n \n fn main() { test_vec(); }"}, {"sha": "d7c177315592fc6ebcdfd55dfa93875ff2e7d965", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -14,15 +14,15 @@ fn test_generic<T>(expected: &T, eq: &compare<T>) {\n fn test_bool() {\n     fn compare_bool(b1: &bool, b2: &bool) -> bool { ret b1 == b2; }\n     let eq = bind compare_bool(_, _);\n-    test_generic[bool](true, eq);\n+    test_generic::<bool>(true, eq);\n }\n \n fn test_rec() {\n     type t = {a: int, b: int};\n \n     fn compare_rec(t1: &t, t2: &t) -> bool { ret t1 == t2; }\n     let eq = bind compare_rec(_, _);\n-    test_generic[t]({a: 1, b: 2}, eq);\n+    test_generic::<t>({a: 1, b: 2}, eq);\n }\n \n fn main() { test_bool(); test_rec(); }"}, {"sha": "82bbbb840a60d491bfdea249dab01fceb3e2c750", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -12,7 +12,7 @@ fn test_generic<T>(expected: @T, not_expected: @T, eq: &compare<T>) {\n fn test_box() {\n     fn compare_box(b1: @bool, b2: @bool) -> bool { ret *b1 == *b2; }\n     let eq = bind compare_box(_, _);\n-    test_generic[bool](@true, @false, eq);\n+    test_generic::<bool>(@true, @false, eq);\n }\n \n fn main() { test_box(); }"}, {"sha": "7cf77d61686b539d35ef3a227d00f92c590e6311", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -12,7 +12,7 @@ fn test_generic<T>(expected: &T, not_expected: &T, eq: &compare<T>) {\n fn test_vec() {\n     fn compare_box(v1: &@int, v2: &@int) -> bool { ret v1 == v2; }\n     let eq = bind compare_box(_, _);\n-    test_generic[@int](@1, @2, eq);\n+    test_generic::<@int>(@1, @2, eq);\n }\n \n fn main() { test_vec(); }"}, {"sha": "df466051ce4a4c3d9141cf1a12cc5132e5e647b2", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -14,15 +14,15 @@ fn test_generic<T>(expected: &T, not_expected: &T, eq: &compare<T>) {\n fn test_bool() {\n     fn compare_bool(b1: &bool, b2: &bool) -> bool { ret b1 == b2; }\n     let eq = bind compare_bool(_, _);\n-    test_generic[bool](true, false, eq);\n+    test_generic::<bool>(true, false, eq);\n }\n \n fn test_rec() {\n     type t = {a: int, b: int};\n \n     fn compare_rec(t1: &t, t2: &t) -> bool { ret t1 == t2; }\n     let eq = bind compare_rec(_, _);\n-    test_generic[t]({a: 1, b: 2}, {a: 2, b: 3}, eq);\n+    test_generic::<t>({a: 1, b: 2}, {a: 2, b: 3}, eq);\n }\n \n fn main() { test_bool(); test_rec(); }"}, {"sha": "5ad4d1ca607f703eae56ae7f0cd8ad02a1dbfd1e", "filename": "src/test/run-pass/foreach-box-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-box-drop.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,4 +6,4 @@ obj ob<K>(k: K) {\n \n fn x(o: &ob<str>) { for each i: @{a: str} in o.foo() { } }\n \n-fn main() { let o = ob[str](\"hi\" + \"there\"); x(o); }\n+fn main() { let o = ob::<str>(\"hi\" + \"there\"); x(o); }"}, {"sha": "8d58c580fba5c022bb58d860390f05776546fbe1", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -4,7 +4,7 @@ fn id<T>(t: &T) -> T { ret t; }\n \n fn main() {\n     let expected = @100;\n-    let actual = id[@int](expected);\n+    let actual = id::<@int>(expected);\n     log *actual;\n     assert (*expected == *actual);\n }"}, {"sha": "97b000ee1b52fcd3253037c85332337a98e28b9f", "filename": "src/test/run-pass/generic-bind.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,12 +6,12 @@ fn main() {\n     let t = {_0: 1, _1: 2, _2: 3, _3: 4, _4: 5, _5: 6, _6: 7};\n     assert (t._5 == 6);\n     let f1 =\n-        bind id[{_0: int,\n-                 _1: int,\n-                 _2: int,\n-                 _3: int,\n-                 _4: int,\n-                 _5: int,\n-                 _6: int}](_);\n+        bind id::<{_0: int,\n+                   _1: int,\n+                   _2: int,\n+                   _3: int,\n+                   _4: int,\n+                   _5: int,\n+                   _6: int}>(_);\n     assert (f1(t)._5 == 6);\n }"}, {"sha": "5762847139d6e01dea932558653ed919a5580684", "filename": "src/test/run-pass/generic-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -3,6 +3,6 @@\n fn box<T>(x: &{x: T, y: T, z: T}) -> @{x: T, y: T, z: T} { ret @x; }\n \n fn main() {\n-    let x: @{x: int, y: int, z: int} = box[int]({x: 1, y: 2, z: 3});\n+    let x: @{x: int, y: int, z: int} = box::<int>({x: 1, y: 2, z: 3});\n     assert (x.y == 2);\n }"}, {"sha": "d0b98b1068e245b04a4564616e90050e3aaa147d", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,11 +6,11 @@ fn f<T>(t: &T) -> {a: T, b: T} {\n     type pair = {a: T, b: T};\n \n     let x: pair = {a: t, b: t};\n-    ret g[pair](x);\n+    ret g::<pair>(x);\n }\n \n fn main() {\n-    let b = f[int](10);\n+    let b = f::<int>(10);\n     log b.a;\n     log b.b;\n     assert (b.a == 10);"}, {"sha": "266fa987c3c89352e5c51980728c401747120df8", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,6 +6,6 @@ fn reclift<T>(t: &T) -> recbox<T> { ret {x: @t}; }\n \n fn main() {\n     let foo: int = 17;\n-    let rbfoo: recbox<int> = reclift[int](foo);\n+    let rbfoo: recbox<int> = reclift::<int>(foo);\n     assert (*rbfoo.x == foo);\n }"}, {"sha": "ae972fbd0d07b71bae30dc922fc993dbcc424048", "filename": "src/test/run-pass/generic-fn-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-twice.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,4 +6,4 @@ mod foomod {\n     fn foo<T>() { }\n }\n \n-fn main() { foomod::foo[int](); foomod::foo[int](); }\n+fn main() { foomod::foo::<int>(); foomod::foo::<int>(); }"}, {"sha": "5eb4e0aae328ece372f69a0e8ceb7b1236b8bb25", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -13,13 +13,13 @@ fn main() {\n     let b = 'b';\n     let p: triple = {x: 65, y: 66, z: 67};\n     let q: triple = {x: 68, y: 69, z: 70};\n-    y = id[int](x);\n+    y = id::<int>(x);\n     log y;\n     assert (x == y);\n-    b = id[char](a);\n+    b = id::<char>(a);\n     log b;\n     assert (a == b);\n-    q = id[triple](p);\n+    q = id::<triple>(p);\n     x = p.z;\n     y = q.z;\n     log y;"}, {"sha": "05552db04ffa6ce8eef029efab87e8e36c99946e", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -7,7 +7,7 @@ obj handle<T>(data: T) {\n fn main() {\n     type rgb = {x: u8, y: u8, z: u8};\n \n-    let h: handle<rgb> = handle[rgb]({x: 1 as u8, y: 2 as u8, z: 3 as u8});\n+    let h: handle<rgb> = handle::<rgb>({x: 1 as u8, y: 2 as u8, z: 3 as u8});\n     log \"constructed object\";\n     log h.get().x;\n     log h.get().y;"}, {"sha": "f22addc8b512a3e44cb7e3a72219d59652172c04", "filename": "src/test/run-pass/generic-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -11,7 +11,7 @@ obj buf<T>(data: {_0: T, _1: T, _2: T}) {\n }\n \n fn main() {\n-    let b: buf<int> = buf[int]({_0: 1, _1: 2, _2: 3});\n+    let b: buf<int> = buf::<int>({_0: 1, _1: 2, _2: 3});\n     log \"constructed object\";\n     log b.get(0);\n     log b.get(1);"}, {"sha": "94e97bf170d1e5bbd3ae86eeb387d62c0f11d99f", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -4,5 +4,5 @@ tag list<T> { cons(@T, @list<T>); nil; }\n \n fn main() {\n     let a: list<int> =\n-        cons[int](@10, @cons[int](@12, @cons[int](@13, @nil[int])));\n+        cons::<int>(@10, @cons::<int>(@12, @cons::<int>(@13, @nil::<int>)));\n }"}, {"sha": "0041e0fd26866fa82c46a4d0615c46dd72ab45fe", "filename": "src/test/run-pass/generic-tag-alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -4,8 +4,8 @@ tag foo<T> { arm(T); }\n \n fn altfoo<T>(f: &foo<T>) {\n     let hit = false;\n-    alt f { arm[T](x) { log \"in arm\"; hit = true; } }\n+    alt f { arm::<T>(x) { log \"in arm\"; hit = true; } }\n     assert (hit);\n }\n \n-fn main() { altfoo[int](arm[int](10)); }\n+fn main() { altfoo::<int>(arm::<int>(10)); }"}, {"sha": "cd9b0144166ad0f5e9812452fe70676f41ea235a", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -5,8 +5,8 @@\n tag noption<T> { some(T); }\n \n fn main() {\n-    let nop: noption<int> = some[int](5);\n-    alt nop { some[int](n) { log n; assert (n == 5); } }\n+    let nop: noption<int> = some::<int>(5);\n+    alt nop { some::<int>(n) { log n; assert (n == 5); } }\n     let nop2: noption<{x: int, y: int}> = some({x: 17, y: 42});\n     alt nop2 {\n       some(t) { log t.x; log t.y; assert (t.x == 17); assert (t.y == 42); }"}, {"sha": "6bc7c4528242655e6bea7d8b806b406a80f95d44", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,4 +2,4 @@\n \n tag option<T> { some(@T); none; }\n \n-fn main() { let a: option<int> = some[int](@10); a = none[int]; }\n+fn main() { let a: option<int> = some::<int>(@10); a = none::<int>; }"}, {"sha": "1abd0f7daf9d99f1b7e41ae48495fb59db2c26c7", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -9,5 +9,5 @@ fn apply<T>(produce: fn() -> T , consume: fn(&T) ) { consume(produce()); }\n fn main() {\n     let produce: fn() -> int  = mk;\n     let consume: fn(&int)  = chk;\n-    apply[int](produce, consume);\n+    apply::<int>(produce, consume);\n }"}, {"sha": "ecf13f3959583ec95516f21687523185ec8f29d8", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -62,7 +62,7 @@ mod map_reduce {\n     }\n \n     fn map_reduce(inputs: &[str]) {\n-        let ctrl = mk_port<ctrl_proto>();\n+        let ctrl = mk_port::<ctrl_proto>();\n \n         // This task becomes the master control task. It spawns others\n         // to do the rest."}, {"sha": "c32973fa377f0f496f487b2f8950fecfb8b532fd", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,4 +6,4 @@ fn main() {\n     let v = init_elt(0, 0u);\n     v += ~[4, 2];\n     assert (reversed(v) == ~[2, 4]);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "12afefe57b111850f0db61ceed30127f10a40c25", "filename": "src/test/run-pass/issue-333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fissue-333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fissue-333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-333.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -1,4 +1,4 @@\n-fn quux<T>(x: &T) -> T { let f = id[T]; ret f(x); }\n+fn quux<T>(x: &T) -> T { let f = id::<T>; ret f(x); }\n \n fn id<T>(x: &T) -> T { ret x; }\n "}, {"sha": "8b9fef446dabb1e971e965646fb8d4a34b5eeead", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -51,7 +51,7 @@ fn main() {\n           closed. { log \"Got close message\"; break; }\n           received(data) {\n             log \"Got data. Length is:\";\n-            log vec::len[u8](data);\n+            log vec::len::<u8>(data);\n           }\n         }\n     }"}, {"sha": "5a5cb1e4da4e5a7882f9c3a937d5480f84baa97c", "filename": "src/test/run-pass/leak-box-as-tydesc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,4 +2,4 @@\n \n fn leaky<T>(t: &T) { }\n \n-fn main() { let x = @10; leaky[@int](x); }\n+fn main() { let x = @10; leaky::<@int>(x); }"}, {"sha": "b620c2236dc50b4242bca1372f8faa6667c563fb", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     grow(v);\n     grow(v);\n     grow(v);\n-    let len = std::vec::len[int](v);\n+    let len = std::vec::len::<int>(v);\n     log len;\n     assert (len == 3 as uint);\n }"}, {"sha": "aa91eeeb00affaf1335d9f564c429a8a7fcbc58a", "filename": "src/test/run-pass/nested-alts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-alts.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -5,14 +5,14 @@ import std::option::*;\n fn baz() -> ! { fail; }\n \n fn foo() {\n-    alt some[int](5) {\n-      some[int](x) {\n+    alt some::<int>(5) {\n+      some::<int>(x) {\n         let bar;\n-        alt none[int] { none[int]. { bar = 5; } _ { baz(); } }\n+        alt none::<int> { none::<int>. { bar = 5; } _ { baz(); } }\n         log bar;\n       }\n-      none[int]. { log \"hello\"; }\n+      none::<int>. { log \"hello\"; }\n     }\n }\n \n-fn main() { foo(); }\n\\ No newline at end of file\n+fn main() { foo(); }"}, {"sha": "8072378b5816454be340c1f926b5ef868a50336c", "filename": "src/test/run-pass/nested-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-pattern.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -10,9 +10,9 @@ tag t { foo(int, uint); bar(int, option::t<int>); }\n \n fn nested(o: t) {\n     alt o {\n-      bar(i, some[int](_)) { log_err \"wrong pattern matched\"; fail; }\n+      bar(i, some::<int>(_)) { log_err \"wrong pattern matched\"; fail; }\n       _ { log_err \"succeeded\"; }\n     }\n }\n \n-fn main() { nested(bar(1, none[int])); }\n+fn main() { nested(bar(1, none::<int>)); }"}, {"sha": "cdda794acff0c66f8ac38bac65d0c61a5d789706", "filename": "src/test/run-pass/obj-docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fobj-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fobj-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-docs.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -59,7 +59,7 @@ fn main() {\n         t.take(3);\n     }\n \n-    let p = mk_port[int]();\n+    let p = mk_port::<int>();\n \n     let t1: taker = adder(@mutable 0);\n     let t2: taker = sender(p.mk_chan());"}, {"sha": "5cc45871f01511f6846df1cb6223e4558a7384a7", "filename": "src/test/run-pass/obj-return-polytypes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -4,10 +4,10 @@\n // -*- rust -*-\n tag clam<T> { signed(int); unsigned(uint); }\n \n-fn getclam<T>() -> clam<T> { ret signed[T](42); }\n+fn getclam<T>() -> clam<T> { ret signed::<T>(42); }\n \n obj impatience<T>() {\n-    fn moreclam() -> clam<T> { be getclam[T](); }\n+    fn moreclam() -> clam<T> { be getclam::<T>(); }\n }\n \n fn main() { }"}, {"sha": "b56db9f9c700744ed3cc177d3fca4371ab815090", "filename": "src/test/run-pass/ret-none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fret-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fret-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-none.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -4,4 +4,4 @@ tag option<T> { none; some(T); }\n \n fn f<T>() -> option<T> { ret none; }\n \n-fn main() { f[int](); }\n+fn main() { f::<int>(); }"}, {"sha": "4a6839a8de5901d311579063e397b925b6d68179", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -18,7 +18,7 @@ type record = {val1: u32, val2: u32, val3: u32};\n // power of two so needs to be rounded up. Don't trigger any\n // assertions.\n fn test_init() {\n-    let myport = mk_port[record]();\n+    let myport = mk_port::<record>();\n     let mychan = myport.mk_chan();\n     let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n     send(mychan, val);\n@@ -39,14 +39,14 @@ fn test_grow() {\n \n // Don't allow the buffer to shrink below it's original size\n fn test_shrink1() {\n-    let myport = comm::mk_port[i8]();\n+    let myport = comm::mk_port::<i8>();\n     let mychan = myport.mk_chan();\n     send(mychan, 0i8);\n     let x = myport.recv();\n }\n \n fn test_shrink2() {\n-    let myport = mk_port[record]();\n+    let myport = mk_port::<record>();\n     let mychan = myport.mk_chan();\n     for each i: uint  in uint::range(0u, 100u) {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n@@ -58,7 +58,7 @@ fn test_shrink2() {\n \n // Test rotating the buffer when the unit size is not a power of two\n fn test_rotate() {\n-    let myport = mk_port[record]();\n+    let myport = mk_port::<record>();\n     let mychan = myport.mk_chan();\n     for each i: uint  in uint::range(0u, 100u) {\n         let val = {val1: i as u32, val2: i as u32, val3: i as u32};\n@@ -74,7 +74,7 @@ fn test_rotate() {\n // Test rotating and growing the buffer when\n // the unit size is not a power of two\n fn test_rotate_grow() {\n-    let myport = mk_port[record]();\n+    let myport = mk_port::<record>();\n     let mychan = myport.mk_chan();\n     for each j: uint  in uint::range(0u, 10u) {\n         for each i: uint  in uint::range(0u, 10u) {"}, {"sha": "919c45a55f42e45577736bd925f9ed822644a0fa", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -7,7 +7,7 @@ import std::comm::mk_port;\n type command<K, V> = {key: K, val: V};\n \n fn cache_server<K, V>(c: _chan<_chan<command<K, V>>>) {\n-    let ctrl = mk_port[_chan<command<K, V>>]();\n+    let ctrl = mk_port::<_chan<command<K, V>>>();\n     send(c, ctrl.mk_chan());\n }\n fn main() { }"}, {"sha": "e3f86246594ed5bab249d03030dd1fd7ca328d73", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -4,8 +4,8 @@ fn foo(c: [int]) {\n     let b: [int] = ~[];\n \n \n-    alt none[int] {\n-      some[int](_) { for i: int in c { log a; let a = 17; b += ~[a]; } }\n+    alt none::<int> {\n+        some::<int>(_) { for i: int in c { log a; let a = 17; b += ~[a]; } }\n       _ {}\n     }\n }"}, {"sha": "39a9619b1c6f081b074d064f14a168a062587305", "filename": "src/test/run-pass/simple-alt-generic-tag.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,4 +2,6 @@\n \n tag opt<T> { none; }\n \n-fn main() { let x = none[int]; alt x { none[int]. { log \"hello world\"; } } }\n+fn main() {\n+    let x = none::<int>; alt x { none::<int>. { log \"hello world\"; } }\n+}"}, {"sha": "6bf9566f156c7a5ffdf8f7afa6a768a6f7806c98", "filename": "src/test/run-pass/simple-generic-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-generic-alt.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,4 +2,4 @@\n \n tag clam<T> { a(T); }\n \n-fn main() { let c = a(2); alt c { a[int](_) { } } }\n+fn main() { let c = a(2); alt c { a::<int>(_) { } } }"}, {"sha": "8628e359ccb247447b833f1f1b1856184b0b59b6", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,12 +6,12 @@ tag clam<T> { a(T, int); b; }\n \n fn uhoh<T>(v: &[clam<T>]) {\n     alt v.(1) {\n-      a[T](t, u) { log \"incorrect\"; log u; fail; }\n-      b[T]. { log \"correct\"; }\n+      a::<T>(t, u) { log \"incorrect\"; log u; fail; }\n+      b::<T>. { log \"correct\"; }\n     }\n }\n \n fn main() {\n-    let v: [clam<int>] = ~[b[int], b[int], a[int](42, 17)];\n-    uhoh[int](v);\n+    let v: [clam<int>] = ~[b::<int>, b::<int>, a::<int>(42, 17)];\n+    uhoh::<int>(v);\n }"}, {"sha": "568bf1bf3e6c0c2531a404ee2011962dbad24d61", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -15,6 +15,6 @@ type ctx = comm::_chan<int>;\n fn iotask(cx: ctx, ip: str) { assert (str::eq(ip, \"localhost\")); }\n \n fn main() {\n-    let p = comm::mk_port<int>();\n+    let p = comm::mk_port::<int>();\n     task::_spawn(bind iotask(p.mk_chan(), \"localhost\"));\n }"}, {"sha": "f5f7f5564f6484f2493e5fe5212a63bf49bca455", "filename": "src/test/run-pass/syntax-extension-minor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fsyntax-extension-minor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fsyntax-extension-minor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-minor.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -5,4 +5,4 @@ fn main() {\n \n     assert(#ident_to_str[use_mention_distinction]\n            == \"use_mention_distinction\");\n-}\n\\ No newline at end of file\n+}"}, {"sha": "de38f08cbf8a15415256e38563f48e2953f58517", "filename": "src/test/run-pass/tag-and-generic-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftag-and-generic-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftag-and-generic-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-and-generic-obj.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,4 +6,4 @@ obj foo<T>() {\n     fn meth(x: &T) { }\n }\n \n-fn main() { foo[colour]().meth(red); }\n+fn main() { foo::<colour>().meth(red); }"}, {"sha": "acaa2b5f9b766cf2079f2e4d37df9d76222b5d07", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -20,7 +20,7 @@ fn test05_start(ch : _chan<int>) {\n }\n \n fn test05() {\n-    let po = comm::mk_port<int>();\n+    let po = comm::mk_port::<int>();\n     let ch = po.mk_chan();\n     task::_spawn(bind test05_start(ch));\n     let value = po.recv();"}, {"sha": "391576002637ea4daa90f5a2a19d5910e382aba3", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -10,7 +10,7 @@ import std::task;\n import std::comm;\n \n fn start(c: comm::_chan<str>) {\n-    let p = comm::mk_port<str>();\n+    let p = comm::mk_port::<str>();\n     c.send(p.mk_chan().unsafe_ptr());\n \n     let a;"}, {"sha": "ab994c7f37880a8151c1f77485df08614c6dbcf8", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -9,7 +9,7 @@ fn start(c: comm::_chan<comm::_chan<int>>) {\n }\n \n fn main() {\n-    let p = comm::mk_port<comm::_chan<int>>();\n+    let p = comm::mk_port::<comm::_chan<int>>();\n     let child = task::_spawn(bind start(p.mk_chan()));\n     let c = p.recv();\n }"}, {"sha": "64cdc3553bef26c768832761173d4ebe1767cf8a", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -13,7 +13,7 @@ fn start(c : comm::_chan<int>, n: int) {\n }\n \n fn main() {\n-    let p = comm::mk_port<comm::_chan<int>>();\n+    let p = comm::mk_port::<comm::_chan<int>>();\n     // Spawn a task that sends us back messages. The parent task\n     // is likely to terminate before the child completes, so from\n     // the child's point of view the receiver may die. We should"}, {"sha": "39eff3eb78efd06fb274e061ee7c706778dbca5e", "filename": "src/test/run-pass/task-compare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-compare.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -24,8 +24,8 @@ fn main() {\n     let p1;\n     let p2;\n \n-    p1 = comm::mk_port<int>();\n-    p2 = comm::mk_port<int>();\n+    p1 = comm::mk_port::<int>();\n+    p2 = comm::mk_port::<int>();\n \n     assert (p1 == p1);\n     assert (p1 != p2);"}, {"sha": "d27dcfaa9abc9910e3b222c69a04cc104b24f4cd", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -7,7 +7,7 @@ import std::comm::send;\n   message.\n  */\n fn main() {\n-    let po = mk_port[int]();\n+    let po = mk_port::<int>();\n     let ch = po.mk_chan();\n     send(ch, 42);\n     let r = po.recv();"}, {"sha": "25020ec3ed083a3a93be69b217cb313228293506", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -5,19 +5,19 @@ import std::sys::rustrt::size_of;\n use std;\n \n fn main() {\n-    assert (size_of[u8]() == 1 as uint);\n-    assert (size_of[u32]() == 4 as uint);\n-    assert (size_of[char]() == 4 as uint);\n-    assert (size_of[i8]() == 1 as uint);\n-    assert (size_of[i32]() == 4 as uint);\n-    assert (size_of[{a: u8, b: i8}]() == 2 as uint);\n-    assert (size_of[{a: u8, b: i8, c: u8}]() == 3 as uint);\n+    assert (size_of::<u8>() == 1 as uint);\n+    assert (size_of::<u32>() == 4 as uint);\n+    assert (size_of::<char>() == 4 as uint);\n+    assert (size_of::<i8>() == 1 as uint);\n+    assert (size_of::<i32>() == 4 as uint);\n+    assert (size_of::<{a: u8, b: i8}>() == 2 as uint);\n+    assert (size_of::<{a: u8, b: i8, c: u8}>() == 3 as uint);\n     // Alignment causes padding before the char and the u32.\n \n-    assert (size_of[{a: u8, b: i8, c: {u: char, v: u8}, d: u32}]() ==\n+    assert (size_of::<{a: u8, b: i8, c: {u: char, v: u8}, d: u32}>() ==\n                 16 as uint);\n-    assert (size_of[int]() == size_of[uint]());\n-    assert (size_of[{a: int, b: ()}]() == size_of[int]());\n-    assert (size_of[{a: int, b: (), c: ()}]() == size_of[int]());\n-    assert (size_of[int]() == size_of[{x: int}]());\n-}\n\\ No newline at end of file\n+    assert (size_of::<int>() == size_of::<uint>());\n+    assert (size_of::<{a: int, b: ()}>() == size_of::<int>());\n+    assert (size_of::<{a: int, b: (), c: ()}>() == size_of::<int>());\n+    assert (size_of::<int>() == size_of::<{x: int}>());\n+}"}, {"sha": "0538618ff884cb7c2a2b28888e17ee77205aff71", "filename": "src/test/run-pass/unify-return-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funify-return-ty.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -7,5 +7,5 @@ import std::unsafe;\n fn null<T>() -> *T { unsafe::reinterpret_cast(0) }\n \n fn main() {\n-    null[int]();\n+    null::<int>();\n }"}, {"sha": "7315bf08fefc3f3a05342fc614f02402a3a45570", "filename": "src/test/run-pass/use-uninit-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,7 +2,7 @@\n \n fn foo<T>(o: &myoption<T>) -> int {\n     let x: int = 5;\n-    alt o { none[T]. { } some[T](t) { x += 1; } }\n+    alt o { none::<T>. { } some::<T>(t) { x += 1; } }\n     ret x;\n }\n "}, {"sha": "615296d974f27b5745414bd48674678a0f649dfa", "filename": "src/test/run-pass/use-uninit-alt2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,7 +2,7 @@\n \n fn foo<T>(o: &myoption<T>) -> int {\n     let x: int;\n-    alt o { none[T]. { fail; } some[T](t) { x = 5; } }\n+    alt o { none::<T>. { fail; } some::<T>(t) { x = 5; } }\n     ret x;\n }\n "}, {"sha": "994003d1fe22231f4b1b3e40a9fe0307bb427549", "filename": "src/test/run-pass/user.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fuser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fuser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuser.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -13,5 +13,5 @@ fn main() {\n   log s;\n   s += \"there\";\n   log s;\n-  auto z = std::vec.alloc[int](10 as uint);\n+  auto z = std::vec.alloc::<int>(10 as uint);\n }"}, {"sha": "c94cef4bba374a7cc03e713b3b01ba9f08a1db1b", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -9,7 +9,7 @@ fn main() {\n \n     assert (str::byte_len(s) == 10u);\n     assert (str::char_len(s) == 4u);\n-    assert (vec::len[char](str::to_chars(s)) == 4u);\n+    assert (vec::len::<char>(str::to_chars(s)) == 4u);\n     assert (str::eq(str::from_chars(str::to_chars(s)), s));\n     assert (str::char_at(s, 0u) == 'e');\n     assert (str::char_at(s, 1u) == '\u00e9');"}, {"sha": "68076d41287ed35b634e1307bfc139e3726edd17", "filename": "src/test/run-pass/vec-append.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fvec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Frun-pass%2Fvec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-append.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -57,9 +57,9 @@ fn slow_growth2_helper(s: str) { // ref up: s\n         assert (str::refcount(s) == const_refcount);\n         assert (str::refcount(mumble) == const_refcount);\n         log v.(0);\n-        log vec::len[str](v);\n+        log vec::len::<str>(v);\n         assert (str::eq(v.(0), mumble));\n-        assert (vec::len[str](v) == 1u);\n+        assert (vec::len::<str>(v) == 1u);\n     } // ref down: mumble, s,\n \n     log str::refcount(s);"}, {"sha": "9ad241bb3f1241da6512a13651d561e4cbb56a57", "filename": "src/test/stdtest/bitv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fbitv.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -8,8 +8,8 @@ fn test_0_elements() {\n     let act;\n     let exp;\n     act = bitv::create(0u, false);\n-    exp = vec::init_elt[uint](0u, 0u);\n-    // FIXME: why can't I write vec[uint]()?\n+    exp = vec::init_elt::<uint>(0u, 0u);\n+    // FIXME: why can't I write vec::<uint>()?\n \n     assert (bitv::eq_ivec(act, exp));\n }"}, {"sha": "c28cb520be8bc6ca6c400bdaaf92f670575671c5", "filename": "src/test/stdtest/box.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fbox.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,8 +6,8 @@ import std::box;\n fn test() {\n     let x = @3;\n     let y = @3;\n-    assert (box::ptr_eq[int](x, x));\n-    assert (box::ptr_eq[int](y, y));\n-    assert (!box::ptr_eq[int](x, y));\n-    assert (!box::ptr_eq[int](y, x));\n-}\n\\ No newline at end of file\n+    assert (box::ptr_eq::<int>(x, x));\n+    assert (box::ptr_eq::<int>(y, y));\n+    assert (!box::ptr_eq::<int>(x, y));\n+    assert (!box::ptr_eq::<int>(y, x));\n+}"}, {"sha": "e0e310e5ee2b7f62f16120329dbb35d8171c2c29", "filename": "src/test/stdtest/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fcomm.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -3,13 +3,13 @@ import std::comm;\n \n #[test]\n fn create_port_and_chan() {\n-    let p = comm::mk_port<int>();\n+    let p = comm::mk_port::<int>();\n     let c = p.mk_chan();\n }\n \n #[test]\n fn send_recv() {\n-    let p = comm::mk_port<int>();\n+    let p = comm::mk_port::<int>();\n     let c = p.mk_chan();\n \n     comm::send(c, 42);"}, {"sha": "d751bd5c45deb5afd0e19d655dd82dca9ab8b596", "filename": "src/test/stdtest/deque.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fdeque.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,7 +6,7 @@ import std::deque;\n \n #[test]\n fn test_simple() {\n-    let d: deque::t<int> = deque::create[int]();\n+    let d: deque::t<int> = deque::create::<int>();\n     assert (d.size() == 0u);\n     d.add_front(17);\n     d.add_front(42);\n@@ -50,7 +50,7 @@ fn test_simple() {\n }\n \n fn test_boxes(a: @int, b: @int, c: @int, d: @int) {\n-    let deq: deque::t<@int> = deque::create[@int]();\n+    let deq: deque::t<@int> = deque::create::<@int>();\n     assert (deq.size() == 0u);\n     deq.add_front(a);\n     deq.add_front(b);\n@@ -82,7 +82,7 @@ fn test_boxes(a: @int, b: @int, c: @int, d: @int) {\n type eqfn<T> = fn(&T, &T) -> bool ;\n \n fn test_parameterized<@T>(e: eqfn<T>, a: &T, b: &T, c: &T, d: &T) {\n-    let deq: deque::t<T> = deque::create[T]();\n+    let deq: deque::t<T> = deque::create::<T>();\n     assert (deq.size() == 0u);\n     deq.add_front(a);\n     deq.add_front(b);\n@@ -140,18 +140,18 @@ fn test() {\n     }\n     fn taggypareq<@T>(a: &taggypar<T>, b: &taggypar<T>) -> bool {\n         alt a {\n-          onepar[T](a1) {\n-            alt b { onepar[T](b1) { ret a1 == b1; } _ { ret false; } }\n+          onepar::<T>(a1) {\n+            alt b { onepar::<T>(b1) { ret a1 == b1; } _ { ret false; } }\n           }\n-          twopar[T](a1, a2) {\n+          twopar::<T>(a1, a2) {\n             alt b {\n-              twopar[T](b1, b2) { ret a1 == b1 && a2 == b2; }\n+              twopar::<T>(b1, b2) { ret a1 == b1 && a2 == b2; }\n               _ { ret false; }\n             }\n           }\n-          threepar[T](a1, a2, a3) {\n+          threepar::<T>(a1, a2, a3) {\n             alt b {\n-              threepar[T](b1, b2, b3) {\n+              threepar::<T>(b1, b2, b3) {\n                 ret a1 == b1 && a2 == b2 && a3 == b3;\n               }\n               _ { ret false; }\n@@ -167,32 +167,32 @@ fn test() {\n     log \"*** end test boxes\";\n     log \"test parameterized: int\";\n     let eq1: eqfn<int> = inteq;\n-    test_parameterized[int](eq1, 5, 72, 64, 175);\n+    test_parameterized::<int>(eq1, 5, 72, 64, 175);\n     log \"*** test parameterized: @int\";\n     let eq2: eqfn<@int> = intboxeq;\n-    test_parameterized[@int](eq2, @5, @72, @64, @175);\n+    test_parameterized::<@int>(eq2, @5, @72, @64, @175);\n     log \"*** end test parameterized @int\";\n     log \"test parameterized: taggy\";\n     let eq3: eqfn<taggy> = taggyeq;\n-    test_parameterized[taggy](eq3, one(1), two(1, 2), three(1, 2, 3),\n+    test_parameterized::<taggy>(eq3, one(1), two(1, 2), three(1, 2, 3),\n                               two(17, 42));\n \n     log \"*** test parameterized: taggypar<int>\";\n-    let eq4: eqfn<taggypar<int>> = taggypareq[int];\n-    test_parameterized[taggypar<int>](eq4,\n-                                      onepar[int](1),\n-                                      twopar[int](1, 2),\n-                                      threepar[int](1, 2, 3),\n-                                      twopar[int](17, 42));\n-    log \"*** end test parameterized: taggypar[int]\";\n+    let eq4: eqfn<taggypar<int>> = taggypareq::<int>;\n+    test_parameterized::<taggypar<int>>(eq4,\n+                                      onepar::<int>(1),\n+                                      twopar::<int>(1, 2),\n+                                      threepar::<int>(1, 2, 3),\n+                                      twopar::<int>(17, 42));\n+    log \"*** end test parameterized: taggypar::<int>\";\n \n     log \"*** test parameterized: reccy\";\n     let reccy1: reccy = {x: 1, y: 2, t: one(1)};\n     let reccy2: reccy = {x: 345, y: 2, t: two(1, 2)};\n     let reccy3: reccy = {x: 1, y: 777, t: three(1, 2, 3)};\n     let reccy4: reccy = {x: 19, y: 252, t: two(17, 42)};\n     let eq5: eqfn<reccy> = reccyeq;\n-    test_parameterized[reccy](eq5, reccy1, reccy2, reccy3, reccy4);\n+    test_parameterized::<reccy>(eq5, reccy1, reccy2, reccy3, reccy4);\n     log \"*** end test parameterized: reccy\";\n     log \"*** done\";\n }"}, {"sha": "4a44508efc4c0dcc82ac616263a783da35f82b94", "filename": "src/test/stdtest/list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Flist.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -26,7 +26,7 @@ fn test_foldl() {\n fn test_find_success() {\n     let l = from_vec(~[0, 1, 2]);\n     fn match(i: &int) -> option::t<int> {\n-        ret if i == 2 { option::some(i) } else { option::none[int] };\n+        ret if i == 2 { option::some(i) } else { option::none::<int> };\n     }\n     let rs = list::find(l, match);\n     assert (rs == option::some(2));\n@@ -35,15 +35,15 @@ fn test_find_success() {\n #[test]\n fn test_find_fail() {\n     let l = from_vec(~[0, 1, 2]);\n-    fn match(i: &int) -> option::t<int> { ret option::none[int]; }\n+    fn match(i: &int) -> option::t<int> { ret option::none::<int>; }\n     let rs = list::find(l, match);\n-    assert (rs == option::none[int]);\n+    assert (rs == option::none::<int>);\n }\n \n #[test]\n fn test_has() {\n     let l = from_vec(~[5, 8, 6]);\n-    let empty = list::nil[int];\n+    let empty = list::nil::<int>;\n     assert (list::has(l, 5));\n     assert (!list::has(l, 7));\n     assert (list::has(l, 8));"}, {"sha": "2da579cf472f2edf707f48b1bf41a719fb9f68c3", "filename": "src/test/stdtest/map.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmap.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -23,7 +23,7 @@ fn test_simple() {\n     let eqer_str: map::eqfn<str> = str::eq;\n     log \"uint -> uint\";\n     let hm_uu: map::hashmap<uint, uint> =\n-        map::mk_hashmap[uint, uint](hasher_uint, eqer_uint);\n+        map::mk_hashmap::<uint, uint>(hasher_uint, eqer_uint);\n     assert (hm_uu.insert(10u, 12u));\n     assert (hm_uu.insert(11u, 13u));\n     assert (hm_uu.insert(12u, 14u));\n@@ -39,7 +39,7 @@ fn test_simple() {\n     let twelve: str = \"twelve\";\n     log \"str -> uint\";\n     let hm_su: map::hashmap<str, uint> =\n-        map::mk_hashmap[str, uint](hasher_str, eqer_str);\n+        map::mk_hashmap::<str, uint>(hasher_str, eqer_str);\n     assert (hm_su.insert(\"ten\", 12u));\n     assert (hm_su.insert(eleven, 13u));\n     assert (hm_su.insert(\"twelve\", 14u));\n@@ -53,7 +53,7 @@ fn test_simple() {\n     assert (hm_su.get(\"twelve\") == 12u);\n     log \"uint -> str\";\n     let hm_us: map::hashmap<uint, str> =\n-        map::mk_hashmap[uint, str](hasher_uint, eqer_uint);\n+        map::mk_hashmap::<uint, str>(hasher_uint, eqer_uint);\n     assert (hm_us.insert(10u, \"twelve\"));\n     assert (hm_us.insert(11u, \"thirteen\"));\n     assert (hm_us.insert(12u, \"fourteen\"));\n@@ -66,7 +66,7 @@ fn test_simple() {\n     assert (str::eq(hm_us.get(12u), \"twelve\"));\n     log \"str -> str\";\n     let hm_ss: map::hashmap<str, str> =\n-        map::mk_hashmap[str, str](hasher_str, eqer_str);\n+        map::mk_hashmap::<str, str>(hasher_str, eqer_str);\n     assert (hm_ss.insert(ten, \"twelve\"));\n     assert (hm_ss.insert(eleven, \"thirteen\"));\n     assert (hm_ss.insert(twelve, \"fourteen\"));\n@@ -99,7 +99,7 @@ fn test_growth() {\n     let hasher_uint: map::hashfn<uint> = hash_uint;\n     let eqer_uint: map::eqfn<uint> = eq_uint;\n     let hm_uu: map::hashmap<uint, uint> =\n-        map::mk_hashmap[uint, uint](hasher_uint, eqer_uint);\n+        map::mk_hashmap::<uint, uint>(hasher_uint, eqer_uint);\n     let i: uint = 0u;\n     while i < num_to_insert {\n         assert (hm_uu.insert(i, i * i));\n@@ -130,7 +130,7 @@ fn test_growth() {\n     let hasher_str: map::hashfn<str> = str::hash;\n     let eqer_str: map::eqfn<str> = str::eq;\n     let hm_ss: map::hashmap<str, str> =\n-        map::mk_hashmap[str, str](hasher_str, eqer_str);\n+        map::mk_hashmap::<str, str>(hasher_str, eqer_str);\n     i = 0u;\n     while i < num_to_insert {\n         assert (hm_ss.insert(uint::to_str(i, 2u), uint::to_str(i * i, 2u)));\n@@ -181,7 +181,7 @@ fn test_removal() {\n     let hasher: map::hashfn<uint> = hash;\n     let eqer: map::eqfn<uint> = eq;\n     let hm: map::hashmap<uint, uint> =\n-        map::mk_hashmap[uint, uint](hasher, eqer);\n+        map::mk_hashmap::<uint, uint>(hasher, eqer);\n     let i: uint = 0u;\n     while i < num_to_insert {\n         assert (hm.insert(i, i * i));\n@@ -200,10 +200,10 @@ fn test_removal() {\n \n         let v: util.option<uint> = hm.remove(i);\n         alt (v) {\n-          case (util.some[uint](u)) {\n+          case (util.some::<uint>(u)) {\n             assert (u == (i * i));\n           }\n-          case (util.none[uint]()) { fail; }\n+          case (util.none::<uint>()) { fail; }\n         }\n \n          * but we util.option is a tag type so util.some and util.none are\n@@ -268,7 +268,7 @@ fn test_removal() {\n #[test]\n fn test_contains_key() {\n     let key = \"k\";\n-    let map = map::mk_hashmap[str, str](str::hash, str::eq);\n+    let map = map::mk_hashmap::<str, str>(str::hash, str::eq);\n     assert (!map.contains_key(key));\n     map.insert(key, \"val\");\n     assert (map.contains_key(key));\n@@ -277,7 +277,7 @@ fn test_contains_key() {\n #[test]\n fn test_find() {\n     let key = \"k\";\n-    let map = map::mk_hashmap[str, str](str::hash, str::eq);\n+    let map = map::mk_hashmap::<str, str>(str::hash, str::eq);\n     assert (std::option::is_none(map.find(key)));\n     map.insert(key, \"val\");\n     assert (std::option::get(map.find(key)) == \"val\");"}, {"sha": "ef3838326043114c11533a74bb21f89b8b73f913", "filename": "src/test/stdtest/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Foption.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,4 +2,4 @@\n use std;\n \n #[test]\n-fn test() { let x = std::option::some[int](10); }\n\\ No newline at end of file\n+fn test() { let x = std::option::some::<int>(10); }"}, {"sha": "4e557b533a496189cc5c4b0eaf33212aa187ca85", "filename": "src/test/stdtest/qsort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fqsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fqsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fqsort.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -6,10 +6,10 @@ import std::vec;\n import std::int;\n \n fn check_sort(v1: &[mutable int], v2: &[mutable int]) {\n-    let len = std::vec::len[int](v1);\n+    let len = std::vec::len::<int>(v1);\n     fn ltequal(a: &int, b: &int) -> bool { ret a <= b; }\n     let f = ltequal;\n-    std::sort::quick_sort[int](f, v1);\n+    std::sort::quick_sort::<int>(f, v1);\n     let i = 0u;\n     while i < len { log v2.(i); assert (v2.(i) == v1.(i)); i += 1u; }\n }"}, {"sha": "21f43218806df73c5cb355cd4c3eb81abfc6f850", "filename": "src/test/stdtest/qsort3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fqsort3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fqsort3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fqsort3.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,12 +2,12 @@\n use std;\n \n fn check_sort(v1: &[mutable int], v2: &[mutable int]) {\n-    let len = std::vec::len[int](v1);\n+    let len = std::vec::len::<int>(v1);\n     fn lt(a: &int, b: &int) -> bool { ret a < b; }\n     fn equal(a: &int, b: &int) -> bool { ret a == b; }\n     let f1 = lt;\n     let f2 = equal;\n-    std::sort::quick_sort3[int](f1, f2, v1);\n+    std::sort::quick_sort3::<int>(f1, f2, v1);\n     let i = 0u;\n     while i < len { log v2.(i); assert (v2.(i) == v1.(i)); i += 1u; }\n }"}, {"sha": "74729fa52ae8c2b86f6afaf142fbc1935d461f93", "filename": "src/test/stdtest/sha1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsha1.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -61,8 +61,8 @@ fn test() {\n                 0x10u8, 0x0du8, 0xb4u8, 0xb3u8]}];\n     let tests = fips_180_1_tests + wikipedia_tests;\n     fn check_vec_eq(v0: &[u8], v1: &[u8]) {\n-        assert (vec::len[u8](v0) == vec::len[u8](v1));\n-        let len = vec::len[u8](v0);\n+        assert (vec::len::<u8>(v0) == vec::len::<u8>(v1));\n+        let len = vec::len::<u8>(v0);\n         let i = 0u;\n         while i < len {\n             let a = v0.(i);"}, {"sha": "be15881e65a8879c6d41421d5111b436537ab6a3", "filename": "src/test/stdtest/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsort.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -2,10 +2,10 @@\n use std;\n \n fn check_sort(v1: &[int], v2: &[int]) {\n-    let len = std::vec::len[int](v1);\n+    let len = std::vec::len::<int>(v1);\n     fn lteq(a: &int, b: &int) -> bool { ret a <= b; }\n     let f = lteq;\n-    let v3 = std::sort::merge_sort[int](f, v1);\n+    let v3 = std::sort::merge_sort::<int>(f, v1);\n     let i = 0u;\n     while i < len { log v3.(i); assert (v3.(i) == v2.(i)); i += 1u; }\n }"}, {"sha": "75b3998e28c837916aa9162acd621a8350f87af7", "filename": "src/test/stdtest/vec.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -90,14 +90,14 @@ fn test_init_elt() {\n \n #[test]\n fn test_is_empty() {\n-    assert (vec::is_empty[int](~[]));\n+    assert (vec::is_empty::<int>(~[]));\n     assert (!vec::is_empty(~[0]));\n }\n \n #[test]\n fn test_is_not_empty() {\n     assert (vec::is_not_empty(~[0]));\n-    assert (!vec::is_not_empty[int](~[]));\n+    assert (!vec::is_not_empty::<int>(~[]));\n }\n \n #[test]\n@@ -242,7 +242,7 @@ fn test_map2() {\n     let f = times;\n     let v0 = ~[1, 2, 3, 4, 5];\n     let v1 = ~[5, 4, 3, 2, 1];\n-    let u = vec::map2[int, int, int](f, v0, v1);\n+    let u = vec::map2::<int, int, int>(f, v0, v1);\n     let i = 0;\n     while i < 5 { assert (v0.(i) * v1.(i) == u.(i)); i += 1; }\n }\n@@ -266,8 +266,8 @@ fn test_filter_map() {\n \n     fn halve(i: &int) -> option::t<int> {\n         if i % 2 == 0 {\n-            ret option::some[int](i / 2);\n-        } else { ret option::none[int]; }\n+            ret option::some::<int>(i / 2);\n+        } else { ret option::none::<int>; }\n     }\n     fn halve_for_sure(i: &int) -> int { ret i / 2; }\n     let all_even: [int] = ~[0, 2, 8, 6];\n@@ -328,19 +328,19 @@ fn test_zip_unzip() {\n #[test]\n fn test_position() {\n     let v1: [int] = ~[1, 2, 3, 3, 2, 5];\n-    assert (position(1, v1) == option::some[uint](0u));\n-    assert (position(2, v1) == option::some[uint](1u));\n-    assert (position(5, v1) == option::some[uint](5u));\n-    assert (position(4, v1) == option::none[uint]);\n+    assert (position(1, v1) == option::some::<uint>(0u));\n+    assert (position(2, v1) == option::some::<uint>(1u));\n+    assert (position(5, v1) == option::some::<uint>(5u));\n+    assert (position(4, v1) == option::none::<uint>);\n }\n \n #[test]\n fn test_position_pred() {\n     fn less_than_three(i: &int) -> bool { ret i < 3; }\n     fn is_eighteen(i: &int) -> bool { ret i == 18; }\n     let v1: [int] = ~[5, 4, 3, 2, 1];\n-    assert (position_pred(less_than_three, v1) == option::some[uint](3u));\n-    assert (position_pred(is_eighteen, v1) == option::none[uint]);\n+    assert (position_pred(less_than_three, v1) == option::some::<uint>(3u));\n+    assert (position_pred(is_eighteen, v1) == option::none::<uint>);\n }\n \n #[test]\n@@ -351,16 +351,16 @@ fn reverse_and_reversed() {\n     vec::reverse(v);\n     assert (v.(0) == 20);\n     assert (v.(1) == 10);\n-    let v2 = vec::reversed[int](~[10, 20]);\n+    let v2 = vec::reversed::<int>(~[10, 20]);\n     assert (v2.(0) == 20);\n     assert (v2.(1) == 10);\n     v.(0) = 30;\n     assert (v2.(0) == 20);\n     // Make sure they work with 0-length vectors too.\n \n-    let v4 = vec::reversed[int](~[]);\n+    let v4 = vec::reversed::<int>(~[]);\n     let v3: [mutable int] = ~[mutable];\n-    vec::reverse[int](v3);\n+    vec::reverse::<int>(v3);\n }\n \n // Local Variables:"}, {"sha": "cc52ec80e95bcb4145e99a7528cc368675b9f3b7", "filename": "src/test/stdtest/vec_str_conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3eba1527127264cb26ec5acffb6d3bcd1558ce9/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fvec_str_conversions.rs?ref=b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "patch": "@@ -13,7 +13,7 @@ fn test_simple() {\n     let s2: str = str::unsafe_from_bytes(v);\n     let i: uint = 0u;\n     let n1: uint = str::byte_len(s1);\n-    let n2: uint = vec::len[u8](v);\n+    let n2: uint = vec::len::<u8>(v);\n     assert (n1 == n2);\n     while i < n1 {\n         let a: u8 = s1.(i);"}]}