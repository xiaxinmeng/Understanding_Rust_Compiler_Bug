{"sha": "8e549978e58fe724c4637ab71808ff8785743c61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNTQ5OTc4ZTU4ZmU3MjRjNDYzN2FiNzE4MDhmZjg3ODU3NDNjNjE=", "commit": {"author": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2020-07-22T12:44:53Z"}, "committer": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2020-08-14T12:38:11Z"}, "message": "Don't use `to_string` in impl Display", "tree": {"sha": "7f94440c875a51b5aff799060fc22476828dbc6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f94440c875a51b5aff799060fc22476828dbc6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e549978e58fe724c4637ab71808ff8785743c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e549978e58fe724c4637ab71808ff8785743c61", "html_url": "https://github.com/rust-lang/rust/commit/8e549978e58fe724c4637ab71808ff8785743c61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e549978e58fe724c4637ab71808ff8785743c61/comments", "author": null, "committer": null, "parents": [{"sha": "d5f5487252535da878f43486e94007d2b2fce142", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f5487252535da878f43486e94007d2b2fce142", "html_url": "https://github.com/rust-lang/rust/commit/d5f5487252535da878f43486e94007d2b2fce142"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "714337732545c82f7d066677d9adefcef6a68bcf", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e549978e58fe724c4637ab71808ff8785743c61/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e549978e58fe724c4637ab71808ff8785743c61/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8e549978e58fe724c4637ab71808ff8785743c61", "patch": "@@ -1723,6 +1723,7 @@ Released 2018-09-13\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n [`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr\n [`to_digit_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_digit_is_some\n+[`to_string_in_display`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_display\n [`todo`]: https://rust-lang.github.io/rust-clippy/master/index.html#todo\n [`too_many_arguments`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n [`too_many_lines`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines"}, {"sha": "7ae185103a38fe7bae1af2dae3615780c226271c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e549978e58fe724c4637ab71808ff8785743c61/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e549978e58fe724c4637ab71808ff8785743c61/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8e549978e58fe724c4637ab71808ff8785743c61", "patch": "@@ -296,6 +296,7 @@ mod swap;\n mod tabs_in_doc_comments;\n mod temporary_assignment;\n mod to_digit_is_some;\n+mod to_string_in_display;\n mod trait_bounds;\n mod transmute;\n mod transmuting_null;\n@@ -788,6 +789,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &tabs_in_doc_comments::TABS_IN_DOC_COMMENTS,\n         &temporary_assignment::TEMPORARY_ASSIGNMENT,\n         &to_digit_is_some::TO_DIGIT_IS_SOME,\n+        &to_string_in_display::TO_STRING_IN_DISPLAY,\n         &trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS,\n         &trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         &transmute::CROSSPOINTER_TRANSMUTE,\n@@ -1017,6 +1019,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box reference::DerefAddrOf);\n     store.register_early_pass(|| box reference::RefInDeref);\n     store.register_early_pass(|| box double_parens::DoubleParens);\n+    store.register_late_pass(|| box to_string_in_display::ToStringInDisplay::new());\n     store.register_early_pass(|| box unsafe_removed_from_name::UnsafeNameRemoval);\n     store.register_early_pass(|| box if_not_else::IfNotElse);\n     store.register_early_pass(|| box else_if_without_else::ElseIfWithoutElse);\n@@ -1427,6 +1430,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n         LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(&to_digit_is_some::TO_DIGIT_IS_SOME),\n+        LintId::of(&to_string_in_display::TO_STRING_IN_DISPLAY),\n         LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),\n         LintId::of(&transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n         LintId::of(&transmute::TRANSMUTE_BYTES_TO_STR),\n@@ -1708,6 +1712,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n         LintId::of(&swap::ALMOST_SWAPPED),\n+        LintId::of(&to_string_in_display::TO_STRING_IN_DISPLAY),\n         LintId::of(&transmute::UNSOUND_COLLECTION_TRANSMUTE),\n         LintId::of(&transmute::WRONG_TRANSMUTE),\n         LintId::of(&transmuting_null::TRANSMUTING_NULL),"}, {"sha": "11bdd27d9b1b2c88b3a7d6070d0b530aa0355d8f", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/8e549978e58fe724c4637ab71808ff8785743c61/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e549978e58fe724c4637ab71808ff8785743c61/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=8e549978e58fe724c4637ab71808ff8785743c61", "patch": "@@ -0,0 +1,100 @@\n+use crate::utils::{match_def_path, match_trait_method, paths, span_lint};\n+use if_chain::if_chain;\n+use rustc_hir::{Expr, ExprKind, Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for uses of `to_string()` in `Display` traits.\n+    ///\n+    /// **Why is this bad?** Usually `to_string` is implemented indirectly\n+    /// via `Display`. Hence using it while implementing `Display` would\n+    /// lead to infinite recursion.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// use std::fmt;\n+    ///\n+    /// struct Structure(i32);\n+    /// impl fmt::Display for Structure {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"{}\", self.to_string())\n+    ///     }\n+    /// }\n+    ///\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::fmt;\n+    ///\n+    /// struct Structure(i32);\n+    /// impl fmt::Display for Structure {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"{}\", self.0)\n+    ///     }\n+    /// }\n+    /// ```\n+    pub TO_STRING_IN_DISPLAY,\n+    correctness,\n+    \"to_string method used while implementing Display trait\"\n+}\n+\n+#[derive(Default)]\n+pub struct ToStringInDisplay {\n+    in_display_impl: bool,\n+}\n+\n+impl ToStringInDisplay {\n+    pub fn new() -> Self {\n+        Self { in_display_impl: false }\n+    }\n+}\n+\n+impl_lint_pass!(ToStringInDisplay => [TO_STRING_IN_DISPLAY]);\n+\n+impl LateLintPass<'_> for ToStringInDisplay {\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if is_display_impl(cx, item) {\n+            self.in_display_impl = true;\n+        }\n+    }\n+\n+    fn check_item_post(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n+        if is_display_impl(cx, item) {\n+            self.in_display_impl = false;\n+        }\n+    }\n+\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(ref path, _, _, _) = expr.kind;\n+            if path.ident.name == sym!(to_string);\n+            if match_trait_method(cx, expr, &paths::TO_STRING);\n+            if self.in_display_impl;\n+\n+            then {\n+                span_lint(\n+                    cx,\n+                    TO_STRING_IN_DISPLAY,\n+                    expr.span,\n+                    \"Using to_string in fmt::Display implementation might lead to infinite recursion\",\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn is_display_impl(cx: &LateContext<'_>, item: &Item<'_>) -> bool {\n+    if_chain! {\n+        if let ItemKind::Impl { of_trait: Some(trait_ref), .. } = &item.kind;\n+        if let Some(did) = trait_ref.trait_def_id();\n+        then {\n+            match_def_path(cx, did, &paths::DISPLAY_TRAIT)\n+        } else {\n+            false\n+        }\n+    }\n+}"}, {"sha": "46827084a609bd27196054b52a9dcf385773b33d", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e549978e58fe724c4637ab71808ff8785743c61/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e549978e58fe724c4637ab71808ff8785743c61/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=8e549978e58fe724c4637ab71808ff8785743c61", "patch": "@@ -2166,6 +2166,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"to_digit_is_some\",\n     },\n+    Lint {\n+        name: \"to_string_in_display\",\n+        group: \"correctness\",\n+        desc: \"to_string method used while implementing Display trait\",\n+        deprecation: None,\n+        module: \"to_string_in_display\",\n+    },\n     Lint {\n         name: \"todo\",\n         group: \"restriction\","}, {"sha": "3b46324704e1c1dd23b1c201632d349e090884d2", "filename": "tests/ui/to_string_in_display.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8e549978e58fe724c4637ab71808ff8785743c61/tests%2Fui%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e549978e58fe724c4637ab71808ff8785743c61/tests%2Fui%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_string_in_display.rs?ref=8e549978e58fe724c4637ab71808ff8785743c61", "patch": "@@ -0,0 +1,55 @@\n+#![warn(clippy::to_string_in_display)]\n+#![allow(clippy::inherent_to_string_shadow_display)]\n+\n+use std::fmt;\n+\n+struct A;\n+impl A {\n+    fn fmt(&self) {\n+        self.to_string();\n+    }\n+}\n+\n+trait B {\n+    fn fmt(&self) {}\n+}\n+\n+impl B for A {\n+    fn fmt(&self) {\n+        self.to_string();\n+    }\n+}\n+\n+impl fmt::Display for A {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.to_string())\n+    }\n+}\n+\n+fn fmt(a: A) {\n+    a.to_string();\n+}\n+\n+struct C;\n+\n+impl C {\n+    fn to_string(&self) -> String {\n+        String::from(\"I am C\")\n+    }\n+}\n+\n+impl fmt::Display for C {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}\", self.to_string())\n+    }\n+}\n+\n+fn main() {\n+    let a = A;\n+    a.to_string();\n+    a.fmt();\n+    fmt(a);\n+\n+    let c = C;\n+    c.to_string();\n+}"}, {"sha": "cbc0a41036be3b7975da2ed321c80595b627243c", "filename": "tests/ui/to_string_in_display.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e549978e58fe724c4637ab71808ff8785743c61/tests%2Fui%2Fto_string_in_display.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e549978e58fe724c4637ab71808ff8785743c61/tests%2Fui%2Fto_string_in_display.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fto_string_in_display.stderr?ref=8e549978e58fe724c4637ab71808ff8785743c61", "patch": "@@ -0,0 +1,10 @@\n+error: Using to_string in fmt::Display implementation might lead to infinite recursion\n+  --> $DIR/to_string_in_display.rs:25:25\n+   |\n+LL |         write!(f, \"{}\", self.to_string())\n+   |                         ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::to-string-in-display` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}