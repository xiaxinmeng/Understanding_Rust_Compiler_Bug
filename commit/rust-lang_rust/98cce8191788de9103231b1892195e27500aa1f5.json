{"sha": "98cce8191788de9103231b1892195e27500aa1f5", "node_id": "C_kwDOAAsO6NoAKDk4Y2NlODE5MTc4OGRlOTEwMzIzMWIxODkyMTk1ZTI3NTAwYWExZjU", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-22T14:08:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-13T13:31:55Z"}, "message": "metadata: Remove some more untracked `CStore` methods", "tree": {"sha": "c16ef60f5b108b9f99ad57a3ba5ed2da1f7a4346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c16ef60f5b108b9f99ad57a3ba5ed2da1f7a4346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98cce8191788de9103231b1892195e27500aa1f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98cce8191788de9103231b1892195e27500aa1f5", "html_url": "https://github.com/rust-lang/rust/commit/98cce8191788de9103231b1892195e27500aa1f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98cce8191788de9103231b1892195e27500aa1f5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3ee735993db51074c8f494336696978a77dc16b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ee735993db51074c8f494336696978a77dc16b", "html_url": "https://github.com/rust-lang/rust/commit/b3ee735993db51074c8f494336696978a77dc16b"}], "stats": {"total": 31, "additions": 10, "deletions": 21}, "files": [{"sha": "71bdd4df95ba384298d31552890d262cbf1bbbf4", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98cce8191788de9103231b1892195e27500aa1f5/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cce8191788de9103231b1892195e27500aa1f5/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=98cce8191788de9103231b1892195e27500aa1f5", "patch": "@@ -26,7 +26,7 @@ use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n use rustc_resolve::Resolver;\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n-use rustc_session::cstore::{CrateStoreDyn, MetadataLoader, Untracked};\n+use rustc_session::cstore::{MetadataLoader, Untracked};\n use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n@@ -442,13 +442,9 @@ fn escape_dep_env(symbol: Symbol) -> String {\n     escaped\n }\n \n-fn write_out_deps(\n-    sess: &Session,\n-    cstore: &CrateStoreDyn,\n-    outputs: &OutputFilenames,\n-    out_filenames: &[PathBuf],\n-) {\n+fn write_out_deps(tcx: TyCtxt<'_>, outputs: &OutputFilenames, out_filenames: &[PathBuf]) {\n     // Write out dependency rules to the dep-info file if requested\n+    let sess = tcx.sess;\n     if !sess.opts.output_types.contains_key(&OutputType::DepInfo) {\n         return;\n     }\n@@ -496,9 +492,8 @@ fn write_out_deps(\n                 }\n             }\n \n-            let cstore = cstore.as_any().downcast_ref::<CStore>().unwrap();\n-            for cnum in cstore.crates_untracked() {\n-                let source = cstore.crate_source_untracked(cnum);\n+            for &cnum in tcx.crates(()) {\n+                let source = tcx.used_crate_source(cnum);\n                 if let Some((path, _)) = &source.dylib {\n                     files.push(escape_dep_filename(&path.display().to_string()));\n                 }\n@@ -612,7 +607,7 @@ fn output_filenames(tcx: TyCtxt<'_>, (): ()) -> Arc<OutputFilenames> {\n         }\n     }\n \n-    write_out_deps(sess, &*tcx.cstore_untracked(), &outputs, &output_paths);\n+    write_out_deps(tcx, &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)\n         && sess.opts.output_types.len() == 1;"}, {"sha": "6c5e8863010850e40abe3b648cd320665c1707cf", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98cce8191788de9103231b1892195e27500aa1f5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cce8191788de9103231b1892195e27500aa1f5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=98cce8191788de9103231b1892195e27500aa1f5", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::cstore::{CrateSource, CrateStore};\n+use rustc_session::cstore::CrateStore;\n use rustc_session::{Session, StableCrateId};\n use rustc_span::hygiene::{ExpnHash, ExpnId};\n use rustc_span::symbol::{kw, Symbol};\n@@ -501,7 +501,9 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n             tcx.arena\n                 .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))\n         },\n-        crates: |tcx, ()| tcx.arena.alloc_from_iter(CStore::from_tcx(tcx).crates_untracked()),\n+        crates: |tcx, ()| {\n+            tcx.arena.alloc_from_iter(CStore::from_tcx(tcx).iter_crate_data().map(|(cnum, _)| cnum))\n+        },\n         ..*providers\n     };\n }\n@@ -547,10 +549,6 @@ impl CStore {\n         )\n     }\n \n-    pub fn crate_source_untracked(&self, cnum: CrateNum) -> Lrc<CrateSource> {\n-        self.get_crate_data(cnum).source.clone()\n-    }\n-\n     pub fn get_span_untracked(&self, def_id: DefId, sess: &Session) -> Span {\n         self.get_crate_data(def_id.krate).get_span(def_id.index, sess)\n     }\n@@ -559,10 +557,6 @@ impl CStore {\n         self.get_crate_data(def.krate).def_kind(def.index)\n     }\n \n-    pub fn crates_untracked(&self) -> impl Iterator<Item = CrateNum> + '_ {\n-        self.iter_crate_data().map(|(cnum, _)| cnum)\n-    }\n-\n     pub fn item_generics_num_lifetimes(&self, def_id: DefId, sess: &Session) -> usize {\n         self.get_crate_data(def_id.krate).get_generics(def_id.index, sess).own_counts().lifetimes\n     }"}]}