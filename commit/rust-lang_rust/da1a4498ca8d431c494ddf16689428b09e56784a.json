{"sha": "da1a4498ca8d431c494ddf16689428b09e56784a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMWE0NDk4Y2E4ZDQzMWM0OTRkZGYxNjY4OTQyOGIwOWU1Njc4NGE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-09T03:04:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-09T03:04:04Z"}, "message": "Rollup merge of #85982 - alexcrichton:doc-safe-wasm, r=jyn514\n\nEnable rustdoc to document safe wasm intrinsics\n\nThis commit fixes an issue not found during #84988 where rustdoc is used\nto document cross-platform intrinsics but it was requiring that\nfunctions which use `#[target_feature]` are `unsafe` erroneously, even\nif they're WebAssembly specific. Rustdoc today, for example, already has\na special case where it enables annotations like\n`#[target_feature(enable = \"simd128\")]` on platforms other than\nWebAssembly. The purpose of this commit is to relax the \"require all\n`#[target_feature]` functions are `unsafe`\" requirement for all targets\nwhenever rustdoc is running, enabling all targets to fully document\nother targets, such as WebAssembly, where intrinsics functions aren't\nalways `unsafe`.", "tree": {"sha": "ab4f551c76fcbbc5110dfdb6350087cfd3f74c0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab4f551c76fcbbc5110dfdb6350087cfd3f74c0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da1a4498ca8d431c494ddf16689428b09e56784a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwC+kCRBK7hj4Ov3rIwAAigwIAKxbwLDMW7A0H3OmvCwwj5rE\nKwZQ2wf2+cskvH0j5gmAdIAyM3kZHdRSkPDKRkw4b+bpuljF6L091bXU2GQkfbO1\nQ4MKrVDKUbxQZIdbPhxWKXNojQ93AIKsb7Cboy+FuKLb4SpSijibPKAW+dUG8vFm\nMif0wQjlTp2bZIxZj/wPgy6aTNtj5+3Vi9ISHgP3icJFrhjelwoi1LGg0y2+bZe0\nMSrvEu7PclZY21nm/ajdAZq+Tnauzx67Tq6l+lumwzorUsHnX1s8JRcgNYoc1wGl\n9Ke4G818HJDdixn3TEdi0m3tukK5Lc5P4j93fxsbs3xrLIKDaggLaaZMjs3XIhw=\n=p5ow\n-----END PGP SIGNATURE-----\n", "payload": "tree ab4f551c76fcbbc5110dfdb6350087cfd3f74c0b\nparent 606feba5bbfa61ef9562fd2f583833ed5c13ffdc\nparent aba85ff82077f80b6406cbaaf6a54afe6df98332\nauthor Yuki Okushi <jtitor@2k36.org> 1623207844 +0900\ncommitter GitHub <noreply@github.com> 1623207844 +0900\n\nRollup merge of #85982 - alexcrichton:doc-safe-wasm, r=jyn514\n\nEnable rustdoc to document safe wasm intrinsics\n\nThis commit fixes an issue not found during #84988 where rustdoc is used\nto document cross-platform intrinsics but it was requiring that\nfunctions which use `#[target_feature]` are `unsafe` erroneously, even\nif they're WebAssembly specific. Rustdoc today, for example, already has\na special case where it enables annotations like\n`#[target_feature(enable = \"simd128\")]` on platforms other than\nWebAssembly. The purpose of this commit is to relax the \"require all\n`#[target_feature]` functions are `unsafe`\" requirement for all targets\nwhenever rustdoc is running, enabling all targets to fully document\nother targets, such as WebAssembly, where intrinsics functions aren't\nalways `unsafe`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da1a4498ca8d431c494ddf16689428b09e56784a", "html_url": "https://github.com/rust-lang/rust/commit/da1a4498ca8d431c494ddf16689428b09e56784a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da1a4498ca8d431c494ddf16689428b09e56784a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/606feba5bbfa61ef9562fd2f583833ed5c13ffdc", "html_url": "https://github.com/rust-lang/rust/commit/606feba5bbfa61ef9562fd2f583833ed5c13ffdc"}, {"sha": "aba85ff82077f80b6406cbaaf6a54afe6df98332", "url": "https://api.github.com/repos/rust-lang/rust/commits/aba85ff82077f80b6406cbaaf6a54afe6df98332", "html_url": "https://github.com/rust-lang/rust/commit/aba85ff82077f80b6406cbaaf6a54afe6df98332"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "ee3ac3b62d9ec7ed5d56b03004ad24a21a634700", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da1a4498ca8d431c494ddf16689428b09e56784a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1a4498ca8d431c494ddf16689428b09e56784a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=da1a4498ca8d431c494ddf16689428b09e56784a", "patch": "@@ -2771,7 +2771,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             }\n         } else if tcx.sess.check_name(attr, sym::target_feature) {\n             if !tcx.is_closure(id) && tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n-                if tcx.sess.target.is_like_wasm {\n+                if tcx.sess.target.is_like_wasm || tcx.sess.opts.actually_rustdoc {\n                     // The `#[target_feature]` attribute is allowed on\n                     // WebAssembly targets on all functions, including safe\n                     // ones. Other targets require that `#[target_feature]` is\n@@ -2785,6 +2785,10 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     // deterministic trap. There is no undefined behavior when\n                     // executing WebAssembly so `#[target_feature]` is allowed\n                     // on safe functions (but again, only for WebAssembly)\n+                    //\n+                    // Note that this is also allowed if `actually_rustdoc` so\n+                    // if a target is documenting some wasm-specific code then\n+                    // it's not spuriously denied.\n                 } else if !tcx.features().target_feature_11 {\n                     let mut err = feature_err(\n                         &tcx.sess.parse_sess,"}, {"sha": "80b15ace0ee950d1b1df93246a5b7ccbcc6cc0c9", "filename": "src/test/rustdoc-ui/wasm-safe.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da1a4498ca8d431c494ddf16689428b09e56784a/src%2Ftest%2Frustdoc-ui%2Fwasm-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1a4498ca8d431c494ddf16689428b09e56784a/src%2Ftest%2Frustdoc-ui%2Fwasm-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fwasm-safe.rs?ref=da1a4498ca8d431c494ddf16689428b09e56784a", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+#![feature(wasm_target_feature)]\n+\n+#[cfg(any(target_arch = \"wasm32\", doc))]\n+#[target_feature(enable = \"simd128\")]\n+pub fn foo() {}"}]}