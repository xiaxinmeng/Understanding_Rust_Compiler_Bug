{"sha": "2561dcddf9e61f5c52a65f1a42641e01bfabe3e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NjFkY2RkZjllNjFmNWM1MmE2NWYxYTQyNjQxZTAxYmZhYmUzZTI=", "commit": {"author": {"name": "Jimmy Cuadra", "email": "jimmy@jimmycuadra.com", "date": "2017-03-05T21:00:32Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-15T14:51:54Z"}, "message": "Rename TryFrom's associated type and implement str::parse using TryFrom.\n\nPer discussion on the tracking issue, naming `TryFrom`'s associated type\n`Error` is generally more consistent with similar traits in the Rust\necosystem, and what people seem to assume it should be called. It\nalso helps disambiguate from `Result::Err`, the most common \"Err\".\n\nSee\nhttps://github.com/rust-lang/rust/issues/33417#issuecomment-269108968.\n\nTryFrom<&str> and FromStr are equivalent, so have the latter provide the\nformer to ensure that. Using TryFrom in the implementation of\n`str::parse` means types that implement either trait can use it.\nWhen we're ready to stabilize `TryFrom`, we should update `FromStr` to\nsuggest implementing `TryFrom<&str>` instead for new code.\n\nSee\nhttps://github.com/rust-lang/rust/issues/33417#issuecomment-277175994\nand\nhttps://github.com/rust-lang/rust/issues/33417#issuecomment-277253827.\n\nRefs #33417.", "tree": {"sha": "4ba073a756791be53de805080a0ce23a95257cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ba073a756791be53de805080a0ce23a95257cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2", "html_url": "https://github.com/rust-lang/rust/commit/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2/comments", "author": {"login": "jimmycuadra", "id": 122457, "node_id": "MDQ6VXNlcjEyMjQ1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/122457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimmycuadra", "html_url": "https://github.com/jimmycuadra", "followers_url": "https://api.github.com/users/jimmycuadra/followers", "following_url": "https://api.github.com/users/jimmycuadra/following{/other_user}", "gists_url": "https://api.github.com/users/jimmycuadra/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimmycuadra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimmycuadra/subscriptions", "organizations_url": "https://api.github.com/users/jimmycuadra/orgs", "repos_url": "https://api.github.com/users/jimmycuadra/repos", "events_url": "https://api.github.com/users/jimmycuadra/events{/privacy}", "received_events_url": "https://api.github.com/users/jimmycuadra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f10e2f63de720468e2b4bfcb275e4b90b1f9870", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f10e2f63de720468e2b4bfcb275e4b90b1f9870", "html_url": "https://github.com/rust-lang/rust/commit/6f10e2f63de720468e2b4bfcb275e4b90b1f9870"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "a582180838f40b48e405ff86bad3f9c3273ab080", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=2561dcddf9e61f5c52a65f1a42641e01bfabe3e2", "patch": "@@ -209,10 +209,10 @@ impl From<u8> for char {\n \n #[unstable(feature = \"try_from\", issue = \"33417\")]\n impl TryFrom<u32> for char {\n-    type Err = CharTryFromError;\n+    type Error = CharTryFromError;\n \n     #[inline]\n-    fn try_from(i: u32) -> Result<Self, Self::Err> {\n+    fn try_from(i: u32) -> Result<Self, Self::Error> {\n         if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n             Err(CharTryFromError(()))\n         } else {"}, {"sha": "a9ac9a7f7718465db4418097d7b3e397cc792e61", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=2561dcddf9e61f5c52a65f1a42641e01bfabe3e2", "patch": "@@ -48,6 +48,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use str::FromStr;\n+\n /// A cheap, reference-to-reference conversion.\n ///\n /// `AsRef` is very similar to, but different than, [`Borrow`]. See\n@@ -212,20 +214,20 @@ pub trait From<T>: Sized {\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n-    type Err;\n+    type Error;\n \n     /// Performs the conversion.\n-    fn try_into(self) -> Result<T, Self::Err>;\n+    fn try_into(self) -> Result<T, Self::Error>;\n }\n \n /// Attempt to construct `Self` via a conversion.\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n-    type Err;\n+    type Error;\n \n     /// Performs the conversion.\n-    fn try_from(value: T) -> Result<Self, Self::Err>;\n+    fn try_from(value: T) -> Result<Self, Self::Error>;\n }\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -290,9 +292,9 @@ impl<T> From<T> for T {\n // TryFrom implies TryInto\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n impl<T, U> TryInto<U> for T where U: TryFrom<T> {\n-    type Err = U::Err;\n+    type Error = U::Error;\n \n-    fn try_into(self) -> Result<U, U::Err> {\n+    fn try_into(self) -> Result<U, U::Error> {\n         U::try_from(self)\n     }\n }\n@@ -322,3 +324,13 @@ impl AsRef<str> for str {\n         self\n     }\n }\n+\n+// FromStr implies TryFrom<&str>\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n+impl<'a, T> TryFrom<&'a str> for T where T: FromStr {\n+    type Error = <T as FromStr>::Err;\n+\n+    fn try_from(s: &'a str) -> Result<T, Self::Error> {\n+        FromStr::from_str(s)\n+    }\n+}"}, {"sha": "8edf690e7b521fe2052f618140bec98d279d4a05", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2561dcddf9e61f5c52a65f1a42641e01bfabe3e2", "patch": "@@ -2591,7 +2591,7 @@ macro_rules! same_sign_try_from_int_impl {\n     ($storage:ty, $target:ty, $($source:ty),*) => {$(\n         #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n-            type Err = TryFromIntError;\n+            type Error = TryFromIntError;\n \n             fn try_from(u: $source) -> Result<$target, TryFromIntError> {\n                 let min = <$target as FromStrRadixHelper>::min_value() as $storage;\n@@ -2623,7 +2623,7 @@ macro_rules! cross_sign_from_int_impl {\n     ($unsigned:ty, $($signed:ty),*) => {$(\n         #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$unsigned> for $signed {\n-            type Err = TryFromIntError;\n+            type Error = TryFromIntError;\n \n             fn try_from(u: $unsigned) -> Result<$signed, TryFromIntError> {\n                 let max = <$signed as FromStrRadixHelper>::max_value() as u128;\n@@ -2637,7 +2637,7 @@ macro_rules! cross_sign_from_int_impl {\n \n         #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$signed> for $unsigned {\n-            type Err = TryFromIntError;\n+            type Error = TryFromIntError;\n \n             fn try_from(u: $signed) -> Result<$unsigned, TryFromIntError> {\n                 let max = <$unsigned as FromStrRadixHelper>::max_value() as u128;"}, {"sha": "9d48a8787079e862fbb0fd9ac017af317beef89b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2561dcddf9e61f5c52a65f1a42641e01bfabe3e2/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=2561dcddf9e61f5c52a65f1a42641e01bfabe3e2", "patch": "@@ -18,6 +18,7 @@ use self::pattern::Pattern;\n use self::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n \n use char;\n+use convert::TryFrom;\n use fmt;\n use iter::{Map, Cloned, FusedIterator};\n use mem;\n@@ -1746,7 +1747,7 @@ pub trait StrExt {\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_empty(&self) -> bool;\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n-    fn parse<T: FromStr>(&self) -> Result<T, T::Err>;\n+    fn parse<'a, T: TryFrom<&'a str>>(&'a self) -> Result<T, T::Error>;\n }\n \n // truncate `&str` to length at most equal to `max`\n@@ -2045,7 +2046,9 @@ impl StrExt for str {\n     fn is_empty(&self) -> bool { self.len() == 0 }\n \n     #[inline]\n-    fn parse<T: FromStr>(&self) -> Result<T, T::Err> { FromStr::from_str(self) }\n+    fn parse<'a, T>(&'a self) -> Result<T, T::Error> where T: TryFrom<&'a str> {\n+        T::try_from(self)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}