{"sha": "41f267063327c08f4d145dd6f68d87cc4b5202c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZjI2NzA2MzMyN2MwOGY0ZDE0NWRkNmY2OGQ4N2NjNGI1MjAyYzQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-15T02:05:07Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-15T02:21:09Z"}, "message": "librustc: discard side tables after translation, before llvm passes.", "tree": {"sha": "c8a07821b066fc26dc6caa3aa3445dc5bfd9613a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8a07821b066fc26dc6caa3aa3445dc5bfd9613a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41f267063327c08f4d145dd6f68d87cc4b5202c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41f267063327c08f4d145dd6f68d87cc4b5202c4", "html_url": "https://github.com/rust-lang/rust/commit/41f267063327c08f4d145dd6f68d87cc4b5202c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41f267063327c08f4d145dd6f68d87cc4b5202c4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872cb5ee8b58b6c5298e8ee8a4b1e3365ffb1f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/872cb5ee8b58b6c5298e8ee8a4b1e3365ffb1f22", "html_url": "https://github.com/rust-lang/rust/commit/872cb5ee8b58b6c5298e8ee8a4b1e3365ffb1f22"}], "stats": {"total": 92, "additions": 52, "deletions": 40}, "files": [{"sha": "120a11c0eba2651a3f4b71c6f0d54494a02a3831", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 52, "deletions": 40, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/41f267063327c08f4d145dd6f68d87cc4b5202c4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41f267063327c08f4d145dd6f68d87cc4b5202c4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=41f267063327c08f4d145dd6f68d87cc4b5202c4", "patch": "@@ -208,57 +208,69 @@ fn compile_upto(sess: Session, cfg: ast::crate_cfg,\n     let rp_set = time(time_passes, ~\"region parameterization inference\", ||\n         middle::region::determine_rp_in_crate(sess, ast_map, def_map, crate));\n \n-    let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars,\n-                            region_map, rp_set, move lang_items, crate);\n \n-    let (method_map, vtable_map) = time(time_passes, ~\"typechecking\", ||\n-                                        typeck::check_crate(ty_cx,\n-                                                            trait_map,\n-                                                            crate));\n-    // These next two const passes can probably be merged\n-    time(time_passes, ~\"const marking\", ||\n-        middle::const_eval::process_crate(crate, def_map, ty_cx));\n+    let outputs = outputs.get();\n \n-    time(time_passes, ~\"const checking\", ||\n-        middle::check_const::check_crate(sess, crate, ast_map, def_map,\n-                                         method_map, ty_cx));\n+    let (llmod, link_meta) = {\n \n-    if upto == cu_typeck { return {crate: crate, tcx: Some(ty_cx)}; }\n+        let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars,\n+                                region_map, rp_set, move lang_items, crate);\n \n-    time(time_passes, ~\"privacy checking\", ||\n-        middle::privacy::check_crate(ty_cx, &method_map, crate));\n+        let (method_map, vtable_map) =\n+            time(time_passes, ~\"typechecking\", ||\n+                 typeck::check_crate(ty_cx,\n+                                     trait_map,\n+                                     crate));\n \n-    time(time_passes, ~\"loop checking\", ||\n-        middle::check_loop::check_crate(ty_cx, crate));\n+        // These next two const passes can probably be merged\n+        time(time_passes, ~\"const marking\", ||\n+             middle::const_eval::process_crate(crate, def_map, ty_cx));\n \n-    time(time_passes, ~\"alt checking\", ||\n-        middle::check_alt::check_crate(ty_cx, crate));\n+        time(time_passes, ~\"const checking\", ||\n+             middle::check_const::check_crate(sess, crate, ast_map, def_map,\n+                                              method_map, ty_cx));\n \n-    let last_use_map = time(time_passes, ~\"liveness checking\", ||\n-        middle::liveness::check_crate(ty_cx, method_map, crate));\n+        if upto == cu_typeck { return {crate: crate, tcx: Some(ty_cx)}; }\n \n-    let (root_map, mutbl_map) = time(time_passes, ~\"borrow checking\", ||\n-        middle::borrowck::check_crate(ty_cx, method_map,\n-                                      last_use_map, crate));\n+        time(time_passes, ~\"privacy checking\", ||\n+             middle::privacy::check_crate(ty_cx, &method_map, crate));\n \n-    time(time_passes, ~\"kind checking\", ||\n-        kind::check_crate(ty_cx, method_map, last_use_map, crate));\n+        time(time_passes, ~\"loop checking\", ||\n+             middle::check_loop::check_crate(ty_cx, crate));\n \n-    time(time_passes, ~\"lint checking\", || lint::check_crate(ty_cx, crate));\n+        time(time_passes, ~\"alt checking\", ||\n+             middle::check_alt::check_crate(ty_cx, crate));\n \n-    if upto == cu_no_trans { return {crate: crate, tcx: Some(ty_cx)}; }\n-    let outputs = outputs.get();\n+        let last_use_map =\n+            time(time_passes, ~\"liveness checking\", ||\n+                 middle::liveness::check_crate(ty_cx, method_map, crate));\n+\n+        let (root_map, mutbl_map) =\n+            time(time_passes, ~\"borrow checking\", ||\n+                 middle::borrowck::check_crate(ty_cx, method_map,\n+                                               last_use_map, crate));\n+\n+        time(time_passes, ~\"kind checking\", ||\n+             kind::check_crate(ty_cx, method_map, last_use_map, crate));\n+\n+        time(time_passes, ~\"lint checking\", ||\n+             lint::check_crate(ty_cx, crate));\n \n-    let maps = {mutbl_map: mutbl_map,\n-                root_map: root_map,\n-                last_use_map: last_use_map,\n-                method_map: method_map,\n-                vtable_map: vtable_map};\n+        if upto == cu_no_trans { return {crate: crate, tcx: Some(ty_cx)}; }\n+\n+        let maps = {mutbl_map: mutbl_map,\n+                    root_map: root_map,\n+                    last_use_map: last_use_map,\n+                    method_map: method_map,\n+                    vtable_map: vtable_map};\n+\n+        time(time_passes, ~\"translation\", ||\n+             trans::base::trans_crate(sess, crate, ty_cx,\n+                                      &outputs.obj_filename,\n+                                      exp_map2, maps))\n+\n+    };\n \n-    let (llmod, link_meta) = time(time_passes, ~\"translation\", ||\n-        trans::base::trans_crate(sess, crate, ty_cx,\n-                                 &outputs.obj_filename,\n-                                 exp_map2, maps));\n \n     time(time_passes, ~\"LLVM passes\", ||\n         link::write::run_passes(sess, llmod,\n@@ -269,14 +281,14 @@ fn compile_upto(sess: Session, cfg: ast::crate_cfg,\n         (sess.opts.static && sess.building_library)    ||\n         sess.opts.jit;\n \n-    if stop_after_codegen { return {crate: crate, tcx: Some(ty_cx)}; }\n+    if stop_after_codegen { return {crate: crate, tcx: None}; }\n \n     time(time_passes, ~\"linking\", ||\n          link::link_binary(sess,\n                            &outputs.obj_filename,\n                            &outputs.out_filename, link_meta));\n \n-    return {crate: crate, tcx: Some(ty_cx)};\n+    return {crate: crate, tcx: None};\n }\n \n fn compile_input(sess: Session, cfg: ast::crate_cfg, input: input,"}]}