{"sha": "64513808cadb809e324084687d94aa763b36c925", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NTEzODA4Y2FkYjgwOWUzMjQwODQ2ODdkOTRhYTc2M2IzNmM5MjU=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-22T20:47:13Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-22T20:50:30Z"}, "message": "Use fast regalloc and codegen at OptLevel=0.", "tree": {"sha": "f0aeeae7e78902f2b58964cc1fed5968cb202a0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0aeeae7e78902f2b58964cc1fed5968cb202a0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64513808cadb809e324084687d94aa763b36c925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64513808cadb809e324084687d94aa763b36c925", "html_url": "https://github.com/rust-lang/rust/commit/64513808cadb809e324084687d94aa763b36c925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64513808cadb809e324084687d94aa763b36c925/comments", "author": null, "committer": null, "parents": [{"sha": "a6e188f8bf300f591e0b9de914bb655f171e9d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e188f8bf300f591e0b9de914bb655f171e9d66", "html_url": "https://github.com/rust-lang/rust/commit/a6e188f8bf300f591e0b9de914bb655f171e9d66"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "addcc7afb8ed2c6f47456d877ec575adae5e8ff2", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/64513808cadb809e324084687d94aa763b36c925/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64513808cadb809e324084687d94aa763b36c925/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=64513808cadb809e324084687d94aa763b36c925", "patch": "@@ -138,6 +138,30 @@ mod write {\n             let int LLVMAssemblyFile = 0;\n             let int LLVMObjectFile = 1;\n             let int LLVMNullFile = 2;\n+            let int LLVMOptNone = 0;        // -O0\n+            let int LLVMOptLess = 1;        // -O1\n+            let int LLVMOptDefault = 2;     // -O2, -Os\n+            let int LLVMOptAggressive = 3;  // -O3\n+\n+            auto CodeGenOptLevel;\n+            alt (opts.optimize) {\n+                case (0u) {\n+                     CodeGenOptLevel = LLVMOptNone;\n+                }\n+                case (1u) {\n+                     CodeGenOptLevel = LLVMOptLess;\n+                }\n+                case (2u) {\n+                     CodeGenOptLevel = LLVMOptDefault;\n+                }\n+                case (3u) {\n+                     CodeGenOptLevel = LLVMOptAggressive;\n+                }\n+                case (_) {\n+                     fail;\n+                }\n+            }\n+\n             auto FileType;\n             if (opts.output_type == output_type_object ||\n                     opts.output_type == output_type_exe) {\n@@ -159,7 +183,8 @@ mod write {\n                     llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n                                                   str::buf(triple),\n                                                   str::buf(output),\n-                                                  LLVMAssemblyFile);\n+                                                  LLVMAssemblyFile,\n+                                                  CodeGenOptLevel);\n                 }\n \n                 // Save the object file for -c or --save-temps alone\n@@ -170,7 +195,8 @@ mod write {\n                     llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n                                                   str::buf(triple),\n                                                   str::buf(output),\n-                                                  LLVMObjectFile);\n+                                                  LLVMObjectFile,\n+                                                  CodeGenOptLevel);\n                 }\n             } else {\n                 // If we aren't saving temps then just output the file\n@@ -179,7 +205,8 @@ mod write {\n                 auto triple = x86::get_target_triple();\n                 llvm::LLVMRustWriteOutputFile(pm.llpm, llmod,\n                                               str::buf(triple),\n-                                              str::buf(output), FileType);\n+                                              str::buf(output), FileType,\n+                                              CodeGenOptLevel);\n             }\n             // Clean up and return\n "}, {"sha": "460148ad1ee8d136b95bc1c0be835872e5e43f01", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64513808cadb809e324084687d94aa763b36c925/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64513808cadb809e324084687d94aa763b36c925/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=64513808cadb809e324084687d94aa763b36c925", "patch": "@@ -856,7 +856,7 @@ native mod llvm = \"rustllvm\" {\n     /* FIXME: The FileType is an enum.*/\n     fn LLVMRustWriteOutputFile(PassManagerRef PM, ModuleRef M,\n                                sbuf Triple, sbuf Output,\n-                               int FileType);\n+                               int FileType, int OptLevel);\n \n     /** Returns a string describing the last error caused by an LLVMRust*\n         call. */"}, {"sha": "110eb9a3bff6a995a3f6a47ef15a94bb1eb0e36d", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64513808cadb809e324084687d94aa763b36c925/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/64513808cadb809e324084687d94aa763b36c925/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=64513808cadb809e324084687d94aa763b36c925", "patch": "@@ -53,11 +53,6 @@ extern \"C\" void LLVMAddStandardModulePasses(LLVMPassManagerRef PM,\n int *RustHackToFetchPassesO = (int*)LLVMAddBasicAliasAnalysisPass;\n int *RustHackToFetchPasses2O = (int*)LLVMAddStandardModulePasses;\n \n-enum LLVMCodeGenFileType {\n-  LLVMAssemblyFile,\n-  LLVMObjectFile,\n-  LLVMNullFile         // Do not emit any output.\n-};\n \n extern \"C\" bool LLVMLinkModules(LLVMModuleRef Dest, LLVMModuleRef Src) {\n   static std::string err;\n@@ -77,7 +72,8 @@ extern \"C\" void LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n                                         LLVMModuleRef M,\n                                         const char *triple,\n                                         const char *path,\n-                                        LLVMCodeGenFileType FileType) {\n+                                        TargetMachine::CodeGenFileType FileType,\n+                                        CodeGenOpt::Level OptLevel) {\n \n   // Set compilation options.\n   llvm::NoFramePointerElim = true;\n@@ -91,16 +87,14 @@ extern \"C\" void LLVMRustWriteOutputFile(LLVMPassManagerRef PMR,\n   std::string FeaturesStr;\n   TargetMachine *Target = TheTarget->createTargetMachine(triple, FeaturesStr);\n   bool NoVerify = false;\n-  CodeGenOpt::Level OLvl = CodeGenOpt::Default;\n   PassManager *PM = unwrap<PassManager>(PMR);\n   std::string ErrorInfo;\n   raw_fd_ostream OS(path, ErrorInfo,\n                     raw_fd_ostream::F_Binary);\n   formatted_raw_ostream FOS(OS);\n-  TargetMachine::CodeGenFileType FileType2 =\n-    static_cast<TargetMachine::CodeGenFileType>(FileType);\n \n-  bool foo = Target->addPassesToEmitFile(*PM, FOS, FileType2, OLvl, NoVerify);\n+  bool foo = Target->addPassesToEmitFile(*PM, FOS, FileType, OptLevel,\n+                                         NoVerify);\n   assert(!foo);\n   (void)foo;\n   PM->run(*unwrap(M));"}]}