{"sha": "3190522294dac32db63b11b579f6b75a4f2f7d8e", "node_id": "C_kwDOAAsO6NoAKDMxOTA1MjIyOTRkYWMzMmRiNjNiMTFiNTc5ZjZiNzVhNGYyZjdkOGU", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-08-31T12:02:11Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-09-06T15:41:08Z"}, "message": "Address some comments", "tree": {"sha": "54e2dcdc298abf4bb314589433205d553171cb1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e2dcdc298abf4bb314589433205d553171cb1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3190522294dac32db63b11b579f6b75a4f2f7d8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmMXahQACgkQspeR1Nh4\n40X4cQ/+Ilpjfz2bPYEmllY3wf5ufec2oclrqdj8i/d3/6PlrITkZSRcHywTR/AZ\nvxEiCgpZ8UV6iTj2PD4X+mD354AfBbTxz+ZxvCton57Yd/9iz9FrT+VGIGAeWoxP\nb/mxJoXf13F6sU4ut/QmmezHysUpgDgyP5+y71rQb1tHabyyFIqxh4m86Ye2HYWT\nzcKah3ooc6rMNte9xoNx7PLeo7tIHv4nN4VC3vro+rX7uRpRKZ86BEzD5X+pHL8U\nOEbEHtTmExCGhGxnHqpXxlpBNY8np3f4bEx72ZfnIJIsVuLocbuO7Ducx3q92Vaj\nAfQ+/smZ43XUYVvkPDf96KnxxJfEajFaq8/Nl0YYoBBtX+xn5LJL1qoVAhXkhZqR\nY8Puo0T2XQFvs7u+UpuFkDKd5npyCv/IxSNLp3mhho1AzdgWA3UG8iv+c3SDIhz2\n8NXKEi6nO8NIXhu0XAJcBOKwYkLoCtzsw8p7mNrK5HZH+sUbHWBEnxIuFJQCyvX7\nWBuUfFCZuer8T6j6ba+AJY4DPl6jBo5haz+58yT7/xKchbJu98faEx12ip/UJ5I1\n6C92R7CTrVmIFr5+QlMXqpaVPmlC18WuX96mtZWikxbal0UikPBSMSv/16gDc1ZH\nAS6QNKxmu5FTrCJcpQPdmenr4WpotOvYjuMOL6+zbtmvpodg2y0=\n=LD9q\n-----END PGP SIGNATURE-----", "payload": "tree 54e2dcdc298abf4bb314589433205d553171cb1b\nparent e0e9b21c78e4e6a7a5515944ace4cb0c1f2f9253\nauthor Nikita Tomashevich <quant3234@gmail.com> 1661947331 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1662478868 +0300\n\nAddress some comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3190522294dac32db63b11b579f6b75a4f2f7d8e", "html_url": "https://github.com/rust-lang/rust/commit/3190522294dac32db63b11b579f6b75a4f2f7d8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3190522294dac32db63b11b579f6b75a4f2f7d8e/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e9b21c78e4e6a7a5515944ace4cb0c1f2f9253", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e9b21c78e4e6a7a5515944ace4cb0c1f2f9253", "html_url": "https://github.com/rust-lang/rust/commit/e0e9b21c78e4e6a7a5515944ace4cb0c1f2f9253"}], "stats": {"total": 134, "additions": 61, "deletions": 73}, "files": [{"sha": "e191147cdfe4eeb3136095cf24f864345930b349", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 51, "deletions": 62, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/3190522294dac32db63b11b579f6b75a4f2f7d8e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3190522294dac32db63b11b579f6b75a4f2f7d8e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=3190522294dac32db63b11b579f6b75a4f2f7d8e", "patch": "@@ -1,6 +1,6 @@\n use hir::GenericParamKind;\n use rustc_errors::{\n-    fluent, AddSubdiagnostic, Applicability, DiagnosticMessage, DiagnosticStyledString,\n+    fluent, AddSubdiagnostic, Applicability, DiagnosticMessage, DiagnosticStyledString, MultiSpan,\n };\n use rustc_hir as hir;\n use rustc_hir::{FnRetTy, Ty};\n@@ -273,8 +273,8 @@ pub enum LifetimeMismatchLabels {\n         ty_sup: Span,\n         ty_sub: Span,\n         span: Span,\n-        label_var1: Option<Ident>,\n-        label_var2: Option<Ident>,\n+        sup: Option<Ident>,\n+        sub: Option<Ident>,\n     },\n }\n \n@@ -293,8 +293,8 @@ impl AddSubdiagnostic for LifetimeMismatchLabels {\n                 ty_sup,\n                 ty_sub,\n                 span,\n-                label_var1,\n-                label_var2,\n+                sup: label_var1,\n+                sub: label_var2,\n             } => {\n                 if hir_equal {\n                     diag.span_label(ty_sup, fluent::infer::declared_multiple);\n@@ -422,68 +422,57 @@ pub struct LifetimeMismatch<'a> {\n     pub suggestion: AddLifetimeParamsSuggestion<'a>,\n }\n \n-pub mod mismatched_static_lifetime {\n-    use rustc_errors::{self, fluent, AddSubdiagnostic, MultiSpan};\n-    use rustc_span::Span;\n-\n-    use super::note_and_explain;\n-\n-    pub struct LabeledMultiSpan {\n-        pub multi_span: MultiSpan,\n-        pub binding_span: Span,\n-    }\n-\n-    impl AddSubdiagnostic for LabeledMultiSpan {\n-        fn add_to_diagnostic(mut self, diag: &mut rustc_errors::Diagnostic) {\n-            self.multi_span\n-                .push_span_label(self.binding_span, fluent::infer::msl_introduces_static);\n-            diag.span_note(self.multi_span, fluent::infer::msl_unmet_req);\n-        }\n-    }\n+pub struct IntroducesStaticBecauseUnmetLifetimeReq {\n+    pub unmet_requirements: MultiSpan,\n+    pub binding_span: Span,\n+}\n \n-    pub struct ImplNote {\n-        pub impl_span: Option<Span>,\n+impl AddSubdiagnostic for IntroducesStaticBecauseUnmetLifetimeReq {\n+    fn add_to_diagnostic(mut self, diag: &mut rustc_errors::Diagnostic) {\n+        self.unmet_requirements\n+            .push_span_label(self.binding_span, fluent::infer::msl_introduces_static);\n+        diag.span_note(self.unmet_requirements, fluent::infer::msl_unmet_req);\n     }\n+}\n \n-    impl AddSubdiagnostic for ImplNote {\n-        fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n-            match self.impl_span {\n-                Some(span) => diag.span_note(span, fluent::infer::msl_impl_note),\n-                None => diag.note(fluent::infer::msl_impl_note),\n-            };\n-        }\n-    }\n+pub struct ImplNote {\n+    pub impl_span: Option<Span>,\n+}\n \n-    #[derive(SessionSubdiagnostic)]\n-    pub enum TraitSubdiag {\n-        #[note(infer::msl_trait_note)]\n-        Note {\n-            #[primary_span]\n-            span: Span,\n-        },\n-        #[suggestion_verbose(\n-            infer::msl_trait_sugg,\n-            code = \" + '_\",\n-            applicability = \"maybe-incorrect\"\n-        )]\n-        Sugg {\n-            #[primary_span]\n-            span: Span,\n-        },\n+impl AddSubdiagnostic for ImplNote {\n+    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+        match self.impl_span {\n+            Some(span) => diag.span_note(span, fluent::infer::msl_impl_note),\n+            None => diag.note(fluent::infer::msl_impl_note),\n+        };\n     }\n+}\n \n-    #[derive(SessionDiagnostic)]\n-    #[diag(infer::mismatched_static_lifetime)]\n-    pub struct MismatchedStaticLifetime<'a> {\n+#[derive(SessionSubdiagnostic)]\n+pub enum TraitSubdiag {\n+    #[note(infer::msl_trait_note)]\n+    Note {\n         #[primary_span]\n-        pub cause_span: Span,\n-        #[subdiagnostic]\n-        pub multispan_subdiag: LabeledMultiSpan,\n-        #[subdiagnostic]\n-        pub expl: Option<note_and_explain::RegionExplanation<'a>>,\n-        #[subdiagnostic]\n-        pub impl_note: ImplNote,\n-        #[subdiagnostic]\n-        pub trait_subdiags: Vec<TraitSubdiag>,\n-    }\n+        span: Span,\n+    },\n+    #[suggestion_verbose(infer::msl_trait_sugg, code = \" + '_\", applicability = \"maybe-incorrect\")]\n+    Sugg {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(infer::mismatched_static_lifetime)]\n+pub struct MismatchedStaticLifetime<'a> {\n+    #[primary_span]\n+    pub cause_span: Span,\n+    #[subdiagnostic]\n+    pub unmet_lifetime_reqs: IntroducesStaticBecauseUnmetLifetimeReq,\n+    #[subdiagnostic]\n+    pub expl: Option<note_and_explain::RegionExplanation<'a>>,\n+    #[subdiagnostic]\n+    pub impl_note: ImplNote,\n+    #[subdiagnostic]\n+    pub trait_subdiags: Vec<TraitSubdiag>,\n }"}, {"sha": "c9df277c744c0cd9c4e58fe4c977fc67a472975a", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3190522294dac32db63b11b579f6b75a4f2f7d8e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3190522294dac32db63b11b579f6b75a4f2f7d8e/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=3190522294dac32db63b11b579f6b75a4f2f7d8e", "patch": "@@ -91,7 +91,7 @@ impl<'a> DescriptionCtx<'a> {\n                                 me.kind = \"as_defined_anon\";\n                             } else {\n                                 me.kind = \"as_defined\";\n-                    me.arg = name.to_string();\n+                                me.arg = name.to_string();\n                             };\n                             me.span = Some(sp);\n                         }"}, {"sha": "3a4320a9a8f1d23f3d8874cf5fc8ba5d36e34303", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3190522294dac32db63b11b579f6b75a4f2f7d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3190522294dac32db63b11b579f6b75a4f2f7d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=3190522294dac32db63b11b579f6b75a4f2f7d8e", "patch": "@@ -122,8 +122,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 ty_sup: ty_sup.span,\n                 ty_sub: ty_sub.span,\n                 span,\n-                label_var1: anon_param_sup.pat.simple_ident(),\n-                label_var2: anon_param_sub.pat.simple_ident(),\n+                sup: anon_param_sup.pat.simple_ident(),\n+                sub: anon_param_sub.pat.simple_ident(),\n             },\n         };\n "}, {"sha": "1410e2b63b0b87fbfa433ba727a410780b1354de", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3190522294dac32db63b11b579f6b75a4f2f7d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3190522294dac32db63b11b579f6b75a4f2f7d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=3190522294dac32db63b11b579f6b75a4f2f7d8e", "patch": "@@ -1,8 +1,8 @@\n //! Error Reporting for when the lifetime for a type doesn't match the `impl` selected for a predicate\n //! to hold.\n \n-use crate::errors::mismatched_static_lifetime::{ImplNote, MismatchedStaticLifetime, TraitSubdiag};\n-use crate::errors::{mismatched_static_lifetime::LabeledMultiSpan, note_and_explain};\n+use crate::errors::{note_and_explain, IntroducesStaticBecauseUnmetLifetimeReq};\n+use crate::errors::{ImplNote, MismatchedStaticLifetime, TraitSubdiag};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n@@ -43,7 +43,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n         // FIXME: we should point at the lifetime\n         let multi_span: MultiSpan = vec![binding_span].into();\n-        let multispan_subdiag = LabeledMultiSpan { multi_span, binding_span };\n+        let multispan_subdiag = IntroducesStaticBecauseUnmetLifetimeReq {\n+            unmet_requirements: multi_span,\n+            binding_span,\n+        };\n \n         let expl = note_and_explain::RegionExplanation::new(\n             self.tcx(),\n@@ -100,7 +103,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n         let err = MismatchedStaticLifetime {\n             cause_span: cause.span,\n-            multispan_subdiag,\n+            unmet_lifetime_reqs: multispan_subdiag,\n             expl,\n             impl_note: ImplNote { impl_span },\n             trait_subdiags,"}, {"sha": "931ebca7d014524a579c16c78355a2c0e0c74c03", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3190522294dac32db63b11b579f6b75a4f2f7d8e/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3190522294dac32db63b11b579f6b75a4f2f7d8e/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=3190522294dac32db63b11b579f6b75a4f2f7d8e", "patch": "@@ -36,9 +36,5 @@ extern crate tracing;\n extern crate rustc_middle;\n \n mod errors;\n-pub mod public_errors {\n-    // Probably would be useful in rustc_borrowck\n-    pub use super::errors::AddLifetimeParamsSuggestion;\n-}\n pub mod infer;\n pub mod traits;"}]}