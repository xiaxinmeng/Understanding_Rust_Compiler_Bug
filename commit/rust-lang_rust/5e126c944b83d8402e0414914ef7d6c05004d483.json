{"sha": "5e126c944b83d8402e0414914ef7d6c05004d483", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMTI2Yzk0NGI4M2Q4NDAyZTA0MTQ5MTRlZjdkNmMwNTAwNGQ0ODM=", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2020-09-01T22:53:04Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2020-09-11T22:02:15Z"}, "message": "better diag when const ranges are used in patterns", "tree": {"sha": "1e6f38ac090c7a30ba38c187a7cda7ad4f389358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e6f38ac090c7a30ba38c187a7cda7ad4f389358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e126c944b83d8402e0414914ef7d6c05004d483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e126c944b83d8402e0414914ef7d6c05004d483", "html_url": "https://github.com/rust-lang/rust/commit/5e126c944b83d8402e0414914ef7d6c05004d483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e126c944b83d8402e0414914ef7d6c05004d483/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "141bb23be863f8bfe25ccac102c6e7b96b61d417", "url": "https://api.github.com/repos/rust-lang/rust/commits/141bb23be863f8bfe25ccac102c6e7b96b61d417", "html_url": "https://github.com/rust-lang/rust/commit/141bb23be863f8bfe25ccac102c6e7b96b61d417"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "171d5ee4ff206bc838f0c01e07cd1ac7a4268863", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5e126c944b83d8402e0414914ef7d6c05004d483/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e126c944b83d8402e0414914ef7d6c05004d483/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=5e126c944b83d8402e0414914ef7d6c05004d483", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{HirId, Pat, PatKind};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::subst::GenericArg;\n-use rustc_middle::ty::{self, BindingMode, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Adt, BindingMode, Ty, TypeFoldable};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Ident;\n@@ -735,7 +735,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let Some(err) =\n             self.demand_suptype_with_origin(&self.pattern_cause(ti, pat.span), expected, pat_ty)\n         {\n-            self.emit_bad_pat_path(err, pat.span, res, pat_res, segments, ti.parent_pat);\n+            self.emit_bad_pat_path(err, pat.span, res, pat_res, pat_ty, segments, ti.parent_pat);\n         }\n         pat_ty\n     }\n@@ -746,6 +746,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat_span: Span,\n         res: Res,\n         pat_res: Res,\n+        pat_ty: Ty<'tcx>,\n         segments: &'b [hir::PathSegment<'b>],\n         parent_pat: Option<&Pat<'_>>,\n     ) {\n@@ -771,9 +772,37 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         );\n                     }\n                     _ => {\n-                        let msg = \"introduce a new binding instead\";\n-                        let sugg = format!(\"other_{}\", ident.as_str().to_lowercase());\n-                        e.span_suggestion(ident.span, msg, sugg, Applicability::HasPlaceholders);\n+                        let const_def_id = match pat_ty.kind() {\n+                            Adt(def, _) => match res {\n+                                Res::Def(DefKind::Const, _) => Some(def.did),\n+                                _ => None,\n+                            },\n+                            _ => None,\n+                        };\n+\n+                        let ranges = &[\n+                            self.tcx.lang_items().range_struct(),\n+                            self.tcx.lang_items().range_from_struct(),\n+                            self.tcx.lang_items().range_to_struct(),\n+                            self.tcx.lang_items().range_full_struct(),\n+                            self.tcx.lang_items().range_inclusive_struct(),\n+                            self.tcx.lang_items().range_to_inclusive_struct(),\n+                        ];\n+                        if const_def_id != None && ranges.contains(&const_def_id) {\n+                            let msg = \"constants only support matching by type, \\\n+                                if you meant to match against a range of values, \\\n+                                consider using a range pattern like `min ..= max` in the match block\";\n+                            e.note(msg);\n+                        } else {\n+                            let msg = \"introduce a new binding instead\";\n+                            let sugg = format!(\"other_{}\", ident.as_str().to_lowercase());\n+                            e.span_suggestion(\n+                                ident.span,\n+                                msg,\n+                                sugg,\n+                                Applicability::HasPlaceholders,\n+                            );\n+                        }\n                     }\n                 };\n             }"}, {"sha": "bc327123c6fe92192500064c74effcc3aa7bcc67", "filename": "src/test/ui/issues/issue-76191.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e126c944b83d8402e0414914ef7d6c05004d483/src%2Ftest%2Fui%2Fissues%2Fissue-76191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e126c944b83d8402e0414914ef7d6c05004d483/src%2Ftest%2Fui%2Fissues%2Fissue-76191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76191.rs?ref=5e126c944b83d8402e0414914ef7d6c05004d483", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for diagnostic issue #76191\n+#![allow(non_snake_case)]\n+\n+use std::ops::RangeInclusive;\n+const RANGE: RangeInclusive<i32> = 0..=255;\n+\n+fn main() {\n+    let n: i32 = 1;\n+    match n {\n+        RANGE => {}\n+        //~^ ERROR mismatched types\n+        _ => {}\n+    }\n+}"}, {"sha": "a5544d9e9da405be0f4b6af4a3851bb41e773834", "filename": "src/test/ui/issues/issue-76191.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5e126c944b83d8402e0414914ef7d6c05004d483/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e126c944b83d8402e0414914ef7d6c05004d483/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76191.stderr?ref=5e126c944b83d8402e0414914ef7d6c05004d483", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-76191.rs:10:9\n+   |\n+LL | const RANGE: RangeInclusive<i32> = 0..=255;\n+   | ------------------------------------------- constant defined here\n+...\n+LL |     match n {\n+   |           - this expression has type `i32`\n+LL |         RANGE => {}\n+   |         ^^^^^\n+   |         |\n+   |         expected `i32`, found struct `RangeInclusive`\n+   |         `RANGE` is interpreted as a constant, not a new binding\n+   |\n+   = note: expected type `i32`\n+            found struct `RangeInclusive<i32>`\n+   = note: constants only support matching by type, if you meant to match against a range of values, consider using a range pattern like `min ..= max` in the match block\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}