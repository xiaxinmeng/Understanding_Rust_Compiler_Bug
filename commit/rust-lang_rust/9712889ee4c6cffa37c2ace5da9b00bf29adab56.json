{"sha": "9712889ee4c6cffa37c2ace5da9b00bf29adab56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MTI4ODllZTRjNmNmZmEzN2MyYWNlNWRhOWIwMGJmMjlhZGFiNTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-30T14:23:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-30T14:23:18Z"}, "message": "Merge #2453\n\n2453: Handle various cycles r=matklad a=flodiebold\n\n - handle `impl Trait<Self> for SomeType`, which is allowed. This necessitated splitting the `impl_ty` query, but I think the result actually makes a lot of code nicer. This should fix #2446.\r\n - add recovery for `impl Trait for SomeType<Self>`\r\n - add recovery for `type Type = Foo<Type>`\r\n - add recovery for cycles in generic param env\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "0471718f620bfdcb207387f6ae58bdfa5ca47e4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0471718f620bfdcb207387f6ae58bdfa5ca47e4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9712889ee4c6cffa37c2ace5da9b00bf29adab56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4ntWCRBK7hj4Ov3rIwAAdHIIAFA9bG0yhjDbZvKaK9PKlw0N\nbY1qb1E3jNK4nznGJIh9og+VOVA3jVEyaQVNm+ecZyjaFAu8nuOTgf15ijZFJRqh\nNEtbxY0TYmdKKOQsVMUJXyt6kbUyk3Txi8d0q3+LDUfB28dx9gYe02CV5xt8Dw69\nhI93nFQviY9PoD6mX7LjgCENihD4MwesbZF+FLX7FY4No8hS9TBjxDluqDpkKVme\ndBwyrVjTouV13w53qPqHKkuaXCUzdbmxrGf5U0mThg5mpsiTWdW40XIw3X6BtM1X\nuyoI/QpOEXXsjR/7OVTzo7hW7Ma1oDdgd7dRcak0drpNiISPuvu/9rl2oFtIEKA=\n=FiJP\n-----END PGP SIGNATURE-----\n", "payload": "tree 0471718f620bfdcb207387f6ae58bdfa5ca47e4e\nparent 7cecd0f331419439417f98d92b839c9aaa06ed86\nparent 1c622e9fed97de7711da7b5bffec0fa4b19d7500\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1575123798 +0000\ncommitter GitHub <noreply@github.com> 1575123798 +0000\n\nMerge #2453\n\n2453: Handle various cycles r=matklad a=flodiebold\n\n - handle `impl Trait<Self> for SomeType`, which is allowed. This necessitated splitting the `impl_ty` query, but I think the result actually makes a lot of code nicer. This should fix #2446.\r\n - add recovery for `impl Trait for SomeType<Self>`\r\n - add recovery for `type Type = Foo<Type>`\r\n - add recovery for cycles in generic param env\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9712889ee4c6cffa37c2ace5da9b00bf29adab56", "html_url": "https://github.com/rust-lang/rust/commit/9712889ee4c6cffa37c2ace5da9b00bf29adab56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9712889ee4c6cffa37c2ace5da9b00bf29adab56/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cecd0f331419439417f98d92b839c9aaa06ed86", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cecd0f331419439417f98d92b839c9aaa06ed86", "html_url": "https://github.com/rust-lang/rust/commit/7cecd0f331419439417f98d92b839c9aaa06ed86"}, {"sha": "1c622e9fed97de7711da7b5bffec0fa4b19d7500", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c622e9fed97de7711da7b5bffec0fa4b19d7500", "html_url": "https://github.com/rust-lang/rust/commit/1c622e9fed97de7711da7b5bffec0fa4b19d7500"}], "stats": {"total": 165, "additions": 102, "deletions": 63}, "files": [{"sha": "222a36a9f89d9afa51d42fcfb6cfe3f88e5c2c43", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=9712889ee4c6cffa37c2ace5da9b00bf29adab56", "patch": "@@ -11,7 +11,7 @@ use ra_db::{salsa, CrateId};\n use crate::{\n     method_resolution::CrateImplBlocks,\n     traits::{AssocTyValue, Impl},\n-    CallableDef, FnSig, GenericPredicate, ImplTy, InferenceResult, Substs, Ty, TyDefId, TypeCtor,\n+    CallableDef, FnSig, GenericPredicate, InferenceResult, Substs, TraitRef, Ty, TyDefId, TypeCtor,\n     ValueTyDefId,\n };\n \n@@ -22,13 +22,18 @@ pub trait HirDatabase: DefDatabase {\n     fn infer(&self, def: DefWithBodyId) -> Arc<InferenceResult>;\n \n     #[salsa::invoke(crate::lower::ty_query)]\n+    #[salsa::cycle(crate::lower::ty_recover)]\n     fn ty(&self, def: TyDefId) -> Ty;\n \n     #[salsa::invoke(crate::lower::value_ty_query)]\n     fn value_ty(&self, def: ValueTyDefId) -> Ty;\n \n-    #[salsa::invoke(crate::lower::impl_ty_query)]\n-    fn impl_ty(&self, def: ImplId) -> ImplTy;\n+    #[salsa::invoke(crate::lower::impl_self_ty_query)]\n+    #[salsa::cycle(crate::lower::impl_self_ty_recover)]\n+    fn impl_self_ty(&self, def: ImplId) -> Ty;\n+\n+    #[salsa::invoke(crate::lower::impl_trait_query)]\n+    fn impl_trait(&self, def: ImplId) -> Option<TraitRef>;\n \n     #[salsa::invoke(crate::lower::field_types_query)]\n     fn field_types(&self, var: VariantId) -> Arc<ArenaMap<LocalStructFieldId, Ty>>;\n@@ -37,6 +42,7 @@ pub trait HirDatabase: DefDatabase {\n     fn callable_item_signature(&self, def: CallableDef) -> FnSig;\n \n     #[salsa::invoke(crate::lower::generic_predicates_for_param_query)]\n+    #[salsa::cycle(crate::lower::generic_predicates_for_param_recover)]\n     fn generic_predicates_for_param(\n         &self,\n         def: GenericDefId,"}, {"sha": "064993d34fac0e47877ce91d681e53e4d0c53332", "filename": "crates/ra_hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=9712889ee4c6cffa37c2ace5da9b00bf29adab56", "patch": "@@ -8,7 +8,7 @@ use hir_def::{lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutabilit\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n-use crate::{autoderef, db::HirDatabase, ImplTy, Substs, Ty, TypeCtor, TypeWalk};\n+use crate::{autoderef, db::HirDatabase, Substs, Ty, TypeCtor, TypeWalk};\n \n use super::{InEnvironment, InferTy, InferenceContext, TypeVarValue};\n \n@@ -54,10 +54,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         impls\n             .iter()\n             .filter_map(|&impl_id| {\n-                let trait_ref = match db.impl_ty(impl_id) {\n-                    ImplTy::TraitRef(it) => it,\n-                    ImplTy::Inherent(_) => return None,\n-                };\n+                let trait_ref = db.impl_trait(impl_id)?;\n \n                 // `CoerseUnsized` has one generic parameter for the target type.\n                 let cur_from_ty = trait_ref.substs.0.get(0)?;"}, {"sha": "bbf146418e14fdf6ff7ae78eaefa2e2d4469773e", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=9712889ee4c6cffa37c2ace5da9b00bf29adab56", "patch": "@@ -244,7 +244,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 ContainerId::ImplId(it) => it,\n                 _ => return None,\n             };\n-            let self_ty = self.db.impl_ty(impl_id).self_type().clone();\n+            let self_ty = self.db.impl_self_ty(impl_id).clone();\n             let self_ty_substs = self_ty.substs()?;\n             let actual_substs = actual_def_ty.substs()?;\n "}, {"sha": "3c1f738dfc43c75cd207ce79b2cd513f2575c200", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=9712889ee4c6cffa37c2ace5da9b00bf29adab56", "patch": "@@ -486,21 +486,6 @@ impl TypeWalk for TraitRef {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Debug)]\n-pub enum ImplTy {\n-    Inherent(Ty),\n-    TraitRef(TraitRef),\n-}\n-\n-impl ImplTy {\n-    pub(crate) fn self_type(&self) -> &Ty {\n-        match self {\n-            ImplTy::Inherent(it) => it,\n-            ImplTy::TraitRef(tr) => &tr.substs[0],\n-        }\n-    }\n-}\n-\n /// Like `generics::WherePredicate`, but with resolved types: A condition on the\n /// parameters of a generic item.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "32569ac66f6c5416ef0a6b51b9cdb3b118dcb67d", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=9712889ee4c6cffa37c2ace5da9b00bf29adab56", "patch": "@@ -27,8 +27,8 @@ use crate::{\n         all_super_traits, associated_type_by_name_including_super_traits, make_mut_slice,\n         variant_data,\n     },\n-    FnSig, GenericPredicate, ImplTy, ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment,\n-    TraitRef, Ty, TypeCtor, TypeWalk,\n+    FnSig, GenericPredicate, ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment, TraitRef,\n+    Ty, TypeCtor, TypeWalk,\n };\n \n impl Ty {\n@@ -179,7 +179,7 @@ impl Ty {\n                 let name = resolved_segment.name.clone();\n                 Ty::Param { idx, name }\n             }\n-            TypeNs::SelfType(impl_id) => db.impl_ty(impl_id).self_type().clone(),\n+            TypeNs::SelfType(impl_id) => db.impl_self_ty(impl_id).clone(),\n             TypeNs::AdtSelfType(adt) => db.ty(adt.into()),\n \n             TypeNs::AdtId(it) => Ty::from_hir_path_inner(db, resolver, resolved_segment, it.into()),\n@@ -532,6 +532,15 @@ pub(crate) fn generic_predicates_for_param_query(\n         .collect()\n }\n \n+pub(crate) fn generic_predicates_for_param_recover(\n+    _db: &impl HirDatabase,\n+    _cycle: &[String],\n+    _def: &GenericDefId,\n+    _param_idx: &u32,\n+) -> Arc<[GenericPredicate]> {\n+    Arc::new([])\n+}\n+\n impl TraitEnvironment {\n     pub fn lower(db: &impl HirDatabase, resolver: &Resolver) -> Arc<TraitEnvironment> {\n         let predicates = resolver\n@@ -733,6 +742,11 @@ pub(crate) fn ty_query(db: &impl HirDatabase, def: TyDefId) -> Ty {\n         TyDefId::TypeAliasId(it) => type_for_type_alias(db, it),\n     }\n }\n+\n+pub(crate) fn ty_recover(_db: &impl HirDatabase, _cycle: &[String], _def: &TyDefId) -> Ty {\n+    Ty::Unknown\n+}\n+\n pub(crate) fn value_ty_query(db: &impl HirDatabase, def: ValueTyDefId) -> Ty {\n     match def {\n         ValueTyDefId::FunctionId(it) => type_for_fn(db, it),\n@@ -743,17 +757,24 @@ pub(crate) fn value_ty_query(db: &impl HirDatabase, def: ValueTyDefId) -> Ty {\n     }\n }\n \n-pub(crate) fn impl_ty_query(db: &impl HirDatabase, impl_id: ImplId) -> ImplTy {\n+pub(crate) fn impl_self_ty_query(db: &impl HirDatabase, impl_id: ImplId) -> Ty {\n     let impl_data = db.impl_data(impl_id);\n     let resolver = impl_id.resolver(db);\n-    let self_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n-    match impl_data.target_trait.as_ref() {\n-        Some(trait_ref) => {\n-            match TraitRef::from_hir(db, &resolver, trait_ref, Some(self_ty.clone())) {\n-                Some(it) => ImplTy::TraitRef(it),\n-                None => ImplTy::Inherent(self_ty),\n-            }\n-        }\n-        None => ImplTy::Inherent(self_ty),\n-    }\n+    Ty::from_hir(db, &resolver, &impl_data.target_type)\n+}\n+\n+pub(crate) fn impl_self_ty_recover(\n+    _db: &impl HirDatabase,\n+    _cycle: &[String],\n+    _impl_id: &ImplId,\n+) -> Ty {\n+    Ty::Unknown\n+}\n+\n+pub(crate) fn impl_trait_query(db: &impl HirDatabase, impl_id: ImplId) -> Option<TraitRef> {\n+    let impl_data = db.impl_data(impl_id);\n+    let resolver = impl_id.resolver(db);\n+    let self_ty = db.impl_self_ty(impl_id);\n+    let target_trait = impl_data.target_trait.as_ref()?;\n+    TraitRef::from_hir(db, &resolver, target_trait, Some(self_ty.clone()))\n }"}, {"sha": "2bded3dbdc028719433ee7219fccf2067590c522", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=9712889ee4c6cffa37c2ace5da9b00bf29adab56", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     db::HirDatabase,\n     primitive::{FloatBitness, Uncertain},\n     utils::all_super_traits,\n-    Canonical, ImplTy, InEnvironment, TraitEnvironment, TraitRef, Ty, TypeCtor,\n+    Canonical, InEnvironment, TraitEnvironment, TraitRef, Ty, TypeCtor,\n };\n \n /// This is used as a key for indexing impls.\n@@ -58,11 +58,12 @@ impl CrateImplBlocks {\n         let crate_def_map = db.crate_def_map(krate);\n         for (_module_id, module_data) in crate_def_map.modules.iter() {\n             for &impl_id in module_data.impls.iter() {\n-                match db.impl_ty(impl_id) {\n-                    ImplTy::TraitRef(tr) => {\n+                match db.impl_trait(impl_id) {\n+                    Some(tr) => {\n                         res.impls_by_trait.entry(tr.trait_).or_default().push(impl_id);\n                     }\n-                    ImplTy::Inherent(self_ty) => {\n+                    None => {\n+                        let self_ty = db.impl_self_ty(impl_id);\n                         if let Some(self_ty_fp) = TyFingerprint::for_impl(&self_ty) {\n                             res.impls.entry(self_ty_fp).or_default().push(impl_id);\n                         }"}, {"sha": "c856d6afdbe58d77e43b1b5a597046a00bebad78", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=9712889ee4c6cffa37c2ace5da9b00bf29adab56", "patch": "@@ -2154,7 +2154,6 @@ fn test(x: Foo, y: Bar<&str>, z: Baz<i8, u8>) {\n }\n \n #[test]\n-#[should_panic] // we currently can't handle this\n fn recursive_type_alias() {\n     assert_snapshot!(\n         infer(r#\"\n@@ -2163,7 +2162,10 @@ type Foo = Foo;\n type Bar = A<Bar>;\n fn test(x: Foo) {}\n \"#),\n-        @\"\"\n+        @r###\"\n+    [59; 60) 'x': {unknown}\n+    [67; 69) '{}': ()\n+    \"###\n     )\n }\n \n@@ -4676,10 +4678,48 @@ fn test<T, U>() where T::Item: Trait2, T: Trait<U::Item>, U: Trait<()> {\n }\n \n #[test]\n-// FIXME this is currently a Salsa panic; it would be nicer if it just returned\n-// in Unknown, and we should be able to do that once Salsa allows us to handle\n-// the cycle. But at least it doesn't overflow for now.\n-#[should_panic]\n+fn trait_impl_self_ty() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Trait<T> {\n+   fn foo(&self);\n+}\n+\n+struct S;\n+\n+impl Trait<Self> for S {}\n+\n+fn test() {\n+    S.foo()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"()\");\n+}\n+\n+#[test]\n+fn trait_impl_self_ty_cycle() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+trait Trait {\n+   fn foo(&self);\n+}\n+\n+struct S<T>;\n+\n+impl Trait for S<Self> {}\n+\n+fn test() {\n+    S.foo()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"{unknown}\");\n+}\n+\n+#[test]\n fn unselected_projection_in_trait_env_cycle_1() {\n     let t = type_at(\n         r#\"\n@@ -4700,10 +4740,6 @@ fn test<T: Trait>() where T: Trait2<T::Item> {\n }\n \n #[test]\n-// FIXME this is currently a Salsa panic; it would be nicer if it just returned\n-// in Unknown, and we should be able to do that once Salsa allows us to handle\n-// the cycle. But at least it doesn't overflow for now.\n-#[should_panic]\n fn unselected_projection_in_trait_env_cycle_2() {\n     let t = type_at(\n         r#\""}, {"sha": "104346ada5afb2eab4968ffda2d63eb645e155a1", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9712889ee4c6cffa37c2ace5da9b00bf29adab56/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=9712889ee4c6cffa37c2ace5da9b00bf29adab56", "patch": "@@ -20,8 +20,8 @@ use ra_db::salsa::{InternId, InternKey};\n \n use super::{AssocTyValue, Canonical, ChalkContext, Impl, Obligation};\n use crate::{\n-    db::HirDatabase, display::HirDisplay, ApplicationTy, GenericPredicate, ImplTy, ProjectionTy,\n-    Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n+    db::HirDatabase, display::HirDisplay, ApplicationTy, GenericPredicate, ProjectionTy, Substs,\n+    TraitRef, Ty, TypeCtor, TypeWalk,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -630,10 +630,7 @@ fn impl_block_datum(\n     chalk_id: chalk_ir::ImplId,\n     impl_id: ImplId,\n ) -> Option<Arc<ImplDatum<ChalkIr>>> {\n-    let trait_ref = match db.impl_ty(impl_id) {\n-        ImplTy::TraitRef(it) => it,\n-        ImplTy::Inherent(_) => return None,\n-    };\n+    let trait_ref = db.impl_trait(impl_id)?;\n     let impl_data = db.impl_data(impl_id);\n \n     let generic_params = db.generic_params(impl_id.into());\n@@ -787,11 +784,7 @@ fn type_alias_associated_ty_value(\n         _ => panic!(\"assoc ty value should be in impl\"),\n     };\n \n-    let trait_ref = match db.impl_ty(impl_id) {\n-        ImplTy::TraitRef(it) => it,\n-        // we don't return any assoc ty values if the impl'd trait can't be resolved\n-        ImplTy::Inherent(_) => panic!(\"assoc ty value should not exist\"),\n-    };\n+    let trait_ref = db.impl_trait(impl_id).expect(\"assoc ty value should not exist\"); // we don't return any assoc ty values if the impl'd trait can't be resolved\n \n     let assoc_ty = db\n         .trait_data(trait_ref.trait_)"}]}