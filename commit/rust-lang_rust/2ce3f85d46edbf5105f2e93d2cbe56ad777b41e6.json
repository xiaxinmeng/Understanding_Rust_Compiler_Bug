{"sha": "2ce3f85d46edbf5105f2e93d2cbe56ad777b41e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZTNmODVkNDZlZGJmNTEwNWYyZTkzZDJjYmU1NmFkNzc3YjQxZTY=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2020-05-03T13:23:15Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2020-05-03T14:16:51Z"}, "message": "Tweak and stabilize AtomicN::fetch_update", "tree": {"sha": "0ebcf1646dea30c4e7725fc699aff1cb24edff2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ebcf1646dea30c4e7725fc699aff1cb24edff2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ce3f85d46edbf5105f2e93d2cbe56ad777b41e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce3f85d46edbf5105f2e93d2cbe56ad777b41e6", "html_url": "https://github.com/rust-lang/rust/commit/2ce3f85d46edbf5105f2e93d2cbe56ad777b41e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ce3f85d46edbf5105f2e93d2cbe56ad777b41e6/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d626e4dadc37d7027d65f087da0ad1ddb460959f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d626e4dadc37d7027d65f087da0ad1ddb460959f", "html_url": "https://github.com/rust-lang/rust/commit/d626e4dadc37d7027d65f087da0ad1ddb460959f"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "f9d31f0a7d7934d61c932e6b7e16e33a3cfc7565", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2ce3f85d46edbf5105f2e93d2cbe56ad777b41e6/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce3f85d46edbf5105f2e93d2cbe56ad777b41e6/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=2ce3f85d46edbf5105f2e93d2cbe56ad777b41e6", "patch": "@@ -1809,11 +1809,10 @@ Note: This may call the function multiple times if the value has been changed fr\n the meantime, as long as the function returns `Some(_)`, but the function will have been applied\n but once to the stored value.\n \n-`fetch_update` takes two [`Ordering`] arguments to describe the memory\n-ordering of this operation. The first describes the required ordering for loads\n-and failed updates while the second describes the required ordering when the\n-operation finally succeeds. Beware that this is different from the two\n-modes in [`compare_exchange`]!\n+`fetch_update` takes two [`Ordering`] arguments to describe the memory ordering of this operation.\n+The first describes the required ordering for when the operation finally succeeds while the second\n+describes the required ordering for loads. These correspond to the success and failure orderings of\n+[`compare_exchange`] respectively.\n \n Using [`Acquire`] as success ordering makes the store part\n of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n@@ -1831,24 +1830,21 @@ and must be equivalent to or weaker than the success ordering.\n # Examples\n \n ```rust\n-#![feature(no_more_cas)]\n \", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n \n let x = \", stringify!($atomic_type), \"::new(7);\n-assert_eq!(x.fetch_update(|_| None, Ordering::SeqCst, Ordering::SeqCst), Err(7));\n-assert_eq!(x.fetch_update(|x| Some(x + 1), Ordering::SeqCst, Ordering::SeqCst), Ok(7));\n-assert_eq!(x.fetch_update(|x| Some(x + 1), Ordering::SeqCst, Ordering::SeqCst), Ok(8));\n+assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7));\n+assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));\n+assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));\n assert_eq!(x.load(Ordering::SeqCst), 9);\n ```\"),\n                 #[inline]\n-                #[unstable(feature = \"no_more_cas\",\n-                       reason = \"no more CAS loops in user code\",\n-                       issue = \"48655\")]\n+                #[stable(feature = \"no_more_cas\", since = \"1.45.0\")]\n                 #[$cfg_cas]\n                 pub fn fetch_update<F>(&self,\n-                                       mut f: F,\n+                                       set_order: Ordering,\n                                        fetch_order: Ordering,\n-                                       set_order: Ordering) -> Result<$int_type, $int_type>\n+                                       mut f: F) -> Result<$int_type, $int_type>\n                 where F: FnMut($int_type) -> Option<$int_type> {\n                     let mut prev = self.load(fetch_order);\n                     while let Some(next) = f(prev) {"}]}