{"sha": "3a78cc5e676715261e34d62da662c4a5119ed504", "node_id": "C_kwDOAAsO6NoAKDNhNzhjYzVlNjc2NzE1MjYxZTM0ZDYyZGE2NjJjNGE1MTE5ZWQ1MDQ", "commit": {"author": {"name": "harpsword", "email": "harpswordyyl@gmail.com", "date": "2022-04-09T05:44:41Z"}, "committer": {"name": "harpsword", "email": "harpswordyyl@gmail.com", "date": "2022-06-18T08:05:56Z"}, "message": "feat: add fold range for multi line match arm list", "tree": {"sha": "6edba3400e37e5b66a45be702f24b33b5169bd53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6edba3400e37e5b66a45be702f24b33b5169bd53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a78cc5e676715261e34d62da662c4a5119ed504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a78cc5e676715261e34d62da662c4a5119ed504", "html_url": "https://github.com/rust-lang/rust/commit/3a78cc5e676715261e34d62da662c4a5119ed504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a78cc5e676715261e34d62da662c4a5119ed504/comments", "author": {"login": "harpsword", "id": 10148927, "node_id": "MDQ6VXNlcjEwMTQ4OTI3", "avatar_url": "https://avatars.githubusercontent.com/u/10148927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harpsword", "html_url": "https://github.com/harpsword", "followers_url": "https://api.github.com/users/harpsword/followers", "following_url": "https://api.github.com/users/harpsword/following{/other_user}", "gists_url": "https://api.github.com/users/harpsword/gists{/gist_id}", "starred_url": "https://api.github.com/users/harpsword/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harpsword/subscriptions", "organizations_url": "https://api.github.com/users/harpsword/orgs", "repos_url": "https://api.github.com/users/harpsword/repos", "events_url": "https://api.github.com/users/harpsword/events{/privacy}", "received_events_url": "https://api.github.com/users/harpsword/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harpsword", "id": 10148927, "node_id": "MDQ6VXNlcjEwMTQ4OTI3", "avatar_url": "https://avatars.githubusercontent.com/u/10148927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harpsword", "html_url": "https://github.com/harpsword", "followers_url": "https://api.github.com/users/harpsword/followers", "following_url": "https://api.github.com/users/harpsword/following{/other_user}", "gists_url": "https://api.github.com/users/harpsword/gists{/gist_id}", "starred_url": "https://api.github.com/users/harpsword/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harpsword/subscriptions", "organizations_url": "https://api.github.com/users/harpsword/orgs", "repos_url": "https://api.github.com/users/harpsword/repos", "events_url": "https://api.github.com/users/harpsword/events{/privacy}", "received_events_url": "https://api.github.com/users/harpsword/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12dd81092e37df28b7a3591cae9675e668927198", "url": "https://api.github.com/repos/rust-lang/rust/commits/12dd81092e37df28b7a3591cae9675e668927198", "html_url": "https://github.com/rust-lang/rust/commit/12dd81092e37df28b7a3591cae9675e668927198"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "c694d95d537ff6a5343b348d29f538716dc4503b", "filename": "crates/ide/src/folding_ranges.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3a78cc5e676715261e34d62da662c4a5119ed504/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a78cc5e676715261e34d62da662c4a5119ed504/crates%2Fide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffolding_ranges.rs?ref=3a78cc5e676715261e34d62da662c4a5119ed504", "patch": "@@ -24,6 +24,7 @@ pub enum FoldKind {\n     Array,\n     WhereClause,\n     ReturnType,\n+    MatchArm,\n }\n \n #[derive(Debug)]\n@@ -117,6 +118,11 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n                                 res.push(Fold { range, kind: FoldKind::WhereClause })\n                             }\n                         },\n+                        ast::MatchArm(match_arm) => {\n+                            if let Some(range) = fold_range_for_multiline_match_arm(match_arm) {\n+                                res.push(Fold {range, kind: FoldKind::MatchArm})\n+                            }\n+                        },\n                         _ => (),\n                     }\n                 }\n@@ -264,6 +270,16 @@ fn fold_range_for_where_clause(where_clause: ast::WhereClause) -> Option<TextRan\n     None\n }\n \n+fn fold_range_for_multiline_match_arm(match_arm: ast::MatchArm) -> Option<TextRange> {\n+    if let Some(_) = fold_kind(match_arm.expr()?.syntax().kind()) {\n+        return None;\n+    }\n+    if match_arm.expr()?.syntax().text().contains_char('\\n') {\n+        return Some(match_arm.expr()?.syntax().text_range());\n+    }\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n     use test_utils::extract_tags;\n@@ -299,6 +315,7 @@ mod tests {\n                 FoldKind::Array => \"array\",\n                 FoldKind::WhereClause => \"whereclause\",\n                 FoldKind::ReturnType => \"returntype\",\n+                FoldKind::MatchArm => \"matcharm\",\n             };\n             assert_eq!(kind, &attr.unwrap());\n         }\n@@ -456,6 +473,36 @@ fn main() <fold block>{\n         );\n     }\n \n+    #[test]\n+    fn test_fold_multiline_non_block_match_arm() {\n+        check(\n+            r#\"\n+            fn main() <fold block>{\n+                match foo <fold block>{\n+                    block => <fold block>{\n+                    }</fold>,\n+                    matcharm => <fold matcharm>some.\n+                        call().\n+                        chain()</fold>,\n+                    matcharm2\n+                        => 0,\n+                    match_expr => <fold matcharm>match foo2 <fold block>{\n+                        bar => (),\n+                    }</fold></fold>,\n+                    array_list => <fold array>[\n+                        1,\n+                        2,\n+                        3,\n+                    ]</fold>,\n+                    strustS => <fold matcharm>StructS <fold block>{\n+                        a: 31,\n+                    }</fold></fold>,\n+                }</fold>\n+            }</fold>\n+            \"#,\n+        )\n+    }\n+\n     #[test]\n     fn fold_big_calls() {\n         check("}, {"sha": "3d702fe8dc23c12898091c2c3c5232db1ca80d5b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a78cc5e676715261e34d62da662c4a5119ed504/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a78cc5e676715261e34d62da662c4a5119ed504/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3a78cc5e676715261e34d62da662c4a5119ed504", "patch": "@@ -670,7 +670,8 @@ pub(crate) fn folding_range(\n         | FoldKind::Statics\n         | FoldKind::WhereClause\n         | FoldKind::ReturnType\n-        | FoldKind::Array => None,\n+        | FoldKind::Array\n+        | FoldKind::MatchArm => None,\n     };\n \n     let range = range(line_index, fold.range);"}]}