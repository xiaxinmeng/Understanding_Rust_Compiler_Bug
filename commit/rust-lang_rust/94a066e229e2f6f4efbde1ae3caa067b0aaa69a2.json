{"sha": "94a066e229e2f6f4efbde1ae3caa067b0aaa69a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YTA2NmUyMjllMmY2ZjRlZmJkZTFhZTNjYWEwNjdiMGFhYTY5YTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-29T09:18:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-29T09:18:11Z"}, "message": "Rollup merge of #62104 - Zoxc:query-info, r=eddyb\n\nInform the query system about properties of queries at compile time", "tree": {"sha": "7b2f3d69bb1e3aa27b562a1f44c35dce71ea8e5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b2f3d69bb1e3aa27b562a1f44c35dce71ea8e5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdFyzUCRBK7hj4Ov3rIwAAdHIIACR7GCHxmeeQcZdR5NfbBdMS\ns/l1RazlSLBghcZOGt/1K9mLZ/cTpeeIpRaLe3b5MUadN3E5GLJtzNfbPHAnDAVf\ng9T5JDCahwjRV0m2B8vIXzddBF+J6JDlF6zn3lhCygw1R/n+JFr28rO/x1AWJ9JH\nfHlEW6CQZZr7XRfcECfzCiC50jKTCEs7sz9FbJs4Ab+0thSLBmatb4Vzxtol7YzF\n6DKKgH6TAX9DDzfYewSFK/LpgbGdjgY62mmMVcbMaKU8Liz4+uW+MHIPG75bdVrC\nWr6gNjgIGIK/hhelRibdP/xPQ4t0rCnPEZ9CA87uW1QRfzlvBbzZVSY8gRRsC3I=\n=cHHS\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b2f3d69bb1e3aa27b562a1f44c35dce71ea8e5e\nparent a4cf85e958f2a14c501821afba0754b5feba45df\nparent 11221d120f8f79ff8e6ad35256874f30a942908b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561799891 +0200\ncommitter GitHub <noreply@github.com> 1561799891 +0200\n\nRollup merge of #62104 - Zoxc:query-info, r=eddyb\n\nInform the query system about properties of queries at compile time\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2", "html_url": "https://github.com/rust-lang/rust/commit/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4cf85e958f2a14c501821afba0754b5feba45df", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4cf85e958f2a14c501821afba0754b5feba45df", "html_url": "https://github.com/rust-lang/rust/commit/a4cf85e958f2a14c501821afba0754b5feba45df"}, {"sha": "11221d120f8f79ff8e6ad35256874f30a942908b", "url": "https://api.github.com/repos/rust-lang/rust/commits/11221d120f8f79ff8e6ad35256874f30a942908b", "html_url": "https://github.com/rust-lang/rust/commit/11221d120f8f79ff8e6ad35256874f30a942908b"}], "stats": {"total": 93, "additions": 61, "deletions": 32}, "files": [{"sha": "3d5e7dd0af1213b009b6f61d88f573916cfc40ef", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=94a066e229e2f6f4efbde1ae3caa067b0aaa69a2", "patch": "@@ -142,9 +142,6 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n-            // FIXME: Make `is_anon`, `is_eval_always` and `has_params` properties\n-            // of queries\n-            #[inline(always)]\n             pub fn is_anon(&self) -> bool {\n                 match *self {\n                     $(\n@@ -163,7 +160,6 @@ macro_rules! define_dep_nodes {\n             }\n \n             #[allow(unreachable_code)]\n-            #[inline(always)]\n             pub fn has_params(&self) -> bool {\n                 match *self {\n                     $("}, {"sha": "6ad4ecb3e980c71ca6bf596bd0d1107115cc8183", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=94a066e229e2f6f4efbde1ae3caa067b0aaa69a2", "patch": "@@ -1,5 +1,5 @@\n use crate::dep_graph::SerializedDepNodeIndex;\n-use crate::dep_graph::DepNode;\n+use crate::dep_graph::{DepKind, DepNode};\n use crate::hir::def_id::{CrateNum, DefId};\n use crate::ty::TyCtxt;\n use crate::ty::query::queries;\n@@ -28,13 +28,18 @@ pub trait QueryConfig<'tcx> {\n }\n \n pub(crate) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n+    const ANON: bool;\n+    const EVAL_ALWAYS: bool;\n+\n     fn query(key: Self::Key) -> Query<'tcx>;\n \n     // Don't use this method to access query results, instead use the methods on TyCtxt\n     fn query_cache<'a>(tcx: TyCtxt<'tcx>) -> &'a Lock<QueryCache<'tcx, Self>>;\n \n     fn to_dep_node(tcx: TyCtxt<'tcx>, key: &Self::Key) -> DepNode;\n \n+    fn dep_kind() -> DepKind;\n+\n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n     fn compute(tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value;\n "}, {"sha": "e788628bc58e23e903828d82bd4fe81a0a8a120f", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=94a066e229e2f6f4efbde1ae3caa067b0aaa69a2", "patch": "@@ -101,6 +101,6 @@ pub use self::on_disk_cache::OnDiskCache;\n rustc_query_append! { [define_queries!][ <'tcx>\n     Other {\n         /// Runs analysis passes on the crate.\n-        [] fn analysis: Analysis(CrateNum) -> Result<(), ErrorReported>,\n+        [eval_always] fn analysis: Analysis(CrateNum) -> Result<(), ErrorReported>,\n     },\n ]}"}, {"sha": "553c701c3aaa058e377bf5fd3af4f32bfa30e018", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=94a066e229e2f6f4efbde1ae3caa067b0aaa69a2", "patch": "@@ -376,15 +376,13 @@ impl<'tcx> TyCtxt<'tcx> {\n             return self.force_query_with_job::<Q>(key, job, null_dep_node).0;\n         }\n \n-        let dep_node = Q::to_dep_node(self, &key);\n-\n-        if dep_node.kind.is_anon() {\n+        if Q::ANON {\n             profq_msg!(self, ProfileQueriesMsg::ProviderBegin);\n             self.sess.profiler(|p| p.start_query(Q::NAME));\n \n             let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n                 self.start_query(job.job.clone(), diagnostics, |tcx| {\n-                    tcx.dep_graph.with_anon_task(dep_node.kind, || {\n+                    tcx.dep_graph.with_anon_task(Q::dep_kind(), || {\n                         Q::compute(tcx.global_tcx(), key)\n                     })\n                 })\n@@ -405,7 +403,9 @@ impl<'tcx> TyCtxt<'tcx> {\n             return result;\n         }\n \n-        if !dep_node.kind.is_eval_always() {\n+        let dep_node = Q::to_dep_node(self, &key);\n+\n+        if !Q::EVAL_ALWAYS {\n             // The diagnostics for this query will be\n             // promoted to the current session during\n             // try_mark_green(), so we can ignore them here.\n@@ -546,7 +546,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n             self.start_query(job.job.clone(), diagnostics, |tcx| {\n-                if dep_node.kind.is_eval_always() {\n+                if Q::EVAL_ALWAYS {\n                     tcx.dep_graph.with_eval_always_task(dep_node,\n                                                         tcx,\n                                                         key,\n@@ -569,8 +569,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.dep_graph.mark_loaded_from_cache(dep_node_index, false);\n         }\n \n-        if dep_node.kind != crate::dep_graph::DepKind::Null {\n-            if unlikely!(!diagnostics.is_empty()) {\n+        if unlikely!(!diagnostics.is_empty()) {\n+            if dep_node.kind != crate::dep_graph::DepKind::Null {\n                 self.queries.on_disk_cache\n                     .store_diagnostics(dep_node_index, diagnostics);\n             }\n@@ -589,15 +589,16 @@ impl<'tcx> TyCtxt<'tcx> {\n     ///\n     /// Note: The optimization is only available during incr. comp.\n     pub(super) fn ensure_query<Q: QueryDescription<'tcx>>(self, key: Q::Key) -> () {\n-        let dep_node = Q::to_dep_node(self, &key);\n-\n-        if dep_node.kind.is_eval_always() {\n+        if Q::EVAL_ALWAYS {\n             let _ = self.get_query::<Q>(DUMMY_SP, key);\n             return;\n         }\n \n         // Ensuring an anonymous query makes no sense\n-        assert!(!dep_node.kind.is_anon());\n+        assert!(!Q::ANON);\n+\n+        let dep_node = Q::to_dep_node(self, &key);\n+\n         if self.dep_graph.try_mark_green_and_read(self, &dep_node).is_none() {\n             // A None return from `try_mark_green_and_read` means that this is either\n             // a new dep node or that the dep node has already been marked red.\n@@ -653,6 +654,30 @@ macro_rules! handle_cycle_error {\n     };\n }\n \n+macro_rules! is_anon {\n+    ([]) => {{\n+        false\n+    }};\n+    ([anon$(, $modifiers:ident)*]) => {{\n+        true\n+    }};\n+    ([$other:ident$(, $modifiers:ident)*]) => {\n+        is_anon!([$($modifiers),*])\n+    };\n+}\n+\n+macro_rules! is_eval_always {\n+    ([]) => {{\n+        false\n+    }};\n+    ([eval_always$(, $modifiers:ident)*]) => {{\n+        true\n+    }};\n+    ([$other:ident$(, $modifiers:ident)*]) => {\n+        is_eval_always!([$($modifiers),*])\n+    };\n+}\n+\n macro_rules! hash_result {\n     ([][$hcx:expr, $result:expr]) => {{\n         dep_graph::hash_result($hcx, &$result)\n@@ -933,6 +958,9 @@ macro_rules! define_queries_inner {\n         }\n \n         impl<$tcx> QueryAccessors<$tcx> for queries::$name<$tcx> {\n+            const ANON: bool = is_anon!([$($modifiers)*]);\n+            const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n+\n             #[inline(always)]\n             fn query(key: Self::Key) -> Query<'tcx> {\n                 Query::$name(key)\n@@ -951,6 +979,11 @@ macro_rules! define_queries_inner {\n                 DepNode::new(tcx, $node(*key))\n             }\n \n+            #[inline(always)]\n+            fn dep_kind() -> dep_graph::DepKind {\n+                dep_graph::DepKind::$node\n+            }\n+\n             #[inline]\n             fn compute(tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value {\n                 __query_compute::$name(move || {"}, {"sha": "2cf364b562766fb6e66bd066d4f42aa450c4b3e7", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=94a066e229e2f6f4efbde1ae3caa067b0aaa69a2", "patch": "@@ -423,20 +423,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             if modifiers.no_hash {\n                 attributes.push(quote! { no_hash });\n             };\n-\n-            let mut attribute_stream = quote! {};\n-\n-            for e in attributes.into_iter().intersperse(quote! {,}) {\n-                attribute_stream.extend(e);\n-            }\n-\n-            // Add the query to the group\n-            group_stream.extend(quote! {\n-                [#attribute_stream] fn #name: #name(#arg) #result,\n-            });\n-\n-            let mut attributes = Vec::new();\n-\n             // Pass on the anon modifier\n             if modifiers.anon {\n                 attributes.push(quote! { anon });\n@@ -450,6 +436,12 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             for e in attributes.into_iter().intersperse(quote! {,}) {\n                 attribute_stream.extend(e);\n             }\n+\n+            // Add the query to the group\n+            group_stream.extend(quote! {\n+                [#attribute_stream] fn #name: #name(#arg) #result,\n+            });\n+\n             // Create a dep node for the query\n             dep_node_def_stream.extend(quote! {\n                 [#attribute_stream] #name(#arg),"}, {"sha": "266bd2a04a2222012209e4eacad48bb0f8c9574e", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a066e229e2f6f4efbde1ae3caa067b0aaa69a2/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=94a066e229e2f6f4efbde1ae3caa067b0aaa69a2", "patch": "@@ -1132,6 +1132,7 @@ impl LocalInternedString {\n         }\n     }\n \n+    #[inline]\n     pub fn get(&self) -> &str {\n         // This returns a valid string since we ensure that `self` outlives the interner\n         // by creating the interner on a thread which outlives threads which can access it.\n@@ -1145,6 +1146,7 @@ impl<U: ?Sized> std::convert::AsRef<U> for LocalInternedString\n where\n     str: std::convert::AsRef<U>\n {\n+    #[inline]\n     fn as_ref(&self) -> &U {\n         self.string.as_ref()\n     }\n@@ -1185,6 +1187,7 @@ impl !Sync for LocalInternedString {}\n \n impl std::ops::Deref for LocalInternedString {\n     type Target = str;\n+    #[inline]\n     fn deref(&self) -> &str { self.string }\n }\n "}]}