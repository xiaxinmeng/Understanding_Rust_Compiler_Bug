{"sha": "01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZGY1NjM0M2JmMTg4NGQ1ZTFkODJlODEzZTI5MzBjNmQ5ZDVkZDY=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-25T20:15:55Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-12-11T10:19:16Z"}, "message": "Test cases for RFC 2229", "tree": {"sha": "0352c24d3de6f52e081544df6bbf6fce484ebf8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0352c24d3de6f52e081544df6bbf6fce484ebf8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "html_url": "https://github.com/rust-lang/rust/commit/01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237ad1269844f483eb708de015b950253d906886", "url": "https://api.github.com/repos/rust-lang/rust/commits/237ad1269844f483eb708de015b950253d906886", "html_url": "https://github.com/rust-lang/rust/commit/237ad1269844f483eb708de015b950253d906886"}], "stats": {"total": 914, "additions": 914, "deletions": 0}, "files": [{"sha": "0b94317fd7136e36badef7c0ef073cd78eed2143", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/arrays.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,86 @@\n+// Test that arrays are completely captured by closures by relying on the borrow check diagnostics\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+fn arrays_1() {\n+    let mut arr = [1, 2, 3, 4, 5];\n+\n+    let mut c = || {\n+        arr[0] += 10;\n+    };\n+\n+    // c will capture `arr` completely, therefore another index into the\n+    // array can't be modified here\n+    arr[1] += 10;\n+    //~^ ERROR: cannot use `arr` because it was mutably borrowed\n+    //~| ERROR: cannot use `arr[_]` because it was mutably borrowed\n+    c();\n+}\n+\n+fn arrays_2() {\n+    let mut arr = [1, 2, 3, 4, 5];\n+\n+    let c = || {\n+        println!(\"{:#?}\", &arr[3..4]);\n+    };\n+\n+    // c will capture `arr` completely, therefore another index into the\n+    // array can't be modified here\n+    arr[1] += 10;\n+    //~^ ERROR: cannot assign to `arr[_]` because it is borrowed\n+    c();\n+}\n+\n+fn arrays_3() {\n+    let mut arr = [1, 2, 3, 4, 5];\n+\n+    let c = || {\n+        println!(\"{}\", arr[3]);\n+    };\n+\n+    // c will capture `arr` completely, therefore another index into the\n+    // array can't be modified here\n+    arr[1] += 10;\n+    //~^ ERROR: cannot assign to `arr[_]` because it is borrowed\n+    c();\n+}\n+\n+fn arrays_4() {\n+    let mut arr = [1, 2, 3, 4, 5];\n+\n+    let mut c = || {\n+        arr[1] += 10;\n+    };\n+\n+    // c will capture `arr` completely, therefore we cannot borrow another index\n+    // into the array.\n+    println!(\"{}\", arr[3]);\n+    //~^ ERROR: cannot use `arr` because it was mutably borrowed\n+    //~| ERROR: cannot borrow `arr[_]` as immutable because it is also borrowed as mutable\n+\n+    c();\n+}\n+\n+fn arrays_5() {\n+    let mut arr = [1, 2, 3, 4, 5];\n+\n+    let mut c = || {\n+        arr[1] += 10;\n+    };\n+\n+    // c will capture `arr` completely, therefore we cannot borrow other indecies\n+    // into the array.\n+    println!(\"{:#?}\", &arr[3..2]);\n+    //~^ ERROR: cannot borrow `arr` as immutable because it is also borrowed as mutable\n+\n+    c();\n+}\n+\n+fn main() {\n+    arrays_1();\n+    arrays_2();\n+    arrays_3();\n+    arrays_4();\n+    arrays_5();\n+}"}, {"sha": "77e3e71bc6120c2bc3bc0c1d2c467540d530bcd5", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/arrays.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,111 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/arrays.rs:3:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0503]: cannot use `arr` because it was mutably borrowed\n+  --> $DIR/arrays.rs:15:5\n+   |\n+LL |     let mut c = || {\n+   |                 -- borrow of `arr` occurs here\n+LL |         arr[0] += 10;\n+   |         --- borrow occurs due to use of `arr` in closure\n+...\n+LL |     arr[1] += 10;\n+   |     ^^^^^^ use of borrowed `arr`\n+...\n+LL |     c();\n+   |     - borrow later used here\n+\n+error[E0503]: cannot use `arr[_]` because it was mutably borrowed\n+  --> $DIR/arrays.rs:15:5\n+   |\n+LL |     let mut c = || {\n+   |                 -- borrow of `arr` occurs here\n+LL |         arr[0] += 10;\n+   |         --- borrow occurs due to use of `arr` in closure\n+...\n+LL |     arr[1] += 10;\n+   |     ^^^^^^^^^^^^ use of borrowed `arr`\n+...\n+LL |     c();\n+   |     - borrow later used here\n+\n+error[E0506]: cannot assign to `arr[_]` because it is borrowed\n+  --> $DIR/arrays.rs:30:5\n+   |\n+LL |     let c = || {\n+   |             -- borrow of `arr[_]` occurs here\n+LL |         println!(\"{:#?}\", &arr[3..4]);\n+   |                            --- borrow occurs due to use in closure\n+...\n+LL |     arr[1] += 10;\n+   |     ^^^^^^^^^^^^ assignment to borrowed `arr[_]` occurs here\n+LL |\n+LL |     c();\n+   |     - borrow later used here\n+\n+error[E0506]: cannot assign to `arr[_]` because it is borrowed\n+  --> $DIR/arrays.rs:44:5\n+   |\n+LL |     let c = || {\n+   |             -- borrow of `arr[_]` occurs here\n+LL |         println!(\"{}\", arr[3]);\n+   |                        --- borrow occurs due to use in closure\n+...\n+LL |     arr[1] += 10;\n+   |     ^^^^^^^^^^^^ assignment to borrowed `arr[_]` occurs here\n+LL |\n+LL |     c();\n+   |     - borrow later used here\n+\n+error[E0503]: cannot use `arr` because it was mutably borrowed\n+  --> $DIR/arrays.rs:58:20\n+   |\n+LL |     let mut c = || {\n+   |                 -- borrow of `arr` occurs here\n+LL |         arr[1] += 10;\n+   |         --- borrow occurs due to use of `arr` in closure\n+...\n+LL |     println!(\"{}\", arr[3]);\n+   |                    ^^^^^^ use of borrowed `arr`\n+...\n+LL |     c();\n+   |     - borrow later used here\n+\n+error[E0502]: cannot borrow `arr[_]` as immutable because it is also borrowed as mutable\n+  --> $DIR/arrays.rs:58:20\n+   |\n+LL |     let mut c = || {\n+   |                 -- mutable borrow occurs here\n+LL |         arr[1] += 10;\n+   |         --- first borrow occurs due to use of `arr` in closure\n+...\n+LL |     println!(\"{}\", arr[3]);\n+   |                    ^^^^^^ immutable borrow occurs here\n+...\n+LL |     c();\n+   |     - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `arr` as immutable because it is also borrowed as mutable\n+  --> $DIR/arrays.rs:74:24\n+   |\n+LL |     let mut c = || {\n+   |                 -- mutable borrow occurs here\n+LL |         arr[1] += 10;\n+   |         --- first borrow occurs due to use of `arr` in closure\n+...\n+LL |     println!(\"{:#?}\", &arr[3..2]);\n+   |                        ^^^ immutable borrow occurs here\n+...\n+LL |     c();\n+   |     - mutable borrow later used here\n+\n+error: aborting due to 7 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0502, E0503, E0506.\n+For more information about an error, try `rustc --explain E0502`."}, {"sha": "15be1d8c7220dadaded08bf126d1e014131f9526", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/box.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,65 @@\n+// Test borrow checker when we precise capture when using boxes\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+struct MetaData { x: String, name: String }\n+struct Data { m: MetaData }\n+struct BoxedData(Box<Data>);\n+struct EvenMoreBoxedData(Box<BoxedData>);\n+\n+// Check diagnostics when the same path is mutated both inside and outside the closure\n+fn box_1() {\n+    let m = MetaData { x: format!(\"x\"), name: format!(\"name\") };\n+    let d = Data { m };\n+    let b = BoxedData(Box::new(d));\n+    let mut e = EvenMoreBoxedData(Box::new(b));\n+\n+    let mut c = || {\n+        e.0.0.m.x = format!(\"not-x\");\n+    };\n+\n+    e.0.0.m.x = format!(\"not-x\");\n+    //~^ ERROR: cannot assign to `e.0.0.m.x` because it is borrowed\n+    c();\n+}\n+\n+// Check diagnostics when a path is mutated inside a closure while attempting to read it outside\n+// the closure.\n+fn box_2() {\n+    let m = MetaData { x: format!(\"x\"), name: format!(\"name\") };\n+    let d = Data { m };\n+    let b = BoxedData(Box::new(d));\n+    let mut e = EvenMoreBoxedData(Box::new(b));\n+\n+    let mut c = || {\n+        e.0.0.m.x = format!(\"not-x\");\n+    };\n+\n+    println!(\"{}\", e.0.0.m.x);\n+    //~^ ERROR: cannot borrow `e.0.0.m.x` as immutable because it is also borrowed as mutable\n+    c();\n+}\n+\n+// Check diagnostics when a path is read inside a closure while attempting to mutate it outside\n+// the closure.\n+fn box_3() {\n+    let m = MetaData { x: format!(\"x\"), name: format!(\"name\") };\n+    let d = Data { m };\n+    let b = BoxedData(Box::new(d));\n+    let mut e = EvenMoreBoxedData(Box::new(b));\n+\n+    let c = || {\n+        println!(\"{}\", e.0.0.m.x);\n+    };\n+\n+    e.0.0.m.x = format!(\"not-x\");\n+    //~^ ERROR: cannot assign to `e.0.0.m.x` because it is borrowed\n+    c();\n+}\n+\n+fn main() {\n+    box_1();\n+    box_2();\n+    box_3();\n+}"}, {"sha": "17a9332fb3e6c6b53c572477884c531c564a7de9", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/box.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,55 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/box.rs:3:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n+  --> $DIR/box.rs:22:5\n+   |\n+LL |     let mut c = || {\n+   |                 -- borrow of `e.0.0.m.x` occurs here\n+LL |         e.0.0.m.x = format!(\"not-x\");\n+   |         - borrow occurs due to use in closure\n+...\n+LL |     e.0.0.m.x = format!(\"not-x\");\n+   |     ^^^^^^^^^ assignment to borrowed `e.0.0.m.x` occurs here\n+LL |\n+LL |     c();\n+   |     - borrow later used here\n+\n+error[E0502]: cannot borrow `e.0.0.m.x` as immutable because it is also borrowed as mutable\n+  --> $DIR/box.rs:39:20\n+   |\n+LL |     let mut c = || {\n+   |                 -- mutable borrow occurs here\n+LL |         e.0.0.m.x = format!(\"not-x\");\n+   |         - first borrow occurs due to use of `e.0.0.m.x` in closure\n+...\n+LL |     println!(\"{}\", e.0.0.m.x);\n+   |                    ^^^^^^^^^ immutable borrow occurs here\n+LL |\n+LL |     c();\n+   |     - mutable borrow later used here\n+\n+error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n+  --> $DIR/box.rs:56:5\n+   |\n+LL |     let c = || {\n+   |             -- borrow of `e.0.0.m.x` occurs here\n+LL |         println!(\"{}\", e.0.0.m.x);\n+   |                        - borrow occurs due to use in closure\n+...\n+LL |     e.0.0.m.x = format!(\"not-x\");\n+   |     ^^^^^^^^^ assignment to borrowed `e.0.0.m.x` occurs here\n+LL |\n+LL |     c();\n+   |     - borrow later used here\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0502, E0506.\n+For more information about an error, try `rustc --explain E0502`."}, {"sha": "39b04c833e384d3c9baf43541181f3dfd5ebe435", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/multilevel-path.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,28 @@\n+// Test that when a borrow checker diagnostics are emitted, it's as precise\n+// as the capture by the closure.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+#![allow(unused)]\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+struct Wrapper {\n+    p: Point,\n+}\n+\n+fn main() {\n+    let mut w = Wrapper { p: Point { x: 10, y: 10 } };\n+\n+    let mut c = || {\n+        w.p.x += 20;\n+    };\n+\n+    let py = &mut w.p.x;\n+    //~^ ERROR: cannot borrow `w.p.x` as mutable more than once at a time\n+    c();\n+\n+    *py = 20\n+}"}, {"sha": "e5a396c4e98aed0233ba36c49c0eeebecba22e37", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/multilevel-path.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmultilevel-path.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/multilevel-path.rs:4:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0499]: cannot borrow `w.p.x` as mutable more than once at a time\n+  --> $DIR/multilevel-path.rs:23:14\n+   |\n+LL |     let mut c = || {\n+   |                 -- first mutable borrow occurs here\n+LL |         w.p.x += 20;\n+   |         - first borrow occurs due to use of `w.p.x` in closure\n+...\n+LL |     let py = &mut w.p.x;\n+   |              ^^^^^^^^^^ second mutable borrow occurs here\n+LL |\n+LL |     c();\n+   |     - first borrow later used here\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "e78d8715e4893def8d891f92fdb9de09721c5343", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/simple-struct-min-capture.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,26 @@\n+// Test that borrow checker error is accurate and that min capture pass of the\n+// closure analysis is working as expected.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+\n+#[derive(Debug)]\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let mut p = Point { x: 10, y: 20 };\n+\n+    // `p` is captured via mutable borrow.\n+    let mut c = || {\n+        p.x += 10;\n+        println!(\"{:?}\", p);\n+    };\n+\n+\n+    println!(\"{:?}\", p);\n+    //~^ ERROR: cannot borrow `p` as immutable because it is also borrowed as mutable\n+    c();\n+}"}, {"sha": "45a61cd98b101d30e6a0596231a55c9ac5ffd943", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/simple-struct-min-capture.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,26 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/simple-struct-min-capture.rs:4:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n+  --> $DIR/simple-struct-min-capture.rs:23:22\n+   |\n+LL |     let mut c = || {\n+   |                 -- mutable borrow occurs here\n+LL |         p.x += 10;\n+   |         - first borrow occurs due to use of `p` in closure\n+...\n+LL |     println!(\"{:?}\", p);\n+   |                      ^ immutable borrow occurs here\n+LL |\n+LL |     c();\n+   |     - mutable borrow later used here\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "3a66399d02899bb606e2238f4bab28094ab0d41b", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/box.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,97 @@\n+// run-pass\n+\n+// Test precise capture when using boxes\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+\n+struct MetaData { x: String, name: String }\n+struct Data { m: MetaData }\n+struct BoxedData(Box<Data>);\n+struct EvenMoreBoxedData(Box<BoxedData>);\n+\n+// Mutate disjoint paths, one inside one outside the closure\n+fn box_1() {\n+    let m = MetaData { x: format!(\"x\"), name: format!(\"name\") };\n+    let d = Data { m };\n+    let b = BoxedData(Box::new(d));\n+    let mut e = EvenMoreBoxedData(Box::new(b));\n+\n+    let mut c = || {\n+        e.0.0.m.x = format!(\"not-x\");\n+    };\n+\n+    e.0.0.m.name = format!(\"not-name\");\n+    c();\n+}\n+\n+// Mutate a path inside the closure and read a disjoint path outside the closure\n+fn box_2() {\n+    let m = MetaData { x: format!(\"x\"), name: format!(\"name\") };\n+    let d = Data { m };\n+    let b = BoxedData(Box::new(d));\n+    let mut e = EvenMoreBoxedData(Box::new(b));\n+\n+    let mut c = || {\n+        e.0.0.m.x = format!(\"not-x\");\n+    };\n+\n+    println!(\"{}\", e.0.0.m.name);\n+    c();\n+}\n+\n+// Read a path inside the closure and mutate a disjoint path outside the closure\n+fn box_3() {\n+    let m = MetaData { x: format!(\"x\"), name: format!(\"name\") };\n+    let d = Data { m };\n+    let b = BoxedData(Box::new(d));\n+    let mut e = EvenMoreBoxedData(Box::new(b));\n+\n+    let c = || {\n+        println!(\"{}\", e.0.0.m.name);\n+    };\n+\n+    e.0.0.m.x = format!(\"not-x\");\n+    c();\n+}\n+\n+// Read disjoint paths, one inside the closure and one outside the closure.\n+fn box_4() {\n+    let m = MetaData { x: format!(\"x\"), name: format!(\"name\") };\n+    let d = Data { m };\n+    let b = BoxedData(Box::new(d));\n+    let e = EvenMoreBoxedData(Box::new(b));\n+\n+    let c = || {\n+        println!(\"{}\", e.0.0.m.name);\n+    };\n+\n+    println!(\"{}\", e.0.0.m.x);\n+    c();\n+}\n+\n+// Read the same path, once inside the closure and once outside the closure.\n+fn box_5() {\n+    let m = MetaData { x: format!(\"x\"), name: format!(\"name\") };\n+    let d = Data { m };\n+    let b = BoxedData(Box::new(d));\n+    let e = EvenMoreBoxedData(Box::new(b));\n+\n+    let c = || {\n+        println!(\"{}\", e.0.0.m.name);\n+    };\n+\n+    println!(\"{}\", e.0.0.m.name);\n+    c();\n+}\n+\n+fn main() {\n+    box_1();\n+    box_2();\n+    box_3();\n+    box_4();\n+    box_5();\n+}"}, {"sha": "9883c01b946c97287cbfabefb56a39c77fd65967", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/box.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fbox.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/box.rs:5:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "2c359519b769b4a745dbd28fd8abbb658b8e5375", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-struct.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+\n+// Test that we can immutably borrow field of an instance of a structure from within a closure,\n+// while having a mutable borrow to another field of the same instance outside the closure.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let mut p = Point { x: 10, y: 10 };\n+\n+    let c = || {\n+        println!(\"{}\", p.x);\n+    };\n+\n+    // `c` should only capture `p.x`, therefore mutating `p.y` is allowed.\n+    let py = &mut p.y;\n+\n+    c();\n+    *py = 20;\n+}"}, {"sha": "9b0dea770fba2cfec72ffcc59fdaab4ab16510c0", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-struct.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-struct.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/capture-disjoint-field-struct.rs:6:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "2c6679feabe46a795656921bb2ccf3fb740e8ce2", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-tuple-mut.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+\n+// Test that we can mutate an element of a tuple from within a closure\n+// while immutably borrowing another element of the same tuple outside the closure.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+#![feature(rustc_attrs)]\n+\n+fn main() {\n+    let mut t = (10, 10);\n+\n+    let mut c = || {\n+        let t1 = &mut t.1;\n+        *t1 = 20;\n+    };\n+\n+    // Test that `c` only captures t.1, therefore reading t.0 is allowed.\n+    println!(\"{}\", t.0);\n+    c();\n+}"}, {"sha": "28d091539527961af23ba285cb5866fa80e55192", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-tuple-mut.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple-mut.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/capture-disjoint-field-tuple-mut.rs:6:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "52f5cef9f01c686d47ef5dfbb19947476544c465", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-tuple.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+\n+// Test that we can immutably borrow an element of a tuple from within a closure,\n+// while having a mutable borrow to another element of the same tuple outside the closure.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+#![feature(rustc_attrs)]\n+\n+fn main() {\n+    let mut t = (10, 10);\n+\n+    let c = || {\n+        println!(\"{}\", t.0);\n+    };\n+\n+    // `c` only captures t.0, therefore mutating t.1 is allowed.\n+    let t1 = &mut t.1;\n+\n+    c();\n+    *t1 = 20;\n+}"}, {"sha": "4fb37f85f88b57975f9b3de55cc9bfbe997c1408", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/capture-disjoint-field-tuple.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fcapture-disjoint-field-tuple.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/capture-disjoint-field-tuple.rs:6:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "3f8e197b7837d407fdb7ed4209ec4749508088f8", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,27 @@\n+// run-pass\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+// Tests that if a closure uses indivual fields of the same object\n+// then that case is handled properly.\n+\n+#![allow(unused)]\n+\n+struct Struct {\n+    x: i32,\n+    y: i32,\n+    s: String,\n+}\n+\n+fn main() {\n+    let mut s = Struct { x: 10, y: 10, s: String::new() };\n+\n+    let mut c = {\n+        s.x += 10;\n+        s.y += 42;\n+        s.s = String::from(\"new\");\n+    };\n+}"}, {"sha": "bba90f8917accaeea05a860a4f857e01015d2e41", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fdisjoint-capture-in-same-closure.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/disjoint-capture-in-same-closure.rs:3:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "8c12593430ef0c38240f5fc96afa8c01da7b0171", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,41 @@\n+// run-pass\n+\n+// Test disjoint capture within an impl block\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+struct Filter {\n+    div: i32,\n+}\n+impl Filter {\n+    fn allowed(&self, x: i32) -> bool {\n+        x % self.div == 1\n+    }\n+}\n+\n+struct Data {\n+    filter: Filter,\n+    list: Vec<i32>,\n+}\n+impl Data {\n+    fn update(&mut self) {\n+        // The closure passed to filter only captures self.filter,\n+        // therefore mutating self.list is allowed.\n+        self.list.retain(\n+            |v| self.filter.allowed(*v),\n+        );\n+    }\n+}\n+\n+fn main() {\n+    let mut d = Data { filter: Filter { div: 3 }, list: Vec::new() };\n+\n+    for i in 1..10 {\n+        d.list.push(i);\n+    }\n+\n+    d.update();\n+}"}, {"sha": "6930e18992ae2fb424ad7be269d8888d75b9d3b2", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Ffilter-on-struct-member.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/filter-on-struct-member.rs:5:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "142c156bd56e723005c80a28ab76ef8e4e3936ab", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+\n+// Test that closures can catpure paths that are more precise than just one level\n+// from the root variable.\n+//\n+// If the closures can handle such precison we should be able to mutate one path in the closure\n+// while being able to mutate another path outside the closure, where the two paths are disjoint\n+// after applying two projections on the root variable.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+#![allow(unused)]\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+struct Wrapper {\n+    p: Point,\n+}\n+\n+fn main() {\n+    let mut w = Wrapper { p: Point { x: 10, y: 10 } };\n+\n+    let mut c = || {\n+        w.p.x += 20;\n+    };\n+\n+    // `c` only captures `w.p.x`, therefore it's safe to mutate `w.p.y`.\n+    let py = &mut w.p.y;\n+    c();\n+\n+    *py = 20\n+}"}, {"sha": "94b877522f4ae2c56b7896ad878dd4129e5febeb", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-1.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/multilevel-path-1.rs:10:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d8f7d55d5aa7be204c82e07ae715b2c96866ab9f", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-2.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,34 @@\n+// run-pass\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+#![allow(unused)]\n+\n+// If the closures can handle such precison we should be able to read one path in the closure\n+// while being able mutate another path outside the closure, where the two paths are disjoint\n+// after applying two projections on the root variable.\n+\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+struct Wrapper {\n+    p: Point,\n+}\n+\n+fn main() {\n+    let mut w = Wrapper { p: Point { x: 10, y: 10 } };\n+\n+    let c = || {\n+        println!(\"{}\", w.p.x);\n+    };\n+\n+    // `c` only captures `w.p.x`, therefore it's safe to mutate `w.p.y`.\n+    let py = &mut w.p.y;\n+    c();\n+\n+    *py = 20\n+}"}, {"sha": "100a0e167c5810eb18ccef998b8511b50836dbbf", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-2.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/multilevel-path-2.rs:3:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "fc3d48ec45810545141efda87cfa047764300b91", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-3.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,31 @@\n+// run-pass\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+#![allow(unused)]\n+\n+// Test that when `capture_disjoint_fields` is enabled we can read a path\n+// both inside and outside the closure at the same time.\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+struct Wrapper {\n+    p: Point,\n+}\n+\n+fn main() {\n+    let mut w = Wrapper { p: Point { x: 10, y: 10 } };\n+\n+    let c = || {\n+        println!(\"{}\", w.p.x);\n+    };\n+\n+    let px = &w.p.x;\n+    c();\n+\n+    println!(\"{}\", px);\n+}"}, {"sha": "cf5be6a00e9a4c055878df5c7145419e754f8f87", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/multilevel-path-3.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmultilevel-path-3.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/multilevel-path-3.rs:3:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "238580929ef110a0705c103048ea446a4ccfd644", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/nested-closure.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.rs?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,40 @@\n+// run-pass\n+\n+// Test whether if we can do precise capture when using nested clsoure.\n+\n+#![feature(capture_disjoint_fields)]\n+//~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n+//~| NOTE: `#[warn(incomplete_features)]` on by default\n+//~| NOTE: see issue #53488 <https://github.com/rust-lang/rust/issues/53488>\n+\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let mut p = Point { x: 5, y: 20 };\n+\n+    // c1 should capture `p.x` via immutable borrow and\n+    // `p.y` via mutable borrow.\n+    let mut c1 = || {\n+        println!(\"{}\", p.x);\n+\n+        let incr = 10;\n+\n+        let mut c2 = || p.y += incr;\n+        c2();\n+\n+        println!(\"{}\", p.y);\n+    };\n+\n+    c1();\n+\n+    // This should not throw an error because `p.x` is borrowed via Immutable borrow,\n+    // and multiple immutable borrow of the same place are allowed.\n+    let px = &p.x;\n+\n+    println!(\"{}\", px);\n+\n+    c1();\n+}"}, {"sha": "293aa82ce9feaf73b2e3b996db006a94488e1db0", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/nested-closure.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01df56343bf1884d5e1d82e813e2930c6d9d5dd6/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fnested-closure.stderr?ref=01df56343bf1884d5e1d82e813e2930c6d9d5dd6", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `capture_disjoint_fields` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/nested-closure.rs:5:12\n+   |\n+LL | #![feature(capture_disjoint_fields)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n+\n+warning: 1 warning emitted\n+"}]}