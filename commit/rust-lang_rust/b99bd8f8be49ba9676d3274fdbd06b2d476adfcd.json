{"sha": "b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "node_id": "C_kwDOAAsO6NoAKGI5OWJkOGY4YmU0OWJhOTY3NmQzMjc0ZmRiZDA2YjJkNDc2YWRmY2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T04:35:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-05T04:35:13Z"}, "message": "Auto merge of #90598 - JohnTitor:rollup-kz1qioz, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #90507 (Suggest `extern crate alloc` when using undeclared module `alloc`)\n - #90530 (Simplify js tester a bit)\n - #90533 (Add note about x86 instruction prefixes in asm! to unstable book)\n - #90537 (Update aarch64 `target_feature` list for LLVM 12.)\n - #90544 (Demote metadata load warning to \"info\".)\n - #90554 (Clean up some `-Z unstable-options` in tests.)\n - #90556 (Add more text and examples to `carrying_{add|mul}`)\n - #90563 (rustbot allow labels)\n - #90571 (Fix missing bottom border for headings in sidebar)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d5d6436ab391a2b0da3d1772ee75b1f958de8fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5d6436ab391a2b0da3d1772ee75b1f958de8fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "html_url": "https://github.com/rust-lang/rust/commit/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6162f6c0ff39a6cc8dcb11a456e54f592653cc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6162f6c0ff39a6cc8dcb11a456e54f592653cc9", "html_url": "https://github.com/rust-lang/rust/commit/a6162f6c0ff39a6cc8dcb11a456e54f592653cc9"}, {"sha": "3821ab231b2bdf6c6d6871fec45121c2f8715d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3821ab231b2bdf6c6d6871fec45121c2f8715d1e", "html_url": "https://github.com/rust-lang/rust/commit/3821ab231b2bdf6c6d6871fec45121c2f8715d1e"}], "stats": {"total": 278, "additions": 182, "deletions": 96}, "files": [{"sha": "246bb88885d85ecf57dc231485e9381e90392182", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -180,6 +180,7 @@ pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> Vec<&'a str> {\n         (\"aarch64\", \"dpb2\") => vec![\"ccdp\"],\n         (\"aarch64\", \"frintts\") => vec![\"fptoint\"],\n         (\"aarch64\", \"fcma\") => vec![\"complxnum\"],\n+        (\"aarch64\", \"pmuv3\") => vec![\"perfmon\"],\n         (_, s) => vec![s],\n     }\n }"}, {"sha": "caeeb23feb471bf48f86dcc753c44daf94adf7b1", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -36,7 +36,6 @@ const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"thumb-mode\", Some(sym::arm_target_feature)),\n ];\n \n-// Commented features are not available in LLVM 10.0, or have since been renamed\n const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // FEAT_AdvSimd\n     (\"neon\", Some(sym::aarch64_target_feature)),\n@@ -67,13 +66,13 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // FEAT_DIT\n     (\"dit\", Some(sym::aarch64_target_feature)),\n     // FEAT_FLAGM\n-    // (\"flagm\", Some(sym::aarch64_target_feature)),\n+    (\"flagm\", Some(sym::aarch64_target_feature)),\n     // FEAT_SSBS\n     (\"ssbs\", Some(sym::aarch64_target_feature)),\n     // FEAT_SB\n     (\"sb\", Some(sym::aarch64_target_feature)),\n     // FEAT_PAUTH\n-    // (\"pauth\", Some(sym::aarch64_target_feature)),\n+    (\"pauth\", Some(sym::aarch64_target_feature)),\n     // FEAT_DPB\n     (\"dpb\", Some(sym::aarch64_target_feature)),\n     // FEAT_DPB2\n@@ -93,11 +92,11 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     // FEAT_I8MM\n     (\"i8mm\", Some(sym::aarch64_target_feature)),\n     // FEAT_F32MM\n-    // (\"f32mm\", Some(sym::aarch64_target_feature)),\n+    (\"f32mm\", Some(sym::aarch64_target_feature)),\n     // FEAT_F64MM\n-    // (\"f64mm\", Some(sym::aarch64_target_feature)),\n+    (\"f64mm\", Some(sym::aarch64_target_feature)),\n     // FEAT_BF16\n-    // (\"bf16\", Some(sym::aarch64_target_feature)),\n+    (\"bf16\", Some(sym::aarch64_target_feature)),\n     // FEAT_RAND\n     (\"rand\", Some(sym::aarch64_target_feature)),\n     // FEAT_BTI\n@@ -116,13 +115,23 @@ const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"sha3\", Some(sym::aarch64_target_feature)),\n     // FEAT_SM3 & FEAT_SM4\n     (\"sm4\", Some(sym::aarch64_target_feature)),\n+    // FEAT_PAN\n+    (\"pan\", Some(sym::aarch64_target_feature)),\n+    // FEAT_LOR\n+    (\"lor\", Some(sym::aarch64_target_feature)),\n+    // FEAT_VHE\n+    (\"vh\", Some(sym::aarch64_target_feature)),\n+    // FEAT_PMUv3\n+    (\"pmuv3\", Some(sym::aarch64_target_feature)),\n+    // FEAT_SPE\n+    (\"spe\", Some(sym::aarch64_target_feature)),\n     (\"v8.1a\", Some(sym::aarch64_target_feature)),\n     (\"v8.2a\", Some(sym::aarch64_target_feature)),\n     (\"v8.3a\", Some(sym::aarch64_target_feature)),\n     (\"v8.4a\", Some(sym::aarch64_target_feature)),\n     (\"v8.5a\", Some(sym::aarch64_target_feature)),\n-    // (\"v8.6a\", Some(sym::aarch64_target_feature)),\n-    // (\"v8.7a\", Some(sym::aarch64_target_feature)),\n+    (\"v8.6a\", Some(sym::aarch64_target_feature)),\n+    (\"v8.7a\", Some(sym::aarch64_target_feature)),\n ];\n \n const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &["}, {"sha": "8db2291dfcfaac8c6144128f3e03abd47452e52e", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -236,7 +236,7 @@ use std::fmt::Write as _;\n use std::io::{Read, Result as IoResult, Write};\n use std::path::{Path, PathBuf};\n use std::{cmp, fmt, fs};\n-use tracing::{debug, info, warn};\n+use tracing::{debug, info};\n \n #[derive(Clone)]\n crate struct CrateLocator<'a> {\n@@ -549,7 +549,7 @@ impl<'a> CrateLocator<'a> {\n                         }\n                     }\n                     Err(err) => {\n-                        warn!(\"no metadata found: {}\", err);\n+                        info!(\"no metadata found: {}\", err);\n                         continue;\n                     }\n                 };"}, {"sha": "ff0d76e94fdf5c231a8b8f193e034c4a0d4201f1", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -420,6 +420,10 @@ impl<'a> Resolver<'a> {\n                 err.span_label(span, label);\n \n                 if let Some((suggestions, msg, applicability)) = suggestion {\n+                    if suggestions.is_empty() {\n+                        err.help(&msg);\n+                        return err;\n+                    }\n                     err.multipart_suggestion(&msg, suggestions, applicability);\n                 }\n "}, {"sha": "5f3620b247e26e1885a7361d282316268b84b1fb", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -2523,19 +2523,29 @@ impl<'a> Resolver<'a> {\n                         } else {\n                             (\n                                 format!(\"use of undeclared crate or module `{}`\", ident),\n-                                self.find_similarly_named_module_or_crate(\n-                                    ident.name,\n-                                    &parent_scope.module,\n-                                )\n-                                .map(|sugg| {\n-                                    (\n-                                        vec![(ident.span, sugg.to_string())],\n+                                if ident.name == sym::alloc {\n+                                    Some((\n+                                        vec![],\n                                         String::from(\n-                                            \"there is a crate or module with a similar name\",\n+                                            \"add `extern crate alloc` to use the `alloc` crate\",\n                                         ),\n                                         Applicability::MaybeIncorrect,\n+                                    ))\n+                                } else {\n+                                    self.find_similarly_named_module_or_crate(\n+                                        ident.name,\n+                                        &parent_scope.module,\n                                     )\n-                                }),\n+                                    .map(|sugg| {\n+                                        (\n+                                            vec![(ident.span, sugg.to_string())],\n+                                            String::from(\n+                                                \"there is a crate or module with a similar name\",\n+                                            ),\n+                                            Applicability::MaybeIncorrect,\n+                                        )\n+                                    })\n+                                },\n                             )\n                         }\n                     } else {"}, {"sha": "9861530c19443edcaf8421357ac9c291f4bad448", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -94,7 +94,13 @@ depending on the target pointer size.\n }\n \n macro_rules! widening_impl {\n-    ($SelfT:ty, $WideT:ty, $BITS:literal) => {\n+    ($SelfT:ty, $WideT:ty, $BITS:literal, unsigned) => {\n+        widening_impl!($SelfT, $WideT, $BITS, \"\");\n+    };\n+    ($SelfT:ty, $WideT:ty, $BITS:literal, signed) => {\n+        widening_impl!($SelfT, $WideT, $BITS, \"# //\");\n+    };\n+    ($SelfT:ty, $WideT:ty, $BITS:literal, $AdaptiveTestPrefix:literal) => {\n         /// Calculates the complete product `self * rhs` without the possibility to overflow.\n         ///\n         /// This returns the low-order (wrapping) bits and the high-order (overflow) bits\n@@ -148,6 +154,33 @@ macro_rules! widening_impl {\n         /// assert_eq!(5u32.carrying_mul(2, 10), (20, 0));\n         /// assert_eq!(1_000_000_000u32.carrying_mul(10, 0), (1410065408, 2));\n         /// assert_eq!(1_000_000_000u32.carrying_mul(10, 10), (1410065418, 2));\n+        #[doc = concat!($AdaptiveTestPrefix, \"assert_eq!(\",\n+            stringify!($SelfT), \"::MAX.carrying_mul(\", stringify!($SelfT), \"::MAX, \", stringify!($SelfT), \"::MAX), \",\n+            \"(0, \", stringify!($SelfT), \"::MAX));\"\n+        )]\n+        /// ```\n+        ///\n+        /// If `carry` is zero, this is similar to [`overflowing_mul`](Self::overflowing_mul),\n+        /// except that it gives the value of the overflow instead of just whether one happened:\n+        ///\n+        /// ```\n+        /// #![feature(bigint_helper_methods)]\n+        /// let r = u8::carrying_mul(7, 13, 0);\n+        /// assert_eq!((r.0, r.1 != 0), u8::overflowing_mul(7, 13));\n+        /// let r = u8::carrying_mul(13, 42, 0);\n+        /// assert_eq!((r.0, r.1 != 0), u8::overflowing_mul(13, 42));\n+        /// ```\n+        ///\n+        /// The value of the first field in the returned tuple matches what you'd get\n+        /// by combining the [`wrapping_mul`](Self::wrapping_mul) and\n+        /// [`wrapping_add`](Self::wrapping_add) methods:\n+        ///\n+        /// ```\n+        /// #![feature(bigint_helper_methods)]\n+        /// assert_eq!(\n+        ///     789_u16.carrying_mul(456, 123).0,\n+        ///     789_u16.wrapping_mul(456).wrapping_add(123),\n+        /// );\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n@@ -168,29 +201,29 @@ macro_rules! widening_impl {\n \n #[lang = \"i8\"]\n impl i8 {\n-    widening_impl! { i8, i16, 8 }\n+    widening_impl! { i8, i16, 8, signed }\n     int_impl! { i8, i8, u8, 8, 7, -128, 127, 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n     \"[0x12]\", \"[0x12]\", \"\", \"\" }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n-    widening_impl! { i16, i32, 16 }\n+    widening_impl! { i16, i32, 16, signed }\n     int_impl! { i16, i16, u16, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n     \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n-    widening_impl! { i32, i64, 32 }\n+    widening_impl! { i32, i64, 32, signed }\n     int_impl! { i32, i32, u32, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n-    widening_impl! { i64, i128, 64 }\n+    widening_impl! { i64, i128, 64, signed }\n     int_impl! { i64, i64, u64, 64, 63, -9223372036854775808, 9223372036854775807, 12,\n     \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n     \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n@@ -212,7 +245,7 @@ impl i128 {\n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    widening_impl! { isize, i32, 16 }\n+    widening_impl! { isize, i32, 16, signed }\n     int_impl! { isize, i16, usize, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n     \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n@@ -221,7 +254,7 @@ impl isize {\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    widening_impl! { isize, i64, 32 }\n+    widening_impl! { isize, i64, 32, signed }\n     int_impl! { isize, i32, usize, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\",\n@@ -231,7 +264,7 @@ impl isize {\n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n-    widening_impl! { isize, i128, 64 }\n+    widening_impl! { isize, i128, 64, signed }\n     int_impl! { isize, i64, usize, 64, 63, -9223372036854775808, 9223372036854775807,\n     12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n      \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n@@ -244,7 +277,7 @@ const ASCII_CASE_MASK: u8 = 0b0010_0000;\n \n #[lang = \"u8\"]\n impl u8 {\n-    widening_impl! { u8, u16, 8 }\n+    widening_impl! { u8, u16, 8, unsigned }\n     uint_impl! { u8, u8, i8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n     \"[0x12]\", \"\", \"\" }\n \n@@ -793,21 +826,21 @@ impl u8 {\n \n #[lang = \"u16\"]\n impl u16 {\n-    widening_impl! { u16, u32, 16 }\n+    widening_impl! { u16, u32, 16, unsigned }\n     uint_impl! { u16, u16, i16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n-    widening_impl! { u32, u64, 32 }\n+    widening_impl! { u32, u64, 32, unsigned }\n     uint_impl! { u32, u32, i32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n-    widening_impl! { u64, u128, 64 }\n+    widening_impl! { u64, u128, 64, unsigned }\n     uint_impl! { u64, u64, i64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n@@ -830,15 +863,15 @@ impl u128 {\n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n-    widening_impl! { usize, u32, 16 }\n+    widening_impl! { usize, u32, 16, unsigned }\n     uint_impl! { usize, u16, isize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n-    widening_impl! { usize, u64, 32 }\n+    widening_impl! { usize, u64, 32, unsigned }\n     uint_impl! { usize, u32, isize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n     usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n@@ -847,7 +880,7 @@ impl usize {\n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n-    widening_impl! { usize, u128, 64 }\n+    widening_impl! { usize, u128, 64, unsigned }\n     uint_impl! { usize, u64, isize, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\","}, {"sha": "a15eabf7966d8ab2fd7cdc18ea7c6a535b7c7354", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1504,6 +1504,8 @@ macro_rules! uint_impl {\n         /// additional bit of overflow. This allows for chaining together multiple additions\n         /// to create \"big integers\" which represent larger values.\n         ///\n+        #[doc = concat!(\"This can be thought of as a \", stringify!($BITS), \"-bit \\\"full adder\\\", in the electronics sense.\")]\n+        ///\n         /// # Examples\n         ///\n         /// Basic usage\n@@ -1513,7 +1515,20 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, false), (7, false));\")]\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, true), (8, false));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), (0, true));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(0, true), (0, true));\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, true), (1, true));\")]\n+        #[doc = concat!(\"assert_eq!(\",\n+            stringify!($SelfT), \"::MAX.carrying_add(\", stringify!($SelfT), \"::MAX, true), \",\n+            \"(\", stringify!($SelfT), \"::MAX, true));\"\n+        )]\n+        /// ```\n+        ///\n+        /// If `carry` is false, this method is equivalent to [`overflowing_add`](Self::overflowing_add):\n+        ///\n+        /// ```\n+        /// #![feature(bigint_helper_methods)]\n+        #[doc = concat!(\"assert_eq!(5_\", stringify!($SelfT), \".carrying_add(2, false), 5_\", stringify!($SelfT), \".overflowing_add(2));\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), \", stringify!($SelfT), \"::MAX.overflowing_add(1));\")]\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]"}, {"sha": "84fc6dcc33979d1605ab373e13cb00aa9bd622eb", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -885,5 +885,7 @@ The compiler performs some additional checks on options:\n     - You are responsible for switching any target-specific state (e.g. thread-local storage, stack bounds).\n     - The set of memory locations that you may access is the intersection of those allowed by the `asm!` blocks you entered and exited.\n - You cannot assume that an `asm!` block will appear exactly once in the output binary. The compiler is allowed to instantiate multiple copies of the `asm!` block, for example when the function containing it is inlined in multiple places.\n+- On x86, inline assembly must not end with an instruction prefix (such as `LOCK`) that would apply to instructions generated by the compiler.\n+  - The compiler is currently unable to detect this due to the way inline assembly is compiled, but may catch and reject this in the future.\n \n > **Note**: As a general rule, the flags covered by `preserves_flags` are those which are *not* preserved when performing a function call."}, {"sha": "89a763ef6d707fbf79a7117e261c4f4102230e74", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -156,7 +156,8 @@ h1.fqn > .in-band > a:hover {\n \tsection hierarchies. */\n h2,\n .top-doc h3,\n-.top-doc h4 {\n+.top-doc h4,\n+.sidebar .others h3 {\n \tborder-bottom: 1px solid;\n }\n h3.code-header {"}, {"sha": "4b55a0a69b66358c2987337484c50e9e76cfd338", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -566,6 +566,7 @@ function hideThemeButtonState() {\n     // delayed sidebar rendering.\n     window.initSidebarItems = function(items) {\n         var sidebar = document.getElementsByClassName(\"sidebar-elems\")[0];\n+        var others;\n         var current = window.sidebarCurrent;\n \n         function addSidebarCrates(crates) {\n@@ -594,7 +595,7 @@ function hideThemeButtonState() {\n                 li.appendChild(link);\n                 ul.appendChild(li);\n             }\n-            sidebar.appendChild(div);\n+            others.appendChild(div);\n         }\n \n         function block(shortty, longty) {\n@@ -635,10 +636,14 @@ function hideThemeButtonState() {\n                 ul.appendChild(li);\n             }\n             div.appendChild(ul);\n-            sidebar.appendChild(div);\n+            others.appendChild(div);\n         }\n \n         if (sidebar) {\n+            others = document.createElement(\"div\");\n+            others.className = \"others\";\n+            sidebar.appendChild(others);\n+\n             var isModule = hasClass(document.body, \"mod\");\n             if (!isModule) {\n                 block(\"primitive\", \"Primitive Types\");"}, {"sha": "bdf17ec45705780952ccc74d6068e8e8161fafb0", "filename": "src/test/rustdoc-gui/headings.goml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Frustdoc-gui%2Fheadings.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheadings.goml?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -109,6 +109,9 @@ assert-css: (\"h6#sub-heading-for-enum-impl-item-doc\", {\"border-bottom-width\": \"0\n assert-css: (\"h6#sub-sub-heading-for-enum-impl-item-doc\", {\"font-size\": \"15.2px\"})\n assert-css: (\"h6#sub-sub-heading-for-enum-impl-item-doc\", {\"border-bottom-width\": \"0px\"})\n \n+assert-text: (\".sidebar .others h3\", \"Modules\")\n+assert-css: (\".sidebar .others h3\", {\"border-bottom-width\": \"1px\"}, ALL)\n+\n goto: file://|DOC_PATH|/test_docs/union.HeavilyDocumentedUnion.html\n \n assert-css: (\"h1.fqn\", {\"font-size\": \"24px\"})"}, {"sha": "f9c707f81e79c8022c510a1f183d74f2f92cd5f6", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -4,17 +4,17 @@ assert-text: (\".sidebar > .location\", \"Crate test_docs\")\n assert-count: (\".sidebar .location\", 1)\n assert-text: (\".sidebar-elems > #all-types\", \"See all test_docs's items\")\n // We check that we have the crates list and that the \"current\" on is \"test_docs\".\n-assert-text: (\".sidebar-elems > .crate > ul > li > a.current\", \"test_docs\")\n+assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"test_docs\")\n // And we're also supposed to have the list of items in the current module.\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(1)\", \"Modules\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(2)\", \"Macros\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(3)\", \"Structs\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(4)\", \"Enums\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(5)\", \"Traits\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(6)\", \"Functions\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(7)\", \"Type Definitions\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(8)\", \"Unions\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(9)\", \"Keywords\")\n+assert-text: (\".sidebar-elems .items > ul > li:nth-child(1)\", \"Modules\")\n+assert-text: (\".sidebar-elems .items > ul > li:nth-child(2)\", \"Macros\")\n+assert-text: (\".sidebar-elems .items > ul > li:nth-child(3)\", \"Structs\")\n+assert-text: (\".sidebar-elems .items > ul > li:nth-child(4)\", \"Enums\")\n+assert-text: (\".sidebar-elems .items > ul > li:nth-child(5)\", \"Traits\")\n+assert-text: (\".sidebar-elems .items > ul > li:nth-child(6)\", \"Functions\")\n+assert-text: (\".sidebar-elems .items > ul > li:nth-child(7)\", \"Type Definitions\")\n+assert-text: (\".sidebar-elems .items > ul > li:nth-child(8)\", \"Unions\")\n+assert-text: (\".sidebar-elems .items > ul > li:nth-child(9)\", \"Keywords\")\n assert-text: (\"#structs + .item-table .item-left > a\", \"Foo\")\n click: \"#structs + .item-table .item-left > a\"\n \n@@ -24,13 +24,13 @@ assert-count: (\".sidebar .location\", 2)\n assert-false: \".sidebar-elems > .crate\"\n // We now go back to the crate page to click on the \"lib2\" crate link.\n goto: file://|DOC_PATH|/test_docs/index.html\n-click: \".sidebar-elems > .crate > ul > li:first-child > a\"\n+click: \".sidebar-elems .crate > ul > li:first-child > a\"\n \n // PAGE: lib2/index.html\n goto: file://|DOC_PATH|/lib2/index.html\n assert-text: (\".sidebar > .location\", \"Crate lib2\")\n // We check that we have the crates list and that the \"current\" on is now \"lib2\".\n-assert-text: (\".sidebar-elems > .crate > ul > li > a.current\", \"lib2\")\n+assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"lib2\")\n // We now go to the \"foobar\" function page.\n assert-text: (\".sidebar-elems > .items > ul > li:nth-child(1)\", \"Modules\")\n assert-text: (\".sidebar-elems > .items > ul > li:nth-child(2)\", \"Structs\")\n@@ -57,6 +57,6 @@ assert-false: \".sidebar-elems > .crate\"\n goto: ./sub_module/sub_sub_module/index.html\n assert-text: (\".sidebar > .location\", \"Module sub_sub_module\")\n // We check that we don't have the crate list.\n-assert-false: \".sidebar-elems > .crate\"\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(1)\", \"Functions\")\n+assert-false: \".sidebar-elems .crate\"\n+assert-text: (\".sidebar-elems .items > ul > li:nth-child(1)\", \"Functions\")\n assert-text: (\"#functions + .item-table .item-left > a\", \"foo\")"}, {"sha": "134d8af5bfb8aba42320695460111a4b87ca45cf", "filename": "src/test/ui/hello2021.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fhello2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fhello2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhello2021.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // edition:2021\n-// compile-flags: -Zunstable-options\n \n fn main() {\n     println!(\"hello, 2021\");"}, {"sha": "158317efe4782c9b1e23014e26503f5c76a304d3", "filename": "src/test/ui/iterators/into-iter-on-arrays-2021.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2021.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n // edition:2021\n-// compile-flags: -Zunstable-options\n \n use std::array::IntoIter;\n use std::ops::Deref;"}, {"sha": "3a3d81176d691363bd6488e7bc2d8fb7f78ee668", "filename": "src/test/ui/lint/force-warn/allowed-cli-deny-by-default-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-cli-deny-by-default-lint.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,6 +1,6 @@\n // --force-warn $LINT causes $LINT (which is deny-by-default) to warn\n // despite $LINT being allowed on command line\n-// compile-flags: -A const_err --force-warn const_err -Zunstable-options\n+// compile-flags: -A const_err --force-warn const_err\n // check-pass\n \n const C: i32 = 1 / 0;"}, {"sha": "9736027452a8df0811863d80ea2d3c1cceaa7e9f", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-cli-warn-by-default-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,6 +1,6 @@\n // --force-warn $LINT_GROUP causes $LINT (which is warn-by-default) to warn\n // despite $LINT being allowed on command line\n-// compile-flags: -A bare-trait-objects --force-warn rust-2018-idioms -Zunstable-options\n+// compile-flags: -A bare-trait-objects --force-warn rust-2018-idioms\n // check-pass\n \n pub trait SomeTrait {}"}, {"sha": "267e7b45f0c2137c3666950640ffc551332c68c2", "filename": "src/test/ui/lint/force-warn/warn-by-default-lint-two-modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarn-by-default-lint-two-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarn-by-default-lint-two-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarn-by-default-lint-two-modules.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,6 +1,6 @@\n // --force-warn $LINT causes $LINT (which is warn-by-default) to warn\n // despite being allowed in one submodule (but not the other)\n-// compile-flags: --force-warn dead_code -Zunstable-options\n+// compile-flags: --force-warn dead_code\n // check-pass\n \n mod one {"}, {"sha": "d1d4f5602f271eeb0bb1034c5279667cc55f0659", "filename": "src/test/ui/lint/force-warn/warnings-lint-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarnings-lint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarnings-lint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarnings-lint-group.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,5 +1,5 @@\n // --force-warn warnings is an error\n-// compile-flags: --force-warn warnings -Zunstable-options\n+// compile-flags: --force-warn warnings\n // error-pattern: `warnings` lint group is not supported\n \n fn main() {}"}, {"sha": "1faeed33704511d900175c73dfe6577a2b283179", "filename": "src/test/ui/lint/force-warn/warnings-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarnings-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarnings-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fwarnings-lint-group.stderr?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -2,8 +2,6 @@ error[E0602]: `warnings` lint group is not supported with \u00b4--force-warn\u00b4\n \n error[E0602]: `warnings` lint group is not supported with \u00b4--force-warn\u00b4\n \n-error[E0602]: `warnings` lint group is not supported with \u00b4--force-warn\u00b4\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0602`."}, {"sha": "c4004540467488bc5319d45436bc5153b6750e72", "filename": "src/test/ui/lint/unused_parens_json_suggestion.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.fixed?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --error-format json -Zunstable-options\n+// compile-flags: --error-format json\n // run-rustfix\n \n // The output for humans should just highlight the whole span without showing"}, {"sha": "962c8bdd7d78957dcf7c837f8f1685cdbffe8734", "filename": "src/test/ui/lint/unused_parens_json_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --error-format json -Zunstable-options\n+// compile-flags: --error-format json\n // run-rustfix\n \n // The output for humans should just highlight the whole span without showing"}, {"sha": "169fb824021ed6e4eea48bb74b0ce135a10fdfdf", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,4 +1,4 @@\n-{\"message\":\"unnecessary parentheses around assigned value\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":596,\"byte_end\":597,\"line_start\":16,\"line_end\":16,\"column_start\":14,\"column_end\":15,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\n+{\"message\":\"unnecessary parentheses around assigned value\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":577,\"byte_end\":578,\"line_start\":16,\"line_end\":16,\"column_start\":14,\"column_end\":15,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\n   --> $DIR/unused_parens_json_suggestion.rs:16:14\n    |\n LL |     let _a = (1 / (2 + 3));"}, {"sha": "8a57cd57385f31238c90f3327b72924dc5852b48", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.fixed?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --error-format json -Zunstable-options\n+// compile-flags: --error-format json\n // run-rustfix\n \n // The output for humans should just highlight the whole span without showing"}, {"sha": "952332d54e9c10f0e94f2a644551502c90b2a37f", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --error-format json -Zunstable-options\n+// compile-flags: --error-format json\n // run-rustfix\n \n // The output for humans should just highlight the whole span without showing"}, {"sha": "43367aaa9113b67fbe28c01104edb6dbb8953dc9", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,4 +1,4 @@\n-{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":500,\"byte_end\":501,\"line_start\":17,\"line_end\":17,\"column_start\":8,\"column_end\":9,\"is_primary\":true,\"text\":[{\"text\":\"    if (_b) {\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":481,\"byte_end\":482,\"line_start\":17,\"line_end\":17,\"column_start\":8,\"column_end\":9,\"is_primary\":true,\"text\":[{\"text\":\"    if (_b) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:17:8\n    |\n LL |     if (_b) {\n@@ -16,7 +16,7 @@ LL +     if _b {\n    | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":631,\"byte_end\":632,\"line_start\":28,\"line_end\":28,\"column_start\":7,\"column_end\":8,\"is_primary\":true,\"text\":[{\"text\":\"    if(c) {\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":612,\"byte_end\":613,\"line_start\":28,\"line_end\":28,\"column_start\":7,\"column_end\":8,\"is_primary\":true,\"text\":[{\"text\":\"    if(c) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:28:7\n    |\n LL |     if(c) {\n@@ -29,7 +29,7 @@ LL +     if c {\n    | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":711,\"byte_end\":712,\"line_start\":32,\"line_end\":32,\"column_start\":8,\"column_end\":9,\"is_primary\":true,\"text\":[{\"text\":\"    if (c){\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":692,\"byte_end\":693,\"line_start\":32,\"line_end\":32,\"column_start\":8,\"column_end\":9,\"is_primary\":true,\"text\":[{\"text\":\"    if (c){\n   --> $DIR/unused_parens_remove_json_suggestion.rs:32:8\n    |\n LL |     if (c){\n@@ -42,7 +42,7 @@ LL +     if c {\n    | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":794,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":12,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":12}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":807,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":25,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":25,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":793,\"byte_end\":794,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":12,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":12}],\"label\":null,\"suggested_replacement\":\"\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":807,\"byte_end\":808,\"line_start\":36,\"line_end\":36,\"column_start\":25,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":25,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":\" \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"error: unnecessary parentheses around `while` condition\n+{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":774,\"byte_end\":775,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":12,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":12}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":788,\"byte_end\":789,\"line_start\":36,\"line_end\":36,\"column_start\":25,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":25,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":774,\"byte_end\":775,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":12,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":12}],\"label\":null,\"suggested_replacement\":\"\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":788,\"byte_end\":789,\"line_start\":36,\"line_end\":36,\"column_start\":25,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":25,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":\" \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"error: unnecessary parentheses around `while` condition\n   --> $DIR/unused_parens_remove_json_suggestion.rs:36:11\n    |\n LL |     while (false && true){\n@@ -55,7 +55,7 @@ LL +     while false && true {\n    | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":821,\"byte_end\":822,\"line_start\":37,\"line_end\":37,\"column_start\":12,\"column_end\":13,\"is_primary\":true,\"text\":[{\"text\":\"        if (c) {\n+{\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":802,\"byte_end\":803,\"line_start\":37,\"line_end\":37,\"column_start\":12,\"column_end\":13,\"is_primary\":true,\"text\":[{\"text\":\"        if (c) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:37:12\n    |\n LL |         if (c) {\n@@ -68,7 +68,7 @@ LL +         if c {\n    | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":918,\"byte_end\":919,\"line_start\":43,\"line_end\":43,\"column_start\":10,\"column_end\":11,\"is_primary\":true,\"text\":[{\"text\":\"    while(true && false) {\n+{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":899,\"byte_end\":900,\"line_start\":43,\"line_end\":43,\"column_start\":10,\"column_end\":11,\"is_primary\":true,\"text\":[{\"text\":\"    while(true && false) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:43:10\n    |\n LL |     while(true && false) {\n@@ -81,7 +81,7 @@ LL +     while true && false {\n    | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":987,\"byte_end\":988,\"line_start\":44,\"line_end\":44,\"column_start\":18,\"column_end\":19,\"is_primary\":true,\"text\":[{\"text\":\"        for _ in (0 .. 3){\n+{\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":968,\"byte_end\":969,\"line_start\":44,\"line_end\":44,\"column_start\":18,\"column_end\":19,\"is_primary\":true,\"text\":[{\"text\":\"        for _ in (0 .. 3){\n   --> $DIR/unused_parens_remove_json_suggestion.rs:44:18\n    |\n LL |         for _ in (0 .. 3){\n@@ -94,7 +94,7 @@ LL +         for _ in 0 .. 3 {\n    | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1088,\"byte_end\":1089,\"line_start\":49,\"line_end\":49,\"column_start\":14,\"column_end\":15,\"is_primary\":true,\"text\":[{\"text\":\"    for _ in (0 .. 3) {\n+{\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1069,\"byte_end\":1070,\"line_start\":49,\"line_end\":49,\"column_start\":14,\"column_end\":15,\"is_primary\":true,\"text\":[{\"text\":\"    for _ in (0 .. 3) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:49:14\n    |\n LL |     for _ in (0 .. 3) {\n@@ -107,7 +107,7 @@ LL +     for _ in 0 .. 3 {\n    | \n \n \"}\n-{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1147,\"byte_end\":1148,\"line_start\":50,\"line_end\":50,\"column_start\":15,\"column_end\":16,\"is_primary\":true,\"text\":[{\"text\":\"        while (true && false) {\n+{\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1128,\"byte_end\":1129,\"line_start\":50,\"line_end\":50,\"column_start\":15,\"column_end\":16,\"is_primary\":true,\"text\":[{\"text\":\"        while (true && false) {\n   --> $DIR/unused_parens_remove_json_suggestion.rs:50:15\n    |\n LL |         while (true && false) {"}, {"sha": "9143a8cdd59bc915e1daff145d699adcb6fa5cd6", "filename": "src/test/ui/matches2021.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fmatches2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fmatches2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatches2021.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // edition:2021\n-// compile-flags: -Zunstable-options\n \n // regression test for https://github.com/rust-lang/rust/pull/85678\n "}, {"sha": "ec8666f93f096392d13343e876983af073e7bba8", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,5 +1,6 @@\n // aux-crate:priv:priv_dep=priv_dep.rs\n // aux-build:pub_dep.rs\n+// compile-flags: -Zunstable-options\n #![deny(exported_private_dependencies)]\n \n // This crate is a private dependency"}, {"sha": "f64b8569015d8fc881c2c50dd5d44cdd20a21b04", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,23 +1,23 @@\n error: type `OtherType` from private dependency 'priv_dep' in public interface\n-  --> $DIR/pub-priv1.rs:20:5\n+  --> $DIR/pub-priv1.rs:21:5\n    |\n LL |     pub field: OtherType,\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/pub-priv1.rs:3:9\n+  --> $DIR/pub-priv1.rs:4:9\n    |\n LL | #![deny(exported_private_dependencies)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: type `OtherType` from private dependency 'priv_dep' in public interface\n-  --> $DIR/pub-priv1.rs:27:5\n+  --> $DIR/pub-priv1.rs:28:5\n    |\n LL |     pub fn pub_fn(param: OtherType) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trait `OtherTrait` from private dependency 'priv_dep' in public interface\n-  --> $DIR/pub-priv1.rs:34:5\n+  --> $DIR/pub-priv1.rs:35:5\n    |\n LL |     type Foo: OtherTrait;\n    |     ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a63b6fcf2627ab8294f0a0e050b63a466c3bdf16", "filename": "src/test/ui/rust-2021/prelude2021.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Frust-2021%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Frust-2021%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fprelude2021.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n // edition:2021\n-// compile-flags: -Zunstable-options\n \n fn main() {\n     let _: u16 = 123i32.try_into().unwrap();"}, {"sha": "eed2f313abe6ec70ced488c3246db67e05f4dab7", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.fixed?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n // run-rustfix\n-// compile-flags: -Z unstable-options --edition 2018\n+// edition:2018\n \n #![warn(rust_2021_prefixes_incompatible_syntax)]\n "}, {"sha": "0565db793df66accbff7d51319f204b0fb307197", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n // run-rustfix\n-// compile-flags: -Z unstable-options --edition 2018\n+// edition:2018\n \n #![warn(rust_2021_prefixes_incompatible_syntax)]\n "}, {"sha": "1defa1cef286353c0d359aa6c76756d5a12f3807", "filename": "src/test/ui/suggestions/undeclared-module-alloc.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fsuggestions%2Fundeclared-module-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fsuggestions%2Fundeclared-module-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fundeclared-module-alloc.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -0,0 +1,5 @@\n+// edition:2018\n+\n+use alloc::rc::Rc; //~ ERROR failed to resolve: use of undeclared crate or module `alloc`\n+\n+fn main() {}"}, {"sha": "39169dfa9f7778c5f7841d8d43d6bddeace83574", "filename": "src/test/ui/suggestions/undeclared-module-alloc.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fsuggestions%2Fundeclared-module-alloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Fsuggestions%2Fundeclared-module-alloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fundeclared-module-alloc.stderr?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -0,0 +1,11 @@\n+error[E0433]: failed to resolve: use of undeclared crate or module `alloc`\n+  --> $DIR/undeclared-module-alloc.rs:3:5\n+   |\n+LL | use alloc::rc::Rc;\n+   |     ^^^^^ use of undeclared crate or module `alloc`\n+   |\n+   = help: add `extern crate alloc` to use the `alloc` crate\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "6ac558974d0c5476e6a606ffe3006a0b050607ac", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1,7 +1,7 @@\n // --extern-location with a raw reference\n \n // aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar\n+// compile-flags:--extern-location bar -Zunstable-options\n \n #![warn(unused_crate_dependencies)]\n "}, {"sha": "5fcaa452ca30e6eaf9278d3e0647fc98de15e09d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -242,9 +242,6 @@ impl TestProps {\n                 if let Some(edition) = config.parse_edition(ln) {\n                     self.compile_flags.push(format!(\"--edition={}\", edition));\n                     has_edition = true;\n-                    if edition == \"2021\" {\n-                        self.compile_flags.push(\"-Zunstable-options\".to_string());\n-                    }\n                 }\n \n                 config.parse_and_update_revisions(ln, &mut self.revisions);"}, {"sha": "3c85b9076dd1af977591fc0fcbdcd6d54a3fbf01", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -1607,9 +1607,6 @@ impl<'test> TestCx<'test> {\n                 get_lib_name(&aux_path.trim_end_matches(\".rs\").replace('-', \"_\"), is_dylib);\n             rustc.arg(\"--extern\").arg(format!(\"{}={}/{}\", aux_name, aux_dir.display(), lib_name));\n         }\n-        if !self.props.aux_crates.is_empty() {\n-            rustc.arg(\"-Zunstable-options\");\n-        }\n \n         aux_dir\n     }"}, {"sha": "a673e425dfff9d41610b59ae14f014486f911018", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -414,7 +414,7 @@ function parseOptions(args) {\n         \"test_folder\": \"\",\n         \"test_file\": \"\",\n     };\n-    var correspondances = {\n+    var correspondences = {\n         \"--resource-suffix\": \"resource_suffix\",\n         \"--doc-folder\": \"doc_folder\",\n         \"--test-folder\": \"test_folder\",\n@@ -423,17 +423,13 @@ function parseOptions(args) {\n     };\n \n     for (var i = 0; i < args.length; ++i) {\n-        if (args[i] === \"--resource-suffix\"\n-            || args[i] === \"--doc-folder\"\n-            || args[i] === \"--test-folder\"\n-            || args[i] === \"--test-file\"\n-            || args[i] === \"--crate-name\") {\n+        if (correspondences.hasOwnProperty(args[i])) {\n             i += 1;\n             if (i >= args.length) {\n                 console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n                 return null;\n             }\n-            opts[correspondances[args[i - 1]]] = args[i];\n+            opts[correspondences[args[i - 1]]] = args[i];\n         } else if (args[i] === \"--help\") {\n             showHelp();\n             process.exit(0);"}, {"sha": "7a9908fe8c0758fcc3047c04b21aa786741d0468", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b99bd8f8be49ba9676d3274fdbd06b2d476adfcd/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=b99bd8f8be49ba9676d3274fdbd06b2d476adfcd", "patch": "@@ -2,6 +2,8 @@\n allow-unauthenticated = [\n     \"C-*\", \"A-*\", \"E-*\", \"NLL-*\", \"O-*\", \"S-*\", \"T-*\", \"WG-*\", \"F-*\",\n     \"D-*\",\n+    \"needs-fcp\",\n+    \"relnotes\",\n     \"requires-nightly\",\n     \"regression-*\",\n     \"perf-*\","}]}