{"sha": "94f11cc3a886ef1a6b057463f300e96f1586ce78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZjExY2MzYTg4NmVmMWE2YjA1NzQ2M2YzMDBlOTZmMTU4NmNlNzg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-23T08:00:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-23T11:44:32Z"}, "message": "Use pcrel pointers in .eh_frame\n\nFixes #1055", "tree": {"sha": "bf1862aba905adc5a41df4ef8b64bdbb9343a893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf1862aba905adc5a41df4ef8b64bdbb9343a893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94f11cc3a886ef1a6b057463f300e96f1586ce78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94f11cc3a886ef1a6b057463f300e96f1586ce78", "html_url": "https://github.com/rust-lang/rust/commit/94f11cc3a886ef1a6b057463f300e96f1586ce78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94f11cc3a886ef1a6b057463f300e96f1586ce78/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f876525132d548bb051b44f9b683c4af3db11e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f876525132d548bb051b44f9b683c4af3db11e", "html_url": "https://github.com/rust-lang/rust/commit/a0f876525132d548bb051b44f9b683c4af3db11e"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "072fdc1f246dada00967b39f82f864cebde00bf6", "filename": "src/backend.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94f11cc3a886ef1a6b057463f300e96f1586ce78/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f11cc3a886ef1a6b057463f300e96f1586ce78/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=94f11cc3a886ef1a6b057463f300e96f1586ce78", "patch": "@@ -68,8 +68,17 @@ impl WriteDebugInfo for ObjectProduct {\n         .into_bytes();\n \n         let segment = self.object.segment_name(StandardSegment::Debug).to_vec();\n-        let section_id = self.object.add_section(segment, name, SectionKind::Debug);\n-        self.object.section_mut(section_id).set_data(data, 1);\n+        // FIXME use SHT_X86_64_UNWIND for .eh_frame\n+        let section_id = self.object.add_section(segment, name.clone(), if id == SectionId::EhFrame {\n+            SectionKind::ReadOnlyData\n+        } else {\n+            SectionKind::Debug\n+        });\n+        self.object.section_mut(section_id).set_data(data, if id == SectionId::EhFrame {\n+            8\n+        } else {\n+            1\n+        });\n         let symbol_id = self.object.section_symbol(section_id);\n         (section_id, symbol_id)\n     }\n@@ -95,7 +104,7 @@ impl WriteDebugInfo for ObjectProduct {\n                 Relocation {\n                     offset: u64::from(reloc.offset),\n                     symbol,\n-                    kind: RelocationKind::Absolute,\n+                    kind: reloc.kind,\n                     encoding: RelocationEncoding::Generic,\n                     size: reloc.size * 8,\n                     addend: i64::try_from(symbol_offset).unwrap() + reloc.addend,"}, {"sha": "22e284b9df40d65b1a035e9433fc50905c475e80", "filename": "src/debuginfo/emit.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/94f11cc3a886ef1a6b057463f300e96f1586ce78/src%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f11cc3a886ef1a6b057463f300e96f1586ce78/src%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Femit.rs?ref=94f11cc3a886ef1a6b057463f300e96f1586ce78", "patch": "@@ -46,6 +46,7 @@ pub(crate) struct DebugReloc {\n     pub(crate) size: u8,\n     pub(crate) name: DebugRelocName,\n     pub(crate) addend: i64,\n+    pub(crate) kind: object::RelocationKind,\n }\n \n #[derive(Clone)]\n@@ -122,21 +123,21 @@ impl Writer for WriterRelocate {\n                     size,\n                     name: DebugRelocName::Symbol(symbol),\n                     addend: addend as i64,\n+                    kind: object::RelocationKind::Absolute,\n                 });\n                 self.write_udata(0, size)\n             }\n         }\n     }\n \n-    // TODO: implement write_eh_pointer\n-\n     fn write_offset(&mut self, val: usize, section: SectionId, size: u8) -> Result<()> {\n         let offset = self.len() as u32;\n         self.relocs.push(DebugReloc {\n             offset,\n             size,\n             name: DebugRelocName::Section(section),\n             addend: val as i64,\n+            kind: object::RelocationKind::Absolute,\n         });\n         self.write_udata(0, size)\n     }\n@@ -153,7 +154,55 @@ impl Writer for WriterRelocate {\n             size,\n             name: DebugRelocName::Section(section),\n             addend: val as i64,\n+            kind: object::RelocationKind::Absolute,\n         });\n         self.write_udata_at(offset, 0, size)\n     }\n+\n+    fn write_eh_pointer(\n+        &mut self,\n+        address: Address,\n+        eh_pe: gimli::DwEhPe,\n+        size: u8,\n+    ) -> Result<()> {\n+        match address {\n+            // Address::Constant arm copied from gimli\n+            Address::Constant(val) => {\n+                // Indirect doesn't matter here.\n+                let val = match eh_pe.application() {\n+                    gimli::DW_EH_PE_absptr => val,\n+                    gimli::DW_EH_PE_pcrel => {\n+                        // TODO: better handling of sign\n+                        let offset = self.len() as u64;\n+                        offset.wrapping_sub(val)\n+                    }\n+                    _ => {\n+                        return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe));\n+                    }\n+                };\n+                self.write_eh_pointer_data(val, eh_pe.format(), size)\n+            }\n+            Address::Symbol { symbol, addend } => {\n+                match eh_pe.application() {\n+                    gimli::DW_EH_PE_pcrel => {\n+                        let size = match eh_pe.format() {\n+                            gimli::DW_EH_PE_sdata4 => 4,\n+                            _ => return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe)),\n+                        };\n+                        self.relocs.push(DebugReloc {\n+                            offset: self.len() as u32,\n+                            size,\n+                            name: DebugRelocName::Symbol(symbol),\n+                            addend,\n+                            kind: object::RelocationKind::Relative,\n+                        });\n+                        self.write_udata(0, size)\n+                    }\n+                    _ => {\n+                        return Err(gimli::write::Error::UnsupportedPointerEncoding(eh_pe));\n+                    }\n+                }\n+            }\n+        }\n+    }\n }"}, {"sha": "39a951e5eca472e5ef5a9c9f9f30d47a51a8a97c", "filename": "src/debuginfo/unwind.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94f11cc3a886ef1a6b057463f300e96f1586ce78/src%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f11cc3a886ef1a6b057463f300e96f1586ce78/src%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Funwind.rs?ref=94f11cc3a886ef1a6b057463f300e96f1586ce78", "patch": "@@ -16,7 +16,10 @@ impl<'tcx> UnwindContext<'tcx> {\n     pub(crate) fn new(tcx: TyCtxt<'tcx>, isa: &dyn TargetIsa) -> Self {\n         let mut frame_table = FrameTable::default();\n \n-        let cie_id = if let Some(cie) = isa.create_systemv_cie() {\n+        let cie_id = if let Some(mut cie) = isa.create_systemv_cie() {\n+            if isa.flags().is_pic() {\n+                cie.fde_address_encoding = gimli::DwEhPe(gimli::DW_EH_PE_pcrel.0 | gimli::DW_EH_PE_sdata4.0);\n+            }\n             Some(frame_table.add_cie(cie))\n         } else {\n             None"}]}