{"sha": "b9f756416a02fe3fd1c145fc081494b68f494f76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5Zjc1NjQxNmEwMmZlM2ZkMWMxNDVmYzA4MTQ5NGI2OGY0OTRmNzY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-01-30T14:20:57Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-01-30T17:00:27Z"}, "message": "Do not ignore lifetime bounds in Copy impls\n\nCloses #29149", "tree": {"sha": "3b7b010931eb642b083bccefc499a8cfde3bbf9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b7b010931eb642b083bccefc499a8cfde3bbf9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9f756416a02fe3fd1c145fc081494b68f494f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9f756416a02fe3fd1c145fc081494b68f494f76", "html_url": "https://github.com/rust-lang/rust/commit/b9f756416a02fe3fd1c145fc081494b68f494f76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9f756416a02fe3fd1c145fc081494b68f494f76/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe7e1a45f37f4265434cead827f587e75412f85c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7e1a45f37f4265434cead827f587e75412f85c", "html_url": "https://github.com/rust-lang/rust/commit/fe7e1a45f37f4265434cead827f587e75412f85c"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "cebdd4d2826aac669e0e9bd058014dda9def9839", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b9f756416a02fe3fd1c145fc081494b68f494f76/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f756416a02fe3fd1c145fc081494b68f494f76/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=b9f756416a02fe3fd1c145fc081494b68f494f76", "patch": "@@ -374,13 +374,20 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             }\n         };\n         if let PlaceContext::Copy = context {\n-            let ty = place_ty.to_ty(self.tcx());\n-            if self.cx\n-                .infcx\n-                .type_moves_by_default(self.cx.param_env, ty, DUMMY_SP)\n-            {\n-                span_mirbug!(self, place, \"attempted copy of non-Copy type ({:?})\", ty);\n-            }\n+            let tcx = self.tcx();\n+            let trait_ref = ty::TraitRef {\n+                def_id: tcx.lang_items().copy_trait().unwrap(),\n+                substs: tcx.mk_substs_trait(place_ty.to_ty(tcx), &[]),\n+            };\n+\n+            // In order to have a Copy operand, the type T of the value must be Copy. Note that we\n+            // prove that T: Copy, rather than using the type_moves_by_default test. This is\n+            // important because type_moves_by_default ignores the resulting region obligations and\n+            // assumes they pass. This can result in bounds from Copy impls being unsoundly ignored\n+            // (e.g., #29149). Note that we decide to use Copy before knowing whether the bounds\n+            // fully apply: in effect, the rule is that if a value of some type could implement\n+            // Copy, then it must.\n+            self.cx.prove_trait_ref(trait_ref, location);\n         }\n         place_ty\n     }"}, {"sha": "2a4295fd90a264c2513b6007894d21b612e5331d", "filename": "src/test/compile-fail/nll/do-not-ignore-lifetime-bounds-in-copy.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b9f756416a02fe3fd1c145fc081494b68f494f76/src%2Ftest%2Fcompile-fail%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9f756416a02fe3fd1c145fc081494b68f494f76/src%2Ftest%2Fcompile-fail%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy.rs?ref=b9f756416a02fe3fd1c145fc081494b68f494f76", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the 'static bound from the Copy impl is respected. Regression test for #29149.\n+\n+#![feature(nll)]\n+\n+#[derive(Clone)] struct Foo<'a>(&'a u32);\n+impl Copy for Foo<'static> {}\n+\n+fn main() {\n+    let s = 2;\n+    let a = Foo(&s); //~ ERROR `s` does not live long enough [E0597]\n+    drop(a);\n+    drop(a);\n+}"}]}