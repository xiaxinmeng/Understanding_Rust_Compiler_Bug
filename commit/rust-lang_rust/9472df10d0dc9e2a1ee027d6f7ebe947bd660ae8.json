{"sha": "9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8", "node_id": "C_kwDOAAsO6NoAKDk0NzJkZjEwZDBkYzllMmExZWUwMjdkNmY3ZWJlOTQ3YmQ2NjBhZTg", "commit": {"author": {"name": "Jean CASPAR", "email": "55629512+JeanCASPAR@users.noreply.github.com", "date": "2022-08-19T12:55:06Z"}, "committer": {"name": "Jean CASPAR", "email": "55629512+JeanCASPAR@users.noreply.github.com", "date": "2022-08-22T17:24:14Z"}, "message": "Changes made in response to feedback", "tree": {"sha": "cdd8e51fe3fcd150c12d3cd840fe484e35065df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdd8e51fe3fcd150c12d3cd840fe484e35065df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8", "html_url": "https://github.com/rust-lang/rust/commit/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8/comments", "author": {"login": "JeanCASPAR", "id": 55629512, "node_id": "MDQ6VXNlcjU1NjI5NTEy", "avatar_url": "https://avatars.githubusercontent.com/u/55629512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeanCASPAR", "html_url": "https://github.com/JeanCASPAR", "followers_url": "https://api.github.com/users/JeanCASPAR/followers", "following_url": "https://api.github.com/users/JeanCASPAR/following{/other_user}", "gists_url": "https://api.github.com/users/JeanCASPAR/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeanCASPAR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeanCASPAR/subscriptions", "organizations_url": "https://api.github.com/users/JeanCASPAR/orgs", "repos_url": "https://api.github.com/users/JeanCASPAR/repos", "events_url": "https://api.github.com/users/JeanCASPAR/events{/privacy}", "received_events_url": "https://api.github.com/users/JeanCASPAR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeanCASPAR", "id": 55629512, "node_id": "MDQ6VXNlcjU1NjI5NTEy", "avatar_url": "https://avatars.githubusercontent.com/u/55629512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeanCASPAR", "html_url": "https://github.com/JeanCASPAR", "followers_url": "https://api.github.com/users/JeanCASPAR/followers", "following_url": "https://api.github.com/users/JeanCASPAR/following{/other_user}", "gists_url": "https://api.github.com/users/JeanCASPAR/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeanCASPAR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeanCASPAR/subscriptions", "organizations_url": "https://api.github.com/users/JeanCASPAR/orgs", "repos_url": "https://api.github.com/users/JeanCASPAR/repos", "events_url": "https://api.github.com/users/JeanCASPAR/events{/privacy}", "received_events_url": "https://api.github.com/users/JeanCASPAR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e701c72a631ca443d16d7d37a4ccb584db93ef41", "url": "https://api.github.com/repos/rust-lang/rust/commits/e701c72a631ca443d16d7d37a4ccb584db93ef41", "html_url": "https://github.com/rust-lang/rust/commit/e701c72a631ca443d16d7d37a4ccb584db93ef41"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "0dba9da63da2a03d0d18c3ccfe2697d5b672252e", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8", "patch": "@@ -124,22 +124,28 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .iter()\n             .map(|(op, op_sp)| {\n                 let lower_reg = |reg| match reg {\n-                    InlineAsmRegOrRegClass::Reg(s) => {\n+                    InlineAsmRegOrRegClass::Reg(reg) => {\n                         asm::InlineAsmRegOrRegClass::Reg(if let Some(asm_arch) = asm_arch {\n-                            asm::InlineAsmReg::parse(asm_arch, s).unwrap_or_else(|e| {\n-                                sess.emit_err(InvalidRegister { op_span: *op_sp, s, e });\n+                            asm::InlineAsmReg::parse(asm_arch, reg).unwrap_or_else(|error| {\n+                                sess.emit_err(InvalidRegister { op_span: *op_sp, reg, error });\n                                 asm::InlineAsmReg::Err\n                             })\n                         } else {\n                             asm::InlineAsmReg::Err\n                         })\n                     }\n-                    InlineAsmRegOrRegClass::RegClass(s) => {\n+                    InlineAsmRegOrRegClass::RegClass(reg_class) => {\n                         asm::InlineAsmRegOrRegClass::RegClass(if let Some(asm_arch) = asm_arch {\n-                            asm::InlineAsmRegClass::parse(asm_arch, s).unwrap_or_else(|e| {\n-                                sess.emit_err(InvalidRegisterClass { op_span: *op_sp, s, e });\n-                                asm::InlineAsmRegClass::Err\n-                            })\n+                            asm::InlineAsmRegClass::parse(asm_arch, reg_class).unwrap_or_else(\n+                                |error| {\n+                                    sess.emit_err(InvalidRegisterClass {\n+                                        op_span: *op_sp,\n+                                        reg_class,\n+                                        error,\n+                                    });\n+                                    asm::InlineAsmRegClass::Err\n+                                },\n+                            )\n                         } else {\n                             asm::InlineAsmRegClass::Err\n                         })"}, {"sha": "edc7ac9fbe383c4c518e1bef32e5beceecc518ae", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{fluent, AddSubdiagnostic, Applicability, Diagnostic};\n+use rustc_errors::{fluent, AddSubdiagnostic, Applicability, Diagnostic, DiagnosticArgFromDisplay};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n@@ -73,10 +73,10 @@ impl AddSubdiagnostic for AssocTyParenthesesSub {\n \n #[derive(SessionDiagnostic)]\n #[diag(ast_lowering::misplaced_impl_trait, code = \"E0562\")]\n-pub struct MisplacedImplTrait {\n+pub struct MisplacedImplTrait<'a> {\n     #[primary_span]\n     pub span: Span,\n-    pub position: String,\n+    pub position: DiagnosticArgFromDisplay<'a>,\n }\n \n #[derive(SessionDiagnostic, Clone, Copy)]\n@@ -196,17 +196,17 @@ pub struct InvalidAbiClobberAbi {\n pub struct InvalidRegister<'a> {\n     #[primary_span]\n     pub op_span: Span,\n-    pub s: Symbol,\n-    pub e: &'a str,\n+    pub reg: Symbol,\n+    pub error: &'a str,\n }\n \n #[derive(SessionDiagnostic, Clone, Copy)]\n #[error(ast_lowering::invalid_register_class)]\n pub struct InvalidRegisterClass<'a> {\n     #[primary_span]\n     pub op_span: Span,\n-    pub s: Symbol,\n-    pub e: &'a str,\n+    pub reg_class: Symbol,\n+    pub error: &'a str,\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "ed28f81f88ead800a80e97a93729f092cab2cdd6", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8", "patch": "@@ -51,7 +51,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Handler, StashKey};\n+use rustc_errors::{DiagnosticArgFromDisplay, Handler, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, LifetimeRes, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -1334,7 +1334,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     ImplTraitContext::Disallowed(position) => {\n                         self.tcx.sess.emit_err(MisplacedImplTrait {\n                             span: t.span,\n-                            position: position.to_string(),\n+                            position: DiagnosticArgFromDisplay(&position),\n                         });\n                         hir::TyKind::Err\n                     }"}, {"sha": "dcb1e2b08306fe65b23864db9ab851ba9ee1bb65", "filename": "compiler/rustc_error_messages/locales/en-US/ast_lowering.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl?ref=9472df10d0dc9e2a1ee027d6f7ebe947bd660ae8", "patch": "@@ -69,10 +69,10 @@ ast_lowering_invalid_abi_clobber_abi =\n     .note = the following ABIs are supported on this target: {$supported_abis}\n \n ast_lowering_invalid_register =\n-    invalid register `{$s}`: {$e}\n+    invalid register `{$reg}`: {$error}\n \n ast_lowering_invalid_register_class =\n-    invalid register class `{$s}`: {$e}\n+    invalid register class `{$reg_class}`: {$error}\n \n ast_lowering_invalid_asm_template_modifier_reg_class =\n     invalid asm template modifier for this register class"}]}