{"sha": "5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "node_id": "C_kwDOAAsO6NoAKDVmY2NjZDE3MzlhMGM2N2UzZmI5MTliYTc0OTFiMzk2NmM1Zjc3NWE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-23T07:47:11Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-23T10:34:33Z"}, "message": "use NonHirLiteral instead of ScalarLiteral, move pattern related code to pat_is_poly in IsThirPolymorphic", "tree": {"sha": "53c0e4b39117ea80f4060a43452d4ea911849aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c0e4b39117ea80f4060a43452d4ea911849aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "html_url": "https://github.com/rust-lang/rust/commit/5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7f1380f60f1c6f5cc530827fb04d240a58ae46", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7f1380f60f1c6f5cc530827fb04d240a58ae46", "html_url": "https://github.com/rust-lang/rust/commit/5e7f1380f60f1c6f5cc530827fb04d240a58ae46"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "170a49124c65673ad8491d2b80958f78ce0f5c11", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -413,7 +413,7 @@ pub enum ExprKind<'tcx> {\n         neg: bool,\n     },\n     /// For literals that don't correspond to anything in the HIR\n-    ScalarLiteral {\n+    NonHirLiteral {\n         lit: ty::ScalarInt,\n         user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n     },\n@@ -454,7 +454,7 @@ pub enum ExprKind<'tcx> {\n \n impl<'tcx> ExprKind<'tcx> {\n     pub fn zero_sized_literal(user_ty: Option<Canonical<'tcx, UserType<'tcx>>>) -> Self {\n-        ExprKind::ScalarLiteral { lit: ty::ScalarInt::ZST, user_ty }\n+        ExprKind::NonHirLiteral { lit: ty::ScalarInt::ZST, user_ty }\n     }\n }\n "}, {"sha": "451fa4663877128b9889e467ad331acb33f06ab6", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -119,7 +119,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n         }\n         Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } => {}\n         Literal { lit: _, neg: _ } => {}\n-        ScalarLiteral { lit: _, user_ty: _ } => {}\n+        NonHirLiteral { lit: _, user_ty: _ } => {}\n         NamedConst { def_id: _, substs: _, user_ty: _ } => {}\n         ConstParam { param: _, def_id: _ } => {}\n         StaticRef { alloc_id: _, ty: _, def_id: _ } => {}"}, {"sha": "f83b974437e7c62ba42ce346178c4875dfe9aa00", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 Constant { span, user_ty: None, literal: literal.into() }\n             }\n-            ExprKind::ScalarLiteral { lit, user_ty } => {\n+            ExprKind::NonHirLiteral { lit, user_ty } => {\n                 let user_ty = user_ty.map(|user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,"}, {"sha": "10d241ee24cf4cb991cdff89c84884d8ee519daf", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -567,7 +567,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Return { .. }\n             | ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }\n-            | ExprKind::ScalarLiteral { .. }\n+            | ExprKind::NonHirLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ConstBlock { .. }\n             | ExprKind::StaticRef { .. }"}, {"sha": "3f8a1a3f7950460a81598cb5bbf6104821bf6916", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -328,7 +328,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Yield { .. }\n             | ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }\n-            | ExprKind::ScalarLiteral { .. }\n+            | ExprKind::NonHirLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ConstBlock { .. }\n             | ExprKind::StaticRef { .. }"}, {"sha": "6067da2f69b489f9208ab2eb3ee5938ce030c4fc", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -70,8 +70,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     local_decl.local_info =\n                         Some(Box::new(LocalInfo::StaticRef { def_id, is_thread_local: true }));\n                 }\n-                // FIXME Might have to include `ExprKind::ConstParam` here as well\n-                ExprKind::NamedConst { def_id, .. } => {\n+                ExprKind::NamedConst { def_id, .. } | ExprKind::ConstParam { def_id, .. } => {\n                     local_decl.local_info = Some(Box::new(LocalInfo::ConstRef { def_id }));\n                 }\n                 _ => {}"}, {"sha": "bcece39c6206eb00cf180cca44220f6ed1855c27", "filename": "compiler/rustc_mir_build/src/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -71,7 +71,7 @@ impl Category {\n \n             ExprKind::ConstBlock { .. }\n             | ExprKind::Literal { .. }\n-            | ExprKind::ScalarLiteral { .. }\n+            | ExprKind::NonHirLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::NamedConst { .. } => Some(Category::Constant),"}, {"sha": "a8f623dbe469309a25bca4b83dc2690af1cf917a", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -534,7 +534,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::ConstBlock { .. }\n             | ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }\n-            | ExprKind::ScalarLiteral { .. }\n+            | ExprKind::NonHirLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ThreadLocalRef(_)\n             | ExprKind::StaticRef { .. } => {"}, {"sha": "eadce3dc9c4679a36b310450f38b4b0ce7206b8a", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -304,7 +304,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             | ExprKind::Borrow { .. }\n             | ExprKind::Literal { .. }\n             | ExprKind::NamedConst { .. }\n-            | ExprKind::ScalarLiteral { .. }\n+            | ExprKind::NonHirLiteral { .. }\n             | ExprKind::ConstParam { .. }\n             | ExprKind::ConstBlock { .. }\n             | ExprKind::Deref { .. }"}, {"sha": "cab5fcd179b47a217e1920ed1585c19848a15855", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -695,7 +695,7 @@ impl<'tcx> Cx<'tcx> {\n                             })\n                             .size;\n                         let lit = ScalarInt::try_from_uint(offset as u128, size).unwrap();\n-                        let kind = ExprKind::ScalarLiteral { lit, user_ty: None };\n+                        let kind = ExprKind::NonHirLiteral { lit, user_ty: None };\n                         let offset = self.thir.exprs.push(Expr {\n                             temp_lifetime,\n                             ty: var_ty,"}, {"sha": "676f7ee53ec7a2b4a6bc5a7f9168a8e726abe988", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fcccd1739a0c67e3fb919ba7491b3966c5f775a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=5fcccd1739a0c67e3fb919ba7491b3966c5f775a", "patch": "@@ -337,6 +337,20 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                     _ => false,\n                 }\n             }\n+\n+            fn pat_is_poly(&mut self, pat: &thir::Pat<'tcx>) -> bool {\n+                if pat.ty.has_param_types_or_consts() {\n+                    return true;\n+                }\n+\n+                match pat.kind.as_ref() {\n+                    thir::PatKind::Constant { value } => value.has_param_types_or_consts(),\n+                    thir::PatKind::Range(thir::PatRange { lo, hi, .. }) => {\n+                        lo.has_param_types_or_consts() || hi.has_param_types_or_consts()\n+                    }\n+                    _ => false,\n+                }\n+            }\n         }\n \n         impl<'a, 'tcx> visit::Visitor<'a, 'tcx> for IsThirPolymorphic<'a, 'tcx> {\n@@ -354,18 +368,9 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n             #[instrument(skip(self), level = \"debug\")]\n             fn visit_pat(&mut self, pat: &thir::Pat<'tcx>) {\n-                self.is_poly |= pat.ty.has_param_types_or_consts();\n+                self.is_poly |= self.pat_is_poly(pat);\n                 if !self.is_poly {\n-                    match pat.kind.as_ref() {\n-                        thir::PatKind::Constant { value } => {\n-                            self.is_poly |= value.has_param_types_or_consts();\n-                        }\n-                        thir::PatKind::Range(thir::PatRange { lo, hi, .. }) => {\n-                            self.is_poly |=\n-                                lo.has_param_types_or_consts() | hi.has_param_types_or_consts();\n-                        }\n-                        _ => visit::walk_pat(self, pat),\n-                    }\n+                    visit::walk_pat(self, pat);\n                 }\n             }\n         }\n@@ -443,7 +448,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n                 self.nodes.push(Node::Leaf(constant))\n             }\n-            &ExprKind::ScalarLiteral { lit , user_ty: _} => {\n+            &ExprKind::NonHirLiteral { lit , user_ty: _} => {\n                 // FIXME Construct a Valtree from this ScalarInt when introducing Valtrees\n                 let const_value = ConstValue::Scalar(Scalar::Int(lit));\n                 self.nodes.push(Node::Leaf(ty::Const::from_value(self.tcx, const_value, node.ty)))"}]}