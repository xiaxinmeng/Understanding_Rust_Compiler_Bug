{"sha": "ce27752a69df6093ec0d104a7ecce755983a0f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMjc3NTJhNjlkZjYwOTNlYzBkMTA0YTdlY2NlNzU1OTgzYTBmNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-26T18:46:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-26T18:46:13Z"}, "message": "auto merge of #8488 : klutzy/rust/mingw-w64, r=brson\n\nThis patchset enables rustc to cross-build mingw-w64 outputs.\r\nTested on mingw + mingw-w64 (mingw-builds, win64/seh/win32-threads/gcc-4.8.1).\r\n\r\nI also patched llvm to support Win64 stack unwinding.\r\nhttps://github.com/klutzy/llvm/commit/ebe22bdbcebc4f8342c4c7c50e3b61fa6c68c1ad\r\n\r\nI cross-built test/run-pass/smallest-hello-world.rs and confirmed it works.\r\nHowever, I also found something went wrong if I don't have custom `#[start]` routine.", "tree": {"sha": "9f81660a9117b57830d18b659d1dbfe1b3dc6fb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f81660a9117b57830d18b659d1dbfe1b3dc6fb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce27752a69df6093ec0d104a7ecce755983a0f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce27752a69df6093ec0d104a7ecce755983a0f78", "html_url": "https://github.com/rust-lang/rust/commit/ce27752a69df6093ec0d104a7ecce755983a0f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce27752a69df6093ec0d104a7ecce755983a0f78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36b511558595a49b8c091937915d7616c2d62f14", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b511558595a49b8c091937915d7616c2d62f14", "html_url": "https://github.com/rust-lang/rust/commit/36b511558595a49b8c091937915d7616c2d62f14"}, {"sha": "442f4a5f2ca6f7f4082c09968e0fd83601a50d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a", "html_url": "https://github.com/rust-lang/rust/commit/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a"}], "stats": {"total": 537, "additions": 497, "deletions": 40}, "files": [{"sha": "1fc682912b35f38af8c22ec3bf9d056d6f6e9168", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -2370,7 +2370,12 @@ pub fn create_entry_wrapper(ccx: @mut CrateContext,\n             decl_cdecl_fn(ccx.llmod, \"amain\", llfty)\n         } else {\n             let main_name = match ccx.sess.targ_cfg.os {\n-                session::os_win32 => ~\"WinMain@16\",\n+                session::os_win32 => {\n+                    match ccx.sess.targ_cfg.arch {\n+                        X86 => ~\"WinMain@16\",\n+                        _ => ~\"WinMain\",\n+                    }\n+                },\n                 _ => ~\"main\",\n             };\n             decl_cdecl_fn(ccx.llmod, main_name, llfty)"}, {"sha": "e3f88033bd06bc74296c46e91e9d7b9d97a571ee", "filename": "src/libstd/io.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -53,7 +53,7 @@ use container::Container;\n use int;\n use iterator::Iterator;\n use libc::consts::os::posix88::*;\n-use libc::{c_int, c_long, c_void, size_t, ssize_t};\n+use libc::{c_int, c_void, size_t};\n use libc;\n use num;\n use ops::Drop;\n@@ -970,7 +970,7 @@ impl Reader for *libc::FILE {\n \n         unsafe {\n             assert!(libc::fseek(*self,\n-                                     offset as c_long,\n+                                     offset as libc::c_long,\n                                      convert_whence(whence)) == 0 as c_int);\n         }\n     }\n@@ -1199,7 +1199,7 @@ impl Writer for *libc::FILE {\n \n         unsafe {\n             assert!(libc::fseek(*self,\n-                                     offset as c_long,\n+                                     offset as libc::c_long,\n                                      convert_whence(whence)) == 0 as c_int);\n         }\n     }\n@@ -1240,13 +1240,23 @@ impl Writer for fd_t {\n     fn write(&self, v: &[u8]) {\n         #[fixed_stack_segment]; #[inline(never)];\n \n+        #[cfg(windows)]\n+        type IoSize = libc::c_uint;\n+        #[cfg(windows)]\n+        type IoRet = c_int;\n+\n+        #[cfg(unix)]\n+        type IoSize = size_t;\n+        #[cfg(unix)]\n+        type IoRet = libc::ssize_t;\n+\n         unsafe {\n             let mut count = 0u;\n             do v.as_imm_buf |vbuf, len| {\n                 while count < len {\n                     let vb = ptr::offset(vbuf, count as int) as *c_void;\n-                    let nout = libc::write(*self, vb, len as size_t);\n-                    if nout < 0 as ssize_t {\n+                    let nout = libc::write(*self, vb, len as IoSize);\n+                    if nout < 0 as IoRet {\n                         error!(\"error writing buffer\");\n                         error!(\"%s\", os::last_os_error());\n                         fail!();"}, {"sha": "790dc886c0497d94f010622fa53d78213ee8cf1e", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 272, "deletions": 0, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -764,6 +764,172 @@ pub mod types {\n                 pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n             }\n         }\n+\n+        #[cfg(target_arch = \"x86_64\")]\n+        pub mod arch {\n+            pub mod c95 {\n+                pub type c_char = i8;\n+                pub type c_schar = i8;\n+                pub type c_uchar = u8;\n+                pub type c_short = i16;\n+                pub type c_ushort = u16;\n+                pub type c_int = i32;\n+                pub type c_uint = u32;\n+                pub type c_long = i32;\n+                pub type c_ulong = u32;\n+                pub type c_float = f32;\n+                pub type c_double = f64;\n+                pub type size_t = u64;\n+                pub type ptrdiff_t = i64;\n+                pub type clock_t = i32;\n+                pub type time_t = i64;\n+                pub type wchar_t = u16;\n+            }\n+            pub mod c99 {\n+                pub type c_longlong = i64;\n+                pub type c_ulonglong = u64;\n+                pub type intptr_t = int;\n+                pub type uintptr_t = uint;\n+            }\n+            pub mod posix88 {\n+                pub type off_t = i32; // XXX unless _FILE_OFFSET_BITS == 64\n+                pub type dev_t = u32;\n+                pub type ino_t = i16;\n+                pub type pid_t = i64;\n+                pub type useconds_t = u32;\n+                pub type mode_t = u16;\n+                pub type ssize_t = i64;\n+            }\n+            pub mod posix01 {\n+            }\n+            pub mod posix08 {\n+            }\n+            pub mod bsd44 {\n+            }\n+            pub mod extra {\n+                use ptr;\n+                use libc::types::common::c95::c_void;\n+                use libc::types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n+                use libc::types::os::arch::c95::{c_ulong};\n+                use libc::types::os::arch::c95::{wchar_t};\n+                use libc::types::os::arch::c99::{c_ulonglong};\n+\n+                pub type BOOL = c_int;\n+                pub type BYTE = u8;\n+                pub type CCHAR = c_char;\n+                pub type CHAR = c_char;\n+\n+                pub type DWORD = c_ulong;\n+                pub type DWORDLONG = c_ulonglong;\n+\n+                pub type HANDLE = LPVOID;\n+                pub type HMODULE = c_uint;\n+\n+                pub type LONG_PTR = i64; // changed\n+\n+                pub type LPCWSTR = *WCHAR;\n+                pub type LPCSTR = *CHAR;\n+                pub type LPCTSTR = *CHAR;\n+                pub type LPTCH = *CHAR;\n+\n+                pub type LPWSTR = *mut WCHAR;\n+                pub type LPSTR = *mut CHAR;\n+                pub type LPTSTR = *mut CHAR;\n+\n+                // Not really, but opaque to us.\n+                pub type LPSECURITY_ATTRIBUTES = LPVOID;\n+\n+                pub type LPVOID = *mut c_void;\n+                pub type LPCVOID = *c_void;\n+                pub type LPBYTE = *mut BYTE;\n+                pub type LPWORD = *mut WORD;\n+                pub type LPDWORD = *mut DWORD;\n+                pub type LPHANDLE = *mut HANDLE;\n+\n+                pub type LRESULT = LONG_PTR;\n+                pub type PBOOL = *mut BOOL;\n+                pub type WCHAR = wchar_t;\n+                pub type WORD = u16;\n+                pub type SIZE_T = size_t;\n+\n+                pub type time64_t = i64;\n+                pub type int64 = i64;\n+\n+                pub struct STARTUPINFO {\n+                    cb: DWORD,\n+                    lpReserved: LPTSTR,\n+                    lpDesktop: LPTSTR,\n+                    lpTitle: LPTSTR,\n+                    dwX: DWORD,\n+                    dwY: DWORD,\n+                    dwXSize: DWORD,\n+                    dwYSize: DWORD,\n+                    dwXCountChars: DWORD,\n+                    dwYCountCharts: DWORD,\n+                    dwFillAttribute: DWORD,\n+                    dwFlags: DWORD,\n+                    wShowWindow: WORD,\n+                    cbReserved2: WORD,\n+                    lpReserved2: LPBYTE,\n+                    hStdInput: HANDLE,\n+                    hStdOutput: HANDLE,\n+                    hStdError: HANDLE\n+                }\n+                pub type LPSTARTUPINFO = *mut STARTUPINFO;\n+\n+                pub struct PROCESS_INFORMATION {\n+                    hProcess: HANDLE,\n+                    hThread: HANDLE,\n+                    dwProcessId: DWORD,\n+                    dwThreadId: DWORD\n+                }\n+                pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n+\n+                pub struct SYSTEM_INFO {\n+                    wProcessorArchitecture: WORD,\n+                    wReserved: WORD,\n+                    dwPageSize: DWORD,\n+                    lpMinimumApplicationAddress: LPVOID,\n+                    lpMaximumApplicationAddress: LPVOID,\n+                    dwActiveProcessorMask: DWORD,\n+                    dwNumberOfProcessors: DWORD,\n+                    dwProcessorType: DWORD,\n+                    dwAllocationGranularity: DWORD,\n+                    wProcessorLevel: WORD,\n+                    wProcessorRevision: WORD\n+                }\n+                pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n+\n+                impl SYSTEM_INFO {\n+                    pub fn new() -> SYSTEM_INFO {\n+                        SYSTEM_INFO {\n+                            wProcessorArchitecture: 0,\n+                            wReserved: 0,\n+                            dwPageSize: 0,\n+                            lpMinimumApplicationAddress: ptr::mut_null(),\n+                            lpMaximumApplicationAddress: ptr::mut_null(),\n+                            dwActiveProcessorMask: 0,\n+                            dwNumberOfProcessors: 0,\n+                            dwProcessorType: 0,\n+                            dwAllocationGranularity: 0,\n+                            wProcessorLevel: 0,\n+                            wProcessorRevision: 0\n+                        }\n+                    }\n+                }\n+\n+                pub struct MEMORY_BASIC_INFORMATION {\n+                    BaseAddress: LPVOID,\n+                    AllocationBase: LPVOID,\n+                    AllocationProtect: DWORD,\n+                    RegionSize: SIZE_T,\n+                    State: DWORD,\n+                    Protect: DWORD,\n+                    Type: DWORD\n+                }\n+                pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n+            }\n+        }\n     }\n \n     #[cfg(target_os = \"macos\")]\n@@ -3093,6 +3259,7 @@ pub mod funcs {\n                                                LPSYSTEM_INFO};\n             use libc::types::os::arch::extra::{HANDLE, LPHANDLE};\n \n+            #[cfg(target_arch = \"x86\")]\n             #[abi = \"stdcall\"]\n             extern \"stdcall\" {\n                 pub fn GetEnvironmentVariableW(n: LPCWSTR,\n@@ -3197,6 +3364,111 @@ pub mod funcs {\n                                      -> LPVOID;\n                 pub fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n             }\n+\n+            #[cfg(target_arch = \"x86_64\")]\n+            extern {\n+                pub fn GetEnvironmentVariableW(n: LPCWSTR,\n+                                               v: LPWSTR,\n+                                               nsize: DWORD)\n+                                               -> DWORD;\n+                pub fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)\n+                                               -> BOOL;\n+                pub fn GetEnvironmentStringsA() -> LPTCH;\n+                pub fn FreeEnvironmentStringsA(env_ptr: LPTCH) -> BOOL;\n+                pub fn GetModuleFileNameW(hModule: HMODULE,\n+                                          lpFilename: LPWSTR,\n+                                          nSize: DWORD)\n+                                          -> DWORD;\n+                pub fn CreateDirectoryW(lpPathName: LPCWSTR,\n+                                        lpSecurityAttributes:\n+                                        LPSECURITY_ATTRIBUTES)\n+                                        -> BOOL;\n+                pub fn CopyFileW(lpExistingFileName: LPCWSTR,\n+                                        lpNewFileName: LPCWSTR,\n+                                        bFailIfExists: BOOL)\n+                                        -> BOOL;\n+                pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n+                pub fn GetLastError() -> DWORD;\n+                pub fn FindFirstFileW(fileName: *u16, findFileData: HANDLE)\n+                                      -> HANDLE;\n+                pub fn FindNextFileW(findFile: HANDLE, findFileData: HANDLE)\n+                                     -> BOOL;\n+                pub fn FindClose(findFile: HANDLE) -> BOOL;\n+                pub fn DuplicateHandle(hSourceProcessHandle: HANDLE,\n+                                       hSourceHandle: HANDLE,\n+                                       hTargetProcessHandle: HANDLE,\n+                                       lpTargetHandle: LPHANDLE,\n+                                       dwDesiredAccess: DWORD,\n+                                       bInheritHandle: BOOL,\n+                                       dwOptions: DWORD)\n+                                       -> BOOL;\n+                pub fn CloseHandle(hObject: HANDLE) -> BOOL;\n+                pub fn OpenProcess(dwDesiredAccess: DWORD,\n+                                   bInheritHandle: BOOL,\n+                                   dwProcessId: DWORD)\n+                                   -> HANDLE;\n+                pub fn GetCurrentProcess() -> HANDLE;\n+                pub fn CreateProcessA(lpApplicationName: LPCTSTR,\n+                                      lpCommandLine: LPTSTR,\n+                                      lpProcessAttributes:\n+                                      LPSECURITY_ATTRIBUTES,\n+                                      lpThreadAttributes:\n+                                      LPSECURITY_ATTRIBUTES,\n+                                      bInheritHandles: BOOL,\n+                                      dwCreationFlags: DWORD,\n+                                      lpEnvironment: LPVOID,\n+                                      lpCurrentDirectory: LPCTSTR,\n+                                      lpStartupInfo: LPSTARTUPINFO,\n+                                      lpProcessInformation:\n+                                      LPPROCESS_INFORMATION)\n+                                      -> BOOL;\n+                pub fn WaitForSingleObject(hHandle: HANDLE,\n+                                           dwMilliseconds: DWORD)\n+                                           -> DWORD;\n+                pub fn TerminateProcess(hProcess: HANDLE, uExitCode: c_uint)\n+                                        -> BOOL;\n+                pub fn GetExitCodeProcess(hProcess: HANDLE,\n+                                          lpExitCode: LPDWORD)\n+                                          -> BOOL;\n+                pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);\n+                pub fn VirtualAlloc(lpAddress: LPVOID,\n+                                    dwSize: SIZE_T,\n+                                    flAllocationType: DWORD,\n+                                    flProtect: DWORD)\n+                                    -> LPVOID;\n+                pub fn VirtualFree(lpAddress: LPVOID,\n+                                   dwSize: SIZE_T,\n+                                   dwFreeType: DWORD)\n+                                   -> BOOL;\n+                pub fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;\n+                pub fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T)\n+                                     -> BOOL;\n+                pub fn VirtualProtect(lpAddress: LPVOID,\n+                                      dwSize: SIZE_T,\n+                                      flNewProtect: DWORD,\n+                                      lpflOldProtect: LPDWORD)\n+                                      -> BOOL;\n+                pub fn VirtualQuery(lpAddress: LPCVOID,\n+                                    lpBuffer: LPMEMORY_BASIC_INFORMATION,\n+                                    dwLength: SIZE_T)\n+                                    -> SIZE_T;\n+                pub fn CreateFileMappingW(hFile: HANDLE,\n+                                          lpAttributes: LPSECURITY_ATTRIBUTES,\n+                                          flProtect: DWORD,\n+                                          dwMaximumSizeHigh: DWORD,\n+                                          dwMaximumSizeLow: DWORD,\n+                                          lpName: LPCTSTR)\n+                                          -> HANDLE;\n+                pub fn MapViewOfFile(hFileMappingObject: HANDLE,\n+                                     dwDesiredAccess: DWORD,\n+                                     dwFileOffsetHigh: DWORD,\n+                                     dwFileOffsetLow: DWORD,\n+                                     dwNumberOfBytesToMap: SIZE_T)\n+                                     -> LPVOID;\n+                pub fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;\n+            }\n         }\n \n         pub mod msvcrt {"}, {"sha": "e7caf3f23abae8697754909d85ea9a49cb5f23cf", "filename": "src/libstd/os.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -1042,12 +1042,19 @@ pub fn errno() -> uint {\n     #[fixed_stack_segment]; #[inline(never)];\n     use libc::types::os::arch::extra::DWORD;\n \n+    #[cfg(target_arch = \"x86\")]\n     #[link_name = \"kernel32\"]\n     #[abi = \"stdcall\"]\n     extern \"stdcall\" {\n         fn GetLastError() -> DWORD;\n     }\n \n+    #[cfg(target_arch = \"x86_64\")]\n+    #[link_name = \"kernel32\"]\n+    extern {\n+        fn GetLastError() -> DWORD;\n+    }\n+\n     unsafe {\n         GetLastError() as uint\n     }\n@@ -1113,6 +1120,7 @@ pub fn last_os_error() -> ~str {\n         use libc::types::os::arch::extra::LPSTR;\n         use libc::types::os::arch::extra::LPVOID;\n \n+        #[cfg(target_arch = \"x86\")]\n         #[link_name = \"kernel32\"]\n         #[abi = \"stdcall\"]\n         extern \"stdcall\" {\n@@ -1126,6 +1134,19 @@ pub fn last_os_error() -> ~str {\n                               -> DWORD;\n         }\n \n+        #[cfg(target_arch = \"x86_64\")]\n+        #[link_name = \"kernel32\"]\n+        extern {\n+            fn FormatMessageA(flags: DWORD,\n+                              lpSrc: LPVOID,\n+                              msgId: DWORD,\n+                              langId: DWORD,\n+                              buf: LPSTR,\n+                              nsize: DWORD,\n+                              args: *c_void)\n+                              -> DWORD;\n+        }\n+\n         static FORMAT_MESSAGE_FROM_SYSTEM: DWORD = 0x00001000;\n         static FORMAT_MESSAGE_IGNORE_INSERTS: DWORD = 0x00000200;\n \n@@ -1241,21 +1262,34 @@ fn real_args() -> ~[~str] {\n \n type LPCWSTR = *u16;\n \n-#[cfg(windows)]\n+#[cfg(windows, target_arch = \"x86\")]\n #[link_name=\"kernel32\"]\n #[abi=\"stdcall\"]\n extern \"stdcall\" {\n     fn GetCommandLineW() -> LPCWSTR;\n     fn LocalFree(ptr: *c_void);\n }\n \n-#[cfg(windows)]\n+#[cfg(windows, target_arch = \"x86_64\")]\n+#[link_name=\"kernel32\"]\n+extern {\n+    fn GetCommandLineW() -> LPCWSTR;\n+    fn LocalFree(ptr: *c_void);\n+}\n+\n+#[cfg(windows, target_arch = \"x86\")]\n #[link_name=\"shell32\"]\n #[abi=\"stdcall\"]\n extern \"stdcall\" {\n     fn CommandLineToArgvW(lpCmdLine: LPCWSTR, pNumArgs: *mut c_int) -> **u16;\n }\n \n+#[cfg(windows, target_arch = \"x86_64\")]\n+#[link_name=\"shell32\"]\n+extern {\n+    fn CommandLineToArgvW(lpCmdLine: LPCWSTR, pNumArgs: *mut c_int) -> **u16;\n+}\n+\n struct OverriddenArgs {\n     val: ~[~str]\n }"}, {"sha": "476554bf7f7bec7801bf58332bc5ede4e700cbf2", "filename": "src/libstd/rt/context.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcontext.rs?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -47,6 +47,7 @@ impl Context {\n \n         let fp: *c_void = task_start_wrapper as *c_void;\n         let argp: *c_void = unsafe { transmute::<&~fn(), *c_void>(&*start) };\n+        let stack_base: *uint = stack.start();\n         let sp: *uint = stack.end();\n         let sp: *mut uint = unsafe { transmute_mut_unsafe(sp) };\n         // Save and then immediately load the current context,\n@@ -56,7 +57,7 @@ impl Context {\n             swap_registers(transmute_mut_region(&mut *regs), transmute_region(&*regs));\n         };\n \n-        initialize_call_frame(&mut *regs, fp, argp, sp);\n+        initialize_call_frame(&mut *regs, fp, argp, sp, stack_base);\n \n         return Context {\n             start: Some(start),\n@@ -107,7 +108,8 @@ fn new_regs() -> ~Registers {\n }\n \n #[cfg(target_arch = \"x86\")]\n-fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void,\n+                         sp: *mut uint, _stack_base: *uint) {\n \n     let sp = align_down(sp);\n     let sp = mut_offset(sp, -4);\n@@ -123,21 +125,41 @@ fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp:\n     regs.ebp = 0;\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(windows, target_arch = \"x86_64\")]\n+type Registers = [uint, ..34];\n+#[cfg(not(windows), target_arch = \"x86_64\")]\n type Registers = [uint, ..22];\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(windows, target_arch = \"x86_64\")]\n+fn new_regs() -> ~Registers { ~([0, .. 34]) }\n+#[cfg(not(windows), target_arch = \"x86_64\")]\n fn new_regs() -> ~Registers { ~([0, .. 22]) }\n \n #[cfg(target_arch = \"x86_64\")]\n-fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void,\n+                         sp: *mut uint, stack_base: *uint) {\n \n     // Redefinitions from regs.h\n     static RUSTRT_ARG0: uint = 3;\n     static RUSTRT_RSP: uint = 1;\n     static RUSTRT_IP: uint = 8;\n     static RUSTRT_RBP: uint = 2;\n \n+    #[cfg(windows)]\n+    fn initialize_tib(regs: &mut Registers, sp: *mut uint, stack_base: *uint) {\n+        // Redefinitions from regs.h\n+        static RUSTRT_ST1: uint = 11; // stack bottom\n+        static RUSTRT_ST2: uint = 12; // stack top\n+        regs[RUSTRT_ST1] = sp as uint;\n+        regs[RUSTRT_ST2] = stack_base as uint;\n+    }\n+    #[cfg(not(windows))]\n+    fn initialize_tib(_: &mut Registers, _: *mut uint, _: *uint) {\n+    }\n+\n+    // Win64 manages stack range at TIB: %gs:0x08 (top) and %gs:0x10 (bottom)\n+    initialize_tib(regs, sp, stack_base);\n+\n     let sp = align_down(sp);\n     let sp = mut_offset(sp, -1);\n \n@@ -164,7 +186,8 @@ type Registers = [uint, ..32];\n fn new_regs() -> ~Registers { ~([0, .. 32]) }\n \n #[cfg(target_arch = \"arm\")]\n-fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void,\n+                         sp: *mut uint, _stack_base: *uint) {\n     let sp = align_down(sp);\n     // sp of arm eabi is 8-byte aligned\n     let sp = mut_offset(sp, -2);\n@@ -184,7 +207,8 @@ type Registers = [uint, ..32];\n fn new_regs() -> ~Registers { ~([0, .. 32]) }\n \n #[cfg(target_arch = \"mips\")]\n-fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void,\n+                         sp: *mut uint, _stack_base: *uint) {\n     let sp = align_down(sp);\n     // sp of mips o32 is 8-byte aligned\n     let sp = mut_offset(sp, -2);"}, {"sha": "b2c2c670b5558eec4482738cb44789622a9967b0", "filename": "src/libstd/rt/thread_local_storage.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread_local_storage.rs?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -86,14 +86,21 @@ pub unsafe fn get(key: Key) -> *mut c_void {\n     TlsGetValue(key)\n }\n \n-#[cfg(windows)]\n+#[cfg(windows, target_arch = \"x86\")]\n #[abi = \"stdcall\"]\n extern \"stdcall\" {\n        fn TlsAlloc() -> DWORD;\n        fn TlsSetValue(dwTlsIndex: DWORD, lpTlsvalue: LPVOID) -> BOOL;\n        fn TlsGetValue(dwTlsIndex: DWORD) -> LPVOID;\n }\n \n+#[cfg(windows, target_arch = \"x86_64\")]\n+extern {\n+       fn TlsAlloc() -> DWORD;\n+       fn TlsSetValue(dwTlsIndex: DWORD, lpTlsvalue: LPVOID) -> BOOL;\n+       fn TlsGetValue(dwTlsIndex: DWORD) -> LPVOID;\n+}\n+\n #[test]\n fn tls_smoke_test() {\n     use cast::transmute;"}, {"sha": "90cf49cad1ccf2a9553507091bfa31c925ee146b", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -252,6 +252,7 @@ mod dl {\n         FreeLibrary(handle); ()\n     }\n \n+    #[cfg(target_arch = \"x86\")]\n     #[link_name = \"kernel32\"]\n     extern \"stdcall\" {\n         fn SetLastError(error: u32);\n@@ -261,4 +262,15 @@ mod dl {\n         fn GetProcAddress(handle: *libc::c_void, name: *libc::c_char) -> *libc::c_void;\n         fn FreeLibrary(handle: *libc::c_void);\n     }\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    #[link_name = \"kernel32\"]\n+    extern {\n+        fn SetLastError(error: u32);\n+        fn LoadLibraryW(name: *u16) -> *libc::c_void;\n+        fn GetModuleHandleExW(dwFlags: libc::DWORD, name: *u16,\n+                              handle: **libc::c_void) -> *libc::c_void;\n+        fn GetProcAddress(handle: *libc::c_void, name: *libc::c_char) -> *libc::c_void;\n+        fn FreeLibrary(handle: *libc::c_void);\n+    }\n }"}, {"sha": "857fe91c9141b85c1603cedf69433ffa78317eba", "filename": "src/rt/arch/x86_64/_context.S", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Farch%2Fx86_64%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Farch%2Fx86_64%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2F_context.S?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -54,7 +54,7 @@ First four arguments:\n         anyhow.\n */\n \n-#if defined(__APPLE__) || defined(_WIN32)\n+#if defined(__APPLE__)\n #define SWAP_REGISTERS _swap_registers\n #else\n #define SWAP_REGISTERS swap_registers\n@@ -86,16 +86,40 @@ SWAP_REGISTERS:\n         mov %r14, (RUSTRT_R14*8)(ARG0)\n         mov %r15, (RUSTRT_R15*8)(ARG0)\n \n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+        mov %rdi, (RUSTRT_RDI*8)(ARG0)\n+        mov %rsi, (RUSTRT_RSI*8)(ARG0)\n+\n+        // Save stack range\n+        mov %gs:0x08, %r8\n+        mov %r8, (RUSTRT_ST1*8)(ARG0)\n+        mov %gs:0x10, %r9\n+        mov %r9, (RUSTRT_ST2*8)(ARG0)\n+#endif\n+\n         // Save 0th argument register:\n         mov ARG0, (RUSTRT_ARG0*8)(ARG0)\n \n         // Save non-volatile XMM registers:\n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+        movapd %xmm6, (RUSTRT_XMM6*8)(ARG0)\n+        movapd %xmm7, (RUSTRT_XMM7*8)(ARG0)\n+        movapd %xmm8, (RUSTRT_XMM8*8)(ARG0)\n+        movapd %xmm9, (RUSTRT_XMM9*8)(ARG0)\n+        movapd %xmm10, (RUSTRT_XMM10*8)(ARG0)\n+        movapd %xmm11, (RUSTRT_XMM11*8)(ARG0)\n+        movapd %xmm12, (RUSTRT_XMM12*8)(ARG0)\n+        movapd %xmm13, (RUSTRT_XMM13*8)(ARG0)\n+        movapd %xmm14, (RUSTRT_XMM14*8)(ARG0)\n+        movapd %xmm15, (RUSTRT_XMM15*8)(ARG0)\n+#else\n         movapd %xmm0, (RUSTRT_XMM0*8)(ARG0)\n         movapd %xmm1, (RUSTRT_XMM1*8)(ARG0)\n         movapd %xmm2, (RUSTRT_XMM2*8)(ARG0)\n         movapd %xmm3, (RUSTRT_XMM3*8)(ARG0)\n         movapd %xmm4, (RUSTRT_XMM4*8)(ARG0)\n         movapd %xmm5, (RUSTRT_XMM5*8)(ARG0)\n+#endif\n \n         // Restore non-volatile integer registers:\n         //   (including RSP)\n@@ -107,16 +131,40 @@ SWAP_REGISTERS:\n         mov (RUSTRT_R14*8)(ARG1), %r14\n         mov (RUSTRT_R15*8)(ARG1), %r15\n \n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+        mov (RUSTRT_RDI*8)(ARG1), %rdi\n+        mov (RUSTRT_RSI*8)(ARG1), %rsi\n+\n+        // Restore stack range\n+        mov (RUSTRT_ST1*8)(ARG1), %r8\n+        mov %r8, %gs:0x08\n+        mov (RUSTRT_ST2*8)(ARG1), %r9\n+        mov %r9, %gs:0x10\n+#endif\n+\n         // Restore 0th argument register:\n         mov (RUSTRT_ARG0*8)(ARG1), ARG0\n \n         // Restore non-volatile XMM registers:\n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+        movapd (RUSTRT_XMM6*8)(ARG1), %xmm6\n+        movapd (RUSTRT_XMM7*8)(ARG1), %xmm7\n+        movapd (RUSTRT_XMM8*8)(ARG1), %xmm8\n+        movapd (RUSTRT_XMM9*8)(ARG1), %xmm9\n+        movapd (RUSTRT_XMM10*8)(ARG1), %xmm10\n+        movapd (RUSTRT_XMM11*8)(ARG1), %xmm11\n+        movapd (RUSTRT_XMM12*8)(ARG1), %xmm12\n+        movapd (RUSTRT_XMM13*8)(ARG1), %xmm13\n+        movapd (RUSTRT_XMM14*8)(ARG1), %xmm14\n+        movapd (RUSTRT_XMM15*8)(ARG1), %xmm15\n+#else\n         movapd (RUSTRT_XMM0*8)(ARG1), %xmm0\n         movapd (RUSTRT_XMM1*8)(ARG1), %xmm1\n         movapd (RUSTRT_XMM2*8)(ARG1), %xmm2\n         movapd (RUSTRT_XMM3*8)(ARG1), %xmm3\n         movapd (RUSTRT_XMM4*8)(ARG1), %xmm4\n         movapd (RUSTRT_XMM5*8)(ARG1), %xmm5\n+#endif\n \n         // Jump to the instruction pointer\n         // found in regs:"}, {"sha": "dbee5bcdc90a3222e518d9d6fee72391c3a4de82", "filename": "src/rt/arch/x86_64/ccall.S", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Farch%2Fx86_64%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Farch%2Fx86_64%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fccall.S?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -18,10 +18,13 @@\n \n         .text\n \n-#if defined(__APPLE__) || defined(_WIN32)\n+#if defined(__APPLE__)\n .globl ___morestack\n .private_extern MORESTACK\n ___morestack:\n+#elif defined(_WIN32)\n+.globl __morestack\n+__morestack:\n #else\n .globl __morestack\n .hidden __morestack"}, {"sha": "b718c9121c57b8a3d30143c3f0c16508a49ce384", "filename": "src/rt/arch/x86_64/morestack.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -11,7 +11,7 @@\n \n .text\n \n-#if defined(__APPLE__) || defined(_WIN32)\n+#if defined(__APPLE__)\n #define UPCALL_NEW_STACK        _upcall_new_stack\n #define UPCALL_DEL_STACK        _upcall_del_stack\n #define MORESTACK               ___morestack"}, {"sha": "cff47ac378af0e192a739b9382206865263ed52c", "filename": "src/rt/arch/x86_64/regs.h", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Farch%2Fx86_64%2Fregs.h", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Farch%2Fx86_64%2Fregs.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fregs.h?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -18,15 +18,33 @@\n #define RUSTRT_R14   6\n #define RUSTRT_R15   7\n #define RUSTRT_IP    8\n-// Not used, just padding\n-#define RUSTRT_XXX   9\n-#define RUSTRT_XMM0 10\n-#define RUSTRT_XMM1 12\n-#define RUSTRT_XMM2 14\n-#define RUSTRT_XMM3 16\n-#define RUSTRT_XMM4 18\n-#define RUSTRT_XMM5 20\n-#define RUSTRT_MAX  22\n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+    #define RUSTRT_RDI   9\n+    #define RUSTRT_RSI   10\n+    #define RUSTRT_ST1   11\n+    #define RUSTRT_ST2   12\n+    #define RUSTRT_XMM6  14\n+    #define RUSTRT_XMM7  16\n+    #define RUSTRT_XMM8  18\n+    #define RUSTRT_XMM9  20\n+    #define RUSTRT_XMM10 22\n+    #define RUSTRT_XMM11 24\n+    #define RUSTRT_XMM12 26\n+    #define RUSTRT_XMM13 28\n+    #define RUSTRT_XMM14 30\n+    #define RUSTRT_XMM15 32\n+    #define RUSTRT_MAX   34\n+#else\n+    // Not used, just padding\n+    #define RUSTRT_XXX   9\n+    #define RUSTRT_XMM0 10\n+    #define RUSTRT_XMM1 12\n+    #define RUSTRT_XMM2 14\n+    #define RUSTRT_XMM3 16\n+    #define RUSTRT_XMM4 18\n+    #define RUSTRT_XMM5 20\n+    #define RUSTRT_MAX  22\n+#endif\n \n // ARG0 is the register in which the first argument goes.\n // Naturally this depends on your operating system."}, {"sha": "764927759fe684bf17ca0996160340d21b5d5401", "filename": "src/rt/arch/x86_64/sp.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Farch%2Fx86_64%2Fsp.h", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Farch%2Fx86_64%2Fsp.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fsp.h?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -43,6 +43,10 @@ extern \"C\" CDECL ALWAYS_INLINE uintptr_t get_sp_limit() {\n     asm volatile (\n         \"movq %%fs:24, %0\"\n         : \"=r\"(limit));\n+#elif defined(_WIN64)\n+    asm volatile (\n+        \"movq %%gs:0x28, %0\"\n+        : \"=r\"(limit));\n #endif\n \n     return limit;\n@@ -65,6 +69,10 @@ extern \"C\" CDECL ALWAYS_INLINE void record_sp_limit(void *limit) {\n     asm volatile (\n         \"movq %0, %%fs:24\"\n         :: \"r\"(limit));\n+#elif defined(_WIN64)\n+    asm volatile (\n+        \"movq %0, %%gs:0x28\"\n+        :: \"r\"(limit));\n #endif\n }\n "}, {"sha": "7ccb06a3296f4ced2905c390e120e949e6b8f317", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -54,8 +54,18 @@ upcall_call_shim_on_rust_stack(void *args, void *fn_ptr) {\n \n /**********************************************************************/\n \n+#ifdef __SEH__\n+#  define PERSONALITY_FUNC __gxx_personality_seh0\n+#else\n+#  ifdef __USING_SJLJ_EXCEPTIONS__\n+#    define PERSONALITY_FUNC __gxx_personality_sjlj\n+#  else\n+#    define PERSONALITY_FUNC __gxx_personality_v0\n+#  endif\n+#endif\n+\n extern \"C\" _Unwind_Reason_Code\n-__gxx_personality_v0(int version,\n+PERSONALITY_FUNC(int version,\n                      _Unwind_Action actions,\n                      uint64_t exception_class,\n                      _Unwind_Exception *ue_header,\n@@ -72,11 +82,11 @@ struct s_rust_personality_args {\n \n extern \"C\" void\n upcall_s_rust_personality(s_rust_personality_args *args) {\n-    args->retval = __gxx_personality_v0(args->version,\n-                                        args->actions,\n-                                        args->exception_class,\n-                                        args->ue_header,\n-                                        args->context);\n+    args->retval = PERSONALITY_FUNC(args->version,\n+                                    args->actions,\n+                                    args->exception_class,\n+                                    args->ue_header,\n+                                    args->context);\n }\n \n /**"}, {"sha": "c9aa0fd0328356b0d3b376fc575b2ad6420074d4", "filename": "src/rt/vg/valgrind.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Fvg%2Fvalgrind.h", "raw_url": "https://github.com/rust-lang/rust/raw/ce27752a69df6093ec0d104a7ecce755983a0f78/src%2Frt%2Fvg%2Fvalgrind.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fvg%2Fvalgrind.h?ref=ce27752a69df6093ec0d104a7ecce755983a0f78", "patch": "@@ -111,6 +111,7 @@\n #undef PLAT_x86_darwin\n #undef PLAT_amd64_darwin\n #undef PLAT_x86_win32\n+#undef PLAT_amd64_win64\n #undef PLAT_x86_linux\n #undef PLAT_amd64_linux\n #undef PLAT_ppc32_linux\n@@ -125,7 +126,11 @@\n #  define PLAT_amd64_darwin 1\n #elif defined(__MINGW32__) || defined(__CYGWIN32__) \\\n       || (defined(_WIN32) && defined(_M_IX86))\n-#  define PLAT_x86_win32 1\n+#  if defined(__x86_64__)\n+#    define PLAT_amd64_win64 1\n+#  elif defined(__i386__)\n+#    define PLAT_x86_win32 1\n+#  endif\n #elif defined(__linux__) && defined(__i386__)\n #  define PLAT_x86_linux 1\n #elif defined(__linux__) && defined(__x86_64__)\n@@ -349,7 +354,8 @@ valgrind_do_client_request_expr(uintptr_t _zzq_default, uintptr_t _zzq_request,\n \n /* ------------------------ amd64-{linux,darwin} --------------- */\n \n-#if defined(PLAT_amd64_linux)  ||  defined(PLAT_amd64_darwin)\n+#if defined(PLAT_amd64_linux)  ||  defined(PLAT_amd64_darwin) \\\n+    || defined(PLAT_amd64_win64)\n \n typedef\n    struct { \n@@ -3716,14 +3722,14 @@ VALGRIND_PRINTF(const char *format, ...)\n #if defined(NVALGRIND)\n    return 0;\n #else /* NVALGRIND */\n-#if defined(_MSC_VER)\n+#if defined(_MSC_VER) || defined(PLAT_amd64_win64)\n    uintptr_t _qzz_res;\n #else\n    unsigned long _qzz_res;\n #endif\n    va_list vargs;\n    va_start(vargs, format);\n-#if defined(_MSC_VER)\n+#if defined(_MSC_VER) || defined(PLAT_amd64_win64)\n    _qzz_res = VALGRIND_DO_CLIENT_REQUEST_EXPR(0,\n                               VG_USERREQ__PRINTF_VALIST_BY_REF,\n                               (uintptr_t)format,\n@@ -3754,14 +3760,14 @@ VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n #if defined(NVALGRIND)\n    return 0;\n #else /* NVALGRIND */\n-#if defined(_MSC_VER)\n+#if defined(_MSC_VER) || defined(PLAT_amd64_win64)\n    uintptr_t _qzz_res;\n #else\n    unsigned long _qzz_res;\n #endif\n    va_list vargs;\n    va_start(vargs, format);\n-#if defined(_MSC_VER)\n+#if defined(_MSC_VER) || defined(PLAT_amd64_win64)\n    _qzz_res = VALGRIND_DO_CLIENT_REQUEST_EXPR(0,\n                               VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF,\n                               (uintptr_t)format,"}]}