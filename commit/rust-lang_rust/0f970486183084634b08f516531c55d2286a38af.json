{"sha": "0f970486183084634b08f516531c55d2286a38af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOTcwNDg2MTgzMDg0NjM0YjA4ZjUxNjUzMWM1NWQyMjg2YTM4YWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-31T08:40:14Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-25T14:47:35Z"}, "message": "Deduplicate all the ~~things~~ errors", "tree": {"sha": "0737b0dc8ebf45a2508b0627dd7aada93d767b40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0737b0dc8ebf45a2508b0627dd7aada93d767b40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f970486183084634b08f516531c55d2286a38af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f970486183084634b08f516531c55d2286a38af", "html_url": "https://github.com/rust-lang/rust/commit/0f970486183084634b08f516531c55d2286a38af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f970486183084634b08f516531c55d2286a38af/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34232bcaf6f2bdb3ac17d6025c4c68f9798be0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34232bcaf6f2bdb3ac17d6025c4c68f9798be0b", "html_url": "https://github.com/rust-lang/rust/commit/d34232bcaf6f2bdb3ac17d6025c4c68f9798be0b"}], "stats": {"total": 332, "additions": 133, "deletions": 199}, "files": [{"sha": "861d0b2f7e1aef3b3f330dc2098c53faac28fd0b", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -23,6 +23,7 @@ use rustc::mir;\n use rustc::ty::{self, Ty, TyCtxt, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout};\n use rustc::ty::subst::Subst;\n+use rustc::traits::Reveal;\n use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashMap;\n@@ -576,6 +577,16 @@ pub fn const_eval_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n+    if key.param_env.reveal == Reveal::All {\n+        let mut key = key.clone();\n+        key.param_env.reveal = Reveal::UserFacing;\n+        match tcx.const_eval(key) {\n+            // try again with reveal all as requested\n+            Err(ErrorHandled::TooGeneric) => {},\n+            // dedupliate calls\n+            other => return other,\n+        }\n+    }\n     tcx.const_eval_raw(key).and_then(|val| {\n         validate_const(tcx, val, key)\n     })\n@@ -585,6 +596,16 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n+    if key.param_env.reveal == Reveal::All {\n+        let mut key = key.clone();\n+        key.param_env.reveal = Reveal::UserFacing;\n+        match tcx.const_eval_raw(key) {\n+            // try again with reveal all as requested\n+            Err(ErrorHandled::TooGeneric) => {},\n+            // dedupliate calls\n+            other => return other,\n+        }\n+    }\n     trace!(\"const eval: {:?}\", key);\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();"}, {"sha": "0ad297eeb5cdb9f8f6058e322295f0ad3b83a4e7", "filename": "src/test/ui/array_const_index-0.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -12,7 +12,6 @@ const A: &'static [i32] = &[];\n const B: i32 = (&A)[1];\n //~^ index out of bounds: the len is 0 but the index is 1\n //~| ERROR any use of this value will cause an error\n-//~| ERROR any use of this value will cause an error\n \n fn main() {\n     let _ = B; //~ ERROR erroneous constant used"}, {"sha": "38163b1f4b1998b2ebfc88c67e07d15fc0261c40", "filename": "src/test/ui/array_const_index-0.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -8,20 +8,12 @@ LL | const B: i32 = (&A)[1];\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/array_const_index-0.rs:12:1\n-   |\n-LL | const B: i32 = (&A)[1];\n-   | ^^^^^^^^^^^^^^^-------^\n-   |                |\n-   |                index out of bounds: the len is 0 but the index is 1\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/array_const_index-0.rs:18:13\n+  --> $DIR/array_const_index-0.rs:17:13\n    |\n LL |     let _ = B; //~ ERROR erroneous constant used\n    |             ^ referenced constant has errors\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "4c7dcfbb347d86825b0719e5f302e22ff34a5985", "filename": "src/test/ui/array_const_index-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -12,7 +12,6 @@ const A: [i32; 0] = [];\n const B: i32 = A[1];\n //~^ index out of bounds: the len is 0 but the index is 1\n //~| ERROR any use of this value will cause an error\n-//~| ERROR any use of this value will cause an error\n \n fn main() {\n     let _ = B; //~ ERROR erroneous constant used"}, {"sha": "b122e590c8854edd4e4e11ef0a4e2ae644a986c2", "filename": "src/test/ui/array_const_index-1.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -8,20 +8,12 @@ LL | const B: i32 = A[1];\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/array_const_index-1.rs:12:1\n-   |\n-LL | const B: i32 = A[1];\n-   | ^^^^^^^^^^^^^^^----^\n-   |                |\n-   |                index out of bounds: the len is 0 but the index is 1\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/array_const_index-1.rs:18:13\n+  --> $DIR/array_const_index-1.rs:17:13\n    |\n LL |     let _ = B; //~ ERROR erroneous constant used\n    |             ^ referenced constant has errors\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "1cbfb918427750973d276b16e389106c45f7be6f", "filename": "src/test/ui/consts/const-err-early.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -11,7 +11,6 @@\n #![deny(const_err)]\n \n pub const A: i8 = -std::i8::MIN; //~ ERROR const_err\n-//~^ ERROR const_err\n pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err"}, {"sha": "8cc112191b512e15c9be5e07a0c231def4253476", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -13,81 +13,73 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:15:1\n+  --> $DIR/const-err-early.rs:14:1\n    |\n LL | pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n    | ^^^^^^^^^^^^^^^^^^-------------^\n    |                   |\n    |                   attempt to add with overflow\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:16:1\n+  --> $DIR/const-err-early.rs:15:1\n    |\n LL | pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n    | ^^^^^^^^^^^^^^^^^^---------^\n    |                   |\n    |                   attempt to multiply with overflow\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:17:1\n+  --> $DIR/const-err-early.rs:16:1\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err\n    | ^^^^^^^^^^^^^^^^^^-----------------^\n    |                   |\n    |                   attempt to subtract with overflow\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:18:1\n+  --> $DIR/const-err-early.rs:17:1\n    |\n LL | pub const E: u8 = [5u8][1]; //~ ERROR const_err\n    | ^^^^^^^^^^^^^^^^^^--------^\n    |                   |\n    |                   index out of bounds: the len is 1 but the index is 1\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-err-early.rs:13:1\n-   |\n-LL | pub const A: i8 = -std::i8::MIN; //~ ERROR const_err\n-   | ^^^^^^^^^^^^^^^^^^-------------^\n-   |                   |\n-   |                   attempt to negate with overflow\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/const-err-early.rs:21:14\n+  --> $DIR/const-err-early.rs:20:14\n    |\n LL |     let _a = A; //~ ERROR erroneous constant used\n    |              ^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-err-early.rs:22:14\n+  --> $DIR/const-err-early.rs:21:14\n    |\n LL |     let _b = B; //~ ERROR erroneous constant used\n    |              ^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-err-early.rs:23:14\n+  --> $DIR/const-err-early.rs:22:14\n    |\n LL |     let _c = C; //~ ERROR erroneous constant used\n    |              ^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-err-early.rs:24:14\n+  --> $DIR/const-err-early.rs:23:14\n    |\n LL |     let _d = D; //~ ERROR erroneous constant used\n    |              ^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-err-early.rs:25:14\n+  --> $DIR/const-err-early.rs:24:14\n    |\n LL |     let _e = E; //~ ERROR erroneous constant used\n    |              ^ referenced constant has errors\n \n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err-early.rs:26:14\n+  --> $DIR/const-err-early.rs:25:14\n    |\n LL |     let _e = [6u8][1]; //~ ERROR index out of bounds\n    |              ^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "20eaebfbe56560904abee64fb17ba8176da8bc24", "filename": "src/test/ui/consts/const-err-multi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -12,7 +12,6 @@\n \n pub const A: i8 = -std::i8::MIN;\n //~^ ERROR const_err\n-//~| ERROR const_err\n pub const B: i8 = A;\n //~^ ERROR const_err\n pub const C: u8 = A as u8;"}, {"sha": "da6f31a38868c5868958f6ba0b95957f4ea6eed9", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -13,43 +13,35 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:16:1\n+  --> $DIR/const-err-multi.rs:15:1\n    |\n LL | pub const B: i8 = A;\n    | ^^^^^^^^^^^^^^^^^^-^\n    |                   |\n    |                   referenced constant has errors\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:18:1\n+  --> $DIR/const-err-multi.rs:17:1\n    |\n LL | pub const C: u8 = A as u8;\n    | ^^^^^^^^^^^^^^^^^^-------^\n    |                   |\n    |                   referenced constant has errors\n \n error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:20:1\n+  --> $DIR/const-err-multi.rs:19:1\n    |\n LL | pub const D: i8 = 50 - A;\n    | ^^^^^^^^^^^^^^^^^^------^\n    |                   |\n    |                   referenced constant has errors\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-err-multi.rs:13:1\n-   |\n-LL | pub const A: i8 = -std::i8::MIN;\n-   | ^^^^^^^^^^^^^^^^^^-------------^\n-   |                   |\n-   |                   attempt to negate with overflow\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/const-err-multi.rs:24:13\n+  --> $DIR/const-err-multi.rs:23:13\n    |\n LL |     let _ = (A, B, C, D);\n    |             ^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "fff50c86646f3fee37055b1046364b4ae5e64652", "filename": "src/test/ui/consts/const-err.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -19,7 +19,6 @@ fn black_box<T>(_: T) {\n \n const FOO: u8 = [5u8][1];\n //~^ WARN any use of this value will cause an error\n-//~| WARN any use of this value will cause an error\n \n fn main() {\n     black_box((FOO, FOO));"}, {"sha": "e2ef7c3d0d463d3b11ad17c09335414616c9d9bf", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -12,16 +12,8 @@ note: lint level defined here\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-warning: any use of this value will cause an error\n-  --> $DIR/const-err.rs:20:1\n-   |\n-LL | const FOO: u8 = [5u8][1];\n-   | ^^^^^^^^^^^^^^^^--------^\n-   |                 |\n-   |                 index out of bounds: the len is 1 but the index is 1\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/const-err.rs:25:15\n+  --> $DIR/const-err.rs:24:15\n    |\n LL |     black_box((FOO, FOO));\n    |               ^^^^^^^^^^ referenced constant has errors"}, {"sha": "c61a1b3edb726c3a5ddb8b55e9b4b4e8e4c01130", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -22,7 +22,6 @@ use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n-     //~^ const_err\n     (\n      i8::MIN - 1,\n      );"}, {"sha": "0484335fd0c239930187a7ab299d6a343dbcc6fd", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -2,7 +2,6 @@ error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:24:1\n    |\n LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n-LL | |      //~^ const_err\n LL | |     (\n LL | |      i8::MIN - 1,\n    | |      ----------- attempt to subtract with overflow\n@@ -16,7 +15,7 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:30:1\n+  --> $DIR/const-eval-overflow2.rs:29:1\n    |\n LL | / const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -26,7 +25,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:35:1\n+  --> $DIR/const-eval-overflow2.rs:34:1\n    |\n LL | / const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -36,7 +35,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:40:1\n+  --> $DIR/const-eval-overflow2.rs:39:1\n    |\n LL | / const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -46,7 +45,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:45:1\n+  --> $DIR/const-eval-overflow2.rs:44:1\n    |\n LL | / const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -56,7 +55,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:50:1\n+  --> $DIR/const-eval-overflow2.rs:49:1\n    |\n LL | / const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u16::MIN - 1,\n@@ -65,7 +64,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:54:1\n+  --> $DIR/const-eval-overflow2.rs:53:1\n    |\n LL | / const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u32::MIN - 1,\n@@ -74,7 +73,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:58:1\n+  --> $DIR/const-eval-overflow2.rs:57:1\n    |\n LL | / const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -83,65 +82,54 @@ LL | |      u64::MIN - 1,\n LL | |      );\n    | |_______^\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2.rs:24:1\n-   |\n-LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n-LL | |      //~^ const_err\n-LL | |     (\n-LL | |      i8::MIN - 1,\n-   | |      ----------- attempt to subtract with overflow\n-LL | |      );\n-   | |_______^\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2.rs:64:5\n+  --> $DIR/const-eval-overflow2.rs:63:5\n    |\n LL |     foo(VALS_I8); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2.rs:65:5\n+  --> $DIR/const-eval-overflow2.rs:64:5\n    |\n LL |     foo(VALS_I16); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2.rs:66:5\n+  --> $DIR/const-eval-overflow2.rs:65:5\n    |\n LL |     foo(VALS_I32); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2.rs:67:5\n+  --> $DIR/const-eval-overflow2.rs:66:5\n    |\n LL |     foo(VALS_I64); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2.rs:69:5\n+  --> $DIR/const-eval-overflow2.rs:68:5\n    |\n LL |     foo(VALS_U8); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2.rs:70:5\n+  --> $DIR/const-eval-overflow2.rs:69:5\n    |\n LL |     foo(VALS_U16); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2.rs:71:5\n+  --> $DIR/const-eval-overflow2.rs:70:5\n    |\n LL |     foo(VALS_U32); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2.rs:72:5\n+  --> $DIR/const-eval-overflow2.rs:71:5\n    |\n LL |     foo(VALS_U64); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "47b0977ec1d55275e9ab2d9bc7d1310e2b9e72f1", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -22,7 +22,6 @@ use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n-     //~^ const_err\n     (\n      i8::MAX + 1,\n      );"}, {"sha": "8922b35a0b22f0cdae483f55a126e1e59f2b8a9c", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -2,7 +2,6 @@ error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:24:1\n    |\n LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n-LL | |      //~^ const_err\n LL | |     (\n LL | |      i8::MAX + 1,\n    | |      ----------- attempt to add with overflow\n@@ -16,7 +15,7 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:30:1\n+  --> $DIR/const-eval-overflow2b.rs:29:1\n    |\n LL | / const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -26,7 +25,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:35:1\n+  --> $DIR/const-eval-overflow2b.rs:34:1\n    |\n LL | / const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -36,7 +35,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:40:1\n+  --> $DIR/const-eval-overflow2b.rs:39:1\n    |\n LL | / const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -46,7 +45,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:45:1\n+  --> $DIR/const-eval-overflow2b.rs:44:1\n    |\n LL | / const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -56,7 +55,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:50:1\n+  --> $DIR/const-eval-overflow2b.rs:49:1\n    |\n LL | / const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u16::MAX + 1,\n@@ -65,7 +64,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:54:1\n+  --> $DIR/const-eval-overflow2b.rs:53:1\n    |\n LL | / const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u32::MAX + 1,\n@@ -74,7 +73,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:58:1\n+  --> $DIR/const-eval-overflow2b.rs:57:1\n    |\n LL | / const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -83,65 +82,54 @@ LL | |      u64::MAX + 1,\n LL | |      );\n    | |_______^\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2b.rs:24:1\n-   |\n-LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n-LL | |      //~^ const_err\n-LL | |     (\n-LL | |      i8::MAX + 1,\n-   | |      ----------- attempt to add with overflow\n-LL | |      );\n-   | |_______^\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2b.rs:64:5\n+  --> $DIR/const-eval-overflow2b.rs:63:5\n    |\n LL |     foo(VALS_I8); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2b.rs:65:5\n+  --> $DIR/const-eval-overflow2b.rs:64:5\n    |\n LL |     foo(VALS_I16); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2b.rs:66:5\n+  --> $DIR/const-eval-overflow2b.rs:65:5\n    |\n LL |     foo(VALS_I32); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2b.rs:67:5\n+  --> $DIR/const-eval-overflow2b.rs:66:5\n    |\n LL |     foo(VALS_I64); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2b.rs:69:5\n+  --> $DIR/const-eval-overflow2b.rs:68:5\n    |\n LL |     foo(VALS_U8); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2b.rs:70:5\n+  --> $DIR/const-eval-overflow2b.rs:69:5\n    |\n LL |     foo(VALS_U16); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2b.rs:71:5\n+  --> $DIR/const-eval-overflow2b.rs:70:5\n    |\n LL |     foo(VALS_U32); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2b.rs:72:5\n+  --> $DIR/const-eval-overflow2b.rs:71:5\n    |\n LL |     foo(VALS_U64); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "b4e1a0bc099af6e53ae3c89056674224fb5994ac", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -22,7 +22,6 @@ use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n-     //~^ const_err\n     (\n      i8::MIN * 2,\n      );"}, {"sha": "023156a40dd6d01bffd9bf1e60ac73fff9e612f0", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -2,7 +2,6 @@ error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:24:1\n    |\n LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n-LL | |      //~^ const_err\n LL | |     (\n LL | |      i8::MIN * 2,\n    | |      ----------- attempt to multiply with overflow\n@@ -16,7 +15,7 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:30:1\n+  --> $DIR/const-eval-overflow2c.rs:29:1\n    |\n LL | / const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -26,7 +25,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:35:1\n+  --> $DIR/const-eval-overflow2c.rs:34:1\n    |\n LL | / const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -36,7 +35,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:40:1\n+  --> $DIR/const-eval-overflow2c.rs:39:1\n    |\n LL | / const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -46,7 +45,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:45:1\n+  --> $DIR/const-eval-overflow2c.rs:44:1\n    |\n LL | / const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -56,7 +55,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:50:1\n+  --> $DIR/const-eval-overflow2c.rs:49:1\n    |\n LL | / const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u16::MAX * 2,\n@@ -65,7 +64,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:54:1\n+  --> $DIR/const-eval-overflow2c.rs:53:1\n    |\n LL | / const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u32::MAX * 2,\n@@ -74,7 +73,7 @@ LL | |      );\n    | |_______^\n \n error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:58:1\n+  --> $DIR/const-eval-overflow2c.rs:57:1\n    |\n LL | / const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n@@ -83,65 +82,54 @@ LL | |      u64::MAX * 2,\n LL | |      );\n    | |_______^\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-eval-overflow2c.rs:24:1\n-   |\n-LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n-LL | |      //~^ const_err\n-LL | |     (\n-LL | |      i8::MIN * 2,\n-   | |      ----------- attempt to multiply with overflow\n-LL | |      );\n-   | |_______^\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2c.rs:64:5\n+  --> $DIR/const-eval-overflow2c.rs:63:5\n    |\n LL |     foo(VALS_I8); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2c.rs:65:5\n+  --> $DIR/const-eval-overflow2c.rs:64:5\n    |\n LL |     foo(VALS_I16); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2c.rs:66:5\n+  --> $DIR/const-eval-overflow2c.rs:65:5\n    |\n LL |     foo(VALS_I32); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2c.rs:67:5\n+  --> $DIR/const-eval-overflow2c.rs:66:5\n    |\n LL |     foo(VALS_I64); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2c.rs:69:5\n+  --> $DIR/const-eval-overflow2c.rs:68:5\n    |\n LL |     foo(VALS_U8); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2c.rs:70:5\n+  --> $DIR/const-eval-overflow2c.rs:69:5\n    |\n LL |     foo(VALS_U16); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2c.rs:71:5\n+  --> $DIR/const-eval-overflow2c.rs:70:5\n    |\n LL |     foo(VALS_U32); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-eval-overflow2c.rs:72:5\n+  --> $DIR/const-eval-overflow2c.rs:71:5\n    |\n LL |     foo(VALS_U64); //~ ERROR erroneous constant used\n    |     ^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "91faa4684c3929d2af8657cbdf8fe12de2511af0", "filename": "src/test/ui/consts/const-eval/transmute-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: this static likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/transmute-const.rs:15:1\n    |\n LL | static FOO: bool = unsafe { mem::transmute(3u8) };"}, {"sha": "759dab6c2566151bfb0259e302435b1bd1b61d73", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -35,7 +35,6 @@ const fn read_field2() -> Field2 {\n \n const fn read_field3() -> Field3 {\n     const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR any use of this value\n-    //~^ ERROR any use of this value\n     FIELD3\n     //~^ erroneous constant used\n }"}, {"sha": "6a64f0c36716fb9061fe38b380658cd3a048379e", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -6,20 +6,14 @@ LL |     const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR any use of th\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/union-const-eval-field.rs:37:5\n-   |\n-LL |     const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR any use of this value\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/union-const-eval-field.rs:39:5\n+  --> $DIR/union-const-eval-field.rs:38:5\n    |\n LL |     FIELD3\n    |     ^^^^^^ referenced constant has errors\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/union-const-eval-field.rs:46:5\n+  --> $DIR/union-const-eval-field.rs:45:5\n    |\n LL |     FIELD3\n    |     ------ referenced constant has errors\n@@ -31,6 +25,6 @@ LL |     assert_eq!(read_field3(), unsafe { UNION.field3 });\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "0c8fdfb6da2931c9be2da3e36630fb9faeb9d297", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -1,22 +1,27 @@\n-error[E0391]: cycle detected when computing layout of `Foo`\n-   |\n-note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: [u8; _] }`...\n-note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n+error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}`\n   --> $DIR/const-size_of-cycle.rs:16:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n   --> $SRC_DIR/libcore/mem.rs:LL:COL\n    |\n-LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires computing layout of `Foo`, completing the cycle\n-note: cycle used when const-evaluating `Foo::bytes::{{constant}}`\n-  --> $SRC_DIR/libcore/mem.rs:LL:COL\n+LL |     unsafe { intrinsics::size_of::<T>() }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires computing layout of `Foo`...\n+note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: [u8; _] }`...\n+note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n+  --> $DIR/const-size_of-cycle.rs:16:17\n+   |\n+LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}`, completing the cycle\n+note: cycle used when processing `Foo`\n+  --> $DIR/const-size_of-cycle.rs:15:1\n    |\n-LL |     intrinsics::size_of::<T>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct Foo {\n+   | ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cc7f86f97a1fd869353d978345b5e858b1a3820b", "filename": "src/test/ui/consts/const-slice-oob.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -14,7 +14,6 @@ const FOO: &'static[u32] = &[1, 2, 3];\n const BAR: u32 = FOO[5];\n //~^ index out of bounds: the len is 3 but the index is 5\n //~| ERROR any use of this value will cause an error\n-//~| ERROR any use of this value will cause an error\n \n fn main() {\n     let _ = BAR;"}, {"sha": "763afae62eaacfa8804992f60f2768903354cac4", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -8,20 +8,12 @@ LL | const BAR: u32 = FOO[5];\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: any use of this value will cause an error\n-  --> $DIR/const-slice-oob.rs:14:1\n-   |\n-LL | const BAR: u32 = FOO[5];\n-   | ^^^^^^^^^^^^^^^^^------^\n-   |                  |\n-   |                  index out of bounds: the len is 3 but the index is 5\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/const-slice-oob.rs:20:13\n+  --> $DIR/const-slice-oob.rs:19:13\n    |\n LL |     let _ = BAR;\n    |             ^^^ referenced constant has errors\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "6d55422dea07971cc7fd55a94613b8730163e6f1", "filename": "src/test/ui/issues/issue-44415.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fissues%2Fissue-44415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fissues%2Fissue-44415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44415.rs?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//~^^^^^^^^^^ ERROR cycle detected when computing layout of\n-\n-\n #![feature(core_intrinsics)]\n \n use std::intrinsics;\n \n struct Foo {\n     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n+    //~^ ERROR cycle detected when const-evaluating + checking\n     x: usize,\n }\n "}, {"sha": "4345a5dbf43f0bcb3ff2d2860eac2dca15dfbf7f", "filename": "src/test/ui/issues/issue-44415.stderr", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -1,22 +1,27 @@\n-error[E0391]: cycle detected when computing layout of `Foo`\n-   |\n-note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: [u8; _] }`...\n-note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n-  --> $DIR/issue-44415.rs:19:17\n+error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}`\n+  --> $DIR/issue-44415.rs:17:17\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                 ^^^^^^\n+   |\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n-  --> $DIR/issue-44415.rs:19:26\n+  --> $DIR/issue-44415.rs:17:26\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires computing layout of `Foo`, completing the cycle\n-note: cycle used when const-evaluating `Foo::bytes::{{constant}}`\n-  --> $DIR/issue-44415.rs:19:26\n+note: ...which requires computing layout of `Foo`...\n+note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: [u8; _] }`...\n+note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n+  --> $DIR/issue-44415.rs:17:17\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^\n+   = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}`, completing the cycle\n+note: cycle used when processing `Foo`\n+  --> $DIR/issue-44415.rs:16:1\n+   |\n+LL | struct Foo {\n+   | ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c9a5e5eb44762847ddb1039c341c846345afb2d7", "filename": "src/test/ui/recursion/recursive-static-definition.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f970486183084634b08f516531c55d2286a38af/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr?ref=0f970486183084634b08f516531c55d2286a38af", "patch": "@@ -4,6 +4,11 @@ error[E0391]: cycle detected when const-evaluating `FOO`\n LL | pub static FOO: u32 = FOO;\n    |                       ^^^\n    |\n+note: ...which requires const-evaluating `FOO`...\n+  --> $DIR/recursive-static-definition.rs:11:1\n+   |\n+LL | pub static FOO: u32 = FOO;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating `FOO`, completing the cycle\n note: cycle used when const-evaluating + checking `FOO`\n   --> $DIR/recursive-static-definition.rs:11:1"}]}