{"sha": "16692f7b1ad8623f784d3d3b60814ebfa468fe62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NjkyZjdiMWFkODYyM2Y3ODRkM2QzYjYwODE0ZWJmYTQ2OGZlNjI=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-03-27T15:14:41Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-05-20T15:12:49Z"}, "message": "Addressed review points.", "tree": {"sha": "c4f21f4c2826a4455ca12440ea13bf1fef8ef49a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4f21f4c2826a4455ca12440ea13bf1fef8ef49a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16692f7b1ad8623f784d3d3b60814ebfa468fe62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16692f7b1ad8623f784d3d3b60814ebfa468fe62", "html_url": "https://github.com/rust-lang/rust/commit/16692f7b1ad8623f784d3d3b60814ebfa468fe62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16692f7b1ad8623f784d3d3b60814ebfa468fe62/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e5e8bfa731a3b7e5a9363eced44e76d962c794", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e5e8bfa731a3b7e5a9363eced44e76d962c794", "html_url": "https://github.com/rust-lang/rust/commit/72e5e8bfa731a3b7e5a9363eced44e76d962c794"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "a792c439f5b8797446ee0b37e235c58248af11f0", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16692f7b1ad8623f784d3d3b60814ebfa468fe62/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16692f7b1ad8623f784d3d3b60814ebfa468fe62/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=16692f7b1ad8623f784d3d3b60814ebfa468fe62", "patch": "@@ -1044,7 +1044,7 @@ fn vtable_methods<'a, 'tcx>(\n     )\n }\n \n-impl<'tcx, O> Obligation<'tcx,O> {\n+impl<'tcx, O> Obligation<'tcx, O> {\n     pub fn new(cause: ObligationCause<'tcx>,\n                param_env: ty::ParamEnv<'tcx>,\n                predicate: O)"}, {"sha": "4cb3f551123d50880dae4d17acb9c9c6d4aa3136", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/16692f7b1ad8623f784d3d3b60814ebfa468fe62/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16692f7b1ad8623f784d3d3b60814ebfa468fe62/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=16692f7b1ad8623f784d3d3b60814ebfa468fe62", "patch": "@@ -107,7 +107,7 @@ pub fn elaborate_predicates<'cx, 'gcx, 'tcx>(\n {\n     let mut visited = PredicateSet::new(tcx);\n     predicates.retain(|pred| visited.insert(pred));\n-    Elaborator { stack: predicates, visited: visited }\n+    Elaborator { stack: predicates, visited }\n }\n \n impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n@@ -286,47 +286,49 @@ pub fn expand_trait_refs<'cx, 'gcx, 'tcx>(\n     let mut items: Vec<_> =\n         trait_refs\n             .into_iter()\n-            .map(|(tr, sp)| TraitRefExpansionInfo {\n-                top_level_trait_ref: tr.clone(),\n-                top_level_span: sp,\n-                trait_ref: tr,\n-                span: sp,\n+            .map(|(trait_ref, span)| TraitRefExpansionInfo {\n+                top_level_trait_ref: trait_ref.clone(),\n+                top_level_span: span,\n+                trait_ref,\n+                span,\n             })\n             .collect();\n     items.retain(|item| visited.insert(&item.trait_ref.to_predicate()));\n-    TraitRefExpander { stack: items, visited: visited, }\n+    TraitRefExpander { stack: items, visited }\n }\n \n impl<'cx, 'gcx, 'tcx> TraitRefExpander<'cx, 'gcx, 'tcx> {\n-    // Returns `true` if `item` refers to a trait.\n+    /// If `item` refers to a trait alias, adds the components of the trait alias to the stack,\n+    /// and returns `false`.\n+    /// If `item` refers to an ordinary trait, simply returns `true`.\n     fn push(&mut self, item: &TraitRefExpansionInfo<'tcx>) -> bool {\n         let tcx = self.visited.tcx;\n \n         if !tcx.is_trait_alias(item.trait_ref.def_id()) {\n             return true;\n         }\n \n-        // Get predicates declared on the trait.\n+        // Get components of the trait alias.\n         let predicates = tcx.super_predicates_of(item.trait_ref.def_id());\n \n         let mut items: Vec<_> = predicates.predicates\n             .iter()\n             .rev()\n-            .filter_map(|(pred, sp)| {\n+            .filter_map(|(pred, span)| {\n                 pred.subst_supertrait(tcx, &item.trait_ref)\n                     .to_opt_poly_trait_ref()\n                     .map(|trait_ref|\n                         TraitRefExpansionInfo {\n                             trait_ref,\n-                            span: *sp,\n+                            span: *span,\n                             ..*item\n                         }\n                     )\n             })\n             .collect();\n \n-        debug!(\"expand_trait_refs: trait_ref={:?} items={:?}\",\n-                item.trait_ref, items);\n+        debug!(\"trait_ref_expander: trait_ref={:?} items={:?}\",\n+               item.trait_ref, items);\n \n         // Only keep those items that we haven't already seen.\n         items.retain(|i| self.visited.insert(&i.trait_ref.to_predicate()));\n@@ -344,24 +346,17 @@ impl<'cx, 'gcx, 'tcx> Iterator for TraitRefExpander<'cx, 'gcx, 'tcx> {\n     }\n \n     fn next(&mut self) -> Option<TraitRefExpansionInfo<'tcx>> {\n-        loop {\n-            let item = self.stack.pop();\n-            match item {\n-                Some(item) => {\n-                    if self.push(&item) {\n-                        return Some(item);\n-                    }\n-                }\n-                None => {\n-                    return None;\n-                }\n+        while let Some(item) = self.stack.pop() {\n+            if self.push(&item) {\n+                return Some(item);\n             }\n         }\n+        None\n     }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n-// Iterator over def-ids of supertraits\n+// Iterator over def-IDs of supertraits\n ///////////////////////////////////////////////////////////////////////////\n \n pub struct SupertraitDefIds<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {"}, {"sha": "e5410defb7aa96b71b3427f31032d9cc5fadd85d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16692f7b1ad8623f784d3d3b60814ebfa468fe62/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16692f7b1ad8623f784d3d3b60814ebfa468fe62/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=16692f7b1ad8623f784d3d3b60814ebfa468fe62", "patch": "@@ -981,14 +981,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n         let mut projection_bounds = Vec::new();\n         let dummy_self = self.tcx().types.trait_object_dummy_self;\n-        let mut bound_trait_refs = Vec::with_capacity(trait_bounds.len());\n         let (principal, potential_assoc_types) = self.instantiate_poly_trait_ref(\n             &trait_bounds[0],\n             dummy_self,\n             &mut projection_bounds,\n         );\n         debug!(\"principal: {:?}\", principal);\n \n+        let mut bound_trait_refs = Vec::with_capacity(trait_bounds.len());\n         for trait_bound in trait_bounds[1..].iter().rev() {\n             // Sanity check for non-principal trait bounds.\n             let (tr, _) = self.instantiate_poly_trait_ref(\n@@ -1009,7 +1009,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 \"only auto traits can be used as additional traits in a trait object\");\n             err.span_label(extra_trait.span, \"non-auto additional trait\");\n             if extra_trait.span != extra_trait.top_level_span {\n-                err.span_label(extra_trait.top_level_span, \"expanded from this alias\");\n+                err.span_label(extra_trait.top_level_span, \"expanded from this trait alias\");\n             }\n             err.emit();\n         }"}]}