{"sha": "d35dbbdc8ec3437807213ec103e42659467d9a77", "node_id": "C_kwDOAAsO6NoAKGQzNWRiYmRjOGVjMzQzNzgwNzIxM2VjMTAzZTQyNjU5NDY3ZDlhNzc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-22T14:37:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-26T10:30:27Z"}, "message": "Store the body type in THIR.", "tree": {"sha": "02a937bf48df68bc27f45e7db6062f9730640268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a937bf48df68bc27f45e7db6062f9730640268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d35dbbdc8ec3437807213ec103e42659467d9a77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d35dbbdc8ec3437807213ec103e42659467d9a77", "html_url": "https://github.com/rust-lang/rust/commit/d35dbbdc8ec3437807213ec103e42659467d9a77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d35dbbdc8ec3437807213ec103e42659467d9a77/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70fd012439d75fd6ce561a6518b9b8fd399f455f", "url": "https://api.github.com/repos/rust-lang/rust/commits/70fd012439d75fd6ce561a6518b9b8fd399f455f", "html_url": "https://github.com/rust-lang/rust/commit/70fd012439d75fd6ce561a6518b9b8fd399f455f"}], "stats": {"total": 94, "additions": 57, "deletions": 37}, "files": [{"sha": "f9820fdd39454b26528768887c213f856e7ff6ec", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d35dbbdc8ec3437807213ec103e42659467d9a77/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35dbbdc8ec3437807213ec103e42659467d9a77/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=d35dbbdc8ec3437807213ec103e42659467d9a77", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp};\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, AdtDef, Ty, UpvarSubsts};\n+use rustc_middle::ty::{self, AdtDef, FnSig, Ty, UpvarSubsts};\n use rustc_middle::ty::{CanonicalUserType, CanonicalUserTypeAnnotation};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n@@ -33,7 +33,12 @@ pub mod print;\n pub mod visit;\n \n macro_rules! thir_with_elements {\n-    ($($name:ident: $id:ty => $value:ty => $format:literal,)*) => {\n+    (\n+        $($field_name:ident: $field_ty:ty,)*\n+\n+    @elements:\n+        $($name:ident: $id:ty => $value:ty => $format:literal,)*\n+    ) => {\n         $(\n             newtype_index! {\n                 #[derive(HashStable)]\n@@ -47,14 +52,20 @@ macro_rules! thir_with_elements {\n         /// This can be indexed directly by any THIR index (e.g. [`ExprId`]).\n         #[derive(Debug, HashStable, Clone)]\n         pub struct Thir<'tcx> {\n+            $(\n+                pub $field_name: $field_ty,\n+            )*\n             $(\n                 pub $name: IndexVec<$id, $value>,\n             )*\n         }\n \n         impl<'tcx> Thir<'tcx> {\n-            pub fn new() -> Thir<'tcx> {\n+            pub fn new($($field_name: $field_ty,)*) -> Thir<'tcx> {\n                 Thir {\n+                    $(\n+                        $field_name,\n+                    )*\n                     $(\n                         $name: IndexVec::new(),\n                     )*\n@@ -76,13 +87,22 @@ macro_rules! thir_with_elements {\n pub const UPVAR_ENV_PARAM: ParamId = ParamId::from_u32(0);\n \n thir_with_elements! {\n+    body_type: BodyTy<'tcx>,\n+\n+@elements:\n     arms: ArmId => Arm<'tcx> => \"a{}\",\n     blocks: BlockId => Block => \"b{}\",\n     exprs: ExprId => Expr<'tcx> => \"e{}\",\n     stmts: StmtId => Stmt<'tcx> => \"s{}\",\n     params: ParamId => Param<'tcx> => \"p{}\",\n }\n \n+#[derive(Debug, HashStable, Clone)]\n+pub enum BodyTy<'tcx> {\n+    Const(Ty<'tcx>),\n+    Fn(FnSig<'tcx>),\n+}\n+\n /// Description of a type-checked function parameter.\n #[derive(Clone, Debug, HashStable)]\n pub struct Param<'tcx> {"}, {"sha": "9232c931afbff986a297ab68a5f393262a01642d", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d35dbbdc8ec3437807213ec103e42659467d9a77/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35dbbdc8ec3437807213ec103e42659467d9a77/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=d35dbbdc8ec3437807213ec103e42659467d9a77", "patch": "@@ -47,8 +47,6 @@ pub(crate) fn mir_built(\n \n /// Construct the MIR for a given `DefId`.\n fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n-    let body_owner_kind = tcx.hir().body_owner_kind(def.did);\n-\n     // Ensure unsafeck and abstract const building is ran before we steal the THIR.\n     // We can't use `ensure()` for `thir_abstract_const` as it doesn't compute the query\n     // if inputs are green. This can cause ICEs when calling `thir_abstract_const` after\n@@ -65,16 +63,15 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n     }\n \n     let body = match tcx.thir_body(def) {\n-        Err(error_reported) => construct_error(tcx, def.did, body_owner_kind, error_reported),\n+        Err(error_reported) => construct_error(tcx, def.did, error_reported),\n         Ok((thir, expr)) => {\n             // We ran all queries that depended on THIR at the beginning\n             // of `mir_build`, so now we can steal it\n             let thir = thir.steal();\n \n-            if body_owner_kind.is_fn_or_closure() {\n-                construct_fn(tcx, def, &thir, expr)\n-            } else {\n-                construct_const(tcx, def, &thir, expr)\n+            match thir.body_type {\n+                thir::BodyTy::Fn(fn_sig) => construct_fn(tcx, def, &thir, expr, fn_sig),\n+                thir::BodyTy::Const(ty) => construct_const(tcx, def, &thir, expr, ty),\n             }\n         }\n     };\n@@ -434,6 +431,7 @@ fn construct_fn<'tcx>(\n     fn_def: ty::WithOptConstParam<LocalDefId>,\n     thir: &Thir<'tcx>,\n     expr: ExprId,\n+    fn_sig: ty::FnSig<'tcx>,\n ) -> Body<'tcx> {\n     let span = tcx.def_span(fn_def.did);\n     let fn_id = tcx.hir().local_def_id_to_hir_id(fn_def.did);\n@@ -453,11 +451,6 @@ fn construct_fn<'tcx>(\n         .output\n         .span();\n \n-    // fetch the fully liberated fn signature (that is, all bound\n-    // types/lifetimes replaced)\n-    let typeck_results = tcx.typeck_opt_const_arg(fn_def);\n-    let fn_sig = typeck_results.liberated_fn_sigs()[fn_id];\n-\n     let safety = match fn_sig.unsafety {\n         hir::Unsafety::Normal => Safety::Safe,\n         hir::Unsafety::Unsafe => Safety::FnUnsafe,\n@@ -563,6 +556,7 @@ fn construct_const<'a, 'tcx>(\n     def: ty::WithOptConstParam<LocalDefId>,\n     thir: &'a Thir<'tcx>,\n     expr: ExprId,\n+    const_ty: Ty<'tcx>,\n ) -> Body<'tcx> {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n \n@@ -586,20 +580,6 @@ fn construct_const<'a, 'tcx>(\n         _ => span_bug!(tcx.def_span(def.did), \"can't build MIR for {:?}\", def.did),\n     };\n \n-    // Get the revealed type of this const. This is *not* the adjusted\n-    // type of its body, which may be a subtype of this type. For\n-    // example:\n-    //\n-    // fn foo(_: &()) {}\n-    // static X: fn(&'static ()) = foo;\n-    //\n-    // The adjusted type of the body of X is `for<'a> fn(&'a ())` which\n-    // is not the same as the type of X. We need the type of the return\n-    // place to be the type of the constant because NLL typeck will\n-    // equate them.\n-    let typeck_results = tcx.typeck_opt_const_arg(def);\n-    let const_ty = typeck_results.node_type(hir_id);\n-\n     let infcx = tcx.infer_ctxt().build();\n     let mut builder = Builder::new(\n         thir,\n@@ -629,15 +609,11 @@ fn construct_const<'a, 'tcx>(\n ///\n /// This is required because we may still want to run MIR passes on an item\n /// with type errors, but normal MIR construction can't handle that in general.\n-fn construct_error(\n-    tcx: TyCtxt<'_>,\n-    def: LocalDefId,\n-    body_owner_kind: hir::BodyOwnerKind,\n-    err: ErrorGuaranteed,\n-) -> Body<'_> {\n+fn construct_error(tcx: TyCtxt<'_>, def: LocalDefId, err: ErrorGuaranteed) -> Body<'_> {\n     let span = tcx.def_span(def);\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def);\n     let generator_kind = tcx.generator_kind(def);\n+    let body_owner_kind = tcx.hir().body_owner_kind(def);\n \n     let ty = tcx.ty_error(err);\n     let num_params = match body_owner_kind {"}, {"sha": "39a68048e26de9df71cd9ffb5546e02e8797df96", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d35dbbdc8ec3437807213ec103e42659467d9a77/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35dbbdc8ec3437807213ec103e42659467d9a77/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=d35dbbdc8ec3437807213ec103e42659467d9a77", "patch": "@@ -99,17 +99,38 @@ impl<'tcx> Cx<'tcx> {\n         let typeck_results = tcx.typeck_opt_const_arg(def);\n         let did = def.did;\n         let hir = tcx.hir();\n+        let hir_id = hir.local_def_id_to_hir_id(did);\n+\n+        let body_type = if hir.body_owner_kind(did).is_fn_or_closure() {\n+            // fetch the fully liberated fn signature (that is, all bound\n+            // types/lifetimes replaced)\n+            BodyTy::Fn(typeck_results.liberated_fn_sigs()[hir_id])\n+        } else {\n+            // Get the revealed type of this const. This is *not* the adjusted\n+            // type of its body, which may be a subtype of this type. For\n+            // example:\n+            //\n+            // fn foo(_: &()) {}\n+            // static X: fn(&'static ()) = foo;\n+            //\n+            // The adjusted type of the body of X is `for<'a> fn(&'a ())` which\n+            // is not the same as the type of X. We need the type of the return\n+            // place to be the type of the constant because NLL typeck will\n+            // equate them.\n+            BodyTy::Const(typeck_results.node_type(hir_id))\n+        };\n+\n         Cx {\n             tcx,\n-            thir: Thir::new(),\n+            thir: Thir::new(body_type),\n             param_env: tcx.param_env(def.did),\n             region_scope_tree: tcx.region_scope_tree(def.did),\n             typeck_results,\n             rvalue_scopes: &typeck_results.rvalue_scopes,\n             body_owner: did.to_def_id(),\n             adjustment_span: None,\n             apply_adjustments: hir\n-                .attrs(hir.local_def_id_to_hir_id(did))\n+                .attrs(hir_id)\n                 .iter()\n                 .all(|attr| attr.name_or_empty() != rustc_span::sym::custom_mir),\n         }"}, {"sha": "c31e6a218ce4d2ae408bade89b16552eb16cb4ff", "filename": "tests/ui/thir-print/thir-flat.stdout", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d35dbbdc8ec3437807213ec103e42659467d9a77/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d35dbbdc8ec3437807213ec103e42659467d9a77/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-flat.stdout?ref=d35dbbdc8ec3437807213ec103e42659467d9a77", "patch": "@@ -1,5 +1,8 @@\n DefId(0:3 ~ thir_flat[45a6]::main):\n Thir {\n+    body_type: Fn(\n+        ([]; c_variadic: false)->(),\n+    ),\n     arms: [],\n     blocks: [\n         Block {"}]}