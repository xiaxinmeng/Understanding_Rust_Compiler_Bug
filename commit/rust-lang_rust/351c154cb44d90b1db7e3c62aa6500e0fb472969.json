{"sha": "351c154cb44d90b1db7e3c62aa6500e0fb472969", "node_id": "C_kwDOAAsO6NoAKDM1MWMxNTRjYjQ0ZDkwYjFkYjdlM2M2MmFhNjUwMGUwZmI0NzI5Njk", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-10-04T10:55:50Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2023-02-27T09:10:13Z"}, "message": "Add vectored positioned I/O on Unix", "tree": {"sha": "3c90e95ae8f594fe61db7ee324eae1d05fcd4a67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c90e95ae8f594fe61db7ee324eae1d05fcd4a67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/351c154cb44d90b1db7e3c62aa6500e0fb472969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/351c154cb44d90b1db7e3c62aa6500e0fb472969", "html_url": "https://github.com/rust-lang/rust/commit/351c154cb44d90b1db7e3c62aa6500e0fb472969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/351c154cb44d90b1db7e3c62aa6500e0fb472969/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58136ffa92c81ec9e6ac1f91773254914da2ca01", "url": "https://api.github.com/repos/rust-lang/rust/commits/58136ffa92c81ec9e6ac1f91773254914da2ca01", "html_url": "https://github.com/rust-lang/rust/commit/58136ffa92c81ec9e6ac1f91773254914da2ca01"}], "stats": {"total": 124, "additions": 121, "deletions": 3}, "files": [{"sha": "edd77c824ad7cd303257a0bd3d49d7a82e4530d5", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/351c154cb44d90b1db7e3c62aa6500e0fb472969/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351c154cb44d90b1db7e3c62aa6500e0fb472969/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=351c154cb44d90b1db7e3c62aa6500e0fb472969", "patch": "@@ -54,6 +54,20 @@ pub trait FileExt {\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;\n \n+    /// Like `read_at`, except that it reads into a slice of buffers.\n+    ///\n+    /// Data is copied to fill each buffer in order, with the final buffer\n+    /// written to possibly being only partially filled. This method must behave\n+    /// equivalently to a single call to read with concatenated buffers.\n+    #[unstable(feature = \"unix_file_vectored_at\", issue = \"89517\")]\n+    fn read_vectored_at(\n+        &mut self,\n+        bufs: &mut [io::IoSliceMut<'_>],\n+        offset: u64,\n+    ) -> io::Result<usize> {\n+        io::default_read_vectored(|b| self.read_at(b, offset), bufs)\n+    }\n+\n     /// Reads the exact number of byte required to fill `buf` from the given offset.\n     ///\n     /// The offset is relative to the start of the file and thus independent\n@@ -155,6 +169,16 @@ pub trait FileExt {\n     #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n     fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize>;\n \n+    /// Like `write_at`, except that it writes from a slice of buffers.\n+    ///\n+    /// Data is copied from each buffer in order, with the final buffer read\n+    /// from possibly being only partially consumed. This method must behave as\n+    /// a call to `write_at` with the buffers concatenated would.\n+    #[unstable(feature = \"unix_file_vectored_at\", issue = \"89517\")]\n+    fn write_vectored_at(&mut self, bufs: &[io::IoSlice<'_>], offset: u64) -> io::Result<usize> {\n+        io::default_write_vectored(|b| self.write_at(b, offset), bufs)\n+    }\n+\n     /// Attempts to write an entire buffer starting from a given offset.\n     ///\n     /// The offset is relative to the start of the file and thus independent\n@@ -218,9 +242,19 @@ impl FileExt for fs::File {\n     fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.as_inner().read_at(buf, offset)\n     }\n+    fn read_vectored_at(\n+        &mut self,\n+        bufs: &mut [io::IoSliceMut<'_>],\n+        offset: u64,\n+    ) -> io::Result<usize> {\n+        self.as_inner().read_vectored_at(bufs, offset)\n+    }\n     fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {\n         self.as_inner().write_at(buf, offset)\n     }\n+    fn write_vectored_at(&mut self, bufs: &[io::IoSlice<'_>], offset: u64) -> io::Result<usize> {\n+        self.as_inner().write_vectored_at(bufs, offset)\n+    }\n }\n \n /// Unix-specific extensions to [`fs::Permissions`]."}, {"sha": "3213f4bf2a0c68ed8693cdd5a757772e4f48f898", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/351c154cb44d90b1db7e3c62aa6500e0fb472969/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351c154cb44d90b1db7e3c62aa6500e0fb472969/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=351c154cb44d90b1db7e3c62aa6500e0fb472969", "patch": "@@ -92,7 +92,7 @@ impl FileDesc {\n         let ret = cvt(unsafe {\n             libc::readv(\n                 self.as_raw_fd(),\n-                bufs.as_ptr() as *const libc::iovec,\n+                bufs.as_mut_ptr() as *mut libc::iovec as *const libc::iovec,\n                 cmp::min(bufs.len(), max_iov()) as libc::c_int,\n             )\n         })?;\n@@ -101,7 +101,7 @@ impl FileDesc {\n \n     #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        return crate::io::default_read_vectored(|b| self.read(b), bufs);\n+        io::default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     #[inline]\n@@ -147,6 +147,44 @@ impl FileDesc {\n         Ok(())\n     }\n \n+    #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"illumos\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+    ))]\n+    pub fn read_vectored_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n+        let ret = cvt(unsafe {\n+            libc::preadv(\n+                self.as_raw_fd(),\n+                bufs.as_mut_ptr() as *mut libc::iovec as *const libc::iovec,\n+                cmp::min(bufs.len(), max_iov()) as libc::c_int,\n+                offset as _,\n+            )\n+        })?;\n+        Ok(ret as usize)\n+    }\n+\n+    #[cfg(not(any(\n+        target_os = \"android\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"illumos\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+    )))]\n+    pub fn read_vectored_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n+        io::default_read_vectored(|b| self.read_at(b, offset), bufs)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::write(\n@@ -172,7 +210,7 @@ impl FileDesc {\n \n     #[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n     pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        return crate::io::default_write_vectored(|b| self.write(b), bufs);\n+        io::default_write_vectored(|b| self.write(b), bufs)\n     }\n \n     #[inline]\n@@ -197,6 +235,44 @@ impl FileDesc {\n         }\n     }\n \n+    #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"illumos\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+    ))]\n+    pub fn write_vectored_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n+        let ret = cvt(unsafe {\n+            libc::pwritev(\n+                self.as_raw_fd(),\n+                bufs.as_ptr() as *const libc::iovec,\n+                cmp::min(bufs.len(), max_iov()) as libc::c_int,\n+                offset as _,\n+            )\n+        })?;\n+        Ok(ret as usize)\n+    }\n+\n+    #[cfg(not(any(\n+        target_os = \"android\",\n+        target_os = \"emscripten\",\n+        target_os = \"freebsd\",\n+        target_os = \"fuchsia\",\n+        target_os = \"illumos\",\n+        target_os = \"ios\",\n+        target_os = \"linux\",\n+        target_os = \"macos\",\n+        target_os = \"netbsd\",\n+    )))]\n+    pub fn write_vectored_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n+        io::default_write_vectored(|b| self.write_at(b, offset), bufs)\n+    }\n+\n     #[cfg(not(any(\n         target_env = \"newlib\",\n         target_os = \"solaris\","}, {"sha": "ec674801a8ff8a686446c2fa8a70a3fb7a27c65f", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/351c154cb44d90b1db7e3c62aa6500e0fb472969/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351c154cb44d90b1db7e3c62aa6500e0fb472969/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=351c154cb44d90b1db7e3c62aa6500e0fb472969", "patch": "@@ -1098,6 +1098,10 @@ impl File {\n         self.0.read_buf(cursor)\n     }\n \n+    pub fn read_vectored_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n+        self.0.read_vectored_at(bufs, offset)\n+    }\n+\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n@@ -1115,6 +1119,10 @@ impl File {\n         self.0.write_at(buf, offset)\n     }\n \n+    pub fn write_vectored_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n+        self.0.write_vectored_at(bufs, offset)\n+    }\n+\n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }"}]}