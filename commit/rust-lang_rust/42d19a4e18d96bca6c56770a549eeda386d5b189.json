{"sha": "42d19a4e18d96bca6c56770a549eeda386d5b189", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZDE5YTRlMThkOTZiY2E2YzU2NzcwYTU0OWVlZGEzODZkNWIxODk=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-20T23:16:24Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-11T20:14:05Z"}, "message": "Use new dataflow framework for `rustc_peek` tests", "tree": {"sha": "ab7ffbc81904d171e0871686d4850a8a37ef7b80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab7ffbc81904d171e0871686d4850a8a37ef7b80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42d19a4e18d96bca6c56770a549eeda386d5b189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42d19a4e18d96bca6c56770a549eeda386d5b189", "html_url": "https://github.com/rust-lang/rust/commit/42d19a4e18d96bca6c56770a549eeda386d5b189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42d19a4e18d96bca6c56770a549eeda386d5b189/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f639607f63390ca582f92039b04f3ad710338796", "url": "https://api.github.com/repos/rust-lang/rust/commits/f639607f63390ca582f92039b04f3ad710338796", "html_url": "https://github.com/rust-lang/rust/commit/f639607f63390ca582f92039b04f3ad710338796"}], "stats": {"total": 72, "additions": 30, "deletions": 42}, "files": [{"sha": "7d8506eb281054ec2cdd88b76cac51e87f8091b2", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 28, "deletions": 42, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/42d19a4e18d96bca6c56770a549eeda386d5b189/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d19a4e18d96bca6c56770a549eeda386d5b189/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=42d19a4e18d96bca6c56770a549eeda386d5b189", "patch": "@@ -9,24 +9,22 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n \n+use crate::dataflow::generic::{Analysis, Results, ResultsCursor};\n use crate::dataflow::move_paths::{HasMoveData, MoveData};\n use crate::dataflow::move_paths::{LookupResult, MovePathIndex};\n-use crate::dataflow::BitDenotation;\n-use crate::dataflow::DataflowResults;\n-use crate::dataflow::DataflowResultsCursor;\n use crate::dataflow::IndirectlyMutableLocals;\n use crate::dataflow::MoveDataParamEnv;\n use crate::dataflow::{do_dataflow, DebugFormatted};\n use crate::dataflow::{\n     DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces,\n };\n \n-use crate::dataflow::has_rustc_mir_with;\n-\n pub struct SanityCheck;\n \n impl<'tcx> MirPass<'tcx> for SanityCheck {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n+        use crate::dataflow::has_rustc_mir_with;\n+\n         let def_id = src.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));\n@@ -40,34 +38,17 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n         let move_data = MoveData::gather_moves(body, tcx, param_env).unwrap();\n         let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n         let dead_unwinds = BitSet::new_empty(body.basic_blocks().len());\n-        let flow_inits = do_dataflow(\n-            tcx,\n-            body,\n-            def_id,\n-            &attributes,\n-            &dead_unwinds,\n-            MaybeInitializedPlaces::new(tcx, body, &mdpe),\n-            |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n-        );\n-        let flow_uninits = do_dataflow(\n-            tcx,\n-            body,\n-            def_id,\n-            &attributes,\n-            &dead_unwinds,\n-            MaybeUninitializedPlaces::new(tcx, body, &mdpe),\n-            |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n-        );\n-        let flow_def_inits = do_dataflow(\n-            tcx,\n-            body,\n-            def_id,\n-            &attributes,\n-            &dead_unwinds,\n-            DefinitelyInitializedPlaces::new(tcx, body, &mdpe),\n-            |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n-        );\n-        let flow_indirectly_mut = do_dataflow(\n+\n+        let flow_inits = MaybeInitializedPlaces::new(tcx, body, &mdpe)\n+            .into_engine(tcx, body, def_id)\n+            .iterate_to_fixpoint();\n+        let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)\n+            .into_engine(tcx, body, def_id)\n+            .iterate_to_fixpoint();\n+        let flow_def_inits = DefinitelyInitializedPlaces::new(tcx, body, &mdpe)\n+            .into_engine(tcx, body, def_id)\n+            .iterate_to_fixpoint();\n+        let _flow_indirectly_mut = do_dataflow(\n             tcx,\n             body,\n             def_id,\n@@ -86,9 +67,12 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_definite_init).is_some() {\n             sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_def_inits);\n         }\n+        // FIXME: Uncomment these as analyses are migrated to the new framework\n+        /*\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_indirectly_mutable).is_some() {\n             sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_indirectly_mut);\n         }\n+        */\n         if has_rustc_mir_with(&attributes, sym::stop_after_dataflow).is_some() {\n             tcx.sess.fatal(\"stop_after_dataflow ended compilation\");\n         }\n@@ -111,18 +95,18 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n /// (If there are any calls to `rustc_peek` that do not match the\n /// expression form above, then that emits an error as well, but those\n /// errors are not intended to be used for unit tests.)\n-pub fn sanity_check_via_rustc_peek<'tcx, O>(\n+pub fn sanity_check_via_rustc_peek<'tcx, A>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n     def_id: DefId,\n     _attributes: &[ast::Attribute],\n-    results: &DataflowResults<'tcx, O>,\n+    results: &Results<'tcx, A>,\n ) where\n-    O: RustcPeekAt<'tcx>,\n+    A: RustcPeekAt<'tcx>,\n {\n     debug!(\"sanity_check_via_rustc_peek def_id: {:?}\", def_id);\n \n-    let mut cursor = DataflowResultsCursor::new(results, body);\n+    let mut cursor = ResultsCursor::new(body, results);\n \n     let peek_calls = body.basic_blocks().iter_enumerated().filter_map(|(bb, block_data)| {\n         PeekCall::from_terminator(tcx, block_data.terminator()).map(|call| (bb, block_data, call))\n@@ -153,9 +137,9 @@ pub fn sanity_check_via_rustc_peek<'tcx, O>(\n             | (PeekCallKind::ByVal, mir::Rvalue::Use(mir::Operand::Move(place)))\n             | (PeekCallKind::ByVal, mir::Rvalue::Use(mir::Operand::Copy(place))) => {\n                 let loc = Location { block: bb, statement_index };\n-                cursor.seek(loc);\n+                cursor.seek_before(loc);\n                 let state = cursor.get();\n-                results.operator().peek_at(tcx, place, state, call);\n+                results.analysis.peek_at(tcx, place, state, call);\n             }\n \n             _ => {\n@@ -255,7 +239,7 @@ impl PeekCall {\n     }\n }\n \n-pub trait RustcPeekAt<'tcx>: BitDenotation<'tcx> {\n+pub trait RustcPeekAt<'tcx>: Analysis<'tcx> {\n     fn peek_at(\n         &self,\n         tcx: TyCtxt<'tcx>,\n@@ -265,9 +249,9 @@ pub trait RustcPeekAt<'tcx>: BitDenotation<'tcx> {\n     );\n }\n \n-impl<'tcx, O> RustcPeekAt<'tcx> for O\n+impl<'tcx, A> RustcPeekAt<'tcx> for A\n where\n-    O: BitDenotation<'tcx, Idx = MovePathIndex> + HasMoveData<'tcx>,\n+    A: Analysis<'tcx, Idx = MovePathIndex> + HasMoveData<'tcx>,\n {\n     fn peek_at(\n         &self,\n@@ -292,6 +276,7 @@ where\n     }\n }\n \n+/* FIXME: Add this back once `IndirectlyMutableLocals` uses the new dataflow framework.\n impl<'tcx> RustcPeekAt<'tcx> for IndirectlyMutableLocals<'_, 'tcx> {\n     fn peek_at(\n         &self,\n@@ -313,3 +298,4 @@ impl<'tcx> RustcPeekAt<'tcx> for IndirectlyMutableLocals<'_, 'tcx> {\n         }\n     }\n }\n+*/"}, {"sha": "884c83b66163c225248fd4b130b8b576bb781dd2", "filename": "src/test/ui/mir-dataflow/indirect-mutation-offset.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d19a4e18d96bca6c56770a549eeda386d5b189/src%2Ftest%2Fui%2Fmir-dataflow%2Findirect-mutation-offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d19a4e18d96bca6c56770a549eeda386d5b189/src%2Ftest%2Fui%2Fmir-dataflow%2Findirect-mutation-offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir-dataflow%2Findirect-mutation-offset.rs?ref=42d19a4e18d96bca6c56770a549eeda386d5b189", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n \n+// ignore-test Temporarily ignored while this analysis is migrated to the new framework.\n+\n #![feature(core_intrinsics, rustc_attrs, const_raw_ptr_deref)]\n \n use std::cell::UnsafeCell;"}]}