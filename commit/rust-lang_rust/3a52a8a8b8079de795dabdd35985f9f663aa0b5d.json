{"sha": "3a52a8a8b8079de795dabdd35985f9f663aa0b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNTJhOGE4YjgwNzlkZTc5NWRhYmRkMzU5ODVmOWY2NjNhYTBiNWQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-06-13T19:26:37Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-06-17T21:43:18Z"}, "message": "Document the byte, byte string, and raw byte string literals.", "tree": {"sha": "26e18bde8817a00bfc56841a4132f27d0c52f14d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e18bde8817a00bfc56841a4132f27d0c52f14d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a52a8a8b8079de795dabdd35985f9f663aa0b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a52a8a8b8079de795dabdd35985f9f663aa0b5d", "html_url": "https://github.com/rust-lang/rust/commit/3a52a8a8b8079de795dabdd35985f9f663aa0b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a52a8a8b8079de795dabdd35985f9f663aa0b5d/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4", "html_url": "https://github.com/rust-lang/rust/commit/b8a4c1415b154fa1e5bd8bb54e681f0f5e21e2a4"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "97757a53e4c1ce3a54eb0207ce61aec6bc7e8d99", "filename": "src/doc/rust.md", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/3a52a8a8b8079de795dabdd35985f9f663aa0b5d/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3a52a8a8b8079de795dabdd35985f9f663aa0b5d/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=3a52a8a8b8079de795dabdd35985f9f663aa0b5d", "patch": "@@ -234,7 +234,7 @@ rule. A literal is a form of constant expression, so is evaluated (primarily)\n at compile time.\n \n ~~~~ {.ebnf .gram}\n-literal : string_lit | char_lit | num_lit ;\n+literal : string_lit | char_lit | byte_string_lit | byte_lit | num_lit ;\n ~~~~\n \n #### Character and string literals\n@@ -244,17 +244,17 @@ char_lit : '\\x27' char_body '\\x27' ;\n string_lit : '\"' string_body * '\"' | 'r' raw_string ;\n \n char_body : non_single_quote\n-          | '\\x5c' [ '\\x27' | common_escape ] ;\n+          | '\\x5c' [ '\\x27' | common_escape | unicode_escape ] ;\n \n string_body : non_double_quote\n-            | '\\x5c' [ '\\x22' | common_escape ] ;\n+            | '\\x5c' [ '\\x22' | common_escape | unicode_escape ] ;\n raw_string : '\"' raw_string_body '\"' | '#' raw_string '#' ;\n \n common_escape : '\\x5c'\n               | 'n' | 'r' | 't' | '0'\n               | 'x' hex_digit 2\n-              | 'u' hex_digit 4\n-              | 'U' hex_digit 8 ;\n+unicode_escape : 'u' hex_digit 4\n+               | 'U' hex_digit 8 ;\n \n hex_digit : 'a' | 'b' | 'c' | 'd' | 'e' | 'f'\n           | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'\n@@ -294,7 +294,7 @@ the following forms:\n     escaped in order to denote *itself*.\n \n Raw string literals do not process any escapes. They start with the character\n-`U+0072` (`r`), followed zero or more of the character `U+0023` (`#`) and a\n+`U+0072` (`r`), followed by zero or more of the character `U+0023` (`#`) and a\n `U+0022` (double-quote) character. The _raw string body_ is not defined in the\n EBNF grammar above: it can contain any sequence of Unicode characters and is\n terminated only by another `U+0022` (double-quote) character, followed by the\n@@ -319,6 +319,65 @@ r##\"foo #\"# bar\"##;                // foo #\"# bar\n \"\\\\x52\"; r\"\\x52\";                  // \\x52\n ~~~~\n \n+#### Byte and byte string literals\n+\n+~~~~ {.ebnf .gram}\n+byte_lit : 'b' '\\x27' byte_body '\\x27' ;\n+byte_string_lit : 'b' '\"' string_body * '\"' | 'b' 'r' raw_byte_string ;\n+\n+byte_body : ascii_non_single_quote\n+          | '\\x5c' [ '\\x27' | common_escape ] ;\n+\n+byte_string_body : ascii_non_double_quote\n+            | '\\x5c' [ '\\x22' | common_escape ] ;\n+raw_byte_string : '\"' raw_byte_string_body '\"' | '#' raw_byte_string '#' ;\n+\n+~~~~\n+\n+A _byte literal_ is a single ASCII character (in the `U+0000` to `U+007F` range)\n+enclosed within two `U+0027` (single-quote) characters,\n+with the exception of `U+0027` itself,\n+which must be _escaped_ by a preceding U+005C character (`\\`),\n+or a single _escape_.\n+It is equivalent to a `u8` unsigned 8-bit integer _number literal_.\n+\n+A _byte string literal_ is a sequence of ASCII characters and _escapes_\n+enclosed within two `U+0022` (double-quote) characters,\n+with the exception of `U+0022` itself,\n+which must be _escaped_ by a preceding `U+005C` character (`\\`),\n+or a _raw byte string literal_.\n+It is equivalent to a `&'static [u8]` borrowed vectior unsigned 8-bit integers.\n+\n+Some additional _escapes_ are available in either byte or non-raw byte string\n+literals. An escape starts with a `U+005C` (`\\`) and continues with one of\n+the following forms:\n+\n+  * An _byte escape_ escape starts with `U+0078` (`x`) and is\n+    followed by exactly two _hex digits_. It denotes the byte\n+    equal to the provided hex value.\n+  * A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072`\n+    (`r`), or `U+0074` (`t`), denoting the bytes values `0x0A` (ASCII LF),\n+    `0x0D` (ASCII CR) or `0x09` (ASCII HT) respectively.\n+  * The _backslash escape_ is the character `U+005C` (`\\`) which must be\n+    escaped in order to denote its ASCII encoding `0x5C`.\n+\n+Raw byte string literals do not process any escapes.\n+They start with the character `U+0072` (`r`),\n+followed by `U+0062` (`b`),\n+followed by zero or more of the character `U+0023` (`#`),\n+and a `U+0022` (double-quote) character.\n+The _raw string body_ is not defined in the EBNF grammar above:\n+it can contain any sequence of ASCII characters and is\n+terminated only by another `U+0022` (double-quote) character, followed by the\n+same number of `U+0023` (`#`) characters that preceded the opening `U+0022`\n+(double-quote) character.\n+A raw byte string literal can not contain any non-ASCII byte.\n+\n+All characters contained in the raw string body represent their ASCII encoding,\n+the characters `U+0022` (double-quote) (except when followed by at least as\n+many `U+0023` (`#`) characters as were used to start the raw string literal) or\n+`U+005C` (`\\`) do not have any special meaning.\n+\n #### Number literals\n \n ~~~~ {.ebnf .gram}"}]}