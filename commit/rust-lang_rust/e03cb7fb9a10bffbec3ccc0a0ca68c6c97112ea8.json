{"sha": "e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8", "node_id": "C_kwDOAAsO6NoAKGUwM2NiN2ZiOWExMGJmZmJlYzNjY2MwYTBjYTY4YzZjOTcxMTJlYTg", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-12T04:59:51Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-12T04:59:51Z"}, "message": "implement a suggestion for a floating point number with a type suffix", "tree": {"sha": "74b83230ec0df99db133fd49b2d3138956552914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b83230ec0df99db133fd49b2d3138956552914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8", "html_url": "https://github.com/rust-lang/rust/commit/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f65b7e64be256df673bca2d6cc1f0e461b9eea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f65b7e64be256df673bca2d6cc1f0e461b9eea7", "html_url": "https://github.com/rust-lang/rust/commit/6f65b7e64be256df673bca2d6cc1f0e461b9eea7"}], "stats": {"total": 170, "additions": 159, "deletions": 11}, "files": [{"sha": "c3fc9776835d149aa6d2df0bd6cdc6f3ffb85d1a", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8", "patch": "@@ -48,7 +48,7 @@ use rustc_middle::ty::{self, AdtKind, DefIdTree, Ty, TypeVisitable};\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n-use rustc_span::source_map::Span;\n+use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Pos};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n@@ -2170,14 +2170,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 E0610,\n                 \"`{expr_t}` is a primitive type and therefore doesn't have fields\",\n             );\n-            if expr_t.is_integral()\n-                && (field_name\n-                    .strip_prefix('e')\n-                    .or_else(|| field_name.strip_prefix('E'))\n-                    .map(|prefix| prefix.chars().all(|c| c.is_numeric()))\n-                    .unwrap_or_default()\n-                    || field.name == sym::f32\n-                    || field.name == sym::f64)\n+            let is_valid_suffix = |field: String| {\n+                if field == \"f32\" || field == \"f64\" {\n+                    return true;\n+                }\n+                let mut chars = field.chars().peekable();\n+                match chars.peek() {\n+                    Some('e') | Some('E') => {\n+                        chars.next();\n+                        if let Some(c) = chars.peek()\n+                            && !c.is_numeric() && *c != '-' && *c != '+'\n+                        {\n+                            return false;\n+                        }\n+                        while let Some(c) = chars.peek() {\n+                            if !c.is_numeric() {\n+                                break;\n+                            }\n+                            chars.next();\n+                        }\n+                    }\n+                    _ => (),\n+                }\n+                let suffix = chars.collect::<String>();\n+                suffix.is_empty() || suffix == \"f32\" || suffix == \"f64\"\n+            };\n+            if let ty::Infer(ty::IntVar(_)) = expr_t.kind()\n+                && let ExprKind::Lit(Spanned {\n+                    node: ast::LitKind::Int(_, ast::LitIntType::Unsuffixed),\n+                    ..\n+                }) = base.kind\n+                && !base.span.from_expansion()\n+                && is_valid_suffix(field_name)\n             {\n                 err.span_suggestion_verbose(\n                     field.span.shrink_to_lo(),"}, {"sha": "501f4b6ef9ebc42ac3f9826c49533ee43142ee65", "filename": "src/test/ui/typeck/do-not-suggest-adding-missing-zero-to-floating-point-number.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.rs?ref=e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8", "patch": "@@ -0,0 +1,21 @@\n+macro_rules! num { () => { 1 } }\n+\n+fn main() {\n+    let x = 1i32;\n+    x.e10; //~ERROR `i32` is a primitive type and therefore doesn't have fields\n+\n+    let y = 1;\n+    y.e10; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+\n+    2u32.e10; //~ERROR `u32` is a primitive type and therefore doesn't have fields\n+\n+    num!().e10; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+\n+    2.e10foo; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+\n+    42._;\n+    //~^ERROR expected identifier, found reserved identifier `_`\n+    //~|ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+\n+    42.a; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+}"}, {"sha": "1ef1d4c28e47991519421807aeae5459391857a8", "filename": "src/test/ui/typeck/do-not-suggest-adding-missing-zero-to-floating-point-number.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fdo-not-suggest-adding-missing-zero-to-floating-point-number.stderr?ref=e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8", "patch": "@@ -0,0 +1,51 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:16:8\n+   |\n+LL |     42._;\n+   |        ^ expected identifier, found reserved identifier\n+\n+error[E0610]: `i32` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:5:7\n+   |\n+LL |     x.e10;\n+   |       ^^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:8:7\n+   |\n+LL |     y.e10;\n+   |       ^^^\n+\n+error[E0610]: `u32` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:10:10\n+   |\n+LL |     2u32.e10;\n+   |          ^^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:12:12\n+   |\n+LL |     num!().e10;\n+   |            ^^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:14:7\n+   |\n+LL |     2.e10foo;\n+   |       ^^^^^^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:16:8\n+   |\n+LL |     42._;\n+   |        ^\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/do-not-suggest-adding-missing-zero-to-floating-point-number.rs:20:8\n+   |\n+LL |     42.a;\n+   |        ^\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0610`."}, {"sha": "ba83e79005b33feea10a38698932daf020688978", "filename": "src/test/ui/typeck/suggest-adding-missing-zero-to-floating-point-number.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.fixed?ref=e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8", "patch": "@@ -2,6 +2,10 @@\n \n fn main() {\n     2.0e1; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.0E1; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n     2.0f32; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n     2.0f64; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.0e+12; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.0e-12; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.0e1f32; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n }"}, {"sha": "c102447f6028849e5b32b719a55f110a693ef5ba", "filename": "src/test/ui/typeck/suggest-adding-missing-zero-to-floating-point-number.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.rs?ref=e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8", "patch": "@@ -2,6 +2,10 @@\n \n fn main() {\n     2.e1; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.E1; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n     2.f32; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n     2.f64; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.e+12; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.e-12; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n+    2.e1f32; //~ERROR `{integer}` is a primitive type and therefore doesn't have fields\n }"}, {"sha": "e8e069708a864169516559a9ad01d9d0a4fe875f", "filename": "src/test/ui/typeck/suggest-adding-missing-zero-to-floating-point-number.stderr", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fsuggest-adding-missing-zero-to-floating-point-number.stderr?ref=e03cb7fb9a10bffbec3ccc0a0ca68c6c97112ea8", "patch": "@@ -12,6 +12,17 @@ LL |     2.0e1;\n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:5:7\n    |\n+LL |     2.E1;\n+   |       ^^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0E1;\n+   |       +\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:6:7\n+   |\n LL |     2.f32;\n    |       ^^^\n    |\n@@ -21,7 +32,7 @@ LL |     2.0f32;\n    |       +\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n-  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:6:7\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:7:7\n    |\n LL |     2.f64;\n    |       ^^^\n@@ -31,6 +42,39 @@ help: If the number is meant to be a floating point number, consider adding a `0\n LL |     2.0f64;\n    |       +\n \n-error: aborting due to 3 previous errors\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:8:7\n+   |\n+LL |     2.e+12;\n+   |       ^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0e+12;\n+   |       +\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:9:7\n+   |\n+LL |     2.e-12;\n+   |       ^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0e-12;\n+   |       +\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/suggest-adding-missing-zero-to-floating-point-number.rs:10:7\n+   |\n+LL |     2.e1f32;\n+   |       ^^^^^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period\n+   |\n+LL |     2.0e1f32;\n+   |       +\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0610`."}]}