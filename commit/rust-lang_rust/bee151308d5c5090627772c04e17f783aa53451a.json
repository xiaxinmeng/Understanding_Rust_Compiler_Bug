{"sha": "bee151308d5c5090627772c04e17f783aa53451a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZTE1MTMwOGQ1YzUwOTA2Mjc3NzJjMDRlMTdmNzgzYWE1MzQ1MWE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-03-11T19:36:07Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-03-12T09:32:15Z"}, "message": "codegen/mir: support polymorphic `InstanceDef`s\n\nThis commit modifies the use of `subst_and_normalize_erasing_regions` on\nparts of the MIR bodies returned from `instance_mir`, so that\n`InstanceDef::CloneShim` and `InstanceDef::DropGlue` (where there is a\ntype) do not perform substitutions. This avoids double substitutions and\nenables polymorphic `InstanceDef`s.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "f553bb854b7ffebfc10ba837c6b7cb943f4198a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f553bb854b7ffebfc10ba837c6b7cb943f4198a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bee151308d5c5090627772c04e17f783aa53451a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl5qAZ8ACgkQJZLnbIc4\nH9mVvRAAqvr9cIr+bxoqg6mpSE4lhHUy512zsIkxmN9pSp/y1CDX0poZBYB6YziE\nwOpKGHZNy26bIeOOVnxfkq/N/f9OT+1DWquuEiika6eyNHDFRoRKvVvGn4y3s90T\nn0Kq9NK9kRSbwRrIb0BH7HIv7P8Ae3dmwwZ60FRtnBuworL+Id1tgBr0SBcH+oWo\ncqsoG/q3uVMekUXZprIyiWdiJJxwyjIeTa/cgq/PSBGQyxRFHnyYo25uTydQMCjt\n3365jCsKOGgnMEEO0qSmNNKK6icehlOl8DnaJpTO3ZnE8MRJtPtuaXAn7Ehf+Dat\noC14i3z6k76QefcA1Jo5jHr+c1PBzCXUcOrwfj19lw3a059orFdh3WjG3VknHqaR\n0wyhRkxh+JJFPLPChO8MZvRC/cdF1RXvar9cR0wK4iirgNGublL4JnvYGuBPK6MX\nxeAnIhXnNFZTZqBgf9wyUTCZWbVZmcuZDjUvRe6ukTM799gNlWLGjJBap0mXWSxf\nyqVxvZRf5FGmDrevt+JGwgZ6VsCKHm7iJUxXDuzLTGHyWh78b0O5NTxdYMFrL3+z\nqWxkHZUm7MyCoPSxcolIQVWtvHM3I8XvE3+9chDmuaJTjpkcknRcTEoYhWr5p+w8\ndaOXdf4Vn+qh8bxVXXkYq+1krXZ2h3C8YLQfTseiHAsHCJWKb+Q=\n=LR6t\n-----END PGP SIGNATURE-----", "payload": "tree f553bb854b7ffebfc10ba837c6b7cb943f4198a7\nparent 303d8aff6092709edd4dbd35b1c88e9aa40bf6d8\nauthor David Wood <david@davidtw.co> 1583955367 +0000\ncommitter David Wood <david@davidtw.co> 1584005535 +0000\n\ncodegen/mir: support polymorphic `InstanceDef`s\n\nThis commit modifies the use of `subst_and_normalize_erasing_regions` on\nparts of the MIR bodies returned from `instance_mir`, so that\n`InstanceDef::CloneShim` and `InstanceDef::DropGlue` (where there is a\ntype) do not perform substitutions. This avoids double substitutions and\nenables polymorphic `InstanceDef`s.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bee151308d5c5090627772c04e17f783aa53451a", "html_url": "https://github.com/rust-lang/rust/commit/bee151308d5c5090627772c04e17f783aa53451a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bee151308d5c5090627772c04e17f783aa53451a/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8", "html_url": "https://github.com/rust-lang/rust/commit/303d8aff6092709edd4dbd35b1c88e9aa40bf6d8"}], "stats": {"total": 185, "additions": 102, "deletions": 83}, "files": [{"sha": "78fcc494f6c737a94230e62243ddff6b6669b86d", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=bee151308d5c5090627772c04e17f783aa53451a", "patch": "@@ -369,6 +369,32 @@ impl<'tcx> Instance<'tcx> {\n         Instance { def, substs }\n     }\n \n+    /// FIXME(#69925) Depending on the kind of `InstanceDef`, the MIR body associated with an\n+    /// instance is expressed in terms of the generic parameters of `self.def_id()`, and in other\n+    /// cases the MIR body is expressed in terms of the types found in the substitution array.\n+    /// In the former case, we want to substitute those generic types and replace them with the\n+    /// values from the substs when monomorphizing the function body. But in the latter case, we\n+    /// don't want to do that substitution, since it has already been done effectively.\n+    ///\n+    /// This function returns `Some(substs)` in the former case and None otherwise -- i.e., if\n+    /// this function returns `None`, then the MIR body does not require substitution during\n+    /// monomorphization.\n+    pub fn substs_for_mir_body(&self) -> Option<SubstsRef<'tcx>> {\n+        match self.def {\n+            InstanceDef::CloneShim(..)\n+            | InstanceDef::DropGlue(_, Some(_)) => None,\n+            InstanceDef::ClosureOnceShim { .. }\n+            | InstanceDef::DropGlue(..)\n+            // FIXME(#69925): `FnPtrShim` should be in the other branch.\n+            | InstanceDef::FnPtrShim(..)\n+            | InstanceDef::Item(_)\n+            | InstanceDef::Intrinsic(..)\n+            | InstanceDef::ReifyShim(..)\n+            | InstanceDef::Virtual(..)\n+            | InstanceDef::VtableShim(..) => Some(self.substs),\n+        }\n+    }\n+\n     pub fn is_vtable_shim(&self) -> bool {\n         if let InstanceDef::VtableShim(..) = self.def { true } else { false }\n     }"}, {"sha": "000db0155ada38b05667e5a396abf7b1995ebd4d", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=bee151308d5c5090627772c04e17f783aa53451a", "patch": "@@ -86,13 +86,18 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn monomorphize<T>(&self, value: &T) -> T\n     where\n-        T: TypeFoldable<'tcx>,\n+        T: Copy + TypeFoldable<'tcx>,\n     {\n-        self.cx.tcx().subst_and_normalize_erasing_regions(\n-            self.instance.substs,\n-            ty::ParamEnv::reveal_all(),\n-            value,\n-        )\n+        debug!(\"monomorphize: self.instance={:?}\", self.instance);\n+        if let Some(substs) = self.instance.substs_for_mir_body() {\n+            self.cx.tcx().subst_and_normalize_erasing_regions(\n+                substs,\n+                ty::ParamEnv::reveal_all(),\n+                &value,\n+            )\n+        } else {\n+            self.cx.tcx().normalize_erasing_regions(ty::ParamEnv::reveal_all(), *value)\n+        }\n     }\n }\n "}, {"sha": "85ac225bd2eda9d55d70f9986d9e622b9aa43c68", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=bee151308d5c5090627772c04e17f783aa53451a", "patch": "@@ -335,15 +335,25 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Call this on things you got out of the MIR (so it is as generic as the current\n     /// stack frame), to bring it into the proper environment for this interpreter.\n+    pub(super) fn subst_from_current_frame_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(\n+        &self,\n+        value: T,\n+    ) -> T {\n+        self.subst_from_frame_and_normalize_erasing_regions(self.frame(), value)\n+    }\n+\n+    /// Call this on things you got out of the MIR (so it is as generic as the provided\n+    /// stack frame), to bring it into the proper environment for this interpreter.\n     pub(super) fn subst_from_frame_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(\n         &self,\n+        frame: &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,\n         value: T,\n     ) -> T {\n-        self.tcx.subst_and_normalize_erasing_regions(\n-            self.frame().instance.substs,\n-            self.param_env,\n-            &value,\n-        )\n+        if let Some(substs) = frame.instance.substs_for_mir_body() {\n+            self.tcx.subst_and_normalize_erasing_regions(substs, self.param_env, &value)\n+        } else {\n+            self.tcx.normalize_erasing_regions(self.param_env, value)\n+        }\n     }\n \n     /// The `substs` are assumed to already be in our interpreter \"universe\" (param_env).\n@@ -371,11 +381,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             None => {\n                 let layout = crate::interpret::operand::from_known_layout(layout, || {\n                     let local_ty = frame.body.local_decls[local].ty;\n-                    let local_ty = self.tcx.subst_and_normalize_erasing_regions(\n-                        frame.instance.substs,\n-                        self.param_env,\n-                        &local_ty,\n-                    );\n+                    let local_ty =\n+                        self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty);\n                     self.layout_of(local_ty)\n                 })?;\n                 if let Some(state) = frame.locals.get(local) {"}, {"sha": "79cd082433061a01036173573c69c04f6c93a07f", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=bee151308d5c5090627772c04e17f783aa53451a", "patch": "@@ -491,7 +491,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Copy(ref place) | Move(ref place) => self.eval_place_to_op(place, layout)?,\n \n             Constant(ref constant) => {\n-                let val = self.subst_from_frame_and_normalize_erasing_regions(constant.literal);\n+                let val =\n+                    self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal);\n                 self.eval_const_to_op(val, layout)?\n             }\n         };"}, {"sha": "c0ec2e584484292428b230d4657bef660ee66bb4", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=bee151308d5c5090627772c04e17f783aa53451a", "patch": "@@ -648,9 +648,11 @@ where\n                         // bail out.\n                         None => Place::null(&*self),\n                     },\n-                    layout: self.layout_of(self.subst_from_frame_and_normalize_erasing_regions(\n-                        self.frame().body.return_ty(),\n-                    ))?,\n+                    layout: self.layout_of(\n+                        self.subst_from_current_frame_and_normalize_erasing_regions(\n+                            self.frame().body.return_ty(),\n+                        ),\n+                    )?,\n                 }\n             }\n             local => PlaceTy {"}, {"sha": "cb11df18378d991fc4bb99157e94d9b21298f542", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=bee151308d5c5090627772c04e17f783aa53451a", "patch": "@@ -248,7 +248,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             NullaryOp(mir::NullOp::SizeOf, ty) => {\n-                let ty = self.subst_from_frame_and_normalize_erasing_regions(ty);\n+                let ty = self.subst_from_current_frame_and_normalize_erasing_regions(ty);\n                 let layout = self.layout_of(ty)?;\n                 assert!(\n                     !layout.is_unsized(),"}, {"sha": "fbb7d8c6ee3ab57767a2fbac02cea8e2379b6088", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 40, "deletions": 62, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee151308d5c5090627772c04e17f783aa53451a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=bee151308d5c5090627772c04e17f783aa53451a", "patch": "@@ -186,7 +186,7 @@ use rustc::mir::{self, Local, Location};\n use rustc::session::config::EntryFnType;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::ty::print::obsolete::DefPathBasedNames;\n-use rustc::ty::subst::{InternalSubsts, SubstsRef};\n+use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n@@ -493,7 +493,21 @@ struct MirNeighborCollector<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a mir::Body<'tcx>,\n     output: &'a mut Vec<MonoItem<'tcx>>,\n-    param_substs: SubstsRef<'tcx>,\n+    instance: Instance<'tcx>,\n+}\n+\n+impl<'a, 'tcx> MirNeighborCollector<'a, 'tcx> {\n+    pub fn monomorphize<T>(&self, value: T) -> T\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        debug!(\"monomorphize: self.instance={:?}\", self.instance);\n+        if let Some(substs) = self.instance.substs_for_mir_body() {\n+            self.tcx.subst_and_normalize_erasing_regions(substs, ty::ParamEnv::reveal_all(), &value)\n+        } else {\n+            self.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), value)\n+        }\n+    }\n }\n \n impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n@@ -509,17 +523,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 ref operand,\n                 target_ty,\n             ) => {\n-                let target_ty = self.tcx.subst_and_normalize_erasing_regions(\n-                    self.param_substs,\n-                    ty::ParamEnv::reveal_all(),\n-                    &target_ty,\n-                );\n+                let target_ty = self.monomorphize(target_ty);\n                 let source_ty = operand.ty(self.body, self.tcx);\n-                let source_ty = self.tcx.subst_and_normalize_erasing_regions(\n-                    self.param_substs,\n-                    ty::ParamEnv::reveal_all(),\n-                    &source_ty,\n-                );\n+                let source_ty = self.monomorphize(source_ty);\n                 let (source_ty, target_ty) =\n                     find_vtable_types_for_unsizing(self.tcx, source_ty, target_ty);\n                 // This could also be a different Unsize instruction, like\n@@ -540,11 +546,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 _,\n             ) => {\n                 let fn_ty = operand.ty(self.body, self.tcx);\n-                let fn_ty = self.tcx.subst_and_normalize_erasing_regions(\n-                    self.param_substs,\n-                    ty::ParamEnv::reveal_all(),\n-                    &fn_ty,\n-                );\n+                let fn_ty = self.monomorphize(fn_ty);\n                 visit_fn_use(self.tcx, fn_ty, false, &mut self.output);\n             }\n             mir::Rvalue::Cast(\n@@ -553,11 +555,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 _,\n             ) => {\n                 let source_ty = operand.ty(self.body, self.tcx);\n-                let source_ty = self.tcx.subst_and_normalize_erasing_regions(\n-                    self.param_substs,\n-                    ty::ParamEnv::reveal_all(),\n-                    &source_ty,\n-                );\n+                let source_ty = self.monomorphize(source_ty);\n                 match source_ty.kind {\n                     ty::Closure(def_id, substs) => {\n                         let instance = Instance::resolve_closure(\n@@ -593,7 +591,23 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n     fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, location: Location) {\n         debug!(\"visiting const {:?} @ {:?}\", *constant, location);\n \n-        collect_const(self.tcx, *constant, self.param_substs, self.output);\n+        let substituted_constant = self.monomorphize(*constant);\n+        let param_env = ty::ParamEnv::reveal_all();\n+\n+        match substituted_constant.val {\n+            ty::ConstKind::Value(val) => collect_const_value(self.tcx, val, self.output),\n+            ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n+                match self.tcx.const_eval_resolve(param_env, def_id, substs, promoted, None) {\n+                    Ok(val) => collect_const_value(self.tcx, val, self.output),\n+                    Err(ErrorHandled::Reported) => {}\n+                    Err(ErrorHandled::TooGeneric) => span_bug!(\n+                        self.tcx.def_span(def_id),\n+                        \"collection encountered polymorphic constant\",\n+                    ),\n+                }\n+            }\n+            _ => {}\n+        }\n \n         self.super_const(constant);\n     }\n@@ -605,21 +619,13 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         match *kind {\n             mir::TerminatorKind::Call { ref func, .. } => {\n                 let callee_ty = func.ty(self.body, tcx);\n-                let callee_ty = tcx.subst_and_normalize_erasing_regions(\n-                    self.param_substs,\n-                    ty::ParamEnv::reveal_all(),\n-                    &callee_ty,\n-                );\n+                let callee_ty = self.monomorphize(callee_ty);\n                 visit_fn_use(self.tcx, callee_ty, true, &mut self.output);\n             }\n             mir::TerminatorKind::Drop { ref location, .. }\n             | mir::TerminatorKind::DropAndReplace { ref location, .. } => {\n                 let ty = location.ty(self.body, self.tcx).ty;\n-                let ty = tcx.subst_and_normalize_erasing_regions(\n-                    self.param_substs,\n-                    ty::ParamEnv::reveal_all(),\n-                    &ty,\n-                );\n+                let ty = self.monomorphize(ty);\n                 visit_drop_use(self.tcx, ty, true, self.output);\n             }\n             mir::TerminatorKind::Goto { .. }\n@@ -1156,8 +1162,7 @@ fn collect_neighbours<'tcx>(\n     debug!(\"collect_neighbours: {:?}\", instance.def_id());\n     let body = tcx.instance_mir(instance.def);\n \n-    MirNeighborCollector { tcx, body: &body, output, param_substs: instance.substs }\n-        .visit_body(body);\n+    MirNeighborCollector { tcx, body: &body, output, instance }.visit_body(body);\n }\n \n fn def_id_to_string(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n@@ -1167,33 +1172,6 @@ fn def_id_to_string(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n     output\n }\n \n-fn collect_const<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    constant: &'tcx ty::Const<'tcx>,\n-    param_substs: SubstsRef<'tcx>,\n-    output: &mut Vec<MonoItem<'tcx>>,\n-) {\n-    debug!(\"visiting const {:?}\", constant);\n-\n-    let param_env = ty::ParamEnv::reveal_all();\n-    let substituted_constant =\n-        tcx.subst_and_normalize_erasing_regions(param_substs, param_env, &constant);\n-\n-    match substituted_constant.val {\n-        ty::ConstKind::Value(val) => collect_const_value(tcx, val, output),\n-        ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n-            match tcx.const_eval_resolve(param_env, def_id, substs, promoted, None) {\n-                Ok(val) => collect_const_value(tcx, val, output),\n-                Err(ErrorHandled::Reported) => {}\n-                Err(ErrorHandled::TooGeneric) => {\n-                    span_bug!(tcx.def_span(def_id), \"collection encountered polymorphic constant\",)\n-                }\n-            }\n-        }\n-        _ => {}\n-    }\n-}\n-\n fn collect_const_value<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     value: ConstValue<'tcx>,"}]}