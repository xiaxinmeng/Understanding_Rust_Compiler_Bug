{"sha": "f6908be329d2be65b4de0f36393b98757c13ecad", "node_id": "C_kwDOAAsO6NoAKGY2OTA4YmUzMjlkMmJlNjViNGRlMGYzNjM5M2I5ODc1N2MxM2VjYWQ", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-31T02:36:04Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-31T02:36:04Z"}, "message": "add a test to check if `suggest_remove_semi_or_return_binding` is working well for if-else", "tree": {"sha": "8c1c79bd4bddc20254911afb2e7b124a4a25757d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c1c79bd4bddc20254911afb2e7b124a4a25757d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6908be329d2be65b4de0f36393b98757c13ecad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6908be329d2be65b4de0f36393b98757c13ecad", "html_url": "https://github.com/rust-lang/rust/commit/f6908be329d2be65b4de0f36393b98757c13ecad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6908be329d2be65b4de0f36393b98757c13ecad/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03622552ecdbac78072ea5e4aa4d7389d606c25c", "url": "https://api.github.com/repos/rust-lang/rust/commits/03622552ecdbac78072ea5e4aa4d7389d606c25c", "html_url": "https://github.com/rust-lang/rust/commit/03622552ecdbac78072ea5e4aa4d7389d606c25c"}], "stats": {"total": 200, "additions": 200, "deletions": 0}, "files": [{"sha": "b487f013d27068fc61adcb703dfcaf6c9efb766d", "filename": "src/test/ui/suggestions/if-then-neeing-semi.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f6908be329d2be65b4de0f36393b98757c13ecad/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6908be329d2be65b4de0f36393b98757c13ecad/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs?ref=f6908be329d2be65b4de0f36393b98757c13ecad", "patch": "@@ -0,0 +1,70 @@\n+// edition:2018\n+\n+fn dummy() -> i32 {\n+    42\n+}\n+\n+fn extra_semicolon() {\n+    let _ = if true {\n+        //~^ NOTE `if` and `else` have incompatible types\n+        dummy(); //~ NOTE expected because of this\n+        //~^ HELP consider removing this semicolon\n+    } else {\n+        dummy() //~ ERROR `if` and `else` have incompatible types\n+        //~^ NOTE expected `()`, found `i32`\n+    };\n+}\n+\n+async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n+//~| NOTE checked the `Output` of this `async fn`, expected opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n+async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n+\n+async fn async_extra_semicolon_same() {\n+    let _ = if true {\n+        //~^ NOTE `if` and `else` have incompatible types\n+        async_dummy(); //~ NOTE expected because of this\n+        //~^ HELP consider removing this semicolon\n+    } else {\n+        async_dummy() //~ ERROR `if` and `else` have incompatible types\n+        //~^ NOTE expected `()`, found opaque type\n+        //~| NOTE expected unit type `()`\n+        //~| HELP consider `await`ing on the `Future`\n+    };\n+}\n+\n+async fn async_extra_semicolon_different() {\n+    let _ = if true {\n+        //~^ NOTE `if` and `else` have incompatible types\n+        async_dummy(); //~ NOTE expected because of this\n+        //~^ HELP consider removing this semicolon\n+    } else {\n+        async_dummy2() //~ ERROR `if` and `else` have incompatible types\n+        //~^ NOTE expected `()`, found opaque type\n+        //~| NOTE expected unit type `()`\n+        //~| HELP consider `await`ing on the `Future`\n+    };\n+}\n+\n+async fn async_different_futures() {\n+    let _ = if true {\n+        //~^ NOTE `if` and `else` have incompatible types\n+        async_dummy() //~ NOTE expected because of this\n+        //~| HELP consider `await`ing on both `Future`s\n+    } else {\n+        async_dummy2() //~ ERROR `if` and `else` have incompatible types\n+        //~^ NOTE expected opaque type, found a different opaque type\n+        //~| NOTE expected opaque type `impl Future<Output = ()>`\n+        //~| NOTE distinct uses of `impl Trait` result in different opaque types\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "d7c5818abbd54b76fc7465051dc6917499f59723", "filename": "src/test/ui/suggestions/if-then-neeing-semi.stderr", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/f6908be329d2be65b4de0f36393b98757c13ecad/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6908be329d2be65b4de0f36393b98757c13ecad/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr?ref=f6908be329d2be65b4de0f36393b98757c13ecad", "patch": "@@ -0,0 +1,130 @@\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/if-then-neeing-semi.rs:37:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |\n+LL | |         async_dummy();\n+   | |         -------------- expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         async_dummy()\n+   | |         ^^^^^^^^^^^^^ expected `()`, found opaque type\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/if-then-neeing-semi.rs:18:24\n+   |\n+LL | async fn async_dummy() {}\n+   |                        ^ checked the `Output` of this `async fn`, found opaque type\n+   = note: expected unit type `()`\n+            found opaque type `impl Future<Output = ()>`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |         async_dummy().await\n+   |                      ++++++\n+help: consider removing this semicolon\n+   |\n+LL -         async_dummy();\n+LL +         async_dummy()\n+   |\n+\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/if-then-neeing-semi.rs:50:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |\n+LL | |         async_dummy();\n+   | |         -------------- expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         async_dummy2()\n+   | |         ^^^^^^^^^^^^^^ expected `()`, found opaque type\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/if-then-neeing-semi.rs:24:25\n+   |\n+LL | async fn async_dummy2() {}\n+   |                         ^ checked the `Output` of this `async fn`, found opaque type\n+   = note: expected unit type `()`\n+            found opaque type `impl Future<Output = ()>`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |         async_dummy2().await\n+   |                       ++++++\n+help: consider removing this semicolon and boxing the expressions\n+   |\n+LL ~         Box::new(async_dummy())\n+LL |\n+LL |     } else {\n+LL ~         Box::new(async_dummy2())\n+   |\n+\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/if-then-neeing-semi.rs:63:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |\n+LL | |         async_dummy()\n+   | |         ------------- expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         async_dummy2()\n+   | |         ^^^^^^^^^^^^^^ expected opaque type, found a different opaque type\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/if-then-neeing-semi.rs:18:24\n+   |\n+LL | async fn async_dummy() {}\n+   |                        ^ checked the `Output` of this `async fn`, expected opaque type\n+note: while checking the return type of the `async fn`\n+  --> $DIR/if-then-neeing-semi.rs:24:25\n+   |\n+LL | async fn async_dummy2() {}\n+   |                         ^ checked the `Output` of this `async fn`, found opaque type\n+   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:18:24>)\n+              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:24:25>)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n+help: consider `await`ing on both `Future`s\n+   |\n+LL ~         async_dummy().await\n+LL |\n+LL |     } else {\n+LL ~         async_dummy2().await\n+   |\n+\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/if-then-neeing-semi.rs:13:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |\n+LL | |         dummy();\n+   | |         --------\n+   | |         |      |\n+   | |         |      help: consider removing this semicolon\n+   | |         expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         dummy()\n+   | |         ^^^^^^^ expected `()`, found `i32`\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}