{"sha": "769ad701294401b179e8569625ebeb585cab25ed", "node_id": "C_kwDOAAsO6NoAKDc2OWFkNzAxMjk0NDAxYjE3OWU4NTY5NjI1ZWJlYjU4NWNhYjI1ZWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-19T06:56:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-19T06:56:44Z"}, "message": "Rollup merge of #100592 - cjgillot:debug-import-kind, r=TaKO8Ki\n\nManually implement Debug for ImportKind.\n\nThis avoids crashing due to an infinite loop when running with `RUSTC_LOG=rustc_resolve`.", "tree": {"sha": "ad49c8113fc639eb7349b2941616b5d109b9b2c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad49c8113fc639eb7349b2941616b5d109b9b2c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/769ad701294401b179e8569625ebeb585cab25ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/zQsCRBK7hj4Ov3rIwAAP0YIAJ3Wbes1hh3u30fUTYpVWbKi\nzEhb1xc+JE++cYcCiwNHCDx5rBeZLhJb5qM57RKACyBHU1nxQtz1KbrpCeLx7VbJ\nsMuEGuWU5g9Ba/I/hFCZVa2LYHqO4+KwhY2mNxZV71FyeRxH3Nkv1V6t6y4o8LI+\nYkk3s2T37lhRbq8SqTzBzUyb/Pj4ilcjh4Q6t8wnFAEN/LxooBEFvKhL//sOXP/N\noErV1h3EHVioFPV0VSwirXtfzA8VkRRHSpDVysSuj6f2texUFs+mGBHGCqDt1krP\nzCjdXqCPbv+ZHllPKyEQwAGtSZQN098gjRkCSX5iR32H80PSHPe80cDCc5RzFes=\n=NXc0\n-----END PGP SIGNATURE-----\n", "payload": "tree ad49c8113fc639eb7349b2941616b5d109b9b2c6\nparent d83abe8c123e4a59edafffe9825ce3f398d31aa6\nparent 611221d8aee134eb99749045e05896352550639c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660892204 +0530\ncommitter GitHub <noreply@github.com> 1660892204 +0530\n\nRollup merge of #100592 - cjgillot:debug-import-kind, r=TaKO8Ki\n\nManually implement Debug for ImportKind.\n\nThis avoids crashing due to an infinite loop when running with `RUSTC_LOG=rustc_resolve`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/769ad701294401b179e8569625ebeb585cab25ed", "html_url": "https://github.com/rust-lang/rust/commit/769ad701294401b179e8569625ebeb585cab25ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/769ad701294401b179e8569625ebeb585cab25ed/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d83abe8c123e4a59edafffe9825ce3f398d31aa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d83abe8c123e4a59edafffe9825ce3f398d31aa6", "html_url": "https://github.com/rust-lang/rust/commit/d83abe8c123e4a59edafffe9825ce3f398d31aa6"}, {"sha": "611221d8aee134eb99749045e05896352550639c", "url": "https://api.github.com/repos/rust-lang/rust/commits/611221d8aee134eb99749045e05896352550639c", "html_url": "https://github.com/rust-lang/rust/commit/611221d8aee134eb99749045e05896352550639c"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "e0d57ded5bf24df568e28e7d0b4d237c117f1322", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/769ad701294401b179e8569625ebeb585cab25ed/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/769ad701294401b179e8569625ebeb585cab25ed/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=769ad701294401b179e8569625ebeb585cab25ed", "patch": "@@ -31,7 +31,7 @@ use std::{mem, ptr};\n type Res = def::Res<NodeId>;\n \n /// Contains data for specific kinds of imports.\n-#[derive(Clone, Debug)]\n+#[derive(Clone)]\n pub enum ImportKind<'a> {\n     Single {\n         /// `source` in `use prefix::source as target`.\n@@ -62,6 +62,44 @@ pub enum ImportKind<'a> {\n     MacroUse,\n }\n \n+/// Manually implement `Debug` for `ImportKind` because the `source/target_bindings`\n+/// contain `Cell`s which can introduce infinite loops while printing.\n+impl<'a> std::fmt::Debug for ImportKind<'a> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        use ImportKind::*;\n+        match self {\n+            Single {\n+                ref source,\n+                ref target,\n+                ref type_ns_only,\n+                ref nested,\n+                ref additional_ids,\n+                // Ignore the following to avoid an infinite loop while printing.\n+                source_bindings: _,\n+                target_bindings: _,\n+            } => f\n+                .debug_struct(\"Single\")\n+                .field(\"source\", source)\n+                .field(\"target\", target)\n+                .field(\"type_ns_only\", type_ns_only)\n+                .field(\"nested\", nested)\n+                .field(\"additional_ids\", additional_ids)\n+                .finish_non_exhaustive(),\n+            Glob { ref is_prelude, ref max_vis } => f\n+                .debug_struct(\"Glob\")\n+                .field(\"is_prelude\", is_prelude)\n+                .field(\"max_vis\", max_vis)\n+                .finish(),\n+            ExternCrate { ref source, ref target } => f\n+                .debug_struct(\"ExternCrate\")\n+                .field(\"source\", source)\n+                .field(\"target\", target)\n+                .finish(),\n+            MacroUse => f.debug_struct(\"MacroUse\").finish(),\n+        }\n+    }\n+}\n+\n /// One import.\n #[derive(Debug, Clone)]\n pub(crate) struct Import<'a> {"}]}