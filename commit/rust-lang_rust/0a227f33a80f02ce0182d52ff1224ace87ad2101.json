{"sha": "0a227f33a80f02ce0182d52ff1224ace87ad2101", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMjI3ZjMzYTgwZjAyY2UwMTgyZDUyZmYxMjI0YWNlODdhZDIxMDE=", "commit": {"author": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-07-17T15:36:15Z"}, "committer": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-07-17T15:36:15Z"}, "message": "stabilize duration_float", "tree": {"sha": "716ea082fcbcd3f4c6f5ccf7a4c7c1bd8b25ad15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/716ea082fcbcd3f4c6f5ccf7a4c7c1bd8b25ad15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a227f33a80f02ce0182d52ff1224ace87ad2101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a227f33a80f02ce0182d52ff1224ace87ad2101", "html_url": "https://github.com/rust-lang/rust/commit/0a227f33a80f02ce0182d52ff1224ace87ad2101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a227f33a80f02ce0182d52ff1224ace87ad2101/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d56128d2919132aceaf74cc3c68a4554f5445fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56128d2919132aceaf74cc3c68a4554f5445fce", "html_url": "https://github.com/rust-lang/rust/commit/d56128d2919132aceaf74cc3c68a4554f5445fce"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "767ab539877ff3e3280673678da886ce01450a0d", "filename": "src/libcore/time.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a227f33a80f02ce0182d52ff1224ace87ad2101/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a227f33a80f02ce0182d52ff1224ace87ad2101/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=0a227f33a80f02ce0182d52ff1224ace87ad2101", "patch": "@@ -505,13 +505,12 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.as_secs_f64(), 2.7);\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub const fn as_secs_f64(&self) -> f64 {\n         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n@@ -523,13 +522,12 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.as_secs_f32(), 2.7);\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub const fn as_secs_f32(&self) -> f32 {\n         (self.secs as f32) + (self.nanos as f32) / (NANOS_PER_SEC as f32)\n@@ -543,13 +541,12 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::from_secs_f64(2.7);\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn from_secs_f64(secs: f64) -> Duration {\n         const MAX_NANOS_F64: f64 =\n@@ -579,13 +576,12 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::from_secs_f32(2.7);\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn from_secs_f32(secs: f32) -> Duration {\n         const MAX_NANOS_F32: f32 =\n@@ -614,14 +610,13 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\n     /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn mul_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(rhs * self.as_secs_f64())\n@@ -634,7 +629,6 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n@@ -643,7 +637,7 @@ impl Duration {\n     /// assert_eq!(dur.mul_f32(3.14), Duration::new(8, 478_000_640));\n     /// assert_eq!(dur.mul_f32(3.14e5), Duration::new(847799, 969_120_256));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn mul_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(rhs * self.as_secs_f32())\n@@ -656,15 +650,14 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n     /// assert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));\n     /// // note that truncation is used, not rounding\n     /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn div_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(self.as_secs_f64() / rhs)\n@@ -677,7 +670,6 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n@@ -687,7 +679,7 @@ impl Duration {\n     /// // note that truncation is used, not rounding\n     /// assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_598));\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn div_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(self.as_secs_f32() / rhs)\n@@ -697,14 +689,13 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur1 = Duration::new(2, 700_000_000);\n     /// let dur2 = Duration::new(5, 400_000_000);\n     /// assert_eq!(dur1.div_duration_f64(dur2), 0.5);\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn div_duration_f64(self, rhs: Duration) -> f64 {\n         self.as_secs_f64() / rhs.as_secs_f64()\n@@ -714,14 +705,13 @@ impl Duration {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n     /// let dur1 = Duration::new(2, 700_000_000);\n     /// let dur2 = Duration::new(5, 400_000_000);\n     /// assert_eq!(dur1.div_duration_f32(dur2), 0.5);\n     /// ```\n-    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[inline]\n     pub fn div_duration_f32(self, rhs: Duration) -> f32 {\n         self.as_secs_f32() / rhs.as_secs_f32()"}]}