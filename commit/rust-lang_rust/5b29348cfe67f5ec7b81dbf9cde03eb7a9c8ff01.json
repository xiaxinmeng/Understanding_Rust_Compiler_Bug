{"sha": "5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMjkzNDhjZmU2N2Y1ZWM3YjgxZGJmOWNkZTAzZWI3YTljOGZmMDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T18:04:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T18:04:57Z"}, "message": "Rollup merge of #70318 - anyska:multiple-derives, r=Dylan-DPC\n\nSplit long derive lists into two derive attributes.", "tree": {"sha": "80b8d16a18c61b77bf552a00de11c34bc2aba714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80b8d16a18c61b77bf552a00de11c34bc2aba714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeePpJCRBK7hj4Ov3rIwAAdHIIABhRt6c9LHUpwzQHZi9+CMOu\nXO9oLTl04qu8Oadhf5rtLh/08iigfyLIdu4T5COobuIVSw3wtMOUmVkIEkSYfNs0\n4w5zgpVG5lWoczDQ+akeoYPcfILdl/8Irqv3Ek3BO6PuuORjZCb5McmdEdyIFgcB\nhehzilT6Apk3ezTStVBlL+E8ZSu7Y88JU2X6PJF4aYU7fsmH9QOpGk6gJr1iZgbG\nyeON9u6Ae15tJfj4S8opyRAQN5lZQUBfkyWRx6gXpnyRE9GNTHBh1o95K8zr1JOM\nRCSdu9pyFcSLMhBhaVEZNrpStc6a/bciM2MSX5m2O+dAuwZh5+b35vJYtTJLBGg=\n=fwyG\n-----END PGP SIGNATURE-----\n", "payload": "tree 80b8d16a18c61b77bf552a00de11c34bc2aba714\nparent 176e2eb2716c16c1f3be216c89cbbdd604c8cc90\nparent fcb4e771a6aa6d4af3fd771dd0403e2b649561f6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584986697 +0100\ncommitter GitHub <noreply@github.com> 1584986697 +0100\n\nRollup merge of #70318 - anyska:multiple-derives, r=Dylan-DPC\n\nSplit long derive lists into two derive attributes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "html_url": "https://github.com/rust-lang/rust/commit/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176e2eb2716c16c1f3be216c89cbbdd604c8cc90", "url": "https://api.github.com/repos/rust-lang/rust/commits/176e2eb2716c16c1f3be216c89cbbdd604c8cc90", "html_url": "https://github.com/rust-lang/rust/commit/176e2eb2716c16c1f3be216c89cbbdd604c8cc90"}, {"sha": "fcb4e771a6aa6d4af3fd771dd0403e2b649561f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb4e771a6aa6d4af3fd771dd0403e2b649561f6", "html_url": "https://github.com/rust-lang/rust/commit/fcb4e771a6aa6d4af3fd771dd0403e2b649561f6"}], "stats": {"total": 562, "additions": 78, "deletions": 484}, "files": [{"sha": "7cde57e1f13f6eefbde1180a61294c6c5820d1c8", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -489,19 +489,8 @@ impl<'tcx> DepNodeParams<'tcx> for HirId {\n /// some independent path or string that persists between runs without\n /// the need to be mapped or unmapped. (This ensures we can serialize\n /// them even in the absence of a tcx.)\n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct WorkProductId {\n     hash: Fingerprint,\n }"}, {"sha": "3a9d3c56dcead0632fb38a913a6dc687efbb31bf", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -40,18 +40,8 @@ impl CrateSource {\n     }\n }\n \n-#[derive(\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    Clone,\n-    Ord,\n-    PartialOrd,\n-    Eq,\n-    PartialEq,\n-    Debug,\n-    HashStable\n-)]\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]\n+#[derive(HashStable)]\n pub enum DepKind {\n     /// A dependency that is only used for its macros.\n     MacrosOnly,"}, {"sha": "73251ee2680df49bb8b6e708670ecc2e96d7c5d8", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -80,18 +80,8 @@ use std::fmt;\n // placate the same deriving in `ty::FreeRegion`, but we may want to\n // actually attach a more meaningful ordering to scopes than the one\n // generated via deriving here.\n-#[derive(\n-    Clone,\n-    PartialEq,\n-    PartialOrd,\n-    Eq,\n-    Ord,\n-    Hash,\n-    Copy,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Copy, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct Scope {\n     pub id: hir::ItemLocalId,\n     pub data: ScopeData,\n@@ -114,19 +104,8 @@ impl fmt::Debug for Scope {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    PartialEq,\n-    PartialOrd,\n-    Eq,\n-    Ord,\n-    Hash,\n-    Debug,\n-    Copy,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub enum ScopeData {\n     Node,\n "}, {"sha": "946b6add40a7e353f32f507f31d438825b825cc6", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -15,18 +15,8 @@ use std::ops::{Deref, DerefMut, Range};\n \n // NOTE: When adding new fields, make sure to adjust the `Snapshot` impl in\n // `src/librustc_mir/interpret/snapshot.rs`.\n-#[derive(\n-    Clone,\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct Allocation<Tag = (), Extra = ()> {\n     /// The actual bytes of the allocation.\n     /// Note that the bytes of a pointer represent the offset of the pointer.\n@@ -759,18 +749,8 @@ type Block = u64;\n \n /// A bitmask where each bit refers to the byte with the same index. If the bit is `true`, the byte\n /// is defined. If it is `false` the byte is undefined.\n-#[derive(\n-    Clone,\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct UndefMask {\n     blocks: Vec<Block>,\n     len: Size,"}, {"sha": "7d862d43bba6bb93682c6f95b76d0a36990a2e4b", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -111,18 +111,8 @@ impl<T: layout::HasDataLayout> PointerArithmetic for T {}\n ///\n /// `Pointer` is also generic over the `Tag` associated with each pointer,\n /// which is used to do provenance tracking during execution.\n-#[derive(\n-    Copy,\n-    Clone,\n-    Eq,\n-    PartialEq,\n-    Ord,\n-    PartialOrd,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(HashStable)]\n pub struct Pointer<Tag = (), Id = AllocId> {\n     pub alloc_id: Id,\n     pub offset: Size,"}, {"sha": "59e6b1b0c3788c258154518799ff978fe6d208b2", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -23,19 +23,8 @@ pub struct RawConst<'tcx> {\n \n /// Represents a constant value in Rust. `Scalar` and `Slice` are optimizations for\n /// array length computations, enum discriminants and the pattern matching logic.\n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    PartialOrd,\n-    Ord,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(HashStable)]\n pub enum ConstValue<'tcx> {\n     /// Used only for types with `layout::abi::Scalar` ABI and ZSTs.\n     ///\n@@ -98,18 +87,8 @@ impl<'tcx> ConstValue<'tcx> {\n /// `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 8 bytes in\n /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes\n /// of a simple value or a pointer into another `Allocation`\n-#[derive(\n-    Clone,\n-    Copy,\n-    Eq,\n-    PartialEq,\n-    Ord,\n-    PartialOrd,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(HashStable)]\n pub enum Scalar<Tag = (), Id = AllocId> {\n     /// The raw bytes of a simple value.\n     Raw {"}, {"sha": "5b1b6bb08bf5a04ad895eb6ca6b0a0b8630aa3fa", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -69,18 +69,8 @@ impl<'tcx> HasLocalDecls<'tcx> for Body<'tcx> {\n /// The various \"big phases\" that MIR goes through.\n ///\n /// Warning: ordering of variants is significant.\n-#[derive(\n-    Copy,\n-    Clone,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord\n-)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(HashStable)]\n pub enum MirPhase {\n     Build = 0,\n     Const = 1,\n@@ -439,18 +429,8 @@ pub struct SourceInfo {\n ///////////////////////////////////////////////////////////////////////////\n // Borrow kinds\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     Shared,"}, {"sha": "78b0ee271fb740d15f5f019c5fba0756251802ad", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -2642,19 +2642,8 @@ impl<'tcx> FieldDef {\n ///\n /// You can get the environment type of a closure using\n /// `tcx.closure_env_ty()`.\n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialOrd,\n-    Ord,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub enum ClosureKind {\n     // Warning: Ordering is significant here! The ordering is chosen\n     // because the trait Fn is a subtrait of FnMut and so in turn, and"}, {"sha": "0c14580717f92c0e9fc5bc0d2878c76df84657a9", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 24, "deletions": 152, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -31,57 +31,24 @@ use std::cmp::Ordering;\n use std::marker::PhantomData;\n use std::ops::Range;\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable,\n-    TypeFoldable,\n-    Lift\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable, Lift)]\n pub struct TypeAndMut<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: hir::Mutability,\n }\n \n-#[derive(\n-    Clone,\n-    PartialEq,\n-    PartialOrd,\n-    Eq,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    HashStable\n-)]\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(HashStable)]\n /// A \"free\" region `fr` can be interpreted as \"some region\n /// at least as big as the scope `fr.scope`\".\n pub struct FreeRegion {\n     pub scope: DefId,\n     pub bound_region: BoundRegion,\n }\n \n-#[derive(\n-    Clone,\n-    PartialEq,\n-    PartialOrd,\n-    Eq,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    HashStable\n-)]\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(HashStable)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n     BrAnon(u32),\n@@ -119,18 +86,8 @@ impl BoundRegion {\n \n /// N.B., if you change this, you'll probably want to change the corresponding\n /// AST structure in `librustc_ast/ast.rs` as well.\n-#[derive(\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable,\n-    Debug\n-)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable)]\n #[rustc_diagnostic_item = \"TyKind\"]\n pub enum TyKind<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n@@ -1147,18 +1104,8 @@ impl<'tcx> PolyFnSig<'tcx> {\n \n pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<FnSig<'tcx>>>;\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct ParamTy {\n     pub index: u32,\n     pub name: Symbol,\n@@ -1182,18 +1129,8 @@ impl<'tcx> ParamTy {\n     }\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Eq,\n-    PartialEq,\n-    Ord,\n-    PartialOrd,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n+#[derive(HashStable)]\n pub struct ParamConst {\n     pub index: u32,\n     pub name: Symbol,\n@@ -1465,18 +1402,8 @@ impl Atom for RegionVid {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub enum InferTy {\n     TyVar(TyVid),\n     IntVar(IntVid),\n@@ -1494,37 +1421,15 @@ rustc_index::newtype_index! {\n     pub struct BoundVar { .. }\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct BoundTy {\n     pub var: BoundVar,\n     pub kind: BoundTyKind,\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub enum BoundTyKind {\n     Anon,\n     Param(Symbol),\n@@ -2358,19 +2263,8 @@ impl<'tcx> TyS<'tcx> {\n }\n \n /// Typed constant value.\n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Eq,\n-    PartialEq,\n-    Ord,\n-    PartialOrd,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n+#[derive(HashStable)]\n pub struct Const<'tcx> {\n     pub ty: Ty<'tcx>,\n \n@@ -2499,19 +2393,8 @@ impl<'tcx> Const<'tcx> {\n impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx Const<'tcx> {}\n \n /// Represents a constant in Rust.\n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    PartialOrd,\n-    Ord,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(HashStable)]\n pub enum ConstKind<'tcx> {\n     /// A const generic parameter.\n     Param(ParamConst),\n@@ -2549,19 +2432,8 @@ impl<'tcx> ConstKind<'tcx> {\n }\n \n /// An inference variable for a const, for use in const generics.\n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    PartialOrd,\n-    Ord,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(HashStable)]\n pub enum InferConst<'tcx> {\n     /// Infer the value of the const.\n     Var(ConstVid<'tcx>),"}, {"sha": "c796a3755316440e467ec6845cd639c0b5825ee5", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 10, "deletions": 65, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -684,19 +684,8 @@ pub enum PatKind {\n     MacCall(MacCall),\n }\n \n-#[derive(\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug,\n-    Copy,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(HashStable_Generic)]\n pub enum Mutability {\n     Mut,\n     Not,\n@@ -1321,19 +1310,8 @@ pub enum CaptureBy {\n \n /// The movability of a generator / closure literal:\n /// whether a generator contains self-references, causing it to be `!Unpin`.\n-#[derive(\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug,\n-    Copy,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(HashStable_Generic)]\n pub enum Movability {\n     /// May contain self-references, `!Unpin`.\n     Static,\n@@ -1614,19 +1592,8 @@ pub struct FnSig {\n     pub decl: P<FnDecl>,\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    HashStable_Generic,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum FloatTy {\n     F32,\n     F64,\n@@ -1655,19 +1622,8 @@ impl FloatTy {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    HashStable_Generic,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum IntTy {\n     Isize,\n     I8,\n@@ -1731,19 +1687,8 @@ impl IntTy {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    HashStable_Generic,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    Debug\n-)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum UintTy {\n     Usize,\n     U8,"}, {"sha": "a16b79993912d93b625591b3f0f09af986264763", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 8, "deletions": 46, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -120,35 +120,17 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n }\n \n /// Represents the #[stable], #[unstable], #[rustc_deprecated] attributes.\n-#[derive(\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    Clone,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    HashStable_Generic\n-)]\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n     pub rustc_depr: Option<RustcDeprecation>,\n }\n \n /// Represents the #[rustc_const_unstable] and #[rustc_const_stable] attributes.\n-#[derive(\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    Clone,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    HashStable_Generic\n-)]\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n pub struct ConstStability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n@@ -159,18 +141,8 @@ pub struct ConstStability {\n }\n \n /// The available stability levels.\n-#[derive(\n-    RustcEncodable,\n-    RustcDecodable,\n-    PartialEq,\n-    PartialOrd,\n-    Copy,\n-    Clone,\n-    Debug,\n-    Eq,\n-    Hash,\n-    HashStable_Generic\n-)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n     Unstable { reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n@@ -186,18 +158,8 @@ impl StabilityLevel {\n     }\n }\n \n-#[derive(\n-    RustcEncodable,\n-    RustcDecodable,\n-    PartialEq,\n-    PartialOrd,\n-    Copy,\n-    Clone,\n-    Debug,\n-    Eq,\n-    Hash,\n-    HashStable_Generic\n-)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n pub struct RustcDeprecation {\n     pub since: Symbol,\n     pub reason: Symbol,"}, {"sha": "3551220c5c54a1965a81d4925b7e668e20784eb8", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -105,19 +105,8 @@ impl ::std::fmt::Debug for CrateNum {\n     }\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    Hash,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable_Generic\n-)]\n+#[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable_Generic)]\n pub struct DefPathHash(pub Fingerprint);\n \n impl Borrow<Fingerprint> for DefPathHash {"}, {"sha": "b1ac7f04321eb99dd0146c8e24c2b699c9268f1f", "filename": "src/librustc_span/edition.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_span%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_span%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fedition.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -5,18 +5,8 @@ use std::str::FromStr;\n use rustc_macros::HashStable_Generic;\n \n /// The edition of the compiler (RFC 2052)\n-#[derive(\n-    Clone,\n-    Copy,\n-    Hash,\n-    PartialEq,\n-    PartialOrd,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Eq,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, RustcEncodable, RustcDecodable, Eq)]\n+#[derive(HashStable_Generic)]\n pub enum Edition {\n     // editions must be kept in order, oldest to newest\n     /// The 2015 edition"}, {"sha": "0afa2333e0615eedc796c59ce21e91279f4c50c4", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -59,18 +59,8 @@ pub struct ExpnId(u32);\n \n /// A property of a macro expansion that determines how identifiers\n /// produced by that expansion are resolved.\n-#[derive(\n-    Copy,\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Hash,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable_Generic\n-)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable_Generic)]\n pub enum Transparency {\n     /// Identifier produced by a transparent expansion is always resolved at call-site.\n     /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.\n@@ -747,17 +737,8 @@ impl ExpnKind {\n }\n \n /// The kind of macro invocation or definition.\n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    Debug,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum MacroKind {\n     /// A bang macro `foo!()`.\n     Bang,"}, {"sha": "3ebcef947bc37fd359088bbf2236e9b4377616f6", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -72,18 +72,8 @@ impl Globals {\n scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n \n /// Differentiates between real files and common virtual files.\n-#[derive(\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    Clone,\n-    Ord,\n-    PartialOrd,\n-    Hash,\n-    RustcDecodable,\n-    RustcEncodable,\n-    HashStable_Generic\n-)]\n+#[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash, RustcDecodable, RustcEncodable)]\n+#[derive(HashStable_Generic)]\n pub enum FileName {\n     Real(PathBuf),\n     /// Call to `quote!`."}, {"sha": "1736063cc5f7c5f9be2514ea448e79c44e42847f", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "patch": "@@ -5,19 +5,8 @@ use rustc_macros::HashStable_Generic;\n #[cfg(test)]\n mod tests;\n \n-#[derive(\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Clone,\n-    Copy,\n-    Debug,\n-    HashStable_Generic\n-)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum Abi {\n     // N.B., this ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)"}]}