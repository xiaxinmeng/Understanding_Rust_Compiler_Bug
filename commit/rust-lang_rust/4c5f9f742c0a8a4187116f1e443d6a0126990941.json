{"sha": "4c5f9f742c0a8a4187116f1e443d6a0126990941", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNWY5Zjc0MmMwYThhNDE4NzExNmYxZTQ0M2Q2YTAxMjY5OTA5NDE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-26T19:34:37Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-26T21:50:47Z"}, "message": "Replace `discriminant_switch_effect` with more general version\n\n...that allows arbitrary effects on each edge of a `SwitchInt`\nterminator.", "tree": {"sha": "e9a2d7a34b1b131827a26d131a0e39c1c23a78d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9a2d7a34b1b131827a26d131a0e39c1c23a78d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c5f9f742c0a8a4187116f1e443d6a0126990941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5f9f742c0a8a4187116f1e443d6a0126990941", "html_url": "https://github.com/rust-lang/rust/commit/4c5f9f742c0a8a4187116f1e443d6a0126990941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c5f9f742c0a8a4187116f1e443d6a0126990941/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e", "html_url": "https://github.com/rust-lang/rust/commit/e37c99fa1ca2341d652a1b1859ea9aa2ae993e1e"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "2804a10f074f4752b7d8ce4e3f476c58414e96a2", "filename": "compiler/rustc_mir/src/dataflow/framework/mod.rs", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4c5f9f742c0a8a4187116f1e443d6a0126990941/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5f9f742c0a8a4187116f1e443d6a0126990941/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs?ref=4c5f9f742c0a8a4187116f1e443d6a0126990941", "patch": "@@ -37,8 +37,7 @@ use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, BasicBlock, Location};\n-use rustc_middle::ty::{self, TyCtxt};\n-use rustc_target::abi::VariantIdx;\n+use rustc_middle::ty::TyCtxt;\n \n mod cursor;\n mod direction;\n@@ -152,6 +151,8 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     ) {\n     }\n \n+    /* Edge-specific effects */\n+\n     /// Updates the current dataflow state with the effect of a successful return from a `Call`\n     /// terminator.\n     ///\n@@ -183,20 +184,28 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// Updates the current dataflow state with the effect of taking a particular branch in a\n     /// `SwitchInt` terminator.\n     ///\n-    /// Much like `apply_call_return_effect`, this effect is only propagated along a single\n-    /// outgoing edge from this basic block.\n+    /// Unlike the other edge-specific effects, which are allowed to mutate `Self::Domain`\n+    /// directly, overriders of this method must pass a callback to\n+    /// [`SwitchIntEdgeEffects::apply`]. The callback will be run once for each outgoing edge and\n+    /// will have access to the dataflow state that will be propagated along that edge.\n+    ///\n+    /// This interface is somewhat more complex than the other visitor-like \"effect\" methods.\n+    /// However, it is both more ergonomic\u2014callers don't need to recompute or cache information\n+    /// about a given `SwitchInt` terminator for each one of its edges\u2014and more efficient\u2014the\n+    /// engine doesn't need to clone the exit state for a block unless\n+    /// `SwitchIntEdgeEffects::apply` is actually called.\n     ///\n     /// FIXME: This class of effects is not supported for backward dataflow analyses.\n-    fn apply_discriminant_switch_effect(\n+    fn apply_switch_int_edge_effects(\n         &self,\n-        _state: &mut Self::Domain,\n         _block: BasicBlock,\n-        _enum_place: mir::Place<'tcx>,\n-        _adt: &ty::AdtDef,\n-        _variant: VariantIdx,\n+        _discr: &mir::Operand<'tcx>,\n+        _apply_edge_effects: &mut impl SwitchIntEdgeEffects<Self::Domain>,\n     ) {\n     }\n \n+    /* Extension methods */\n+\n     /// Creates an `Engine` to find the fixpoint for this dataflow problem.\n     ///\n     /// You shouldn't need to override this outside this module, since the combination of the\n@@ -267,6 +276,8 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n     ) {\n     }\n \n+    /* Edge-specific effects */\n+\n     /// See `Analysis::apply_call_return_effect`.\n     fn call_return_effect(\n         &self,\n@@ -286,14 +297,12 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n     ) {\n     }\n \n-    /// See `Analysis::apply_discriminant_switch_effect`.\n-    fn discriminant_switch_effect(\n+    /// See `Analysis::apply_switch_int_edge_effects`.\n+    fn switch_int_edge_effects<G: GenKill<Self::Idx>>(\n         &self,\n-        _state: &mut impl GenKill<Self::Idx>,\n         _block: BasicBlock,\n-        _enum_place: mir::Place<'tcx>,\n-        _adt: &ty::AdtDef,\n-        _variant: VariantIdx,\n+        _discr: &mir::Operand<'tcx>,\n+        _edge_effects: &mut impl SwitchIntEdgeEffects<G>,\n     ) {\n     }\n }\n@@ -339,6 +348,8 @@ where\n         self.before_terminator_effect(state, terminator, location);\n     }\n \n+    /* Edge-specific effects */\n+\n     fn apply_call_return_effect(\n         &self,\n         state: &mut A::Domain,\n@@ -359,17 +370,17 @@ where\n         self.yield_resume_effect(state, resume_block, resume_place);\n     }\n \n-    fn apply_discriminant_switch_effect(\n+    fn apply_switch_int_edge_effects(\n         &self,\n-        state: &mut A::Domain,\n         block: BasicBlock,\n-        enum_place: mir::Place<'tcx>,\n-        adt: &ty::AdtDef,\n-        variant: VariantIdx,\n+        discr: &mir::Operand<'tcx>,\n+        edge_effects: &mut impl SwitchIntEdgeEffects<A::Domain>,\n     ) {\n-        self.discriminant_switch_effect(state, block, enum_place, adt, variant);\n+        self.switch_int_edge_effects(block, discr, edge_effects);\n     }\n \n+    /* Extension methods */\n+\n     fn into_engine(\n         self,\n         tcx: TyCtxt<'tcx>,\n@@ -531,5 +542,17 @@ impl EffectIndex {\n     }\n }\n \n+pub struct SwitchIntTarget {\n+    pub value: Option<u128>,\n+    pub target: BasicBlock,\n+}\n+\n+/// A type that records the edge-specific effects for a `SwitchInt` terminator.\n+pub trait SwitchIntEdgeEffects<D> {\n+    /// Calls `apply_edge_effect` for each outgoing edge from a `SwitchInt` terminator and\n+    /// records the results.\n+    fn apply(&mut self, apply_edge_effect: impl FnMut(&mut D, SwitchIntTarget));\n+}\n+\n #[cfg(test)]\n mod tests;"}]}