{"sha": "4016c729f18ce5aa8976fc16617b9368437c28db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMTZjNzI5ZjE4Y2U1YWE4OTc2ZmMxNjYxN2I5MzY4NDM3YzI4ZGI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T06:28:53Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T09:00:10Z"}, "message": "Remove use of associated_types feature gate from tests.", "tree": {"sha": "5eaf8a7a7c2041488e1f352ddc1e4fbd2d89bf45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eaf8a7a7c2041488e1f352ddc1e4fbd2d89bf45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4016c729f18ce5aa8976fc16617b9368437c28db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4016c729f18ce5aa8976fc16617b9368437c28db", "html_url": "https://github.com/rust-lang/rust/commit/4016c729f18ce5aa8976fc16617b9368437c28db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4016c729f18ce5aa8976fc16617b9368437c28db/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e3d78f06fc78e6ad58379824be2d7fed525655a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3d78f06fc78e6ad58379824be2d7fed525655a", "html_url": "https://github.com/rust-lang/rust/commit/6e3d78f06fc78e6ad58379824be2d7fed525655a"}], "stats": {"total": 236, "additions": 17, "deletions": 219}, "files": [{"sha": "44fbcf2150a4bf9050ad727622351f4806cd10d4", "filename": "src/test/auxiliary/associated-types-cc-lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fauxiliary%2Fassociated-types-cc-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fauxiliary%2Fassociated-types-cc-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fassociated-types-cc-lib.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -12,7 +12,6 @@\n // cross-crate scenario.\n \n #![crate_type=\"lib\"]\n-#![feature(associated_types)]\n \n pub trait Bar {\n     type T;"}, {"sha": "c3f7f2d1aa1666ede0d3c29d0e33584c5cbc7f46", "filename": "src/test/auxiliary/issue-16643.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fauxiliary%2Fissue-16643.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fauxiliary%2Fissue-16643.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-16643.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_type = \"lib\"]\n-#![feature(associated_types)]\n \n pub struct TreeBuilder<H>;\n "}, {"sha": "7a378b06df9e175ceac52066671a93b94ce8825e", "filename": "src/test/auxiliary/issue_20389.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fauxiliary%2Fissue_20389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fauxiliary%2Fissue_20389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_20389.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n pub trait T {\n     type C;\n }"}, {"sha": "caa9bbe5736e4adb55d0c7620dfe996b0feef5dc", "filename": "src/test/auxiliary/overloaded_autoderef_xc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct DerefWithHelper<H, T> {"}, {"sha": "cbd2ac69c789415114f21ea2408fb8eae84d8ac8", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::cmp::PartialEq;\n use std::ops::{Add, Sub, Mul};\n "}, {"sha": "9128930651f25ec6fd77ea6a1a7821ca214ba09b", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -38,7 +38,7 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n-#![feature(associated_types, slicing_syntax)]\n+#![feature(slicing_syntax)]\n \n use std::cmp::min;\n use std::io::{BufferedWriter, File};"}, {"sha": "28d7488c9bf8f837f3458d0d2f0d9b0d180a0c58", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android see #10393 #13206\n \n-#![feature(associated_types, slicing_syntax)]\n+#![feature(slicing_syntax)]\n \n use std::ascii::OwnedAsciiExt;\n use std::iter::repeat;"}, {"sha": "0a0af127765da2e1dea1387b22c3bb6b75a2b610", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -40,8 +40,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#![feature(associated_types)]\n-\n use std::iter::repeat;\n use std::sync::Arc;\n use std::sync::mpsc::channel;"}, {"sha": "77bae87c7dd219e01d674909604b5be9db8c9c68", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android see #10393 #13206\n \n-#![feature(associated_types, slicing_syntax, unboxed_closures)]\n+#![feature(slicing_syntax, unboxed_closures)]\n \n extern crate libc;\n "}, {"sha": "0abec3e1d12a506d5daa138bf8de5f15a57d5967", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -12,7 +12,7 @@\n // just propagate the error.\n \n #![crate_type = \"lib\"]\n-#![feature(associated_types, default_type_params, lang_items)]\n+#![feature(default_type_params, lang_items)]\n #![no_std]\n \n #[lang=\"sized\"]"}, {"sha": "918826bb390cbe8320a658faa63fb01cc84bfc9d", "filename": "src/test/compile-fail/associated-types-bound-failure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test equality constraints on associated types in a where clause.\n \n-#![feature(associated_types)]\n-\n pub trait ToInt {\n     fn to_int(&self) -> int;\n }"}, {"sha": "58dbb9863254afd1419252f02b58943a571a4be3", "filename": "src/test/compile-fail/associated-types-eq-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test equality constraints on associated types. Check that unsupported syntax\n // does not ICE.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "e298d05d11dad1baa4e49763b64ed886d4102f98", "filename": "src/test/compile-fail/associated-types-eq-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test equality constraints on associated types. Check we get an error when an\n // equality constraint is used in a qualified path.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "0f18a84cd1ae317186030e7b9639379d31fe4bd8", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test equality constraints on associated types. Check we get type errors\n // where we should.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "ef56fdeb051835ce3965e9d062c973811cddf85d", "filename": "src/test/compile-fail/associated-types-eq-expr-path.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Check that an associated type cannot be bound in an expression path.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type A;\n     fn bar() -> int;"}, {"sha": "2532977b1ca24c021f87535c3d93736838d9ea12", "filename": "src/test/compile-fail/associated-types-eq-hr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Check testing of equality constraints in a higher-ranked context.\n \n-#![feature(associated_types)]\n-\n pub trait TheTrait<T> {\n     type A;\n "}, {"sha": "9c173515793f44f84c47038fb8a51f0de08e8aa6", "filename": "src/test/compile-fail/associated-types-for-unimpl-trait.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> <Self as Get>::Value;\n@@ -22,4 +20,3 @@ trait Other {\n \n fn main() {\n }\n-"}, {"sha": "3999e9cbe753d1d90ab8294ada23d1d1be274f6a", "filename": "src/test/compile-fail/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> <Self as Get>::Value;\n@@ -26,4 +24,3 @@ trait Grab {\n \n fn main() {\n }\n-"}, {"sha": "371f97e867a2976b9a149cff2917c348d79bc868", "filename": "src/test/compile-fail/associated-types-incomplete-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Check that the user gets an errror if they omit a binding from an\n // object type.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     type B;"}, {"sha": "a00aa8364bde2adeed76ab24a99771fd61a49e2c", "filename": "src/test/compile-fail/associated-types-issue-20346.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-20346.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-20346.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-20346.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,7 +11,6 @@\n // Test that we reliably check the value of the associated type.\n \n #![crate_type = \"lib\"]\n-#![feature(associated_types)]\n #![no_implicit_prelude]\n \n use std::option::Option::{self, None, Some};"}, {"sha": "98f2355f9be1a40e109ffa72eeb4d7694876c071", "filename": "src/test/compile-fail/associated-types-no-suitable-bound.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> <Self as Get>::Value;\n@@ -26,4 +24,3 @@ impl Struct {\n \n fn main() {\n }\n-"}, {"sha": "a3f2850b29464589d86e4c28f38112be3065f0f2", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n // Check that we get an error when you use `<Self as Get>::Value` in\n // the trait definition but `Self` does not, in fact, implement `Get`.\n "}, {"sha": "ab061ca4d8da62fcec0bcf48dccc22e5906168bd", "filename": "src/test/compile-fail/associated-types-path-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-1.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we have one and only one associated type per ref.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n }\n@@ -23,4 +21,3 @@ pub fn f1<T>(a: T, x: T::A) {} //~ERROR associated type `A` not found\n pub fn f2<T: Foo + Bar>(a: T, x: T::A) {} //~ERROR ambiguous associated type `A`\n \n pub fn main() {}\n-"}, {"sha": "ef85fc22fe7d442808835d106899d4d229ff0fe2", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test type checking of uses of associated types via sugary paths.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n }"}, {"sha": "c5245840c4285a34404cc83b348801b94640aaeb", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-explicit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test you can't use a higher-ranked trait bound inside of a qualified\n // path (just won't parse).\n \n-#![feature(associated_types)]\n-\n pub trait Foo<T> {\n     type A;\n "}, {"sha": "1f1ab4ca4b6d86d6e8870de4c9eb75492d79238e", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn-body.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Check projection of an associated type out of a higher-ranked\n // trait-bound in the context of a function body.\n \n-#![feature(associated_types)]\n-\n pub trait Foo<T> {\n     type A;\n "}, {"sha": "0920bfab32b97f20ad9267f91d5b8d1acf6a4496", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Check projection of an associated type out of a higher-ranked trait-bound\n // in the context of a function signature.\n \n-#![feature(associated_types)]\n-\n pub trait Foo<T> {\n     type A;\n "}, {"sha": "0acb0f4853bc201b5da3d8ac434494cd99a9e841", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Check projection of an associated type out of a higher-ranked trait-bound\n // in the context of a struct definition.\n \n-#![feature(associated_types)]\n-\n pub trait Foo<T> {\n     type A;\n "}, {"sha": "21e92c53058d66b241aac2425cf8a31299571377", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-trait-method.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Check projection of an associated type out of a higher-ranked trait-bound\n // in the context of a method definition in a trait.\n \n-#![feature(associated_types)]\n-\n pub trait Foo<T> {\n     type A;\n "}, {"sha": "968634669446a2cf0816fa0c082a64963c998fcd", "filename": "src/test/compile-fail/associated-types-unconstrained.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Check that an associated type cannot be bound in an expression path.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type A;\n     fn bar() -> int;"}, {"sha": "5ae2f65fb2e47746c70da215771e79b1e9775298", "filename": "src/test/compile-fail/associated-types-unsized.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Sized? Value;\n     fn get(&self) -> <Self as Get>::Value;\n@@ -21,4 +19,3 @@ fn foo<T:Get>(t: T) {\n \n fn main() {\n }\n-"}, {"sha": "2f26059330e48c524205841d77558cfb72fb8e6f", "filename": "src/test/compile-fail/binop-consume-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,7 +10,7 @@\n \n // Test that binary operators consume their arguments\n \n-#![feature(associated_types, default_type_params)]\n+#![feature(default_type_params)]\n \n use std::ops::{Add, Sub, Mul, Div, Rem, BitAnd, BitXor, BitOr, Shl, Shr};\n "}, {"sha": "65e3564d913eb3e41ddd95eb4370f034cbdc367c", "filename": "src/test/compile-fail/binop-move-semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,7 +10,7 @@\n \n // Test that move restrictions are enforced on overloaded binary operations\n \n-#![feature(associated_types, default_type_params)]\n+#![feature(default_type_params)]\n \n use std::ops::Add;\n "}, {"sha": "66bcfc23808354d98635c3c004b9740bedc04ebe", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test how overloaded deref interacts with borrows when DerefMut\n // is implemented.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Deref, DerefMut};\n \n struct Own<T> {"}, {"sha": "abab9e57ffe34e7c181b674070c6598859e8a3a5", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test how overloaded deref interacts with borrows when only\n // Deref and not DerefMut is implemented.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct Rc<T> {"}, {"sha": "dda7e4d10474b48838a575d1f33f2a3ed9282550", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test how overloaded deref interacts with borrows when DerefMut\n // is implemented.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Deref, DerefMut};\n \n struct Own<T> {"}, {"sha": "001a5232b127fe05fb8d8c4366071806809d1166", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test how overloaded deref interacts with borrows when only\n // Deref and not DerefMut is implemented.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct Rc<T> {"}, {"sha": "924d70e9f46c6c880ace78b9d48ec97cb8444516", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Add;\n \n #[derive(Clone)]"}, {"sha": "96782e226c4e29b362d7dcf2d95ea9e0f820437c", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types, default_type_params)]\n+#![feature(default_type_params)]\n \n use std::ops::Add;\n "}, {"sha": "53fb935755cf05e66010a12f45d7c1e9d86086f2", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Index;\n \n struct MyVec<T> {"}, {"sha": "416e67dac0ced8f8e2c1383bc663957c284b5b8f", "filename": "src/test/compile-fail/borrowck-overloaded-index-autoderef.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test that we still see borrowck errors of various kinds when using\n // indexing and autoderef in combination.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n@@ -95,5 +93,3 @@ fn test9(mut f: Box<Bar>, g: Bar, s: String) {\n \n fn main() {\n }\n-\n-"}, {"sha": "80b68dbf519eefb62325a0f1383778e1a4d2cb9c", "filename": "src/test/compile-fail/borrowck-overloaded-index.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n@@ -70,5 +68,3 @@ fn main() {\n     s[2] = 20;\n     //~^ ERROR cannot assign to immutable dereference (dereference is implicit, due to indexing)\n }\n-\n-"}, {"sha": "e297ecaac233e49da769b1e22cde3f875ce57f6d", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test that overloaded index expressions with DST result types\n // can't be used as rvalues\n \n-#![feature(associated_types)]\n-\n use std::ops::Index;\n use std::fmt::Show;\n "}, {"sha": "f0b9e796ae62dd62b3f2b7ce01c17b6fe7fc93f7", "filename": "src/test/compile-fail/infinite-autoderef.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // error-pattern: reached the recursion limit while auto-dereferencing\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct Foo;"}, {"sha": "37bb1cb1911e5a9fd3fab55154cf285a4d0cdfcd", "filename": "src/test/compile-fail/issue-18389.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(unboxed_closures)]\n-#![feature(associated_types)]\n \n use std::any::Any;\n use std::intrinsics::TypeId;"}, {"sha": "0d1a1f16c2c932d34ea64707065193248aac1b05", "filename": "src/test/compile-fail/issue-18566.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct MyPtr<'a>(&'a mut uint);"}, {"sha": "95782630efc82e622f19cc7c126f8581d7dfa7d9", "filename": "src/test/compile-fail/issue-18611.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n fn add_state(op: <int as HasState>::State) {\n //~^ ERROR the trait `HasState` is not implemented for the type `int`\n }"}, {"sha": "3a9de74104364156b4279f01008e421ff32ae11f", "filename": "src/test/compile-fail/issue-18819.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type Item;\n }"}, {"sha": "70fe6b9b6a868acac98a548e29fd31dcb6b60a48", "filename": "src/test/compile-fail/issue-19883.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait From<Src> {\n     type Output;\n "}, {"sha": "b52f2b1b13857231b830f69492590d09114311eb", "filename": "src/test/compile-fail/issue-20005.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait From<Src> {\n     type Result;\n "}, {"sha": "d58e89e7767e813e0c380b0a34bf3d1c96355399", "filename": "src/test/compile-fail/static-reference-to-fn-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n struct StateMachineIter<'a> {\n     statefn: &'a StateMachineFunc<'a>\n }\n@@ -61,4 +59,3 @@ fn main() {\n     println!(\"{}\",it.next());\n     println!(\"{}\",it.next());\n }\n-"}, {"sha": "30609ddc9446a0b357e5797fc6d448a609081205", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -13,7 +13,7 @@\n // (In this case the mul method should take &f64 and not f64)\n // See: #11450\n \n-#![feature(associated_types, default_type_params)]\n+#![feature(default_type_params)]\n \n use std::ops::Mul;\n "}, {"sha": "3314b613201595442e4373c320795b189bc380ad", "filename": "src/test/run-pass/associated-types-basic.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type T;\n }\n@@ -23,4 +21,3 @@ fn main() {\n     let y: int = 44;\n     assert_eq!(x * 2, y);\n }\n-"}, {"sha": "caf7d31a5fd45c2f8fbf8b051265da9d3da07563", "filename": "src/test/run-pass/associated-types-binding-in-where-clause.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test equality constraints on associated types in a where clause.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "c34a19e1d8242206ad82a45c896fc67f933e7609", "filename": "src/test/run-pass/associated-types-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test equality constraints on associated types in a where clause.\n \n-#![feature(associated_types)]\n-\n pub trait ToInt {\n     fn to_int(&self) -> int;\n }"}, {"sha": "58aa351ba9c41c27d45c2cad8596fdea9b52988d", "filename": "src/test/run-pass/associated-types-cc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -13,8 +13,6 @@\n // Test that we are able to reference cross-crate traits that employ\n // associated types.\n \n-#![feature(associated_types)]\n-\n extern crate \"associated-types-cc-lib\" as bar;\n \n use bar::Bar;"}, {"sha": "d05275e6ffea7148f5ac9b5a69a520e250fb820a", "filename": "src/test/run-pass/associated-types-conditional-dispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -14,7 +14,7 @@\n // `Target=[A]`, then the impl marked with `(*)` is seen to conflict\n // with all the others.\n \n-#![feature(associated_types, default_type_params)]\n+#![feature(default_type_params)]\n \n use std::ops::Deref;\n "}, {"sha": "68b49af0d3b696539321500bea230ad9d8e3457e", "filename": "src/test/run-pass/associated-types-constant-type.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait SignedUnsigned {\n     type Opposite;\n     fn convert(self) -> Self::Opposite;\n@@ -39,4 +37,3 @@ fn main() {\n     let x = get(22);\n     assert_eq!(22u, x);\n }\n-"}, {"sha": "0ec8a3661906f7aaee7806a151ba4718339eb7da", "filename": "src/test/run-pass/associated-types-eq-obj.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test equality constraints on associated types inside of an object type\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "388a2d734473153f9b4c602bd59d99efa6cc51df", "filename": "src/test/run-pass/associated-types-impl-redirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -16,7 +16,7 @@\n \n // ignore-pretty -- FIXME(#17362)\n \n-#![feature(associated_types, lang_items, unboxed_closures)]\n+#![feature(lang_items, unboxed_closures)]\n #![no_implicit_prelude]\n \n use std::kinds::Sized;"}, {"sha": "0ae61037154728837200000a2174cbc53e907154", "filename": "src/test/run-pass/associated-types-in-default-method.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;\n@@ -35,5 +33,3 @@ fn main() {\n     };\n     assert_eq!(*s.grab(), 100);\n }\n-\n-"}, {"sha": "4104f520a0c5d714827f33f6cd384c9aedfafa3e", "filename": "src/test/run-pass/associated-types-in-fn.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;\n@@ -36,4 +34,3 @@ fn main() {\n     };\n     assert_eq!(*grab(&s), 100);\n }\n-"}, {"sha": "59f05e1184285c531c284be909093d127822a38b", "filename": "src/test/run-pass/associated-types-in-impl-generics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;\n@@ -44,4 +42,3 @@ fn main() {\n     };\n     assert_eq!(*s.grab(), 100);\n }\n-"}, {"sha": "951497709fd69955e6c7408b4f2f38e27bf12a51", "filename": "src/test/run-pass/associated-types-in-inherent-method.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;\n@@ -38,4 +36,3 @@ fn main() {\n     };\n     assert_eq!(*Struct::grab(&s), 100);\n }\n-"}, {"sha": "d35b7331d4dbfa757b68f2d072decf3dc1e0991f", "filename": "src/test/run-pass/associated-types-issue-20371.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,7 +11,6 @@\n // Test that we are able to have an impl that defines an associated type\n // before the actual trait.\n \n-#![feature(associated_types)]\n impl X for f64 { type Y = int; }\n trait X {type Y; }\n fn main() {}"}, {"sha": "00237e2fb0f0f87790fa8af314572cf1bdebf1bd", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-ufcs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n \n-#![feature(associated_types)]\n-\n struct Splits<'a, T, P>;\n struct SplitsN<I>;\n "}, {"sha": "dcfdba5e746c38e5a404f7fabdc1b751ba798a44", "filename": "src/test/run-pass/associated-types-normalize-in-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n \n-#![feature(associated_types)]\n-\n struct Splits<'a, T, P>;\n struct SplitsN<I>;\n "}, {"sha": "24dae20b3e77e976a4b3d67b25e7753802afc901", "filename": "src/test/run-pass/associated-types-projection-bound-in-supertraits.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -13,8 +13,6 @@\n // this case, the `Result=Self` binding in the supertrait listing of\n // `Int` was being ignored.\n \n-#![feature(associated_types)]\n-\n trait Not {\n     type Result;\n "}, {"sha": "abbde16faefca14ffa4d81a441ad1cf9ba037c82", "filename": "src/test/run-pass/associated-types-qualified-path-with-trait-with-type-parameters.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Foo<T> {\n     type Bar;\n     fn get_bar() -> <Self as Foo<T>>::Bar;"}, {"sha": "e7a8061a3467aa4f6d8479fa2788829fccce42d4", "filename": "src/test/run-pass/associated-types-resolve-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get<T> {\n     fn get(&self) -> T;\n }"}, {"sha": "b9b6d14f8a071decd2a4edef6644d4cfbcb4622e", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test equality constraints on associated types in a where clause.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "9e388dc3d347e7932e2cb7fcdd589dba8c0760a7", "filename": "src/test/run-pass/associated-types-simple.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;\n@@ -32,4 +30,3 @@ fn main() {\n     };\n     assert_eq!(*s.get(), 100);\n }\n-"}, {"sha": "880554b61b2ffa7fb751691b182bd16589dffcf7", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test paths to associated types using the type-parameter-only sugar.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> Self::A;"}, {"sha": "abbe250b6279a17051edf12a87281d7a6d367eb0", "filename": "src/test/run-pass/associated-types-where-clause-impl-ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -16,7 +16,7 @@\n \n // ignore-pretty -- FIXME(#17362) pretty prints with `<<` which lexes wrong\n \n-#![feature(associated_types, lang_items, unboxed_closures)]\n+#![feature(lang_items, unboxed_closures)]\n #![no_implicit_prelude]\n \n use std::kinds::Sized;"}, {"sha": "0a12df53de2327013b9e5f7d41c9fb2794a0edbd", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-#![feature(associated_types)]\n-\n use std::ops::{Deref, DerefMut};\n \n pub struct Arr {"}, {"sha": "8ef8f1a868d51650f976fbdd5a8e1df479bce72e", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n pub struct Arr {"}, {"sha": "d1823359af1351c438d6fd425c7752aafdf13316", "filename": "src/test/run-pass/dst-index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test that overloaded index expressions with DST result types\n // work and don't ICE.\n \n-#![feature(associated_types)]\n-\n use std::ops::Index;\n use std::fmt::Show;\n "}, {"sha": "a673a67089a3a2289225b0572a44b05ea52cb3cd", "filename": "src/test/run-pass/fixup-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Deref, DerefMut};\n \n // Generic unique/owned smaht pointer.\n@@ -55,4 +53,3 @@ fn test2(mut x: Own<Own<Own<Point>>>) {\n }\n \n fn main() {}\n-"}, {"sha": "21b54ba0e793b2807261ac09ac89a8c7694fea8e", "filename": "src/test/run-pass/issue-13167.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-13167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-13167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13167.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::slice;\n \n pub struct PhfMapEntries<'a, T: 'a> {"}, {"sha": "3c76a827fb2958e546f145bd2e865bc489602b7e", "filename": "src/test/run-pass/issue-13264.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13264.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct Root {"}, {"sha": "2e8bfc52832a787fd5ab7d50b8baf0ad3e5b0098", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Matcher {\n     fn next_match(&mut self) -> Option<(uint, uint)>;\n }"}, {"sha": "e404f5fa11874e71fea79a36064e9fbd0308ed6b", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,7 +11,7 @@\n // If `Index` used an associated type for its output, this test would\n // work more smoothly.\n \n-#![feature(associated_types, old_orphan_check)]\n+#![feature(old_orphan_check)]\n \n use std::ops::Index;\n "}, {"sha": "e01de3a3262edefbe1f725de31b0c2839ee95f18", "filename": "src/test/run-pass/issue-16596.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-16596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-16596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16596.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait MatrixRow {}\n \n struct Mat;"}, {"sha": "6ef4f868d215094faf76c687bd6be2ec5949d4d2", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "b4bd55da597578a8b2ca860b3eba0137406b7489", "filename": "src/test/run-pass/issue-17732.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-17732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-17732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17732.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n trait Person {\n     type string;\n }"}, {"sha": "83ba322ba30134d0580affe0d79308742ef92c20", "filename": "src/test/run-pass/issue-19081.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19081.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-pretty -- FIXME(#17362) pretty prints as `Hash<<Self as Hasher...` which fails to parse\n \n-#![feature(associated_types)]\n-\n pub trait Hasher {\n     type State;\n "}, {"sha": "d95f74ef2a2ba8217c4b5ee48e5b5253240444b5", "filename": "src/test/run-pass/issue-19121.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19121.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test that a partially specified trait object with unspecified associated\n // type does not ICE.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type A;\n }"}, {"sha": "3436871b4d1fef7f16331e5b8041ef09e454faec", "filename": "src/test/run-pass/issue-19129-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19129-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19129-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19129-1.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Trait<Input> {\n     type Output;\n "}, {"sha": "d6b3a1908b82d6cb78b2619126ac7e56191199ef", "filename": "src/test/run-pass/issue-19129-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19129-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19129-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19129-2.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Trait<Input> {\n     type Output;\n "}, {"sha": "91bc645b2d486a4a2bce680b492d399af05e29ab", "filename": "src/test/run-pass/issue-19479.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19479.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19479.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19479.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n trait Base {}\n trait AssocA {\n     type X: Base;"}, {"sha": "43116f63641ded4b5e868cce3731a7fc33e0a4a3", "filename": "src/test/run-pass/issue-19631.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19631.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait PoolManager {\n     type C;\n }"}, {"sha": "01a073a6889aedf28a7fee91eaa3e1f09d4ef3a2", "filename": "src/test/run-pass/issue-19632.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19632.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19632.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19632.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait PoolManager {\n     type C;\n }"}, {"sha": "a9ce6c7a9eb48bc7f399de8ecd60d20aae7ee8d8", "filename": "src/test/run-pass/issue-19850.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-19850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19850.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test that `<Type as Trait>::Output` and `Self::Output` are accepted as type annotations in let\n // bindings\n \n-#![feature(associated_types)]\n-\n trait Int {\n     fn one() -> Self;\n     fn leading_zeros(self) -> uint;"}, {"sha": "374460487d8f211dead321386806720688fe59ab", "filename": "src/test/run-pass/issue-20009.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-20009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-20009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20009.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Check that associated types are `Sized`\n \n-#![feature(associated_types)]\n-\n trait Trait {\n     type Output;\n "}, {"sha": "877cec48b5dc77c54e72542dd48e4f01df9ec246", "filename": "src/test/run-pass/issue-20389.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-20389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-20389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20389.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:issue_20389.rs\n \n-#![feature(associated_types)]\n extern crate issue_20389;\n \n struct Foo;"}, {"sha": "8868b6905ad0761bb63c779c258ecbf7ea04f1a7", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,7 +10,7 @@\n \n // If `Mul` used an associated type for its output, this test would\n // work more smoothly.\n-#![feature(associated_types, default_type_params, old_orphan_check)]\n+#![feature(default_type_params, old_orphan_check)]\n \n use std::ops::Mul;\n "}, {"sha": "7e1a8d8d7017f767c26378926949c08dbd5d938c", "filename": "src/test/run-pass/operator-multidispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,7 +11,7 @@\n // Test that we can overload the `+` operator for points so that two\n // points can be added, and a point can be added to an integer.\n \n-#![feature(associated_types, default_type_params)]\n+#![feature(default_type_params)]\n \n use std::ops;\n "}, {"sha": "c20b7336deb325e3a2f27240d7cbc30f02951b4e", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::cmp;\n use std::ops;\n "}, {"sha": "f0646853b6be8824223ea0c3a551ff736992d2dc", "filename": "src/test/run-pass/overloaded-autoderef-count.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::cell::Cell;\n use std::ops::{Deref, DerefMut};\n "}, {"sha": "de37173810f044d0d4cb1dd1946d29d8a305a98e", "filename": "src/test/run-pass/overloaded-autoderef-indexing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct DerefArray<'a, T:'a> {"}, {"sha": "c34aed42c970fe5e4120e40a86910e222b700b00", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::rc::Rc;\n use std::ops::Deref;\n "}, {"sha": "be2b309b8217ffa78f8931ceff6925ea25c03b4b", "filename": "src/test/run-pass/overloaded-autoderef-vtable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct DerefWithHelper<H, T> {"}, {"sha": "5cd76879798cb77e14f96f658377269f21c84915", "filename": "src/test/run-pass/overloaded-deref-count.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::cell::Cell;\n use std::ops::{Deref, DerefMut};\n use std::vec::Vec;"}, {"sha": "aac0b5e06d004fde8c98838ea36752d4425d4155", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test overloading of the `[]` operator.  In particular test that it\n // takes its argument *by reference*.\n \n-#![feature(associated_types)]\n-\n use std::ops::Index;\n \n struct AssociationList<K,V> {"}, {"sha": "bc67c0afc7b520d5f6e2b87d28f9bfad4ec865d3", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -10,8 +10,6 @@\n \n // Test overloaded indexing combined with autoderef.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n@@ -84,4 +82,3 @@ fn main() {\n     assert_eq!(f[1].get(), 5);\n     assert_eq!(f[1].get_from_ref(), 5);\n }\n-"}, {"sha": "487fb93c9fee8f3a09135d7503989ade445b6158", "filename": "src/test/run-pass/overloaded-index-in-field.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -11,8 +11,6 @@\n // Test using overloaded indexing when the \"map\" is stored in a\n // field. This caused problems at some point.\n \n-#![feature(associated_types)]\n-\n use std::ops::Index;\n \n struct Foo {\n@@ -55,4 +53,3 @@ fn main() {\n     } };\n     assert_eq!(f.foo[1].get(), 2);\n }\n-"}, {"sha": "0afdb24a81cc0dbf64dd86b437faeb4af54fa4bd", "filename": "src/test/run-pass/overloaded-index.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n@@ -75,4 +73,3 @@ fn main() {\n     assert_eq!(f[1].get(), 5);\n     assert_eq!(f[1].get_from_ref(), 5);\n }\n-"}, {"sha": "5649c4c784dafdab7a19cb563ab3dbe76e10a544", "filename": "src/test/run-pass/parse-assoc-type-lt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fparse-assoc-type-lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fparse-assoc-type-lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparse-assoc-type-lt.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type T;\n     fn foo() -> Box<<Self as Foo>::T>;"}, {"sha": "d3464f01203ac5f3adb5cb24587be0eb7ff622aa", "filename": "src/test/run-pass/regions-no-bound-in-argument-cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types, unsafe_destructor)]\n+#![feature(unsafe_destructor)]\n \n pub struct Foo<T>;\n "}, {"sha": "e89d5c9922dfafce12ab7e7c2753bf1a071462d6", "filename": "src/test/run-pass/simd-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(associated_types, simd)]\n+#![feature(simd)]\n \n use std::ops;\n "}, {"sha": "43494458518cd9205e2ecaac2d195fe3882d41b8", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4016c729f18ce5aa8976fc16617b9368437c28db/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=4016c729f18ce5aa8976fc16617b9368437c28db", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::cmp::PartialEq;\n use std::ops::{Add, Sub, Mul};\n "}]}