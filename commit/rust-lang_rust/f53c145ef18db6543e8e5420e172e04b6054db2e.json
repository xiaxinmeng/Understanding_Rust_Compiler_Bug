{"sha": "f53c145ef18db6543e8e5420e172e04b6054db2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1M2MxNDVlZjE4ZGI2NTQzZThlNTQyMGUxNzJlMDRiNjA1NGRiMmU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-07-15T03:50:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@commure.com", "date": "2018-07-20T06:18:07Z"}, "message": "Improve suggestion for missing fmt str in println\n\nAvoid using `concat!(fmt, \"\\n\")` to improve the diagnostics being\nemitted when the first `println!()` argument isn't a formatting string\nliteral.", "tree": {"sha": "9de9b0c1f029e7dfac14b0ab50181868f46bd9df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9de9b0c1f029e7dfac14b0ab50181868f46bd9df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f53c145ef18db6543e8e5420e172e04b6054db2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f53c145ef18db6543e8e5420e172e04b6054db2e", "html_url": "https://github.com/rust-lang/rust/commit/f53c145ef18db6543e8e5420e172e04b6054db2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f53c145ef18db6543e8e5420e172e04b6054db2e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc14d71622378cf942a834e7c2b5358b9901f775", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc14d71622378cf942a834e7c2b5358b9901f775", "html_url": "https://github.com/rust-lang/rust/commit/bc14d71622378cf942a834e7c2b5358b9901f775"}], "stats": {"total": 224, "additions": 122, "deletions": 102}, "files": [{"sha": "a4a6ed73c61cfcadf590efbe1b3465ce9a5ac80f", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -155,8 +155,14 @@ macro_rules! print {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! println {\n     () => (print!(\"\\n\"));\n-    ($fmt:expr) => (print!(concat!($fmt, \"\\n\")));\n-    ($fmt:expr, $($arg:tt)*) => (print!(concat!($fmt, \"\\n\"), $($arg)*));\n+    ($fmt:expr) => ({\n+        print!($fmt);\n+        print!(\"\\n\");\n+    });\n+    ($fmt:expr, $($arg:tt)*) => ({\n+        print!($fmt, $($arg)*);\n+        print!(\"\\n\");\n+    });\n }\n \n /// Macro for printing to the standard error."}, {"sha": "b55c4f99206c4204858092501e30d0c39d6e579e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -959,29 +959,34 @@ impl<'a> ExtCtxt<'a> {\n /// Extract a string literal from the macro expanded version of `expr`,\n /// emitting `err_msg` if `expr` is not a string literal. This does not stop\n /// compilation on error, merely emits a non-fatal error and returns None.\n-pub fn expr_to_spanned_string(cx: &mut ExtCtxt, expr: P<ast::Expr>, err_msg: &str)\n-                              -> Option<Spanned<(Symbol, ast::StrStyle)>> {\n+pub fn expr_to_spanned_string<'a>(\n+    cx: &'a mut ExtCtxt,\n+    expr: P<ast::Expr>,\n+    err_msg: &str,\n+) -> Result<Spanned<(Symbol, ast::StrStyle)>, DiagnosticBuilder<'a>> {\n     // Update `expr.span`'s ctxt now in case expr is an `include!` macro invocation.\n     let expr = expr.map(|mut expr| {\n         expr.span = expr.span.apply_mark(cx.current_expansion.mark);\n         expr\n     });\n \n-    // we want to be able to handle e.g. concat(\"foo\", \"bar\")\n+    // we want to be able to handle e.g. `concat!(\"foo\", \"bar\")`\n     let expr = cx.expander().fold_expr(expr);\n-    match expr.node {\n+    Err(match expr.node {\n         ast::ExprKind::Lit(ref l) => match l.node {\n-            ast::LitKind::Str(s, style) => return Some(respan(expr.span, (s, style))),\n-            _ => cx.span_err(l.span, err_msg)\n+            ast::LitKind::Str(s, style) => return Ok(respan(expr.span, (s, style))),\n+            _ => cx.struct_span_err(l.span, err_msg)\n         },\n-        _ => cx.span_err(expr.span, err_msg)\n-    }\n-    None\n+        _ => cx.struct_span_err(expr.span, err_msg)\n+    })\n }\n \n pub fn expr_to_string(cx: &mut ExtCtxt, expr: P<ast::Expr>, err_msg: &str)\n                       -> Option<(Symbol, ast::StrStyle)> {\n-    expr_to_spanned_string(cx, expr, err_msg).map(|s| s.node)\n+    expr_to_spanned_string(cx, expr, err_msg)\n+        .map_err(|mut err| err.emit())\n+        .ok()\n+        .map(|s| s.node)\n }\n \n /// Non-fatally assert that `tts` is empty. Note that this function"}, {"sha": "d58f4ce17e2f75bbdb33a0a0eeb41bad97cb47fe", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -27,6 +27,7 @@ pub fn expand_syntax_ext(\n         None => return base::DummyResult::expr(sp),\n     };\n     let mut accumulator = String::new();\n+    let mut missing_literal = vec![];\n     for e in es {\n         match e.node {\n             ast::ExprKind::Lit(ref lit) => match lit.node {\n@@ -51,17 +52,15 @@ pub fn expand_syntax_ext(\n                 }\n             },\n             _ => {\n-                let mut err = cx.struct_span_err(e.span, \"expected a literal\");\n-                let snippet = cx.codemap().span_to_snippet(e.span).unwrap();\n-                err.span_suggestion(\n-                    e.span,\n-                    \"you might be missing a string literal to format with\",\n-                    format!(\"\\\"{{}}\\\", {}\", snippet),\n-                );\n-                err.emit();\n+                missing_literal.push(e.span);\n             }\n         }\n     }\n+    if missing_literal.len() > 0 {\n+        let mut err = cx.struct_span_err(missing_literal, \"expected a literal\");\n+        err.note(\"only `&str` literals can be passed to `concat!()`\");\n+        err.emit();\n+    }\n     let sp = sp.apply_mark(cx.current_expansion.mark);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&accumulator)))\n }"}, {"sha": "6abf987d0ab70a541aa86a4dcecd5355804c0ab5", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -703,10 +703,24 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n     let arg_unique_types: Vec<_> = (0..args.len()).map(|_| Vec::new()).collect();\n     let mut macsp = ecx.call_site();\n     macsp = macsp.apply_mark(ecx.current_expansion.mark);\n-    let msg = \"format argument must be a string literal.\";\n+    let msg = \"format argument must be a string literal\";\n+    let fmt_sp = efmt.span;\n     let fmt = match expr_to_spanned_string(ecx, efmt, msg) {\n-        Some(fmt) => fmt,\n-        None => return DummyResult::raw_expr(sp),\n+        Ok(fmt) => fmt,\n+        Err(mut err) => {\n+            let sugg_fmt = match args.len() {\n+                0 => \"{}\".to_string(),\n+                _ => format!(\"{}{{}}\", \"{}, \".repeat(args.len())),\n+\n+            };\n+            err.span_suggestion(\n+                fmt_sp.shrink_to_lo(),\n+                \"you might be missing a string literal to format with\",\n+                format!(\"\\\"{}\\\", \", sugg_fmt),\n+            );\n+            err.emit();\n+            return DummyResult::raw_expr(sp);\n+        },\n     };\n \n     let mut cx = Context {\n@@ -818,7 +832,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                     errs.iter().map(|&(sp, _)| sp).collect::<Vec<Span>>(),\n                     \"multiple unused formatting arguments\"\n                 );\n-                diag.span_label(cx.fmtsp, \"multiple unused arguments in this statement\");\n+                diag.span_label(cx.fmtsp, \"multiple missing formatting arguments\");\n                 diag\n             }\n         };\n@@ -861,8 +875,10 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n                     }\n \n                     if show_doc_note {\n-                        diag.note(concat!(stringify!($kind), \" formatting not supported; see \\\n-                                the documentation for `std::fmt`\"));\n+                        diag.note(concat!(\n+                            stringify!($kind),\n+                            \" formatting not supported; see the documentation for `std::fmt`\",\n+                        ));\n                     }\n                 }};\n             }"}, {"sha": "3f82311d469ae4ad221e2ae2c953bdf447c71a6e", "filename": "src/test/ui/const-eval/conditional_array_execution.nll.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconditional_array_execution.nll.stderr?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -28,25 +28,19 @@ LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n error[E0080]: referenced constant has errors\n-  --> $DIR/conditional_array_execution.rs:19:5\n+  --> $DIR/conditional_array_execution.rs:19:14\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ----- attempt to subtract with overflow\n ...\n LL |     println!(\"{}\", FOO);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/conditional_array_execution.rs:19:5\n+  --> $DIR/conditional_array_execution.rs:19:14\n    |\n LL |     println!(\"{}\", FOO);\n-   |     ^^^^^^^^^^^^^^^---^^\n-   |                    |\n-   |                    referenced constant has errors\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^  --- referenced constant has errors\n \n error[E0080]: referenced constant has errors\n   --> $DIR/conditional_array_execution.rs:19:20"}, {"sha": "e25cb29c114752b170199a29d02c28dc94c05da9", "filename": "src/test/ui/const-eval/issue-43197.nll.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-43197.nll.stderr?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -51,25 +51,19 @@ LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n error[E0080]: referenced constant has errors\n-  --> $DIR/issue-43197.rs:24:5\n+  --> $DIR/issue-43197.rs:24:14\n    |\n LL |     const X: u32 = 0-1;\n    |                    --- attempt to subtract with overflow\n ...\n LL |     println!(\"{} {}\", X, Y);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:24:5\n+  --> $DIR/issue-43197.rs:24:14\n    |\n LL |     println!(\"{} {}\", X, Y);\n-   |     ^^^^^^^^^^^^^^^^^^-^^^^^\n-   |                       |\n-   |                       referenced constant has errors\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^^^^  - referenced constant has errors\n \n error[E0080]: referenced constant has errors\n   --> $DIR/issue-43197.rs:24:26"}, {"sha": "da040747991a418fd619964fb25b49f3638439d0", "filename": "src/test/ui/const-eval/issue-44578.nll.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fissue-44578.nll.stderr?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -1,23 +1,17 @@\n error[E0080]: referenced constant has errors\n-  --> $DIR/issue-44578.rs:35:5\n+  --> $DIR/issue-44578.rs:35:14\n    |\n LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n    |                        ------------------------------------ index out of bounds: the len is 1 but the index is 1\n ...\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/issue-44578.rs:35:5\n+  --> $DIR/issue-44578.rs:35:14\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |     ^^^^^^^^^^^^^^^--------------------------^^\n-   |                    |\n-   |                    referenced constant has errors\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ^^^^  -------------------------- referenced constant has errors\n \n error[E0080]: referenced constant has errors\n   --> $DIR/issue-44578.rs:35:20"}, {"sha": "e48aa489f4359a5eb4b2988eb8ad2baf22dca77a", "filename": "src/test/ui/fmt/format-string-error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.rs?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -10,8 +10,10 @@\n \n fn main() {\n     println!(\"{\");\n+    //~^ ERROR invalid format string: expected `'}'` but string was terminated\n     println!(\"{{}}\");\n     println!(\"}\");\n+    //~^ ERROR invalid format string: unmatched `}` found\n     let _ = format!(\"{_foo}\", _foo = 6usize);\n     //~^ ERROR invalid format string: invalid argument name `_foo`\n     let _ = format!(\"{_}\", _ = 6usize);"}, {"sha": "4c7ef11b29ef0e6b970fb13559d615463d009d0c", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -1,55 +1,53 @@\n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:12:5\n+  --> $DIR/format-string-error.rs:12:16\n    |\n LL |     println!(\"{\");\n-   |     ^^^^^^^^^^^^^^ expected `'}'` in format string\n+   |                ^ expected `'}'` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error.rs:14:5\n+  --> $DIR/format-string-error.rs:15:15\n    |\n LL |     println!(\"}\");\n-   |     ^^^^^^^^^^^^^^ unmatched `}` in format string\n+   |               ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: invalid format string: invalid argument name `_foo`\n-  --> $DIR/format-string-error.rs:15:23\n+  --> $DIR/format-string-error.rs:17:23\n    |\n LL |     let _ = format!(\"{_foo}\", _foo = 6usize);\n    |                       ^^^^ invalid argument name in format string\n    |\n    = note: argument names cannot start with an underscore\n \n error: invalid format string: invalid argument name `_`\n-  --> $DIR/format-string-error.rs:17:23\n+  --> $DIR/format-string-error.rs:19:23\n    |\n LL |     let _ = format!(\"{_}\", _ = 6usize);\n    |                       ^ invalid argument name in format string\n    |\n    = note: argument names cannot start with an underscore\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/format-string-error.rs:19:23\n+  --> $DIR/format-string-error.rs:21:23\n    |\n LL |     let _ = format!(\"{\");\n    |                       ^ expected `'}'` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/format-string-error.rs:21:22\n+  --> $DIR/format-string-error.rs:23:22\n    |\n LL |     let _ = format!(\"}\");\n    |                      ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n \n error: invalid format string: expected `'}'`, found `'/'`\n-  --> $DIR/format-string-error.rs:23:23\n+  --> $DIR/format-string-error.rs:25:23\n    |\n LL |     let _ = format!(\"{/}\");\n    |                       ^ expected `}` in format string"}, {"sha": "cccaf7998c98b45240da6f9659eb65504239b17f", "filename": "src/test/ui/macros/bad_hello.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.rs?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -9,5 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    println!(3 + 4); //~ ERROR expected a literal\n+    println!(3 + 4);\n+    //~^ ERROR format argument must be a string literal\n+    println!(3, 4);\n+    //~^ ERROR format argument must be a string literal\n }"}, {"sha": "87ea515182f15384a8ddccc013b8d712a973cdb3", "filename": "src/test/ui/macros/bad_hello.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbad_hello.stderr?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -1,12 +1,22 @@\n-error: expected a literal\n+error: format argument must be a string literal\n   --> $DIR/bad_hello.rs:12:14\n    |\n-LL |     println!(3 + 4); //~ ERROR expected a literal\n+LL |     println!(3 + 4);\n    |              ^^^^^\n help: you might be missing a string literal to format with\n    |\n-LL |     println!(\"{}\", 3 + 4); //~ ERROR expected a literal\n-   |              ^^^^^^^^^^^\n+LL |     println!(\"{}\", 3 + 4);\n+   |              ^^^^^\n+\n+error: format argument must be a string literal\n+  --> $DIR/bad_hello.rs:14:14\n+   |\n+LL |     println!(3, 4);\n+   |              ^\n+help: you might be missing a string literal to format with\n+   |\n+LL |     println!(\"{}, {}\", 3, 4);\n+   |              ^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "401b2f6d67e399c8d52f2328f45dfb966af0ccb1", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -2,12 +2,13 @@ error: multiple unused formatting arguments\n   --> $DIR/format-foreign.rs:12:30\n    |\n LL |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n-   |     -------------------------^^^^^^^^--^^^^^^^--^-- multiple unused arguments in this statement\n+   |              --------------  ^^^^^^^^  ^^^^^^^  ^\n+   |              |\n+   |              multiple missing formatting arguments\n    |\n    = help: `%.*3$s` should be written as `{:.2$}`\n    = help: `%s` should be written as `{}`\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: argument never used\n   --> $DIR/format-foreign.rs:13:29"}, {"sha": "f764190438f3355c54e38f3b11cfb2a5fb349fe4", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -2,24 +2,21 @@ error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:12:22\n    |\n LL |     println!(\"Test\", 123, 456, 789);\n-   |     -----------------^^^--^^^--^^^-- multiple unused arguments in this statement\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   |              ------  ^^^  ^^^  ^^^\n+   |              |\n+   |              multiple missing formatting arguments\n \n error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:16:9\n    |\n-LL | /     println!(\"Test2\",\n-LL | |         123,  //~ ERROR multiple unused formatting arguments\n-   | |         ^^^\n-LL | |         456,\n-   | |         ^^^\n-LL | |         789\n-   | |         ^^^\n-LL | |     );\n-   | |______- multiple unused arguments in this statement\n-   |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+LL |     println!(\"Test2\",\n+   |              ------- multiple missing formatting arguments\n+LL |         123,  //~ ERROR multiple unused formatting arguments\n+   |         ^^^\n+LL |         456,\n+   |         ^^^\n+LL |         789\n+   |         ^^^\n \n error: named argument never used\n   --> $DIR/format-unused-lables.rs:21:35\n@@ -30,18 +27,18 @@ LL |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never u\n error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:24:9\n    |\n-LL | /     println!(\"Some more $STUFF\",\n-LL | |         \"woo!\",  //~ ERROR multiple unused formatting arguments\n-   | |         ^^^^^^\n-LL | |             STUFF=\n-LL | |        \"things\"\n-   | |        ^^^^^^^^\n-LL | |              , UNUSED=\"args\");\n-   | |_______________________^^^^^^_- multiple unused arguments in this statement\n+LL |     println!(\"Some more $STUFF\",\n+   |              ------------------ multiple missing formatting arguments\n+LL |         \"woo!\",  //~ ERROR multiple unused formatting arguments\n+   |         ^^^^^^\n+LL |             STUFF=\n+LL |        \"things\"\n+   |        ^^^^^^^^\n+LL |              , UNUSED=\"args\");\n+   |                       ^^^^^^\n    |\n    = help: `$STUFF` should be written as `{STUFF}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c98e42ea647d0333073d85033382c4d88a0b0d03", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f53c145ef18db6543e8e5420e172e04b6054db2e/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=f53c145ef18db6543e8e5420e172e04b6054db2e", "patch": "@@ -5,8 +5,9 @@ LL |     println!(\"Hello, World!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expanding `println! { \"Hello, World!\" }`\n-   = note: to `print ! ( concat ! ( \"Hello, World!\" , \"/n\" ) )`\n-   = note: expanding `print! { concat ! ( \"Hello, World!\" , \"/n\" ) }`\n-   = note: to `$crate :: io :: _print ( format_args ! ( concat ! ( \"Hello, World!\" , \"/n\" ) )\n-           )`\n+   = note: to `{ print ! ( \"Hello, World!\" ) ; print ! ( \"/n\" ) ; }`\n+   = note: expanding `print! { \"Hello, World!\" }`\n+   = note: to `$crate :: io :: _print ( format_args ! ( \"Hello, World!\" ) )`\n+   = note: expanding `print! { \"/n\" }`\n+   = note: to `$crate :: io :: _print ( format_args ! ( \"/n\" ) )`\n "}]}