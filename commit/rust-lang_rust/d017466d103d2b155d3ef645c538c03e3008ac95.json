{"sha": "d017466d103d2b155d3ef645c538c03e3008ac95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMTc0NjZkMTAzZDJiMTU1ZDNlZjY0NWM1MzhjMDNlMzAwOGFjOTU=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2017-10-23T16:44:58Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2017-10-23T16:44:58Z"}, "message": "Use 128 bit instead of Symbol for crate disambiguator", "tree": {"sha": "0593f55be90731db47f5584eadf1d357c993d13d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0593f55be90731db47f5584eadf1d357c993d13d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d017466d103d2b155d3ef645c538c03e3008ac95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d017466d103d2b155d3ef645c538c03e3008ac95", "html_url": "https://github.com/rust-lang/rust/commit/d017466d103d2b155d3ef645c538c03e3008ac95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d017466d103d2b155d3ef645c538c03e3008ac95/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c053db233d69519b548e5b8ed7192d0783e582a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c053db233d69519b548e5b8ed7192d0783e582a", "html_url": "https://github.com/rust-lang/rust/commit/4c053db233d69519b548e5b8ed7192d0783e582a"}], "stats": {"total": 87, "additions": 44, "deletions": 43}, "files": [{"sha": "10900624d9283adf90be8c614afd7fd9cce11501", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -11,6 +11,7 @@\n use super::*;\n \n use dep_graph::{DepGraph, DepKind, DepNodeIndex};\n+use ich::Fingerprint;\n use hir::intravisit::{Visitor, NestedVisitorMap};\n use std::iter::repeat;\n use syntax::ast::{NodeId, CRATE_NODE_ID};\n@@ -118,7 +119,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     }\n \n     pub(super) fn finalize_and_compute_crate_hash(self,\n-                                                  crate_disambiguator: &str)\n+                                                  crate_disambiguator: &Fingerprint)\n                                                   -> Vec<MapEntry<'hir>> {\n         let mut node_hashes: Vec<_> = self\n             .hir_body_nodes"}, {"sha": "6da612fbaa684634799653d6ec4a8634a5a1b7a5", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -1014,7 +1014,7 @@ pub fn map_crate<'hir>(sess: &::session::Session,\n                                                 hcx);\n         intravisit::walk_crate(&mut collector, &forest.krate);\n \n-        let crate_disambiguator = sess.local_crate_disambiguator().as_str();\n+        let crate_disambiguator = sess.local_crate_disambiguator();\n         collector.finalize_and_compute_crate_hash(&crate_disambiguator)\n     };\n "}, {"sha": "39b2162bd328b82e2d675936a1a371bffea8aece", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -267,7 +267,7 @@ pub trait CrateStore {\n     fn export_macros_untracked(&self, cnum: CrateNum);\n     fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind;\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> Symbol;\n+    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> ich::Fingerprint;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n     fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children_untracked(&self, did: DefId, sess: &Session) -> Vec<def::Export>;\n@@ -338,7 +338,7 @@ impl CrateStore for DummyCrateStore {\n     fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n     fn export_macros_untracked(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol { bug!(\"crate_name\") }\n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> Symbol {\n+    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> ich::Fingerprint {\n         bug!(\"crate_disambiguator\")\n     }\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh { bug!(\"crate_hash\") }"}, {"sha": "23fea747f769e7de33b8e1c9cbd7f0460e604ddf", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -12,6 +12,7 @@ pub use self::code_stats::{CodeStats, DataTypeKind, FieldInfo};\n pub use self::code_stats::{SizeKind, TypeSizeInfo, VariantInfo};\n \n use hir::def_id::{CrateNum, DefIndex};\n+use ich::Fingerprint;\n \n use lint;\n use middle::allocator::AllocatorKind;\n@@ -29,7 +30,6 @@ use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n use syntax::parse;\n use syntax::parse::ParseSess;\n-use syntax::symbol::Symbol;\n use syntax::{ast, codemap};\n use syntax::feature_gate::AttributeType;\n use syntax_pos::{Span, MultiSpan};\n@@ -88,7 +88,7 @@ pub struct Session {\n     /// forms a unique global identifier for the crate. It is used to allow\n     /// multiple crates with the same name to coexist. See the\n     /// trans::back::symbol_names module for more information.\n-    pub crate_disambiguator: RefCell<Option<Symbol>>,\n+    pub crate_disambiguator: RefCell<Option<Fingerprint>>,\n     pub features: RefCell<feature_gate::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n@@ -165,7 +165,7 @@ enum DiagnosticBuilderMethod {\n }\n \n impl Session {\n-    pub fn local_crate_disambiguator(&self) -> Symbol {\n+    pub fn local_crate_disambiguator(&self) -> Fingerprint {\n         match *self.crate_disambiguator.borrow() {\n             Some(sym) => sym,\n             None => bug!(\"accessing disambiguator before initialization\"),\n@@ -471,14 +471,17 @@ impl Session {\n \n     /// Returns the symbol name for the registrar function,\n     /// given the crate Svh and the function DefIndex.\n-    pub fn generate_plugin_registrar_symbol(&self, disambiguator: Symbol, index: DefIndex)\n+    pub fn generate_plugin_registrar_symbol(&self, disambiguator: Fingerprint,\n+                                            index: DefIndex)\n                                             -> String {\n-        format!(\"__rustc_plugin_registrar__{}_{}\", disambiguator, index.as_usize())\n+        format!(\"__rustc_plugin_registrar__{}_{}\", disambiguator.to_hex(),\n+                                                   index.as_usize())\n     }\n \n-    pub fn generate_derive_registrar_symbol(&self, disambiguator: Symbol, index: DefIndex)\n+    pub fn generate_derive_registrar_symbol(&self, disambiguator: Fingerprint, index: DefIndex)\n                                             -> String {\n-        format!(\"__rustc_derive_registrar__{}_{}\", disambiguator, index.as_usize())\n+        format!(\"__rustc_derive_registrar__{}_{}\", disambiguator.to_hex(),\n+                                                   index.as_usize())\n     }\n \n     pub fn sysroot<'a>(&'a self) -> &'a Path {"}, {"sha": "51e924bd08b192b7e402370f96a4ffd5b466ff34", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -1251,7 +1251,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 crate_name,\n                 // Don't print the whole crate disambiguator. That's just\n                 // annoying in debug output.\n-                &(crate_disambiguator.as_str())[..4],\n+                &(crate_disambiguator.to_hex())[..4],\n                 self.def_path(def_id).to_string_no_crate())\n     }\n "}, {"sha": "3c2630bb33a128520d356e452a20a6d751e4c766", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -10,6 +10,7 @@\n \n use dep_graph::{DepConstructor, DepNode};\n use errors::DiagnosticBuilder;\n+use ich::Fingerprint;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::def::{Def, Export};\n use hir::{self, TraitCandidate, ItemLocalId};\n@@ -283,7 +284,7 @@ define_maps! { <'tcx>\n     [] fn native_libraries: NativeLibraries(CrateNum) -> Rc<Vec<NativeLibrary>>,\n     [] fn plugin_registrar_fn: PluginRegistrarFn(CrateNum) -> Option<DefId>,\n     [] fn derive_registrar_fn: DeriveRegistrarFn(CrateNum) -> Option<DefId>,\n-    [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> Symbol,\n+    [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> Fingerprint,\n     [] fn crate_hash: CrateHash(CrateNum) -> Svh,\n     [] fn original_crate_name: OriginalCrateName(CrateNum) -> Symbol,\n "}, {"sha": "3b49cceee9010be25f6343ef9284cccaeb4ddd74", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -19,7 +19,7 @@ use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use hir::map::DefPathData;\n-use ich::StableHashingContext;\n+use ich::{Fingerprint, StableHashingContext};\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::privacy::AccessLevels;\n@@ -2562,7 +2562,7 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn crate_disambiguator<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 crate_num: CrateNum) -> Symbol {\n+                                 crate_num: CrateNum) -> Fingerprint {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.sess.local_crate_disambiguator()\n }"}, {"sha": "6849cbbb062bb956365a8db2203b216b1dff273c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -58,7 +58,6 @@ use syntax::{ast, diagnostics, visit};\n use syntax::attr;\n use syntax::ext::base::ExtCtxt;\n use syntax::parse::{self, PResult};\n-use syntax::symbol::Symbol;\n use syntax::util::node_count::NodeCounter;\n use syntax;\n use syntax_ext;\n@@ -633,12 +632,12 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n \n     *sess.crate_types.borrow_mut() = collect_crate_types(sess, &krate.attrs);\n \n-    let disambiguator = Symbol::intern(&compute_crate_disambiguator(sess));\n+    let disambiguator = compute_crate_disambiguator(sess);\n     *sess.crate_disambiguator.borrow_mut() = Some(disambiguator);\n     rustc_incremental::prepare_session_directory(\n         sess,\n         &crate_name,\n-        &disambiguator.as_str(),\n+        &disambiguator,\n     );\n \n     let dep_graph = if sess.opts.build_dep_graph() {\n@@ -1312,16 +1311,13 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n         .collect()\n }\n \n-pub fn compute_crate_disambiguator(session: &Session) -> String {\n+pub fn compute_crate_disambiguator(session: &Session) -> Fingerprint {\n     use std::hash::Hasher;\n \n     // The crate_disambiguator is a 128 bit hash. The disambiguator is fed\n     // into various other hashes quite a bit (symbol hashes, incr. comp. hashes,\n     // debuginfo type IDs, etc), so we don't want it to be too wide. 128 bits\n     // should still be safe enough to avoid collisions in practice.\n-    // FIXME(mw): It seems that the crate_disambiguator is used everywhere as\n-    //            a hex-string instead of raw bytes. We should really use the\n-    //            smaller representation.\n     let mut hasher = StableHasher::<Fingerprint>::new();\n \n     let mut metadata = session.opts.cg.metadata.clone();\n@@ -1340,11 +1336,13 @@ pub fn compute_crate_disambiguator(session: &Session) -> String {\n         hasher.write(s.as_bytes());\n     }\n \n-    // If this is an executable, add a special suffix, so that we don't get\n-    // symbol conflicts when linking against a library of the same name.\n+    // Also incorporate crate type, so that we don't get symbol conflicts when\n+    // linking against a library of the same name, if this is an executable.\n     let is_exe = session.crate_types.borrow().contains(&config::CrateTypeExecutable);\n+    hasher.write(if is_exe { b\"exe\" } else { b\"lib\" });\n+\n+    hasher.finish()\n \n-    format!(\"{}{}\", hasher.finish().to_hex(), if is_exe { \"-exe\" } else {\"\"})\n }\n \n pub fn build_output_filenames(input: &Input,"}, {"sha": "bbca0aef600f4c2fe4d7cbdf52ce3e483d324fe1", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -114,6 +114,7 @@\n //! unsupported file system and emit a warning in that case. This is not yet\n //! implemented.\n \n+use rustc::ich::Fingerprint;\n use rustc::hir::svh::Svh;\n use rustc::session::Session;\n use rustc::util::fs as fs_util;\n@@ -188,7 +189,7 @@ pub fn in_incr_comp_dir(incr_comp_session_dir: &Path, file_name: &str) -> PathBu\n /// The garbage collection will take care of it.\n pub fn prepare_session_directory(sess: &Session,\n                                  crate_name: &str,\n-                                 crate_disambiguator: &str) {\n+                                 crate_disambiguator: &Fingerprint) {\n     if sess.opts.incremental.is_none() {\n         return\n     }\n@@ -614,21 +615,15 @@ fn string_to_timestamp(s: &str) -> Result<SystemTime, ()> {\n \n fn crate_path(sess: &Session,\n               crate_name: &str,\n-              crate_disambiguator: &str)\n+              crate_disambiguator: &Fingerprint)\n               -> PathBuf {\n-    use std::hash::{Hasher, Hash};\n-    use std::collections::hash_map::DefaultHasher;\n \n     let incr_dir = sess.opts.incremental.as_ref().unwrap().clone();\n \n-    // The full crate disambiguator is really long. A hash of it should be\n-    // sufficient.\n-    let mut hasher = DefaultHasher::new();\n-    crate_disambiguator.hash(&mut hasher);\n-\n+    let crate_disambiguator = crate_disambiguator.to_smaller_hash();\n     let crate_name = format!(\"{}-{}\",\n                              crate_name,\n-                             base_n::encode(hasher.finish(), INT_ENCODE_BASE));\n+                             base_n::encode(crate_disambiguator, INT_ENCODE_BASE));\n     incr_dir.join(crate_name)\n }\n "}, {"sha": "475f0fac36ab739a2c3198b5cee82deaae40e1da", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -15,6 +15,7 @@ use locator::{self, CratePaths};\n use native_libs::relevant_lib;\n use schema::CrateRoot;\n \n+use rustc::ich::Fingerprint;\n use rustc::hir::def_id::{CrateNum, DefIndex, CRATE_DEF_INDEX};\n use rustc::hir::svh::Svh;\n use rustc::middle::allocator::AllocatorKind;\n@@ -626,7 +627,7 @@ impl<'a> CrateLoader<'a> {\n     pub fn find_plugin_registrar(&mut self,\n                                  span: Span,\n                                  name: &str)\n-                                 -> Option<(PathBuf, Symbol, DefIndex)> {\n+                                 -> Option<(PathBuf, Fingerprint, DefIndex)> {\n         let ekrate = self.read_extension_crate(span, &ExternCrateInfo {\n              name: Symbol::intern(name),\n              ident: Symbol::intern(name),"}, {"sha": "22af9d7c33a74323ed57a239efb99a23a66670de", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -13,6 +13,7 @@\n \n use schema;\n \n+use rustc::ich::Fingerprint;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::svh::Svh;\n@@ -171,7 +172,7 @@ impl CrateMetadata {\n     pub fn hash(&self) -> Svh {\n         self.root.hash\n     }\n-    pub fn disambiguator(&self) -> Symbol {\n+    pub fn disambiguator(&self) -> Fingerprint {\n         self.root.disambiguator\n     }\n "}, {"sha": "023ce209038e8612deb8c413058db494842353f2", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -20,6 +20,7 @@ use rustc::middle::cstore::{CrateStore, DepKind,\n                             LoadedMacro, EncodedMetadata,\n                             EncodedMetadataHashes, NativeLibraryKind};\n use rustc::middle::stability::DeprecationEntry;\n+use rustc::ich::Fingerprint;\n use rustc::hir::def;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n@@ -384,7 +385,7 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).name\n     }\n \n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> Symbol\n+    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> Fingerprint\n     {\n         self.get_crate_data(cnum).disambiguator()\n     }"}, {"sha": "baea919db663adc1ad75c0de064a7e46d1d0a239", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -14,7 +14,7 @@ use index;\n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId, CrateNum};\n-use rustc::ich::StableHashingContext;\n+use rustc::ich::{Fingerprint, StableHashingContext};\n use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary};\n use rustc::middle::lang_items;\n use rustc::mir;\n@@ -191,7 +191,7 @@ pub struct CrateRoot {\n     pub name: Symbol,\n     pub triple: String,\n     pub hash: hir::svh::Svh,\n-    pub disambiguator: Symbol,\n+    pub disambiguator: Fingerprint,\n     pub panic_strategy: PanicStrategy,\n     pub has_global_allocator: bool,\n     pub has_default_lib_allocator: bool,"}, {"sha": "4b8b9c57da7b0d54be06ab7d2fafc787b00efba8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -1417,7 +1417,7 @@ impl<'a> Resolver<'a> {\n \n         let mut definitions = Definitions::new();\n         DefCollector::new(&mut definitions, Mark::root())\n-            .collect_root(crate_name, &session.local_crate_disambiguator().as_str());\n+            .collect_root(crate_name, &session.local_crate_disambiguator().to_hex());\n \n         let mut invocations = FxHashMap();\n         invocations.insert(Mark::root(),"}, {"sha": "f518e5b8b8d61d6ed9aef4a6123b4870180e206c", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -34,7 +34,7 @@ pub fn threshold(tcx: TyCtxt) -> SymbolExportLevel {\n pub fn metadata_symbol_name(tcx: TyCtxt) -> String {\n     format!(\"rust_metadata_{}_{}\",\n             tcx.crate_name(LOCAL_CRATE),\n-            tcx.crate_disambiguator(LOCAL_CRATE))\n+            tcx.crate_disambiguator(LOCAL_CRATE).to_hex())\n }\n \n fn crate_export_threshold(crate_type: config::CrateType) -> SymbolExportLevel {"}, {"sha": "695950e672785f1105e1f393bdaf9b3f46fbaee0", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d017466d103d2b155d3ef645c538c03e3008ac95/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=d017466d103d2b155d3ef645c538c03e3008ac95", "patch": "@@ -220,7 +220,7 @@ fn get_symbol_hash<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         if avoid_cross_crate_conflicts {\n             hasher.hash(tcx.crate_name.as_str());\n-            hasher.hash(tcx.sess.local_crate_disambiguator().as_str());\n+            hasher.hash(tcx.sess.local_crate_disambiguator());\n         }\n     });\n "}]}