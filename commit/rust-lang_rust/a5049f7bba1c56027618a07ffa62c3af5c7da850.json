{"sha": "a5049f7bba1c56027618a07ffa62c3af5c7da850", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MDQ5ZjdiYmExYzU2MDI3NjE4YTA3ZmZhNjJjM2FmNWM3ZGE4NTA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-22T16:04:24Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-23T11:24:04Z"}, "message": "Add ::1 example in IPv6 to IPv4 conversion", "tree": {"sha": "32e11510e8c96c8bad60e96775114ae84cee9a7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32e11510e8c96c8bad60e96775114ae84cee9a7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5049f7bba1c56027618a07ffa62c3af5c7da850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5049f7bba1c56027618a07ffa62c3af5c7da850", "html_url": "https://github.com/rust-lang/rust/commit/a5049f7bba1c56027618a07ffa62c3af5c7da850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5049f7bba1c56027618a07ffa62c3af5c7da850/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a91fc62d3f5bf91c13f13a6620cb529dbcad518", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a91fc62d3f5bf91c13f13a6620cb529dbcad518", "html_url": "https://github.com/rust-lang/rust/commit/1a91fc62d3f5bf91c13f13a6620cb529dbcad518"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "40563eacf294643f9b0642004438d54a662abc4c", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a5049f7bba1c56027618a07ffa62c3af5c7da850/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5049f7bba1c56027618a07ffa62c3af5c7da850/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=a5049f7bba1c56027618a07ffa62c3af5c7da850", "patch": "@@ -646,10 +646,15 @@ impl Ipv6Addr {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ip)]\n+    ///\n     /// use std::net::Ipv6Addr;\n     ///\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unique_local(), false);\n-    /// assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 0).is_unique_local(), true);\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unique_local(),\n+    ///                false);\n+    ///     assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 0).is_unique_local(), true);\n+    /// }\n     /// ```\n     pub fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n@@ -664,11 +669,15 @@ impl Ipv6Addr {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ip)]\n+    ///\n     /// use std::net::Ipv6Addr;\n     ///\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_link_local(),\n-    ///            false);\n-    /// assert_eq!(Ipv6Addr::new(0xfe8a, 0, 0, 0, 0, 0, 0, 0).is_unicast_link_local(), true);\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_link_local(),\n+    ///                false);\n+    ///     assert_eq!(Ipv6Addr::new(0xfe8a, 0, 0, 0, 0, 0, 0, 0).is_unicast_link_local(), true);\n+    /// }\n     /// ```\n     pub fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n@@ -680,11 +689,15 @@ impl Ipv6Addr {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ip)]\n+    ///\n     /// use std::net::Ipv6Addr;\n     ///\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_site_local(),\n-    ///            false);\n-    /// assert_eq!(Ipv6Addr::new(0xfec2, 0, 0, 0, 0, 0, 0, 0).is_unicast_site_local(), true);\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_site_local(),\n+    ///                false);\n+    ///     assert_eq!(Ipv6Addr::new(0xfec2, 0, 0, 0, 0, 0, 0, 0).is_unicast_site_local(), true);\n+    /// }\n     /// ```\n     pub fn is_unicast_site_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n@@ -700,10 +713,15 @@ impl Ipv6Addr {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ip)]\n+    ///\n     /// use std::net::Ipv6Addr;\n     ///\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_documentation(), false);\n-    /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_documentation(), true);\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_documentation(),\n+    ///                false);\n+    ///     assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_documentation(), true);\n+    /// }\n     /// ```\n     pub fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n@@ -723,10 +741,15 @@ impl Ipv6Addr {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ip)]\n+    ///\n     /// use std::net::Ipv6Addr;\n     ///\n-    /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_unicast_global(), false);\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_global(), true);\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_unicast_global(), false);\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_global(),\n+    ///                true);\n+    /// }\n     /// ```\n     pub fn is_unicast_global(&self) -> bool {\n         !self.is_multicast()\n@@ -740,11 +763,15 @@ impl Ipv6Addr {\n     /// # Examples\n     ///\n     /// ```\n+    /// #![feature(ip)]\n+    ///\n     /// use std::net::{Ipv6Addr, Ipv6MulticastScope};\n     ///\n-    /// assert_eq!(Ipv6Addr::new(0xff0e, 0, 0, 0, 0, 0, 0, 0).multicast_scope(),\n-    ///                          Some(Ipv6MulticastScope::Global));\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).multicast_scope(), None);\n+    /// fn main() {\n+    ///     assert_eq!(Ipv6Addr::new(0xff0e, 0, 0, 0, 0, 0, 0, 0).multicast_scope(),\n+    ///                              Some(Ipv6MulticastScope::Global));\n+    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).multicast_scope(), None);\n+    /// }\n     /// ```\n     pub fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n         if self.is_multicast() {\n@@ -792,6 +819,8 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0).to_ipv4(), None);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).to_ipv4(),\n     ///            Some(Ipv4Addr::new(192, 10, 2, 255)));\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4(),\n+    ///            Some(Ipv4Addr::new(0, 0, 0, 1)));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_ipv4(&self) -> Option<Ipv4Addr> {"}]}