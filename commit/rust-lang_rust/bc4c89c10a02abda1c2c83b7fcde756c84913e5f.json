{"sha": "bc4c89c10a02abda1c2c83b7fcde756c84913e5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNGM4OWMxMGEwMmFiZGExYzJjODNiN2ZjZGU3NTZjODQ5MTNlNWY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-16T01:51:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-16T16:33:54Z"}, "message": "compiletest: Add support for metrics and ratchet modes.", "tree": {"sha": "15da4b4966259366b6d0ce07ae1dbd3e723bcd07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15da4b4966259366b6d0ce07ae1dbd3e723bcd07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4c89c10a02abda1c2c83b7fcde756c84913e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4c89c10a02abda1c2c83b7fcde756c84913e5f", "html_url": "https://github.com/rust-lang/rust/commit/bc4c89c10a02abda1c2c83b7fcde756c84913e5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4c89c10a02abda1c2c83b7fcde756c84913e5f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2f7fb3ae1f64517c0b30371e2457cac2e2c1248", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f7fb3ae1f64517c0b30371e2457cac2e2c1248", "html_url": "https://github.com/rust-lang/rust/commit/f2f7fb3ae1f64517c0b30371e2457cac2e2c1248"}], "stats": {"total": 77, "additions": 68, "deletions": 9}, "files": [{"sha": "4add16fd7a95b08bf9c19b0cac74eec1d0678fd0", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc4c89c10a02abda1c2c83b7fcde756c84913e5f/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4c89c10a02abda1c2c83b7fcde756c84913e5f/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=bc4c89c10a02abda1c2c83b7fcde756c84913e5f", "patch": "@@ -58,6 +58,15 @@ pub struct config {\n     // Write out a parseable log of tests that were run\n     logfile: Option<Path>,\n \n+    // Write out a json file containing any metrics of the run\n+    save_metrics: Option<Path>,\n+\n+    // Write and ratchet a metrics file\n+    ratchet_metrics: Option<Path>,\n+\n+    // Percent change in metrics to consider noise\n+    ratchet_noise_percent: Option<f64>,\n+\n     // A command line to prefix program execution with,\n     // for running under valgrind\n     runtool: Option<~str>,"}, {"sha": "39dc55b44f4cac4813f27dac40b7f030d33686ef", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bc4c89c10a02abda1c2c83b7fcde756c84913e5f/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4c89c10a02abda1c2c83b7fcde756c84913e5f/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=bc4c89c10a02abda1c2c83b7fcde756c84913e5f", "patch": "@@ -17,6 +17,7 @@\n extern mod extra;\n \n use std::os;\n+use std::f64;\n \n use extra::getopts;\n use extra::getopts::groups::{optopt, optflag, reqopt};\n@@ -66,6 +67,10 @@ pub fn parse_config(args: ~[~str]) -> config {\n           optopt(\"\", \"rustcflags\", \"flags to pass to rustc\", \"FLAGS\"),\n           optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\"),\n           optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\"),\n+          optopt(\"\", \"save-metrics\", \"file to save metrics to\", \"FILE\"),\n+          optopt(\"\", \"ratchet-metrics\", \"file to ratchet metrics against\", \"FILE\"),\n+          optopt(\"\", \"ratchet-noise-percent\",\n+                 \"percent change in metrics to consider noise\", \"N\"),\n           optflag(\"\", \"jit\", \"run tests under the JIT\"),\n           optflag(\"\", \"newrt\", \"run tests on the new runtime / scheduler\"),\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n@@ -116,6 +121,13 @@ pub fn parse_config(args: ~[~str]) -> config {\n                  Some(copy matches.free[0])\n              } else { None },\n         logfile: getopts::opt_maybe_str(matches, \"logfile\").map(|s| Path(*s)),\n+        save_metrics: getopts::opt_maybe_str(matches, \"save-metrics\").map(|s| Path(*s)),\n+        ratchet_metrics:\n+            getopts::opt_maybe_str(matches, \"ratchet-metrics\").map(|s| Path(*s)),\n+        ratchet_noise_percent:\n+            getopts::opt_maybe_str(matches,\n+                                   \"ratchet-noise-percent\").map(|s|\n+                                                                f64::from_str(*s).get()),\n         runtool: getopts::opt_maybe_str(matches, \"runtool\"),\n         rustcflags: getopts::opt_maybe_str(matches, \"rustcflags\"),\n         jit: getopts::opt_present(matches, \"jit\"),\n@@ -215,10 +227,10 @@ pub fn test_opts(config: &config) -> test::TestOpts {\n         run_ignored: config.run_ignored,\n         logfile: copy config.logfile,\n         run_tests: true,\n-        run_benchmarks: false,\n-        ratchet_metrics: None,\n-        ratchet_noise_percent: None,\n-        save_metrics: None,\n+        run_benchmarks: true,\n+        ratchet_metrics: copy config.ratchet_metrics,\n+        ratchet_noise_percent: copy config.ratchet_noise_percent,\n+        save_metrics: copy config.save_metrics,\n     }\n }\n \n@@ -231,7 +243,13 @@ pub fn make_tests(config: &config) -> ~[test::TestDescAndFn] {\n         let file = copy *file;\n         debug!(\"inspecting file %s\", file.to_str());\n         if is_test(config, file) {\n-            tests.push(make_test(config, file))\n+            let t = do make_test(config, file) {\n+                match config.mode {\n+                    mode_codegen => make_metrics_test_closure(config, file),\n+                    _ => make_test_closure(config, file)\n+                }\n+            };\n+            tests.push(t)\n         }\n     }\n     tests\n@@ -260,14 +278,15 @@ pub fn is_test(config: &config, testfile: &Path) -> bool {\n     return valid;\n }\n \n-pub fn make_test(config: &config, testfile: &Path) -> test::TestDescAndFn {\n+pub fn make_test(config: &config, testfile: &Path,\n+                 f: &fn()->test::TestFn) -> test::TestDescAndFn {\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n             name: make_test_name(config, testfile),\n             ignore: header::is_test_ignored(config, testfile),\n             should_fail: false\n         },\n-        testfn: make_test_closure(config, testfile),\n+        testfn: f(),\n     }\n }\n \n@@ -291,3 +310,10 @@ pub fn make_test_closure(config: &config, testfile: &Path) -> test::TestFn {\n     let testfile = Cell::new(testfile.to_str());\n     test::DynTestFn(|| { runtest::run(config.take(), testfile.take()) })\n }\n+\n+pub fn make_metrics_test_closure(config: &config, testfile: &Path) -> test::TestFn {\n+    use std::cell::Cell;\n+    let config = Cell::new(copy *config);\n+    let testfile = Cell::new(testfile.to_str());\n+    test::DynMetricFn(|mm| { runtest::run_metrics(config.take(), testfile.take(), mm) })\n+}"}, {"sha": "a51ab8208566d1435f17ad336a74fa4abfb480d6", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bc4c89c10a02abda1c2c83b7fcde756c84913e5f/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4c89c10a02abda1c2c83b7fcde756c84913e5f/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=bc4c89c10a02abda1c2c83b7fcde756c84913e5f", "patch": "@@ -25,7 +25,14 @@ use std::os;\n use std::uint;\n use std::vec;\n \n+use extra::test::MetricMap;\n+\n pub fn run(config: config, testfile: ~str) {\n+    let mut _mm = MetricMap::new();\n+    run_metrics(config, testfile, &mut _mm);\n+}\n+\n+pub fn run_metrics(config: config, testfile: ~str, mm: &mut MetricMap) {\n     if config.verbose {\n         // We're going to be dumping a lot of info. Start on a new line.\n         io::stdout().write_str(\"\\n\\n\");\n@@ -40,7 +47,7 @@ pub fn run(config: config, testfile: ~str) {\n       mode_run_pass => run_rpass_test(&config, &props, &testfile),\n       mode_pretty => run_pretty_test(&config, &props, &testfile),\n       mode_debug_info => run_debuginfo_test(&config, &props, &testfile),\n-      mode_codegen => run_codegen_test(&config, &props, &testfile)\n+      mode_codegen => run_codegen_test(&config, &props, &testfile, mm)\n     }\n }\n \n@@ -906,7 +913,14 @@ fn disassemble_extract(config: &config, _props: &TestProps,\n }\n \n \n-fn run_codegen_test(config: &config, props: &TestProps, testfile: &Path) {\n+fn count_extracted_lines(p: &Path) -> uint {\n+    let x = io::read_whole_file_str(&p.with_filetype(\"ll\")).get();\n+    x.line_iter().len_()\n+}\n+\n+\n+fn run_codegen_test(config: &config, props: &TestProps,\n+                    testfile: &Path, mm: &mut MetricMap) {\n \n     if config.llvm_bin_path.is_none() {\n         fatal(~\"missing --llvm-bin-path\");\n@@ -947,7 +961,17 @@ fn run_codegen_test(config: &config, props: &TestProps, testfile: &Path) {\n         fatal_ProcRes(~\"disassembling extract failed\", &ProcRes);\n     }\n \n+    let base = output_base_name(config, testfile);\n+    let base_extract = append_suffix_to_stem(&base, \"extract\");\n+\n+    let base_clang = append_suffix_to_stem(&base, \"clang\");\n+    let base_clang_extract = append_suffix_to_stem(&base_clang, \"extract\");\n \n+    let base_lines = count_extracted_lines(&base_extract);\n+    let clang_lines = count_extracted_lines(&base_clang_extract);\n \n+    mm.insert_metric(\"clang-codegen-ratio\",\n+                     (base_lines as f64) / (clang_lines as f64),\n+                     0.001);\n }\n "}]}