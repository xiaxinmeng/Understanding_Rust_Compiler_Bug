{"sha": "5c30c25f07d1144ff1945e4ef1ee56aefd53bc9d", "node_id": "C_kwDOAAsO6NoAKDVjMzBjMjVmMDdkMTE0NGZmMTk0NWU0ZWYxZWU1NmFlZmQ1M2JjOWQ", "commit": {"author": {"name": "Ellis Hoag", "email": "ellis.sparky.hoag@gmail.com", "date": "2022-09-29T02:02:38Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T00:13:19Z"}, "message": "print <signal> when ranlib failed without an exit code", "tree": {"sha": "464d340360be602bb1c10421c96ad5ee1e16235d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/464d340360be602bb1c10421c96ad5ee1e16235d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c30c25f07d1144ff1945e4ef1ee56aefd53bc9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c30c25f07d1144ff1945e4ef1ee56aefd53bc9d", "html_url": "https://github.com/rust-lang/rust/commit/5c30c25f07d1144ff1945e4ef1ee56aefd53bc9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c30c25f07d1144ff1945e4ef1ee56aefd53bc9d/comments", "author": {"login": "ellishg", "id": 8961915, "node_id": "MDQ6VXNlcjg5NjE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8961915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ellishg", "html_url": "https://github.com/ellishg", "followers_url": "https://api.github.com/users/ellishg/followers", "following_url": "https://api.github.com/users/ellishg/following{/other_user}", "gists_url": "https://api.github.com/users/ellishg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ellishg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ellishg/subscriptions", "organizations_url": "https://api.github.com/users/ellishg/orgs", "repos_url": "https://api.github.com/users/ellishg/repos", "events_url": "https://api.github.com/users/ellishg/events{/privacy}", "received_events_url": "https://api.github.com/users/ellishg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c67dcfe423cb08873a3c9cde1190ed9a607381a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c67dcfe423cb08873a3c9cde1190ed9a607381a", "html_url": "https://github.com/rust-lang/rust/commit/9c67dcfe423cb08873a3c9cde1190ed9a607381a"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "d7816e395c8ebd7e5c225505782fa374621261f0", "filename": "src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c30c25f07d1144ff1945e4ef1ee56aefd53bc9d/src%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c30c25f07d1144ff1945e4ef1ee56aefd53bc9d/src%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferrors.rs?ref=5c30c25f07d1144ff1945e4ef1ee56aefd53bc9d", "patch": "@@ -11,7 +11,7 @@ impl IntoDiagnosticArg for ExitCode {\n         let ExitCode(exit_code) = self;\n         match exit_code {\n             Some(t) => t.into_diagnostic_arg(),\n-            None => DiagnosticArgValue::Str(Cow::Borrowed(\"None\")),\n+            None => DiagnosticArgValue::Str(Cow::Borrowed(\"<signal>\")),\n         }\n     }\n }"}]}