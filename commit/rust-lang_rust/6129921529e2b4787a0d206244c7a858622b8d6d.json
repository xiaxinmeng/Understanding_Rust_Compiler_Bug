{"sha": "6129921529e2b4787a0d206244c7a858622b8d6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMjk5MjE1MjllMmI0Nzg3YTBkMjA2MjQ0YzdhODU4NjIyYjhkNmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-06T13:51:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-06T13:51:43Z"}, "message": "More 128bit support\n\n* UnOp::Neg\n* ctpop\n* bitreverse\n\nAlso replaces `if let Some(64u128) = ...` with `if ... = Some(u64u128)`\nto be able to compile cg_clif using cg_clif, as cranelift_frontend::Switch\ndoesn't support i128 yet.", "tree": {"sha": "06cd9ba1516c329454210923c744990210d80035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06cd9ba1516c329454210923c744990210d80035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6129921529e2b4787a0d206244c7a858622b8d6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6129921529e2b4787a0d206244c7a858622b8d6d", "html_url": "https://github.com/rust-lang/rust/commit/6129921529e2b4787a0d206244c7a858622b8d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6129921529e2b4787a0d206244c7a858622b8d6d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5d29a8c5889a0cbbab6511352e81ff47691ce61", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d29a8c5889a0cbbab6511352e81ff47691ce61", "html_url": "https://github.com/rust-lang/rust/commit/b5d29a8c5889a0cbbab6511352e81ff47691ce61"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "1a78f33ae7363f250a1eaf32f9654c4874ef036a", "filename": "src/base.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6129921529e2b4787a0d206244c7a858622b8d6d/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6129921529e2b4787a0d206244c7a858622b8d6d/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6129921529e2b4787a0d206244c7a858622b8d6d", "patch": "@@ -313,33 +313,26 @@ fn trans_stmt<'tcx>(\n                                 ty::Bool => {\n                                     let val = fx.bcx.ins().uextend(types::I32, val); // WORKAROUND for CraneStation/cranelift#466\n                                     let res = fx.bcx.ins().icmp_imm(IntCC::Equal, val, 0);\n-                                    fx.bcx.ins().bint(types::I8, res)\n+                                    CValue::by_val(fx.bcx.ins().bint(types::I8, res), layout)\n+                                }\n+                                ty::Uint(_) | ty::Int(_) => {\n+                                    CValue::by_val(fx.bcx.ins().bnot(val), layout)\n                                 }\n-                                ty::Uint(_) | ty::Int(_) => fx.bcx.ins().bnot(val),\n                                 _ => unimplemented!(\"un op Not for {:?}\", layout.ty),\n                             }\n                         }\n                         UnOp::Neg => match layout.ty.kind {\n                             ty::Int(_) => {\n-                                let clif_ty = fx.clif_type(layout.ty).unwrap();\n-                                if clif_ty == types::I128 {\n-                                    // FIXME implement it\n-                                    crate::trap::trap_unreachable_ret_value(\n-                                        fx,\n-                                        layout,\n-                                        \"i128 neg is not yet supported\",\n-                                    )\n-                                    .load_scalar(fx)\n-                                } else {\n-                                    let zero = fx.bcx.ins().iconst(clif_ty, 0);\n-                                    fx.bcx.ins().isub(zero, val)\n-                                }\n+                                let zero = CValue::const_val(fx, layout.ty, 0);\n+                                crate::num::trans_int_binop(fx, BinOp::Sub, zero, operand)\n+                            }\n+                            ty::Float(_) => {\n+                                CValue::by_val(fx.bcx.ins().fneg(val), layout)\n                             }\n-                            ty::Float(_) => fx.bcx.ins().fneg(val),\n                             _ => unimplemented!(\"un op Neg for {:?}\", layout.ty),\n                         },\n                     };\n-                    lval.write_cvalue(fx, CValue::by_val(res, layout));\n+                    lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), operand, ty) => {\n                     let layout = fx.layout_of(ty);"}, {"sha": "be0ed1668f8595f85a4a99fe8e39dcf1693598e9", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6129921529e2b4787a0d206244c7a858622b8d6d/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6129921529e2b4787a0d206244c7a858622b8d6d/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=6129921529e2b4787a0d206244c7a858622b8d6d", "patch": "@@ -98,7 +98,7 @@ pub fn maybe_codegen<'tcx>(\n             // Optimize `val >> 64`, because compiler_builtins uses it to deconstruct an 128bit\n             // integer into its lsb and msb.\n             // https://github.com/rust-lang-nursery/compiler-builtins/blob/79a6a1603d5672cbb9187ff41ff4d9b5048ac1cb/src/int/mod.rs#L217\n-            if let Some(64) = resolve_value_imm(fx.bcx.func, rhs_val) {\n+            if  resolve_value_imm(fx.bcx.func, rhs_val) == Some(64) {\n                 let (lhs_lsb, lhs_msb) = fx.bcx.ins().isplit(lhs_val);\n                 let all_zeros = fx.bcx.ins().iconst(types::I64, 0);\n                 let val = match (bin_op, is_signed) {"}, {"sha": "0910b878890cb569194238f104047080ab265e3f", "filename": "src/intrinsics.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6129921529e2b4787a0d206244c7a858622b8d6d/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6129921529e2b4787a0d206244c7a858622b8d6d/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=6129921529e2b4787a0d206244c7a858622b8d6d", "patch": "@@ -700,11 +700,29 @@ pub fn codegen_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, res);\n         };\n         ctpop, <T> (v arg) {\n-            let res = CValue::by_val(fx.bcx.ins().popcnt(arg), fx.layout_of(T));\n+            let res = if T == fx.tcx.types.u128 || T == fx.tcx.types.i128 {\n+                let (lo, hi) = fx.bcx.ins().isplit(arg);\n+                let lo_popcnt = fx.bcx.ins().popcnt(lo);\n+                let hi_popcnt = fx.bcx.ins().popcnt(hi);\n+                let popcnt = fx.bcx.ins().iadd(lo_popcnt, hi_popcnt);\n+                crate::cast::clif_intcast(fx, popcnt, types::I128, false)\n+            } else {\n+                fx.bcx.ins().popcnt(arg)\n+            };\n+            let res = CValue::by_val(res, fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n         bitreverse, <T> (v arg) {\n-            let res = CValue::by_val(fx.bcx.ins().bitrev(arg), fx.layout_of(T));\n+            let res = if T == fx.tcx.types.u128 || T == fx.tcx.types.i128 {\n+                let (lo, hi) = fx.bcx.ins().isplit(arg);\n+                let lo_bitrev = fx.bcx.ins().bitrev(lo);\n+                let hi_bitrev = fx.bcx.ins().bitrev(hi);\n+                let bitrev = fx.bcx.ins().iconcat(hi_bitrev, lo_bitrev);\n+                crate::cast::clif_intcast(fx, bitrev, types::I128, false)\n+            } else {\n+                fx.bcx.ins().bitrev(arg)\n+            };\n+            let res = CValue::by_val(res, fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n         bswap, <T> (v arg) {"}]}