{"sha": "cc32f867d8337cfb97fbddf832169dc79556e31d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMzJmODY3ZDgzMzdjZmI5N2ZiZGRmODMyMTY5ZGM3OTU1NmUzMWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-27T01:49:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-04T15:04:51Z"}, "message": "Modify libsyntax/diagnostics to not be so persnickety. The scheme\ndoesn't work in a multi-crate context. We'll need to come up with\nsomething better.", "tree": {"sha": "94a49893e7879d5124c0cea555d13e5a05306ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94a49893e7879d5124c0cea555d13e5a05306ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc32f867d8337cfb97fbddf832169dc79556e31d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc32f867d8337cfb97fbddf832169dc79556e31d", "html_url": "https://github.com/rust-lang/rust/commit/cc32f867d8337cfb97fbddf832169dc79556e31d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc32f867d8337cfb97fbddf832169dc79556e31d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e112e94c3cd71f792e59318f7f7197999e30cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e112e94c3cd71f792e59318f7f7197999e30cf6", "html_url": "https://github.com/rust-lang/rust/commit/1e112e94c3cd71f792e59318f7f7197999e30cf6"}], "stats": {"total": 186, "additions": 160, "deletions": 26}, "files": [{"sha": "afbb18faa0b9f0dd170a55f6fa5b2a669fcde235", "filename": "src/librustc_typeck/diagnostics.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/cc32f867d8337cfb97fbddf832169dc79556e31d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc32f867d8337cfb97fbddf832169dc79556e31d/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=cc32f867d8337cfb97fbddf832169dc79556e31d", "patch": "@@ -0,0 +1,149 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+register_diagnostic!(E0001, r##\"\n+    This error suggests that the expression arm corresponding to the noted pattern\n+    will never be reached as for all possible values of the expression being matched,\n+    one of the preceeding patterns will match.\n+\n+    This means that perhaps some of the preceeding patterns are too general, this\n+    one is too specific or the ordering is incorrect.\n+\"##)\n+\n+register_diagnostics!(\n+    E0002,\n+    E0003,\n+    E0004,\n+    E0005,\n+    E0006,\n+    E0007,\n+    E0008,\n+    E0009,\n+    E0010,\n+    E0011,\n+    E0012,\n+    E0013,\n+    E0014,\n+    E0015,\n+    E0016,\n+    E0017,\n+    E0018,\n+    E0019,\n+    E0020,\n+    E0022,\n+    E0023,\n+    E0024,\n+    E0025,\n+    E0026,\n+    E0027,\n+    E0029,\n+    E0030,\n+    E0031,\n+    E0033,\n+    E0034,\n+    E0035,\n+    E0036,\n+    E0038,\n+    E0040,\n+    E0044,\n+    E0045,\n+    E0046,\n+    E0049,\n+    E0050,\n+    E0051,\n+    E0052,\n+    E0053,\n+    E0054,\n+    E0055,\n+    E0056,\n+    E0057,\n+    E0059,\n+    E0060,\n+    E0061,\n+    E0062,\n+    E0063,\n+    E0066,\n+    E0067,\n+    E0068,\n+    E0069,\n+    E0070,\n+    E0071,\n+    E0072,\n+    E0073,\n+    E0074,\n+    E0075,\n+    E0076,\n+    E0077,\n+    E0079,\n+    E0080,\n+    E0081,\n+    E0082,\n+    E0083,\n+    E0084,\n+    E0085,\n+    E0086,\n+    E0087,\n+    E0088,\n+    E0089,\n+    E0090,\n+    E0091,\n+    E0092,\n+    E0093,\n+    E0094,\n+    E0100,\n+    E0101,\n+    E0102,\n+    E0103,\n+    E0104,\n+    E0106,\n+    E0107,\n+    E0108,\n+    E0109,\n+    E0110,\n+    E0116,\n+    E0117,\n+    E0118,\n+    E0119,\n+    E0120,\n+    E0121,\n+    E0122,\n+    E0124,\n+    E0127,\n+    E0128,\n+    E0129,\n+    E0130,\n+    E0131,\n+    E0132,\n+    E0133,\n+    E0134,\n+    E0135,\n+    E0136,\n+    E0137,\n+    E0138,\n+    E0139,\n+    E0140,\n+    E0141,\n+    E0152,\n+    E0153,\n+    E0157,\n+    E0158,\n+    E0159,\n+    E0161,\n+    E0162,\n+    E0163,\n+    E0164,\n+    E0165,\n+    E0166,\n+    E0167,\n+    E0168,\n+    E0169\n+)"}, {"sha": "2be11a236d3b756f53d27e757f0fdc43ef83448f", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cc32f867d8337cfb97fbddf832169dc79556e31d/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc32f867d8337cfb97fbddf832169dc79556e31d/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=cc32f867d8337cfb97fbddf832169dc79556e31d", "patch": "@@ -45,15 +45,6 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n         [ast::TtToken(_, token::Ident(code, _))] => code,\n         _ => unreachable!()\n     };\n-    with_registered_diagnostics(|diagnostics| {\n-        if !diagnostics.contains_key(&code.name) {\n-            ecx.span_err(span, format!(\n-                \"unknown diagnostic code {}; add to librustc/diagnostics.rs\",\n-                token::get_ident(code).get()\n-            ).as_slice());\n-        }\n-        ()\n-    });\n     with_used_diagnostics(|diagnostics| {\n         match diagnostics.insert(code.name, span) {\n             Some(previous_span) => {\n@@ -106,25 +97,19 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n         _ => unreachable!()\n     };\n \n-    let (count, expr) = with_used_diagnostics(|diagnostics_in_use| {\n+    let (count, expr) =\n         with_registered_diagnostics(|diagnostics| {\n-            let descriptions: Vec<P<ast::Expr>> = diagnostics\n-                .iter().filter_map(|(code, description)| {\n-                if !diagnostics_in_use.contains_key(code) {\n-                    ecx.span_warn(span, format!(\n-                        \"diagnostic code {} never used\", token::get_name(*code).get()\n-                    ).as_slice());\n-                }\n-                description.map(|description| {\n-                    ecx.expr_tuple(span, vec![\n-                        ecx.expr_str(span, token::get_name(*code)),\n-                        ecx.expr_str(span, token::get_name(description))\n-                    ])\n-                })\n-            }).collect();\n+            let descriptions: Vec<P<ast::Expr>> =\n+                diagnostics.iter().filter_map(|(code, description)| {\n+                    description.map(|description| {\n+                        ecx.expr_tuple(span, vec![\n+                            ecx.expr_str(span, token::get_name(*code)),\n+                            ecx.expr_str(span, token::get_name(description))])\n+                    })\n+                }).collect();\n             (descriptions.len(), ecx.expr_vec(span, descriptions))\n-        })\n-    });\n+        });\n+\n     MacItems::new(vec![quote_item!(ecx,\n         pub static $name: [(&'static str, &'static str), ..$count] = $expr;\n     ).unwrap()].into_iter())"}]}