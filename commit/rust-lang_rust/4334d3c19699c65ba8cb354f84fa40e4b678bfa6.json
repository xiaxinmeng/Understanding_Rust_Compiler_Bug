{"sha": "4334d3c19699c65ba8cb354f84fa40e4b678bfa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMzRkM2MxOTY5OWM2NWJhOGNiMzU0Zjg0ZmE0MGU0YjY3OGJmYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-24T11:56:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-24T11:56:34Z"}, "message": "auto merge of #19248 : japaric/rust/str, r=alexcrichton\n\nJust like we do with AsSlice\r\n\r\nThis comes in handy when dealing with iterator-centric APIs (`IntoIterator`!) and you want to receive an `Iterator<S> where S: Str` argument. Without this PR, e.g. you can't receive `&[\"a\", \"b\"].iter()` instead you'll have to type `&[\"a\", \"b\"].iter().map(|&x| x)` (A similar thing happens with `&[String]`).\r\n\r\nr? @aturon \r\n\r\nFull disclaimer: I haven't run `make`/`make check` yet (All my cores are busy)", "tree": {"sha": "f172709f8cc46aac873f07e226c4821831ad66e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f172709f8cc46aac873f07e226c4821831ad66e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4334d3c19699c65ba8cb354f84fa40e4b678bfa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4334d3c19699c65ba8cb354f84fa40e4b678bfa6", "html_url": "https://github.com/rust-lang/rust/commit/4334d3c19699c65ba8cb354f84fa40e4b678bfa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4334d3c19699c65ba8cb354f84fa40e4b678bfa6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bad1062caaaefe0963d7b8513786c8283e74f1e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bad1062caaaefe0963d7b8513786c8283e74f1e7", "html_url": "https://github.com/rust-lang/rust/commit/bad1062caaaefe0963d7b8513786c8283e74f1e7"}, {"sha": "02720a4a1665ebdca6159f5189115bdf3087afbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/02720a4a1665ebdca6159f5189115bdf3087afbf", "html_url": "https://github.com/rust-lang/rust/commit/02720a4a1665ebdca6159f5189115bdf3087afbf"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "bb7710c2acc1251d876bac215f76f804ddee5180", "filename": "src/libcore/str.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4334d3c19699c65ba8cb354f84fa40e4b678bfa6/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4334d3c19699c65ba8cb354f84fa40e4b678bfa6/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=4334d3c19699c65ba8cb354f84fa40e4b678bfa6", "patch": "@@ -1277,14 +1277,19 @@ pub mod traits {\n }\n \n /// Any string that can be represented as a slice\n-pub trait Str {\n+pub trait Str for Sized? {\n     /// Work with `self` as a slice.\n     fn as_slice<'a>(&'a self) -> &'a str;\n }\n \n-impl<'a> Str for &'a str {\n+impl Str for str {\n     #[inline]\n-    fn as_slice<'a>(&'a self) -> &'a str { *self }\n+    fn as_slice<'a>(&'a self) -> &'a str { self }\n+}\n+\n+impl<'a, Sized? S> Str for &'a S where S: Str {\n+    #[inline]\n+    fn as_slice(&self) -> &str { Str::as_slice(*self) }\n }\n \n /// Methods for string slices"}]}