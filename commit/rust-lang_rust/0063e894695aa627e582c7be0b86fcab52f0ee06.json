{"sha": "0063e894695aa627e582c7be0b86fcab52f0ee06", "node_id": "C_kwDOAAsO6NoAKDAwNjNlODk0Njk1YWE2MjdlNTgyYzdiZTBiODZmY2FiNTJmMGVlMDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T13:03:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-27T13:03:45Z"}, "message": "Auto merge of #14038 - Veykril:no-sysroot-hard-err, r=Veykril\n\nDon't fail workspace loading if sysroot can't be found", "tree": {"sha": "1d7c62f6ea1fd6dde49de3231478a4c0f301e80e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d7c62f6ea1fd6dde49de3231478a4c0f301e80e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0063e894695aa627e582c7be0b86fcab52f0ee06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0063e894695aa627e582c7be0b86fcab52f0ee06", "html_url": "https://github.com/rust-lang/rust/commit/0063e894695aa627e582c7be0b86fcab52f0ee06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0063e894695aa627e582c7be0b86fcab52f0ee06/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2935a89f3f4434bcff11f4c738e5a5f7666ebb9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2935a89f3f4434bcff11f4c738e5a5f7666ebb9a", "html_url": "https://github.com/rust-lang/rust/commit/2935a89f3f4434bcff11f4c738e5a5f7666ebb9a"}, {"sha": "b2598f4801364216e452c0eaef32931d49f38514", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2598f4801364216e452c0eaef32931d49f38514", "html_url": "https://github.com/rust-lang/rust/commit/b2598f4801364216e452c0eaef32931d49f38514"}], "stats": {"total": 200, "additions": 121, "deletions": 79}, "files": [{"sha": "e1dde12bad821a72e04f67e60611fcbf9f93289e", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0063e894695aa627e582c7be0b86fcab52f0ee06/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0063e894695aa627e582c7be0b86fcab52f0ee06/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=0063e894695aa627e582c7be0b86fcab52f0ee06", "patch": "@@ -70,6 +70,10 @@ impl Sysroot {\n     pub fn crates(&self) -> impl Iterator<Item = SysrootCrate> + ExactSizeIterator + '_ {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.crates.is_empty()\n+    }\n }\n \n impl Sysroot {\n@@ -79,8 +83,7 @@ impl Sysroot {\n         let sysroot_dir = discover_sysroot_dir(dir, extra_env)?;\n         let sysroot_src_dir =\n             discover_sysroot_src_dir_or_add_component(&sysroot_dir, dir, extra_env)?;\n-        let res = Sysroot::load(sysroot_dir, sysroot_src_dir)?;\n-        Ok(res)\n+        Ok(Sysroot::load(sysroot_dir, sysroot_src_dir))\n     }\n \n     pub fn discover_rustc(\n@@ -97,11 +100,10 @@ impl Sysroot {\n         let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir).ok_or_else(|| {\n             format_err!(\"can't load standard library from sysroot {}\", sysroot_dir.display())\n         })?;\n-        let res = Sysroot::load(sysroot_dir, sysroot_src_dir)?;\n-        Ok(res)\n+        Ok(Sysroot::load(sysroot_dir, sysroot_src_dir))\n     }\n \n-    pub fn load(sysroot_dir: AbsPathBuf, sysroot_src_dir: AbsPathBuf) -> Result<Sysroot> {\n+    pub fn load(sysroot_dir: AbsPathBuf, sysroot_src_dir: AbsPathBuf) -> Sysroot {\n         let mut sysroot =\n             Sysroot { root: sysroot_dir, src_root: sysroot_src_dir, crates: Arena::default() };\n \n@@ -152,14 +154,14 @@ impl Sysroot {\n             } else {\n                 \"\"\n             };\n-            anyhow::bail!(\n+            tracing::error!(\n                 \"could not find libcore in sysroot path `{}`{}\",\n                 sysroot.src_root.as_path().display(),\n                 var_note,\n             );\n         }\n \n-        Ok(sysroot)\n+        sysroot\n     }\n \n     fn by_name(&self, name: &str) -> Option<SysrootCrate> {"}, {"sha": "505b660f34493fc2b9d186b684786b34f498117c", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0063e894695aa627e582c7be0b86fcab52f0ee06/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0063e894695aa627e582c7be0b86fcab52f0ee06/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=0063e894695aa627e582c7be0b86fcab52f0ee06", "patch": "@@ -81,7 +81,7 @@ fn get_fake_sysroot() -> Sysroot {\n     // fake sysroot, so we give them both the same path:\n     let sysroot_dir = AbsPathBuf::assert(sysroot_path);\n     let sysroot_src_dir = sysroot_dir.clone();\n-    Sysroot::load(sysroot_dir, sysroot_src_dir).unwrap()\n+    Sysroot::load(sysroot_dir, sysroot_src_dir)\n }\n \n fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {"}, {"sha": "d784d3d0e9afb27009651e6bb138db579051ace3", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 106, "deletions": 43, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/0063e894695aa627e582c7be0b86fcab52f0ee06/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0063e894695aa627e582c7be0b86fcab52f0ee06/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=0063e894695aa627e582c7be0b86fcab52f0ee06", "patch": "@@ -63,7 +63,7 @@ pub struct PackageRoot {\n     pub exclude: Vec<AbsPathBuf>,\n }\n \n-#[derive(Clone, Eq, PartialEq)]\n+#[derive(Clone)]\n pub enum ProjectWorkspace {\n     /// Project workspace was discovered by running `cargo metadata` and `rustc --print sysroot`.\n     Cargo {\n@@ -83,7 +83,6 @@ pub enum ProjectWorkspace {\n     },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n     Json { project: ProjectJson, sysroot: Option<Sysroot>, rustc_cfg: Vec<CfgFlag> },\n-\n     // FIXME: The primary limitation of this approach is that the set of detached files needs to be fixed at the beginning.\n     // That's not the end user experience we should strive for.\n     // Ideally, you should be able to just open a random detached file in existing cargo projects, and get the basic features working.\n@@ -163,7 +162,7 @@ impl ProjectWorkspace {\n                     project_json,\n                     config.target.as_deref(),\n                     &config.extra_env,\n-                )?\n+                )\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n                 let cargo_version = utf8_stdout({\n@@ -193,20 +192,27 @@ impl ProjectWorkspace {\n \n                 let sysroot = match &config.sysroot {\n                     Some(RustcSource::Path(path)) => {\n-                        Some(Sysroot::with_sysroot_dir(path.clone()).with_context(|| {\n-                            format!(\"Failed to find sysroot at {}.\", path.display())\n-                        })?)\n+                        match Sysroot::with_sysroot_dir(path.clone()) {\n+                            Ok(it) => Some(it),\n+                            Err(e) => {\n+                                tracing::error!(%e, \"Failed to find sysroot at {}.\", path.display());\n+                                None\n+                            }\n+                        }\n+                    }\n+                    Some(RustcSource::Discover) => {\n+                        match Sysroot::discover(cargo_toml.parent(), &config.extra_env) {\n+                            Ok(it) => Some(it),\n+                            Err(e) => {\n+                                tracing::error!(\n+                                    %e,\n+                                    \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n+                                    cargo_toml.display()\n+                                );\n+                                None\n+                            }\n+                        }\n                     }\n-                    Some(RustcSource::Discover) => Some(\n-                        Sysroot::discover(cargo_toml.parent(), &config.extra_env).with_context(\n-                            || {\n-                                format!(\n-                            \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n-                            cargo_toml.display()\n-                        )\n-                            },\n-                        )?,\n-                    ),\n                     None => None,\n                 };\n                 if let Some(sysroot) = &sysroot {\n@@ -225,18 +231,22 @@ impl ProjectWorkspace {\n                 }\n \n                 let rustc = match rustc_dir {\n-                    Some(rustc_dir) => Some({\n-                        let meta = CargoWorkspace::fetch_metadata(\n-                            &rustc_dir,\n-                            cargo_toml.parent(),\n-                            config,\n-                            progress,\n-                        )\n-                        .with_context(|| {\n-                            \"Failed to read Cargo metadata for Rust sources\".to_string()\n-                        })?;\n-                        CargoWorkspace::new(meta)\n-                    }),\n+                    Some(rustc_dir) => match CargoWorkspace::fetch_metadata(\n+                        &rustc_dir,\n+                        cargo_toml.parent(),\n+                        config,\n+                        progress,\n+                    ) {\n+                        Ok(meta) => Some(CargoWorkspace::new(meta)),\n+                        Err(e) => {\n+                            tracing::error!(\n+                                %e,\n+                                \"Failed to read Cargo metadata from rustc source at {}\",\n+                                rustc_dir.display()\n+                            );\n+                            None\n+                        }\n+                    },\n                     None => None,\n                 };\n \n@@ -272,23 +282,22 @@ impl ProjectWorkspace {\n         project_json: ProjectJson,\n         target: Option<&str>,\n         extra_env: &FxHashMap<String, String>,\n-    ) -> Result<ProjectWorkspace> {\n+    ) -> ProjectWorkspace {\n         let sysroot = match (project_json.sysroot.clone(), project_json.sysroot_src.clone()) {\n-            (Some(sysroot), Some(sysroot_src)) => Some(Sysroot::load(sysroot, sysroot_src)?),\n+            (Some(sysroot), Some(sysroot_src)) => Some(Sysroot::load(sysroot, sysroot_src)),\n             (Some(sysroot), None) => {\n                 // assume sysroot is structured like rustup's and guess `sysroot_src`\n                 let sysroot_src =\n                     sysroot.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\").join(\"library\");\n-\n-                Some(Sysroot::load(sysroot, sysroot_src)?)\n+                Some(Sysroot::load(sysroot, sysroot_src))\n             }\n             (None, Some(sysroot_src)) => {\n                 // assume sysroot is structured like rustup's and guess `sysroot`\n                 let mut sysroot = sysroot_src.clone();\n                 for _ in 0..5 {\n                     sysroot.pop();\n                 }\n-                Some(Sysroot::load(sysroot, sysroot_src)?)\n+                Some(Sysroot::load(sysroot, sysroot_src))\n             }\n             (None, None) => None,\n         };\n@@ -297,26 +306,37 @@ impl ProjectWorkspace {\n         }\n \n         let rustc_cfg = rustc_cfg::get(None, target, extra_env);\n-        Ok(ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg })\n+        ProjectWorkspace::Json { project: project_json, sysroot, rustc_cfg }\n     }\n \n     pub fn load_detached_files(\n         detached_files: Vec<AbsPathBuf>,\n         config: &CargoConfig,\n     ) -> Result<ProjectWorkspace> {\n         let sysroot = match &config.sysroot {\n-            Some(RustcSource::Path(path)) => Some(\n-                Sysroot::with_sysroot_dir(path.clone())\n-                    .with_context(|| format!(\"Failed to find sysroot at {}.\", path.display()))?,\n-            ),\n+            Some(RustcSource::Path(path)) => match Sysroot::with_sysroot_dir(path.clone()) {\n+                Ok(it) => Some(it),\n+                Err(e) => {\n+                    tracing::error!(%e, \"Failed to find sysroot at {}.\", path.display());\n+                    None\n+                }\n+            },\n             Some(RustcSource::Discover) => {\n                 let dir = &detached_files\n                     .first()\n                     .and_then(|it| it.parent())\n                     .ok_or_else(|| format_err!(\"No detached files to load\"))?;\n-                Some(Sysroot::discover(dir, &config.extra_env).with_context(|| {\n-                    format!(\"Failed to find sysroot in {}. Is rust-src installed?\", dir.display())\n-                })?)\n+                match Sysroot::discover(dir, &config.extra_env) {\n+                    Ok(it) => Some(it),\n+                    Err(e) => {\n+                        tracing::error!(\n+                            %e,\n+                            \"Failed to find sysroot for {}. Is rust-src installed?\",\n+                            dir.display()\n+                        );\n+                        None\n+                    }\n+                }\n             }\n             None => None,\n         };\n@@ -541,7 +561,7 @@ impl ProjectWorkspace {\n                 load_proc_macro,\n                 load,\n                 project,\n-                sysroot,\n+                sysroot.as_ref(),\n                 extra_env,\n                 Err(\"rust-project.json projects have no target layout set\".into()),\n             ),\n@@ -585,14 +605,57 @@ impl ProjectWorkspace {\n         }\n         crate_graph\n     }\n+\n+    pub fn eq_ignore_build_data(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (\n+                Self::Cargo {\n+                    cargo,\n+                    sysroot,\n+                    rustc,\n+                    rustc_cfg,\n+                    cfg_overrides,\n+                    toolchain,\n+                    build_scripts: _,\n+                    target_layout: _,\n+                },\n+                Self::Cargo {\n+                    cargo: o_cargo,\n+                    sysroot: o_sysroot,\n+                    rustc: o_rustc,\n+                    rustc_cfg: o_rustc_cfg,\n+                    cfg_overrides: o_cfg_overrides,\n+                    toolchain: o_toolchain,\n+                    build_scripts: _,\n+                    target_layout: _,\n+                },\n+            ) => {\n+                cargo == o_cargo\n+                    && rustc == o_rustc\n+                    && rustc_cfg == o_rustc_cfg\n+                    && cfg_overrides == o_cfg_overrides\n+                    && toolchain == o_toolchain\n+                    && sysroot == o_sysroot\n+            }\n+            (\n+                Self::Json { project, sysroot, rustc_cfg },\n+                Self::Json { project: o_project, sysroot: o_sysroot, rustc_cfg: o_rustc_cfg },\n+            ) => project == o_project && rustc_cfg == o_rustc_cfg && sysroot == o_sysroot,\n+            (\n+                Self::DetachedFiles { files, sysroot, rustc_cfg },\n+                Self::DetachedFiles { files: o_files, sysroot: o_sysroot, rustc_cfg: o_rustc_cfg },\n+            ) => files == o_files && sysroot == o_sysroot && rustc_cfg == o_rustc_cfg,\n+            _ => false,\n+        }\n+    }\n }\n \n fn project_json_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n-    sysroot: &Option<Sysroot>,\n+    sysroot: Option<&Sysroot>,\n     extra_env: &FxHashMap<String, String>,\n     target_layout: TargetLayoutLoadResult,\n ) -> CrateGraph {"}, {"sha": "a33b8e14cf3f052a24b5580bbbf92260f249228e", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0063e894695aa627e582c7be0b86fcab52f0ee06/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0063e894695aa627e582c7be0b86fcab52f0ee06/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=0063e894695aa627e582c7be0b86fcab52f0ee06", "patch": "@@ -148,11 +148,11 @@ impl GlobalState {\n                             )\n                         }\n                         LinkedProject::InlineJsonProject(it) => {\n-                            project_model::ProjectWorkspace::load_inline(\n+                            Ok(project_model::ProjectWorkspace::load_inline(\n                                 it.clone(),\n                                 cargo_config.target.as_deref(),\n                                 &cargo_config.extra_env,\n-                            )\n+                            ))\n                         }\n                     })\n                     .collect::<Vec<_>>();\n@@ -212,35 +212,11 @@ impl GlobalState {\n         let workspaces =\n             workspaces.iter().filter_map(|res| res.as_ref().ok().cloned()).collect::<Vec<_>>();\n \n-        fn eq_ignore_build_data<'a>(\n-            left: &'a ProjectWorkspace,\n-            right: &'a ProjectWorkspace,\n-        ) -> bool {\n-            let key = |p: &'a ProjectWorkspace| match p {\n-                ProjectWorkspace::Cargo {\n-                    cargo,\n-                    sysroot,\n-                    rustc,\n-                    rustc_cfg,\n-                    cfg_overrides,\n-\n-                    build_scripts: _,\n-                    toolchain: _,\n-                    target_layout: _,\n-                } => Some((cargo, sysroot, rustc, rustc_cfg, cfg_overrides)),\n-                _ => None,\n-            };\n-            match (key(left), key(right)) {\n-                (Some(lk), Some(rk)) => lk == rk,\n-                _ => left == right,\n-            }\n-        }\n-\n         let same_workspaces = workspaces.len() == self.workspaces.len()\n             && workspaces\n                 .iter()\n                 .zip(self.workspaces.iter())\n-                .all(|(l, r)| eq_ignore_build_data(l, r));\n+                .all(|(l, r)| l.eq_ignore_build_data(r));\n \n         if same_workspaces {\n             let (workspaces, build_scripts) = self.fetch_build_data_queue.last_op_result();\n@@ -270,7 +246,8 @@ impl GlobalState {\n \n             // Here, we completely changed the workspace (Cargo.toml edit), so\n             // we don't care about build-script results, they are stale.\n-            self.workspaces = Arc::new(workspaces)\n+            // FIXME: can we abort the build scripts here?\n+            self.workspaces = Arc::new(workspaces);\n         }\n \n         if let FilesWatcher::Client = self.config.files().watcher {"}]}