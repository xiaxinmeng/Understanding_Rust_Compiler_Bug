{"sha": "52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMzE1YTk3YzZiMDA0ZjA2OTJhYzUyY2NkZDFmZjMzZjIyY2ZlZTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:35:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:35:51Z"}, "message": "rollup merge of #20042: alexcrichton/second-pass-ptr\n\nThis commit performs a second pass for stabilization over the `std::ptr` module.\nThe specific actions taken were:\n\n* The `RawPtr` trait was renamed to `PtrExt`\n* The `RawMutPtr` trait was renamed to `PtrMutExt`\n* The module name `ptr` is now stable.\n* These functions were all marked `#[stable]` with no modification:\n  * `null`\n  * `null_mut`\n  * `swap`\n  * `replace`\n  * `read`\n  * `write`\n  * `PtrExt::is_null`\n  * `PtrExt::is_not_null`\n  * `PtrExt::offset`\n* These functions remain unstable:\n  * `as_ref`, `as_mut` - the return value of an `Option` is not fully expressive\n                         as null isn't the only bad value, and it's unclear\n                         whether we want to commit to these functions at this\n                         time. The reference/lifetime semantics as written are\n                         also problematic in how they encourage arbitrary\n                         lifetimes.\n  * `zero_memory` - This function is currently not used at all in the\n                    distribution, and in general it plays a broader role in the\n                    \"working with unsafe pointers\" story. This story is not yet\n                    fully developed, so at this time the function remains\n                    unstable for now.\n  * `read_and_zero` - This function remains unstable for largely the same\n                      reasons as `zero_memory`.\n* These functions are now all deprecated:\n  * `PtrExt::null` - call `ptr::null` or `ptr::null_mut` instead.\n  * `PtrExt::to_uint` - use an `as` expression instead.", "tree": {"sha": "a6aad98c11ad38afe36d25a132abe1660c5f5812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6aad98c11ad38afe36d25a132abe1660c5f5812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "html_url": "https://github.com/rust-lang/rust/commit/52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc20d6009ebf46b7ec75020ebfe35ff0ef064d1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc20d6009ebf46b7ec75020ebfe35ff0ef064d1b", "html_url": "https://github.com/rust-lang/rust/commit/cc20d6009ebf46b7ec75020ebfe35ff0ef064d1b"}, {"sha": "54452cdd68a18b7caa8def20bbd587b769f4cb67", "url": "https://api.github.com/repos/rust-lang/rust/commits/54452cdd68a18b7caa8def20bbd587b769f4cb67", "html_url": "https://github.com/rust-lang/rust/commit/54452cdd68a18b7caa8def20bbd587b769f4cb67"}], "stats": {"total": 211, "additions": 119, "deletions": 92}, "files": [{"sha": "21c47cdf3d752129153e6d983120417650eb3410", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -80,7 +80,7 @@ use core::nonzero::NonZero;\n use core::ops::{Drop, Deref};\n use core::option::Option;\n use core::option::Option::{Some, None};\n-use core::ptr::{mod, RawPtr};\n+use core::ptr::{mod, PtrExt};\n use heap::deallocate;\n \n /// An atomically reference counted wrapper for shared state."}, {"sha": "cdc30efd2d9a289049492fe8e518f98c1f9a7cc2", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::ptr::RawPtr;\n+use core::ptr::PtrExt;\n \n // FIXME: #13996: mark the `allocate` and `reallocate` return value as `noalias`\n \n@@ -371,7 +371,7 @@ mod imp {\n mod test {\n     extern crate test;\n     use self::test::Bencher;\n-    use core::ptr::RawPtr;\n+    use core::ptr::PtrExt;\n     use heap;\n \n     #[test]"}, {"sha": "90e126bef4d55ee1d43398ff22825fb0dceb0e8d", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -154,7 +154,7 @@ use core::nonzero::NonZero;\n use core::ops::{Deref, Drop};\n use core::option::Option;\n use core::option::Option::{Some, None};\n-use core::ptr::{mod, RawPtr};\n+use core::ptr::{mod, PtrExt};\n use core::result::Result;\n use core::result::Result::{Ok, Err};\n "}, {"sha": "d8ce79f4fe90d29c3e9f28e80cf46848cf7f3a94", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -95,7 +95,7 @@ impl<T> Rawlink<T> {\n     /// Convert the `Rawlink` into an Option value\n     fn resolve_immut<'a>(&self) -> Option<&'a T> {\n         unsafe {\n-            self.p.as_ref()\n+            mem::transmute(self.p.as_ref())\n         }\n     }\n "}, {"sha": "d4db9ea59f982bb5915fc0d206e74dfecdbb7fa6", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -96,7 +96,7 @@ use core::mem::size_of;\n use core::mem;\n use core::ops::FnMut;\n use core::prelude::{Clone, Greater, Iterator, IteratorExt, Less, None, Option};\n-use core::prelude::{Ord, Ordering, RawPtr, Some, range};\n+use core::prelude::{Ord, Ordering, PtrExt, Some, range};\n use core::ptr;\n use core::slice as core_slice;\n use self::Direction::*;"}, {"sha": "225814673c421e4ebf76d3efd94059e7f1bc4f9d", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -1768,19 +1768,12 @@ impl StrExt for str {}\n \n #[cfg(test)]\n mod tests {\n-    use std::iter::AdditiveIterator;\n-    use std::iter::range;\n-    use std::default::Default;\n-    use std::char::Char;\n-    use std::clone::Clone;\n-    use std::cmp::{Ord, PartialOrd, Equiv};\n-    use std::cmp::Ordering::{Equal, Greater, Less};\n-    use std::option::Option::{mod, Some, None};\n-    use std::result::Result::{Ok, Err};\n-    use std::ptr::RawPtr;\n-    use std::iter::{Iterator, IteratorExt, DoubleEndedIteratorExt};\n+    use prelude::*;\n \n-    use super::*;\n+    use core::default::Default;\n+    use core::iter::AdditiveIterator;\n+    use super::{eq_slice, from_utf8, is_utf8, is_utf16, raw};\n+    use super::truncate_utf16_at_nul;\n     use super::MaybeOwned::{Owned, Slice};\n     use std::slice::{AsSlice, SliceExt};\n     use string::{String, ToString};"}, {"sha": "fd1598db8cdfccbce8f40bf4f072ff51b80d7212", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -57,7 +57,7 @@ pub use iter::{IteratorOrdExt, MutableDoubleEndedIterator, ExactSizeIterator};\n pub use num::{ToPrimitive, FromPrimitive};\n pub use option::Option;\n pub use option::Option::{Some, None};\n-pub use ptr::RawPtr;\n+pub use ptr::{PtrExt, MutPtrExt};\n pub use result::Result;\n pub use result::Result::{Ok, Err};\n pub use str::{Str, StrExt};"}, {"sha": "75bb8d33ea85f514419190b2d52be05d579d8f51", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 87, "deletions": 54, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -16,11 +16,10 @@\n //! typically limited to a few patterns.\n //!\n //! Use the [`null` function](fn.null.html) to create null pointers,\n-//! the [`is_null`](trait.RawPtr.html#tymethod.is_null)\n-//! and [`is_not_null`](trait.RawPtr.html#method.is_not_null)\n-//! methods of the [`RawPtr` trait](trait.RawPtr.html) to check for null.\n-//! The `RawPtr` trait is imported by the prelude, so `is_null` etc.\n-//! work everywhere. The `RawPtr` also defines the `offset` method,\n+//! the [`is_null`](trait.PtrExt.html#tymethod.is_null)\n+//! methods of the [`PtrExt` trait](trait.PtrExt.html) to check for null.\n+//! The `PtrExt` trait is imported by the prelude, so `is_null` etc.\n+//! work everywhere. The `PtrExt` also defines the `offset` method,\n //! for pointer math.\n //!\n //! # Common ways to create unsafe pointers\n@@ -87,16 +86,16 @@\n //! but C APIs hand out a lot of pointers generally, so are a common source\n //! of unsafe pointers in Rust.\n \n+#![stable]\n+\n use mem;\n use clone::Clone;\n use intrinsics;\n+use option::Option::{mod, Some, None};\n use kinds::{Send, Sync};\n-use option::Option;\n-use option::Option::{Some, None};\n \n use cmp::{PartialEq, Eq, Ord, PartialOrd, Equiv};\n-use cmp::Ordering;\n-use cmp::Ordering::{Less, Equal, Greater};\n+use cmp::Ordering::{mod, Less, Equal, Greater};\n \n // FIXME #19649: instrinsic docs don't render, so these have no docs :(\n \n@@ -121,7 +120,7 @@ pub use intrinsics::set_memory;\n /// assert!(p.is_null());\n /// ```\n #[inline]\n-#[unstable = \"may need a different name after pending changes to pointer types\"]\n+#[stable]\n pub fn null<T>() -> *const T { 0 as *const T }\n \n /// Creates a null mutable raw pointer.\n@@ -135,31 +134,31 @@ pub fn null<T>() -> *const T { 0 as *const T }\n /// assert!(p.is_null());\n /// ```\n #[inline]\n-#[unstable = \"may need a different name after pending changes to pointer types\"]\n+#[stable]\n pub fn null_mut<T>() -> *mut T { 0 as *mut T }\n \n-/// Zeroes out `count * size_of::<T>` bytes of memory at `dst`. `count` may be `0`.\n+/// Zeroes out `count * size_of::<T>` bytes of memory at `dst`. `count` may be\n+/// `0`.\n ///\n /// # Safety\n ///\n-/// Beyond accepting a raw pointer, this is unsafe because it will not drop the contents of `dst`,\n-/// and may be used to create invalid instances of `T`.\n+/// Beyond accepting a raw pointer, this is unsafe because it will not drop the\n+/// contents of `dst`, and may be used to create invalid instances of `T`.\n #[inline]\n-#[experimental = \"uncertain about naming and semantics\"]\n-#[allow(experimental)]\n+#[unstable = \"may play a larger role in std::ptr future extensions\"]\n pub unsafe fn zero_memory<T>(dst: *mut T, count: uint) {\n     set_memory(dst, 0, count);\n }\n \n /// Swaps the values at two mutable locations of the same type, without\n-/// deinitialising either. They may overlap, unlike `mem::swap` which is otherwise\n-/// equivalent.\n+/// deinitialising either. They may overlap, unlike `mem::swap` which is\n+/// otherwise equivalent.\n ///\n /// # Safety\n ///\n /// This is only unsafe because it accepts a raw pointer.\n #[inline]\n-#[unstable]\n+#[stable]\n pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n     // Give ourselves some scratch space to work with\n     let mut tmp: T = mem::uninitialized();\n@@ -183,7 +182,7 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n /// This is only unsafe because it accepts a raw pointer.\n /// Otherwise, this operation is identical to `mem::replace`.\n #[inline]\n-#[unstable]\n+#[stable]\n pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n     mem::swap(mem::transmute(dest), &mut src); // cannot overlap\n     src\n@@ -201,7 +200,7 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n /// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n /// because it will attempt to drop the value previously at `*src`.\n #[inline(always)]\n-#[unstable]\n+#[stable]\n pub unsafe fn read<T>(src: *const T) -> T {\n     let mut tmp: T = mem::uninitialized();\n     copy_nonoverlapping_memory(&mut tmp, src, 1);\n@@ -214,8 +213,7 @@ pub unsafe fn read<T>(src: *const T) -> T {\n ///\n /// This is unsafe for the same reasons that `read` is unsafe.\n #[inline(always)]\n-#[experimental]\n-#[allow(experimental)]\n+#[unstable = \"may play a larger role in std::ptr future extensions\"]\n pub unsafe fn read_and_zero<T>(dest: *mut T) -> T {\n     // Copy the data out from `dest`:\n     let tmp = read(&*dest);\n@@ -226,85 +224,105 @@ pub unsafe fn read_and_zero<T>(dest: *mut T) -> T {\n     tmp\n }\n \n-/// Overwrites a memory location with the given value without reading or dropping\n-/// the old value.\n+/// Overwrites a memory location with the given value without reading or\n+/// dropping the old value.\n ///\n /// # Safety\n ///\n /// Beyond accepting a raw pointer, this operation is unsafe because it does\n /// not drop the contents of `dst`. This could leak allocations or resources,\n /// so care must be taken not to overwrite an object that should be dropped.\n ///\n-/// This is appropriate for initializing uninitialized memory, or overwritting memory\n-/// that has previously been `read` from.\n+/// This is appropriate for initializing uninitialized memory, or overwritting\n+/// memory that has previously been `read` from.\n #[inline]\n-#[unstable]\n+#[stable]\n pub unsafe fn write<T>(dst: *mut T, src: T) {\n     intrinsics::move_val_init(&mut *dst, src)\n }\n \n /// Methods on raw pointers\n-pub trait RawPtr<T> {\n-    /// Returns a null raw pointer.\n+#[stable]\n+pub trait PtrExt<T> {\n+    /// Returns the null pointer.\n+    #[deprecated = \"call ptr::null instead\"]\n     fn null() -> Self;\n \n     /// Returns true if the pointer is null.\n-    fn is_null(&self) -> bool;\n+    #[stable]\n+    fn is_null(self) -> bool;\n \n-    /// Returns true if the pointer is not null.\n-    fn is_not_null(&self) -> bool { !self.is_null() }\n+    /// Returns true if the pointer is not equal to the null pointer.\n+    #[deprecated = \"use !p.is_null() instead\"]\n+    fn is_not_null(self) -> bool { !self.is_null() }\n \n-    /// Returns the address of the pointer.\n-    fn to_uint(&self) -> uint;\n+    /// Returns true if the pointer is not null.\n+    #[deprecated = \"use `as uint` instead\"]\n+    fn to_uint(self) -> uint;\n \n-    /// Returns `None` if the pointer is null, or else returns a reference to the\n-    /// value wrapped in `Some`.\n+    /// Returns `None` if the pointer is null, or else returns a reference to\n+    /// the value wrapped in `Some`.\n     ///\n     /// # Safety\n     ///\n-    /// While this method and its mutable counterpart are useful for null-safety,\n-    /// it is important to note that this is still an unsafe operation because\n-    /// the returned value could be pointing to invalid memory.\n+    /// While this method and its mutable counterpart are useful for\n+    /// null-safety, it is important to note that this is still an unsafe\n+    /// operation because the returned value could be pointing to invalid\n+    /// memory.\n+    #[unstable = \"Option is not clearly the right return type, and we may want \\\n+                  to tie the return lifetime to a borrow of the raw pointer\"]\n     unsafe fn as_ref<'a>(&self) -> Option<&'a T>;\n \n     /// Calculates the offset from a pointer. `count` is in units of T; e.g. a\n     /// `count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.\n     ///\n     /// # Safety\n     ///\n-    /// The offset must be in-bounds of the object, or one-byte-past-the-end. Otherwise\n-    /// `offset` invokes Undefined Behaviour, regardless of whether the pointer is used.\n+    /// The offset must be in-bounds of the object, or one-byte-past-the-end.\n+    /// Otherwise `offset` invokes Undefined Behaviour, regardless of whether\n+    /// the pointer is used.\n+    #[stable]\n     unsafe fn offset(self, count: int) -> Self;\n }\n \n /// Methods on mutable raw pointers\n-pub trait RawMutPtr<T>{\n-    /// Returns `None` if the pointer is null, or else returns a mutable reference\n-    /// to the value wrapped in `Some`.\n+#[stable]\n+pub trait MutPtrExt<T>{\n+    /// Returns `None` if the pointer is null, or else returns a mutable\n+    /// reference to the value wrapped in `Some`.\n     ///\n     /// # Safety\n     ///\n     /// As with `as_ref`, this is unsafe because it cannot verify the validity\n     /// of the returned pointer.\n+    #[unstable = \"Option is not clearly the right return type, and we may want \\\n+                  to tie the return lifetime to a borrow of the raw pointer\"]\n     unsafe fn as_mut<'a>(&self) -> Option<&'a mut T>;\n }\n \n-impl<T> RawPtr<T> for *const T {\n+#[stable]\n+impl<T> PtrExt<T> for *const T {\n     #[inline]\n+    #[deprecated = \"call ptr::null instead\"]\n     fn null() -> *const T { null() }\n \n     #[inline]\n-    fn is_null(&self) -> bool { *self == RawPtr::null() }\n+    #[stable]\n+    fn is_null(self) -> bool { self as uint == 0 }\n \n     #[inline]\n-    fn to_uint(&self) -> uint { *self as uint }\n+    #[deprecated = \"use `as uint` instead\"]\n+    fn to_uint(self) -> uint { self as uint }\n \n     #[inline]\n+    #[stable]\n     unsafe fn offset(self, count: int) -> *const T {\n         intrinsics::offset(self, count)\n     }\n \n     #[inline]\n+    #[unstable = \"return value does not necessarily convey all possible \\\n+                  information\"]\n     unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n         if self.is_null() {\n             None\n@@ -314,22 +332,29 @@ impl<T> RawPtr<T> for *const T {\n     }\n }\n \n-impl<T> RawPtr<T> for *mut T {\n+#[stable]\n+impl<T> PtrExt<T> for *mut T {\n     #[inline]\n+    #[deprecated = \"call ptr::null instead\"]\n     fn null() -> *mut T { null_mut() }\n \n     #[inline]\n-    fn is_null(&self) -> bool { *self == RawPtr::null() }\n+    #[stable]\n+    fn is_null(self) -> bool { self as uint == 0 }\n \n     #[inline]\n-    fn to_uint(&self) -> uint { *self as uint }\n+    #[deprecated = \"use `as uint` instead\"]\n+    fn to_uint(self) -> uint { self as uint }\n \n     #[inline]\n+    #[stable]\n     unsafe fn offset(self, count: int) -> *mut T {\n         intrinsics::offset(self as *const T, count) as *mut T\n     }\n \n     #[inline]\n+    #[unstable = \"return value does not necessarily convey all possible \\\n+                  information\"]\n     unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n         if self.is_null() {\n             None\n@@ -339,8 +364,11 @@ impl<T> RawPtr<T> for *mut T {\n     }\n }\n \n-impl<T> RawMutPtr<T> for *mut T {\n+#[stable]\n+impl<T> MutPtrExt<T> for *mut T {\n     #[inline]\n+    #[unstable = \"return value does not necessarily convey all possible \\\n+                  information\"]\n     unsafe fn as_mut<'a>(&self) -> Option<&'a mut T> {\n         if self.is_null() {\n             None\n@@ -510,28 +538,33 @@ impl<T> PartialOrd for *mut T {\n /// raw `*mut T` (which conveys no particular ownership semantics).\n /// Useful for building abstractions like `Vec<T>` or `Box<T>`, which\n /// internally use raw pointers to manage the memory that they own.\n+#[unstable = \"recently added to this module\"]\n pub struct Unique<T>(pub *mut T);\n \n /// `Unique` pointers are `Send` if `T` is `Send` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n+#[unstable = \"recently added to this module\"]\n unsafe impl<T:Send> Send for Unique<T> { }\n \n /// `Unique` pointers are `Sync` if `T` is `Sync` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n+#[unstable = \"recently added to this module\"]\n unsafe impl<T:Sync> Sync for Unique<T> { }\n \n impl<T> Unique<T> {\n     /// Returns a null Unique.\n+    #[unstable = \"recently added to this module\"]\n     pub fn null() -> Unique<T> {\n-        Unique(RawPtr::null())\n+        Unique(null_mut())\n     }\n \n     /// Return an (unsafe) pointer into the memory owned by `self`.\n+    #[unstable = \"recently added to this module\"]\n     pub unsafe fn offset(self, offset: int) -> *mut T {\n-        (self.0 as *const T).offset(offset) as *mut T\n+        self.0.offset(offset)\n     }\n }"}, {"sha": "87b1961a76050eb2a98c74b91ab1eacad70e45d9", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -47,7 +47,7 @@ use ops::{FnMut, mod};\n use option::Option;\n use option::Option::{None, Some};\n use ptr;\n-use ptr::RawPtr;\n+use ptr::PtrExt;\n use mem;\n use mem::size_of;\n use kinds::{Sized, marker};\n@@ -1334,7 +1334,7 @@ pub unsafe fn from_raw_mut_buf<'a, T>(p: &'a *mut T, len: uint) -> &'a mut [T] {\n #[deprecated]\n pub mod raw {\n     use mem::transmute;\n-    use ptr::RawPtr;\n+    use ptr::PtrExt;\n     use raw::Slice;\n     use ops::FnOnce;\n     use option::Option;"}, {"sha": "34e47c51cfeaeaa1c00abb4a10a6aa4075dd4f68", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -28,7 +28,7 @@ use mem;\n use num::Int;\n use ops::{Fn, FnMut};\n use option::Option::{mod, None, Some};\n-use ptr::RawPtr;\n+use ptr::PtrExt;\n use raw::{Repr, Slice};\n use result::Result::{mod, Ok, Err};\n use slice::{mod, SliceExt};\n@@ -1072,7 +1072,7 @@ const TAG_CONT_U8: u8 = 0b1000_0000u8;\n /// Unsafe operations\n #[deprecated]\n pub mod raw {\n-    use ptr::RawPtr;\n+    use ptr::PtrExt;\n     use raw::Slice;\n     use slice::SliceExt;\n     use str::StrExt;"}, {"sha": "5249f59d78f750b28ab2a1c001a41adda06f27b7", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"Store {} -> {}\",\n                self.ccx.tn().val_to_string(val),\n                self.ccx.tn().val_to_string(ptr));\n-        assert!(self.llbuilder.is_not_null());\n+        assert!(!self.llbuilder.is_null());\n         self.count_insn(\"store\");\n         unsafe {\n             llvm::LLVMBuildStore(self.llbuilder, val, ptr);\n@@ -512,7 +512,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"Store {} -> {}\",\n                self.ccx.tn().val_to_string(val),\n                self.ccx.tn().val_to_string(ptr));\n-        assert!(self.llbuilder.is_not_null());\n+        assert!(!self.llbuilder.is_null());\n         self.count_insn(\"store.volatile\");\n         unsafe {\n             let insn = llvm::LLVMBuildStore(self.llbuilder, val, ptr);"}, {"sha": "9e959ce4221e71f8f61052169507b4bb8f1c1f89", "filename": "src/librustc_trans/trans/value.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -20,7 +20,7 @@ pub struct Value(pub ValueRef);\n macro_rules! opt_val { ($e:expr) => (\n     unsafe {\n         match $e {\n-            p if p.is_not_null() => Some(Value(p)),\n+            p if !p.is_null() => Some(Value(p)),\n             _ => None\n         }\n     }\n@@ -37,7 +37,7 @@ impl Value {\n     pub fn get_parent(self) -> Option<BasicBlock> {\n         unsafe {\n             match llvm::LLVMGetInstructionParent(self.get()) {\n-                p if p.is_not_null() => Some(BasicBlock(p)),\n+                p if !p.is_null() => Some(BasicBlock(p)),\n                 _ => None\n             }\n         }\n@@ -77,7 +77,7 @@ impl Value {\n     pub fn get_first_use(self) -> Option<Use> {\n         unsafe {\n             match llvm::LLVMGetFirstUse(self.get()) {\n-                u if u.is_not_null() => Some(Use(u)),\n+                u if !u.is_null() => Some(Use(u)),\n                 _ => None\n             }\n         }\n@@ -119,7 +119,7 @@ impl Value {\n     /// Tests if this value is a terminator instruction\n     pub fn is_a_terminator_inst(self) -> bool {\n         unsafe {\n-            llvm::LLVMIsATerminatorInst(self.get()).is_not_null()\n+            !llvm::LLVMIsATerminatorInst(self.get()).is_null()\n         }\n     }\n }\n@@ -142,7 +142,7 @@ impl Use {\n     pub fn get_next_use(self) -> Option<Use> {\n         unsafe {\n             match llvm::LLVMGetNextUse(self.get()) {\n-                u if u.is_not_null() => Some(Use(u)),\n+                u if !u.is_null() => Some(Use(u)),\n                 _ => None\n             }\n         }"}, {"sha": "0aa51ee66ed63dc30324fcd75b43ddc5d8b7d13b", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -40,7 +40,7 @@ use mem;\n use ops::{Drop, FnOnce};\n use option::Option;\n use option::Option::{Some, None};\n-use ptr::RawPtr;\n+use ptr::PtrExt;\n use ptr;\n use raw;\n use slice::AsSlice;"}, {"sha": "86c0fc708a525f43f96ef385acda59be5b68807b", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -23,7 +23,7 @@ use num::{Int, UnsignedInt};\n use ops::{Deref, DerefMut, Drop};\n use option::Option;\n use option::Option::{Some, None};\n-use ptr::{Unique, RawPtr, copy_nonoverlapping_memory, zero_memory};\n+use ptr::{Unique, PtrExt, copy_nonoverlapping_memory, zero_memory};\n use ptr;\n use rt::heap::{allocate, deallocate};\n "}, {"sha": "e8765e3c2317e5d87d1fa8a04fa3bf0572dcd840", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -22,7 +22,7 @@ use num::Int;\n use ops::FnOnce;\n use option::Option;\n use option::Option::{Some, None};\n-use ptr::RawPtr;\n+use ptr::PtrExt;\n use result::Result::{Ok, Err};\n use slice::{SliceExt, AsSlice};\n "}, {"sha": "ada57bde74cc807a27d4c9eea6e9464582b02709", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -935,7 +935,7 @@ impl<'a> Reader for &'a mut (Reader+'a) {\n // API yet. If so, it should be a method on Vec.\n unsafe fn slice_vec_capacity<'a, T>(v: &'a mut Vec<T>, start: uint, end: uint) -> &'a mut [T] {\n     use raw::Slice;\n-    use ptr::RawPtr;\n+    use ptr::PtrExt;\n \n     assert!(start <= end);\n     assert!(end <= v.capacity());"}, {"sha": "04f66c2c17188ff54d8cedacdfcc6808e3ad2d18", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -46,7 +46,8 @@ use option::Option;\n use option::Option::{Some, None};\n use path::{Path, GenericPath, BytesContainer};\n use sys;\n-use ptr::RawPtr;\n+use sys::os as os_imp;\n+use ptr::PtrExt;\n use ptr;\n use result::Result;\n use result::Result::{Err, Ok};"}, {"sha": "fc59f06ae6cf3ef5d3b143d380c606fd148930a1", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -73,7 +73,7 @@\n #[doc(no_inline)] pub use option::Option;\n #[doc(no_inline)] pub use option::Option::{Some, None};\n #[doc(no_inline)] pub use path::{GenericPath, Path, PosixPath, WindowsPath};\n-#[doc(no_inline)] pub use ptr::{RawPtr, RawMutPtr};\n+#[doc(no_inline)] pub use ptr::{PtrExt, MutPtrExt};\n #[doc(no_inline)] pub use result::Result;\n #[doc(no_inline)] pub use result::Result::{Ok, Err};\n #[doc(no_inline)] pub use io::{Buffer, Writer, Reader, Seek, BufferPrelude};"}, {"sha": "793e81e1ab5e957d4109cae8025dc1b75becc4de", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -269,7 +269,7 @@ pub fn get_host_addresses(host: Option<&str>, servname: Option<&str>,\n     // Collect all the results we found\n     let mut addrs = Vec::new();\n     let mut rp = res;\n-    while rp.is_not_null() {\n+    while !rp.is_null() {\n         unsafe {\n             let addr = try!(sockaddr_to_addr(mem::transmute((*rp).ai_addr),\n                                              (*rp).ai_addrlen as uint));"}, {"sha": "ddae9a132c31483a88b79286e6d3c1c747a872df", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52315a97c6b004f0692ac52ccdd1ff33f22cfee9/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=52315a97c6b004f0692ac52ccdd1ff33f22cfee9", "patch": "@@ -244,7 +244,7 @@ fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n     use iter::{Iterator, IteratorExt};\n     use os;\n     use path::GenericPath;\n-    use ptr::RawPtr;\n+    use ptr::PtrExt;\n     use ptr;\n     use slice::SliceExt;\n "}]}