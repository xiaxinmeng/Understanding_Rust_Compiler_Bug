{"sha": "c627c0d88ba8bf73793d9fb9bf1f1452c497f26a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MjdjMGQ4OGJhOGJmNzM3OTNkOWZiOWJmMWYxNDUyYzQ5N2YyNmE=", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-08-09T12:08:18Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-08-09T12:08:18Z"}, "message": "Fix nits.", "tree": {"sha": "6e34677fc59e56f2001618c50b4b53d6046a4d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e34677fc59e56f2001618c50b4b53d6046a4d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c627c0d88ba8bf73793d9fb9bf1f1452c497f26a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c627c0d88ba8bf73793d9fb9bf1f1452c497f26a", "html_url": "https://github.com/rust-lang/rust/commit/c627c0d88ba8bf73793d9fb9bf1f1452c497f26a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c627c0d88ba8bf73793d9fb9bf1f1452c497f26a/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89a369ad2e367a473385f1363896e03e1e390718", "url": "https://api.github.com/repos/rust-lang/rust/commits/89a369ad2e367a473385f1363896e03e1e390718", "html_url": "https://github.com/rust-lang/rust/commit/89a369ad2e367a473385f1363896e03e1e390718"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "46e824d879fec93d28d6f7e4439fc9018b2c183a", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c627c0d88ba8bf73793d9fb9bf1f1452c497f26a/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c627c0d88ba8bf73793d9fb9bf1f1452c497f26a/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=c627c0d88ba8bf73793d9fb9bf1f1452c497f26a", "patch": "@@ -101,8 +101,7 @@ fn struct_llfields<'a, 'tcx>(\n     let mut offset = Size::ZERO;\n     let mut prev_effective_align = layout.align.abi;\n     let mut result: Vec<_> = Vec::with_capacity(1 + field_count * 2);\n-    let mut projection = vec![0; field_count];\n-    let mut padding_used = false;\n+    let mut field_remapping = vec![0; field_count];\n     for i in layout.fields.index_by_increasing_offset() {\n         let target_offset = layout.fields.offset(i as usize);\n         let field = layout.field(cx, i);\n@@ -122,17 +121,17 @@ fn struct_llfields<'a, 'tcx>(\n         assert!(target_offset >= offset);\n         let padding = target_offset - offset;\n         if padding != Size::ZERO {\n-            padding_used = true;\n             let padding_align = prev_effective_align.min(effective_field_align);\n             assert_eq!(offset.align_to(padding_align) + padding, target_offset);\n             result.push(cx.type_padding_filler(padding, padding_align));\n             debug!(\"    padding before: {:?}\", padding);\n         }\n-        projection[i] = result.len() as u32;\n+        field_remapping[i] = result.len() as u32;\n         result.push(field.llvm_type(cx));\n         offset = target_offset + field.size;\n         prev_effective_align = effective_field_align;\n     }\n+    let padding_used = result.len() > field_count;\n     if !layout.is_unsized() && field_count > 0 {\n         if offset > layout.size {\n             bug!(\"layout: {:#?} stride: {:?} offset: {:?}\", layout, layout.size, offset);\n@@ -151,7 +150,7 @@ fn struct_llfields<'a, 'tcx>(\n         debug!(\"struct_llfields: offset: {:?} stride: {:?}\", offset, layout.size);\n     }\n \n-    (result, packed, padding_used.then_some(projection.into_boxed_slice()))\n+    (result, packed, padding_used.then_some(field_remapping.into_boxed_slice()))\n }\n \n impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n@@ -268,17 +267,20 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n         };\n         debug!(\"--> mapped {:#?} to llty={:?}\", self, llty);\n \n-        cx.type_lowering\n-            .borrow_mut()\n-            .insert((self.ty, variant_index), TypeLowering { lltype: llty, field_remapping: None });\n+        cx.type_lowering.borrow_mut().insert(\n+            (self.ty, variant_index),\n+            TypeLowering { lltype: llty, field_remapping: field_remapping },\n+        );\n \n         if let Some((llty, layout)) = defer {\n             let (llfields, packed, new_field_remapping) = struct_llfields(cx, layout);\n             cx.set_struct_body(llty, &llfields, packed);\n-            field_remapping = new_field_remapping;\n+            cx.type_lowering\n+                .borrow_mut()\n+                .get_mut(&(self.ty, variant_index))\n+                .unwrap()\n+                .field_remapping = new_field_remapping;\n         }\n-        cx.type_lowering.borrow_mut().get_mut(&(self.ty, variant_index)).unwrap().field_remapping =\n-            field_remapping;\n         llty\n     }\n \n@@ -378,7 +380,9 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n                 // `field_remapping` is `None` no padding was used and the llvm field index\n                 // matches the memory index.\n                 match cx.type_lowering.borrow().get(&(self.ty, variant_index)) {\n-                    Some(TypeLowering { field_remapping: Some(ref prj), .. }) => prj[index] as u64,\n+                    Some(TypeLowering { field_remapping: Some(ref remap), .. }) => {\n+                        remap[index] as u64\n+                    }\n                     Some(_) => self.fields.memory_index(index) as u64,\n                     None => {\n                         bug!(\"TyAndLayout::llvm_field_index({:?}): type info not found\", self)"}]}