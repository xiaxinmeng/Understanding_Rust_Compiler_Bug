{"sha": "07ea23e15dab673a3016d21b601234b296e59e57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZWEyM2UxNWRhYjY3M2EzMDE2ZDIxYjYwMTIzNGIyOTZlNTllNTc=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-02-14T06:57:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-14T15:48:00Z"}, "message": "Expand ItemDecorator extensions in all contexts\n\nNow that fold_item can return multiple items, this is pretty trivial. It\nalso recursively expands generated items so ItemDecorators can generate\nitems that are tagged with ItemDecorators!\n\nCloses #4913", "tree": {"sha": "20d962e6a3b84c9149b9ff9c026aaa2d13421f3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20d962e6a3b84c9149b9ff9c026aaa2d13421f3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ea23e15dab673a3016d21b601234b296e59e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ea23e15dab673a3016d21b601234b296e59e57", "html_url": "https://github.com/rust-lang/rust/commit/07ea23e15dab673a3016d21b601234b296e59e57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ea23e15dab673a3016d21b601234b296e59e57/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1fac653962d28425134a4f1ec89d1ebea647cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1fac653962d28425134a4f1ec89d1ebea647cf3", "html_url": "https://github.com/rust-lang/rust/commit/c1fac653962d28425134a4f1ec89d1ebea647cf3"}], "stats": {"total": 112, "additions": 59, "deletions": 53}, "files": [{"sha": "97766e1a14b487fae56da4fa7b40bad6c3a9a9a2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 33, "deletions": 52, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/07ea23e15dab673a3016d21b601234b296e59e57/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ea23e15dab673a3016d21b601234b296e59e57/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=07ea23e15dab673a3016d21b601234b296e59e57", "patch": "@@ -203,52 +203,6 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n     }\n }\n \n-// This is a secondary mechanism for invoking syntax extensions on items:\n-// \"decorator\" attributes, such as #[auto_encode]. These are invoked by an\n-// attribute prefixing an item, and are interpreted by feeding the item\n-// through the named attribute _as a syntax extension_ and splicing in the\n-// resulting item vec into place in favour of the decorator. Note that\n-// these do _not_ work for macro extensions, just ItemDecorator ones.\n-//\n-// NB: there is some redundancy between this and expand_item, below, and\n-// they might benefit from some amount of semantic and language-UI merger.\n-pub fn expand_mod_items(module_: &ast::Mod, fld: &mut MacroExpander) -> ast::Mod {\n-    // Fold the contents first:\n-    let module_ = noop_fold_mod(module_, fld);\n-\n-    // For each item, look through the attributes.  If any of them are\n-    // decorated with \"item decorators\", then use that function to transform\n-    // the item into a new set of items.\n-    let mut new_items = module_.items.clone();\n-    for item in module_.items.iter() {\n-        for attr in item.attrs.rev_iter() {\n-            let mname = attr.name();\n-\n-            match fld.extsbox.find(&intern(mname.get())) {\n-              Some(&ItemDecorator(dec_fn)) => {\n-                  fld.cx.bt_push(ExpnInfo {\n-                      call_site: attr.span,\n-                      callee: NameAndSpan {\n-                          name: mname.get().to_str(),\n-                          format: MacroAttribute,\n-                          span: None\n-                      }\n-                  });\n-                  dec_fn(fld.cx, attr.span, attr.node.value, *item,\n-                         |item| new_items.push(item));\n-                  fld.cx.bt_pop();\n-              },\n-              _ => {},\n-            }\n-        }\n-    }\n-\n-    ast::Mod {\n-        items: new_items,\n-        ..module_\n-    }\n-}\n-\n // eval $e with a new exts frame:\n macro_rules! with_exts_frame (\n     ($extsboxexpr:expr,$macros_escape:expr,$e:expr) =>\n@@ -263,7 +217,35 @@ macro_rules! with_exts_frame (\n // When we enter a module, record it, for the sake of `module!`\n pub fn expand_item(it: @ast::Item, fld: &mut MacroExpander)\n                    -> SmallVector<@ast::Item> {\n-    match it.node {\n+    let mut decorator_items = SmallVector::zero();\n+    for attr in it.attrs.rev_iter() {\n+        let mname = attr.name();\n+\n+        match fld.extsbox.find(&intern(mname.get())) {\n+            Some(&ItemDecorator(dec_fn)) => {\n+                fld.cx.bt_push(ExpnInfo {\n+                    call_site: attr.span,\n+                    callee: NameAndSpan {\n+                        name: mname.get().to_str(),\n+                        format: MacroAttribute,\n+                        span: None\n+                    }\n+                });\n+                // we'd ideally decorator_items.push_all(expand_item(item, fld)),\n+                // but that double-mut-borrows fld\n+                dec_fn(fld.cx, attr.span, attr.node.value, it,\n+                       |item| decorator_items.push(item));\n+                fld.cx.bt_pop();\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    let decorator_items = decorator_items.move_iter()\n+        .flat_map(|item| expand_item(item, fld).move_iter())\n+        .collect();\n+\n+    let mut new_items = match it.node {\n         ast::ItemMac(..) => expand_item_mac(it, fld),\n         ast::ItemMod(_) | ast::ItemForeignMod(_) => {\n             fld.cx.mod_push(it.ident);\n@@ -275,7 +257,10 @@ pub fn expand_item(it: @ast::Item, fld: &mut MacroExpander)\n             result\n         },\n         _ => noop_fold_item(it, fld)\n-    }\n+    };\n+\n+    new_items.push_all(decorator_items);\n+    new_items\n }\n \n // does this attribute list contain \"macro_escape\" ?\n@@ -778,10 +763,6 @@ impl<'a> Folder for MacroExpander<'a> {\n         expand_expr(expr, self)\n     }\n \n-    fn fold_mod(&mut self, module: &ast::Mod) -> ast::Mod {\n-        expand_mod_items(module, self)\n-    }\n-\n     fn fold_item(&mut self, item: @ast::Item) -> SmallVector<@ast::Item> {\n         expand_item(item, self)\n     }"}, {"sha": "32e5b83ee04b71f6897306b2963e638ba8a17104", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07ea23e15dab673a3016d21b601234b296e59e57/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ea23e15dab673a3016d21b601234b296e59e57/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=07ea23e15dab673a3016d21b601234b296e59e57", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -64,6 +64,12 @@ impl<T> SmallVector<T> {\n         }\n     }\n \n+    pub fn push_all(&mut self, other: SmallVector<T>) {\n+        for v in other.move_iter() {\n+            self.push(v);\n+        }\n+    }\n+\n     pub fn get<'a>(&'a self, idx: uint) -> &'a T {\n         match *self {\n             One(ref v) if idx == 0 => v,"}, {"sha": "7fb7d601b81b953d4d2090a0946da1ed42dc3e59", "filename": "src/test/run-pass/deriving-in-fn.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/07ea23e15dab673a3016d21b601234b296e59e57/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ea23e15dab673a3016d21b601234b296e59e57/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs?ref=07ea23e15dab673a3016d21b601234b296e59e57", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    #[deriving(ToStr)]\n+    struct Foo {\n+        foo: int,\n+    }\n+\n+    let f = Foo { foo: 10 };\n+    let _ = f.to_str();\n+}"}]}