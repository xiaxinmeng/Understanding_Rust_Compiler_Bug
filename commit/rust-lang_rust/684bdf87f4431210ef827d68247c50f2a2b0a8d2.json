{"sha": "684bdf87f4431210ef827d68247c50f2a2b0a8d2", "node_id": "C_kwDOAAsO6NoAKDY4NGJkZjg3ZjQ0MzEyMTBlZjgyN2Q2ODI0N2M1MGYyYTJiMGE4ZDI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-22T01:33:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-22T01:33:56Z"}, "message": "Rollup merge of #109949 - notriddle:notriddle/type-layout, r=jsha\n\nrustdoc: migrate `document_type_layout` to askama", "tree": {"sha": "ab895658609ba17aa6fee9b3c58704472e416086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab895658609ba17aa6fee9b3c58704472e416086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/684bdf87f4431210ef827d68247c50f2a2b0a8d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQzmECRBK7hj4Ov3rIwAAYkAIAF9P6TF9UzhXmA2cyH5BF7XY\nEDQQo6geE4olyJHJf8vJiq6VGFNUKx8td1mwE6UHLyZ+T4v4jeuyD8atWCNqWDhP\nDKYSxYbjeqK4KiXz95SpNEA0ZsVtqvfB728RQt73okFTQxudOAgzdIebfeXD0IRn\nVxe+oiKswc8H2Xk783bljZ8nkmJ8aFWFq4zcLR8mYStoa5fLaBtPAmyfXbk6aLiG\ncjgpVyxRO+eTmjPilALUTt916aeHWH7AowoK+3oXtwAT00aljca5sGDnI42EsARE\n+Gh01KnjWU/1Mc1OH6NeXz/w1HTSnPPKhfUiKtzu0q/fDnW02Wd+CJBWF3kVYS0=\n=qLM1\n-----END PGP SIGNATURE-----\n", "payload": "tree ab895658609ba17aa6fee9b3c58704472e416086\nparent 0fd50f3e019dddc47d1d6dbe35c4c1542098d9c5\nparent e6664c06813b25c2edd923a8a69d57ae98b6083f\nauthor Yuki Okushi <jtitor@2k36.org> 1682127236 +0900\ncommitter GitHub <noreply@github.com> 1682127236 +0900\n\nRollup merge of #109949 - notriddle:notriddle/type-layout, r=jsha\n\nrustdoc: migrate `document_type_layout` to askama\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/684bdf87f4431210ef827d68247c50f2a2b0a8d2", "html_url": "https://github.com/rust-lang/rust/commit/684bdf87f4431210ef827d68247c50f2a2b0a8d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/684bdf87f4431210ef827d68247c50f2a2b0a8d2/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fd50f3e019dddc47d1d6dbe35c4c1542098d9c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd50f3e019dddc47d1d6dbe35c4c1542098d9c5", "html_url": "https://github.com/rust-lang/rust/commit/0fd50f3e019dddc47d1d6dbe35c4c1542098d9c5"}, {"sha": "e6664c06813b25c2edd923a8a69d57ae98b6083f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6664c06813b25c2edd923a8a69d57ae98b6083f", "html_url": "https://github.com/rust-lang/rust/commit/e6664c06813b25c2edd923a8a69d57ae98b6083f"}], "stats": {"total": 270, "additions": 154, "deletions": 116}, "files": [{"sha": "a5f08fdac11c9ac9256b569761021f5c3174aea4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/684bdf87f4431210ef827d68247c50f2a2b0a8d2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684bdf87f4431210ef827d68247c50f2a2b0a8d2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=684bdf87f4431210ef827d68247c50f2a2b0a8d2", "patch": "@@ -32,6 +32,7 @@ mod context;\n mod print_item;\n mod sidebar;\n mod span_map;\n+mod type_layout;\n mod write_shared;\n \n pub(crate) use self::context::*;"}, {"sha": "3e71d41ec96f1f3606d5f91ce2347fd954f547cf", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 116, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/684bdf87f4431210ef827d68247c50f2a2b0a8d2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684bdf87f4431210ef827d68247c50f2a2b0a8d2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=684bdf87f4431210ef827d68247c50f2a2b0a8d2", "patch": "@@ -6,16 +6,14 @@ use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::stability;\n-use rustc_middle::span_bug;\n-use rustc_middle::ty::layout::LayoutError;\n-use rustc_middle::ty::{self, Adt, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_target::abi::{LayoutS, Primitive, TagEncoding, Variants};\n use std::cmp::Ordering;\n use std::fmt;\n use std::rc::Rc;\n \n+use super::type_layout::document_type_layout;\n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, get_filtered_impls_for_reference,\n     item_ty_to_section, notable_traits_button, notable_traits_json, render_all_impls,\n@@ -1933,118 +1931,6 @@ fn document_non_exhaustive<'a>(item: &'a clean::Item) -> impl fmt::Display + 'a\n     })\n }\n \n-fn document_type_layout<'a, 'cx: 'a>(\n-    cx: &'a Context<'cx>,\n-    ty_def_id: DefId,\n-) -> impl fmt::Display + 'a + Captures<'cx> {\n-    fn write_size_of_layout(mut w: impl fmt::Write, layout: &LayoutS, tag_size: u64) {\n-        if layout.abi.is_unsized() {\n-            write!(w, \"(unsized)\").unwrap();\n-        } else {\n-            let size = layout.size.bytes() - tag_size;\n-            write!(w, \"{size} byte{pl}\", pl = if size == 1 { \"\" } else { \"s\" }).unwrap();\n-            if layout.abi.is_uninhabited() {\n-                write!(\n-                    w,\n-                    \" (<a href=\\\"https://doc.rust-lang.org/stable/reference/glossary.html#uninhabited\\\">uninhabited</a>)\"\n-                ).unwrap();\n-            }\n-        }\n-    }\n-\n-    display_fn(move |mut f| {\n-        if !cx.shared.show_type_layout {\n-            return Ok(());\n-        }\n-\n-        writeln!(\n-            f,\n-            \"<h2 id=\\\"layout\\\" class=\\\"small-section-header\\\"> \\\n-            Layout<a href=\\\"#layout\\\" class=\\\"anchor\\\">\u00a7</a></h2>\"\n-        )?;\n-        writeln!(f, \"<div class=\\\"docblock\\\">\")?;\n-\n-        let tcx = cx.tcx();\n-        let param_env = tcx.param_env(ty_def_id);\n-        let ty = tcx.type_of(ty_def_id).subst_identity();\n-        match tcx.layout_of(param_env.and(ty)) {\n-            Ok(ty_layout) => {\n-                writeln!(\n-                    f,\n-                    \"<div class=\\\"warning\\\"><p><strong>Note:</strong> Most layout information is \\\n-                    <strong>completely unstable</strong> and may even differ between compilations. \\\n-                    The only exception is types with certain <code>repr(...)</code> attributes. \\\n-                    Please see the Rust Reference\u2019s \\\n-                    <a href=\\\"https://doc.rust-lang.org/reference/type-layout.html\\\">\u201cType Layout\u201d</a> \\\n-                    chapter for details on type layout guarantees.</p></div>\"\n-                )?;\n-                f.write_str(\"<p><strong>Size:</strong> \")?;\n-                write_size_of_layout(&mut f, &ty_layout.layout.0, 0);\n-                writeln!(f, \"</p>\")?;\n-                if let Variants::Multiple { variants, tag, tag_encoding, .. } =\n-                    &ty_layout.layout.variants()\n-                {\n-                    if !variants.is_empty() {\n-                        f.write_str(\n-                            \"<p><strong>Size for each variant:</strong></p>\\\n-                                <ul>\",\n-                        )?;\n-\n-                        let Adt(adt, _) = ty_layout.ty.kind() else {\n-                            span_bug!(tcx.def_span(ty_def_id), \"not an adt\")\n-                        };\n-\n-                        let tag_size = if let TagEncoding::Niche { .. } = tag_encoding {\n-                            0\n-                        } else if let Primitive::Int(i, _) = tag.primitive() {\n-                            i.size().bytes()\n-                        } else {\n-                            span_bug!(tcx.def_span(ty_def_id), \"tag is neither niche nor int\")\n-                        };\n-\n-                        for (index, layout) in variants.iter_enumerated() {\n-                            let name = adt.variant(index).name;\n-                            write!(&mut f, \"<li><code>{name}</code>: \")?;\n-                            write_size_of_layout(&mut f, layout, tag_size);\n-                            writeln!(&mut f, \"</li>\")?;\n-                        }\n-                        f.write_str(\"</ul>\")?;\n-                    }\n-                }\n-            }\n-            // This kind of layout error can occur with valid code, e.g. if you try to\n-            // get the layout of a generic type such as `Vec<T>`.\n-            Err(LayoutError::Unknown(_)) => {\n-                writeln!(\n-                    f,\n-                    \"<p><strong>Note:</strong> Unable to compute type layout, \\\n-                    possibly due to this type having generic parameters. \\\n-                    Layout can only be computed for concrete, fully-instantiated types.</p>\"\n-                )?;\n-            }\n-            // This kind of error probably can't happen with valid code, but we don't\n-            // want to panic and prevent the docs from building, so we just let the\n-            // user know that we couldn't compute the layout.\n-            Err(LayoutError::SizeOverflow(_)) => {\n-                writeln!(\n-                    f,\n-                    \"<p><strong>Note:</strong> Encountered an error during type layout; \\\n-                    the type was too big.</p>\"\n-                )?;\n-            }\n-            Err(LayoutError::NormalizationFailure(_, _)) => {\n-                writeln!(\n-                    f,\n-                    \"<p><strong>Note:</strong> Encountered an error during type layout; \\\n-                    the type failed to be normalized.</p>\"\n-                )?;\n-            }\n-        }\n-\n-        writeln!(f, \"</div>\")\n-    })\n-}\n-\n fn pluralize(count: usize) -> &'static str {\n     if count > 1 { \"s\" } else { \"\" }\n }"}, {"sha": "22aec623335e80bcfa0111d0ff0bed881c7f7e05", "filename": "src/librustdoc/html/render/type_layout.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/684bdf87f4431210ef827d68247c50f2a2b0a8d2/src%2Flibrustdoc%2Fhtml%2Frender%2Ftype_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684bdf87f4431210ef827d68247c50f2a2b0a8d2/src%2Flibrustdoc%2Fhtml%2Frender%2Ftype_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Ftype_layout.rs?ref=684bdf87f4431210ef827d68247c50f2a2b0a8d2", "patch": "@@ -0,0 +1,86 @@\n+use askama::Template;\n+\n+use rustc_data_structures::captures::Captures;\n+use rustc_hir::def_id::DefId;\n+use rustc_middle::span_bug;\n+use rustc_middle::ty::layout::LayoutError;\n+use rustc_middle::ty::Adt;\n+use rustc_span::symbol::Symbol;\n+use rustc_target::abi::{Primitive, TagEncoding, Variants};\n+\n+use std::fmt;\n+\n+use crate::html::format::display_fn;\n+use crate::html::render::Context;\n+\n+#[derive(Template)]\n+#[template(path = \"type_layout.html\")]\n+struct TypeLayout<'cx> {\n+    variants: Vec<(Symbol, TypeLayoutSize)>,\n+    type_layout_size: Result<TypeLayoutSize, LayoutError<'cx>>,\n+}\n+\n+#[derive(Template)]\n+#[template(path = \"type_layout_size.html\")]\n+struct TypeLayoutSize {\n+    is_unsized: bool,\n+    is_uninhabited: bool,\n+    size: u64,\n+}\n+\n+pub(crate) fn document_type_layout<'a, 'cx: 'a>(\n+    cx: &'a Context<'cx>,\n+    ty_def_id: DefId,\n+) -> impl fmt::Display + 'a + Captures<'cx> {\n+    display_fn(move |f| {\n+        if !cx.shared.show_type_layout {\n+            return Ok(());\n+        }\n+\n+        let tcx = cx.tcx();\n+        let param_env = tcx.param_env(ty_def_id);\n+        let ty = tcx.type_of(ty_def_id).subst_identity();\n+        let type_layout = tcx.layout_of(param_env.and(ty));\n+\n+        let variants =\n+            if let Ok(type_layout) = type_layout &&\n+                let Variants::Multiple { variants, tag, tag_encoding, .. } =\n+                    type_layout.layout.variants() &&\n+                !variants.is_empty()\n+            {\n+                let tag_size =\n+                    if let TagEncoding::Niche { .. } = tag_encoding {\n+                        0\n+                    } else if let Primitive::Int(i, _) = tag.primitive() {\n+                        i.size().bytes()\n+                    } else {\n+                        span_bug!(cx.tcx().def_span(ty_def_id), \"tag is neither niche nor int\")\n+                    };\n+                variants\n+                    .iter_enumerated()\n+                    .map(|(variant_idx, variant_layout)| {\n+                        let Adt(adt, _) = type_layout.ty.kind() else {\n+                            span_bug!(cx.tcx().def_span(ty_def_id), \"not an adt\")\n+                        };\n+                        let name = adt.variant(variant_idx).name;\n+                        let is_unsized = variant_layout.abi.is_unsized();\n+                        let is_uninhabited = variant_layout.abi.is_uninhabited();\n+                        let size = variant_layout.size.bytes() - tag_size;\n+                        let type_layout_size = TypeLayoutSize { is_unsized, is_uninhabited, size };\n+                        (name, type_layout_size)\n+                    })\n+                    .collect()\n+            } else {\n+                Vec::new()\n+            };\n+\n+        let type_layout_size = tcx.layout_of(param_env.and(ty)).map(|layout| {\n+            let is_unsized = layout.abi.is_unsized();\n+            let is_uninhabited = layout.abi.is_uninhabited();\n+            let size = layout.size.bytes();\n+            TypeLayoutSize { is_unsized, is_uninhabited, size }\n+        });\n+\n+        Ok(TypeLayout { variants, type_layout_size }.render_into(f).unwrap())\n+    })\n+}"}, {"sha": "58b220c7428f451241b493040a0991f37bc3ba60", "filename": "src/librustdoc/html/templates/type_layout.html", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/684bdf87f4431210ef827d68247c50f2a2b0a8d2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "raw_url": "https://github.com/rust-lang/rust/raw/684bdf87f4431210ef827d68247c50f2a2b0a8d2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html?ref=684bdf87f4431210ef827d68247c50f2a2b0a8d2", "patch": "@@ -0,0 +1,53 @@\n+<h2 id=\"layout\" class=\"small-section-header\">  {# #}\n+    Layout<a href=\"#layout\" class=\"anchor\">\u00a7</a> {# #}\n+</h2> {# #}\n+<div class=\"docblock\"> {# #}\n+    {% match type_layout_size %}\n+        {% when Ok(type_layout_size) %}\n+            <div class=\"warning\"> {# #}\n+                <p> {# #}\n+                    <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n+                    unstable</strong> and may even differ between compilations. {#+ #}\n+                    The only exception is types with certain <code>repr(...)</code> {#+ #}\n+                    attributes. Please see the Rust Reference\u2019s {#+ #}\n+                    <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">\u201cType Layout\u201d</a> {#+ #}\n+                    chapter for details on type layout guarantees. {# #}\n+                </p> {# #}\n+            </div> {# #}\n+            <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n+            {% if !variants.is_empty() %}\n+                <p> {# #}\n+                    <strong>Size for each variant:</strong> {# #}\n+                </p> {# #}\n+                <ul> {# #}\n+                    {% for (name, layout_size) in variants %}\n+                        <li> {# #}\n+                            <code>{{ name }}</code>: {#+ #}\n+                            {{ layout_size|safe }}\n+                        </li> {# #}\n+                    {% endfor %}\n+                </ul> {# #}\n+            {% endif %}\n+        {# This kind of layout error can occur with valid code, e.g. if you try to\n+           get the layout of a generic type such as `Vec<T>`. #}\n+        {% when Err(LayoutError::Unknown(_)) %}\n+            <p> {# #}\n+                <strong>Note:</strong> Unable to compute type layout, {#+ #}\n+                possibly due to this type having generic parameters. {#+ #}\n+                Layout can only be computed for concrete, fully-instantiated types. {# #}\n+            </p> {# #}\n+        {# This kind of error probably can't happen with valid code, but we don't\n+           want to panic and prevent the docs from building, so we just let the\n+           user know that we couldn't compute the layout. #}\n+        {% when Err(LayoutError::SizeOverflow(_)) %}\n+            <p> {# #}\n+                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+                the type was too big. {# #}\n+            </p> {# #}\n+        {% when Err(LayoutError::NormalizationFailure(_, _)) %}\n+            <p> {# #}\n+                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+                the type failed to be normalized. {# #}\n+            </p> {# #}\n+    {% endmatch %}\n+</div> {# #}"}, {"sha": "9c2b39edc9f37fcc46ed6070c2403beff6880388", "filename": "src/librustdoc/html/templates/type_layout_size.html", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/684bdf87f4431210ef827d68247c50f2a2b0a8d2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout_size.html", "raw_url": "https://github.com/rust-lang/rust/raw/684bdf87f4431210ef827d68247c50f2a2b0a8d2/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout_size.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout_size.html?ref=684bdf87f4431210ef827d68247c50f2a2b0a8d2", "patch": "@@ -0,0 +1,12 @@\n+{% if is_unsized %}\n+  (unsized)\n+{% else %}\n+  {% if size == 1 %}\n+    1 byte\n+  {% else %}\n+    {{ size +}} bytes\n+  {% endif %}\n+  {% if is_uninhabited %}\n+    {# +#} (<a href=\"https://doc.rust-lang.org/stable/reference/glossary.html#uninhabited\">uninhabited</a>)\n+  {% endif %}\n+{% endif %}"}]}