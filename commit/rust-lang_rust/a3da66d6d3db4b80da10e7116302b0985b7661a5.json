{"sha": "a3da66d6d3db4b80da10e7116302b0985b7661a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZGE2NmQ2ZDNkYjRiODBkYTEwZTcxMTYzMDJiMDk4NWI3NjYxYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-15T10:47:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-15T10:47:20Z"}, "message": "Auto merge of #4348 - phansch:deprecate-unused-unused-collect, r=flip1995\n\nDeprecate unused_collect lint\n\nI found this because we only had two test cases in total for this lint.\nIt turns out the functionality is fully covered by rustc these days.\n\n[Playground Examples](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=eb8ee6db389c77180c9fb152d3c608f4)\n\nchangelog: Deprecate `unused_collect` lint. This is fully covered by rustc's `#[must_use]` on `collect`\n\ncc #2846", "tree": {"sha": "c8fe7394b9327c5548bfc9d92080ce217dd937df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8fe7394b9327c5548bfc9d92080ce217dd937df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3da66d6d3db4b80da10e7116302b0985b7661a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3da66d6d3db4b80da10e7116302b0985b7661a5", "html_url": "https://github.com/rust-lang/rust/commit/a3da66d6d3db4b80da10e7116302b0985b7661a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3da66d6d3db4b80da10e7116302b0985b7661a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33ec66a96f83c67fb7a0de412d88ec39553599e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ec66a96f83c67fb7a0de412d88ec39553599e5", "html_url": "https://github.com/rust-lang/rust/commit/33ec66a96f83c67fb7a0de412d88ec39553599e5"}, {"sha": "42f03539caf6320a9618916e5328bb13aa442f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f03539caf6320a9618916e5328bb13aa442f30", "html_url": "https://github.com/rust-lang/rust/commit/42f03539caf6320a9618916e5328bb13aa442f30"}], "stats": {"total": 143, "additions": 45, "deletions": 98}, "files": [{"sha": "8bcfd8a8430ca2a24e7d4bb2eb4456fdd0c0359b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 310 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 309 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "97ae9c78088853ad5a947ebfccc62539788b15d6", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -122,3 +122,11 @@ declare_deprecated_lint! {\n     pub INVALID_REF,\n     \"superseded by rustc lint `invalid_value`\"\n }\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This lint has been superseded by #[must_use] in rustc.\n+declare_deprecated_lint! {\n+    pub UNUSED_COLLECT,\n+    \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\"\n+}"}, {"sha": "c8dbf77704c92e23cf304786a32cc1094ba2a9ee", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -435,6 +435,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         \"clippy::invalid_ref\",\n         \"superseded by rustc lint `invalid_value`\",\n     );\n+    store.register_removed(\n+        \"clippy::unused_collect\",\n+        \"`collect` has been marked as #[must_use] in rustc and that covers all cases of this lint\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     reg.register_late_lint_pass(box serde_api::SerdeAPI);\n@@ -761,7 +765,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,\n-        loops::UNUSED_COLLECT,\n         loops::WHILE_IMMUTABLE_CONDITION,\n         loops::WHILE_LET_LOOP,\n         loops::WHILE_LET_ON_ITERATOR,\n@@ -1142,7 +1145,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         large_enum_variant::LARGE_ENUM_VARIANT,\n         loops::MANUAL_MEMCPY,\n         loops::NEEDLESS_COLLECT,\n-        loops::UNUSED_COLLECT,\n         methods::EXPECT_FUN_CALL,\n         methods::ITER_NTH,\n         methods::OR_FUN_CALL,"}, {"sha": "7b36fa7e284bdbeb715ff719e200d0758a41b908", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -242,24 +242,6 @@ declare_clippy_lint! {\n     \"`loop { if let { ... } else break }`, which can be written as a `while let` loop\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for using `collect()` on an iterator without using\n-    /// the result.\n-    ///\n-    /// **Why is this bad?** It is more idiomatic to use a `for` loop over the\n-    /// iterator instead.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```ignore\n-    /// vec.iter().map(|x| /* some operation returning () */).collect::<Vec<_>>();\n-    /// ```\n-    pub UNUSED_COLLECT,\n-    perf,\n-    \"`collect()`ing an iterator without using the result; this is usually better written as a for loop\"\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for functions collecting an iterator when collect\n     /// is not needed.\n@@ -467,7 +449,6 @@ declare_lint_pass!(Loops => [\n     FOR_LOOP_OVER_RESULT,\n     FOR_LOOP_OVER_OPTION,\n     WHILE_LET_LOOP,\n-    UNUSED_COLLECT,\n     NEEDLESS_COLLECT,\n     REVERSE_RANGE_LOOP,\n     EXPLICIT_COUNTER_LOOP,\n@@ -602,25 +583,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n \n         check_needless_collect(expr, cx);\n     }\n-\n-    fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n-        if let StmtKind::Semi(ref expr) = stmt.node {\n-            if let ExprKind::MethodCall(ref method, _, ref args) = expr.node {\n-                if args.len() == 1\n-                    && method.ident.name == sym!(collect)\n-                    && match_trait_method(cx, expr, &paths::ITERATOR)\n-                {\n-                    span_lint(\n-                        cx,\n-                        UNUSED_COLLECT,\n-                        expr.span,\n-                        \"you are collect()ing an iterator and throwing away the result. \\\n-                         Consider using an explicit for loop to exhaust the iterator\",\n-                    );\n-                }\n-            }\n-        }\n-    }\n }\n \n enum NeverLoopResult {"}, {"sha": "c02cdcdbd45a7d7640681e75967a0106af1a8801", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 310] = [\n+pub const ALL_LINTS: [Lint; 309] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1967,13 +1967,6 @@ pub const ALL_LINTS: [Lint; 310] = [\n         deprecation: None,\n         module: \"misc_early\",\n     },\n-    Lint {\n-        name: \"unused_collect\",\n-        group: \"perf\",\n-        desc: \"`collect()`ing an iterator without using the result; this is usually better written as a for loop\",\n-        deprecation: None,\n-        module: \"loops\",\n-    },\n     Lint {\n         name: \"unused_io_amount\",\n         group: \"correctness\","}, {"sha": "00ed4c5e51d710bbdf2a25788a0eb32c4d4c161e", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -30,6 +30,12 @@ error: lint `clippy::misaligned_transmute` has been removed: `this lint has been\n LL | #[warn(clippy::misaligned_transmute)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::unused_collect` has been removed: ``collect` has been marked as #[must_use] in rustc and that covers all cases of this lint`\n+  --> $DIR/deprecated.rs:6:8\n+   |\n+LL | #[warn(clippy::unused_collect)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::invalid_ref` has been removed: `superseded by rustc lint `invalid_value``\n   --> $DIR/deprecated.rs:7:8\n    |\n@@ -42,5 +48,5 @@ error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is\n LL | #[warn(clippy::str_to_string)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "2e5c5b7ead12c1e2fd81b2816473939feb5b508f", "filename": "tests/ui/deprecated_old.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Fdeprecated_old.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Fdeprecated_old.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated_old.rs?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -3,6 +3,5 @@\n #[warn(unstable_as_slice)]\n #[warn(unstable_as_mut_slice)]\n #[warn(misaligned_transmute)]\n-#[warn(unused_collect)]\n \n fn main() {}"}, {"sha": "ff3e9e8fcf36763e57e282ad0f8149ce67eadb3c", "filename": "tests/ui/deprecated_old.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Fdeprecated_old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Fdeprecated_old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated_old.stderr?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -30,17 +30,11 @@ error: lint `misaligned_transmute` has been removed: `this lint has been split i\n LL | #[warn(misaligned_transmute)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: lint name `unused_collect` is deprecated and may not have an effect in the future. Also `cfg_attr(cargo-clippy)` won't be necessary anymore\n-  --> $DIR/deprecated_old.rs:6:8\n-   |\n-LL | #[warn(unused_collect)]\n-   |        ^^^^^^^^^^^^^^ help: change it to: `clippy::unused_collect`\n-\n error: lint `str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n   --> $DIR/deprecated_old.rs:1:8\n    |\n LL | #[warn(str_to_string)]\n    |        ^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "14f21f1b703d41cb04f2ed9f3ec316fda6368de3", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -24,7 +24,6 @@ impl Unrelated {\n     clippy::reverse_range_loop,\n     clippy::for_kv_map\n )]\n-#[warn(clippy::unused_collect)]\n #[allow(\n     clippy::linkedlist,\n     clippy::shadow_unrelated,"}, {"sha": "257a05c02e0ec327f3454cad068724237ad02e50", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -1,5 +1,5 @@\n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:40:14\n+  --> $DIR/for_loop.rs:39:14\n    |\n LL |     for i in 10..0 {\n    |              ^^^^^\n@@ -11,7 +11,7 @@ LL |     for i in (0..10).rev() {\n    |              ^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:44:14\n+  --> $DIR/for_loop.rs:43:14\n    |\n LL |     for i in 10..=0 {\n    |              ^^^^^^\n@@ -21,7 +21,7 @@ LL |     for i in (0...10).rev() {\n    |              ^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:48:14\n+  --> $DIR/for_loop.rs:47:14\n    |\n LL |     for i in MAX_LEN..0 {\n    |              ^^^^^^^^^^\n@@ -31,13 +31,13 @@ LL |     for i in (0..MAX_LEN).rev() {\n    |              ^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:52:14\n+  --> $DIR/for_loop.rs:51:14\n    |\n LL |     for i in 5..5 {\n    |              ^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:77:14\n+  --> $DIR/for_loop.rs:76:14\n    |\n LL |     for i in 10..5 + 4 {\n    |              ^^^^^^^^^\n@@ -47,7 +47,7 @@ LL |     for i in (5 + 4..10).rev() {\n    |              ^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:81:14\n+  --> $DIR/for_loop.rs:80:14\n    |\n LL |     for i in (5 + 2)..(3 - 1) {\n    |              ^^^^^^^^^^^^^^^^\n@@ -57,108 +57,100 @@ LL |     for i in ((3 - 1)..(5 + 2)).rev() {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this range is empty so this for loop will never run\n-  --> $DIR/for_loop.rs:85:14\n+  --> $DIR/for_loop.rs:84:14\n    |\n LL |     for i in (5 + 2)..(8 - 1) {\n    |              ^^^^^^^^^^^^^^^^\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:107:15\n+  --> $DIR/for_loop.rs:106:15\n    |\n LL |     for _v in vec.iter() {}\n    |               ^^^^^^^^^^ help: to write this more concisely, try: `&vec`\n    |\n    = note: `-D clippy::explicit-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:109:15\n+  --> $DIR/for_loop.rs:108:15\n    |\n LL |     for _v in vec.iter_mut() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n error: it is more concise to loop over containers instead of using explicit iteration methods`\n-  --> $DIR/for_loop.rs:112:15\n+  --> $DIR/for_loop.rs:111:15\n    |\n LL |     for _v in out_vec.into_iter() {}\n    |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `out_vec`\n    |\n    = note: `-D clippy::explicit-into-iter-loop` implied by `-D warnings`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:115:15\n+  --> $DIR/for_loop.rs:114:15\n    |\n LL |     for _v in array.into_iter() {}\n    |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&array`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:120:15\n+  --> $DIR/for_loop.rs:119:15\n    |\n LL |     for _v in [1, 2, 3].iter() {}\n    |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[1, 2, 3]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:124:15\n+  --> $DIR/for_loop.rs:123:15\n    |\n LL |     for _v in [0; 32].iter() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&[0; 32]`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:129:15\n+  --> $DIR/for_loop.rs:128:15\n    |\n LL |     for _v in ll.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&ll`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:132:15\n+  --> $DIR/for_loop.rs:131:15\n    |\n LL |     for _v in vd.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&vd`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:135:15\n+  --> $DIR/for_loop.rs:134:15\n    |\n LL |     for _v in bh.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bh`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:138:15\n+  --> $DIR/for_loop.rs:137:15\n    |\n LL |     for _v in hm.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hm`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:141:15\n+  --> $DIR/for_loop.rs:140:15\n    |\n LL |     for _v in bt.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bt`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:144:15\n+  --> $DIR/for_loop.rs:143:15\n    |\n LL |     for _v in hs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&hs`\n \n error: it is more concise to loop over references to containers instead of using explicit iteration methods\n-  --> $DIR/for_loop.rs:147:15\n+  --> $DIR/for_loop.rs:146:15\n    |\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop.rs:149:15\n+  --> $DIR/for_loop.rs:148:15\n    |\n LL |     for _v in vec.iter().next() {}\n    |               ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-next-loop` implied by `-D warnings`\n \n-error: you are collect()ing an iterator and throwing away the result. Consider using an explicit for loop to exhaust the iterator\n-  --> $DIR/for_loop.rs:156:5\n-   |\n-LL |     vec.iter().cloned().map(|x| out.push(x)).collect::<Vec<_>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::unused-collect` implied by `-D warnings`\n-\n-error: aborting due to 22 previous errors\n+error: aborting due to 21 previous errors\n "}, {"sha": "61b40b3b340013d533ef41849541933183cdd2ae", "filename": "tests/ui/infinite_iter.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3da66d6d3db4b80da10e7116302b0985b7661a5/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=a3da66d6d3db4b80da10e7116302b0985b7661a5", "patch": "@@ -1,11 +1,3 @@\n-error: you are collect()ing an iterator and throwing away the result. Consider using an explicit for loop to exhaust the iterator\n-  --> $DIR/infinite_iter.rs:10:5\n-   |\n-LL |     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::unused-collect` implied by `-D warnings`\n-\n error: infinite iteration detected\n   --> $DIR/infinite_iter.rs:10:5\n    |\n@@ -113,5 +105,5 @@ LL |         let _: HashSet<i32> = (0..).collect(); // Infinite iter\n    |\n    = note: `#[deny(clippy::infinite_iter)]` on by default\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 14 previous errors\n "}]}