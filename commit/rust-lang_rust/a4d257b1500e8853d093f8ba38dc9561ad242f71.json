{"sha": "a4d257b1500e8853d093f8ba38dc9561ad242f71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZDI1N2IxNTAwZTg4NTNkMDkzZjhiYTM4ZGM5NTYxYWQyNDJmNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-03T23:21:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-03T23:21:05Z"}, "message": "auto merge of #16954 : nick29581/rust/dst-bug-deref, r=nikomatsakis\n\nCloses #16930 \r\n\r\nr?", "tree": {"sha": "0a6b952206a23d5103a74e6b3e0368a9d087c487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a6b952206a23d5103a74e6b3e0368a9d087c487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4d257b1500e8853d093f8ba38dc9561ad242f71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d257b1500e8853d093f8ba38dc9561ad242f71", "html_url": "https://github.com/rust-lang/rust/commit/a4d257b1500e8853d093f8ba38dc9561ad242f71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4d257b1500e8853d093f8ba38dc9561ad242f71/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b5d92c92336be12d0390cf8e93b76514c20d810", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5d92c92336be12d0390cf8e93b76514c20d810", "html_url": "https://github.com/rust-lang/rust/commit/3b5d92c92336be12d0390cf8e93b76514c20d810"}, {"sha": "ab3999f6151347169c1871627f27bf2d10ad4b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3999f6151347169c1871627f27bf2d10ad4b3f", "html_url": "https://github.com/rust-lang/rust/commit/ab3999f6151347169c1871627f27bf2d10ad4b3f"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "4513eb4f520f6b0f5d1874c0cb85bcbd24e4db5a", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4d257b1500e8853d093f8ba38dc9561ad242f71/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d257b1500e8853d093f8ba38dc9561ad242f71/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=a4d257b1500e8853d093f8ba38dc9561ad242f71", "patch": "@@ -816,7 +816,7 @@ pub fn trans_call_inner<'a>(\n \n     // The code below invokes the function, using either the Rust\n     // conventions (if it is a rust fn) or the native conventions\n-    // (otherwise).  The important part is that, when all is sad\n+    // (otherwise).  The important part is that, when all is said\n     // and done, either the return value of the function will have been\n     // written in opt_llretslot (if it is Some) or `llresult` will be\n     // set appropriately (otherwise)."}, {"sha": "53e2da6ac0f3d9d08e0e57bb7ab9c65481356e31", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4d257b1500e8853d093f8ba38dc9561ad242f71/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d257b1500e8853d093f8ba38dc9561ad242f71/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=a4d257b1500e8853d093f8ba38dc9561ad242f71", "patch": "@@ -2064,10 +2064,13 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n                 typeck::AutoDeref(_) => unpack_datum!(bcx, auto_ref(bcx, datum, expr)),\n                 _ => datum\n             };\n-            let val = unpack_result!(bcx, trans_overloaded_op(bcx, expr, method_call,\n-                                                              datum, None, None));\n+\n             let ref_ty = ty::ty_fn_ret(monomorphize_type(bcx, method_ty));\n-            Datum::new(val, ref_ty, RvalueExpr(Rvalue::new(ByValue)))\n+            let scratch = rvalue_scratch_datum(bcx, ref_ty, \"overloaded_deref\");\n+\n+            unpack_result!(bcx, trans_overloaded_op(bcx, expr, method_call,\n+                                                    datum, None, Some(SaveIn(scratch.val))));\n+            scratch.to_expr_datum()\n         }\n         None => {\n             // Not overloaded. We already have a pointer we know how to deref."}, {"sha": "d59c24e07b8f75778ddd527673c318fbc8b9f470", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a4d257b1500e8853d093f8ba38dc9561ad242f71/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d257b1500e8853d093f8ba38dc9561ad242f71/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=a4d257b1500e8853d093f8ba38dc9561ad242f71", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a custom deref with a fat pointer return type does not ICE\n+\n+pub struct Arr {\n+    ptr: Box<[uint]>\n+}\n+\n+impl Deref<[uint]> for Arr {\n+    fn deref(&self) -> &[uint] {\n+        fail!();\n+    }\n+}\n+\n+impl DerefMut<[uint]> for Arr {\n+    fn deref_mut(&mut self) -> &mut [uint] {\n+        &mut *self.ptr\n+    }\n+}\n+\n+pub fn foo(arr: &mut Arr) {\n+    assert!(arr.len() == 3);\n+    let x: &mut [uint] = &mut **arr;\n+    assert!(x[0] == 1);\n+    assert!(x[1] == 2);\n+    assert!(x[2] == 3);\n+}\n+\n+fn main() {\n+    let mut a = Arr { ptr: box [1, 2, 3] };\n+    foo(&mut a);\n+}"}, {"sha": "43b7d116d30387803e98e21f598afc5221532c33", "filename": "src/test/run-pass/dst-deref.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a4d257b1500e8853d093f8ba38dc9561ad242f71/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d257b1500e8853d093f8ba38dc9561ad242f71/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=a4d257b1500e8853d093f8ba38dc9561ad242f71", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that a custom deref with a fat pointer return type does not ICE\n+\n+pub struct Arr {\n+    ptr: Box<[uint]>\n+}\n+\n+impl Deref<[uint]> for Arr {\n+    fn deref(&self) -> &[uint] {\n+        &*self.ptr\n+    }\n+}\n+\n+pub fn foo(arr: &Arr) {\n+    assert!(arr.len() == 3);\n+    let x: &[uint] = &**arr;\n+    assert!(x[0] == 1);\n+    assert!(x[1] == 2);\n+    assert!(x[2] == 3);\n+}\n+\n+fn main() {\n+    let a = Arr { ptr: box [1, 2, 3] };\n+    foo(&a);\n+}"}]}