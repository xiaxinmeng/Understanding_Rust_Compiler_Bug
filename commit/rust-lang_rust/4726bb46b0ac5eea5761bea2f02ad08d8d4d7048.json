{"sha": "4726bb46b0ac5eea5761bea2f02ad08d8d4d7048", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MjZiYjQ2YjBhYzVlZWE1NzYxYmVhMmYwMmFkMDhkOGQ0ZDcwNDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-07-24T14:23:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-07-24T16:24:37Z"}, "message": "Correct regression in type-inference caused by failing to reconfirm that\nthe object trait matches the required trait during trait selection.  The\nexisting code was checking that the object trait WOULD match (in a\nprobe), but never executing the match outside of a probe.\n\nThis corrects various regressions observed in the wild, including\nissue #26952. Fixes #26952.", "tree": {"sha": "8ebf57ecb4e1b76faa7562512d62e3541bb52ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ebf57ecb4e1b76faa7562512d62e3541bb52ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048", "html_url": "https://github.com/rust-lang/rust/commit/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e5b165e1801c2ddb5d3cc49ff96b9f264a4545c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e5b165e1801c2ddb5d3cc49ff96b9f264a4545c", "html_url": "https://github.com/rust-lang/rust/commit/2e5b165e1801c2ddb5d3cc49ff96b9f264a4545c"}], "stats": {"total": 111, "additions": 80, "deletions": 31}, "files": [{"sha": "8190327794ba94e4bbe346813cb8d98ed4a62708", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=4726bb46b0ac5eea5761bea2f02ad08d8d4d7048", "patch": "@@ -698,8 +698,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn rollback_to(&self, snapshot: CombinedSnapshot) {\n-        debug!(\"rollback!\");\n+    fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot) {\n+        debug!(\"rollback_to(cause={})\", cause);\n         let CombinedSnapshot { type_snapshot,\n                                int_snapshot,\n                                float_snapshot,\n@@ -759,7 +759,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(\"commit_if_ok() -- r.is_ok() = {}\", r.is_ok());\n         match r {\n             Ok(_) => { self.commit_from(snapshot); }\n-            Err(_) => { self.rollback_to(snapshot); }\n+            Err(_) => { self.rollback_to(\"commit_if_ok -- error\", snapshot); }\n         }\n         r\n     }\n@@ -778,6 +778,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let r = self.commit_if_ok(|_| f());\n \n+        debug!(\"commit_regions_if_ok: rolling back everything but regions\");\n+\n         // Roll back any non-region bindings - they should be resolved\n         // inside `f`, with, e.g. `resolve_type_vars_if_possible`.\n         self.type_variables\n@@ -804,7 +806,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(\"probe()\");\n         let snapshot = self.start_snapshot();\n         let r = f(&snapshot);\n-        self.rollback_to(snapshot);\n+        self.rollback_to(\"probe\", snapshot);\n         r\n     }\n "}, {"sha": "79f030ab31e1808ef38f33af7aef803ebcfa2a0e", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=4726bb46b0ac5eea5761bea2f02ad08d8d4d7048", "patch": "@@ -1367,11 +1367,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // correct trait, but also the correct type parameters.\n             // For example, we may be trying to upcast `Foo` to `Bar<i32>`,\n             // but `Foo` is declared as `trait Foo : Bar<u32>`.\n-            let upcast_trait_refs = util::supertraits(self.tcx(), poly_trait_ref)\n-                .filter(|upcast_trait_ref| self.infcx.probe(|_| {\n-                    let upcast_trait_ref = upcast_trait_ref.clone();\n-                    self.match_poly_trait_ref(obligation, upcast_trait_ref).is_ok()\n-                })).count();\n+            let upcast_trait_refs =\n+                util::supertraits(self.tcx(), poly_trait_ref)\n+                .filter(|upcast_trait_ref| {\n+                    self.infcx.probe(|_| {\n+                        let upcast_trait_ref = upcast_trait_ref.clone();\n+                        self.match_poly_trait_ref(obligation, upcast_trait_ref).is_ok()\n+                    })\n+                })\n+                .count();\n \n             if upcast_trait_refs > 1 {\n                 // can be upcast in many ways; need more type information\n@@ -1643,9 +1647,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             let principal =\n                                 data.principal_trait_ref_with_self_ty(self.tcx(),\n                                                                       self.tcx().types.err);\n-                            let desired_def_id = obligation.predicate.def_id();\n+                            let copy_def_id = obligation.predicate.def_id();\n                             for tr in util::supertraits(self.tcx(), principal) {\n-                                if tr.def_id() == desired_def_id {\n+                                if tr.def_id() == copy_def_id {\n                                     return ok_if(Vec::new())\n                                 }\n                             }\n@@ -2310,31 +2314,41 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         };\n \n-        // Upcast the object type to the obligation type. There must\n-        // be exactly one applicable trait-reference; if this were not\n-        // the case, we would have reported an ambiguity error rather\n-        // than successfully selecting one of the candidates.\n-        let mut upcast_trait_refs = util::supertraits(self.tcx(), poly_trait_ref)\n-            .map(|upcast_trait_ref| {\n-                (upcast_trait_ref.clone(), self.infcx.probe(|_| {\n-                    self.match_poly_trait_ref(obligation, upcast_trait_ref)\n-                }).is_ok())\n-            });\n         let mut upcast_trait_ref = None;\n-        let mut vtable_base = 0;\n+        let vtable_base;\n+\n+        {\n+            // We want to find the first supertrait in the list of\n+            // supertraits that we can unify with, and do that\n+            // unification. We know that there is exactly one in the list\n+            // where we can unify because otherwise select would have\n+            // reported an ambiguity. (When we do find a match, also\n+            // record it for later.)\n+            let nonmatching =\n+                util::supertraits(self.tcx(), poly_trait_ref)\n+                .take_while(|&t| {\n+                    match\n+                        self.infcx.commit_if_ok(\n+                            |_| self.match_poly_trait_ref(obligation, t))\n+                    {\n+                        Ok(_) => { upcast_trait_ref = Some(t); false }\n+                        Err(_) => { true }\n+                    }\n+                });\n+\n+            // Additionally, for each of the nonmatching predicates that\n+            // we pass over, we sum up the set of number of vtable\n+            // entries, so that we can compute the offset for the selected\n+            // trait.\n+            vtable_base =\n+                nonmatching.map(|t| util::count_own_vtable_entries(self.tcx(), t))\n+                           .sum();\n \n-        while let Some((supertrait, matches)) = upcast_trait_refs.next() {\n-            if matches {\n-                upcast_trait_ref = Some(supertrait);\n-                break;\n-            }\n-            vtable_base += util::count_own_vtable_entries(self.tcx(), supertrait);\n         }\n-        assert!(upcast_trait_refs.all(|(_, matches)| !matches));\n \n         VtableObjectData {\n             upcast_trait_ref: upcast_trait_ref.unwrap(),\n-            vtable_base: vtable_base\n+            vtable_base: vtable_base,\n         }\n     }\n "}, {"sha": "14c501b0049688fab905cad02a7812423d8dbd6b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4726bb46b0ac5eea5761bea2f02ad08d8d4d7048", "patch": "@@ -1898,7 +1898,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n /// erase, or otherwise \"discharge\" these bound regions, we change the\n /// type from `Binder<T>` to just `T` (see\n /// e.g. `liberate_late_bound_regions`).\n-#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct Binder<T>(pub T);\n \n impl<T> Binder<T> {"}, {"sha": "d5ca90c1a28c4c0b37aee0af00f1a922eaa63bcd", "filename": "src/test/run-pass/infer-from-object-trait-issue-26952.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048/src%2Ftest%2Frun-pass%2Finfer-from-object-trait-issue-26952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4726bb46b0ac5eea5761bea2f02ad08d8d4d7048/src%2Ftest%2Frun-pass%2Finfer-from-object-trait-issue-26952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-from-object-trait-issue-26952.rs?ref=4726bb46b0ac5eea5761bea2f02ad08d8d4d7048", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that when we match a trait reference like `Foo<A>: Foo<_#0t>`,\n+// we unify with `_#0t` with `A`. In this code, if we failed to do\n+// that, then you get an unconstrained type-variable in `call`.\n+//\n+// Also serves as a regression test for issue #26952, though the test\n+// was derived from another reported regression with the same cause.\n+\n+use std::marker::PhantomData;\n+\n+trait Trait<A> { fn foo(&self); }\n+\n+struct Type<A> { a: PhantomData<A> }\n+\n+fn as_trait<A>(t: &Type<A>) -> &Trait<A> { loop {  } }\n+\n+fn want<A,T:Trait<A>+?Sized>(t: &T) { }\n+\n+fn call<A>(p: Type<A>) {\n+    let q = as_trait(&p);\n+    want(q); // parameter A to `want` *would* be unconstrained\n+}\n+\n+fn main() { }"}]}