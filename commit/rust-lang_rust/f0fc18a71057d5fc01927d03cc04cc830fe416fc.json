{"sha": "f0fc18a71057d5fc01927d03cc04cc830fe416fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZmMxOGE3MTA1N2Q1ZmMwMTkyN2QwM2NjMDRjYzgzMGZlNDE2ZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-03T17:56:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-03T17:56:14Z"}, "message": "Auto merge of #4878 - flip1995:rustup, r=flip1995\n\nRustup\n\nIncluded rustups:\n\n- rust-lang/rust#66935 (syntax: Unify macro and attribute arguments in AST)\n- rust-lang/rust#66941 (Remove `ord` lang item)\n\nFixes? #2597\n\nchangelog: none", "tree": {"sha": "f78d2a2ae9a1096c2067420a30168d06c7cdc429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f78d2a2ae9a1096c2067420a30168d06c7cdc429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0fc18a71057d5fc01927d03cc04cc830fe416fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fc18a71057d5fc01927d03cc04cc830fe416fc", "html_url": "https://github.com/rust-lang/rust/commit/f0fc18a71057d5fc01927d03cc04cc830fe416fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0fc18a71057d5fc01927d03cc04cc830fe416fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a943a9dfcdca98e5988da6d0b7d2f83a364b5ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a943a9dfcdca98e5988da6d0b7d2f83a364b5ba", "html_url": "https://github.com/rust-lang/rust/commit/7a943a9dfcdca98e5988da6d0b7d2f83a364b5ba"}, {"sha": "716239310388662ba9d54781e7c5f89dc9c8e0e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/716239310388662ba9d54781e7c5f89dc9c8e0e9", "html_url": "https://github.com/rust-lang/rust/commit/716239310388662ba9d54781e7c5f89dc9c8e0e9"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "487ebb454e422cd7b1b641b5e6067de519c68136", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc18a71057d5fc01927d03cc04cc830fe416fc/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc18a71057d5fc01927d03cc04cc830fe416fc/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=f0fc18a71057d5fc01927d03cc04cc830fe416fc", "patch": "@@ -424,7 +424,7 @@ fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attrib\n         };\n \n         if attr.style == AttrStyle::Outer {\n-            if attr_item.tokens.is_empty() || !is_present_in_source(cx, attr.span) {\n+            if attr_item.args.inner_tokens().is_empty() || !is_present_in_source(cx, attr.span) {\n                 return;\n             }\n "}, {"sha": "0b42e02bbd476865e15487ca93591bddf918bed4", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc18a71057d5fc01927d03cc04cc830fe416fc/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc18a71057d5fc01927d03cc04cc830fe416fc/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=f0fc18a71057d5fc01927d03cc04cc830fe416fc", "patch": "@@ -32,11 +32,11 @@ declare_lint_pass!(DbgMacro => [DBG_MACRO]);\n impl EarlyLintPass for DbgMacro {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::Mac) {\n         if mac.path == sym!(dbg) {\n-            if let Some(sugg) = tts_span(mac.tts.clone()).and_then(|span| snippet_opt(cx, span)) {\n+            if let Some(sugg) = tts_span(mac.args.inner_tokens()).and_then(|span| snippet_opt(cx, span)) {\n                 span_lint_and_sugg(\n                     cx,\n                     DBG_MACRO,\n-                    mac.span,\n+                    mac.span(),\n                     \"`dbg!` macro is intended as a debugging tool\",\n                     \"ensure to avoid having uses of it in version control\",\n                     sugg,\n@@ -46,7 +46,7 @@ impl EarlyLintPass for DbgMacro {\n                 span_help_and_lint(\n                     cx,\n                     DBG_MACRO,\n-                    mac.span,\n+                    mac.span(),\n                     \"`dbg!` macro is intended as a debugging tool\",\n                     \"ensure to avoid having uses of it in version control\",\n                 );"}, {"sha": "de7118916de6585772a5637b56b6e88da9e1a770", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc18a71057d5fc01927d03cc04cc830fe416fc/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc18a71057d5fc01927d03cc04cc830fe416fc/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=f0fc18a71057d5fc01927d03cc04cc830fe416fc", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                 BinOpKind::Shr => (cx.tcx.lang_items().shr_trait(), false),\n                 BinOpKind::Ne | BinOpKind::Eq => (cx.tcx.lang_items().eq_trait(), true),\n                 BinOpKind::Lt | BinOpKind::Le | BinOpKind::Ge | BinOpKind::Gt => {\n-                    (cx.tcx.lang_items().ord_trait(), true)\n+                    (cx.tcx.lang_items().partial_ord_trait(), true)\n                 },\n             };\n             if let Some(trait_id) = trait_id {\n@@ -155,7 +155,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                     left.span,\n                                     \"use the left value directly\",\n                                     lsnip,\n-                                    Applicability::MachineApplicable, // snippet\n+                                    Applicability::MaybeIncorrect, // FIXME #2597\n                                 );\n                             })\n                         }\n@@ -173,7 +173,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                     right.span,\n                                     \"use the right value directly\",\n                                     rsnip,\n-                                    Applicability::MachineApplicable, // snippet\n+                                    Applicability::MaybeIncorrect, // FIXME #2597\n                                 );\n                             })\n                         }"}, {"sha": "5160f0739ec92b7396792ca86ed00b7e9b3994a3", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc18a71057d5fc01927d03cc04cc830fe416fc/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc18a71057d5fc01927d03cc04cc830fe416fc/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=f0fc18a71057d5fc01927d03cc04cc830fe416fc", "patch": "@@ -189,13 +189,13 @@ declare_lint_pass!(Write => [\n impl EarlyLintPass for Write {\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &Mac) {\n         if mac.path == sym!(println) {\n-            span_lint(cx, PRINT_STDOUT, mac.span, \"use of `println!`\");\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n+            span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `println!`\");\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.args.inner_tokens(), false) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     span_lint_and_sugg(\n                         cx,\n                         PRINTLN_EMPTY_STRING,\n-                        mac.span,\n+                        mac.span(),\n                         \"using `println!(\\\"\\\")`\",\n                         \"replace it with\",\n                         \"println!()\".to_string(),\n@@ -204,13 +204,13 @@ impl EarlyLintPass for Write {\n                 }\n             }\n         } else if mac.path == sym!(print) {\n-            span_lint(cx, PRINT_STDOUT, mac.span, \"use of `print!`\");\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n+            span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.args.inner_tokens(), false) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n                         PRINT_WITH_NEWLINE,\n-                        mac.span,\n+                        mac.span(),\n                         \"using `print!()` with a format string that ends in a single newline\",\n                         |err| {\n                             err.multipart_suggestion(\n@@ -226,12 +226,12 @@ impl EarlyLintPass for Write {\n                 }\n             }\n         } else if mac.path == sym!(write) {\n-            if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, true) {\n+            if let (Some(fmt_str), _) = check_tts(cx, &mac.args.inner_tokens(), true) {\n                 if check_newlines(&fmt_str) {\n                     span_lint_and_then(\n                         cx,\n                         WRITE_WITH_NEWLINE,\n-                        mac.span,\n+                        mac.span(),\n                         \"using `write!()` with a format string that ends in a single newline\",\n                         |err| {\n                             err.multipart_suggestion(\n@@ -247,7 +247,7 @@ impl EarlyLintPass for Write {\n                 }\n             }\n         } else if mac.path == sym!(writeln) {\n-            if let (Some(fmt_str), expr) = check_tts(cx, &mac.tts, true) {\n+            if let (Some(fmt_str), expr) = check_tts(cx, &mac.args.inner_tokens(), true) {\n                 if fmt_str.symbol == Symbol::intern(\"\") {\n                     let mut applicability = Applicability::MachineApplicable;\n                     let suggestion = expr.map_or_else(\n@@ -261,7 +261,7 @@ impl EarlyLintPass for Write {\n                     span_lint_and_sugg(\n                         cx,\n                         WRITELN_EMPTY_STRING,\n-                        mac.span,\n+                        mac.span(),\n                         format!(\"using `writeln!({}, \\\"\\\")`\", suggestion).as_str(),\n                         \"replace it with\",\n                         format!(\"writeln!({})\", suggestion),"}, {"sha": "a3a9adcc483551aa12d80c7423fa241625234e56", "filename": "tests/ui/op_ref.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc18a71057d5fc01927d03cc04cc830fe416fc/tests%2Fui%2Fop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc18a71057d5fc01927d03cc04cc830fe416fc/tests%2Fui%2Fop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.stderr?ref=f0fc18a71057d5fc01927d03cc04cc830fe416fc", "patch": "@@ -10,14 +10,6 @@ help: use the values directly\n LL |     let foo = 5 - 6;\n    |               ^   ^\n \n-error: taken reference of right operand\n-  --> $DIR/op_ref.rs:20:8\n-   |\n-LL |     if b < &a {\n-   |        ^^^^--\n-   |            |\n-   |            help: use the right value directly: `a`\n-\n error: taken reference of right operand\n   --> $DIR/op_ref.rs:57:13\n    |\n@@ -26,5 +18,5 @@ LL |     let z = x & &y;\n    |                 |\n    |                 help: use the right value directly: `y`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}]}