{"sha": "e1aca75974d917755c04e5040100dfb6ae92f2f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYWNhNzU5NzRkOTE3NzU1YzA0ZTUwNDAxMDBkZmI2YWU5MmYyZjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-23T09:58:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-12-23T10:14:05Z"}, "message": "Rename for clarity", "tree": {"sha": "95bb60bfef680b9d4fc05a1f60a4829445f7cdb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95bb60bfef680b9d4fc05a1f60a4829445f7cdb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1aca75974d917755c04e5040100dfb6ae92f2f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1aca75974d917755c04e5040100dfb6ae92f2f9", "html_url": "https://github.com/rust-lang/rust/commit/e1aca75974d917755c04e5040100dfb6ae92f2f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1aca75974d917755c04e5040100dfb6ae92f2f9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85a28751611e564eb4cdde28ca953407f551b696", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a28751611e564eb4cdde28ca953407f551b696", "html_url": "https://github.com/rust-lang/rust/commit/85a28751611e564eb4cdde28ca953407f551b696"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "a51a9293fd152802a345f9079baed1edd3f858f4", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/e1aca75974d917755c04e5040100dfb6ae92f2f9/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aca75974d917755c04e5040100dfb6ae92f2f9/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=e1aca75974d917755c04e5040100dfb6ae92f2f9", "patch": "@@ -865,10 +865,52 @@ pub(crate) fn handle_formatting(\n     }\n }\n \n-fn handle_fixes(\n+pub(crate) fn handle_code_action(\n+    mut snap: GlobalStateSnapshot,\n+    params: lsp_types::CodeActionParams,\n+) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n+    let _p = profile::span(\"handle_code_action\");\n+    // We intentionally don't support command-based actions, as those either\n+    // requires custom client-code anyway, or requires server-initiated edits.\n+    // Server initiated edits break causality, so we avoid those as well.\n+    if !snap.config.client_caps.code_action_literals {\n+        return Ok(None);\n+    }\n+\n+    let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n+    let line_index = snap.analysis.file_line_index(file_id)?;\n+    let range = from_proto::text_range(&line_index, params.range);\n+    let frange = FileRange { file_id, range };\n+\n+    snap.config.assist.allowed = params\n+        .clone()\n+        .context\n+        .only\n+        .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n+\n+    let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n+\n+    add_quick_fixes(&snap, &params, &mut res)?;\n+\n+    if snap.config.client_caps.code_action_resolve {\n+        for (index, assist) in\n+            snap.analysis.unresolved_assists(&snap.config.assist, frange)?.into_iter().enumerate()\n+        {\n+            res.push(to_proto::unresolved_code_action(&snap, params.clone(), assist, index)?);\n+        }\n+    } else {\n+        for assist in snap.analysis.resolved_assists(&snap.config.assist, frange)?.into_iter() {\n+            res.push(to_proto::resolved_code_action(&snap, assist)?);\n+        }\n+    }\n+\n+    Ok(Some(res))\n+}\n+\n+fn add_quick_fixes(\n     snap: &GlobalStateSnapshot,\n     params: &lsp_types::CodeActionParams,\n-    res: &mut Vec<lsp_ext::CodeAction>,\n+    acc: &mut Vec<lsp_ext::CodeAction>,\n ) -> Result<()> {\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let line_index = snap.analysis.file_line_index(file_id)?;\n@@ -902,61 +944,19 @@ fn handle_fixes(\n             is_preferred: Some(false),\n             data: None,\n         };\n-        res.push(action);\n+        acc.push(action);\n     }\n \n     for fix in snap.check_fixes.get(&file_id).into_iter().flatten() {\n         let fix_range = from_proto::text_range(&line_index, fix.range);\n         if fix_range.intersect(range).is_none() {\n             continue;\n         }\n-        res.push(fix.action.clone());\n+        acc.push(fix.action.clone());\n     }\n     Ok(())\n }\n \n-pub(crate) fn handle_code_action(\n-    mut snap: GlobalStateSnapshot,\n-    params: lsp_types::CodeActionParams,\n-) -> Result<Option<Vec<lsp_ext::CodeAction>>> {\n-    let _p = profile::span(\"handle_code_action\");\n-    // We intentionally don't support command-based actions, as those either\n-    // requires custom client-code anyway, or requires server-initiated edits.\n-    // Server initiated edits break causality, so we avoid those as well.\n-    if !snap.config.client_caps.code_action_literals {\n-        return Ok(None);\n-    }\n-\n-    let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n-    let line_index = snap.analysis.file_line_index(file_id)?;\n-    let range = from_proto::text_range(&line_index, params.range);\n-    let frange = FileRange { file_id, range };\n-\n-    snap.config.assist.allowed = params\n-        .clone()\n-        .context\n-        .only\n-        .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n-\n-    let mut res: Vec<lsp_ext::CodeAction> = Vec::new();\n-\n-    handle_fixes(&snap, &params, &mut res)?;\n-\n-    if snap.config.client_caps.code_action_resolve {\n-        for (index, assist) in\n-            snap.analysis.unresolved_assists(&snap.config.assist, frange)?.into_iter().enumerate()\n-        {\n-            res.push(to_proto::unresolved_code_action(&snap, params.clone(), assist, index)?);\n-        }\n-    } else {\n-        for assist in snap.analysis.resolved_assists(&snap.config.assist, frange)?.into_iter() {\n-            res.push(to_proto::resolved_code_action(&snap, assist)?);\n-        }\n-    }\n-\n-    Ok(Some(res))\n-}\n-\n pub(crate) fn handle_code_action_resolve(\n     mut snap: GlobalStateSnapshot,\n     mut code_action: lsp_ext::CodeAction,"}]}