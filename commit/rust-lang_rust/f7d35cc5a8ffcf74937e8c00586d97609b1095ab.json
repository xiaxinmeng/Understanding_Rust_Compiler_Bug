{"sha": "f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZDM1Y2M1YThmZmNmNzQ5MzdlOGMwMDU4NmQ5NzYwOWIxMDk1YWI=", "commit": {"author": {"name": "Pawe\u0142 Romanowski", "email": "pawroman@gmail.com", "date": "2018-10-01T22:23:57Z"}, "committer": {"name": "Pawe\u0142 Romanowski", "email": "pawroman@gmail.com", "date": "2018-10-01T23:17:13Z"}, "message": "Fix range borrowing suggestions logic", "tree": {"sha": "7f20cfa14c4c1b98250949158906d5d6343f092c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f20cfa14c4c1b98250949158906d5d6343f092c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "html_url": "https://github.com/rust-lang/rust/commit/f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/comments", "author": {"login": "pawroman", "id": 914977, "node_id": "MDQ6VXNlcjkxNDk3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/914977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawroman", "html_url": "https://github.com/pawroman", "followers_url": "https://api.github.com/users/pawroman/followers", "following_url": "https://api.github.com/users/pawroman/following{/other_user}", "gists_url": "https://api.github.com/users/pawroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawroman/subscriptions", "organizations_url": "https://api.github.com/users/pawroman/orgs", "repos_url": "https://api.github.com/users/pawroman/repos", "events_url": "https://api.github.com/users/pawroman/events{/privacy}", "received_events_url": "https://api.github.com/users/pawroman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pawroman", "id": 914977, "node_id": "MDQ6VXNlcjkxNDk3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/914977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawroman", "html_url": "https://github.com/pawroman", "followers_url": "https://api.github.com/users/pawroman/followers", "following_url": "https://api.github.com/users/pawroman/following{/other_user}", "gists_url": "https://api.github.com/users/pawroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawroman/subscriptions", "organizations_url": "https://api.github.com/users/pawroman/orgs", "repos_url": "https://api.github.com/users/pawroman/repos", "events_url": "https://api.github.com/users/pawroman/events{/privacy}", "received_events_url": "https://api.github.com/users/pawroman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0626afbcd23d9ef2e14617c609dc47765af117e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0626afbcd23d9ef2e14617c609dc47765af117e2", "html_url": "https://github.com/rust-lang/rust/commit/0626afbcd23d9ef2e14617c609dc47765af117e2"}], "stats": {"total": 364, "additions": 351, "deletions": 13}, "files": [{"sha": "e0577add61c2168f993cc425c4c2adfbdb0a4500", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "patch": "@@ -309,12 +309,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 };\n                 if self.can_coerce(ref_ty, expected) {\n                     if let Ok(src) = cm.span_to_snippet(sp) {\n-                        let sugg_expr = match expr.node { // parenthesize if needed (Issue #46756)\n-                            hir::ExprKind::Cast(_, _)        |\n-                            hir::ExprKind::Binary(_, _, _)   |\n-                            _ if self.is_range_literal(expr) => format!(\"({})\", src),\n-                            _                                => src,\n+                        let needs_parens = match expr.node {\n+                            // parenthesize if needed (Issue #46756)\n+                            hir::ExprKind::Cast(_, _) |\n+                            hir::ExprKind::Binary(_, _, _) => true,\n+                            // parenthesize borrows of range literals (Issue #54505)\n+                            _ if self.is_range_literal(expr) => true,\n+                            _ => false,\n                         };\n+                        let sugg_expr = if needs_parens { format!(\"({})\", src) } else { src };\n+\n                         if let Some(sugg) = self.can_use_as_ref(expr) {\n                             return Some(sugg);\n                         }\n@@ -380,8 +384,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn is_range_literal(&self, expr: &hir::Expr) -> bool {\n         use hir::{Path, QPath, ExprKind, TyKind};\n \n-        // TODO how to work out std vs core here?\n-        let ops_path = [\"{{root}}\", \"std\", \"ops\"];\n+        // we support `::std::ops::Range` and `::std::core::Range` prefixes\n+        // (via split on \"|\")\n+        let ops_path = [\"{{root}}\", \"std|core\", \"ops\"];\n \n         let is_range_path = |path: &Path| {\n             let ident_names: Vec<_> = path.segments\n@@ -394,24 +399,47 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     preceding.len() == 3 &&\n                     preceding.iter()\n                         .zip(ops_path.iter())\n-                        .all(|(a, b)| a == b)\n+                        .all(|(seg, match_seg)| {\n+                            match_seg.split(\"|\")\n+                                .into_iter()\n+                                .any(|ref spl_seg| seg == spl_seg)\n+                        })\n+            } else {\n+                false\n+            }\n+        };\n+\n+        let is_range_struct_snippet = |span: &Span| {\n+            // Tell if expression span snippet looks like an explicit\n+            // Range struct or new() call.  This is to allow rejecting\n+            // Ranges constructed with non-literals.\n+            let source_map = self.tcx.sess.source_map();\n+            let end_point = source_map.end_point(*span);\n+\n+            if let Ok(end_string) = source_map.span_to_snippet(end_point) {\n+                end_string.ends_with(\"}\") || end_string.ends_with(\")\")\n             } else {\n                 false\n             }\n+\n         };\n \n         match expr.node {\n+            // all built-in range literals but `..=` and `..`\n+            // desugar to Structs, `..` desugars to its struct path\n             ExprKind::Struct(QPath::Resolved(None, ref path), _, _) |\n             ExprKind::Path(QPath::Resolved(None, ref path)) => {\n-                return is_range_path(&path);\n+                return is_range_path(&path) && !is_range_struct_snippet(&expr.span);\n             }\n \n+            // `..=` desugars into RangeInclusive::new(...)\n             ExprKind::Call(ref func, _) => {\n                 if let ExprKind::Path(QPath::TypeRelative(ref ty, ref segment)) = func.node {\n                     if let TyKind::Path(QPath::Resolved(None, ref path)) = ty.node {\n                         let calls_new = segment.ident.as_str() == \"new\";\n \n-                        return is_range_path(&path) && calls_new;\n+                        return is_range_path(&path) && calls_new &&\n+                            !is_range_struct_snippet(&expr.span);\n                     }\n                 }\n             }"}, {"sha": "5be024dff5309dfa1b4abe0e79fee1315905322b", "filename": "src/test/ui/range/issue-54505-no-literals.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.fixed?ref=f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+// Regression test for changes introduced while fixing #54505\n+\n+// This test uses non-literals for Ranges\n+// (expecting no parens with borrow suggestion)\n+\n+use std::ops::RangeBounds;\n+\n+\n+// take a reference to any built-in range\n+fn take_range(_r: &impl RangeBounds<i8>) {}\n+\n+\n+fn main() {\n+    take_range(&std::ops::Range { start: 0, end: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::Range { start: 0, end: 1 }\n+\n+    take_range(&::std::ops::Range { start: 0, end: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::Range { start: 0, end: 1 }\n+\n+    take_range(&std::ops::RangeFrom { start: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeFrom { start: 1 }\n+\n+    take_range(&::std::ops::RangeFrom { start: 1 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeFrom { start: 1 }\n+\n+    take_range(&std::ops::RangeFull {});\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeFull {}\n+\n+    take_range(&::std::ops::RangeFull {});\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeFull {}\n+\n+    take_range(&std::ops::RangeInclusive::new(0, 1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeInclusive::new(0, 1)\n+\n+    take_range(&::std::ops::RangeInclusive::new(0, 1));\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeInclusive::new(0, 1)\n+\n+    take_range(&std::ops::RangeTo { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeTo { end: 5 }\n+\n+    take_range(&::std::ops::RangeTo { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeTo { end: 5 }\n+\n+    take_range(&std::ops::RangeToInclusive { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &std::ops::RangeToInclusive { end: 5 }\n+\n+    take_range(&::std::ops::RangeToInclusive { end: 5 });\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider borrowing here\n+    //~| SUGGESTION &::std::ops::RangeToInclusive { end: 5 }\n+}"}, {"sha": "a8be4de5f0e78f23e8b30a916b36799f1b539ba2", "filename": "src/test/ui/range/issue-54505-no-literals.stderr", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr?ref=f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "patch": "@@ -0,0 +1,147 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:26:16\n+   |\n+LL |     take_range(std::ops::Range { start: 0, end: 1 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::Range`\n+   |                help: consider borrowing here: `&std::ops::Range { start: 0, end: 1 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::Range<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:31:16\n+   |\n+LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::Range`\n+   |                help: consider borrowing here: `&::std::ops::Range { start: 0, end: 1 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::Range<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:36:16\n+   |\n+LL |     take_range(std::ops::RangeFrom { start: 1 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFrom`\n+   |                help: consider borrowing here: `&std::ops::RangeFrom { start: 1 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFrom<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:41:16\n+   |\n+LL |     take_range(::std::ops::RangeFrom { start: 1 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFrom`\n+   |                help: consider borrowing here: `&::std::ops::RangeFrom { start: 1 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFrom<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:46:16\n+   |\n+LL |     take_range(std::ops::RangeFull {});\n+   |                ^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFull`\n+   |                help: consider borrowing here: `&std::ops::RangeFull {}`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFull`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:51:16\n+   |\n+LL |     take_range(::std::ops::RangeFull {});\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeFull`\n+   |                help: consider borrowing here: `&::std::ops::RangeFull {}`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeFull`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:56:16\n+   |\n+LL |     take_range(std::ops::RangeInclusive::new(0, 1));\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeInclusive`\n+   |                help: consider borrowing here: `&std::ops::RangeInclusive::new(0, 1)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeInclusive<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:61:16\n+   |\n+LL |     take_range(::std::ops::RangeInclusive::new(0, 1));\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeInclusive`\n+   |                help: consider borrowing here: `&::std::ops::RangeInclusive::new(0, 1)`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeInclusive<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:66:16\n+   |\n+LL |     take_range(std::ops::RangeTo { end: 5 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeTo`\n+   |                help: consider borrowing here: `&std::ops::RangeTo { end: 5 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeTo<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:71:16\n+   |\n+LL |     take_range(::std::ops::RangeTo { end: 5 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeTo`\n+   |                help: consider borrowing here: `&::std::ops::RangeTo { end: 5 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeTo<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:76:16\n+   |\n+LL |     take_range(std::ops::RangeToInclusive { end: 5 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeToInclusive`\n+   |                help: consider borrowing here: `&std::ops::RangeToInclusive { end: 5 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeToInclusive<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-literals.rs:81:16\n+   |\n+LL |     take_range(::std::ops::RangeToInclusive { end: 5 });\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                expected reference, found struct `std::ops::RangeToInclusive`\n+   |                help: consider borrowing here: `&::std::ops::RangeToInclusive { end: 5 }`\n+   |\n+   = note: expected type `&_`\n+              found type `std::ops::RangeToInclusive<{integer}>`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0dadaecd7d8a3606bf9c5353876991af77fb7739", "filename": "src/test/ui/range/issue-54505-no-std.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs?ref=f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-rustfix\n-// error-pattern: error: `#[panic_handler]` function required, but not found\n-// error-pattern: language item required, but not found: `panic_info`\n+// error-pattern: `#[panic_handler]` function required, but not found\n+// error-pattern: language item required, but not found: `eh_personality`\n \n \n // Regression test for #54505 - range borrowing suggestion had"}, {"sha": "035bc6406586c16c20be0647363c67835146c0dc", "filename": "src/test/ui/range/issue-54505-no-std.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7d35cc5a8ffcf74937e8c00586d97609b1095ab/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "patch": "@@ -0,0 +1,79 @@\n+error: `#[panic_handler]` function required, but not found\n+\n+error: language item required, but not found: `eh_personality`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:31:16\n+   |\n+LL |     take_range(0..1);\n+   |                ^^^^\n+   |                |\n+   |                expected reference, found struct `core::ops::Range`\n+   |                help: consider borrowing here: `&(0..1)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::Range<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:36:16\n+   |\n+LL |     take_range(1..);\n+   |                ^^^\n+   |                |\n+   |                expected reference, found struct `core::ops::RangeFrom`\n+   |                help: consider borrowing here: `&(1..)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::RangeFrom<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:41:16\n+   |\n+LL |     take_range(..);\n+   |                ^^\n+   |                |\n+   |                expected reference, found struct `core::ops::RangeFull`\n+   |                help: consider borrowing here: `&(..)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::RangeFull`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:46:16\n+   |\n+LL |     take_range(0..=1);\n+   |                ^^^^^\n+   |                |\n+   |                expected reference, found struct `core::ops::RangeInclusive`\n+   |                help: consider borrowing here: `&(0..=1)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::RangeInclusive<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:51:16\n+   |\n+LL |     take_range(..5);\n+   |                ^^^\n+   |                |\n+   |                expected reference, found struct `core::ops::RangeTo`\n+   |                help: consider borrowing here: `&(..5)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::RangeTo<{integer}>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-54505-no-std.rs:56:16\n+   |\n+LL |     take_range(..=42);\n+   |                ^^^^^\n+   |                |\n+   |                expected reference, found struct `core::ops::RangeToInclusive`\n+   |                help: consider borrowing here: `&(..=42)`\n+   |\n+   = note: expected type `&_`\n+              found type `core::ops::RangeToInclusive<{integer}>`\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}