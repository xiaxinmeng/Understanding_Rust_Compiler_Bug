{"sha": "7bae3449ce5113596c7cdbd1df3d27bdbd0cd777", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYWUzNDQ5Y2U1MTEzNTk2YzdjZGJkMWRmM2QyN2JkYmQwY2Q3Nzc=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-17T18:47:01Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-08-17T19:39:51Z"}, "message": "Move select macro into another file, so it can be including in multiple tests.\n\nFixing long lines.", "tree": {"sha": "7604a7a6b2a7767402eb69bec07ec1890909e974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7604a7a6b2a7767402eb69bec07ec1890909e974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bae3449ce5113596c7cdbd1df3d27bdbd0cd777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bae3449ce5113596c7cdbd1df3d27bdbd0cd777", "html_url": "https://github.com/rust-lang/rust/commit/7bae3449ce5113596c7cdbd1df3d27bdbd0cd777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bae3449ce5113596c7cdbd1df3d27bdbd0cd777/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9260b02daafe26025a99d44ddaeeb89e5f3382be", "url": "https://api.github.com/repos/rust-lang/rust/commits/9260b02daafe26025a99d44ddaeeb89e5f3382be", "html_url": "https://github.com/rust-lang/rust/commit/9260b02daafe26025a99d44ddaeeb89e5f3382be"}], "stats": {"total": 126, "additions": 67, "deletions": 59}, "files": [{"sha": "39132fd0d5942e1057f48ebd8f5421a9cccd8c62", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7bae3449ce5113596c7cdbd1df3d27bdbd0cd777/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bae3449ce5113596c7cdbd1df3d27bdbd0cd777/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=7bae3449ce5113596c7cdbd1df3d27bdbd0cd777", "patch": "@@ -69,7 +69,7 @@ trait ext_ctxt_ast_builder {\n                       span: span,\n                       +enum_definition: ast::enum_def,\n                       +ty_params: ~[ast::ty_param]) -> @ast::item;\n-    fn item_enum(name: ident, span: span, \n+    fn item_enum(name: ident, span: span,\n                  +enum_definition: ast::enum_def) -> @ast::item;\n     fn variant(name: ident, span: span, +tys: ~[@ast::ty]) -> ast::variant;\n     fn item_mod(name: ident, span: span, +items: ~[@ast::item]) -> @ast::item;"}, {"sha": "9559d815def5c40b456cfef262e25d9c293bca1d", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "modified", "additions": 3, "deletions": 58, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7bae3449ce5113596c7cdbd1df3d27bdbd0cd777/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bae3449ce5113596c7cdbd1df3d27bdbd0cd777/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=7bae3449ce5113596c7cdbd1df3d27bdbd0cd777", "patch": "@@ -22,63 +22,8 @@ proto! bar {\n     }\n }\n \n-\n-// select!\n-macro_rules! select_if {\n-\n-    {\n-        $index:expr,\n-        $count:expr\n-    } => {\n-        fail\n-    };\n-\n-    {\n-        $index:expr,\n-        $count:expr,\n-        $port:path => [\n-            $(type_this $message:path$(($(x $x: ident),+))dont_type_this*\n-              -> $next:ident => { $e:expr }),+\n-        ]\n-        $(, $ports:path => [\n-            $(type_this $messages:path$(($(x $xs: ident),+))dont_type_this*\n-              -> $nexts:ident => { $es:expr }),+\n-        ] )*\n-    } => {\n-        if $index == $count {\n-            match move pipes::try_recv($port) {\n-              $(some($message($($($x,)+)* next)) => {\n-                // FIXME (#2329) we really want move out of enum here.\n-                let $next = unsafe { let x <- *ptr::addr_of(next); x };\n-                $e\n-              })+\n-              _ => fail\n-            }\n-        } else {\n-            select_if!{\n-                $index,\n-                $count + 1\n-                $(, $ports => [\n-                    $(type_this $messages$(($(x $xs),+))dont_type_this*\n-                      -> $nexts => { $es }),+\n-                ])*\n-            }\n-        }\n-    };\n-}\n-\n-macro_rules! select {\n-    {\n-        $( $port:path => {\n-            $($message:path$(($($x: ident),+))dont_type_this*\n-              -> $next:ident $e:expr),+\n-        } )+\n-    } => {\n-        let index = pipes::selecti([$(($port).header()),+]/_);\n-        select_if!{index, 0 $(, $port => [\n-            $(type_this $message$(($(x $x),+))dont_type_this* -> $next => { $e }),+\n-        ])+}\n-    }\n+fn macros() {\n+    include!(\"select-macro.rs\");\n }\n \n // Code\n@@ -97,7 +42,7 @@ fn test(+foo: foo::client::foo, +bar: bar::client::bar) {\n             },\n \n             do_baz(b) -> _next {\n-                if b { debug!(\"true\") } else { debug!(\"false\") }\n+                if *b { debug!(\"true\") } else { debug!(\"false\") }\n             }\n         }\n     }"}, {"sha": "acaac71cf74b3cb3b2ba7cc0b070b438d1f98164", "filename": "src/test/run-pass/select-macro.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7bae3449ce5113596c7cdbd1df3d27bdbd0cd777/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bae3449ce5113596c7cdbd1df3d27bdbd0cd777/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fselect-macro.rs?ref=7bae3449ce5113596c7cdbd1df3d27bdbd0cd777", "patch": "@@ -0,0 +1,63 @@\n+// xfail-test - this isn't really a test.\n+\n+ {\n+\n+// select!\n+macro_rules! select_if {\n+\n+    {\n+        $index:expr,\n+        $count:expr\n+    } => {\n+        fail\n+    };\n+\n+    {\n+        $index:expr,\n+        $count:expr,\n+        $port:path => [\n+            $(type_this $message:path$(($(x $x: ident),+))dont_type_this*\n+              -> $next:ident => { $e:expr }),+\n+        ]\n+        $(, $ports:path => [\n+            $(type_this $messages:path$(($(x $xs: ident),+))dont_type_this*\n+              -> $nexts:ident => { $es:expr }),+\n+        ] )*\n+    } => {\n+        if $index == $count {\n+            match move pipes::try_recv($port) {\n+              $(some($message($($(ref $x,)+)* ref next)) => {\n+                // FIXME (#2329) we really want move out of enum here.\n+                let $next = unsafe { let x <- *ptr::addr_of(*next); x };\n+                $e\n+              })+\n+              _ => fail\n+            }\n+        } else {\n+            select_if!{\n+                $index,\n+                $count + 1\n+                $(, $ports => [\n+                    $(type_this $messages$(($(x $xs),+))dont_type_this*\n+                      -> $nexts => { $es }),+\n+                ])*\n+            }\n+        }\n+    };\n+}\n+\n+macro_rules! select {\n+    {\n+        $( $port:path => {\n+            $($message:path$(($($x: ident),+))dont_type_this*\n+              -> $next:ident $e:expr),+\n+        } )+\n+    } => {\n+        let index = pipes::selecti([$(($port).header()),+]/_);\n+        select_if!{index, 0 $(, $port => [\n+            $(type_this $message$(($(x $x),+))dont_type_this* -> $next => { $e }),+\n+        ])+}\n+    }\n+}\n+\n+}"}]}