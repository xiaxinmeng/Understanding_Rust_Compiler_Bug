{"sha": "c4c9d9fc62eb244c0f219cfbf23f19b9240c2827", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YzlkOWZjNjJlYjI0NGMwZjIxOWNmYmYyM2YxOWI5MjQwYzI4Mjc=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-11-23T07:18:23Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-12T06:31:01Z"}, "message": "Add suggestion for explicit_write lint", "tree": {"sha": "3ad76d4d688d4297a1d3a855ab811ee744ab5632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ad76d4d688d4297a1d3a855ab811ee744ab5632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlwQqyYACgkQtvoGpuDi\nZlsQYxAAupSrocPqT7b6WKMhOo4y7yADoGUOuCdNjz6pZDcWnHgoTQNjBM6ABToV\n59f7S6VNxwks2URNwUsVyPNhmcE2pO9gIi7T6Da9qfhPVmxYWiGS2AjwmOsDspDx\nPX3K9vnHflW/qCG10CgYSgXBFqCJpOw5DEnwmDRWtkbCqqmLe89xX3yzAM6mtLl4\nhNJDpGCuhJHApnt01sHeRE7+X31wec8MezxOrknthNv3sdslLEGN+vBhRXuYmbcH\njOzpBF5ZB6Ck3h3PSfpLPCrnD4l1WbABBPlO6rTifMba7kmRJhf6zMfMxPY0ZWAv\nHbThdr55p/cetQArVzyE3juU5DG8ILcYgtTI4sGQ/zGQn/2kolfXnxjd6rj465Xp\nilvi+/6RK+cbefdWx4IQd71RjQ3gdjOo1sCLZK0OotZk4Up0LNIc6uBFej8Z7RLG\neITU0WClc/hYIZLAglcU1VDz4ZAErIHIfnlOWE15FkjfEjYwMjXeY/Hy0SKd5Si0\nNOqcNO9CbuAIIN5jrmlc5SluylzC6EQwPQDR98E0SYP5znwan+4hYcWbuZKlz99T\nPVaq4lNNj+t2MUTJlaT0z9z7ABxX+YNnPp41UtWr4bqTd4cP4gqCT+zhlqdonakx\nJ9A86+SnO9+cHyckjZdvLrIs0luj/S5GBPIGMxeFzsVrk24Ar38=\n=A3NZ\n-----END PGP SIGNATURE-----", "payload": "tree 3ad76d4d688d4297a1d3a855ab811ee744ab5632\nparent e2608fc27231d12a360915c9cb60de5219a22505\nauthor Philipp Hansch <dev@phansch.net> 1542957503 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1544596261 +0100\n\nAdd suggestion for explicit_write lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827", "html_url": "https://github.com/rust-lang/rust/commit/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2608fc27231d12a360915c9cb60de5219a22505", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2608fc27231d12a360915c9cb60de5219a22505", "html_url": "https://github.com/rust-lang/rust/commit/e2608fc27231d12a360915c9cb60de5219a22505"}], "stats": {"total": 107, "additions": 68, "deletions": 39}, "files": [{"sha": "65fa6aeec0b56c94224dc7db010baca99bc89c0c", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=c4c9d9fc62eb244c0f219cfbf23f19b9240c2827", "patch": "@@ -10,8 +10,8 @@\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::utils::opt_def_id;\n-use crate::utils::{is_expn_of, match_def_path, resolve_node, span_lint};\n+use crate::syntax::ast::LitKind;\n+use crate::utils::{is_expn_of, match_def_path, opt_def_id, resolve_node, span_lint, span_lint_and_sugg};\n use if_chain::if_chain;\n \n /// **What it does:** Checks for usage of `write!()` / `writeln()!` which can be\n@@ -51,6 +51,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if unwrap_args.len() > 0;\n             if let ExprKind::MethodCall(ref write_fun, _, ref write_args) =\n                 unwrap_args[0].node;\n+            // Obtain the string that should be printed\n+            if let ExprKind::Call(_, ref output_args) = write_args[1].node;\n+            if let ExprKind::AddrOf(_, ref output_string_expr) = output_args[0].node;\n+            if let ExprKind::Array(ref string_exprs) = output_string_expr.node;\n+            if let ExprKind::Lit(ref lit) = string_exprs[0].node;\n+            if let LitKind::Str(ref write_output, _) = lit.node;\n             if write_fun.ident.name == \"write_fmt\";\n             // match calls to std::io::stdout() / std::io::stderr ()\n             if write_args.len() > 0;\n@@ -81,29 +87,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 } else {\n                     \"\"\n                 };\n+\n+                // We need to remove the last trailing newline from the string because the\n+                // underlying `fmt::write` function doesn't know wether `println!` or `print!` was\n+                // used.\n+                let mut write_output: String = write_output.to_string();\n+                if write_output.ends_with('\\n') {\n+                    write_output.truncate(write_output.len() - 1)\n+                }\n                 if let Some(macro_name) = calling_macro {\n-                    span_lint(\n+                    span_lint_and_sugg(\n                         cx,\n                         EXPLICIT_WRITE,\n                         expr.span,\n                         &format!(\n-                            \"use of `{}!({}(), ...).unwrap()`. Consider using `{}{}!` instead\",\n+                            \"use of `{}!({}(), ...).unwrap()`\",\n                             macro_name,\n-                            dest_name,\n-                            prefix,\n-                            macro_name.replace(\"write\", \"print\")\n-                        )\n+                            dest_name\n+                        ),\n+                        \"try this\",\n+                        format!(\"{}{}!(\\\"{}\\\")\", prefix, macro_name.replace(\"write\", \"print\"), write_output.escape_default())\n                     );\n                 } else {\n-                    span_lint(\n+                    span_lint_and_sugg(\n                         cx,\n                         EXPLICIT_WRITE,\n                         expr.span,\n-                        &format!(\n-                            \"use of `{}().write_fmt(...).unwrap()`. Consider using `{}print!` instead\",\n-                            dest_name,\n-                            prefix,\n-                        )\n+                        &format!(\"use of `{}().write_fmt(...).unwrap()`\", dest_name),\n+                        \"try this\",\n+                        format!(\"{}print!(\\\"{}\\\")\", prefix, write_output.escape_default())\n                     );\n                 }\n             }"}, {"sha": "a862d774174bd353baedcc9d4c4f63245bc4190e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c4c9d9fc62eb244c0f219cfbf23f19b9240c2827", "patch": "@@ -14,6 +14,7 @@\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]\n #![feature(range_contains)]\n+#![feature(str_escape)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![recursion_limit = \"256\"]\n #![warn(rust_2018_idioms, trivial_casts, trivial_numeric_casts)]"}, {"sha": "01a63b3a95f28e92aa5b26730ce76fcad5260352", "filename": "tests/ui/explicit_write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827/tests%2Fui%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827/tests%2Fui%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.rs?ref=c4c9d9fc62eb244c0f219cfbf23f19b9240c2827", "patch": "@@ -27,6 +27,10 @@ fn main() {\n         writeln!(std::io::stderr(), \"test\").unwrap();\n         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n+\n+        // including newlines\n+        writeln!(std::io::stdout(), \"test\\ntest\").unwrap();\n+        writeln!(std::io::stderr(), \"test\\ntest\").unwrap();\n     }\n     // these should not warn, different destination\n     {"}, {"sha": "6d318d09e5847922f587968a8802379679487815", "filename": "tests/ui/explicit_write.stderr", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827/tests%2Fui%2Fexplicit_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4c9d9fc62eb244c0f219cfbf23f19b9240c2827/tests%2Fui%2Fexplicit_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.stderr?ref=c4c9d9fc62eb244c0f219cfbf23f19b9240c2827", "patch": "@@ -1,40 +1,52 @@\n-error: use of `write!(stdout(), ...).unwrap()`. Consider using `print!` instead\n-  --> $DIR/explicit_write.rs:24:9\n+error: use of `write!(stdout(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:28:9\n    |\n-24 |         write!(std::io::stdout(), \"test\").unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+28 |         write!(std::io::stdout(), \"test\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `print!(\"test\")`\n    |\n    = note: `-D clippy::explicit-write` implied by `-D warnings`\n \n-error: use of `write!(stderr(), ...).unwrap()`. Consider using `eprint!` instead\n-  --> $DIR/explicit_write.rs:25:9\n+error: use of `write!(stderr(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:29:9\n    |\n-25 |         write!(std::io::stderr(), \"test\").unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+29 |         write!(std::io::stderr(), \"test\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprint!(\"test\")`\n \n-error: use of `writeln!(stdout(), ...).unwrap()`. Consider using `println!` instead\n-  --> $DIR/explicit_write.rs:26:9\n+error: use of `writeln!(stdout(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:30:9\n    |\n-26 |         writeln!(std::io::stdout(), \"test\").unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+30 |         writeln!(std::io::stdout(), \"test\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `println!(\"test\")`\n \n-error: use of `writeln!(stderr(), ...).unwrap()`. Consider using `eprintln!` instead\n-  --> $DIR/explicit_write.rs:27:9\n+error: use of `writeln!(stderr(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:31:9\n    |\n-27 |         writeln!(std::io::stderr(), \"test\").unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+31 |         writeln!(std::io::stderr(), \"test\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"test\")`\n \n-error: use of `stdout().write_fmt(...).unwrap()`. Consider using `print!` instead\n-  --> $DIR/explicit_write.rs:28:9\n+error: use of `stdout().write_fmt(...).unwrap()`\n+  --> $DIR/explicit_write.rs:32:9\n    |\n-28 |         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+32 |         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `print!(\"test\")`\n \n-error: use of `stderr().write_fmt(...).unwrap()`. Consider using `eprint!` instead\n-  --> $DIR/explicit_write.rs:29:9\n+error: use of `stderr().write_fmt(...).unwrap()`\n+  --> $DIR/explicit_write.rs:33:9\n+   |\n+33 |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprint!(\"test\")`\n+\n+error: use of `writeln!(stdout(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:36:9\n+   |\n+36 |         writeln!(std::io::stdout(), \"test/ntest\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `println!(\"test/ntest\")`\n+\n+error: use of `writeln!(stderr(), ...).unwrap()`\n+  --> $DIR/explicit_write.rs:37:9\n    |\n-29 |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+37 |         writeln!(std::io::stderr(), \"test/ntest\").unwrap();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"test/ntest\")`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n "}]}