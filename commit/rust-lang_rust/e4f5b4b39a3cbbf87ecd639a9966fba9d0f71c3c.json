{"sha": "e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZjViNGIzOWEzY2JiZjg3ZWNkNjM5YTk5NjZmYmE5ZDBmNzFjM2M=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T08:12:46Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T08:12:46Z"}, "message": "Do not force_allocate Ref destination.", "tree": {"sha": "4a0341199e069565c93a3bb59182a7833cf3e04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a0341199e069565c93a3bb59182a7833cf3e04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c", "html_url": "https://github.com/rust-lang/rust/commit/e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1b97f1440f370e23de861e9d20745cd829abc27", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b97f1440f370e23de861e9d20745cd829abc27", "html_url": "https://github.com/rust-lang/rust/commit/c1b97f1440f370e23de861e9d20745cd829abc27"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "261b40ede015ea676915fd9a1c3cc39ca06644a8", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=e4f5b4b39a3cbbf87ecd639a9966fba9d0f71c3c", "patch": "@@ -614,23 +614,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Ref(_, _, ref lvalue) => {\n-                // FIXME(solson)\n-                let dest = self.force_allocation(dest)?.to_ptr();\n-\n-                let lvalue = self.eval_lvalue(lvalue)?;\n+                let src = self.eval_lvalue(lvalue)?;\n+                let (raw_ptr, extra) = self.force_allocation(src)?.to_ptr_and_extra();\n+                let ptr = PrimVal::Ptr(raw_ptr);\n \n-                // FIXME(solson)\n-                let (ptr, extra) = self.force_allocation(lvalue)?.to_ptr_and_extra();\n-\n-                self.memory.write_ptr(dest, ptr)?;\n-                let extra_ptr = dest.offset(self.memory.pointer_size() as isize);\n-                match extra {\n-                    LvalueExtra::None => {},\n-                    LvalueExtra::Length(len) => self.memory.write_usize(extra_ptr, len)?,\n-                    LvalueExtra::Vtable(ptr) => self.memory.write_ptr(extra_ptr, ptr)?,\n+                let val = match extra {\n+                    LvalueExtra::None => Value::ByVal(ptr),\n+                    LvalueExtra::Length(len) => Value::ByValPair(ptr, self.usize_primval(len)),\n+                    LvalueExtra::Vtable(vtable) => Value::ByValPair(ptr, PrimVal::Ptr(vtable)),\n                     LvalueExtra::DowncastVariant(..) =>\n                         bug!(\"attempted to take a reference to an enum downcast lvalue\"),\n-                }\n+                };\n+\n+                self.write_value(val, dest, dest_ty)?;\n             }\n \n             Box(ty) => {\n@@ -774,10 +770,27 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 Ok(variant.offsets[field_index])\n             }\n             FatPointer { .. } => {\n-                let bytes = layout::FAT_PTR_ADDR * self.memory.pointer_size();\n+                let bytes = field_index * self.memory.pointer_size();\n                 Ok(Size::from_bytes(bytes as u64))\n             }\n-            _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}, with layout: {:?}\", ty, layout))),\n+            _ => {\n+                let msg = format!(\"can't handle type: {:?}, with layout: {:?}\", ty, layout);\n+                Err(EvalError::Unimplemented(msg))\n+            }\n+        }\n+    }\n+\n+    fn get_field_count(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, usize> {\n+        let layout = self.type_layout(ty);\n+\n+        use rustc::ty::layout::Layout::*;\n+        match *layout {\n+            Univariant { ref variant, .. } => Ok(variant.offsets.len()),\n+            FatPointer { .. } => Ok(2),\n+            _ => {\n+                let msg = format!(\"can't handle type: {:?}, with layout: {:?}\", ty, layout);\n+                Err(EvalError::Unimplemented(msg))\n+            }\n         }\n     }\n \n@@ -1155,18 +1168,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Value::ByRef(ptr) => self.copy(ptr, dest, dest_ty),\n             Value::ByVal(primval) => self.memory.write_primval(dest, primval),\n             Value::ByValPair(a, b) => {\n-                self.memory.write_primval(dest, a)?;\n-                let layout = self.type_layout(dest_ty);\n-                let offset = match *layout {\n-                    Layout::Univariant { .. } => {\n-                        bug!(\"I don't think this can ever happen until we have custom fat pointers\");\n-                        //variant.field_offset(1).bytes() as isize\n-                    },\n-                    Layout::FatPointer { .. } => self.memory.pointer_size() as isize,\n-                    _ => bug!(\"tried to write value pair of non-fat pointer type: {:?}\", layout),\n-                };\n-                let extra_dest = dest.offset(offset);\n-                self.memory.write_primval(extra_dest, b)\n+                assert_eq!(self.get_field_count(dest_ty)?, 2);\n+                let field_0 = self.get_field_offset(dest_ty, 0)?.bytes() as isize;\n+                let field_1 = self.get_field_offset(dest_ty, 1)?.bytes() as isize;\n+                self.memory.write_primval(dest.offset(field_0), a)?;\n+                self.memory.write_primval(dest.offset(field_1), b)\n             }\n         }\n     }"}]}