{"sha": "f4b88547ad8233c69f024b67e0a6bbd98b28c6e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0Yjg4NTQ3YWQ4MjMzYzY5ZjAyNGI2N2UwYTZiYmQ5OGIyOGM2ZTE=", "commit": {"author": {"name": "Dmitry Ermolov", "email": "epdmitry@yandex.ru", "date": "2013-08-14T21:28:49Z"}, "committer": {"name": "Dmitry Ermolov", "email": "epdmitry@yandex.ru", "date": "2013-08-15T22:07:21Z"}, "message": "Pointers to bound variables are stored after all patterns are matched.\n\nPointers to bound variables shouldn't be stored before checking pattern,\notherwise piped patterns can conflict with each other (issue #6338).\n\nCloses #6338.", "tree": {"sha": "58b19d6cdc3951fcb90c1b1a04add9dd395d277e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58b19d6cdc3951fcb90c1b1a04add9dd395d277e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4b88547ad8233c69f024b67e0a6bbd98b28c6e1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b88547ad8233c69f024b67e0a6bbd98b28c6e1", "html_url": "https://github.com/rust-lang/rust/commit/f4b88547ad8233c69f024b67e0a6bbd98b28c6e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4b88547ad8233c69f024b67e0a6bbd98b28c6e1/comments", "author": {"login": "dim-an", "id": 88889, "node_id": "MDQ6VXNlcjg4ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/88889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dim-an", "html_url": "https://github.com/dim-an", "followers_url": "https://api.github.com/users/dim-an/followers", "following_url": "https://api.github.com/users/dim-an/following{/other_user}", "gists_url": "https://api.github.com/users/dim-an/gists{/gist_id}", "starred_url": "https://api.github.com/users/dim-an/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dim-an/subscriptions", "organizations_url": "https://api.github.com/users/dim-an/orgs", "repos_url": "https://api.github.com/users/dim-an/repos", "events_url": "https://api.github.com/users/dim-an/events{/privacy}", "received_events_url": "https://api.github.com/users/dim-an/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dim-an", "id": 88889, "node_id": "MDQ6VXNlcjg4ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/88889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dim-an", "html_url": "https://github.com/dim-an", "followers_url": "https://api.github.com/users/dim-an/followers", "following_url": "https://api.github.com/users/dim-an/following{/other_user}", "gists_url": "https://api.github.com/users/dim-an/gists{/gist_id}", "starred_url": "https://api.github.com/users/dim-an/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dim-an/subscriptions", "organizations_url": "https://api.github.com/users/dim-an/orgs", "repos_url": "https://api.github.com/users/dim-an/repos", "events_url": "https://api.github.com/users/dim-an/events{/privacy}", "received_events_url": "https://api.github.com/users/dim-an/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6365c4ac5f81210ee6921484736b398244646381", "url": "https://api.github.com/repos/rust-lang/rust/commits/6365c4ac5f81210ee6921484736b398244646381", "html_url": "https://github.com/rust-lang/rust/commit/6365c4ac5f81210ee6921484736b398244646381"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "1eeafeacc6f05a75b395d59360ec0c572d0e94c4", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f4b88547ad8233c69f024b67e0a6bbd98b28c6e1/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b88547ad8233c69f024b67e0a6bbd98b28c6e1/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=f4b88547ad8233c69f024b67e0a6bbd98b28c6e1", "patch": "@@ -399,10 +399,17 @@ struct ArmData<'self> {\n     bindings_map: @BindingsMap\n }\n \n+/**\n+ * Info about Match.\n+ * If all `pats` are matched then arm `data` will be executed.\n+ * As we proceed `bound_ptrs` are filled with pointers to values to be bound,\n+ * these pointers are stored in llmatch variables just before executing `data` arm.\n+ */\n #[deriving(Clone)]\n struct Match<'self> {\n     pats: ~[@ast::pat],\n-    data: ArmData<'self>\n+    data: ArmData<'self>,\n+    bound_ptrs: ~[(ident, ValueRef)]\n }\n \n impl<'self> Repr for Match<'self> {\n@@ -447,14 +454,13 @@ fn expand_nested_bindings<'r>(bcx: @mut Block,\n                                 br.pats.slice(col + 1u,\n                                            br.pats.len())));\n \n-                let binding_info =\n-                    br.data.bindings_map.get(&path_to_ident(path));\n-\n-                Store(bcx, val, binding_info.llmatch);\n-                Match {\n+                let mut res = Match {\n                     pats: pats,\n-                    data: br.data.clone()\n-                }\n+                    data: br.data.clone(),\n+                    bound_ptrs: br.bound_ptrs.clone()\n+                };\n+                res.bound_ptrs.push((path_to_ident(path), val));\n+                res\n             }\n             _ => (*br).clone(),\n         }\n@@ -496,21 +502,20 @@ fn enter_match<'r>(bcx: @mut Block,\n                         br.pats.slice(col + 1u, br.pats.len()));\n \n                 let this = br.pats[col];\n+                let mut bound_ptrs = br.bound_ptrs.clone();\n                 match this.node {\n                     ast::pat_ident(_, ref path, None) => {\n                         if pat_is_binding(dm, this) {\n-                            let binding_info =\n-                                br.data.bindings_map.get(\n-                                    &path_to_ident(path));\n-                            Store(bcx, val, binding_info.llmatch);\n+                            bound_ptrs.push((path_to_ident(path), val));\n                         }\n                     }\n                     _ => {}\n                 }\n \n                 result.push(Match {\n                     pats: pats,\n-                    data: br.data.clone()\n+                    data: br.data.clone(),\n+                    bound_ptrs: bound_ptrs\n                 });\n             }\n             None => ()\n@@ -1414,6 +1419,10 @@ fn compile_submatch(bcx: @mut Block,\n     }\n     if m[0].pats.len() == 0u {\n         let data = &m[0].data;\n+        for &(ref ident, ref value_ptr) in m[0].bound_ptrs.iter() {\n+            let llmatch = data.bindings_map.get(ident).llmatch;\n+            Store(bcx, *value_ptr, llmatch);\n+        }\n         match data.arm.guard {\n             Some(guard_expr) => {\n                 bcx = compile_guard(bcx,\n@@ -1839,6 +1848,7 @@ fn trans_match_inner(scope_cx: @mut Block,\n             matches.push(Match {\n                 pats: ~[*p],\n                 data: arm_data.clone(),\n+                bound_ptrs: ~[],\n             });\n         }\n     }"}, {"sha": "b4933773c03e25b41bb8acdd4ff08b5f1ff6c304", "filename": "src/test/run-pass/match-pipe-binding.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4b88547ad8233c69f024b67e0a6bbd98b28c6e1/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4b88547ad8233c69f024b67e0a6bbd98b28c6e1/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs?ref=f4b88547ad8233c69f024b67e0a6bbd98b28c6e1", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n fn test1() {\n     // from issue 6338\n     match ((1, ~\"a\"), (2, ~\"b\")) {"}]}