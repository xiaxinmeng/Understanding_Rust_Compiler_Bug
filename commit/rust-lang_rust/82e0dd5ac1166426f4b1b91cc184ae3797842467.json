{"sha": "82e0dd5ac1166426f4b1b91cc184ae3797842467", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZTBkZDVhYzExNjY0MjZmNGIxYjkxY2MxODRhZTM3OTc4NDI0Njc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-26T08:29:13Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-27T01:13:22Z"}, "message": "Refactor away `is_static_method`", "tree": {"sha": "98df12bb16d9bc8a7aaaa28ea8a10ebc2e3eec93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98df12bb16d9bc8a7aaaa28ea8a10ebc2e3eec93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82e0dd5ac1166426f4b1b91cc184ae3797842467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82e0dd5ac1166426f4b1b91cc184ae3797842467", "html_url": "https://github.com/rust-lang/rust/commit/82e0dd5ac1166426f4b1b91cc184ae3797842467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82e0dd5ac1166426f4b1b91cc184ae3797842467/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ccaeed50efc2d55ea05ad4c1178b6ce38bf9aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccaeed50efc2d55ea05ad4c1178b6ce38bf9aca", "html_url": "https://github.com/rust-lang/rust/commit/2ccaeed50efc2d55ea05ad4c1178b6ce38bf9aca"}], "stats": {"total": 35, "additions": 10, "deletions": 25}, "files": [{"sha": "4dc19434c80248c2d1b4be6fe51252899753fcf4", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82e0dd5ac1166426f4b1b91cc184ae3797842467/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e0dd5ac1166426f4b1b91cc184ae3797842467/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=82e0dd5ac1166426f4b1b91cc184ae3797842467", "patch": "@@ -334,15 +334,19 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                 // Add the names of all the items to the trait info.\n                 for item in items {\n                     let item_def_id = self.ast_map.local_def_id(item.id);\n+                    let mut is_static_method = false;\n                     let (def, ns) = match item.node {\n                         hir::ConstTraitItem(..) => (Def::AssociatedConst(item_def_id), ValueNS),\n-                        hir::MethodTraitItem(..) => (Def::Method(item_def_id), ValueNS),\n+                        hir::MethodTraitItem(ref sig, _) => {\n+                            is_static_method = sig.explicit_self.node == hir::SelfStatic;\n+                            (Def::Method(item_def_id), ValueNS)\n+                        }\n                         hir::TypeTraitItem(..) => (Def::AssociatedTy(def_id, item_def_id), TypeNS),\n                     };\n \n                     self.define(module_parent, item.name, ns, (def, item.span, vis));\n \n-                    self.trait_item_map.insert((item.name, def_id), item_def_id);\n+                    self.trait_item_map.insert((item.name, def_id), is_static_method);\n                 }\n             }\n         }\n@@ -464,7 +468,7 @@ impl<'b, 'tcx:'b> Resolver<'b, 'tcx> {\n                             '{}'\",\n                            trait_item_name);\n \n-                    self.trait_item_map.insert((trait_item_name, def_id), trait_item_def.def_id());\n+                    self.trait_item_map.insert((trait_item_name, def_id), false);\n                 }\n \n                 let parent_link = ModuleParentLink(parent, name);"}, {"sha": "16e97e56755e812d2060629d15796621c5e3758c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/82e0dd5ac1166426f4b1b91cc184ae3797842467/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e0dd5ac1166426f4b1b91cc184ae3797842467/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=82e0dd5ac1166426f4b1b91cc184ae3797842467", "patch": "@@ -1016,7 +1016,7 @@ pub struct Resolver<'a, 'tcx: 'a> {\n \n     graph_root: Module<'a>,\n \n-    trait_item_map: FnvHashMap<(Name, DefId), DefId>,\n+    trait_item_map: FnvHashMap<(Name, DefId), bool /* is static method? */>,\n \n     structs: FnvHashMap<DefId, Vec<Name>>,\n \n@@ -2823,25 +2823,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n-        fn is_static_method(this: &Resolver, did: DefId) -> bool {\n-            if let Some(node_id) = this.ast_map.as_local_node_id(did) {\n-                let sig = match this.ast_map.get(node_id) {\n-                    hir_map::NodeTraitItem(trait_item) => match trait_item.node {\n-                        hir::MethodTraitItem(ref sig, _) => sig,\n-                        _ => return false,\n-                    },\n-                    hir_map::NodeImplItem(impl_item) => match impl_item.node {\n-                        hir::ImplItemKind::Method(ref sig, _) => sig,\n-                        _ => return false,\n-                    },\n-                    _ => return false,\n-                };\n-                sig.explicit_self.node == hir::SelfStatic\n-            } else {\n-                this.session.cstore.is_static_method(did)\n-            }\n-        }\n-\n         if let Some(node_id) = self.current_self_type.as_ref().and_then(extract_node_id) {\n             // Look for a field with the same name in the current self_type.\n             match self.def_map.borrow().get(&node_id).map(|d| d.full_def()) {\n@@ -2862,8 +2843,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         // Look for a method in the current trait.\n         if let Some((trait_did, ref trait_ref)) = self.current_trait_ref {\n-            if let Some(&did) = self.trait_item_map.get(&(name, trait_did)) {\n-                if is_static_method(self, did) {\n+            if let Some(&is_static_method) = self.trait_item_map.get(&(name, trait_did)) {\n+                if is_static_method {\n                     return TraitMethod(path_names_to_string(&trait_ref.path, 0));\n                 } else {\n                     return TraitItem;"}]}