{"sha": "b7091e4f5275fd9e48af8083addcb8b577493656", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MDkxZTRmNTI3NWZkOWU0OGFmODA4M2FkZGNiOGI1Nzc0OTM2NTY=", "commit": {"author": {"name": "Andrew Banchich", "email": "andrewbanchich@gmail.com", "date": "2019-09-24T03:20:55Z"}, "committer": {"name": "Andrew Banchich", "email": "andrewbanchich@gmail.com", "date": "2019-10-06T19:58:34Z"}, "message": "rewrite documentation for unimplemented!", "tree": {"sha": "e6ef4218be54f9f3d9cc7ff0509c51e06bcb64ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6ef4218be54f9f3d9cc7ff0509c51e06bcb64ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7091e4f5275fd9e48af8083addcb8b577493656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7091e4f5275fd9e48af8083addcb8b577493656", "html_url": "https://github.com/rust-lang/rust/commit/b7091e4f5275fd9e48af8083addcb8b577493656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7091e4f5275fd9e48af8083addcb8b577493656/comments", "author": {"login": "andrewbanchich", "id": 13824577, "node_id": "MDQ6VXNlcjEzODI0NTc3", "avatar_url": "https://avatars.githubusercontent.com/u/13824577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewbanchich", "html_url": "https://github.com/andrewbanchich", "followers_url": "https://api.github.com/users/andrewbanchich/followers", "following_url": "https://api.github.com/users/andrewbanchich/following{/other_user}", "gists_url": "https://api.github.com/users/andrewbanchich/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewbanchich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewbanchich/subscriptions", "organizations_url": "https://api.github.com/users/andrewbanchich/orgs", "repos_url": "https://api.github.com/users/andrewbanchich/repos", "events_url": "https://api.github.com/users/andrewbanchich/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewbanchich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andrewbanchich", "id": 13824577, "node_id": "MDQ6VXNlcjEzODI0NTc3", "avatar_url": "https://avatars.githubusercontent.com/u/13824577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewbanchich", "html_url": "https://github.com/andrewbanchich", "followers_url": "https://api.github.com/users/andrewbanchich/followers", "following_url": "https://api.github.com/users/andrewbanchich/following{/other_user}", "gists_url": "https://api.github.com/users/andrewbanchich/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewbanchich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewbanchich/subscriptions", "organizations_url": "https://api.github.com/users/andrewbanchich/orgs", "repos_url": "https://api.github.com/users/andrewbanchich/repos", "events_url": "https://api.github.com/users/andrewbanchich/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewbanchich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66bf391c3aabfc77f5f7139fc9e6944f995d574e", "url": "https://api.github.com/repos/rust-lang/rust/commits/66bf391c3aabfc77f5f7139fc9e6944f995d574e", "html_url": "https://github.com/rust-lang/rust/commit/66bf391c3aabfc77f5f7139fc9e6944f995d574e"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "22331b51bc618080230fffb25384ee83607e7b0d", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b7091e4f5275fd9e48af8083addcb8b577493656/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7091e4f5275fd9e48af8083addcb8b577493656/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=b7091e4f5275fd9e48af8083addcb8b577493656", "patch": "@@ -519,54 +519,71 @@ macro_rules! unreachable {\n     });\n }\n \n-/// Indicates unfinished code.\n+/// Indicates unfinished code by panicking with a message of \"not yet implemented\".\n ///\n-/// This can be useful if you are prototyping and are just looking to have your\n-/// code type-check, or if you're implementing a trait that requires multiple\n-/// methods, and you're only planning on using one of them.\n+/// This allows the your code to type-check, which is useful if you are prototyping or\n+/// implementing a trait that requires multiple methods which you don't plan of using all of.\n ///\n /// # Panics\n ///\n-/// This will always [panic!](macro.panic.html)\n+/// This will always [panic!](macro.panic.html) because `unimplemented!` is just a\n+/// shorthand for `panic!` with a fixed, specific message.\n+///\n+/// Like `panic!`, this macro has a second form for displaying custom values.\n ///\n /// # Examples\n ///\n /// Here's an example of some in-progress code. We have a trait `Foo`:\n ///\n /// ```\n /// trait Foo {\n-///     fn bar(&self);\n+///     fn bar(&self) -> u8;\n ///     fn baz(&self);\n+///     fn qux(&self) -> Result<u64, ()>;\n /// }\n /// ```\n ///\n-/// We want to implement `Foo` on one of our types, but we also want to work on\n-/// just `bar()` first. In order for our code to compile, we need to implement\n-/// `baz()`, so we can use `unimplemented!`:\n+/// We want to implement `Foo` for 'MyStruct', but so far we only know how to\n+/// implement the `bar()` function. `baz()` and `qux()` will still need to be defined\n+/// in our implementation of `Foo`, but we can use `unimplemented!` in their definitions\n+/// to allow our code to compile.\n+///\n+/// In the meantime, we want to have our program stop running once these\n+/// unimplemented functions are reached.\n ///\n /// ```\n /// # trait Foo {\n-/// #     fn bar(&self);\n+/// #     fn bar(&self) -> u8;\n /// #     fn baz(&self);\n+/// #     fn qux(&self) -> Result<u64, ()>;\n /// # }\n /// struct MyStruct;\n ///\n /// impl Foo for MyStruct {\n-///     fn bar(&self) {\n-///         // implementation goes here\n+///     fn bar(&self) -> u8 {\n+///         1 + 1\n ///     }\n ///\n ///     fn baz(&self) {\n-///         // let's not worry about implementing baz() for now\n+///         // We aren't sure how to even start writing baz yet,\n+///         // so we have no logic here at all.\n+///         // This will display \"thread 'main' panicked at 'not yet implemented'\".\n ///         unimplemented!();\n ///     }\n+///\n+///     fn qux(&self) -> Result<u64, ()> {\n+///         let n = self.bar();\n+///         // We have some logic here,\n+///         // so we can use unimplemented! to display what we have so far.\n+///         // This will display:\n+///         // \"thread 'main' panicked at 'not yet implemented: we need to divide by 2'\".\n+///         unimplemented!(\"we need to divide by {}\", n);\n+///     }\n /// }\n ///\n /// fn main() {\n ///     let s = MyStruct;\n ///     s.bar();\n-///\n-///     // we aren't even using baz() yet, so this is fine.\n /// }\n /// ```\n #[macro_export]"}]}