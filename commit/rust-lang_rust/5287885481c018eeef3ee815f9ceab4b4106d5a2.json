{"sha": "5287885481c018eeef3ee815f9ceab4b4106d5a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyODc4ODU0ODFjMDE4ZWVlZjNlZTgxNWY5Y2VhYjRiNDEwNmQ1YTI=", "commit": {"author": {"name": "Baoshan Pang", "email": "baoshan.pang@windriver.com", "date": "2019-09-10T21:58:31Z"}, "committer": {"name": "Baoshan Pang", "email": "baoshan.pang@windriver.com", "date": "2019-09-10T22:11:34Z"}, "message": "use randSecure and randABytes", "tree": {"sha": "e43bff810f818bc89e8e0b6326107690efacaf3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e43bff810f818bc89e8e0b6326107690efacaf3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5287885481c018eeef3ee815f9ceab4b4106d5a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5287885481c018eeef3ee815f9ceab4b4106d5a2", "html_url": "https://github.com/rust-lang/rust/commit/5287885481c018eeef3ee815f9ceab4b4106d5a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5287885481c018eeef3ee815f9ceab4b4106d5a2/comments", "author": {"login": "bpangWR", "id": 53950092, "node_id": "MDQ6VXNlcjUzOTUwMDky", "avatar_url": "https://avatars.githubusercontent.com/u/53950092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpangWR", "html_url": "https://github.com/bpangWR", "followers_url": "https://api.github.com/users/bpangWR/followers", "following_url": "https://api.github.com/users/bpangWR/following{/other_user}", "gists_url": "https://api.github.com/users/bpangWR/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpangWR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpangWR/subscriptions", "organizations_url": "https://api.github.com/users/bpangWR/orgs", "repos_url": "https://api.github.com/users/bpangWR/repos", "events_url": "https://api.github.com/users/bpangWR/events{/privacy}", "received_events_url": "https://api.github.com/users/bpangWR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bpangWR", "id": 53950092, "node_id": "MDQ6VXNlcjUzOTUwMDky", "avatar_url": "https://avatars.githubusercontent.com/u/53950092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpangWR", "html_url": "https://github.com/bpangWR", "followers_url": "https://api.github.com/users/bpangWR/followers", "following_url": "https://api.github.com/users/bpangWR/following{/other_user}", "gists_url": "https://api.github.com/users/bpangWR/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpangWR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpangWR/subscriptions", "organizations_url": "https://api.github.com/users/bpangWR/orgs", "repos_url": "https://api.github.com/users/bpangWR/repos", "events_url": "https://api.github.com/users/bpangWR/events{/privacy}", "received_events_url": "https://api.github.com/users/bpangWR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "414d1047291348b5b8bf49e1d76fec978238d89f", "url": "https://api.github.com/repos/rust-lang/rust/commits/414d1047291348b5b8bf49e1d76fec978238d89f", "html_url": "https://github.com/rust-lang/rust/commit/414d1047291348b5b8bf49e1d76fec978238d89f"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "c22880db2bf032cae9cdf6a9beb9d8540f3afa98", "filename": "src/libstd/sys/vxworks/rand.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5287885481c018eeef3ee815f9ceab4b4106d5a2/src%2Flibstd%2Fsys%2Fvxworks%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5287885481c018eeef3ee815f9ceab4b4106d5a2/src%2Flibstd%2Fsys%2Fvxworks%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Frand.rs?ref=5287885481c018eeef3ee815f9ceab4b4106d5a2", "patch": "@@ -14,17 +14,24 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n mod imp {\n     use libc;\n     use crate::io;\n-\n-    extern \"C\" {\n-        fn randBytes (randBuf: *mut libc::c_uchar,\n-                      numOfBytes: libc::c_int) -> libc::c_int;\n-    }\n+    use core::sync::atomic::{AtomicBool, Ordering::Relaxed};\n \n     pub fn fill_bytes(v: &mut [u8]) {\n+        static RNG_INIT: AtomicBool = AtomicBool::new(false);\n+        while !RNG_INIT.load(Relaxed) {\n+            let ret = unsafe { libc::randSecure() };\n+            if ret < 0 {\n+                panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n+            } else if ret > 0 {\n+                RNG_INIT.store(true, Relaxed);\n+                break;\n+            }\n+            unsafe { libc::usleep(10) };\n+        }\n         let ret = unsafe {\n-            randBytes(v.as_mut_ptr() as *mut libc::c_uchar, v.len() as libc::c_int)\n+            libc::randABytes(v.as_mut_ptr() as *mut libc::c_uchar, v.len() as libc::c_int)\n         };\n-        if ret == -1 {\n+        if ret < 0 {\n             panic!(\"couldn't generate random bytes: {}\", io::Error::last_os_error());\n         }\n     }"}]}