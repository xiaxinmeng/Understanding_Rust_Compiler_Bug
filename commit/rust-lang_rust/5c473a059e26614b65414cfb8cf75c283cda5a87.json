{"sha": "5c473a059e26614b65414cfb8cf75c283cda5a87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNDczYTA1OWUyNjYxNGI2NTQxNGNmYjhjZjc1YzI4M2NkYTVhODc=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-13T23:27:54Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-14T05:43:40Z"}, "message": "Don't print block exit state if unchanged", "tree": {"sha": "b581d266387cee8ca41725801299c77427ce2025", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b581d266387cee8ca41725801299c77427ce2025"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c473a059e26614b65414cfb8cf75c283cda5a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c473a059e26614b65414cfb8cf75c283cda5a87", "html_url": "https://github.com/rust-lang/rust/commit/5c473a059e26614b65414cfb8cf75c283cda5a87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c473a059e26614b65414cfb8cf75c283cda5a87/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ed25f069768c046464e68fd382c867ddb04a1e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed25f069768c046464e68fd382c867ddb04a1e3", "html_url": "https://github.com/rust-lang/rust/commit/2ed25f069768c046464e68fd382c867ddb04a1e3"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "157526d3c51adc6b5f262322f8a032bee13a167f", "filename": "src/librustc_mir/dataflow/generic/graphviz.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5c473a059e26614b65414cfb8cf75c283cda5a87/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c473a059e26614b65414cfb8cf75c283cda5a87/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fgraphviz.rs?ref=5c473a059e26614b65414cfb8cf75c283cda5a87", "patch": "@@ -195,6 +195,8 @@ where\n         // C: Entry state\n         self.bg = Background::Light;\n         self.results.seek_to_block_start(block);\n+        let block_entry_state = self.results.get().clone();\n+\n         self.write_row_with_full_state(w, \"\", \"(on entry)\")?;\n \n         // D: Statement transfer functions\n@@ -213,29 +215,42 @@ where\n         self.write_row_for_location(w, \"T\", &terminator_str, terminator_loc)?;\n \n         // F: Exit state\n+\n+        // Write the full dataflow state immediately after the terminator if it differs from the\n+        // state at block entry.\n         self.results.seek_after(terminator_loc);\n-        if let mir::TerminatorKind::Call { destination: Some(_), .. } = &terminator.kind {\n-            self.write_row_with_full_state(w, \"\", \"(on unwind)\")?;\n-\n-            let num_state_columns = self.num_state_columns();\n-            self.write_row(w, \"\", \"(on successful return)\", |this, w, fmt| {\n-                write!(\n-                    w,\n-                    r#\"<td balign=\"left\" colspan=\"{colspan}\" {fmt} align=\"left\">\"#,\n-                    colspan = num_state_columns,\n-                    fmt = fmt,\n-                )?;\n-\n-                let state_on_unwind = this.results.get().clone();\n-                this.results.seek_after_assume_call_returns(terminator_loc);\n-                write_diff(w, this.results.analysis(), &state_on_unwind, this.results.get())?;\n-\n-                write!(w, \"</td>\")\n-            })?;\n-        } else {\n-            self.write_row_with_full_state(w, \"\", \"(on exit)\")?;\n+        if self.results.get() != &block_entry_state {\n+            let after_terminator_name = match terminator.kind {\n+                mir::TerminatorKind::Call { destination: Some(_), .. } => \"(on unwind)\",\n+                _ => \"(on exit)\",\n+            };\n+\n+            self.write_row_with_full_state(w, \"\", after_terminator_name)?;\n         }\n \n+        // Write any changes caused by terminator-specific effects\n+        match terminator.kind {\n+            mir::TerminatorKind::Call { destination: Some(_), .. } => {\n+                let num_state_columns = self.num_state_columns();\n+                self.write_row(w, \"\", \"(on successful return)\", |this, w, fmt| {\n+                    write!(\n+                        w,\n+                        r#\"<td balign=\"left\" colspan=\"{colspan}\" {fmt} align=\"left\">\"#,\n+                        colspan = num_state_columns,\n+                        fmt = fmt,\n+                    )?;\n+\n+                    let state_on_unwind = this.results.get().clone();\n+                    this.results.seek_after_assume_call_returns(terminator_loc);\n+                    write_diff(w, this.results.analysis(), &state_on_unwind, this.results.get())?;\n+\n+                    write!(w, \"</td>\")\n+                })?;\n+            }\n+\n+            _ => {}\n+        };\n+\n         write!(w, \"</table>\")\n     }\n "}]}