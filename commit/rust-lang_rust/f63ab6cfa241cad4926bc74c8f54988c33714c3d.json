{"sha": "f63ab6cfa241cad4926bc74c8f54988c33714c3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2M2FiNmNmYTI0MWNhZDQ5MjZiYzc0YzhmNTQ5ODhjMzM3MTRjM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-02T23:16:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-02T23:16:40Z"}, "message": "Auto merge of #87628 - estebank:unmet-explicit-lifetime-bound, r=oli-obk\n\nPoint at unmet explicit lifetime obligation bound\n\nr? `@oli-obk`\n\nSplit off of #85799.", "tree": {"sha": "7ede6423df5ef142ac2e70bf7c5b7873640bf700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ede6423df5ef142ac2e70bf7c5b7873640bf700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f63ab6cfa241cad4926bc74c8f54988c33714c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f63ab6cfa241cad4926bc74c8f54988c33714c3d", "html_url": "https://github.com/rust-lang/rust/commit/f63ab6cfa241cad4926bc74c8f54988c33714c3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f63ab6cfa241cad4926bc74c8f54988c33714c3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3b1c12becebd21d88ca9f4364d7db8d1d380c18", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b1c12becebd21d88ca9f4364d7db8d1d380c18", "html_url": "https://github.com/rust-lang/rust/commit/e3b1c12becebd21d88ca9f4364d7db8d1d380c18"}, {"sha": "e5d42af6ba805f04c260433d2ac3e64f52faebcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d42af6ba805f04c260433d2ac3e64f52faebcb", "html_url": "https://github.com/rust-lang/rust/commit/e5d42af6ba805f04c260433d2ac3e64f52faebcb"}], "stats": {"total": 293, "additions": 238, "deletions": 55}, "files": [{"sha": "d5e1c061bf0bab92f8c1c9b8ca551a27e33d329a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -89,16 +89,17 @@ pub(super) fn note_and_explain_region(\n     prefix: &str,\n     region: ty::Region<'tcx>,\n     suffix: &str,\n+    alt_span: Option<Span>,\n ) {\n     let (description, span) = match *region {\n         ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReStatic => {\n-            msg_span_from_free_region(tcx, region)\n+            msg_span_from_free_region(tcx, region, alt_span)\n         }\n \n-        ty::ReEmpty(ty::UniverseIndex::ROOT) => (\"the empty lifetime\".to_owned(), None),\n+        ty::ReEmpty(ty::UniverseIndex::ROOT) => (\"the empty lifetime\".to_owned(), alt_span),\n \n         // uh oh, hope no user ever sees THIS\n-        ty::ReEmpty(ui) => (format!(\"the empty lifetime in universe {:?}\", ui), None),\n+        ty::ReEmpty(ui) => (format!(\"the empty lifetime in universe {:?}\", ui), alt_span),\n \n         ty::RePlaceholder(_) => return,\n \n@@ -108,7 +109,7 @@ pub(super) fn note_and_explain_region(\n         // We shouldn't really be having unification failures with ReVar\n         // and ReLateBound though.\n         ty::ReVar(_) | ty::ReLateBound(..) | ty::ReErased => {\n-            (format!(\"lifetime {:?}\", region), None)\n+            (format!(\"lifetime {:?}\", region), alt_span)\n         }\n     };\n \n@@ -122,22 +123,23 @@ pub(super) fn note_and_explain_free_region(\n     region: ty::Region<'tcx>,\n     suffix: &str,\n ) {\n-    let (description, span) = msg_span_from_free_region(tcx, region);\n+    let (description, span) = msg_span_from_free_region(tcx, region, None);\n \n     emit_msg_span(err, prefix, description, span, suffix);\n }\n \n fn msg_span_from_free_region(\n     tcx: TyCtxt<'tcx>,\n     region: ty::Region<'tcx>,\n+    alt_span: Option<Span>,\n ) -> (String, Option<Span>) {\n     match *region {\n         ty::ReEarlyBound(_) | ty::ReFree(_) => {\n             msg_span_from_early_bound_and_free_regions(tcx, region)\n         }\n-        ty::ReStatic => (\"the static lifetime\".to_owned(), None),\n-        ty::ReEmpty(ty::UniverseIndex::ROOT) => (\"an empty lifetime\".to_owned(), None),\n-        ty::ReEmpty(ui) => (format!(\"an empty lifetime in universe {:?}\", ui), None),\n+        ty::ReStatic => (\"the static lifetime\".to_owned(), alt_span),\n+        ty::ReEmpty(ty::UniverseIndex::ROOT) => (\"an empty lifetime\".to_owned(), alt_span),\n+        ty::ReEmpty(ui) => (format!(\"an empty lifetime in universe {:?}\", ui), alt_span),\n         _ => bug!(\"{:?}\", region),\n     }\n }\n@@ -319,6 +321,7 @@ pub fn unexpected_hidden_region_diagnostic(\n                 &format!(\"hidden type `{}` captures \", hidden_ty),\n                 hidden_region,\n                 \"\",\n+                None,\n             );\n         }\n     }\n@@ -2303,8 +2306,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     &format!(\"{} must be valid for \", labeled_user_string),\n                     sub,\n                     \"...\",\n+                    None,\n                 );\n-                if let Some(infer::RelateParamBound(_, t)) = origin {\n+                if let Some(infer::RelateParamBound(_, t, _)) = origin {\n                     let return_impl_trait = self\n                         .in_progress_typeck_results\n                         .map(|typeck_results| typeck_results.borrow().hir_owner)\n@@ -2350,6 +2354,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             \"first, the lifetime cannot outlive \",\n             sup_region,\n             \"...\",\n+            None,\n         );\n \n         debug!(\"report_sub_sup_conflict: var_origin={:?}\", var_origin);\n@@ -2376,6 +2381,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         \"...but the lifetime must also be valid for \",\n                         sub_region,\n                         \"...\",\n+                        None,\n                     );\n                     err.span_note(\n                         sup_trace.cause.span,\n@@ -2397,6 +2403,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             \"but, the lifetime must be valid for \",\n             sub_region,\n             \"...\",\n+            None,\n         );\n \n         self.note_region_origin(&mut err, &sub_origin);"}, {"sha": "c60a7149e40eb30bb85f019df45857eff2b0f3ca", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         multi_span\n             .push_span_label(binding_span, \"introduces a `'static` lifetime requirement\".into());\n         err.span_note(multi_span, \"because this has an unmet lifetime requirement\");\n-        note_and_explain_region(self.tcx(), &mut err, \"\", sup, \"...\");\n+        note_and_explain_region(self.tcx(), &mut err, \"\", sup, \"...\", Some(binding_span));\n         if let Some(impl_node) = self.tcx().hir().get_if_local(*impl_def_id) {\n             // If an impl is local, then maybe this isn't what they want. Try to\n             // be as helpful as possible with implicit lifetimes."}, {"sha": "4bc59a4baf5cae5c1bddb5c0a1ffbf05d711c41f", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -74,14 +74,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     ),\n                 );\n             }\n-            infer::RelateParamBound(span, t) => {\n+            infer::RelateParamBound(span, t, opt_span) => {\n                 label_or_note(\n                     span,\n                     &format!(\n-                        \"...so that the type `{}` will meet its required lifetime bounds\",\n-                        self.ty_to_string(t)\n+                        \"...so that the type `{}` will meet its required lifetime bounds{}\",\n+                        self.ty_to_string(t),\n+                        if opt_span.is_some() { \"...\" } else { \"\" },\n                     ),\n                 );\n+                if let Some(span) = opt_span {\n+                    err.span_note(span, \"...that is required by this bound\");\n+                }\n             }\n             infer::RelateRegionParamBound(span) => {\n                 label_or_note(\n@@ -117,6 +121,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             \"\",\n                             sup,\n                             \" doesn't meet the lifetime requirements\",\n+                            None,\n                         );\n                     }\n                     (_, ty::RePlaceholder(_)) => {\n@@ -126,16 +131,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             \"the required lifetime does not necessarily outlive \",\n                             sub,\n                             \"\",\n+                            None,\n                         );\n                     }\n                     _ => {\n-                        note_and_explain_region(self.tcx, &mut err, \"\", sup, \"...\");\n+                        note_and_explain_region(self.tcx, &mut err, \"\", sup, \"...\", None);\n                         note_and_explain_region(\n                             self.tcx,\n                             &mut err,\n                             \"...does not necessarily outlive \",\n                             sub,\n                             \"\",\n+                            None,\n                         );\n                     }\n                 }\n@@ -154,13 +161,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"...the reference is valid for \",\n                     sub,\n                     \"...\",\n+                    None,\n                 );\n                 note_and_explain_region(\n                     self.tcx,\n                     &mut err,\n                     \"...but the borrowed content is only valid for \",\n                     sup,\n                     \"\",\n+                    None,\n                 );\n                 err\n             }\n@@ -179,13 +188,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"...the borrowed pointer is valid for \",\n                     sub,\n                     \"...\",\n+                    None,\n                 );\n                 note_and_explain_region(\n                     self.tcx,\n                     &mut err,\n                     &format!(\"...but `{}` is only valid for \", var_name),\n                     sup,\n                     \"\",\n+                    None,\n                 );\n                 err\n             }\n@@ -197,17 +208,25 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"lifetime of the source pointer does not outlive lifetime bound of the \\\n                      object type\"\n                 );\n-                note_and_explain_region(self.tcx, &mut err, \"object type is valid for \", sub, \"\");\n+                note_and_explain_region(\n+                    self.tcx,\n+                    &mut err,\n+                    \"object type is valid for \",\n+                    sub,\n+                    \"\",\n+                    None,\n+                );\n                 note_and_explain_region(\n                     self.tcx,\n                     &mut err,\n                     \"source pointer is only valid for \",\n                     sup,\n                     \"\",\n+                    None,\n                 );\n                 err\n             }\n-            infer::RelateParamBound(span, ty) => {\n+            infer::RelateParamBound(span, ty, opt_span) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n                     span,\n@@ -216,10 +235,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     self.ty_to_string(ty)\n                 );\n                 match *sub {\n-                    ty::ReStatic => {\n-                        note_and_explain_region(self.tcx, &mut err, \"type must satisfy \", sub, \"\")\n-                    }\n-                    _ => note_and_explain_region(self.tcx, &mut err, \"type must outlive \", sub, \"\"),\n+                    ty::ReStatic => note_and_explain_region(\n+                        self.tcx,\n+                        &mut err,\n+                        \"type must satisfy \",\n+                        sub,\n+                        if opt_span.is_some() { \" as required by this binding\" } else { \"\" },\n+                        opt_span,\n+                    ),\n+                    _ => note_and_explain_region(\n+                        self.tcx,\n+                        &mut err,\n+                        \"type must outlive \",\n+                        sub,\n+                        if opt_span.is_some() { \" as required by this binding\" } else { \"\" },\n+                        opt_span,\n+                    ),\n                 }\n                 err\n             }\n@@ -232,13 +263,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"lifetime parameter instantiated with \",\n                     sup,\n                     \"\",\n+                    None,\n                 );\n                 note_and_explain_region(\n                     self.tcx,\n                     &mut err,\n                     \"but lifetime parameter must outlive \",\n                     sub,\n                     \"\",\n+                    None,\n                 );\n                 err\n             }\n@@ -255,6 +288,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"the return value is only valid for \",\n                     sup,\n                     \"\",\n+                    None,\n                 );\n                 err\n             }\n@@ -266,8 +300,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"a value of type `{}` is borrowed for too long\",\n                     self.ty_to_string(ty)\n                 );\n-                note_and_explain_region(self.tcx, &mut err, \"the type is valid for \", sub, \"\");\n-                note_and_explain_region(self.tcx, &mut err, \"but the borrow lasts for \", sup, \"\");\n+                note_and_explain_region(\n+                    self.tcx,\n+                    &mut err,\n+                    \"the type is valid for \",\n+                    sub,\n+                    \"\",\n+                    None,\n+                );\n+                note_and_explain_region(\n+                    self.tcx,\n+                    &mut err,\n+                    \"but the borrow lasts for \",\n+                    sup,\n+                    \"\",\n+                    None,\n+                );\n                 err\n             }\n             infer::ReferenceOutlivesReferent(ty, span) => {\n@@ -278,13 +326,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"in type `{}`, reference has a longer lifetime than the data it references\",\n                     self.ty_to_string(ty)\n                 );\n-                note_and_explain_region(self.tcx, &mut err, \"the pointer is valid for \", sub, \"\");\n+                note_and_explain_region(\n+                    self.tcx,\n+                    &mut err,\n+                    \"the pointer is valid for \",\n+                    sub,\n+                    \"\",\n+                    None,\n+                );\n                 note_and_explain_region(\n                     self.tcx,\n                     &mut err,\n                     \"but the referenced data is only valid for \",\n                     sup,\n                     \"\",\n+                    None,\n                 );\n                 err\n             }"}, {"sha": "f0d63f512fcbc2e4341b94e9ffabd3db7e94931c", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -375,7 +375,7 @@ pub enum SubregionOrigin<'tcx> {\n \n     /// Some type parameter was instantiated with the given type,\n     /// and that type must outlive some region.\n-    RelateParamBound(Span, Ty<'tcx>),\n+    RelateParamBound(Span, Ty<'tcx>, Option<Span>),\n \n     /// The given region parameter was instantiated with a region\n     /// that must outlive some other region.\n@@ -1705,7 +1705,7 @@ impl<'tcx> SubregionOrigin<'tcx> {\n         match *self {\n             Subtype(ref a) => a.span(),\n             RelateObjectBound(a) => a,\n-            RelateParamBound(a, _) => a,\n+            RelateParamBound(a, ..) => a,\n             RelateRegionParamBound(a) => a,\n             Reborrow(a) => a,\n             ReborrowUpvar(a, _) => a,"}, {"sha": "437083c68dceca7c7d6243ab08883a6cc91f0803", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -64,7 +64,7 @@ use crate::infer::outlives::verify::VerifyBoundCx;\n use crate::infer::{\n     self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, UndoLog, VerifyBound,\n };\n-use crate::traits::ObligationCause;\n+use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n@@ -99,7 +99,14 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         cause: &ObligationCause<'tcx>,\n     ) {\n         let origin = SubregionOrigin::from_obligation_cause(cause, || {\n-            infer::RelateParamBound(cause.span, sup_type)\n+            infer::RelateParamBound(\n+                cause.span,\n+                sup_type,\n+                match cause.code.peel_derives() {\n+                    ObligationCauseCode::BindingObligation(_, span) => Some(*span),\n+                    _ => None,\n+                },\n+            )\n         });\n \n         self.register_region_obligation("}, {"sha": "446a0f8e72fbd9bf1c869589879e099db7c7a94d", "filename": "compiler/rustc_mir/src/borrow_check/type_check/constraint_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n             GenericArgKind::Type(t1) => {\n                 // we don't actually use this for anything, but\n                 // the `TypeOutlives` code needs an origin.\n-                let origin = infer::RelateParamBound(DUMMY_SP, t1);\n+                let origin = infer::RelateParamBound(DUMMY_SP, t1, None);\n \n                 TypeOutlives::new(\n                     &mut *self,"}, {"sha": "2bccec458944130b655b71983e0f8f84a51f3ade", "filename": "src/test/ui/feature-gates/feature-gate-infer_static_outlives_requirements.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -4,7 +4,13 @@ error[E0310]: the parameter type `U` may not live long enough\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n-   |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n+   |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/feature-gate-infer_static_outlives_requirements.rs:7:15\n+   |\n+LL | struct Bar<T: 'static> {\n+   |               ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f5b92beb3b225e6afaaa7c349bd82f2134d378da", "filename": "src/test/ui/generic-associated-types/issue-86483.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -11,7 +11,13 @@ LL | | {\n ...  |\n LL | |\n LL | | }\n-   | |_^ ...so that the type `T` will meet its required lifetime bounds\n+   | |_^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/issue-86483.rs:7:16\n+   |\n+LL |     for<'a> T: 'a,\n+   |                ^^\n \n error[E0311]: the parameter type `T` may not live long enough\n   --> $DIR/issue-86483.rs:9:5\n@@ -20,7 +26,13 @@ LL | pub trait IceIce<T>\n    |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n ...\n LL |     type Ice<'v>: IntoIterator<Item = &'v T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/issue-86483.rs:7:16\n+   |\n+LL |     for<'a> T: 'a,\n+   |                ^^\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/issue-86483.rs:9:32"}, {"sha": "8237d3718c298dc80d172fa11f2baa4fad45a861", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -4,7 +4,7 @@ error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n LL |     type Item<'a> = &'b ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: type must outlive the lifetime `'a` as defined on the associated item at 8:15\n+note: type must outlive the lifetime `'a` as defined on the associated item at 8:15 as required by this binding\n   --> $DIR/unsatisfied-outlives-bound.rs:8:15\n    |\n LL |     type Item<'a> = &'b ();\n@@ -16,7 +16,11 @@ error[E0477]: the type `&'a ()` does not fulfill the required lifetime\n LL |     type Item<'a> = &'a ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/unsatisfied-outlives-bound.rs:13:20\n+   |\n+LL |     type Item<'a>: 'static;\n+   |                    ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e917958c05e40254e5ef59d07ede77b30b32ed7a", "filename": "src/test/ui/issues/issue-54943.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -4,7 +4,11 @@ error[E0477]: the type `&'a u32` does not fulfill the required lifetime\n LL |     let x = foo::<&'a u32>();\n    |             ^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/issue-54943.rs:1:11\n+   |\n+LL | fn foo<T: 'static>() { }\n+   |           ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b2b709760807169b37c5adeb29faad37c3209447", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -16,7 +16,11 @@ error[E0477]: the type `&'a (dyn Dummy + Sync + 'a)` does not fulfill the requir\n LL |     assert_send::<&'a (dyn Dummy + Sync)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/kindck-send-object1.rs:5:23\n+   |\n+LL | fn assert_send<T:Send+'static>() { }\n+   |                       ^^^^^^^\n \n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5"}, {"sha": "88253bad194c979be74a2594861b764fd4498bac", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -5,7 +5,12 @@ LL |     bar::<T::Output>()\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'a>>::Output: 'a`...\n-   = note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds\n+   = note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds...\n+note: ...that is required by this bound\n+  --> $DIR/projection-where-clause-env-wrong-bound.rs:29:8\n+   |\n+LL |     T: 'a,\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "9f7fc030aa981613176777600ee7a0e8724d6da3", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -5,7 +5,12 @@ LL |     bar::<<T as MyTrait<'a>>::Output>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'a>>::Output: 'a`...\n-   = note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds\n+   = note: ...so that the type `<T as MyTrait<'a>>::Output` will meet its required lifetime bounds...\n+note: ...that is required by this bound\n+  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:20:8\n+   |\n+LL |     T: 'a,\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "52802848d563c7db642fb33fc4adcc196ad32eb8", "filename": "src/test/ui/regions/regions-assoc-type-region-bound-in-trait-not-met.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-region-bound-in-trait-not-met.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -4,15 +4,19 @@ error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n LL |     type Value = &'a i32;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:5:17\n+   |\n+LL |     type Value: 'a;\n+   |                 ^^\n \n error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:20:5\n    |\n LL |     type Value = &'a i32;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: type must outlive the lifetime `'b` as defined on the impl at 19:10\n+note: type must outlive the lifetime `'b` as defined on the impl at 19:10 as required by this binding\n   --> $DIR/regions-assoc-type-region-bound-in-trait-not-met.rs:19:10\n    |\n LL | impl<'a, 'b> Foo<'b> for &'a i64 {"}, {"sha": "a03210db6df03fd011a6b459c6da3f9d0b586949", "filename": "src/test/ui/regions/regions-assoc-type-static-bound-in-trait-not-met.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-static-bound-in-trait-not-met.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -4,7 +4,11 @@ error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n LL |     type Value = &'a i32;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/regions-assoc-type-static-bound-in-trait-not-met.rs:5:17\n+   |\n+LL |     type Value: 'static;\n+   |                 ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "68b90eee72d6d8ef41ded713bd624e76f3267c48", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.stderr", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -4,47 +4,71 @@ error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n LL |     assert_send::<&'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+   |\n+LL | fn assert_send<T:'static>() { }\n+   |                  ^^^^^^^\n \n error[E0477]: the type `&'a str` does not fulfill the required lifetime\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:26:5\n    |\n LL |     assert_send::<&'a str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+   |\n+LL | fn assert_send<T:'static>() { }\n+   |                  ^^^^^^^\n \n error[E0477]: the type `&'a [isize]` does not fulfill the required lifetime\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:30:5\n    |\n LL |     assert_send::<&'a [isize]>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+   |\n+LL | fn assert_send<T:'static>() { }\n+   |                  ^^^^^^^\n \n error[E0477]: the type `Box<&'a isize>` does not fulfill the required lifetime\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:44:5\n    |\n LL |     assert_send::<Box<&'a isize>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+   |\n+LL | fn assert_send<T:'static>() { }\n+   |                  ^^^^^^^\n \n error[E0477]: the type `*const &'a isize` does not fulfill the required lifetime\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:55:5\n    |\n LL |     assert_send::<*const &'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+   |\n+LL | fn assert_send<T:'static>() { }\n+   |                  ^^^^^^^\n \n error[E0477]: the type `*mut &'a isize` does not fulfill the required lifetime\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:59:5\n    |\n LL |     assert_send::<*mut &'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type must satisfy the static lifetime\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:6:18\n+   |\n+LL | fn assert_send<T:'static>() { }\n+   |                  ^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "5b692cdcc0ecc77ebc6444265cb2730e7b9c092a", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -23,7 +23,13 @@ LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n-   |         ^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |         ^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/regions-close-object-into-object-5.rs:9:17\n+   |\n+LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n+   |                 ^^\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11"}, {"sha": "97a3947bc0a2a049f7e213612ffc7bc6fab180a5", "filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -5,7 +5,12 @@ LL |         check_bound(x, self)\n    |         ^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n-   = note: ...so that the type `Self` will meet its required lifetime bounds\n+   = note: ...so that the type `Self` will meet its required lifetime bounds...\n+note: ...that is required by this bound\n+  --> $DIR/regions-infer-bound-from-trait-self.rs:12:21\n+   |\n+LL | fn check_bound<'a,A:'a>(x: Inv<'a>, a: A) { }\n+   |                     ^^\n \n error: aborting due to previous error\n "}, {"sha": "fd1090d2dbd170d4c0835a05ca2e07ccf8494647", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -4,15 +4,27 @@ error[E0309]: the parameter type `A` may not live long enough\n LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n    |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/regions-infer-bound-from-trait.rs:12:21\n+   |\n+LL | fn check_bound<'a,A:'a>(x: Inv<'a>, a: A) { }\n+   |                     ^^\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n    |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`\n LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/regions-infer-bound-from-trait.rs:12:21\n+   |\n+LL | fn check_bound<'a,A:'a>(x: Inv<'a>, a: A) { }\n+   |                     ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1f387a042e66672698a5d0f4e44d691f69a45686", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -4,7 +4,13 @@ error[E0310]: the parameter type `U` may not live long enough\n LL | struct Foo<U> {\n    |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n-   |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n+   |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/dont-infer-static.rs:10:15\n+   |\n+LL | struct Bar<T: 'static> {\n+   |               ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "71caeefabac3468cb3fc39538c07e8ceca6f3217", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -12,7 +12,13 @@ error[E0309]: the parameter type `T` may not live long enough\n LL | impl<'a, T> Trait<'a, T> for u32 {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = RefOk<'a, T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/regions-struct-not-wf.rs:16:20\n+   |\n+LL | struct RefOk<'a, T:'a> {\n+   |                    ^^\n \n error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-struct-not-wf.rs:25:5"}, {"sha": "65aab97d3d71612521a0531aa481d289e07f2615", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -9,7 +9,7 @@ fn foo(d: impl Debug + 'static) {\n //~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds\n }\n \n-fn bar(d: impl Debug + 'static) {\n+fn bar(d: impl Debug + 'static) { //~ NOTE ...that is required by this bound\n     println!(\"{:?}\", d)\n }\n "}, {"sha": "fb1848d130f772914efc8750925a6cf51d34a6ed", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -9,7 +9,7 @@ fn foo(d: impl Debug) {\n //~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds\n }\n \n-fn bar(d: impl Debug + 'static) {\n+fn bar(d: impl Debug + 'static) { //~ NOTE ...that is required by this bound\n     println!(\"{:?}\", d)\n }\n "}, {"sha": "e4a247993c29b67df00219f1961e5f1bb888acfe", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63ab6cfa241cad4926bc74c8f54988c33714c3d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr?ref=f63ab6cfa241cad4926bc74c8f54988c33714c3d", "patch": "@@ -5,7 +5,13 @@ LL | fn foo(d: impl Debug) {\n    |           ---------- help: consider adding an explicit lifetime bound...: `impl Debug + 'static`\n LL |\n LL |     bar(d);\n-   |     ^^^ ...so that the type `impl Debug` will meet its required lifetime bounds\n+   |     ^^^ ...so that the type `impl Debug` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/suggest-impl-trait-lifetime.rs:12:24\n+   |\n+LL | fn bar(d: impl Debug + 'static) {\n+   |                        ^^^^^^^\n \n error: aborting due to previous error\n "}]}