{"sha": "be97cbfdb4dc83b07bfc0e2fd6f8d2d3d90a5c65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOTdjYmZkYjRkYzgzYjA3YmZjMGUyZmQ2ZjhkMmQzZDkwYTVjNjU=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-14T01:10:08Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-14T01:10:08Z"}, "message": "Adjusted the completion lookups to filter by just the name.", "tree": {"sha": "0f212e855d86dc0c372f0d6a517bf73868978b6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f212e855d86dc0c372f0d6a517bf73868978b6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be97cbfdb4dc83b07bfc0e2fd6f8d2d3d90a5c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be97cbfdb4dc83b07bfc0e2fd6f8d2d3d90a5c65", "html_url": "https://github.com/rust-lang/rust/commit/be97cbfdb4dc83b07bfc0e2fd6f8d2d3d90a5c65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be97cbfdb4dc83b07bfc0e2fd6f8d2d3d90a5c65/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bc9e623747b462ab11a4660a19a50bc38313875", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc9e623747b462ab11a4660a19a50bc38313875", "html_url": "https://github.com/rust-lang/rust/commit/0bc9e623747b462ab11a4660a19a50bc38313875"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "bff19c5bba427089a965e651781501c8a388cf68", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 44, "deletions": 29, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/be97cbfdb4dc83b07bfc0e2fd6f8d2d3d90a5c65/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be97cbfdb4dc83b07bfc0e2fd6f8d2d3d90a5c65/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=be97cbfdb4dc83b07bfc0e2fd6f8d2d3d90a5c65", "patch": "@@ -79,16 +79,16 @@ fn add_function_impl(\n ) {\n     let display = FunctionSignature::from_hir(ctx.db, func.clone());\n \n-    let func_name = func.name(ctx.db);\n+    let fn_name = func.name(ctx.db).to_string();\n \n     let label = if func.params(ctx.db).len() > 0 {\n-        format!(\"fn {}(..)\", func_name.to_string())\n+        format!(\"fn {}(..)\", fn_name)\n     } else {\n-        format!(\"fn {}()\", func_name.to_string())\n+        format!(\"fn {}()\", fn_name)\n     };\n \n     let builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label.clone())\n-        .lookup_by(label)\n+        .lookup_by(fn_name)\n         .set_documentation(func.docs(ctx.db));\n \n     let completion_kind = if func.has_self_param(ctx.db) {\n@@ -111,10 +111,13 @@ fn add_type_alias_impl(\n     ctx: &CompletionContext,\n     type_alias: &hir::TypeAlias,\n ) {\n-    let snippet = format!(\"type {} = \", type_alias.name(ctx.db).to_string());\n+    let alias_name = type_alias.name(ctx.db).to_string();\n+\n+    let snippet = format!(\"type {} = \", alias_name);\n \n     CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n         .text_edit(TextEdit::replace(type_def_node.text_range(), snippet))\n+        .lookup_by(alias_name)\n         .kind(CompletionItemKind::TypeAlias)\n         .set_documentation(type_alias.docs(ctx.db))\n         .add_to(acc);\n@@ -126,13 +129,18 @@ fn add_const_impl(\n     ctx: &CompletionContext,\n     const_: &hir::Const,\n ) {\n-    let snippet = make_const_compl_syntax(&const_.source(ctx.db).value);\n+    let const_name = const_.name(ctx.db).map(|n| n.to_string());\n \n-    CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n-        .text_edit(TextEdit::replace(const_def_node.text_range(), snippet))\n-        .kind(CompletionItemKind::Const)\n-        .set_documentation(const_.docs(ctx.db))\n-        .add_to(acc);\n+    if let Some(const_name) = const_name {\n+        let snippet = make_const_compl_syntax(&const_.source(ctx.db).value);\n+\n+        CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n+            .text_edit(TextEdit::replace(const_def_node.text_range(), snippet))\n+            .lookup_by(const_name)\n+            .kind(CompletionItemKind::Const)\n+            .set_documentation(const_.docs(ctx.db))\n+            .add_to(acc);\n+    }\n }\n \n fn make_const_compl_syntax(const_: &ast::ConstDef) -> String {\n@@ -178,18 +186,19 @@ mod tests {\n             struct T1;\n \n             impl Test for T1 {\n-                fn<|>\n+                fn f<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"fn foo()\",\n-                source_range: [140; 140),\n-                delete: [138; 140),\n+                source_range: [141; 142),\n+                delete: [138; 142),\n                 insert: \"fn foo() {}\",\n                 kind: Function,\n+                lookup: \"foo\",\n             },\n         ]\n         \"###);\n@@ -201,26 +210,27 @@ mod tests {\n             r\"\n             trait Test {\n                 fn foo();\n-                fn bar();\n+                fn foo_bar();\n             }\n \n             struct T1;\n \n             impl Test for T1 {\n                 fn foo() {}\n \n-                fn<|>\n+                fn f<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n-                label: \"fn bar()\",\n-                source_range: [195; 195),\n-                delete: [193; 195),\n-                insert: \"fn bar() {}\",\n+                label: \"fn foo_bar()\",\n+                source_range: [200; 201),\n+                delete: [197; 201),\n+                insert: \"fn foo_bar() {}\",\n                 kind: Function,\n+                lookup: \"foo_bar\",\n             },\n         ]\n         \"###);\n@@ -237,18 +247,19 @@ mod tests {\n             struct T1;\n \n             impl Test for T1 {\n-                fn<|>\n+                fn f<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"fn foo()\",\n-                source_range: [143; 143),\n-                delete: [141; 143),\n+                source_range: [144; 145),\n+                delete: [141; 145),\n                 insert: \"fn foo<T>() {}\",\n                 kind: Function,\n+                lookup: \"foo\",\n             },\n         ]\n         \"###);\n@@ -265,18 +276,19 @@ mod tests {\n             struct T1;\n \n             impl Test for T1 {\n-                fn<|>\n+                fn f<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"fn foo()\",\n-                source_range: [165; 165),\n-                delete: [163; 165),\n+                source_range: [166; 167),\n+                delete: [163; 167),\n                 insert: \"fn foo<T>()\\nwhere T: Into<String> {}\",\n                 kind: Function,\n+                lookup: \"foo\",\n             },\n         ]\n         \"###);\n@@ -291,18 +303,19 @@ mod tests {\n             }\n \n             impl Test for () {\n-                type<|>\n+                type S<|>\n             }\n             \",\n         );\n         assert_debug_snapshot!(completions, @r###\"\n         [\n             CompletionItem {\n                 label: \"type SomeType = \",\n-                source_range: [123; 123),\n-                delete: [119; 123),\n+                source_range: [124; 125),\n+                delete: [119; 125),\n                 insert: \"type SomeType = \",\n                 kind: TypeAlias,\n+                lookup: \"SomeType\",\n             },\n         ]\n         \"###);\n@@ -329,6 +342,7 @@ mod tests {\n                 delete: [127; 134),\n                 insert: \"const SOME_CONST: u16 = \",\n                 kind: Const,\n+                lookup: \"SOME_CONST\",\n             },\n         ]\n         \"###);\n@@ -355,6 +369,7 @@ mod tests {\n                 delete: [132; 139),\n                 insert: \"const SOME_CONST: u16 = \",\n                 kind: Const,\n+                lookup: \"SOME_CONST\",\n             },\n         ]\n         \"###);"}]}