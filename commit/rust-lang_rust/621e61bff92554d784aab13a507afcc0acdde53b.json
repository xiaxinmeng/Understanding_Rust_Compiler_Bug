{"sha": "621e61bff92554d784aab13a507afcc0acdde53b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMWU2MWJmZjkyNTU0ZDc4NGFhYjEzYTUwN2FmY2MwYWNkZGU1M2I=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-20T09:33:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-01T23:06:21Z"}, "message": "Add filter to detect local crates for rustc_on_unimplemented", "tree": {"sha": "41e952287e2cece84146951a0c9a794f1fb054e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41e952287e2cece84146951a0c9a794f1fb054e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/621e61bff92554d784aab13a507afcc0acdde53b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/621e61bff92554d784aab13a507afcc0acdde53b", "html_url": "https://github.com/rust-lang/rust/commit/621e61bff92554d784aab13a507afcc0acdde53b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/621e61bff92554d784aab13a507afcc0acdde53b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "html_url": "https://github.com/rust-lang/rust/commit/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9"}], "stats": {"total": 346, "additions": 299, "deletions": 47}, "files": [{"sha": "8ad5a9861a02f07c586f3b9457d3f6f988f71c45", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -530,9 +530,12 @@ impl<'a> Display for Arguments<'a> {\n /// }\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"`{Self}` cannot be formatted using `:?`; if it is \\\n-                            defined in your crate, add `#[derive(Debug)]` or \\\n-                            manually implement it\"]\n+#[rustc_on_unimplemented(\n+    on(crate_local, label=\"`{Self}` cannot be formatted using `:?`; \\\n+                            add `#[derive(Debug)]` or manually implement `{Debug}`\"),\n+    message=\"`{Self}` doesn't implement `{Debug}`\",\n+    label=\"`{Self}` cannot be formatted using `:?` because it doesn't implement `{Debug}`\",\n+)]\n #[lang = \"debug_trait\"]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n@@ -593,9 +596,11 @@ pub trait Debug {\n ///\n /// println!(\"The origin is: {}\", origin);\n /// ```\n-#[rustc_on_unimplemented = \"`{Self}` cannot be formatted with the default \\\n-                            formatter; try using `:?` instead if you are using \\\n-                            a format string\"]\n+#[rustc_on_unimplemented(\n+    message=\"`{Self}` doesn't implement `{Display}`\",\n+    label=\"`{Self}` cannot be formatted with the default formatter; \\\n+           try using `:?` instead if you are using a format string\",\n+)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Display {\n     /// Formats the value using the given formatter."}, {"sha": "296fb8733ba6c858068f7675d1c2ed3fe9709804", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -28,8 +28,13 @@ fn _assert_is_object_safe(_: &Iterator<Item=()>) {}\n /// [module-level documentation]: index.html\n /// [impl]: index.html#implementing-iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling \\\n-                            `.iter()` or a similar method\"]\n+#[rustc_on_unimplemented(\n+    on(\n+        _Self=\"&str\",\n+        label=\"`{Self}` is not an iterator; try calling `.chars()` or `.bytes()`\"\n+    ),\n+    label=\"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"\n+)]\n #[doc(spotlight)]\n pub trait Iterator {\n     /// The type of the elements being iterated over."}, {"sha": "be7ecbce8af7395ad045ae666a44bde48d931f40", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -384,6 +384,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         Some(ty_str.clone())));\n         }\n \n+        if let Some(true) = self_ty.ty_to_def_id().map(|def_id| def_id.is_local()) {\n+            flags.push((\"crate_local\".to_string(), None));\n+        }\n+\n         if let Ok(Some(command)) = OnUnimplementedDirective::of_item(\n             self.tcx, trait_ref.def_id, def_id\n         ) {"}, {"sha": "8c2c1cfa454729c5cbfcf1593dde5771617b4efa", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -185,8 +185,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n         let mut message = None;\n         let mut label = None;\n         let mut note = None;\n-        info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\",\n-              self, trait_ref, options);\n+        info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {"}, {"sha": "9d9d4cef3119a11c50fb4e59879bf3eb3b94a7c7", "filename": "src/test/ui/impl-trait/equality.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -32,7 +32,7 @@ fn sum_to(n: u32) -> impl Foo {\n         0\n     } else {\n         n + sum_to(n - 1)\n-        //~^ ERROR the trait bound `u32: std::ops::Add<impl Foo>` is not satisfied\n+        //~^ ERROR cannot add `impl Foo` to `u32`\n     }\n }\n "}, {"sha": "86c2ad4c0e7a4fabae55f6a97447fb4de39b0d56", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -2,7 +2,72 @@\n   \"message\": \"cannot find type `Iter` in this scope\",\n   \"code\": {\n     \"code\": \"E0412\",\n-    \"explanation\": null\n+    \"explanation\": \"\n+The type name used is not in scope.\n+\n+Erroneous code examples:\n+\n+```compile_fail,E0412\n+impl Something {} // error: type name `Something` is not in scope\n+\n+// or:\n+\n+trait Foo {\n+    fn bar(N); // error: type name `N` is not in scope\n+}\n+\n+// or:\n+\n+fn foo(x: T) {} // type name `T` is not in scope\n+```\n+\n+To fix this error, please verify you didn't misspell the type name, you did\n+declare it or imported it into the scope. Examples:\n+\n+```\n+struct Something;\n+\n+impl Something {} // ok!\n+\n+// or:\n+\n+trait Foo {\n+    type N;\n+\n+    fn bar(_: Self::N); // ok!\n+}\n+\n+// or:\n+\n+fn foo<T>(x: T) {} // ok!\n+```\n+\n+Another case that causes this error is when a type is imported into a parent\n+module. To fix this, you can follow the suggestion and use File directly or\n+`use super::File;` which will import the types from the parent namespace. An\n+example that causes this error is below:\n+\n+```compile_fail,E0412\n+use std::fs::File;\n+\n+mod foo {\n+    fn some_function(f: File) {}\n+}\n+```\n+\n+```\n+use std::fs::File;\n+\n+mod foo {\n+    // either\n+    use super::File;\n+    // or\n+    // use std::fs::File;\n+    fn foo(f: File) {}\n+}\n+# fn main() {} // don't insert it for us; that'll break imports\n+```\n+\"\n   },\n   \"level\": \"error\",\n   \"spans\": ["}, {"sha": "5144b59955cc9da6ef33a697fa9921df3de7470f", "filename": "src/test/ui/mismatched_types/binops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n fn main() {\n-    1 + Some(1); //~ ERROR is not satisfied\n-    2 as usize - Some(1); //~ ERROR is not satisfied\n-    3 * (); //~ ERROR is not satisfied\n-    4 / \"\"; //~ ERROR is not satisfied\n+    1 + Some(1); //~ ERROR cannot add `std::option::Option<{integer}>` to `{integer}`\n+    2 as usize - Some(1); //~ ERROR cannot substract `std::option::Option<{integer}>` from `usize`\n+    3 * (); //~ ERROR cannot multiply `()` to `{integer}`\n+    4 / \"\"; //~ ERROR cannot divide `{integer}` by `&str`\n     5 < String::new(); //~ ERROR is not satisfied\n     6 == Ok(1); //~ ERROR is not satisfied\n }"}, {"sha": "1b7fba050636f94e30891fb7f0916037ec214834", "filename": "src/test/ui/mismatched_types/binops.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fbinops.stderr?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -1,31 +1,31 @@\n error[E0277]: cannot add `std::option::Option<{integer}>` to `{integer}`\n   --> $DIR/binops.rs:12:7\n    |\n-12 |     1 + Some(1); //~ ERROR is not satisfied\n+12 |     1 + Some(1); //~ ERROR cannot add `std::option::Option<{integer}>` to `{integer}`\n    |       ^ no implementation for `{integer} + std::option::Option<{integer}>`\n    |\n    = help: the trait `std::ops::Add<std::option::Option<{integer}>>` is not implemented for `{integer}`\n \n error[E0277]: cannot substract `std::option::Option<{integer}>` from `usize`\n   --> $DIR/binops.rs:13:16\n    |\n-13 |     2 as usize - Some(1); //~ ERROR is not satisfied\n+13 |     2 as usize - Some(1); //~ ERROR cannot substract `std::option::Option<{integer}>` from `usize`\n    |                ^ no implementation for `usize - std::option::Option<{integer}>`\n    |\n    = help: the trait `std::ops::Sub<std::option::Option<{integer}>>` is not implemented for `usize`\n \n error[E0277]: cannot multiply `()` to `{integer}`\n   --> $DIR/binops.rs:14:7\n    |\n-14 |     3 * (); //~ ERROR is not satisfied\n+14 |     3 * (); //~ ERROR cannot multiply `()` to `{integer}`\n    |       ^ no implementation for `{integer} * ()`\n    |\n    = help: the trait `std::ops::Mul<()>` is not implemented for `{integer}`\n \n error[E0277]: cannot divide `{integer}` by `&str`\n   --> $DIR/binops.rs:15:7\n    |\n-15 |     4 / \"\"; //~ ERROR is not satisfied\n+15 |     4 / \"\"; //~ ERROR cannot divide `{integer}` by `&str`\n    |       ^ no implementation for `{integer} / &str`\n    |\n    = help: the trait `std::ops::Div<&str>` is not implemented for `{integer}`"}, {"sha": "0f833c6263722ed3ed5f40ec1328f1c42b065a6d", "filename": "src/test/ui/on-unimplemented/auxiliary/no_debug.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fauxiliary%2Fno_debug.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct Bar;"}, {"sha": "c4bac12eebdbe70376607c68b58a79b99e300ccc", "filename": "src/test/ui/on-unimplemented/multiple-impls-complex-filtering.stderr", "status": "modified", "additions": 88, "deletions": 25, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.stderr?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -1,44 +1,107 @@\n-error[E0277]: trait message `[i32]`\n-  --> $DIR/multiple-impls-complex-filtering.rs:46:5\n+error[E0277]: trait message\n+  --> $DIR/multiple-impls-complex-filtering.rs:49:5\n    |\n-46 |     Index::index(&[] as &[i32], 2usize);\n-   |     ^^^^^^^^^^^^ u32 message\n+49 |     Index::index(&[] as &[i32], 2usize);\n+   |     ^^^^^^^^^^^^ trait label if i32\n    |\n-   = help: the trait `Index<_>` is not implemented for `[i32]`\n+   = help: the trait `Index<usize>` is not implemented for `[i32]`\n note: required by `Index::index`\n-  --> $DIR/multiple-impls-complex-filtering.rs:25:5\n+  --> $DIR/multiple-impls-complex-filtering.rs:26:5\n    |\n-25 |     fn index(&self, index: Idx) -> &Self::Output;\n+26 |     fn index(&self, index: Idx) -> &Self::Output;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: trait message `[i32]`\n-  --> $DIR/multiple-impls-complex-filtering.rs:46:5\n+error[E0277]: trait message\n+  --> $DIR/multiple-impls-complex-filtering.rs:49:5\n    |\n-46 |     Index::index(&[] as &[i32], 2usize);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u32 message\n+49 |     Index::index(&[] as &[i32], 2usize);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trait label if i32\n    |\n-   = help: the trait `Index<_>` is not implemented for `[i32]`\n+   = help: the trait `Index<usize>` is not implemented for `[i32]`\n \n-error[E0277]: trait message `[i32]`\n-  --> $DIR/multiple-impls-complex-filtering.rs:47:5\n+error[E0277]: trait message\n+  --> $DIR/multiple-impls-complex-filtering.rs:50:5\n    |\n-47 |     Index::index(&[] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^ u32 message\n+50 |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^ trait label if i32\n    |\n-   = help: the trait `Index<_>` is not implemented for `[i32]`\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n note: required by `Index::index`\n-  --> $DIR/multiple-impls-complex-filtering.rs:25:5\n+  --> $DIR/multiple-impls-complex-filtering.rs:26:5\n    |\n-25 |     fn index(&self, index: Idx) -> &Self::Output;\n+26 |     fn index(&self, index: Idx) -> &Self::Output;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: trait message `[i32]`\n-  --> $DIR/multiple-impls-complex-filtering.rs:47:5\n+error[E0277]: trait message\n+  --> $DIR/multiple-impls-complex-filtering.rs:50:5\n    |\n-47 |     Index::index(&[] as &[i32], 2u32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u32 message\n+50 |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trait label if i32\n    |\n-   = help: the trait `Index<_>` is not implemented for `[i32]`\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n \n-error: aborting due to 4 previous errors\n+error[E0277]: trait message\n+  --> $DIR/multiple-impls-complex-filtering.rs:51:5\n+   |\n+51 |     Index::index(&[] as &[u32], 2u32);\n+   |     ^^^^^^^^^^^^ trait label\n+   |\n+   = help: the trait `Index<_>` is not implemented for `[u32]`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls-complex-filtering.rs:26:5\n+   |\n+26 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: trait message\n+  --> $DIR/multiple-impls-complex-filtering.rs:51:5\n+   |\n+51 |     Index::index(&[] as &[u32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trait label\n+   |\n+   = help: the trait `Index<_>` is not implemented for `[u32]`\n+\n+error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n+  --> $DIR/multiple-impls-complex-filtering.rs:55:5\n+   |\n+55 |     Index::index(&[] as &[i32], Foo(2u32));\n+   |     ^^^^^^^^^^^^ impl foo [i32] Foo<u32> Index\n+   |\n+   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls-complex-filtering.rs:26:5\n+   |\n+26 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n+  --> $DIR/multiple-impls-complex-filtering.rs:55:5\n+   |\n+55 |     Index::index(&[] as &[i32], Foo(2u32));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl foo [i32] Foo<u32> Index\n+   |\n+   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+\n+error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n+  --> $DIR/multiple-impls-complex-filtering.rs:58:5\n+   |\n+58 |     Index::index(&[] as &[i32], Bar(2u32));\n+   |     ^^^^^^^^^^^^ on impl for Bar\n+   |\n+   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls-complex-filtering.rs:26:5\n+   |\n+26 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n+  --> $DIR/multiple-impls-complex-filtering.rs:58:5\n+   |\n+58 |     Index::index(&[] as &[i32], Bar(2u32));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ on impl for Bar\n+   |\n+   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "fff6122c6b34b65f76a9dac20ee4ecae8e2896c7", "filename": "src/test/ui/on-unimplemented/no-debug.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:no_debug.rs\n+\n+extern crate no_debug;\n+\n+use no_debug::Bar;\n+\n+struct Foo;\n+\n+fn main() {\n+    println!(\"{:?} {:?}\", Foo, Bar);\n+    println!(\"{} {}\", Foo, Bar);\n+}\n+//~^^^ ERROR `Foo` doesn't implement `std::fmt::Debug`\n+//~| ERROR `no_debug::Bar` doesn't implement `std::fmt::Debug`\n+//~^^^^ ERROR `Foo` doesn't implement `std::fmt::Display`\n+//~| ERROR `no_debug::Bar` doesn't implement `std::fmt::Display`\n+"}, {"sha": "af5b1e91211fbe81f3c48d4ccfbb09f77e6f4a62", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -0,0 +1,38 @@\n+error[E0277]: `Foo` doesn't implement `std::fmt::Debug`\n+  --> $DIR/no-debug.rs:20:27\n+   |\n+20 |     println!(\"{:?} {:?}\", Foo, Bar);\n+   |                           ^^^ `Foo` cannot be formatted using `:?`; add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `Foo`\n+   = note: required by `std::fmt::Debug::fmt`\n+\n+error[E0277]: `no_debug::Bar` doesn't implement `std::fmt::Debug`\n+  --> $DIR/no-debug.rs:20:32\n+   |\n+20 |     println!(\"{:?} {:?}\", Foo, Bar);\n+   |                                ^^^ `no_debug::Bar` cannot be formatted using `:?` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `no_debug::Bar`\n+   = note: required by `std::fmt::Debug::fmt`\n+\n+error[E0277]: `Foo` doesn't implement `std::fmt::Display`\n+  --> $DIR/no-debug.rs:21:23\n+   |\n+21 |     println!(\"{} {}\", Foo, Bar);\n+   |                       ^^^ `Foo` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `Foo`\n+   = note: required by `std::fmt::Display::fmt`\n+\n+error[E0277]: `no_debug::Bar` doesn't implement `std::fmt::Display`\n+  --> $DIR/no-debug.rs:21:28\n+   |\n+21 |     println!(\"{} {}\", Foo, Bar);\n+   |                            ^^^ `no_debug::Bar` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `no_debug::Bar`\n+   = note: required by `std::fmt::Display::fmt`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "dd09534480e10dde5247fedd7058cd6bd6ffb8d9", "filename": "src/test/ui/span/multiline-span-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     let x = 1;\n     let y = 2;\n     let z = 3;\n-    foo(1 as u32 + //~ ERROR not satisfied\n+    foo(1 as u32 + //~ ERROR cannot add `()` to `u32`\n \n         bar(x,\n "}, {"sha": "a18dfeb31d9ef0bb86d4a2705bc19686a316d357", "filename": "src/test/ui/span/multiline-span-simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-simple.stderr?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: cannot add `()` to `u32`\n   --> $DIR/multiline-span-simple.rs:23:18\n    |\n-23 |     foo(1 as u32 + //~ ERROR not satisfied\n+23 |     foo(1 as u32 + //~ ERROR cannot add `()` to `u32`\n    |                  ^ no implementation for `u32 + ()`\n    |\n    = help: the trait `std::ops::Add<()>` is not implemented for `u32`"}, {"sha": "1022491b84a3614db4ce7fc3b9803b4b30ea45d6", "filename": "src/test/ui/suggestions/iterate-str.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fsuggestions%2Fiterate-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fsuggestions%2Fiterate-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fiterate-str.rs?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    for c in \"foobarbaz\" {\n+        println!(\"{}\", c);\n+    }\n+    //~^^^ ERROR the trait bound `&str: std::iter::Iterator` is not satisfied\n+    //~| NOTE `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n+    //~| HELP the trait `std::iter::Iterator` is not implemented for `&str`\n+    //~| NOTE required by `std::iter::IntoIterator::into_iter`\n+}"}, {"sha": "59da6d70c0236ce5b5f6c81b19d7e86a64f13bb4", "filename": "src/test/ui/suggestions/iterate-str.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fsuggestions%2Fiterate-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621e61bff92554d784aab13a507afcc0acdde53b/src%2Ftest%2Fui%2Fsuggestions%2Fiterate-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fiterate-str.stderr?ref=621e61bff92554d784aab13a507afcc0acdde53b", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the trait bound `&str: std::iter::Iterator` is not satisfied\n+  --> $DIR/iterate-str.rs:12:5\n+   |\n+12 | /     for c in \"foobarbaz\" {\n+13 | |         println!(\"{}\", c);\n+14 | |     }\n+   | |_____^ `&str` is not an iterator; try calling `.chars()` or `.bytes()`\n+   |\n+   = help: the trait `std::iter::Iterator` is not implemented for `&str`\n+   = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error: aborting due to previous error\n+"}]}