{"sha": "d256eb1c5ddd6740140b6538a018a0171f45fdae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNTZlYjFjNWRkZDY3NDAxNDBiNjUzOGEwMThhMDE3MWY0NWZkYWU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-04T04:07:10Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-07-04T14:51:31Z"}, "message": "rustc: remove MethodOrigin and use the container to distinguish inherent methods.", "tree": {"sha": "74a75b58810ea6a89dea43df64dc0bd83615260a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a75b58810ea6a89dea43df64dc0bd83615260a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d256eb1c5ddd6740140b6538a018a0171f45fdae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d256eb1c5ddd6740140b6538a018a0171f45fdae", "html_url": "https://github.com/rust-lang/rust/commit/d256eb1c5ddd6740140b6538a018a0171f45fdae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d256eb1c5ddd6740140b6538a018a0171f45fdae/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "536e71b78f46acb75e08481708a93bd07c0a107a", "url": "https://api.github.com/repos/rust-lang/rust/commits/536e71b78f46acb75e08481708a93bd07c0a107a", "html_url": "https://github.com/rust-lang/rust/commit/536e71b78f46acb75e08481708a93bd07c0a107a"}], "stats": {"total": 181, "additions": 60, "deletions": 121}, "files": [{"sha": "7c76f4fe289dfd583fa710957e2ddcc6dbde3f15", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -609,20 +609,17 @@ fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,\n                                   method: &ty::MethodCallee<'tcx>) {\n     use serialize::Encoder;\n \n-    rbml_w.emit_struct(\"MethodCallee\", 5, |rbml_w| {\n+    rbml_w.emit_struct(\"MethodCallee\", 4, |rbml_w| {\n         rbml_w.emit_struct_field(\"autoderef\", 0, |rbml_w| {\n             autoderef.encode(rbml_w)\n         });\n         rbml_w.emit_struct_field(\"def_id\", 1, |rbml_w| {\n             Ok(rbml_w.emit_def_id(method.def_id))\n         });\n-        rbml_w.emit_struct_field(\"origin\", 2, |rbml_w| {\n-            method.origin.encode(rbml_w)\n-        });\n-        rbml_w.emit_struct_field(\"ty\", 3, |rbml_w| {\n+        rbml_w.emit_struct_field(\"ty\", 2, |rbml_w| {\n             Ok(rbml_w.emit_ty(ecx, method.ty))\n         });\n-        rbml_w.emit_struct_field(\"substs\", 4, |rbml_w| {\n+        rbml_w.emit_struct_field(\"substs\", 3, |rbml_w| {\n             Ok(rbml_w.emit_substs(ecx, &method.substs))\n         })\n     }).unwrap();\n@@ -632,19 +629,17 @@ impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> {\n     fn read_method_callee<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                                   -> (u32, ty::MethodCallee<'tcx>) {\n \n-        self.read_struct(\"MethodCallee\", 5, |this| {\n+        self.read_struct(\"MethodCallee\", 4, |this| {\n             let autoderef = this.read_struct_field(\"autoderef\", 0,\n                                                    Decodable::decode).unwrap();\n             Ok((autoderef, ty::MethodCallee {\n                 def_id: this.read_struct_field(\"def_id\", 1, |this| {\n                     Ok(this.read_def_id(dcx))\n                 }).unwrap(),\n-                origin: this.read_struct_field(\"origin\", 2,\n-                                               Decodable::decode).unwrap(),\n-                ty: this.read_struct_field(\"ty\", 3, |this| {\n+                ty: this.read_struct_field(\"ty\", 2, |this| {\n                     Ok(this.read_ty(dcx))\n                 }).unwrap(),\n-                substs: this.read_struct_field(\"substs\", 4, |this| {\n+                substs: this.read_struct_field(\"substs\", 3, |this| {\n                     Ok(dcx.tcx.mk_substs(this.read_substs(dcx)))\n                 }).unwrap()\n             }))"}, {"sha": "b5c78340d022d19aa9de7adae205244cfa343c27", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -696,11 +696,10 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n             }\n         }\n         ast::ExprMethodCall(..) => {\n-            let is_const = match v.tcx.tables.borrow().method_map[&method_call] {\n-                ty::MethodCallee { def_id, origin: ty::MethodOrigin::Inherent, .. } => {\n-                    v.handle_const_fn_call(e, def_id, node_ty)\n-                }\n-                _ => false\n+            let method = v.tcx.tables.borrow().method_map[&method_call];\n+            let is_const = match v.tcx.impl_or_trait_item(method.def_id).container() {\n+                ty::ImplContainer(_) => v.handle_const_fn_call(e, method.def_id, node_ty),\n+                ty::TraitContainer(_) => false\n             };\n             if !is_const {\n                 v.add_qualif(ConstQualif::NOT_CONST);"}, {"sha": "8d2d6889b5efa529d384ae73f521e5e548875064", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -93,17 +93,10 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         });\n     }\n \n-    fn lookup_and_handle_method(&mut self, id: ast::NodeId,\n-                                span: codemap::Span) {\n+    fn lookup_and_handle_method(&mut self, id: ast::NodeId) {\n         let method_call = ty::MethodCall::expr(id);\n-        match self.tcx.tables.borrow().method_map.get(&method_call) {\n-            Some(method) => self.check_def_id(method.def_id),\n-            None => {\n-                self.tcx.sess.span_bug(span,\n-                                       \"method call expression not \\\n-                                        in method map?!\")\n-            }\n-        }\n+        let method = self.tcx.tables.borrow().method_map[&method_call];\n+        self.check_def_id(method.def_id);\n     }\n \n     fn handle_field_access(&mut self, lhs: &ast::Expr, name: ast::Name) {\n@@ -239,7 +232,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &ast::Expr) {\n         match expr.node {\n             ast::ExprMethodCall(..) => {\n-                self.lookup_and_handle_method(expr.id, expr.span);\n+                self.lookup_and_handle_method(expr.id);\n             }\n             ast::ExprField(ref lhs, ref ident) => {\n                 self.handle_field_access(&**lhs, ident.node.name);"}, {"sha": "af9e21a47d0b096246e42bace9777c5a55911105", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -140,7 +140,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n         match expr.node {\n             ast::ExprMethodCall(_, _, _) => {\n                 let method_call = MethodCall::expr(expr.id);\n-                let base_type = self.tcx.tables.borrow().method_map.get(&method_call).unwrap().ty;\n+                let base_type = self.tcx.tables.borrow().method_map[&method_call].ty;\n                 debug!(\"effect: method call case, base type is {:?}\",\n                         base_type);\n                 if type_is_unsafe_function(base_type) {"}, {"sha": "37460531dbdbf6c8213dcef585b279c477ee6f1e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -1148,7 +1148,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n           ast::ExprMethodCall(_, _, ref args) => {\n             let method_call = ty::MethodCall::expr(expr.id);\n-            let method_ty = self.ir.tcx.tables.borrow().method_map.get(&method_call).unwrap().ty;\n+            let method_ty = self.ir.tcx.tables.borrow().method_map[&method_call].ty;\n             let succ = if method_ty.fn_ret().diverges() {\n                 self.s.exit_ln\n             } else {"}, {"sha": "d588f7c6070ce25bd4e1c5ae2682e9a9bd4c2cd5", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -128,16 +128,17 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> {\n             }\n             ast::ExprMethodCall(..) => {\n                 let method_call = ty::MethodCall::expr(expr.id);\n-                match self.tcx.tables.borrow().method_map[&method_call] {\n-                    ty::MethodCallee { def_id, origin: ty::MethodOrigin::Inherent, .. } => {\n+                let def_id = self.tcx.tables.borrow().method_map[&method_call].def_id;\n+                match self.tcx.impl_or_trait_item(def_id).container() {\n+                    ty::ImplContainer(_) => {\n                         if is_local(def_id) {\n                             if self.def_id_represents_local_inlined_item(def_id) {\n                                 self.worklist.push(def_id.node)\n                             }\n                             self.reachable_symbols.insert(def_id.node);\n                         }\n                     }\n-                    _ => {}\n+                    ty::TraitContainer(_) => {}\n                 }\n             }\n             _ => {}"}, {"sha": "46be4b752266efadbab0ac8cb9e073b99746fb4e", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -406,10 +406,7 @@ pub fn check_expr(tcx: &ty::ctxt, e: &ast::Expr,\n         ast::ExprMethodCall(i, _, _) => {\n             span = i.span;\n             let method_call = ty::MethodCall::expr(e.id);\n-            match tcx.tables.borrow().method_map.get(&method_call) {\n-                Some(method) => method.def_id,\n-                None => return\n-            }\n+            tcx.tables.borrow().method_map[&method_call].def_id\n         }\n         ast::ExprField(ref base_e, ref field) => {\n             span = field.span;"}, {"sha": "715072a12ebd041da5a5f64d05a8320d71bcf5ad", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -625,20 +625,10 @@ pub enum CustomCoerceUnsized {\n     Struct(usize)\n }\n \n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n-pub enum MethodOrigin {\n-    /// Inherent impl method call.\n-    Inherent,\n-\n-    /// Trait method call.\n-    Trait\n-}\n-\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Copy, Debug)]\n pub struct MethodCallee<'tcx> {\n     /// Impl method ID, for inherent methods, or trait method ID, otherwise.\n     pub def_id: ast::DefId,\n-    pub origin: MethodOrigin,\n     pub ty: Ty<'tcx>,\n     pub substs: &'tcx subst::Substs<'tcx>\n }"}, {"sha": "fa86c0dde991d0e4cf7f00c95b15e914b5c29611", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -1995,9 +1995,9 @@ impl LintPass for UnconditionalRecursion {\n         fn expr_refers_to_this_method(tcx: &ty::ctxt,\n                                       method: &ty::Method,\n                                       id: ast::NodeId) -> bool {\n-            let tables = tcx.tables.borrow();\n-            let callee = match tables.method_map.get(&ty::MethodCall::expr(id)) {\n-                Some(m) => m,\n+            let method_call = ty::MethodCall::expr(id);\n+            let callee = match tcx.tables.borrow().method_map.get(&method_call) {\n+                Some(&m) => m,\n                 None => return false\n             };\n             let callee_item = tcx.impl_or_trait_item(callee.def_id);"}, {"sha": "d90e5a033a187bb90de3360811dc61e3d7450f99", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -844,17 +844,16 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n     }\n \n     // Checks that a method is in scope.\n-    fn check_method(&mut self, span: Span, callee: &ty::MethodCallee,\n+    fn check_method(&mut self, span: Span, method_def_id: ast::DefId,\n                     name: ast::Name) {\n-        match callee.origin {\n-            ty::MethodOrigin::Inherent => {\n-                self.check_static_method(span, callee.def_id, name)\n+        match self.tcx.impl_or_trait_item(method_def_id).container() {\n+            ty::ImplContainer(_) => {\n+                self.check_static_method(span, method_def_id, name)\n             }\n             // Trait methods are always all public. The only controlling factor\n             // is whether the trait itself is accessible or not.\n-            ty::MethodOrigin::Trait => {\n-                let method = self.tcx.impl_or_trait_item(callee.def_id);\n-                self.report_error(self.ensure_public(span, method.container().id(),\n+            ty::TraitContainer(trait_def_id) => {\n+                self.report_error(self.ensure_public(span, trait_def_id,\n                                                      None, \"source trait\"));\n             }\n         }\n@@ -899,17 +898,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n             }\n             ast::ExprMethodCall(ident, _, _) => {\n                 let method_call = ty::MethodCall::expr(expr.id);\n-                match self.tcx.tables.borrow().method_map.get(&method_call) {\n-                    None => {\n-                        self.tcx.sess.span_bug(expr.span,\n-                                                \"method call not in \\\n-                                                method map\");\n-                    }\n-                    Some(method) => {\n-                        debug!(\"(privacy checking) checking impl method\");\n-                        self.check_method(expr.span, method, ident.node.name);\n-                    }\n-                }\n+                let method = self.tcx.tables.borrow().method_map[&method_call];\n+                debug!(\"(privacy checking) checking impl method\");\n+                self.check_method(expr.span, method.def_id, ident.node.name);\n             }\n             ast::ExprStruct(_, ref fields, _) => {\n                 match self.tcx.expr_ty(expr).sty {"}, {"sha": "e88b3980737ab075eccb761660b7475502c37cba", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -886,15 +886,11 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n     fn process_method_call(&mut self,\n                            ex: &ast::Expr,\n                            args: &Vec<P<ast::Expr>>) {\n-        let method_map = &self.tcx.tables.borrow().method_map;\n-        let method_callee = method_map.get(&ty::MethodCall::expr(ex.id)).unwrap();\n-        let (def_id, decl_id) = match method_callee.origin {\n-            ty::MethodOrigin::Inherent => {\n-                (Some(method_callee.def_id), None)\n-            }\n-            ty::MethodOrigin::Trait => {\n-                (None, Some(method_callee.def_id))\n-            }\n+        let method_call = ty::MethodCall::expr(ex.id);\n+        let method_id = self.tcx.tables.borrow().method_map[&method_call].def_id;\n+        let (def_id, decl_id) = match self.tcx.impl_or_trait_item(method_id).container() {\n+            ty::ImplContainer(_) => (Some(method_id), None),\n+            ty::TraitContainer(_) => (None, Some(method_id))\n         };\n         let sub_span = self.span.sub_span_for_meth_name(ex.span);\n         self.fmt.meth_call_str(ex.span,"}, {"sha": "debc8dd59c04c0187547627a39f288646b93e124", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -499,7 +499,7 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n             let ref_ty = match node {\n                 ExprId(id) => tcx.node_id_to_type(id),\n                 MethodCallKey(method_call) => {\n-                    tcx.tables.borrow().method_map.get(&method_call).unwrap().ty\n+                    tcx.tables.borrow().method_map[&method_call].ty\n                 }\n             };\n             let ref_ty = monomorphize::apply_param_substs(tcx,"}, {"sha": "e1c1ac9a772eb512794607dfd0ec3e9f1cce00b3", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -1025,7 +1025,7 @@ pub fn node_id_substs<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             tcx.node_id_item_substs(id).substs\n         }\n         MethodCallKey(method_call) => {\n-            tcx.tables.borrow().method_map.get(&method_call).unwrap().substs.clone()\n+            tcx.tables.borrow().method_map[&method_call].substs.clone()\n         }\n     };\n "}, {"sha": "1fa996f76b9a28809a2778a3ee2ac2342089abdd", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -106,20 +106,13 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                        -> Callee<'blk, 'tcx> {\n     let _icx = push_ctxt(\"meth::trans_method_callee\");\n \n-    let (method_id, origin, method_substs, method_ty) =\n-        bcx.tcx()\n-           .tables\n-           .borrow()\n-           .method_map\n-           .get(&method_call)\n-           .map(|method| (method.def_id, method.origin, method.substs, method.ty))\n-           .unwrap();\n-\n-    match origin {\n-        ty::MethodOrigin::Inherent => {\n-            debug!(\"trans_method_callee: static, {:?}\", method_id);\n+    let method = bcx.tcx().tables.borrow().method_map[&method_call];\n+\n+    match bcx.tcx().impl_or_trait_item(method.def_id).container() {\n+        ty::ImplContainer(_) => {\n+            debug!(\"trans_method_callee: static, {:?}\", method.def_id);\n             let datum = callee::trans_fn_ref(bcx.ccx(),\n-                                             method_id,\n+                                             method.def_id,\n                                              MethodCallKey(method_call),\n                                              bcx.fcx.param_substs);\n             Callee {\n@@ -129,11 +122,8 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             }\n         }\n \n-        ty::MethodOrigin::Trait => {\n-            let method_item = bcx.tcx().impl_or_trait_item(method_id);\n-            let trait_def_id = method_item.container().id();\n-\n-            let trait_substs = method_substs.clone().method_to_trait();\n+        ty::TraitContainer(trait_def_id) => {\n+            let trait_substs = method.substs.clone().method_to_trait();\n             let trait_substs = bcx.tcx().mk_substs(trait_substs);\n             let trait_ref = ty::TraitRef::new(trait_def_id, trait_substs);\n \n@@ -152,8 +142,8 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                        method_call,\n                                        self_expr,\n                                        trait_def_id,\n-                                       method_id,\n-                                       method_ty,\n+                                       method.def_id,\n+                                       method.ty,\n                                        origin,\n                                        arg_cleanup_scope)\n         }"}, {"sha": "8db5b5e7c508c171659f73f744a8a6818e98788e", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -84,8 +84,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         self.enforce_illegal_method_limitations(&pick);\n \n         // Create substitutions for the method's type parameters.\n-        let (rcvr_substs, method_origin) =\n-            self.fresh_receiver_substs(self_ty, &pick);\n+        let rcvr_substs = self.fresh_receiver_substs(self_ty, &pick);\n         let (method_types, method_regions) =\n             self.instantiate_method_substs(&pick, supplied_method_types);\n         let all_substs = rcvr_substs.with_method(method_types, method_regions);\n@@ -112,7 +111,6 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         }));\n         let callee = ty::MethodCallee {\n             def_id: pick.item.def_id(),\n-            origin: method_origin,\n             ty: fty,\n             substs: self.tcx().mk_substs(all_substs)\n         };\n@@ -193,16 +191,14 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n     fn fresh_receiver_substs(&mut self,\n                              self_ty: Ty<'tcx>,\n                              pick: &probe::Pick<'tcx>)\n-                             -> (subst::Substs<'tcx>, ty::MethodOrigin)\n+                             -> subst::Substs<'tcx>\n     {\n         match pick.kind {\n             probe::InherentImplPick => {\n                 let impl_def_id = pick.item.container().id();\n                 assert!(self.tcx().impl_trait_ref(impl_def_id).is_none(),\n                         \"impl {:?} is not an inherent impl\", impl_def_id);\n-                let impl_polytype = check::impl_self_ty(self.fcx, self.span, impl_def_id);\n-\n-                (impl_polytype.substs, ty::MethodOrigin::Inherent)\n+                check::impl_self_ty(self.fcx, self.span, impl_def_id).substs\n             }\n \n             probe::ObjectPick => {\n@@ -228,9 +224,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                            original_poly_trait_ref,\n                            upcast_trait_ref,\n                            trait_def_id);\n-                    let substs = upcast_trait_ref.substs.clone();\n-\n-                    (substs, ty::MethodOrigin::Trait)\n+                    upcast_trait_ref.substs.clone()\n                 })\n             }\n \n@@ -250,8 +244,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                         self.span,\n                         &impl_polytype.substs,\n                         &self.tcx().impl_trait_ref(impl_def_id).unwrap());\n-                let substs = impl_trait_ref.substs.clone();\n-                (substs, ty::MethodOrigin::Trait)\n+                impl_trait_ref.substs.clone()\n             }\n \n             probe::TraitPick => {\n@@ -263,19 +256,15 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                 // the process we will unify the transformed-self-type\n                 // of the method with the actual type in order to\n                 // unify some of these variables.\n-                let substs = self.infcx().fresh_substs_for_trait(self.span,\n-                                                                 &trait_def.generics,\n-                                                                 self.infcx().next_ty_var());\n-\n-                (substs, ty::MethodOrigin::Trait)\n+                self.infcx().fresh_substs_for_trait(self.span,\n+                                                    &trait_def.generics,\n+                                                    self.infcx().next_ty_var())\n             }\n \n             probe::WhereClausePick(ref poly_trait_ref) => {\n                 // Where clauses can have bound regions in them. We need to instantiate\n                 // those to convert from a poly-trait-ref to a trait-ref.\n-                let trait_ref = self.replace_late_bound_regions_with_fresh_var(&*poly_trait_ref);\n-                let substs = trait_ref.substs.clone();\n-                (substs, ty::MethodOrigin::Trait)\n+                self.replace_late_bound_regions_with_fresh_var(&*poly_trait_ref).substs.clone()\n             }\n         }\n     }"}, {"sha": "2117cba108730797d483d770c59025bc421dc651", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -307,7 +307,6 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n     let callee = ty::MethodCallee {\n         def_id: method_item.def_id(),\n-        origin: ty::MethodOrigin::Trait,\n         ty: fty,\n         substs: trait_ref.substs\n     };"}, {"sha": "419fa9e160a47d34a2ef150d7fc9f4c2ff8d5195", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d256eb1c5ddd6740140b6538a018a0171f45fdae/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d256eb1c5ddd6740140b6538a018a0171f45fdae", "patch": "@@ -303,7 +303,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                        method);\n                 let new_method = MethodCallee {\n                     def_id: method.def_id,\n-                    origin: method.origin,\n                     ty: self.resolve(&method.ty, reason),\n                     substs: self.tcx().mk_substs(self.resolve(method.substs, reason)),\n                 };"}]}