{"sha": "a0be39296d2925972cacd9fbf8b5fb258fad6947", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYmUzOTI5NmQyOTI1OTcyY2FjZDlmYmY4YjVmYjI1OGZhZDY5NDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-29T13:13:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-29T13:13:30Z"}, "message": "Merge #2939\n\n2939: Simplify fixture parsing r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "20af3ef139e40eb0b506e41abfb316485205284a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20af3ef139e40eb0b506e41abfb316485205284a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0be39296d2925972cacd9fbf8b5fb258fad6947", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeMYT6CRBK7hj4Ov3rIwAAdHIIAIOtgbNmmXNOS6cOMpuliqoh\nyt96a1jaPrSUPCgRVcRQY7uFfPTUyYegN5hw09r8yRBj6pwtqzw5hb9P08lM2fZZ\nz/iP/YoK0lZxD2iN2DY9a1RP5yJjyCaKy7GD+GRSUQc61bKS99IdOU3Yvdmjx+3y\nvIQMxQk5CjuIyRyjzhT25DFYDd09zCbdj2st2oMBcqrwTlxLCuwwclRLAj8iFP6r\nO+qnEBnmRByK/MKfEbrqTpm11YBTXCbqHRw2s6kDeDyTu+/scg8L1al09ZzfvQ7j\nMGbIIMm1vs3TEbyJ/OA+3e7YK9b5qXVAxz0eDdCGC9raixXshS560yWVfd+N764=\n=hjyn\n-----END PGP SIGNATURE-----\n", "payload": "tree 20af3ef139e40eb0b506e41abfb316485205284a\nparent f7268ddab2fc1483a01e06bfaadc976659a1aadd\nparent d2fd252f9de23d5801b1ca10c067654bf7d6ef4f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1580303610 +0000\ncommitter GitHub <noreply@github.com> 1580303610 +0000\n\nMerge #2939\n\n2939: Simplify fixture parsing r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0be39296d2925972cacd9fbf8b5fb258fad6947", "html_url": "https://github.com/rust-lang/rust/commit/a0be39296d2925972cacd9fbf8b5fb258fad6947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0be39296d2925972cacd9fbf8b5fb258fad6947/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7268ddab2fc1483a01e06bfaadc976659a1aadd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7268ddab2fc1483a01e06bfaadc976659a1aadd", "html_url": "https://github.com/rust-lang/rust/commit/f7268ddab2fc1483a01e06bfaadc976659a1aadd"}, {"sha": "d2fd252f9de23d5801b1ca10c067654bf7d6ef4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2fd252f9de23d5801b1ca10c067654bf7d6ef4f", "html_url": "https://github.com/rust-lang/rust/commit/d2fd252f9de23d5801b1ca10c067654bf7d6ef4f"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "5666445aa578f5843ca7385d178ad2435bc307fd", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a0be39296d2925972cacd9fbf8b5fb258fad6947/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0be39296d2925972cacd9fbf8b5fb258fad6947/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=a0be39296d2925972cacd9fbf8b5fb258fad6947", "patch": "@@ -176,7 +176,7 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n         .next()\n         .expect(\"empty fixture\");\n \n-    let lines = fixture\n+    let mut lines = fixture\n         .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n         .filter_map(|line| {\n             if line.len() >= margin {\n@@ -189,29 +189,28 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n         });\n \n     let mut res = Vec::new();\n-    let mut buf = String::new();\n-    let mut meta: Option<&str> = None;\n-\n-    macro_rules! flush {\n-        () => {\n-            if let Some(meta) = meta {\n-                res.push(FixtureEntry { meta: meta.to_string(), text: buf.clone() });\n-                buf.clear();\n+    let mut meta = None;\n+    loop {\n+        let mut next_meta = None;\n+        let mut text = String::new();\n+        for line in lines.by_ref() {\n+            if line.starts_with(\"//-\") {\n+                next_meta = Some(line[\"//-\".len()..].trim().to_string());\n+                break;\n             }\n-        };\n-    };\n+            text.push_str(line);\n+            text.push('\\n');\n+        }\n \n-    for line in lines {\n-        if line.starts_with(\"//-\") {\n-            flush!();\n-            buf.clear();\n-            meta = Some(line[\"//-\".len()..].trim());\n-            continue;\n+        if let Some(meta) = meta {\n+            res.push(FixtureEntry { meta, text });\n+        }\n+        meta = next_meta;\n+        if meta.is_none() {\n+            break;\n         }\n-        buf.push_str(line);\n-        buf.push('\\n');\n     }\n-    flush!();\n+\n     res\n }\n "}]}