{"sha": "70067e31ed8da831c4b564d3ce803099a7696eaf", "node_id": "C_kwDOAAsO6NoAKDcwMDY3ZTMxZWQ4ZGE4MzFjNGI1NjRkM2NlODAzMDk5YTc2OTZlYWY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-26T12:40:14Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-28T07:04:29Z"}, "message": "rustc_ast: Harmonize delimiter naming with `proc_macro::Delimiter`", "tree": {"sha": "63d155ce6a814815b75e4781437b941dc92d42e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63d155ce6a814815b75e4781437b941dc92d42e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70067e31ed8da831c4b564d3ce803099a7696eaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70067e31ed8da831c4b564d3ce803099a7696eaf", "html_url": "https://github.com/rust-lang/rust/commit/70067e31ed8da831c4b564d3ce803099a7696eaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70067e31ed8da831c4b564d3ce803099a7696eaf/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f300792f9a9a318e524b933a08097564a36b9628", "url": "https://api.github.com/repos/rust-lang/rust/commits/f300792f9a9a318e524b933a08097564a36b9628", "html_url": "https://github.com/rust-lang/rust/commit/f300792f9a9a318e524b933a08097564a36b9628"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "741f3350801db8c742f29697ec1224e3ff6bf713", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=70067e31ed8da831c4b564d3ce803099a7696eaf", "patch": "@@ -2,7 +2,7 @@ use std::borrow::Cow;\n use std::cmp::min;\n \n use itertools::Itertools;\n-use rustc_ast::token::{DelimToken, LitKind};\n+use rustc_ast::token::{Delimiter, LitKind};\n use rustc_ast::{ast, ptr};\n use rustc_span::{BytePos, Span};\n \n@@ -412,7 +412,7 @@ pub(crate) fn rewrite_array<'a, T: 'a + IntoOverflowableItem<'a>>(\n     context: &'a RewriteContext<'_>,\n     shape: Shape,\n     force_separator_tactic: Option<SeparatorTactic>,\n-    delim_token: Option<DelimToken>,\n+    delim_token: Option<Delimiter>,\n ) -> Option<String> {\n     overflow::rewrite_with_square_brackets(\n         context,"}, {"sha": "26c429eb94ff3b1d0bb2677c9a1dbf7c8cd10b28", "filename": "src/macros.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=70067e31ed8da831c4b564d3ce803099a7696eaf", "patch": "@@ -12,7 +12,7 @@\n use std::collections::HashMap;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n-use rustc_ast::token::{BinOpToken, DelimToken, Token, TokenKind};\n+use rustc_ast::token::{BinOpToken, Delimiter, Token, TokenKind};\n use rustc_ast::tokenstream::{Cursor, Spacing, TokenStream, TokenTree};\n use rustc_ast::{ast, ptr};\n use rustc_ast_pretty::pprust;\n@@ -203,7 +203,7 @@ fn rewrite_macro_inner(\n     let is_forced_bracket = FORCED_BRACKET_MACROS.contains(&&macro_name[..]);\n \n     let style = if is_forced_bracket && !is_nested_macro {\n-        DelimToken::Bracket\n+        Delimiter::Bracket\n     } else {\n         original_style\n     };\n@@ -212,15 +212,15 @@ fn rewrite_macro_inner(\n     let has_comment = contains_comment(context.snippet(mac.span()));\n     if ts.is_empty() && !has_comment {\n         return match style {\n-            DelimToken::Paren if position == MacroPosition::Item => {\n+            Delimiter::Parenthesis if position == MacroPosition::Item => {\n                 Some(format!(\"{}();\", macro_name))\n             }\n-            DelimToken::Bracket if position == MacroPosition::Item => {\n+            Delimiter::Bracket if position == MacroPosition::Item => {\n                 Some(format!(\"{}[];\", macro_name))\n             }\n-            DelimToken::Paren => Some(format!(\"{}()\", macro_name)),\n-            DelimToken::Bracket => Some(format!(\"{}[]\", macro_name)),\n-            DelimToken::Brace => Some(format!(\"{} {{}}\", macro_name)),\n+            Delimiter::Parenthesis => Some(format!(\"{}()\", macro_name)),\n+            Delimiter::Bracket => Some(format!(\"{}[]\", macro_name)),\n+            Delimiter::Brace => Some(format!(\"{} {{}}\", macro_name)),\n             _ => unreachable!(),\n         };\n     }\n@@ -260,7 +260,7 @@ fn rewrite_macro_inner(\n     }\n \n     match style {\n-        DelimToken::Paren => {\n+        Delimiter::Parenthesis => {\n             // Handle special case: `vec!(expr; expr)`\n             if vec_with_semi {\n                 handle_vec_semi(context, shape, arg_vec, macro_name, style)\n@@ -286,7 +286,7 @@ fn rewrite_macro_inner(\n                 })\n             }\n         }\n-        DelimToken::Bracket => {\n+        Delimiter::Bracket => {\n             // Handle special case: `vec![expr; expr]`\n             if vec_with_semi {\n                 handle_vec_semi(context, shape, arg_vec, macro_name, style)\n@@ -323,7 +323,7 @@ fn rewrite_macro_inner(\n                 Some(format!(\"{}{}\", rewrite, comma))\n             }\n         }\n-        DelimToken::Brace => {\n+        Delimiter::Brace => {\n             // For macro invocations with braces, always put a space between\n             // the `macro_name!` and `{ /* macro_body */ }` but skip modifying\n             // anything in between the braces (for now).\n@@ -342,11 +342,11 @@ fn handle_vec_semi(\n     shape: Shape,\n     arg_vec: Vec<MacroArg>,\n     macro_name: String,\n-    delim_token: DelimToken,\n+    delim_token: Delimiter,\n ) -> Option<String> {\n     let (left, right) = match delim_token {\n-        DelimToken::Paren => (\"(\", \")\"),\n-        DelimToken::Bracket => (\"[\", \"]\"),\n+        Delimiter::Parenthesis => (\"(\", \")\"),\n+        Delimiter::Bracket => (\"[\", \"]\"),\n         _ => unreachable!(),\n     };\n \n@@ -528,7 +528,7 @@ enum MacroArgKind {\n     /// e.g., `$($foo: expr),*`\n     Repeat(\n         /// `()`, `[]` or `{}`.\n-        DelimToken,\n+        Delimiter,\n         /// Inner arguments inside delimiters.\n         Vec<ParsedMacroArg>,\n         /// Something after the closing delimiter and the repeat token, if available.\n@@ -537,7 +537,7 @@ enum MacroArgKind {\n         Token,\n     ),\n     /// e.g., `[derive(Debug)]`\n-    Delimited(DelimToken, Vec<ParsedMacroArg>),\n+    Delimited(Delimiter, Vec<ParsedMacroArg>),\n     /// A possible separator. e.g., `,` or `;`.\n     Separator(String, String),\n     /// Other random stuff that does not fit to other kinds.\n@@ -547,22 +547,22 @@ enum MacroArgKind {\n \n fn delim_token_to_str(\n     context: &RewriteContext<'_>,\n-    delim_token: DelimToken,\n+    delim_token: Delimiter,\n     shape: Shape,\n     use_multiple_lines: bool,\n     inner_is_empty: bool,\n ) -> (String, String) {\n     let (lhs, rhs) = match delim_token {\n-        DelimToken::Paren => (\"(\", \")\"),\n-        DelimToken::Bracket => (\"[\", \"]\"),\n-        DelimToken::Brace => {\n+        Delimiter::Parenthesis => (\"(\", \")\"),\n+        Delimiter::Bracket => (\"[\", \"]\"),\n+        Delimiter::Brace => {\n             if inner_is_empty || use_multiple_lines {\n                 (\"{\", \"}\")\n             } else {\n                 (\"{ \", \" }\")\n             }\n         }\n-        DelimToken::NoDelim => unreachable!(),\n+        Delimiter::Invisible => unreachable!(),\n     };\n     if use_multiple_lines {\n         let indent_str = shape.indent.to_string_with_newline(context.config);\n@@ -583,8 +583,8 @@ impl MacroArgKind {\n     fn starts_with_brace(&self) -> bool {\n         matches!(\n             *self,\n-            MacroArgKind::Repeat(DelimToken::Brace, _, _, _)\n-                | MacroArgKind::Delimited(DelimToken::Brace, _)\n+            MacroArgKind::Repeat(Delimiter::Brace, _, _, _)\n+                | MacroArgKind::Delimited(Delimiter::Brace, _)\n         )\n     }\n \n@@ -753,7 +753,7 @@ impl MacroArgParser {\n         }\n     }\n \n-    fn add_delimited(&mut self, inner: Vec<ParsedMacroArg>, delim: DelimToken) {\n+    fn add_delimited(&mut self, inner: Vec<ParsedMacroArg>, delim: Delimiter) {\n         self.result.push(ParsedMacroArg {\n             kind: MacroArgKind::Delimited(delim, inner),\n         });\n@@ -763,7 +763,7 @@ impl MacroArgParser {\n     fn add_repeat(\n         &mut self,\n         inner: Vec<ParsedMacroArg>,\n-        delim: DelimToken,\n+        delim: Delimiter,\n         iter: &mut Cursor,\n     ) -> Option<()> {\n         let mut buffer = String::new();\n@@ -1083,18 +1083,18 @@ pub(crate) fn convert_try_mac(\n     }\n }\n \n-pub(crate) fn macro_style(mac: &ast::MacCall, context: &RewriteContext<'_>) -> DelimToken {\n+pub(crate) fn macro_style(mac: &ast::MacCall, context: &RewriteContext<'_>) -> Delimiter {\n     let snippet = context.snippet(mac.span());\n     let paren_pos = snippet.find_uncommented(\"(\").unwrap_or(usize::max_value());\n     let bracket_pos = snippet.find_uncommented(\"[\").unwrap_or(usize::max_value());\n     let brace_pos = snippet.find_uncommented(\"{\").unwrap_or(usize::max_value());\n \n     if paren_pos < bracket_pos && paren_pos < brace_pos {\n-        DelimToken::Paren\n+        Delimiter::Parenthesis\n     } else if bracket_pos < brace_pos {\n-        DelimToken::Bracket\n+        Delimiter::Bracket\n     } else {\n-        DelimToken::Brace\n+        Delimiter::Brace\n     }\n }\n \n@@ -1174,7 +1174,7 @@ struct Macro {\n // rather than clone them, if we can make the borrowing work out.\n struct MacroBranch {\n     span: Span,\n-    args_paren_kind: DelimToken,\n+    args_paren_kind: Delimiter,\n     args: TokenStream,\n     body: Span,\n     whole_body: Span,\n@@ -1188,7 +1188,7 @@ impl MacroBranch {\n         multi_branch_style: bool,\n     ) -> Option<String> {\n         // Only attempt to format function-like macros.\n-        if self.args_paren_kind != DelimToken::Paren {\n+        if self.args_paren_kind != Delimiter::Parenthesis {\n             // FIXME(#1539): implement for non-sugared macros.\n             return None;\n         }\n@@ -1350,18 +1350,18 @@ fn rewrite_macro_with_items(\n     items: &[MacroArg],\n     macro_name: &str,\n     shape: Shape,\n-    style: DelimToken,\n+    style: Delimiter,\n     position: MacroPosition,\n     span: Span,\n ) -> Option<String> {\n     let (opener, closer) = match style {\n-        DelimToken::Paren => (\"(\", \")\"),\n-        DelimToken::Bracket => (\"[\", \"]\"),\n-        DelimToken::Brace => (\" {\", \"}\"),\n+        Delimiter::Parenthesis => (\"(\", \")\"),\n+        Delimiter::Bracket => (\"[\", \"]\"),\n+        Delimiter::Brace => (\" {\", \"}\"),\n         _ => return None,\n     };\n     let trailing_semicolon = match style {\n-        DelimToken::Paren | DelimToken::Bracket if position == MacroPosition::Item => \";\",\n+        Delimiter::Parenthesis | Delimiter::Bracket if position == MacroPosition::Item => \";\",\n         _ => \"\",\n     };\n "}, {"sha": "f115e7d0261826b9bfd30b91a8fd776ce6fab1be", "filename": "src/overflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=70067e31ed8da831c4b564d3ce803099a7696eaf", "patch": "@@ -3,7 +3,7 @@\n use std::cmp::min;\n \n use itertools::Itertools;\n-use rustc_ast::token::DelimToken;\n+use rustc_ast::token::Delimiter;\n use rustc_ast::{ast, ptr};\n use rustc_span::Span;\n \n@@ -297,11 +297,11 @@ pub(crate) fn rewrite_with_square_brackets<'a, T: 'a + IntoOverflowableItem<'a>>\n     shape: Shape,\n     span: Span,\n     force_separator_tactic: Option<SeparatorTactic>,\n-    delim_token: Option<DelimToken>,\n+    delim_token: Option<Delimiter>,\n ) -> Option<String> {\n     let (lhs, rhs) = match delim_token {\n-        Some(DelimToken::Paren) => (\"(\", \")\"),\n-        Some(DelimToken::Brace) => (\"{\", \"}\"),\n+        Some(Delimiter::Parenthesis) => (\"(\", \")\"),\n+        Some(Delimiter::Brace) => (\"{\", \"}\"),\n         _ => (\"[\", \"]\"),\n     };\n     Context::new("}, {"sha": "09b3e32df312d5b026be722102e2e20e526ad1a8", "filename": "src/parse/macros/cfg_if.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Fparse%2Fmacros%2Fcfg_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Fparse%2Fmacros%2Fcfg_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fmacros%2Fcfg_if.rs?ref=70067e31ed8da831c4b564d3ce803099a7696eaf", "patch": "@@ -1,7 +1,7 @@\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n use rustc_ast::ast;\n-use rustc_ast::token::{DelimToken, TokenKind};\n+use rustc_ast::token::{Delimiter, TokenKind};\n use rustc_parse::parser::ForceCollect;\n use rustc_span::symbol::kw;\n \n@@ -47,11 +47,11 @@ fn parse_cfg_if_inner<'a>(\n                 .map_err(|_| \"Failed to parse attributes\")?;\n         }\n \n-        if !parser.eat(&TokenKind::OpenDelim(DelimToken::Brace)) {\n+        if !parser.eat(&TokenKind::OpenDelim(Delimiter::Brace)) {\n             return Err(\"Expected an opening brace\");\n         }\n \n-        while parser.token != TokenKind::CloseDelim(DelimToken::Brace)\n+        while parser.token != TokenKind::CloseDelim(Delimiter::Brace)\n             && parser.token.kind != TokenKind::Eof\n         {\n             let item = match parser.parse_item(ForceCollect::No) {\n@@ -70,7 +70,7 @@ fn parse_cfg_if_inner<'a>(\n             }\n         }\n \n-        if !parser.eat(&TokenKind::CloseDelim(DelimToken::Brace)) {\n+        if !parser.eat(&TokenKind::CloseDelim(Delimiter::Brace)) {\n             return Err(\"Expected a closing brace\");\n         }\n "}, {"sha": "d4dbf21f8cab7fffa14ca8abd08530c78f50bd88", "filename": "src/parse/macros/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Fparse%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Fparse%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fmacros%2Fmod.rs?ref=70067e31ed8da831c4b564d3ce803099a7696eaf", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::token::{DelimToken, TokenKind};\n+use rustc_ast::token::{Delimiter, TokenKind};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::{ast, ptr};\n use rustc_parse::parser::{ForceCollect, Parser};\n@@ -81,7 +81,7 @@ fn check_keyword<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n             && parser.look_ahead(1, |t| {\n                 t.kind == TokenKind::Eof\n                     || t.kind == TokenKind::Comma\n-                    || t.kind == TokenKind::CloseDelim(DelimToken::NoDelim)\n+                    || t.kind == TokenKind::CloseDelim(Delimiter::Invisible)\n             })\n         {\n             parser.bump();\n@@ -97,15 +97,15 @@ fn check_keyword<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n pub(crate) fn parse_macro_args(\n     context: &RewriteContext<'_>,\n     tokens: TokenStream,\n-    style: DelimToken,\n+    style: Delimiter,\n     forced_bracket: bool,\n ) -> Option<ParsedMacroArgs> {\n     let mut parser = build_parser(context, tokens);\n     let mut args = Vec::new();\n     let mut vec_with_semi = false;\n     let mut trailing_comma = false;\n \n-    if DelimToken::Brace != style {\n+    if Delimiter::Brace != style {\n         loop {\n             if let Some(arg) = check_keyword(&mut parser) {\n                 args.push(arg);"}, {"sha": "f04fb2e0446c2f06e870a702d19e59ff8215560d", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70067e31ed8da831c4b564d3ce803099a7696eaf/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=70067e31ed8da831c4b564d3ce803099a7696eaf", "patch": "@@ -1,7 +1,7 @@\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n \n-use rustc_ast::{ast, token::DelimToken, visit, AstLike};\n+use rustc_ast::{ast, token::Delimiter, visit, AstLike};\n use rustc_data_structures::sync::Lrc;\n use rustc_span::{symbol, BytePos, Pos, Span};\n \n@@ -689,7 +689,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         // with whitespace between the delimiters and trailing semi (i.e. `foo!(abc)     ;`)\n         // are formatted correctly.\n         let (span, rewrite) = match macro_style(mac, &self.get_context()) {\n-            DelimToken::Bracket | DelimToken::Paren if MacroPosition::Item == pos => {\n+            Delimiter::Bracket | Delimiter::Parenthesis if MacroPosition::Item == pos => {\n                 let search_span = mk_sp(mac.span().hi(), self.snippet_provider.end_pos());\n                 let hi = self.snippet_provider.span_before(search_span, \";\");\n                 let target_span = mk_sp(mac.span().lo(), hi + BytePos(1));"}]}