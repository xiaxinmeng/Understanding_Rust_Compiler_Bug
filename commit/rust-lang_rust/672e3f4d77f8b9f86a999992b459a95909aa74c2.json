{"sha": "672e3f4d77f8b9f86a999992b459a95909aa74c2", "node_id": "C_kwDOAAsO6NoAKDY3MmUzZjRkNzdmOGI5Zjg2YTk5OTk5MmI0NTlhOTU5MDlhYTc0YzI", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-23T07:28:48Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-09-25T23:56:26Z"}, "message": "fix #102087, Suggest Default::default() when binding isn't initialized", "tree": {"sha": "dc760065aa30e12057f6eafbabf6f81a9228efc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc760065aa30e12057f6eafbabf6f81a9228efc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/672e3f4d77f8b9f86a999992b459a95909aa74c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/672e3f4d77f8b9f86a999992b459a95909aa74c2", "html_url": "https://github.com/rust-lang/rust/commit/672e3f4d77f8b9f86a999992b459a95909aa74c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/672e3f4d77f8b9f86a999992b459a95909aa74c2/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11bb80a92b4f46fa7dfa9148d0bdfc185a7621bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/11bb80a92b4f46fa7dfa9148d0bdfc185a7621bd", "html_url": "https://github.com/rust-lang/rust/commit/11bb80a92b4f46fa7dfa9148d0bdfc185a7621bd"}], "stats": {"total": 514, "additions": 514, "deletions": 0}, "files": [{"sha": "3182656b6aa925d0f2a58111feb30377379684ce", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -369,6 +369,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut visitor = ConditionVisitor { spans: &spans, name: &name, errors: vec![] };\n         visitor.visit_body(&body);\n \n+        let mut show_assign_sugg = false;\n         let isnt_initialized = if let InitializationRequiringAction::PartialAssignment\n         | InitializationRequiringAction::Assignment = desired_action\n         {\n@@ -396,6 +397,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             .count()\n             == 0\n         {\n+            show_assign_sugg = true;\n             \"isn't initialized\"\n         } else {\n             \"is possibly-uninitialized\"\n@@ -446,10 +448,78 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             }\n         }\n+\n         err.span_label(decl_span, \"binding declared here but left uninitialized\");\n+        if show_assign_sugg {\n+            struct LetVisitor {\n+                decl_span: Span,\n+                sugg_span: Option<Span>,\n+            }\n+\n+            impl<'v> Visitor<'v> for LetVisitor {\n+                fn visit_stmt(&mut self, ex: &'v hir::Stmt<'v>) {\n+                    if self.sugg_span.is_some() {\n+                        return;\n+                    }\n+                    if let hir::StmtKind::Local(hir::Local {\n+                            span, ty, init: None, ..\n+                        }) = &ex.kind && span.contains(self.decl_span) {\n+                            self.sugg_span = ty.map_or(Some(self.decl_span), |ty| Some(ty.span));\n+                    }\n+                    hir::intravisit::walk_stmt(self, ex);\n+                }\n+            }\n+\n+            let mut visitor = LetVisitor { decl_span, sugg_span: None };\n+            visitor.visit_body(&body);\n+            if let Some(span) = visitor.sugg_span {\n+                self.suggest_assign_value(&mut err, moved_place, span);\n+            }\n+        }\n         err\n     }\n \n+    fn suggest_assign_value(\n+        &self,\n+        err: &mut Diagnostic,\n+        moved_place: PlaceRef<'tcx>,\n+        sugg_span: Span,\n+    ) {\n+        let ty = moved_place.ty(self.body, self.infcx.tcx).ty;\n+        debug!(\"ty: {:?}, kind: {:?}\", ty, ty.kind());\n+\n+        let tcx = self.infcx.tcx;\n+        let implements_default = |ty, param_env| {\n+            let Some(default_trait) = tcx.get_diagnostic_item(sym::Default) else {\n+                return false;\n+            };\n+            tcx.infer_ctxt().enter(|infcx| {\n+                infcx\n+                    .type_implements_trait(default_trait, ty, ty::List::empty(), param_env)\n+                    .may_apply()\n+            })\n+        };\n+\n+        let assign_value = match ty.kind() {\n+            ty::Bool => \"false\",\n+            ty::Float(_) => \"0.0\",\n+            ty::Int(_) | ty::Uint(_) => \"0\",\n+            ty::Never | ty::Error(_) => \"\",\n+            ty::Adt(def, _) if Some(def.did()) == tcx.get_diagnostic_item(sym::Vec) => \"vec![]\",\n+            ty::Adt(_, _) if implements_default(ty, self.param_env) => \"Default::default()\",\n+            _ => \"todo!()\",\n+        };\n+\n+        if !assign_value.is_empty() {\n+            err.span_suggestion_verbose(\n+                sugg_span.shrink_to_hi(),\n+                format!(\"consider assigning a value\"),\n+                format!(\" = {}\", assign_value),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n+\n     fn suggest_borrow_fn_like(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "eef16a165a87556f187cbdbca517682024a1b87a", "filename": "src/test/ui/asm/aarch64/type-check-2-2.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |         let x: u64;\n    |             - binding declared here but left uninitialized\n LL |         asm!(\"{}\", in(reg) x);\n    |                            ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |         let x: u64 = 0;\n+   |                    +++\n \n error[E0381]: used binding `y` isn't initialized\n   --> $DIR/type-check-2-2.rs:22:9\n@@ -13,6 +18,11 @@ LL |         let mut y: u64;\n    |             ----- binding declared here but left uninitialized\n LL |         asm!(\"{}\", inout(reg) y);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ `y` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |         let mut y: u64 = 0;\n+   |                        +++\n \n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n   --> $DIR/type-check-2-2.rs:30:29"}, {"sha": "bd90461e52c17d750ea85c353e8c0384ae788a88", "filename": "src/test/ui/asm/x86_64/type-check-5.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |         let x: u64;\n    |             - binding declared here but left uninitialized\n LL |         asm!(\"{}\", in(reg) x);\n    |                            ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |         let x: u64 = 0;\n+   |                    +++\n \n error[E0381]: used binding `y` isn't initialized\n   --> $DIR/type-check-5.rs:18:9\n@@ -13,6 +18,11 @@ LL |         let mut y: u64;\n    |             ----- binding declared here but left uninitialized\n LL |         asm!(\"{}\", inout(reg) y);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ `y` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |         let mut y: u64 = 0;\n+   |                        +++\n \n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n   --> $DIR/type-check-5.rs:26:29"}, {"sha": "f47921a97526906737dfc035c6b64421b23f353c", "filename": "src/test/ui/borrowck/borrowck-block-unint.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -7,6 +7,11 @@ LL |     force(|| {\n    |           ^^ `x` used here but it isn't initialized\n LL |         println!(\"{}\", x);\n    |                        - borrow occurs due to use in closure\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error: aborting due to previous error\n "}, {"sha": "ea93a8f409ce41555c4a5869e205183734f05723", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -8,6 +8,10 @@ LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error: aborting due to previous error\n "}, {"sha": "a7a8fc2ff837890665c04ee1681da34c5f020ccb", "filename": "src/test/ui/borrowck/borrowck-break-uninit.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -8,6 +8,10 @@ LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error: aborting due to previous error\n "}, {"sha": "1a22b5f0975c0260b64b5253b325cc170dd0af9a", "filename": "src/test/ui/borrowck/borrowck-init-in-called-fn-expr.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |         let i: isize;\n    |             - binding declared here but left uninitialized\n LL |         i\n    |         ^ `i` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |         let i: isize = 0;\n+   |                      +++\n \n error: aborting due to previous error\n "}, {"sha": "f1b9b9aa7090a8f8352eb4b4f8086537edd3ad02", "filename": "src/test/ui/borrowck/borrowck-init-in-fn-expr.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |         let i: isize;\n    |             - binding declared here but left uninitialized\n LL |         i\n    |         ^ `i` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |         let i: isize = 0;\n+   |                      +++\n \n error: aborting due to previous error\n "}, {"sha": "39b28811a0c278fc33177d1520954fb7be47e9b9", "filename": "src/test/ui/borrowck/borrowck-init-in-fru.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fru.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let mut origin: Point;\n    |         ---------- binding declared here but left uninitialized\n LL |     origin = Point { x: 10, ..origin };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ `origin.y` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let mut origin: Point = todo!();\n+   |                           +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ef0fa6df4fb7e71cee2813ef085d81f7751d7195", "filename": "src/test/ui/borrowck/borrowck-init-op-equal.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let v: isize;\n    |         - binding declared here but left uninitialized\n LL |     v += 1;\n    |     ^^^^^^ `v` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let v: isize = 0;\n+   |                  +++\n \n error: aborting due to previous error\n "}, {"sha": "cec053318364705e52231a14b8928e5924441bd1", "filename": "src/test/ui/borrowck/borrowck-init-plus-equal.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let mut v: isize;\n    |         ----- binding declared here but left uninitialized\n LL |     v = v + 1;\n    |         ^ `v` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let mut v: isize = 0;\n+   |                      +++\n \n error: aborting due to previous error\n "}, {"sha": "9799357c9ca1967a3e48b302dbe1f27965f85ad9", "filename": "src/test/ui/borrowck/borrowck-return.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     return x;\n    |            ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error: aborting due to previous error\n "}, {"sha": "3a413153acd19c39ec2068ad75ef438aedde7648", "filename": "src/test/ui/borrowck/borrowck-storage-dead.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |         let x: i32;\n    |             - binding declared here but left uninitialized\n LL |         let _ = x + 1;\n    |                 ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |         let x: i32 = 0;\n+   |                    +++\n \n error: aborting due to previous error\n "}, {"sha": "071598b42eecd81f5a8a246460b87f178711dfbc", "filename": "src/test/ui/borrowck/borrowck-uninit-after-item.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -6,6 +6,11 @@ LL |     let bar;\n LL |     fn baz(_x: isize) { }\n LL |     baz(bar);\n    |         ^^^ `bar` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let bar = 0;\n+   |             +++\n \n error: aborting due to previous error\n "}, {"sha": "f0f4ad704b7cac1f4516a33cad7e1acfba9b1e23", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let mut a: Point;\n    |         ----- binding declared here but left uninitialized\n LL |     let _ = a.x + 1;\n    |             ^^^ `a.x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let mut a: Point = Default::default();\n+   |                      ++++++++++++++++++++\n \n error[E0382]: use of moved value: `line1.origin`\n   --> $DIR/borrowck-uninit-field-access.rs:25:13"}, {"sha": "fdbb451bde4e8461aeb9b604b5ea0a5d91be05d8", "filename": "src/test/ui/borrowck/borrowck-uninit-in-assignop.stderr", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     x += 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:9:5\n@@ -13,6 +18,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     x -= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:12:5\n@@ -21,6 +31,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     x *= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:15:5\n@@ -29,6 +44,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     x /= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:18:5\n@@ -37,6 +57,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     x %= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:21:5\n@@ -45,6 +70,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     x ^= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:24:5\n@@ -53,6 +83,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     x &= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:27:5\n@@ -61,6 +96,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     x |= 1;\n    |     ^^^^^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:30:5\n@@ -69,6 +109,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     x <<= 1;\n    |     ^^^^^^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-in-assignop.rs:33:5\n@@ -77,6 +122,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     x >>= 1;\n    |     ^^^^^^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error: aborting due to 10 previous errors\n "}, {"sha": "73fded7545cc62c1188f2c4ad4a9c4c9a3c1ea8a", "filename": "src/test/ui/borrowck/borrowck-uninit-ref-chain.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-ref-chain.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let x: &&Box<i32>;\n    |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n    |              ^^^^ `**x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: &&Box<i32> = todo!();\n+   |                       +++++++++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:11:14\n@@ -13,6 +18,11 @@ LL |     let x: &&S<i32, i32>;\n    |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n    |              ^^^^ `**x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: &&S<i32, i32> = todo!();\n+   |                          +++++++++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:14:14\n@@ -21,6 +31,11 @@ LL |     let x: &&i32;\n    |         - binding declared here but left uninitialized\n LL |     let _y = &**x;\n    |              ^^^^ `**x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: &&i32 = todo!();\n+   |                  +++++++++\n \n error[E0381]: partially assigned binding `a` isn't fully initialized\n   --> $DIR/borrowck-uninit-ref-chain.rs:18:5"}, {"sha": "eeafc4ce191c618a416638e619f2b7d46e4f0f16", "filename": "src/test/ui/borrowck/borrowck-uninit.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let x: isize;\n    |         - binding declared here but left uninitialized\n LL |     foo(x);\n    |         ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: isize = 0;\n+   |                  +++\n \n error: aborting due to previous error\n "}, {"sha": "18e808f10d0c63bc2c942f2d71843543a17bfda2", "filename": "src/test/ui/borrowck/borrowck-use-in-index-lvalue.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-in-index-lvalue.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let w: &mut [isize];\n    |         - binding declared here but left uninitialized\n LL |     w[5] = 0;\n    |     ^^^^ `*w` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let w: &mut [isize] = todo!();\n+   |                         +++++++++\n \n error[E0381]: used binding `w` isn't initialized\n   --> $DIR/borrowck-use-in-index-lvalue.rs:6:5\n@@ -13,6 +18,11 @@ LL |     let mut w: &mut [isize];\n    |         ----- binding declared here but left uninitialized\n LL |     w[5] = 0;\n    |     ^^^^ `*w` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let mut w: &mut [isize] = todo!();\n+   |                             +++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "55f3ff553c13cbcd243fbdb5a7454b583449b53a", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast-trait.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let x: &i32;\n    |         - binding declared here but left uninitialized\n LL |     let y = x as *const dyn Foo;\n    |             ^ `*x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: &i32 = todo!();\n+   |                 +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ea3d0d3ef51cb4bf9c69b6172f61d80fd2d6ec51", "filename": "src/test/ui/borrowck/borrowck-use-uninitialized-in-cast.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let x: &i32;\n    |         - binding declared here but left uninitialized\n LL |     let y = x as *const i32;\n    |             ^ `*x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: &i32 = todo!();\n+   |                 +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "5d01949895639a21f7a6f98490f73271efe2fc48", "filename": "src/test/ui/borrowck/borrowck-while-cond.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let x: bool;\n    |         - binding declared here but left uninitialized\n LL |     while x { }\n    |           ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: bool = false;\n+   |                 +++++++\n \n error: aborting due to previous error\n "}, {"sha": "58d1c8c0f73ad4b0851db87d98f745a054e7cf98", "filename": "src/test/ui/borrowck/issue-24267-flow-exit.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -8,6 +8,10 @@ LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let x: i32 = 0;\n+   |                +++\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/issue-24267-flow-exit.rs:18:20\n@@ -19,6 +23,10 @@ LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let x: i32 = 0;\n+   |                +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9683da919aaf31cda2bdce5cb2ae515d96b0d9ac", "filename": "src/test/ui/borrowck/issue-62107-match-arm-scopes.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let e: i32;\n    |         - binding declared here but left uninitialized\n LL |     match e {\n    |           ^ `e` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let e: i32 = 0;\n+   |                +++\n \n error: aborting due to previous error\n "}, {"sha": "aaca9d47f0aee07bacb6c6217a31e983b80903a0", "filename": "src/test/ui/borrowck/suggest-assign-rvalue.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-assign-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-assign-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-assign-rvalue.rs?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -0,0 +1,57 @@\n+#![allow(dead_code)]\n+#![feature(never_type)]\n+\n+#[derive(Debug, Default)]\n+struct Demo {}\n+\n+#[derive(Debug)]\n+struct DemoNoDef {}\n+\n+fn apple(_: u32) {}\n+\n+fn banana() {\n+    let chaenomeles;\n+    apple(chaenomeles);\n+    //~^ ERROR used binding `chaenomeles` isn't initialized [E0381]\n+}\n+\n+fn main() {\n+    let my_bool: bool = bool::default();\n+    println!(\"my_bool: {}\", my_bool);\n+\n+    let my_float: f32;\n+    println!(\"my_float: {}\", my_float);\n+    //~^ ERROR used binding `my_float` isn't initialized\n+    let demo: Demo;\n+    println!(\"demo: {:?}\", demo);\n+    //~^ ERROR used binding `demo` isn't initialized\n+\n+    let demo_no: DemoNoDef;\n+    println!(\"demo_no: {:?}\", demo_no);\n+    //~^ ERROR used binding `demo_no` isn't initialized\n+\n+    let arr: [i32; 5];\n+    println!(\"arr: {:?}\", arr);\n+    //~^ ERROR used binding `arr` isn't initialized\n+    let foo: Vec<&str>;\n+    println!(\"foo: {:?}\", foo);\n+    //~^ ERROR used binding `foo` isn't initialized\n+\n+    let my_string: String;\n+    println!(\"my_string: {}\", my_string);\n+    //~^ ERROR used binding `my_string` isn't initialized\n+\n+    let my_int: &i32;\n+    println!(\"my_int: {}\", *my_int);\n+    //~^ ERROR used binding `my_int` isn't initialized\n+\n+    let hello: &str;\n+    println!(\"hello: {}\", hello);\n+    //~^ ERROR used binding `hello` isn't initialized\n+\n+    let never: !;\n+    println!(\"never: {}\", never);\n+    //~^ ERROR used binding `never` isn't initialized [E0381]\n+\n+    banana();\n+}"}, {"sha": "92acba640d756864d426aaeb6c3ee94d68a17db9", "filename": "src/test/ui/borrowck/suggest-assign-rvalue.stderr", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-assign-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-assign-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-assign-rvalue.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -0,0 +1,138 @@\n+error[E0381]: used binding `chaenomeles` isn't initialized\n+  --> $DIR/suggest-assign-rvalue.rs:14:11\n+   |\n+LL |     let chaenomeles;\n+   |         ----------- binding declared here but left uninitialized\n+LL |     apple(chaenomeles);\n+   |           ^^^^^^^^^^^ `chaenomeles` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let chaenomeles = 0;\n+   |                     +++\n+\n+error[E0381]: used binding `my_float` isn't initialized\n+  --> $DIR/suggest-assign-rvalue.rs:23:30\n+   |\n+LL |     let my_float: f32;\n+   |         -------- binding declared here but left uninitialized\n+LL |     println!(\"my_float: {}\", my_float);\n+   |                              ^^^^^^^^ `my_float` used here but it isn't initialized\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let my_float: f32 = 0.0;\n+   |                       +++++\n+\n+error[E0381]: used binding `demo` isn't initialized\n+  --> $DIR/suggest-assign-rvalue.rs:26:28\n+   |\n+LL |     let demo: Demo;\n+   |         ---- binding declared here but left uninitialized\n+LL |     println!(\"demo: {:?}\", demo);\n+   |                            ^^^^ `demo` used here but it isn't initialized\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let demo: Demo = Default::default();\n+   |                    ++++++++++++++++++++\n+\n+error[E0381]: used binding `demo_no` isn't initialized\n+  --> $DIR/suggest-assign-rvalue.rs:30:31\n+   |\n+LL |     let demo_no: DemoNoDef;\n+   |         ------- binding declared here but left uninitialized\n+LL |     println!(\"demo_no: {:?}\", demo_no);\n+   |                               ^^^^^^^ `demo_no` used here but it isn't initialized\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let demo_no: DemoNoDef = todo!();\n+   |                            +++++++++\n+\n+error[E0381]: used binding `arr` isn't initialized\n+  --> $DIR/suggest-assign-rvalue.rs:34:27\n+   |\n+LL |     let arr: [i32; 5];\n+   |         --- binding declared here but left uninitialized\n+LL |     println!(\"arr: {:?}\", arr);\n+   |                           ^^^ `arr` used here but it isn't initialized\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let arr: [i32; 5] = todo!();\n+   |                       +++++++++\n+\n+error[E0381]: used binding `foo` isn't initialized\n+  --> $DIR/suggest-assign-rvalue.rs:37:27\n+   |\n+LL |     let foo: Vec<&str>;\n+   |         --- binding declared here but left uninitialized\n+LL |     println!(\"foo: {:?}\", foo);\n+   |                           ^^^ `foo` used here but it isn't initialized\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let foo: Vec<&str> = vec![];\n+   |                        ++++++++\n+\n+error[E0381]: used binding `my_string` isn't initialized\n+  --> $DIR/suggest-assign-rvalue.rs:41:31\n+   |\n+LL |     let my_string: String;\n+   |         --------- binding declared here but left uninitialized\n+LL |     println!(\"my_string: {}\", my_string);\n+   |                               ^^^^^^^^^ `my_string` used here but it isn't initialized\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let my_string: String = Default::default();\n+   |                           ++++++++++++++++++++\n+\n+error[E0381]: used binding `my_int` isn't initialized\n+  --> $DIR/suggest-assign-rvalue.rs:45:28\n+   |\n+LL |     let my_int: &i32;\n+   |         ------ binding declared here but left uninitialized\n+LL |     println!(\"my_int: {}\", *my_int);\n+   |                            ^^^^^^^ `*my_int` used here but it isn't initialized\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let my_int: &i32 = todo!();\n+   |                      +++++++++\n+\n+error[E0381]: used binding `hello` isn't initialized\n+  --> $DIR/suggest-assign-rvalue.rs:49:27\n+   |\n+LL |     let hello: &str;\n+   |         ----- binding declared here but left uninitialized\n+LL |     println!(\"hello: {}\", hello);\n+   |                           ^^^^^ `hello` used here but it isn't initialized\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let hello: &str = todo!();\n+   |                     +++++++++\n+\n+error[E0381]: used binding `never` isn't initialized\n+  --> $DIR/suggest-assign-rvalue.rs:53:27\n+   |\n+LL |     let never: !;\n+   |         ----- binding declared here but left uninitialized\n+LL |     println!(\"never: {}\", never);\n+   |                           ^^^^^ `never` used here but it isn't initialized\n+   |\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "ad061d93cb2422be2a41d136417adf220eeb2638", "filename": "src/test/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -76,6 +76,11 @@ LL |     let x: u8;\n    |         - binding declared here but left uninitialized\n LL |     let c1 = || match x { };\n    |                       ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: u8 = 0;\n+   |               +++\n \n error: aborting due to 8 previous errors\n "}, {"sha": "0ed370b83c552ae2aeeffa977506b60f62ed539d", "filename": "src/test/ui/const-generics/const-generic-default-wont-borrowck.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-default-wont-borrowck.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let s: &'static str; s.len()\n    |         -                ^^^^^^^ `*s` used here but it isn't initialized\n    |         |\n    |         binding declared here but left uninitialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let s: &'static str = todo!(); s.len()\n+   |                         +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "6b83fa0e5a01f854beaf6106bbb7fc7df2f93c83", "filename": "src/test/ui/consts/issue-78655.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let x;\n    |         - binding declared here but left uninitialized\n LL |     &x\n    |     ^^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x = 0;\n+   |           +++\n \n error: could not evaluate constant pattern\n   --> $DIR/issue-78655.rs:7:9"}, {"sha": "e8d98477d32688011cde2eefda090d2f7781e1e1", "filename": "src/test/ui/drop/repeat-drop-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -24,6 +24,11 @@ LL |     let x: u8;\n    |         - binding declared here but left uninitialized\n LL |     let _ = [x; 0];\n    |              ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x: u8 = 0;\n+   |               +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f9d94b6810cb07de2003ceb09e0549170c34bd8f", "filename": "src/test/ui/loops/loop-proper-liveness.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -8,6 +8,10 @@ LL |     println!(\"{:?}\", x);\n    |                      ^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let x: i32 = 0;\n+   |                +++\n \n error: aborting due to previous error\n "}, {"sha": "49f24ed39b4274d161a1f827696e30e5bdc16db1", "filename": "src/test/ui/mir/drop-elaboration-after-borrowck-error.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -24,6 +24,11 @@ LL |     let a: [String; 1];\n LL |\n LL |     a[0] = String::new();\n    |     ^^^^ `a` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let a: [String; 1] = todo!();\n+   |                        +++++++++\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:18:9"}, {"sha": "974994223a3fd5c54fa466b2e7864fa2b87d3fc7", "filename": "src/test/ui/moves/issue-72649-uninit-in-loop.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -47,6 +47,11 @@ LL |         let value: NonCopy;\n    |             ----- binding declared here but left uninitialized\n LL |         let _used = value;\n    |                     ^^^^^ `value` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |         let value: NonCopy = todo!();\n+   |                            +++++++++\n \n error[E0381]: used binding `value` isn't initialized\n   --> $DIR/issue-72649-uninit-in-loop.rs:69:21\n@@ -56,6 +61,11 @@ LL |     let mut value: NonCopy;\n LL |     loop {\n LL |         let _used = value;\n    |                     ^^^^^ `value` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let mut value: NonCopy = todo!();\n+   |                            +++++++++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6db0f0bcbffee5fd29cf2945a094e140584baa5d", "filename": "src/test/ui/moves/move-into-dead-array-1.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-into-dead-array-1.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -5,6 +5,11 @@ LL |     let mut a: [D; 4];\n    |         ----- binding declared here but left uninitialized\n LL |     a[i] = d();\n    |     ^^^^ `a` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let mut a: [D; 4] = todo!();\n+   |                       +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ddebaa0129a43f5fd4602a0df351cb08c43fe5cf", "filename": "src/test/ui/moves/move-of-addr-of-mut.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-of-addr-of-mut.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -7,6 +7,10 @@ LL |     std::ptr::addr_of_mut!(x);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ `x` used here but it isn't initialized\n    |\n    = note: this error originates in the macro `std::ptr::addr_of_mut` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider assigning a value\n+   |\n+LL |     let mut x: S = todo!();\n+   |                  +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "2d48a914218fd45418f788884cab36595136ff23", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -9,6 +9,11 @@ LL |         _ if { x = 2; true } => 1,\n LL |         _ if {\n LL |             x;\n    |             ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x = 0;\n+   |           +++\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/match-cfg-fake-edges.rs:35:13"}, {"sha": "32666529f3f957949c5d0e0a427153ee5ac743b9", "filename": "src/test/ui/nll/match-on-borrowed.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -40,6 +40,11 @@ LL |     let n: Never;\n    |         - binding declared here but left uninitialized\n LL |     match n {}\n    |           ^ `n` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let n: Never = todo!();\n+   |                  +++++++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0dfd22a30acc703a2a0f7e065747059ad55c8e18", "filename": "src/test/ui/uninhabited/privately-uninhabited-mir-call.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/672e3f4d77f8b9f86a999992b459a95909aa74c2/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr?ref=672e3f4d77f8b9f86a999992b459a95909aa74c2", "patch": "@@ -6,6 +6,11 @@ LL |     let y: &mut u32;\n ...\n LL |     *y = 2;\n    |     ^^^^^^ `y` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let y: &mut u32 = todo!();\n+   |                     +++++++++\n \n error: aborting due to previous error\n "}]}