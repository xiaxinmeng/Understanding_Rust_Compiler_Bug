{"sha": "3f04e73b40ba14560edddf21e0a4021d975dc96d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMDRlNzNiNDBiYTE0NTYwZWRkZGYyMWUwYTQwMjFkOTc1ZGM5NmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-11T14:25:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-11T14:25:07Z"}, "message": "Use CValue::by_val{,_pair} at more places", "tree": {"sha": "1faa5d0d52312294608df404ac38b262ec41fa6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1faa5d0d52312294608df404ac38b262ec41fa6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f04e73b40ba14560edddf21e0a4021d975dc96d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f04e73b40ba14560edddf21e0a4021d975dc96d", "html_url": "https://github.com/rust-lang/rust/commit/3f04e73b40ba14560edddf21e0a4021d975dc96d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f04e73b40ba14560edddf21e0a4021d975dc96d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "466ecad2f0ddc55c15ee60943c84bb66ffd5ec17", "url": "https://api.github.com/repos/rust-lang/rust/commits/466ecad2f0ddc55c15ee60943c84bb66ffd5ec17", "html_url": "https://github.com/rust-lang/rust/commit/466ecad2f0ddc55c15ee60943c84bb66ffd5ec17"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "40e6b3ca172ff48b7e09fa4b18b9e03218a683f3", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f04e73b40ba14560edddf21e0a4021d975dc96d/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f04e73b40ba14560edddf21e0a4021d975dc96d/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=3f04e73b40ba14560edddf21e0a4021d975dc96d", "patch": "@@ -963,7 +963,7 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n \n     let out_place = CPlace::new_stack_slot(fx, out_ty);\n     let out_layout = out_place.layout();\n-    out_place.write_cvalue(fx, CValue::ByValPair(res, has_overflow, out_layout));\n+    out_place.write_cvalue(fx, CValue::by_val_pair(res, has_overflow, out_layout));\n \n     out_place.to_cvalue(fx)\n }"}, {"sha": "01992814b07171306f6402843b93b10d9572b90d", "filename": "src/intrinsics.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3f04e73b40ba14560edddf21e0a4021d975dc96d/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f04e73b40ba14560edddf21e0a4021d975dc96d/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=3f04e73b40ba14560edddf21e0a4021d975dc96d", "patch": "@@ -65,7 +65,7 @@ macro_rules! atomic_binop_return_old {\n         let old = $fx.bcx.ins().load(clif_ty, MemFlags::new(), $ptr, 0);\n         let new = $fx.bcx.ins().$op(old, $src);\n         $fx.bcx.ins().store(MemFlags::new(), new, $ptr, 0);\n-        $ret.write_cvalue($fx, CValue::ByVal(old, $fx.layout_of($T)));\n+        $ret.write_cvalue($fx, CValue::by_val(old, $fx.layout_of($T)));\n     };\n }\n \n@@ -82,7 +82,7 @@ macro_rules! atomic_minmax {\n         // Write new\n         $fx.bcx.ins().store(MemFlags::new(), new, $ptr, 0);\n \n-        let ret_val = CValue::ByVal(old, $ret.layout());\n+        let ret_val = CValue::by_val(old, $ret.layout());\n         $ret.write_cvalue($fx, ret_val);\n     };\n }\n@@ -165,7 +165,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     .ins()\n                     .iconst(fx.pointer_type, layout.size.bytes() as i64)\n             };\n-            ret.write_cvalue(fx, CValue::ByVal(size, usize_layout));\n+            ret.write_cvalue(fx, CValue::by_val(size, usize_layout));\n         };\n         min_align_of, <T> () {\n             let min_align = fx.layout_of(T).align.abi.bytes();\n@@ -184,7 +184,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n                     .ins()\n                     .iconst(fx.pointer_type, layout.align.abi.bytes() as i64)\n             };\n-            ret.write_cvalue(fx, CValue::ByVal(align, usize_layout));\n+            ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n         };\n         type_id, <T> () {\n             let type_id = fx.tcx.type_id_hash(T);\n@@ -312,12 +312,12 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         rotate_left, <T>(v x, v y) {\n             let layout = fx.layout_of(T);\n             let res = fx.bcx.ins().rotl(x, y);\n-            ret.write_cvalue(fx, CValue::ByVal(res, layout));\n+            ret.write_cvalue(fx, CValue::by_val(res, layout));\n         };\n         rotate_right, <T>(v x, v y) {\n             let layout = fx.layout_of(T);\n             let res = fx.bcx.ins().rotr(x, y);\n-            ret.write_cvalue(fx, CValue::ByVal(res, layout));\n+            ret.write_cvalue(fx, CValue::by_val(res, layout));\n         };\n \n         // The only difference between offset and arith_offset is regarding UB. Because Cranelift\n@@ -328,7 +328,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let ptr_diff = fx.bcx.ins().imul_imm(offset, pointee_size as i64);\n             let base_val = base.load_scalar(fx);\n             let res = fx.bcx.ins().iadd(base_val, ptr_diff);\n-            ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n+            ret.write_cvalue(fx, CValue::by_val(res, args[0].layout()));\n         };\n \n         transmute, <src_ty, dst_ty> (c from) {\n@@ -386,19 +386,19 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             ret.write_cvalue(fx, uninit_val);\n         };\n         ctlz | ctlz_nonzero, <T> (v arg) {\n-            let res = CValue::ByVal(fx.bcx.ins().clz(arg), fx.layout_of(T));\n+            let res = CValue::by_val(fx.bcx.ins().clz(arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n         cttz | cttz_nonzero, <T> (v arg) {\n-            let res = CValue::ByVal(fx.bcx.ins().ctz(arg), fx.layout_of(T));\n+            let res = CValue::by_val(fx.bcx.ins().ctz(arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n         ctpop, <T> (v arg) {\n-            let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), fx.layout_of(T));\n+            let res = CValue::by_val(fx.bcx.ins().popcnt(arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n         bitreverse, <T> (v arg) {\n-            let res = CValue::ByVal(fx.bcx.ins().bitrev(arg), fx.layout_of(T));\n+            let res = CValue::by_val(fx.bcx.ins().bitrev(arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n         needs_drop, <T> () {\n@@ -433,7 +433,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             // Read old\n             let clif_ty = fx.clif_type(T).unwrap();\n             let old = fx.bcx.ins().load(clif_ty, MemFlags::new(), ptr, 0);\n-            ret.write_cvalue(fx, CValue::ByVal(old, fx.layout_of(T)));\n+            ret.write_cvalue(fx, CValue::by_val(old, fx.layout_of(T)));\n \n             // Write new\n             let dest = CPlace::Addr(ptr, None, src.layout());"}]}