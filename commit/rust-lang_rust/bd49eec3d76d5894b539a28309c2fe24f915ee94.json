{"sha": "bd49eec3d76d5894b539a28309c2fe24f915ee94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNDllZWMzZDc2ZDU4OTRiNTM5YTI4MzA5YzJmZTI0ZjkxNWVlOTQ=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-08-30T10:41:36Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-09-01T21:06:39Z"}, "message": "interface: use `OnceCell` from standard library", "tree": {"sha": "1ef506d158751a82f981fc0455ccb38573c11d3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef506d158751a82f981fc0455ccb38573c11d3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd49eec3d76d5894b539a28309c2fe24f915ee94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd49eec3d76d5894b539a28309c2fe24f915ee94", "html_url": "https://github.com/rust-lang/rust/commit/bd49eec3d76d5894b539a28309c2fe24f915ee94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd49eec3d76d5894b539a28309c2fe24f915ee94/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb9e7c357e26bf41c47661720e46f4498de32b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9e7c357e26bf41c47661720e46f4498de32b83", "html_url": "https://github.com/rust-lang/rust/commit/eb9e7c357e26bf41c47661720e46f4498de32b83"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "3fe024ce318207ca37b58c279a774f9c31604428", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd49eec3d76d5894b539a28309c2fe24f915ee94/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bd49eec3d76d5894b539a28309c2fe24f915ee94/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bd49eec3d76d5894b539a28309c2fe24f915ee94", "patch": "@@ -3606,7 +3606,6 @@ name = \"rustc_interface\"\n version = \"0.0.0\"\n dependencies = [\n  \"libc\",\n- \"once_cell\",\n  \"rustc-rayon\",\n  \"rustc_ast\",\n  \"rustc_ast_lowering\","}, {"sha": "e214493a567b80e73088572e7c45a6033fa200cc", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd49eec3d76d5894b539a28309c2fe24f915ee94/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bd49eec3d76d5894b539a28309c2fe24f915ee94/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=bd49eec3d76d5894b539a28309c2fe24f915ee94", "patch": "@@ -43,7 +43,6 @@ rustc_resolve = { path = \"../rustc_resolve\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_ty = { path = \"../rustc_ty\" }\n tempfile = \"3.0.5\"\n-once_cell = \"1\"\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"libloaderapi\"] }"}, {"sha": "66d3765d34739b0bea318a50417f55947478fb7a", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd49eec3d76d5894b539a28309c2fe24f915ee94/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd49eec3d76d5894b539a28309c2fe24f915ee94/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=bd49eec3d76d5894b539a28309c2fe24f915ee94", "patch": "@@ -2,7 +2,6 @@ use crate::interface::{Compiler, Result};\n use crate::proc_macro_decls;\n use crate::util;\n \n-use once_cell::sync::Lazy;\n use rustc_ast::mut_visit::MutVisitor;\n use rustc_ast::{self as ast, visit};\n use rustc_codegen_ssa::back::link::emit_metadata;\n@@ -46,6 +45,7 @@ use std::any::Any;\n use std::cell::RefCell;\n use std::ffi::OsString;\n use std::io::{self, BufWriter, Write};\n+use std::lazy::SyncLazy;\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::{env, fs, iter, mem};\n@@ -681,7 +681,7 @@ pub fn prepare_outputs(\n     Ok(outputs)\n }\n \n-pub static DEFAULT_QUERY_PROVIDERS: Lazy<Providers> = Lazy::new(|| {\n+pub static DEFAULT_QUERY_PROVIDERS: SyncLazy<Providers> = SyncLazy::new(|| {\n     let providers = &mut Providers::default();\n     providers.analysis = analysis;\n     proc_macro_decls::provide(providers);\n@@ -704,7 +704,7 @@ pub static DEFAULT_QUERY_PROVIDERS: Lazy<Providers> = Lazy::new(|| {\n     *providers\n });\n \n-pub static DEFAULT_EXTERN_QUERY_PROVIDERS: Lazy<Providers> = Lazy::new(|| {\n+pub static DEFAULT_EXTERN_QUERY_PROVIDERS: SyncLazy<Providers> = SyncLazy::new(|| {\n     let mut extern_providers = *DEFAULT_QUERY_PROVIDERS;\n     rustc_metadata::provide_extern(&mut extern_providers);\n     rustc_codegen_ssa::provide_extern(&mut extern_providers);"}, {"sha": "b1b39fd1ad2995a7c7228a0a5de52af95ee45563", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd49eec3d76d5894b539a28309c2fe24f915ee94/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd49eec3d76d5894b539a28309c2fe24f915ee94/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=bd49eec3d76d5894b539a28309c2fe24f915ee94", "patch": "@@ -25,6 +25,7 @@ use rustc_span::symbol::{sym, Symbol};\n use smallvec::SmallVec;\n use std::env;\n use std::io::{self, Write};\n+use std::lazy::SyncOnceCell;\n use std::mem;\n use std::ops::DerefMut;\n use std::path::{Path, PathBuf};\n@@ -243,8 +244,7 @@ pub fn get_codegen_backend(sess: &Session) -> Box<dyn CodegenBackend> {\n // loading, so we leave the code here. It is potentially useful for other tools\n // that want to invoke the rustc binary while linking to rustc as well.\n pub fn rustc_path<'a>() -> Option<&'a Path> {\n-    static RUSTC_PATH: once_cell::sync::OnceCell<Option<PathBuf>> =\n-        once_cell::sync::OnceCell::new();\n+    static RUSTC_PATH: SyncOnceCell<Option<PathBuf>> = SyncOnceCell::new();\n \n     const BIN_PATH: &str = env!(\"RUSTC_INSTALL_BINDIR\");\n "}]}