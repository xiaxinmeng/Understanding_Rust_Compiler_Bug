{"sha": "90eb610d143e8b81de57ab4f0ade6354e3e26022", "node_id": "C_kwDOAAsO6NoAKDkwZWI2MTBkMTQzZThiODFkZTU3YWI0ZjBhZGU2MzU0ZTNlMjYwMjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-11T22:31:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T22:31:50Z"}, "message": "Rollup merge of #91737 - Manishearth:panic-immediate-stdlib, r=joshtriplett\n\nMake certain panicky stdlib functions behave better under panic_immediate_abort\n\nThe stdlib has a `panic_immediate_abort` feature that turns panics into immediate aborts, without any formatting/display logic. This feature was [introduced](https://github.com/rust-lang/rust/pull/55011) primarily for codesize-constrained situations.\n\nUnfortunately, this win doesn't quite propagate to `Result::expect()` and `Result::unwrap()`, while the formatting machinery is reduced, `expect()` and `unwrap()` both call `unwrap_failed(\"msg\", &err)` which has a signature of `fn unwrap_failed(msg: &str, error: &dyn fmt::Debug)` and is `#[inline(never)]`. This means that `unwrap_failed` will unconditionally construct a `dyn Debug` trait object even though the object is never used in the function.\n\nConstructing a trait object (even if you never call a method on it!) forces rust to include the vtable and any dependencies. This means that in `panic_immediate_abort` mode, calling expect/unwrap on a Result will pull in a whole bunch of formatting code for the error type even if it's completely unused.\n\nThis PR swaps out the function with one that won't require a trait object such that it won't force the inclusion of vtables in the code. It also gates off `#[inline(never)]` in a bunch of other places where allowing the inlining of an abort may be useful (this kind of thing is already done elsewhere in the stdlib).\n\nI don't know how to write a test for this; we don't really seem to have any tests for `panic_immediate_abort` anyway so perhaps it's fine as is.", "tree": {"sha": "32550ee664caa3e2f2d74b9c2b3068021338fd98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32550ee664caa3e2f2d74b9c2b3068021338fd98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90eb610d143e8b81de57ab4f0ade6354e3e26022", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtSbWCRBK7hj4Ov3rIwAA6ZUIAIADGuAMgoW8ldT6dW2xORV4\neNiJkz5dsdfI/GKrChy5OULVOw4xqDc378CYmQ/Qz2JJ9hD6++yYcMUnahSUHRuu\nSMvIjdWmJ0Uj2vzA/ZHy6l28tCVYn9XJrJOCydP+iBpWDGdn+PyS86Qul+1QvU8y\n/22yY2uwsTBQF+2V4qXoseQfxagZsqXPrljKhMH2v6pwjmKMbHqC8iOWCtm94NLv\nPPXaO52eEI7pxhgN4GMNukKCgP1anZwIWpiWduT7liZphZ3cpwANUafOL89admr4\n87tDbT2lsc4q8GVHLEb1Xy+/E4ABeQO5nboDxVOj+/S2movqtNVIdH8DHjK0/Ew=\n=LKEM\n-----END PGP SIGNATURE-----\n", "payload": "tree 32550ee664caa3e2f2d74b9c2b3068021338fd98\nparent 443ed7c6203608def39739b21a50a8e7a0f4e428\nparent 917dafc73a9eb257b9b5c2d357c4abd8bb1c3a8e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639261910 +0100\ncommitter GitHub <noreply@github.com> 1639261910 +0100\n\nRollup merge of #91737 - Manishearth:panic-immediate-stdlib, r=joshtriplett\n\nMake certain panicky stdlib functions behave better under panic_immediate_abort\n\nThe stdlib has a `panic_immediate_abort` feature that turns panics into immediate aborts, without any formatting/display logic. This feature was [introduced](https://github.com/rust-lang/rust/pull/55011) primarily for codesize-constrained situations.\n\nUnfortunately, this win doesn't quite propagate to `Result::expect()` and `Result::unwrap()`, while the formatting machinery is reduced, `expect()` and `unwrap()` both call `unwrap_failed(\"msg\", &err)` which has a signature of `fn unwrap_failed(msg: &str, error: &dyn fmt::Debug)` and is `#[inline(never)]`. This means that `unwrap_failed` will unconditionally construct a `dyn Debug` trait object even though the object is never used in the function.\n\nConstructing a trait object (even if you never call a method on it!) forces rust to include the vtable and any dependencies. This means that in `panic_immediate_abort` mode, calling expect/unwrap on a Result will pull in a whole bunch of formatting code for the error type even if it's completely unused.\n\nThis PR swaps out the function with one that won't require a trait object such that it won't force the inclusion of vtables in the code. It also gates off `#[inline(never)]` in a bunch of other places where allowing the inlining of an abort may be useful (this kind of thing is already done elsewhere in the stdlib).\n\nI don't know how to write a test for this; we don't really seem to have any tests for `panic_immediate_abort` anyway so perhaps it's fine as is.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90eb610d143e8b81de57ab4f0ade6354e3e26022", "html_url": "https://github.com/rust-lang/rust/commit/90eb610d143e8b81de57ab4f0ade6354e3e26022", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90eb610d143e8b81de57ab4f0ade6354e3e26022/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "443ed7c6203608def39739b21a50a8e7a0f4e428", "url": "https://api.github.com/repos/rust-lang/rust/commits/443ed7c6203608def39739b21a50a8e7a0f4e428", "html_url": "https://github.com/rust-lang/rust/commit/443ed7c6203608def39739b21a50a8e7a0f4e428"}, {"sha": "917dafc73a9eb257b9b5c2d357c4abd8bb1c3a8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/917dafc73a9eb257b9b5c2d357c4abd8bb1c3a8e", "html_url": "https://github.com/rust-lang/rust/commit/917dafc73a9eb257b9b5c2d357c4abd8bb1c3a8e"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "a6e7257448cb5155a59b04176a322a46ebd4e24c", "filename": "library/core/src/option.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/90eb610d143e8b81de57ab4f0ade6354e3e26022/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90eb610d143e8b81de57ab4f0ade6354e3e26022/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=90eb610d143e8b81de57ab4f0ade6354e3e26022", "patch": "@@ -1671,7 +1671,8 @@ impl<T, E> Option<Result<T, E>> {\n }\n \n // This is a separate function to reduce the code size of .expect() itself.\n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n const fn expect_failed(msg: &str) -> ! {"}, {"sha": "ab067d57d082abc66ae74307382457573f88d874", "filename": "library/core/src/result.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/90eb610d143e8b81de57ab4f0ade6354e3e26022/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90eb610d143e8b81de57ab4f0ade6354e3e26022/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=90eb610d143e8b81de57ab4f0ade6354e3e26022", "patch": "@@ -1653,13 +1653,26 @@ impl<T> Result<T, T> {\n }\n \n // This is a separate function to reduce the code size of the methods\n+#[cfg(not(feature = \"panic_immediate_abort\"))]\n #[inline(never)]\n #[cold]\n #[track_caller]\n fn unwrap_failed(msg: &str, error: &dyn fmt::Debug) -> ! {\n     panic!(\"{}: {:?}\", msg, error)\n }\n \n+// This is a separate function to avoid constructing a `dyn Debug`\n+// that gets immediately thrown away, since vtables don't get cleaned up\n+// by dead code elimination if a trait object is constructed even if it goes\n+// unused\n+#[cfg(feature = \"panic_immediate_abort\")]\n+#[inline]\n+#[cold]\n+#[track_caller]\n+fn unwrap_failed<T>(_msg: &str, _error: &T) -> ! {\n+    panic!()\n+}\n+\n /////////////////////////////////////////////////////////////////////////////\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "0298bba8d329eb9c2fb078196344741d5c93cf33", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/90eb610d143e8b81de57ab4f0ade6354e3e26022/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90eb610d143e8b81de57ab4f0ade6354e3e26022/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=90eb610d143e8b81de57ab4f0ade6354e3e26022", "patch": "@@ -27,35 +27,40 @@ where\n     }\n }\n \n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n fn slice_start_index_len_fail(index: usize, len: usize) -> ! {\n     panic!(\"range start index {} out of range for slice of length {}\", index, len);\n }\n \n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n fn slice_end_index_len_fail(index: usize, len: usize) -> ! {\n     panic!(\"range end index {} out of range for slice of length {}\", index, len);\n }\n \n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n fn slice_index_order_fail(index: usize, end: usize) -> ! {\n     panic!(\"slice index starts at {} but ends at {}\", index, end);\n }\n \n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n fn slice_start_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice from after maximum usize\");\n }\n \n-#[inline(never)]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[cold]\n #[track_caller]\n fn slice_end_index_overflow_fail() -> ! {"}]}