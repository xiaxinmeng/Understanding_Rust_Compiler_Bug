{"sha": "47ea8ae0223434e917ce840a963b495019bbe4d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZWE4YWUwMjIzNDM0ZTkxN2NlODQwYTk2M2I0OTUwMTliYmU0ZDE=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-06-25T17:43:18Z"}, "committer": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-07-01T10:15:27Z"}, "message": "Remove needless lifetimes", "tree": {"sha": "e3a0d7ee7dabd96a95b2cef88b663bdf7c9ed76f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3a0d7ee7dabd96a95b2cef88b663bdf7c9ed76f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47ea8ae0223434e917ce840a963b495019bbe4d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnLVrz+MJS3aQxZ9oj1SKWi7RP1gFAl0Z3T8ACgkQj1SKWi7R\nP1jl7RAAo4jns9rb58hD8NdnaQq1xcJAIq37+Q/ocWKxscFWBETbBZlin4+elIY/\nyzjZt0YZqUo3UGBGRG1QYut51XFB8ZpKA2SV6VD+ih7SoJXnCF3g/LCwz/LXpkUA\ncewJ6U90SixrSreL0vXCT1xCybwMi98yLDk8nUV86h5xH8bGVbieCVLvR/bE0Z7T\nEyEbRcfLQyfn12W5nEnt9e8ggOaqFYdqknVG1OIdpiUjLgXlwsKngdwaozGw1E0T\nPGz8ZXwoiUgfAt757H0nE6jcrhDRIF0VUy0J9h4yrAbkooWfytvI0zADbE4ZXKQY\nAhGBikHIV63hlzyYpMu8c10GnyxfUc8SLAGsKhBbyx9bnZebP7Bd7RImjfEi4H/E\n4HrYqHsS/dF45wVpesFDrZU3vEZhP44D2OaHNXGwEbCWi4DiFOXVU108tLS9ZGA/\ngCOooOlDHePLpLvTyq8vp79HK4tI3Ha0bapw6xf2wCL6Npft5JwmWamti8kKBynF\nVZY0wzVSPrD9QqeVYt17ag0omRhUKSc3EuiZEIRv0oc0nADqyaEGvG/vmkcRo1dd\nrsRl4oKNgmKB5w6txDwtpW+W/TYIslIZC01i7dCqAuYjw2p3v+Hei6y4tztyWi9R\nncaXB/dF8uuhQ1NWoRtnI35VlUgX9YSn3ZGPnuIbjNkiG55eVHg=\n=zVzA\n-----END PGP SIGNATURE-----", "payload": "tree e3a0d7ee7dabd96a95b2cef88b663bdf7c9ed76f\nparent 5748825cc8c74cccef0059cdd4043e6e9b4aa188\nauthor Jeremy Stucki <jeremy@myelin.ch> 1561484598 +0200\ncommitter Jeremy Stucki <stucki.jeremy@gmail.com> 1561976127 +0200\n\nRemove needless lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47ea8ae0223434e917ce840a963b495019bbe4d1", "html_url": "https://github.com/rust-lang/rust/commit/47ea8ae0223434e917ce840a963b495019bbe4d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47ea8ae0223434e917ce840a963b495019bbe4d1/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5748825cc8c74cccef0059cdd4043e6e9b4aa188", "url": "https://api.github.com/repos/rust-lang/rust/commits/5748825cc8c74cccef0059cdd4043e6e9b4aa188", "html_url": "https://github.com/rust-lang/rust/commit/5748825cc8c74cccef0059cdd4043e6e9b4aa188"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "c610de3febffb4167d5573c75c52d869dcf72585", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -2004,7 +2004,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n+    pub fn keys(&self) -> Keys<'_, K, V> {\n         Keys { inner: self.iter() }\n     }\n \n@@ -2025,7 +2025,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n+    pub fn values(&self) -> Values<'_, K, V> {\n         Values { inner: self.iter() }\n     }\n \n@@ -2529,8 +2529,8 @@ enum UnderflowResult<'a, K, V> {\n     Stole(NodeRef<marker::Mut<'a>, K, V, marker::Internal>),\n }\n \n-fn handle_underfull_node<'a, K, V>(node: NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>)\n-                                   -> UnderflowResult<'a, K, V> {\n+fn handle_underfull_node<K, V>(node: NodeRef<marker::Mut<'_>, K, V, marker::LeafOrInternal>)\n+                               -> UnderflowResult<'_, K, V> {\n     let parent = if let Ok(parent) = node.ascend() {\n         parent\n     } else {"}, {"sha": "7cf077d61d687b1f9ea48932f7611c584704a601", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -394,7 +394,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     }\n \n     /// Temporarily takes out another, immutable reference to the same node.\n-    fn reborrow<'a>(&'a self) -> NodeRef<marker::Immut<'a>, K, V, Type> {\n+    fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {\n         NodeRef {\n             height: self.height,\n             node: self.node,"}, {"sha": "89d24a234e9bcf199849134823cef0c75f13a1e5", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -552,7 +552,7 @@ impl String {\n     /// assert_eq!(\"Hello \ufffdWorld\", output);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> Cow<'a, str> {\n+    pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {\n         let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();\n \n         let (first_valid, first_broken) = if let Some(chunk) = iter.next() {"}, {"sha": "39c390b4df6d3d31383dfb4c6839e367004bdee4", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -498,7 +498,7 @@ macro_rules! impls{\n /// #     end: *const T,\n /// #     phantom: PhantomData<&'a T>,\n /// # }\n-/// fn borrow_vec<'a, T>(vec: &'a Vec<T>) -> Slice<'a, T> {\n+/// fn borrow_vec<T>(vec: &Vec<T>) -> Slice<'_, T> {\n ///     let ptr = vec.as_ptr();\n ///     Slice {\n ///         start: ptr,"}, {"sha": "9cff474a760306be8f639270d67b5fed39802cd1", "filename": "src/libcore/ops/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibcore%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibcore%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Findex.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -105,7 +105,7 @@ pub trait Index<Idx: ?Sized> {\n /// impl Index<Side> for Balance {\n ///     type Output = Weight;\n ///\n-///     fn index<'a>(&'a self, index: Side) -> &'a Self::Output {\n+///     fn index(&self, index: Side) -> &Self::Output {\n ///         println!(\"Accessing {:?}-side of balance immutably\", index);\n ///         match index {\n ///             Side::Left => &self.left,\n@@ -115,7 +115,7 @@ pub trait Index<Idx: ?Sized> {\n /// }\n ///\n /// impl IndexMut<Side> for Balance {\n-///     fn index_mut<'a>(&'a mut self, index: Side) -> &'a mut Self::Output {\n+///     fn index_mut(&mut self, index: Side) -> &mut Self::Output {\n ///         println!(\"Accessing {:?}-side of balance mutably\", index);\n ///         match index {\n ///             Side::Left => &mut self.left,"}, {"sha": "6ba7daa35de53dd1cd24c27476f2bb442367615a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -392,7 +392,7 @@ impl fmt::Debug for Item {\n impl Item {\n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n-    pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n+    pub fn doc_value(&self) -> Option<&str> {\n         self.attrs.doc_value()\n     }\n     /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined\n@@ -699,11 +699,11 @@ impl<'a> Iterator for ListAttributesIter<'a> {\n \n pub trait AttributesExt {\n     /// Finds an attribute as List and returns the list of attributes nested inside.\n-    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a>;\n+    fn lists(&self, name: Symbol) -> ListAttributesIter<'_>;\n }\n \n impl AttributesExt for [ast::Attribute] {\n-    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a> {\n+    fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n         ListAttributesIter {\n             attrs: self.iter(),\n             current_list: Vec::new().into_iter(),\n@@ -952,7 +952,7 @@ impl Attributes {\n \n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n     /// value found.\n-    pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n+    pub fn doc_value(&self) -> Option<&str> {\n         self.doc_strings.first().map(|s| s.as_str())\n     }\n \n@@ -1037,7 +1037,7 @@ impl Hash for Attributes {\n }\n \n impl AttributesExt for Attributes {\n-    fn lists<'a>(&'a self, name: Symbol) -> ListAttributesIter<'a> {\n+    fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n         self.other_attrs.lists(name)\n     }\n }"}, {"sha": "e2c23ff89c6d03d141d18f18be5760068c836532", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -2541,7 +2541,7 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     s\n }\n \n-fn shorter<'a>(s: Option<&'a str>) -> String {\n+fn shorter(s: Option<&str>) -> String {\n     match s {\n         Some(s) => s.lines()\n             .skip_while(|s| s.chars().all(|c| c.is_whitespace()))"}, {"sha": "2da7aceae8bf4fd23c19b9aee537c0aaf03bf679", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -119,7 +119,7 @@ impl TocBuilder {\n     /// Push a level `level` heading into the appropriate place in the\n     /// hierarchy, returning a string containing the section number in\n     /// `<num>.<num>.<num>` format.\n-    pub fn push<'a>(&'a mut self, level: u32, name: String, id: String) -> &'a str {\n+    pub fn push(&mut self, level: u32, name: String, id: String) -> &str {\n         assert!(level >= 1);\n \n         // collapse all previous sections into their parents until we"}, {"sha": "50a647f244db55a563dab1bbf447a79d4fd442c5", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -17,7 +17,7 @@ use crate::html::markdown::{ErrorCodes, IdMap, Markdown, MarkdownWithToc, find_t\n use crate::test::{TestOptions, Collector};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n-fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n+fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n     let mut metadata = Vec::new();\n     let mut count = 0;\n "}, {"sha": "726306d60ce1e1dbb9239e8ebd93f36fc8de7206", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -1031,7 +1031,7 @@ impl Json {\n \n      /// If the Json value is an Object, returns the value associated with the provided key.\n     /// Otherwise, returns None.\n-    pub fn find<'a>(&'a self, key: &str) -> Option<&'a Json>{\n+    pub fn find(&self, key: &str) -> Option<&Json> {\n         match *self {\n             Json::Object(ref map) => map.get(key),\n             _ => None\n@@ -1052,7 +1052,7 @@ impl Json {\n     /// If the Json value is an Object, performs a depth-first search until\n     /// a value associated with the provided key is found. If no value is found\n     /// or the Json value is not an Object, returns `None`.\n-    pub fn search<'a>(&'a self, key: &str) -> Option<&'a Json> {\n+    pub fn search(&self, key: &str) -> Option<&Json> {\n         match self {\n             &Json::Object(ref map) => {\n                 match map.get(key) {"}, {"sha": "a9c4c7345c284e5f95e9a0fbe29e6af2c665cd8f", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -140,7 +140,7 @@ fn wait_timeout_receiver<'a, 'b, T>(lock: &'a Mutex<State<T>>,\n     new_guard\n }\n \n-fn abort_selection<'a, T>(guard: &mut MutexGuard<'a , State<T>>) -> bool {\n+fn abort_selection<T>(guard: &mut MutexGuard<'_, State<T>>) -> bool {\n     match mem::replace(&mut guard.blocker, NoneBlocked) {\n         NoneBlocked => true,\n         BlockedSender(token) => {"}, {"sha": "e25bab4ff6104bc2c63bf8700c0d6502fc9a740e", "filename": "src/libstd/sys/redox/ext/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -673,7 +673,7 @@ impl UnixListener {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n-    pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n+    pub fn incoming(&self) -> Incoming {\n         Incoming { listener: self }\n     }\n }"}, {"sha": "42edd5dbbea7c463d42e287ba26f11a11ce0a528", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -198,7 +198,7 @@ impl SocketAddr {\n         }\n     }\n \n-    fn address<'a>(&'a self) -> AddressKind<'a> {\n+    fn address(&self) -> AddressKind<'_> {\n         let len = self.len as usize - sun_path_offset(&self.addr);\n         let path = unsafe { mem::transmute::<&[libc::c_char], &[u8]>(&self.addr.sun_path) };\n \n@@ -894,7 +894,7 @@ impl UnixListener {\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n-    pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n+    pub fn incoming(&self) -> Incoming<'_> {\n         Incoming { listener: self }\n     }\n }"}, {"sha": "36fb1fb5ff68d7086a397d037cc09c509c0e4f24", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -195,7 +195,7 @@ fn wide_char_to_multi_byte(code_page: u32,\n     }\n }\n \n-pub fn truncate_utf16_at_nul<'a>(v: &'a [u16]) -> &'a [u16] {\n+pub fn truncate_utf16_at_nul(v: &[u16]) -> &[u16] {\n     match v.iter().position(|c| *c == 0) {\n         // don't include the 0\n         Some(i) => &v[..i],"}, {"sha": "7eae28cb14fbc9c2be42f39533f56633c1efb2a4", "filename": "src/libstd/sys/windows/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpath.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -19,7 +19,7 @@ pub fn is_verbatim_sep(b: u8) -> bool {\n     b == b'\\\\'\n }\n \n-pub fn parse_prefix<'a>(path: &'a OsStr) -> Option<Prefix<'a>> {\n+pub fn parse_prefix(path: &OsStr) -> Option<Prefix<'_>> {\n     use crate::path::Prefix::*;\n     unsafe {\n         // The unsafety here stems from converting between &OsStr and &[u8]"}, {"sha": "8789abe55c3d0b526d9526a5ea10f333d72e918c", "filename": "src/libstd/sys_common/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsys_common%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ea8ae0223434e917ce840a963b495019bbe4d1/src%2Flibstd%2Fsys_common%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fio.rs?ref=47ea8ae0223434e917ce840a963b495019bbe4d1", "patch": "@@ -16,7 +16,7 @@ pub mod test {\n             p.join(path)\n         }\n \n-        pub fn path<'a>(&'a self) -> &'a Path {\n+        pub fn path(&self) -> &Path {\n             let TempDir(ref p) = *self;\n             p\n         }"}]}