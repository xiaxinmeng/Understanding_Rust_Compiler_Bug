{"sha": "615c9e8647b0ce46c1b1755201c8e2799a3ca2bc", "node_id": "C_kwDOAAsO6NoAKDYxNWM5ZTg2NDdiMGNlNDZjMWIxNzU1MjAxYzhlMjc5OWEzY2EyYmM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-21T15:18:11Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-21T13:11:54Z"}, "message": "Inline substitution logic into `declared_region_bounds`", "tree": {"sha": "37c784ef3d7619a0a4aa0a10aeea169fc89a0a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c784ef3d7619a0a4aa0a10aeea169fc89a0a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/615c9e8647b0ce46c1b1755201c8e2799a3ca2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/615c9e8647b0ce46c1b1755201c8e2799a3ca2bc", "html_url": "https://github.com/rust-lang/rust/commit/615c9e8647b0ce46c1b1755201c8e2799a3ca2bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/615c9e8647b0ce46c1b1755201c8e2799a3ca2bc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c9784336591adce8d39a49a1da8fdf700b2410", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c9784336591adce8d39a49a1da8fdf700b2410", "html_url": "https://github.com/rust-lang/rust/commit/a8c9784336591adce8d39a49a1da8fdf700b2410"}], "stats": {"total": 40, "additions": 11, "deletions": 29}, "files": [{"sha": "ec9a165ea308db1f639e9268ce30a22c0c65a44c", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/615c9e8647b0ce46c1b1755201c8e2799a3ca2bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c9e8647b0ce46c1b1755201c8e2799a3ca2bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=615c9e8647b0ce46c1b1755201c8e2799a3ca2bc", "patch": "@@ -390,7 +390,8 @@ where\n         // Compute the bounds we can derive from the trait definition.\n         // These are guaranteed to apply, no matter the inference\n         // results.\n-        let trait_bounds: Vec<_> = self.verify_bound.bounds(def_id, substs).collect();\n+        let trait_bounds: Vec<_> =\n+            self.verify_bound.declared_region_bounds(def_id, substs).collect();\n \n         debug!(?trait_bounds);\n \n@@ -413,7 +414,7 @@ where\n             // will be invoked with `['b => ^1]` and so we will get `^1` returned.\n             let bound = bound_outlives.skip_binder();\n             let (def_id, substs) = filter(bound.0);\n-            self.verify_bound.bounds(def_id, substs).all(|r| r != bound.1)\n+            self.verify_bound.declared_region_bounds(def_id, substs).all(|r| r != bound.1)\n         });\n \n         // If declared bounds list is empty, the only applicable rule is"}, {"sha": "f470b2eb8c1939a4acef1abd6f12e7b4c6a35b97", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/615c9e8647b0ce46c1b1755201c8e2799a3ca2bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c9e8647b0ce46c1b1755201c8e2799a3ca2bc/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=615c9e8647b0ce46c1b1755201c8e2799a3ca2bc", "patch": "@@ -2,7 +2,6 @@ use crate::infer::outlives::components::{compute_components_recursive, Component\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::region_constraints::VerifyIfEq;\n use crate::infer::{GenericKind, VerifyBound};\n-use rustc_data_structures::captures::Captures;\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::GenericArg;\n@@ -128,7 +127,8 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n                 }\n             });\n         // Extend with bounds that we can find from the trait.\n-        let trait_bounds = self.bounds(def_id, substs).map(|r| VerifyBound::OutlivedBy(r));\n+        let trait_bounds =\n+            self.declared_region_bounds(def_id, substs).map(|r| VerifyBound::OutlivedBy(r));\n \n         // see the extensive comment in projection_must_outlive\n         let recursive_bound = {\n@@ -279,30 +279,6 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     /// }\n     /// ```\n     ///\n-    /// then this function would return `'x`. This is subject to the\n-    /// limitations around higher-ranked bounds described in\n-    /// `declared_region_bounds`.\n-    #[instrument(level = \"debug\", skip(self))]\n-    pub fn bounds(\n-        &self,\n-        def_id: DefId,\n-        substs: SubstsRef<'tcx>,\n-    ) -> impl Iterator<Item = ty::Region<'tcx>> + 'cx + Captures<'tcx> {\n-        let tcx = self.tcx;\n-        self.declared_region_bounds(def_id).map(move |r| EarlyBinder(r).subst(tcx, substs))\n-    }\n-\n-    /// Given the `DefId` of an associated item, returns any region\n-    /// bounds attached to that associated item from the trait definition.\n-    ///\n-    /// For example:\n-    ///\n-    /// ```rust\n-    /// trait Foo<'a> {\n-    ///     type Bar: 'a;\n-    /// }\n-    /// ```\n-    ///\n     /// If we were given the `DefId` of `Foo::Bar`, we would return\n     /// `'a`. You could then apply the substitutions from the\n     /// projection to convert this into your namespace. This also\n@@ -322,7 +298,11 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     ///\n     /// This is for simplicity, and because we are not really smart\n     /// enough to cope with such bounds anywhere.\n-    fn declared_region_bounds(&self, def_id: DefId) -> impl Iterator<Item = ty::Region<'tcx>> {\n+    pub fn declared_region_bounds(\n+        &self,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+    ) -> impl Iterator<Item = ty::Region<'tcx>> {\n         let tcx = self.tcx;\n         let bounds = tcx.item_bounds(def_id);\n         trace!(\"{:#?}\", bounds);\n@@ -331,6 +311,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n             .filter_map(|p| p.to_opt_type_outlives())\n             .filter_map(|p| p.no_bound_vars())\n             .map(|b| b.1)\n+            .map(move |r| EarlyBinder(r).subst(tcx, substs))\n     }\n \n     /// Searches through a predicate list for a predicate `T: 'a`."}]}