{"sha": "25ea20dfeb79379a5624388a9a0608434f3fdc78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZWEyMGRmZWI3OTM3OWE1NjI0Mzg4YTlhMDYwODQzNGYzZmRjNzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-18T17:06:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-18T17:06:38Z"}, "message": "Rollup merge of #57685 - pthariensflame:enhancement/pin-impl-applicability, r=withoutboats\n\nEnhance `Pin` impl applicability for `PartialEq` and `PartialOrd`.\n\nThis allows for comparing for equality or ordering a `Pin<P>` and a `Pin<Q>` as long as `P` and `Q` are correspondingly comparable themselves *even when `P` and `Q` are different types*.\nAn example might be comparing a `Pin<&mut OsString>` to a `Pin<&mut PathBuf>`, which might arise from pin projections from a pair of larger contexts that aren't `Unpin`.", "tree": {"sha": "7165063b9313f557d4774882ecee8cdef1313795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7165063b9313f557d4774882ecee8cdef1313795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25ea20dfeb79379a5624388a9a0608434f3fdc78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcQgeeCRBK7hj4Ov3rIwAAdHIIAJlIZLFIKgTu2NOLK1GLEWoL\ne0UGWE7X69n25miLIEMsQokvSJXZxQpo6Dyqt2ToYYkN5dHq0UxVg+axD3J04HAX\nphY/5ysmgMyutm211d9dwAqsgFodq6iEMpKFetzUmvO5HQ4ZHrax0H/IV45nJiNe\nyQsjY5fBSQaI2YdrqRZftpLFOt2v3IRVkX5rp2779Ka2JAB+c2MgCGU3uGMXQDC2\nL7rQmJ+FFfiWTZLXJ7qmtn2o6H63UfzfwMHcRvz8lmGTHy5pGqf4rL+OKBDefQO9\nNmZSAQ23H7TdD0CnzcrKh9o2sjxIhboK8wYygmNR6VO+9fB9v/QMhv4TtoYQayY=\n=+fXC\n-----END PGP SIGNATURE-----\n", "payload": "tree 7165063b9313f557d4774882ecee8cdef1313795\nparent b0563fdb443fa0eefeb9e2a27f351e7e485df058\nparent fefe1dacb6255304dab5c13fb669b1d9d40f9e03\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547831198 +0100\ncommitter GitHub <noreply@github.com> 1547831198 +0100\n\nRollup merge of #57685 - pthariensflame:enhancement/pin-impl-applicability, r=withoutboats\n\nEnhance `Pin` impl applicability for `PartialEq` and `PartialOrd`.\n\nThis allows for comparing for equality or ordering a `Pin<P>` and a `Pin<Q>` as long as `P` and `Q` are correspondingly comparable themselves *even when `P` and `Q` are different types*.\nAn example might be comparing a `Pin<&mut OsString>` to a `Pin<&mut PathBuf>`, which might arise from pin projections from a pair of larger contexts that aren't `Unpin`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25ea20dfeb79379a5624388a9a0608434f3fdc78", "html_url": "https://github.com/rust-lang/rust/commit/25ea20dfeb79379a5624388a9a0608434f3fdc78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25ea20dfeb79379a5624388a9a0608434f3fdc78/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0563fdb443fa0eefeb9e2a27f351e7e485df058", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0563fdb443fa0eefeb9e2a27f351e7e485df058", "html_url": "https://github.com/rust-lang/rust/commit/b0563fdb443fa0eefeb9e2a27f351e7e485df058"}, {"sha": "fefe1dacb6255304dab5c13fb669b1d9d40f9e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/fefe1dacb6255304dab5c13fb669b1d9d40f9e03", "html_url": "https://github.com/rust-lang/rust/commit/fefe1dacb6255304dab5c13fb669b1d9d40f9e03"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "7c09a36d898830a472988b84976ca44a24c1befc", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/25ea20dfeb79379a5624388a9a0608434f3fdc78/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25ea20dfeb79379a5624388a9a0608434f3fdc78/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=25ea20dfeb79379a5624388a9a0608434f3fdc78", "patch": "@@ -99,6 +99,7 @@\n \n use fmt;\n use marker::{Sized, Unpin};\n+use cmp::{self, PartialEq, PartialOrd};\n use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n \n /// A pinned pointer.\n@@ -112,16 +113,57 @@ use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n /// [`Unpin`]: ../../std/marker/trait.Unpin.html\n /// [`pin` module]: ../../std/pin/index.html\n //\n-// Note: the derives below are allowed because they all only use `&P`, so they\n-// cannot move the value behind `pointer`.\n+// Note: the derives below, and the explicit `PartialEq` and `PartialOrd`\n+// implementations, are allowed because they all only use `&P`, so they cannot move\n+// the value behind `pointer`.\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n #[fundamental]\n #[repr(transparent)]\n-#[derive(Copy, Clone, Hash, Eq, PartialEq, Ord, PartialOrd)]\n+#[derive(Copy, Clone, Hash, Eq, Ord)]\n pub struct Pin<P> {\n     pointer: P,\n }\n \n+#[stable(feature = \"pin_partialeq_partialord_impl_applicability\", since = \"1.34.0\")]\n+impl<P, Q> PartialEq<Pin<Q>> for Pin<P>\n+where\n+    P: PartialEq<Q>,\n+{\n+    fn eq(&self, other: &Pin<Q>) -> bool {\n+        self.pointer == other.pointer\n+    }\n+\n+    fn ne(&self, other: &Pin<Q>) -> bool {\n+        self.pointer != other.pointer\n+    }\n+}\n+\n+#[stable(feature = \"pin_partialeq_partialord_impl_applicability\", since = \"1.34.0\")]\n+impl<P, Q> PartialOrd<Pin<Q>> for Pin<P>\n+where\n+    P: PartialOrd<Q>,\n+{\n+    fn partial_cmp(&self, other: &Pin<Q>) -> Option<cmp::Ordering> {\n+        self.pointer.partial_cmp(&other.pointer)\n+    }\n+\n+    fn lt(&self, other: &Pin<Q>) -> bool {\n+        self.pointer < other.pointer\n+    }\n+\n+    fn le(&self, other: &Pin<Q>) -> bool {\n+        self.pointer <= other.pointer\n+    }\n+\n+    fn gt(&self, other: &Pin<Q>) -> bool {\n+        self.pointer > other.pointer\n+    }\n+\n+    fn ge(&self, other: &Pin<Q>) -> bool {\n+        self.pointer >= other.pointer\n+    }\n+}\n+\n impl<P: Deref> Pin<P>\n where\n     P::Target: Unpin,"}]}