{"sha": "f8335fb1e4e17ae035c4553fbf15fec74d92aeb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MzM1ZmIxZTRlMTdhZTAzNWM0NTUzZmJmMTVmZWM3NGQ5MmFlYjM=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-07-23T21:19:26Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-07-23T21:19:26Z"}, "message": "Fix nit and add link for Cow", "tree": {"sha": "f71da446108d406cf17e2fd09fb92c572aaad81e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71da446108d406cf17e2fd09fb92c572aaad81e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8335fb1e4e17ae035c4553fbf15fec74d92aeb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8335fb1e4e17ae035c4553fbf15fec74d92aeb3", "html_url": "https://github.com/rust-lang/rust/commit/f8335fb1e4e17ae035c4553fbf15fec74d92aeb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8335fb1e4e17ae035c4553fbf15fec74d92aeb3/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "837a761b398a6ff6a97f7f61e390dae9efbeab79", "url": "https://api.github.com/repos/rust-lang/rust/commits/837a761b398a6ff6a97f7f61e390dae9efbeab79", "html_url": "https://github.com/rust-lang/rust/commit/837a761b398a6ff6a97f7f61e390dae9efbeab79"}], "stats": {"total": 40, "additions": 8, "deletions": 32}, "files": [{"sha": "55a5a290a74382bcec0e818de46d1f7d4048f201", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f8335fb1e4e17ae035c4553fbf15fec74d92aeb3/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8335fb1e4e17ae035c4553fbf15fec74d92aeb3/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=f8335fb1e4e17ae035c4553fbf15fec74d92aeb3", "patch": "@@ -1684,14 +1684,6 @@ mod use_keyword {}\n /// of `shorter`, thus the constraint is respected:\n ///\n /// ```rust\n-/// fn select<'a, 'b: 'a>(s1: &'a str, s2: &'b str, second: bool) -> &'a str {\n-///     if second {\n-///         s2\n-///     } else {\n-///         s1\n-///     }\n-/// }\n-///\n /// fn select_where<'a, 'b>(s1: &'a str, s2: &'b str, second: bool) -> &'a str\n /// where\n ///     'b: 'a,\n@@ -1706,30 +1698,18 @@ mod use_keyword {}\n /// let outer = String::from(\"Long living ref\");\n /// let longer = &outer;\n /// {\n-///     let inner = String::from(\"Long living ref\");\n+///     let inner = String::from(\"Short living ref\");\n ///     let shorter = &inner;\n ///\n-///     assert_eq!(select(shorter, longer, false), shorter);\n-///     assert_eq!(select(shorter, longer, true), longer);\n-///\n ///     assert_eq!(select_where(shorter, longer, false), shorter);\n ///     assert_eq!(select_where(shorter, longer, true), longer);\n /// }\n /// ```\n ///\n /// On the other hand, this will not compile: `shorter` does not have a lifetime\n-/// that respects the constraint imposed by the `select` and `select_where`\n-/// functions.\n+/// that respects the constraint imposed by the `select_where` functions.\n ///\n /// ```rust,compile_fail,E0597\n-/// # fn select<'a, 'b: 'a>(s1: &'a str, s2: &'b str, second: bool) -> &'a str {\n-/// #     if second {\n-/// #         s2\n-/// #     } else {\n-/// #         s1\n-/// #     }\n-/// # }\n-/// #\n /// # fn select_where<'a, 'b>(s1: &'a str, s2: &'b str, second: bool) -> &'a str\n /// # where\n /// #     'b: 'a,\n@@ -1742,17 +1722,14 @@ mod use_keyword {}\n /// # }\n /// let outer = String::from(\"Long living ref\");\n /// let longer = &outer;\n-/// let res1;\n-/// let res2;\n+/// let res;\n /// {\n-///     let inner = String::from(\"Long living ref\");\n+///     let inner = String::from(\"Short living ref\");\n ///     let shorter = &inner;\n ///\n-///     res1 = select(longer, shorter, false);\n-///     res2 = select_where(longer, shorter, false);\n+///     res = select_where(longer, shorter, false);\n /// }\n-/// assert_eq!(res1, &outer);\n-/// assert_eq!(res2, &outer);\n+/// assert_eq!(res, &outer);\n /// ```\n ///\n /// `where` can also be used to express more complicated constraints that cannot\n@@ -1771,12 +1748,11 @@ mod use_keyword {}\n /// assert_eq!(first_or_default(Vec::<i32>::new().into_iter()), 0);\n /// ```\n ///\n-/// `where` is available anywhere generic and lifetime parameters are available:\n+/// `where` is available anywhere generic and lifetime parameters are available,\n+/// as can be seen in the [`Cow`](crate::borrow::Cow) from the standard library:\n ///\n /// ```rust\n /// # #![allow(dead_code)]\n-/// // The Cow type from the standard library uses where to impose constraints\n-/// // on its parameters.\n /// pub enum Cow<'a, B>\n /// where\n ///     B: 'a + ToOwned + ?Sized,"}]}