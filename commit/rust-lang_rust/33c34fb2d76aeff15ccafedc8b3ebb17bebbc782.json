{"sha": "33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "node_id": "C_kwDOAAsO6NoAKDMzYzM0ZmIyZDc2YWVmZjE1Y2NhZmVkYzhiM2ViYjE3YmViYmM3ODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-03T08:43:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-03T08:43:32Z"}, "message": "Auto merge of #7709 - Qwaz:drop_non_send, r=xFrednet\n\nImplement `non_send_field_in_send_ty` lint\n\nchangelog: Implement [`non_send_fields_in_send_ty`] lint\n\nFixes #7703", "tree": {"sha": "15a0b33299cbeed27eca86a4315434d69947e74c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15a0b33299cbeed27eca86a4315434d69947e74c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "html_url": "https://github.com/rust-lang/rust/commit/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da3b4b45948d8859fb9b19ae84f4ddb6bd497895", "url": "https://api.github.com/repos/rust-lang/rust/commits/da3b4b45948d8859fb9b19ae84f4ddb6bd497895", "html_url": "https://github.com/rust-lang/rust/commit/da3b4b45948d8859fb9b19ae84f4ddb6bd497895"}, {"sha": "fb0353b28d746108932ffb0a9ce8535c115c0acf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0353b28d746108932ffb0a9ce8535c115c0acf", "html_url": "https://github.com/rust-lang/rust/commit/fb0353b28d746108932ffb0a9ce8535c115c0acf"}], "stats": {"total": 683, "additions": 682, "deletions": 1}, "files": [{"sha": "9a4424f50614664c3c515746a14885e1ef45045e", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -2898,6 +2898,7 @@ Released 2018-09-13\n [`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n [`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n+[`non_send_fields_in_send_ty`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty\n [`nonminimal_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n [`nonsensical_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonsensical_open_options\n [`nonstandard_macro_braces`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces"}, {"sha": "7fd84783c22f55cf2af04af2b66604c6a4af3bc9", "filename": "clippy_lints/src/lib.mods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Flib.mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Flib.mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.mods.rs?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -149,6 +149,7 @@ mod no_effect;\n mod non_copy_const;\n mod non_expressive_names;\n mod non_octal_unix_permissions;\n+mod non_send_fields_in_send_ty;\n mod nonstandard_macro_braces;\n mod open_options;\n mod option_env_unwrap;"}, {"sha": "28d54246fbbb27764c3a12247b32bcd69d240571", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -366,6 +366,7 @@ store.register_lints(&[\n     non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n     non_expressive_names::SIMILAR_NAMES,\n     non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS,\n+    non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY,\n     nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES,\n     open_options::NONSENSICAL_OPEN_OPTIONS,\n     option_env_unwrap::OPTION_ENV_UNWRAP,"}, {"sha": "32606e570d8c8417dcd88fa200b05efa713bcb6f", "filename": "clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -16,6 +16,7 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(missing_const_for_fn::MISSING_CONST_FOR_FN),\n     LintId::of(mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n     LintId::of(mutex_atomic::MUTEX_INTEGER),\n+    LintId::of(non_send_fields_in_send_ty::NON_SEND_FIELDS_IN_SEND_TY),\n     LintId::of(nonstandard_macro_braces::NONSTANDARD_MACRO_BRACES),\n     LintId::of(option_if_let_else::OPTION_IF_LET_ELSE),\n     LintId::of(path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),"}, {"sha": "c3be6db6ffa836363981fc6ebc7ca4cc5389a7ad", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -535,6 +535,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(feature_name::FeatureName));\n     store.register_late_pass(move || Box::new(iter_not_returning_iterator::IterNotReturningIterator));\n     store.register_late_pass(move || Box::new(if_then_panic::IfThenPanic));\n+    let enable_raw_pointer_heuristic_for_send = conf.enable_raw_pointer_heuristic_for_send;\n+    store.register_late_pass(move || Box::new(non_send_fields_in_send_ty::NonSendFieldInSendTy::new(enable_raw_pointer_heuristic_for_send)));\n }\n \n #[rustfmt::skip]"}, {"sha": "0dbf296c7142114e4a61c62d8692a881a3b9ee55", "filename": "clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -0,0 +1,238 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::is_lint_allowed;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::{implements_trait, is_copy};\n+use rustc_ast::ImplPolarity;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{FieldDef, Item, ItemKind, Node};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Warns about fields in struct implementing `Send` that are neither `Send` nor `Copy`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Sending the struct to another thread will transfer the ownership to\n+    /// the new thread by dropping in the current thread during the transfer.\n+    /// This causes soundness issues for non-`Send` fields, as they are also\n+    /// dropped and might not be set up to handle this.\n+    ///\n+    /// See:\n+    /// * [*The Rustonomicon* about *Send and Sync*](https://doc.rust-lang.org/nomicon/send-and-sync.html)\n+    /// * [The documentation of `Send`](https://doc.rust-lang.org/std/marker/trait.Send.html)\n+    ///\n+    /// ### Known Problems\n+    /// Data structures that contain raw pointers may cause false positives.\n+    /// They are sometimes safe to be sent across threads but do not implement\n+    /// the `Send` trait. This lint has a heuristic to filter out basic cases\n+    /// such as `Vec<*const T>`, but it's not perfect. Feel free to create an\n+    /// issue if you have a suggestion on how this heuristic can be improved.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// struct ExampleStruct<T> {\n+    ///     rc_is_not_send: Rc<String>,\n+    ///     unbounded_generic_field: T,\n+    /// }\n+    ///\n+    /// // This impl is unsound because it allows sending `!Send` types through `ExampleStruct`\n+    /// unsafe impl<T> Send for ExampleStruct<T> {}\n+    /// ```\n+    /// Use thread-safe types like [`std::sync::Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html)\n+    /// or specify correct bounds on generic type parameters (`T: Send`).\n+    pub NON_SEND_FIELDS_IN_SEND_TY,\n+    nursery,\n+    \"there is field that does not implement `Send` in a `Send` struct\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct NonSendFieldInSendTy {\n+    enable_raw_pointer_heuristic: bool,\n+}\n+\n+impl NonSendFieldInSendTy {\n+    pub fn new(enable_raw_pointer_heuristic: bool) -> Self {\n+        Self {\n+            enable_raw_pointer_heuristic,\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(NonSendFieldInSendTy => [NON_SEND_FIELDS_IN_SEND_TY]);\n+\n+impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let ty_allowed_in_send = if self.enable_raw_pointer_heuristic {\n+            ty_allowed_with_raw_pointer_heuristic\n+        } else {\n+            ty_allowed_without_raw_pointer_heuristic\n+        };\n+\n+        // Checks if we are in `Send` impl item.\n+        // We start from `Send` impl instead of `check_field_def()` because\n+        // single `AdtDef` may have multiple `Send` impls due to generic\n+        // parameters, and the lint is much easier to implement in this way.\n+        if_chain! {\n+            if let Some(send_trait) = cx.tcx.get_diagnostic_item(sym::send_trait);\n+            if let ItemKind::Impl(hir_impl) = &item.kind;\n+            if let Some(trait_ref) = &hir_impl.of_trait;\n+            if let Some(trait_id) = trait_ref.trait_def_id();\n+            if send_trait == trait_id;\n+            if let ImplPolarity::Positive = hir_impl.polarity;\n+            if let Some(ty_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n+            if let self_ty = ty_trait_ref.self_ty();\n+            if let ty::Adt(adt_def, impl_trait_substs) = self_ty.kind();\n+            then {\n+                let mut non_send_fields = Vec::new();\n+\n+                let hir_map = cx.tcx.hir();\n+                for variant in &adt_def.variants {\n+                    for field in &variant.fields {\n+                        if_chain! {\n+                            if let Some(field_hir_id) = field\n+                                .did\n+                                .as_local()\n+                                .map(|local_def_id| hir_map.local_def_id_to_hir_id(local_def_id));\n+                            if !is_lint_allowed(cx, NON_SEND_FIELDS_IN_SEND_TY, field_hir_id);\n+                            if let field_ty = field.ty(cx.tcx, impl_trait_substs);\n+                            if !ty_allowed_in_send(cx, field_ty, send_trait);\n+                            if let Node::Field(field_def) = hir_map.get(field_hir_id);\n+                            then {\n+                                non_send_fields.push(NonSendField {\n+                                    def: field_def,\n+                                    ty: field_ty,\n+                                    generic_params: collect_generic_params(cx, field_ty),\n+                                })\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                if !non_send_fields.is_empty() {\n+                    span_lint_and_then(\n+                        cx,\n+                        NON_SEND_FIELDS_IN_SEND_TY,\n+                        item.span,\n+                        &format!(\n+                            \"this implementation is unsound, as some fields in `{}` are `!Send`\",\n+                            snippet(cx, hir_impl.self_ty.span, \"Unknown\")\n+                        ),\n+                        |diag| {\n+                            for field in non_send_fields {\n+                                diag.span_note(\n+                                    field.def.span,\n+                                    &format!(\"the type of field `{}` is `!Send`\", field.def.ident.name),\n+                                );\n+\n+                                match field.generic_params.len() {\n+                                    0 => diag.help(\"use a thread-safe type that implements `Send`\"),\n+                                    1 if is_ty_param(field.ty) => diag.help(&format!(\"add `{}: Send` bound in `Send` impl\", field.ty)),\n+                                    _ => diag.help(&format!(\n+                                        \"add bounds on type parameter{} `{}` that satisfy `{}: Send`\",\n+                                        if field.generic_params.len() > 1 { \"s\" } else { \"\" },\n+                                        field.generic_params_string(),\n+                                        snippet(cx, field.def.ty.span, \"Unknown\"),\n+                                    )),\n+                                };\n+                            }\n+                        },\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+struct NonSendField<'tcx> {\n+    def: &'tcx FieldDef<'tcx>,\n+    ty: Ty<'tcx>,\n+    generic_params: Vec<Ty<'tcx>>,\n+}\n+\n+impl<'tcx> NonSendField<'tcx> {\n+    fn generic_params_string(&self) -> String {\n+        self.generic_params\n+            .iter()\n+            .map(ToString::to_string)\n+            .collect::<Vec<_>>()\n+            .join(\", \")\n+    }\n+}\n+\n+/// Given a type, collect all of its generic parameters.\n+/// Example: `MyStruct<P, Box<Q, R>>` => `vec![P, Q, R]`\n+fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n+    ty.walk(cx.tcx)\n+        .filter_map(|inner| match inner.unpack() {\n+            GenericArgKind::Type(inner_ty) => Some(inner_ty),\n+            _ => None,\n+        })\n+        .filter(|&inner_ty| is_ty_param(inner_ty))\n+        .collect()\n+}\n+\n+/// Be more strict when the heuristic is disabled\n+fn ty_allowed_without_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n+    if implements_trait(cx, ty, send_trait, &[]) {\n+        return true;\n+    }\n+\n+    if is_copy(cx, ty) && !contains_raw_pointer(cx, ty) {\n+        return true;\n+    }\n+\n+    false\n+}\n+\n+/// Heuristic to allow cases like `Vec<*const u8>`\n+fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n+    if implements_trait(cx, ty, send_trait, &[]) || is_copy(cx, ty) {\n+        return true;\n+    }\n+\n+    // The type is known to be `!Send` and `!Copy`\n+    match ty.kind() {\n+        ty::Tuple(_) => ty\n+            .tuple_fields()\n+            .all(|ty| ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait)),\n+        ty::Array(ty, _) | ty::Slice(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n+        ty::Adt(_, substs) => {\n+            if contains_raw_pointer(cx, ty) {\n+                // descends only if ADT contains any raw pointers\n+                substs.iter().all(|generic_arg| match generic_arg.unpack() {\n+                    GenericArgKind::Type(ty) => ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait),\n+                    // Lifetimes and const generics are not solid part of ADT and ignored\n+                    GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => true,\n+                })\n+            } else {\n+                false\n+            }\n+        },\n+        // Raw pointers are `!Send` but allowed by the heuristic\n+        ty::RawPtr(_) => true,\n+        _ => false,\n+    }\n+}\n+\n+/// Checks if the type contains any raw pointers in substs (including nested ones).\n+fn contains_raw_pointer<'tcx>(cx: &LateContext<'tcx>, target_ty: Ty<'tcx>) -> bool {\n+    for ty_node in target_ty.walk(cx.tcx) {\n+        if_chain! {\n+            if let GenericArgKind::Type(inner_ty) = ty_node.unpack();\n+            if let ty::RawPtr(_) = inner_ty.kind();\n+            then {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n+/// Returns `true` if the type is a type parameter such as `T`.\n+fn is_ty_param(target_ty: Ty<'_>) -> bool {\n+    matches!(target_ty.kind(), ty::Param(_))\n+}"}, {"sha": "6cbada4c1505b5374758d951ca2df152eec9a4d7", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -284,6 +284,10 @@ define_Conf! {\n     ///\n     /// The list of unicode scripts allowed to be used in the scope.\n     (allowed_scripts: Vec<String> = vec![\"Latin\".to_string()]),\n+    /// Lint: NON_SEND_FIELDS_IN_SEND_TY.\n+    ///\n+    /// Whether to apply the raw pointer heuristic to determine if a type is `Send`.\n+    (enable_raw_pointer_heuristic_for_send: bool = true),\n }\n \n /// Search for the configuration file."}, {"sha": "a942709d14acc27da4706e23760346122169525f", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Fclippy.toml?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -0,0 +1 @@\n+enable-raw-pointer-heuristic-for-send = false"}, {"sha": "90c2439dc34f4556322f383bc0e672c6069618dc", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/test.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.rs?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -0,0 +1,43 @@\n+#![warn(clippy::non_send_fields_in_send_ty)]\n+#![feature(extern_types)]\n+\n+use std::rc::Rc;\n+\n+// Basic tests should not be affected\n+pub struct NoGeneric {\n+    rc_is_not_send: Rc<String>,\n+}\n+\n+unsafe impl Send for NoGeneric {}\n+\n+pub struct MultiField<T> {\n+    field1: T,\n+    field2: T,\n+    field3: T,\n+}\n+\n+unsafe impl<T> Send for MultiField<T> {}\n+\n+pub enum MyOption<T> {\n+    MySome(T),\n+    MyNone,\n+}\n+\n+unsafe impl<T> Send for MyOption<T> {}\n+\n+// All fields are disallowed when raw pointer heuristic is off\n+extern \"C\" {\n+    type NonSend;\n+}\n+\n+pub struct HeuristicTest {\n+    field1: Vec<*const NonSend>,\n+    field2: [*const NonSend; 3],\n+    field3: (*const NonSend, *const NonSend, *const NonSend),\n+    field4: (*const NonSend, Rc<u8>),\n+    field5: Vec<Vec<*const NonSend>>,\n+}\n+\n+unsafe impl Send for HeuristicTest {}\n+\n+fn main() {}"}, {"sha": "b07f9dd3df30e02b4ae6f95ac8d802905fe9855c", "filename": "tests/ui-toml/strict_non_send_fields_in_send_ty/test.stderr", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_fields_in_send_ty%2Ftest.stderr?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -0,0 +1,91 @@\n+error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n+  --> $DIR/test.rs:11:1\n+   |\n+LL | unsafe impl Send for NoGeneric {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n+note: the type of field `rc_is_not_send` is `!Send`\n+  --> $DIR/test.rs:8:5\n+   |\n+LL |     rc_is_not_send: Rc<String>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: this implementation is unsound, as some fields in `MultiField<T>` are `!Send`\n+  --> $DIR/test.rs:19:1\n+   |\n+LL | unsafe impl<T> Send for MultiField<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field1` is `!Send`\n+  --> $DIR/test.rs:14:5\n+   |\n+LL |     field1: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the type of field `field2` is `!Send`\n+  --> $DIR/test.rs:15:5\n+   |\n+LL |     field2: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the type of field `field3` is `!Send`\n+  --> $DIR/test.rs:16:5\n+   |\n+LL |     field3: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `MyOption<T>` are `!Send`\n+  --> $DIR/test.rs:26:1\n+   |\n+LL | unsafe impl<T> Send for MyOption<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `0` is `!Send`\n+  --> $DIR/test.rs:22:12\n+   |\n+LL |     MySome(T),\n+   |            ^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n+  --> $DIR/test.rs:41:1\n+   |\n+LL | unsafe impl Send for HeuristicTest {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field1` is `!Send`\n+  --> $DIR/test.rs:34:5\n+   |\n+LL |     field1: Vec<*const NonSend>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the type of field `field2` is `!Send`\n+  --> $DIR/test.rs:35:5\n+   |\n+LL |     field2: [*const NonSend; 3],\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the type of field `field3` is `!Send`\n+  --> $DIR/test.rs:36:5\n+   |\n+LL |     field3: (*const NonSend, *const NonSend, *const NonSend),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the type of field `field4` is `!Send`\n+  --> $DIR/test.rs:37:5\n+   |\n+LL |     field4: (*const NonSend, Rc<u8>),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the type of field `field5` is `!Send`\n+  --> $DIR/test.rs:38:5\n+   |\n+LL |     field5: Vec<Vec<*const NonSend>>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "97bab1308aa52b12d94e269117263ef330ab1d0d", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic-for-send`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "eca7f5e5655913785f3e98cf94d3a179549e74ba", "filename": "tests/ui/non_send_fields_in_send_ty.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.rs?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -0,0 +1,127 @@\n+#![warn(clippy::non_send_fields_in_send_ty)]\n+#![feature(extern_types)]\n+\n+use std::cell::UnsafeCell;\n+use std::ptr::NonNull;\n+use std::rc::Rc;\n+use std::sync::{Arc, Mutex, MutexGuard};\n+\n+// disrustor / RUSTSEC-2020-0150\n+pub struct RingBuffer<T> {\n+    data: Vec<UnsafeCell<T>>,\n+    capacity: usize,\n+    mask: usize,\n+}\n+\n+unsafe impl<T> Send for RingBuffer<T> {}\n+\n+// noise_search / RUSTSEC-2020-0141\n+pub struct MvccRwLock<T> {\n+    raw: *const T,\n+    lock: Mutex<Box<T>>,\n+}\n+\n+unsafe impl<T> Send for MvccRwLock<T> {}\n+\n+// async-coap / RUSTSEC-2020-0124\n+pub struct ArcGuard<RC, T> {\n+    inner: T,\n+    head: Arc<RC>,\n+}\n+\n+unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n+\n+// rusb / RUSTSEC-2020-0098\n+extern \"C\" {\n+    type libusb_device_handle;\n+}\n+\n+pub trait UsbContext {\n+    // some user trait that does not guarantee `Send`\n+}\n+\n+pub struct DeviceHandle<T: UsbContext> {\n+    context: T,\n+    handle: NonNull<libusb_device_handle>,\n+}\n+\n+unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n+\n+// Other basic tests\n+pub struct NoGeneric {\n+    rc_is_not_send: Rc<String>,\n+}\n+\n+unsafe impl Send for NoGeneric {}\n+\n+pub struct MultiField<T> {\n+    field1: T,\n+    field2: T,\n+    field3: T,\n+}\n+\n+unsafe impl<T> Send for MultiField<T> {}\n+\n+pub enum MyOption<T> {\n+    MySome(T),\n+    MyNone,\n+}\n+\n+unsafe impl<T> Send for MyOption<T> {}\n+\n+// Multiple type parameters\n+pub struct MultiParam<A, B> {\n+    vec: Vec<(A, B)>,\n+}\n+\n+unsafe impl<A, B> Send for MultiParam<A, B> {}\n+\n+// Tests for raw pointer heuristic\n+extern \"C\" {\n+    type NonSend;\n+}\n+\n+pub struct HeuristicTest {\n+    // raw pointers are allowed\n+    field1: Vec<*const NonSend>,\n+    field2: [*const NonSend; 3],\n+    field3: (*const NonSend, *const NonSend, *const NonSend),\n+    // not allowed when it contains concrete `!Send` field\n+    field4: (*const NonSend, Rc<u8>),\n+    // nested raw pointer is also allowed\n+    field5: Vec<Vec<*const NonSend>>,\n+}\n+\n+unsafe impl Send for HeuristicTest {}\n+\n+// Test attributes\n+#[allow(clippy::non_send_fields_in_send_ty)]\n+pub struct AttrTest1<T>(T);\n+\n+pub struct AttrTest2<T> {\n+    #[allow(clippy::non_send_fields_in_send_ty)]\n+    field: T,\n+}\n+\n+pub enum AttrTest3<T> {\n+    #[allow(clippy::non_send_fields_in_send_ty)]\n+    Enum1(T),\n+    Enum2(T),\n+}\n+\n+unsafe impl<T> Send for AttrTest1<T> {}\n+unsafe impl<T> Send for AttrTest2<T> {}\n+unsafe impl<T> Send for AttrTest3<T> {}\n+\n+// Multiple non-overlapping `Send` for a single type\n+pub struct Complex<A, B> {\n+    field1: A,\n+    field2: B,\n+}\n+\n+unsafe impl<P> Send for Complex<P, u32> {}\n+\n+// `MutexGuard` is non-Send\n+unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n+\n+fn main() {}"}, {"sha": "8b8a1d16d9bb96172bd747f011814853230725b9", "filename": "tests/ui/non_send_fields_in_send_ty.stderr", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33c34fb2d76aeff15ccafedc8b3ebb17bebbc782/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_send_fields_in_send_ty.stderr?ref=33c34fb2d76aeff15ccafedc8b3ebb17bebbc782", "patch": "@@ -0,0 +1,171 @@\n+error: this implementation is unsound, as some fields in `RingBuffer<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:16:1\n+   |\n+LL | unsafe impl<T> Send for RingBuffer<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::non-send-fields-in-send-ty` implied by `-D warnings`\n+note: the type of field `data` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:11:5\n+   |\n+LL |     data: Vec<UnsafeCell<T>>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: add bounds on type parameter `T` that satisfy `Vec<UnsafeCell<T>>: Send`\n+\n+error: this implementation is unsound, as some fields in `MvccRwLock<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:24:1\n+   |\n+LL | unsafe impl<T> Send for MvccRwLock<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `lock` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:21:5\n+   |\n+LL |     lock: Mutex<Box<T>>,\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   = help: add bounds on type parameter `T` that satisfy `Mutex<Box<T>>: Send`\n+\n+error: this implementation is unsound, as some fields in `ArcGuard<RC, T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:32:1\n+   |\n+LL | unsafe impl<RC, T: Send> Send for ArcGuard<RC, T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `head` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:29:5\n+   |\n+LL |     head: Arc<RC>,\n+   |     ^^^^^^^^^^^^^\n+   = help: add bounds on type parameter `RC` that satisfy `Arc<RC>: Send`\n+\n+error: this implementation is unsound, as some fields in `DeviceHandle<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:48:1\n+   |\n+LL | unsafe impl<T: UsbContext> Send for DeviceHandle<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `context` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:44:5\n+   |\n+LL |     context: T,\n+   |     ^^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:55:1\n+   |\n+LL | unsafe impl Send for NoGeneric {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `rc_is_not_send` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:52:5\n+   |\n+LL |     rc_is_not_send: Rc<String>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: this implementation is unsound, as some fields in `MultiField<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:63:1\n+   |\n+LL | unsafe impl<T> Send for MultiField<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field1` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:58:5\n+   |\n+LL |     field1: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the type of field `field2` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:59:5\n+   |\n+LL |     field2: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the type of field `field3` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:60:5\n+   |\n+LL |     field3: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `MyOption<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:70:1\n+   |\n+LL | unsafe impl<T> Send for MyOption<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `0` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:66:12\n+   |\n+LL |     MySome(T),\n+   |            ^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `MultiParam<A, B>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:77:1\n+   |\n+LL | unsafe impl<A, B> Send for MultiParam<A, B> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `vec` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:74:5\n+   |\n+LL |     vec: Vec<(A, B)>,\n+   |     ^^^^^^^^^^^^^^^^\n+   = help: add bounds on type parameters `A, B` that satisfy `Vec<(A, B)>: Send`\n+\n+error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:95:1\n+   |\n+LL | unsafe impl Send for HeuristicTest {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field4` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:90:5\n+   |\n+LL |     field4: (*const NonSend, Rc<u8>),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: this implementation is unsound, as some fields in `AttrTest3<T>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:114:1\n+   |\n+LL | unsafe impl<T> Send for AttrTest3<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `0` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:109:11\n+   |\n+LL |     Enum2(T),\n+   |           ^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `Complex<P, u32>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:122:1\n+   |\n+LL | unsafe impl<P> Send for Complex<P, u32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field1` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:118:5\n+   |\n+LL |     field1: A,\n+   |     ^^^^^^^^^\n+   = help: add `P: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `Complex<Q, MutexGuard<'static, bool>>` are `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:125:1\n+   |\n+LL | unsafe impl<Q: Send> Send for Complex<Q, MutexGuard<'static, bool>> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the type of field `field2` is `!Send`\n+  --> $DIR/non_send_fields_in_send_ty.rs:119:5\n+   |\n+LL |     field2: B,\n+   |     ^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: aborting due to 12 previous errors\n+"}]}