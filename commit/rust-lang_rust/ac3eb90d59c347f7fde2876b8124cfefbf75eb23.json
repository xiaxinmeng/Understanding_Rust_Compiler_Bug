{"sha": "ac3eb90d59c347f7fde2876b8124cfefbf75eb23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjM2ViOTBkNTljMzQ3ZjdmZGUyODc2YjgxMjRjZmVmYmY3NWViMjM=", "commit": {"author": {"name": "Iago-lito", "email": "iago-lito@etak", "date": "2021-04-15T10:28:45Z"}, "committer": {"name": "Iago-lito", "email": "iago-lito@etak", "date": "2021-06-09T15:28:33Z"}, "message": "NonZero checked_mul.", "tree": {"sha": "3161f75a271bd5bb9f7f08f2d09074fa4450607a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3161f75a271bd5bb9f7f08f2d09074fa4450607a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac3eb90d59c347f7fde2876b8124cfefbf75eb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3eb90d59c347f7fde2876b8124cfefbf75eb23", "html_url": "https://github.com/rust-lang/rust/commit/ac3eb90d59c347f7fde2876b8124cfefbf75eb23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac3eb90d59c347f7fde2876b8124cfefbf75eb23/comments", "author": {"login": "iago-lito", "id": 10091387, "node_id": "MDQ6VXNlcjEwMDkxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/10091387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iago-lito", "html_url": "https://github.com/iago-lito", "followers_url": "https://api.github.com/users/iago-lito/followers", "following_url": "https://api.github.com/users/iago-lito/following{/other_user}", "gists_url": "https://api.github.com/users/iago-lito/gists{/gist_id}", "starred_url": "https://api.github.com/users/iago-lito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iago-lito/subscriptions", "organizations_url": "https://api.github.com/users/iago-lito/orgs", "repos_url": "https://api.github.com/users/iago-lito/repos", "events_url": "https://api.github.com/users/iago-lito/events{/privacy}", "received_events_url": "https://api.github.com/users/iago-lito/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iago-lito", "id": 10091387, "node_id": "MDQ6VXNlcjEwMDkxMzg3", "avatar_url": "https://avatars.githubusercontent.com/u/10091387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iago-lito", "html_url": "https://github.com/iago-lito", "followers_url": "https://api.github.com/users/iago-lito/followers", "following_url": "https://api.github.com/users/iago-lito/following{/other_user}", "gists_url": "https://api.github.com/users/iago-lito/gists{/gist_id}", "starred_url": "https://api.github.com/users/iago-lito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iago-lito/subscriptions", "organizations_url": "https://api.github.com/users/iago-lito/orgs", "repos_url": "https://api.github.com/users/iago-lito/repos", "events_url": "https://api.github.com/users/iago-lito/events{/privacy}", "received_events_url": "https://api.github.com/users/iago-lito/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e7b3161633109b80efa21d07f0352168ef6276e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e7b3161633109b80efa21d07f0352168ef6276e", "html_url": "https://github.com/rust-lang/rust/commit/7e7b3161633109b80efa21d07f0352168ef6276e"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "d48299c0715d9350d7945f14f28cdc7c5ebf112c", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ac3eb90d59c347f7fde2876b8124cfefbf75eb23/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3eb90d59c347f7fde2876b8124cfefbf75eb23/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=ac3eb90d59c347f7fde2876b8124cfefbf75eb23", "patch": "@@ -641,6 +641,64 @@ nonzero_signed_operations! {\n     NonZeroIsize(isize) -> NonZeroUsize(usize);\n }\n \n+// A bunch of methods for both signed and unsigned nonzero types.\n+macro_rules! nonzero_unsigned_signed_operations {\n+    ( $( $Ty: ident($Int: ty); )+ ) => {\n+        $(\n+            impl $Ty {\n+                /// Multiply two non-zero integers together.\n+                /// Return [`None`] on overflow.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_ops)]\n+                /// # #![feature(try_trait)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                /// # fn main() -> Result<(), std::option::NoneError> {\n+                #[doc = concat!(\"let two = \", stringify!($Ty), \"::new(2)?;\")]\n+                #[doc = concat!(\"let four = \", stringify!($Ty), \"::new(4)?;\")]\n+                #[doc = concat!(\"let max = \", stringify!($Ty), \"::new(\",\n+                                stringify!($Int), \"::MAX)?;\")]\n+                ///\n+                /// assert_eq!(Some(four), two.checked_mul(two));\n+                /// assert_eq!(None, max.checked_mul(two));\n+                /// # Ok(())\n+                /// # }\n+                /// ```\n+                #[unstable(feature = \"nonzero_ops\", issue = \"84186\")]\n+                #[inline]\n+                pub const fn checked_mul(self, other: $Ty) -> Option<$Ty> {\n+                    if let Some(result) = self.get().checked_mul(other.get()) {\n+                        // SAFETY: checked_mul returns None on overflow\n+                        // and `other` is also non-null\n+                        // so the result cannot be zero.\n+                        Some(unsafe { $Ty::new_unchecked(result) })\n+                    } else {\n+                        None\n+                    }\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_unsigned_signed_operations! {\n+    NonZeroU8(u8);\n+    NonZeroU16(u16);\n+    NonZeroU32(u32);\n+    NonZeroU64(u64);\n+    NonZeroU128(u128);\n+    NonZeroUsize(usize);\n+    NonZeroI8(i8);\n+    NonZeroI16(i16);\n+    NonZeroI32(i32);\n+    NonZeroI64(i64);\n+    NonZeroI128(i128);\n+    NonZeroIsize(isize);\n+}\n+\n macro_rules! nonzero_unsigned_is_power_of_two {\n     ( $( $Ty: ident )+ ) => {\n         $("}]}