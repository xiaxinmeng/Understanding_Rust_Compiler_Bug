{"sha": "9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZGZkZTBiZTQ2MGMwOTZlOGFlY2ZkZmU2YzZlZWFjMmUxNzNmZTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-07-04T15:43:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-07-04T15:55:09Z"}, "message": "remove some ad-hoc has_infer_types checks that aren't needed anymore", "tree": {"sha": "8dc1b4bb8e19357f2f5bd9333f443407e4ee824c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dc1b4bb8e19357f2f5bd9333f443407e4ee824c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4", "html_url": "https://github.com/rust-lang/rust/commit/9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c172246c5c558fc1451554fb2798018a23e872", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c172246c5c558fc1451554fb2798018a23e872", "html_url": "https://github.com/rust-lang/rust/commit/75c172246c5c558fc1451554fb2798018a23e872"}], "stats": {"total": 43, "additions": 17, "deletions": 26}, "files": [{"sha": "4be4372c0393aba6cf53c05a9635c1a7144b47bc", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::{\n     FakeReadCause, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n-use rustc_middle::ty::{self, suggest_constraining_type_param, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n@@ -1329,20 +1329,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let return_ty = tcx.erase_regions(return_ty);\n \n             // to avoid panics\n-            if !return_ty.has_infer_types() {\n-                if let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) {\n-                    if tcx\n-                        .type_implements_trait((iter_trait, return_ty, ty_params, self.param_env))\n-                        .must_apply_modulo_regions()\n-                    {\n-                        if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(return_span) {\n-                            err.span_suggestion_hidden(\n-                                return_span,\n-                                \"use `.collect()` to allocate the iterator\",\n-                                format!(\"{}{}\", snippet, \".collect::<Vec<_>>()\"),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        }\n+            if let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) {\n+                if tcx\n+                    .type_implements_trait((iter_trait, return_ty, ty_params, self.param_env))\n+                    .must_apply_modulo_regions()\n+                {\n+                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(return_span) {\n+                        err.span_suggestion_hidden(\n+                            return_span,\n+                            \"use `.collect()` to allocate the iterator\",\n+                            format!(\"{}{}\", snippet, \".collect::<Vec<_>>()\"),\n+                            Applicability::MaybeIncorrect,\n+                        );\n                     }\n                 }\n             }"}, {"sha": "b0c25c86dd31f844598e16ff08f1f68e1f9adba1", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=9bdfde0be460c096e8aecfdfe6c6eeac2e173fe4", "patch": "@@ -442,17 +442,10 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                             let ty_params = fcx.tcx.mk_substs_trait(expr_ty, &[]);\n                             // Check for infer types because cases like `Option<{integer}>` would\n                             // panic otherwise.\n-                            if !expr_ty.has_infer_types()\n-                                && !ty.has_infer_types()\n-                                && fcx\n-                                    .tcx\n-                                    .type_implements_trait((\n-                                        from_trait,\n-                                        ty,\n-                                        ty_params,\n-                                        fcx.param_env,\n-                                    ))\n-                                    .must_apply_modulo_regions()\n+                            if fcx\n+                                .tcx\n+                                .type_implements_trait((from_trait, ty, ty_params, fcx.param_env))\n+                                .must_apply_modulo_regions()\n                             {\n                                 label = false;\n                                 err.span_suggestion("}]}