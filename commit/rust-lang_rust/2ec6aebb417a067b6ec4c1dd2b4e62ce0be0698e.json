{"sha": "2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e", "node_id": "C_kwDOAAsO6NoAKDJlYzZhZWJiNDE3YTA2N2I2ZWM0YzFkZDJiNGU2MmNlMGJlMDY5OGU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-13T05:42:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-13T05:42:50Z"}, "message": "Rollup merge of #107961 - scottmcm:unify-ilog-panics, r=Mark-Simulacrum\n\nAvoid copy-pasting the `ilog` panic string in a bunch of places\n\nI also ended up changing the implementations to `if let` because it doesn't work to\n```rust\nself.checked_ilog2().unwrap_or_else(panic_for_nonpositive_argument)\n```\ndue to the `!`.  But as a bonus that meant I could remove the `rustc_allow_const_fn_unstable` too.", "tree": {"sha": "610bbf6008b08610f886236082cc0442d604041e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/610bbf6008b08610f886236082cc0442d604041e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj6c3aCRBK7hj4Ov3rIwAAl+QIACh0bBNsruIqDG6/owh6ZTLi\nmiXosWwTgFV0xkZGMf8X0DSY3pQY6avL555XdfBqrebwym1Xrq9/4qcJei51B0zO\n/nfNRyEKYr3g/BsC9yPii0yKBwt82DbBWd1YwzL/5xgM3znNyXxUlQA/2IkBc1oy\n3w5rnZWobK5Z4zpfj9RT1oQijAVGvHQFYr9pqXmQrHwRmpznlxBKwi4WSaNKKOVi\njj8Z5IRlS2c8O5B50FEnFHsBum+ML8qhisy0gTlvqxSpzJogO70uIHYRH18D+xHz\nTXwdxWwzUoNAVLWiCR64GZLu/TpwYWqy23Niu1pvWt90oKi28JNOdDSoYf9RAhA=\n=5Hl/\n-----END PGP SIGNATURE-----\n", "payload": "tree 610bbf6008b08610f886236082cc0442d604041e\nparent c0d1e324d554a3799b95723a4d9c558405c4779f\nparent 404e9c5e3ad75057b6bbb3bcd44fe60480e50294\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676266970 +0530\ncommitter GitHub <noreply@github.com> 1676266970 +0530\n\nRollup merge of #107961 - scottmcm:unify-ilog-panics, r=Mark-Simulacrum\n\nAvoid copy-pasting the `ilog` panic string in a bunch of places\n\nI also ended up changing the implementations to `if let` because it doesn't work to\n```rust\nself.checked_ilog2().unwrap_or_else(panic_for_nonpositive_argument)\n```\ndue to the `!`.  But as a bonus that meant I could remove the `rustc_allow_const_fn_unstable` too.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e", "html_url": "https://github.com/rust-lang/rust/commit/2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0d1e324d554a3799b95723a4d9c558405c4779f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d1e324d554a3799b95723a4d9c558405c4779f", "html_url": "https://github.com/rust-lang/rust/commit/c0d1e324d554a3799b95723a4d9c558405c4779f"}, {"sha": "404e9c5e3ad75057b6bbb3bcd44fe60480e50294", "url": "https://api.github.com/repos/rust-lang/rust/commits/404e9c5e3ad75057b6bbb3bcd44fe60480e50294", "html_url": "https://github.com/rust-lang/rust/commit/404e9c5e3ad75057b6bbb3bcd44fe60480e50294"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "0ce31b40a3845b877311ae66ab0a73bf88dc2df1", "filename": "library/core/src/num/int_log10.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e", "patch": "@@ -138,3 +138,11 @@ pub const fn i64(val: i64) -> u32 {\n pub const fn i128(val: i128) -> u32 {\n     u128(val as u128)\n }\n+\n+/// Instantiate this panic logic once, rather than for all the ilog methods\n+/// on every single primitive type.\n+#[cold]\n+#[track_caller]\n+pub const fn panic_for_nonpositive_argument() -> ! {\n+    panic!(\"argument of integer logarithm must be positive\")\n+}"}, {"sha": "479f8ffb78d01383177c6b77f6e23d4cc665a9dd", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e", "patch": "@@ -2331,14 +2331,17 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog(self, base: Self) -> u32 {\n             assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n-            self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog(base) {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 2 logarithm of the number, rounded down.\n@@ -2354,13 +2357,16 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog2(self) -> u32 {\n-            self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog2() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 10 logarithm of the number, rounded down.\n@@ -2376,13 +2382,16 @@ macro_rules! int_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog10(self) -> u32 {\n-            self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog10() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the logarithm of the number with respect to an arbitrary base,"}, {"sha": "495c44bd8594a88b8a0fd58e68f1a56634ce856b", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=2ec6aebb417a067b6ec4c1dd2b4e62ce0be0698e", "patch": "@@ -705,14 +705,17 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog(self, base: Self) -> u32 {\n             assert!(base >= 2, \"base of integer logarithm must be at least 2\");\n-            self.checked_ilog(base).expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog(base) {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 2 logarithm of the number, rounded down.\n@@ -728,13 +731,16 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog2(self) -> u32 {\n-            self.checked_ilog2().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog2() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the base 10 logarithm of the number, rounded down.\n@@ -750,13 +756,16 @@ macro_rules! uint_impl {\n         /// ```\n         #[stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n-        #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[track_caller]\n         pub const fn ilog10(self) -> u32 {\n-            self.checked_ilog10().expect(\"argument of integer logarithm must be positive\")\n+            if let Some(log) = self.checked_ilog10() {\n+                log\n+            } else {\n+                int_log10::panic_for_nonpositive_argument()\n+            }\n         }\n \n         /// Returns the logarithm of the number with respect to an arbitrary base,"}]}