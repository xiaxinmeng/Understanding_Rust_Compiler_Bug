{"sha": "ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNzVlZjllNjJiN2RmOGM0Njg2NWNmYjkwN2M1NmNhYjFmMjlmODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-01T09:12:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-01T09:12:52Z"}, "message": "Auto merge of #28137 - nrc:remove-non-multi, r=huonw\n\nThis is a [breaking-change] for syntax extension authors. The fix is to use MultiModifier or MultiDecorator, which have the same functionality but are more flexible. Users of syntax extensions are unaffected.", "tree": {"sha": "6b0ffd5138967b73efb21d128929937e93b5200d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b0ffd5138967b73efb21d128929937e93b5200d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "html_url": "https://github.com/rust-lang/rust/commit/ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "html_url": "https://github.com/rust-lang/rust/commit/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d"}, {"sha": "20e1ea2dd84d5b29414059a4e07ce7327d1bef19", "url": "https://api.github.com/repos/rust-lang/rust/commits/20e1ea2dd84d5b29414059a4e07ce7327d1bef19", "html_url": "https://github.com/rust-lang/rust/commit/20e1ea2dd84d5b29414059a4e07ce7327d1bef19"}], "stats": {"total": 176, "additions": 3, "deletions": 173}, "files": [{"sha": "e79721b4347a6e6d03e7bdd8b3ff1f2f8b97a421", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "patch": "@@ -14,7 +14,7 @@ use lint::{LintPassObject, LintId, Lint};\n use session::Session;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n-use syntax::ext::base::{IdentTT, Decorator, Modifier, MultiModifier, MultiDecorator};\n+use syntax::ext::base::{IdentTT, MultiModifier, MultiDecorator};\n use syntax::ext::base::{MacroExpanderFn, MacroRulesTT};\n use syntax::codemap::Span;\n use syntax::parse::token;\n@@ -98,9 +98,7 @@ impl<'a> Registry<'a> {\n             IdentTT(ext, _, allow_internal_unstable) => {\n                 IdentTT(ext, Some(self.krate_span), allow_internal_unstable)\n             }\n-            Decorator(ext) => Decorator(ext),\n             MultiDecorator(ext) => MultiDecorator(ext),\n-            Modifier(ext) => Modifier(ext),\n             MultiModifier(ext) => MultiModifier(ext),\n             MacroRulesTT => {\n                 self.sess.err(\"plugin tried to register a new MacroRulesTT\");"}, {"sha": "775d47a8c0e087fc782e66479de426fd6a51bd84", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "patch": "@@ -31,60 +31,6 @@ use std::collections::HashMap;\n use std::rc::Rc;\n use std::default::Default;\n \n-#[unstable(feature = \"rustc_private\")]\n-#[deprecated(since = \"1.0.0\", reason = \"replaced by MultiItemDecorator\")]\n-pub trait ItemDecorator {\n-    fn expand(&self,\n-              ecx: &mut ExtCtxt,\n-              sp: Span,\n-              meta_item: &ast::MetaItem,\n-              item: &ast::Item,\n-              push: &mut FnMut(P<ast::Item>));\n-}\n-\n-#[allow(deprecated)]\n-#[unstable(feature = \"rustc_private\")]\n-#[deprecated(since = \"1.0.0\", reason = \"replaced by MultiItemDecorator\")]\n-impl<F> ItemDecorator for F\n-    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &ast::Item, &mut FnMut(P<ast::Item>))\n-{\n-    fn expand(&self,\n-              ecx: &mut ExtCtxt,\n-              sp: Span,\n-              meta_item: &ast::MetaItem,\n-              item: &ast::Item,\n-              push: &mut FnMut(P<ast::Item>)) {\n-        (*self)(ecx, sp, meta_item, item, push)\n-    }\n-}\n-\n-#[unstable(feature = \"rustc_private\")]\n-#[deprecated(since = \"1.0.0\", reason = \"replaced by MultiItemModifier\")]\n-pub trait ItemModifier {\n-    fn expand(&self,\n-              ecx: &mut ExtCtxt,\n-              span: Span,\n-              meta_item: &ast::MetaItem,\n-              item: P<ast::Item>)\n-              -> P<ast::Item>;\n-}\n-\n-#[allow(deprecated)]\n-#[unstable(feature = \"rustc_private\")]\n-#[deprecated(since = \"1.0.0\", reason = \"replaced by MultiItemModifier\")]\n-impl<F> ItemModifier for F\n-    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, P<ast::Item>) -> P<ast::Item>\n-{\n-\n-    fn expand(&self,\n-              ecx: &mut ExtCtxt,\n-              span: Span,\n-              meta_item: &ast::MetaItem,\n-              item: P<ast::Item>)\n-              -> P<ast::Item> {\n-        (*self)(ecx, span, meta_item, item)\n-    }\n-}\n \n #[derive(Debug,Clone)]\n pub enum Annotatable {\n@@ -460,26 +406,12 @@ impl MacResult for DummyResult {\n \n /// An enum representing the different kinds of syntax extensions.\n pub enum SyntaxExtension {\n-    /// A syntax extension that is attached to an item and creates new items\n-    /// based upon it.\n-    #[unstable(feature = \"rustc_private\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"replaced by MultiDecorator\")]\n-    #[allow(deprecated)]\n-    Decorator(Box<ItemDecorator + 'static>),\n-\n     /// A syntax extension that is attached to an item and creates new items\n     /// based upon it.\n     ///\n     /// `#[derive(...)]` is a `MultiItemDecorator`.\n     MultiDecorator(Box<MultiItemDecorator + 'static>),\n \n-    /// A syntax extension that is attached to an item and modifies it\n-    /// in-place.\n-    #[unstable(feature = \"rustc_private\")]\n-    #[deprecated(since = \"1.0.0\", reason = \"replaced by MultiModifier\")]\n-    #[allow(deprecated)]\n-    Modifier(Box<ItemModifier + 'static>),\n-\n     /// A syntax extension that is attached to an item and modifies it\n     /// in-place. More flexible version than Modifier.\n     MultiModifier(Box<MultiItemModifier + 'static>),"}, {"sha": "fd70dd175fc48d7c7b183d022e60c64e76a6da85", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 83, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "patch": "@@ -636,9 +636,9 @@ macro_rules! with_exts_frame {\n // When we enter a module, record it, for the sake of `module!`\n pub fn expand_item(it: P<ast::Item>, fld: &mut MacroExpander)\n                    -> SmallVector<P<ast::Item>> {\n-    let it = expand_item_modifiers(it, fld);\n+    let it = expand_item_multi_modifier(Annotatable::Item(it), fld);\n \n-    expand_annotatable(Annotatable::Item(it), fld)\n+    expand_annotatable(it, fld)\n         .into_iter().map(|i| i.expect_item()).collect()\n }\n \n@@ -1275,11 +1275,9 @@ macro_rules! partition {\n     }\n }\n \n-partition!(modifiers, Modifier);\n partition!(multi_modifiers, MultiModifier);\n \n \n-#[allow(deprecated)] // The `allow` is needed because the `Decorator` variant is used.\n fn expand_decorators(a: Annotatable,\n                      fld: &mut MacroExpander,\n                      decorator_items: &mut SmallVector<Annotatable>,\n@@ -1289,33 +1287,6 @@ fn expand_decorators(a: Annotatable,\n         let mname = intern(&attr.name());\n         match fld.cx.syntax_env.find(&mname) {\n             Some(rc) => match *rc {\n-                Decorator(ref dec) => {\n-                    attr::mark_used(&attr);\n-\n-                    fld.cx.bt_push(ExpnInfo {\n-                        call_site: attr.span,\n-                        callee: NameAndSpan {\n-                            format: MacroAttribute(mname),\n-                            span: Some(attr.span),\n-                            // attributes can do whatever they like,\n-                            // for now.\n-                            allow_internal_unstable: true,\n-                        }\n-                    });\n-\n-                    // we'd ideally decorator_items.push_all(expand_item(item, fld)),\n-                    // but that double-mut-borrows fld\n-                    let mut items: SmallVector<Annotatable> = SmallVector::zero();\n-                    dec.expand(fld.cx,\n-                               attr.span,\n-                               &attr.node.value,\n-                               &a.clone().expect_item(),\n-                               &mut |item| items.push(Annotatable::Item(item)));\n-                    decorator_items.extend(items.into_iter()\n-                        .flat_map(|ann| expand_annotatable(ann, fld).into_iter()));\n-\n-                    fld.cx.bt_pop();\n-                }\n                 MultiDecorator(ref dec) => {\n                     attr::mark_used(&attr);\n \n@@ -1392,58 +1363,6 @@ fn expand_item_multi_modifier(mut it: Annotatable,\n     expand_item_multi_modifier(it, fld)\n }\n \n-#[allow(deprecated)] // This is needed because the `ItemModifier` trait is used\n-fn expand_item_modifiers(mut it: P<ast::Item>,\n-                         fld: &mut MacroExpander)\n-                         -> P<ast::Item> {\n-    // partition the attributes into ItemModifiers and others\n-    let (modifiers, other_attrs) = modifiers(&it.attrs, fld);\n-\n-    // update the attrs, leave everything else alone. Is this mutation really a good idea?\n-    it = P(ast::Item {\n-        attrs: other_attrs,\n-        ..(*it).clone()\n-    });\n-\n-    if modifiers.is_empty() {\n-        let it = expand_item_multi_modifier(Annotatable::Item(it), fld);\n-        return it.expect_item();\n-    }\n-\n-    for attr in &modifiers {\n-        let mname = intern(&attr.name());\n-\n-        match fld.cx.syntax_env.find(&mname) {\n-            Some(rc) => match *rc {\n-                Modifier(ref mac) => {\n-                    attr::mark_used(attr);\n-                    fld.cx.bt_push(ExpnInfo {\n-                        call_site: attr.span,\n-                        callee: NameAndSpan {\n-                            format: MacroAttribute(mname),\n-                            span: Some(attr.span),\n-                            // attributes can do whatever they like,\n-                            // for now\n-                            allow_internal_unstable: true,\n-                        }\n-                    });\n-                    it = mac.expand(fld.cx, attr.span, &*attr.node.value, it);\n-                    fld.cx.bt_pop();\n-                }\n-                _ => unreachable!()\n-            },\n-            _ => unreachable!()\n-        }\n-    }\n-\n-    // Expansion may have added new ItemModifiers.\n-    // It is possible, that an item modifier could expand to a multi-modifier or\n-    // vice versa. In this case we will expand all modifiers before multi-modifiers,\n-    // which might give an odd ordering. However, I think it is unlikely that the\n-    // two kinds will be mixed, and old-style multi-modifiers are deprecated.\n-    expand_item_modifiers(it, fld)\n-}\n-\n fn expand_impl_item(ii: P<ast::ImplItem>, fld: &mut MacroExpander)\n                  -> SmallVector<P<ast::ImplItem>> {\n     match ii.node {"}, {"sha": "77f0e0f2c3411ecbe827d1809b7c65486ff85439", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "patch": "@@ -30,10 +30,6 @@ macro_rules! unexported_macro { () => (3) }\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"make_a_1\", expand_make_a_1);\n     reg.register_macro(\"identity\", expand_identity);\n-    reg.register_syntax_extension(\n-        token::intern(\"into_foo\"),\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-        Modifier(Box::new(expand_into_foo)));\n     reg.register_syntax_extension(\n         token::intern(\"into_multi_foo\"),\n         // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n@@ -62,14 +58,6 @@ fn expand_identity(cx: &mut ExtCtxt, _span: Span, tts: &[TokenTree])\n     MacEager::expr(quote_expr!(&mut *cx, $expr))\n }\n \n-fn expand_into_foo(cx: &mut ExtCtxt, sp: Span, attr: &MetaItem, it: P<Item>)\n-                   -> P<Item> {\n-    P(Item {\n-        attrs: it.attrs.clone(),\n-        ..(*quote_item!(cx, enum Foo { Bar, Baz }).unwrap()).clone()\n-    })\n-}\n-\n fn expand_into_foo_multi(cx: &mut ExtCtxt,\n                          sp: Span,\n                          attr: &MetaItem,"}, {"sha": "3a3819636691500e36e495288d32143b901ba29d", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae75ef9e62b7df8c46865cfb907c56cab1f29f81/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=ae75ef9e62b7df8c46865cfb907c56cab1f29f81", "patch": "@@ -17,10 +17,6 @@\n #[macro_use] #[no_link]\n extern crate macro_crate_test;\n \n-#[into_foo]\n-#[derive(PartialEq, Clone, Debug)]\n-fn foo() -> AFakeTypeThatHadBetterGoAway {}\n-\n #[into_multi_foo]\n #[derive(PartialEq, Clone, Debug)]\n fn foo() -> AnotherFakeTypeThatHadBetterGoAway {}\n@@ -41,9 +37,6 @@ pub fn main() {\n     assert_eq!(1, make_a_1!());\n     assert_eq!(2, exported_macro!());\n \n-    assert_eq!(Foo::Bar, Foo::Bar);\n-    test(None::<Foo>);\n-\n     assert_eq!(Foo2::Bar2, Foo2::Bar2);\n     test(None::<Foo2>);\n "}]}