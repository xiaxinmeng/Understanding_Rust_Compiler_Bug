{"sha": "ea5be96bab45a68d5877acdfab88404df7376209", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNWJlOTZiYWI0NWE2OGQ1ODc3YWNkZmFiODg0MDRkZjczNzYyMDk=", "commit": {"author": {"name": "Bastien Orivel", "email": "eijebong@bananium.fr", "date": "2017-08-10T22:31:47Z"}, "committer": {"name": "Bastien Orivel", "email": "eijebong@bananium.fr", "date": "2017-08-10T22:31:47Z"}, "message": "Fix some more typos, this time words that are duplicated.", "tree": {"sha": "6b35d3cfd960bf4961f435004b216aca38ae45c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b35d3cfd960bf4961f435004b216aca38ae45c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea5be96bab45a68d5877acdfab88404df7376209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5be96bab45a68d5877acdfab88404df7376209", "html_url": "https://github.com/rust-lang/rust/commit/ea5be96bab45a68d5877acdfab88404df7376209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea5be96bab45a68d5877acdfab88404df7376209/comments", "author": {"login": "Eijebong", "id": 3650385, "node_id": "MDQ6VXNlcjM2NTAzODU=", "avatar_url": "https://avatars.githubusercontent.com/u/3650385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eijebong", "html_url": "https://github.com/Eijebong", "followers_url": "https://api.github.com/users/Eijebong/followers", "following_url": "https://api.github.com/users/Eijebong/following{/other_user}", "gists_url": "https://api.github.com/users/Eijebong/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eijebong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eijebong/subscriptions", "organizations_url": "https://api.github.com/users/Eijebong/orgs", "repos_url": "https://api.github.com/users/Eijebong/repos", "events_url": "https://api.github.com/users/Eijebong/events{/privacy}", "received_events_url": "https://api.github.com/users/Eijebong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eijebong", "id": 3650385, "node_id": "MDQ6VXNlcjM2NTAzODU=", "avatar_url": "https://avatars.githubusercontent.com/u/3650385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eijebong", "html_url": "https://github.com/Eijebong", "followers_url": "https://api.github.com/users/Eijebong/followers", "following_url": "https://api.github.com/users/Eijebong/following{/other_user}", "gists_url": "https://api.github.com/users/Eijebong/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eijebong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eijebong/subscriptions", "organizations_url": "https://api.github.com/users/Eijebong/orgs", "repos_url": "https://api.github.com/users/Eijebong/repos", "events_url": "https://api.github.com/users/Eijebong/events{/privacy}", "received_events_url": "https://api.github.com/users/Eijebong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47cb3c5bc28e1bb2ac2d2efb7796ceb17b4ab7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/47cb3c5bc28e1bb2ac2d2efb7796ceb17b4ab7de", "html_url": "https://github.com/rust-lang/rust/commit/47cb3c5bc28e1bb2ac2d2efb7796ceb17b4ab7de"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "58da290cfb694bb8bbb547c09fa90d7147c6bb07", "filename": "src/libcore/ops/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea5be96bab45a68d5877acdfab88404df7376209/src%2Flibcore%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5be96bab45a68d5877acdfab88404df7376209/src%2Flibcore%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Funsize.rs?ref=ea5be96bab45a68d5877acdfab88404df7376209", "patch": "@@ -24,7 +24,7 @@ use marker::Unsize;\n /// Such an impl can only be written if `Foo<T>` has only a single non-phantomdata\n /// field involving `T`. If the type of that field is `Bar<T>`, an implementation\n /// of `CoerceUnsized<Bar<U>> for Bar<T>` must exist. The coercion will work by\n-/// by coercing the `Bar<T>` field into `Bar<U>` and filling in the rest of the fields\n+/// coercing the `Bar<T>` field into `Bar<U>` and filling in the rest of the fields\n /// from `Foo<T>` to create a `Foo<U>`. This will effectively drill down to a pointer\n /// field and coerce that.\n ///"}, {"sha": "6a71e67676ae48a6abb364106b98e925d17358b0", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea5be96bab45a68d5877acdfab88404df7376209/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5be96bab45a68d5877acdfab88404df7376209/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=ea5be96bab45a68d5877acdfab88404df7376209", "patch": "@@ -111,7 +111,7 @@ impl fmt::Display for TokenStream {\n \n /// `quote!(..)` accepts arbitrary tokens and expands into a `TokenStream` describing the input.\n /// For example, `quote!(a + b)` will produce a expression, that, when evaluated, constructs\n-/// constructs the `TokenStream` `[Word(\"a\"), Op('+', Alone), Word(\"b\")]`.\n+/// the `TokenStream` `[Word(\"a\"), Op('+', Alone), Word(\"b\")]`.\n ///\n /// Unquoting is done with `$`, and works by taking the single next ident as the unquoted term.\n /// To quote `$` itself, use `$$`."}, {"sha": "eb233aa203ab4b30ba466f8e89a9ca4268f1ff3f", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea5be96bab45a68d5877acdfab88404df7376209/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5be96bab45a68d5877acdfab88404df7376209/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ea5be96bab45a68d5877acdfab88404df7376209", "patch": "@@ -282,7 +282,7 @@ pub fn source_name(input: &Input) -> String {\n /// This is a somewhat higher level controller than a Session - the Session\n /// controls what happens in each phase, whereas the CompileController controls\n /// whether a phase is run at all and whether other code (from outside the\n-/// the compiler) is run between phases.\n+/// compiler) is run between phases.\n ///\n /// Note that if compilation is set to stop and a callback is provided for a\n /// given entry point, the callback is called before compilation is stopped."}]}