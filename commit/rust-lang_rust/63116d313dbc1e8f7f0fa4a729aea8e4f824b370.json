{"sha": "63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMTE2ZDMxM2RiYzFlOGY3ZjBmYTRhNzI5YWVhOGU0ZjgyNGIzNzA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-02T16:15:26Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-16T20:13:15Z"}, "message": "Rename `MetaItem::ident` to `MetaItem::path`", "tree": {"sha": "01ad264bc4e9ec936de8de6e21bf77467ca0ce85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01ad264bc4e9ec936de8de6e21bf77467ca0ce85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "html_url": "https://github.com/rust-lang/rust/commit/63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad55b3decefd53263f20a6c575aaa85c1edcbec", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad55b3decefd53263f20a6c575aaa85c1edcbec", "html_url": "https://github.com/rust-lang/rust/commit/6ad55b3decefd53263f20a6c575aaa85c1edcbec"}], "stats": {"total": 105, "additions": 52, "deletions": 53}, "files": [{"sha": "85e62c0804a4f3caf2824c82ac8d2b032b49afee", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -368,7 +368,7 @@ impl_stable_hash_for!(enum ::syntax::ast::NestedMetaItemKind {\n });\n \n impl_stable_hash_for!(struct ::syntax::ast::MetaItem {\n-    ident,\n+    path,\n     node,\n     span\n });"}, {"sha": "4fe680d6cb61c143d5b21c28e7039907c6b78a62", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -221,7 +221,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                 match item.node {\n                     ast::MetaItemKind::Word => {}  // actual lint names handled later\n                     ast::MetaItemKind::NameValue(ref name_value) => {\n-                        if item.ident == \"reason\" {\n+                        if item.path == \"reason\" {\n                             // found reason, reslice meta list to exclude it\n                             metas = &metas[0..metas.len()-1];\n                             // FIXME (#55112): issue unused-attributes lint if we thereby\n@@ -261,7 +261,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                         let mut err = bad_attr(li.span);\n                         if let Some(item) = li.meta_item() {\n                             if let ast::MetaItemKind::NameValue(_) = item.node {\n-                                if item.ident == \"reason\" {\n+                                if item.path == \"reason\" {\n                                     err.help(\"reason in lint attribute must come last\");\n                                 }\n                             }\n@@ -270,15 +270,15 @@ impl<'a> LintLevelsBuilder<'a> {\n                         continue;\n                     }\n                 };\n-                let tool_name = if meta_item.ident.segments.len() > 1 {\n-                    let tool_ident = meta_item.ident.segments[0].ident;\n+                let tool_name = if meta_item.path.segments.len() > 1 {\n+                    let tool_ident = meta_item.path.segments[0].ident;\n                     if !attr::is_known_lint_tool(tool_ident) {\n                         span_err!(\n                             sess,\n                             tool_ident.span,\n                             E0710,\n                             \"an unknown tool name found in scoped lint: `{}`\",\n-                            meta_item.ident\n+                            meta_item.path\n                         );\n                         continue;\n                     }\n@@ -287,7 +287,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                 } else {\n                     None\n                 };\n-                let name = meta_item.ident.segments.last().expect(\"empty lint name\").ident.name;\n+                let name = meta_item.path.segments.last().expect(\"empty lint name\").ident.name;\n                 match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintSource::Node(name, li.span, reason);"}, {"sha": "0ae7c10cf563022cb3c13c8f0c5e210756d4662f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -1839,7 +1839,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n \n             match &mut parser.parse_meta_item() {\n                 Ok(meta_item) if parser.token == token::Eof => {\n-                    if meta_item.ident.segments.len() != 1 {\n+                    if meta_item.path.segments.len() != 1 {\n                         error!(\"argument key must be an identifier\");\n                     }\n                     match &meta_item.node {"}, {"sha": "6d708b8d458ad56818b8e1b3ec56bc2da158ef77", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -683,7 +683,7 @@ impl RustcDefaultCalls {\n \n                     let mut cfgs = sess.parse_sess.config.iter().filter_map(|&(name, ref value)| {\n                         let gated_cfg = GatedCfg::gate(&ast::MetaItem {\n-                            ident: ast::Path::from_ident(ast::Ident::with_empty_ctxt(name)),\n+                            path: ast::Path::from_ident(ast::Ident::with_empty_ctxt(name)),\n                             node: ast::MetaItemKind::Word,\n                             span: DUMMY_SP,\n                         });"}, {"sha": "af2cd8f979a11fa781ac566b8b2b04b417c11faf", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitD\n                 } else {\n                     sess.span_err(\n                         item.span,\n-                        &format!(\"{} attribute requires a path\", item.ident));\n+                        &format!(\"{} attribute requires a path\", item.path));\n                     return None;\n                 }\n             }"}, {"sha": "6e852e6515d5a9dada0d3521965b1937ecd07ea5", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -430,7 +430,7 @@ mod test {\n \n     fn dummy_meta_item_word(name: &str) -> MetaItem {\n         MetaItem {\n-            ident: Path::from_ident(Ident::from_str(name)),\n+            path: Path::from_ident(Ident::from_str(name)),\n             node: MetaItemKind::Word,\n             span: DUMMY_SP,\n         }\n@@ -439,7 +439,7 @@ mod test {\n     macro_rules! dummy_meta_item_list {\n         ($name:ident, [$($list:ident),* $(,)?]) => {\n             MetaItem {\n-                ident: Path::from_ident(Ident::from_str(stringify!($name))),\n+                path: Path::from_ident(Ident::from_str(stringify!($name))),\n                 node: MetaItemKind::List(vec![\n                     $(\n                         dummy_spanned(NestedMetaItemKind::MetaItem(\n@@ -453,7 +453,7 @@ mod test {\n \n         ($name:ident, [$($list:expr),* $(,)?]) => {\n             MetaItem {\n-                ident: Path::from_ident(Ident::from_str(stringify!($name))),\n+                path: Path::from_ident(Ident::from_str(stringify!($name))),\n                 node: MetaItemKind::List(vec![\n                     $(\n                         dummy_spanned(NestedMetaItemKind::MetaItem($list)),\n@@ -593,7 +593,7 @@ mod test {\n             assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"all\")));\n \n             let mi = MetaItem {\n-                ident: Path::from_ident(Ident::from_str(\"all\")),\n+                path: Path::from_ident(Ident::from_str(\"all\")),\n                 node: MetaItemKind::NameValue(dummy_spanned(LitKind::Str(\n                     Symbol::intern(\"done\"),\n                     StrStyle::Cooked,\n@@ -628,7 +628,7 @@ mod test {\n     fn test_parse_err() {\n         with_globals(|| {\n             let mi = MetaItem {\n-                ident: Path::from_ident(Ident::from_str(\"foo\")),\n+                path: Path::from_ident(Ident::from_str(\"foo\")),\n                 node: MetaItemKind::NameValue(dummy_spanned(LitKind::Bool(false))),\n                 span: DUMMY_SP,\n             };"}, {"sha": "b3a816d17f56cf97b484e3a8590b893a6552b5bc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -3713,7 +3713,7 @@ fn item_enum(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n }\n \n fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n-    let path = attr.ident.to_string();\n+    let path = attr.path.to_string();\n \n     if attr.is_word() {\n         Some(path)"}, {"sha": "287ec4c2fdc4ed8291ab58487741d22d017f8fe2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -464,7 +464,7 @@ pub enum NestedMetaItemKind {\n /// E.g., `#[test]`, `#[derive(..)]`, `#[rustfmt::skip]` or `#[feature = \"foo\"]`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MetaItem {\n-    pub ident: Path,\n+    pub path: Path,\n     pub node: MetaItemKind,\n     pub span: Span,\n }"}, {"sha": "575d783eaf268403cd96f00f73c9f852481a5298", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -203,7 +203,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n             let meta = meta.as_ref().unwrap();\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                 if item.is_some() {\n-                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.ident.to_string()));\n+                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.path.to_string()));\n                     return false\n                 }\n                 if let Some(v) = meta.value_str() {\n@@ -232,7 +232,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                     handle_errors(\n                                         sess,\n                                         mi.span,\n-                                        AttrError::UnknownMetaItem(mi.ident.to_string(), expected),\n+                                        AttrError::UnknownMetaItem(mi.path.to_string(), expected),\n                                     );\n                                     continue 'outer\n                                 }\n@@ -315,7 +315,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                         sess,\n                                         meta.span,\n                                         AttrError::UnknownMetaItem(\n-                                            mi.ident.to_string(),\n+                                            mi.path.to_string(),\n                                             &[\"feature\", \"reason\", \"issue\"]\n                                         ),\n                                     );\n@@ -387,7 +387,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                             sess,\n                                             meta.span,\n                                             AttrError::UnknownMetaItem(\n-                                                mi.ident.to_string(), &[\"since\", \"note\"],\n+                                                mi.path.to_string(), &[\"since\", \"note\"],\n                                             ),\n                                         );\n                                         continue 'outer\n@@ -482,8 +482,8 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n             gated_cfg.check_and_emit(sess, feats);\n         }\n         let error = |span, msg| { sess.span_diagnostic.span_err(span, msg); true };\n-        if cfg.ident.segments.len() != 1 {\n-            return error(cfg.ident.span, \"`cfg` predicate key must be an identifier\");\n+        if cfg.path.segments.len() != 1 {\n+            return error(cfg.path.span, \"`cfg` predicate key must be an identifier\");\n         }\n         match &cfg.node {\n             MetaItemKind::List(..) => {\n@@ -549,7 +549,7 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n                 },\n                 _ => {\n                     span_err!(sess.span_diagnostic, cfg.span, E0537,\n-                              \"invalid predicate `{}`\", cfg.ident);\n+                              \"invalid predicate `{}`\", cfg.path);\n                     false\n                 }\n             }\n@@ -604,7 +604,7 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n                 let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                     if item.is_some() {\n                         handle_errors(\n-                            sess, meta.span, AttrError::MultipleItem(meta.ident.to_string())\n+                            sess, meta.span, AttrError::MultipleItem(meta.path.to_string())\n                         );\n                         return false\n                     }\n@@ -642,7 +642,7 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n                                     handle_errors(\n                                         sess,\n                                         meta.span(),\n-                                        AttrError::UnknownMetaItem(mi.ident.to_string(),\n+                                        AttrError::UnknownMetaItem(mi.path.to_string(),\n                                                                    &[\"since\", \"note\"]),\n                                     );\n                                     continue 'outer"}, {"sha": "dd3bc3f0c362731b92c8e0be2add5061269a7b00", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -208,8 +208,8 @@ impl Attribute {\n impl MetaItem {\n     /// For a single-segment meta-item returns its name, otherwise returns `None`.\n     pub fn ident(&self) -> Option<Ident> {\n-        if self.ident.segments.len() == 1 {\n-            Some(self.ident.segments[0].ident)\n+        if self.path.segments.len() == 1 {\n+            Some(self.path.segments[0].ident)\n         } else {\n             None\n         }\n@@ -256,7 +256,7 @@ impl MetaItem {\n     pub fn span(&self) -> Span { self.span }\n \n     pub fn check_name(&self, name: &str) -> bool {\n-        self.ident == name\n+        self.path == name\n     }\n \n     pub fn is_value_str(&self) -> bool {\n@@ -273,7 +273,7 @@ impl Attribute {\n     pub fn meta(&self) -> Option<MetaItem> {\n         let mut tokens = self.tokens.trees().peekable();\n         Some(MetaItem {\n-            ident: self.path.clone(),\n+            path: self.path.clone(),\n             node: if let Some(node) = MetaItemKind::from_tokens(&mut tokens) {\n                 if tokens.peek().is_some() {\n                     return None;\n@@ -319,7 +319,7 @@ impl Attribute {\n \n     pub fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {\n         Ok(MetaItem {\n-            ident: self.path.clone(),\n+            path: self.path.clone(),\n             node: self.parse(sess, |parser| parser.parse_meta_item_kind())?,\n             span: self.span,\n         })\n@@ -357,15 +357,15 @@ pub fn mk_name_value_item_str(ident: Ident, value: Spanned<Symbol>) -> MetaItem\n }\n \n pub fn mk_name_value_item(span: Span, ident: Ident, value: ast::Lit) -> MetaItem {\n-    MetaItem { ident: Path::from_ident(ident), span, node: MetaItemKind::NameValue(value) }\n+    MetaItem { path: Path::from_ident(ident), span, node: MetaItemKind::NameValue(value) }\n }\n \n pub fn mk_list_item(span: Span, ident: Ident, items: Vec<NestedMetaItem>) -> MetaItem {\n-    MetaItem { ident: Path::from_ident(ident), span, node: MetaItemKind::List(items) }\n+    MetaItem { path: Path::from_ident(ident), span, node: MetaItemKind::List(items) }\n }\n \n pub fn mk_word_item(ident: Ident) -> MetaItem {\n-    MetaItem { ident: Path::from_ident(ident), span: ident.span, node: MetaItemKind::Word }\n+    MetaItem { path: Path::from_ident(ident), span: ident.span, node: MetaItemKind::Word }\n }\n \n pub fn mk_nested_word_item(ident: Ident) -> NestedMetaItem {\n@@ -393,7 +393,7 @@ pub fn mk_spanned_attr_inner(sp: Span, id: AttrId, item: MetaItem) -> Attribute\n     Attribute {\n         id,\n         style: ast::AttrStyle::Inner,\n-        path: item.ident,\n+        path: item.path,\n         tokens: item.node.tokens(item.span),\n         is_sugared_doc: false,\n         span: sp,\n@@ -410,7 +410,7 @@ pub fn mk_spanned_attr_outer(sp: Span, id: AttrId, item: MetaItem) -> Attribute\n     Attribute {\n         id,\n         style: ast::AttrStyle::Outer,\n-        path: item.ident,\n+        path: item.path,\n         tokens: item.node.tokens(item.span),\n         is_sugared_doc: false,\n         span: sp,\n@@ -461,7 +461,7 @@ impl MetaItem {\n     fn tokens(&self) -> TokenStream {\n         let mut idents = vec![];\n         let mut last_pos = BytePos(0 as u32);\n-        for (i, segment) in self.ident.segments.iter().enumerate() {\n+        for (i, segment) in self.path.segments.iter().enumerate() {\n             let is_first = i == 0;\n             if !is_first {\n                 let mod_sep_span = Span::new(last_pos,\n@@ -481,7 +481,7 @@ impl MetaItem {\n         where I: Iterator<Item = TokenTree>,\n     {\n         // FIXME: Share code with `parse_path`.\n-        let ident = match tokens.next() {\n+        let path = match tokens.next() {\n             Some(TokenTree::Token(span, token @ Token::Ident(..))) |\n             Some(TokenTree::Token(span, token @ Token::ModSep)) => 'arm: {\n                 let mut segments = if let Token::Ident(ident, _) = token {\n@@ -522,11 +522,11 @@ impl MetaItem {\n         let node = MetaItemKind::from_tokens(tokens)?;\n         let hi = match node {\n             MetaItemKind::NameValue(ref lit) => lit.span.hi(),\n-            MetaItemKind::List(..) => list_closing_paren_pos.unwrap_or(ident.span.hi()),\n-            _ => ident.span.hi(),\n+            MetaItemKind::List(..) => list_closing_paren_pos.unwrap_or(path.span.hi()),\n+            _ => path.span.hi(),\n         };\n-        let span = ident.span.with_hi(hi);\n-        Some(MetaItem { ident, node, span })\n+        let span = path.span.with_hi(hi);\n+        Some(MetaItem { path, node, span })\n     }\n }\n "}, {"sha": "f64c49acd57e8e9efd0a4642f2922825ceb36ffe", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -929,7 +929,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = span.with_ctxt(self.cx.backtrace());\n                 let dummy = ast::MetaItem { // FIXME(jseyfried) avoid this\n-                    ident: Path::from_ident(keywords::Invalid.ident()),\n+                    path: Path::from_ident(keywords::Invalid.ident()),\n                     span: DUMMY_SP,\n                     node: ast::MetaItemKind::Word,\n                 };"}, {"sha": "355e7fec3c9aaf4e67d80adae26f221e647d52c1", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -548,7 +548,7 @@ pub fn noop_visit_meta_list_item<T: MutVisitor>(li: &mut NestedMetaItem, vis: &m\n }\n \n pub fn noop_visit_meta_item<T: MutVisitor>(mi: &mut MetaItem, vis: &mut T) {\n-    let MetaItem { ident: _, node, span } = mi;\n+    let MetaItem { path: _, node, span } = mi;\n     match node {\n         MetaItemKind::Word => {}\n         MetaItemKind::List(mis) => visit_vec(mis, |mi| vis.visit_meta_list_item(mi)),\n@@ -1340,4 +1340,3 @@ mod tests {\n         })\n     }\n }\n-"}, {"sha": "dfdeb21cb7495bd16575df6fb24547ab201d11bb", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -149,7 +149,7 @@ impl<'a> Parser<'a> {\n         };\n         Ok(if let Some(meta) = meta {\n             self.bump();\n-            (meta.ident, meta.node.tokens(meta.span))\n+            (meta.path, meta.node.tokens(meta.span))\n         } else {\n             let path = self.parse_path(PathStyle::Mod)?;\n             let tokens = if self.check(&token::OpenDelim(DelimToken::Paren)) ||\n@@ -250,10 +250,10 @@ impl<'a> Parser<'a> {\n         }\n \n         let lo = self.span;\n-        let ident = self.parse_path(PathStyle::Mod)?;\n+        let path = self.parse_path(PathStyle::Mod)?;\n         let node = self.parse_meta_item_kind()?;\n         let span = lo.to(self.prev_span);\n-        Ok(ast::MetaItem { ident, node, span })\n+        Ok(ast::MetaItem { path, node, span })\n     }\n \n     crate fn parse_meta_item_kind(&mut self) -> PResult<'a, ast::MetaItemKind> {"}, {"sha": "aa70c54a1ef8aacc9132ec6387aaa3bc2896eb2c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -2333,7 +2333,7 @@ impl<'a> Parser<'a> {\n         let meta_ident = match self.token {\n             token::Interpolated(ref nt) => match **nt {\n                 token::NtMeta(ref meta) => match meta.node {\n-                    ast::MetaItemKind::Word => Some(meta.ident.clone()),\n+                    ast::MetaItemKind::Word => Some(meta.path.clone()),\n                     _ => None,\n                 },\n                 _ => None,"}, {"sha": "0fb8de984a95cb0ef913543756b7b86c797d0b6c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -781,15 +781,15 @@ pub trait PrintState<'a> {\n     fn print_meta_item(&mut self, item: &ast::MetaItem) -> io::Result<()> {\n         self.ibox(INDENT_UNIT)?;\n         match item.node {\n-            ast::MetaItemKind::Word => self.print_attribute_path(&item.ident)?,\n+            ast::MetaItemKind::Word => self.print_attribute_path(&item.path)?,\n             ast::MetaItemKind::NameValue(ref value) => {\n-                self.print_attribute_path(&item.ident)?;\n+                self.print_attribute_path(&item.path)?;\n                 self.writer().space()?;\n                 self.word_space(\"=\")?;\n                 self.print_literal(value)?;\n             }\n             ast::MetaItemKind::List(ref items) => {\n-                self.print_attribute_path(&item.ident)?;\n+                self.print_attribute_path(&item.path)?;\n                 self.popen()?;\n                 self.commasep(Consistent,\n                               &items[..],"}, {"sha": "0c1a292a937db9a0187ee568d942b59aaef6ec3d", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63116d313dbc1e8f7f0fa4a729aea8e4f824b370/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=63116d313dbc1e8f7f0fa4a729aea8e4f824b370", "patch": "@@ -439,7 +439,7 @@ fn get_test_runner(sd: &errors::Handler, krate: &ast::Crate) -> Option<ast::Path\n                 \"#![test_runner(..)] accepts exactly 1 argument\").raise()\n         }\n         match meta_list[0].meta_item() {\n-            Some(meta_item) if meta_item.is_word() => meta_item.ident.clone(),\n+            Some(meta_item) if meta_item.is_word() => meta_item.path.clone(),\n             _ => sd.span_fatal(test_attr.span, \"`test_runner` argument must be a path\").raise()\n         }\n     })"}]}