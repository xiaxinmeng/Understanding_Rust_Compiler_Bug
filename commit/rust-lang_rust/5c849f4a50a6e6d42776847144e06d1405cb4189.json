{"sha": "5c849f4a50a6e6d42776847144e06d1405cb4189", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjODQ5ZjRhNTBhNmU2ZDQyNzc2ODQ3MTQ0ZTA2ZDE0MDVjYjQxODk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-23T22:51:56Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-08-25T06:27:25Z"}, "message": "Remove unnecessary 'Primitive' prefix on `PrimitiveType` enum variants.", "tree": {"sha": "246ffc29ee02252051e9e730d6f03bd07831ca1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/246ffc29ee02252051e9e730d6f03bd07831ca1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c849f4a50a6e6d42776847144e06d1405cb4189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c849f4a50a6e6d42776847144e06d1405cb4189", "html_url": "https://github.com/rust-lang/rust/commit/5c849f4a50a6e6d42776847144e06d1405cb4189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c849f4a50a6e6d42776847144e06d1405cb4189/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dde5639908263bb3348616438c59d184fb29530", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dde5639908263bb3348616438c59d184fb29530", "html_url": "https://github.com/rust-lang/rust/commit/9dde5639908263bb3348616438c59d184fb29530"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "093e6a2adadaec65bf28a326adb26797d3eaf9af", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c849f4a50a6e6d42776847144e06d1405cb4189/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c849f4a50a6e6d42776847144e06d1405cb4189/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5c849f4a50a6e6d42776847144e06d1405cb4189", "patch": "@@ -1485,8 +1485,8 @@ pub enum PrimitiveType {\n     Str,\n     Slice,\n     Array,\n-    PrimitiveTuple,\n-    PrimitiveRawPointer,\n+    Tuple,\n+    RawPointer,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n@@ -1520,8 +1520,8 @@ impl Type {\n             FixedVector(..) | BorrowedRef { type_: box FixedVector(..), .. } => {\n                 Some(PrimitiveType::Array)\n             }\n-            Tuple(..) => Some(PrimitiveType::PrimitiveTuple),\n-            RawPointer(..) => Some(PrimitiveType::PrimitiveRawPointer),\n+            Tuple(..) => Some(PrimitiveType::Tuple),\n+            RawPointer(..) => Some(PrimitiveType::RawPointer),\n             _ => None,\n         }\n     }\n@@ -1563,8 +1563,8 @@ impl PrimitiveType {\n             \"f64\" => Some(PrimitiveType::F64),\n             \"array\" => Some(PrimitiveType::Array),\n             \"slice\" => Some(PrimitiveType::Slice),\n-            \"tuple\" => Some(PrimitiveType::PrimitiveTuple),\n-            \"pointer\" => Some(PrimitiveType::PrimitiveRawPointer),\n+            \"tuple\" => Some(PrimitiveType::Tuple),\n+            \"pointer\" => Some(PrimitiveType::RawPointer),\n             _ => None,\n         }\n     }\n@@ -1601,8 +1601,8 @@ impl PrimitiveType {\n             PrimitiveType::Char => \"char\",\n             PrimitiveType::Array => \"array\",\n             PrimitiveType::Slice => \"slice\",\n-            PrimitiveType::PrimitiveTuple => \"tuple\",\n-            PrimitiveType::PrimitiveRawPointer => \"pointer\",\n+            PrimitiveType::Tuple => \"tuple\",\n+            PrimitiveType::RawPointer => \"pointer\",\n         }\n     }\n \n@@ -2454,8 +2454,8 @@ fn build_deref_target_impls(cx: &DocContext,\n             PrimitiveType::Str => tcx.lang_items.str_impl(),\n             PrimitiveType::Slice => tcx.lang_items.slice_impl(),\n             PrimitiveType::Array => tcx.lang_items.slice_impl(),\n-            PrimitiveType::PrimitiveTuple => None,\n-            PrimitiveType::PrimitiveRawPointer => tcx.lang_items.const_ptr_impl(),\n+            PrimitiveType::Tuple => None,\n+            PrimitiveType::RawPointer => tcx.lang_items.const_ptr_impl(),\n         };\n         if let Some(did) = did {\n             if !did.is_local() {"}, {"sha": "65992798ab0995382ef32a4457c53e42347c00a6", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c849f4a50a6e6d42776847144e06d1405cb4189/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c849f4a50a6e6d42776847144e06d1405cb4189/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5c849f4a50a6e6d42776847144e06d1405cb4189", "patch": "@@ -468,16 +468,16 @@ impl fmt::Display for clean::Type {\n             }\n             clean::Tuple(ref typs) => {\n                 match &typs[..] {\n-                    &[] => primitive_link(f, PrimitiveType::PrimitiveTuple, \"()\"),\n+                    &[] => primitive_link(f, PrimitiveType::Tuple, \"()\"),\n                     &[ref one] => {\n-                        primitive_link(f, PrimitiveType::PrimitiveTuple, \"(\")?;\n+                        primitive_link(f, PrimitiveType::Tuple, \"(\")?;\n                         write!(f, \"{},\", one)?;\n-                        primitive_link(f, PrimitiveType::PrimitiveTuple, \")\")\n+                        primitive_link(f, PrimitiveType::Tuple, \")\")\n                     }\n                     many => {\n-                        primitive_link(f, PrimitiveType::PrimitiveTuple, \"(\")?;\n+                        primitive_link(f, PrimitiveType::Tuple, \"(\")?;\n                         write!(f, \"{}\", CommaSep(&many))?;\n-                        primitive_link(f, PrimitiveType::PrimitiveTuple, \")\")\n+                        primitive_link(f, PrimitiveType::Tuple, \")\")\n                     }\n                 }\n             }\n@@ -496,11 +496,11 @@ impl fmt::Display for clean::Type {\n             clean::RawPointer(m, ref t) => {\n                 match **t {\n                     clean::Generic(_) | clean::ResolvedPath {is_generic: true, ..} => {\n-                        primitive_link(f, clean::PrimitiveType::PrimitiveRawPointer,\n+                        primitive_link(f, clean::PrimitiveType::RawPointer,\n                                        &format!(\"*{}{}\", RawMutableSpace(m), t))\n                     }\n                     _ => {\n-                        primitive_link(f, clean::PrimitiveType::PrimitiveRawPointer,\n+                        primitive_link(f, clean::PrimitiveType::RawPointer,\n                                        &format!(\"*{}\", RawMutableSpace(m)))?;\n                         write!(f, \"{}\", t)\n                     }"}]}