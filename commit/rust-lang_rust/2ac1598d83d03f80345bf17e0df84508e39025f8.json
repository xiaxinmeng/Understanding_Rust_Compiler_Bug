{"sha": "2ac1598d83d03f80345bf17e0df84508e39025f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYzE1OThkODNkMDNmODAzNDViZjE3ZTBkZjg0NTA4ZTM5MDI1Zjg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-11T11:16:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-11T11:16:04Z"}, "message": "Rollup merge of #73172 - matthiaskrgr:cl9ppy, r=Dylan-DPC\n\nFix more clippy warnings\n\nFixes more of:\n\nclippy::unused_unit\nclippy::op_ref\nclippy::useless_format\nclippy::needless_return\nclippy::useless_conversion\nclippy::bind_instead_of_map\nclippy::into_iter_on_ref\nclippy::redundant_clone\nclippy::nonminimal_bool\nclippy::redundant_closure\nclippy::option_as_ref_deref\nclippy::len_zero\nclippy::iter_cloned_collect\nclippy::filter_next\n\nr? @Dylan-DPC", "tree": {"sha": "9e494b80683b0e58aaa30c6012cfa380bb0cef04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e494b80683b0e58aaa30c6012cfa380bb0cef04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ac1598d83d03f80345bf17e0df84508e39025f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe4hJ1CRBK7hj4Ov3rIwAAdHIIAKrtGOEN9KaLQfjChpMIZHW3\n+Ntr86Z2jTbKIWYj/TuIezYPly0NkR5U8lFJeJ7pup6dtExn6oBZG7Dxd8nVMzIn\nP05Ghl+T9UWkNWk8eGcho8vPau6l5U0C3oQqWK5O7a9oQ+jzZkDisrMXS1EdLt9N\n28RpEplmENzs5iiv/V5CCWH9EE8GNXvYBaC7DbPV6q/y/Mf5SCm9WpfCmA8GmOuV\n6FMeQVOz2sNNo9Q8XZT2bWv+NK/Ikp1v0jSnr2jbebTq2NgN2o6Y+BE5OsES2H3L\nxpoZrp4fUSEE4MSkYvhocbD6tqZRBxR/l3WXCWHT269AoKxhQvtnvyO/LANLm/c=\n=Hftp\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e494b80683b0e58aaa30c6012cfa380bb0cef04\nparent 70c14c2d43de82251697b88e431599c8f02f9e27\nparent 58023fedfc51efec1888c507617f41bde28b7da3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591874164 +0200\ncommitter GitHub <noreply@github.com> 1591874164 +0200\n\nRollup merge of #73172 - matthiaskrgr:cl9ppy, r=Dylan-DPC\n\nFix more clippy warnings\n\nFixes more of:\n\nclippy::unused_unit\nclippy::op_ref\nclippy::useless_format\nclippy::needless_return\nclippy::useless_conversion\nclippy::bind_instead_of_map\nclippy::into_iter_on_ref\nclippy::redundant_clone\nclippy::nonminimal_bool\nclippy::redundant_closure\nclippy::option_as_ref_deref\nclippy::len_zero\nclippy::iter_cloned_collect\nclippy::filter_next\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac1598d83d03f80345bf17e0df84508e39025f8", "html_url": "https://github.com/rust-lang/rust/commit/2ac1598d83d03f80345bf17e0df84508e39025f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ac1598d83d03f80345bf17e0df84508e39025f8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70c14c2d43de82251697b88e431599c8f02f9e27", "url": "https://api.github.com/repos/rust-lang/rust/commits/70c14c2d43de82251697b88e431599c8f02f9e27", "html_url": "https://github.com/rust-lang/rust/commit/70c14c2d43de82251697b88e431599c8f02f9e27"}, {"sha": "58023fedfc51efec1888c507617f41bde28b7da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/58023fedfc51efec1888c507617f41bde28b7da3", "html_url": "https://github.com/rust-lang/rust/commit/58023fedfc51efec1888c507617f41bde28b7da3"}], "stats": {"total": 59, "additions": 25, "deletions": 34}, "files": [{"sha": "15ae12ebf10e3ac7a2d913f2410d360cae70ea71", "filename": "src/librustc_ast/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_ast%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_ast%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftokenstream.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -392,7 +392,7 @@ impl TokenStream {\n                         break;\n                     }\n                 }\n-                token_trees = out.into_iter().map(|t| TokenTree::Token(t)).collect();\n+                token_trees = out.into_iter().map(TokenTree::Token).collect();\n                 if token_trees.len() != 1 {\n                     debug!(\"break_tokens: broke {:?} to {:?}\", tree, token_trees);\n                 }"}, {"sha": "79d16a318d21be92b4ee55a2644529de8700c0ba", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -1237,10 +1237,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                                             ) => {\n                                                 assert!(!*late);\n                                                 let out_op_sp = if input { op_sp2 } else { op_sp };\n-                                                let msg = &format!(\n-                                                    \"use `lateout` instead of \\\n-                                                     `out` to avoid conflict\"\n-                                                );\n+                                                let msg = \"use `lateout` instead of \\\n+                                                     `out` to avoid conflict\";\n                                                 err.span_help(out_op_sp, msg);\n                                             }\n                                             _ => {}"}, {"sha": "6127fcc5a4bee17210d1ada8fa2c4b12169a7abd", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -457,7 +457,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n \n                 let mut chars = arg.format.ty.chars();\n                 let mut modifier = chars.next();\n-                if !chars.next().is_none() {\n+                if chars.next().is_some() {\n                     let span = arg\n                         .format\n                         .ty_span"}, {"sha": "11ec62f96ed38d60179f5c37c357ab74eee9f954", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -63,7 +63,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     .tcx()\n                     .destructure_const(ty::ParamEnv::reveal_all().and(&c))\n                     .fields\n-                    .into_iter()\n+                    .iter()\n                     .map(|field| {\n                         if let Some(prim) = field.val.try_to_scalar() {\n                             let layout = bx.layout_of(field_ty);"}, {"sha": "265ba59cccb2aff70a7ce6449b179805909a3bad", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -159,14 +159,10 @@ impl AnnotateSnippetEmitterWriter {\n                             // FIXME(#59346): Not really sure when `fold` should be true or false\n                             fold: false,\n                             annotations: annotations\n-                                .into_iter()\n+                                .iter()\n                                 .map(|annotation| SourceAnnotation {\n                                     range: (annotation.start_col, annotation.end_col),\n-                                    label: annotation\n-                                        .label\n-                                        .as_ref()\n-                                        .map(|s| s.as_str())\n-                                        .unwrap_or_default(),\n+                                    label: annotation.label.as_deref().unwrap_or_default(),\n                                     annotation_type: annotation_type_for_level(*level),\n                                 })\n                                 .collect(),"}, {"sha": "81cb306d26444da71bb248e35fcf1ca88e53505a", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let error_code = error_code.into();\n         let mut err = self.tcx.sess.struct_span_err_with_code(\n             local_visitor.target_span,\n-            &format!(\"type annotations needed\"),\n+            \"type annotations needed\",\n             error_code,\n         );\n "}, {"sha": "45aee2b39654d197a5814be79114601d0ac76614", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -77,8 +77,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n             _ => {}\n         }\n-        let mut type_param_span: MultiSpan =\n-            visitor.types.iter().cloned().collect::<Vec<_>>().into();\n+        let mut type_param_span: MultiSpan = visitor.types.to_vec().into();\n         for &span in &visitor.types {\n             type_param_span.push_span_label(\n                 span,"}, {"sha": "200e7acf802353f98efdb6f4793085605bef043b", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -187,9 +187,9 @@ pub fn strip_shebang(input: &str) -> Option<usize> {\n             // Ok, this is a shebang but if the next non-whitespace token is `[` or maybe\n             // a doc comment (due to `TokenKind::(Line,Block)Comment` ambiguity at lexer level),\n             // then it may be valid Rust code, so consider it Rust code.\n-            let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).filter(|tok|\n+            let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok|\n                 !matches!(tok, TokenKind::Whitespace | TokenKind::LineComment | TokenKind::BlockComment { .. })\n-            ).next();\n+            );\n             if next_non_whitespace_token != Some(TokenKind::OpenBracket) {\n                 // No other choice than to consider this a shebang.\n                 return Some(2 + first_line_tail.len());"}, {"sha": "2c0a40b4c543c8e146b94b422827a66667a081e1", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -309,9 +309,7 @@ pub fn const_eval_raw_provider<'tcx>(\n \n     let res = ecx.load_mir(cid.instance.def, cid.promoted);\n     res.and_then(|body| eval_body_using_ecx(&mut ecx, cid, &body))\n-        .and_then(|place| {\n-            Ok(RawConst { alloc_id: place.ptr.assert_ptr().alloc_id, ty: place.layout.ty })\n-        })\n+        .map(|place| RawConst { alloc_id: place.ptr.assert_ptr().alloc_id, ty: place.layout.ty })\n         .map_err(|error| {\n             let err = error_to_const_error(&ecx, error);\n             // errors in statics are always emitted as fatal errors"}, {"sha": "043b2d0d1703e260977a00f8627cfee836021342", "filename": "src/librustc_mir/transform/check_packed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_packed_ref.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PackedRefChecker<'a, 'tcx> {\n                     lint_root,\n                     source_info.span,\n                     |lint| {\n-                        lint.build(&format!(\"reference to packed field is unaligned\",))\n+                        lint.build(\"reference to packed field is unaligned\")\n                             .note(\n                                 \"fields of packed structs are not properly aligned, and creating \\\n                                 a misaligned reference is undefined behavior (even if that \\"}, {"sha": "1f3d7bb7cc6f41c2ab16dcf425667893c323462f", "filename": "src/librustc_mir/transform/nrvo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_mir%2Ftransform%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_mir%2Ftransform%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnrvo.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -111,7 +111,7 @@ fn local_eligible_for_nrvo(body: &mut mir::Body<'_>) -> Option<Local> {\n         copied_to_return_place = Some(returned_local);\n     }\n \n-    return copied_to_return_place;\n+    copied_to_return_place\n }\n \n fn find_local_assigned_to_return_place(\n@@ -136,7 +136,7 @@ fn find_local_assigned_to_return_place(\n         }\n     }\n \n-    return None;\n+    None\n }\n \n // If this statement is an assignment of an unprojected local to the return place,"}, {"sha": "61f9c281559b70f8cdbb034fa991c5c7cd33e02c", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -99,7 +99,7 @@ fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmId\n     fn try_eat<'a, 'tcx>(\n         stmt_iter: &mut StmtIter<'a, 'tcx>,\n         test: impl Fn(&'a Statement<'tcx>) -> bool,\n-        mut action: impl FnMut(usize, &'a Statement<'tcx>) -> (),\n+        mut action: impl FnMut(usize, &'a Statement<'tcx>),\n     ) {\n         while stmt_iter.peek().map(|(_, stmt)| test(stmt)).unwrap_or(false) {\n             let (idx, stmt) = stmt_iter.next().unwrap();\n@@ -271,7 +271,7 @@ fn optimization_applies<'tcx>(\n     }\n \n     // Verify the assigment chain consists of the form b = a; c = b; d = c; etc...\n-    if opt_info.field_tmp_assignments.len() == 0 {\n+    if opt_info.field_tmp_assignments.is_empty() {\n         trace!(\"NO: no assignments found\");\n     }\n     let mut last_assigned_to = opt_info.field_tmp_assignments[0].1;"}, {"sha": "84b3335a0f628d7f865ed736c60de8ca06814369", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -409,7 +409,7 @@ impl<'a> StringReader<'a> {\n         let content_end = suffix_start - BytePos(postfix_len);\n         let id = self.symbol_from_to(content_start, content_end);\n         self.validate_literal_escape(mode, content_start, content_end);\n-        return (lit_kind, id);\n+        (lit_kind, id)\n     }\n \n     pub fn pos(&self) -> BytePos {"}, {"sha": "8792605c08d38a4092f15fdffe5c258f282af0b6", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -936,7 +936,7 @@ impl<'a> Parser<'a> {\n         } else if !sm.is_multiline(self.prev_token.span.until(self.token.span)) {\n             // The current token is in the same line as the prior token, not recoverable.\n         } else if [token::Comma, token::Colon].contains(&self.token.kind)\n-            && &self.prev_token.kind == &token::CloseDelim(token::Paren)\n+            && self.prev_token.kind == token::CloseDelim(token::Paren)\n         {\n             // Likely typo: The current token is on a new line and is expected to be\n             // `.`, `;`, `?`, or an operator after a close delimiter token."}, {"sha": "47ae92c48bd88dce1277adb8d348326d69646aba", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -193,7 +193,7 @@ impl TokenCursor {\n                         tree,\n                         self.stack.len()\n                     );\n-                    collecting.buf.push(tree.clone().into())\n+                    collecting.buf.push(tree.clone())\n                 }\n             }\n \n@@ -675,7 +675,7 @@ impl<'a> Parser<'a> {\n                             // If this was a missing `@` in a binding pattern\n                             // bail with a suggestion\n                             // https://github.com/rust-lang/rust/issues/72373\n-                            if self.prev_token.is_ident() && &self.token.kind == &token::DotDot {\n+                            if self.prev_token.is_ident() && self.token.kind == token::DotDot {\n                                 let msg = format!(\n                                     \"if you meant to bind the contents of \\\n                                     the rest of the array pattern into `{}`, use `@`\",\n@@ -1193,7 +1193,7 @@ impl<'a> Parser<'a> {\n         let mut collected_tokens = if let Some(collecting) = self.token_cursor.collecting.take() {\n             collecting.buf\n         } else {\n-            let msg = format!(\"our vector went away?\");\n+            let msg = \"our vector went away?\";\n             debug!(\"collect_tokens: {}\", msg);\n             self.sess.span_diagnostic.delay_span_bug(self.token.span, &msg);\n             // This can happen due to a bad interaction of two unrelated recovery mechanisms"}, {"sha": "e2bfcf18edb1731fe219a58b2d22bac0f7c12f48", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -232,7 +232,7 @@ impl ExprVisitor<'tcx> {\n         // size).\n         if let Some((in_expr, Some(in_asm_ty))) = tied_input {\n             if in_asm_ty != asm_ty {\n-                let msg = &format!(\"incompatible types for asm inout argument\");\n+                let msg = \"incompatible types for asm inout argument\";\n                 let mut err = self.tcx.sess.struct_span_err(vec![in_expr.span, expr.span], msg);\n                 err.span_label(\n                     in_expr.span,"}, {"sha": "f0900c34a4ba3dbcab473d92f4a3c8e25b85e986", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -126,7 +126,7 @@ impl<'a> SourceCollector<'a> {\n             &self.scx.themes,\n         );\n         self.scx.fs.write(&cur, v.as_bytes())?;\n-        self.scx.local_sources.insert(p.clone(), href);\n+        self.scx.local_sources.insert(p, href);\n         Ok(())\n     }\n }"}, {"sha": "ede48f7eed4512ac4b6248eebc7a259b259603be", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac1598d83d03f80345bf17e0df84508e39025f8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=2ac1598d83d03f80345bf17e0df84508e39025f8", "patch": "@@ -451,7 +451,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n                             ..\n                         },\n                     ..\n-                })) => segments.first().and_then(|seg| Some(seg.ident.to_string())),\n+                })) => segments.first().map(|seg| seg.ident.to_string()),\n                 Some(hir::Node::Item(hir::Item {\n                     ident, kind: hir::ItemKind::Enum(..), ..\n                 }))"}]}