{"sha": "c1bcf5c54833707518d1403f49030605edc39497", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYmNmNWM1NDgzMzcwNzUxOGQxNDAzZjQ5MDMwNjA1ZWRjMzk0OTc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-09-06T10:21:47Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-09-09T17:57:03Z"}, "message": "Add -Z panic-in-drop={unwind,abort} command-line option", "tree": {"sha": "627c9876d97cca2191aa2bc4dee26b6406bcb3da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/627c9876d97cca2191aa2bc4dee26b6406bcb3da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1bcf5c54833707518d1403f49030605edc39497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1bcf5c54833707518d1403f49030605edc39497", "html_url": "https://github.com/rust-lang/rust/commit/c1bcf5c54833707518d1403f49030605edc39497", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1bcf5c54833707518d1403f49030605edc39497/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497ee321af3b8496eaccd7af7b437f18bab81abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/497ee321af3b8496eaccd7af7b437f18bab81abf", "html_url": "https://github.com/rust-lang/rust/commit/497ee321af3b8496eaccd7af7b437f18bab81abf"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "81433e571021ea94aaceaed02a1bc0680a7c2598", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1bcf5c54833707518d1403f49030605edc39497/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bcf5c54833707518d1403f49030605edc39497/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=c1bcf5c54833707518d1403f49030605edc39497", "patch": "@@ -743,6 +743,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(no_profiler_runtime, true);\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);\n+    tracked!(panic_in_drop, PanicStrategy::Abort);\n     tracked!(partially_uninit_const_threshold, Some(123));\n     tracked!(plt, Some(true));\n     tracked!(polonius, true);"}, {"sha": "a82a2bef0b4abfe18347e59ed6d41bd5c9c97ff2", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1bcf5c54833707518d1403f49030605edc39497/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bcf5c54833707518d1403f49030605edc39497/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=c1bcf5c54833707518d1403f49030605edc39497", "patch": "@@ -349,6 +349,7 @@ mod desc {\n     pub const parse_threads: &str = parse_number;\n     pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n     pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n+    pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n     pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n     pub const parse_sanitizers: &str =\n         \"comma separated list of sanitizers: `address`, `hwaddress`, `leak`, `memory` or `thread`\";\n@@ -549,7 +550,7 @@ mod parse {\n         }\n     }\n \n-    crate fn parse_panic_strategy(slot: &mut Option<PanicStrategy>, v: Option<&str>) -> bool {\n+    crate fn parse_opt_panic_strategy(slot: &mut Option<PanicStrategy>, v: Option<&str>) -> bool {\n         match v {\n             Some(\"unwind\") => *slot = Some(PanicStrategy::Unwind),\n             Some(\"abort\") => *slot = Some(PanicStrategy::Abort),\n@@ -558,6 +559,15 @@ mod parse {\n         true\n     }\n \n+    crate fn parse_panic_strategy(slot: &mut PanicStrategy, v: Option<&str>) -> bool {\n+        match v {\n+            Some(\"unwind\") => *slot = PanicStrategy::Unwind,\n+            Some(\"abort\") => *slot = PanicStrategy::Abort,\n+            _ => return false,\n+        }\n+        true\n+    }\n+\n     crate fn parse_relro_level(slot: &mut Option<RelroLevel>, v: Option<&str>) -> bool {\n         match v {\n             Some(s) => match s.parse::<RelroLevel>() {\n@@ -958,7 +968,7 @@ options! {\n         \"optimization level (0-3, s, or z; default: 0)\"),\n     overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"use overflow checks for integer arithmetic\"),\n-    panic: Option<PanicStrategy> = (None, parse_panic_strategy, [TRACKED],\n+    panic: Option<PanicStrategy> = (None, parse_opt_panic_strategy, [TRACKED],\n         \"panic strategy to compile crate with\"),\n     passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of extra LLVM passes to run (space separated)\"),\n@@ -1184,6 +1194,8 @@ options! {\n         \"pass `-install_name @rpath/...` to the macOS linker (default: no)\"),\n     panic_abort_tests: bool = (false, parse_bool, [TRACKED],\n         \"support compiling tests with panic=abort (default: no)\"),\n+    panic_in_drop: PanicStrategy = (PanicStrategy::Unwind, parse_panic_strategy, [TRACKED],\n+        \"panic strategy for panics in drops\"),\n     parse_only: bool = (false, parse_bool, [UNTRACKED],\n         \"parse only; do not compile, assemble, or link (default: no)\"),\n     partially_uninit_const_threshold: Option<usize> = (None, parse_opt_number, [TRACKED],"}]}