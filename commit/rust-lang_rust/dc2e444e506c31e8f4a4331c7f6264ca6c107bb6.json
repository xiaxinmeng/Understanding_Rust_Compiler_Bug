{"sha": "dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMmU0NDRlNTA2YzMxZThmNGE0MzMxYzdmNjI2NGNhNmMxMDdiYjY=", "commit": {"author": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2015-02-05T04:00:02Z"}, "committer": {"name": "Joseph Crail", "email": "jbcrail@gmail.com", "date": "2015-02-05T04:00:02Z"}, "message": "Fix for misspelled comments.\n\nThe spelling corrections were made in both documentation comments and\nregular comments.", "tree": {"sha": "eee7ee05c474531329e04db0cce74ae2d87422fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eee7ee05c474531329e04db0cce74ae2d87422fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "html_url": "https://github.com/rust-lang/rust/commit/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/comments", "author": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbcrail", "id": 6038, "node_id": "MDQ6VXNlcjYwMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbcrail", "html_url": "https://github.com/jbcrail", "followers_url": "https://api.github.com/users/jbcrail/followers", "following_url": "https://api.github.com/users/jbcrail/following{/other_user}", "gists_url": "https://api.github.com/users/jbcrail/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbcrail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbcrail/subscriptions", "organizations_url": "https://api.github.com/users/jbcrail/orgs", "repos_url": "https://api.github.com/users/jbcrail/repos", "events_url": "https://api.github.com/users/jbcrail/events{/privacy}", "received_events_url": "https://api.github.com/users/jbcrail/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96", "html_url": "https://github.com/rust-lang/rust/commit/ba2f13ef0667ce90f55ab0f1506bf5ee7b852d96"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "3b5aa085e055a782b972aeb89cdf38fe2a319e40", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -523,7 +523,7 @@ fn print<'a>(s: &'a str); // expanded\n fn debug(lvl: u32, s: &str); // elided\n fn debug<'a>(lvl: u32, s: &'a str); // expanded\n \n-// In the preceeding example, `lvl` doesn't need a lifetime because it's not a\n+// In the preceding example, `lvl` doesn't need a lifetime because it's not a\n // reference (`&`). Only things relating to references (such as a `struct`\n // which contains a reference) need lifetimes.\n "}, {"sha": "d3d3a2b997c994a2786880e82703f50462630cd2", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -1195,7 +1195,7 @@ maybe_stmts\n //\n // There are also two other expr subtypes: first, nonparen_expr\n // disallows exprs surrounded by parens (including tuple expressions),\n-// this is neccesary for BOX (place) expressions, so a parens expr\n+// this is necessary for BOX (place) expressions, so a parens expr\n // following the BOX is always parsed as the place. There is also\n // expr_norange used in index_expr, which disallows '..' in\n // expressions as that has special meaning inside of brackets."}, {"sha": "24b4abbff4ae26527c8785993b219819d0e59c9c", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -311,7 +311,7 @@ impl<T: Sync + Send> Drop for Arc<T> {\n     ///\n     ///     // stuff\n     ///\n-    ///     drop(five); // explict drop\n+    ///     drop(five); // explicit drop\n     /// }\n     /// {\n     ///     let five = Arc::new(5);\n@@ -441,7 +441,7 @@ impl<T: Sync + Send> Drop for Weak<T> {\n     ///\n     ///     // stuff\n     ///\n-    ///     drop(weak_five); // explict drop\n+    ///     drop(weak_five); // explicit drop\n     /// }\n     /// {\n     ///     let five = Arc::new(5);"}, {"sha": "ed7a2832f7a107f4bb5ee224cf2b31f6675dc142", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -382,7 +382,7 @@ impl<T> Drop for Rc<T> {\n     ///\n     ///     // stuff\n     ///\n-    ///     drop(five); // explict drop\n+    ///     drop(five); // explicit drop\n     /// }\n     /// {\n     ///     let five = Rc::new(5);\n@@ -687,7 +687,7 @@ impl<T> Drop for Weak<T> {\n     ///\n     ///     // stuff\n     ///\n-    ///     drop(weak_five); // explict drop\n+    ///     drop(weak_five); // explicit drop\n     /// }\n     /// {\n     ///     let five = Rc::new(5);"}, {"sha": "7f6eee343b90be1933edb9678846f33df45d14fb", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -669,7 +669,7 @@ impl<'a, K: 'a, V: 'a> Handle<&'a mut Node<K, V>, handle::Edge, handle::Internal\n \n impl<K, V, NodeRef: Deref<Target=Node<K, V>>> Handle<NodeRef, handle::Edge, handle::Internal> {\n     // This doesn't exist because there are no uses for it,\n-    // but is fine to add, analagous to edge_mut.\n+    // but is fine to add, analogous to edge_mut.\n     //\n     // /// Returns a reference to the edge pointed-to by this handle. This should not be\n     // /// confused with `node`, which references the parent node of what is returned here."}, {"sha": "f3b42e4f0a5775db7c8c6d0deca663e3b368a59f", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -260,7 +260,7 @@ pub trait IteratorExt: Iterator + Sized {\n     }\n \n     /// Creates an iterator that applies the predicate to each element returned\n-    /// by this iterator. The only elements that will be yieled are those that\n+    /// by this iterator. The only elements that will be yielded are those that\n     /// make the predicate evaluate to `true`.\n     ///\n     /// # Examples"}, {"sha": "a808b417b4c6b29768ac9b894bf39cee5871725f", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -14,9 +14,9 @@ register_long_diagnostics! {\n     E0001: r##\"\n     This error suggests that the expression arm corresponding to the noted pattern\n     will never be reached as for all possible values of the expression being matched,\n-    one of the preceeding patterns will match.\n+    one of the preceding patterns will match.\n \n-    This means that perhaps some of the preceeding patterns are too general, this\n+    This means that perhaps some of the preceding patterns are too general, this\n     one is too specific or the ordering is incorrect.\n \"##,\n "}, {"sha": "709f714eb6725e33da23f64ae700d7607bd2f916", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -775,7 +775,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                      -> bool\n     {\n         // In general, it's a good idea to cache results, even\n-        // ambigious ones, to save us some trouble later. But we have\n+        // ambiguous ones, to save us some trouble later. But we have\n         // to be careful not to cache results that could be\n         // invalidated later by advances in inference. Normally, this\n         // is not an issue, because any inference variables whose\n@@ -1273,7 +1273,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ///\n     /// - The impl is conditional, in which case we may not have winnowed it out\n     ///   because we don't know if the conditions apply, but the where clause is basically\n-    ///   telling us taht there is some impl, though not necessarily the one we see.\n+    ///   telling us that there is some impl, though not necessarily the one we see.\n     ///\n     /// In both cases we prefer to take the where clause, which is\n     /// essentially harmless.  See issue #18453 for more details of"}, {"sha": "3c5edd166bbfa04fae1d3b27b1e16e7aa96b4f9b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -2520,7 +2520,7 @@ impl FlagComputation {\n     fn add_bound_computation(&mut self, computation: &FlagComputation) {\n         self.add_flags(computation.flags);\n \n-        // The types that contributed to `computation` occured within\n+        // The types that contributed to `computation` occurred within\n         // a region binder, so subtract one from the region depth\n         // within when adding the depth to `self`.\n         let depth = computation.depth;"}, {"sha": "682a5f2f5ace6d28232772f48d0bca01baac3f2a", "filename": "src/librustc_borrowck/borrowck/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_borrowck%2Fborrowck%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_borrowck%2Fborrowck%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fdoc.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -142,7 +142,7 @@\n //! which contains an empty set of actions, still has a purpose---it\n //! prevents moves from `LV`. I chose not to make `MOVE` a fourth kind of\n //! action because that would imply that sometimes moves are permitted\n-//! from restrictived values, which is not the case.\n+//! from restricted values, which is not the case.\n //!\n //! #### Example\n //!"}, {"sha": "d1326ab8d7bacd84011d19cab5326619891f60c5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -171,7 +171,7 @@ pub fn source_name(input: &Input) -> String {\n /// CompileController is used to customise compilation, it allows compilation to\n /// be stopped and/or to call arbitrary code at various points in compilation.\n /// It also allows for various flags to be set to influence what information gets\n-/// colelcted during compilation.\n+/// collected during compilation.\n ///\n /// This is a somewhat higher level controller than a Session - the Session\n /// controls what happens in each phase, whereas the CompileController controls"}, {"sha": "7b6ee3a729776161c6b038a5c42f689324eb2d82", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -20,7 +20,7 @@ register_diagnostics! {\n     E0254, // import conflicts with imported crate in this module\n     E0255, // import conflicts with value in this module\n     E0256, // import conflicts with type in this module\n-    E0257, // inherent implementations are only allowen on types defined in the current module\n+    E0257, // inherent implementations are only allowed on types defined in the current module\n     E0258, // import conflicts with existing submodule\n     E0259, // an extern crate has already been imported into this module\n     E0260 // name conflicts with an external crate that has been imported into this module"}, {"sha": "d9769e04fb13b686fc560bd04d9e66fa30cb8d7f", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -365,7 +365,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         (_, \"init\") => {\n             let tp_ty = *substs.types.get(FnSpace, 0);\n             if !return_type_is_void(ccx, tp_ty) {\n-                // Just zero out the stack slot. (See comment on base::memzero for explaination)\n+                // Just zero out the stack slot. (See comment on base::memzero for explanation)\n                 zero_mem(bcx, llresult, tp_ty);\n             }\n             C_nil(ccx)"}, {"sha": "a5b938c7600c2c5eee6d7042fa9aa030eef5b609", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -159,11 +159,11 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     // vs 'b).  However, the normal subtyping rules on fn types handle\n     // this kind of equivalency just fine.\n     //\n-    // We now use these subsititions to ensure that all declared bounds are\n+    // We now use these substitutions to ensure that all declared bounds are\n     // satisfied by the implementation's method.\n     //\n     // We do this by creating a parameter environment which contains a\n-    // substition corresponding to impl_to_skol_substs. We then build\n+    // substitution corresponding to impl_to_skol_substs. We then build\n     // trait_to_skol_substs and use it to convert the predicates contained\n     // in the trait_m.generics to the skolemized form.\n     //"}, {"sha": "a3d32e8b3889effd4aad781c120806e970489175", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -288,7 +288,7 @@ pub fn select_all_fcx_obligations_and_apply_defaults(fcx: &FnCtxt) {\n pub fn select_all_fcx_obligations_or_error(fcx: &FnCtxt) {\n     debug!(\"select_all_fcx_obligations_or_error\");\n \n-    // upvar inference should have ensured that all deferrred call\n+    // upvar inference should have ensured that all deferred call\n     // resolutions are handled by now.\n     assert!(fcx.inh.deferred_call_resolutions.borrow().is_empty());\n "}, {"sha": "17cf92d39d8f542d332f7fab010e401280c7f3fd", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -108,7 +108,7 @@ register_diagnostics! {\n     E0189, // can only cast a boxed pointer to a boxed object\n     E0190, // can only cast a &-pointer to an &-object\n     E0191, // value of the associated type must be specified\n-    E0192, // negative imples are allowed just fo `Send` and `Sync`\n+    E0192, // negative imples are allowed just for `Send` and `Sync`\n     E0193, // cannot bound type where clause bounds may only be attached to types\n            // involving type parameters\n     E0194,\n@@ -119,7 +119,7 @@ register_diagnostics! {\n     E0199, // implementing trait is not unsafe\n     E0200, // trait requires an `unsafe impl` declaration\n     E0201, // duplicate method in trait impl\n-    E0202, // associated items are not allowed in inherint impls\n+    E0202, // associated items are not allowed in inherent impls\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported\n     E0204, // trait `Copy` may not be implemented for this type; field"}, {"sha": "6e6454221113313be90ec1c63c2c9c6c1232cf81", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -313,7 +313,7 @@\n //!\n //! assert_eq!(count.get(&'s'), Some(&8));\n //!\n-//! println!(\"Number of occurences of each character\");\n+//! println!(\"Number of occurrences of each character\");\n //! for (char, count) in count.iter() {\n //!     println!(\"{}: {}\", char, count);\n //! }"}, {"sha": "7ff25d1a1fea17d409e8282a13ff3efd3c4bee41", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -337,7 +337,7 @@ pub fn temp_dir() -> Path {\n ///\n /// # Errors\n ///\n-/// Acquring the path to the current executable is a platform-specific operation\n+/// Acquiring the path to the current executable is a platform-specific operation\n /// that can fail for a good number of reasons. Some errors can include, but not\n /// be limited to filesystem operations failing or general syscall failures.\n ///"}, {"sha": "f931e6a377387c0990c442b9e472003dc4235f1f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -97,7 +97,7 @@ fn with_end_to_cap<F>(v: &mut Vec<u8>, f: F) -> Result<usize>\n //\n // To this end, we use an RAII guard (to protect against panics) which updates\n // the length of the string when it is dropped. This guard initially truncates\n-// the string to the prior length and only afer we've validated that the\n+// the string to the prior length and only after we've validated that the\n // new contents are valid UTF-8 do we allow it to set a longer length.\n //\n // The unsafety in this function is twofold:\n@@ -664,7 +664,7 @@ impl<T> Take<T> {\n     ///\n     /// # Note\n     ///\n-    /// This instance may reach EOF after reading fewer bytes than indiccated by\n+    /// This instance may reach EOF after reading fewer bytes than indicated by\n     /// this method if the underlying `Read` instance reaches EOF.\n     pub fn limit(&self) -> u64 { self.limit }\n }"}, {"sha": "cb2138630307feea8463ca6c02e1fec9eda0b95b", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -922,7 +922,7 @@ impl PathBuf {\n     ///\n     /// If `self.file_name()` is `None`, does nothing and returns `false`.\n     ///\n-    /// Otherwise, returns `tru`; if `self.exension()` is `None`, the extension\n+    /// Otherwise, returns `true`; if `self.extension()` is `None`, the extension\n     /// is added; otherwise it is replaced.\n     pub fn set_extension<S: ?Sized + AsOsStr>(&mut self, extension: &S) -> bool {\n         if self.file_name().is_none() { return false; }\n@@ -1062,7 +1062,7 @@ impl Path {\n         PathBuf::new(self)\n     }\n \n-    /// A path is *absolute* if it is indepedent of the current directory.\n+    /// A path is *absolute* if it is independent of the current directory.\n     ///\n     /// * On Unix, a path is absolute if it starts with the root, so\n     /// `is_absolute` and `has_root` are equivalent."}, {"sha": "eb45681fa626d6e3018447c676efe23b688ce478", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -45,7 +45,7 @@ use core::mem;\n use sync::atomic::{AtomicUsize, Ordering};\n \n // Various states you can find a port in.\n-const EMPTY: uint = 0;          // initial state: no data, no blocked reciever\n+const EMPTY: uint = 0;          // initial state: no data, no blocked receiver\n const DATA: uint = 1;           // data ready for receiver to take\n const DISCONNECTED: uint = 2;   // channel is disconnected OR upgraded\n // Any other value represents a pointer to a SignalToken value. The"}, {"sha": "158c491aeae903b3b72b527506bcfbb09af41b74", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -84,7 +84,7 @@ impl CodePoint {\n \n     /// Create a new `CodePoint` from a `char`.\n     ///\n-    /// Since all Unicode scalar values are code points, this always succeds.\n+    /// Since all Unicode scalar values are code points, this always succeeds.\n     #[inline]\n     pub fn from_char(value: char) -> CodePoint {\n         CodePoint { value: value as u32 }"}, {"sha": "0c24ab1fa09b4e964f1f424f5c4d117e8e4e93bc", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -191,7 +191,7 @@ unsafe fn unregister_dtor(key: Key) -> bool {\n // # What's up with this callback?\n //\n // The callback specified receives a number of parameters from... someone!\n-// (the kernel? the runtime? I'm not qute sure!) There are a few events that\n+// (the kernel? the runtime? I'm not quite sure!) There are a few events that\n // this gets invoked for, but we're currently only interested on when a\n // thread or a process \"detaches\" (exits). The process part happens for the\n // last thread and the thread part happens for any normal thread."}, {"sha": "42ef3459a0ed7cf931f191e300a7940ca87b21e9", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -232,7 +232,7 @@ impl Duration {\n         secs_part.checked_add(nanos_part as i64)\n     }\n \n-    /// Add two durations, returning `None` if overflow occured.\n+    /// Add two durations, returning `None` if overflow occurred.\n     #[unstable(feature = \"std_misc\")]\n     pub fn checked_add(&self, rhs: &Duration) -> Option<Duration> {\n         let mut secs = try_opt!(self.secs.checked_add(rhs.secs));\n@@ -247,7 +247,7 @@ impl Duration {\n         if d < MIN || d > MAX { None } else { Some(d) }\n     }\n \n-    /// Subtract two durations, returning `None` if overflow occured.\n+    /// Subtract two durations, returning `None` if overflow occurred.\n     #[unstable(feature = \"std_misc\")]\n     pub fn checked_sub(&self, rhs: &Duration) -> Option<Duration> {\n         let mut secs = try_opt!(self.secs.checked_sub(rhs.secs));"}, {"sha": "435713d99d146cfc110f4ad77ae1b0f84d6b38b4", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -109,7 +109,7 @@ static KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // int and uint are now deprecated\n     (\"int_uint\", \"1.0.0\", Active),\n \n-    // macro reexport needs more discusion and stabilization\n+    // macro reexport needs more discussion and stabilization\n     (\"macro_reexport\", \"1.0.0\", Active),\n \n     // These are used to test this portion of the compiler, they don't actually"}, {"sha": "d8a5ef048525fd3af17c6c05424e2a14c0d88920", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -560,7 +560,7 @@ fn filtered_float_lit(data: token::InternedString, suffix: Option<&str>,\n }\n pub fn float_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) -> ast::Lit_ {\n     debug!(\"float_lit: {:?}, {:?}\", s, suffix);\n-    // FIXME #2252: bounds checking float literals is defered until trans\n+    // FIXME #2252: bounds checking float literals is deferred until trans\n     let s = s.chars().filter(|&c| c != '_').collect::<String>();\n     let data = token::intern_and_get_ident(&*s);\n     filtered_float_lit(data, suffix, sd, sp)"}, {"sha": "6ee8230e9f8baeab4b1bd35d05c521fcc488caaf", "filename": "src/rustbook/javascript.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Frustbook%2Fjavascript.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2e444e506c31e8f4a4331c7f6264ca6c107bb6/src%2Frustbook%2Fjavascript.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fjavascript.rs?ref=dc2e444e506c31e8f4a4331c7f6264ca6c107bb6", "patch": "@@ -43,7 +43,7 @@ document.addEventListener(\"DOMContentLoaded\", function(event) {\n   // of each of the sections.\n   // It works by extracting the current page based on the url and iterates over\n   // the menu links until it finds the menu item for the current page. We then\n-  // create a copy of the preceeding and following menu links and add the\n+  // create a copy of the preceding and following menu links and add the\n   // correct css class and insert them into the bottom of the page.\n   var toc = document.getElementById('toc').getElementsByTagName('a');\n   var href = document.location.pathname.split('/').pop();"}]}