{"sha": "5abb7c3a67d2de15258ed99f4e16447a9a06698b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYmI3YzNhNjdkMmRlMTUyNThlZDk5ZjRlMTY0NDdhOWEwNjY5OGI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-15T16:24:05Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-16T20:30:43Z"}, "message": "debuginfo: Test cases for [generic][default][static] methods and functions:\n\n* closure-in-generic-function\n* generic-functions-nested\n* generic-method-on-generic-struct\n* generic-trait-generic-static-default-method\n* method-on-generic-struct\n* self-in-generic-default-method\n* trait-generic-static-default-method\n\nAlso, fixed an 'unused variable' warning in debuginfo.rs", "tree": {"sha": "3ec941f096e47eeaa9b75e16d8751481df1f630e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec941f096e47eeaa9b75e16d8751481df1f630e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5abb7c3a67d2de15258ed99f4e16447a9a06698b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5abb7c3a67d2de15258ed99f4e16447a9a06698b", "html_url": "https://github.com/rust-lang/rust/commit/5abb7c3a67d2de15258ed99f4e16447a9a06698b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5abb7c3a67d2de15258ed99f4e16447a9a06698b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e7808c2e0d7b4c9f2526784566af2745adcf207", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e7808c2e0d7b4c9f2526784566af2745adcf207", "html_url": "https://github.com/rust-lang/rust/commit/0e7808c2e0d7b4c9f2526784566af2745adcf207"}], "stats": {"total": 638, "additions": 635, "deletions": 3}, "files": [{"sha": "f5073cc71e5d031559a410f17a27f85cd0d094ab", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=5abb7c3a67d2de15258ed99f4e16447a9a06698b", "patch": "@@ -406,7 +406,6 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n     let template_parameters = get_template_parameters(fcx,\n                                                       generics,\n                                                       file_metadata,\n-                                                      span,\n                                                       &mut function_name);\n \n     let fn_metadata = do function_name.to_c_str().with_ref |function_name| {\n@@ -508,7 +507,6 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n     fn get_template_parameters(fcx: &FunctionContext,\n                                generics: &ast::Generics,\n                                file_metadata: DIFile,\n-                               span: span,\n                                name_to_append_suffix_to: &mut ~str)\n                             -> DIArray {\n         let cx = fcx.ccx;"}, {"sha": "b6cf6afff1ed2bf91344546d8646fdc9532eab55", "filename": "src/test/debug-info/closure-in-generic-function.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fclosure-in-generic-function.rs?ref=5abb7c3a67d2de15258ed99f4e16447a9a06698b", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// debugger:finish\n+// debugger:print x\n+// check:$1 = 0.5\n+// debugger:print y\n+// check:$2 = 10\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print *x\n+// check:$3 = 29\n+// debugger:print *y\n+// check:$4 = 110\n+// debugger:continue\n+\n+fn some_generic_fun<T1, T2>(a: T1, b: T2) -> (T2, T1) {\n+\n+    let closure = |x, y| {\n+        zzz();\n+        (y, x)\n+    };\n+\n+    closure(a, b)\n+}\n+\n+fn main() {\n+    some_generic_fun(0.5, 10);\n+    some_generic_fun(&29, ~110);\n+}\n+\n+fn zzz() {()}"}, {"sha": "1d883b5ab4df19abe47009efcc141a089dacbdd3", "filename": "src/test/debug-info/generic-functions-nested.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-functions-nested.rs?ref=5abb7c3a67d2de15258ed99f4e16447a9a06698b", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// debugger:finish\n+// debugger:print x\n+// check:$1 = -1\n+// debugger:print y\n+// check:$2 = 1\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print x\n+// check:$3 = -1\n+// debugger:print y\n+// check:$4 = 2.5\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print x\n+// check:$5 = -2.5\n+// debugger:print y\n+// check:$6 = 1\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print x\n+// check:$7 = -2.5\n+// debugger:print y\n+// check:$8 = 2.5\n+// debugger:continue\n+\n+fn outer<TA: Clone>(a: TA) {\n+    inner(a.clone(), 1);\n+    inner(a.clone(), 2.5);\n+\n+    fn inner<TX, TY>(x: TX, y: TY) {\n+        zzz();\n+    }\n+}\n+\n+fn main() {\n+    outer(-1);\n+    outer(-2.5);\n+}\n+\n+fn zzz() {()}"}, {"sha": "20569691fd4b530e8b189a35030c06c6f1acde59", "filename": "src/test/debug-info/generic-method-on-generic-struct.rs", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-method-on-generic-struct.rs?ref=5abb7c3a67d2de15258ed99f4e16447a9a06698b", "patch": "@@ -0,0 +1,140 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// STACK BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$1 = {x = {8888, -8888}}\n+// debugger:print arg1\n+// check:$2 = -1\n+// debugger:print/d arg2\n+// check:$3 = -2\n+// debugger:continue\n+\n+// STACK BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = {8888, -8888}}\n+// debugger:print arg1\n+// check:$4 = -3\n+// debugger:print arg2\n+// check:$5 = -4\n+// debugger:continue\n+\n+// OWNED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$6 = {x = 1234.5}\n+// debugger:print arg1\n+// check:$7 = -5\n+// debugger:print arg2\n+// check:$8 = -6\n+// debugger:continue\n+\n+// OWNED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 1234.5}\n+// debugger:print arg1\n+// check:$9 = -7\n+// debugger:print arg2\n+// check:$10 = -8\n+// debugger:continue\n+\n+// OWNED MOVED\n+// debugger:finish\n+// debugger:print *self\n+// check:$11 = {x = 1234.5}\n+// debugger:print arg1\n+// check:$12 = -9\n+// debugger:print arg2\n+// check:$13 = -10.5\n+// debugger:continue\n+\n+// MANAGED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$14 = {x = -1}\n+// debugger:print arg1\n+// check:$15 = -11\n+// debugger:print arg2\n+// check:$16 = -12.5\n+// debugger:continue\n+\n+// MANAGED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = -1}\n+// debugger:print arg1\n+// check:$17 = -13\n+// debugger:print *arg2\n+// check:$18 = {-14, 14}\n+// debugger:continue\n+\n+// MANAGED SELF\n+// debugger:finish\n+// debugger:print self->val\n+// check:$19 = {x = -1}\n+// debugger:print arg1\n+// check:$20 = -15\n+// debugger:print *arg2\n+// check:$21 = {-16, 16.5}\n+// debugger:continue\n+\n+struct Struct<T> {\n+    x: T\n+}\n+\n+impl<T1> Struct<T1> {\n+\n+    fn self_by_ref<T2>(&self, arg1: int, arg2: T2) -> int {\n+        zzz();\n+        arg1\n+    }\n+\n+    fn self_by_val<T2>(self, arg1: int, arg2: T2) -> int {\n+        zzz();\n+        arg1\n+    }\n+\n+    fn self_owned<T2>(~self, arg1: int, arg2: T2) -> int {\n+        zzz();\n+        arg1\n+    }\n+\n+    fn self_managed<T2>(@self, arg1: int, arg2: T2) -> int {\n+        zzz();\n+        arg1\n+    }\n+}\n+\n+fn main() {\n+    let stack = Struct { x: (8888_u32, -8888_i32) };\n+    let _ = stack.self_by_ref(-1, -2_i8);\n+    let _ = stack.self_by_val(-3, -4_i16);\n+\n+    let owned = ~Struct { x: 1234.5 };\n+    let _ = owned.self_by_ref(-5, -6_i32);\n+    let _ = owned.self_by_val(-7, -8_i64);\n+    let _ = owned.self_owned(-9, -10.5_f32);\n+\n+    let managed = @Struct { x: -1_i16 };\n+    let _ = managed.self_by_ref(-11, -12.5_f64);\n+    let _ = managed.self_by_val(-13, &(-14, 14));\n+    let _ = managed.self_managed(-15, &(-16, 16.5));\n+}\n+\n+fn zzz() {()}"}, {"sha": "ef75c93a56bea36941b3fa7c256f44fd92e1a5b2", "filename": "src/test/debug-info/generic-trait-generic-static-default-method.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-trait-generic-static-default-method.rs?ref=5abb7c3a67d2de15258ed99f4e16447a9a06698b", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// debugger:finish\n+// debugger:print arg1\n+// check:$1 = 1000\n+// debugger:print *arg2\n+// check:$2 = {1, 2.5}\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print arg1\n+// check:$3 = 2000\n+// debugger:print *arg2\n+// check:$4 = {3.5, {4, 5, 6}}\n+// debugger:continue\n+\n+\n+struct Struct {\n+    x: int\n+}\n+\n+trait Trait<T1> {\n+    fn generic_static_default_method<T2>(arg1: int, arg2: &(T1, T2)) -> int {\n+        zzz();\n+        arg1\n+    }\n+}\n+\n+impl<T> Trait<T> for Struct;\n+\n+fn main() {\n+\n+    // Is this really how to use these?\n+    Trait::generic_static_default_method::<int, Struct, float>(1000, &(1, 2.5));\n+    Trait::generic_static_default_method::<float, Struct, (int, int, int)>(2000, &(3.5, (4, 5, 6)));\n+\n+}\n+\n+fn zzz() {()}"}, {"sha": "11b142b3d2301510475ff23337c6ddbd6b86a8b3", "filename": "src/test/debug-info/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-in-parameterless-closure.rs?ref=5abb7c3a67d2de15258ed99f4e16447a9a06698b", "patch": "@@ -10,11 +10,12 @@\n \n // xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n \n-// compile-flags:-Z extra-debug-info\n+// compile-flags:-Z debug-info\n // debugger:run\n \n // Nothing to do here really, just make sure it compiles. See issue #8513.\n fn main() {\n     let _ = ||();\n+    let _ = range(1u,3).map(|_| 5);\n }\n "}, {"sha": "f482846027ee4679bf3577b020eabfebebe216b8", "filename": "src/test/debug-info/method-on-generic-struct.rs", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-generic-struct.rs?ref=5abb7c3a67d2de15258ed99f4e16447a9a06698b", "patch": "@@ -0,0 +1,140 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// STACK BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$1 = {x = {8888, -8888}}\n+// debugger:print arg1\n+// check:$2 = -1\n+// debugger:print arg2\n+// check:$3 = -2\n+// debugger:continue\n+\n+// STACK BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = {8888, -8888}}\n+// debugger:print arg1\n+// check:$4 = -3\n+// debugger:print arg2\n+// check:$5 = -4\n+// debugger:continue\n+\n+// OWNED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$6 = {x = 1234.5}\n+// debugger:print arg1\n+// check:$7 = -5\n+// debugger:print arg2\n+// check:$8 = -6\n+// debugger:continue\n+\n+// OWNED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 1234.5}\n+// debugger:print arg1\n+// check:$9 = -7\n+// debugger:print arg2\n+// check:$10 = -8\n+// debugger:continue\n+\n+// OWNED MOVED\n+// debugger:finish\n+// debugger:print *self\n+// check:$11 = {x = 1234.5}\n+// debugger:print arg1\n+// check:$12 = -9\n+// debugger:print arg2\n+// check:$13 = -10\n+// debugger:continue\n+\n+// MANAGED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$14 = {x = -1}\n+// debugger:print arg1\n+// check:$15 = -11\n+// debugger:print arg2\n+// check:$16 = -12\n+// debugger:continue\n+\n+// MANAGED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = -1}\n+// debugger:print arg1\n+// check:$17 = -13\n+// debugger:print arg2\n+// check:$18 = -14\n+// debugger:continue\n+\n+// MANAGED SELF\n+// debugger:finish\n+// debugger:print self->val\n+// check:$19 = {x = -1}\n+// debugger:print arg1\n+// check:$20 = -15\n+// debugger:print arg2\n+// check:$21 = -16\n+// debugger:continue\n+\n+struct Struct<T> {\n+    x: T\n+}\n+\n+impl<T> Struct<T> {\n+\n+    fn self_by_ref(&self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+\n+    fn self_by_val(self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+\n+    fn self_owned(~self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+\n+    fn self_managed(@self, arg1: int, arg2: int) -> int {\n+        zzz();\n+        arg1 + arg2\n+    }\n+}\n+\n+fn main() {\n+    let stack = Struct { x: (8888_u32, -8888_i32) };\n+    let _ = stack.self_by_ref(-1, -2);\n+    let _ = stack.self_by_val(-3, -4);\n+\n+    let owned = ~Struct { x: 1234.5 };\n+    let _ = owned.self_by_ref(-5, -6);\n+    let _ = owned.self_by_val(-7, -8);\n+    let _ = owned.self_owned(-9, -10);\n+\n+    let managed = @Struct { x: -1_i16 };\n+    let _ = managed.self_by_ref(-11, -12);\n+    let _ = managed.self_by_val(-13, -14);\n+    let _ = managed.self_managed(-15, -16);\n+}\n+\n+fn zzz() {()}"}, {"sha": "57068df7c0bf33869a3457fdcd1dbca149619c1a", "filename": "src/test/debug-info/self-in-generic-default-method.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fself-in-generic-default-method.rs?ref=5abb7c3a67d2de15258ed99f4e16447a9a06698b", "patch": "@@ -0,0 +1,142 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// STACK BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$1 = {x = 987}\n+// debugger:print arg1\n+// check:$2 = -1\n+// debugger:print/d arg2\n+// check:$3 = -2\n+// debugger:continue\n+\n+// STACK BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 987}\n+// debugger:print arg1\n+// check:$4 = -3\n+// debugger:print arg2\n+// check:$5 = -4\n+// debugger:continue\n+\n+// OWNED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$6 = {x = 879}\n+// debugger:print arg1\n+// check:$7 = -5\n+// debugger:print arg2\n+// check:$8 = -6\n+// debugger:continue\n+\n+// OWNED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 879}\n+// debugger:print arg1\n+// check:$9 = -7\n+// debugger:print arg2\n+// check:$10 = -8\n+// debugger:continue\n+\n+// OWNED MOVED\n+// debugger:finish\n+// debugger:print *self\n+// check:$11 = {x = 879}\n+// debugger:print arg1\n+// check:$12 = -9\n+// debugger:print arg2\n+// check:$13 = -10.5\n+// debugger:continue\n+\n+// MANAGED BY REF\n+// debugger:finish\n+// debugger:print *self\n+// check:$14 = {x = 897}\n+// debugger:print arg1\n+// check:$15 = -11\n+// debugger:print arg2\n+// check:$16 = -12.5\n+// debugger:continue\n+\n+// MANAGED BY VAL\n+// debugger:finish\n+// d ebugger:print self -- ignored for now because of issue #8512\n+// c heck:$X = {x = 897}\n+// debugger:print arg1\n+// check:$17 = -13\n+// debugger:print *arg2\n+// check:$18 = {-14, 14}\n+// debugger:continue\n+\n+// MANAGED SELF\n+// debugger:finish\n+// debugger:print self->val\n+// check:$19 = {x = 897}\n+// debugger:print arg1\n+// check:$20 = -15\n+// debugger:print *arg2\n+// check:$21 = {-16, 16.5}\n+// debugger:continue\n+\n+struct Struct {\n+    x: int\n+}\n+\n+trait Trait {\n+\n+    fn self_by_ref<T>(&self, arg1: int, arg2: T) -> int {\n+        zzz();\n+        arg1\n+    }\n+\n+    fn self_by_val<T>(self, arg1: int, arg2: T) -> int {\n+        zzz();\n+        arg1\n+    }\n+\n+    fn self_owned<T>(~self, arg1: int, arg2: T) -> int {\n+        zzz();\n+        arg1\n+    }\n+\n+    fn self_managed<T>(@self, arg1: int, arg2: T) -> int {\n+        zzz();\n+        arg1\n+    }\n+}\n+\n+impl Trait for Struct;\n+\n+fn main() {\n+    let stack = Struct { x: 987 };\n+    let _ = stack.self_by_ref(-1, -2_i8);\n+    let _ = stack.self_by_val(-3, -4_i16);\n+\n+    let owned = ~Struct { x: 879 };\n+    let _ = owned.self_by_ref(-5, -6_i32);\n+    let _ = owned.self_by_val(-7, -8_i64);\n+    let _ = owned.self_owned(-9, -10.5_f32);\n+\n+    let managed = @Struct { x: 897 };\n+    let _ = managed.self_by_ref(-11, -12.5_f64);\n+    let _ = managed.self_by_val(-13, &(-14, 14));\n+    let _ = managed.self_managed(-15, &(-16, 16.5));\n+}\n+\n+fn zzz() {()}"}, {"sha": "33468c974eba71a2c1278f9ff8a1237b6443cfff", "filename": "src/test/debug-info/trait-generic-static-default-method.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abb7c3a67d2de15258ed99f4e16447a9a06698b/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftrait-generic-static-default-method.rs?ref=5abb7c3a67d2de15258ed99f4e16447a9a06698b", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// debugger:finish\n+// debugger:print arg1\n+// check:$1 = 1000\n+// debugger:print arg2\n+// check:$2 = 0.5\n+// debugger:continue\n+\n+// debugger:finish\n+// debugger:print arg1\n+// check:$3 = 2000\n+// debugger:print *arg2\n+// check:$4 = {1, 2, 3}\n+// debugger:continue\n+\n+\n+struct Struct {\n+    x: int\n+}\n+\n+trait Trait {\n+    fn generic_static_default_method<T>(arg1: int, arg2: T) -> int {\n+        zzz();\n+        arg1\n+    }\n+}\n+\n+impl Trait for Struct;\n+\n+fn main() {\n+\n+    // Is this really how to use these?\n+    Trait::generic_static_default_method::<Struct, float>(1000, 0.5);\n+    Trait::generic_static_default_method::<Struct, &(int, int, int)>(2000, &(1, 2, 3));\n+\n+}\n+\n+fn zzz() {()}"}]}