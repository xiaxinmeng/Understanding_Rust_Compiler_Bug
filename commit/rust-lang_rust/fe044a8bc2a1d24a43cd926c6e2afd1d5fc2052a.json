{"sha": "fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMDQ0YThiYzJhMWQyNGE0M2NkOTI2YzZlMmFmZDFkNWZjMjA1MmE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-20T08:05:56Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-20T10:47:26Z"}, "message": "rename hir::map::expect_expr_by_hir_id to expect_expr", "tree": {"sha": "8ca2a6c44ad178f174446809d439b85873eba167", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ca2a6c44ad178f174446809d439b85873eba167"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "html_url": "https://github.com/rust-lang/rust/commit/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1e223a0e61e93aaeeef01a0e4a71ee2234aa06", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1e223a0e61e93aaeeef01a0e4a71ee2234aa06", "html_url": "https://github.com/rust-lang/rust/commit/2d1e223a0e61e93aaeeef01a0e4a71ee2234aa06"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "51ebd1188a52ba11861eb5750c982364d713cc73", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "patch": "@@ -927,7 +927,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn expect_expr_by_hir_id(&self, id: HirId) -> &'hir Expr {\n+    pub fn expect_expr(&self, id: HirId) -> &'hir Expr {\n         match self.find_by_hir_id(id) { // read recorded by find\n             Some(Node::Expr(expr)) => expr,\n             _ => bug!(\"expected expr, found {}\", self.node_to_string(id))"}, {"sha": "18a2bc45385dbcea1eb09fc73b3e36ae2e591a25", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "patch": "@@ -617,7 +617,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n                 hir::MatchSource::TryDesugar => {\n                     if let Some(ty::error::ExpectedFound { expected, .. }) = exp_found {\n-                        let discrim_expr = self.tcx.hir().expect_expr_by_hir_id(discrim_hir_id);\n+                        let discrim_expr = self.tcx.hir().expect_expr(discrim_hir_id);\n                         let discrim_ty = if let hir::ExprKind::Call(_, args) = &discrim_expr.node {\n                             let arg_expr = args.first().expect(\"try desugaring call w/out arg\");\n                             self.in_progress_tables.and_then(|tables| {"}, {"sha": "4426b5c0e85b5d55e65cac4cf7f3725c5a4b6bde", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         if let Some(body_id) = body_id {\n-            let expr = self.tcx.hir().expect_expr_by_hir_id(body_id.hir_id);\n+            let expr = self.tcx.hir().expect_expr(body_id.hir_id);\n             local_visitor.visit_expr(expr);\n         }\n "}, {"sha": "b22a8412ac8281333d7d6eb015103420697fe650", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "patch": "@@ -702,7 +702,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n             move_data::MovePat => (self.tcx.hir().span(hir_id), \"\"),\n \n             move_data::Captured =>\n-                (match self.tcx.hir().expect_expr_by_hir_id(hir_id).node {\n+                (match self.tcx.hir().expect_expr(hir_id).node {\n                     hir::ExprKind::Closure(.., fn_decl_span, _) => fn_decl_span,\n                     ref r => bug!(\"Captured({:?}) maps to non-closure: {:?}\",\n                                   the_move.id, r),"}, {"sha": "ac64cf79537cd8c4715c3123068b03b7b8ac6072", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "patch": "@@ -659,7 +659,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             def_id, target_place, places\n         );\n         let hir_id = self.infcx.tcx.hir().as_local_hir_id(def_id)?;\n-        let expr = &self.infcx.tcx.hir().expect_expr_by_hir_id(hir_id).node;\n+        let expr = &self.infcx.tcx.hir().expect_expr(hir_id).node;\n         debug!(\"closure_span: hir_id={:?} expr={:?}\", hir_id, expr);\n         if let hir::ExprKind::Closure(\n             .., args_span, _"}, {"sha": "3dc0a99c78b89501288bddd6856325e2d2203396", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "patch": "@@ -237,7 +237,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n                     if let DefiningTy::Closure(def_id, substs) = def_ty {\n                         let args_span = if let hir::ExprKind::Closure(_, _, _, span, _) =\n-                            tcx.hir().expect_expr_by_hir_id(mir_hir_id).node\n+                            tcx.hir().expect_expr(mir_hir_id).node\n                         {\n                             span\n                         } else {"}, {"sha": "1c18322259f808fcee21c3304c303bfd28a28a70", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                     let loop_kind = if loop_id == hir::DUMMY_HIR_ID {\n                         None\n                     } else {\n-                        Some(match self.hir_map.expect_expr_by_hir_id(loop_id).node {\n+                        Some(match self.hir_map.expect_expr(loop_id).node {\n                             hir::ExprKind::While(..) => LoopKind::WhileLoop,\n                             hir::ExprKind::Loop(_, _, source) => LoopKind::Loop(source),\n                             ref r => span_bug!(e.span,"}, {"sha": "f67241ef23efcbf6d6ca4d5246c62869c0d52d06", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "patch": "@@ -1532,7 +1532,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, '\n         match ex.node {\n             ast::ExprKind::Struct(ref path, ref fields, ref base) => {\n                 let expr_hir_id = self.save_ctxt.tcx.hir().node_to_hir_id(ex.id);\n-                let hir_expr = self.save_ctxt.tcx.hir().expect_expr_by_hir_id(expr_hir_id);\n+                let hir_expr = self.save_ctxt.tcx.hir().expect_expr(expr_hir_id);\n                 let adt = match self.save_ctxt.tables.expr_ty_opt(&hir_expr) {\n                     Some(ty) if ty.ty_adt_def().is_some() => ty.ty_adt_def().unwrap(),\n                     _ => {"}, {"sha": "0664327d4031d77734d710a9d5852c419acf2551", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "patch": "@@ -514,7 +514,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n \n     pub fn get_expr_data(&self, expr: &ast::Expr) -> Option<Data> {\n         let expr_hir_id = self.tcx.hir().node_to_hir_id(expr.id);\n-        let hir_node = self.tcx.hir().expect_expr_by_hir_id(expr_hir_id);\n+        let hir_node = self.tcx.hir().expect_expr(expr_hir_id);\n         let ty = self.tables.expr_ty_adjusted_opt(&hir_node);\n         if ty.is_none() || ty.unwrap().sty == ty::Error {\n             return None;"}, {"sha": "10efae59867bdaff96df66ea9fc3cd65004bc0c2", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=fe044a8bc2a1d24a43cd926c6e2afd1d5fc2052a", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     Applicability::MachineApplicable,\n                                 );\n                             } else {\n-                                let call_expr = self.tcx.hir().expect_expr_by_hir_id(\n+                                let call_expr = self.tcx.hir().expect_expr(\n                                     self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n                                 );\n "}]}