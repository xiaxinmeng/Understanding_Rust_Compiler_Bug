{"sha": "6da645d858b8c25d2921a0c66b4320178d25166c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYTY0NWQ4NThiOGMyNWQyOTIxYTBjNjZiNDMyMDE3OGQyNTE2NmM=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-09-20T15:55:59Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-09-20T15:55:59Z"}, "message": "Suspicious line endings", "tree": {"sha": "13b2ca6bc70b542d5b174d0019e968206eda77ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13b2ca6bc70b542d5b174d0019e968206eda77ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6da645d858b8c25d2921a0c66b4320178d25166c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6da645d858b8c25d2921a0c66b4320178d25166c", "html_url": "https://github.com/rust-lang/rust/commit/6da645d858b8c25d2921a0c66b4320178d25166c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6da645d858b8c25d2921a0c66b4320178d25166c/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0492b18ed47115c630cf3490fcdf904155f6e496", "url": "https://api.github.com/repos/rust-lang/rust/commits/0492b18ed47115c630cf3490fcdf904155f6e496", "html_url": "https://github.com/rust-lang/rust/commit/0492b18ed47115c630cf3490fcdf904155f6e496"}], "stats": {"total": 740, "additions": 370, "deletions": 370}, "files": [{"sha": "965a64c9870c1836327baa741f1cba7768b66e9e", "filename": "crates/ra_assists/src/raw_string.rs", "status": "modified", "additions": 370, "deletions": 370, "changes": 740, "blob_url": "https://github.com/rust-lang/rust/blob/6da645d858b8c25d2921a0c66b4320178d25166c/crates%2Fra_assists%2Fsrc%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da645d858b8c25d2921a0c66b4320178d25166c/crates%2Fra_assists%2Fsrc%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fraw_string.rs?ref=6da645d858b8c25d2921a0c66b4320178d25166c", "patch": "@@ -1,370 +1,370 @@\n-use hir::db::HirDatabase;\r\n-use ra_syntax::{ast::AstNode, ast::Literal, TextRange, TextUnit};\r\n-\r\n-use crate::{Assist, AssistCtx, AssistId};\r\n-\r\n-pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n-    let literal = ctx.node_at_offset::<Literal>()?;\r\n-    if literal.token().kind() != ra_syntax::SyntaxKind::STRING {\r\n-        return None;\r\n-    }\r\n-    ctx.add_action(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\r\n-        edit.target(literal.syntax().text_range());\r\n-        edit.insert(literal.syntax().text_range().start(), \"r\");\r\n-    });\r\n-    ctx.build()\r\n-}\r\n-\r\n-fn find_usual_string_range(s: &str) -> Option<TextRange> {\r\n-    Some(TextRange::from_to(\r\n-        TextUnit::from(s.find('\"')? as u32),\r\n-        TextUnit::from(s.rfind('\"')? as u32),\r\n-    ))\r\n-}\r\n-\r\n-pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n-    let literal = ctx.node_at_offset::<Literal>()?;\r\n-    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\r\n-        return None;\r\n-    }\r\n-    let token = literal.token();\r\n-    let text = token.text().as_str();\r\n-    let usual_string_range = find_usual_string_range(text)?;\r\n-    ctx.add_action(AssistId(\"make_usual_string\"), \"make usual string\", |edit| {\r\n-        edit.target(literal.syntax().text_range());\r\n-        // parse inside string to escape `\"`\r\n-        let start_of_inside = usual_string_range.start().to_usize() + 1;\r\n-        let end_of_inside = usual_string_range.end().to_usize();\r\n-        let inside_str = &text[start_of_inside..end_of_inside];\r\n-        let escaped = inside_str.escape_default().to_string();\r\n-        edit.replace(literal.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\r\n-    });\r\n-    ctx.build()\r\n-}\r\n-\r\n-pub(crate) fn add_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n-    let literal = ctx.node_at_offset::<Literal>()?;\r\n-    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\r\n-        return None;\r\n-    }\r\n-    ctx.add_action(AssistId(\"add_hash\"), \"add hash to raw string\", |edit| {\r\n-        edit.target(literal.syntax().text_range());\r\n-        edit.insert(literal.syntax().text_range().start() + TextUnit::of_char('r'), \"#\");\r\n-        edit.insert(literal.syntax().text_range().end(), \"#\");\r\n-    });\r\n-    ctx.build()\r\n-}\r\n-\r\n-pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n-    let literal = ctx.node_at_offset::<Literal>()?;\r\n-    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\r\n-        return None;\r\n-    }\r\n-    let token = literal.token();\r\n-    let text = token.text().as_str();\r\n-    if text.starts_with(\"r\\\"\") {\r\n-        // no hash to remove\r\n-        return None;\r\n-    }\r\n-    ctx.add_action(AssistId(\"remove_hash\"), \"remove hash from raw string\", |edit| {\r\n-        edit.target(literal.syntax().text_range());\r\n-        let result = &text[2..text.len() - 1];\r\n-        let result = if result.starts_with(\"\\\"\") {\r\n-            // no more hash, escape\r\n-            let internal_str = &result[1..result.len() - 1];\r\n-            format!(\"\\\"{}\\\"\", internal_str.escape_default().to_string())\r\n-        } else {\r\n-            result.to_owned()\r\n-        };\r\n-        edit.replace(literal.syntax().text_range(), format!(\"r{}\", result));\r\n-    });\r\n-    ctx.build()\r\n-}\r\n-\r\n-#[cfg(test)]\r\n-mod test {\r\n-    use super::*;\r\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\r\n-\r\n-    #[test]\r\n-    fn make_raw_string_target() {\r\n-        check_assist_target(\r\n-            make_raw_string,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>\"random string\";\r\n-            }\r\n-            \"#,\r\n-            r#\"\"random string\"\"#,\r\n-        );\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn make_raw_string_works() {\r\n-        check_assist(\r\n-            make_raw_string,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>\"random string\";\r\n-            }\r\n-            \"#,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>r\"random string\";\r\n-            }\r\n-            \"#,\r\n-        )\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn make_raw_string_with_escaped_works() {\r\n-        check_assist(\r\n-            make_raw_string,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>\"random\\nstring\";\r\n-            }\r\n-            \"#,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>r\"random\\nstring\";\r\n-            }\r\n-            \"#,\r\n-        )\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn make_raw_string_not_works() {\r\n-        check_assist_not_applicable(\r\n-            make_raw_string,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>r\"random string\";\r\n-            }\r\n-            \"#,\r\n-        );\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn add_hash_target() {\r\n-        check_assist_target(\r\n-            add_hash,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>r\"random string\";\r\n-            }\r\n-            \"#,\r\n-            r#\"r\"random string\"\"#,\r\n-        );\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn add_hash_works() {\r\n-        check_assist(\r\n-            add_hash,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>r\"random string\";\r\n-            }\r\n-            \"#,\r\n-            r##\"\r\n-            fn f() {\r\n-                let s = <|>r#\"random string\"#;\r\n-            }\r\n-            \"##,\r\n-        )\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn add_more_hash_works() {\r\n-        check_assist(\r\n-            add_hash,\r\n-            r##\"\r\n-            fn f() {\r\n-                let s = <|>r#\"random\"string\"#;\r\n-            }\r\n-            \"##,\r\n-            r###\"\r\n-            fn f() {\r\n-                let s = <|>r##\"random\"string\"##;\r\n-            }\r\n-            \"###,\r\n-        )\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn add_hash_not_works() {\r\n-        check_assist_not_applicable(\r\n-            add_hash,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>\"random string\";\r\n-            }\r\n-            \"#,\r\n-        );\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn remove_hash_target() {\r\n-        check_assist_target(\r\n-            remove_hash,\r\n-            r##\"\r\n-            fn f() {\r\n-                let s = <|>r#\"random string\"#;\r\n-            }\r\n-            \"##,\r\n-            r##\"r#\"random string\"#\"##,\r\n-        );\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn remove_hash_works() {\r\n-        check_assist(\r\n-            remove_hash,\r\n-            r##\"\r\n-            fn f() {\r\n-                let s = <|>r#\"random string\"#;\r\n-            }\r\n-            \"##,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>r\"random string\";\r\n-            }\r\n-            \"#,\r\n-        )\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn remove_hash_with_quote_works() {\r\n-        check_assist(\r\n-            remove_hash,\r\n-            r##\"\r\n-            fn f() {\r\n-                let s = <|>r#\"random\"str\"ing\"#;\r\n-            }\r\n-            \"##,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>r\"random\\\"str\\\"ing\";\r\n-            }\r\n-            \"#,\r\n-        )\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn remove_more_hash_works() {\r\n-        check_assist(\r\n-            remove_hash,\r\n-            r###\"\r\n-            fn f() {\r\n-                let s = <|>r##\"random string\"##;\r\n-            }\r\n-            \"###,\r\n-            r##\"\r\n-            fn f() {\r\n-                let s = <|>r#\"random string\"#;\r\n-            }\r\n-            \"##,\r\n-        )\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn remove_hash_not_works() {\r\n-        check_assist_not_applicable(\r\n-            remove_hash,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>\"random string\";\r\n-            }\r\n-            \"#,\r\n-        );\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn remove_hash_no_hash_not_works() {\r\n-        check_assist_not_applicable(\r\n-            remove_hash,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>r\"random string\";\r\n-            }\r\n-            \"#,\r\n-        );\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn make_usual_string_target() {\r\n-        check_assist_target(\r\n-            make_usual_string,\r\n-            r##\"\r\n-            fn f() {\r\n-                let s = <|>r#\"random string\"#;\r\n-            }\r\n-            \"##,\r\n-            r##\"r#\"random string\"#\"##,\r\n-        );\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn make_usual_string_works() {\r\n-        check_assist(\r\n-            make_usual_string,\r\n-            r##\"\r\n-            fn f() {\r\n-                let s = <|>r#\"random string\"#;\r\n-            }\r\n-            \"##,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>\"random string\";\r\n-            }\r\n-            \"#,\r\n-        )\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn make_usual_string_with_quote_works() {\r\n-        check_assist(\r\n-            make_usual_string,\r\n-            r##\"\r\n-            fn f() {\r\n-                let s = <|>r#\"random\"str\"ing\"#;\r\n-            }\r\n-            \"##,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>\"random\\\"str\\\"ing\";\r\n-            }\r\n-            \"#,\r\n-        )\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn make_usual_string_more_hash_works() {\r\n-        check_assist(\r\n-            make_usual_string,\r\n-            r###\"\r\n-            fn f() {\r\n-                let s = <|>r##\"random string\"##;\r\n-            }\r\n-            \"###,\r\n-            r##\"\r\n-            fn f() {\r\n-                let s = <|>\"random string\";\r\n-            }\r\n-            \"##,\r\n-        )\r\n-    }\r\n-\r\n-    #[test]\r\n-    fn make_usual_string_not_works() {\r\n-        check_assist_not_applicable(\r\n-            make_usual_string,\r\n-            r#\"\r\n-            fn f() {\r\n-                let s = <|>\"random string\";\r\n-            }\r\n-            \"#,\r\n-        );\r\n-    }\r\n-}\r\n+use hir::db::HirDatabase;\n+use ra_syntax::{ast::AstNode, ast::Literal, TextRange, TextUnit};\n+\n+use crate::{Assist, AssistCtx, AssistId};\n+\n+pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let literal = ctx.node_at_offset::<Literal>()?;\n+    if literal.token().kind() != ra_syntax::SyntaxKind::STRING {\n+        return None;\n+    }\n+    ctx.add_action(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\n+        edit.target(literal.syntax().text_range());\n+        edit.insert(literal.syntax().text_range().start(), \"r\");\n+    });\n+    ctx.build()\n+}\n+\n+fn find_usual_string_range(s: &str) -> Option<TextRange> {\n+    Some(TextRange::from_to(\n+        TextUnit::from(s.find('\"')? as u32),\n+        TextUnit::from(s.rfind('\"')? as u32),\n+    ))\n+}\n+\n+pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let literal = ctx.node_at_offset::<Literal>()?;\n+    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\n+        return None;\n+    }\n+    let token = literal.token();\n+    let text = token.text().as_str();\n+    let usual_string_range = find_usual_string_range(text)?;\n+    ctx.add_action(AssistId(\"make_usual_string\"), \"make usual string\", |edit| {\n+        edit.target(literal.syntax().text_range());\n+        // parse inside string to escape `\"`\n+        let start_of_inside = usual_string_range.start().to_usize() + 1;\n+        let end_of_inside = usual_string_range.end().to_usize();\n+        let inside_str = &text[start_of_inside..end_of_inside];\n+        let escaped = inside_str.escape_default().to_string();\n+        edit.replace(literal.syntax().text_range(), format!(\"\\\"{}\\\"\", escaped));\n+    });\n+    ctx.build()\n+}\n+\n+pub(crate) fn add_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let literal = ctx.node_at_offset::<Literal>()?;\n+    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\n+        return None;\n+    }\n+    ctx.add_action(AssistId(\"add_hash\"), \"add hash to raw string\", |edit| {\n+        edit.target(literal.syntax().text_range());\n+        edit.insert(literal.syntax().text_range().start() + TextUnit::of_char('r'), \"#\");\n+        edit.insert(literal.syntax().text_range().end(), \"#\");\n+    });\n+    ctx.build()\n+}\n+\n+pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let literal = ctx.node_at_offset::<Literal>()?;\n+    if literal.token().kind() != ra_syntax::SyntaxKind::RAW_STRING {\n+        return None;\n+    }\n+    let token = literal.token();\n+    let text = token.text().as_str();\n+    if text.starts_with(\"r\\\"\") {\n+        // no hash to remove\n+        return None;\n+    }\n+    ctx.add_action(AssistId(\"remove_hash\"), \"remove hash from raw string\", |edit| {\n+        edit.target(literal.syntax().text_range());\n+        let result = &text[2..text.len() - 1];\n+        let result = if result.starts_with(\"\\\"\") {\n+            // no more hash, escape\n+            let internal_str = &result[1..result.len() - 1];\n+            format!(\"\\\"{}\\\"\", internal_str.escape_default().to_string())\n+        } else {\n+            result.to_owned()\n+        };\n+        edit.replace(literal.syntax().text_range(), format!(\"r{}\", result));\n+    });\n+    ctx.build()\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    #[test]\n+    fn make_raw_string_target() {\n+        check_assist_target(\n+            make_raw_string,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random string\";\n+            }\n+            \"#,\n+            r#\"\"random string\"\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn make_raw_string_works() {\n+        check_assist(\n+            make_raw_string,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random string\";\n+            }\n+            \"#,\n+            r#\"\n+            fn f() {\n+                let s = <|>r\"random string\";\n+            }\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn make_raw_string_with_escaped_works() {\n+        check_assist(\n+            make_raw_string,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random\\nstring\";\n+            }\n+            \"#,\n+            r#\"\n+            fn f() {\n+                let s = <|>r\"random\\nstring\";\n+            }\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn make_raw_string_not_works() {\n+        check_assist_not_applicable(\n+            make_raw_string,\n+            r#\"\n+            fn f() {\n+                let s = <|>r\"random string\";\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_hash_target() {\n+        check_assist_target(\n+            add_hash,\n+            r#\"\n+            fn f() {\n+                let s = <|>r\"random string\";\n+            }\n+            \"#,\n+            r#\"r\"random string\"\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_hash_works() {\n+        check_assist(\n+            add_hash,\n+            r#\"\n+            fn f() {\n+                let s = <|>r\"random string\";\n+            }\n+            \"#,\n+            r##\"\n+            fn f() {\n+                let s = <|>r#\"random string\"#;\n+            }\n+            \"##,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_more_hash_works() {\n+        check_assist(\n+            add_hash,\n+            r##\"\n+            fn f() {\n+                let s = <|>r#\"random\"string\"#;\n+            }\n+            \"##,\n+            r###\"\n+            fn f() {\n+                let s = <|>r##\"random\"string\"##;\n+            }\n+            \"###,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_hash_not_works() {\n+        check_assist_not_applicable(\n+            add_hash,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random string\";\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn remove_hash_target() {\n+        check_assist_target(\n+            remove_hash,\n+            r##\"\n+            fn f() {\n+                let s = <|>r#\"random string\"#;\n+            }\n+            \"##,\n+            r##\"r#\"random string\"#\"##,\n+        );\n+    }\n+\n+    #[test]\n+    fn remove_hash_works() {\n+        check_assist(\n+            remove_hash,\n+            r##\"\n+            fn f() {\n+                let s = <|>r#\"random string\"#;\n+            }\n+            \"##,\n+            r#\"\n+            fn f() {\n+                let s = <|>r\"random string\";\n+            }\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn remove_hash_with_quote_works() {\n+        check_assist(\n+            remove_hash,\n+            r##\"\n+            fn f() {\n+                let s = <|>r#\"random\"str\"ing\"#;\n+            }\n+            \"##,\n+            r#\"\n+            fn f() {\n+                let s = <|>r\"random\\\"str\\\"ing\";\n+            }\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn remove_more_hash_works() {\n+        check_assist(\n+            remove_hash,\n+            r###\"\n+            fn f() {\n+                let s = <|>r##\"random string\"##;\n+            }\n+            \"###,\n+            r##\"\n+            fn f() {\n+                let s = <|>r#\"random string\"#;\n+            }\n+            \"##,\n+        )\n+    }\n+\n+    #[test]\n+    fn remove_hash_not_works() {\n+        check_assist_not_applicable(\n+            remove_hash,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random string\";\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn remove_hash_no_hash_not_works() {\n+        check_assist_not_applicable(\n+            remove_hash,\n+            r#\"\n+            fn f() {\n+                let s = <|>r\"random string\";\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn make_usual_string_target() {\n+        check_assist_target(\n+            make_usual_string,\n+            r##\"\n+            fn f() {\n+                let s = <|>r#\"random string\"#;\n+            }\n+            \"##,\n+            r##\"r#\"random string\"#\"##,\n+        );\n+    }\n+\n+    #[test]\n+    fn make_usual_string_works() {\n+        check_assist(\n+            make_usual_string,\n+            r##\"\n+            fn f() {\n+                let s = <|>r#\"random string\"#;\n+            }\n+            \"##,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random string\";\n+            }\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn make_usual_string_with_quote_works() {\n+        check_assist(\n+            make_usual_string,\n+            r##\"\n+            fn f() {\n+                let s = <|>r#\"random\"str\"ing\"#;\n+            }\n+            \"##,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random\\\"str\\\"ing\";\n+            }\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn make_usual_string_more_hash_works() {\n+        check_assist(\n+            make_usual_string,\n+            r###\"\n+            fn f() {\n+                let s = <|>r##\"random string\"##;\n+            }\n+            \"###,\n+            r##\"\n+            fn f() {\n+                let s = <|>\"random string\";\n+            }\n+            \"##,\n+        )\n+    }\n+\n+    #[test]\n+    fn make_usual_string_not_works() {\n+        check_assist_not_applicable(\n+            make_usual_string,\n+            r#\"\n+            fn f() {\n+                let s = <|>\"random string\";\n+            }\n+            \"#,\n+        );\n+    }\n+}"}]}