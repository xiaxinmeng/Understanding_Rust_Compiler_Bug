{"sha": "6ee1c60c9cff781e10d6379f68fc951378403f6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZTFjNjBjOWNmZjc4MWUxMGQ2Mzc5ZjY4ZmM5NTEzNzg0MDNmNmI=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-05-22T23:41:08Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-05-22T23:41:08Z"}, "message": "Further review fixes", "tree": {"sha": "941d45aed0effe537c4a0742523f074b53e1a6db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/941d45aed0effe537c4a0742523f074b53e1a6db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ee1c60c9cff781e10d6379f68fc951378403f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee1c60c9cff781e10d6379f68fc951378403f6b", "html_url": "https://github.com/rust-lang/rust/commit/6ee1c60c9cff781e10d6379f68fc951378403f6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ee1c60c9cff781e10d6379f68fc951378403f6b/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4984520ef565e926ba08c6512715ed631e4527e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4984520ef565e926ba08c6512715ed631e4527e4", "html_url": "https://github.com/rust-lang/rust/commit/4984520ef565e926ba08c6512715ed631e4527e4"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "007f05b4d03e8d62f036c88363e5b5434a8b1fa5", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ee1c60c9cff781e10d6379f68fc951378403f6b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6ee1c60c9cff781e10d6379f68fc951378403f6b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6ee1c60c9cff781e10d6379f68fc951378403f6b", "patch": "@@ -921,7 +921,6 @@ dependencies = [\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n- \"ra_hir_expand\",\n  \"ra_ide_db\",\n  \"ra_prof\",\n  \"ra_syntax\","}, {"sha": "3bcf58ba4b0962a2219d22b3d5d04168a9666bf2", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ee1c60c9cff781e10d6379f68fc951378403f6b/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6ee1c60c9cff781e10d6379f68fc951378403f6b/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=6ee1c60c9cff781e10d6379f68fc951378403f6b", "patch": "@@ -20,6 +20,5 @@ ra_fmt = { path = \"../ra_fmt\" }\n ra_prof = { path = \"../ra_prof\" }\n ra_db = { path = \"../ra_db\" }\n ra_ide_db = { path = \"../ra_ide_db\" }\n-hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "3592838029a1e8a5b973282b31f88d6dda30592f", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6ee1c60c9cff781e10d6379f68fc951378403f6b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee1c60c9cff781e10d6379f68fc951378403f6b/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=6ee1c60c9cff781e10d6379f68fc951378403f6b", "patch": "@@ -1,4 +1,3 @@\n-use hir_expand::name::AsName;\n use ra_ide_db::{\n     defs::Definition, imports_locator::ImportsLocator, search::Reference, RootDatabase,\n };\n@@ -15,14 +14,14 @@ use crate::{\n     AssistContext, AssistId, Assists,\n };\n use ast::{ArgListOwner, VisibilityOwner};\n-use hir::{EnumVariant, Module, ModuleDef};\n+use hir::{AsName, EnumVariant, Module, ModuleDef};\n use ra_db::FileId;\n use ra_fmt::leading_indent;\n use rustc_hash::FxHashSet;\n \n // Assist extract_struct_from_enum\n //\n-// Extracts a from struct from enum variant\n+// Extracts a struct from enum variant\n //\n // ```\n // enum A { <|>One(u32, u32) }\n@@ -41,7 +40,7 @@ pub(crate) fn extract_struct_from_enum(acc: &mut Assists, ctx: &AssistContext) -\n     };\n     let variant_name = variant.name()?.to_string();\n     let enum_ast = variant.parent_enum();\n-    let enum_name = enum_ast.name().unwrap().to_string();\n+    let enum_name = enum_ast.name()?.to_string();\n     let visibility = enum_ast.visibility();\n     let variant_hir = ctx.sema.to_def(&variant)?;\n \n@@ -88,13 +87,12 @@ pub(crate) fn extract_struct_from_enum(acc: &mut Assists, ctx: &AssistContext) -\n }\n \n fn existing_struct_def(db: &RootDatabase, variant_name: &str, variant: &EnumVariant) -> bool {\n-    let module_defs = variant.parent_enum(db).module(db).scope(db, None);\n-    for (name, _) in module_defs {\n-        if name.to_string() == variant_name.to_string() {\n-            return true;\n-        }\n-    }\n-    false\n+    variant\n+        .parent_enum(db)\n+        .module(db)\n+        .scope(db, None)\n+        .into_iter()\n+        .any(|(name, _)| name.to_string() == variant_name.to_string())\n }\n \n fn mod_def_for_target_module(ctx: &AssistContext, enum_name: &str) -> ModuleDef {"}, {"sha": "4af0f046a720613c0f0e809f1e5c856d4418a932", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ee1c60c9cff781e10d6379f68fc951378403f6b/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee1c60c9cff781e10d6379f68fc951378403f6b/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=6ee1c60c9cff781e10d6379f68fc951378403f6b", "patch": "@@ -70,7 +70,8 @@ pub use hir_def::{\n     type_ref::Mutability,\n };\n pub use hir_expand::{\n-    hygiene::Hygiene, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId,\n-    MacroFile, Origin,\n+    hygiene::Hygiene,\n+    name::{AsName, Name},\n+    HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n };\n pub use hir_ty::{display::HirDisplay, CallableDef};"}]}