{"sha": "4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZDEyOGI5NWMyZWQyYmZiYWQ1NjY0NWJmZTlhYzJlMTRjMzE1MmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-01T07:19:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-01T07:19:12Z"}, "message": "Auto merge of #28136 - huonw:simd, r=alexcrichton\n\nI believe everything that doesn't take a constant integer up to SSE4.2\r\nshould now be correct (I don't have any reason to believe that those\r\nthat do take constant integers are wrong; they're just more complicated\r\nand I just haven't tested them in detail).\r\n\r\n(Also, takes out two unused code paths from trans.)", "tree": {"sha": "da24dec40ee3b8147b0ec214ee1fd7272899a70f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da24dec40ee3b8147b0ec214ee1fd7272899a70f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "html_url": "https://github.com/rust-lang/rust/commit/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da6c7e15c2d4c49ae1a48e9bac7dde39f5488df", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da6c7e15c2d4c49ae1a48e9bac7dde39f5488df", "html_url": "https://github.com/rust-lang/rust/commit/4da6c7e15c2d4c49ae1a48e9bac7dde39f5488df"}, {"sha": "787a21fe7c76143f76ae33722f68133a9e1e5f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/787a21fe7c76143f76ae33722f68133a9e1e5f3c", "html_url": "https://github.com/rust-lang/rust/commit/787a21fe7c76143f76ae33722f68133a9e1e5f3c"}], "stats": {"total": 99, "additions": 35, "deletions": 64}, "files": [{"sha": "abd0b369573a0e8c8158f14d0913d7ddf8fd8c86", "filename": "src/etc/platform-intrinsics/x86/sse2.json", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "raw_url": "https://github.com/rust-lang/rust/raw/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse2.json?ref=4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "patch": "@@ -19,8 +19,8 @@\n             \"intrinsic\": \"_madd_epi16\",\n             \"width\": [128],\n             \"llvm\": \"pmadd.wd\",\n-            \"ret\": \"s16\",\n-            \"args\": [\"0\", \"0\"]\n+            \"ret\": \"s32\",\n+            \"args\": [\"s16\", \"s16\"]\n         },\n         {\n             \"intrinsic\": \"_max_{0.data_type}\",\n@@ -68,11 +68,11 @@\n             \"intrinsic\": \"_mul_epu32\",\n             \"width\": [128],\n             \"llvm\": \"pmulu.dq\",\n-            \"ret\": \"s64\",\n+            \"ret\": \"u64\",\n             \"args\": [\"0dn\", \"0dn\"]\n         },\n         {\n-            \"intrinsic\": \"_mulhi_ep{0.kind}16\",\n+            \"intrinsic\": \"_mulhi_{0.data_type}\",\n             \"width\": [128],\n             \"llvm\": \"pmulh{0.kind_short}.w\",\n             \"ret\": \"i16\","}, {"sha": "de792cd1060bbec74a67560efab31e9e743b9ec7", "filename": "src/etc/platform-intrinsics/x86/sse41.json", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json", "raw_url": "https://github.com/rust-lang/rust/raw/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fsse41.json?ref=4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "patch": "@@ -39,7 +39,7 @@\n         {\n             \"intrinsic\": \"_mul_epi32\",\n             \"width\": [128],\n-            \"llvm\": \"muldq\",\n+            \"llvm\": \"pmuldq\",\n             \"ret\": \"s64\",\n             \"args\": [\"s32\", \"s32\"]\n         },\n@@ -58,9 +58,9 @@\n             \"args\": [\"u64\", \"u64\"]\n         },\n         {\n-            \"intrinsic\": \"_testncz_si128\",\n+            \"intrinsic\": \"_testnzc_si128\",\n             \"width\": [128],\n-            \"llvm\": \"ptest.nzc\",\n+            \"llvm\": \"ptestnzc\",\n             \"ret\": \"S32\",\n             \"args\": [\"u64\", \"u64\"]\n         },"}, {"sha": "af6afbb19a26d0669d852c7e78f12f0ef6e8252b", "filename": "src/etc/platform-intrinsics/x86/ssse3.json", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json", "raw_url": "https://github.com/rust-lang/rust/raw/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Fssse3.json?ref=4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "patch": "@@ -4,7 +4,7 @@\n         {\n             \"intrinsic\": \"_abs_{0.data_type}\",\n             \"width\": [128],\n-            \"llvm\": \"pabs.{0.data_type_short}\",\n+            \"llvm\": \"pabs.{0.data_type_short}.128\",\n             \"ret\": \"s(8-32)\",\n             \"args\": [\"0\"]\n         },\n@@ -41,7 +41,7 @@\n             \"width\": [128],\n             \"llvm\": \"pmadd.ub.sw.128\",\n             \"ret\": \"s16\",\n-            \"args\": [\"s8\", \"s8\"]\n+            \"args\": [\"u8\", \"s8\"]\n         },\n         {\n             \"intrinsic\": \"_mulhrs_epi16\",\n@@ -61,7 +61,7 @@\n             \"intrinsic\": \"_sign_{0.data_type}\",\n             \"width\": [128],\n             \"llvm\": \"psign.{0.data_type_short}.128\",\n-            \"ret\": \"s(8-16)\",\n+            \"ret\": \"s(8-32)\",\n             \"args\": [\"0\", \"0\"]\n         }\n     ]"}, {"sha": "64c31ccb50d4ae4206a82f12c5efa21ffe508f84", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "patch": "@@ -82,7 +82,7 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n         },\n         \"_madd_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8), v(i(16), 8)],\n-            output: v(i(16), 8),\n+            output: v(i(32), 4),\n             definition: Named(\"llvm.x86.sse2.pmadd.wd\")\n         },\n         \"_max_epi16\" => Intrinsic {\n@@ -126,11 +126,11 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             definition: Named(\"llvm.x86.sse2.pmovmskb.128\")\n         },\n         \"_mul_epu32\" => Intrinsic {\n-            inputs: vec![v(i(32), 4), v(i(32), 4)],\n-            output: v(i(64), 2),\n+            inputs: vec![v(u(32), 4), v(u(32), 4)],\n+            output: v(u(64), 2),\n             definition: Named(\"llvm.x86.sse2.pmulu.dq\")\n         },\n-        \"_mulhi_eps16\" => Intrinsic {\n+        \"_mulhi_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8), v(i(16), 8)],\n             output: v(i(16), 8),\n             definition: Named(\"llvm.x86.sse2.pmulh.w\")\n@@ -218,17 +218,17 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n         \"_abs_epi8\" => Intrinsic {\n             inputs: vec![v(i(8), 16)],\n             output: v(i(8), 16),\n-            definition: Named(\"llvm.x86.ssse3.pabs.b\")\n+            definition: Named(\"llvm.x86.ssse3.pabs.b.128\")\n         },\n         \"_abs_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8)],\n             output: v(i(16), 8),\n-            definition: Named(\"llvm.x86.ssse3.pabs.w\")\n+            definition: Named(\"llvm.x86.ssse3.pabs.w.128\")\n         },\n         \"_abs_epi32\" => Intrinsic {\n             inputs: vec![v(i(32), 4)],\n             output: v(i(32), 4),\n-            definition: Named(\"llvm.x86.ssse3.pabs.d\")\n+            definition: Named(\"llvm.x86.ssse3.pabs.d.128\")\n         },\n         \"_hadd_epi16\" => Intrinsic {\n             inputs: vec![v(i(16), 8), v(i(16), 8)],\n@@ -261,7 +261,7 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             definition: Named(\"llvm.x86.ssse3.phsub.sw.128\")\n         },\n         \"_maddubs_epi16\" => Intrinsic {\n-            inputs: vec![v(i(8), 16), v(i(8), 16)],\n+            inputs: vec![v(u(8), 16), v(i(8), 16)],\n             output: v(i(16), 8),\n             definition: Named(\"llvm.x86.ssse3.pmadd.ub.sw.128\")\n         },\n@@ -285,6 +285,11 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(i(16), 8),\n             definition: Named(\"llvm.x86.ssse3.psign.w.128\")\n         },\n+        \"_sign_epi32\" => Intrinsic {\n+            inputs: vec![v(i(32), 4), v(i(32), 4)],\n+            output: v(i(32), 4),\n+            definition: Named(\"llvm.x86.ssse3.psign.d.128\")\n+        },\n         \"_dp_ps\" => Intrinsic {\n             inputs: vec![v(f(32), 4), v(f(32), 4), i_(32, 8)],\n             output: v(f(32), 4),\n@@ -348,7 +353,7 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n         \"_mul_epi32\" => Intrinsic {\n             inputs: vec![v(i(32), 4), v(i(32), 4)],\n             output: v(i(64), 2),\n-            definition: Named(\"llvm.x86.sse41.muldq\")\n+            definition: Named(\"llvm.x86.sse41.pmuldq\")\n         },\n         \"_packus_epi32\" => Intrinsic {\n             inputs: vec![v(i(32), 4), v(i(32), 4)],\n@@ -360,10 +365,10 @@ pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: i(32),\n             definition: Named(\"llvm.x86.sse41.ptestc\")\n         },\n-        \"_testncz_si128\" => Intrinsic {\n+        \"_testnzc_si128\" => Intrinsic {\n             inputs: vec![v(u(64), 2), v(u(64), 2)],\n             output: i(32),\n-            definition: Named(\"llvm.x86.sse41.ptest.nzc\")\n+            definition: Named(\"llvm.x86.sse41.ptestnzc\")\n         },\n         \"_testz_si128\" => Intrinsic {\n             inputs: vec![v(u(64), 2), v(u(64), 2)],"}, {"sha": "87a73c4d0a26771c06577605a502067deadfb120", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "patch": "@@ -501,14 +501,9 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             debug!(\"const_expr_unadjusted: te1={}, ty={:?}\",\n                    cx.tn().val_to_string(te1),\n                    ty);\n-            let is_simd = ty.is_simd();\n-            let intype = if is_simd {\n-                ty.simd_type(cx.tcx())\n-            } else {\n-                ty\n-            };\n-            let is_float = intype.is_fp();\n-            let signed = intype.is_signed();\n+            assert!(!ty.is_simd());\n+            let is_float = ty.is_fp();\n+            let signed = ty.is_signed();\n \n             let (te2, _) = const_expr(cx, &**e2, param_substs, fn_args);\n \n@@ -552,14 +547,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                         ConstFCmp(cmp, te1, te2)\n                     } else {\n                         let cmp = base::bin_op_to_icmp_predicate(cx, b.node, signed);\n-                        let bool_val = ConstICmp(cmp, te1, te2);\n-                        if is_simd {\n-                            // LLVM outputs an `< size x i1 >`, so we need to perform\n-                            // a sign extension to get the correctly sized type.\n-                            llvm::LLVMConstIntCast(bool_val, val_ty(te1).to_ref(), True)\n-                        } else {\n-                            bool_val\n-                        }\n+                        ConstICmp(cmp, te1, te2)\n                     }\n                 },\n             } } // unsafe { match b.node {"}, {"sha": "b4472881389ba726040af1a22fbec5c2c3e22cbd", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=4ad128b95c2ed2bfbad56645bfe9ac2e14c3152d", "patch": "@@ -1693,14 +1693,9 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_eager_binop\");\n \n     let tcx = bcx.tcx();\n-    let is_simd = lhs_t.is_simd();\n-    let intype = if is_simd {\n-        lhs_t.simd_type(tcx)\n-    } else {\n-        lhs_t\n-    };\n-    let is_float = intype.is_fp();\n-    let is_signed = intype.is_signed();\n+    assert!(!lhs_t.is_simd());\n+    let is_float = lhs_t.is_fp();\n+    let is_signed = lhs_t.is_signed();\n     let info = expr_info(binop_expr);\n \n     let binop_debug_loc = binop_expr.debug_loc();\n@@ -1710,8 +1705,6 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n       ast::BiAdd => {\n         if is_float {\n             FAdd(bcx, lhs, rhs, binop_debug_loc)\n-        } else if is_simd {\n-            Add(bcx, lhs, rhs, binop_debug_loc)\n         } else {\n             let (newbcx, res) = with_overflow_check(\n                 bcx, OverflowOp::Add, info, lhs_t, lhs, rhs, binop_debug_loc);\n@@ -1722,8 +1715,6 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n       ast::BiSub => {\n         if is_float {\n             FSub(bcx, lhs, rhs, binop_debug_loc)\n-        } else if is_simd {\n-            Sub(bcx, lhs, rhs, binop_debug_loc)\n         } else {\n             let (newbcx, res) = with_overflow_check(\n                 bcx, OverflowOp::Sub, info, lhs_t, lhs, rhs, binop_debug_loc);\n@@ -1734,8 +1725,6 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n       ast::BiMul => {\n         if is_float {\n             FMul(bcx, lhs, rhs, binop_debug_loc)\n-        } else if is_simd {\n-            Mul(bcx, lhs, rhs, binop_debug_loc)\n         } else {\n             let (newbcx, res) = with_overflow_check(\n                 bcx, OverflowOp::Mul, info, lhs_t, lhs, rhs, binop_debug_loc);\n@@ -1828,11 +1817,7 @@ fn trans_eager_binop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n           res\n       }\n       ast::BiEq | ast::BiNe | ast::BiLt | ast::BiGe | ast::BiLe | ast::BiGt => {\n-        if is_simd {\n-            base::compare_simd_types(bcx, lhs, rhs, intype, val_ty(lhs), op.node, binop_debug_loc)\n-        } else {\n-            base::compare_scalar_types(bcx, lhs, rhs, intype, op.node, binop_debug_loc)\n-        }\n+          base::compare_scalar_types(bcx, lhs, rhs, lhs_t, op.node, binop_debug_loc)\n       }\n       _ => {\n         bcx.tcx().sess.span_bug(binop_expr.span, \"unexpected binop\");\n@@ -2533,14 +2518,7 @@ fn build_unchecked_rshift<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let rhs = base::cast_shift_expr_rhs(bcx, ast::BinOp_::BiShr, lhs, rhs);\n     // #1877, #10183: Ensure that input is always valid\n     let rhs = shift_mask_rhs(bcx, rhs, binop_debug_loc);\n-    let tcx = bcx.tcx();\n-    let is_simd = lhs_t.is_simd();\n-    let intype = if is_simd {\n-        lhs_t.simd_type(tcx)\n-    } else {\n-        lhs_t\n-    };\n-    let is_signed = intype.is_signed();\n+    let is_signed = lhs_t.is_signed();\n     if is_signed {\n         AShr(bcx, lhs, rhs, binop_debug_loc)\n     } else {"}]}