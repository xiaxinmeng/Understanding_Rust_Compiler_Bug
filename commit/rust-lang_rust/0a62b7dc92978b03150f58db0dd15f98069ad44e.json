{"sha": "0a62b7dc92978b03150f58db0dd15f98069ad44e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNjJiN2RjOTI5NzhiMDMxNTBmNThkYjBkZDE1Zjk4MDY5YWQ0NGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-31T08:21:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-31T09:56:08Z"}, "message": "make some vec_deque tests less exhaustive in Miri", "tree": {"sha": "45e9e4acf296924fa11cb65190548c79b9315c7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45e9e4acf296924fa11cb65190548c79b9315c7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a62b7dc92978b03150f58db0dd15f98069ad44e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a62b7dc92978b03150f58db0dd15f98069ad44e", "html_url": "https://github.com/rust-lang/rust/commit/0a62b7dc92978b03150f58db0dd15f98069ad44e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a62b7dc92978b03150f58db0dd15f98069ad44e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b97dca3c8ab51f8af7b2db7ae4c8061fbf5e9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b97dca3c8ab51f8af7b2db7ae4c8061fbf5e9b", "html_url": "https://github.com/rust-lang/rust/commit/66b97dca3c8ab51f8af7b2db7ae4c8061fbf5e9b"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "d74f91c752c0407778b18520da2a7d335764df54", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a62b7dc92978b03150f58db0dd15f98069ad44e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a62b7dc92978b03150f58db0dd15f98069ad44e/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=0a62b7dc92978b03150f58db0dd15f98069ad44e", "patch": "@@ -107,7 +107,8 @@ fn test_insert() {\n     let cap = tester.capacity();\n \n     // len is the length *after* insertion\n-    for len in 1..cap {\n+    let minlen = if cfg!(miri) { cap - 1 } else { 1 }; // Miri is too slow\n+    for len in minlen..cap {\n         // 0, 1, 2, .., len - 1\n         let expected = (0..).take(len).collect::<VecDeque<_>>();\n         for tail_pos in 0..cap {\n@@ -221,7 +222,8 @@ fn test_remove() {\n     let cap = tester.capacity();\n \n     // len is the length *after* removal\n-    for len in 0..cap - 1 {\n+    let minlen = if cfg!(miri) { cap - 2 } else { 0 }; // Miri is too slow\n+    for len in minlen..cap - 1 {\n         // 0, 1, 2, .., len - 1\n         let expected = (0..).take(len).collect::<VecDeque<_>>();\n         for tail_pos in 0..cap {\n@@ -251,7 +253,8 @@ fn test_range() {\n     let mut tester: VecDeque<usize> = VecDeque::with_capacity(7);\n \n     let cap = tester.capacity();\n-    for len in 0..=cap {\n+    let minlen = if cfg!(miri) { cap - 1 } else { 0 }; // Miri is too slow\n+    for len in minlen..=cap {\n         for tail in 0..=cap {\n             for start in 0..=len {\n                 for end in start..=len {\n@@ -384,7 +387,8 @@ fn test_split_off() {\n     let cap = tester.capacity();\n \n     // len is the length *before* splitting\n-    for len in 0..cap {\n+    let minlen = if cfg!(miri) { cap - 1 } else { 0 }; // Miri is too slow\n+    for len in minlen..cap {\n         // index to split at\n         for at in 0..=len {\n             // 0, 1, 2, .., at - 1 (may be empty)\n@@ -495,8 +499,9 @@ fn test_vec_from_vecdeque() {\n fn test_clone_from() {\n     let m = vec![1; 8];\n     let n = vec![2; 12];\n-    for pfv in 0..8 {\n-        for pfu in 0..8 {\n+    let limit = if cfg!(miri) { 4 } else { 8 }; // Miri is too slow\n+    for pfv in 0..limit {\n+        for pfu in 0..limit {\n             for longer in 0..2 {\n                 let (vr, ur) = if longer == 0 { (&m, &n) } else { (&n, &m) };\n                 let mut v = VecDeque::from(vr.clone());"}]}