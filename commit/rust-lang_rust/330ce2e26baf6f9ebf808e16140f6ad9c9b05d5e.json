{"sha": "330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMGNlMmUyNmJhZjZmOWViZjgwOGUxNjE0MGY2YWQ5YzliMDVkNWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T20:49:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T20:50:02Z"}, "message": "complete patterns", "tree": {"sha": "b075e5b36542d9cdbdefb7207c01858a68201940", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b075e5b36542d9cdbdefb7207c01858a68201940"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e", "html_url": "https://github.com/rust-lang/rust/commit/330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfca3cbeb0680ad1e3694d442b6c761fe3007521", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfca3cbeb0680ad1e3694d442b6c761fe3007521", "html_url": "https://github.com/rust-lang/rust/commit/dfca3cbeb0680ad1e3694d442b6c761fe3007521"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "c8022f94fd59040546918b03388c3a98ab3fe31f", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e", "patch": "@@ -4,6 +4,7 @@ mod presentation;\n \n mod complete_dot;\n mod complete_struct_literal;\n+mod complete_pattern;\n mod complete_fn_param;\n mod complete_keyword;\n mod complete_snippet;\n@@ -65,6 +66,7 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n     complete_scope::complete_scope(&mut acc, &ctx);\n     complete_dot::complete_dot(&mut acc, &ctx);\n     complete_struct_literal::complete_struct_literal(&mut acc, &ctx);\n+    complete_pattern::complete_pattern(&mut acc, &ctx);\n     complete_postfix::complete_postfix(&mut acc, &ctx);\n     Some(acc)\n }"}, {"sha": "3cf79c080fb5517f418998a183f775a71c99f512", "filename": "crates/ra_ide_api/src/completion/complete_pattern.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e", "patch": "@@ -0,0 +1,87 @@\n+use crate::completion::{CompletionContext, Completions};\n+\n+/// Completes constats and paths in patterns.\n+pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n+    if !ctx.is_pat_binding {\n+        return;\n+    }\n+    // TODO: ideally, we should look at the type we are matching against and\n+    // suggest variants + auto-imports\n+    let names = ctx.resolver.all_names(ctx.db);\n+    for (name, res) in names.into_iter() {\n+        let r = res.as_ref();\n+        let def = match r.take_types().or(r.take_values()) {\n+            Some(hir::Resolution::Def(def)) => def,\n+            _ => continue,\n+        };\n+        match def {\n+            hir::ModuleDef::Enum(..)\n+            | hir::ModuleDef::EnumVariant(..)\n+            | hir::ModuleDef::Const(..)\n+            | hir::ModuleDef::Module(..) => (),\n+            _ => continue,\n+        }\n+        acc.add_resolution(ctx, name.to_string(), &res)\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use insta::assert_debug_snapshot_matches;\n+    use crate::completion::{CompletionItem, CompletionKind, do_completion};\n+\n+    fn complete(code: &str) -> Vec<CompletionItem> {\n+        do_completion(code, CompletionKind::Reference)\n+    }\n+\n+    #[test]\n+    fn completes_enum_variants_and_modules() {\n+        let completions = complete(\n+            r\"\n+            enum E { X }\n+            use self::E::X;\n+            const Z: E = E::X;\n+            mod m {}\n+\n+            static FOO: E = E::X;\n+            struct Bar { f: u32 }\n+\n+            fn foo() {\n+               match E::X {\n+                   <|>\n+               }\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot_matches!(completions, @r###\"[\n+    CompletionItem {\n+        label: \"E\",\n+        source_range: [246; 246),\n+        delete: [246; 246),\n+        insert: \"E\",\n+        kind: Enum\n+    },\n+    CompletionItem {\n+        label: \"X\",\n+        source_range: [246; 246),\n+        delete: [246; 246),\n+        insert: \"X\",\n+        kind: EnumVariant\n+    },\n+    CompletionItem {\n+        label: \"Z\",\n+        source_range: [246; 246),\n+        delete: [246; 246),\n+        insert: \"Z\",\n+        kind: Const\n+    },\n+    CompletionItem {\n+        label: \"m\",\n+        source_range: [246; 246),\n+        delete: [246; 246),\n+        insert: \"m\",\n+        kind: Module\n+    }\n+]\"###);\n+    }\n+}"}, {"sha": "724d0dfbf5606c068957736ee9051e3b39f4f39b", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=330ce2e26baf6f9ebf808e16140f6ad9c9b05d5e", "patch": "@@ -23,6 +23,9 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) use_item_syntax: Option<&'a ast::UseItem>,\n     pub(super) struct_lit_syntax: Option<&'a ast::StructLit>,\n     pub(super) is_param: bool,\n+    /// If a name-binding or reference to a const in a pattern.\n+    /// Irrefutable patterns (like let) are excluded.\n+    pub(super) is_pat_binding: bool,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial, path, the prefix (qualifier).\n@@ -58,6 +61,7 @@ impl<'a> CompletionContext<'a> {\n             use_item_syntax: None,\n             struct_lit_syntax: None,\n             is_param: false,\n+            is_pat_binding: false,\n             is_trivial_path: false,\n             path_prefix: None,\n             after_if: false,\n@@ -102,12 +106,22 @@ impl<'a> CompletionContext<'a> {\n         // Otherwise, see if this is a declaration. We can use heuristics to\n         // suggest declaration names, see `CompletionKind::Magic`.\n         if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), offset) {\n+            if is_node::<ast::BindPat>(name.syntax()) {\n+                let bind_pat = name.syntax().ancestors().find_map(ast::BindPat::cast).unwrap();\n+                let parent = bind_pat.syntax().parent();\n+                if parent.and_then(ast::MatchArm::cast).is_some()\n+                    || parent.and_then(ast::Condition::cast).is_some()\n+                {\n+                    self.is_pat_binding = true;\n+                }\n+            }\n             if is_node::<ast::Param>(name.syntax()) {\n                 self.is_param = true;\n                 return;\n             }\n         }\n     }\n+\n     fn classify_name_ref(&mut self, original_file: &'a SourceFile, name_ref: &ast::NameRef) {\n         let name_range = name_ref.syntax().range();\n         if name_ref.syntax().parent().and_then(ast::NamedField::cast).is_some() {"}]}