{"sha": "c3825cbb9dfd5605c507055c40e769a5f6800bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzODI1Y2JiOWRmZDU2MDVjNTA3MDU1YzQwZTc2OWE1ZjY4MDBiYWI=", "commit": {"author": {"name": "Jonathan Reem", "email": "jonathan.reem@gmail.com", "date": "2014-05-31T02:03:17Z"}, "committer": {"name": "Jonathan Reem", "email": "jonathan.reem@gmail.com", "date": "2014-05-31T04:30:20Z"}, "message": "Remove deprecated owned vector from intro.", "tree": {"sha": "21e4264280eef2ddaf8ff238acea8f7edecc8b3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21e4264280eef2ddaf8ff238acea8f7edecc8b3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3825cbb9dfd5605c507055c40e769a5f6800bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3825cbb9dfd5605c507055c40e769a5f6800bab", "html_url": "https://github.com/rust-lang/rust/commit/c3825cbb9dfd5605c507055c40e769a5f6800bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3825cbb9dfd5605c507055c40e769a5f6800bab/comments", "author": {"login": "reem", "id": 4745181, "node_id": "MDQ6VXNlcjQ3NDUxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/4745181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem", "html_url": "https://github.com/reem", "followers_url": "https://api.github.com/users/reem/followers", "following_url": "https://api.github.com/users/reem/following{/other_user}", "gists_url": "https://api.github.com/users/reem/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem/subscriptions", "organizations_url": "https://api.github.com/users/reem/orgs", "repos_url": "https://api.github.com/users/reem/repos", "events_url": "https://api.github.com/users/reem/events{/privacy}", "received_events_url": "https://api.github.com/users/reem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reem", "id": 4745181, "node_id": "MDQ6VXNlcjQ3NDUxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/4745181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reem", "html_url": "https://github.com/reem", "followers_url": "https://api.github.com/users/reem/followers", "following_url": "https://api.github.com/users/reem/following{/other_user}", "gists_url": "https://api.github.com/users/reem/gists{/gist_id}", "starred_url": "https://api.github.com/users/reem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reem/subscriptions", "organizations_url": "https://api.github.com/users/reem/orgs", "repos_url": "https://api.github.com/users/reem/repos", "events_url": "https://api.github.com/users/reem/events{/privacy}", "received_events_url": "https://api.github.com/users/reem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0033a8b269aebe9d88e5e4158ef2f0cdd630e92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0033a8b269aebe9d88e5e4158ef2f0cdd630e92f", "html_url": "https://github.com/rust-lang/rust/commit/0033a8b269aebe9d88e5e4158ef2f0cdd630e92f"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "0e9114d7b76322a4b3df2785e599f889399618ed", "filename": "src/doc/intro.md", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c3825cbb9dfd5605c507055c40e769a5f6800bab/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3825cbb9dfd5605c507055c40e769a5f6800bab/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=c3825cbb9dfd5605c507055c40e769a5f6800bab", "patch": "@@ -198,14 +198,14 @@ Typically, tasks do not share memory but instead communicate amongst each other\n \n ```\n fn main() {\n-    let numbers = ~[1,2,3];\n+    let numbers = vec![1,2,3];\n \n     let (tx, rx)  = channel();\n     tx.send(numbers);\n \n     spawn(proc() {\n         let numbers = rx.recv();\n-        println!(\"{}\", numbers[0]);\n+        println!(\"{}\", *numbers.get(0));\n     })\n }\n ```\n@@ -237,26 +237,26 @@ try to modify the previous example to continue using the variable `numbers`:\n \n ```ignore\n fn main() {\n-    let numbers = ~[1,2,3];\n+    let numbers = vec![1,2,3];\n \n     let (tx, rx)  = channel();\n     tx.send(numbers);\n \n     spawn(proc() {\n         let numbers = rx.recv();\n-        println!(\"{}\", numbers[0]);\n+        println!(\"{}\", numbers.get(0));\n     });\n \n     // Try to print a number from the original task\n-    println!(\"{}\", numbers[0]);\n+    println!(\"{}\", *numbers.get(0));\n }\n ```\n \n This will result an error indicating that the value is no longer in scope:\n \n ```notrust\n concurrency.rs:12:20: 12:27 error: use of moved value: 'numbers'\n-concurrency.rs:12     println!(\"{}\", numbers[0]);\n+concurrency.rs:12     println!(\"{}\", numbers.get(0));\n                                      ^~~~~~~\n ```\n \n@@ -267,7 +267,7 @@ Let's see an example that uses the `clone` method to create copies of the data:\n \n ```\n fn main() {\n-    let numbers = ~[1,2,3];\n+    let numbers = vec![1,2,3];\n \n     for num in range(0, 3) {\n         let (tx, rx)  = channel();\n@@ -276,7 +276,7 @@ fn main() {\n \n         spawn(proc() {\n             let numbers = rx.recv();\n-            println!(\"{:d}\", numbers[num as uint]);\n+            println!(\"{:d}\", *numbers.get(num as uint));\n         })\n     }\n }\n@@ -301,7 +301,7 @@ extern crate sync;\n use sync::Arc;\n \n fn main() {\n-    let numbers = ~[1,2,3];\n+    let numbers = vec![1,2,3];\n     let numbers = Arc::new(numbers);\n \n     for num in range(0, 3) {\n@@ -310,7 +310,7 @@ fn main() {\n \n         spawn(proc() {\n             let numbers = rx.recv();\n-            println!(\"{:d}\", numbers[num as uint]);\n+            println!(\"{:d}\", *numbers.get(num as uint));\n         })\n     }\n }\n@@ -348,7 +348,7 @@ extern crate sync;\n use sync::{Arc, Mutex};\n \n fn main() {\n-    let numbers = ~[1,2,3];\n+    let numbers = vec![1,2,3];\n     let numbers_lock = Arc::new(Mutex::new(numbers));\n \n     for num in range(0, 3) {\n@@ -360,9 +360,13 @@ fn main() {\n \n             // Take the lock, along with exclusive access to the underlying array\n             let mut numbers = numbers_lock.lock();\n-            numbers[num as uint] += 1;\n \n-            println!(\"{}\", numbers[num as uint]);\n+            // This is ugly for now, but will be replaced by\n+            // `numbers[num as uint] += 1` in the near future.\n+            // See: https://github.com/mozilla/rust/issues/6515\n+            *numbers.get_mut(num as uint) = *numbers.get_mut(num as uint) + 1;\n+\n+            println!(\"{}\", *numbers.get(num as uint));\n \n             // When `numbers` goes out of scope the lock is dropped\n         })"}]}