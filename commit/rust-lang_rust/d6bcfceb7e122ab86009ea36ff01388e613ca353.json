{"sha": "d6bcfceb7e122ab86009ea36ff01388e613ca353", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YmNmY2ViN2UxMjJhYjg2MDA5ZWEzNmZmMDEzODhlNjEzY2EzNTM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-05-27T08:33:19Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2016-05-27T08:33:19Z"}, "message": "Don't put a newline before `?` when it is the second sub-expression in a chain (#1012)\n\nFixes #1003", "tree": {"sha": "d07a24b1dc2d449351e5ab8a6e17c156e9623a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d07a24b1dc2d449351e5ab8a6e17c156e9623a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6bcfceb7e122ab86009ea36ff01388e613ca353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6bcfceb7e122ab86009ea36ff01388e613ca353", "html_url": "https://github.com/rust-lang/rust/commit/d6bcfceb7e122ab86009ea36ff01388e613ca353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6bcfceb7e122ab86009ea36ff01388e613ca353/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775de8a62b3c19521543cb6b9130979eb6747c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/775de8a62b3c19521543cb6b9130979eb6747c75", "html_url": "https://github.com/rust-lang/rust/commit/775de8a62b3c19521543cb6b9130979eb6747c75"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "faf368d41c19d758ca53e32ea8fe4368d4415edb", "filename": "src/chains.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6bcfceb7e122ab86009ea36ff01388e613ca353/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bcfceb7e122ab86009ea36ff01388e613ca353/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=d6bcfceb7e122ab86009ea36ff01388e613ca353", "patch": "@@ -179,7 +179,9 @@ pub fn rewrite_chain(expr: &ast::Expr,\n         format!(\"\\n{}\", indent.to_string(context.config))\n     };\n \n-    let first_connector = if extend {\n+    let first_connector = if extend || subexpr_list.len() == 0 {\n+        \"\"\n+    } else if let ast::ExprKind::Try(_) = subexpr_list[0].node {\n         \"\"\n     } else {\n         &*connector"}, {"sha": "66c982082e7b7f711de436d36e8e475290cfa225", "filename": "tests/source/chains.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6bcfceb7e122ab86009ea36ff01388e613ca353/tests%2Fsource%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bcfceb7e122ab86009ea36ff01388e613ca353/tests%2Fsource%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fchains.rs?ref=d6bcfceb7e122ab86009ea36ff01388e613ca353", "patch": "@@ -124,4 +124,12 @@ fn try_shorthand() {\n     let y = a.very .loooooooooooooooooooooooooooooooooooooong()  .chain()\n              .inside()          .weeeeeeeeeeeeeee()? .test()  .0\n         .x;\n+\n+                parameterized(f,\n+                              substs,\n+                              def_id,\n+                              Ns::Value,\n+                              &[],\n+                              |tcx| tcx.lookup_item_type(def_id).generics)?;\n+    fooooooooooooooooooooooooooo()?.bar()?.baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz()?;\n }"}, {"sha": "3004946fb56543f62b32f9bf9519e0b764b15f4e", "filename": "tests/target/chains.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6bcfceb7e122ab86009ea36ff01388e613ca353/tests%2Ftarget%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6bcfceb7e122ab86009ea36ff01388e613ca353/tests%2Ftarget%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains.rs?ref=d6bcfceb7e122ab86009ea36ff01388e613ca353", "patch": "@@ -151,4 +151,14 @@ fn try_shorthand() {\n         .test()\n         .0\n         .x;\n+\n+    parameterized(f,\n+                  substs,\n+                  def_id,\n+                  Ns::Value,\n+                  &[],\n+                  |tcx| tcx.lookup_item_type(def_id).generics)?;\n+    fooooooooooooooooooooooooooo()?\n+        .bar()?\n+        .baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaz()?;\n }"}]}