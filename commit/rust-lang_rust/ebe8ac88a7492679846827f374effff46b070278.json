{"sha": "ebe8ac88a7492679846827f374effff46b070278", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZThhYzg4YTc0OTI2Nzk4NDY4MjdmMzc0ZWZmZmY0NmIwNzAyNzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-05T03:34:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-10T23:13:12Z"}, "message": "librustdoc: Don't use `finally`, shaving off a `Cell`.", "tree": {"sha": "87557253454979f6cff5ba43f849bec7ffa9f052", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87557253454979f6cff5ba43f849bec7ffa9f052"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebe8ac88a7492679846827f374effff46b070278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe8ac88a7492679846827f374effff46b070278", "html_url": "https://github.com/rust-lang/rust/commit/ebe8ac88a7492679846827f374effff46b070278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebe8ac88a7492679846827f374effff46b070278/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd6750570cf1434264a601fd2b749d7fe01dee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd6750570cf1434264a601fd2b749d7fe01dee8", "html_url": "https://github.com/rust-lang/rust/commit/fdd6750570cf1434264a601fd2b749d7fe01dee8"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "f988cad50043633a1709ae9a192e0b4177dfae78", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ebe8ac88a7492679846827f374effff46b070278/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebe8ac88a7492679846827f374effff46b070278/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ebe8ac88a7492679846827f374effff46b070278", "patch": "@@ -46,7 +46,6 @@ use std::io::File;\n use std::os;\n use std::str;\n use std::task;\n-use std::unstable::finally::Finally;\n use std::vec;\n \n use extra::arc::RWArc;\n@@ -642,6 +641,22 @@ impl<'self> Cache {\n     }\n }\n \n+enum Progress {\n+    JobNew,\n+    JobDone,\n+}\n+\n+/// A helper object to unconditionally send a value on a chanel.\n+struct ChannelGuard {\n+    channel: SharedChan<Progress>,\n+}\n+\n+impl Drop for ChannelGuard {\n+    fn drop(&mut self) {\n+        self.channel.send(JobDone)\n+    }\n+}\n+\n impl Context {\n     /// Recurse in the directory structure and change the \"root path\" to make\n     /// sure it always points to the top (relatively)\n@@ -674,8 +689,6 @@ impl Context {\n             Die,\n             Process(Context, clean::Item),\n         }\n-        enum Progress { JobNew, JobDone }\n-\n         let workers = match os::getenv(\"RUSTDOC_WORKERS\") {\n             Some(s) => {\n                 match from_str::<uint>(s) {\n@@ -725,16 +738,15 @@ impl Context {\n                     match port.recv() {\n                         Process(cx, item) => {\n                             let mut cx = cx;\n-                            let item = Cell::new(item);\n-                            (|| {\n-                                cx.item(item.take(), |cx, item| {\n-                                    prog_chan.send(JobNew);\n-                                    chan.send(Process(cx.clone(), item));\n-                                })\n-                            }).finally(|| {\n-                                // If we fail, everything else should still get\n-                                // completed\n-                                prog_chan.send(JobDone);\n+\n+                            // If we fail, everything else should still get\n+                            // completed.\n+                            let _guard = ChannelGuard {\n+                                channel: prog_chan.clone(),\n+                            };\n+                            cx.item(item, |cx, item| {\n+                                prog_chan.send(JobNew);\n+                                chan.send(Process(cx.clone(), item));\n                             })\n                         }\n                         Die => break,"}]}