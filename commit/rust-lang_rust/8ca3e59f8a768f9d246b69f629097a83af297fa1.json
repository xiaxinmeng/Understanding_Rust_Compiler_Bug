{"sha": "8ca3e59f8a768f9d246b69f629097a83af297fa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYTNlNTlmOGE3NjhmOWQyNDZiNjlmNjI5MDk3YTgzYWYyOTdmYTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-03T20:26:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-03T20:26:13Z"}, "message": "Rollup merge of #69650 - matthiaskrgr:clnp, r=varkor\n\ncleanup more iterator usages (and other things)\n\n* Improve weird formatting by moving comment inside else-code block.\n* Use .any(x) instead of .find(x).is_some() on iterators.\n* Use .nth(x) instead of .skip(x).next() on iterators.\n* Simplify conditions like  x + 1 <= y   to   x < y\n* Use let instead of match to get value of enum with single variant.", "tree": {"sha": "f8b051e5e83ec116e5d1cd48457679225dc35849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8b051e5e83ec116e5d1cd48457679225dc35849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ca3e59f8a768f9d246b69f629097a83af297fa1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeXr1lCRBK7hj4Ov3rIwAAdHIIAExCJOSHDu1atn97axhGIfw1\nGi6iU/7vmzgfRH4WV75un/Dws0F6shf/Q8XtVq1124ZFkacCDnNlanDTj1c3/3kH\n5OOdqFm4PC8qc6GSfagt8PEumIFaLoAkUDC4PRDw12DfhZRaEm9BXZn9CWa7N/HU\ngYc0bv5yVAdcQIMqkHOV39XmsETj339hfdfnpsrovWXDo/aHUlRg0rI+FIty3ohC\npXky8tVyEaKCiTfg5pzGK5ct4VdhJqk7YjlcupTb4F1Sjo23tzS7/JwhbNO0km04\niikmiGS8YocDw0gYhn0NwLnlWT1lVVg+2n1hP79tI1zgYMWptePS26a8j8nGCSA=\n=x/JA\n-----END PGP SIGNATURE-----\n", "payload": "tree f8b051e5e83ec116e5d1cd48457679225dc35849\nparent 2cfab735941e336946e339297c83e4a8cc88a1d1\nparent 10183851fbfa68241a5eeaf9b3cc575172731a6d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1583267173 +0100\ncommitter GitHub <noreply@github.com> 1583267173 +0100\n\nRollup merge of #69650 - matthiaskrgr:clnp, r=varkor\n\ncleanup more iterator usages (and other things)\n\n* Improve weird formatting by moving comment inside else-code block.\n* Use .any(x) instead of .find(x).is_some() on iterators.\n* Use .nth(x) instead of .skip(x).next() on iterators.\n* Simplify conditions like  x + 1 <= y   to   x < y\n* Use let instead of match to get value of enum with single variant.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca3e59f8a768f9d246b69f629097a83af297fa1", "html_url": "https://github.com/rust-lang/rust/commit/8ca3e59f8a768f9d246b69f629097a83af297fa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ca3e59f8a768f9d246b69f629097a83af297fa1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cfab735941e336946e339297c83e4a8cc88a1d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cfab735941e336946e339297c83e4a8cc88a1d1", "html_url": "https://github.com/rust-lang/rust/commit/2cfab735941e336946e339297c83e4a8cc88a1d1"}, {"sha": "10183851fbfa68241a5eeaf9b3cc575172731a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/10183851fbfa68241a5eeaf9b3cc575172731a6d", "html_url": "https://github.com/rust-lang/rust/commit/10183851fbfa68241a5eeaf9b3cc575172731a6d"}], "stats": {"total": 43, "additions": 16, "deletions": 27}, "files": [{"sha": "362755f8b7f63d36b16ef1627e4ec81909f80234", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=8ca3e59f8a768f9d246b69f629097a83af297fa1", "patch": "@@ -1191,7 +1191,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n         let right_len = right_node.len();\n \n         // necessary for correctness, but in a private module\n-        assert!(left_len + right_len + 1 <= CAPACITY);\n+        assert!(left_len + right_len < CAPACITY);\n \n         unsafe {\n             ptr::write("}, {"sha": "36818020569b0455e184e44425b9f549632cbbd4", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=8ca3e59f8a768f9d246b69f629097a83af297fa1", "patch": "@@ -189,7 +189,7 @@ impl<'tcx> Body<'tcx> {\n     ) -> Self {\n         // We need `arg_count` locals, and one for the return place.\n         assert!(\n-            local_decls.len() >= arg_count + 1,\n+            local_decls.len() > arg_count,\n             \"expected at least {} locals, got {}\",\n             arg_count + 1,\n             local_decls.len()"}, {"sha": "0dd2f029e8d32ac30ac35c9e6f47d8be73f5f4bc", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=8ca3e59f8a768f9d246b69f629097a83af297fa1", "patch": "@@ -186,7 +186,7 @@ pub fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> (PathB\n     if flavor == LinkerFlavor::Msvc && t.target_vendor == \"uwp\" {\n         if let Some(ref tool) = msvc_tool {\n             let original_path = tool.path();\n-            if let Some(ref root_lib_path) = original_path.ancestors().skip(4).next() {\n+            if let Some(ref root_lib_path) = original_path.ancestors().nth(4) {\n                 let arch = match t.arch.as_str() {\n                     \"x86_64\" => Some(\"x64\".to_string()),\n                     \"x86\" => Some(\"x86\".to_string()),"}, {"sha": "d12dedf9e0c7aff343f6f8aceb147a2b526a3f97", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=8ca3e59f8a768f9d246b69f629097a83af297fa1", "patch": "@@ -119,9 +119,9 @@ pub(super) fn transcribe(\n         let tree = if let Some(tree) = stack.last_mut().unwrap().next() {\n             // If it still has a TokenTree we have not looked at yet, use that tree.\n             tree\n-        }\n-        // The else-case never produces a value for `tree` (it `continue`s or `return`s).\n-        else {\n+        } else {\n+            // This else-case never produces a value for `tree` (it `continue`s or `return`s).\n+\n             // Otherwise, if we have just reached the end of a sequence and we can keep repeating,\n             // go back to the beginning of the sequence.\n             if let Frame::Sequence { idx, sep, .. } = stack.last_mut().unwrap() {"}, {"sha": "d05955fb858c0c3eda3c309f5a80a1527db5a94d", "filename": "src/librustc_infer/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8ca3e59f8a768f9d246b69f629097a83af297fa1", "patch": "@@ -401,9 +401,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n             let refs_number =\n                 snippet.chars().filter(|c| !c.is_whitespace()).take_while(|c| *c == '&').count();\n-            if let Some('\\'') =\n-                snippet.chars().filter(|c| !c.is_whitespace()).skip(refs_number).next()\n-            {\n+            if let Some('\\'') = snippet.chars().filter(|c| !c.is_whitespace()).nth(refs_number) {\n                 // Do not suggest removal of borrow from type arguments.\n                 return;\n             }\n@@ -464,9 +462,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n             let refs_number =\n                 snippet.chars().filter(|c| !c.is_whitespace()).take_while(|c| *c == '&').count();\n-            if let Some('\\'') =\n-                snippet.chars().filter(|c| !c.is_whitespace()).skip(refs_number).next()\n-            {\n+            if let Some('\\'') = snippet.chars().filter(|c| !c.is_whitespace()).nth(refs_number) {\n                 // Do not suggest removal of borrow from type arguments.\n                 return;\n             }"}, {"sha": "862a7ef1e73c091a58f5c2dc1b494f1b08f0ad13", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=8ca3e59f8a768f9d246b69f629097a83af297fa1", "patch": "@@ -824,11 +824,8 @@ fn find_vtable_types_for_unsizing<'tcx>(\n         (&ty::Adt(source_adt_def, source_substs), &ty::Adt(target_adt_def, target_substs)) => {\n             assert_eq!(source_adt_def, target_adt_def);\n \n-            let kind = monomorphize::custom_coerce_unsize_info(tcx, source_ty, target_ty);\n-\n-            let coerce_index = match kind {\n-                CustomCoerceUnsized::Struct(i) => i,\n-            };\n+            let CustomCoerceUnsized::Struct(coerce_index) =\n+                monomorphize::custom_coerce_unsize_info(tcx, source_ty, target_ty);\n \n             let source_fields = &source_adt_def.non_enum_variant().fields;\n             let target_fields = &target_adt_def.non_enum_variant().fields;"}, {"sha": "3a2a315a1027dc6b7999095804f7379e761425f5", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=8ca3e59f8a768f9d246b69f629097a83af297fa1", "patch": "@@ -236,8 +236,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     //\n                     // FIXME? Other potential candidate methods: `as_ref` and\n                     // `as_mut`?\n-                    .find(|a| a.check_name(sym::rustc_conversion_suggestion))\n-                    .is_some()\n+                    .any(|a| a.check_name(sym::rustc_conversion_suggestion))\n         });\n \n         methods"}, {"sha": "778eee3586b4bc69644280bb3911e3ce01c1b971", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca3e59f8a768f9d246b69f629097a83af297fa1/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=8ca3e59f8a768f9d246b69f629097a83af297fa1", "patch": "@@ -23,14 +23,11 @@ impl InherentOverlapChecker<'tcx> {\n         let impl_items2 = self.tcx.associated_items(impl2);\n \n         for item1 in impl_items1.in_definition_order() {\n-            let collision = impl_items2\n-                .filter_by_name_unhygienic(item1.ident.name)\n-                .find(|item2| {\n-                    // Symbols and namespace match, compare hygienically.\n-                    item1.kind.namespace() == item2.kind.namespace()\n-                        && item1.ident.modern() == item2.ident.modern()\n-                })\n-                .is_some();\n+            let collision = impl_items2.filter_by_name_unhygienic(item1.ident.name).any(|item2| {\n+                // Symbols and namespace match, compare hygienically.\n+                item1.kind.namespace() == item2.kind.namespace()\n+                    && item1.ident.modern() == item2.ident.modern()\n+            });\n \n             if collision {\n                 return true;"}]}