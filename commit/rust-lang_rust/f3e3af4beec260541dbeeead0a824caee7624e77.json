{"sha": "f3e3af4beec260541dbeeead0a824caee7624e77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZTNhZjRiZWVjMjYwNTQxZGJlZWVhZDBhODI0Y2FlZTc2MjRlNzc=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T13:18:13Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T13:18:13Z"}, "message": "adjust to change of 'fn write_os_str_to_wide_str'", "tree": {"sha": "28cb556c2afd42ee6ca9efb813561dce5e907b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28cb556c2afd42ee6ca9efb813561dce5e907b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e3af4beec260541dbeeead0a824caee7624e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e3af4beec260541dbeeead0a824caee7624e77", "html_url": "https://github.com/rust-lang/rust/commit/f3e3af4beec260541dbeeead0a824caee7624e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e3af4beec260541dbeeead0a824caee7624e77/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e38fbe6be6d5c8d67de5ca65ab763f9f314a398", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e38fbe6be6d5c8d67de5ca65ab763f9f314a398", "html_url": "https://github.com/rust-lang/rust/commit/4e38fbe6be6d5c8d67de5ca65ab763f9f314a398"}], "stats": {"total": 52, "additions": 15, "deletions": 37}, "files": [{"sha": "794a1aab422a8274683ad998220867c0366a6e70", "filename": "src/shims/env.rs", "status": "modified", "additions": 15, "deletions": 37, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f3e3af4beec260541dbeeead0a824caee7624e77/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e3af4beec260541dbeeead0a824caee7624e77/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=f3e3af4beec260541dbeeead0a824caee7624e77", "patch": "@@ -25,12 +25,12 @@ impl<'tcx> EnvVars<'tcx> {\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n         mut excluded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n-        if ecx.tcx.sess.target.target.target_os == \"windows\" {\n+        let target_os = ecx.tcx.sess.target.target.target_os.as_str();\n+        if target_os == \"windows\" {\n             // Exclude `TERM` var to avoid terminfo trying to open the termcap file.\n             excluded_env_vars.push(\"TERM\".to_owned());\n         }\n         if ecx.machine.communicate {\n-            let target_os = ecx.tcx.sess.target.target.target_os.as_str();\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n                     let var_ptr = match target_os {\n@@ -68,28 +68,6 @@ fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n     Ok(ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n }\n \n-fn alloc_env_var_as_c_str<'mir, 'tcx>(\n-    name: &OsStr,\n-    value: &OsStr,\n-    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n-) -> InterpResult<'tcx, Pointer<Tag>> {\n-    let mut name_osstring = name.to_os_string();\n-    name_osstring.push(\"=\");\n-    name_osstring.push(value);\n-    Ok(ecx.alloc_os_str_as_c_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n-}\n-\n-fn alloc_env_var_as_wide_str<'mir, 'tcx>(\n-    name: &OsStr,\n-    value: &OsStr,\n-    ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n-) -> InterpResult<'tcx, Pointer<Tag>> {\n-    let mut name_osstring = name.to_os_string();\n-    name_osstring.push(\"=\");\n-    name_osstring.push(value);\n-    Ok(ecx.alloc_os_str_as_wide_str(name_osstring.as_os_str(), MiriMemoryKind::Machine.into()))\n-}\n-\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn getenv(&mut self, name_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n@@ -126,26 +104,26 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let name_offset_bytes =\n                     u64::try_from(name.len()).unwrap().checked_add(1).unwrap().checked_mul(2).unwrap();\n                 let var_ptr = Scalar::from(var_ptr.offset(Size::from_bytes(name_offset_bytes), this)?);\n+                let var = this.read_os_str_from_wide_str(var_ptr)?;\n \n-                let var_size = u64::try_from(this.read_os_str_from_wide_str(var_ptr)?.len()).unwrap();\n+                let buf_ptr = this.read_scalar(buf_op)?.not_undef()?;\n                 // `buf_size` represents the size in characters.\n                 let buf_size = u64::try_from(this.read_scalar(size_op)?.to_u32()?).unwrap();\n-                let return_val = if var_size.checked_add(1).unwrap() > buf_size {\n-                    // If lpBuffer is not large enough to hold the data, the return value is the buffer size, in characters,\n-                    // required to hold the string and its terminating null character and the contents of lpBuffer are undefined.\n-                    var_size + 1\n-                } else {\n-                    let buf_ptr = this.read_scalar(buf_op)?.not_undef()?;\n-                    let bytes_to_be_copied = var_size.checked_add(1).unwrap().checked_mul(2).unwrap();\n-                    this.memory.copy(this.force_ptr(var_ptr)?, this.force_ptr(buf_ptr)?, Size::from_bytes(bytes_to_be_copied), true)?;\n+                let (success, len) = this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?;\n+\n+                if success {\n                     // If the function succeeds, the return value is the number of characters stored in the buffer pointed to by lpBuffer,\n                     // not including the terminating null character.\n-                    var_size\n-                };\n-                return_val\n+                    len\n+                } else {\n+                    // If lpBuffer is not large enough to hold the data, the return value is the buffer size, in characters,\n+                    // required to hold the string and its terminating null character and the contents of lpBuffer are undefined.\n+                    len + 1\n+                }\n             }\n             None => {\n-                this.set_last_error(Scalar::from_u32(203))?; // ERROR_ENVVAR_NOT_FOUND\n+                let envvar_not_found = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"c\", \"ERROR_ENVVAR_NOT_FOUND\"])?;\n+                this.set_last_error(envvar_not_found.not_undef()?)?;\n                 0 // return zero upon failure\n             }\n         })"}]}