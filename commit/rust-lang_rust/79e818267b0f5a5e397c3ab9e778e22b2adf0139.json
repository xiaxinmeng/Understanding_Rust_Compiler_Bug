{"sha": "79e818267b0f5a5e397c3ab9e778e22b2adf0139", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZTgxODI2N2IwZjVhNWUzOTdjM2FiOWU3NzhlMjJiMmFkZjAxMzk=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-04-23T08:36:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-23T08:36:48Z"}, "message": "Merge pull request #2690 from mrecachinas/feature/print-string-literal\n\nFix alignment/precision/width false positives for print/write_literal", "tree": {"sha": "7ebf89ead7828d94510497921936980d859f2d3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ebf89ead7828d94510497921936980d859f2d3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79e818267b0f5a5e397c3ab9e778e22b2adf0139", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa3ZsgCRBK7hj4Ov3rIwAAdHIIAKM/Yh76Hf0t+hP+gf+HEqnL\nALFlOlBs3UiNtZyNrh9EB9uXFUCyou5+kceIwMA/FoSfxCdpT/fQYPdx7amnaIL+\nPtlJN4jlk3ZCEhoCmjgzURQkwBFaeTfGLHw+WCFKmG3F7hTHPJmToQioka9b5zdU\nXC4oTJaIb/rXw8CbEOtHMwbDzS5gwXtn3hWdhJKjUfzueAutGCnROfBvOfioiuB9\nkpt5ao5PsJu5QRd1osok5DIcsk4c06LqALC5DiGqrFiaH4Owri11d7FX0D9UzkT1\nhKP5cnj71at3RDL0vLE6rAeNrQ+yEiF9ep3+n9c49I6IHhZ2Z5DJSjuM1StQc98=\n=bVVM\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ebf89ead7828d94510497921936980d859f2d3f\nparent c5b39a5917ffc0f1349b6e414fa3b874fdcf8429\nparent a317bc9d233cee39027e20d8e9d898757699babf\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1524472608 +0200\ncommitter GitHub <noreply@github.com> 1524472608 +0200\n\nMerge pull request #2690 from mrecachinas/feature/print-string-literal\n\nFix alignment/precision/width false positives for print/write_literal"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79e818267b0f5a5e397c3ab9e778e22b2adf0139", "html_url": "https://github.com/rust-lang/rust/commit/79e818267b0f5a5e397c3ab9e778e22b2adf0139", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79e818267b0f5a5e397c3ab9e778e22b2adf0139/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5b39a5917ffc0f1349b6e414fa3b874fdcf8429", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429", "html_url": "https://github.com/rust-lang/rust/commit/c5b39a5917ffc0f1349b6e414fa3b874fdcf8429"}, {"sha": "a317bc9d233cee39027e20d8e9d898757699babf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a317bc9d233cee39027e20d8e9d898757699babf", "html_url": "https://github.com/rust-lang/rust/commit/a317bc9d233cee39027e20d8e9d898757699babf"}], "stats": {"total": 263, "additions": 150, "deletions": 113}, "files": [{"sha": "67c72bd98593943082ce91e848414edd16765c7a", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/79e818267b0f5a5e397c3ab9e778e22b2adf0139/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e818267b0f5a5e397c3ab9e778e22b2adf0139/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=79e818267b0f5a5e397c3ab9e778e22b2adf0139", "patch": "@@ -7,7 +7,7 @@ use syntax::ptr;\n use syntax::symbol::InternedString;\n use syntax_pos::Span;\n use utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint, span_lint_and_sugg};\n-use utils::{opt_def_id, paths};\n+use utils::{opt_def_id, paths, last_path_segment};\n \n /// **What it does:** This lint warns when you use `println!(\"\")` to\n /// print a newline.\n@@ -266,7 +266,6 @@ fn check_print_variants<'a, 'tcx>(\n             };\n \n             span_lint(cx, PRINT_STDOUT, span, &format!(\"use of `{}!`\", name));\n-\n             if_chain! {\n                 // ensure we're calling Arguments::new_v1\n                 if args.len() == 1;\n@@ -339,7 +338,9 @@ where\n     F: Fn(Span),\n {\n     if_chain! {\n-        if args.len() > 1;\n+        if args.len() >= 2;\n+\n+        // the match statement\n         if let ExprAddrOf(_, ref match_expr) = args[1].node;\n         if let ExprMatch(ref matchee, ref arms, _) = match_expr.node;\n         if let ExprTup(ref tup) = matchee.node;\n@@ -355,15 +356,31 @@ where\n                     if let ExprLit(_) = tup_val.node;\n \n                     // next, check the corresponding match arm body to ensure\n-                    // this is \"{}\", or DISPLAY_FMT_METHOD\n+                    // this is DISPLAY_FMT_METHOD\n                     if let ExprCall(_, ref body_args) = arm_body_exprs[idx].node;\n                     if body_args.len() == 2;\n                     if let ExprPath(ref body_qpath) = body_args[1].node;\n                     if let Some(fun_def_id) = opt_def_id(resolve_node(cx, body_qpath, body_args[1].hir_id));\n-                    if match_def_path(cx.tcx, fun_def_id, &paths::DISPLAY_FMT_METHOD) ||\n-                       match_def_path(cx.tcx, fun_def_id, &paths::DEBUG_FMT_METHOD);\n+                    if match_def_path(cx.tcx, fun_def_id, &paths::DISPLAY_FMT_METHOD);\n                     then {\n-                        lint_fn(tup_val.span);\n+                        if args.len() == 2 {\n+                            lint_fn(tup_val.span);\n+                        } \n+\n+                        // ensure the format str has no options (e.g., width, precision, alignment, etc.)\n+                        // and is just \"{}\"\n+                        if_chain! {\n+                            if args.len() == 3;\n+                            if let ExprAddrOf(_, ref format_expr) = args[2].node;\n+                            if let ExprArray(ref format_exprs) = format_expr.node;\n+                            if format_exprs.len() >= 1;\n+                            if let ExprStruct(_, ref fields, _) = format_exprs[idx].node;\n+                            if let Some(format_field) = fields.iter().find(|f| f.name.node == \"format\");\n+                            if check_unformatted(&format_field.expr);\n+                            then {\n+                                lint_fn(tup_val.span);\n+                            }\n+                        }\n                     }\n                 }\n             }\n@@ -438,3 +455,33 @@ fn is_in_debug_impl(cx: &LateContext, expr: &Expr) -> bool {\n     }\n     false\n }\n+\n+/// Checks if the expression matches\n+/// ```rust,ignore\n+/// &[_ {\n+///    format: _ {\n+///         width: _::Implied,\n+///         ...\n+///    },\n+///    ...,\n+/// }]\n+/// ```\n+pub fn check_unformatted(format_field: &Expr) -> bool {\n+    if_chain! {\n+        if let ExprStruct(_, ref fields, _) = format_field.node;\n+        if let Some(width_field) = fields.iter().find(|f| f.name.node == \"width\");\n+        if let ExprPath(ref qpath) = width_field.expr.node;\n+        if last_path_segment(qpath).name == \"Implied\";\n+        if let Some(align_field) = fields.iter().find(|f| f.name.node == \"align\");\n+        if let ExprPath(ref qpath) = align_field.expr.node;\n+        if last_path_segment(qpath).name == \"Unknown\";\n+        if let Some(precision_field) = fields.iter().find(|f| f.name.node == \"precision\");\n+        if let ExprPath(ref qpath_precision) = precision_field.expr.node;\n+        if last_path_segment(qpath_precision).name == \"Implied\";\n+        then {\n+            return true;\n+        }\n+    }\n+\n+    false\n+}"}, {"sha": "272e1c168d3eb6a2d33888ce48e96459c292668d", "filename": "tests/ui/print_literal.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79e818267b0f5a5e397c3ab9e778e22b2adf0139/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e818267b0f5a5e397c3ab9e778e22b2adf0139/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=79e818267b0f5a5e397c3ab9e778e22b2adf0139", "patch": "@@ -9,16 +9,23 @@ fn main() {\n     let world = \"world\";\n     println!(\"Hello {}\", world);\n     println!(\"3 in hex is {:X}\", 3);\n+    println!(\"2 + 1 = {:.4}\", 3);\n+    println!(\"2 + 1 = {:5.4}\", 3);\n+    println!(\"Debug test {:?}\", \"hello, world\");\n+    println!(\"{0:8} {1:>8}\", \"hello\", \"world\");\n+    println!(\"{1:8} {0:>8}\", \"hello\", \"world\");\n+    println!(\"{foo:8} {bar:>8}\", foo=\"hello\", bar=\"world\");\n+    println!(\"{bar:8} {foo:>8}\", foo=\"hello\", bar=\"world\");\n+    println!(\"{number:>width$}\", number=1, width=6);\n+    println!(\"{number:>0width$}\", number=1, width=6);\n \n     // these should throw warnings\n+    println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     print!(\"Hello {}\", \"world\");\n     println!(\"Hello {} {}\", world, \"world\");\n     println!(\"Hello {}\", \"world\");\n     println!(\"10 / 4 is {}\", 2.5);\n     println!(\"2 + 1 = {}\", 3);\n-    println!(\"2 + 1 = {:.4}\", 3);\n-    println!(\"2 + 1 = {:5.4}\", 3);\n-    println!(\"Debug test {:?}\", \"hello, world\");\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should"}, {"sha": "d1e4b49cbdd4638c514f727bc144971d04e712b8", "filename": "tests/ui/print_literal.stderr", "status": "modified", "additions": 34, "deletions": 46, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/79e818267b0f5a5e397c3ab9e778e22b2adf0139/tests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e818267b0f5a5e397c3ab9e778e22b2adf0139/tests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.stderr?ref=79e818267b0f5a5e397c3ab9e778e22b2adf0139", "patch": "@@ -1,100 +1,88 @@\n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:14:24\n+  --> $DIR/print_literal.rs:23:71\n    |\n-14 |     print!(\"Hello {}\", \"world\");\n-   |                        ^^^^^^^\n+23 |     println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n+   |                                                                       ^\n    |\n    = note: `-D print-literal` implied by `-D warnings`\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:15:36\n+  --> $DIR/print_literal.rs:24:24\n    |\n-15 |     println!(\"Hello {} {}\", world, \"world\");\n+24 |     print!(\"Hello {}\", \"world\");\n+   |                        ^^^^^^^\n+\n+error: printing a literal with an empty format string\n+  --> $DIR/print_literal.rs:25:36\n+   |\n+25 |     println!(\"Hello {} {}\", world, \"world\");\n    |                                    ^^^^^^^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:16:26\n+  --> $DIR/print_literal.rs:26:26\n    |\n-16 |     println!(\"Hello {}\", \"world\");\n+26 |     println!(\"Hello {}\", \"world\");\n    |                          ^^^^^^^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:17:30\n+  --> $DIR/print_literal.rs:27:30\n    |\n-17 |     println!(\"10 / 4 is {}\", 2.5);\n+27 |     println!(\"10 / 4 is {}\", 2.5);\n    |                              ^^^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:18:28\n+  --> $DIR/print_literal.rs:28:28\n    |\n-18 |     println!(\"2 + 1 = {}\", 3);\n+28 |     println!(\"2 + 1 = {}\", 3);\n    |                            ^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:19:31\n-   |\n-19 |     println!(\"2 + 1 = {:.4}\", 3);\n-   |                               ^\n-\n-error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:20:32\n-   |\n-20 |     println!(\"2 + 1 = {:5.4}\", 3);\n-   |                                ^\n-\n-error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:21:33\n-   |\n-21 |     println!(\"Debug test {:?}\", \"hello, world\");\n-   |                                 ^^^^^^^^^^^^^^\n-\n-error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:26:25\n+  --> $DIR/print_literal.rs:33:25\n    |\n-26 |     println!(\"{0} {1}\", \"hello\", \"world\");\n+33 |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:26:34\n+  --> $DIR/print_literal.rs:33:34\n    |\n-26 |     println!(\"{0} {1}\", \"hello\", \"world\");\n+33 |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:27:25\n+  --> $DIR/print_literal.rs:34:25\n    |\n-27 |     println!(\"{1} {0}\", \"hello\", \"world\");\n+34 |     println!(\"{1} {0}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:27:34\n+  --> $DIR/print_literal.rs:34:34\n    |\n-27 |     println!(\"{1} {0}\", \"hello\", \"world\");\n+34 |     println!(\"{1} {0}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:30:33\n+  --> $DIR/print_literal.rs:37:33\n    |\n-30 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+37 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n    |                                 ^^^^^^^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:30:46\n+  --> $DIR/print_literal.rs:37:46\n    |\n-30 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+37 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n    |                                              ^^^^^^^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:31:33\n+  --> $DIR/print_literal.rs:38:33\n    |\n-31 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+38 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n    |                                 ^^^^^^^\n \n error: printing a literal with an empty format string\n-  --> $DIR/print_literal.rs:31:46\n+  --> $DIR/print_literal.rs:38:46\n    |\n-31 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+38 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n    |                                              ^^^^^^^\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 14 previous errors\n "}, {"sha": "b09640a18eba28b1dd21472f65214e616d7a3a4b", "filename": "tests/ui/write_literal.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/79e818267b0f5a5e397c3ab9e778e22b2adf0139/tests%2Fui%2Fwrite_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e818267b0f5a5e397c3ab9e778e22b2adf0139/tests%2Fui%2Fwrite_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.rs?ref=79e818267b0f5a5e397c3ab9e778e22b2adf0139", "patch": "@@ -6,22 +6,29 @@ use std::io::Write;\n fn main() {\n     let mut v = Vec::new();\n \n-    // These should be fine\n+    // these should be fine\n     write!(&mut v, \"Hello\");\n     writeln!(&mut v, \"Hello\");\n     let world = \"world\";\n     writeln!(&mut v, \"Hello {}\", world);\n     writeln!(&mut v, \"3 in hex is {:X}\", 3);\n+    writeln!(&mut v, \"2 + 1 = {:.4}\", 3);\n+    writeln!(&mut v, \"2 + 1 = {:5.4}\", 3);\n+    writeln!(&mut v, \"Debug test {:?}\", \"hello, world\");\n+    writeln!(&mut v, \"{0:8} {1:>8}\", \"hello\", \"world\");\n+    writeln!(&mut v, \"{1:8} {0:>8}\", \"hello\", \"world\");\n+    writeln!(&mut v, \"{foo:8} {bar:>8}\", foo=\"hello\", bar=\"world\");\n+    writeln!(&mut v, \"{bar:8} {foo:>8}\", foo=\"hello\", bar=\"world\");\n+    writeln!(&mut v, \"{number:>width$}\", number=1, width=6);\n+    writeln!(&mut v, \"{number:>0width$}\", number=1, width=6);\n \n-    // These should throw warnings\n+    // these should throw warnings\n+    writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     write!(&mut v, \"Hello {}\", \"world\");\n     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n     writeln!(&mut v, \"Hello {}\", \"world\");\n     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n     writeln!(&mut v, \"2 + 1 = {}\", 3);\n-    writeln!(&mut v, \"2 + 1 = {:.4}\", 3);\n-    writeln!(&mut v, \"2 + 1 = {:5.4}\", 3);\n-    writeln!(&mut v, \"Debug test {:?}\", \"hello, world\");\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should\n@@ -30,6 +37,6 @@ fn main() {\n     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n \n     // named args shouldn't change anything either\n-    writeln!(&mut v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-    writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n+    writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+    writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n }"}, {"sha": "323a83e244aad5bb66ecc4467e120645e78d4a8c", "filename": "tests/ui/write_literal.stderr", "status": "modified", "additions": 38, "deletions": 50, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/79e818267b0f5a5e397c3ab9e778e22b2adf0139/tests%2Fui%2Fwrite_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79e818267b0f5a5e397c3ab9e778e22b2adf0139/tests%2Fui%2Fwrite_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.stderr?ref=79e818267b0f5a5e397c3ab9e778e22b2adf0139", "patch": "@@ -1,100 +1,88 @@\n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:17:32\n+  --> $DIR/write_literal.rs:26:79\n    |\n-17 |     write!(&mut v, \"Hello {}\", \"world\");\n-   |                                ^^^^^^^\n+26 |     writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n+   |                                                                               ^\n    |\n    = note: `-D write-literal` implied by `-D warnings`\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:18:44\n+  --> $DIR/write_literal.rs:27:32\n    |\n-18 |     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n+27 |     write!(&mut v, \"Hello {}\", \"world\");\n+   |                                ^^^^^^^\n+\n+error: writing a literal with an empty format string\n+  --> $DIR/write_literal.rs:28:44\n+   |\n+28 |     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n    |                                            ^^^^^^^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:19:34\n+  --> $DIR/write_literal.rs:29:34\n    |\n-19 |     writeln!(&mut v, \"Hello {}\", \"world\");\n+29 |     writeln!(&mut v, \"Hello {}\", \"world\");\n    |                                  ^^^^^^^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:20:38\n+  --> $DIR/write_literal.rs:30:38\n    |\n-20 |     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n+30 |     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n    |                                      ^^^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:21:36\n+  --> $DIR/write_literal.rs:31:36\n    |\n-21 |     writeln!(&mut v, \"2 + 1 = {}\", 3);\n+31 |     writeln!(&mut v, \"2 + 1 = {}\", 3);\n    |                                    ^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:22:39\n-   |\n-22 |     writeln!(&mut v, \"2 + 1 = {:.4}\", 3);\n-   |                                       ^\n-\n-error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:23:40\n-   |\n-23 |     writeln!(&mut v, \"2 + 1 = {:5.4}\", 3);\n-   |                                        ^\n-\n-error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:24:41\n-   |\n-24 |     writeln!(&mut v, \"Debug test {:?}\", \"hello, world\");\n-   |                                         ^^^^^^^^^^^^^^\n-\n-error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:29:33\n+  --> $DIR/write_literal.rs:36:33\n    |\n-29 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n+36 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n    |                                 ^^^^^^^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:29:42\n+  --> $DIR/write_literal.rs:36:42\n    |\n-29 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n+36 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n    |                                          ^^^^^^^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:30:33\n+  --> $DIR/write_literal.rs:37:33\n    |\n-30 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n+37 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n    |                                 ^^^^^^^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:30:42\n+  --> $DIR/write_literal.rs:37:42\n    |\n-30 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n+37 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n    |                                          ^^^^^^^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:33:43\n+  --> $DIR/write_literal.rs:40:41\n    |\n-33 |     writeln!(&mut v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-   |                                           ^^^^^^^\n+40 |     writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+   |                                         ^^^^^^^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:33:58\n+  --> $DIR/write_literal.rs:40:54\n    |\n-33 |     writeln!(&mut v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n-   |                                                          ^^^^^^^\n+40 |     writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+   |                                                      ^^^^^^^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:34:43\n+  --> $DIR/write_literal.rs:41:41\n    |\n-34 |     writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-   |                                           ^^^^^^^\n+41 |     writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+   |                                         ^^^^^^^\n \n error: writing a literal with an empty format string\n-  --> $DIR/write_literal.rs:34:58\n+  --> $DIR/write_literal.rs:41:54\n    |\n-34 |     writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n-   |                                                          ^^^^^^^\n+41 |     writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+   |                                                      ^^^^^^^\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 14 previous errors\n "}]}