{"sha": "5a06b1e67c746b5cdcaa03116dcc869b7b8fc2dd", "node_id": "C_kwDOAAsO6NoAKDVhMDZiMWU2N2M3NDZiNWNkY2FhMDMxMTZkY2M4NjliN2I4ZmMyZGQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-22T21:04:08Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-15T16:48:30Z"}, "message": "simplify alignment_check_failed a bit", "tree": {"sha": "11979943f2940d099195734523a8535eb8ffc769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11979943f2940d099195734523a8535eb8ffc769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a06b1e67c746b5cdcaa03116dcc869b7b8fc2dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a06b1e67c746b5cdcaa03116dcc869b7b8fc2dd", "html_url": "https://github.com/rust-lang/rust/commit/5a06b1e67c746b5cdcaa03116dcc869b7b8fc2dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a06b1e67c746b5cdcaa03116dcc869b7b8fc2dd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b2170384d511a613ddd6a4298feab0ed3a5f6ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2170384d511a613ddd6a4298feab0ed3a5f6ec", "html_url": "https://github.com/rust-lang/rust/commit/2b2170384d511a613ddd6a4298feab0ed3a5f6ec"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "e006a62feeabd12bc568da7c5c42e76bdde1cc2f", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a06b1e67c746b5cdcaa03116dcc869b7b8fc2dd/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a06b1e67c746b5cdcaa03116dcc869b7b8fc2dd/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=5a06b1e67c746b5cdcaa03116dcc869b7b8fc2dd", "patch": "@@ -1,7 +1,7 @@\n use rustc_hir::def::DefKind;\n use rustc_hir::{LangItem, CRATE_HIR_ID};\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::{InterpError, PointerArithmetic, UndefinedBehaviorInfo};\n+use rustc_middle::mir::interpret::PointerArithmetic;\n use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::builtin::INVALID_ALIGNMENT;\n@@ -345,24 +345,15 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         required: Align,\n         check: CheckAlignment,\n     ) -> InterpResult<'tcx, ()> {\n+        let err = err_ub!(AlignmentCheckFailed { has, required }).into();\n         match check {\n-            CheckAlignment::Error => {\n-                throw_ub!(AlignmentCheckFailed { has, required })\n-            }\n+            CheckAlignment::Error => Err(err),\n             CheckAlignment::No => span_bug!(\n                 ecx.cur_span(),\n                 \"`alignment_check_failed` called when no alignment check requested\"\n             ),\n             CheckAlignment::FutureIncompat => {\n-                let err = ConstEvalErr::new(\n-                    ecx,\n-                    InterpError::UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed {\n-                        has,\n-                        required,\n-                    })\n-                    .into(),\n-                    None,\n-                );\n+                let err = ConstEvalErr::new(ecx, err, None);\n                 ecx.tcx.struct_span_lint_hir(\n                     INVALID_ALIGNMENT,\n                     ecx.stack().iter().find_map(|frame| frame.lint_root()).unwrap_or(CRATE_HIR_ID),\n@@ -373,9 +364,9 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                         db\n                     },\n                 );\n+                Ok(())\n             }\n         }\n-        Ok(())\n     }\n \n     fn load_mir("}]}