{"sha": "bcf04b19f80a77353c54b5919897ed5c5087687e", "node_id": "C_kwDOAAsO6NoAKGJjZjA0YjE5ZjgwYTc3MzUzYzU0YjU5MTk4OTdlZDVjNTA4NzY4N2U", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-27T17:19:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-27T17:19:55Z"}, "message": "Merge #10375\n\n10375: minor: Use SmallVec<[_; 1]> in `descend_into_macros_impl` r=Veykril a=Veykril\n\nA lot of descends don't actually descend in which case we don't wanna allocate\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "a2e63ae4767b31ce22273b3b825b45208c696342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e63ae4767b31ce22273b3b825b45208c696342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf04b19f80a77353c54b5919897ed5c5087687e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhUf08CRBK7hj4Ov3rIwAAVWYIACs7slWej5pg01cIPYp3OXaV\n5yIfHgjJWLLAykDH0mCpCbc7Qq4CTyexBHo+XuuYxLX9fdRaEBB+0UKee3BEcKbm\nMgRRDBKb39jnd1DB4Kqs80uij2JN0HBF96dIa5YX2/KBpgKRv/It48KUkMGq8Dzu\nNkBY/nOcPRv+AohXxKVPCOprQYoTvNiZ8NAae1ZafQq38K1rUbdop7GmReQHIIrb\n5kvu1Axe2SOtJQ0lJcG0Tw70XhJ8H949K0aoxsDke+kYaigp3R3m7x0PTWk/1NIn\nfcaRWda2VRMRxiOHAkG0gdDsd2razWfjNlb2Bg7wNbkVmVn+vYKXwokb4qP4Sac=\n=uXgf\n-----END PGP SIGNATURE-----\n", "payload": "tree a2e63ae4767b31ce22273b3b825b45208c696342\nparent 5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce\nparent dedc2368b9014877049fa907284ff68ff4a1efe4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632763195 +0000\ncommitter GitHub <noreply@github.com> 1632763195 +0000\n\nMerge #10375\n\n10375: minor: Use SmallVec<[_; 1]> in `descend_into_macros_impl` r=Veykril a=Veykril\n\nA lot of descends don't actually descend in which case we don't wanna allocate\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf04b19f80a77353c54b5919897ed5c5087687e", "html_url": "https://github.com/rust-lang/rust/commit/bcf04b19f80a77353c54b5919897ed5c5087687e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf04b19f80a77353c54b5919897ed5c5087687e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce", "html_url": "https://github.com/rust-lang/rust/commit/5d4bb05ffff2ac5e4b5c04b222794f4dcf3905ce"}, {"sha": "dedc2368b9014877049fa907284ff68ff4a1efe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dedc2368b9014877049fa907284ff68ff4a1efe4", "html_url": "https://github.com/rust-lang/rust/commit/dedc2368b9014877049fa907284ff68ff4a1efe4"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "3d346b60ab44e8e52586d472a62aa994326a3878", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcf04b19f80a77353c54b5919897ed5c5087687e/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf04b19f80a77353c54b5919897ed5c5087687e/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=bcf04b19f80a77353c54b5919897ed5c5087687e", "patch": "@@ -542,32 +542,32 @@ impl<'db> SemanticsImpl<'db> {\n             None => return,\n         };\n         let sa = self.analyze(&parent);\n-        let mut queue = vec![InFile::new(sa.file_id, token)];\n+        let mut stack: SmallVec<[_; 1]> = smallvec![InFile::new(sa.file_id, token)];\n         let mut cache = self.expansion_info_cache.borrow_mut();\n \n         let mut process_expansion_for_token =\n-            |queue: &mut Vec<_>, file_id, item, token: InFile<&_>| {\n+            |stack: &mut SmallVec<_>, file_id, item, token: InFile<&_>| {\n                 let mapped_tokens = cache\n                     .entry(file_id)\n                     .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n                     .as_ref()?\n                     .map_token_down(self.db.upcast(), item, token)?;\n \n-                let len = queue.len();\n+                let len = stack.len();\n                 // requeue the tokens we got from mapping our current token down\n-                queue.extend(mapped_tokens.inspect(|token| {\n+                stack.extend(mapped_tokens.inspect(|token| {\n                     if let Some(parent) = token.value.parent() {\n                         self.cache(find_root(&parent), token.file_id);\n                     }\n                 }));\n                 // if the length changed we have found a mapping for the token\n-                (queue.len() != len).then(|| ())\n+                (stack.len() != len).then(|| ())\n             };\n \n         // Remap the next token in the queue into a macro call its in, if it is not being remapped\n         // either due to not being in a macro-call or because its unused push it into the result vec,\n         // otherwise push the remapped tokens back into the queue as they can potentially be remapped again.\n-        while let Some(token) = queue.pop() {\n+        while let Some(token) = stack.pop() {\n             self.db.unwind_if_cancelled();\n             let was_not_remapped = (|| {\n                 // are we inside an attribute macro call\n@@ -584,7 +584,7 @@ impl<'db> SemanticsImpl<'db> {\n                 if let Some((call_id, item)) = containing_attribute_macro_call {\n                     let file_id = call_id.as_file();\n                     return process_expansion_for_token(\n-                        &mut queue,\n+                        &mut stack,\n                         file_id,\n                         Some(item),\n                         token.as_ref(),\n@@ -607,7 +607,7 @@ impl<'db> SemanticsImpl<'db> {\n                     }\n \n                     let file_id = sa.expand(self.db, token.with_value(&macro_call))?;\n-                    return process_expansion_for_token(&mut queue, file_id, None, token.as_ref());\n+                    return process_expansion_for_token(&mut stack, file_id, None, token.as_ref());\n                 }\n \n                 // outside of a macro invocation so this is a \"final\" token"}]}