{"sha": "e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "node_id": "C_kwDOAAsO6NoAKGU5ZDQ5YjJiZmM0ZTRjMzI3OTg3YmI5ZDJhNjViMTEzYjEwMTAwZGU", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-10T19:18:42Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-10T19:43:01Z"}, "message": "Fix suggestions for `&a: T` parameters\n\nPreviously we were suggesting stuff like `fn f( &u32) {}`", "tree": {"sha": "c34715d99ed481f26834374db5768e1bba1a7a9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c34715d99ed481f26834374db5768e1bba1a7a9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "html_url": "https://github.com/rust-lang/rust/commit/e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e", "html_url": "https://github.com/rust-lang/rust/commit/f19ccc2e8dab09e542d4c5a3ec14c7d5bce8d50e"}], "stats": {"total": 564, "additions": 476, "deletions": 88}, "files": [{"sha": "8727ae4ea51aef1b0416bfe19d373bb1982b3412", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -649,39 +649,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn borrow_pat_suggestion(\n-        &self,\n-        err: &mut Diagnostic,\n-        pat: &Pat<'_>,\n-        inner: &Pat<'_>,\n-        expected: Ty<'tcx>,\n-    ) {\n+    fn borrow_pat_suggestion(&self, err: &mut Diagnostic, pat: &Pat<'_>, inner: &Pat<'_>) {\n         let tcx = self.tcx;\n-        if let PatKind::Binding(..) = inner.kind {\n+        if let PatKind::Ref(_, mutbl) = pat.kind\n+        && let PatKind::Binding(_, _, binding, ..) = inner.kind {\n             let binding_parent_id = tcx.hir().get_parent_node(pat.hir_id);\n             let binding_parent = tcx.hir().get(binding_parent_id);\n-            debug!(\"inner {:?} pat {:?} parent {:?}\", inner, pat, binding_parent);\n+            debug!(?inner, ?pat, ?binding_parent);\n+\n+            let mutability = match mutbl {\n+                ast::Mutability::Mut => \"mut\",\n+                ast::Mutability::Not => \"\",\n+            };\n+\n             match binding_parent {\n-                hir::Node::Param(hir::Param { span, .. })\n-                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(inner.span) =>\n-                {\n-                    err.span_suggestion(\n-                        *span,\n-                        &format!(\"did you mean `{snippet}`\"),\n-                        format!(\" &{expected}\"),\n-                        Applicability::MachineApplicable,\n+                hir::Node::Param(hir::Param { ty_span, .. }) if binding.span.hi() <= ty_span.lo() => {\n+                    err.multipart_suggestion_verbose(\n+                        format!(\"to take parameter by ref, move `&{mutability}` to the type\"), \n+                        vec![\n+                            (pat.span.until(inner.span), \"\".to_owned()),\n+                            (ty_span.shrink_to_lo(), format!(\"&{}\", mutbl.prefix_str())),\n+                        ],\n+                        Applicability::MachineApplicable\n                     );\n                 }\n-                hir::Node::Arm(_) | hir::Node::Pat(_) => {\n+                hir::Node::Param(_) | hir::Node::Arm(_) | hir::Node::Pat(_) => {\n                     // rely on match ergonomics or it might be nested `&&pat`\n-                    if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(inner.span) {\n-                        err.span_suggestion(\n-                            pat.span,\n-                            \"you can probably remove the explicit borrow\",\n-                            snippet,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n+                    err.span_suggestion_verbose(\n+                        pat.span.until(inner.span),\n+                        format!(\"consider removing `&{mutability}` from the pattern\"),\n+                        \"\",\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n                 _ => {} // don't provide suggestions in other cases #55175\n             }\n@@ -1853,7 +1852,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Take region, inner-type from expected type if we can,\n             // to avoid creating needless variables. This also helps with\n-            // the bad  interactions of the given hack detailed in (note_1).\n+            // the bad interactions of the given hack detailed in (note_1).\n             debug!(\"check_pat_ref: expected={:?}\", expected);\n             match *expected.kind() {\n                 ty::Ref(_, r_ty, r_mutbl) if r_mutbl == mutbl => (expected, r_ty),\n@@ -1869,7 +1868,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // Look for a case like `fn foo(&foo: u32)` and suggest\n                     // `fn foo(foo: &u32)`\n                     if let Some(mut err) = err {\n-                        self.borrow_pat_suggestion(&mut err, pat, inner, expected);\n+                        self.borrow_pat_suggestion(&mut err, pat, inner);\n                         err.emit();\n                     }\n                     (rptr_ty, inner_ty)"}, {"sha": "1291517928e3de1f853b48472f56dd91aee726ea", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -23,10 +23,14 @@ LL |     let &&x = &1isize as &dyn T;\n    |          ^^   ----------------- this expression has type `&dyn T`\n    |          |\n    |          expected trait object `dyn T`, found reference\n-   |          help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected trait object `dyn T`\n                  found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let &&x = &1isize as &dyn T;\n+LL +     let &x = &1isize as &dyn T;\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:36:11\n@@ -35,10 +39,14 @@ LL |     let &&&x = &(&1isize as &dyn T);\n    |           ^^   -------------------- this expression has type `&&dyn T`\n    |           |\n    |           expected trait object `dyn T`, found reference\n-   |           help: you can probably remove the explicit borrow: `x`\n    |\n    = note: expected trait object `dyn T`\n                  found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let &&&x = &(&1isize as &dyn T);\n+LL +     let &&x = &(&1isize as &dyn T);\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:40:13"}, {"sha": "c4316bfdd18dcc8c5f72e6f1fbd9c1a54d0e98ff", "filename": "src/test/ui/mismatched_types/issue-38371-unfixable.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.rs?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -0,0 +1,5 @@\n+fn ugh(&[bar]: &u32) {} //~ ERROR expected an array or slice\n+\n+fn bgh(&&bar: u32) {} //~ ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "3c5e765abfbe2eefc9537f5818963b81d4cb4576", "filename": "src/test/ui/mismatched_types/issue-38371-unfixable.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371-unfixable.stderr?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -0,0 +1,21 @@\n+error[E0529]: expected an array or slice, found `u32`\n+  --> $DIR/issue-38371-unfixable.rs:1:9\n+   |\n+LL | fn ugh(&[bar]: &u32) {}\n+   |         ^^^^^ pattern cannot match with input type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-38371-unfixable.rs:3:8\n+   |\n+LL | fn bgh(&&bar: u32) {}\n+   |        ^^^^^  --- expected due to this\n+   |        |\n+   |        expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0529.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "0e20835bef05f91e3e29d56c32550271a6f3f2d4", "filename": "src/test/ui/mismatched_types/issue-38371.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.fixed?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+// see also issue-38371-unfixable.rs\n+#![allow(dead_code)]\n+\n+#[derive(Copy, Clone)]\n+struct Foo {}\n+\n+fn foo(_a: &Foo) {} //~ ERROR mismatched types\n+\n+fn bar(_a: Foo) {}\n+\n+fn qux(_a: &Foo) {}\n+\n+fn zar(&_a: &Foo) {}\n+\n+fn agh(&_a: &u32) {} //~ ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "fb9e4c173e7a8518a4642360a1572f4da4f05ea1", "filename": "src/test/ui/mismatched_types/issue-38371.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -1,27 +1,18 @@\n-struct Foo {\n-}\n+// run-rustfix\n+// see also issue-38371-unfixable.rs\n+#![allow(dead_code)]\n \n-fn foo(&foo: Foo) { //~ ERROR mismatched types\n-}\n+#[derive(Copy, Clone)]\n+struct Foo {}\n \n-fn bar(foo: Foo) {\n-}\n+fn foo(&_a: Foo) {} //~ ERROR mismatched types\n \n-fn qux(foo: &Foo) {\n-}\n+fn bar(_a: Foo) {}\n \n-fn zar(&foo: &Foo) {\n-}\n+fn qux(_a: &Foo) {}\n \n-// The somewhat unexpected help message in this case is courtesy of\n-// match_default_bindings.\n-fn agh(&&bar: &u32) { //~ ERROR mismatched types\n-}\n+fn zar(&_a: &Foo) {}\n \n-fn bgh(&&bar: u32) { //~ ERROR mismatched types\n-}\n-\n-fn ugh(&[bar]: &u32) { //~ ERROR expected an array or slice\n-}\n+fn agh(&&_a: &u32) {} //~ ERROR mismatched types\n \n fn main() {}"}, {"sha": "5a0146dfd210bf651fb62e014322b185573a8021", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -1,46 +1,35 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-38371.rs:4:8\n+  --> $DIR/issue-38371.rs:8:8\n    |\n-LL | fn foo(&foo: Foo) {\n-   |        ^^^^-----\n-   |        |     |\n-   |        |     expected due to this\n+LL | fn foo(&_a: Foo) {}\n+   |        ^^^  --- expected due to this\n+   |        |\n    |        expected struct `Foo`, found reference\n-   |        help: did you mean `foo`: `&Foo`\n    |\n    = note: expected struct `Foo`\n            found reference `&_`\n+help: to take parameter by ref, move `&` to the type\n+   |\n+LL - fn foo(&_a: Foo) {}\n+LL + fn foo(_a: &Foo) {}\n+   | \n \n error[E0308]: mismatched types\n-  --> $DIR/issue-38371.rs:18:9\n+  --> $DIR/issue-38371.rs:16:9\n    |\n-LL | fn agh(&&bar: &u32) {\n-   |         ^^^^  ---- expected due to this\n+LL | fn agh(&&_a: &u32) {}\n+   |         ^^^  ---- expected due to this\n    |         |\n    |         expected `u32`, found reference\n-   |         help: you can probably remove the explicit borrow: `bar`\n-   |\n-   = note:   expected type `u32`\n-           found reference `&_`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-38371.rs:21:8\n-   |\n-LL | fn bgh(&&bar: u32) {\n-   |        ^^^^^  --- expected due to this\n-   |        |\n-   |        expected `u32`, found reference\n    |\n    = note:   expected type `u32`\n            found reference `&_`\n-\n-error[E0529]: expected an array or slice, found `u32`\n-  --> $DIR/issue-38371.rs:24:9\n+help: consider removing `&` from the pattern\n    |\n-LL | fn ugh(&[bar]: &u32) {\n-   |         ^^^^^ pattern cannot match with input type `u32`\n+LL - fn agh(&&_a: &u32) {}\n+LL + fn agh(&_a: &u32) {}\n+   | \n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0529.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e9472b5194384e249ea975a25b13d8f6d1d43814", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.fixed?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+fn _f0(_a: &u32) {} //~ ERROR mismatched types\n+fn _f1(_a: &mut u32) {} //~ ERROR mismatched types\n+fn _f2(&_a: &u32) {} //~ ERROR mismatched types\n+fn _f3(&mut _a: &mut u32) {} //~ ERROR mismatched types\n+fn _f4(&_a: &u32) {} //~ ERROR mismatched types\n+fn _f5(&mut _a: &mut u32) {} //~ ERROR mismatched types\n+\n+fn main() {\n+    let _: fn(u32) = |_a| (); //~ ERROR mismatched types\n+    let _: fn(u32) = |_a| (); //~ ERROR mismatched types\n+    let _: fn(&u32) = |&_a| (); //~ ERROR mismatched types\n+    let _: fn(&mut u32) = |&mut _a| (); //~ ERROR mismatched types\n+    let _: fn(&u32) = |&_a| (); //~ ERROR mismatched types\n+    let _: fn(&mut u32) = |&mut _a| (); //~ ERROR mismatched types   \n+\n+    let _ = |_a: &u32| (); //~ ERROR mismatched types\n+    let _ = |_a: &mut u32| (); //~ ERROR mismatched types\n+    let _ = |&_a: &u32| (); //~ ERROR mismatched types\n+    let _ = |&mut _a: &mut u32| (); //~ ERROR mismatched types\n+    let _ = |&_a: &u32| (); //~ ERROR mismatched types\n+    let _ = |&mut _a: &mut u32| (); //~ ERROR mismatched types\n+}"}, {"sha": "49d88d13e01b3eb5eb492b92c638371e74c91ad9", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.rs?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+fn _f0(&_a: u32) {} //~ ERROR mismatched types\n+fn _f1(&mut _a: u32) {} //~ ERROR mismatched types\n+fn _f2(&&_a: &u32) {} //~ ERROR mismatched types\n+fn _f3(&mut &_a: &mut u32) {} //~ ERROR mismatched types\n+fn _f4(&&mut _a: &u32) {} //~ ERROR mismatched types\n+fn _f5(&mut &mut _a: &mut u32) {} //~ ERROR mismatched types\n+\n+fn main() {\n+    let _: fn(u32) = |&_a| (); //~ ERROR mismatched types\n+    let _: fn(u32) = |&mut _a| (); //~ ERROR mismatched types\n+    let _: fn(&u32) = |&&_a| (); //~ ERROR mismatched types\n+    let _: fn(&mut u32) = |&mut &_a| (); //~ ERROR mismatched types\n+    let _: fn(&u32) = |&&mut _a| (); //~ ERROR mismatched types\n+    let _: fn(&mut u32) = |&mut &mut _a| (); //~ ERROR mismatched types   \n+\n+    let _ = |&_a: u32| (); //~ ERROR mismatched types\n+    let _ = |&mut _a: u32| (); //~ ERROR mismatched types\n+    let _ = |&&_a: &u32| (); //~ ERROR mismatched types\n+    let _ = |&mut &_a: &mut u32| (); //~ ERROR mismatched types\n+    let _ = |&&mut _a: &u32| (); //~ ERROR mismatched types\n+    let _ = |&mut &mut _a: &mut u32| (); //~ ERROR mismatched types\n+}"}, {"sha": "6ce1f9602ddb315a3508ba399c91ec4edc4740c6", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.stderr", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -0,0 +1,297 @@\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:3:8\n+   |\n+LL | fn _f0(&_a: u32) {}\n+   |        ^^^  --- expected due to this\n+   |        |\n+   |        expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: to take parameter by ref, move `&` to the type\n+   |\n+LL - fn _f0(&_a: u32) {}\n+LL + fn _f0(_a: &u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:4:8\n+   |\n+LL | fn _f1(&mut _a: u32) {}\n+   |        ^^^^^^^  --- expected due to this\n+   |        |\n+   |        expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: to take parameter by ref, move `&mut` to the type\n+   |\n+LL - fn _f1(&mut _a: u32) {}\n+LL + fn _f1(_a: &mut u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:5:9\n+   |\n+LL | fn _f2(&&_a: &u32) {}\n+   |         ^^^  ---- expected due to this\n+   |         |\n+   |         expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL - fn _f2(&&_a: &u32) {}\n+LL + fn _f2(&_a: &u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:6:13\n+   |\n+LL | fn _f3(&mut &_a: &mut u32) {}\n+   |             ^^^  -------- expected due to this\n+   |             |\n+   |             expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL - fn _f3(&mut &_a: &mut u32) {}\n+LL + fn _f3(&mut _a: &mut u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:7:9\n+   |\n+LL | fn _f4(&&mut _a: &u32) {}\n+   |         ^^^^^^^  ---- expected due to this\n+   |         |\n+   |         expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL - fn _f4(&&mut _a: &u32) {}\n+LL + fn _f4(&_a: &u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:8:13\n+   |\n+LL | fn _f5(&mut &mut _a: &mut u32) {}\n+   |             ^^^^^^^  -------- expected due to this\n+   |             |\n+   |             expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL - fn _f5(&mut &mut _a: &mut u32) {}\n+LL + fn _f5(&mut _a: &mut u32) {}\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:11:23\n+   |\n+LL |     let _: fn(u32) = |&_a| ();\n+   |                       ^--\n+   |                       ||\n+   |                       |expected due to this\n+   |                       expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let _: fn(u32) = |&_a| ();\n+LL +     let _: fn(u32) = |_a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:12:23\n+   |\n+LL |     let _: fn(u32) = |&mut _a| ();\n+   |                       ^^^^^--\n+   |                       |    |\n+   |                       |    expected due to this\n+   |                       expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     let _: fn(u32) = |&mut _a| ();\n+LL +     let _: fn(u32) = |_a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:13:25\n+   |\n+LL |     let _: fn(&u32) = |&&_a| ();\n+   |                         ^--\n+   |                         ||\n+   |                         |expected due to this\n+   |                         expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let _: fn(&u32) = |&&_a| ();\n+LL +     let _: fn(&u32) = |&_a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:14:33\n+   |\n+LL |     let _: fn(&mut u32) = |&mut &_a| ();\n+   |                                 ^--\n+   |                                 ||\n+   |                                 |expected due to this\n+   |                                 expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let _: fn(&mut u32) = |&mut &_a| ();\n+LL +     let _: fn(&mut u32) = |&mut _a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:15:25\n+   |\n+LL |     let _: fn(&u32) = |&&mut _a| ();\n+   |                         ^^^^^--\n+   |                         |    |\n+   |                         |    expected due to this\n+   |                         expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     let _: fn(&u32) = |&&mut _a| ();\n+LL +     let _: fn(&u32) = |&_a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:16:33\n+   |\n+LL |     let _: fn(&mut u32) = |&mut &mut _a| ();\n+   |                                 ^^^^^--\n+   |                                 |    |\n+   |                                 |    expected due to this\n+   |                                 expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     let _: fn(&mut u32) = |&mut &mut _a| ();\n+LL +     let _: fn(&mut u32) = |&mut _a| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:18:14\n+   |\n+LL |     let _ = |&_a: u32| ();\n+   |              ^^^  --- expected due to this\n+   |              |\n+   |              expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: to take parameter by ref, move `&` to the type\n+   |\n+LL -     let _ = |&_a: u32| ();\n+LL +     let _ = |_a: &u32| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:19:14\n+   |\n+LL |     let _ = |&mut _a: u32| ();\n+   |              ^^^^^^^  --- expected due to this\n+   |              |\n+   |              expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: to take parameter by ref, move `&mut` to the type\n+   |\n+LL -     let _ = |&mut _a: u32| ();\n+LL +     let _ = |_a: &mut u32| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:20:15\n+   |\n+LL |     let _ = |&&_a: &u32| ();\n+   |               ^^^  ---- expected due to this\n+   |               |\n+   |               expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let _ = |&&_a: &u32| ();\n+LL +     let _ = |&_a: &u32| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:21:19\n+   |\n+LL |     let _ = |&mut &_a: &mut u32| ();\n+   |                   ^^^  -------- expected due to this\n+   |                   |\n+   |                   expected `u32`, found reference\n+   |\n+   = note:   expected type `u32`\n+           found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     let _ = |&mut &_a: &mut u32| ();\n+LL +     let _ = |&mut _a: &mut u32| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:22:15\n+   |\n+LL |     let _ = |&&mut _a: &u32| ();\n+   |               ^^^^^^^  ---- expected due to this\n+   |               |\n+   |               expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     let _ = |&&mut _a: &u32| ();\n+LL +     let _ = |&_a: &u32| ();\n+   | \n+\n+error[E0308]: mismatched types\n+  --> $DIR/ref-pat-suggestions.rs:23:19\n+   |\n+LL |     let _ = |&mut &mut _a: &mut u32| ();\n+   |                   ^^^^^^^  -------- expected due to this\n+   |                   |\n+   |                   expected `u32`, found `&mut _`\n+   |\n+   = note:           expected type `u32`\n+           found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     let _ = |&mut &mut _a: &mut u32| ();\n+LL +     let _ = |&mut _a: &mut u32| ();\n+   | \n+\n+error: aborting due to 18 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "886d815d70bea52b2f75fd1917c8210c0b277203", "filename": "src/test/ui/pattern/for-loop-bad-item.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -5,10 +5,14 @@ LL |     for ((_, _), (&mut c, _)) in &mut map {\n    |                   ^^^^^^         -------- this is an iterator with items of type `(&(char, char), &mut (char, char))`\n    |                   |\n    |                   expected `char`, found `&mut _`\n-   |                   help: you can probably remove the explicit borrow: `c`\n    |\n    = note:           expected type `char`\n            found mutable reference `&mut _`\n+help: consider removing `&mut` from the pattern\n+   |\n+LL -     for ((_, _), (&mut c, _)) in &mut map {\n+LL +     for ((_, _), (c, _)) in &mut map {\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/for-loop-bad-item.rs:14:14"}, {"sha": "a9342f9fc309d5cfc7aa07c201e3fa18312631af", "filename": "src/test/ui/suggestions/match-ergonomics.stderr", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9d49b2bfc4e4c327987bb9d2a65b113b10100de/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr?ref=e9d49b2bfc4e4c327987bb9d2a65b113b10100de", "patch": "@@ -4,13 +4,15 @@ error[E0308]: mismatched types\n LL |     match &x[..] {\n    |           ------ this expression has type `&[i32]`\n LL |         [&v] => {},\n-   |          ^^\n-   |          |\n-   |          expected `i32`, found reference\n-   |          help: you can probably remove the explicit borrow: `v`\n+   |          ^^ expected `i32`, found reference\n    |\n    = note:   expected type `i32`\n            found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -         [&v] => {},\n+LL +         [v] => {},\n+   | \n \n error[E0529]: expected an array or slice, found `Vec<i32>`\n   --> $DIR/match-ergonomics.rs:8:9\n@@ -34,13 +36,15 @@ error[E0308]: mismatched types\n LL |     match y {\n    |           - this expression has type `i32`\n LL |         &v => {},\n-   |         ^^\n-   |         |\n-   |         expected `i32`, found reference\n-   |         help: you can probably remove the explicit borrow: `v`\n+   |         ^^ expected `i32`, found reference\n    |\n    = note:   expected type `i32`\n            found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -         &v => {},\n+LL +         v => {},\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/match-ergonomics.rs:40:13\n@@ -49,10 +53,14 @@ LL |     if let [&v] = &x[..] {}\n    |             ^^    ------ this expression has type `&[i32]`\n    |             |\n    |             expected `i32`, found reference\n-   |             help: you can probably remove the explicit borrow: `v`\n    |\n    = note:   expected type `i32`\n            found reference `&_`\n+help: consider removing `&` from the pattern\n+   |\n+LL -     if let [&v] = &x[..] {}\n+LL +     if let [v] = &x[..] {}\n+   | \n \n error: aborting due to 5 previous errors\n "}]}