{"sha": "8f7a90fbefd68a919cd6f4214829208798583199", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmN2E5MGZiZWZkNjhhOTE5Y2Q2ZjQyMTQ4MjkyMDg3OTg1ODMxOTk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-10T05:35:53Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-03-11T22:48:31Z"}, "message": "Add rewrite_assign_rhs_with\n\nIt is like `rewrite_assign_rhs` but lets us force to put the rhs on the next\nline if it uses multiple lines.\n\nThis lets us avoid duplicating logic for choosing whether to put stuff on the\nsame line or the next line.", "tree": {"sha": "0b5cd2aea5db168df81a8896a92abe71f84a652a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b5cd2aea5db168df81a8896a92abe71f84a652a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f7a90fbefd68a919cd6f4214829208798583199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f7a90fbefd68a919cd6f4214829208798583199", "html_url": "https://github.com/rust-lang/rust/commit/8f7a90fbefd68a919cd6f4214829208798583199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f7a90fbefd68a919cd6f4214829208798583199/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7d70917725ce0fe9e9c40c0438819b0482c7ba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d70917725ce0fe9e9c40c0438819b0482c7ba6", "html_url": "https://github.com/rust-lang/rust/commit/c7d70917725ce0fe9e9c40c0438819b0482c7ba6"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "0e6b8f1bc1e39b04c5e09f8dec7c5304fee7b3ce", "filename": "src/expr.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8f7a90fbefd68a919cd6f4214829208798583199/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f7a90fbefd68a919cd6f4214829208798583199/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8f7a90fbefd68a919cd6f4214829208798583199", "patch": "@@ -1698,7 +1698,8 @@ fn rewrite_match_body(\n     );\n     match (orig_body, next_line_body) {\n         (Some(ref orig_str), Some(ref next_line_str))\n-            if forbid_same_line || prefer_next_line(orig_str, next_line_str) =>\n+            if forbid_same_line\n+                || prefer_next_line(orig_str, next_line_str, RhsTactics::Default) =>\n         {\n             combine_next_line_body(next_line_str)\n         }\n@@ -2514,13 +2515,32 @@ fn rewrite_assignment(\n     rewrite_assign_rhs(context, lhs_str, rhs, shape)\n }\n \n+/// Controls where to put the rhs.\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+pub enum RhsTactics {\n+    /// Use heuristics.\n+    Default,\n+    /// Put the rhs on the next line if it uses multiple line.\n+    ForceNextLine,\n+}\n+\n // The left hand side must contain everything up to, and including, the\n // assignment operator.\n pub fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n     context: &RewriteContext,\n     lhs: S,\n     ex: &R,\n     shape: Shape,\n+) -> Option<String> {\n+    rewrite_assign_rhs_with(context, lhs, ex, shape, RhsTactics::Default)\n+}\n+\n+pub fn rewrite_assign_rhs_with<S: Into<String>, R: Rewrite>(\n+    context: &RewriteContext,\n+    lhs: S,\n+    ex: &R,\n+    shape: Shape,\n+    rhs_tactics: RhsTactics,\n ) -> Option<String> {\n     let lhs = lhs.into();\n     let last_line_width = last_line_width(&lhs)\n@@ -2536,15 +2556,22 @@ pub fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n         offset: shape.offset + last_line_width + 1,\n         ..shape\n     });\n-    let rhs = choose_rhs(context, ex, orig_shape, ex.rewrite(context, orig_shape))?;\n+    let rhs = choose_rhs(\n+        context,\n+        ex,\n+        orig_shape,\n+        ex.rewrite(context, orig_shape),\n+        rhs_tactics,\n+    )?;\n     Some(lhs + &rhs)\n }\n \n-pub fn choose_rhs<R: Rewrite>(\n+fn choose_rhs<R: Rewrite>(\n     context: &RewriteContext,\n     expr: &R,\n     shape: Shape,\n     orig_rhs: Option<String>,\n+    rhs_tactics: RhsTactics,\n ) -> Option<String> {\n     match orig_rhs {\n         Some(ref new_str) if !new_str.contains('\\n') && new_str.len() <= shape.width => {\n@@ -2566,7 +2593,9 @@ pub fn choose_rhs<R: Rewrite>(\n                 {\n                     Some(format!(\" {}\", orig_rhs))\n                 }\n-                (Some(ref orig_rhs), Some(ref new_rhs)) if prefer_next_line(orig_rhs, new_rhs) => {\n+                (Some(ref orig_rhs), Some(ref new_rhs))\n+                    if prefer_next_line(orig_rhs, new_rhs, rhs_tactics) =>\n+                {\n                     Some(format!(\"{}{}\", new_indent_str, new_rhs))\n                 }\n                 (None, Some(ref new_rhs)) => Some(format!(\"{}{}\", new_indent_str, new_rhs)),\n@@ -2577,8 +2606,9 @@ pub fn choose_rhs<R: Rewrite>(\n     }\n }\n \n-fn prefer_next_line(orig_rhs: &str, next_line_rhs: &str) -> bool {\n-    !next_line_rhs.contains('\\n') || count_newlines(orig_rhs) > count_newlines(next_line_rhs) + 1\n+fn prefer_next_line(orig_rhs: &str, next_line_rhs: &str, rhs_tactics: RhsTactics) -> bool {\n+    rhs_tactics == RhsTactics::ForceNextLine || !next_line_rhs.contains('\\n')\n+        || count_newlines(orig_rhs) > count_newlines(next_line_rhs) + 1\n }\n \n fn rewrite_expr_addrof("}]}