{"sha": "0fd4a74139347edc1429de3f9d397ec6583698fd", "node_id": "C_kwDOAAsO6NoAKDBmZDRhNzQxMzkzNDdlZGMxNDI5ZGUzZjlkMzk3ZWM2NTgzNjk4ZmQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-08-24T23:50:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-24T23:50:58Z"}, "message": "Rollup merge of #100808 - SkiFire13:migrate_diagnostics_rustc_interface, r=davidtwco\n\nMigrate `rustc_interface` diagnostics\n\n``@rustbot`` label +A-translation\n\nr? rust-lang/diagnostics\ncc #100717", "tree": {"sha": "f43176e00c26c3030f4f98204c4e8d1b6414c1a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f43176e00c26c3030f4f98204c4e8d1b6414c1a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fd4a74139347edc1429de3f9d397ec6583698fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBrliCRBK7hj4Ov3rIwAAMUsIAJOpYfvWmSehCg7jIFGC8DE9\nlrju7NcGq5nw8PxSCcZnEdQMc4MXj4yCW3LI5hspTrfQe5hmNPmBBsoXCKtrqer+\nIq37gSvEsxcxxileIPvhdST+0L93aNhxiqRAK4eOXkQEiPt/Q+S78ltAmulRnlTM\nBbAjnOXT4wl0KR2J7kLtPXoxzFo3VfawR5wMVcW8Z3Z1zIZurTCcg0Pazia7GP41\n8jDHurRK7J8rDQYmrd8PUh2+a4ViL0j05CXTsr/8BCuT1O/3UAwuNlLAB5oHxxbc\nZH6+c4wDYL4IB9Cs/vCSimNof8NnT3jQn7R2E4+x0sD9bWIw3s2JCEpo14vA1mY=\n=TeBo\n-----END PGP SIGNATURE-----\n", "payload": "tree f43176e00c26c3030f4f98204c4e8d1b6414c1a7\nparent 2e4760c7e74104a2f336e21a432a3e613ef8904f\nparent 645de5b825987473f02b6ac62cfe915602be4c28\nauthor Yuki Okushi <jtitor@2k36.org> 1661385058 +0900\ncommitter GitHub <noreply@github.com> 1661385058 +0900\n\nRollup merge of #100808 - SkiFire13:migrate_diagnostics_rustc_interface, r=davidtwco\n\nMigrate `rustc_interface` diagnostics\n\n``@rustbot`` label +A-translation\n\nr? rust-lang/diagnostics\ncc #100717\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fd4a74139347edc1429de3f9d397ec6583698fd", "html_url": "https://github.com/rust-lang/rust/commit/0fd4a74139347edc1429de3f9d397ec6583698fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fd4a74139347edc1429de3f9d397ec6583698fd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e4760c7e74104a2f336e21a432a3e613ef8904f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e4760c7e74104a2f336e21a432a3e613ef8904f", "html_url": "https://github.com/rust-lang/rust/commit/2e4760c7e74104a2f336e21a432a3e613ef8904f"}, {"sha": "645de5b825987473f02b6ac62cfe915602be4c28", "url": "https://api.github.com/repos/rust-lang/rust/commits/645de5b825987473f02b6ac62cfe915602be4c28", "html_url": "https://github.com/rust-lang/rust/commit/645de5b825987473f02b6ac62cfe915602be4c28"}], "stats": {"total": 218, "additions": 156, "deletions": 62}, "files": [{"sha": "bbcb8fc28cffa1a24a5f5f0d7d44303185562703", "filename": "compiler/rustc_error_messages/locales/en-US/interface.ftl", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0fd4a74139347edc1429de3f9d397ec6583698fd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0fd4a74139347edc1429de3f9d397ec6583698fd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finterface.ftl?ref=0fd4a74139347edc1429de3f9d397ec6583698fd", "patch": "@@ -4,3 +4,40 @@ interface_ferris_identifier =\n \n interface_emoji_identifier =\n     identifiers cannot contain emoji: `{$ident}`\n+\n+interface_mixed_bin_crate =\n+    cannot mix `bin` crate type with others\n+\n+interface_mixed_proc_macro_crate =\n+    cannot mix `proc-macro` crate type with others\n+\n+interface_proc_macro_doc_without_arg =\n+    Trying to document proc macro crate without passing '--crate-type proc-macro to rustdoc\n+    .warn = The generated documentation may be incorrect\n+\n+interface_error_writing_dependencies =\n+    error writing dependencies to `{$path}`: {$error}\n+\n+interface_input_file_would_be_overwritten =\n+    the input file \"{$path}\" would be overwritten by the generated executable\n+\n+interface_generated_file_conflicts_with_directory =\n+    the generated executable for the input file \"{$input_path}\" conflicts with the existing directory \"{$dir_path}\"\n+\n+interface_temps_dir_error =\n+    failed to find or create the directory specified by `--temps-dir`\n+\n+interface_out_dir_error =\n+    failed to find or create the directory specified by `--out-dir`\n+\n+interface_cant_emit_mir =\n+    could not emit MIR: {$error}\n+\n+interface_rustc_error_fatal =\n+    fatal error triggered by #[rustc_error]\n+\n+interface_rustc_error_unexpected_annotation =\n+    unexpected annotation used with `#[rustc_error(...)]!\n+\n+interface_failed_writing_file =\n+    failed to write file {$path}: {$error}\""}, {"sha": "6a497aed4aba75900410fe8b166cd56b92293a21", "filename": "compiler/rustc_interface/src/errors.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/0fd4a74139347edc1429de3f9d397ec6583698fd/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd4a74139347edc1429de3f9d397ec6583698fd/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs?ref=0fd4a74139347edc1429de3f9d397ec6583698fd", "patch": "@@ -0,0 +1,89 @@\n+use rustc_macros::SessionDiagnostic;\n+use rustc_span::{Span, Symbol};\n+\n+use std::io;\n+use std::path::Path;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::ferris_identifier)]\n+pub struct FerrisIdentifier {\n+    #[primary_span]\n+    pub spans: Vec<Span>,\n+    #[suggestion(code = \"ferris\", applicability = \"maybe-incorrect\")]\n+    pub first_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::emoji_identifier)]\n+pub struct EmojiIdentifier {\n+    #[primary_span]\n+    pub spans: Vec<Span>,\n+    pub ident: Symbol,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::mixed_bin_crate)]\n+pub struct MixedBinCrate;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::mixed_proc_macro_crate)]\n+pub struct MixedProcMacroCrate;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::proc_macro_doc_without_arg)]\n+pub struct ProcMacroDocWithoutArg;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::error_writing_dependencies)]\n+pub struct ErrorWritingDependencies<'a> {\n+    pub path: &'a Path,\n+    pub error: io::Error,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::input_file_would_be_overwritten)]\n+pub struct InputFileWouldBeOverWritten<'a> {\n+    pub path: &'a Path,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::generated_file_conflicts_with_directory)]\n+pub struct GeneratedFileConflictsWithDirectory<'a> {\n+    pub input_path: &'a Path,\n+    pub dir_path: &'a Path,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::temps_dir_error)]\n+pub struct TempsDirError;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::out_dir_error)]\n+pub struct OutDirError;\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::cant_emit_mir)]\n+pub struct CantEmitMIR {\n+    pub error: io::Error,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::rustc_error_fatal)]\n+pub struct RustcErrorFatal {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::rustc_error_unexpected_annotation)]\n+pub struct RustcErrorUnexpectedAnnotation {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(interface::failed_writing_file)]\n+pub struct FailedWritingFile<'a> {\n+    pub path: &'a Path,\n+    pub error: io::Error,\n+}"}, {"sha": "258e38c3bdb9e09197fc006865defaa66903149a", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fd4a74139347edc1429de3f9d397ec6583698fd/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd4a74139347edc1429de3f9d397ec6583698fd/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=0fd4a74139347edc1429de3f9d397ec6583698fd", "patch": "@@ -5,8 +5,11 @@\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n mod callbacks;\n+mod errors;\n pub mod interface;\n mod passes;\n mod proc_macro_decls;"}, {"sha": "66c6a229b89e4564b4e9130f3191eded516adcf7", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 20, "deletions": 51, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/0fd4a74139347edc1429de3f9d397ec6583698fd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd4a74139347edc1429de3f9d397ec6583698fd/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=0fd4a74139347edc1429de3f9d397ec6583698fd", "patch": "@@ -1,3 +1,8 @@\n+use crate::errors::{\n+    CantEmitMIR, EmojiIdentifier, ErrorWritingDependencies, FerrisIdentifier,\n+    GeneratedFileConflictsWithDirectory, InputFileWouldBeOverWritten, MixedBinCrate,\n+    MixedProcMacroCrate, OutDirError, ProcMacroDocWithoutArg, TempsDirError,\n+};\n use crate::interface::{Compiler, Result};\n use crate::proc_macro_decls;\n use crate::util;\n@@ -13,7 +18,6 @@ use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n use rustc_hir::def_id::StableCrateId;\n use rustc_hir::definitions::Definitions;\n use rustc_lint::{BufferedEarlyLint, EarlyCheckNode, LintStore};\n-use rustc_macros::SessionDiagnostic;\n use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n@@ -31,7 +35,7 @@ use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{FileName, Span};\n+use rustc_span::FileName;\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n use tracing::{info, warn};\n@@ -264,23 +268,6 @@ impl LintStoreExpand for LintStoreExpandImpl<'_> {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(interface::ferris_identifier)]\n-struct FerrisIdentifier {\n-    #[primary_span]\n-    spans: Vec<Span>,\n-    #[suggestion(code = \"ferris\", applicability = \"maybe-incorrect\")]\n-    first_span: Span,\n-}\n-\n-#[derive(SessionDiagnostic)]\n-#[diag(interface::emoji_identifier)]\n-struct EmojiIdentifier {\n-    #[primary_span]\n-    spans: Vec<Span>,\n-    ident: Symbol,\n-}\n-\n /// Runs the \"early phases\" of the compiler: initial `cfg` processing, loading compiler plugins,\n /// syntax expansion, secondary `cfg` expansion, synthesis of a test\n /// harness if one is to be provided, injection of a dependency on the\n@@ -392,10 +379,10 @@ pub fn configure_and_expand(\n \n     if crate_types.len() > 1 {\n         if is_executable_crate {\n-            sess.err(\"cannot mix `bin` crate type with others\");\n+            sess.emit_err(MixedBinCrate);\n         }\n         if is_proc_macro_crate {\n-            sess.err(\"cannot mix `proc-macro` crate type with others\");\n+            sess.emit_err(MixedProcMacroCrate);\n         }\n     }\n \n@@ -406,13 +393,7 @@ pub fn configure_and_expand(\n     // However, we do emit a warning, to let such users know that they should\n     // start passing '--crate-type proc-macro'\n     if has_proc_macro_decls && sess.opts.actually_rustdoc && !is_proc_macro_crate {\n-        let mut msg = sess.diagnostic().struct_warn(\n-            \"Trying to document proc macro crate \\\n-             without passing '--crate-type proc-macro to rustdoc\",\n-        );\n-\n-        msg.warn(\"The generated documentation may be incorrect\");\n-        msg.emit();\n+        sess.emit_warning(ProcMacroDocWithoutArg);\n     } else {\n         krate = sess.time(\"maybe_create_a_macro_crate\", || {\n             let is_test_crate = sess.opts.test;\n@@ -666,11 +647,9 @@ fn write_out_deps(\n                     .emit_artifact_notification(&deps_filename, \"dep-info\");\n             }\n         }\n-        Err(e) => sess.fatal(&format!(\n-            \"error writing dependencies to `{}`: {}\",\n-            deps_filename.display(),\n-            e\n-        )),\n+        Err(error) => {\n+            sess.emit_fatal(ErrorWritingDependencies { path: &deps_filename, error });\n+        }\n     }\n }\n \n@@ -700,29 +679,20 @@ pub fn prepare_outputs(\n     if let Some(ref input_path) = compiler.input_path {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n-                let reported = sess.err(&format!(\n-                    \"the input file \\\"{}\\\" would be overwritten by the generated \\\n-                        executable\",\n-                    input_path.display()\n-                ));\n+                let reported = sess.emit_err(InputFileWouldBeOverWritten { path: input_path });\n                 return Err(reported);\n             }\n-            if let Some(dir_path) = output_conflicts_with_dir(&output_paths) {\n-                let reported = sess.err(&format!(\n-                    \"the generated executable for the input file \\\"{}\\\" conflicts with the \\\n-                        existing directory \\\"{}\\\"\",\n-                    input_path.display(),\n-                    dir_path.display()\n-                ));\n+            if let Some(ref dir_path) = output_conflicts_with_dir(&output_paths) {\n+                let reported =\n+                    sess.emit_err(GeneratedFileConflictsWithDirectory { input_path, dir_path });\n                 return Err(reported);\n             }\n         }\n     }\n \n     if let Some(ref dir) = compiler.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n-            let reported =\n-                sess.err(\"failed to find or create the directory specified by `--temps-dir`\");\n+            let reported = sess.emit_err(TempsDirError);\n             return Err(reported);\n         }\n     }\n@@ -735,8 +705,7 @@ pub fn prepare_outputs(\n     if !only_dep_info {\n         if let Some(ref dir) = compiler.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n-                let reported =\n-                    sess.err(\"failed to find or create the directory specified by `--out-dir`\");\n+                let reported = sess.emit_err(OutDirError);\n                 return Err(reported);\n             }\n         }\n@@ -1019,8 +988,8 @@ pub fn start_codegen<'tcx>(\n     info!(\"Post-codegen\\n{:?}\", tcx.debug_stats());\n \n     if tcx.sess.opts.output_types.contains_key(&OutputType::Mir) {\n-        if let Err(e) = rustc_mir_transform::dump_mir::emit_mir(tcx, outputs) {\n-            tcx.sess.err(&format!(\"could not emit MIR: {}\", e));\n+        if let Err(error) = rustc_mir_transform::dump_mir::emit_mir(tcx, outputs) {\n+            tcx.sess.emit_err(CantEmitMIR { error });\n             tcx.sess.abort_if_errors();\n         }\n     }"}, {"sha": "65fa8d7495a4bf16cc76277a97bf5593e3e29fd9", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0fd4a74139347edc1429de3f9d397ec6583698fd/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fd4a74139347edc1429de3f9d397ec6583698fd/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=0fd4a74139347edc1429de3f9d397ec6583698fd", "patch": "@@ -1,3 +1,4 @@\n+use crate::errors::{FailedWritingFile, RustcErrorFatal, RustcErrorUnexpectedAnnotation};\n use crate::interface::{Compiler, Result};\n use crate::passes::{self, BoxedResolver, QueryContext};\n \n@@ -274,18 +275,14 @@ impl<'tcx> Queries<'tcx> {\n \n                 // Bare `#[rustc_error]`.\n                 None => {\n-                    tcx.sess.span_fatal(\n-                        tcx.def_span(def_id),\n-                        \"fatal error triggered by #[rustc_error]\",\n-                    );\n+                    tcx.sess.emit_fatal(RustcErrorFatal { span: tcx.def_span(def_id) });\n                 }\n \n                 // Some other attribute.\n                 Some(_) => {\n-                    tcx.sess.span_warn(\n-                        tcx.def_span(def_id),\n-                        \"unexpected annotation used with `#[rustc_error(...)]!\",\n-                    );\n+                    tcx.sess.emit_warning(RustcErrorUnexpectedAnnotation {\n+                        span: tcx.def_span(def_id),\n+                    });\n                 }\n             }\n         }\n@@ -360,9 +357,8 @@ impl Linker {\n         if sess.opts.unstable_opts.no_link {\n             let encoded = CodegenResults::serialize_rlink(&codegen_results);\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n-            std::fs::write(&rlink_file, encoded).map_err(|err| {\n-                sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n-            })?;\n+            std::fs::write(&rlink_file, encoded)\n+                .map_err(|error| sess.emit_fatal(FailedWritingFile { path: &rlink_file, error }))?;\n             return Ok(());\n         }\n "}]}