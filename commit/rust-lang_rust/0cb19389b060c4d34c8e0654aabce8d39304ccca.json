{"sha": "0cb19389b060c4d34c8e0654aabce8d39304ccca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYjE5Mzg5YjA2MGM0ZDM0YzhlMDY1NGFhYmNlOGQzOTMwNGNjY2E=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-19T16:20:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:34Z"}, "message": "Fix buggy field access translation", "tree": {"sha": "41936cf465cc4a2ed88753d9d69e5a88145bf7cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41936cf465cc4a2ed88753d9d69e5a88145bf7cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cb19389b060c4d34c8e0654aabce8d39304ccca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb19389b060c4d34c8e0654aabce8d39304ccca", "html_url": "https://github.com/rust-lang/rust/commit/0cb19389b060c4d34c8e0654aabce8d39304ccca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cb19389b060c4d34c8e0654aabce8d39304ccca/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea0b15935a8cb5811eb80e3220e9ab786feb782", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea0b15935a8cb5811eb80e3220e9ab786feb782", "html_url": "https://github.com/rust-lang/rust/commit/bea0b15935a8cb5811eb80e3220e9ab786feb782"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "a2abaa5e12f5531d49590f46a4257884082cb8b3", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=0cb19389b060c4d34c8e0654aabce8d39304ccca", "patch": "@@ -962,7 +962,10 @@ pub enum CastKind {\n pub enum AggregateKind<'tcx> {\n     Vec,\n     Tuple,\n-    Adt(AdtDef<'tcx>, usize, &'tcx Substs<'tcx>),\n+    /// The second field is variant number (discriminant), it's equal to 0\n+    /// for struct and union expressions. The fourth field is active field\n+    /// number and is present only for union expressions.\n+    Adt(AdtDef<'tcx>, usize, &'tcx Substs<'tcx>, Option<usize>),\n     Closure(DefId, ClosureSubsts<'tcx>),\n }\n \n@@ -1069,7 +1072,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         }\n                     }\n \n-                    Adt(adt_def, variant, substs) => {\n+                    Adt(adt_def, variant, substs, _) => {\n                         let variant_def = &adt_def.variants[variant];\n \n                         ppaux::parameterized(fmt, substs, variant_def.did,"}, {"sha": "a0ccc72aa1fcea0d317113b1128fe988bbf525cd", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=0cb19389b060c4d34c8e0654aabce8d39304ccca", "patch": "@@ -187,7 +187,7 @@ impl<'tcx> Rvalue<'tcx> {\n                             ops.iter().map(|op| op.ty(mir, tcx)).collect()\n                         ))\n                     }\n-                    AggregateKind::Adt(def, _, substs) => {\n+                    AggregateKind::Adt(def, _, substs, _) => {\n                         Some(tcx.lookup_item_type(def.did).ty.subst(tcx, substs))\n                     }\n                     AggregateKind::Closure(did, substs) => {"}, {"sha": "c2d0b2c686e777b8e4a0c3e1f095ebe42866ff08", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=0cb19389b060c4d34c8e0654aabce8d39304ccca", "patch": "@@ -536,7 +536,8 @@ macro_rules! make_mir_visitor {\n                             }\n                             AggregateKind::Adt(_adt_def,\n                                                _variant_index,\n-                                               ref $($mutability)* substs) => {\n+                                               ref $($mutability)* substs,\n+                                               _active_field_index) => {\n                                 self.visit_substs(substs);\n                             }\n                             AggregateKind::Closure(ref $($mutability)* def_id,"}, {"sha": "6ea1fb5036065285b4faf0cf25d5fff4c8a12372", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=0cb19389b060c4d34c8e0654aabce8d39304ccca", "patch": "@@ -181,6 +181,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Adt {\n                 adt_def, variant_index, substs, fields, base\n             } => { // see (*) above\n+                let is_union = adt_def.adt_kind() == ty::AdtKind::Union;\n+                let active_field_index = if is_union { Some(fields[0].name.index()) } else { None };\n+\n                 // first process the set of fields that were provided\n                 // (evaluating them in order given by user)\n                 let fields_map: FnvHashMap<_, _> =\n@@ -204,11 +207,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         })\n                         .collect()\n                 } else {\n-                    field_names.iter().map(|n| fields_map[n].clone()).collect()\n+                    field_names.iter().filter_map(|n| fields_map.get(n).cloned()).collect()\n                 };\n \n-                block.and(Rvalue::Aggregate(AggregateKind::Adt(adt_def, variant_index, substs),\n-                                            fields))\n+                let adt = AggregateKind::Adt(adt_def, variant_index, substs, active_field_index);\n+                block.and(Rvalue::Aggregate(adt, fields))\n             }\n             ExprKind::Assign { .. } |\n             ExprKind::AssignOp { .. } => {"}, {"sha": "77af02c18c60ed3cb37f94e3a85b7f19e07c3c9d", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=0cb19389b060c4d34c8e0654aabce8d39304ccca", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> MirPass<'tcx> for Deaggregator {\n                 _ => span_bug!(src_info.span, \"expected aggregate, not {:?}\", rhs),\n             };\n             let (adt_def, variant, substs) = match agg_kind {\n-                &AggregateKind::Adt(adt_def, variant, substs) => (adt_def, variant, substs),\n+                &AggregateKind::Adt(adt_def, variant, substs, None) => (adt_def, variant, substs),\n                 _ => span_bug!(src_info.span, \"expected struct, not {:?}\", rhs),\n             };\n             let n = bb.statements.len();\n@@ -120,7 +120,7 @@ fn get_aggregate_statement_index<'a, 'tcx, 'b>(start: usize,\n             _ => continue,\n         };\n         let (adt_def, variant) = match kind {\n-            &AggregateKind::Adt(adt_def, variant, _) => (adt_def, variant),\n+            &AggregateKind::Adt(adt_def, variant, _, None) => (adt_def, variant),\n             _ => continue,\n         };\n         if operands.len() == 0 {"}, {"sha": "6c6a5f7fc74b0e0c9c67a6525df3d271a0c80c72", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=0cb19389b060c4d34c8e0654aabce8d39304ccca", "patch": "@@ -705,7 +705,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             }\n \n             Rvalue::Aggregate(ref kind, _) => {\n-                if let AggregateKind::Adt(def, _, _) = *kind {\n+                if let AggregateKind::Adt(def, _, _, _) = *kind {\n                     if def.has_dtor() {\n                         self.add(Qualif::NEEDS_DROP);\n                         self.deny_drop();"}, {"sha": "15dc7bb4421c1a9bbc0d8dd2f505035ab1077460", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=0cb19389b060c4d34c8e0654aabce8d39304ccca", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                                         self.monomorphize(&substs));\n                 }\n \n-                let val = if let mir::AggregateKind::Adt(adt_def, index, _) = *kind {\n+                let val = if let mir::AggregateKind::Adt(adt_def, index, _, _) = *kind {\n                     let repr = adt::represent_type(self.ccx, dest_ty);\n                     let disr = Disr::from(adt_def.variants[index].disr_val);\n                     adt::trans_const(self.ccx, &repr, disr, &fields)"}, {"sha": "21b019d7e24dff60cddf699052d63154ecdb022a", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=0cb19389b060c4d34c8e0654aabce8d39304ccca", "patch": "@@ -110,9 +110,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n             mir::Rvalue::Aggregate(ref kind, ref operands) => {\n                 match *kind {\n-                    mir::AggregateKind::Adt(adt_def, index, _) => {\n+                    mir::AggregateKind::Adt(adt_def, variant_index, _, active_field_index) => {\n                         let repr = adt::represent_type(bcx.ccx(), dest.ty.to_ty(bcx.tcx()));\n-                        let disr = Disr::from(adt_def.variants[index].disr_val);\n+                        let disr = Disr::from(adt_def.variants[variant_index].disr_val);\n                         bcx.with_block(|bcx| {\n                             adt::trans_set_discr(bcx, &repr, dest.llval, Disr::from(disr));\n                         });\n@@ -121,8 +121,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             // Do not generate stores and GEPis for zero-sized fields.\n                             if !common::type_is_zero_size(bcx.ccx(), op.ty) {\n                                 let val = adt::MaybeSizedValue::sized(dest.llval);\n-                                let lldest_i = adt::trans_field_ptr_builder(&bcx, &repr,\n-                                                                            val, disr, i);\n+                                let field_index = active_field_index.unwrap_or(i);\n+                                let lldest_i = adt::trans_field_ptr_builder(&bcx, &repr, val,\n+                                                                            disr, field_index);\n                                 self.store_operand(&bcx, lldest_i, op);\n                             }\n                         }"}, {"sha": "a00bd73115a1da8e53ca67a364e2c11b6d790b2b", "filename": "src/test/run-pass/union-basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Ftest%2Frun-pass%2Funion-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Ftest%2Frun-pass%2Funion-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-basic.rs?ref=0cb19389b060c4d34c8e0654aabce8d39304ccca", "patch": "@@ -48,12 +48,12 @@ fn main() {\n         assert_eq!(a, 10);\n     }\n \n-    let mut w: W = unsafe { zeroed() };\n+    let mut w = W { b: 0 };\n     unsafe {\n         assert_eq!(w.a, 0);\n         assert_eq!(w.b, 0);\n         // w.a = 1;\n-        // assert_eq!(w.a, 0);\n-        // assert_eq!(w.b, 0);\n+        assert_eq!(w.a, 0);\n+        assert_eq!(w.b, 0);\n     }\n }"}, {"sha": "e6144f35f1d549056d4da1f98579fa6004ff1146", "filename": "src/test/run-pass/union-pat-refutability.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Ftest%2Frun-pass%2Funion-pat-refutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb19389b060c4d34c8e0654aabce8d39304ccca/src%2Ftest%2Frun-pass%2Funion-pat-refutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion-pat-refutability.rs?ref=0cb19389b060c4d34c8e0654aabce8d39304ccca", "patch": "@@ -54,11 +54,9 @@ fn refut(w: W) {\n }\n \n fn main() {\n-    // ICE\n-    // let v = Value { tag: Tag::I, u: U { i: 1 } };\n-    // assert_eq!(is_zero(v), false);\n+    let v = Value { tag: Tag::I, u: U { i: 1 } };\n+    assert_eq!(is_zero(v), false);\n \n-    // ICE\n-    // let w = W { a: 11 };\n-    // refut(w);\n+    let w = W { a: 11 };\n+    refut(w);\n }"}]}