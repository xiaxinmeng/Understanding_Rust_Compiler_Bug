{"sha": "67ae38a336599a7e0d2898a5ea3416b947458f5d", "node_id": "C_kwDOAAsO6NoAKDY3YWUzOGEzMzY1OTlhN2UwZDI4OThhNWVhMzQxNmI5NDc0NThmNWQ", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2023-05-06T00:27:59Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2023-05-06T00:27:59Z"}, "message": "Expand the LLVM coverage of `--print target-cpus`\n\nWe've been relying on a custom patch to add `MCSubtargetInfo::getCPUTable`\nfor `rustc --print target-cpus`, and just printing that it's not supported\non external LLVM builds. LLVM `main` now has `getAllProcessorDescriptions`\nthat can replace ours, so now we try to use that. In addition, the fallback\npath can at least print the native and default cpu options.\n\nThere were also some mismatches in the function signatures here between\n`LLVM_RUSTLLVM` and otherwise; this is now mitigated by sharing these\nfunctions and only using cpp to adjust the function bodies.", "tree": {"sha": "0f24046523b66ae6f70b3db3d196cf24f4f3f534", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f24046523b66ae6f70b3db3d196cf24f4f3f534"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67ae38a336599a7e0d2898a5ea3416b947458f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67ae38a336599a7e0d2898a5ea3416b947458f5d", "html_url": "https://github.com/rust-lang/rust/commit/67ae38a336599a7e0d2898a5ea3416b947458f5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67ae38a336599a7e0d2898a5ea3416b947458f5d/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22", "html_url": "https://github.com/rust-lang/rust/commit/f9a6b71580cd53dd4491d9bb6400f7ee841d9c22"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "5ec3b95225d178195da9c7ae99871da8f4e3a090", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/67ae38a336599a7e0d2898a5ea3416b947458f5d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/67ae38a336599a7e0d2898a5ea3416b947458f5d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=67ae38a336599a7e0d2898a5ea3416b947458f5d", "patch": "@@ -297,7 +297,6 @@ static Reloc::Model fromRust(LLVMRustRelocModel RustReloc) {\n   report_fatal_error(\"Bad RelocModel.\");\n }\n \n-#ifdef LLVM_RUSTLLVM\n /// getLongestEntryLength - Return the length of the longest entry in the table.\n template<typename KV>\n static size_t getLongestEntryLength(ArrayRef<KV> Table) {\n@@ -312,13 +311,23 @@ extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM, const char* Tar\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n   const Triple::ArchType HostArch = Triple(sys::getDefaultTargetTriple()).getArch();\n   const Triple::ArchType TargetArch = Target->getTargetTriple().getArch();\n+\n+#if LLVM_VERSION_GE(17, 0)\n+  const ArrayRef<SubtargetSubTypeKV> CPUTable = MCInfo->getAllProcessorDescriptions();\n+#elif defined(LLVM_RUSTLLVM)\n   const ArrayRef<SubtargetSubTypeKV> CPUTable = MCInfo->getCPUTable();\n+#else\n+  printf(\"Full target CPU help is not supported by this LLVM version.\\n\\n\");\n+  SubtargetSubTypeKV TargetCPUKV = { TargetCPU, {{}}, {{}} };\n+  const ArrayRef<SubtargetSubTypeKV> CPUTable = TargetCPUKV;\n+#endif\n   unsigned MaxCPULen = getLongestEntryLength(CPUTable);\n \n   printf(\"Available CPUs for this target:\\n\");\n   // Don't print the \"native\" entry when the user specifies --target with a\n   // different arch since that could be wrong or misleading.\n   if (HostArch == TargetArch) {\n+    MaxCPULen = std::max(MaxCPULen, (unsigned) std::strlen(\"native\"));\n     const StringRef HostCPU = sys::getHostCPUName();\n     printf(\"    %-*s - Select the CPU of the current host (currently %.*s).\\n\",\n       MaxCPULen, \"native\", (int)HostCPU.size(), HostCPU.data());\n@@ -338,34 +347,27 @@ extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM, const char* Tar\n }\n \n extern \"C\" size_t LLVMRustGetTargetFeaturesCount(LLVMTargetMachineRef TM) {\n+#ifdef LLVM_RUSTLLVM\n   const TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n   const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();\n   return FeatTable.size();\n+#else\n+  return 0;\n+#endif\n }\n \n extern \"C\" void LLVMRustGetTargetFeature(LLVMTargetMachineRef TM, size_t Index,\n                                          const char** Feature, const char** Desc) {\n+#ifdef LLVM_RUSTLLVM\n   const TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n   const ArrayRef<SubtargetFeatureKV> FeatTable = MCInfo->getFeatureTable();\n   const SubtargetFeatureKV Feat = FeatTable[Index];\n   *Feature = Feat.Key;\n   *Desc = Feat.Desc;\n-}\n-\n-#else\n-\n-extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef) {\n-  printf(\"Target CPU help is not supported by this LLVM version.\\n\\n\");\n-}\n-\n-extern \"C\" size_t LLVMRustGetTargetFeaturesCount(LLVMTargetMachineRef) {\n-  return 0;\n-}\n-\n-extern \"C\" void LLVMRustGetTargetFeature(LLVMTargetMachineRef, const char**, const char**) {}\n #endif\n+}\n \n extern \"C\" const char* LLVMRustGetHostCPUName(size_t *len) {\n   StringRef Name = sys::getHostCPUName();"}]}