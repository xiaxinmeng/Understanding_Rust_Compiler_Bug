{"sha": "aae14e352af95ad70d862e0e952d3817fc6c9c27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZTE0ZTM1MmFmOTVhZDcwZDg2MmUwZTk1MmQzODE3ZmM2YzljMjc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-24T06:08:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-24T06:10:45Z"}, "message": "Allow methods to call other methods in the same class", "tree": {"sha": "dc5c7a9e37a97e0c7ba7cd52967df8e8cea68323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc5c7a9e37a97e0c7ba7cd52967df8e8cea68323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aae14e352af95ad70d862e0e952d3817fc6c9c27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aae14e352af95ad70d862e0e952d3817fc6c9c27", "html_url": "https://github.com/rust-lang/rust/commit/aae14e352af95ad70d862e0e952d3817fc6c9c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aae14e352af95ad70d862e0e952d3817fc6c9c27/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bebdfe8ce8dd737a34625ed1ee6336dbdecf058c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bebdfe8ce8dd737a34625ed1ee6336dbdecf058c", "html_url": "https://github.com/rust-lang/rust/commit/bebdfe8ce8dd737a34625ed1ee6336dbdecf058c"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "f9f1cedb32c9ae83df056ddec05b7fe7d7e829cc", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aae14e352af95ad70d862e0e952d3817fc6c9c27/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae14e352af95ad70d862e0e952d3817fc6c9c27/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=aae14e352af95ad70d862e0e952d3817fc6c9c27", "patch": "@@ -2241,7 +2241,16 @@ fn trans_var(cx: block, def: ast::def, id: ast::node_id, path: @ast::path)\n             }\n             _ { cx.sess().bug(\"unbound self param in class\"); }\n           }\n-     }\n+      }\n+      ast::def_class_method(parent, did) {\n+          alt cx.fcx.llself {\n+             some(slf) {\n+                ret {env: self_env(slf.v, slf.t, none)\n+                        with lval_static_fn(cx, did, id)};\n+             }\n+             none { cx.sess().bug(\"unbound self param in class\"); }\n+          }\n+      }\n       _ {\n         let loc = trans_local_var(cx, def);\n         ret lval_no_env(cx, loc.val, loc.kind);\n@@ -2266,7 +2275,11 @@ fn trans_rec_field_inner(bcx: block, val: ValueRef, ty: ty::t,\n             _ { bcx.tcx().sess.span_bug(sp, \"trans_rec_field:\\\n                  base expr has non-record type\"); }\n         };\n-    let ix = option::get(ty::field_idx(field, fields));\n+    let ix = alt ty::field_idx(field, fields) {\n+      none { bcx.tcx().sess.span_bug(sp, #fmt(\"trans_rec_field:\\\n+               base expr doesn't appear to have a field named %s\", field));}\n+      some(i) { i }\n+    };\n     let val = GEPi(bcx, val, [0, ix as int]);\n     ret {bcx: bcx, val: val, kind: owned};\n }"}, {"sha": "838157ac010a7d9e2992ab17462450aaa3273a3d", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/aae14e352af95ad70d862e0e952d3817fc6c9c27/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae14e352af95ad70d862e0e952d3817fc6c9c27/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=aae14e352af95ad70d862e0e952d3817fc6c9c27", "patch": "@@ -0,0 +1,34 @@\n+mod kitties {\n+\n+class cat {\n+  priv {\n+    let mutable meows : uint;\n+    fn meow() {\n+      #error(\"Meow\");\n+      meows += 1u;\n+      if meows % 5u == 0u {\n+          how_hungry += 1;\n+      }\n+    }\n+  }\n+\n+  let how_hungry : int;\n+\n+  new(in_x : uint, in_y : int) { meows = in_x; how_hungry = in_y; }\n+\n+  fn speak() { meow(); }\n+\n+  fn eat() -> bool {\n+    if how_hungry > 0 {\n+        #error(\"OM NOM NOM\");\n+        how_hungry -= 2;\n+        ret true;\n+    }\n+    else {\n+        #error(\"Not hungry!\");\n+        ret false;\n+    }\n+  }\n+}\n+\n+}"}, {"sha": "b4f46c513057c4d2e8c0d03bc9c3a69c1e50d172", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aae14e352af95ad70d862e0e952d3817fc6c9c27/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae14e352af95ad70d862e0e952d3817fc6c9c27/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=aae14e352af95ad70d862e0e952d3817fc6c9c27", "patch": "@@ -0,0 +1,12 @@\n+// xfail-fast\n+// aux-build:cci_class_4.rs\n+use cci_class_4;\n+import cci_class_4::kitties::*;\n+\n+fn main() {\n+  let nyan = cat(0u, 2);\n+  nyan.eat();\n+  assert(!nyan.eat());\n+  uint::range(1u, 10u, {|_i| nyan.speak(); });\n+  assert(nyan.eat());\n+}\n\\ No newline at end of file"}, {"sha": "c2d5735969c1c6e08e9e420d9e69be96cbda3d02", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aae14e352af95ad70d862e0e952d3817fc6c9c27/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae14e352af95ad70d862e0e952d3817fc6c9c27/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=aae14e352af95ad70d862e0e952d3817fc6c9c27", "patch": "@@ -1,11 +1,10 @@\n-// xfail-test\n class cat {\n   priv {\n     let mutable meows : uint;\n     fn meow() {\n       #error(\"Meow\");\n-      meows += 1;\n-      if meows % 5 == 0 {\n+      meows += 1u;\n+      if meows % 5u == 0u {\n           how_hungry += 1;\n       }\n     }\n@@ -17,13 +16,23 @@ class cat {\n \n   fn speak() { meow(); }\n \n-  fn eat() {\n+  fn eat() -> bool {\n     if how_hungry > 0 {\n         #error(\"OM NOM NOM\");\n         how_hungry -= 2;\n+        ret true;\n     }\n     else {\n         #error(\"Not hungry!\");\n+        ret false;\n     }\n   }\n+}\n+\n+fn main() {\n+  let nyan = cat(0u, 2);\n+  nyan.eat();\n+  assert(!nyan.eat());\n+  uint::range(1u, 10u, {|_i| nyan.speak(); });\n+  assert(nyan.eat());\n }\n\\ No newline at end of file"}]}