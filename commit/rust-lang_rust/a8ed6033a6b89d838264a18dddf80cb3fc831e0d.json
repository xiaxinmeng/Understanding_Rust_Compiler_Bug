{"sha": "a8ed6033a6b89d838264a18dddf80cb3fc831e0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZWQ2MDMzYTZiODlkODM4MjY0YTE4ZGRkZjgwY2IzZmM4MzFlMGQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T08:13:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T08:13:02Z"}, "message": "Rollup merge of #52888 - estebank:shell-sugg, r=oli-obk\n\nUse suggestions for shell format arguments\n\nFollow up to #52649.", "tree": {"sha": "c4ed22b9b4c01412a81fed671ad4fc6accc43904", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ed22b9b4c01412a81fed671ad4fc6accc43904"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8ed6033a6b89d838264a18dddf80cb3fc831e0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYWuOCRBK7hj4Ov3rIwAAdHIIACMiUFeMoksxfLx2R1H3s1YA\ntbx7nOYv0I2zElVnyvrJjRmIc8T0rv7Wn+8gZaBXzNmqb30Hu6+Ki42s8lenMMiy\n5NItvXF/W1pAD94QP7zRWY6VAKE6GE0OPbhzfKnB5XnFPHnbOl+UZO8wHvr4f3ZH\nNNcc7Auo+qZ8aAzxKNWsOXdUYxp5pVwlUbnrDsl6FC2fU72MdEeT3J4e7eEM2d1i\nXU3ir8CYuIcuVZYt7QK+4EiQOak+Xpqi7KhI+3q0mzfzJnNKhdrzK/d7drt9Ven0\njleosaX46d2GFGkHwEltIfvVsAHqgvksQwo9fQcwEBCQu/bsbqpxg1c975FxyfA=\n=5+Oh\n-----END PGP SIGNATURE-----\n", "payload": "tree c4ed22b9b4c01412a81fed671ad4fc6accc43904\nparent 312f18c2ea889961378ee2362c69c10471333804\nparent 75ff0ddb4349eca292016a29402980205c181d3f\nauthor Pietro Albini <pietro@pietroalbini.org> 1533111182 +0200\ncommitter GitHub <noreply@github.com> 1533111182 +0200\n\nRollup merge of #52888 - estebank:shell-sugg, r=oli-obk\n\nUse suggestions for shell format arguments\n\nFollow up to #52649.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8ed6033a6b89d838264a18dddf80cb3fc831e0d", "html_url": "https://github.com/rust-lang/rust/commit/a8ed6033a6b89d838264a18dddf80cb3fc831e0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8ed6033a6b89d838264a18dddf80cb3fc831e0d/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312f18c2ea889961378ee2362c69c10471333804", "url": "https://api.github.com/repos/rust-lang/rust/commits/312f18c2ea889961378ee2362c69c10471333804", "html_url": "https://github.com/rust-lang/rust/commit/312f18c2ea889961378ee2362c69c10471333804"}, {"sha": "75ff0ddb4349eca292016a29402980205c181d3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ff0ddb4349eca292016a29402980205c181d3f", "html_url": "https://github.com/rust-lang/rust/commit/75ff0ddb4349eca292016a29402980205c181d3f"}], "stats": {"total": 109, "additions": 70, "deletions": 39}, "files": [{"sha": "6eba3c4f2bbc9c96e64daf43f1e68516dad911cd", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 46, "deletions": 34, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a8ed6033a6b89d838264a18dddf80cb3fc831e0d/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ed6033a6b89d838264a18dddf80cb3fc831e0d/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=a8ed6033a6b89d838264a18dddf80cb3fc831e0d", "patch": "@@ -774,31 +774,41 @@ pub mod shell {\n \n     #[derive(Clone, PartialEq, Debug)]\n     pub enum Substitution<'a> {\n-        Ordinal(u8),\n-        Name(&'a str),\n-        Escape,\n+        Ordinal(u8, (usize, usize)),\n+        Name(&'a str, (usize, usize)),\n+        Escape((usize, usize)),\n     }\n \n     impl<'a> Substitution<'a> {\n         pub fn as_str(&self) -> String {\n-            match *self {\n-                Substitution::Ordinal(n) => format!(\"${}\", n),\n-                Substitution::Name(n) => format!(\"${}\", n),\n-                Substitution::Escape => \"$$\".into(),\n+            match self {\n+                Substitution::Ordinal(n, _) => format!(\"${}\", n),\n+                Substitution::Name(n, _) => format!(\"${}\", n),\n+                Substitution::Escape(_) => \"$$\".into(),\n             }\n         }\n \n         pub fn position(&self) -> Option<(usize, usize)> {\n-            match *self {\n-                _ => None,\n+            match self {\n+                Substitution::Ordinal(_, pos) |\n+                Substitution::Name(_, pos) |\n+                Substitution::Escape(pos) => Some(*pos),\n+            }\n+        }\n+\n+        pub fn set_position(&mut self, start: usize, end: usize) {\n+            match self {\n+                Substitution::Ordinal(_, ref mut pos) |\n+                Substitution::Name(_, ref mut pos) |\n+                Substitution::Escape(ref mut pos) => *pos = (start, end),\n             }\n         }\n \n         pub fn translate(&self) -> Option<String> {\n             match *self {\n-                Substitution::Ordinal(n) => Some(format!(\"{{{}}}\", n)),\n-                Substitution::Name(n) => Some(format!(\"{{{}}}\", n)),\n-                Substitution::Escape => None,\n+                Substitution::Ordinal(n, _) => Some(format!(\"{{{}}}\", n)),\n+                Substitution::Name(n, _) => Some(format!(\"{{{}}}\", n)),\n+                Substitution::Escape(_) => None,\n             }\n         }\n     }\n@@ -807,20 +817,26 @@ pub mod shell {\n     pub fn iter_subs(s: &str) -> Substitutions {\n         Substitutions {\n             s,\n+            pos: 0,\n         }\n     }\n \n     /// Iterator over substitutions in a string.\n     pub struct Substitutions<'a> {\n         s: &'a str,\n+        pos: usize,\n     }\n \n     impl<'a> Iterator for Substitutions<'a> {\n         type Item = Substitution<'a>;\n         fn next(&mut self) -> Option<Self::Item> {\n             match parse_next_substitution(self.s) {\n-                Some((sub, tail)) => {\n+                Some((mut sub, tail)) => {\n                     self.s = tail;\n+                    if let Some((start, end)) = sub.position() {\n+                        sub.set_position(start + self.pos, end + self.pos);\n+                        self.pos += end;\n+                    }\n                     Some(sub)\n                 },\n                 None => None,\n@@ -837,15 +853,15 @@ pub mod shell {\n         let at = {\n             let start = s.find('$')?;\n             match s[start+1..].chars().next()? {\n-                '$' => return Some((Substitution::Escape, &s[start+2..])),\n+                '$' => return Some((Substitution::Escape((start, start+2)), &s[start+2..])),\n                 c @ '0' ..= '9' => {\n                     let n = (c as u8) - b'0';\n-                    return Some((Substitution::Ordinal(n), &s[start+2..]));\n+                    return Some((Substitution::Ordinal(n, (start, start+2)), &s[start+2..]));\n                 },\n                 _ => {/* fall-through */},\n             }\n \n-            Cur::new_at_start(&s[start..])\n+            Cur::new_at(&s[..], start)\n         };\n \n         let at = at.at_next_cp()?;\n@@ -855,7 +871,10 @@ pub mod shell {\n             None\n         } else {\n             let end = at_next_cp_while(inner, is_ident_tail);\n-            Some((Substitution::Name(at.slice_between(end).unwrap()), end.slice_after()))\n+            let slice = at.slice_between(end).unwrap();\n+            let start = at.at - 1;\n+            let end_pos = at.at + slice.len();\n+            Some((Substitution::Name(slice, (start, end_pos)), end.slice_after()))\n         }\n     }\n \n@@ -907,24 +926,24 @@ pub mod shell {\n         fn test_escape() {\n             assert_eq!(pns(\"has no escapes\"), None);\n             assert_eq!(pns(\"has no escapes, either $\"), None);\n-            assert_eq!(pns(\"*so* has a $$ escape\"), Some((S::Escape, \" escape\")));\n-            assert_eq!(pns(\"$$ leading escape\"), Some((S::Escape, \" leading escape\")));\n-            assert_eq!(pns(\"trailing escape $$\"), Some((S::Escape, \"\")));\n+            assert_eq!(pns(\"*so* has a $$ escape\"), Some((S::Escape((11, 13)), \" escape\")));\n+            assert_eq!(pns(\"$$ leading escape\"), Some((S::Escape((0, 2)), \" leading escape\")));\n+            assert_eq!(pns(\"trailing escape $$\"), Some((S::Escape((16, 18)), \"\")));\n         }\n \n         #[test]\n         fn test_parse() {\n             macro_rules! assert_pns_eq_sub {\n-                ($in_:expr, $kind:ident($arg:expr)) => {\n-                    assert_eq!(pns(concat!($in_, \"!\")), Some((S::$kind($arg.into()), \"!\")))\n+                ($in_:expr, $kind:ident($arg:expr, $pos:expr)) => {\n+                    assert_eq!(pns(concat!($in_, \"!\")), Some((S::$kind($arg.into(), $pos), \"!\")))\n                 };\n             }\n \n-            assert_pns_eq_sub!(\"$0\", Ordinal(0));\n-            assert_pns_eq_sub!(\"$1\", Ordinal(1));\n-            assert_pns_eq_sub!(\"$9\", Ordinal(9));\n-            assert_pns_eq_sub!(\"$N\", Name(\"N\"));\n-            assert_pns_eq_sub!(\"$NAME\", Name(\"NAME\"));\n+            assert_pns_eq_sub!(\"$0\", Ordinal(0, (0, 2)));\n+            assert_pns_eq_sub!(\"$1\", Ordinal(1, (0, 2)));\n+            assert_pns_eq_sub!(\"$9\", Ordinal(9, (0, 2)));\n+            assert_pns_eq_sub!(\"$N\", Name(\"N\", (0, 2)));\n+            assert_pns_eq_sub!(\"$NAME\", Name(\"NAME\", (0, 5)));\n         }\n \n         #[test]\n@@ -961,13 +980,6 @@ mod strcursor {\n     }\n \n     impl<'a> StrCursor<'a> {\n-        pub fn new_at_start(s: &'a str) -> StrCursor<'a> {\n-            StrCursor {\n-                s,\n-                at: 0,\n-            }\n-        }\n-\n         pub fn new_at(s: &'a str, at: usize) -> StrCursor<'a> {\n             StrCursor {\n                 s,"}, {"sha": "ac00ce3af9624dcef68b92bff544d83dd86efdaa", "filename": "src/test/ui/macros/format-foreign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8ed6033a6b89d838264a18dddf80cb3fc831e0d/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8ed6033a6b89d838264a18dddf80cb3fc831e0d/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.rs?ref=a8ed6033a6b89d838264a18dddf80cb3fc831e0d", "patch": "@@ -22,4 +22,6 @@ fn main() {\n     println!(\"{} %f\", \"one\", 2.0); //~ ERROR never used\n \n     println!(\"Hi there, $NAME.\", NAME=\"Tim\"); //~ ERROR never used\n+    println!(\"$1 $0 $$ $NAME\", 1, 2, NAME=3);\n+    //~^ ERROR multiple unused formatting arguments\n }"}, {"sha": "d5e2b514c405c09994d34f0ae875cb72795d40d1", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a8ed6033a6b89d838264a18dddf80cb3fc831e0d/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8ed6033a6b89d838264a18dddf80cb3fc831e0d/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=a8ed6033a6b89d838264a18dddf80cb3fc831e0d", "patch": "@@ -52,10 +52,25 @@ error: named argument never used\n   --> $DIR/format-foreign.rs:24:39\n    |\n LL |     println!(\"Hi there, $NAME.\", NAME=\"Tim\"); //~ ERROR never used\n-   |                                       ^^^^^\n+   |                         -----         ^^^^^\n+   |                         |\n+   |                         help: format specifiers use curly braces: `{NAME}`\n    |\n-   = help: `$NAME` should be written as `{NAME}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`\n \n-error: aborting due to 5 previous errors\n+error: multiple unused formatting arguments\n+  --> $DIR/format-foreign.rs:25:32\n+   |\n+LL |     println!(\"$1 $0 $$ $NAME\", 1, 2, NAME=3);\n+   |              ----------------  ^  ^       ^\n+   |              |\n+   |              multiple missing formatting specifiers\n+   |\n+   = note: shell formatting not supported; see the documentation for `std::fmt`\n+help: format specifiers use curly braces\n+   |\n+LL |     println!(\"{1} {0} $$ {NAME}\", 1, 2, NAME=3);\n+   |               ^^^ ^^^    ^^^^^^\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "67ffeec67cc8b05f8e83190e96dc8c761b1e152c", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8ed6033a6b89d838264a18dddf80cb3fc831e0d/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8ed6033a6b89d838264a18dddf80cb3fc831e0d/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=a8ed6033a6b89d838264a18dddf80cb3fc831e0d", "patch": "@@ -30,7 +30,10 @@ error: multiple unused formatting arguments\n   --> $DIR/format-unused-lables.rs:24:9\n    |\n LL |     println!(\"Some more $STUFF\",\n-   |              ------------------ multiple missing formatting specifiers\n+   |              ------------------\n+   |              |          |\n+   |              |          help: format specifiers use curly braces: `{STUFF}`\n+   |              multiple missing formatting specifiers\n LL |         \"woo!\",  //~ ERROR multiple unused formatting arguments\n    |         ^^^^^^\n LL |             STUFF=\n@@ -39,7 +42,6 @@ LL |        \"things\"\n LL |              , UNUSED=\"args\");\n    |                       ^^^^^^\n    |\n-   = help: `$STUFF` should be written as `{STUFF}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`\n \n error: aborting due to 4 previous errors"}]}