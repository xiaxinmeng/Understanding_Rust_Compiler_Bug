{"sha": "115df577573ffba1534e9d04bc7b131bf32cffe8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNWRmNTc3NTczZmZiYTE1MzRlOWQwNGJjN2IxMzFiZjMyY2ZmZTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-06-16T18:44:55Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-06-30T14:28:25Z"}, "message": "reduce search-index size", "tree": {"sha": "372660d94cd0232dcb043cf6d4d1ecad0e4a4cee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/372660d94cd0232dcb043cf6d4d1ecad0e4a4cee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/115df577573ffba1534e9d04bc7b131bf32cffe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/115df577573ffba1534e9d04bc7b131bf32cffe8", "html_url": "https://github.com/rust-lang/rust/commit/115df577573ffba1534e9d04bc7b131bf32cffe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/115df577573ffba1534e9d04bc7b131bf32cffe8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc1ee4968ff5778cd80e12150f379ddfe6c2767", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc1ee4968ff5778cd80e12150f379ddfe6c2767", "html_url": "https://github.com/rust-lang/rust/commit/bfc1ee4968ff5778cd80e12150f379ddfe6c2767"}], "stats": {"total": 86, "additions": 54, "deletions": 32}, "files": [{"sha": "e4afb9ae54b8ad4d25a15e8257562b99c10023f2", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/115df577573ffba1534e9d04bc7b131bf32cffe8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/115df577573ffba1534e9d04bc7b131bf32cffe8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=115df577573ffba1534e9d04bc7b131bf32cffe8", "patch": "@@ -414,13 +414,13 @@ impl ToJson for Type {\n     fn to_json(&self) -> Json {\n         match self.name {\n             Some(ref name) => {\n-                let mut data = BTreeMap::new();\n-                data.insert(\"n\".to_owned(), name.to_json());\n+                let mut data = Vec::with_capacity(2);\n+                data.push(name.to_json());\n                 if let Some(ref generics) = self.generics {\n-                    data.insert(\"g\".to_owned(), generics.to_json());\n+                    data.push(generics.to_json());\n                 }\n-                Json::Object(data)\n-            },\n+                Json::Array(data)\n+            }\n             None => Json::Null\n         }\n     }\n@@ -439,14 +439,12 @@ impl ToJson for IndexItemFunctionType {\n         if self.inputs.iter().chain(self.output.iter()).any(|ref i| i.name.is_none()) {\n             Json::Null\n         } else {\n-            let mut data = BTreeMap::new();\n-            if !self.inputs.is_empty() {\n-                data.insert(\"i\".to_owned(), self.inputs.to_json());\n-            }\n+            let mut data = Vec::with_capacity(2);\n+            data.push(self.inputs.to_json());\n             if let Some(ref output) = self.output {\n-                data.insert(\"o\".to_owned(), output.to_json());\n+                data.push(output.to_json());\n             }\n-            Json::Object(data)\n+            Json::Array(data)\n         }\n     }\n }\n@@ -963,9 +961,11 @@ themePicker.onblur = handleThemeButtonsBlur;\n     // with rustdoc running in parallel.\n     all_indexes.sort();\n     let mut w = try_err!(File::create(&dst), &dst);\n-    try_err!(writeln!(&mut w, \"var searchIndex = {{}};\"), &dst);\n+    try_err!(writeln!(&mut w, \"var N = null;var searchIndex = {{}};\"), &dst);\n     for index in &all_indexes {\n-        try_err!(writeln!(&mut w, \"{}\", *index), &dst);\n+        try_err!(write_minify_replacer(&mut w, &*index, enable_minification,\n+                                       &[(minifier::js::Keyword::Null, \"N\")]),\n+                 &dst);\n     }\n     try_err!(writeln!(&mut w, \"initSearch(searchIndex);\"), &dst);\n \n@@ -1076,6 +1076,19 @@ fn write_minify(dst: PathBuf, contents: &str, enable_minification: bool) -> Resu\n     }\n }\n \n+fn write_minify_replacer<W: Write>(dst: &mut W,\n+                                   contents: &str,\n+                                   enable_minification: bool,\n+                                   keywords_to_replace: &[(minifier::js::Keyword, &str)])\n+                                   -> io::Result<()> {\n+    if enable_minification {\n+        writeln!(dst, \"{}\",\n+                 minifier::js::minify_and_replace_keywords(contents, keywords_to_replace))\n+    } else {\n+        writeln!(dst, \"{}\", contents)\n+    }\n+}\n+\n /// Takes a path to a source file and cleans the path to it. This canonicalizes\n /// things like \"..\" to components which preserve the \"top down\" hierarchy of a\n /// static HTML tree. Each component in the cleaned path will be passed as an"}, {"sha": "f3c9ce424106de1df81179290b69bc1941fabf86", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/115df577573ffba1534e9d04bc7b131bf32cffe8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/115df577573ffba1534e9d04bc7b131bf32cffe8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=115df577573ffba1534e9d04bc7b131bf32cffe8", "patch": "@@ -415,6 +415,10 @@\n         var currentResults, index, searchIndex;\n         var MAX_LEV_DISTANCE = 3;\n         var MAX_RESULTS = 200;\n+        var GENERICS_DATA = 1;\n+        var NAME = 0;\n+        var INPUTS_DATA = 0;\n+        var OUTPUT_DATA = 1;\n         var params = getQueryStringParams();\n \n         // Populate search bar with query string search term when provided,\n@@ -603,8 +607,9 @@\n                 // match as well.\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n                 if (val.generics.length > 0) {\n-                    if (obj.g && obj.g.length >= val.generics.length) {\n-                        var elems = obj.g.slice(0);\n+                    if (obj.length > GENERICS_DATA &&\n+                          obj[GENERICS_DATA].length >= val.generics.length) {\n+                        var elems = obj[GENERICS_DATA].slice(0);\n                         var total = 0;\n                         var done = 0;\n                         // We need to find the type that matches the most to remove it in order\n@@ -636,11 +641,12 @@\n             // Check for type name and type generics (if any).\n             function checkType(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n-                if (obj.n === val.name) {\n+                if (obj[NAME] === val.name) {\n                     if (literalSearch === true) {\n                         if (val.generics && val.generics.length !== 0) {\n-                            if (obj.g && obj.length >= val.generics.length) {\n-                                var elems = obj.g.slice(0);\n+                            if (obj.length > GENERICS_DATA &&\n+                                  obj[GENERICS_DATA].length >= val.generics.length) {\n+                                var elems = obj[GENERICS_DATA].slice(0);\n                                 var allFound = true;\n                                 var x;\n \n@@ -664,7 +670,7 @@\n                     }\n                     // If the type has generics but don't match, then it won't return at this point.\n                     // Otherwise, `checkGenerics` will return 0 and it'll return.\n-                    if (obj.g && obj.g.length !== 0) {\n+                    if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length !== 0) {\n                         var tmp_lev = checkGenerics(obj, val);\n                         if (tmp_lev <= MAX_LEV_DISTANCE) {\n                             return tmp_lev;\n@@ -675,22 +681,23 @@\n                 }\n                 // Names didn't match so let's check if one of the generic types could.\n                 if (literalSearch === true) {\n-                     if (obj.g && obj.g.length > 0) {\n-                        for (var x = 0; x < obj.g.length; ++x) {\n-                            if (obj.g[x] === val.name) {\n+                     if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length > 0) {\n+                        for (var x = 0; x < obj[GENERICS_DATA].length; ++x) {\n+                            if (obj[GENERICS_DATA][x] === val.name) {\n                                 return true;\n                             }\n                         }\n                     }\n                     return false;\n                 }\n-                var lev_distance = Math.min(levenshtein(obj.n, val.name), lev_distance);\n+                var lev_distance = Math.min(levenshtein(obj[NAME], val.name),\n+                                            lev_distance);\n                 if (lev_distance <= MAX_LEV_DISTANCE) {\n                     lev_distance = Math.min(checkGenerics(obj, val), lev_distance);\n-                } else if (obj.g && obj.g.length > 0) {\n+                } else if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length > 0) {\n                     // We can check if the type we're looking for is inside the generics!\n-                    for (var x = 0; x < obj.g.length; ++x) {\n-                        lev_distance = Math.min(levenshtein(obj.g[x], val.name),\n+                    for (var x = 0; x < obj[GENERICS_DATA].length; ++x) {\n+                        lev_distance = Math.min(levenshtein(obj[GENERICS_DATA][x], val.name),\n                                                 lev_distance);\n                     }\n                 }\n@@ -702,9 +709,10 @@\n             function findArg(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n \n-                if (obj && obj.type && obj.type.i && obj.type.i.length > 0) {\n-                    for (var i = 0; i < obj.type.i.length; i++) {\n-                        var tmp = checkType(obj.type.i[i], val, literalSearch);\n+                if (obj && obj.type && obj.type[INPUTS_DATA] &&\n+                      obj.type[INPUTS_DATA].length > 0) {\n+                    for (var i = 0; i < obj.type[INPUTS_DATA].length; i++) {\n+                        var tmp = checkType(obj.type[INPUTS_DATA][i], val, literalSearch);\n                         if (literalSearch === true && tmp === true) {\n                             return true;\n                         }\n@@ -720,8 +728,8 @@\n             function checkReturned(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n \n-                if (obj && obj.type && obj.type.o) {\n-                    var tmp = checkType(obj.type.o, val, literalSearch);\n+                if (obj && obj.type && obj.type.length > OUTPUT_DATA) {\n+                    var tmp = checkType(obj.type[OUTPUT_DATA], val, literalSearch);\n                     if (literalSearch === true && tmp === true) {\n                         return true;\n                     }\n@@ -866,7 +874,7 @@\n                     var fullId = generateId(ty);\n \n                     // allow searching for void (no output) functions as well\n-                    var typeOutput = type.o ? type.o.name : \"\";\n+                    var typeOutput = type.length > OUTPUT_DATA ? type[OUTPUT_DATA].name : \"\";\n                     var returned = checkReturned(ty, output, true);\n                     if (output.name === \"*\" || returned === true) {\n                         var in_args = false;"}, {"sha": "c8ce4cf8bb5be935c999bab25991951f0caaaee9", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/115df577573ffba1534e9d04bc7b131bf32cffe8/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/115df577573ffba1534e9d04bc7b131bf32cffe8/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=115df577573ffba1534e9d04bc7b131bf32cffe8", "patch": "@@ -233,6 +233,7 @@ function main(argv) {\n \n     var arraysToLoad = [\"itemTypes\"];\n     var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\",\n+                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n                            \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n                            \"levenshtein_row2\"];\n     // execQuery first parameter is built in getQuery (which takes in the search input)."}]}