{"sha": "35a3fa099930e2bb87bd4e4a911039be8fc19e2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YTNmYTA5OTkzMGUyYmI4N2JkNGU0YTkxMTAzOWJlOGZjMTllMmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-30T02:25:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-30T02:41:09Z"}, "message": "add some comments explaining how the tables work", "tree": {"sha": "7289b6f085ccafd38b4ea2de9eb648b43345e5bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7289b6f085ccafd38b4ea2de9eb648b43345e5bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a3fa099930e2bb87bd4e4a911039be8fc19e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a3fa099930e2bb87bd4e4a911039be8fc19e2d", "html_url": "https://github.com/rust-lang/rust/commit/35a3fa099930e2bb87bd4e4a911039be8fc19e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a3fa099930e2bb87bd4e4a911039be8fc19e2d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b45da8a339d1e2935d250cfae63b44a3b16688f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b45da8a339d1e2935d250cfae63b44a3b16688f", "html_url": "https://github.com/rust-lang/rust/commit/2b45da8a339d1e2935d250cfae63b44a3b16688f"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "99cd0d20564ced4703e2710810a31e093c42cfb6", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35a3fa099930e2bb87bd4e4a911039be8fc19e2d/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a3fa099930e2bb87bd4e4a911039be8fc19e2d/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=35a3fa099930e2bb87bd4e4a911039be8fc19e2d", "patch": "@@ -194,8 +194,18 @@ type ctxt =\n       sess: session::session,\n       def_map: resolve::def_map,\n       region_map: @middle::region::region_map,\n+\n+      // Stores the types for various nodes in the AST.  Note that this table\n+      // is not guaranteed to be populated until after typeck.  See\n+      // typeck::fn_ctxt for details.\n       node_types: node_type_table,\n+\n+      // Stores the type parameters which were substituted to obtain the type\n+      // of this node.  This only applies to nodes that refer to entities\n+      // parameterized by type parameters, such as generic fns, types, or\n+      // other items.\n       node_type_substs: hashmap<node_id, [t]>,\n+\n       items: ast_map::map,\n       freevars: freevars::freevar_map,\n       tcache: type_cache,"}, {"sha": "6969c1222d6fbee42256c3a2de4bf6d6859052e3", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/35a3fa099930e2bb87bd4e4a911039be8fc19e2d/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a3fa099930e2bb87bd4e4a911039be8fc19e2d/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=35a3fa099930e2bb87bd4e4a911039be8fc19e2d", "patch": "@@ -82,8 +82,33 @@ type fn_ctxt =\n      locals: hashmap<ast::node_id, int>,\n      next_var_id: @mut int,\n      next_region_var_id: @mut int,\n+\n+     // While type checking a function, the intermediate types for the\n+     // expressions, blocks, and so forth contained within the function are\n+     // stored in these tables.  These types may contain unresolved type\n+     // variables.  After type checking is complete, the functions in the\n+     // writeback module are used to take the types from this table, resolve\n+     // them, and then write them into their permanent home in the type\n+     // context `ccx.tcx`.\n+     //\n+     // This means that during inferencing you should use `fcx.write_ty()`\n+     // and `fcx.expr_ty()` / `fcx.node_ty()` to write/obtain the types of\n+     // nodes within the function.\n+     //\n+     // The types of top-level items, which never contain unbound type\n+     // variables, are stored directly into the `tcx` tables.\n+     //\n+     // n.b.: A type variable is not the same thing as a type parameter.  A\n+     // type variable is rather an \"instance\" of a type parameter: that is,\n+     // given a generic function `fn foo<T>(t: T)`: while checking the\n+     // function `foo`, the type `ty_param(0)` refers to the type `T`, which\n+     // is treated in abstract.  When `foo()` is called, however, `T` will be\n+     // substituted for a fresh type variable `ty_var(N)`.  This variable will\n+     // eventually be resolved to some concrete type (which might itself be\n+     // type parameter).\n      node_types: smallintmap::smallintmap<ty::t>,\n      node_type_substs: hashmap<ast::node_id, [ty::t]>,\n+\n      ccx: @crate_ctxt};\n \n // Determines whether the given node ID is a use of the def of"}]}