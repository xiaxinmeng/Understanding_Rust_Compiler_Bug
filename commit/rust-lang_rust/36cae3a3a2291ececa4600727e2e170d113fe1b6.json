{"sha": "36cae3a3a2291ececa4600727e2e170d113fe1b6", "node_id": "C_kwDOAAsO6NoAKDM2Y2FlM2EzYTIyOTFlY2VjYTQ2MDA3MjdlMmUxNzBkMTEzZmUxYjY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-17T20:26:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-06-01T21:41:58Z"}, "message": "Annotate needs-unwind.", "tree": {"sha": "7d704e7828859f918bf26000b56ef02b0ce205a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d704e7828859f918bf26000b56ef02b0ce205a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36cae3a3a2291ececa4600727e2e170d113fe1b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36cae3a3a2291ececa4600727e2e170d113fe1b6", "html_url": "https://github.com/rust-lang/rust/commit/36cae3a3a2291ececa4600727e2e170d113fe1b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36cae3a3a2291ececa4600727e2e170d113fe1b6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "051dd6714cde780c4642bf51d27b0023487002a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/051dd6714cde780c4642bf51d27b0023487002a1", "html_url": "https://github.com/rust-lang/rust/commit/051dd6714cde780c4642bf51d27b0023487002a1"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "4dea3b3da52c922c6f5fd42aeef9bc25222e4019", "filename": "tests/mir-opt/pre-codegen/checked_ops.checked_shl.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir?ref=36cae3a3a2291ececa4600727e2e170d113fe1b6", "patch": "@@ -4,7 +4,7 @@ fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n     debug x => _1;                       // in scope 0 at $DIR/checked_ops.rs:+0:20: +0:21\n     debug rhs => _2;                     // in scope 0 at $DIR/checked_ops.rs:+0:28: +0:31\n     let mut _0: std::option::Option<u32>; // return place in scope 0 at $DIR/checked_ops.rs:+0:41: +0:52\n-    scope 1 (inlined core::num::<impl u32>::checked_shl) { // at $DIR/checked_ops.rs:14:7: 14:23\n+    scope 1 (inlined core::num::<impl u32>::checked_shl) { // at $DIR/checked_ops.rs:15:7: 15:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         let mut _13: (u32, bool);        // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL"}, {"sha": "b0a16e923b8b3887ba53b5063095834ec1a2c719", "filename": "tests/mir-opt/pre-codegen/checked_ops.ilog2.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.ilog2.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.ilog2.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.ilog2.PreCodegen.after.mir?ref=36cae3a3a2291ececa4600727e2e170d113fe1b6", "patch": "@@ -3,7 +3,7 @@\n fn ilog2(_1: u32) -> u32 {\n     debug x => _1;                       // in scope 0 at $DIR/checked_ops.rs:+0:14: +0:15\n     let mut _0: u32;                     // return place in scope 0 at $DIR/checked_ops.rs:+0:25: +0:28\n-    scope 1 (inlined #[track_caller] core::num::<impl u32>::ilog2) { // at $DIR/checked_ops.rs:19:7: 19:14\n+    scope 1 (inlined #[track_caller] core::num::<impl u32>::ilog2) { // at $DIR/checked_ops.rs:20:7: 20:14\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         let mut _2: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         let mut _3: isize;               // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL"}, {"sha": "0e6c9596efaa6e1ee7b156eea7c5bcb9f30ccebe", "filename": "tests/mir-opt/pre-codegen/checked_ops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.rs?ref=36cae3a3a2291ececa4600727e2e170d113fe1b6", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -O -Zmir-opt-level=2 -Cdebuginfo=2\n+// needs-unwind\n // ignore-debug\n \n #![crate_type = \"lib\"]"}, {"sha": "dead767d20e0005b50878616432446f18eabe35b", "filename": "tests/mir-opt/pre-codegen/checked_ops.step_forward.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.step_forward.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.step_forward.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.step_forward.PreCodegen.after.mir?ref=36cae3a3a2291ececa4600727e2e170d113fe1b6", "patch": "@@ -4,7 +4,7 @@ fn step_forward(_1: u32, _2: usize) -> u32 {\n     debug x => _1;                       // in scope 0 at $DIR/checked_ops.rs:+0:21: +0:22\n     debug n => _2;                       // in scope 0 at $DIR/checked_ops.rs:+0:29: +0:30\n     let mut _0: u32;                     // return place in scope 0 at $DIR/checked_ops.rs:+0:42: +0:45\n-    scope 1 (inlined <u32 as Step>::forward) { // at $DIR/checked_ops.rs:9:5: 9:35\n+    scope 1 (inlined <u32 as Step>::forward) { // at $DIR/checked_ops.rs:10:5: 10:35\n         debug start => _1;               // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         debug n => _2;                   // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         let _3: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/iter/range.rs:LL:COL"}, {"sha": "dce9feddfc570842eaf0c0f50a41804346187c8a", "filename": "tests/mir-opt/pre-codegen/loops.filter_mapped.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Floops.filter_mapped.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Floops.filter_mapped.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.filter_mapped.PreCodegen.after.mir?ref=36cae3a3a2291ececa4600727e2e170d113fe1b6", "patch": "@@ -17,13 +17,13 @@ fn filter_mapped(_1: impl Iterator<Item = T>, _2: impl Fn(T) -> Option<U>) -> ()\n         scope 2 {\n             debug x => _11;              // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n         }\n-        scope 4 (inlined <FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> as Iterator>::next) { // at $DIR/loops.rs:19:14: 19:32\n+        scope 4 (inlined <FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> as Iterator>::next) { // at $DIR/loops.rs:20:14: 20:32\n             debug self => _6;            // in scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n             let mut _7: &mut impl Iterator<Item = T>; // in scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n             let mut _8: &mut impl Fn(T) -> Option<U>; // in scope 4 at $SRC_DIR/core/src/iter/adapters/filter_map.rs:LL:COL\n         }\n     }\n-    scope 3 (inlined <FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> as IntoIterator>::into_iter) { // at $DIR/loops.rs:19:14: 19:32\n+    scope 3 (inlined <FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> as IntoIterator>::into_iter) { // at $DIR/loops.rs:20:14: 20:32\n         debug self => _3;                // in scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n     }\n \n@@ -32,7 +32,7 @@ fn filter_mapped(_1: impl Iterator<Item = T>, _2: impl Fn(T) -> Option<U>) -> ()\n         StorageLive(_3);                 // scope 0 at $DIR/loops.rs:+1:14: +1:32\n         _3 = <impl Iterator<Item = T> as Iterator>::filter_map::<U, impl Fn(T) -> Option<U>>(move _1, move _2) -> bb1; // scope 0 at $DIR/loops.rs:+1:14: +1:32\n                                          // mir::Constant\n-                                         // + span: $DIR/loops.rs:19:19: 19:29\n+                                         // + span: $DIR/loops.rs:20:19: 20:29\n                                          // + literal: Const { ty: fn(impl Iterator<Item = T>, impl Fn(T) -> Option<U>) -> FilterMap<impl Iterator<Item = T>, impl Fn(T) -> Option<U>> {<impl Iterator<Item = T> as Iterator>::filter_map::<U, impl Fn(T) -> Option<U>>}, val: Value(<ZST>) }\n     }\n \n@@ -79,7 +79,7 @@ fn filter_mapped(_1: impl Iterator<Item = T>, _2: impl Fn(T) -> Option<U>) -> ()\n         _11 = move ((_9 as Some).0: U);  // scope 1 at $DIR/loops.rs:+1:9: +1:10\n         _12 = opaque::<U>(move _11) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n                                          // mir::Constant\n-                                         // + span: $DIR/loops.rs:20:9: 20:15\n+                                         // + span: $DIR/loops.rs:21:9: 21:15\n                                          // + literal: Const { ty: fn(U) {opaque::<U>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "12245ccf0005921e1b4e1927ce79c9f85dbee3b6", "filename": "tests/mir-opt/pre-codegen/loops.int_range.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir?ref=36cae3a3a2291ececa4600727e2e170d113fe1b6", "patch": "@@ -16,11 +16,11 @@ fn int_range(_1: usize, _2: usize) -> () {\n         scope 2 {\n             debug i => _8;               // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n         }\n-        scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/loops.rs:7:14: 7:24\n+        scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/loops.rs:8:14: 8:24\n             debug self => _5;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         }\n     }\n-    scope 3 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/loops.rs:7:14: 7:24\n+    scope 3 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/loops.rs:8:14: 8:24\n         debug self => _3;                // in scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n     }\n \n@@ -55,7 +55,7 @@ fn int_range(_1: usize, _2: usize) -> () {\n         _8 = ((_6 as Some).0: usize);    // scope 1 at $DIR/loops.rs:+1:9: +1:10\n         _9 = opaque::<usize>(_8) -> bb5; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n                                          // mir::Constant\n-                                         // + span: $DIR/loops.rs:8:9: 8:15\n+                                         // + span: $DIR/loops.rs:9:9: 9:15\n                                          // + literal: Const { ty: fn(usize) {opaque::<usize>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "bf1380b30ff2a9b3d9e6394d9a05517f8b81cdf2", "filename": "tests/mir-opt/pre-codegen/loops.mapped.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Floops.mapped.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Floops.mapped.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.mapped.PreCodegen.after.mir?ref=36cae3a3a2291ececa4600727e2e170d113fe1b6", "patch": "@@ -18,7 +18,7 @@ fn mapped(_1: impl Iterator<Item = T>, _2: impl Fn(T) -> U) -> () {\n             debug x => _9;               // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n         }\n     }\n-    scope 3 (inlined <Map<impl Iterator<Item = T>, impl Fn(T) -> U> as IntoIterator>::into_iter) { // at $DIR/loops.rs:13:14: 13:25\n+    scope 3 (inlined <Map<impl Iterator<Item = T>, impl Fn(T) -> U> as IntoIterator>::into_iter) { // at $DIR/loops.rs:14:14: 14:25\n         debug self => _3;                // in scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n     }\n \n@@ -27,7 +27,7 @@ fn mapped(_1: impl Iterator<Item = T>, _2: impl Fn(T) -> U) -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/loops.rs:+1:14: +1:25\n         _3 = <impl Iterator<Item = T> as Iterator>::map::<U, impl Fn(T) -> U>(move _1, move _2) -> bb1; // scope 0 at $DIR/loops.rs:+1:14: +1:25\n                                          // mir::Constant\n-                                         // + span: $DIR/loops.rs:13:19: 13:22\n+                                         // + span: $DIR/loops.rs:14:19: 14:22\n                                          // + literal: Const { ty: fn(impl Iterator<Item = T>, impl Fn(T) -> U) -> Map<impl Iterator<Item = T>, impl Fn(T) -> U> {<impl Iterator<Item = T> as Iterator>::map::<U, impl Fn(T) -> U>}, val: Value(<ZST>) }\n     }\n \n@@ -44,7 +44,7 @@ fn mapped(_1: impl Iterator<Item = T>, _2: impl Fn(T) -> U) -> () {\n         _6 = &mut _5;                    // scope 1 at $DIR/loops.rs:+1:14: +1:25\n         _7 = <Map<impl Iterator<Item = T>, impl Fn(T) -> U> as Iterator>::next(_6) -> [return: bb3, unwind: bb9]; // scope 1 at $DIR/loops.rs:+1:14: +1:25\n                                          // mir::Constant\n-                                         // + span: $DIR/loops.rs:13:14: 13:25\n+                                         // + span: $DIR/loops.rs:14:14: 14:25\n                                          // + literal: Const { ty: for<'a> fn(&'a mut Map<impl Iterator<Item = T>, impl Fn(T) -> U>) -> Option<<Map<impl Iterator<Item = T>, impl Fn(T) -> U> as Iterator>::Item> {<Map<impl Iterator<Item = T>, impl Fn(T) -> U> as Iterator>::next}, val: Value(<ZST>) }\n     }\n \n@@ -68,7 +68,7 @@ fn mapped(_1: impl Iterator<Item = T>, _2: impl Fn(T) -> U) -> () {\n         _9 = move ((_7 as Some).0: U);   // scope 1 at $DIR/loops.rs:+1:9: +1:10\n         _10 = opaque::<U>(move _9) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n                                          // mir::Constant\n-                                         // + span: $DIR/loops.rs:14:9: 14:15\n+                                         // + span: $DIR/loops.rs:15:9: 15:15\n                                          // + literal: Const { ty: fn(U) {opaque::<U>}, val: Value(<ZST>) }\n     }\n "}, {"sha": "67f549a511c8a53710bba7d4c56e23a49eb20422", "filename": "tests/mir-opt/pre-codegen/loops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.rs?ref=36cae3a3a2291ececa4600727e2e170d113fe1b6", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -O -Zmir-opt-level=2 -g\n+// needs-unwind\n // ignore-debug\n \n #![crate_type = \"lib\"]"}, {"sha": "6cd5a66de00fcdee05a4e7f4ad4fb21c769e0cb8", "filename": "tests/mir-opt/pre-codegen/loops.vec_move.PreCodegen.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_move.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/36cae3a3a2291ececa4600727e2e170d113fe1b6/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_move.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.vec_move.PreCodegen.after.mir?ref=36cae3a3a2291ececa4600727e2e170d113fe1b6", "patch": "@@ -21,7 +21,7 @@ fn vec_move(_1: Vec<impl Sized>) -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/loops.rs:+1:14: +1:15\n         _2 = <Vec<impl Sized> as IntoIterator>::into_iter(move _1) -> bb1; // scope 0 at $DIR/loops.rs:+1:14: +1:15\n                                          // mir::Constant\n-                                         // + span: $DIR/loops.rs:25:14: 25:15\n+                                         // + span: $DIR/loops.rs:26:14: 26:15\n                                          // + literal: Const { ty: fn(Vec<impl Sized>) -> <Vec<impl Sized> as IntoIterator>::IntoIter {<Vec<impl Sized> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n     }\n \n@@ -36,7 +36,7 @@ fn vec_move(_1: Vec<impl Sized>) -> () {\n         _4 = &mut _3;                    // scope 1 at $DIR/loops.rs:+1:14: +1:15\n         _5 = <std::vec::IntoIter<impl Sized> as Iterator>::next(_4) -> [return: bb3, unwind: bb9]; // scope 1 at $DIR/loops.rs:+1:14: +1:15\n                                          // mir::Constant\n-                                         // + span: $DIR/loops.rs:25:14: 25:15\n+                                         // + span: $DIR/loops.rs:26:14: 26:15\n                                          // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<impl Sized>) -> Option<<std::vec::IntoIter<impl Sized> as Iterator>::Item> {<std::vec::IntoIter<impl Sized> as Iterator>::next}, val: Value(<ZST>) }\n     }\n \n@@ -60,7 +60,7 @@ fn vec_move(_1: Vec<impl Sized>) -> () {\n         _7 = move ((_5 as Some).0: impl Sized); // scope 1 at $DIR/loops.rs:+1:9: +1:10\n         _8 = opaque::<impl Sized>(move _7) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n                                          // mir::Constant\n-                                         // + span: $DIR/loops.rs:26:9: 26:15\n+                                         // + span: $DIR/loops.rs:27:9: 27:15\n                                          // + literal: Const { ty: fn(impl Sized) {opaque::<impl Sized>}, val: Value(<ZST>) }\n     }\n "}]}