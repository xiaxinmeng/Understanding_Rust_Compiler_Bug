{"sha": "c531d9f733e504697309ba6b85ff18ec276da162", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1MzFkOWY3MzNlNTA0Njk3MzA5YmE2Yjg1ZmYxOGVjMjc2ZGExNjI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-28T16:32:28Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-12-01T12:48:59Z"}, "message": "incr.comp.: Allow for recovering from missing on-disk cache entries.", "tree": {"sha": "97b23df5087748e31c52ca1cf3f7669cdbbf0f4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97b23df5087748e31c52ca1cf3f7669cdbbf0f4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c531d9f733e504697309ba6b85ff18ec276da162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c531d9f733e504697309ba6b85ff18ec276da162", "html_url": "https://github.com/rust-lang/rust/commit/c531d9f733e504697309ba6b85ff18ec276da162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c531d9f733e504697309ba6b85ff18ec276da162/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "059bd805262b3a9e90226eadc2262ee96619eacb", "url": "https://api.github.com/repos/rust-lang/rust/commits/059bd805262b3a9e90226eadc2262ee96619eacb", "html_url": "https://github.com/rust-lang/rust/commit/059bd805262b3a9e90226eadc2262ee96619eacb"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "ffddde557da124b18c385e7274aa044d18537893", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c531d9f733e504697309ba6b85ff18ec276da162/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c531d9f733e504697309ba6b85ff18ec276da162/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=c531d9f733e504697309ba6b85ff18ec276da162", "patch": "@@ -31,9 +31,9 @@ pub(super) trait QueryDescription<'tcx>: QueryConfig {\n         false\n     }\n \n-    fn load_from_disk<'a>(_: TyCtxt<'a, 'tcx, 'tcx>,\n-                          _: SerializedDepNodeIndex)\n-                          -> Self::Value {\n+    fn try_load_from_disk<'a>(_: TyCtxt<'a, 'tcx, 'tcx>,\n+                              _: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n         bug!(\"QueryDescription::load_from_disk() called for unsupport query.\")\n     }\n }\n@@ -556,12 +556,14 @@ impl<'tcx> QueryDescription<'tcx> for queries::typeck_tables_of<'tcx> {\n         def_id.is_local()\n     }\n \n-    fn load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          id: SerializedDepNodeIndex)\n-                          -> Self::Value {\n-        let typeck_tables: ty::TypeckTables<'tcx> = tcx.on_disk_query_result_cache\n-                                                       .load_query_result(tcx, id);\n-        tcx.alloc_tables(typeck_tables)\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              id: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n+        let typeck_tables: Option<ty::TypeckTables<'tcx>> = tcx\n+            .on_disk_query_result_cache\n+            .try_load_query_result(tcx, id);\n+\n+        typeck_tables.map(|tables| tcx.alloc_tables(tables))\n     }\n }\n "}, {"sha": "ca0c3bafea8df5ca4eaa918a41541848315cc5e2", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c531d9f733e504697309ba6b85ff18ec276da162/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c531d9f733e504697309ba6b85ff18ec276da162/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=c531d9f733e504697309ba6b85ff18ec276da162", "patch": "@@ -289,21 +289,18 @@ impl<'sess> OnDiskCache<'sess> {\n         debug_assert!(prev.is_none());\n     }\n \n-    pub fn load_query_result<'a, 'tcx, T>(&self,\n-                                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                          dep_node_index: SerializedDepNodeIndex)\n-                                          -> T\n+    /// Returns the cached query result if there is something in the cache for\n+    /// the given SerializedDepNodeIndex. Otherwise returns None.\n+    pub fn try_load_query_result<'a, 'tcx, T>(&self,\n+                                              tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                              dep_node_index: SerializedDepNodeIndex)\n+                                              -> Option<T>\n         where T: Decodable\n     {\n-        let result = self.load_indexed(tcx,\n-                                       dep_node_index,\n-                                       &self.query_result_index,\n-                                       \"query result\");\n-        if let Some(result) = result {\n-            result\n-        } else {\n-            bug!(\"Could not find query result for key {:?}\", dep_node_index)\n-        }\n+        self.load_indexed(tcx,\n+                          dep_node_index,\n+                          &self.query_result_index,\n+                          \"query result\")\n     }\n \n     /// Store a diagnostic emitted during computation of an anonymous query."}, {"sha": "fdaa13e7fd16fd82848e2688697092fd698843c0", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c531d9f733e504697309ba6b85ff18ec276da162/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c531d9f733e504697309ba6b85ff18ec276da162/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=c531d9f733e504697309ba6b85ff18ec276da162", "patch": "@@ -392,12 +392,31 @@ macro_rules! define_maps {\n             {\n                 debug_assert!(tcx.dep_graph.is_green(dep_node_index));\n \n-                let result = if tcx.sess.opts.debugging_opts.incremental_queries &&\n-                                Self::cache_on_disk(key) {\n+                // First we try to load the result from the on-disk cache\n+                let result = if Self::cache_on_disk(key) &&\n+                                tcx.sess.opts.debugging_opts.incremental_queries {\n                     let prev_dep_node_index =\n                         tcx.dep_graph.prev_dep_node_index_of(dep_node);\n-                    Self::load_from_disk(tcx.global_tcx(), prev_dep_node_index)\n+                    let result = Self::try_load_from_disk(tcx.global_tcx(),\n+                                                          prev_dep_node_index);\n+\n+                    // We always expect to find a cached result for things that\n+                    // can be forced from DepNode.\n+                    debug_assert!(!dep_node.kind.can_reconstruct_query_key() ||\n+                                  result.is_some(),\n+                                  \"Missing on-disk cache entry for {:?}\",\n+                                  dep_node);\n+                    result\n+                } else {\n+                    // Some things are never cached on disk.\n+                    None\n+                };\n+\n+                let result = if let Some(result) = result {\n+                    result\n                 } else {\n+                    // We could not load a result from the on-disk cache, so\n+                    // recompute.\n                     let (result, _ ) = tcx.cycle_check(span, Query::$name(key), || {\n                         // The diagnostics for this query have already been\n                         // promoted to the current session during"}]}