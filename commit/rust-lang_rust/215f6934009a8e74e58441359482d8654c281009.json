{"sha": "215f6934009a8e74e58441359482d8654c281009", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNWY2OTM0MDA5YThlNzRlNTg0NDEzNTk0ODJkODY1NGMyODEwMDk=", "commit": {"author": {"name": "jmu303", "email": "muj@bc.edu", "date": "2014-11-17T19:41:47Z"}, "committer": {"name": "jmu303", "email": "muj@bc.edu", "date": "2014-11-17T19:41:47Z"}, "message": "Fix several typos in comments\n\nliblog, libregex, librustc, libstd", "tree": {"sha": "1677b4076e148d5c89a447031b29b436dba82384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1677b4076e148d5c89a447031b29b436dba82384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215f6934009a8e74e58441359482d8654c281009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215f6934009a8e74e58441359482d8654c281009", "html_url": "https://github.com/rust-lang/rust/commit/215f6934009a8e74e58441359482d8654c281009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215f6934009a8e74e58441359482d8654c281009/comments", "author": {"login": "jayelm", "id": 6245103, "node_id": "MDQ6VXNlcjYyNDUxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/6245103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayelm", "html_url": "https://github.com/jayelm", "followers_url": "https://api.github.com/users/jayelm/followers", "following_url": "https://api.github.com/users/jayelm/following{/other_user}", "gists_url": "https://api.github.com/users/jayelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayelm/subscriptions", "organizations_url": "https://api.github.com/users/jayelm/orgs", "repos_url": "https://api.github.com/users/jayelm/repos", "events_url": "https://api.github.com/users/jayelm/events{/privacy}", "received_events_url": "https://api.github.com/users/jayelm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jayelm", "id": 6245103, "node_id": "MDQ6VXNlcjYyNDUxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/6245103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayelm", "html_url": "https://github.com/jayelm", "followers_url": "https://api.github.com/users/jayelm/followers", "following_url": "https://api.github.com/users/jayelm/following{/other_user}", "gists_url": "https://api.github.com/users/jayelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayelm/subscriptions", "organizations_url": "https://api.github.com/users/jayelm/orgs", "repos_url": "https://api.github.com/users/jayelm/repos", "events_url": "https://api.github.com/users/jayelm/events{/privacy}", "received_events_url": "https://api.github.com/users/jayelm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88c743def3cf42ee943ca09dda1e6dccf4894db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c743def3cf42ee943ca09dda1e6dccf4894db9", "html_url": "https://github.com/rust-lang/rust/commit/88c743def3cf42ee943ca09dda1e6dccf4894db9"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "2e60ce31d5e5e7bc0b2ca24d0e2440ac1b5e54da", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f6934009a8e74e58441359482d8654c281009/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f6934009a8e74e58441359482d8654c281009/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=215f6934009a8e74e58441359482d8654c281009", "patch": "@@ -137,7 +137,7 @@\n //! includes 'foo'.\n //! * `info/f.o` turns on all info logging where the log message includes 'foo',\n //! 'f1o', 'fao', etc.\n-//! * `hello=debug/foo*foo` turns on debug logging for 'hello' where the the log\n+//! * `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n //! message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n //! * `error,hello=warn/[0-9] scopes` turn on global error logging and also warn for\n //!  hello. In both cases the log message must include a single digit number"}, {"sha": "98f7ce54e38d89a5429ab87a3174b93fb43a967f", "filename": "src/libregex/re.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f6934009a8e74e58441359482d8654c281009/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f6934009a8e74e58441359482d8654c281009/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=215f6934009a8e74e58441359482d8654c281009", "patch": "@@ -558,7 +558,7 @@ pub struct NoExpand<'t>(pub &'t str);\n /// Replacer describes types that can be used to replace matches in a string.\n pub trait Replacer {\n     /// Returns a possibly owned string that is used to replace the match\n-    /// corresponding the the `caps` capture group.\n+    /// corresponding to the `caps` capture group.\n     ///\n     /// The `'a` lifetime refers to the lifetime of a borrowed string when\n     /// a new owned string isn't needed (e.g., for `NoExpand`)."}, {"sha": "8c05f9a8740320ef41ae9bc93d41cef8a1311604", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f6934009a8e74e58441359482d8654c281009/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f6934009a8e74e58441359482d8654c281009/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=215f6934009a8e74e58441359482d8654c281009", "patch": "@@ -345,7 +345,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // matches this obligation, then we can assume that the\n         // obligation is satisfied for now (still all other conditions\n         // must be met of course). One obvious case this comes up is\n-        // marker traits like `Send`. Think of a a linked list:\n+        // marker traits like `Send`. Think of a linked list:\n         //\n         //    struct List<T> { data: T, next: Option<Box<List<T>>> {\n         //"}, {"sha": "a83ce04480931d8197a805f557b2b9f5ff87d6d1", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f6934009a8e74e58441359482d8654c281009/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f6934009a8e74e58441359482d8654c281009/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=215f6934009a8e74e58441359482d8654c281009", "patch": "@@ -716,7 +716,7 @@ impl<'a, K, V> Iterator<RawBucket<K, V>> for RawBuckets<'a, K, V> {\n }\n \n /// An iterator that moves out buckets in reverse order. It leaves the table\n-/// in an an inconsistent state and should only be used for dropping\n+/// in an inconsistent state and should only be used for dropping\n /// the table's remaining entries. It's used in the implementation of Drop.\n struct RevMoveBuckets<'a, K, V> {\n     raw: RawBucket<K, V>,"}, {"sha": "38b5c254d4190a9477501e7092dc6eed9afbe459", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215f6934009a8e74e58441359482d8654c281009/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215f6934009a8e74e58441359482d8654c281009/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=215f6934009a8e74e58441359482d8654c281009", "patch": "@@ -77,7 +77,7 @@ const BUF_BYTES : uint = 2048u;\n /// # Failure\n ///\n /// Fails if the current working directory value is invalid:\n-/// Possibles cases:\n+/// Possible cases:\n ///\n /// * Current directory does not exist.\n /// * There are insufficient permissions to access the current directory."}]}