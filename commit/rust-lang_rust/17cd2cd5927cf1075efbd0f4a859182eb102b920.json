{"sha": "17cd2cd5927cf1075efbd0f4a859182eb102b920", "node_id": "C_kwDOAAsO6NoAKDE3Y2QyY2Q1OTI3Y2YxMDc1ZWZiZDBmNGE4NTkxODJlYjEwMmI5MjA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-01-30T12:32:21Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-01-30T12:32:21Z"}, "message": "Fix an edge case in `chat::DecodeUtf16::size_hint`\n\nThere are cases, when data in the buf might or might not be an error.", "tree": {"sha": "0dd16de8c7d60190247c36e8149f18150fd88c76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dd16de8c7d60190247c36e8149f18150fd88c76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17cd2cd5927cf1075efbd0f4a859182eb102b920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17cd2cd5927cf1075efbd0f4a859182eb102b920", "html_url": "https://github.com/rust-lang/rust/commit/17cd2cd5927cf1075efbd0f4a859182eb102b920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17cd2cd5927cf1075efbd0f4a859182eb102b920/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c97d1012e52c9a7ac217a15cce71473cc070e26", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c97d1012e52c9a7ac217a15cce71473cc070e26", "html_url": "https://github.com/rust-lang/rust/commit/2c97d1012e52c9a7ac217a15cce71473cc070e26"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "8b9f979b573f70830930452c21fc94a724fbc651", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/17cd2cd5927cf1075efbd0f4a859182eb102b920/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cd2cd5927cf1075efbd0f4a859182eb102b920/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=17cd2cd5927cf1075efbd0f4a859182eb102b920", "patch": "@@ -121,23 +121,31 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         let (low, high) = self.iter.size_hint();\n \n-        // If\n-        // - `self.buf` contains a non surrogate (`u < 0xD800 || 0xDFFF < u`), or\n-        // - `high == Some(0)` (and `self.buf` contains a leading surrogate since\n-        //   it can never contain a trailing surrogate)\n-        //\n-        // then buf contains an additional character or error that doesn't\n-        // need a pair from `self.iter`, so it's +1 additional element.\n-        let addition_from_buf =\n-            self.buf.map_or(false, |u| u < 0xD800 || 0xDFFF < u || high == Some(0)) as usize;\n+        let (low_buf, high_buf) = match self.buf {\n+            // buf is empty, no additional elements from it.\n+            None => (0, 0),\n+            // `u` is a non surrogate, so it's always an additional character.\n+            Some(u) if u < 0xD800 || 0xDFFF < u => (1, 1),\n+            // `u` is a leading surrogate (it can never be a trailing surrogate and\n+            // it's a surrogate due to the previous branch) and `self.iter` is empty.\n+            //\n+            // `u` can't be paired, since the `self.iter` is empty,\n+            // so it will always become an additional element (error).\n+            Some(_u) if high == Some(0) => (1, 1),\n+            // `u` is a leading surrogate and `iter` may be non-empty.\n+            //\n+            // `u` can either pair with a trailing surrogate, in which case no additional elements\n+            // are produced, or it can become an error, in which case it's an additional character (error).\n+            Some(_u) => (0, 1),\n+        };\n \n         // `self.iter` could contain entirely valid surrogates (2 elements per\n         // char), or entirely non-surrogates (1 element per char).\n         //\n         // On odd lower bound, at least one element must stay unpaired\n         // (with other elements from `self.iter`), so we round up.\n-        let low = low.div_ceil(2) + addition_from_buf;\n-        let high = high.and_then(|h| h.checked_add(addition_from_buf));\n+        let low = low.div_ceil(2) + low_buf;\n+        let high = high.and_then(|h| h.checked_add(high_buf));\n \n         (low, high)\n     }"}, {"sha": "4c899b6eb43d0c5b1e1934b16edffc825d3a8a82", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17cd2cd5927cf1075efbd0f4a859182eb102b920/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cd2cd5927cf1075efbd0f4a859182eb102b920/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=17cd2cd5927cf1075efbd0f4a859182eb102b920", "patch": "@@ -329,6 +329,7 @@ fn test_decode_utf16_size_hint() {\n     }\n \n     check(&[0xD800, 0xD800, 0xDC00]);\n+    check(&[0xD800, 0xD800, 0x0]);\n     check(&[0xD800, 0x41, 0x42]);\n     check(&[0xD800, 0]);\n     check(&[0xD834, 0x006d]);"}]}