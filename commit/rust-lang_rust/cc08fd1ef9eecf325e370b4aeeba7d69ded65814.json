{"sha": "cc08fd1ef9eecf325e370b4aeeba7d69ded65814", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMDhmZDFlZjllZWNmMzI1ZTM3MGI0YWVlYmE3ZDY5ZGVkNjU4MTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-01T18:47:11Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-01T18:47:59Z"}, "message": "rt: Allow iteration over the dynastack", "tree": {"sha": "bc97f8f956ba157011c4eee33932f5de16589dff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc97f8f956ba157011c4eee33932f5de16589dff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc08fd1ef9eecf325e370b4aeeba7d69ded65814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc08fd1ef9eecf325e370b4aeeba7d69ded65814", "html_url": "https://github.com/rust-lang/rust/commit/cc08fd1ef9eecf325e370b4aeeba7d69ded65814", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc08fd1ef9eecf325e370b4aeeba7d69ded65814/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d00ef9a461ec04962f4ffbd6567364c0c2e9d73", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d00ef9a461ec04962f4ffbd6567364c0c2e9d73", "html_url": "https://github.com/rust-lang/rust/commit/9d00ef9a461ec04962f4ffbd6567364c0c2e9d73"}], "stats": {"total": 126, "additions": 109, "deletions": 17}, "files": [{"sha": "81d0076a37cc980a5e4682e90f0e47cdd93c18b5", "filename": "src/rt/rust_obstack.cpp", "status": "modified", "additions": 60, "deletions": 16, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/cc08fd1ef9eecf325e370b4aeeba7d69ded65814/src%2Frt%2Frust_obstack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cc08fd1ef9eecf325e370b4aeeba7d69ded65814/src%2Frt%2Frust_obstack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_obstack.cpp?ref=cc08fd1ef9eecf325e370b4aeeba7d69ded65814", "patch": "@@ -25,28 +25,14 @@ const size_t DEFAULT_ALIGNMENT = 16;\n struct rust_obstack_alloc {\n     size_t len;\n     const type_desc *tydesc;\n+    uint32_t pad0;  // FIXME: x86-specific\n+    uint32_t pad1;\n     uint8_t data[];\n \n     rust_obstack_alloc(size_t in_len, const type_desc *in_tydesc)\n     : len(in_len), tydesc(in_tydesc) {}\n };\n \n-// A contiguous set of allocations.\n-struct rust_obstack_chunk {\n-    rust_obstack_chunk *prev;\n-    size_t size;\n-    size_t alen;\n-    size_t pad;\n-    uint8_t data[];\n-\n-    rust_obstack_chunk(rust_obstack_chunk *in_prev, size_t in_size)\n-    : prev(in_prev), size(in_size), alen(0) {}\n-\n-    void *alloc(size_t len, type_desc *tydesc);\n-    bool free(void *ptr);\n-    void *mark();\n-};\n-\n void *\n rust_obstack_chunk::alloc(size_t len, type_desc *tydesc) {\n     alen = align_to(alen, DEFAULT_ALIGNMENT);\n@@ -132,3 +118,61 @@ rust_obstack::mark() {\n     return chunk ? chunk->mark() : NULL;\n }\n \n+\n+// Iteration over self-describing obstacks\n+\n+std::pair<const type_desc *,void *>\n+rust_obstack::iterator::operator*() const {\n+    return std::make_pair(alloc->tydesc, alloc->data);\n+}\n+\n+rust_obstack::iterator &\n+rust_obstack::iterator::operator++() {\n+    uint8_t *adata = align_to(alloc->data + alloc->len, DEFAULT_ALIGNMENT);\n+    alloc = reinterpret_cast<rust_obstack_alloc *>(adata);\n+    if (reinterpret_cast<uint8_t *>(alloc) >= chunk->data + chunk->alen) {\n+        // We reached the end of this chunk; go on to the next one.\n+        chunk = chunk->prev;\n+        if (chunk)\n+            alloc = reinterpret_cast<rust_obstack_alloc *>(chunk->data);\n+        else\n+            alloc = NULL;\n+    }\n+    return *this;\n+}\n+\n+bool\n+rust_obstack::iterator::operator==(const rust_obstack::iterator &other)\n+        const {\n+    return chunk == other.chunk && alloc == other.alloc;\n+}\n+\n+bool\n+rust_obstack::iterator::operator!=(const rust_obstack::iterator &other)\n+        const {\n+    return !(*this == other);\n+}\n+\n+\n+// Debugging\n+\n+void\n+rust_obstack::dump() const {\n+    iterator b = begin(), e = end();\n+    while (b != e) {\n+        std::pair<const type_desc *,void *> data = *b;\n+        shape::arena arena;\n+        shape::type_param *params = shape::type_param::from_tydesc(data.first,\n+                                                                   arena);\n+        shape::log log(task, true, data.first->shape, params,\n+                       data.first->shape_tables,\n+                       reinterpret_cast<uint8_t *>(data.second), std::cerr);\n+        log.walk();\n+        std::cerr << \"\\n\";\n+\n+        ++b;\n+    }\n+\n+    std::cerr << \"end of dynastack dump\\n\";\n+}\n+"}, {"sha": "99d9ba801b4f84255decdd20f70780bfd91e9d30", "filename": "src/rt/rust_obstack.h", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cc08fd1ef9eecf325e370b4aeeba7d69ded65814/src%2Frt%2Frust_obstack.h", "raw_url": "https://github.com/rust-lang/rust/raw/cc08fd1ef9eecf325e370b4aeeba7d69ded65814/src%2Frt%2Frust_obstack.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_obstack.h?ref=cc08fd1ef9eecf325e370b4aeeba7d69ded65814", "patch": "@@ -3,10 +3,28 @@\n #ifndef RUST_OBSTACK_H\n #define RUST_OBSTACK_H\n \n-struct rust_obstack_chunk;\n+#include <utility>\n+\n+struct rust_obstack_alloc;\n struct rust_task;\n struct type_desc;\n \n+// A contiguous set of allocations.\n+struct rust_obstack_chunk {\n+    rust_obstack_chunk *prev;\n+    size_t size;\n+    size_t alen;\n+    size_t pad;\n+    uint8_t data[];\n+\n+    rust_obstack_chunk(rust_obstack_chunk *in_prev, size_t in_size)\n+    : prev(in_prev), size(in_size), alen(0) {}\n+\n+    void *alloc(size_t len, type_desc *tydesc);\n+    bool free(void *ptr);\n+    void *mark();\n+};\n+\n class rust_obstack {\n     rust_obstack_chunk *chunk;\n     rust_task *task;\n@@ -15,12 +33,42 @@ class rust_obstack {\n     void *alloc_new(size_t len, type_desc *tydesc);\n \n public:\n+    class iterator {\n+        rust_obstack_chunk *chunk;\n+        rust_obstack_alloc *alloc;\n+\n+    public:\n+        iterator(rust_obstack_chunk *in_chunk)\n+        : chunk(in_chunk),\n+          alloc(in_chunk\n+                ? reinterpret_cast<rust_obstack_alloc *>(in_chunk->data)\n+                : NULL) {}\n+\n+        std::pair<const type_desc *,void *> operator*() const;\n+        iterator &operator++();\n+        bool operator==(const iterator &other) const;\n+        bool operator!=(const iterator &other) const;\n+    };\n+\n     rust_obstack(rust_task *in_task) : chunk(NULL), task(in_task) {}\n     ~rust_obstack();\n \n+    inline iterator begin() const {\n+        iterator it(chunk);\n+        return it;\n+    }\n+\n+    inline iterator end() const {\n+        iterator it(NULL);\n+        return it;\n+    }\n+\n     void *alloc(size_t len, type_desc *tydesc);\n     void free(void *ptr);\n     void *mark();\n+\n+    /** Debugging tool: dumps the contents of this obstack to stderr. */\n+    void dump() const;\n };\n \n #endif"}]}