{"sha": "2bc8f4ff80a4343bacfcab9629eb681e576dee48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYzhmNGZmODBhNDM0M2JhY2ZjYWI5NjI5ZWI2ODFlNTc2ZGVlNDg=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-26T10:34:32Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2016-01-26T10:51:24Z"}, "message": "Add interpolated_or_expr_span macro and pass lo to newly added parse_dot_suffix", "tree": {"sha": "c50052db83ca56527de03c8d1919bcb0be3a65ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c50052db83ca56527de03c8d1919bcb0be3a65ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc8f4ff80a4343bacfcab9629eb681e576dee48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc8f4ff80a4343bacfcab9629eb681e576dee48", "html_url": "https://github.com/rust-lang/rust/commit/2bc8f4ff80a4343bacfcab9629eb681e576dee48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc8f4ff80a4343bacfcab9629eb681e576dee48/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bde18d60c2e2a4fec149312bae6e20609b6599b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bde18d60c2e2a4fec149312bae6e20609b6599b", "html_url": "https://github.com/rust-lang/rust/commit/1bde18d60c2e2a4fec149312bae6e20609b6599b"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "e00e72a72e99db8c7e3e490f7e4ac8b6ef41378a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 30, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2bc8f4ff80a4343bacfcab9629eb681e576dee48/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc8f4ff80a4343bacfcab9629eb681e576dee48/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2bc8f4ff80a4343bacfcab9629eb681e576dee48", "patch": "@@ -233,6 +233,21 @@ macro_rules! maybe_whole {\n     )\n }\n \n+/// Uses $parse_expr to parse an expression and returns the span of the interpolated\n+/// token or the span of the parsed expression, if it was not interpolated\n+macro_rules! interpolated_or_expr_span {\n+    ($p:expr, $parse_expr:expr) => {\n+        {\n+            let is_interpolated = $p.token.is_interpolated();\n+            let e = $parse_expr;\n+            if is_interpolated {\n+                ($p.last_span, e)\n+            } else {\n+                (e.span, e)\n+            }\n+        }\n+    }\n+}\n \n fn maybe_append(mut lhs: Vec<Attribute>, rhs: Option<Vec<Attribute>>)\n                 -> Vec<Attribute> {\n@@ -2323,14 +2338,8 @@ impl<'a> Parser<'a> {\n                                   -> PResult<'a, P<Expr>> {\n         let attrs = try!(self.parse_or_use_outer_attributes(already_parsed_attrs));\n \n-        let is_interpolated = self.token.is_interpolated();\n-        let b = try!(self.parse_bottom_expr());\n-        let lo = if is_interpolated {\n-            self.last_span.lo\n-        } else {\n-            b.span.lo\n-        };\n-        self.parse_dot_or_call_expr_with(b, lo, attrs)\n+        let (span, b) = interpolated_or_expr_span!(self, try!(self.parse_bottom_expr()));\n+        self.parse_dot_or_call_expr_with(b, span.lo, attrs)\n     }\n \n     pub fn parse_dot_or_call_expr_with(&mut self,\n@@ -2368,7 +2377,8 @@ impl<'a> Parser<'a> {\n     fn parse_dot_suffix(&mut self,\n                         ident: Ident,\n                         ident_span: Span,\n-                        self_value: P<Expr>)\n+                        self_value: P<Expr>,\n+                        lo: BytePos)\n                         -> PResult<'a, P<Expr>> {\n         let (_, tys, bindings) = if self.eat(&token::ModSep) {\n             try!(self.expect_lt());\n@@ -2382,8 +2392,6 @@ impl<'a> Parser<'a> {\n             self.span_err(last_span, \"type bindings are only permitted on trait paths\");\n         }\n \n-        let lo = self_value.span.lo;\n-\n         Ok(match self.token {\n             // expr.f() method call.\n             token::OpenDelim(token::Paren) => {\n@@ -2428,7 +2436,7 @@ impl<'a> Parser<'a> {\n                     hi = self.span.hi;\n                     self.bump();\n \n-                    e = try!(self.parse_dot_suffix(i, mk_sp(dot_pos, hi), e));\n+                    e = try!(self.parse_dot_suffix(i, mk_sp(dot_pos, hi), e, lo));\n                   }\n                   token::Literal(token::Integer(n), suf) => {\n                     let sp = self.span;\n@@ -2481,7 +2489,7 @@ impl<'a> Parser<'a> {\n                     let dot_pos = self.last_span.hi;\n                     e = try!(self.parse_dot_suffix(special_idents::invalid,\n                                                    mk_sp(dot_pos, dot_pos),\n-                                                   e));\n+                                                   e, lo));\n                   }\n                 }\n                 continue;\n@@ -2716,31 +2724,31 @@ impl<'a> Parser<'a> {\n         let ex = match self.token {\n             token::Not => {\n                 self.bump();\n-                let (interpolated, prev_span) = (self.token.is_interpolated(), self.span);\n-                let e = try!(self.parse_prefix_expr(None));\n-                hi = if interpolated { prev_span.hi } else { e.span.hi };\n+                let (span, e) = interpolated_or_expr_span!(self,\n+                                                           try!(self.parse_prefix_expr(None)));\n+                hi = span.hi;\n                 self.mk_unary(UnNot, e)\n             }\n             token::BinOp(token::Minus) => {\n                 self.bump();\n-                let (interpolated, prev_span) = (self.token.is_interpolated(), self.span);\n-                let e = try!(self.parse_prefix_expr(None));\n-                hi = if interpolated { prev_span.hi } else { e.span.hi };\n+                let (span, e) = interpolated_or_expr_span!(self,\n+                                                           try!(self.parse_prefix_expr(None)));\n+                hi = span.hi;\n                 self.mk_unary(UnNeg, e)\n             }\n             token::BinOp(token::Star) => {\n                 self.bump();\n-                let (interpolated, prev_span) = (self.token.is_interpolated(), self.span);\n-                let e = try!(self.parse_prefix_expr(None));\n-                hi = if interpolated { prev_span.hi } else { e.span.hi };\n+                let (span, e) = interpolated_or_expr_span!(self,\n+                                                           try!(self.parse_prefix_expr(None)));\n+                hi = span.hi;\n                 self.mk_unary(UnDeref, e)\n             }\n             token::BinOp(token::And) | token::AndAnd => {\n                 try!(self.expect_and());\n                 let m = try!(self.parse_mutability());\n-                let (interpolated, prev_span) = (self.token.is_interpolated(), self.span);\n-                let e = try!(self.parse_prefix_expr(None));\n-                hi = if interpolated { prev_span.hi } else { e.span.hi };\n+                let (span, e) = interpolated_or_expr_span!(self,\n+                                                           try!(self.parse_prefix_expr(None)));\n+                hi = span.hi;\n                 ExprAddrOf(m, e)\n             }\n             token::Ident(..) if self.token.is_keyword(keywords::In) => {\n@@ -2758,10 +2766,10 @@ impl<'a> Parser<'a> {\n             }\n             token::Ident(..) if self.token.is_keyword(keywords::Box) => {\n                 self.bump();\n-                let (interpolated, prev_span) = (self.token.is_interpolated(), self.span);\n-                let subexpression = try!(self.parse_prefix_expr(None));\n-                hi = if interpolated { prev_span.hi } else { subexpression.span.hi };\n-                ExprBox(subexpression)\n+                let (span, e) = interpolated_or_expr_span!(self,\n+                                                           try!(self.parse_prefix_expr(None)));\n+                hi = span.hi;\n+                ExprBox(e)\n             }\n             _ => return self.parse_dot_or_call_expr(Some(attrs))\n         };\n@@ -2825,7 +2833,7 @@ impl<'a> Parser<'a> {\n             }\n             // Special cases:\n             if op == AssocOp::As {\n-               let rhs = try!(self.parse_ty());\n+                let rhs = try!(self.parse_ty());\n                 lhs = self.mk_expr(lhs_span.lo, rhs.span.hi,\n                                    ExprCast(lhs, rhs), None);\n                 continue"}, {"sha": "a55b6f13872bf50af50bdcaceb164893a6aa3341", "filename": "src/test/compile-fail/issue-31011.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc8f4ff80a4343bacfcab9629eb681e576dee48/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc8f4ff80a4343bacfcab9629eb681e576dee48/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31011.rs?ref=2bc8f4ff80a4343bacfcab9629eb681e576dee48", "patch": "@@ -11,7 +11,7 @@\n macro_rules! log {\n     ( $ctx:expr, $( $args:expr),* ) => {\n         if $ctx.trace {\n-        //~^ attempted access of field `trace` on type `&T`, but no field with that name was found\n+        //~^ ERROR attempted access of field `trace` on type `&T`, but no field with that name\n             println!( $( $args, )* );\n         }\n     }"}]}