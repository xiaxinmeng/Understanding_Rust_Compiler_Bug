{"sha": "92dcc53f94455e8933d76a8ba20642ceb069362d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZGNjNTNmOTQ0NTVlODkzM2Q3NmE4YmEyMDY0MmNlYjA2OTM2MmQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-07T15:26:01Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-07T15:56:53Z"}, "message": "Remove Ty::substs{_mut}\n\nAlmost all uses actually only care about ADT substs, so it's better to\nbe explicit. The methods were a bad abstraction anyway since they\nalready didn't include the inner types of e.g. `TyKind::Ref` anymore.", "tree": {"sha": "a9f009f2a47f4292b35e0470cb0b1ade9e86de14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9f009f2a47f4292b35e0470cb0b1ade9e86de14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92dcc53f94455e8933d76a8ba20642ceb069362d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92dcc53f94455e8933d76a8ba20642ceb069362d", "html_url": "https://github.com/rust-lang/rust/commit/92dcc53f94455e8933d76a8ba20642ceb069362d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92dcc53f94455e8933d76a8ba20642ceb069362d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e900cb4a1c5a4faef801518272d56a5683dd488", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e900cb4a1c5a4faef801518272d56a5683dd488", "html_url": "https://github.com/rust-lang/rust/commit/8e900cb4a1c5a4faef801518272d56a5683dd488"}], "stats": {"total": 97, "additions": 45, "deletions": 52}, "files": [{"sha": "13aaa408a2c177f69636005cff743570733ffaee", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=92dcc53f94455e8933d76a8ba20642ceb069362d", "patch": "@@ -1972,9 +1972,9 @@ impl Type {\n     pub fn type_parameters(&self) -> impl Iterator<Item = Type> + '_ {\n         self.ty\n             .strip_references()\n-            .substs()\n+            .as_adt()\n             .into_iter()\n-            .flat_map(|substs| substs.iter(&Interner))\n+            .flat_map(|(_, substs)| substs.iter(&Interner))\n             .filter_map(|arg| arg.ty(&Interner).cloned())\n             .map(move |ty| self.derived(ty))\n     }\n@@ -2115,18 +2115,22 @@ impl Type {\n         fn walk_type(db: &dyn HirDatabase, type_: &Type, cb: &mut impl FnMut(Type)) {\n             let ty = type_.ty.strip_references();\n             match ty.kind(&Interner) {\n-                TyKind::Adt(..) => {\n+                TyKind::Adt(_, substs) => {\n                     cb(type_.derived(ty.clone()));\n+                    walk_substs(db, type_, &substs, cb);\n                 }\n-                TyKind::AssociatedType(..) => {\n+                TyKind::AssociatedType(_, substs) => {\n                     if let Some(_) = ty.associated_type_parent_trait(db) {\n                         cb(type_.derived(ty.clone()));\n                     }\n+                    walk_substs(db, type_, &substs, cb);\n                 }\n-                TyKind::OpaqueType(..) => {\n+                TyKind::OpaqueType(_, subst) => {\n                     if let Some(bounds) = ty.impl_trait_bounds(db) {\n                         walk_bounds(db, &type_.derived(ty.clone()), &bounds, cb);\n                     }\n+\n+                    walk_substs(db, type_, subst, cb);\n                 }\n                 TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n                     if let Some(bounds) = ty.impl_trait_bounds(db) {\n@@ -2156,11 +2160,17 @@ impl Type {\n                     walk_type(db, &type_.derived(ty.clone()), cb);\n                 }\n \n+                TyKind::FnDef(_, substs)\n+                | TyKind::Tuple(_, substs)\n+                | TyKind::Closure(.., substs) => {\n+                    walk_substs(db, type_, &substs, cb);\n+                }\n+                TyKind::Function(hir_ty::FnPointer { substitution, .. }) => {\n+                    walk_substs(db, type_, &substitution.0, cb);\n+                }\n+\n                 _ => {}\n             }\n-            if let Some(substs) = ty.substs() {\n-                walk_substs(db, type_, &substs, cb);\n-            }\n         }\n \n         walk_type(db, self, &mut cb);"}, {"sha": "847d2537d2f05f73c5f41f11737df9507907dcdd", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=92dcc53f94455e8933d76a8ba20642ceb069362d", "patch": "@@ -20,7 +20,7 @@ use hir_def::{\n use hir_expand::{hygiene::Hygiene, name::AsName, HirFileId, InFile};\n use hir_ty::{\n     diagnostics::{record_literal_missing_fields, record_pattern_missing_fields},\n-    InferenceResult, Interner, Substitution, TyLoweringContext,\n+    InferenceResult, Interner, Substitution, TyExt, TyLoweringContext,\n };\n use syntax::{\n     ast::{self, AstNode},\n@@ -306,7 +306,7 @@ impl SourceAnalyzer {\n         let infer = self.infer.as_ref()?;\n \n         let expr_id = self.expr_id(db, &literal.clone().into())?;\n-        let substs = infer.type_of_expr[expr_id].substs()?;\n+        let substs = infer.type_of_expr[expr_id].as_adt()?.1;\n \n         let (variant, missing_fields, _exhaustive) =\n             record_literal_missing_fields(db, infer, expr_id, &body[expr_id])?;\n@@ -324,7 +324,7 @@ impl SourceAnalyzer {\n         let infer = self.infer.as_ref()?;\n \n         let pat_id = self.pat_id(&pattern.clone().into())?;\n-        let substs = infer.type_of_pat[pat_id].substs()?;\n+        let substs = infer.type_of_pat[pat_id].as_adt()?.1;\n \n         let (variant, missing_fields, _exhaustive) =\n             record_pattern_missing_fields(db, infer, pat_id, &body[pat_id])?;"}, {"sha": "9841988c55f9c3fe564740c12c273b3bb1069d40", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=92dcc53f94455e8933d76a8ba20642ceb069362d", "patch": "@@ -412,7 +412,10 @@ impl<'a> InferenceContext<'a> {\n \n                 self.unify(&ty, &expected.ty);\n \n-                let substs = ty.substs().cloned().unwrap_or_else(|| Substitution::empty(&Interner));\n+                let substs = ty\n+                    .as_adt()\n+                    .map(|(_, s)| s.clone())\n+                    .unwrap_or_else(|| Substitution::empty(&Interner));\n                 let field_types = def_id.map(|it| self.db.field_types(it)).unwrap_or_default();\n                 let variant_data = def_id.map(|it| it.variant_data(self.db.upcast()));\n                 for field in fields.iter() {"}, {"sha": "f88d5c5d343c2cb02c1b1dfdf4cafe0604d91a2a", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=92dcc53f94455e8933d76a8ba20642ceb069362d", "patch": "@@ -33,7 +33,8 @@ impl<'a> InferenceContext<'a> {\n         }\n         self.unify(&ty, expected);\n \n-        let substs = ty.substs().cloned().unwrap_or_else(|| Substitution::empty(&Interner));\n+        let substs =\n+            ty.as_adt().map(|(_, s)| s.clone()).unwrap_or_else(|| Substitution::empty(&Interner));\n \n         let field_tys = def.map(|it| self.db.field_types(it)).unwrap_or_default();\n         let (pre, post) = match ellipsis {\n@@ -74,7 +75,8 @@ impl<'a> InferenceContext<'a> {\n \n         self.unify(&ty, expected);\n \n-        let substs = ty.substs().cloned().unwrap_or_else(|| Substitution::empty(&Interner));\n+        let substs =\n+            ty.as_adt().map(|(_, s)| s.clone()).unwrap_or_else(|| Substitution::empty(&Interner));\n \n         let field_tys = def.map(|it| self.db.field_types(it)).unwrap_or_default();\n         for subpat in subpats {"}, {"sha": "84645c43556cde327a11f7df055a92c4bb36a04e", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=92dcc53f94455e8933d76a8ba20642ceb069362d", "patch": "@@ -198,34 +198,6 @@ impl Ty {\n             _ => false,\n         }\n     }\n-\n-    /// Returns the type parameters of this type if it has some (i.e. is an ADT\n-    /// or function); so if `self` is `Option<u32>`, this returns the `u32`.\n-    pub fn substs(&self) -> Option<&Substitution> {\n-        match self.kind(&Interner) {\n-            TyKind::Adt(_, substs)\n-            | TyKind::FnDef(_, substs)\n-            | TyKind::Tuple(_, substs)\n-            | TyKind::OpaqueType(_, substs)\n-            | TyKind::AssociatedType(_, substs)\n-            | TyKind::Closure(.., substs) => Some(substs),\n-            TyKind::Function(FnPointer { substitution: substs, .. }) => Some(&substs.0),\n-            _ => None,\n-        }\n-    }\n-\n-    fn substs_mut(&mut self) -> Option<&mut Substitution> {\n-        match self.interned_mut() {\n-            TyKind::Adt(_, substs)\n-            | TyKind::FnDef(_, substs)\n-            | TyKind::Tuple(_, substs)\n-            | TyKind::OpaqueType(_, substs)\n-            | TyKind::AssociatedType(_, substs)\n-            | TyKind::Closure(.., substs) => Some(substs),\n-            TyKind::Function(FnPointer { substitution: substs, .. }) => Some(&mut substs.0),\n-            _ => None,\n-        }\n-    }\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]"}, {"sha": "91116dcda3b526d089309d095443d363943a6a61", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92dcc53f94455e8933d76a8ba20642ceb069362d/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=92dcc53f94455e8933d76a8ba20642ceb069362d", "patch": "@@ -162,13 +162,15 @@ impl TypeWalk for Ty {\n             TyKind::Function(fn_pointer) => {\n                 fn_pointer.substitution.0.walk(f);\n             }\n-            _ => {\n-                if let Some(substs) = self.substs() {\n-                    for t in substs.iter(&Interner) {\n-                        t.walk(f);\n-                    }\n-                }\n+            TyKind::Adt(_, substs)\n+            | TyKind::FnDef(_, substs)\n+            | TyKind::Tuple(_, substs)\n+            | TyKind::OpaqueType(_, substs)\n+            | TyKind::AssociatedType(_, substs)\n+            | TyKind::Closure(.., substs) => {\n+                substs.walk(f);\n             }\n+            _ => {}\n         }\n         f(self);\n     }\n@@ -199,11 +201,15 @@ impl TypeWalk for Ty {\n             TyKind::Function(fn_pointer) => {\n                 fn_pointer.substitution.0.walk_mut_binders(f, binders.shifted_in());\n             }\n-            _ => {\n-                if let Some(substs) = self.substs_mut() {\n-                    substs.walk_mut_binders(f, binders);\n-                }\n+            TyKind::Adt(_, substs)\n+            | TyKind::FnDef(_, substs)\n+            | TyKind::Tuple(_, substs)\n+            | TyKind::OpaqueType(_, substs)\n+            | TyKind::AssociatedType(_, substs)\n+            | TyKind::Closure(.., substs) => {\n+                substs.walk_mut_binders(f, binders);\n             }\n+            _ => {}\n         }\n         f(self, binders);\n     }"}]}