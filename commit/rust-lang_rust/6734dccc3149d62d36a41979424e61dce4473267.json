{"sha": "6734dccc3149d62d36a41979424e61dce4473267", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MzRkY2NjMzE0OWQ2MmQzNmE0MTk3OTQyNGU2MWRjZTQ0NzMyNjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-17T18:21:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-17T18:21:25Z"}, "message": "Auto merge of #30325 - jseyfried:fixes_30078, r=nrc\n\nThis fixes a bug in which unused imports can get wrongly marked as used when checking for unused qualifications in `resolve_path` (issue #30078), and it removes unused imports that were previously undetected because of the bug.", "tree": {"sha": "a88207f6be3a2670e5cb007f39f34f7c744dc8a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a88207f6be3a2670e5cb007f39f34f7c744dc8a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6734dccc3149d62d36a41979424e61dce4473267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6734dccc3149d62d36a41979424e61dce4473267", "html_url": "https://github.com/rust-lang/rust/commit/6734dccc3149d62d36a41979424e61dce4473267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6734dccc3149d62d36a41979424e61dce4473267/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9687a8a96978280824a557d32b30e619f857e6a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9687a8a96978280824a557d32b30e619f857e6a7", "html_url": "https://github.com/rust-lang/rust/commit/9687a8a96978280824a557d32b30e619f857e6a7"}, {"sha": "ba20a862d4082d96c12fc928e900d3e507348a1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba20a862d4082d96c12fc928e900d3e507348a1a", "html_url": "https://github.com/rust-lang/rust/commit/ba20a862d4082d96c12fc928e900d3e507348a1a"}], "stats": {"total": 135, "additions": 60, "deletions": 75}, "files": [{"sha": "459b43b4ffe5d8ca23ffaa60a0ead444d88d871e", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use self::TargetLocation::*;\n-\n use common::Config;\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc};"}, {"sha": "198025536f0b0183d037cb40129a2a94202634f6", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -23,7 +23,7 @@ use core::marker::PhantomData;\n use core::ops::{Deref, DerefMut, Index, IndexMut};\n use core::ptr::Unique;\n use core::{slice, mem, ptr, cmp};\n-use alloc::heap::{self, EMPTY};\n+use alloc::heap;\n \n use borrow::Borrow;\n "}, {"sha": "05a4075f500249bcef1501b867c22e8e62e1ff3f", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -23,7 +23,7 @@ use core::fmt;\n use core::hash;\n use core::iter::FromIterator;\n use core::mem;\n-use core::ops::{self, Deref, Add, Index};\n+use core::ops::{self, Add};\n use core::ptr;\n use core::slice;\n use core::str::pattern::Pattern;"}, {"sha": "ab8dee31ee32b596e9e7d0efd95e8da9b3a3ad96", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -68,7 +68,7 @@ use core::hash::{self, Hash};\n use core::intrinsics::{arith_offset, assume, needs_drop};\n use core::iter::FromIterator;\n use core::mem;\n-use core::ops::{Index, IndexMut, Deref};\n+use core::ops::{Index, IndexMut};\n use core::ops;\n use core::ptr;\n use core::slice;"}, {"sha": "635b296a645cb7a5ea880e4464d3449256640f67", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -48,7 +48,6 @@ use result::Result;\n use result::Result::{Ok, Err};\n use ptr;\n use mem;\n-use mem::size_of;\n use marker::{Send, Sync, self};\n use num::wrapping::OverflowingOps;\n use raw::Repr;"}, {"sha": "d7ac096b4073576b65e0f50c31a470c7c8db3c5d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -26,7 +26,7 @@\n use self::TargetLint::*;\n \n use middle::privacy::AccessLevels;\n-use middle::ty::{self, Ty};\n+use middle::ty;\n use session::{early_error, Session};\n use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass};\n use lint::{EarlyLintPass, EarlyLintPassObject, LateLintPass, LateLintPassObject};"}, {"sha": "2a25ed2c6e14435c2a9bf71b4664ed6b602c2b44", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -41,7 +41,6 @@ use super::{InferCtxt};\n use super::{MiscVariable, TypeTrace};\n use super::type_variable::{RelationDir, BiTo, EqTo, SubtypeOf, SupertypeOf};\n \n-use middle::ty::{TyVar};\n use middle::ty::{IntType, UintType};\n use middle::ty::{self, Ty};\n use middle::ty::error::TypeError;"}, {"sha": "119651f12e912f85fbb04644f55ac08ce197ae66", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -27,10 +27,9 @@ use middle::region::CodeExtent;\n use middle::subst;\n use middle::subst::Substs;\n use middle::subst::Subst;\n-use middle::traits::{self, FulfillmentContext, Normalized,\n-                     SelectionContext, ObligationCause};\n+use middle::traits;\n use middle::ty::adjustment;\n-use middle::ty::{TyVid, IntVid, FloatVid, RegionVid};\n+use middle::ty::{TyVid, IntVid, FloatVid};\n use middle::ty::{self, Ty, HasTypeFlags};\n use middle::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use middle::ty::fold::{TypeFolder, TypeFoldable};"}, {"sha": "a63c662de6165212a945793ea579bbe384759b57", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -24,7 +24,7 @@ use rustc_data_structures::graph::{self, Direction, NodeIndex};\n use rustc_data_structures::unify::{self, UnificationTable};\n use middle::free_region::FreeRegionMap;\n use middle::ty::{self, Ty};\n-use middle::ty::{BoundRegion, FreeRegion, Region, RegionVid};\n+use middle::ty::{BoundRegion, Region, RegionVid};\n use middle::ty::{ReEmpty, ReStatic, ReFree, ReEarlyBound};\n use middle::ty::{ReLateBound, ReScope, ReVar, ReSkolemized, BrFresh};\n use middle::ty::error::TypeError;"}, {"sha": "8104d53fc936fed71708bd660d9632ba9be55ced", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -29,7 +29,7 @@ use syntax::attr::{self, Stability, Deprecation, AttrMetaMethods};\n use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n \n use rustc_front::hir;\n-use rustc_front::hir::{Block, Crate, Item, Generics, StructField, Variant};\n+use rustc_front::hir::{Crate, Item, Generics, StructField, Variant};\n use rustc_front::intravisit::{self, Visitor};\n \n use std::mem::replace;"}, {"sha": "20e98821ca3afc3a062e1401a84d1301c4a2e08f", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -27,7 +27,7 @@ use middle::def::{self, ExportMap};\n use middle::def_id::DefId;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::region::{CodeExtent};\n-use middle::subst::{self, ParamSpace, Subst, Substs, VecPerParamSpace};\n+use middle::subst::{self, Subst, Substs, VecPerParamSpace};\n use middle::traits;\n use middle::ty;\n use middle::ty::fold::TypeFolder;\n@@ -52,7 +52,6 @@ use syntax::parse::token::{InternedString, special_idents};\n \n use rustc_front::hir;\n use rustc_front::hir::{ItemImpl, ItemTrait};\n-use rustc_front::hir::{MutImmutable, MutMutable, Visibility};\n \n pub use self::sty::{Binder, DebruijnIndex};\n pub use self::sty::{BuiltinBound, BuiltinBounds, ExistentialBounds};"}, {"sha": "3c0a395f57ccbdb5247d6f9d876e32c0ba892ab1", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -11,16 +11,13 @@\n \n use middle::def_id::DefId;\n use middle::subst::{self, Subst};\n-use middle::ty::{BoundRegion, BrAnon, BrNamed};\n-use middle::ty::{ReEarlyBound, BrFresh, ctxt};\n-use middle::ty::{ReFree, ReScope, ReStatic, Region, ReEmpty};\n-use middle::ty::{ReSkolemized, ReVar, BrEnv};\n+use middle::ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use middle::ty::{TyBool, TyChar, TyStruct, TyEnum};\n use middle::ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyBareFn};\n use middle::ty::{TyParam, TyRawPtr, TyRef, TyTuple};\n use middle::ty::TyClosure;\n use middle::ty::{TyBox, TyTrait, TyInt, TyUint, TyInfer};\n-use middle::ty::{self, TypeAndMut, Ty, HasTypeFlags};\n+use middle::ty::{self, Ty, HasTypeFlags};\n use middle::ty::fold::TypeFoldable;\n \n use std::fmt;"}, {"sha": "6f6ce67380be470db2e6108238557cda4e5949d3", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -29,7 +29,7 @@ use syntax::ast;\n use syntax::codemap::Span;\n use syntax::ast::NodeId;\n use rustc_front::hir;\n-use rustc_front::hir::{Expr, FnDecl, Block, Pat};\n+use rustc_front::hir::Expr;\n use rustc_front::intravisit;\n use rustc_front::intravisit::Visitor;\n "}, {"sha": "38ec728e9c16f0af2e12d95bc454dc74752dda68", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -38,7 +38,7 @@ use rustc::middle::ty::{self, Ty};\n use std::fmt;\n use std::mem;\n use std::rc::Rc;\n-use syntax::ast::{self, NodeId};\n+use syntax::ast;\n use syntax::codemap::Span;\n \n use rustc_front::hir;"}, {"sha": "eb82d2df94d15d94f79c427470926dc072c10ef5", "filename": "src/librustc_metadata/tls_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_metadata%2Ftls_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_metadata%2Ftls_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftls_context.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -16,7 +16,7 @@ use rbml::reader::Decoder as RbmlDecoder;\n use rustc::middle::cstore::tls;\n use rustc::middle::def_id::DefId;\n use rustc::middle::subst::Substs;\n-use rustc::middle::ty::{self, Ty};\n+use rustc::middle::ty;\n \n use decoder::{self, Cmd};\n use encoder;"}, {"sha": "aee2ed81981a7dd0a032bdb8261bdd2647afeaa4", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -45,7 +45,7 @@ use rustc::middle::privacy::ImportUse::*;\n use rustc::middle::privacy::LastPrivate::*;\n use rustc::middle::privacy::PrivateDep::*;\n use rustc::middle::privacy::ExternalExports;\n-use rustc::middle::ty::{self, Ty};\n+use rustc::middle::ty;\n use rustc::util::nodemap::NodeMap;\n use rustc::front::map as ast_map;\n "}, {"sha": "6733279d22a9cad5acd0b58218a2a7afe71c1c20", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -38,12 +38,12 @@ use syntax::parse::token::special_idents;\n use syntax::codemap::{Span, DUMMY_SP};\n \n use rustc_front::hir;\n-use rustc_front::hir::{Block, Crate, DeclItem};\n+use rustc_front::hir::{Block, DeclItem};\n use rustc_front::hir::{ForeignItem, ForeignItemFn, ForeignItemStatic};\n use rustc_front::hir::{Item, ItemConst, ItemEnum, ItemExternCrate, ItemFn};\n use rustc_front::hir::{ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaultImpl};\n use rustc_front::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n-use rustc_front::hir::{NamedField, PathListIdent, PathListMod, Public};\n+use rustc_front::hir::{NamedField, PathListIdent, PathListMod};\n use rustc_front::hir::StmtDecl;\n use rustc_front::hir::UnnamedField;\n use rustc_front::hir::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};"}, {"sha": "46fc3f37f7b651a3469e0e01560a2bf8624dad44", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -64,7 +64,7 @@ use rustc::middle::ty::{Freevar, FreevarMap, TraitMap, GlobMap};\n use rustc::util::nodemap::{NodeMap, DefIdSet, FnvHashMap};\n \n use syntax::ast;\n-use syntax::ast::{CRATE_NODE_ID, Ident, Name, NodeId, CrateNum, TyIs, TyI8, TyI16, TyI32, TyI64};\n+use syntax::ast::{CRATE_NODE_ID, Name, NodeId, CrateNum, TyIs, TyI8, TyI16, TyI32, TyI64};\n use syntax::ast::{TyUs, TyU8, TyU16, TyU32, TyU64, TyF64, TyF32};\n use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::{self, special_names, special_idents};\n@@ -1463,7 +1463,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn resolve_item_in_lexical_scope(&mut self,\n                                      module_: Rc<Module>,\n                                      name: Name,\n-                                     namespace: Namespace)\n+                                     namespace: Namespace,\n+                                     record_used: bool)\n                                      -> ResolveResult<(Target, bool)> {\n         debug!(\"(resolving item in lexical scope) resolving `{}` in namespace {:?} in `{}`\",\n                name,\n@@ -1503,10 +1504,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     debug!(\"(resolving item in lexical scope) using import resolution\");\n                     // track used imports and extern crates as well\n                     let id = import_resolution[namespace].id;\n-                    self.used_imports.insert((id, namespace));\n-                    self.record_import_use(id, name);\n-                    if let Some(DefId{krate: kid, ..}) = target.target_module.def_id() {\n-                        self.used_crates.insert(kid);\n+                    if record_used {\n+                        self.used_imports.insert((id, namespace));\n+                        self.record_import_use(id, name);\n+                        if let Some(DefId{krate: kid, ..}) = target.target_module.def_id() {\n+                            self.used_crates.insert(kid);\n+                        }\n                     }\n                     return Success((target, false));\n                 }\n@@ -1583,7 +1586,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                        -> ResolveResult<Rc<Module>> {\n         // If this module is an anonymous module, resolve the item in the\n         // lexical scope. Otherwise, resolve the item from the crate root.\n-        let resolve_result = self.resolve_item_in_lexical_scope(module_, name, TypeNS);\n+        let resolve_result = self.resolve_item_in_lexical_scope(module_, name, TypeNS, true);\n         match resolve_result {\n             Success((target, _)) => {\n                 if let Some(module_def) = target.binding.module() {\n@@ -2791,7 +2794,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                        span: Span)\n                                        -> BareIdentifierPatternResolution {\n         let module = self.current_module.clone();\n-        match self.resolve_item_in_lexical_scope(module, name, ValueNS) {\n+        match self.resolve_item_in_lexical_scope(module, name, ValueNS, true) {\n             Success((target, _)) => {\n                 debug!(\"(resolve bare identifier pattern) succeeded in finding {} at {:?}\",\n                        name,\n@@ -2899,17 +2902,16 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         // Try to find a path to an item in a module.\n-        let unqualified_def = self.resolve_identifier(segments.last().unwrap().identifier,\n-                                                      namespace,\n-                                                      check_ribs);\n-\n+        let last_ident = segments.last().unwrap().identifier;\n         if segments.len() <= 1 {\n+            let unqualified_def = self.resolve_identifier(last_ident, namespace, check_ribs, true);\n             return unqualified_def.and_then(|def| self.adjust_local_def(def, span))\n                                   .map(|def| {\n                                       PathResolution::new(def, LastMod(AllPublic), path_depth)\n                                   });\n         }\n \n+        let unqualified_def = self.resolve_identifier(last_ident, namespace, check_ribs, false);\n         let def = self.resolve_module_relative_path(span, segments, namespace);\n         match (def, unqualified_def) {\n             (Some((ref d, _)), Some(ref ud)) if *d == ud.def => {\n@@ -2929,7 +2931,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn resolve_identifier(&mut self,\n                           identifier: hir::Ident,\n                           namespace: Namespace,\n-                          check_ribs: bool)\n+                          check_ribs: bool,\n+                          record_used: bool)\n                           -> Option<LocalDef> {\n         // First, check to see whether the name is a primitive type.\n         if namespace == TypeNS {\n@@ -2946,7 +2949,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n-        self.resolve_item_by_name_in_lexical_scope(identifier.unhygienic_name, namespace)\n+        let name = identifier.unhygienic_name;\n+        self.resolve_item_by_name_in_lexical_scope(name, namespace, record_used)\n             .map(LocalDef::from_def)\n     }\n \n@@ -3197,11 +3201,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n     fn resolve_item_by_name_in_lexical_scope(&mut self,\n                                              name: Name,\n-                                             namespace: Namespace)\n+                                             namespace: Namespace,\n+                                             record_used: bool)\n                                              -> Option<Def> {\n         // Check the items.\n         let module = self.current_module.clone();\n-        match self.resolve_item_in_lexical_scope(module, name, namespace) {\n+        match self.resolve_item_in_lexical_scope(module, name, namespace, record_used) {\n             Success((target, _)) => {\n                 match target.binding.def() {\n                     None => {"}, {"sha": "747b76ae57f1e8eebb0d54f5029d745d1deb5da5", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -34,10 +34,9 @@ use session::Session;\n \n use middle::def;\n use middle::def_id::DefId;\n-use middle::ty::{self, Ty};\n+use middle::ty;\n \n use std::fs::File;\n-use std::path::Path;\n \n use syntax::ast::{self, NodeId};\n use syntax::codemap::*;"}, {"sha": "e089a6e059ccd38edc09b4bd0c3a9ef530239de7", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -20,7 +20,7 @@ use trans::build::*;\n use trans::callee::{self, ArgVals, Callee, TraitItem, MethodData};\n use trans::cleanup::{CleanupMethods, CustomScope, ScopeId};\n use trans::common::*;\n-use trans::datum::{self, Datum, rvalue_scratch_datum, Rvalue, ByValue};\n+use trans::datum::{self, Datum, rvalue_scratch_datum, Rvalue};\n use trans::debuginfo::{self, DebugLoc};\n use trans::declare;\n use trans::expr;"}, {"sha": "4e3fadd0fa911baa4cdac9950a4c0c8615f9ae94", "filename": "src/librustc_trans/trans/debuginfo/gdb.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fgdb.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -11,7 +11,6 @@\n // .debug_gdb_scripts binary section.\n \n use llvm;\n-use llvm::ValueRef;\n \n use trans::common::{C_bytes, CrateContext, C_i32};\n use trans::declare;"}, {"sha": "66f53deffa9f61c8af915219dcbd9f5bc7764f8d", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -14,7 +14,7 @@ use arena::TypedArena;\n use intrinsics::{self, Intrinsic};\n use libc;\n use llvm;\n-use llvm::{SequentiallyConsistent, Acquire, Release, AtomicXchg, ValueRef, TypeKind};\n+use llvm::{ValueRef, TypeKind};\n use middle::infer;\n use middle::subst;\n use middle::subst::FnSpace;\n@@ -32,10 +32,8 @@ use trans::debuginfo::DebugLoc;\n use trans::declare;\n use trans::expr;\n use trans::glue;\n-use trans::type_of::*;\n use trans::type_of;\n use trans::machine;\n-use trans::machine::llsize_of;\n use trans::type_::Type;\n use middle::ty::{self, Ty, HasTypeFlags};\n use middle::subst::Substs;"}, {"sha": "049773f0becab73ffa450e77814fe40bc0726119", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -28,7 +28,6 @@ use trans::consts;\n use trans::datum::*;\n use trans::debuginfo::DebugLoc;\n use trans::declare;\n-use trans::expr::SaveIn;\n use trans::expr;\n use trans::glue;\n use trans::machine;"}, {"sha": "9f453362d24bdf7091d1125b9b351a72d6b601e6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -93,7 +93,7 @@ use middle::pat_util::{self, pat_id_map};\n use middle::privacy::{AllPublic, LastMod};\n use middle::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace, TypeSpace};\n use middle::traits::{self, report_fulfillment_errors};\n-use middle::ty::{FnSig, GenericPredicates, TypeScheme};\n+use middle::ty::{GenericPredicates, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n use middle::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n use middle::ty::{self, HasTypeFlags, RegionEscape, ToPolyTraitRef, Ty};\n@@ -127,7 +127,6 @@ use syntax::util::lev_distance::lev_distance;\n use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;\n use rustc_front::hir::Visibility;\n-use rustc_front::hir::{Item, ItemImpl};\n use rustc_front::print::pprust;\n use rustc_back::slice;\n "}, {"sha": "8777e38bb71d8a69fe7e2526e7149ced530d4074", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -92,7 +92,7 @@ use middle::mem_categorization::Categorization;\n use middle::region::{self, CodeExtent};\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, RegionEscape, ReScope, Ty, MethodCall, HasTypeFlags};\n+use middle::ty::{self, RegionEscape, Ty, MethodCall, HasTypeFlags};\n use middle::infer::{self, GenericKind, InferCtxt, SubregionOrigin, TypeOrigin, VerifyBound};\n use middle::pat_util;\n use middle::ty::adjustment;"}, {"sha": "37bbfb4e967f7c70e8cc64286e6f6b70947ed98d", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -40,7 +40,6 @@ use syntax::codemap::Span;\n use syntax::parse::token;\n use util::nodemap::{DefIdMap, FnvHashMap};\n use rustc::front::map as hir_map;\n-use rustc::front::map::NodeItem;\n use rustc_front::intravisit;\n use rustc_front::hir::{Item, ItemImpl,Crate};\n use rustc_front::hir;"}, {"sha": "411e1a4e480fc4833fbbc31f86c4248f3d08f640", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -19,7 +19,6 @@ use syntax::ast;\n use syntax::codemap::Span;\n use rustc_front::intravisit;\n use rustc_front::hir;\n-use rustc_front::hir::{Item, ItemImpl};\n \n pub fn check(tcx: &ty::ctxt) {\n     let mut orphan = OrphanChecker { tcx: tcx };"}, {"sha": "5cbe142ab1992989e3235b1e7f471e6fe0512ada", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -15,7 +15,7 @@ use middle::cstore::{CrateStore, LOCAL_CRATE};\n use middle::def_id::DefId;\n use middle::traits;\n use middle::ty;\n-use middle::infer::{self, new_infer_ctxt};\n+use middle::infer;\n use syntax::ast;\n use syntax::codemap::Span;\n use rustc_front::hir;"}, {"sha": "936d26f9208502195de37c2de0cf30d908605bb4", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -14,7 +14,6 @@\n use middle::ty;\n use rustc_front::intravisit;\n use rustc_front::hir;\n-use rustc_front::hir::{Item, ItemImpl};\n \n pub fn check(tcx: &ty::ctxt) {\n     let mut orphan = UnsafetyChecker { tcx: tcx };"}, {"sha": "da246eff7da02f192e643d4c90ec2819a7b34e9f", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -110,7 +110,6 @@ use util::common::time;\n use rustc_front::hir;\n \n use syntax::codemap::Span;\n-use syntax::print::pprust::*;\n use syntax::{ast, abi};\n \n use std::cell::RefCell;"}, {"sha": "9ab440f289e8acae0d5d7f217530dd028f8f2838", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -24,7 +24,6 @@ use mem::{self, replace};\n use ops::{Deref, FnMut, FnOnce, Index};\n use option::Option::{self, Some, None};\n use rand::{self, Rng};\n-use result::Result;\n \n use super::table::{\n     self,"}, {"sha": "761709d41e77c296641e88d11a3b740690143924", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -13,7 +13,6 @@ use clone::Clone;\n use cmp::{Eq, PartialEq};\n use core::marker::Sized;\n use default::Default;\n-use fmt::Debug;\n use fmt;\n use hash::Hash;\n use iter::{Iterator, IntoIterator, ExactSizeIterator, FromIterator, Map, Chain, Extend};"}, {"sha": "9ac11b442da39ca5647434fdc5bd3bb3cc5a6cc5", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -14,7 +14,7 @@ use os::unix::prelude::*;\n use ffi::{CString, CStr, OsString, OsStr};\n use fmt;\n use io::{self, Error, ErrorKind, SeekFrom};\n-use libc::{self, c_int, size_t, off_t, c_char, mode_t};\n+use libc::{self, c_int, off_t, c_char, mode_t};\n use mem;\n use path::{Path, PathBuf};\n use ptr;"}, {"sha": "de5595eebee71d80e3448eb163683439103a150c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -51,7 +51,7 @@ use abi::Abi;\n use ext::base;\n use ext::tt::macro_parser;\n use owned_slice::OwnedSlice;\n-use parse::token::{InternedString, str_to_ident};\n+use parse::token::InternedString;\n use parse::token;\n use parse::lexer;\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};"}, {"sha": "fcc7351deaaecf517c6dee678fee605cb29ba06f", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -24,7 +24,7 @@ use config::CfgDiag;\n use diagnostic::SpanHandler;\n use feature_gate::{GatedCfg, GatedCfgAttr};\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n-use parse::token::{InternedString, intern_and_get_ident};\n+use parse::token::InternedString;\n use parse::token;\n use ptr::P;\n "}, {"sha": "02d318e5b533744d2f6fcd98289f14803ef5d82c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{Block, Crate, DeclLocal, ExprMac, PatMac};\n+use ast::{Block, Crate, DeclLocal, PatMac};\n use ast::{Local, Ident, Mac_, Name};\n use ast::{ItemMac, MacStmtWithSemicolon, Mrk, Stmt, StmtDecl, StmtMac};\n use ast::{StmtExpr, StmtSemi};"}, {"sha": "0c3a8b05fba1e6d76ae91f16fba2d2a2f7ff677a", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{self, Arg, Arm, Block, Expr, Item, Pat, Path, Stmt, TokenTree, Ty};\n+use ast::{self, Arg, Arm, Block, Expr, Item, Pat, Stmt, TokenTree, Ty};\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::base;\n@@ -33,7 +33,7 @@ pub mod rt {\n     use ptr::P;\n     use std::rc::Rc;\n \n-    use ast::{TokenTree, Expr};\n+    use ast::TokenTree;\n \n     pub use parse::new_parser_from_tts;\n     pub use codemap::{BytePos, Span, dummy_spanned, DUMMY_SP};"}, {"sha": "fb09118035c7e3cea4d962cb7f87689005ebe555", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -85,7 +85,7 @@ use codemap;\n use parse::lexer::*; //resolve bug?\n use parse::ParseSess;\n use parse::parser::{LifetimeAndTypesWithoutColons, Parser};\n-use parse::token::{Eof, DocComment, MatchNt, SubstNt};\n+use parse::token::{DocComment, MatchNt, SubstNt};\n use parse::token::{Token, Nonterminal};\n use parse::token;\n use print::pprust;"}, {"sha": "d5993c81f241123bdec078f27d8fa42302b15ff0", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -14,7 +14,7 @@ use ast::{TokenTree, Ident, Name};\n use codemap::{Span, DUMMY_SP};\n use diagnostic::SpanHandler;\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n-use parse::token::{Eof, DocComment, Interpolated, MatchNt, SubstNt};\n+use parse::token::{DocComment, MatchNt, SubstNt};\n use parse::token::{Token, NtIdent, SpecialMacroVar};\n use parse::token;\n use parse::lexer::TokenAndSpan;"}, {"sha": "712f4e3801275258e570fa7183db60e3f9b9b7b2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -28,12 +28,12 @@ use ast::{ExprLit, ExprLoop, ExprMac, ExprRange};\n use ast::{ExprMethodCall, ExprParen, ExprPath};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprWhile, ExprWhileLet, ExprForLoop, Field, FnDecl};\n-use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod, FunctionRetTy};\n+use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, FunctionRetTy};\n use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl, ItemConst};\n use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, ItemDefaultImpl};\n use ast::{ItemExternCrate, ItemUse};\n-use ast::{LifetimeDef, Lit, Lit_};\n+use ast::{Lit, Lit_};\n use ast::{LitBool, LitChar, LitByte, LitByteStr};\n use ast::{LitStr, LitInt, Local};\n use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n@@ -50,7 +50,7 @@ use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{Ty, Ty_, TypeBinding, TyMac};\n use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n-use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr};\n+use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPtr};\n use ast::{TyRptr, TyTup, TyU32, TyVec};\n use ast::TypeTraitItem;\n use ast::{UnnamedField, UnsafeBlock};"}, {"sha": "ff0f139d82551f57321490a6624d3089f801b1a8", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -18,7 +18,6 @@ use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n use syntax::attr;\n-use syntax::attr::*;\n use syntax::parse::token;\n use syntax::config::CfgDiagReal;\n "}, {"sha": "365f67e56162806777a5b3a8e3fb0be916879e4a", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -59,11 +59,9 @@ use self::NamePadding::*;\n use self::OutputLocation::*;\n \n use stats::Stats;\n-use getopts::{OptGroup, optflag, optopt};\n use serialize::Encodable;\n use std::boxed::FnBox;\n use term::Terminal;\n-use term::color::{Color, RED, YELLOW, GREEN, CYAN};\n \n use std::any::Any;\n use std::cmp;"}, {"sha": "0ad3d2c5e73178a5141efcdef1fb28acf3c04869", "filename": "src/test/compile-fail/lint-qualification.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -17,4 +17,5 @@ mod foo {\n fn main() {\n     use foo::bar;\n     foo::bar(); //~ ERROR: unnecessary qualification\n+    bar();\n }"}, {"sha": "35883293990a3ae19eee9101d45a66ca606916a2", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6734dccc3149d62d36a41979424e61dce4473267/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734dccc3149d62d36a41979424e61dce4473267/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=6734dccc3149d62d36a41979424e61dce4473267", "patch": "@@ -50,11 +50,14 @@ mod foo {\n mod bar {\n     // Don't ignore on 'pub use' because we're not sure if it's used or not\n     pub use std::cmp::PartialEq;\n+    pub struct Square;\n \n     pub mod c {\n         use foo::Point;\n         use foo::Square; //~ ERROR unused import\n-        pub fn cc(p: Point) -> isize { return 2 * (p.x + p.y); }\n+        pub fn cc(_p: Point) -> super::Square {\n+            super::Square\n+        }\n     }\n \n     #[allow(unused_imports)]"}]}