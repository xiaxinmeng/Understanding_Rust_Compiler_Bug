{"sha": "f901086b0db092f331b9555199298c58d685f668", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDEwODZiMGRiMDkyZjMzMWI5NTU1MTk5Mjk4YzU4ZDY4NWY2Njg=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-06-06T10:34:24Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2015-06-06T10:37:11Z"}, "message": "Correctly map upper-case Sigma to lower-case in word-final position. Fix #26035.", "tree": {"sha": "40ae117f9822f627585fd3edfc3a834a578a1514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40ae117f9822f627585fd3edfc3a834a578a1514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f901086b0db092f331b9555199298c58d685f668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f901086b0db092f331b9555199298c58d685f668", "html_url": "https://github.com/rust-lang/rust/commit/f901086b0db092f331b9555199298c58d685f668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f901086b0db092f331b9555199298c58d685f668/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d316487ec1870956b5ba13468c39b61577e6858f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d316487ec1870956b5ba13468c39b61577e6858f", "html_url": "https://github.com/rust-lang/rust/commit/d316487ec1870956b5ba13468c39b61577e6858f"}], "stats": {"total": 198, "additions": 196, "deletions": 2}, "files": [{"sha": "f580127cddaf8386515919b10902772a45aacbcf", "filename": "src/etc/unicode.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f901086b0db092f331b9555199298c58d685f668/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/f901086b0db092f331b9555199298c58d685f668/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=f901086b0db092f331b9555199298c58d685f668", "patch": "@@ -638,7 +638,8 @@ def optimize_width_table(wtable):\n         (canon_decomp, compat_decomp, gencats, combines,\n                 to_upper, to_lower, to_title) = load_unicode_data(\"UnicodeData.txt\")\n         load_special_casing(\"SpecialCasing.txt\", to_upper, to_lower, to_title)\n-        want_derived = [\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\"]\n+        want_derived = [\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\",\n+                        \"Cased\", \"Case_Ignorable\"]\n         derived = load_properties(\"DerivedCoreProperties.txt\", want_derived)\n         scripts = load_properties(\"Scripts.txt\", [])\n         props = load_properties(\"PropList.txt\","}, {"sha": "913c0bd05325a50d1aa51b3c4b68fb526f94ed51", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f901086b0db092f331b9555199298c58d685f668/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f901086b0db092f331b9555199298c58d685f668/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=f901086b0db092f331b9555199298c58d685f668", "patch": "@@ -1854,8 +1854,32 @@ impl str {\n     #[unstable(feature = \"collections\")]\n     pub fn to_lowercase(&self) -> String {\n         let mut s = String::with_capacity(self.len());\n-        s.extend(self[..].chars().flat_map(|c| c.to_lowercase()));\n+        for (i, c) in self[..].char_indices() {\n+            if c == '\u03a3' {\n+                map_uppercase_sigma(self, i, &mut s)\n+            } else {\n+                s.extend(c.to_lowercase());\n+            }\n+        }\n         return s;\n+\n+        #[cold]\n+        #[inline(never)]\n+        fn map_uppercase_sigma(from: &str, i: usize, to: &mut String) {\n+            debug_assert!('\u03a3'.len_utf8() == 2);\n+            let is_word_final =\n+                case_ignoreable_then_cased(from[..i].chars().rev()) &&\n+                !case_ignoreable_then_cased(from[i + 2..].chars());\n+            to.push_str(if is_word_final { \"\u03c2\" } else { \"\u03c3\" });\n+        }\n+\n+        fn case_ignoreable_then_cased<I: Iterator<Item=char>>(iter: I) -> bool {\n+            use rustc_unicode::derived_property::{Cased, Case_Ignorable};\n+            match iter.skip_while(|&c| Case_Ignorable(c)).next() {\n+                Some(c) => Cased(c),\n+                None => false,\n+            }\n+        }\n     }\n \n     /// Returns the uppercase equivalent of this string."}, {"sha": "0b7a4953edfe008771b371947e61912d9579d63c", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f901086b0db092f331b9555199298c58d685f668/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f901086b0db092f331b9555199298c58d685f668/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=f901086b0db092f331b9555199298c58d685f668", "patch": "@@ -1687,6 +1687,19 @@ fn trim_ws() {\n                \"\");\n }\n \n+#[test]\n+fn to_lowercase() {\n+    assert_eq!(\"\".to_lowercase(), \"\");\n+    // https://github.com/rust-lang/rust/issues/26035\n+    assert_eq!(\"'\u03a3 A\u00c9\u03a3'\u03a3'' \u03a3 \u01c5\u03a3\".to_lowercase(), \"'\u03c3 a\u00e9\u03c3'\u03c2'' \u03c3 \u01c6\u03c2\");\n+}\n+\n+#[test]\n+fn to_uppercase() {\n+    assert_eq!(\"\".to_uppercase(), \"\");\n+    assert_eq!(\"a\u00e9\u01c5\u00df\ufb01\u1f80\".to_uppercase(), \"A\u00c9\u01c4SSFI\u1f08\u0399\");\n+}\n+\n mod pattern {\n     use std::str::pattern::Pattern;\n     use std::str::pattern::{Searcher, ReverseSearcher};"}, {"sha": "a9456cb487c6a71d199414dfd9e251575715ed9c", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f901086b0db092f331b9555199298c58d685f668/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f901086b0db092f331b9555199298c58d685f668/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=f901086b0db092f331b9555199298c58d685f668", "patch": "@@ -49,3 +49,8 @@ pub mod str {\n     pub use u_str::{utf8_char_width, is_utf16, Utf16Items, Utf16Item};\n     pub use u_str::{utf16_items, Utf16Encoder};\n }\n+\n+// For use in libcollections, not re-exported in libstd.\n+pub mod derived_property {\n+    pub use tables::derived_property::{Cased, Case_Ignorable};\n+}"}, {"sha": "4ebb6a70d291c300cc588ca9aadc7e111be598d2", "filename": "src/librustc_unicode/tables.rs", "status": "modified", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/f901086b0db092f331b9555199298c58d685f668/src%2Flibrustc_unicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f901086b0db092f331b9555199298c58d685f668/src%2Flibrustc_unicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Ftables.rs?ref=f901086b0db092f331b9555199298c58d685f668", "patch": "@@ -251,6 +251,157 @@ pub mod derived_property {\n         super::bsearch_range_table(c, Alphabetic_table)\n     }\n \n+    pub const Case_Ignorable_table: &'static [(char, char)] = &[\n+        ('\\u{27}', '\\u{27}'), ('\\u{2e}', '\\u{2e}'), ('\\u{3a}', '\\u{3a}'), ('\\u{5e}', '\\u{5e}'),\n+        ('\\u{60}', '\\u{60}'), ('\\u{a8}', '\\u{a8}'), ('\\u{ad}', '\\u{ad}'), ('\\u{af}', '\\u{af}'),\n+        ('\\u{b4}', '\\u{b4}'), ('\\u{b7}', '\\u{b8}'), ('\\u{2b0}', '\\u{36f}'), ('\\u{374}', '\\u{375}'),\n+        ('\\u{37a}', '\\u{37a}'), ('\\u{384}', '\\u{385}'), ('\\u{387}', '\\u{387}'), ('\\u{483}',\n+        '\\u{489}'), ('\\u{559}', '\\u{559}'), ('\\u{591}', '\\u{5bd}'), ('\\u{5bf}', '\\u{5bf}'),\n+        ('\\u{5c1}', '\\u{5c2}'), ('\\u{5c4}', '\\u{5c5}'), ('\\u{5c7}', '\\u{5c7}'), ('\\u{5f4}',\n+        '\\u{5f4}'), ('\\u{600}', '\\u{605}'), ('\\u{610}', '\\u{61a}'), ('\\u{61c}', '\\u{61c}'),\n+        ('\\u{640}', '\\u{640}'), ('\\u{64b}', '\\u{65f}'), ('\\u{670}', '\\u{670}'), ('\\u{6d6}',\n+        '\\u{6dd}'), ('\\u{6df}', '\\u{6e8}'), ('\\u{6ea}', '\\u{6ed}'), ('\\u{70f}', '\\u{70f}'),\n+        ('\\u{711}', '\\u{711}'), ('\\u{730}', '\\u{74a}'), ('\\u{7a6}', '\\u{7b0}'), ('\\u{7eb}',\n+        '\\u{7f5}'), ('\\u{7fa}', '\\u{7fa}'), ('\\u{816}', '\\u{82d}'), ('\\u{859}', '\\u{85b}'),\n+        ('\\u{8e4}', '\\u{902}'), ('\\u{93a}', '\\u{93a}'), ('\\u{93c}', '\\u{93c}'), ('\\u{941}',\n+        '\\u{948}'), ('\\u{94d}', '\\u{94d}'), ('\\u{951}', '\\u{957}'), ('\\u{962}', '\\u{963}'),\n+        ('\\u{971}', '\\u{971}'), ('\\u{981}', '\\u{981}'), ('\\u{9bc}', '\\u{9bc}'), ('\\u{9c1}',\n+        '\\u{9c4}'), ('\\u{9cd}', '\\u{9cd}'), ('\\u{9e2}', '\\u{9e3}'), ('\\u{a01}', '\\u{a02}'),\n+        ('\\u{a3c}', '\\u{a3c}'), ('\\u{a41}', '\\u{a42}'), ('\\u{a47}', '\\u{a48}'), ('\\u{a4b}',\n+        '\\u{a4d}'), ('\\u{a51}', '\\u{a51}'), ('\\u{a70}', '\\u{a71}'), ('\\u{a75}', '\\u{a75}'),\n+        ('\\u{a81}', '\\u{a82}'), ('\\u{abc}', '\\u{abc}'), ('\\u{ac1}', '\\u{ac5}'), ('\\u{ac7}',\n+        '\\u{ac8}'), ('\\u{acd}', '\\u{acd}'), ('\\u{ae2}', '\\u{ae3}'), ('\\u{b01}', '\\u{b01}'),\n+        ('\\u{b3c}', '\\u{b3c}'), ('\\u{b3f}', '\\u{b3f}'), ('\\u{b41}', '\\u{b44}'), ('\\u{b4d}',\n+        '\\u{b4d}'), ('\\u{b56}', '\\u{b56}'), ('\\u{b62}', '\\u{b63}'), ('\\u{b82}', '\\u{b82}'),\n+        ('\\u{bc0}', '\\u{bc0}'), ('\\u{bcd}', '\\u{bcd}'), ('\\u{c00}', '\\u{c00}'), ('\\u{c3e}',\n+        '\\u{c40}'), ('\\u{c46}', '\\u{c48}'), ('\\u{c4a}', '\\u{c4d}'), ('\\u{c55}', '\\u{c56}'),\n+        ('\\u{c62}', '\\u{c63}'), ('\\u{c81}', '\\u{c81}'), ('\\u{cbc}', '\\u{cbc}'), ('\\u{cbf}',\n+        '\\u{cbf}'), ('\\u{cc6}', '\\u{cc6}'), ('\\u{ccc}', '\\u{ccd}'), ('\\u{ce2}', '\\u{ce3}'),\n+        ('\\u{d01}', '\\u{d01}'), ('\\u{d41}', '\\u{d44}'), ('\\u{d4d}', '\\u{d4d}'), ('\\u{d62}',\n+        '\\u{d63}'), ('\\u{dca}', '\\u{dca}'), ('\\u{dd2}', '\\u{dd4}'), ('\\u{dd6}', '\\u{dd6}'),\n+        ('\\u{e31}', '\\u{e31}'), ('\\u{e34}', '\\u{e3a}'), ('\\u{e46}', '\\u{e4e}'), ('\\u{eb1}',\n+        '\\u{eb1}'), ('\\u{eb4}', '\\u{eb9}'), ('\\u{ebb}', '\\u{ebc}'), ('\\u{ec6}', '\\u{ec6}'),\n+        ('\\u{ec8}', '\\u{ecd}'), ('\\u{f18}', '\\u{f19}'), ('\\u{f35}', '\\u{f35}'), ('\\u{f37}',\n+        '\\u{f37}'), ('\\u{f39}', '\\u{f39}'), ('\\u{f71}', '\\u{f7e}'), ('\\u{f80}', '\\u{f84}'),\n+        ('\\u{f86}', '\\u{f87}'), ('\\u{f8d}', '\\u{f97}'), ('\\u{f99}', '\\u{fbc}'), ('\\u{fc6}',\n+        '\\u{fc6}'), ('\\u{102d}', '\\u{1030}'), ('\\u{1032}', '\\u{1037}'), ('\\u{1039}', '\\u{103a}'),\n+        ('\\u{103d}', '\\u{103e}'), ('\\u{1058}', '\\u{1059}'), ('\\u{105e}', '\\u{1060}'), ('\\u{1071}',\n+        '\\u{1074}'), ('\\u{1082}', '\\u{1082}'), ('\\u{1085}', '\\u{1086}'), ('\\u{108d}', '\\u{108d}'),\n+        ('\\u{109d}', '\\u{109d}'), ('\\u{10fc}', '\\u{10fc}'), ('\\u{135d}', '\\u{135f}'), ('\\u{1712}',\n+        '\\u{1714}'), ('\\u{1732}', '\\u{1734}'), ('\\u{1752}', '\\u{1753}'), ('\\u{1772}', '\\u{1773}'),\n+        ('\\u{17b4}', '\\u{17b5}'), ('\\u{17b7}', '\\u{17bd}'), ('\\u{17c6}', '\\u{17c6}'), ('\\u{17c9}',\n+        '\\u{17d3}'), ('\\u{17d7}', '\\u{17d7}'), ('\\u{17dd}', '\\u{17dd}'), ('\\u{180b}', '\\u{180e}'),\n+        ('\\u{1843}', '\\u{1843}'), ('\\u{18a9}', '\\u{18a9}'), ('\\u{1920}', '\\u{1922}'), ('\\u{1927}',\n+        '\\u{1928}'), ('\\u{1932}', '\\u{1932}'), ('\\u{1939}', '\\u{193b}'), ('\\u{1a17}', '\\u{1a18}'),\n+        ('\\u{1a1b}', '\\u{1a1b}'), ('\\u{1a56}', '\\u{1a56}'), ('\\u{1a58}', '\\u{1a5e}'), ('\\u{1a60}',\n+        '\\u{1a60}'), ('\\u{1a62}', '\\u{1a62}'), ('\\u{1a65}', '\\u{1a6c}'), ('\\u{1a73}', '\\u{1a7c}'),\n+        ('\\u{1a7f}', '\\u{1a7f}'), ('\\u{1aa7}', '\\u{1aa7}'), ('\\u{1ab0}', '\\u{1abe}'), ('\\u{1b00}',\n+        '\\u{1b03}'), ('\\u{1b34}', '\\u{1b34}'), ('\\u{1b36}', '\\u{1b3a}'), ('\\u{1b3c}', '\\u{1b3c}'),\n+        ('\\u{1b42}', '\\u{1b42}'), ('\\u{1b6b}', '\\u{1b73}'), ('\\u{1b80}', '\\u{1b81}'), ('\\u{1ba2}',\n+        '\\u{1ba5}'), ('\\u{1ba8}', '\\u{1ba9}'), ('\\u{1bab}', '\\u{1bad}'), ('\\u{1be6}', '\\u{1be6}'),\n+        ('\\u{1be8}', '\\u{1be9}'), ('\\u{1bed}', '\\u{1bed}'), ('\\u{1bef}', '\\u{1bf1}'), ('\\u{1c2c}',\n+        '\\u{1c33}'), ('\\u{1c36}', '\\u{1c37}'), ('\\u{1c78}', '\\u{1c7d}'), ('\\u{1cd0}', '\\u{1cd2}'),\n+        ('\\u{1cd4}', '\\u{1ce0}'), ('\\u{1ce2}', '\\u{1ce8}'), ('\\u{1ced}', '\\u{1ced}'), ('\\u{1cf4}',\n+        '\\u{1cf4}'), ('\\u{1cf8}', '\\u{1cf9}'), ('\\u{1d2c}', '\\u{1d6a}'), ('\\u{1d78}', '\\u{1d78}'),\n+        ('\\u{1d9b}', '\\u{1df5}'), ('\\u{1dfc}', '\\u{1dff}'), ('\\u{1fbd}', '\\u{1fbd}'), ('\\u{1fbf}',\n+        '\\u{1fc1}'), ('\\u{1fcd}', '\\u{1fcf}'), ('\\u{1fdd}', '\\u{1fdf}'), ('\\u{1fed}', '\\u{1fef}'),\n+        ('\\u{1ffd}', '\\u{1ffe}'), ('\\u{200b}', '\\u{200f}'), ('\\u{2018}', '\\u{2019}'), ('\\u{2024}',\n+        '\\u{2024}'), ('\\u{2027}', '\\u{2027}'), ('\\u{202a}', '\\u{202e}'), ('\\u{2060}', '\\u{2064}'),\n+        ('\\u{2066}', '\\u{206f}'), ('\\u{2071}', '\\u{2071}'), ('\\u{207f}', '\\u{207f}'), ('\\u{2090}',\n+        '\\u{209c}'), ('\\u{20d0}', '\\u{20f0}'), ('\\u{2c7c}', '\\u{2c7d}'), ('\\u{2cef}', '\\u{2cf1}'),\n+        ('\\u{2d6f}', '\\u{2d6f}'), ('\\u{2d7f}', '\\u{2d7f}'), ('\\u{2de0}', '\\u{2dff}'), ('\\u{2e2f}',\n+        '\\u{2e2f}'), ('\\u{3005}', '\\u{3005}'), ('\\u{302a}', '\\u{302d}'), ('\\u{3031}', '\\u{3035}'),\n+        ('\\u{303b}', '\\u{303b}'), ('\\u{3099}', '\\u{309e}'), ('\\u{30fc}', '\\u{30fe}'), ('\\u{a015}',\n+        '\\u{a015}'), ('\\u{a4f8}', '\\u{a4fd}'), ('\\u{a60c}', '\\u{a60c}'), ('\\u{a66f}', '\\u{a672}'),\n+        ('\\u{a674}', '\\u{a67d}'), ('\\u{a67f}', '\\u{a67f}'), ('\\u{a69c}', '\\u{a69d}'), ('\\u{a69f}',\n+        '\\u{a69f}'), ('\\u{a6f0}', '\\u{a6f1}'), ('\\u{a700}', '\\u{a721}'), ('\\u{a770}', '\\u{a770}'),\n+        ('\\u{a788}', '\\u{a78a}'), ('\\u{a7f8}', '\\u{a7f9}'), ('\\u{a802}', '\\u{a802}'), ('\\u{a806}',\n+        '\\u{a806}'), ('\\u{a80b}', '\\u{a80b}'), ('\\u{a825}', '\\u{a826}'), ('\\u{a8c4}', '\\u{a8c4}'),\n+        ('\\u{a8e0}', '\\u{a8f1}'), ('\\u{a926}', '\\u{a92d}'), ('\\u{a947}', '\\u{a951}'), ('\\u{a980}',\n+        '\\u{a982}'), ('\\u{a9b3}', '\\u{a9b3}'), ('\\u{a9b6}', '\\u{a9b9}'), ('\\u{a9bc}', '\\u{a9bc}'),\n+        ('\\u{a9cf}', '\\u{a9cf}'), ('\\u{a9e5}', '\\u{a9e6}'), ('\\u{aa29}', '\\u{aa2e}'), ('\\u{aa31}',\n+        '\\u{aa32}'), ('\\u{aa35}', '\\u{aa36}'), ('\\u{aa43}', '\\u{aa43}'), ('\\u{aa4c}', '\\u{aa4c}'),\n+        ('\\u{aa70}', '\\u{aa70}'), ('\\u{aa7c}', '\\u{aa7c}'), ('\\u{aab0}', '\\u{aab0}'), ('\\u{aab2}',\n+        '\\u{aab4}'), ('\\u{aab7}', '\\u{aab8}'), ('\\u{aabe}', '\\u{aabf}'), ('\\u{aac1}', '\\u{aac1}'),\n+        ('\\u{aadd}', '\\u{aadd}'), ('\\u{aaec}', '\\u{aaed}'), ('\\u{aaf3}', '\\u{aaf4}'), ('\\u{aaf6}',\n+        '\\u{aaf6}'), ('\\u{ab5b}', '\\u{ab5f}'), ('\\u{abe5}', '\\u{abe5}'), ('\\u{abe8}', '\\u{abe8}'),\n+        ('\\u{abed}', '\\u{abed}'), ('\\u{fb1e}', '\\u{fb1e}'), ('\\u{fbb2}', '\\u{fbc1}'), ('\\u{fe00}',\n+        '\\u{fe0f}'), ('\\u{fe13}', '\\u{fe13}'), ('\\u{fe20}', '\\u{fe2d}'), ('\\u{fe52}', '\\u{fe52}'),\n+        ('\\u{fe55}', '\\u{fe55}'), ('\\u{feff}', '\\u{feff}'), ('\\u{ff07}', '\\u{ff07}'), ('\\u{ff0e}',\n+        '\\u{ff0e}'), ('\\u{ff1a}', '\\u{ff1a}'), ('\\u{ff3e}', '\\u{ff3e}'), ('\\u{ff40}', '\\u{ff40}'),\n+        ('\\u{ff70}', '\\u{ff70}'), ('\\u{ff9e}', '\\u{ff9f}'), ('\\u{ffe3}', '\\u{ffe3}'), ('\\u{fff9}',\n+        '\\u{fffb}'), ('\\u{101fd}', '\\u{101fd}'), ('\\u{102e0}', '\\u{102e0}'), ('\\u{10376}',\n+        '\\u{1037a}'), ('\\u{10a01}', '\\u{10a03}'), ('\\u{10a05}', '\\u{10a06}'), ('\\u{10a0c}',\n+        '\\u{10a0f}'), ('\\u{10a38}', '\\u{10a3a}'), ('\\u{10a3f}', '\\u{10a3f}'), ('\\u{10ae5}',\n+        '\\u{10ae6}'), ('\\u{11001}', '\\u{11001}'), ('\\u{11038}', '\\u{11046}'), ('\\u{1107f}',\n+        '\\u{11081}'), ('\\u{110b3}', '\\u{110b6}'), ('\\u{110b9}', '\\u{110ba}'), ('\\u{110bd}',\n+        '\\u{110bd}'), ('\\u{11100}', '\\u{11102}'), ('\\u{11127}', '\\u{1112b}'), ('\\u{1112d}',\n+        '\\u{11134}'), ('\\u{11173}', '\\u{11173}'), ('\\u{11180}', '\\u{11181}'), ('\\u{111b6}',\n+        '\\u{111be}'), ('\\u{1122f}', '\\u{11231}'), ('\\u{11234}', '\\u{11234}'), ('\\u{11236}',\n+        '\\u{11237}'), ('\\u{112df}', '\\u{112df}'), ('\\u{112e3}', '\\u{112ea}'), ('\\u{11301}',\n+        '\\u{11301}'), ('\\u{1133c}', '\\u{1133c}'), ('\\u{11340}', '\\u{11340}'), ('\\u{11366}',\n+        '\\u{1136c}'), ('\\u{11370}', '\\u{11374}'), ('\\u{114b3}', '\\u{114b8}'), ('\\u{114ba}',\n+        '\\u{114ba}'), ('\\u{114bf}', '\\u{114c0}'), ('\\u{114c2}', '\\u{114c3}'), ('\\u{115b2}',\n+        '\\u{115b5}'), ('\\u{115bc}', '\\u{115bd}'), ('\\u{115bf}', '\\u{115c0}'), ('\\u{11633}',\n+        '\\u{1163a}'), ('\\u{1163d}', '\\u{1163d}'), ('\\u{1163f}', '\\u{11640}'), ('\\u{116ab}',\n+        '\\u{116ab}'), ('\\u{116ad}', '\\u{116ad}'), ('\\u{116b0}', '\\u{116b5}'), ('\\u{116b7}',\n+        '\\u{116b7}'), ('\\u{16af0}', '\\u{16af4}'), ('\\u{16b30}', '\\u{16b36}'), ('\\u{16b40}',\n+        '\\u{16b43}'), ('\\u{16f8f}', '\\u{16f9f}'), ('\\u{1bc9d}', '\\u{1bc9e}'), ('\\u{1bca0}',\n+        '\\u{1bca3}'), ('\\u{1d167}', '\\u{1d169}'), ('\\u{1d173}', '\\u{1d182}'), ('\\u{1d185}',\n+        '\\u{1d18b}'), ('\\u{1d1aa}', '\\u{1d1ad}'), ('\\u{1d242}', '\\u{1d244}'), ('\\u{1e8d0}',\n+        '\\u{1e8d6}'), ('\\u{e0001}', '\\u{e0001}'), ('\\u{e0020}', '\\u{e007f}'), ('\\u{e0100}',\n+        '\\u{e01ef}')\n+    ];\n+\n+    pub fn Case_Ignorable(c: char) -> bool {\n+        super::bsearch_range_table(c, Case_Ignorable_table)\n+    }\n+\n+    pub const Cased_table: &'static [(char, char)] = &[\n+        ('\\u{41}', '\\u{5a}'), ('\\u{61}', '\\u{7a}'), ('\\u{aa}', '\\u{aa}'), ('\\u{b5}', '\\u{b5}'),\n+        ('\\u{ba}', '\\u{ba}'), ('\\u{c0}', '\\u{d6}'), ('\\u{d8}', '\\u{f6}'), ('\\u{f8}', '\\u{1ba}'),\n+        ('\\u{1bc}', '\\u{1bf}'), ('\\u{1c4}', '\\u{293}'), ('\\u{295}', '\\u{2b8}'), ('\\u{2c0}',\n+        '\\u{2c1}'), ('\\u{2e0}', '\\u{2e4}'), ('\\u{345}', '\\u{345}'), ('\\u{370}', '\\u{373}'),\n+        ('\\u{376}', '\\u{377}'), ('\\u{37a}', '\\u{37d}'), ('\\u{37f}', '\\u{37f}'), ('\\u{386}',\n+        '\\u{386}'), ('\\u{388}', '\\u{38a}'), ('\\u{38c}', '\\u{38c}'), ('\\u{38e}', '\\u{3a1}'),\n+        ('\\u{3a3}', '\\u{3f5}'), ('\\u{3f7}', '\\u{481}'), ('\\u{48a}', '\\u{52f}'), ('\\u{531}',\n+        '\\u{556}'), ('\\u{561}', '\\u{587}'), ('\\u{10a0}', '\\u{10c5}'), ('\\u{10c7}', '\\u{10c7}'),\n+        ('\\u{10cd}', '\\u{10cd}'), ('\\u{1d00}', '\\u{1dbf}'), ('\\u{1e00}', '\\u{1f15}'), ('\\u{1f18}',\n+        '\\u{1f1d}'), ('\\u{1f20}', '\\u{1f45}'), ('\\u{1f48}', '\\u{1f4d}'), ('\\u{1f50}', '\\u{1f57}'),\n+        ('\\u{1f59}', '\\u{1f59}'), ('\\u{1f5b}', '\\u{1f5b}'), ('\\u{1f5d}', '\\u{1f5d}'), ('\\u{1f5f}',\n+        '\\u{1f7d}'), ('\\u{1f80}', '\\u{1fb4}'), ('\\u{1fb6}', '\\u{1fbc}'), ('\\u{1fbe}', '\\u{1fbe}'),\n+        ('\\u{1fc2}', '\\u{1fc4}'), ('\\u{1fc6}', '\\u{1fcc}'), ('\\u{1fd0}', '\\u{1fd3}'), ('\\u{1fd6}',\n+        '\\u{1fdb}'), ('\\u{1fe0}', '\\u{1fec}'), ('\\u{1ff2}', '\\u{1ff4}'), ('\\u{1ff6}', '\\u{1ffc}'),\n+        ('\\u{2071}', '\\u{2071}'), ('\\u{207f}', '\\u{207f}'), ('\\u{2090}', '\\u{209c}'), ('\\u{2102}',\n+        '\\u{2102}'), ('\\u{2107}', '\\u{2107}'), ('\\u{210a}', '\\u{2113}'), ('\\u{2115}', '\\u{2115}'),\n+        ('\\u{2119}', '\\u{211d}'), ('\\u{2124}', '\\u{2124}'), ('\\u{2126}', '\\u{2126}'), ('\\u{2128}',\n+        '\\u{2128}'), ('\\u{212a}', '\\u{212d}'), ('\\u{212f}', '\\u{2134}'), ('\\u{2139}', '\\u{2139}'),\n+        ('\\u{213c}', '\\u{213f}'), ('\\u{2145}', '\\u{2149}'), ('\\u{214e}', '\\u{214e}'), ('\\u{2160}',\n+        '\\u{217f}'), ('\\u{2183}', '\\u{2184}'), ('\\u{24b6}', '\\u{24e9}'), ('\\u{2c00}', '\\u{2c2e}'),\n+        ('\\u{2c30}', '\\u{2c5e}'), ('\\u{2c60}', '\\u{2ce4}'), ('\\u{2ceb}', '\\u{2cee}'), ('\\u{2cf2}',\n+        '\\u{2cf3}'), ('\\u{2d00}', '\\u{2d25}'), ('\\u{2d27}', '\\u{2d27}'), ('\\u{2d2d}', '\\u{2d2d}'),\n+        ('\\u{a640}', '\\u{a66d}'), ('\\u{a680}', '\\u{a69d}'), ('\\u{a722}', '\\u{a787}'), ('\\u{a78b}',\n+        '\\u{a78e}'), ('\\u{a790}', '\\u{a7ad}'), ('\\u{a7b0}', '\\u{a7b1}'), ('\\u{a7f8}', '\\u{a7fa}'),\n+        ('\\u{ab30}', '\\u{ab5a}'), ('\\u{ab5c}', '\\u{ab5f}'), ('\\u{ab64}', '\\u{ab65}'), ('\\u{fb00}',\n+        '\\u{fb06}'), ('\\u{fb13}', '\\u{fb17}'), ('\\u{ff21}', '\\u{ff3a}'), ('\\u{ff41}', '\\u{ff5a}'),\n+        ('\\u{10400}', '\\u{1044f}'), ('\\u{118a0}', '\\u{118df}'), ('\\u{1d400}', '\\u{1d454}'),\n+        ('\\u{1d456}', '\\u{1d49c}'), ('\\u{1d49e}', '\\u{1d49f}'), ('\\u{1d4a2}', '\\u{1d4a2}'),\n+        ('\\u{1d4a5}', '\\u{1d4a6}'), ('\\u{1d4a9}', '\\u{1d4ac}'), ('\\u{1d4ae}', '\\u{1d4b9}'),\n+        ('\\u{1d4bb}', '\\u{1d4bb}'), ('\\u{1d4bd}', '\\u{1d4c3}'), ('\\u{1d4c5}', '\\u{1d505}'),\n+        ('\\u{1d507}', '\\u{1d50a}'), ('\\u{1d50d}', '\\u{1d514}'), ('\\u{1d516}', '\\u{1d51c}'),\n+        ('\\u{1d51e}', '\\u{1d539}'), ('\\u{1d53b}', '\\u{1d53e}'), ('\\u{1d540}', '\\u{1d544}'),\n+        ('\\u{1d546}', '\\u{1d546}'), ('\\u{1d54a}', '\\u{1d550}'), ('\\u{1d552}', '\\u{1d6a5}'),\n+        ('\\u{1d6a8}', '\\u{1d6c0}'), ('\\u{1d6c2}', '\\u{1d6da}'), ('\\u{1d6dc}', '\\u{1d6fa}'),\n+        ('\\u{1d6fc}', '\\u{1d714}'), ('\\u{1d716}', '\\u{1d734}'), ('\\u{1d736}', '\\u{1d74e}'),\n+        ('\\u{1d750}', '\\u{1d76e}'), ('\\u{1d770}', '\\u{1d788}'), ('\\u{1d78a}', '\\u{1d7a8}'),\n+        ('\\u{1d7aa}', '\\u{1d7c2}'), ('\\u{1d7c4}', '\\u{1d7cb}'), ('\\u{1f130}', '\\u{1f149}'),\n+        ('\\u{1f150}', '\\u{1f169}'), ('\\u{1f170}', '\\u{1f189}')\n+    ];\n+\n+    pub fn Cased(c: char) -> bool {\n+        super::bsearch_range_table(c, Cased_table)\n+    }\n+\n     pub const Lowercase_table: &'static [(char, char)] = &[\n         ('\\u{61}', '\\u{7a}'), ('\\u{aa}', '\\u{aa}'), ('\\u{b5}', '\\u{b5}'), ('\\u{ba}', '\\u{ba}'),\n         ('\\u{df}', '\\u{f6}'), ('\\u{f8}', '\\u{ff}'), ('\\u{101}', '\\u{101}'), ('\\u{103}', '\\u{103}'),"}]}