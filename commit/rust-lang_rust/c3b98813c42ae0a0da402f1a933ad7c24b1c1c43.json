{"sha": "c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYjk4ODEzYzQyYWUwYTBkYTQwMmYxYTkzM2FkN2MyNGIxYzFjNDM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-03-11T22:24:20Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-03-23T15:33:07Z"}, "message": "Remove `ReClosureBound`", "tree": {"sha": "6cf8e9f7aa0161df3d5c31ff555fdbb5b91e5d0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cf8e9f7aa0161df3d5c31ff555fdbb5b91e5d0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "html_url": "https://github.com/rust-lang/rust/commit/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660326e9791d5caf3186b14521498c2584a494ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/660326e9791d5caf3186b14521498c2584a494ab", "html_url": "https://github.com/rust-lang/rust/commit/660326e9791d5caf3186b14521498c2584a494ab"}], "stats": {"total": 179, "additions": 50, "deletions": 129}, "files": [{"sha": "433076bb8342c22b46b702d9c344136a65867157", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -92,9 +92,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionKind {\n             ty::ReFree(ref free_region) => {\n                 free_region.hash_stable(hcx, hasher);\n             }\n-            ty::ReClosureBound(vid) => {\n-                vid.hash_stable(hcx, hasher);\n-            }\n             ty::ReVar(..) | ty::RePlaceholder(..) => {\n                 bug!(\"StableHasher: unexpected region {:?}\", *self)\n             }"}, {"sha": "8c81f5227d26099dddde2f9a3b7794aef1dcb424", "filename": "src/librustc/mir/query.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fquery.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -88,34 +88,35 @@ pub struct ConstQualifs {\n /// requirements are then verified and proved by the closure's\n /// creating function. This struct encodes those requirements.\n ///\n-/// The requirements are listed as being between various\n-/// `RegionVid`. The 0th region refers to `'static`; subsequent region\n-/// vids refer to the free regions that appear in the closure (or\n-/// generator's) type, in order of appearance. (This numbering is\n-/// actually defined by the `UniversalRegions` struct in the NLL\n-/// region checker. See for example\n-/// `UniversalRegions::closure_mapping`.) Note that we treat the free\n-/// regions in the closure's type \"as if\" they were erased, so their\n-/// precise identity is not important, only their position.\n+/// The requirements are listed as being between various `RegionVid`. The 0th\n+/// region refers to `'static`; subsequent region vids refer to the free\n+/// regions that appear in the closure (or generator's) type, in order of\n+/// appearance. (This numbering is actually defined by the `UniversalRegions`\n+/// struct in the NLL region checker. See for example\n+/// `UniversalRegions::closure_mapping`.) Note the free regions in the\n+/// closure's signature and captures are erased.\n ///\n /// Example: If type check produces a closure with the closure substs:\n ///\n /// ```text\n /// ClosureSubsts = [\n-///     i8,                                  // the \"closure kind\"\n-///     for<'x> fn(&'a &'x u32) -> &'x u32,  // the \"closure signature\"\n-///     &'a String,                          // some upvar\n+///     'a,                                         // From the parent.\n+///     'b,\n+///     i8,                                         // the \"closure kind\"\n+///     for<'x> fn(&'<erased> &'x u32) -> &'x u32,  // the \"closure signature\"\n+///     &'<erased> String,                          // some upvar\n /// ]\n /// ```\n ///\n-/// here, there is one unique free region (`'a`) but it appears\n-/// twice. We would \"renumber\" each occurrence to a unique vid, as follows:\n+/// We would \"renumber\" each free region to a unique vid, as follows:\n ///\n /// ```text\n /// ClosureSubsts = [\n-///     i8,                                  // the \"closure kind\"\n-///     for<'x> fn(&'1 &'x u32) -> &'x u32,  // the \"closure signature\"\n-///     &'2 String,                          // some upvar\n+///     '1,                                         // From the parent.\n+///     '2,\n+///     i8,                                         // the \"closure kind\"\n+///     for<'x> fn(&'3 &'x u32) -> &'x u32,         // the \"closure signature\"\n+///     &'4 String,                                 // some upvar\n /// ]\n /// ```\n ///\n@@ -124,14 +125,12 @@ pub struct ConstQualifs {\n /// can be extracted from its type and constrained to have the given\n /// outlives relationship.\n ///\n-/// In some cases, we have to record outlives requirements between\n-/// types and regions as well. In that case, if those types include\n-/// any regions, those regions are recorded as `ReClosureBound`\n-/// instances assigned one of these same indices. Those regions will\n-/// be substituted away by the creator. We use `ReClosureBound` in\n-/// that case because the regions must be allocated in the global\n-/// `TyCtxt`, and hence we cannot use `ReVar` (which is what we use\n-/// internally within the rest of the NLL code).\n+/// In some cases, we have to record outlives requirements between types and\n+/// regions as well. In that case, if those types include any regions, those\n+/// regions are recorded using their external names (`ReStatic`,\n+/// `ReEarlyBound`, `ReFree`). We use these because in a query response we\n+/// cannot use `ReVar` (which is what we use internally within the rest of the\n+/// NLL code).\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct ClosureRegionRequirements<'tcx> {\n     /// The number of external regions defined on the closure. In our"}, {"sha": "301254d4f0dedeb08466f124cf01f3ac01a10a43", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -1547,7 +1547,7 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n             ty::ReVar(_) | ty::ReScope(_) | ty::ReErased => false,\n \n-            ty::ReStatic | ty::ReEmpty(_) | ty::ReClosureBound(_) => true,\n+            ty::ReStatic | ty::ReEmpty(_) => true,\n         }\n     }\n \n@@ -1659,12 +1659,6 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n                 p!(write(\"'<empty:{:?}>\", ui));\n                 return Ok(self);\n             }\n-\n-            // The user should never encounter these in unsubstituted form.\n-            ty::ReClosureBound(vid) => {\n-                p!(write(\"{:?}\", vid));\n-                return Ok(self);\n-            }\n         }\n \n         p!(write(\"'_\"));"}, {"sha": "81be5b11143afcc06be525ca310fb4255e4f1f39", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -81,8 +81,6 @@ impl fmt::Debug for ty::RegionKind {\n         match *self {\n             ty::ReEarlyBound(ref data) => write!(f, \"ReEarlyBound({}, {})\", data.index, data.name),\n \n-            ty::ReClosureBound(ref vid) => write!(f, \"ReClosureBound({:?})\", vid),\n-\n             ty::ReLateBound(binder_id, ref bound_region) => {\n                 write!(f, \"ReLateBound({:?}, {:?})\", binder_id, bound_region)\n             }"}, {"sha": "7f0ee1a86197b78f696acf88dd5eb21b63f98506", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -1442,12 +1442,6 @@ pub enum RegionKind {\n \n     /// Erased region, used by trait selection, in MIR and during codegen.\n     ReErased,\n-\n-    /// These are regions bound in the \"defining type\" for a\n-    /// closure. They are used ONLY as part of the\n-    /// `ClosureRegionRequirements` that are produced by MIR borrowck.\n-    /// See `ClosureRegionRequirements` for more details.\n-    ReClosureBound(RegionVid),\n }\n \n impl<'tcx> rustc_serialize::UseSpecializedDecodable for Region<'tcx> {}\n@@ -1689,7 +1683,6 @@ impl RegionKind {\n             RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),\n             RegionKind::ReEmpty(_) => false,\n             RegionKind::ReErased => false,\n-            RegionKind::ReClosureBound(..) => false,\n         }\n     }\n \n@@ -1770,9 +1763,6 @@ impl RegionKind {\n             ty::ReEmpty(_) | ty::ReStatic => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n             }\n-            ty::ReClosureBound(..) => {\n-                flags = flags | TypeFlags::HAS_FREE_REGIONS;\n-            }\n             ty::ReLateBound(..) => {\n                 flags = flags | TypeFlags::HAS_RE_LATE_BOUND;\n             }"}, {"sha": "ad23ecc1e364767ae2b9ea19eec73fd33049da89", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -336,10 +336,6 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             | ty::ReEmpty(_)\n             | ty::RePlaceholder(..)\n             | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),\n-\n-            ty::ReClosureBound(..) => {\n-                bug!(\"closure bound region encountered during canonicalization\");\n-            }\n         }\n     }\n "}, {"sha": "0f5d4d30a2385282fce7b043444e990fcbf50d92", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -581,10 +581,6 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 return Ok(r);\n             }\n \n-            ty::ReClosureBound(..) => {\n-                span_bug!(self.span, \"encountered unexpected ReClosureBound: {:?}\", r,);\n-            }\n-\n             ty::RePlaceholder(..)\n             | ty::ReVar(..)\n             | ty::ReEmpty(_)"}, {"sha": "239b67a1da3ff54cfdb17f52998ef9fdd9044e84", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -152,11 +152,6 @@ pub(super) fn note_and_explain_region(\n         ty::ReVar(_) | ty::ReLateBound(..) | ty::ReErased => {\n             (format!(\"lifetime {:?}\", region), None)\n         }\n-\n-        // We shouldn't encounter an error message with ReClosureBound.\n-        ty::ReClosureBound(..) => {\n-            bug!(\"encountered unexpected ReClosureBound: {:?}\", region,);\n-        }\n     };\n \n     emit_msg_span(err, prefix, description, span, suffix);"}, {"sha": "fa28cf5b45464d2a0cac323b07179bb26fdcec36", "filename": "src/librustc_infer/infer/freshen.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -135,10 +135,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                 // replace all free regions with 'erased\n                 self.tcx().lifetimes.re_erased\n             }\n-\n-            ty::ReClosureBound(..) => {\n-                bug!(\"encountered unexpected region: {:?}\", r,);\n-            }\n         }\n     }\n "}, {"sha": "dfad3d8e26f3df88a08ddf1eb9468ef43b8dd70d", "filename": "src/librustc_infer/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -464,12 +464,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     /// term \"concrete regions\").\n     fn lub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> Region<'tcx> {\n         let r = match (a, b) {\n-            (&ty::ReClosureBound(..), _)\n-            | (_, &ty::ReClosureBound(..))\n-            | (&ReLateBound(..), _)\n-            | (_, &ReLateBound(..))\n-            | (&ReErased, _)\n-            | (_, &ReErased) => {\n+            (&ReLateBound(..), _) | (_, &ReLateBound(..)) | (&ReErased, _) | (_, &ReErased) => {\n                 bug!(\"cannot relate region: LUB({:?}, {:?})\", a, b);\n             }\n "}, {"sha": "e9ad7313ea0e2e2ba9fbd11875d2ac5332df6f3f", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -798,7 +798,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             | ty::ReEarlyBound(..) => ty::UniverseIndex::ROOT,\n             ty::ReEmpty(ui) => ui,\n             ty::RePlaceholder(placeholder) => placeholder.universe,\n-            ty::ReClosureBound(vid) | ty::ReVar(vid) => self.var_universe(vid),\n+            ty::ReVar(vid) => self.var_universe(vid),\n             ty::ReLateBound(..) => bug!(\"universe(): encountered bound region {:?}\", region),\n         }\n     }"}, {"sha": "2d0ccd4a9886909294cfee52ec04450d84879c20", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -292,8 +292,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             | ty::ReVar(..)\n             | ty::RePlaceholder(..)\n             | ty::ReEmpty(_)\n-            | ty::ReErased\n-            | ty::ReClosureBound(..) => None,\n+            | ty::ReErased => None,\n         }\n     }\n "}, {"sha": "c8b0e59ebb11700ff3f69d2ac8fff5e87fcc9361", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -940,8 +940,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// inference variables with some region from the closure\n     /// signature -- this is not always possible, so this is a\n     /// fallible process. Presuming we do find a suitable region, we\n-    /// will represent it with a `ReClosureBound`, which is a\n-    /// `RegionKind` variant that can be allocated in the gcx.\n+    /// will use it's *external name*, which will be a `RegionKind`\n+    /// variant that can be used in query responses such as\n+    /// `ReEarlyBound`.\n     fn try_promote_type_test_subject(\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n@@ -991,14 +992,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // find an equivalent.\n             let upper_bound = self.non_local_universal_upper_bound(region_vid);\n             if self.region_contains(region_vid, upper_bound) {\n-                tcx.mk_region(ty::ReClosureBound(upper_bound))\n+                self.definitions[upper_bound].external_name.unwrap_or(r)\n             } else {\n-                // In the case of a failure, use a `ReVar`\n-                // result. This will cause the `lift` later on to\n-                // fail.\n+                // In the case of a failure, use a `ReVar` result. This will\n+                // cause the `has_local_value` later on to return `None`.\n                 r\n             }\n         });\n+\n         debug!(\"try_promote_type_test_subject: folded ty = {:?}\", ty);\n \n         // `has_local_value` will only be true if we failed to promote some region.\n@@ -2029,15 +2030,6 @@ pub trait ClosureRegionRequirementsExt<'tcx> {\n         closure_def_id: DefId,\n         closure_substs: SubstsRef<'tcx>,\n     ) -> Vec<QueryOutlivesConstraint<'tcx>>;\n-\n-    fn subst_closure_mapping<T>(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        closure_mapping: &IndexVec<RegionVid, ty::Region<'tcx>>,\n-        value: &T,\n-    ) -> T\n-    where\n-        T: TypeFoldable<'tcx>;\n }\n \n impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx> {\n@@ -2094,7 +2086,6 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n                     }\n \n                     ClosureOutlivesSubject::Ty(ty) => {\n-                        let ty = self.subst_closure_mapping(tcx, closure_mapping, &ty);\n                         debug!(\n                             \"apply_requirements: ty={:?} \\\n                              outlived_region={:?} \\\n@@ -2107,22 +2098,4 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n             })\n             .collect()\n     }\n-\n-    fn subst_closure_mapping<T>(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        closure_mapping: &IndexVec<RegionVid, ty::Region<'tcx>>,\n-        value: &T,\n-    ) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        tcx.fold_regions(value, &mut false, |r, _depth| {\n-            if let ty::ReClosureBound(vid) = r {\n-                closure_mapping[*vid]\n-            } else {\n-                bug!(\"subst_closure_mapping: encountered non-closure bound free region {:?}\", r)\n-            }\n-        })\n-    }\n }"}, {"sha": "9367616e71a6123c5a9bb6bc78f620ac4d03fd4f", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -823,11 +823,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             // The regions that we expect from borrow checking.\n             ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReEmpty(ty::UniverseIndex::ROOT) => {}\n \n-            ty::ReEmpty(_)\n-            | ty::RePlaceholder(_)\n-            | ty::ReVar(_)\n-            | ty::ReScope(_)\n-            | ty::ReClosureBound(_) => {\n+            ty::ReEmpty(_) | ty::RePlaceholder(_) | ty::ReVar(_) | ty::ReScope(_) => {\n                 // All of the regions in the type should either have been\n                 // erased by writeback, or mapped back to named regions by\n                 // borrow checking."}, {"sha": "e1bd78e5113d1058f077381b19fabb78e09bf8a0", "filename": "src/librustc_typeck/outlives/utils.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Futils.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -170,7 +170,6 @@ fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n \n         // These regions don't appear in types from type declarations:\n         RegionKind::ReErased\n-        | RegionKind::ReClosureBound(..)\n         | RegionKind::ReScope(..)\n         | RegionKind::ReVar(..)\n         | RegionKind::RePlaceholder(..)"}, {"sha": "11612066d44b26d7027cf82eb85f58b37e6ee1db", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -449,7 +449,6 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::ReFree(..)\n-            | ty::ReClosureBound(..)\n             | ty::ReScope(..)\n             | ty::ReVar(..)\n             | ty::RePlaceholder(..)"}, {"sha": "c16cf9ac10c72617e9742de937017232901fe3ff", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -450,7 +450,6 @@ impl Clean<Option<Lifetime>> for ty::RegionKind {\n             | ty::ReVar(..)\n             | ty::RePlaceholder(..)\n             | ty::ReEmpty(_)\n-            | ty::ReClosureBound(_)\n             | ty::ReErased => {\n                 debug!(\"cannot clean region {:?}\", self);\n                 None"}, {"sha": "2bdb5384800a5c63c78d70d74ac719faa646221b", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -108,7 +108,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n+   = note: where <T as Anything<ReEarlyBound(1, 'b)>>::AssocType: '_#3r\n \n note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:62:1"}, {"sha": "1ed4c519d2bbdf63d35e31f59ee8b179bb3ead6a", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -90,7 +90,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n+   = note: where <T as Anything<ReEarlyBound(1, 'b)>>::AssocType: '_#3r\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:52:1"}, {"sha": "b1ee9fac5f9734c93c118cb2a65517faea2ae9cf", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3b98813c42ae0a0da402f1a933ad7c24b1c1c43/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=c3b98813c42ae0a0da402f1a933ad7c24b1c1c43", "patch": "@@ -10,7 +10,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n    = note: late-bound region is '_#4r\n    = note: number of external vids: 5\n-   = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n+   = note: where <T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType: '_#3r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:34:1\n@@ -26,13 +26,13 @@ LL | | }\n    |\n    = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>\n \n-error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:38:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: 'a`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType: 'a`...\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n@@ -45,7 +45,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n+   = note: where <T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: '_#4r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:43:1\n@@ -61,13 +61,13 @@ LL | | }\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>\n \n-error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: 'a`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: 'a`...\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29\n@@ -80,7 +80,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n+   = note: where <T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: '_#4r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:53:1\n@@ -107,7 +107,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n+   = note: where <T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: '_#4r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:65:1\n@@ -134,7 +134,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n            ]\n    = note: number of external vids: 5\n-   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n+   = note: where <T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: '_#4r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:74:1\n@@ -162,7 +162,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n-   = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n+   = note: where <T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(0, 'b)>>::AssocType: '_#2r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:83:1\n@@ -202,7 +202,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n    = note: number of external vids: 4\n-   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n+   = note: where <T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(1, 'b)>>::AssocType: '_#3r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:92:1\n@@ -229,7 +229,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n    = note: number of external vids: 3\n-   = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n+   = note: where <T as Anything<ReEarlyBound(0, 'a), ReEarlyBound(0, 'a)>>::AssocType: '_#2r\n \n note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:101:1"}]}