{"sha": "85fbfa25d799c98a0aadf2faef3fc17400764daf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZmJmYTI1ZDc5OWM5OGEwYWFkZjJmYWVmM2ZjMTc0MDA3NjRkYWY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-30T18:52:07Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-04-30T18:52:07Z"}, "message": "Revert \"Eliminate a copy in syntax::parse::new_parser_from_file\"\n\nThis reverts commit 2bb3b63ec4379b812aeceb690d78763ec55d3cbb.\n\n(I was confused.)", "tree": {"sha": "929d32253cfdbb303dadeecf7433466f6b27214c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/929d32253cfdbb303dadeecf7433466f6b27214c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85fbfa25d799c98a0aadf2faef3fc17400764daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85fbfa25d799c98a0aadf2faef3fc17400764daf", "html_url": "https://github.com/rust-lang/rust/commit/85fbfa25d799c98a0aadf2faef3fc17400764daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85fbfa25d799c98a0aadf2faef3fc17400764daf/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bb3b63ec4379b812aeceb690d78763ec55d3cbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb3b63ec4379b812aeceb690d78763ec55d3cbb", "html_url": "https://github.com/rust-lang/rust/commit/2bb3b63ec4379b812aeceb690d78763ec55d3cbb"}], "stats": {"total": 131, "additions": 43, "deletions": 88}, "files": [{"sha": "47c6371ad16fd8b7180f99a3920d879f18f537cf", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -271,7 +271,7 @@ fn check_variants_T<T: copy>(\n                 // testing the string for stability is easier and ok for now.\n                 let handler = diagnostic::mk_handler(none);\n                 let str3 =\n-                    ~as_str(bind pprust::print_crate(\n+                    @as_str(bind pprust::print_crate(\n                         codemap,\n                         diagnostic::mk_span_handler(handler, codemap),\n                         crate2,\n@@ -417,7 +417,7 @@ fn check_compiling(filename: str) -> happiness {\n }\n \n \n-fn parse_and_print(code: ~str) -> str {\n+fn parse_and_print(code: @str) -> str {\n     let filename = \"tmp.rs\";\n     let cm = codemap::new_codemap();\n     let handler = diagnostic::mk_handler(none);\n@@ -507,7 +507,7 @@ fn file_might_not_converge(filename: str) -> bool {\n     ret false;\n }\n \n-fn check_roundtrip_convergence(+code: ~str, maxIters: uint) {\n+fn check_roundtrip_convergence(code: @str, maxIters: uint) {\n \n     let mut i = 0u;\n     let mut newv = code;\n@@ -516,7 +516,7 @@ fn check_roundtrip_convergence(+code: ~str, maxIters: uint) {\n     while i < maxIters {\n         oldv = newv;\n         if content_might_not_converge(*oldv) { ret; }\n-        newv = ~parse_and_print(oldv);\n+        newv = @parse_and_print(oldv);\n         if oldv == newv { break; }\n         i += 1u;\n     }\n@@ -538,7 +538,7 @@ fn check_convergence(files: [str]) {\n     #error(\"pp convergence tests: %u files\", vec::len(files));\n     for files.each {|file|\n         if !file_might_not_converge(file) {\n-            let s = ~result::get(io::read_whole_file_str(file));\n+            let s = @result::get(io::read_whole_file_str(file));\n             if !content_might_not_converge(*s) {\n                 #error(\"pp converge: %s\", file);\n                 // Change from 7u to 2u once\n@@ -557,7 +557,7 @@ fn check_variants(files: [str], cx: context) {\n             cont;\n         }\n \n-        let s = ~result::get(io::read_whole_file_str(file));\n+        let s = @result::get(io::read_whole_file_str(file));\n         if contains(*s, \"#\") {\n             cont; // Macros are confusing\n         }"}, {"sha": "8681f7d2a1ca787e36a011d4d17a670f62148270", "filename": "src/libcore/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -49,7 +49,7 @@ mod std {\n \n #[doc = \"\n A standard function to use to indicate unreachable code. Because the\n-function is guaranteed to fail, typestate will correctly identify\n+function is guaranteed to fail typestate will correctly identify\n any code paths following the appearance of this function as unreachable.\n \"]\n fn unreachable() -> ! {"}, {"sha": "0c723fc8c63ad684106c7b40091e76116a7bd2f0", "filename": "src/libcore/io.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -650,24 +650,6 @@ fn read_whole_file_str(file: str) -> result<str, str> {\n     })\n }\n \n-/*\n-  Returns the result as a unique boxed string rather than a string\n- */\n-fn read_whole_file_ref(file: str) -> result<~str, str> {\n-     let f = os::as_c_charp(file, {|pathbuf|\n-        os::as_c_charp(\"r\", {|modebuf|\n-            libc::fopen(pathbuf, modebuf)\n-        })\n-    });\n-    ret if f as uint == 0u { result::err(\"error opening \" + file) }\n-        else unsafe {\n-        let buf : ~mut [const u8] = ~mut [const];\n-        let self = FILE_reader(f, true);\n-        while (!self.eof()) { *buf += self.read_bytes(2048u); }\n-        result::ok(str::unsafe::from_bytes_move(buf))\n-    }\n-}\n-\n // FIXME implement this in a low-level way. Going through the abstractions is\n // pointless. // #2004\n fn read_whole_file(file: str) -> result<[u8], str> {"}, {"sha": "12258f5eb274a53867212bc2bc71d40679bbe924", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -123,19 +123,6 @@ fn from_bytes(vv: [u8]) -> str unsafe {\n    ret unsafe::from_bytes(vv);\n }\n \n-#[doc = \"\n-Convert a unique vector of bytes (passed by move)\n-   to a unique boxed UTF-8 string\n-\n-# Failure\n-\n-Fails if invalid UTF-8\n-\"]\n-fn from_bytes_move(-vv: ~mut [const u8]) -> ~str unsafe {\n-   assert is_utf8(::unsafe::reinterpret_cast(vv));\n-   ret unsafe::from_bytes_move(vv);\n-}\n-\n #[doc = \"\n Convert a byte to a UTF-8 string\n \n@@ -1644,7 +1631,6 @@ mod unsafe {\n       from_buf,\n       from_c_str,\n       from_bytes,\n-      from_bytes_move,\n       slice_bytes,\n       push_byte,\n       pop_byte,\n@@ -1699,13 +1685,6 @@ mod unsafe {\n        ret scopy;\n    }\n \n-   unsafe fn from_bytes_move(-v: ~mut [const u8]) -> ~str unsafe {\n-     *v += [0u8];\n-     let s: ~str = ::unsafe::reinterpret_cast(v);\n-     ::unsafe::forget(v);\n-     s\n-   }\n-\n    #[doc = \"\n    Converts a byte to a string.\n "}, {"sha": "b8579f6733d5356a9a02d0f67719c51ea303c9dd", "filename": "src/librustsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fcodemap.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -38,7 +38,7 @@ enum file_substr {\n }\n \n type filemap =\n-    @{name: filename, substr: file_substr, src: ~str,\n+    @{name: filename, substr: file_substr, src: @str,\n       start_pos: file_pos, mut lines: [file_pos]};\n \n type codemap = @{mut files: [filemap]};\n@@ -48,15 +48,15 @@ type loc = {file: filemap, line: uint, col: uint};\n fn new_codemap() -> codemap { @{mut files: [] } }\n \n fn new_filemap_w_substr(filename: filename, substr: file_substr,\n-                        -src: ~str,\n+                        src: @str,\n                         start_pos_ch: uint, start_pos_byte: uint)\n    -> filemap {\n     ret @{name: filename, substr: substr, src: src,\n           start_pos: {ch: start_pos_ch, byte: start_pos_byte},\n           mut lines: [{ch: start_pos_ch, byte: start_pos_byte}]};\n }\n \n-fn new_filemap(filename: filename, -src: ~str,\n+fn new_filemap(filename: filename, src: @str,\n                start_pos_ch: uint, start_pos_byte: uint)\n     -> filemap {\n     ret new_filemap_w_substr(filename, fss_none, src,"}, {"sha": "f70a75bd96a008ac4427b9248e3a70fe7df4f3fe", "filename": "src/librustsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fexpand.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -121,7 +121,7 @@ fn expand_crate(parse_sess: parse::parse_sess,\n             with *afp};\n     let f = make_fold(f_pre);\n     let cm = parse_expr_from_source_str(\"<core-macros>\",\n-                                        ~core_macros(),\n+                                        @core_macros(),\n                                         cfg,\n                                         parse_sess);\n "}, {"sha": "d1a997187dafc296d013eb52fd94fa00d8edd383", "filename": "src/librustsyntax/parse.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -73,22 +73,20 @@ fn parse_crate_from_source_file(input: str, cfg: ast::crate_cfg,\n     ret r;\n }\n \n-fn parse_crate_from_source_str(name: str, source: ~str,\n-               cfg: ast::crate_cfg, sess: parse_sess) -> @ast::crate {\n-  // FIXME: Get rid of copy once there's a snapshot\n+fn parse_crate_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n+                               sess: parse_sess) -> @ast::crate {\n     let p = new_parser_from_source_str(\n-           sess, cfg, name, codemap::fss_none, @(*source));\n+        sess, cfg, name, codemap::fss_none, source);\n     let r = parser::parse_crate_mod(p, cfg);\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;\n     ret r;\n }\n \n-fn parse_expr_from_source_str(name: str, source: ~str,\n-               cfg: ast::crate_cfg, sess: parse_sess) -> @ast::expr {\n-  // FIXME: Get rid of copy once there's a snapshot\n+fn parse_expr_from_source_str(name: str, source: @str, cfg: ast::crate_cfg,\n+                              sess: parse_sess) -> @ast::expr {\n     let p = new_parser_from_source_str(\n-        sess, cfg, name, codemap::fss_none, @(*source));\n+        sess, cfg, name, codemap::fss_none, source);\n     let r = parser::parse_expr(p);\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;\n@@ -136,15 +134,12 @@ fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: lexer::reader,\n       restricted_keywords: token::restricted_keyword_table()}\n }\n \n-/* FIXME: still taking an @ b/c #ast using this.\n- Fix when there's a snapshot */\n fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n                               name: str, ss: codemap::file_substr,\n                               source: @str) -> parser {\n     let ftype = parser::SOURCE_FILE;\n     let filemap = codemap::new_filemap_w_substr\n-      // FIXME: remove copy once there's a new snap\n-      (name, ss, ~(*source), sess.chpos, sess.byte_pos);\n+        (name, ss, source, sess.chpos, sess.byte_pos);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);\n     let rdr = lexer::new_reader(sess.span_diagnostic,\n@@ -153,10 +148,12 @@ fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n }\n \n fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n-                        ftype: parser::file_type) -> parser {\n-    let src = alt io::read_whole_file_ref(path) {\n+                        ftype: parser::file_type) ->\n+   parser {\n+    let src = alt io::read_whole_file_str(path) {\n       result::ok(src) {\n-        src\n+        // FIXME: This copy is unfortunate\n+        @src\n       }\n       result::err(e) {\n         sess.span_diagnostic.handler().fatal(e)"}, {"sha": "493ed7b369b4f5470cc2ffd8ad6ed42986758059", "filename": "src/librustsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fcomments.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -154,7 +154,7 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n                                 path: str,\n                                 srdr: io::reader) ->\n    {cmnts: [cmnt], lits: [lit]} {\n-    let src = ~str::from_bytes(srdr.read_whole_stream());\n+    let src = @str::from_bytes(srdr.read_whole_stream());\n     let itr = @interner::mk::<str>(str::hash, str::eq);\n     let rdr = new_reader(span_diagnostic,\n                          codemap::new_filemap(path, src, 0u, 0u), itr);"}, {"sha": "ec9f785db2fb8813fdeae8a58fd6043fd8ddc8f5", "filename": "src/librustsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Flexer.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -6,7 +6,7 @@ export reader, new_reader, next_token, is_whitespace;\n \n type reader = @{\n     span_diagnostic: diagnostic::span_handler,\n-    src: ~str,\n+    src: @str,\n     mut col: uint,\n     mut pos: uint,\n     mut curr: char,"}, {"sha": "3f9ce9d91b6ac115c0a306ca6a214cba559df71b", "filename": "src/librustsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Ftoken.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -124,7 +124,7 @@ fn to_str(in: interner<str>, t: token) -> str {\n \n       /* Literals */\n       LIT_INT(c, ast::ty_char) {\n-        // FIXME: escape. (#2306)\n+        // FIXME: escape.\n         let mut tmp = \"'\";\n         str::push_char(tmp, c as char);\n         str::push_char(tmp, '\\'');\n@@ -140,7 +140,7 @@ fn to_str(in: interner<str>, t: token) -> str {\n         ret interner::get::<str>(in, s) +\n             ast_util::float_ty_to_str(t);\n       }\n-      LIT_STR(s) { // FIXME: escape. (#2306)\n+      LIT_STR(s) { // FIXME: escape.\n         ret \"\\\"\" + interner::get::<str>(in, s) + \"\\\"\";\n       }\n "}, {"sha": "75c75c3217b7e94be2432616d117b8a62d85ec64", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -78,7 +78,7 @@ fn parse_input(sess: session, cfg: ast::crate_cfg, input: str)\n     if !input_is_stdin(input) {\n         parse::parse_crate_from_file(input, cfg, sess.parse_sess)\n     } else {\n-        let src = ~str::from_bytes(io::stdin().read_whole_stream());\n+        let src = @str::from_bytes(io::stdin().read_whole_stream());\n         parse::parse_crate_from_source_str(input, src, cfg, sess.parse_sess)\n     }\n }"}, {"sha": "71716ea059e533fa9781d8f490ffd29e73fd758d", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -36,10 +36,7 @@ type ctxt = {\n \n type srv_owner<T> = fn(srv: srv) -> T;\n type ctxt_handler<T> = fn~(ctxt: ctxt) -> T;\n-/* The idea is that a parser takes an input of type U,\n-   which lets us have parsers that either take unboxed or\n-   boxed strings. */\n-type parser<U> = fn~(session::session, U) -> @ast::crate;\n+type parser = fn~(session::session, str) -> @ast::crate;\n \n enum msg {\n     handle_request(fn~(ctxt)),\n@@ -51,14 +48,14 @@ enum srv = {\n };\n \n fn from_str<T>(source: str, owner: srv_owner<T>) -> T {\n-    run(owner, ~source, parse::from_str_sess)\n+    run(owner, source, parse::from_str_sess)\n }\n \n fn from_file<T>(file: str, owner: srv_owner<T>) -> T {\n     run(owner, file, parse::from_file_sess)\n }\n \n-fn run<T, U: send>(owner: srv_owner<T>, +source: U, parse: parser<U>) -> T {\n+fn run<T>(owner: srv_owner<T>, source: str, parse: parser) -> T {\n \n     let srv_ = srv({\n         ch: task::spawn_listener {|po|\n@@ -71,7 +68,7 @@ fn run<T, U: send>(owner: srv_owner<T>, +source: U, parse: parser<U>) -> T {\n     ret res;\n }\n \n-fn act<U>(po: comm::port<msg>, source: U, parse: parser<U>) {\n+fn act(po: comm::port<msg>, source: str, parse: parser) {\n     let (sess, ignore_errors) = build_session();\n \n     let ctxt = build_ctxt("}, {"sha": "fc54a1ea9f6b19438bc95adaef495eba5642822a", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -289,7 +289,7 @@ fn should_extract_tys() {\n mod test {\n \n     fn mk_doc(source: str) -> doc::doc {\n-        let ast = parse::from_str(~source);\n+        let ast = parse::from_str(source);\n         extract(ast, \"\")\n     }\n \n@@ -349,7 +349,7 @@ mod test {\n \n     #[test]\n     fn extract_should_use_default_crate_name() {\n-        let source = ~\"\";\n+        let source = \"\";\n         let ast = parse::from_str(source);\n         let doc = extract(ast, \"burp\");\n         assert doc.cratemod().name() == \"burp\";"}, {"sha": "87b9d85637c369bd22150fa9e41fb49c3cbe9954", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -354,7 +354,7 @@ fn default_seq_fold_type<T>(\n #[test]\n fn default_fold_should_produce_same_doc() {\n     let source = \"mod a { fn b() { } mod c { fn d() { } } }\";\n-    let ast = parse::from_str(~source);\n+    let ast = parse::from_str(source);\n     let doc = extract::extract(ast, \"\");\n     let fld = default_seq_fold(());\n     let folded = fld.fold_doc(fld, doc);\n@@ -364,7 +364,7 @@ fn default_fold_should_produce_same_doc() {\n #[test]\n fn default_fold_should_produce_same_consts() {\n     let source = \"const a: int = 0;\";\n-    let ast = parse::from_str(~source);\n+    let ast = parse::from_str(source);\n     let doc = extract::extract(ast, \"\");\n     let fld = default_seq_fold(());\n     let folded = fld.fold_doc(fld, doc);\n@@ -374,7 +374,7 @@ fn default_fold_should_produce_same_consts() {\n #[test]\n fn default_fold_should_produce_same_enums() {\n     let source = \"enum a { b }\";\n-    let ast = parse::from_str(~source);\n+    let ast = parse::from_str(source);\n     let doc = extract::extract(ast, \"\");\n     let fld = default_seq_fold(());\n     let folded = fld.fold_doc(fld, doc);\n@@ -384,7 +384,7 @@ fn default_fold_should_produce_same_enums() {\n #[test]\n fn default_parallel_fold_should_produce_same_doc() {\n     let source = \"mod a { fn b() { } mod c { fn d() { } } }\";\n-    let ast = parse::from_str(~source);\n+    let ast = parse::from_str(source);\n     let doc = extract::extract(ast, \"\");\n     let fld = default_par_fold(());\n     let folded = fld.fold_doc(fld, doc);"}, {"sha": "3ad8f51e8db0a2044c085b7c7fb92580768c894c", "filename": "src/rustdoc/parse.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Frustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85fbfa25d799c98a0aadf2faef3fc17400764daf/src%2Frustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fparse.rs?ref=85fbfa25d799c98a0aadf2faef3fc17400764daf", "patch": "@@ -27,18 +27,18 @@ fn from_file(file: str) -> @ast::crate {\n         file, [], new_parse_sess())\n }\n \n-fn from_str(source: ~str) -> @ast::crate {\n+fn from_str(source: str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n-        \"-\", source, [], new_parse_sess())\n+        \"-\", @source, [], new_parse_sess())\n }\n \n-fn from_file_sess(sess: session::session, &&file: str) -> @ast::crate {\n+fn from_file_sess(sess: session::session, file: str) -> @ast::crate {\n     parse::parse_crate_from_file(file, cfg(sess), sess.parse_sess)\n }\n \n-fn from_str_sess(sess: session::session, &&source: ~str) -> @ast::crate {\n+fn from_str_sess(sess: session::session, source: str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n-        \"-\", source, cfg(sess), sess.parse_sess)\n+        \"-\", @source, cfg(sess), sess.parse_sess)\n }\n \n fn cfg(sess: session::session) -> ast::crate_cfg {"}]}