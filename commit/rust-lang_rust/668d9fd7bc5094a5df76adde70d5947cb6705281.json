{"sha": "668d9fd7bc5094a5df76adde70d5947cb6705281", "node_id": "C_kwDOAAsO6NoAKDY2OGQ5ZmQ3YmM1MDk0YTVkZjc2YWRkZTcwZDU5NDdjYjY3MDUyODE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-12-22T22:18:48Z"}, "committer": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-12-22T22:18:48Z"}, "message": "Always suggest as `MachineApplicable` in `recover_intersection_pat`\n\nSigned-off-by: Yuki Okushi <jtitor@2k36.org>", "tree": {"sha": "c91c466e49df632fe38ae4e5705481325f2a4f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c91c466e49df632fe38ae4e5705481325f2a4f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/668d9fd7bc5094a5df76adde70d5947cb6705281", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgHhkVL0/9C9iZr1PMss4Lz7KmAH\nPO6dU/JqcK/z29OHQAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQI2RjW43nk/WSi2i17GUGTcOi/9OE6NCvZN1nXsiP7n8Ju2ahX6j/UTJJisvCySfd4\npeV3rjqvpVMxmI1b5LBQ4=\n-----END SSH SIGNATURE-----", "payload": "tree c91c466e49df632fe38ae4e5705481325f2a4f5a\nparent cca80b9a81d495f543cdc122fa330c7f68fff3a8\nauthor Yuki Okushi <jtitor@2k36.org> 1671747528 +0900\ncommitter Yuki Okushi <jtitor@2k36.org> 1671747528 +0900\n\nAlways suggest as `MachineApplicable` in `recover_intersection_pat`\n\nSigned-off-by: Yuki Okushi <jtitor@2k36.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/668d9fd7bc5094a5df76adde70d5947cb6705281", "html_url": "https://github.com/rust-lang/rust/commit/668d9fd7bc5094a5df76adde70d5947cb6705281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/668d9fd7bc5094a5df76adde70d5947cb6705281/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca80b9a81d495f543cdc122fa330c7f68fff3a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cca80b9a81d495f543cdc122fa330c7f68fff3a8", "html_url": "https://github.com/rust-lang/rust/commit/cca80b9a81d495f543cdc122fa330c7f68fff3a8"}], "stats": {"total": 116, "additions": 81, "deletions": 35}, "files": [{"sha": "0b057f2f577fe73e85489bf75063576cdf3c5d72", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/668d9fd7bc5094a5df76adde70d5947cb6705281/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668d9fd7bc5094a5df76adde70d5947cb6705281/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=668d9fd7bc5094a5df76adde70d5947cb6705281", "patch": "@@ -491,17 +491,6 @@ impl<'a> Parser<'a> {\n \n         if let PatKind::Ident(_, _, sub @ None) = &mut rhs.kind {\n             // The user inverted the order, so help them fix that.\n-            let mut applicability = Applicability::MachineApplicable;\n-            // FIXME(bindings_after_at): Remove this code when stabilizing the feature.\n-            lhs.walk(&mut |p| match p.kind {\n-                // `check_match` is unhappy if the subpattern has a binding anywhere.\n-                PatKind::Ident(..) => {\n-                    applicability = Applicability::MaybeIncorrect;\n-                    false // Short-circuit.\n-                }\n-                _ => true,\n-            });\n-\n             let lhs_span = lhs.span;\n             // Move the LHS into the RHS as a subpattern.\n             // The RHS is now the full pattern.\n@@ -510,7 +499,12 @@ impl<'a> Parser<'a> {\n             self.struct_span_err(sp, \"pattern on wrong side of `@`\")\n                 .span_label(lhs_span, \"pattern on the left, should be on the right\")\n                 .span_label(rhs.span, \"binding on the right, should be on the left\")\n-                .span_suggestion(sp, \"switch the order\", pprust::pat_to_string(&rhs), applicability)\n+                .span_suggestion(\n+                    sp,\n+                    \"switch the order\",\n+                    pprust::pat_to_string(&rhs),\n+                    Applicability::MachineApplicable,\n+                )\n                 .emit();\n         } else {\n             // The special case above doesn't apply so we may have e.g. `A(x) @ B(y)`."}, {"sha": "44773095b87184bbee39c3acd0f2b293f217f672", "filename": "src/test/ui/parser/intersection-patterns-1.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/668d9fd7bc5094a5df76adde70d5947cb6705281/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/668d9fd7bc5094a5df76adde70d5947cb6705281/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.fixed?ref=668d9fd7bc5094a5df76adde70d5947cb6705281", "patch": "@@ -0,0 +1,35 @@\n+// This tests the parser recovery in `recover_intersection_pat`\n+// and serves as a regression test for the diagnostics issue #65400.\n+//\n+// The general idea is that for `$pat_lhs @ $pat_rhs` where\n+// `$pat_lhs` is not generated by `ref? mut? $ident` we want\n+// to suggest either switching the order or note that intersection\n+// patterns are not allowed.\n+\n+// run-rustfix\n+\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let s: Option<u8> = None;\n+\n+    match s {\n+        y @ Some(x) => {}\n+        //~^ ERROR pattern on wrong side of `@`\n+        //~| pattern on the left, should be on the right\n+        //~| binding on the right, should be on the left\n+        //~| HELP switch the order\n+        //~| SUGGESTION y @ Some(x)\n+        _ => {}\n+    }\n+\n+    match 2 {\n+        e @ 1..=5 => {}\n+        //~^ ERROR pattern on wrong side of `@`\n+        //~| pattern on the left, should be on the right\n+        //~| binding on the right, should be on the left\n+        //~| HELP switch the order\n+        //~| SUGGESTION e @ 1..=5\n+        _ => {}\n+    }\n+}"}, {"sha": "1036b9daf648a09730ad75aef4be40cb48847f52", "filename": "src/test/ui/parser/intersection-patterns-1.rs", "status": "renamed", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/668d9fd7bc5094a5df76adde70d5947cb6705281/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668d9fd7bc5094a5df76adde70d5947cb6705281/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.rs?ref=668d9fd7bc5094a5df76adde70d5947cb6705281", "patch": "@@ -6,6 +6,10 @@\n // to suggest either switching the order or note that intersection\n // patterns are not allowed.\n \n+// run-rustfix\n+\n+#![allow(unused_variables)]\n+\n fn main() {\n     let s: Option<u8> = None;\n \n@@ -19,15 +23,6 @@ fn main() {\n         _ => {}\n     }\n \n-    match s {\n-        Some(x) @ Some(y) => {}\n-        //~^ ERROR left-hand side of `@` must be a binding\n-        //~| interpreted as a pattern, not a binding\n-        //~| also a pattern\n-        //~| NOTE bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n-        _ => {}\n-    }\n-\n     match 2 {\n         1 ..= 5 @ e => {}\n         //~^ ERROR pattern on wrong side of `@`", "previous_filename": "src/test/ui/parser/intersection-patterns.rs"}, {"sha": "dc968656c91ff226f3a301c108bf4699d9f8e9f2", "filename": "src/test/ui/parser/intersection-patterns-1.stderr", "status": "renamed", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/668d9fd7bc5094a5df76adde70d5947cb6705281/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668d9fd7bc5094a5df76adde70d5947cb6705281/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-1.stderr?ref=668d9fd7bc5094a5df76adde70d5947cb6705281", "patch": "@@ -1,5 +1,5 @@\n error: pattern on wrong side of `@`\n-  --> $DIR/intersection-patterns.rs:13:9\n+  --> $DIR/intersection-patterns-1.rs:17:9\n    |\n LL |         Some(x) @ y => {}\n    |         -------^^^-\n@@ -8,19 +8,8 @@ LL |         Some(x) @ y => {}\n    |         pattern on the left, should be on the right\n    |         help: switch the order: `y @ Some(x)`\n \n-error: left-hand side of `@` must be a binding\n-  --> $DIR/intersection-patterns.rs:23:9\n-   |\n-LL |         Some(x) @ Some(y) => {}\n-   |         -------^^^-------\n-   |         |         |\n-   |         |         also a pattern\n-   |         interpreted as a pattern, not a binding\n-   |\n-   = note: bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n-\n error: pattern on wrong side of `@`\n-  --> $DIR/intersection-patterns.rs:32:9\n+  --> $DIR/intersection-patterns-1.rs:27:9\n    |\n LL |         1 ..= 5 @ e => {}\n    |         -------^^^-\n@@ -29,5 +18,5 @@ LL |         1 ..= 5 @ e => {}\n    |         pattern on the left, should be on the right\n    |         help: switch the order: `e @ 1..=5`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n ", "previous_filename": "src/test/ui/parser/intersection-patterns.stderr"}, {"sha": "408415e87ef983762d9c6ee62e5c1dc8e5535d0f", "filename": "src/test/ui/parser/intersection-patterns-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/668d9fd7bc5094a5df76adde70d5947cb6705281/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668d9fd7bc5094a5df76adde70d5947cb6705281/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.rs?ref=668d9fd7bc5094a5df76adde70d5947cb6705281", "patch": "@@ -0,0 +1,20 @@\n+// This tests the parser recovery in `recover_intersection_pat`\n+// and serves as a regression test for the diagnostics issue #65400.\n+//\n+// The general idea is that for `$pat_lhs @ $pat_rhs` where\n+// `$pat_lhs` is not generated by `ref? mut? $ident` we want\n+// to suggest either switching the order or note that intersection\n+// patterns are not allowed.\n+\n+fn main() {\n+    let s: Option<u8> = None;\n+\n+    match s {\n+        Some(x) @ Some(y) => {}\n+        //~^ ERROR left-hand side of `@` must be a binding\n+        //~| interpreted as a pattern, not a binding\n+        //~| also a pattern\n+        //~| NOTE bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n+        _ => {}\n+    }\n+}"}, {"sha": "f7e78814ca57c5f03183b62df02f54f1256eecbc", "filename": "src/test/ui/parser/intersection-patterns-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/668d9fd7bc5094a5df76adde70d5947cb6705281/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/668d9fd7bc5094a5df76adde70d5947cb6705281/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fintersection-patterns-2.stderr?ref=668d9fd7bc5094a5df76adde70d5947cb6705281", "patch": "@@ -0,0 +1,13 @@\n+error: left-hand side of `@` must be a binding\n+  --> $DIR/intersection-patterns-2.rs:13:9\n+   |\n+LL |         Some(x) @ Some(y) => {}\n+   |         -------^^^-------\n+   |         |         |\n+   |         |         also a pattern\n+   |         interpreted as a pattern, not a binding\n+   |\n+   = note: bindings are `x`, `mut x`, `ref x`, and `ref mut x`\n+\n+error: aborting due to previous error\n+"}]}