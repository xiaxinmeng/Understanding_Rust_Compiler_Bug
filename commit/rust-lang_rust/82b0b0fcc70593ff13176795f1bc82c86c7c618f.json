{"sha": "82b0b0fcc70593ff13176795f1bc82c86c7c618f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYjBiMGZjYzcwNTkzZmYxMzE3Njc5NWYxYmM4MmM4NmM3YzYxOGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-01-26T15:10:22Z"}, "committer": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-01-26T15:27:28Z"}, "message": "fallout", "tree": {"sha": "40119ebfbb63e98c32aa098113fc9aaeed089abf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40119ebfbb63e98c32aa098113fc9aaeed089abf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82b0b0fcc70593ff13176795f1bc82c86c7c618f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82b0b0fcc70593ff13176795f1bc82c86c7c618f", "html_url": "https://github.com/rust-lang/rust/commit/82b0b0fcc70593ff13176795f1bc82c86c7c618f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82b0b0fcc70593ff13176795f1bc82c86c7c618f/comments", "author": null, "committer": null, "parents": [{"sha": "85b80aa1e1c69f0ee22c93e7126f96ab7182377a", "url": "https://api.github.com/repos/rust-lang/rust/commits/85b80aa1e1c69f0ee22c93e7126f96ab7182377a", "html_url": "https://github.com/rust-lang/rust/commit/85b80aa1e1c69f0ee22c93e7126f96ab7182377a"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "6dfd1fddcf7dda83ce9ad56a30c151e558bb8ff0", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82b0b0fcc70593ff13176795f1bc82c86c7c618f/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b0b0fcc70593ff13176795f1bc82c86c7c618f/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=82b0b0fcc70593ff13176795f1bc82c86c7c618f", "patch": "@@ -854,7 +854,7 @@ mod test {\n     #[test]\n     fn string_to_tts_1 () {\n         let tts = string_to_tts(\"fn a (b : i32) { b; }\".to_string());\n-        assert_eq!(json::encode(&tts),\n+        assert_eq!(json::encode(&tts).unwrap(),\n         \"[\\\n     {\\\n         \\\"variant\\\":\\\"TtToken\\\",\\"}, {"sha": "a0888850aaf1408104bd6442fb2dc362300b5011", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82b0b0fcc70593ff13176795f1bc82c86c7c618f/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b0b0fcc70593ff13176795f1bc82c86c7c618f/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=82b0b0fcc70593ff13176795f1bc82c86c7c618f", "patch": "@@ -24,7 +24,7 @@ struct A {\n \n fn main() {\n     let obj = A { foo: box [true, false] };\n-    let s = json::encode(&obj);\n+    let s = json::encode(&obj).unwrap();\n     let obj2: A = json::decode(s.as_slice()).unwrap();\n     assert!(obj.foo == obj2.foo);\n }"}, {"sha": "a5453d26170ad62833dfa45d88d3d6583bc3ea78", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82b0b0fcc70593ff13176795f1bc82c86c7c618f/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b0b0fcc70593ff13176795f1bc82c86c7c618f/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=82b0b0fcc70593ff13176795f1bc82c86c7c618f", "patch": "@@ -35,7 +35,7 @@ fn main() {\n         foo: Cell::new(true),\n         bar: RefCell::new( A { baz: 2 } )\n     };\n-    let s = json::encode(&obj);\n+    let s = json::encode(&obj).unwrap();\n     let obj2: B = json::decode(s.as_slice()).unwrap();\n     assert!(obj.foo.get() == obj2.foo.get());\n     assert!(obj.bar.borrow().baz == obj2.bar.borrow().baz);"}, {"sha": "8c4dd7ddc9a3144bc13e5df294248651ec1a8ba1", "filename": "src/test/run-pass/issue-14021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82b0b0fcc70593ff13176795f1bc82c86c7c618f/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82b0b0fcc70593ff13176795f1bc82c86c7c618f/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14021.rs?ref=82b0b0fcc70593ff13176795f1bc82c86c7c618f", "patch": "@@ -20,7 +20,7 @@ struct UnitLikeStruct;\n \n pub fn main() {\n     let obj = UnitLikeStruct;\n-    let json_str: String = json::encode(&obj);\n+    let json_str: String = json::encode(&obj).unwrap();\n \n     let json_object = json::from_str(json_str.as_slice());\n     let mut decoder = json::Decoder::new(json_object.unwrap());"}]}