{"sha": "647a36da73972c557825487e178bfc4ad1c0cc33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0N2EzNmRhNzM5NzJjNTU3ODI1NDg3ZTE3OGJmYzRhZDFjMGNjMzM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-06-29T08:40:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-29T08:40:08Z"}, "message": "Rollup merge of #42920 - behnam:cmp, r=BurntSushi\n\n[libcore/cmp] Expand Ord/PartialOrd Derivable doc for enum types\n\nExpand Derivable docblock section for `Ord` and `PartialOrd` to cover\n`enum` types, in addition to the existing language explaining it for\n`struct` types.", "tree": {"sha": "0591f63c87ece2cc844dabad4cbc236a09fbe1ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0591f63c87ece2cc844dabad4cbc236a09fbe1ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/647a36da73972c557825487e178bfc4ad1c0cc33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/647a36da73972c557825487e178bfc4ad1c0cc33", "html_url": "https://github.com/rust-lang/rust/commit/647a36da73972c557825487e178bfc4ad1c0cc33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/647a36da73972c557825487e178bfc4ad1c0cc33/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe0098b66da3515f06a8d919ca954e5373cb0a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe0098b66da3515f06a8d919ca954e5373cb0a4", "html_url": "https://github.com/rust-lang/rust/commit/bfe0098b66da3515f06a8d919ca954e5373cb0a4"}, {"sha": "330dab837fb872051b365715f1532eb8156c33ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/330dab837fb872051b365715f1532eb8156c33ae", "html_url": "https://github.com/rust-lang/rust/commit/330dab837fb872051b365715f1532eb8156c33ae"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "7882a8ce5c8ec443fe7498c0706a07da98e5d598", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/647a36da73972c557825487e178bfc4ad1c0cc33/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/647a36da73972c557825487e178bfc4ad1c0cc33/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=647a36da73972c557825487e178bfc4ad1c0cc33", "patch": "@@ -379,8 +379,9 @@ impl<T: Ord> Ord for Reverse<T> {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n-/// ordering based on the top-to-bottom declaration order of the struct's members.\n+/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n+/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n+/// When `derive`d on enums, variants are ordered by their top-to-bottom declaration order.\n ///\n /// ## How can I implement `Ord`?\n ///\n@@ -512,8 +513,9 @@ impl PartialOrd for Ordering {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n-/// ordering based on the top-to-bottom declaration order of the struct's members.\n+/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n+/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n+/// When `derive`d on enums, variants are ordered by their top-to-bottom declaration order.\n ///\n /// ## How can I implement `PartialOrd`?\n ///"}]}