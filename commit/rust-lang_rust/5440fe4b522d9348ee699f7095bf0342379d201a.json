{"sha": "5440fe4b522d9348ee699f7095bf0342379d201a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NDBmZTRiNTIyZDkzNDhlZTY5OWY3MDk1YmYwMzQyMzc5ZDIwMWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-14T03:33:06Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:22:11Z"}, "message": "permit locking constant memory (60)", "tree": {"sha": "ad63510ad6f8c4784fe9319023b96044ab9befd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad63510ad6f8c4784fe9319023b96044ab9befd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5440fe4b522d9348ee699f7095bf0342379d201a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll2/7MACgkQpp+NIls6\n19lIEg/8DtE3ug6kGTet/kuWcjEmMDXNQ+r/Xevp4tja8x211hxf9zBieC4NxLv+\n7pGpGRLwl2Sl+jTvtEGeRAdA1udGMN16+8AeR7LugNyzutkpfOfw9m7s7UYzcUE/\n3P+SICHxpyAPW2CD5PI2a1Du+5fLRDiFKOBPeTbj5iBkYgiXiRxXnehfI35TQEeU\nUFw98CZJuatXDnONF3wJuD1j3uouhZqVeNhuyHVjCkhq4sznALgmgU3weDeXkqpV\nv9+jBiiz//AC0R2Z/9EDRjYSJz2lBe8zLwpLJ8iR+guW4UX6ZXBtQFYpgPrYf+vt\nirlh638ZDvzQIISYwuliN3d2WD+44NgMlSCPS6YlOAJa1Y41K2qJ7nh4ncSk9tHh\nwVBwGEeXHAffsxFMMhBnWaFvHXpxYwUQy/NJC7qViq1CA94cTv3/zWCyHtfWqQqd\nO4KFvgCszWAesOoIGqb0Icaz8aS6UTZCIcxkFBYQxsq1hpD8eYr8ioXsFQnEb3gc\neDwyuy5JFlqDQOwBmOMdgcjUgMEYL0Fotp86k33BVuY4j7zJJoQAGF7NRqV8YJpW\nQgvVGzCHHWZti7Hp4XUP0DMGWJ3XD/qdVWW2N+F/+93NcO1eIb1bv0VRCId0ouD8\n+axpDsgR+wu7WhaS/IbLcJaNebvDOmZgE+GwwuT4u7jRpEAynzc=\n=7LhL\n-----END PGP SIGNATURE-----", "payload": "tree ad63510ad6f8c4784fe9319023b96044ab9befd3\nparent 66e55b0d6e00706fb9bbfd6a062852c9dbd09cec\nauthor Ralf Jung <post@ralfj.de> 1500003186 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500970931 +0200\n\npermit locking constant memory (60)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5440fe4b522d9348ee699f7095bf0342379d201a", "html_url": "https://github.com/rust-lang/rust/commit/5440fe4b522d9348ee699f7095bf0342379d201a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5440fe4b522d9348ee699f7095bf0342379d201a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66e55b0d6e00706fb9bbfd6a062852c9dbd09cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e55b0d6e00706fb9bbfd6a062852c9dbd09cec", "html_url": "https://github.com/rust-lang/rust/commit/66e55b0d6e00706fb9bbfd6a062852c9dbd09cec"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "33a9aa8e304f4fa57732450b3ecc5b5b952daaf9", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5440fe4b522d9348ee699f7095bf0342379d201a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5440fe4b522d9348ee699f7095bf0342379d201a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5440fe4b522d9348ee699f7095bf0342379d201a", "patch": "@@ -562,7 +562,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         self.check_bounds(ptr.offset(len, self.layout)?, true)?; // if ptr.offset is in bounds, then so is ptr (because offset checks for overflow)\n         self.check_locks(ptr, len, kind)?; // make sure we have the access we are acquiring\n         let lifetime = DynamicLifetime { frame: self.cur_frame, region };\n-        let alloc = self.get_mut(ptr.alloc_id)?;\n+        let alloc = self.get_mut_unchecked(ptr.alloc_id)?;\n         alloc.locks.entry(MemoryRange::new(ptr.offset, len)).or_insert_with(|| Vec::new()).push(LockInfo { lifetime, kind, status: LockStatus::Held });\n         Ok(())\n     }\n@@ -571,7 +571,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub(crate) fn release_write_lock_until(&mut self, ptr: MemoryPointer, len: u64, release_until: Option<CodeExtent>) -> EvalResult<'tcx> {\n         assert!(len > 0);\n         let cur_frame = self.cur_frame;\n-        let alloc = self.get_mut(ptr.alloc_id)?;\n+        let alloc = self.get_mut_unchecked(ptr.alloc_id)?;\n \n         for (range, locks) in alloc.iter_lock_vecs_mut(ptr.offset, len) {\n             if !range.contains(ptr.offset, len) {\n@@ -648,21 +648,26 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             }\n         }\n     }\n-\n-    pub fn get_mut(&mut self, id: AllocId) -> EvalResult<'tcx, &mut Allocation> {\n+    \n+    fn get_mut_unchecked(&mut self, id: AllocId) -> EvalResult<'tcx, &mut Allocation> {\n         match self.alloc_map.get_mut(&id) {\n-            Some(alloc) => if alloc.mutable == Mutability::Mutable {\n-                Ok(alloc)\n-            } else {\n-                Err(EvalError::ModifiedConstantMemory)\n-            },\n+            Some(alloc) => Ok(alloc),\n             None => match self.functions.get(&id) {\n                 Some(_) => Err(EvalError::DerefFunctionPointer),\n                 None => Err(EvalError::DanglingPointerDeref),\n             }\n         }\n     }\n \n+    pub fn get_mut(&mut self, id: AllocId) -> EvalResult<'tcx, &mut Allocation> {\n+        let alloc = self.get_mut_unchecked(id)?;\n+        if alloc.mutable == Mutability::Mutable {\n+            Ok(alloc)\n+        } else {\n+            Err(EvalError::ModifiedConstantMemory)\n+        }\n+    }\n+\n     pub fn get_fn(&self, ptr: MemoryPointer) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n         if ptr.offset != 0 {\n             return Err(EvalError::InvalidFunctionPointer);"}]}