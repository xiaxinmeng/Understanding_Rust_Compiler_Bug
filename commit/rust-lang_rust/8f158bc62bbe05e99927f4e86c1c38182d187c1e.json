{"sha": "8f158bc62bbe05e99927f4e86c1c38182d187c1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMTU4YmM2MmJiZTA1ZTk5OTI3ZjRlODZjMWMzODE4MmQxODdjMWU=", "commit": {"author": {"name": "Emmanuel Gil Peyrot", "email": "linkmauve@linkmauve.fr", "date": "2019-11-12T21:07:39Z"}, "committer": {"name": "Emmanuel Gil Peyrot", "email": "linkmauve@linkmauve.fr", "date": "2019-11-24T12:55:03Z"}, "message": "Replace .unwrap() with ? in std::os::unix::net", "tree": {"sha": "5d8969e49fb723a005745c46472eeed3e315f49c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d8969e49fb723a005745c46472eeed3e315f49c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f158bc62bbe05e99927f4e86c1c38182d187c1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f158bc62bbe05e99927f4e86c1c38182d187c1e", "html_url": "https://github.com/rust-lang/rust/commit/8f158bc62bbe05e99927f4e86c1c38182d187c1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f158bc62bbe05e99927f4e86c1c38182d187c1e/comments", "author": {"login": "linkmauve", "id": 7755816, "node_id": "MDQ6VXNlcjc3NTU4MTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7755816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linkmauve", "html_url": "https://github.com/linkmauve", "followers_url": "https://api.github.com/users/linkmauve/followers", "following_url": "https://api.github.com/users/linkmauve/following{/other_user}", "gists_url": "https://api.github.com/users/linkmauve/gists{/gist_id}", "starred_url": "https://api.github.com/users/linkmauve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linkmauve/subscriptions", "organizations_url": "https://api.github.com/users/linkmauve/orgs", "repos_url": "https://api.github.com/users/linkmauve/repos", "events_url": "https://api.github.com/users/linkmauve/events{/privacy}", "received_events_url": "https://api.github.com/users/linkmauve/received_events", "type": "User", "site_admin": false}, "committer": {"login": "linkmauve", "id": 7755816, "node_id": "MDQ6VXNlcjc3NTU4MTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7755816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linkmauve", "html_url": "https://github.com/linkmauve", "followers_url": "https://api.github.com/users/linkmauve/followers", "following_url": "https://api.github.com/users/linkmauve/following{/other_user}", "gists_url": "https://api.github.com/users/linkmauve/gists{/gist_id}", "starred_url": "https://api.github.com/users/linkmauve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linkmauve/subscriptions", "organizations_url": "https://api.github.com/users/linkmauve/orgs", "repos_url": "https://api.github.com/users/linkmauve/repos", "events_url": "https://api.github.com/users/linkmauve/events{/privacy}", "received_events_url": "https://api.github.com/users/linkmauve/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d761fe0462ba0f671a237d0bb35e3579b8ba0e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d761fe0462ba0f671a237d0bb35e3579b8ba0e8", "html_url": "https://github.com/rust-lang/rust/commit/7d761fe0462ba0f671a237d0bb35e3579b8ba0e8"}], "stats": {"total": 386, "additions": 237, "deletions": 149}, "files": [{"sha": "8039dcd2208cba9fb005f30305d6c6959800b95f", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f158bc62bbe05e99927f4e86c1c38182d187c1e/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f158bc62bbe05e99927f4e86c1c38182d187c1e/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=8f158bc62bbe05e99927f4e86c1c38182d187c1e", "patch": "@@ -16,7 +16,7 @@\n //! use std::os::unix::prelude::*;\n //!\n //! fn main() {\n-//!     let f = File::create(\"foo.txt\").unwrap();\n+//!     let f = File::create(\"foo.txt\")?;\n //!     let fd = f.as_raw_fd();\n //!\n //!     // use fd with native unix bindings"}, {"sha": "cfa157c66d102aa56acbcda857cb6a6b6a2ca32c", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 236, "deletions": 148, "changes": 384, "blob_url": "https://github.com/rust-lang/rust/blob/8f158bc62bbe05e99927f4e86c1c38182d187c1e/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f158bc62bbe05e99927f4e86c1c38182d187c1e/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=8f158bc62bbe05e99927f4e86c1c38182d187c1e", "patch": "@@ -142,19 +142,23 @@ impl SocketAddr {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let socket = UnixListener::bind(\"/tmp/sock\").unwrap();\n-    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n-    /// assert_eq!(addr.is_unnamed(), false);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixListener::bind(\"/tmp/sock\")?;\n+    ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     assert_eq!(addr.is_unnamed(), false);\n+    /// }\n     /// ```\n     ///\n     /// An unnamed address:\n     ///\n     /// ```\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let socket = UnixDatagram::unbound().unwrap();\n-    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n-    /// assert_eq!(addr.is_unnamed(), true);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixDatagram::unbound()?;\n+    ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     assert_eq!(addr.is_unnamed(), true);\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn is_unnamed(&self) -> bool {\n@@ -175,19 +179,23 @@ impl SocketAddr {\n     /// use std::os::unix::net::UnixListener;\n     /// use std::path::Path;\n     ///\n-    /// let socket = UnixListener::bind(\"/tmp/sock\").unwrap();\n-    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n-    /// assert_eq!(addr.as_pathname(), Some(Path::new(\"/tmp/sock\")));\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixListener::bind(\"/tmp/sock\")?;\n+    ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     assert_eq!(addr.as_pathname(), Some(Path::new(\"/tmp/sock\")));\n+    /// }\n     /// ```\n     ///\n     /// Without a pathname:\n     ///\n     /// ```\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let socket = UnixDatagram::unbound().unwrap();\n-    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n-    /// assert_eq!(addr.as_pathname(), None);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixDatagram::unbound()?;\n+    ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    ///     assert_eq!(addr.as_pathname(), None);\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn as_pathname(&self) -> Option<&Path> {\n@@ -247,11 +255,13 @@ impl<'a> fmt::Display for AsciiEscaped<'a> {\n /// use std::os::unix::net::UnixStream;\n /// use std::io::prelude::*;\n ///\n-/// let mut stream = UnixStream::connect(\"/path/to/my/socket\").unwrap();\n-/// stream.write_all(b\"hello world\").unwrap();\n-/// let mut response = String::new();\n-/// stream.read_to_string(&mut response).unwrap();\n-/// println!(\"{}\", response);\n+/// fn main() -> std::io::Result<()> {\n+///     let mut stream = UnixStream::connect(\"/path/to/my/socket\")?;\n+///     stream.write_all(b\"hello world\")?;\n+///     let mut response = String::new();\n+///     stream.read_to_string(&mut response)?;\n+///     println!(\"{}\", response);\n+/// }\n /// ```\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub struct UnixStream(Socket);\n@@ -336,8 +346,10 @@ impl UnixStream {\n     /// ```no_run\n     /// use std::os::unix::net::UnixStream;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// let sock_copy = socket.try_clone().expect(\"Couldn't clone socket\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     let sock_copy = socket.try_clone().expect(\"Couldn't clone socket\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn try_clone(&self) -> io::Result<UnixStream> {\n@@ -351,8 +363,10 @@ impl UnixStream {\n     /// ```no_run\n     /// use std::os::unix::net::UnixStream;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     let addr = socket.local_addr().expect(\"Couldn't get local address\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n@@ -366,8 +380,10 @@ impl UnixStream {\n     /// ```no_run\n     /// use std::os::unix::net::UnixStream;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// let addr = socket.peer_addr().expect(\"Couldn't get peer address\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     let addr = socket.peer_addr().expect(\"Couldn't get peer address\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n@@ -391,7 +407,7 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n+    /// let socket = UnixStream::connect(\"/tmp/sock\")?;\n     /// socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n     /// ```\n     ///\n@@ -403,10 +419,12 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n-    /// let err = result.unwrap_err();\n-    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n+    ///     let err = result.unwrap_err();\n+    ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n@@ -430,8 +448,11 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.set_write_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set write timeout\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.set_write_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"Couldn't set write timeout\");\n+    /// }\n     /// ```\n     ///\n     /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n@@ -442,10 +463,12 @@ impl UnixStream {\n     /// use std::net::UdpSocket;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").unwrap();\n-    /// let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n-    /// let err = result.unwrap_err();\n-    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UdpSocket::bind(\"127.0.0.1:34254\")?;\n+    ///     let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n+    ///     let err = result.unwrap_err();\n+    ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_write_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n@@ -460,9 +483,11 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n-    /// assert_eq!(socket.read_timeout().unwrap(), Some(Duration::new(1, 0)));\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n+    ///     assert_eq!(socket.read_timeout()?, Some(Duration::new(1, 0)));\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n@@ -477,9 +502,12 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.set_write_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set write timeout\");\n-    /// assert_eq!(socket.write_timeout().unwrap(), Some(Duration::new(1, 0)));\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.set_write_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"Couldn't set write timeout\");\n+    ///     assert_eq!(socket.write_timeout()?, Some(Duration::new(1, 0)));\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n@@ -493,8 +521,10 @@ impl UnixStream {\n     /// ```no_run\n     /// use std::os::unix::net::UnixStream;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.set_nonblocking(true).expect(\"Couldn't set nonblocking\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     socket.set_nonblocking(true).expect(\"Couldn't set nonblocking\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n@@ -508,9 +538,11 @@ impl UnixStream {\n     /// ```no_run\n     /// use std::os::unix::net::UnixStream;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// if let Ok(Some(err)) = socket.take_error() {\n-    ///     println!(\"Got error: {:?}\", err);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     if let Ok(Some(err)) = socket.take_error() {\n+    ///         println!(\"Got error: {:?}\", err);\n+    ///     }\n     /// }\n     /// ```\n     ///\n@@ -535,8 +567,10 @@ impl UnixStream {\n     /// use std::os::unix::net::UnixStream;\n     /// use std::net::Shutdown;\n     ///\n-    /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n-    /// socket.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\");\n+    ///     socket.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {\n@@ -697,18 +731,20 @@ impl IntoRawFd for net::UdpSocket {\n ///     // ...\n /// }\n ///\n-/// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n+/// fn main() -> std::io::Result<()> {\n+///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n ///\n-/// // accept connections and process them, spawning a new thread for each one\n-/// for stream in listener.incoming() {\n-///     match stream {\n-///         Ok(stream) => {\n-///             /* connection succeeded */\n-///             thread::spawn(|| handle_client(stream));\n-///         }\n-///         Err(err) => {\n-///             /* connection failed */\n-///             break;\n+///     // accept connections and process them, spawning a new thread for each one\n+///     for stream in listener.incoming() {\n+///         match stream {\n+///             Ok(stream) => {\n+///                 /* connection succeeded */\n+///                 thread::spawn(|| handle_client(stream));\n+///             }\n+///             Err(err) => {\n+///                 /* connection failed */\n+///                 break;\n+///             }\n ///         }\n ///     }\n /// }\n@@ -773,11 +809,13 @@ impl UnixListener {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n     ///\n-    /// match listener.accept() {\n-    ///     Ok((socket, addr)) => println!(\"Got a client: {:?}\", addr),\n-    ///     Err(e) => println!(\"accept function failed: {:?}\", e),\n+    ///     match listener.accept() {\n+    ///         Ok((socket, addr)) => println!(\"Got a client: {:?}\", addr),\n+    ///         Err(e) => println!(\"accept function failed: {:?}\", e),\n+    ///     }\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -800,9 +838,11 @@ impl UnixListener {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n     ///\n-    /// let listener_copy = listener.try_clone().expect(\"try_clone failed\");\n+    ///     let listener_copy = listener.try_clone().expect(\"try_clone failed\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn try_clone(&self) -> io::Result<UnixListener> {\n@@ -816,9 +856,11 @@ impl UnixListener {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n     ///\n-    /// let addr = listener.local_addr().expect(\"Couldn't get local address\");\n+    ///     let addr = listener.local_addr().expect(\"Couldn't get local address\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n@@ -832,9 +874,11 @@ impl UnixListener {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n     ///\n-    /// listener.set_nonblocking(true).expect(\"Couldn't set non blocking\");\n+    ///     listener.set_nonblocking(true).expect(\"Couldn't set non blocking\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n@@ -848,10 +892,12 @@ impl UnixListener {\n     /// ```no_run\n     /// use std::os::unix::net::UnixListener;\n     ///\n-    /// let listener = UnixListener::bind(\"/tmp/sock\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/tmp/sock\")?;\n     ///\n-    /// if let Ok(Some(err)) = listener.take_error() {\n-    ///     println!(\"Got error: {:?}\", err);\n+    ///     if let Ok(Some(err)) = listener.take_error() {\n+    ///         println!(\"Got error: {:?}\", err);\n+    ///     }\n     /// }\n     /// ```\n     ///\n@@ -880,15 +926,17 @@ impl UnixListener {\n     ///     // ...\n     /// }\n     ///\n-    /// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n-    ///\n-    /// for stream in listener.incoming() {\n-    ///     match stream {\n-    ///         Ok(stream) => {\n-    ///             thread::spawn(|| handle_client(stream));\n-    ///         }\n-    ///         Err(err) => {\n-    ///             break;\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n+    ///\n+    ///     for stream in listener.incoming() {\n+    ///         match stream {\n+    ///             Ok(stream) => {\n+    ///                 thread::spawn(|| handle_client(stream));\n+    ///             }\n+    ///             Err(err) => {\n+    ///                 break;\n+    ///             }\n     ///         }\n     ///     }\n     /// }\n@@ -947,15 +995,17 @@ impl<'a> IntoIterator for &'a UnixListener {\n ///     // ...\n /// }\n ///\n-/// let listener = UnixListener::bind(\"/path/to/the/socket\").unwrap();\n+/// fn main() -> std::io::Result<()> {\n+///     let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n ///\n-/// for stream in listener.incoming() {\n-///     match stream {\n-///         Ok(stream) => {\n-///             thread::spawn(|| handle_client(stream));\n-///         }\n-///         Err(err) => {\n-///             break;\n+///     for stream in listener.incoming() {\n+///         match stream {\n+///             Ok(stream) => {\n+///                 thread::spawn(|| handle_client(stream));\n+///             }\n+///             Err(err) => {\n+///                 break;\n+///             }\n ///         }\n ///     }\n /// }\n@@ -986,11 +1036,13 @@ impl<'a> Iterator for Incoming<'a> {\n /// ```no_run\n /// use std::os::unix::net::UnixDatagram;\n ///\n-/// let socket = UnixDatagram::bind(\"/path/to/my/socket\").unwrap();\n-/// socket.send_to(b\"hello world\", \"/path/to/other/socket\").unwrap();\n-/// let mut buf = [0; 100];\n-/// let (count, address) = socket.recv_from(&mut buf).unwrap();\n-/// println!(\"socket {:?} sent {:?}\", address, &buf[..count]);\n+/// fn main() -> std::io::Result<()> {\n+///     let socket = UnixDatagram::bind(\"/path/to/my/socket\")?;\n+///     socket.send_to(b\"hello world\", \"/path/to/other/socket\")?;\n+///     let mut buf = [0; 100];\n+///     let (count, address) = socket.recv_from(&mut buf)?;\n+///     println!(\"socket {:?} sent {:?}\", address, &buf[..count]);\n+/// }\n /// ```\n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n pub struct UnixDatagram(Socket);\n@@ -1099,14 +1151,16 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// match sock.connect(\"/path/to/the/socket\") {\n-    ///     Ok(sock) => sock,\n-    ///     Err(e) => {\n-    ///         println!(\"Couldn't connect: {:?}\", e);\n-    ///         return\n-    ///     }\n-    /// };\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     match sock.connect(\"/path/to/the/socket\") {\n+    ///         Ok(sock) => sock,\n+    ///         Err(e) => {\n+    ///             println!(\"Couldn't connect: {:?}\", e);\n+    ///             return\n+    ///         }\n+    ///     };\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn connect<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {\n@@ -1133,9 +1187,11 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::bind(\"/path/to/the/socket\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::bind(\"/path/to/the/socket\")?;\n     ///\n-    /// let sock_copy = sock.try_clone().expect(\"try_clone failed\");\n+    ///     let sock_copy = sock.try_clone().expect(\"try_clone failed\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn try_clone(&self) -> io::Result<UnixDatagram> {\n@@ -1149,9 +1205,11 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::bind(\"/path/to/the/socket\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::bind(\"/path/to/the/socket\")?;\n     ///\n-    /// let addr = sock.local_addr().expect(\"Couldn't get local address\");\n+    ///     let addr = sock.local_addr().expect(\"Couldn't get local address\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n@@ -1169,10 +1227,12 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.connect(\"/path/to/the/socket\").unwrap();\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.connect(\"/path/to/the/socket\")?;\n     ///\n-    /// let addr = sock.peer_addr().expect(\"Couldn't get peer address\");\n+    ///     let addr = sock.peer_addr().expect(\"Couldn't get peer address\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n@@ -1189,11 +1249,13 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// let mut buf = vec![0; 10];\n-    /// match sock.recv_from(buf.as_mut_slice()) {\n-    ///     Ok((size, sender)) => println!(\"received {} bytes from {:?}\", size, sender),\n-    ///     Err(e) => println!(\"recv_from function failed: {:?}\", e),\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     let mut buf = vec![0; 10];\n+    ///     match sock.recv_from(buf.as_mut_slice()) {\n+    ///         Ok((size, sender)) => println!(\"received {} bytes from {:?}\", size, sender),\n+    ///         Err(e) => println!(\"recv_from function failed: {:?}\", e),\n+    ///     }\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1229,9 +1291,11 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::bind(\"/path/to/the/socket\").unwrap();\n-    /// let mut buf = vec![0; 10];\n-    /// sock.recv(buf.as_mut_slice()).expect(\"recv function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::bind(\"/path/to/the/socket\")?;\n+    ///     let mut buf = vec![0; 10];\n+    ///     sock.recv(buf.as_mut_slice()).expect(\"recv function failed\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {\n@@ -1247,8 +1311,10 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.send_to(b\"omelette au fromage\", \"/some/sock\").expect(\"send_to function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.send_to(b\"omelette au fromage\", \"/some/sock\").expect(\"send_to function failed\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn send_to<P: AsRef<Path>>(&self, buf: &[u8], path: P) -> io::Result<usize> {\n@@ -1280,9 +1346,11 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.connect(\"/some/sock\").expect(\"Couldn't connect\");\n-    /// sock.send(b\"omelette au fromage\").expect(\"send_to function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.connect(\"/some/sock\").expect(\"Couldn't connect\");\n+    ///     sock.send(b\"omelette au fromage\").expect(\"send_to function failed\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn send(&self, buf: &[u8]) -> io::Result<usize> {\n@@ -1307,8 +1375,11 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.set_read_timeout(Some(Duration::new(1, 0))).expect(\"set_read_timeout function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_read_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"set_read_timeout function failed\");\n+    /// }\n     /// ```\n     ///\n     /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n@@ -1319,10 +1390,12 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixDatagram::unbound().unwrap();\n-    /// let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n-    /// let err = result.unwrap_err();\n-    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixDatagram::unbound()?;\n+    ///     let result = socket.set_read_timeout(Some(Duration::new(0, 0)));\n+    ///     let err = result.unwrap_err();\n+    ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n@@ -1346,9 +1419,11 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.set_write_timeout(Some(Duration::new(1, 0)))\n-    ///     .expect(\"set_write_timeout function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_write_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"set_write_timeout function failed\");\n+    /// }\n     /// ```\n     ///\n     /// An [`Err`] is returned if the zero [`Duration`] is passed to this\n@@ -1359,10 +1434,12 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let socket = UnixDatagram::unbound().unwrap();\n-    /// let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n-    /// let err = result.unwrap_err();\n-    /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixDatagram::unbound()?;\n+    ///     let result = socket.set_write_timeout(Some(Duration::new(0, 0)));\n+    ///     let err = result.unwrap_err();\n+    ///     assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_write_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {\n@@ -1377,9 +1454,12 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.set_read_timeout(Some(Duration::new(1, 0))).expect(\"set_read_timeout function failed\");\n-    /// assert_eq!(sock.read_timeout().unwrap(), Some(Duration::new(1, 0)));\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_read_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"set_read_timeout function failed\");\n+    ///     assert_eq!(sock.read_timeout()?, Some(Duration::new(1, 0)));\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n@@ -1394,10 +1474,12 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::time::Duration;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.set_write_timeout(Some(Duration::new(1, 0)))\n-    ///     .expect(\"set_write_timeout function failed\");\n-    /// assert_eq!(sock.write_timeout().unwrap(), Some(Duration::new(1, 0)));\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_write_timeout(Some(Duration::new(1, 0)))\n+    ///         .expect(\"set_write_timeout function failed\");\n+    ///     assert_eq!(sock.write_timeout()?, Some(Duration::new(1, 0)));\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n@@ -1411,8 +1493,10 @@ impl UnixDatagram {\n     /// ```\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.set_nonblocking(true).expect(\"set_nonblocking function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.set_nonblocking(true).expect(\"set_nonblocking function failed\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n@@ -1426,9 +1510,11 @@ impl UnixDatagram {\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// if let Ok(Some(err)) = sock.take_error() {\n-    ///     println!(\"Got error: {:?}\", err);\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     if let Ok(Some(err)) = sock.take_error() {\n+    ///         println!(\"Got error: {:?}\", err);\n+    ///     }\n     /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n@@ -1448,8 +1534,10 @@ impl UnixDatagram {\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::net::Shutdown;\n     ///\n-    /// let sock = UnixDatagram::unbound().unwrap();\n-    /// sock.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let sock = UnixDatagram::unbound()?;\n+    ///     sock.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n+    /// }\n     /// ```\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {"}]}