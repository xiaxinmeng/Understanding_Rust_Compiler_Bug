{"sha": "51028532d790db476b102ebdda40bb9b1a7f8106", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMDI4NTMyZDc5MGRiNDc2YjEwMmViZGRhNDBiYjliMWE3ZjgxMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-24T13:37:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-24T13:37:36Z"}, "message": "auto merge of #7993 : Xazax-hun/rust/master, r=bblum\n\nAdded missing memory orderings for atomic types. https://github.com/mozilla/rust/issues/7422", "tree": {"sha": "1ec0e6be8a574074bdf8f22340616c2779284669", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec0e6be8a574074bdf8f22340616c2779284669"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51028532d790db476b102ebdda40bb9b1a7f8106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51028532d790db476b102ebdda40bb9b1a7f8106", "html_url": "https://github.com/rust-lang/rust/commit/51028532d790db476b102ebdda40bb9b1a7f8106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51028532d790db476b102ebdda40bb9b1a7f8106/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee423858a23f3a3eccddf9b8b36bfe64660397b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee423858a23f3a3eccddf9b8b36bfe64660397b", "html_url": "https://github.com/rust-lang/rust/commit/3ee423858a23f3a3eccddf9b8b36bfe64660397b"}, {"sha": "1ce14116ccfd9f58b16416de09085afcda744e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce14116ccfd9f58b16416de09085afcda744e1c", "html_url": "https://github.com/rust-lang/rust/commit/1ce14116ccfd9f58b16416de09085afcda744e1c"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "b595d3e1a806d8116243914f50a64429435cc63b", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51028532d790db476b102ebdda40bb9b1a7f8106/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51028532d790db476b102ebdda40bb9b1a7f8106/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=51028532d790db476b102ebdda40bb9b1a7f8106", "patch": "@@ -68,8 +68,10 @@ pub struct AtomicOption<T> {\n }\n \n pub enum Ordering {\n+    Relaxed,\n     Release,\n     Acquire,\n+    AcqRel,\n     SeqCst\n }\n \n@@ -318,6 +320,7 @@ pub unsafe fn atomic_store<T>(dst: &mut T, val: T, order:Ordering) {\n \n     match order {\n         Release => intrinsics::atomic_store_rel(dst, val),\n+        Relaxed => intrinsics::atomic_store_relaxed(dst, val),\n         _       => intrinsics::atomic_store(dst, val)\n     }\n }\n@@ -328,6 +331,7 @@ pub unsafe fn atomic_load<T>(dst: &T, order:Ordering) -> T {\n \n     cast::transmute(match order {\n         Acquire => intrinsics::atomic_load_acq(dst),\n+        Relaxed => intrinsics::atomic_load_relaxed(dst),\n         _       => intrinsics::atomic_load(dst)\n     })\n }\n@@ -340,6 +344,8 @@ pub unsafe fn atomic_swap<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     cast::transmute(match order {\n         Acquire => intrinsics::atomic_xchg_acq(dst, val),\n         Release => intrinsics::atomic_xchg_rel(dst, val),\n+        AcqRel  => intrinsics::atomic_xchg_acqrel(dst, val),\n+        Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),\n         _       => intrinsics::atomic_xchg(dst, val)\n     })\n }\n@@ -353,6 +359,8 @@ pub unsafe fn atomic_add<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     cast::transmute(match order {\n         Acquire => intrinsics::atomic_xadd_acq(dst, val),\n         Release => intrinsics::atomic_xadd_rel(dst, val),\n+        AcqRel  => intrinsics::atomic_xadd_acqrel(dst, val),\n+        Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),\n         _       => intrinsics::atomic_xadd(dst, val)\n     })\n }\n@@ -366,6 +374,8 @@ pub unsafe fn atomic_sub<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     cast::transmute(match order {\n         Acquire => intrinsics::atomic_xsub_acq(dst, val),\n         Release => intrinsics::atomic_xsub_rel(dst, val),\n+        AcqRel  => intrinsics::atomic_xsub_acqrel(dst, val),\n+        Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),\n         _       => intrinsics::atomic_xsub(dst, val)\n     })\n }\n@@ -379,6 +389,8 @@ pub unsafe fn atomic_compare_and_swap<T>(dst:&mut T, old:T, new:T, order: Orderi\n     cast::transmute(match order {\n         Acquire => intrinsics::atomic_cxchg_acq(dst, old, new),\n         Release => intrinsics::atomic_cxchg_rel(dst, old, new),\n+        AcqRel  => intrinsics::atomic_cxchg_acqrel(dst, old, new),\n+        Relaxed => intrinsics::atomic_cxchg_relaxed(dst, old, new),\n         _       => intrinsics::atomic_cxchg(dst, old, new),\n     })\n }"}]}