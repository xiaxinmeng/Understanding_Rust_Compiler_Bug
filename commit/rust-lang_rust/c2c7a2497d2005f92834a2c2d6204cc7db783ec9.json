{"sha": "c2c7a2497d2005f92834a2c2d6204cc7db783ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzdhMjQ5N2QyMDA1ZjkyODM0YTJjMmQ2MjA0Y2M3ZGI3ODNlYzk=", "commit": {"author": {"name": "Zach Kamsler", "email": "smoo.master@gmail.com", "date": "2013-11-13T01:14:22Z"}, "committer": {"name": "Zach Kamsler", "email": "smoo.master@gmail.com", "date": "2013-11-13T19:22:03Z"}, "message": "Implemented BufWriter\n\nFilled in the implementations of Writer and Seek for BufWriter. It\nraises the io_error condition if a write cannot fit in the buffer.\n\nThe Seek implementation for MemWriter, which was incorrectly using\nunsigned arithmatic to add signed offsets, has also been replaced.", "tree": {"sha": "a0931fea529fa9754bdcd75d10516d4eb60018bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0931fea529fa9754bdcd75d10516d4eb60018bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c7a2497d2005f92834a2c2d6204cc7db783ec9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c7a2497d2005f92834a2c2d6204cc7db783ec9", "html_url": "https://github.com/rust-lang/rust/commit/c2c7a2497d2005f92834a2c2d6204cc7db783ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c7a2497d2005f92834a2c2d6204cc7db783ec9/comments", "author": {"login": "zkamsler", "id": 944662, "node_id": "MDQ6VXNlcjk0NDY2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/944662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkamsler", "html_url": "https://github.com/zkamsler", "followers_url": "https://api.github.com/users/zkamsler/followers", "following_url": "https://api.github.com/users/zkamsler/following{/other_user}", "gists_url": "https://api.github.com/users/zkamsler/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkamsler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkamsler/subscriptions", "organizations_url": "https://api.github.com/users/zkamsler/orgs", "repos_url": "https://api.github.com/users/zkamsler/repos", "events_url": "https://api.github.com/users/zkamsler/events{/privacy}", "received_events_url": "https://api.github.com/users/zkamsler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zkamsler", "id": 944662, "node_id": "MDQ6VXNlcjk0NDY2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/944662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zkamsler", "html_url": "https://github.com/zkamsler", "followers_url": "https://api.github.com/users/zkamsler/followers", "following_url": "https://api.github.com/users/zkamsler/following{/other_user}", "gists_url": "https://api.github.com/users/zkamsler/gists{/gist_id}", "starred_url": "https://api.github.com/users/zkamsler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zkamsler/subscriptions", "organizations_url": "https://api.github.com/users/zkamsler/orgs", "repos_url": "https://api.github.com/users/zkamsler/repos", "events_url": "https://api.github.com/users/zkamsler/events{/privacy}", "received_events_url": "https://api.github.com/users/zkamsler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d6952e54a87c18838b70c0d8ea227857ac56903", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6952e54a87c18838b70c0d8ea227857ac56903", "html_url": "https://github.com/rust-lang/rust/commit/2d6952e54a87c18838b70c0d8ea227857ac56903"}], "stats": {"total": 109, "additions": 99, "deletions": 10}, "files": [{"sha": "73f38771ada7dcbb5ce2b7d278fb9b89dde59b70", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 99, "deletions": 10, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/c2c7a2497d2005f92834a2c2d6204cc7db783ec9/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c7a2497d2005f92834a2c2d6204cc7db783ec9/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=c2c7a2497d2005f92834a2c2d6204cc7db783ec9", "patch": "@@ -14,7 +14,7 @@\n //!\n //! * Should probably have something like this for strings.\n //! * Should they implement Closable? Would take extra state.\n-\n+use cmp::max;\n use cmp::min;\n use prelude::*;\n use super::*;\n@@ -64,15 +64,19 @@ impl Writer for MemWriter {\n     }\n }\n \n+// FIXME(#10432)\n impl Seek for MemWriter {\n     fn tell(&self) -> u64 { self.pos as u64 }\n \n     fn seek(&mut self, pos: i64, style: SeekStyle) {\n-        match style {\n-            SeekSet => { self.pos = pos as uint; }\n-            SeekEnd => { self.pos = self.buf.len() + pos as uint; }\n-            SeekCur => { self.pos += pos as uint; }\n-        }\n+        // compute offset as signed and clamp to prevent overflow\n+        let offset = match style {\n+            SeekSet => { 0 }\n+            SeekEnd => { self.buf.len() }\n+            SeekCur => { self.pos }\n+        } as i64;\n+\n+        self.pos = max(0, offset+pos) as uint;\n     }\n }\n \n@@ -146,6 +150,9 @@ impl Decorator<~[u8]> for MemReader {\n \n \n /// Writes to a fixed-size byte slice\n+///\n+/// If a write will not fit in the buffer, it raises the `io_error`\n+/// condition and does not write any data.\n pub struct BufWriter<'self> {\n     priv buf: &'self mut [u8],\n     priv pos: uint\n@@ -161,15 +168,38 @@ impl<'self> BufWriter<'self> {\n }\n \n impl<'self> Writer for BufWriter<'self> {\n-    fn write(&mut self, _buf: &[u8]) { fail!() }\n+    fn write(&mut self, buf: &[u8]) {\n+        // raises a condition if the entire write does not fit in the buffer\n+        let max_size = self.buf.len();\n+        if self.pos >= max_size || (self.pos + buf.len()) > max_size {\n+            io_error::cond.raise(IoError {\n+                kind: OtherIoError,\n+                desc: \"Trying to write past end of buffer\",\n+                detail: None\n+            });\n+            return;\n+        }\n \n-    fn flush(&mut self) { fail!() }\n+        vec::bytes::copy_memory(self.buf.mut_slice_from(self.pos),\n+                                buf, buf.len());\n+        self.pos += buf.len();\n+    }\n }\n \n+// FIXME(#10432)\n impl<'self> Seek for BufWriter<'self> {\n-    fn tell(&self) -> u64 { fail!() }\n+    fn tell(&self) -> u64 { self.pos as u64 }\n \n-    fn seek(&mut self, _pos: i64, _style: SeekStyle) { fail!() }\n+    fn seek(&mut self, pos: i64, style: SeekStyle) {\n+        // compute offset as signed and clamp to prevent overflow\n+        let offset = match style {\n+            SeekSet => { 0 }\n+            SeekEnd => { self.buf.len() }\n+            SeekCur => { self.pos }\n+        } as i64;\n+\n+        self.pos = max(0, offset+pos) as uint;\n+    }\n }\n \n \n@@ -257,6 +287,65 @@ mod test {\n         assert_eq!(*writer.inner_ref(), ~[3, 4, 2, 0, 1, 5, 6, 1, 2, 0, 1]);\n     }\n \n+    #[test]\n+    fn test_buf_writer() {\n+        let mut buf = [0 as u8, ..8];\n+        {\n+            let mut writer = BufWriter::new(buf);\n+            assert_eq!(writer.tell(), 0);\n+            writer.write([0]);\n+            assert_eq!(writer.tell(), 1);\n+            writer.write([1, 2, 3]);\n+            writer.write([4, 5, 6, 7]);\n+            assert_eq!(writer.tell(), 8);\n+        }\n+        assert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7]);\n+    }\n+\n+    #[test]\n+    fn test_buf_writer_seek() {\n+        let mut buf = [0 as u8, ..8];\n+        {\n+            let mut writer = BufWriter::new(buf);\n+            assert_eq!(writer.tell(), 0);\n+            writer.write([1]);\n+            assert_eq!(writer.tell(), 1);\n+\n+            writer.seek(2, SeekSet);\n+            assert_eq!(writer.tell(), 2);\n+            writer.write([2]);\n+            assert_eq!(writer.tell(), 3);\n+\n+            writer.seek(-2, SeekCur);\n+            assert_eq!(writer.tell(), 1);\n+            writer.write([3]);\n+            assert_eq!(writer.tell(), 2);\n+\n+            writer.seek(-1, SeekEnd);\n+            assert_eq!(writer.tell(), 7);\n+            writer.write([4]);\n+            assert_eq!(writer.tell(), 8);\n+\n+        }\n+        assert_eq!(buf, [1, 3, 2, 0, 0, 0, 0, 4]);\n+    }\n+\n+    #[test]\n+    fn test_buf_writer_error() {\n+        let mut buf = [0 as u8, ..2];\n+        let mut writer = BufWriter::new(buf);\n+        writer.write([0]);\n+\n+        let mut called = false;\n+        do io_error::cond.trap(|err| {\n+            assert_eq!(err.kind, OtherIoError);\n+            called = true;\n+        }).inside {\n+            writer.write([0, 0]);\n+        }\n+        assert!(called);\n+    }\n+\n     #[test]\n     fn test_mem_reader() {\n         let mut reader = MemReader::new(~[0, 1, 2, 3, 4, 5, 6, 7]);"}]}