{"sha": "97717a561844eccbb6d6cc114adb94a8fa4e0172", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NzE3YTU2MTg0NGVjY2JiNmQ2Y2MxMTRhZGI5NGE4ZmE0ZTAxNzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-03T13:23:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-03T13:23:42Z"}, "message": "Auto merge of #83682 - bjorn3:mmap_wrapper, r=cjgillot\n\nAdd an Mmap wrapper to rustc_data_structures\n\nThis wrapper implements StableAddress and falls back to directly reading the file on wasm32.\n\nTaken from #83640, which I will close due to the perf regression.", "tree": {"sha": "bf489813d3fe109dbea22fe8a19adb5a54950337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf489813d3fe109dbea22fe8a19adb5a54950337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97717a561844eccbb6d6cc114adb94a8fa4e0172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97717a561844eccbb6d6cc114adb94a8fa4e0172", "html_url": "https://github.com/rust-lang/rust/commit/97717a561844eccbb6d6cc114adb94a8fa4e0172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97717a561844eccbb6d6cc114adb94a8fa4e0172/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "640ce99bfe70375a24c6775a937d6a258b40398b", "url": "https://api.github.com/repos/rust-lang/rust/commits/640ce99bfe70375a24c6775a937d6a258b40398b", "html_url": "https://github.com/rust-lang/rust/commit/640ce99bfe70375a24c6775a937d6a258b40398b"}, {"sha": "bda6d1f158a71efe84d86da2011eac0c45a232c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bda6d1f158a71efe84d86da2011eac0c45a232c5", "html_url": "https://github.com/rust-lang/rust/commit/bda6d1f158a71efe84d86da2011eac0c45a232c5"}], "stats": {"total": 113, "additions": 63, "deletions": 50}, "files": [{"sha": "0bb395cdcb4529265b7f832569f328297f803922", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -3812,7 +3812,6 @@ dependencies = [\n  \"itertools 0.9.0\",\n  \"jobserver\",\n  \"libc\",\n- \"memmap2\",\n  \"pathdiff\",\n  \"rustc_apfloat\",\n  \"rustc_ast\",\n@@ -3847,6 +3846,7 @@ dependencies = [\n  \"jobserver\",\n  \"libc\",\n  \"measureme\",\n+ \"memmap2\",\n  \"parking_lot\",\n  \"rustc-hash\",\n  \"rustc-rayon\",\n@@ -4146,7 +4146,6 @@ name = \"rustc_metadata\"\n version = \"0.0.0\"\n dependencies = [\n  \"libc\",\n- \"memmap2\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_data_structures\","}, {"sha": "dc1cd336e1599e65c65a0becbfaee6a8b4dfb99d", "filename": "compiler/rustc_codegen_cranelift/Cargo.lock", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.lock?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -240,15 +240,6 @@ dependencies = [\n  \"libc\",\n ]\n \n-[[package]]\n-name = \"memmap2\"\n-version = \"0.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"04e3e85b970d650e2ae6d70592474087051c11c54da7f7b4949725c5735fbcc6\"\n-dependencies = [\n- \"libc\",\n-]\n-\n [[package]]\n name = \"object\"\n version = \"0.23.0\"\n@@ -319,7 +310,6 @@ dependencies = [\n  \"gimli\",\n  \"indexmap\",\n  \"libloading\",\n- \"memmap2\",\n  \"object\",\n  \"smallvec\",\n  \"target-lexicon\","}, {"sha": "60946ab28085854440b9db785bf5b59f23a94302", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -22,7 +22,6 @@ ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg\n indexmap = \"1.0.2\"\n libloading = { version = \"0.6.0\", optional = true }\n smallvec = \"1.6.1\"\n-memmap2 = \"0.2.1\"\n \n # Uncomment to use local checkout of cranelift\n #[patch.\"https://github.com/bytecodealliance/wasmtime/\"]"}, {"sha": "dbdc8cbad44c45aea7ad1c22e410aac69945f16d", "filename": "compiler/rustc_codegen_cranelift/src/metadata.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -1,11 +1,11 @@\n //! Reading and writing of the rustc metadata for rlibs and dylibs\n \n use std::fs::File;\n-use std::ops::Deref;\n use std::path::Path;\n \n use rustc_codegen_ssa::METADATA_FILENAME;\n-use rustc_data_structures::owning_ref::{OwningRef, StableAddress};\n+use rustc_data_structures::memmap::Mmap;\n+use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::rustc_erase_owner;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader};\n@@ -17,26 +17,13 @@ use crate::backend::WriteMetadata;\n \n pub(crate) struct CraneliftMetadataLoader;\n \n-struct StableMmap(memmap2::Mmap);\n-\n-impl Deref for StableMmap {\n-    type Target = [u8];\n-\n-    fn deref(&self) -> &[u8] {\n-        &*self.0\n-    }\n-}\n-\n-unsafe impl StableAddress for StableMmap {}\n-\n fn load_metadata_with(\n     path: &Path,\n     f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n ) -> Result<MetadataRef, String> {\n     let file = File::open(path).map_err(|e| format!(\"{:?}\", e))?;\n-    let data = unsafe { memmap2::MmapOptions::new().map_copy_read_only(&file) }\n-        .map_err(|e| format!(\"{:?}\", e))?;\n-    let metadata = OwningRef::new(StableMmap(data)).try_map(f)?;\n+    let data = unsafe { Mmap::map(file) }.map_err(|e| format!(\"{:?}\", e))?;\n+    let metadata = OwningRef::new(data).try_map(f)?;\n     return Ok(rustc_erase_owner!(metadata.map_owner_box()));\n }\n "}, {"sha": "7c1aaebb9abaf65da8105b4be2d71203a8914016", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -11,7 +11,6 @@ test = false\n bitflags = \"1.2.1\"\n cc = \"1.0.1\"\n itertools = \"0.9\"\n-memmap2 = \"0.2.1\"\n tracing = \"0.1\"\n libc = \"0.2.50\"\n jobserver = \"0.1.11\""}, {"sha": "0ff05229466ac92847e5b7574551428015b0da62", "filename": "compiler/rustc_codegen_ssa/src/back/lto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -2,6 +2,7 @@ use super::write::CodegenContext;\n use crate::traits::*;\n use crate::ModuleCodegen;\n \n+use rustc_data_structures::memmap::Mmap;\n use rustc_errors::FatalError;\n \n use std::ffi::CString;\n@@ -93,7 +94,7 @@ impl<B: WriteBackendMethods> LtoModuleCodegen<B> {\n pub enum SerializedModule<M: ModuleBufferMethods> {\n     Local(M),\n     FromRlib(Vec<u8>),\n-    FromUncompressedFile(memmap2::Mmap),\n+    FromUncompressedFile(Mmap),\n }\n \n impl<M: ModuleBufferMethods> SerializedModule<M> {"}, {"sha": "c45c90f24dee47312e3426f67d5f6b3bfc814a1c", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -10,6 +10,7 @@ use crate::{\n use crate::traits::*;\n use jobserver::{Acquired, Client};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::profiling::VerboseTimingGuard;\n@@ -1958,7 +1959,7 @@ pub fn submit_pre_lto_module_to_llvm<B: ExtraBackendMethods>(\n         .unwrap_or_else(|e| panic!(\"failed to open bitcode file `{}`: {}\", bc_path.display(), e));\n \n     let mmap = unsafe {\n-        memmap2::Mmap::map(&file).unwrap_or_else(|e| {\n+        Mmap::map(file).unwrap_or_else(|e| {\n             panic!(\"failed to mmap bitcode file `{}`: {}\", bc_path.display(), e)\n         })\n     };"}, {"sha": "d32598e716e1df0c3a05fdb636e9f231f024526d", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -36,3 +36,6 @@ features = [\"nightly\"]\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\"] }\n+\n+[target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\n+memmap2 = \"0.2.1\""}, {"sha": "adbb98fa750476f7a66b72fd5322af51898315e1", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -84,6 +84,7 @@ pub mod snapshot_map;\n pub mod stable_map;\n pub mod svh;\n pub use ena::snapshot_vec;\n+pub mod memmap;\n pub mod sorted_map;\n pub mod stable_set;\n #[macro_use]"}, {"sha": "26b26415eea0f85c0088385ed7da2096b0330a52", "filename": "compiler/rustc_data_structures/src/memmap.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fmemmap.rs?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -0,0 +1,47 @@\n+use std::fs::File;\n+use std::io;\n+use std::ops::Deref;\n+\n+use crate::owning_ref::StableAddress;\n+\n+/// A trivial wrapper for [`memmap2::Mmap`] that implements [`StableAddress`].\n+#[cfg(not(target_arch = \"wasm32\"))]\n+pub struct Mmap(memmap2::Mmap);\n+\n+#[cfg(target_arch = \"wasm32\")]\n+pub struct Mmap(Vec<u8>);\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+impl Mmap {\n+    #[inline]\n+    pub unsafe fn map(file: File) -> io::Result<Self> {\n+        memmap2::Mmap::map(&file).map(Mmap)\n+    }\n+}\n+\n+#[cfg(target_arch = \"wasm32\")]\n+impl Mmap {\n+    #[inline]\n+    pub unsafe fn map(mut file: File) -> io::Result<Self> {\n+        use std::io::Read;\n+\n+        let mut data = Vec::new();\n+        file.read_to_end(&mut data)?;\n+        Ok(Mmap(data))\n+    }\n+}\n+\n+impl Deref for Mmap {\n+    type Target = [u8];\n+\n+    #[inline]\n+    fn deref(&self) -> &[u8] {\n+        &*self.0\n+    }\n+}\n+\n+// SAFETY: On architectures other than WASM, mmap is used as backing storage. The address of this\n+// memory map is stable. On WASM, `Vec<u8>` is used as backing storage. The `Mmap` type doesn't\n+// export any function that can cause the `Vec` to be re-allocated. As such the address of the\n+// bytes inside this `Vec` is stable.\n+unsafe impl StableAddress for Mmap {}"}, {"sha": "29fa0b7006992acf4d7b6295075ced47a07575fb", "filename": "compiler/rustc_metadata/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2FCargo.toml?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -11,7 +11,6 @@ doctest = false\n libc = \"0.2\"\n snap = \"1\"\n tracing = \"0.1\"\n-memmap2 = \"0.2.1\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_attr = { path = \"../rustc_attr\" }"}, {"sha": "7f6311861c1b28177421870b8be7ef36774d8d53", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97717a561844eccbb6d6cc114adb94a8fa4e0172/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=97717a561844eccbb6d6cc114adb94a8fa4e0172", "patch": "@@ -216,6 +216,7 @@ use crate::creader::Library;\n use crate::rmeta::{rustc_version, MetadataBlob, METADATA_HEADER};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n@@ -232,7 +233,6 @@ use rustc_target::spec::{Target, TargetTriple};\n \n use snap::read::FrameDecoder;\n use std::io::{Read, Result as IoResult, Write};\n-use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::{cmp, fmt, fs};\n use tracing::{debug, info, warn};\n@@ -727,19 +727,6 @@ impl<'a> CrateLocator<'a> {\n     }\n }\n \n-/// A trivial wrapper for `Mmap` that implements `StableDeref`.\n-struct StableDerefMmap(memmap2::Mmap);\n-\n-impl Deref for StableDerefMmap {\n-    type Target = [u8];\n-\n-    fn deref(&self) -> &[u8] {\n-        self.0.deref()\n-    }\n-}\n-\n-unsafe impl stable_deref_trait::StableDeref for StableDerefMmap {}\n-\n fn get_metadata_section(\n     target: &Target,\n     flavor: CrateFlavor,\n@@ -779,11 +766,11 @@ fn get_metadata_section(\n             // mmap the file, because only a small fraction of it is read.\n             let file = std::fs::File::open(filename)\n                 .map_err(|_| format!(\"failed to open rmeta metadata: '{}'\", filename.display()))?;\n-            let mmap = unsafe { memmap2::Mmap::map(&file) };\n+            let mmap = unsafe { Mmap::map(file) };\n             let mmap = mmap\n                 .map_err(|_| format!(\"failed to mmap rmeta metadata: '{}'\", filename.display()))?;\n \n-            rustc_erase_owner!(OwningRef::new(StableDerefMmap(mmap)).map_owner_box())\n+            rustc_erase_owner!(OwningRef::new(mmap).map_owner_box())\n         }\n     };\n     let blob = MetadataBlob::new(raw_bytes);"}]}