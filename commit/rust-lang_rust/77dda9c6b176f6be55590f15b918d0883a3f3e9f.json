{"sha": "77dda9c6b176f6be55590f15b918d0883a3f3e9f", "node_id": "C_kwDOAAsO6NoAKDc3ZGRhOWM2YjE3NmY2YmU1NTU5MGYxNWI5MThkMDg4M2EzZjNlOWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-12T00:17:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-12T00:17:37Z"}, "message": "Auto merge of #7791 - JamesHinshelwood:reason-in-disallowed-type, r=giraffate\n\nAllow giving reasons for `disallowed_types`\n\nSimilar to #7609 but for the `disallowed_type` lint. The permitted form of configuration is the same as for `disallowed_methods`.\n\nchangelog: Allow giving reasons for [`disallowed_type`]", "tree": {"sha": "f3e46e08f4ef43951f4b429e7563149fa6a9e250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3e46e08f4ef43951f4b429e7563149fa6a9e250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77dda9c6b176f6be55590f15b918d0883a3f3e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77dda9c6b176f6be55590f15b918d0883a3f3e9f", "html_url": "https://github.com/rust-lang/rust/commit/77dda9c6b176f6be55590f15b918d0883a3f3e9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77dda9c6b176f6be55590f15b918d0883a3f3e9f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72723663a385fadba0614a2e79be4955e2fffbb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/72723663a385fadba0614a2e79be4955e2fffbb5", "html_url": "https://github.com/rust-lang/rust/commit/72723663a385fadba0614a2e79be4955e2fffbb5"}, {"sha": "886cbb18821bdd9a5548dedbe6caa0ccb2dafb3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/886cbb18821bdd9a5548dedbe6caa0ccb2dafb3f", "html_url": "https://github.com/rust-lang/rust/commit/886cbb18821bdd9a5548dedbe6caa0ccb2dafb3f"}], "stats": {"total": 127, "additions": 88, "deletions": 39}, "files": [{"sha": "48f781516f4228c2aecdb5f738d76c47942772ff", "filename": "clippy_lints/src/disallowed_type.rs", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/77dda9c6b176f6be55590f15b918d0883a3f3e9f/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dda9c6b176f6be55590f15b918d0883a3f3e9f/clippy_lints%2Fsrc%2Fdisallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_type.rs?ref=77dda9c6b176f6be55590f15b918d0883a3f3e9f", "patch": "@@ -1,12 +1,14 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::span_lint_and_then;\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{\n     def::Res, def_id::DefId, Item, ItemKind, PolyTraitRef, PrimTy, TraitBoundModifier, Ty, TyKind, UseKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n+\n+use crate::utils::conf;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -19,7 +21,15 @@ declare_clippy_lint! {\n     /// An example clippy.toml configuration:\n     /// ```toml\n     /// # clippy.toml\n-    /// disallowed-types = [\"std::collections::BTreeMap\"]\n+    /// disallowed-types = [\n+    ///     # Can use a string as the path of the disallowed type.\n+    ///     \"std::collections::BTreeMap\",\n+    ///     # Can also use an inline table with a `path` key.\n+    ///     { path = \"std::net::TcpListener\" },\n+    ///     # When using an inline table, can add a `reason` for why the type\n+    ///     # is disallowed.\n+    ///     { path = \"std::net::Ipv4Addr\", reason = \"no IPv4 allowed\" },\n+    /// ]\n     /// ```\n     ///\n     /// ```rust,ignore\n@@ -38,33 +48,30 @@ declare_clippy_lint! {\n }\n #[derive(Clone, Debug)]\n pub struct DisallowedType {\n-    disallowed: FxHashSet<Vec<Symbol>>,\n-    def_ids: FxHashSet<DefId>,\n-    prim_tys: FxHashSet<PrimTy>,\n+    conf_disallowed: Vec<conf::DisallowedType>,\n+    def_ids: FxHashMap<DefId, Option<String>>,\n+    prim_tys: FxHashMap<PrimTy, Option<String>>,\n }\n \n impl DisallowedType {\n-    pub fn new(disallowed: &FxHashSet<String>) -> Self {\n+    pub fn new(conf_disallowed: Vec<conf::DisallowedType>) -> Self {\n         Self {\n-            disallowed: disallowed\n-                .iter()\n-                .map(|s| s.split(\"::\").map(Symbol::intern).collect::<Vec<_>>())\n-                .collect(),\n-            def_ids: FxHashSet::default(),\n-            prim_tys: FxHashSet::default(),\n+            conf_disallowed,\n+            def_ids: FxHashMap::default(),\n+            prim_tys: FxHashMap::default(),\n         }\n     }\n \n     fn check_res_emit(&self, cx: &LateContext<'_>, res: &Res, span: Span) {\n         match res {\n             Res::Def(_, did) => {\n-                if self.def_ids.contains(did) {\n-                    emit(cx, &cx.tcx.def_path_str(*did), span);\n+                if let Some(reason) = self.def_ids.get(did) {\n+                    emit(cx, &cx.tcx.def_path_str(*did), span, reason.as_deref());\n                 }\n             },\n             Res::PrimTy(prim) => {\n-                if self.prim_tys.contains(prim) {\n-                    emit(cx, prim.name_str(), span);\n+                if let Some(reason) = self.prim_tys.get(prim) {\n+                    emit(cx, prim.name_str(), span, reason.as_deref());\n                 }\n             },\n             _ => {},\n@@ -76,14 +83,21 @@ impl_lint_pass!(DisallowedType => [DISALLOWED_TYPE]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedType {\n     fn check_crate(&mut self, cx: &LateContext<'_>) {\n-        for path in &self.disallowed {\n-            let segs = path.iter().map(ToString::to_string).collect::<Vec<_>>();\n-            match clippy_utils::path_to_res(cx, &segs.iter().map(String::as_str).collect::<Vec<_>>()) {\n+        for conf in &self.conf_disallowed {\n+            let (path, reason) = match conf {\n+                conf::DisallowedType::Simple(path) => (path, None),\n+                conf::DisallowedType::WithReason { path, reason } => (\n+                    path,\n+                    reason.as_ref().map(|reason| format!(\"{} (from clippy.toml)\", reason)),\n+                ),\n+            };\n+            let segs: Vec<_> = path.split(\"::\").collect();\n+            match clippy_utils::path_to_res(cx, &segs) {\n                 Res::Def(_, id) => {\n-                    self.def_ids.insert(id);\n+                    self.def_ids.insert(id, reason);\n                 },\n                 Res::PrimTy(ty) => {\n-                    self.prim_tys.insert(ty);\n+                    self.prim_tys.insert(ty, reason);\n                 },\n                 _ => {},\n             }\n@@ -107,11 +121,16 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedType {\n     }\n }\n \n-fn emit(cx: &LateContext<'_>, name: &str, span: Span) {\n-    span_lint(\n+fn emit(cx: &LateContext<'_>, name: &str, span: Span, reason: Option<&str>) {\n+    span_lint_and_then(\n         cx,\n         DISALLOWED_TYPE,\n         span,\n         &format!(\"`{}` is not allowed according to config\", name),\n+        |diag| {\n+            if let Some(reason) = reason {\n+                diag.note(reason);\n+            }\n+        },\n     );\n }"}, {"sha": "8af76cbed6e44f6726bed3a51ef0d2cca88478d1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77dda9c6b176f6be55590f15b918d0883a3f3e9f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dda9c6b176f6be55590f15b918d0883a3f3e9f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=77dda9c6b176f6be55590f15b918d0883a3f3e9f", "patch": "@@ -757,8 +757,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(bool_assert_comparison::BoolAssertComparison));\n     store.register_early_pass(move || Box::new(module_style::ModStyle));\n     store.register_late_pass(|| Box::new(unused_async::UnusedAsync));\n-    let disallowed_types = conf.disallowed_types.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || Box::new(disallowed_type::DisallowedType::new(&disallowed_types)));\n+    let disallowed_types = conf.disallowed_types.clone();\n+    store.register_late_pass(move || Box::new(disallowed_type::DisallowedType::new(disallowed_types.clone())));\n     let import_renames = conf.enforced_import_renames.clone();\n     store.register_late_pass(move || Box::new(missing_enforced_import_rename::ImportRename::new(import_renames.clone())));\n     let scripts = conf.allowed_scripts.clone();"}, {"sha": "d05c52122d5ee518ab1d00f0349851909026151b", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77dda9c6b176f6be55590f15b918d0883a3f3e9f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dda9c6b176f6be55590f15b918d0883a3f3e9f/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=77dda9c6b176f6be55590f15b918d0883a3f3e9f", "patch": "@@ -23,6 +23,14 @@ pub enum DisallowedMethod {\n     WithReason { path: String, reason: Option<String> },\n }\n \n+/// A single disallowed type, used by the `DISALLOWED_TYPE` lint.\n+#[derive(Clone, Debug, Deserialize)]\n+#[serde(untagged)]\n+pub enum DisallowedType {\n+    Simple(String),\n+    WithReason { path: String, reason: Option<String> },\n+}\n+\n /// Conf with parse errors\n #[derive(Default)]\n pub struct TryConf {\n@@ -255,7 +263,7 @@ define_Conf! {\n     /// Lint: DISALLOWED_TYPE.\n     ///\n     /// The list of disallowed types, written as fully qualified paths.\n-    (disallowed_types: Vec<String> = Vec::new()),\n+    (disallowed_types: Vec<crate::utils::conf::DisallowedType> = Vec::new()),\n     /// Lint: UNREADABLE_LITERAL.\n     ///\n     /// Should the fraction of a decimal be linted to include separators."}, {"sha": "6cb9e2ef95467be59c0ba74c9dc8d25de2411c09", "filename": "tests/ui-toml/toml_disallowed_type/clippy.toml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77dda9c6b176f6be55590f15b918d0883a3f3e9f/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/77dda9c6b176f6be55590f15b918d0883a3f3e9f/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fclippy.toml?ref=77dda9c6b176f6be55590f15b918d0883a3f3e9f", "patch": "@@ -7,5 +7,9 @@ disallowed-types = [\n     \"std::time::Instant\",\n     \"std::io::Read\",\n     \"std::primitive::usize\",\n-    \"bool\"\n+    \"bool\",\n+    # can give path and reason with an inline table\n+    { path = \"std::net::Ipv4Addr\", reason = \"no IPv4 allowed\" },\n+    # can use an inline table but omit reason\n+    { path = \"std::net::TcpListener\" },\n ]"}, {"sha": "410f076505511c6d84c4eae6224ae4625517d516", "filename": "tests/ui-toml/toml_disallowed_type/conf_disallowed_type.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77dda9c6b176f6be55590f15b918d0883a3f3e9f/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77dda9c6b176f6be55590f15b918d0883a3f3e9f/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.rs?ref=77dda9c6b176f6be55590f15b918d0883a3f3e9f", "patch": "@@ -25,6 +25,10 @@ struct GenArg<const U: usize>([u8; U]);\n \n static BAD: foo::atomic::AtomicPtr<()> = foo::atomic::AtomicPtr::new(std::ptr::null_mut());\n \n+fn ip(_: std::net::Ipv4Addr) {}\n+\n+fn listener(_: std::net::TcpListener) {}\n+\n #[allow(clippy::diverging_sub_expression)]\n fn main() {\n     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();"}, {"sha": "08a400a83675b916a59ca597472bdd6a7c6cb524", "filename": "tests/ui-toml/toml_disallowed_type/conf_disallowed_type.stderr", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/77dda9c6b176f6be55590f15b918d0883a3f3e9f/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77dda9c6b176f6be55590f15b918d0883a3f3e9f/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_type%2Fconf_disallowed_type.stderr?ref=77dda9c6b176f6be55590f15b918d0883a3f3e9f", "patch": "@@ -60,59 +60,73 @@ error: `usize` is not allowed according to config\n LL | struct GenArg<const U: usize>([u8; U]);\n    |                        ^^^^^\n \n+error: `std::net::Ipv4Addr` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:28:10\n+   |\n+LL | fn ip(_: std::net::Ipv4Addr) {}\n+   |          ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: no IPv4 allowed (from clippy.toml)\n+\n+error: `std::net::TcpListener` is not allowed according to config\n+  --> $DIR/conf_disallowed_type.rs:30:16\n+   |\n+LL | fn listener(_: std::net::TcpListener) {}\n+   |                ^^^^^^^^^^^^^^^^^^^^^\n+\n error: `std::collections::HashMap` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:30:48\n+  --> $DIR/conf_disallowed_type.rs:34:48\n    |\n LL |     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::collections::HashMap` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:30:12\n+  --> $DIR/conf_disallowed_type.rs:34:12\n    |\n LL |     let _: std::collections::HashMap<(), ()> = std::collections::HashMap::new();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::time::Instant` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:31:13\n+  --> $DIR/conf_disallowed_type.rs:35:13\n    |\n LL |     let _ = Sneaky::now();\n    |             ^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:32:13\n+  --> $DIR/conf_disallowed_type.rs:36:13\n    |\n LL |     let _ = foo::atomic::AtomicU32::new(0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:33:17\n+  --> $DIR/conf_disallowed_type.rs:37:17\n    |\n LL |     static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `std::sync::atomic::AtomicU32` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:33:48\n+  --> $DIR/conf_disallowed_type.rs:37:48\n    |\n LL |     static FOO: std::sync::atomic::AtomicU32 = foo::atomic::AtomicU32::new(1);\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `syn::TypePath` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:34:43\n+  --> $DIR/conf_disallowed_type.rs:38:43\n    |\n LL |     let _: std::collections::BTreeMap<(), syn::TypePath> = Default::default();\n    |                                           ^^^^^^^^^^^^^\n \n error: `syn::Ident` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:35:13\n+  --> $DIR/conf_disallowed_type.rs:39:13\n    |\n LL |     let _ = syn::Ident::new(\"\", todo!());\n    |             ^^^^^^^^^^\n \n error: `usize` is not allowed according to config\n-  --> $DIR/conf_disallowed_type.rs:37:12\n+  --> $DIR/conf_disallowed_type.rs:41:12\n    |\n LL |     let _: usize = 64_usize;\n    |            ^^^^^\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 21 previous errors\n "}]}