{"sha": "7129883b51206f2b85a582641b40b0eddb236cb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMjk4ODNiNTEyMDZmMmI4NWE1ODI2NDFiNDBiMGVkZGIyMzZjYjI=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-01T21:34:35Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-02T18:58:16Z"}, "message": "Allow interpolations of all the nt_*s.", "tree": {"sha": "4317cb20afb2bce75b9e22ba2e69bbb92fa22025", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4317cb20afb2bce75b9e22ba2e69bbb92fa22025"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7129883b51206f2b85a582641b40b0eddb236cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7129883b51206f2b85a582641b40b0eddb236cb2", "html_url": "https://github.com/rust-lang/rust/commit/7129883b51206f2b85a582641b40b0eddb236cb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7129883b51206f2b85a582641b40b0eddb236cb2/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0646890f631daeacf65286aea9568cd30b83205d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0646890f631daeacf65286aea9568cd30b83205d", "html_url": "https://github.com/rust-lang/rust/commit/0646890f631daeacf65286aea9568cd30b83205d"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "28bf79be0d52fa84351be0047954715df84cbc36", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7129883b51206f2b85a582641b40b0eddb236cb2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7129883b51206f2b85a582641b40b0eddb236cb2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=7129883b51206f2b85a582641b40b0eddb236cb2", "patch": "@@ -24,7 +24,10 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n             ms(match_nonterminal(@~\"lhs\",@~\"matchers\", 0u)),\n             ms(match_tok(FAT_ARROW)),\n             ms(match_nonterminal(@~\"rhs\",@~\"tt\", 1u)),\n-        ], some(SEMI), false, 0u, 2u))];\n+        ], some(SEMI), false, 0u, 2u)),\n+        //to phase into semicolon-termination instead of\n+        //semicolon-separation\n+        ms(match_seq(~[ms(match_tok(SEMI))], none, true, 2u, 2u))];\n \n \n     // Parse the macro_rules! invocation (`none` is for no interpolations):"}, {"sha": "35d7e16630625e5ea1dfea4829f76fed26932eb1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7129883b51206f2b85a582641b40b0eddb236cb2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7129883b51206f2b85a582641b40b0eddb236cb2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7129883b51206f2b85a582641b40b0eddb236cb2", "patch": "@@ -120,22 +120,28 @@ macro_rules! maybe_whole_expr {\n }\n \n macro_rules! maybe_whole {\n-    {$p:expr, $constructor:path} => { alt copy $p.token {\n-      INTERPOLATED($constructor(x)) { $p.bump(); return x; }\n+    {$p:expr, $constructor:ident} => { alt copy $p.token {\n+      INTERPOLATED(token::$constructor(x)) { $p.bump(); return x; }\n+      _ {}\n+    }} ;\n+    {deref $p:expr, $constructor:ident} => { alt copy $p.token {\n+      INTERPOLATED(token::$constructor(x)) { $p.bump(); return *x; }\n+      _ {}\n+    }} ;\n+    {some $p:expr, $constructor:ident} => { alt copy $p.token {\n+      INTERPOLATED(token::$constructor(x)) { $p.bump(); return some(x); }\n+      _ {}\n+    }} ;\n+    {pair_empty $p:expr, $constructor:ident} => { alt copy $p.token {\n+      INTERPOLATED(token::$constructor(x)) { $p.bump(); return (~[], x); }\n       _ {}\n     }}\n+\n }\n \n-/* ident is handled by common.rs */\n \n-fn dummy() {\n-    /* we will need this to bootstrap maybe_whole! */\n-    #macro[[#maybe_whole_path[p],\n-            alt p.token {\n-                INTERPOLATED(token::nt_path(pt)) { p.bump(); return pt; }\n-                _ {} }]];\n-}\n \n+/* ident is handled by common.rs */\n \n class parser {\n     let sess: parse_sess;\n@@ -389,6 +395,8 @@ class parser {\n     }\n \n     fn parse_ty(colons_before_params: bool) -> @ty {\n+        maybe_whole!{self, nt_ty};\n+\n         let lo = self.span.lo;\n \n         alt self.maybe_parse_dollar_mac() {\n@@ -610,6 +618,7 @@ class parser {\n         parse_ident: fn(parser) -> ident,\n         parse_last_ident: fn(parser) -> ident) -> @path {\n \n+        maybe_whole!{self, nt_path};\n         let lo = self.span.lo;\n         let global = self.eat(token::MOD_SEP);\n         let mut ids = ~[];\n@@ -638,6 +647,7 @@ class parser {\n     fn parse_path_with_tps(colons: bool) -> @path {\n         debug!{\"parse_path_with_tps(colons=%b)\", colons};\n \n+        maybe_whole!{self, nt_path};\n         let lo = self.span.lo;\n         let path = self.parse_path_without_tps();\n         if colons && !self.eat(token::MOD_SEP) {\n@@ -1067,6 +1077,8 @@ class parser {\n     }\n \n     fn parse_token_tree() -> token_tree {\n+        maybe_whole!{deref self, nt_tt};\n+\n         fn parse_tt_tok(p: parser, delim_ok: bool) -> token_tree {\n             alt p.token {\n               token::RPAREN | token::RBRACE | token::RBRACKET\n@@ -1115,6 +1127,9 @@ class parser {\n     }\n \n     fn parse_matchers() -> ~[matcher] {\n+        // unification of matchers and token_trees would vastly improve\n+        // the interpolation of matchers\n+        maybe_whole!{self, nt_matchers};\n         let name_idx = @mut 0u;\n         return self.parse_matcher_subseq(\n             name_idx, token::LBRACE, token::RBRACE);\n@@ -1601,6 +1616,8 @@ class parser {\n     }\n \n     fn parse_pat(refutable: bool) -> @pat {\n+        maybe_whole!{self, nt_pat};\n+\n         let lo = self.span.lo;\n         let mut hi = self.span.hi;\n         let mut pat;\n@@ -1830,6 +1847,8 @@ class parser {\n     }\n \n     fn parse_stmt(+first_item_attrs: ~[attribute]) -> @stmt {\n+        maybe_whole!{self, nt_stmt};\n+\n         fn check_expected_item(p: parser, current_attrs: ~[attribute]) {\n             // If we have attributes then we should have an item\n             if vec::is_not_empty(current_attrs) {\n@@ -1890,6 +1909,8 @@ class parser {\n     fn parse_inner_attrs_and_block(parse_attrs: bool)\n         -> (~[attribute], blk) {\n \n+        maybe_whole!{pair_empty self, nt_block};\n+\n         fn maybe_parse_inner_attrs_and_next(p: parser, parse_attrs: bool) ->\n             {inner: ~[attribute], next: ~[attribute]} {\n             if parse_attrs {\n@@ -2735,6 +2756,8 @@ class parser {\n \n     fn parse_item(+attrs: ~[attribute], vis: visibility)\n         -> option<@item> {\n+\n+        maybe_whole!{some self,nt_item};\n         let lo = self.span.lo;\n         let (ident, item_, extra_attrs) = if self.eat_keyword(~\"const\") {\n             self.parse_item_const()"}, {"sha": "0f692533eb94d6380a623e88acb55f8492e50afb", "filename": "src/test/run-pass/macro-interpolation.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7129883b51206f2b85a582641b40b0eddb236cb2/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7129883b51206f2b85a582641b40b0eddb236cb2/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs?ref=7129883b51206f2b85a582641b40b0eddb236cb2", "patch": "@@ -0,0 +1,19 @@\n+\n+macro_rules! overly_complicated {\n+    {$fnname:ident, $arg:ident, $ty:ty, $body:block, $val:expr, $pat:pat, $res:path} =>\n+    {\n+        fn $fnname($arg: $ty) -> option<$ty> $body\n+        alt $fnname($val) {\n+          some($pat) {\n+            $res\n+          }\n+          _ { fail; }\n+        }\n+    }\n+\n+}\n+fn main() {\n+    assert overly_complicated!(f, x, option<uint>, { return some(x); },\n+                               some(8u), some(y), y) == 8u\n+\n+}\n\\ No newline at end of file"}]}