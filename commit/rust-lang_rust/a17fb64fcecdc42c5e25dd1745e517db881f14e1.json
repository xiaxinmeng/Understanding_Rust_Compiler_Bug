{"sha": "a17fb64fcecdc42c5e25dd1745e517db881f14e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExN2ZiNjRmY2VjZGM0MmM1ZTI1ZGQxNzQ1ZTUxN2RiODgxZjE0ZTE=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2016-01-29T10:11:24Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2016-02-10T22:09:47Z"}, "message": "Workaround LLVM optimizer bug by not marking &mut pointers as noalias\n\nLLVM's memory dependence analysis doesn't properly account for calls\nthat could unwind and thus effectively act as a branching point. This\ncan lead to stores that are only visible when the call unwinds being\nremoved, possibly leading to calls to drop() functions with b0rked\nmemory contents.\n\nAs there is no fix for this in LLVM yet and we want to keep\ncompatibility to current LLVM versions anyways, we have to workaround\nthis bug by omitting the noalias attribute on &mut function arguments.\nBenchmarks suggest that the performance loss by this change is very\nsmall.\n\nThanks to @RalfJung for pushing me towards not removing too many\nnoalias annotations and @alexcrichton for helping out with the test for\nthis bug.\n\nFixes #29485", "tree": {"sha": "1e79a2d5b7f327f71233d4f8703ef9a9a7532ae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e79a2d5b7f327f71233d4f8703ef9a9a7532ae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17fb64fcecdc42c5e25dd1745e517db881f14e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17fb64fcecdc42c5e25dd1745e517db881f14e1", "html_url": "https://github.com/rust-lang/rust/commit/a17fb64fcecdc42c5e25dd1745e517db881f14e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17fb64fcecdc42c5e25dd1745e517db881f14e1/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "052b3fd4a0c484638a8e8b30f9b628abfaeffde4", "url": "https://api.github.com/repos/rust-lang/rust/commits/052b3fd4a0c484638a8e8b30f9b628abfaeffde4", "html_url": "https://github.com/rust-lang/rust/commit/052b3fd4a0c484638a8e8b30f9b628abfaeffde4"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "95c3941354f22b2eab3bfb8af2d4ecaf85166218", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a17fb64fcecdc42c5e25dd1745e517db881f14e1/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17fb64fcecdc42c5e25dd1745e517db881f14e1/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=a17fb64fcecdc42c5e25dd1745e517db881f14e1", "patch": "@@ -265,7 +265,7 @@ pub fn from_fn_type<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_type: ty::Ty<'tcx\n                 // on memory dependencies rather than pointer equality\n                 let interior_unsafe = mt.ty.type_contents(ccx.tcx()).interior_unsafe();\n \n-                if mt.mutbl == hir::MutMutable || !interior_unsafe {\n+                if mt.mutbl != hir::MutMutable && !interior_unsafe {\n                     attrs.arg(idx, llvm::Attribute::NoAlias);\n                 }\n "}, {"sha": "825c449702154b9307ba718f2b56e6032456e7a4", "filename": "src/test/auxiliary/issue-29485.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a17fb64fcecdc42c5e25dd1745e517db881f14e1/src%2Ftest%2Fauxiliary%2Fissue-29485.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17fb64fcecdc42c5e25dd1745e517db881f14e1/src%2Ftest%2Fauxiliary%2Fissue-29485.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-29485.rs?ref=a17fb64fcecdc42c5e25dd1745e517db881f14e1", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"a\"]\n+#![crate_type = \"lib\"]\n+\n+pub struct X(pub u8);\n+\n+impl Drop for X {\n+    fn drop(&mut self) {\n+        assert_eq!(self.0, 1)\n+    }\n+}\n+\n+pub fn f(x: &mut X, g: fn()) {\n+    x.0 = 1;\n+    g();\n+    x.0 = 0;\n+}"}, {"sha": "c373cdb76c5c73a9d6620dc999c743479b9fb2e8", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a17fb64fcecdc42c5e25dd1745e517db881f14e1/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17fb64fcecdc42c5e25dd1745e517db881f14e1/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=a17fb64fcecdc42c5e25dd1745e517db881f14e1", "patch": "@@ -51,14 +51,16 @@ pub fn named_borrow<'r>(_: &'r i32) {\n pub fn unsafe_borrow(_: &UnsafeInner) {\n }\n \n-// CHECK: @mutable_unsafe_borrow(%UnsafeInner* noalias dereferenceable(2))\n+// CHECK: @mutable_unsafe_borrow(%UnsafeInner* dereferenceable(2))\n // ... unless this is a mutable borrow, those never alias\n+// ... except that there's this LLVM bug that forces us to not use noalias, see #29485\n #[no_mangle]\n pub fn mutable_unsafe_borrow(_: &mut UnsafeInner) {\n }\n \n-// CHECK: @mutable_borrow(i32* noalias dereferenceable(4))\n+// CHECK: @mutable_borrow(i32* dereferenceable(4))\n // FIXME #25759 This should also have `nocapture`\n+// ... there's this LLVM bug that forces us to not use noalias, see #29485\n #[no_mangle]\n pub fn mutable_borrow(_: &mut i32) {\n }\n@@ -100,8 +102,9 @@ fn helper(_: usize) {\n fn slice(_: &[u8]) {\n }\n \n-// CHECK: @mutable_slice(i8* noalias nonnull, [[USIZE]])\n+// CHECK: @mutable_slice(i8* nonnull, [[USIZE]])\n // FIXME #25759 This should also have `nocapture`\n+// ... there's this LLVM bug that forces us to not use noalias, see #29485\n #[no_mangle]\n fn mutable_slice(_: &mut [u8]) {\n }"}, {"sha": "9e8f58694377a296303cb42551cb660313932730", "filename": "src/test/run-pass/issue-29485.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a17fb64fcecdc42c5e25dd1745e517db881f14e1/src%2Ftest%2Frun-pass%2Fissue-29485.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17fb64fcecdc42c5e25dd1745e517db881f14e1/src%2Ftest%2Frun-pass%2Fissue-29485.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29485.rs?ref=a17fb64fcecdc42c5e25dd1745e517db881f14e1", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-29485.rs\n+\n+#[feature(recover)]\n+\n+extern crate a;\n+\n+fn main() {\n+    let _ = std::thread::spawn(move || {\n+        a::f(&mut a::X(0), g);\n+    }).join();\n+}\n+\n+fn g() {\n+    panic!();\n+}"}]}