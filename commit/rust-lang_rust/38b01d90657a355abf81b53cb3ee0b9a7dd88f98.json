{"sha": "38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "node_id": "C_kwDOAAsO6NoAKDM4YjAxZDkwNjU3YTM1NWFiZjgxYjUzY2IzZWUwYjlhN2RkODhmOTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-31T05:52:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-31T05:52:42Z"}, "message": "Auto merge of #90391 - camelid:crate-size, r=jyn514\n\nrustdoc: Compute some fields of `clean::Crate` on-demand to reduce size\n\n`clean::Crate` is frequently moved by-value -- for example, in `DocFolder`\nimplementations -- so reducing its size should improve performance.\n\nThis PR reduces the size of `clean::Crate` from 168 bytes to 104 bytes.\n\nr? `@jyn514`", "tree": {"sha": "0f5bae79fae0bae867feae7a0197347aa39e9cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f5bae79fae0bae867feae7a0197347aa39e9cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "html_url": "https://github.com/rust-lang/rust/commit/38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a09858b05bb0d92e87077c76fcb0648d32d44db", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a09858b05bb0d92e87077c76fcb0648d32d44db", "html_url": "https://github.com/rust-lang/rust/commit/0a09858b05bb0d92e87077c76fcb0648d32d44db"}, {"sha": "a58e21489424de9ce1fb48c2d4a7113dcd62f095", "url": "https://api.github.com/repos/rust-lang/rust/commits/a58e21489424de9ce1fb48c2d4a7113dcd62f095", "html_url": "https://github.com/rust-lang/rust/commit/a58e21489424de9ce1fb48c2d4a7113dcd62f095"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "88fffaecb937baadca06e723664f2f48388c923a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "patch": "@@ -113,10 +113,9 @@ impl From<DefId> for ItemId {\n     }\n }\n \n+/// The crate currently being documented.\n #[derive(Clone, Debug)]\n crate struct Crate {\n-    crate name: Symbol,\n-    crate src: FileName,\n     crate module: Item,\n     crate externs: Vec<ExternalCrate>,\n     crate primitives: ThinVec<(DefId, PrimitiveType)>,\n@@ -125,6 +124,20 @@ crate struct Crate {\n     crate collapsed: bool,\n }\n \n+// `Crate` is frequently moved by-value. Make sure it doesn't unintentionally get bigger.\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+rustc_data_structures::static_assert_size!(Crate, 104);\n+\n+impl Crate {\n+    crate fn name(&self, tcx: TyCtxt<'_>) -> Symbol {\n+        ExternalCrate::LOCAL.name(tcx)\n+    }\n+\n+    crate fn src(&self, tcx: TyCtxt<'_>) -> FileName {\n+        ExternalCrate::LOCAL.src(tcx)\n+    }\n+}\n+\n /// This struct is used to wrap additional information added by rustdoc on a `trait` item.\n #[derive(Clone, Debug)]\n crate struct TraitWithExtraInfo {\n@@ -138,6 +151,8 @@ crate struct ExternalCrate {\n }\n \n impl ExternalCrate {\n+    const LOCAL: Self = Self { crate_num: LOCAL_CRATE };\n+\n     #[inline]\n     crate fn def_id(&self) -> DefId {\n         DefId { krate: self.crate_num, index: CRATE_DEF_INDEX }"}, {"sha": "2fae3163a1a1a4f19509091f6520929e04bf98f0", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "patch": "@@ -29,12 +29,11 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     let module = crate::visit_ast::RustdocVisitor::new(cx).visit();\n \n     let mut externs = Vec::new();\n-    for &cnum in cx.tcx.crates(()).iter() {\n+    for &cnum in cx.tcx.crates(()) {\n         externs.push(ExternalCrate { crate_num: cnum });\n         // Analyze doc-reachability for extern items\n         LibEmbargoVisitor::new(cx).visit_lib(cnum);\n     }\n-    externs.sort_unstable_by_key(|e| e.crate_num);\n \n     // Clean the crate, translating the entire librustc_ast AST to one that is\n     // understood by rustdoc.\n@@ -57,8 +56,6 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     }\n \n     let local_crate = ExternalCrate { crate_num: LOCAL_CRATE };\n-    let src = local_crate.src(cx.tcx);\n-    let name = local_crate.name(cx.tcx);\n     let primitives = local_crate.primitives(cx.tcx);\n     let keywords = local_crate.keywords(cx.tcx);\n     {\n@@ -80,8 +77,6 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     }\n \n     Crate {\n-        name,\n-        src,\n         module,\n         externs,\n         primitives,"}, {"sha": "ff1bd5e7ff289565c06076f8f7437743e1427ec4", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "patch": "@@ -172,7 +172,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n     // Collect the index into a string\n     format!(\n         r#\"\"{}\":{}\"#,\n-        krate.name,\n+        krate.name(tcx),\n         serde_json::to_string(&CrateData {\n             doc: crate_doc,\n             items: crate_items,"}, {"sha": "76e46fa0aa35483ebef4d569960f4650e1083a35", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "patch": "@@ -408,7 +408,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             ..\n         } = options;\n \n-        let src_root = match krate.src {\n+        let src_root = match krate.src(tcx) {\n             FileName::Real(ref p) => match p.local_path_if_available().parent() {\n                 Some(p) => p.to_path_buf(),\n                 None => PathBuf::new(),\n@@ -419,14 +419,14 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         let mut playground = None;\n         if let Some(url) = playground_url {\n             playground =\n-                Some(markdown::Playground { crate_name: Some(krate.name.to_string()), url });\n+                Some(markdown::Playground { crate_name: Some(krate.name(tcx).to_string()), url });\n         }\n         let mut layout = layout::Layout {\n             logo: String::new(),\n             favicon: String::new(),\n             external_html,\n             default_settings,\n-            krate: krate.name.to_string(),\n+            krate: krate.name(tcx).to_string(),\n             css_file_extension: extension_css,\n             generate_search_filter,\n             scrape_examples_extension: !call_locations.is_empty(),\n@@ -447,7 +447,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                 }\n                 (sym::html_playground_url, Some(s)) => {\n                     playground = Some(markdown::Playground {\n-                        crate_name: Some(krate.name.to_string()),\n+                        crate_name: Some(krate.name(tcx).to_string()),\n                         url: s.to_string(),\n                     });\n                 }"}, {"sha": "978701746b75b135acde7172be31087d7e1c4fc9", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "patch": "@@ -456,10 +456,10 @@ pub(super) fn write_shared(\n         let dst = cx.dst.join(&format!(\"source-files{}.js\", cx.shared.resource_suffix));\n         let make_sources = || {\n             let (mut all_sources, _krates) =\n-                try_err!(collect(&dst, &krate.name.as_str(), \"sourcesIndex\"), &dst);\n+                try_err!(collect(&dst, &krate.name(cx.tcx()).as_str(), \"sourcesIndex\"), &dst);\n             all_sources.push(format!(\n                 \"sourcesIndex[\\\"{}\\\"] = {};\",\n-                &krate.name,\n+                &krate.name(cx.tcx()),\n                 hierarchy.to_json_string()\n             ));\n             all_sources.sort();\n@@ -474,9 +474,10 @@ pub(super) fn write_shared(\n \n     // Update the search index and crate list.\n     let dst = cx.dst.join(&format!(\"search-index{}.js\", cx.shared.resource_suffix));\n-    let (mut all_indexes, mut krates) = try_err!(collect_json(&dst, &krate.name.as_str()), &dst);\n+    let (mut all_indexes, mut krates) =\n+        try_err!(collect_json(&dst, &krate.name(cx.tcx()).as_str()), &dst);\n     all_indexes.push(search_index);\n-    krates.push(krate.name.to_string());\n+    krates.push(krate.name(cx.tcx()).to_string());\n     krates.sort();\n \n     // Sort the indexes by crate so the file will be generated identically even\n@@ -600,7 +601,7 @@ pub(super) fn write_shared(\n \n         let implementors = format!(\n             r#\"implementors[\"{}\"] = {};\"#,\n-            krate.name,\n+            krate.name(cx.tcx()),\n             serde_json::to_string(&implementors).unwrap()\n         );\n \n@@ -612,7 +613,7 @@ pub(super) fn write_shared(\n         mydst.push(&format!(\"{}.{}.js\", remote_item_type, remote_path[remote_path.len() - 1]));\n \n         let (mut all_implementors, _) =\n-            try_err!(collect(&mydst, &krate.name.as_str(), \"implementors\"), &mydst);\n+            try_err!(collect(&mydst, &krate.name(cx.tcx()).as_str(), \"implementors\"), &mydst);\n         all_implementors.push(implementors);\n         // Sort the implementors by crate so the file will be generated\n         // identically even with rustdoc running in parallel."}, {"sha": "9422f84f99775ce270269a885462b4c0cfcb475a", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b01d90657a355abf81b53cb3ee0b9a7dd88f98/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=38b01d90657a355abf81b53cb3ee0b9a7dd88f98", "patch": "@@ -18,7 +18,7 @@ use std::path::{Component, Path, PathBuf};\n \n crate fn render(cx: &mut Context<'_>, krate: clean::Crate) -> Result<clean::Crate, Error> {\n     info!(\"emitting source files\");\n-    let dst = cx.dst.join(\"src\").join(&*krate.name.as_str());\n+    let dst = cx.dst.join(\"src\").join(&*krate.name(cx.tcx()).as_str());\n     cx.shared.ensure_dir(&dst)?;\n     let mut folder = SourceCollector { dst, cx, emitted_local_sources: FxHashSet::default() };\n     Ok(folder.fold_crate(krate))"}]}