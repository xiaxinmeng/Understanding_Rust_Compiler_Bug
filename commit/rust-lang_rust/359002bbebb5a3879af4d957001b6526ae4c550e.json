{"sha": "359002bbebb5a3879af4d957001b6526ae4c550e", "node_id": "C_kwDOAAsO6NoAKDM1OTAwMmJiZWJiNWEzODc5YWY0ZDk1NzAwMWI2NTI2YWU0YzU1MGU", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-08-21T04:38:23Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-08-30T18:27:42Z"}, "message": "ADD - migrate InvalidTraitItem and AltInvalidTraitItem errors\n\nThought of doing this by having a struct and an enum with Default and Alt cases, but not sure if we wanted to have the text in code instead of having \u201cdemangling()\u201d and \u201cdemangling-alt()\u201d in the ftl file.\n\nDon\u2019t like the current way of having structs representing the same-ish and using long names to distinguish their expectations, instead of putting this in an enum and handling the different cases inside the type.\n\nI am fine with whichever option the team prefers; also understand having them as separate structs keeps it simple.", "tree": {"sha": "f4ae399d40f467d78e3e53f784de6c0fdee28e07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4ae399d40f467d78e3e53f784de6c0fdee28e07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/359002bbebb5a3879af4d957001b6526ae4c550e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/359002bbebb5a3879af4d957001b6526ae4c550e", "html_url": "https://github.com/rust-lang/rust/commit/359002bbebb5a3879af4d957001b6526ae4c550e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/359002bbebb5a3879af4d957001b6526ae4c550e/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86f8c4e8e3136ee1831ffaa9d6fbdac7267d35ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/86f8c4e8e3136ee1831ffaa9d6fbdac7267d35ea", "html_url": "https://github.com/rust-lang/rust/commit/86f8c4e8e3136ee1831ffaa9d6fbdac7267d35ea"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "644c8f84c28ef998fe585c85bb067c90d84bc30d", "filename": "compiler/rustc_error_messages/locales/en-US/symbol_mangling.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/359002bbebb5a3879af4d957001b6526ae4c550e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsymbol_mangling.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/359002bbebb5a3879af4d957001b6526ae4c550e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsymbol_mangling.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsymbol_mangling.ftl?ref=359002bbebb5a3879af4d957001b6526ae4c550e", "patch": "@@ -1 +1,5 @@\n symbol_mangling_invalid_symbol_name = symbol-name({$mangled_formatted})\n+\n+symbol_mangling_invalid_trait_item = demangling({$demangling_formatted})\n+\n+symbol_mangling_alt_invalid_trait_item = demangling-alt({$alt_demangling_formatted})"}, {"sha": "db8b3159a6ff500b23413a21977ac1462e968f6d", "filename": "compiler/rustc_symbol_mangling/src/errors.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/359002bbebb5a3879af4d957001b6526ae4c550e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359002bbebb5a3879af4d957001b6526ae4c550e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs?ref=359002bbebb5a3879af4d957001b6526ae4c550e", "patch": "@@ -10,3 +10,19 @@ pub struct InvalidSymbolName<'a> {\n     pub span: Span,\n     pub mangled_formatted: &'a str,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(symbol_mangling::invalid_trait_item)]\n+pub struct InvalidTraitItem<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub demangling_formatted: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(symbol_mangling::alt_invalid_trait_item)]\n+pub struct AltInvalidTraitItem<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub alt_demangling_formatted: &'a str,\n+}"}, {"sha": "06efefb726ca7cee87a0bc3ab125dcb279db0b5d", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/359002bbebb5a3879af4d957001b6526ae4c550e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/359002bbebb5a3879af4d957001b6526ae4c550e/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=359002bbebb5a3879af4d957001b6526ae4c550e", "patch": "@@ -4,7 +4,7 @@\n //! def-path. This is used for unit testing the code that generates\n //! paths etc in all kinds of annoying scenarios.\n \n-use crate::errors::InvalidSymbolName;\n+use crate::errors::{AltInvalidTraitItem, InvalidSymbolName, InvalidTraitItem};\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{subst::InternalSubsts, Instance, TyCtxt};\n@@ -65,8 +65,14 @@ impl SymbolNamesTest<'_> {\n                 mangled_formatted: &format!(\"{mangled}\"),\n             });\n             if let Ok(demangling) = rustc_demangle::try_demangle(mangled.name) {\n-                tcx.sess.span_err(attr.span, &format!(\"demangling({})\", demangling));\n-                tcx.sess.span_err(attr.span, &format!(\"demangling-alt({:#})\", demangling));\n+                tcx.sess.emit_err(InvalidTraitItem {\n+                    span: attr.span,\n+                    demangling_formatted: &format!(\"{demangling}\"),\n+                });\n+                tcx.sess.emit_err(AltInvalidTraitItem {\n+                    span: attr.span,\n+                    alt_demangling_formatted: &format!(\"{:#}\", demangling),\n+                });\n             }\n         }\n "}]}