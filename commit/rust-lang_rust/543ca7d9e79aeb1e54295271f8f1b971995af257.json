{"sha": "543ca7d9e79aeb1e54295271f8f1b971995af257", "node_id": "C_kwDOAAsO6NoAKDU0M2NhN2Q5ZTc5YWViMWU1NDI5NTI3MWY4ZjFiOTcxOTk1YWYyNTc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-02T10:42:57Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-10T08:09:50Z"}, "message": "replace bound vars: make caching explicit", "tree": {"sha": "ded6ebbc9c012749061cd83055a7bdac1f63c991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded6ebbc9c012749061cd83055a7bdac1f63c991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/543ca7d9e79aeb1e54295271f8f1b971995af257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/543ca7d9e79aeb1e54295271f8f1b971995af257", "html_url": "https://github.com/rust-lang/rust/commit/543ca7d9e79aeb1e54295271f8f1b971995af257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/543ca7d9e79aeb1e54295271f8f1b971995af257/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "434c7da6eae28108bf8717977caa330b20b994e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/434c7da6eae28108bf8717977caa330b20b994e1", "html_url": "https://github.com/rust-lang/rust/commit/434c7da6eae28108bf8717977caa330b20b994e1"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "45ed4b63009b4e3f3b53d81ed2b88e8bf2b5ae1a", "filename": "compiler/rustc_infer/src/infer/canonical/substitute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/543ca7d9e79aeb1e54295271f8f1b971995af257/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543ca7d9e79aeb1e54295271f8f1b971995af257/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=543ca7d9e79aeb1e54295271f8f1b971995af257", "patch": "@@ -86,6 +86,6 @@ where\n             c => bug!(\"{:?} is a const but value is {:?}\", bound_ct, c),\n         };\n \n-        tcx.replace_escaping_bound_vars(value, fld_r, fld_t, fld_c)\n+        tcx.replace_escaping_bound_vars_uncached(value, fld_r, fld_t, fld_c)\n     }\n }"}, {"sha": "fabac8e30cc8b0d437078faaa3ddd198a4646c33", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/543ca7d9e79aeb1e54295271f8f1b971995af257/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543ca7d9e79aeb1e54295271f8f1b971995af257/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=543ca7d9e79aeb1e54295271f8f1b971995af257", "patch": "@@ -3,10 +3,10 @@\n \n use super::combine::CombineFields;\n use super::{HigherRankedType, InferCtxt};\n-\n use crate::infer::CombinedSnapshot;\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Binder, TypeFoldable};\n+use std::cell::Cell;\n \n impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n@@ -65,6 +65,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// For more details visit the relevant sections of the [rustc dev guide].\n     ///\n     /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn replace_bound_vars_with_placeholders<T>(&self, binder: ty::Binder<'tcx, T>) -> T\n     where\n         T: TypeFoldable<'tcx>,\n@@ -76,21 +77,25 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // (i.e., if there are no placeholders).\n         let next_universe = self.universe().next_universe();\n \n+        let replaced_bound_var = Cell::new(false);\n         let fld_r = |br: ty::BoundRegion| {\n+            replaced_bound_var.set(true);\n             self.tcx.mk_region(ty::RePlaceholder(ty::PlaceholderRegion {\n                 universe: next_universe,\n                 name: br.kind,\n             }))\n         };\n \n         let fld_t = |bound_ty: ty::BoundTy| {\n+            replaced_bound_var.set(true);\n             self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                 universe: next_universe,\n                 name: bound_ty.var,\n             }))\n         };\n \n         let fld_c = |bound_var: ty::BoundVar, ty| {\n+            replaced_bound_var.set(true);\n             self.tcx.mk_const(ty::ConstS {\n                 val: ty::ConstKind::Placeholder(ty::PlaceholderConst {\n                     universe: next_universe,\n@@ -100,22 +105,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             })\n         };\n \n-        let (result, map) = self.tcx.replace_bound_vars(binder, fld_r, fld_t, fld_c);\n+        let result = self.tcx.replace_bound_vars_uncached(binder, fld_r, fld_t, fld_c);\n \n         // If there were higher-ranked regions to replace, then actually create\n         // the next universe (this avoids needlessly creating universes).\n-        if !map.is_empty() {\n+        if replaced_bound_var.get() {\n             let n_u = self.create_next_universe();\n             assert_eq!(n_u, next_universe);\n         }\n \n-        debug!(\n-            \"replace_bound_vars_with_placeholders(\\\n-             next_universe={:?}, \\\n-             result={:?}, \\\n-             map={:?})\",\n-            next_universe, result, map,\n-        );\n+        debug!(?next_universe, ?result);\n \n         result\n     }"}, {"sha": "fdb25db772495f89d8e48e8ba2c0f88f6cbfa14e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/543ca7d9e79aeb1e54295271f8f1b971995af257/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543ca7d9e79aeb1e54295271f8f1b971995af257/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=543ca7d9e79aeb1e54295271f8f1b971995af257", "patch": "@@ -1528,21 +1528,33 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let fld_r =\n-            |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));\n-        let fld_t = |_| {\n-            self.next_ty_var(TypeVariableOrigin {\n-                kind: TypeVariableOriginKind::MiscVariable,\n-                span,\n+        let mut region_map = BTreeMap::new();\n+        let fld_r = |br: ty::BoundRegion| {\n+            *region_map\n+                .entry(br)\n+                .or_insert_with(|| self.next_region_var(LateBoundRegion(span, br.kind, lbrct)))\n+        };\n+\n+        let mut ty_map = BTreeMap::new();\n+        let fld_t = |bt: ty::BoundTy| {\n+            *ty_map.entry(bt).or_insert_with(|| {\n+                self.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::MiscVariable,\n+                    span,\n+                })\n             })\n         };\n-        let fld_c = |_, ty| {\n-            self.next_const_var(\n-                ty,\n-                ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },\n-            )\n+        let mut ct_map = BTreeMap::new();\n+        let fld_c = |bc: ty::BoundVar, ty| {\n+            *ct_map.entry(bc).or_insert_with(|| {\n+                self.next_const_var(\n+                    ty,\n+                    ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },\n+                )\n+            })\n         };\n-        self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)\n+        let result = self.tcx.replace_bound_vars_uncached(value, fld_r, fld_t, fld_c);\n+        (result, region_map)\n     }\n \n     /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method."}, {"sha": "6d3f51a7249bf309f5357206e9ec561fafa9b1d0", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/543ca7d9e79aeb1e54295271f8f1b971995af257/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543ca7d9e79aeb1e54295271f8f1b971995af257/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=543ca7d9e79aeb1e54295271f8f1b971995af257", "patch": "@@ -771,7 +771,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping\n     /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`\n     /// closure replaces escaping bound consts.\n-    pub fn replace_escaping_bound_vars<T, F, G, H>(\n+    pub fn replace_escaping_bound_vars_uncached<T, F, G, H>(\n         self,\n         value: T,\n         mut fld_r: F,\n@@ -795,23 +795,20 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Replaces all types or regions bound by the given `Binder`. The `fld_r`\n     /// closure replaces bound regions, the `fld_t` closure replaces bound\n     /// types, and `fld_c` replaces bound constants.\n-    pub fn replace_bound_vars<T, F, G, H>(\n+    pub fn replace_bound_vars_uncached<T, F, G, H>(\n         self,\n         value: Binder<'tcx, T>,\n-        mut fld_r: F,\n+        fld_r: F,\n         fld_t: G,\n         fld_c: H,\n-    ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n+    ) -> T\n     where\n         F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n         G: FnMut(ty::BoundTy) -> Ty<'tcx>,\n         H: FnMut(ty::BoundVar, Ty<'tcx>) -> ty::Const<'tcx>,\n         T: TypeFoldable<'tcx>,\n     {\n-        let mut region_map = BTreeMap::new();\n-        let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));\n-        let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);\n-        (value, region_map)\n+        self.replace_escaping_bound_vars_uncached(value.skip_binder(), fld_r, fld_t, fld_c)\n     }\n \n     /// Replaces any late-bound regions bound in `value` with\n@@ -837,7 +834,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        self.replace_escaping_bound_vars(\n+        self.replace_escaping_bound_vars_uncached(\n             value,\n             |r| {\n                 self.mk_region(ty::ReLateBound("}]}