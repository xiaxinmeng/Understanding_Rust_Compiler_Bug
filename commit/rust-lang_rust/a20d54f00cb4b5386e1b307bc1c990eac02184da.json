{"sha": "a20d54f00cb4b5386e1b307bc1c990eac02184da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMGQ1NGYwMGNiNGI1Mzg2ZTFiMzA3YmMxYzk5MGVhYzAyMTg0ZGE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-03T20:22:54Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-03-03T20:22:54Z"}, "message": "Make PlaceRef lifetimes of RootPlace be both 'tcx", "tree": {"sha": "b553d5bc39ff50c72044a49cb0e27dd72a02a41a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b553d5bc39ff50c72044a49cb0e27dd72a02a41a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20d54f00cb4b5386e1b307bc1c990eac02184da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl5evJ4ACgkQgTGiTgx5\n768oag//afL1KJy3xPWbfKMFXs5RMuoW177XI6dTkJEbkvnspCxedbPW77geYt9Y\nuDRvs7TotO+6ATt6nbvv7+cYnz6T8WW7AvO3tfT2e4ytdexpci/QLT4NOIIPl49b\nWKU70w8mxhWupuYs9R7dwZfLT967XmM6Or3m/RV/f5+hE8FvTkCGLRn5C8eziRBy\njmlglfS922mh3oHgJlPY2vLBZpOqq538n0QPE8YJu1l+MjzT5JJKw0P7xAKx7eEQ\n2sXK8m/rij3ALTJhgMcUYe6WbfvSJZWcyvIJIHWlMeU0GL8ZviPuIiR23aDuDvn3\nWA1v5VDClfSaDLBT3XA7EQK5Rv7KJuPpjj085al+W2E0jfZA0igfiiDYiR7N08g2\nb2I8BGu8lLu0qps9uX6ND1EKVvE7PXWzobQTPq5rDI6aqX7VIV9yBhLP+ZnXvJBd\nbsXIUN+iTaa2VRLuLiFMdpnSzT9Fyk6YNwolWSl022HIDvwhKhJ8toknrFfthqhX\nidYtkWQH+Znc/kyT8++sLrT82Fukw9cKfEjMlIeDcU2iGlM1EUHUNjJzIu6dRiu1\nUhDO2HE5TD1evcZ5ZmpQSFpvougJRhb613TvTffHiS+dOg0yNP4pUBUlxEXyuBwS\nXhDrpWirrWyFmVRZRHQf9gJpbW2IGtuootn7IIitP8Iap4iSRYU=\n=2UTv\n-----END PGP SIGNATURE-----", "payload": "tree b553d5bc39ff50c72044a49cb0e27dd72a02a41a\nparent 2af5e87b4b3ef9c7210e4b40ad86a14ff32932f1\nauthor Santiago Pastorino <spastorino@gmail.com> 1583266974 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1583266974 -0300\n\nMake PlaceRef lifetimes of RootPlace be both 'tcx\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20d54f00cb4b5386e1b307bc1c990eac02184da", "html_url": "https://github.com/rust-lang/rust/commit/a20d54f00cb4b5386e1b307bc1c990eac02184da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20d54f00cb4b5386e1b307bc1c990eac02184da/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2af5e87b4b3ef9c7210e4b40ad86a14ff32932f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2af5e87b4b3ef9c7210e4b40ad86a14ff32932f1", "html_url": "https://github.com/rust-lang/rust/commit/2af5e87b4b3ef9c7210e4b40ad86a14ff32932f1"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "4e21ba86d09965b5e23de8c63d2c77333b076834", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a20d54f00cb4b5386e1b307bc1c990eac02184da/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20d54f00cb4b5386e1b307bc1c990eac02184da/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a20d54f00cb4b5386e1b307bc1c990eac02184da", "patch": "@@ -841,9 +841,9 @@ enum InitializationRequiringAction {\n     PartialAssignment,\n }\n \n-struct RootPlace<'d, 'tcx> {\n+struct RootPlace<'tcx> {\n     place_local: Local,\n-    place_projection: &'d [PlaceElem<'tcx>],\n+    place_projection: &'tcx [PlaceElem<'tcx>],\n     is_local_mutation_allowed: LocalMutationIsAllowed,\n }\n \n@@ -2029,7 +2029,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     /// Adds the place into the used mutable variables set\n-    fn add_used_mut<'d>(&mut self, root_place: RootPlace<'d, 'tcx>, flow_state: &Flows<'cx, 'tcx>) {\n+    fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {\n         match root_place {\n             RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {\n                 // If the local may have been initialized, and it is now currently being\n@@ -2063,11 +2063,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     /// Whether this value can be written or borrowed mutably.\n     /// Returns the root place if the place passed in is a projection.\n-    fn is_mutable<'d>(\n+    fn is_mutable(\n         &self,\n-        place: PlaceRef<'d, 'tcx>,\n+        place: PlaceRef<'tcx, 'tcx>,\n         is_local_mutation_allowed: LocalMutationIsAllowed,\n-    ) -> Result<RootPlace<'d, 'tcx>, PlaceRef<'d, 'tcx>> {\n+    ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx, 'tcx>> {\n         match place {\n             PlaceRef { local, projection: [] } => {\n                 let local = &self.body.local_decls[local];"}]}