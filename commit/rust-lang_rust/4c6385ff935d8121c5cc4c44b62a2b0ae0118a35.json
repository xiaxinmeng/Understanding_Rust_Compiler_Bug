{"sha": "4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "node_id": "C_kwDOAAsO6NoAKDRjNjM4NWZmOTM1ZDgxMjFjNWNjNGM0NGI2MmEyYjBhZTAxMThhMzU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-24T04:01:56Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-30T20:52:57Z"}, "message": "Make `Impl.trait_` a `Path`, not a `Type`\n\nIt should only ever be a `ResolvedPath`, so this (a) enforces that, and\n(b) reduces the size of `Impl`.\n\nI had to update a test because the order of the rendered auto trait impl\nbounds changed. I think the order changed because rustdoc sorts auto\ntrait bounds using their `Debug` output.", "tree": {"sha": "e532b6c07b718f9be1e9407935ee494d567abb81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e532b6c07b718f9be1e9407935ee494d567abb81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "html_url": "https://github.com/rust-lang/rust/commit/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d91946b3f4ea04bc205b5796fc4af0f13069d204", "url": "https://api.github.com/repos/rust-lang/rust/commits/d91946b3f4ea04bc205b5796fc4af0f13069d204", "html_url": "https://github.com/rust-lang/rust/commit/d91946b3f4ea04bc205b5796fc4af0f13069d204"}], "stats": {"total": 98, "additions": 73, "deletions": 25}, "files": [{"sha": "c83a191baf54f9de81b9107974c8998c742ab0e0", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 span: Span::dummy(),\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n-                trait_: Some(trait_ref.clean(self.cx).get_trait_type().unwrap()),\n+                trait_: Some(trait_ref.clean(self.cx).get_trait_type().unwrap().expect_path()),\n                 for_: ty.clean(self.cx),\n                 items: Vec::new(),\n                 negative_polarity,"}, {"sha": "4385c1adc09fad839ad04e5d4bd7f9f2895ade6d", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "patch": "@@ -114,7 +114,9 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .clean(self.cx),\n                         // FIXME(eddyb) compute both `trait_` and `for_` from\n                         // the post-inference `trait_ref`, as it's more accurate.\n-                        trait_: Some(trait_ref.clean(self.cx).get_trait_type().unwrap()),\n+                        trait_: Some(\n+                            trait_ref.clean(self.cx).get_trait_type().unwrap().expect_path(),\n+                        ),\n                         for_: ty.clean(self.cx),\n                         items: self\n                             .cx"}, {"sha": "7a08e54d4b141ecd3fcbef5fea3a154bc7bc021b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "patch": "@@ -483,7 +483,7 @@ crate fn build_impl(\n             span: clean::types::rustc_span(did, cx.tcx),\n             unsafety: hir::Unsafety::Normal,\n             generics,\n-            trait_,\n+            trait_: trait_.map(|t| t.expect_path()),\n             for_,\n             items: trait_items,\n             negative_polarity: polarity.clean(cx),"}, {"sha": "21389fa38a870986cb8cb4c538b41cf7ab821061", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "patch": "@@ -903,6 +903,12 @@ impl Clean<Type> for hir::TraitRef<'_> {\n     }\n }\n \n+impl Clean<Path> for hir::TraitRef<'_> {\n+    fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n+        self.path.clean(cx)\n+    }\n+}\n+\n impl Clean<PolyTrait> for hir::PolyTraitRef<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> PolyTrait {\n         PolyTrait {\n@@ -1902,7 +1908,7 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n         DefKind::TyAlias => Some(tcx.type_of(did).clean(cx)),\n         _ => None,\n     });\n-    let mut make_item = |trait_: Option<Type>, for_: Type, items: Vec<Item>| {\n+    let mut make_item = |trait_: Option<Path>, for_: Type, items: Vec<Item>| {\n         let kind = ImplItem(Impl {\n             span: types::rustc_span(tcx.hir().local_def_id(hir_id).to_def_id(), tcx),\n             unsafety: impl_.unsafety,"}, {"sha": "a5f71c4a8495551d50ff3c76c7b9bf7d42c2c021", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "patch": "@@ -1473,6 +1473,15 @@ impl Type {\n         }\n     }\n \n+    // FIXME: temporary\n+    #[track_caller]\n+    crate fn expect_path(self) -> Path {\n+        match self {\n+            ResolvedPath { path, .. } => path,\n+            _ => panic!(\"not a ResolvedPath: {:?}\", self),\n+        }\n+    }\n+\n     crate fn is_self_type(&self) -> bool {\n         match *self {\n             Generic(name) => name == kw::SelfUpper,\n@@ -1481,21 +1490,8 @@ impl Type {\n     }\n \n     crate fn generics(&self) -> Option<Vec<&Type>> {\n-        match *self {\n-            ResolvedPath { ref path, .. } => path.segments.last().and_then(|seg| {\n-                if let GenericArgs::AngleBracketed { ref args, .. } = seg.args {\n-                    Some(\n-                        args.iter()\n-                            .filter_map(|arg| match arg {\n-                                GenericArg::Type(ty) => Some(ty),\n-                                _ => None,\n-                            })\n-                            .collect(),\n-                    )\n-                } else {\n-                    None\n-                }\n-            }),\n+        match self {\n+            ResolvedPath { path, .. } => path.generics(),\n             _ => None,\n         }\n     }\n@@ -1993,6 +1989,34 @@ impl Path {\n             _ => false,\n         }\n     }\n+\n+    crate fn generics(&self) -> Option<Vec<&Type>> {\n+        self.segments.last().and_then(|seg| {\n+            if let GenericArgs::AngleBracketed { ref args, .. } = seg.args {\n+                Some(\n+                    args.iter()\n+                        .filter_map(|arg| match arg {\n+                            GenericArg::Type(ty) => Some(ty),\n+                            _ => None,\n+                        })\n+                        .collect(),\n+                )\n+            } else {\n+                None\n+            }\n+        })\n+    }\n+}\n+\n+// FIXME: this is temporary\n+impl GetDefId for Path {\n+    fn def_id(&self) -> Option<DefId> {\n+        Some(self.res.def_id())\n+    }\n+\n+    fn def_id_full(&self, _: &Cache) -> Option<DefId> {\n+        self.def_id()\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -2136,7 +2160,7 @@ crate struct Impl {\n     crate span: Span,\n     crate unsafety: hir::Unsafety,\n     crate generics: Generics,\n-    crate trait_: Option<Type>,\n+    crate trait_: Option<Path>,\n     crate for_: Type,\n     crate items: Vec<Item>,\n     crate negative_polarity: bool,"}, {"sha": "86e867d4006aafd0a86b63b39bb1c90fba9cf7a5", "filename": "src/librustdoc/formats/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fformats%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fformats%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fmod.rs?ref=4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "patch": "@@ -14,7 +14,7 @@ use crate::formats::cache::Cache;\n /// impl.\n crate enum AssocItemRender<'a> {\n     All,\n-    DerefFor { trait_: &'a clean::Type, type_: &'a clean::Type, deref_mut_: bool },\n+    DerefFor { trait_: &'a clean::Path, type_: &'a clean::Type, deref_mut_: bool },\n }\n \n /// For different handling of associated items from the Deref target of a type rather than the type"}, {"sha": "4338ed7160c10f51fdb48df56d12817baef98ccd", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "patch": "@@ -979,6 +979,15 @@ impl clean::Type {\n     }\n }\n \n+impl clean::Path {\n+    crate fn print<'b, 'a: 'b, 'tcx: 'a>(\n+        &'a self,\n+        cx: &'a Context<'tcx>,\n+    ) -> impl fmt::Display + 'b + Captures<'tcx> {\n+        display_fn(move |f| resolved_path(f, self.res.def_id(), self, false, false, cx))\n+    }\n+}\n+\n impl clean::Impl {\n     crate fn print<'a, 'tcx: 'a>(\n         &'a self,"}, {"sha": "83cd2af169afdf2ed481d4485da346d20b56a080", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "patch": "@@ -2056,10 +2056,10 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n \n fn get_id_for_impl_on_foreign_type(\n     for_: &clean::Type,\n-    trait_: &clean::Type,\n+    trait_: &clean::Path,\n     cx: &Context<'_>,\n ) -> String {\n-    small_url_encode(format!(\"impl-{:#}-for-{:#}\", trait_.print(cx), for_.print(cx),))\n+    small_url_encode(format!(\"impl-{:#}-for-{:#}\", trait_.print(cx), for_.print(cx)))\n }\n \n fn extract_for_impl_name(item: &clean::Item, cx: &Context<'_>) -> Option<(String, String)> {"}, {"sha": "df9a07499acc432b83665decbe600743053ef1b7", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "patch": "@@ -507,14 +507,19 @@ impl FromWithTcx<clean::Impl> for Impl {\n             blanket_impl,\n             span: _span,\n         } = impl_;\n+        // FIXME: should `trait_` be a Path in JSON?\n+        let trait_ = trait_.map(|path| {\n+            let did = path.res.def_id();\n+            clean::ResolvedPath { path, did }.into_tcx(tcx)\n+        });\n         Impl {\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,\n             generics: generics.into_tcx(tcx),\n             provided_trait_methods: provided_trait_methods\n                 .into_iter()\n                 .map(|x| x.to_string())\n                 .collect(),\n-            trait_: trait_.map(|x| x.into_tcx(tcx)),\n+            trait_,\n             for_: for_.into_tcx(tcx),\n             items: ids(items),\n             negative: negative_polarity,"}, {"sha": "e8aa37c8868d8e8dcb544ab86aa572854ce73297", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6385ff935d8121c5cc4c44b62a2b0ae0118a35/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=4c6385ff935d8121c5cc4c44b62a2b0ae0118a35", "patch": "@@ -78,7 +78,9 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n     new_items.retain(|it| {\n         if let ImplItem(Impl { ref for_, ref trait_, ref blanket_impl, .. }) = *it.kind {\n             cleaner.keep_impl(for_)\n-                || trait_.as_ref().map_or(false, |t| cleaner.keep_impl(t))\n+                || trait_\n+                    .as_ref()\n+                    .map_or(false, |t| cleaner.keep_impl_with_def_id(t.res.def_id().into()))\n                 || blanket_impl.is_some()\n         } else {\n             true"}]}