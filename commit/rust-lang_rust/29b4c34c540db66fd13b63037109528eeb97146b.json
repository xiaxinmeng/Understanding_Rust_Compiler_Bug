{"sha": "29b4c34c540db66fd13b63037109528eeb97146b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YjRjMzRjNTQwZGI2NmZkMTNiNjMwMzcxMDk1MjhlZWI5NzE0NmI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-07T12:32:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-07T12:32:02Z"}, "message": "Rustfmt", "tree": {"sha": "cf9f1a05cbac5bc00c8f8c89ed239ab7a7233643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf9f1a05cbac5bc00c8f8c89ed239ab7a7233643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b4c34c540db66fd13b63037109528eeb97146b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b4c34c540db66fd13b63037109528eeb97146b", "html_url": "https://github.com/rust-lang/rust/commit/29b4c34c540db66fd13b63037109528eeb97146b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b4c34c540db66fd13b63037109528eeb97146b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b73bda1c3f845680a4e0da40b5b6519c2ba4845b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b73bda1c3f845680a4e0da40b5b6519c2ba4845b", "html_url": "https://github.com/rust-lang/rust/commit/b73bda1c3f845680a4e0da40b5b6519c2ba4845b"}], "stats": {"total": 166, "additions": 91, "deletions": 75}, "files": [{"sha": "f42707b5f80d1164b116b5a5098c95f6832ae281", "filename": "src/abi.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=29b4c34c540db66fd13b63037109528eeb97146b", "patch": "@@ -28,11 +28,10 @@ fn get_pass_mode<'a, 'tcx: 'a>(\n     ty: Ty<'tcx>,\n     is_return: bool,\n ) -> PassMode {\n-    assert!(\n-        !tcx.layout_of(ParamEnv::reveal_all().and(ty))\n-            .unwrap()\n-            .is_unsized()\n-    );\n+    assert!(!tcx\n+        .layout_of(ParamEnv::reveal_all().and(ty))\n+        .unwrap()\n+        .is_unsized());\n     if let ty::Never = ty.sty {\n         if is_return {\n             PassMode::NoPass\n@@ -256,10 +255,7 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n         if let Some(val) = self.lib_call(name, input_tys, return_ty, &args) {\n             CValue::ByVal(val, return_layout)\n         } else {\n-            CValue::ByRef(\n-                self.bcx.ins().iconst(self.pointer_type, 0),\n-                return_layout,\n-            )\n+            CValue::ByRef(self.bcx.ins().iconst(self.pointer_type, 0), return_layout)\n         }\n     }\n "}, {"sha": "d84838634e79820b0c97273f53d7e94090a60434", "filename": "src/allocator.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=29b4c34c540db66fd13b63037109528eeb97146b", "patch": "@@ -11,7 +11,7 @@\n use crate::prelude::*;\n \n use rustc::middle::allocator::AllocatorKind;\n-use rustc_allocator::{ALLOCATOR_METHODS, AllocatorTy};\n+use rustc_allocator::{AllocatorTy, ALLOCATOR_METHODS};\n \n pub fn codegen(module: &mut Module<impl Backend + 'static>, kind: AllocatorKind) {\n     let usize_ty = module.target_config().pointer_type();\n@@ -27,17 +27,16 @@ pub fn codegen(module: &mut Module<impl Backend + 'static>, kind: AllocatorKind)\n                 AllocatorTy::Ptr => arg_tys.push(usize_ty),\n                 AllocatorTy::Usize => arg_tys.push(usize_ty),\n \n-                AllocatorTy::ResultPtr |\n-                AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n+                AllocatorTy::ResultPtr | AllocatorTy::Unit => panic!(\"invalid allocator arg\"),\n             }\n         }\n         let output = match method.output {\n             AllocatorTy::ResultPtr => Some(usize_ty),\n             AllocatorTy::Unit => None,\n \n-            AllocatorTy::Layout |\n-            AllocatorTy::Usize |\n-            AllocatorTy::Ptr => panic!(\"invalid allocator output\"),\n+            AllocatorTy::Layout | AllocatorTy::Usize | AllocatorTy::Ptr => {\n+                panic!(\"invalid allocator output\")\n+            }\n         };\n \n         let sig = Signature {"}, {"sha": "0b7e657f17f38239f7a9d7ee33534bb2901ae36d", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=29b4c34c540db66fd13b63037109528eeb97146b", "patch": "@@ -630,11 +630,10 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     lval.write_cvalue(fx, CValue::ByVal(ptr, box_layout));\n                 }\n                 Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n-                    assert!(\n-                        lval.layout()\n-                            .ty\n-                            .is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all())\n-                    );\n+                    assert!(lval\n+                        .layout()\n+                        .ty\n+                        .is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all()));\n                     let ty_size = fx.layout_of(ty).size.bytes();\n                     let val = CValue::const_val(fx, fx.tcx.types.usize, ty_size as i64);\n                     lval.write_cvalue(fx, val);"}, {"sha": "848f66a48d2bb2d78e115b2eed24460532f59b99", "filename": "src/common.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=29b4c34c540db66fd13b63037109528eeb97146b", "patch": "@@ -131,10 +131,7 @@ impl<'tcx> CValue<'tcx> {\n                     size: layout.size.bytes() as u32,\n                     offset: None,\n                 });\n-                let addr = fx\n-                    .bcx\n-                    .ins()\n-                    .stack_addr(fx.pointer_type, stack_slot, 0);\n+                let addr = fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0);\n                 fx.bcx.ins().store(MemFlags::new(), value, addr, 0);\n                 addr\n             }\n@@ -161,9 +158,10 @@ impl<'tcx> CValue<'tcx> {\n         match self {\n             CValue::ByRef(addr, layout) => {\n                 let cton_ty = fx.cton_type(layout.ty).unwrap_or_else(|| {\n-                    if layout.ty.is_box() && !fx\n-                        .layout_of(layout.ty.builtin_deref(true).unwrap().ty)\n-                        .is_unsized()\n+                    if layout.ty.is_box()\n+                        && !fx\n+                            .layout_of(layout.ty.builtin_deref(true).unwrap().ty)\n+                            .is_unsized()\n                     {\n                         // Consider sized box to be a ptr\n                         pointer_ty(fx.tcx)\n@@ -190,14 +188,14 @@ impl<'tcx> CValue<'tcx> {\n                 );\n                 let val1_offset = layout.fields.offset(0).bytes() as i32;\n                 let val2_offset = layout.fields.offset(1).bytes() as i32;\n-                let val1 =\n-                    fx.bcx\n-                        .ins()\n-                        .load(fx.pointer_type, MemFlags::new(), addr, val1_offset);\n-                let val2 =\n-                    fx.bcx\n-                        .ins()\n-                        .load(fx.pointer_type, MemFlags::new(), addr, val2_offset);\n+                let val1 = fx\n+                    .bcx\n+                    .ins()\n+                    .load(fx.pointer_type, MemFlags::new(), addr, val1_offset);\n+                let val2 = fx\n+                    .bcx\n+                    .ins()\n+                    .load(fx.pointer_type, MemFlags::new(), addr, val2_offset);\n                 (val1, val2)\n             }\n             CValue::ByVal(_, _layout) => bug!(\"Please use load_value for ByVal\"),\n@@ -333,9 +331,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n             offset: None,\n         });\n         CPlace::Addr(\n-            fx.bcx\n-                .ins()\n-                .stack_addr(fx.pointer_type, stack_slot, 0),\n+            fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0),\n             None,\n             layout,\n         )\n@@ -349,9 +345,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         let layout = fx.layout_of(ty);\n         assert!(!layout.is_unsized());\n         CPlace::Addr(\n-            fx.bcx\n-                .ins()\n-                .stack_addr(fx.pointer_type, stack_slot, 0),\n+            fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0),\n             None,\n             layout,\n         )\n@@ -426,12 +420,10 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n \n                         let mut offset = 0;\n                         while size - offset >= 8 {\n-                            let byte = fx.bcx.ins().load(\n-                                fx.pointer_type,\n-                                MemFlags::new(),\n-                                from,\n-                                offset,\n-                            );\n+                            let byte =\n+                                fx.bcx\n+                                    .ins()\n+                                    .load(fx.pointer_type, MemFlags::new(), from, offset);\n                             fx.bcx.ins().store(MemFlags::new(), byte, addr, offset);\n                             offset += 8;\n                         }"}, {"sha": "4dcbf1da82c8bea5827ef3af74639078a926c58c", "filename": "src/constant.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=29b4c34c540db66fd13b63037109528eeb97146b", "patch": "@@ -4,7 +4,9 @@ use rustc::mir::interpret::{\n     read_target_uint, AllocId, AllocType, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n };\n use rustc::ty::Const;\n-use rustc_mir::interpret::{EvalContext, Machine, Memory, MemoryKind, MemPlace, OpTy, PlaceTy, Pointer};\n+use rustc_mir::interpret::{\n+    EvalContext, Machine, MemPlace, Memory, MemoryKind, OpTy, PlaceTy, Pointer,\n+};\n \n use cranelift_module::*;\n \n@@ -176,10 +178,7 @@ fn cplace_for_dataid<'a, 'tcx: 'a>(\n     data_id: DataId,\n ) -> CPlace<'tcx> {\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-    let global_ptr = fx\n-        .bcx\n-        .ins()\n-        .global_value(fx.pointer_type, local_data_id);\n+    let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n     let layout = fx.layout_of(fx.monomorphize(&ty));\n     assert!(!layout.is_unsized(), \"unsized statics aren't supported\");\n     CPlace::Addr(global_ptr, None, layout)\n@@ -336,19 +335,35 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for TransPlaceInterpreter {\n         panic!();\n     }\n \n-    fn tag_reference(_: &mut EvalContext<'a, 'mir, 'tcx, Self>, _: MemPlace, _: Ty<'tcx>, _: Size, _: Option<crate::rustc::hir::Mutability>) -> EvalResult<'tcx, MemPlace> {\n+    fn tag_reference(\n+        _: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        _: MemPlace,\n+        _: Ty<'tcx>,\n+        _: Size,\n+        _: Option<crate::rustc::hir::Mutability>,\n+    ) -> EvalResult<'tcx, MemPlace> {\n         panic!()\n     }\n \n-    fn tag_dereference(_: &EvalContext<'a, 'mir, 'tcx, Self>, _: MemPlace, _: Ty<'tcx>, _: Size, _: Option<crate::rustc::hir::Mutability>) -> EvalResult<'tcx, MemPlace> {\n+    fn tag_dereference(\n+        _: &EvalContext<'a, 'mir, 'tcx, Self>,\n+        _: MemPlace,\n+        _: Ty<'tcx>,\n+        _: Size,\n+        _: Option<crate::rustc::hir::Mutability>,\n+    ) -> EvalResult<'tcx, MemPlace> {\n         panic!();\n     }\n \n     fn adjust_static_allocation(alloc: &Allocation) -> Cow<'_, Allocation> {\n         Cow::Borrowed(alloc)\n     }\n \n-    fn tag_new_allocation(_: &mut EvalContext<'a, 'mir, 'tcx, Self>, ptr: Pointer, _: MemoryKind<!>) -> EvalResult<'tcx, Pointer> {\n+    fn tag_new_allocation(\n+        _: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n+        ptr: Pointer,\n+        _: MemoryKind<!>,\n+    ) -> EvalResult<'tcx, Pointer> {\n         Ok(ptr)\n     }\n }"}, {"sha": "8dccc6e26a846ac5b33ff8b63e1a251cf2d48117", "filename": "src/lib.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/29b4c34c540db66fd13b63037109528eeb97146b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4c34c540db66fd13b63037109528eeb97146b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=29b4c34c540db66fd13b63037109528eeb97146b", "patch": "@@ -1,4 +1,9 @@\n-#![feature(rustc_private, macro_at_most_once_rep, never_type, extern_crate_item_prelude)]\n+#![feature(\n+    rustc_private,\n+    macro_at_most_once_rep,\n+    never_type,\n+    extern_crate_item_prelude\n+)]\n #![allow(intra_doc_link_resolution_failure)]\n \n extern crate byteorder;\n@@ -80,10 +85,10 @@ mod prelude {\n     pub use syntax::ast::{FloatTy, IntTy, UintTy};\n     pub use syntax::source_map::DUMMY_SP;\n \n-    pub use cranelift::codegen::isa::CallConv;\n     pub use cranelift::codegen::ir::{\n         condcodes::IntCC, function::Function, ExternalName, FuncRef, Inst, StackSlot,\n     };\n+    pub use cranelift::codegen::isa::CallConv;\n     pub use cranelift::codegen::Context;\n     pub use cranelift::prelude::*;\n     pub use cranelift_module::{Backend, DataContext, DataId, FuncId, Linkage, Module};\n@@ -174,9 +179,10 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         let mut flags_builder = settings::builder();\n         flags_builder.enable(\"is_pic\").unwrap();\n         let flags = settings::Flags::new(flags_builder);\n-        let isa = cranelift::codegen::isa::lookup(tcx.sess.target.target.llvm_target.parse().unwrap())\n-            .unwrap()\n-            .finish(flags);\n+        let isa =\n+            cranelift::codegen::isa::lookup(tcx.sess.target.target.llvm_target.parse().unwrap())\n+                .unwrap()\n+                .finish(flags);\n \n         // TODO: move to the end of this function when compiling libcore doesn't have unimplemented stuff anymore\n         save_incremental(tcx);\n@@ -197,7 +203,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     AbiParam::new(jit_module.target_config().pointer_type()),\n                     AbiParam::new(jit_module.target_config().pointer_type()),\n                 ],\n-                returns: vec![AbiParam::new(jit_module.target_config().pointer_type() /*isize*/)],\n+                returns: vec![AbiParam::new(\n+                    jit_module.target_config().pointer_type(), /*isize*/\n+                )],\n                 call_conv: CallConv::SystemV,\n             };\n             let main_func_id = jit_module\n@@ -225,7 +233,10 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 )\n                 .unwrap(),\n             );\n-            assert_eq!(pointer_ty(tcx), faerie_module.target_config().pointer_type());\n+            assert_eq!(\n+                pointer_ty(tcx),\n+                faerie_module.target_config().pointer_type()\n+            );\n \n             codegen_mono_items(tcx, &mut faerie_module);\n \n@@ -347,9 +358,11 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n     };\n \n     let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n-    let mono_items = cgus.iter().map(|cgu| {\n-        cgu.items().iter()\n-    }).flatten().collect::<FxHashSet<(_, _)>>();\n+    let mono_items = cgus\n+        .iter()\n+        .map(|cgu| cgu.items().iter())\n+        .flatten()\n+        .collect::<FxHashSet<(_, _)>>();\n \n     let before = ::std::time::Instant::now();\n     println!(\"[codegen mono items] start\");\n@@ -374,7 +387,10 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n \n     crate::main_shim::maybe_create_entry_wrapper(tcx, module);\n \n-    let any_dynamic_crate = tcx.sess.dependency_formats.borrow()\n+    let any_dynamic_crate = tcx\n+        .sess\n+        .dependency_formats\n+        .borrow()\n         .iter()\n         .any(|(_, list)| {\n             use rustc::middle::dependency_format::Linkage;"}, {"sha": "5b61ef24cf2e571c64cd04621032d500f7a98ba5", "filename": "src/main_shim.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=29b4c34c540db66fd13b63037109528eeb97146b", "patch": "@@ -41,7 +41,9 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n                 AbiParam::new(m.target_config().pointer_type()),\n                 AbiParam::new(m.target_config().pointer_type()),\n             ],\n-            returns: vec![AbiParam::new(m.target_config().pointer_type() /*isize*/)],\n+            returns: vec![AbiParam::new(\n+                m.target_config().pointer_type(), /*isize*/\n+            )],\n             call_conv: CallConv::SystemV,\n         };\n \n@@ -85,7 +87,9 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n                     .declare_function(&start_name, Linkage::Import, &start_sig)\n                     .unwrap();\n \n-                let main_val = bcx.ins().func_addr(m.target_config().pointer_type(), main_func_ref);\n+                let main_val = bcx\n+                    .ins()\n+                    .func_addr(m.target_config().pointer_type(), main_func_ref);\n \n                 let func_ref = m.declare_func_in_func(start_func_id, &mut bcx.func);\n                 bcx.ins().call(func_ref, &[main_val, arg_argc, arg_argv])"}, {"sha": "bef1d7fccda2c7f9e0b2a23f23890371ec2ff8cc", "filename": "src/metadata.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=29b4c34c540db66fd13b63037109528eeb97146b", "patch": "@@ -17,10 +17,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n         // Iterate over all entries in the archive:\n         while let Some(entry_result) = archive.next_entry() {\n             let mut entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n-            if entry\n-                .header()\n-                .identifier() == METADATA_FILE\n-            {\n+            if entry.header().identifier() == METADATA_FILE {\n                 let mut buf = Vec::new();\n                 ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n                 let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();"}, {"sha": "d0ea60666d180c83b8a3c2085ab0fbe8bef49380", "filename": "src/vtable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b4c34c540db66fd13b63037109528eeb97146b/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=29b4c34c540db66fd13b63037109528eeb97146b", "patch": "@@ -64,9 +64,7 @@ pub fn get_vtable<'a, 'tcx: 'a>(\n     };\n \n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-    fx.bcx\n-        .ins()\n-        .global_value(fx.pointer_type, local_data_id)\n+    fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n }\n \n fn build_vtable<'a, 'tcx: 'a>("}]}