{"sha": "2e907a3ac2fcaa799f570e07c35f54efae39829b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOTA3YTNhYzJmY2FhNzk5ZjU3MGUwN2MzNWY1NGVmYWUzOTgyOWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-08T23:07:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-08T23:16:32Z"}, "message": "core: Remove all but one drop block in favor of `finally`", "tree": {"sha": "50bb377deafe87db4ba3b42a30bada5c3979f802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50bb377deafe87db4ba3b42a30bada5c3979f802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e907a3ac2fcaa799f570e07c35f54efae39829b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e907a3ac2fcaa799f570e07c35f54efae39829b", "html_url": "https://github.com/rust-lang/rust/commit/2e907a3ac2fcaa799f570e07c35f54efae39829b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e907a3ac2fcaa799f570e07c35f54efae39829b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0f62850107edab30e51c1e31c8b0c7e443f972", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0f62850107edab30e51c1e31c8b0c7e443f972", "html_url": "https://github.com/rust-lang/rust/commit/5a0f62850107edab30e51c1e31c8b0c7e443f972"}], "stats": {"total": 92, "additions": 23, "deletions": 69}, "files": [{"sha": "502efcf9dc6cb0c51334f54ea727ad4d9631bb4d", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 17, "deletions": 52, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2e907a3ac2fcaa799f570e07c35f54efae39829b/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e907a3ac2fcaa799f570e07c35f54efae39829b/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=2e907a3ac2fcaa799f570e07c35f54efae39829b", "patch": "@@ -42,6 +42,7 @@ use result;\n use task::rt::{task_id, sched_id, rust_task};\n use util;\n use util::replace;\n+use unstable::finally::Finally;\n \n #[cfg(test)] use comm::SharedChan;\n \n@@ -565,51 +566,27 @@ pub fn get_scheduler() -> Scheduler {\n  * ~~~\n  */\n pub unsafe fn unkillable<U>(f: &fn() -> U) -> U {\n-    struct AllowFailure {\n-        t: *rust_task,\n-        drop {\n-            unsafe {\n-                rt::rust_task_allow_kill(self.t);\n-            }\n-        }\n-    }\n-\n-    fn AllowFailure(t: *rust_task) -> AllowFailure{\n-        AllowFailure {\n-            t: t\n-        }\n-    }\n-\n     unsafe {\n         let t = rt::rust_get_task();\n-        let _allow_failure = AllowFailure(t);\n         rt::rust_task_inhibit_kill(t);\n-        f()\n+        do (|| {\n+            f()\n+        }).finally {\n+            rt::rust_task_allow_kill(t);\n+        }\n     }\n }\n \n /// The inverse of unkillable. Only ever to be used nested in unkillable().\n pub unsafe fn rekillable<U>(f: &fn() -> U) -> U {\n-    struct DisallowFailure {\n-        t: *rust_task,\n-        drop {\n-            unsafe {\n-                rt::rust_task_inhibit_kill(self.t);\n-            }\n-        }\n-    }\n-\n-    fn DisallowFailure(t: *rust_task) -> DisallowFailure {\n-        DisallowFailure {\n-            t: t\n-        }\n-    }\n-\n     unsafe {\n         let t = rt::rust_get_task();\n-        let _allow_failure = DisallowFailure(t);\n         rt::rust_task_allow_kill(t);\n-        f()\n+        do (|| {\n+            f()\n+        }).finally {\n+            rt::rust_task_inhibit_kill(t);\n+        }\n     }\n }\n \n@@ -618,28 +595,16 @@ pub unsafe fn rekillable<U>(f: &fn() -> U) -> U {\n  * For use with exclusive ARCs, which use pthread mutexes directly.\n  */\n pub unsafe fn atomically<U>(f: &fn() -> U) -> U {\n-    struct DeferInterrupts {\n-        t: *rust_task,\n-        drop {\n-            unsafe {\n-                rt::rust_task_allow_yield(self.t);\n-                rt::rust_task_allow_kill(self.t);\n-            }\n-        }\n-    }\n-\n-    fn DeferInterrupts(t: *rust_task) -> DeferInterrupts {\n-        DeferInterrupts {\n-            t: t\n-        }\n-    }\n-\n     unsafe {\n         let t = rt::rust_get_task();\n-        let _interrupts = DeferInterrupts(t);\n         rt::rust_task_inhibit_kill(t);\n         rt::rust_task_inhibit_yield(t);\n-        f()\n+        do (|| {\n+            f()\n+        }).finally {\n+            rt::rust_task_allow_yield(t);\n+            rt::rust_task_allow_kill(t);\n+        }\n     }\n }\n "}, {"sha": "9ccce0cfe7654745e29840cf53755a2dc5a38f28", "filename": "src/libcore/unstable.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2e907a3ac2fcaa799f570e07c35f54efae39829b/src%2Flibcore%2Funstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e907a3ac2fcaa799f570e07c35f54efae39829b/src%2Flibcore%2Funstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable.rs?ref=2e907a3ac2fcaa799f570e07c35f54efae39829b", "patch": "@@ -16,6 +16,7 @@ use comm::{GenericChan, GenericPort};\n use prelude::*;\n use task;\n use task::atomically;\n+use self::finally::Finally;\n \n #[path = \"unstable/at_exit.rs\"]\n pub mod at_exit;\n@@ -229,25 +230,13 @@ fn LittleLock() -> LittleLock {\n pub impl LittleLock {\n     #[inline(always)]\n     unsafe fn lock<T>(&self, f: &fn() -> T) -> T {\n-        struct Unlock {\n-            l: rust_little_lock,\n-            drop {\n-                unsafe {\n-                    rustrt::rust_unlock_little_lock(self.l);\n-                }\n-            }\n-        }\n-\n-        fn Unlock(l: rust_little_lock) -> Unlock {\n-            Unlock {\n-                l: l\n-            }\n-        }\n-\n         do atomically {\n             rustrt::rust_lock_little_lock(self.l);\n-            let _r = Unlock(self.l);\n-            f()\n+            do (|| {\n+                f()\n+            }).finally {\n+                rustrt::rust_unlock_little_lock(self.l);\n+            }\n         }\n     }\n }"}]}