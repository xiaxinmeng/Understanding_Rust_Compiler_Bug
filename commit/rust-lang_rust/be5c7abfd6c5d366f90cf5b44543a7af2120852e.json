{"sha": "be5c7abfd6c5d366f90cf5b44543a7af2120852e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNWM3YWJmZDZjNWQzNjZmOTBjZjViNDQ1NDNhN2FmMjEyMDg1MmU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-14T20:19:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-14T20:19:22Z"}, "message": "Rollup merge of #74211 - estebank:struct-pat-as-unit, r=petrochenkov\n\nStructured suggestion when not using struct pattern\n\nr? @petrochenkov", "tree": {"sha": "41bdbb37318928e26a6576bd374cfcd465ec81a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41bdbb37318928e26a6576bd374cfcd465ec81a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be5c7abfd6c5d366f90cf5b44543a7af2120852e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDhNLCRBK7hj4Ov3rIwAAdHIIAFtcCggNaPCzcqTNqfN0pdv/\ne4gxT4LtLV0a9Dd4PfC1GTmoX340h2E2WVrSow67E2WMWDiwAEMnFW22jTMRqZv7\nExbVP45f48Yrf+crq3mpBBZt9YDVj9Akc1mjksMGHwKw6Qog1rzcFtrarcWzE8Rm\n8mfSTFqYHWWENKIT6zGlJqyB8mW4F2JdhopNEZskV34O0sSiSxc9gjS75eOStHrA\nfTgN6Nt0nSKFcF3H2rTp8MySZPD58btMYZpE2Hp+nALXOjwAlKTHQN/KM/DhMkU3\nu25Hn90JBsSkomeaI4vpZpeTG3KFj/vWj/zeshxCfyLqbSE8Az74E2yvDowUeUM=\n=7lBw\n-----END PGP SIGNATURE-----\n", "payload": "tree 41bdbb37318928e26a6576bd374cfcd465ec81a2\nparent 353df59893f4dc249f06047dca659b5b2172063f\nparent 04298204ed17eeed4d23aaa45fb0db9336e6583c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594757962 -0700\ncommitter GitHub <noreply@github.com> 1594757962 -0700\n\nRollup merge of #74211 - estebank:struct-pat-as-unit, r=petrochenkov\n\nStructured suggestion when not using struct pattern\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be5c7abfd6c5d366f90cf5b44543a7af2120852e", "html_url": "https://github.com/rust-lang/rust/commit/be5c7abfd6c5d366f90cf5b44543a7af2120852e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be5c7abfd6c5d366f90cf5b44543a7af2120852e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "353df59893f4dc249f06047dca659b5b2172063f", "url": "https://api.github.com/repos/rust-lang/rust/commits/353df59893f4dc249f06047dca659b5b2172063f", "html_url": "https://github.com/rust-lang/rust/commit/353df59893f4dc249f06047dca659b5b2172063f"}, {"sha": "04298204ed17eeed4d23aaa45fb0db9336e6583c", "url": "https://api.github.com/repos/rust-lang/rust/commits/04298204ed17eeed4d23aaa45fb0db9336e6583c", "html_url": "https://github.com/rust-lang/rust/commit/04298204ed17eeed4d23aaa45fb0db9336e6583c"}], "stats": {"total": 378, "additions": 239, "deletions": 139}, "files": [{"sha": "8db27babd058bd97bc74bed6708690cfd90edf62", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -300,9 +300,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Symbol>>) {\n-        if !field_names.is_empty() {\n-            self.r.field_names.insert(def_id, field_names);\n-        }\n+        self.r.field_names.insert(def_id, field_names);\n     }\n \n     fn block_needs_anonymous_module(&mut self, block: &Block) -> bool {\n@@ -1428,6 +1426,8 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let ctor_kind = CtorKind::from_ast(&variant.data);\n         let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);\n         self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));\n+        // Record field names for error reporting.\n+        self.insert_field_names_local(ctor_def_id, &variant.data);\n \n         visit::walk_variant(self, variant);\n     }"}, {"sha": "71c71fe4ce665d32ad3db9b262dbad63e66df6d3", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -184,7 +184,7 @@ crate enum PathSource<'a> {\n     // Paths in struct expressions and patterns `Path { .. }`.\n     Struct,\n     // Paths in tuple struct patterns `Path(..)`.\n-    TupleStruct,\n+    TupleStruct(Span),\n     // `m::A::B` in `<T as m::A>::B::C`.\n     TraitItem(Namespace),\n }\n@@ -193,7 +193,7 @@ impl<'a> PathSource<'a> {\n     fn namespace(self) -> Namespace {\n         match self {\n             PathSource::Type | PathSource::Trait(_) | PathSource::Struct => TypeNS,\n-            PathSource::Expr(..) | PathSource::Pat | PathSource::TupleStruct => ValueNS,\n+            PathSource::Expr(..) | PathSource::Pat | PathSource::TupleStruct(_) => ValueNS,\n             PathSource::TraitItem(ns) => ns,\n         }\n     }\n@@ -204,7 +204,7 @@ impl<'a> PathSource<'a> {\n             | PathSource::Expr(..)\n             | PathSource::Pat\n             | PathSource::Struct\n-            | PathSource::TupleStruct => true,\n+            | PathSource::TupleStruct(_) => true,\n             PathSource::Trait(_) | PathSource::TraitItem(..) => false,\n         }\n     }\n@@ -215,7 +215,7 @@ impl<'a> PathSource<'a> {\n             PathSource::Trait(_) => \"trait\",\n             PathSource::Pat => \"unit struct, unit variant or constant\",\n             PathSource::Struct => \"struct, variant or union type\",\n-            PathSource::TupleStruct => \"tuple struct or tuple variant\",\n+            PathSource::TupleStruct(_) => \"tuple struct or tuple variant\",\n             PathSource::TraitItem(ns) => match ns {\n                 TypeNS => \"associated type\",\n                 ValueNS => \"method or associated constant\",\n@@ -301,7 +301,7 @@ impl<'a> PathSource<'a> {\n                 | Res::SelfCtor(..) => true,\n                 _ => false,\n             },\n-            PathSource::TupleStruct => match res {\n+            PathSource::TupleStruct(_) => match res {\n                 Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) | Res::SelfCtor(..) => true,\n                 _ => false,\n             },\n@@ -336,8 +336,8 @@ impl<'a> PathSource<'a> {\n             (PathSource::Struct, false) => error_code!(E0422),\n             (PathSource::Expr(..), true) => error_code!(E0423),\n             (PathSource::Expr(..), false) => error_code!(E0425),\n-            (PathSource::Pat | PathSource::TupleStruct, true) => error_code!(E0532),\n-            (PathSource::Pat | PathSource::TupleStruct, false) => error_code!(E0531),\n+            (PathSource::Pat | PathSource::TupleStruct(_), true) => error_code!(E0532),\n+            (PathSource::Pat | PathSource::TupleStruct(_), false) => error_code!(E0531),\n             (PathSource::TraitItem(..), true) => error_code!(E0575),\n             (PathSource::TraitItem(..), false) => error_code!(E0576),\n         }\n@@ -1483,7 +1483,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     self.r.record_partial_res(pat.id, PartialRes::new(res));\n                 }\n                 PatKind::TupleStruct(ref path, ..) => {\n-                    self.smart_resolve_path(pat.id, None, path, PathSource::TupleStruct);\n+                    self.smart_resolve_path(pat.id, None, path, PathSource::TupleStruct(pat.span));\n                 }\n                 PatKind::Path(ref qself, ref path) => {\n                     self.smart_resolve_path(pat.id, qself.as_ref(), path, PathSource::Pat);"}, {"sha": "918b5941a795cd51ce6e8d0deb6156fd64fbfb7a", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -480,10 +480,12 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n \n         let mut bad_struct_syntax_suggestion = |def_id: DefId| {\n             let (followed_by_brace, closing_brace) = self.followed_by_brace(span);\n-            let mut suggested = false;\n+\n             match source {\n-                PathSource::Expr(Some(parent)) => {\n-                    suggested = path_sep(err, &parent);\n+                PathSource::Expr(Some(\n+                    parent @ Expr { kind: ExprKind::Field(..) | ExprKind::MethodCall(..), .. },\n+                )) => {\n+                    path_sep(err, &parent);\n                 }\n                 PathSource::Expr(None) if followed_by_brace => {\n                     if let Some(sp) = closing_brace {\n@@ -505,15 +507,56 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                             ),\n                         );\n                     }\n-                    suggested = true;\n                 }\n-                _ => {}\n-            }\n-            if !suggested {\n-                if let Some(span) = self.r.opt_span(def_id) {\n-                    err.span_label(span, &format!(\"`{}` defined here\", path_str));\n+                PathSource::Expr(\n+                    None | Some(Expr { kind: ExprKind::Call(..) | ExprKind::Path(..), .. }),\n+                )\n+                | PathSource::TupleStruct(_)\n+                | PathSource::Pat => {\n+                    let span = match &source {\n+                        PathSource::Expr(Some(Expr {\n+                            span, kind: ExprKind::Call(_, _), ..\n+                        }))\n+                        | PathSource::TupleStruct(span) => {\n+                            // We want the main underline to cover the suggested code as well for\n+                            // cleaner output.\n+                            err.set_span(*span);\n+                            *span\n+                        }\n+                        _ => span,\n+                    };\n+                    if let Some(span) = self.r.opt_span(def_id) {\n+                        err.span_label(span, &format!(\"`{}` defined here\", path_str));\n+                    }\n+                    let (tail, descr, applicability) = match source {\n+                        PathSource::Pat | PathSource::TupleStruct(_) => {\n+                            (\"\", \"pattern\", Applicability::MachineApplicable)\n+                        }\n+                        _ => (\": val\", \"literal\", Applicability::HasPlaceholders),\n+                    };\n+                    let (fields, applicability) = match self.r.field_names.get(&def_id) {\n+                        Some(fields) => (\n+                            fields\n+                                .iter()\n+                                .map(|f| format!(\"{}{}\", f.node, tail))\n+                                .collect::<Vec<String>>()\n+                                .join(\", \"),\n+                            applicability,\n+                        ),\n+                        None => (\"/* fields */\".to_string(), Applicability::HasPlaceholders),\n+                    };\n+                    let pad = match self.r.field_names.get(&def_id) {\n+                        Some(fields) if fields.is_empty() => \"\",\n+                        _ => \" \",\n+                    };\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\"use struct {} syntax instead\", descr),\n+                        format!(\"{} {{{pad}{}{pad}}}\", path_str, fields, pad = pad),\n+                        applicability,\n+                    );\n                 }\n-                err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\", path_str));\n+                _ => {}\n             }\n         };\n \n@@ -546,7 +589,10 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     return false;\n                 }\n             }\n-            (Res::Def(DefKind::Enum, def_id), PathSource::TupleStruct | PathSource::Expr(..)) => {\n+            (\n+                Res::Def(DefKind::Enum, def_id),\n+                PathSource::TupleStruct(_) | PathSource::Expr(..),\n+            ) => {\n                 if let Some(variants) = self.collect_enum_variants(def_id) {\n                     if !variants.is_empty() {\n                         let msg = if variants.len() == 1 {"}, {"sha": "c0ba9716fb001fad97a8c798c86bc6fae05a9785", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -6,14 +6,20 @@ LL | struct Empty1 {}\n ...\n LL |     let e1 = Empty1;\n    |              ^^^^^^\n-   |              |\n-   |              did you mean `Empty1 { /* fields */ }`?\n-   |              help: a unit struct with a similar name exists: `XEmpty2`\n    | \n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n    | ------------------- similarly named unit struct `XEmpty2` defined here\n+   |\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let e1 = XEmpty2;\n+   |              ^^^^^^^\n+help: use struct literal syntax instead\n+   |\n+LL |     let e1 = Empty1 {};\n+   |              ^^^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-expr.rs:16:14\n@@ -22,15 +28,16 @@ LL | struct Empty1 {}\n    | ---------------- `Empty1` defined here\n ...\n LL |     let e1 = Empty1();\n-   |              ^^^^^^\n-   |              |\n-   |              did you mean `Empty1 { /* fields */ }`?\n-   |              help: a unit struct with a similar name exists: `XEmpty2`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:2:1\n+   |              ^^^^^^^^\n    |\n-LL | pub struct XEmpty2;\n-   | ------------------- similarly named unit struct `XEmpty2` defined here\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let e1 = XEmpty2();\n+   |              ^^^^^^^\n+help: use struct literal syntax instead\n+   |\n+LL |     let e1 = Empty1 {};\n+   |              ^^^^^^^^^\n \n error[E0423]: expected value, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-expr.rs:18:14\n@@ -39,7 +46,7 @@ LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |     let e3 = E::Empty3;\n-   |              ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n+   |              ^^^^^^^^^ help: use struct literal syntax instead: `E::Empty3 {}`\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-expr.rs:19:14\n@@ -48,35 +55,42 @@ LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |     let e3 = E::Empty3();\n-   |              ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n+   |              ^^^^^^^^^^^ help: use struct literal syntax instead: `E::Empty3 {}`\n \n error[E0423]: expected value, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-expr.rs:22:15\n    |\n LL |     let xe1 = XEmpty1;\n    |               ^^^^^^^\n-   |               |\n-   |               did you mean `XEmpty1 { /* fields */ }`?\n-   |               help: a unit struct with a similar name exists: `XEmpty2`\n    | \n   ::: $DIR/auxiliary/empty-struct.rs:2:1\n    |\n LL | pub struct XEmpty2;\n    | ------------------- similarly named unit struct `XEmpty2` defined here\n+   |\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let xe1 = XEmpty2;\n+   |               ^^^^^^^\n+help: use struct literal syntax instead\n+   |\n+LL |     let xe1 = XEmpty1 {};\n+   |               ^^^^^^^^^^\n \n error[E0423]: expected function, tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-expr.rs:23:15\n    |\n LL |     let xe1 = XEmpty1();\n+   |               ^^^^^^^^^\n+   |\n+help: a unit struct with a similar name exists\n+   |\n+LL |     let xe1 = XEmpty2();\n    |               ^^^^^^^\n-   |               |\n-   |               did you mean `XEmpty1 { /* fields */ }`?\n-   |               help: a unit struct with a similar name exists: `XEmpty2`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:2:1\n+help: use struct literal syntax instead\n    |\n-LL | pub struct XEmpty2;\n-   | ------------------- similarly named unit struct `XEmpty2` defined here\n+LL |     let xe1 = XEmpty1 {};\n+   |               ^^^^^^^^^^\n \n error[E0599]: no variant or associated item named `Empty3` found for enum `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:25:19"}, {"sha": "b027c82f7dd37d600ebf8e705ddb6132993cf39c", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -5,21 +5,27 @@ LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |         E::Empty3 => ()\n-   |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n+   |         ^^^^^^^^^ help: use struct pattern syntax instead: `E::Empty3 {}`\n \n error[E0532]: expected unit struct, unit variant or constant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-1.rs:31:9\n    |\n LL |         XE::XEmpty3 => ()\n-   |         ^^^^-------\n-   |         |   |\n-   |         |   help: a unit variant with a similar name exists: `XEmpty4`\n-   |         did you mean `XE::XEmpty3 { /* fields */ }`?\n+   |         ^^^^^^^^^^^\n    | \n   ::: $DIR/auxiliary/empty-struct.rs:7:5\n    |\n LL |     XEmpty4,\n    |     ------- similarly named unit variant `XEmpty4` defined here\n+   |\n+help: a unit variant with a similar name exists\n+   |\n+LL |         XE::XEmpty4 => ()\n+   |             ^^^^^^^\n+help: use struct pattern syntax instead\n+   |\n+LL |         XE::XEmpty3 { /* fields */ } => ()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a53b88db7d1ed3725234d3bcd8d314e1583b9527", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.stderr", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -5,29 +5,31 @@ LL | struct Empty1 {}\n    | ---------------- `Empty1` defined here\n ...\n LL |         Empty1() => ()\n-   |         ^^^^^^\n-   |         |\n-   |         did you mean `Empty1 { /* fields */ }`?\n-   |         help: a tuple struct with a similar name exists: `XEmpty6`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n-   |\n-LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   |         ^^^^^^^^\n+   |\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6() => ()\n+   |         ^^^^^^^\n+help: use struct pattern syntax instead\n+   |\n+LL |         Empty1 {} => ()\n+   |         ^^^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:18:9\n    |\n LL |         XEmpty1() => ()\n+   |         ^^^^^^^^^\n+   |\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6() => ()\n    |         ^^^^^^^\n-   |         |\n-   |         did you mean `XEmpty1 { /* fields */ }`?\n-   |         help: a tuple struct with a similar name exists: `XEmpty6`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n-   |\n-LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+help: use struct pattern syntax instead\n+   |\n+LL |         XEmpty1 {} => ()\n+   |         ^^^^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:21:9\n@@ -36,29 +38,31 @@ LL | struct Empty1 {}\n    | ---------------- `Empty1` defined here\n ...\n LL |         Empty1(..) => ()\n-   |         ^^^^^^\n-   |         |\n-   |         did you mean `Empty1 { /* fields */ }`?\n-   |         help: a tuple struct with a similar name exists: `XEmpty6`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n-   |\n-LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+   |         ^^^^^^^^^^\n+   |\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6(..) => ()\n+   |         ^^^^^^^\n+help: use struct pattern syntax instead\n+   |\n+LL |         Empty1 {} => ()\n+   |         ^^^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:24:9\n    |\n LL |         XEmpty1(..) => ()\n+   |         ^^^^^^^^^^^\n+   |\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         XEmpty6(..) => ()\n    |         ^^^^^^^\n-   |         |\n-   |         did you mean `XEmpty1 { /* fields */ }`?\n-   |         help: a tuple struct with a similar name exists: `XEmpty6`\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:3:1\n-   |\n-LL | pub struct XEmpty6();\n-   | --------------------- similarly named tuple struct `XEmpty6` defined here\n+help: use struct pattern syntax instead\n+   |\n+LL |         XEmpty1 {} => ()\n+   |         ^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "93ace3eccef91aefa755d15ce52eea838dfc86b8", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -5,21 +5,22 @@ LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |         E::Empty3() => ()\n-   |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n+   |         ^^^^^^^^^^^ help: use struct pattern syntax instead: `E::Empty3 {}`\n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:21:9\n    |\n LL |         XE::XEmpty3() => ()\n-   |         ^^^^-------\n-   |         |   |\n-   |         |   help: a tuple variant with a similar name exists: `XEmpty5`\n-   |         did you mean `XE::XEmpty3 { /* fields */ }`?\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:8:5\n-   |\n-LL |     XEmpty5(),\n-   |     --------- similarly named tuple variant `XEmpty5` defined here\n+   |         ^^^^^^^^^^^^^\n+   |\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         XE::XEmpty5() => ()\n+   |             ^^^^^^^\n+help: use struct pattern syntax instead\n+   |\n+LL |         XE::XEmpty3 { /* fields */ } => ()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:25:9\n@@ -28,21 +29,22 @@ LL |     Empty3 {}\n    |     --------- `E::Empty3` defined here\n ...\n LL |         E::Empty3(..) => ()\n-   |         ^^^^^^^^^ did you mean `E::Empty3 { /* fields */ }`?\n+   |         ^^^^^^^^^^^^^ help: use struct pattern syntax instead: `E::Empty3 {}`\n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `XE::XEmpty3`\n   --> $DIR/empty-struct-braces-pat-3.rs:29:9\n    |\n LL |         XE::XEmpty3(..) => ()\n-   |         ^^^^-------\n-   |         |   |\n-   |         |   help: a tuple variant with a similar name exists: `XEmpty5`\n-   |         did you mean `XE::XEmpty3 { /* fields */ }`?\n-   | \n-  ::: $DIR/auxiliary/empty-struct.rs:8:5\n-   |\n-LL |     XEmpty5(),\n-   |     --------- similarly named tuple variant `XEmpty5` defined here\n+   |         ^^^^^^^^^^^^^^^\n+   |\n+help: a tuple variant with a similar name exists\n+   |\n+LL |         XE::XEmpty5(..) => ()\n+   |             ^^^^^^^\n+help: use struct pattern syntax instead\n+   |\n+LL |         XE::XEmpty3 { /* fields */ } => ()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "077367de9d847cb47af16ddb20e5d31bd9022abb", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -33,13 +33,16 @@ LL |     struct Foo { a: bool };\n    |     ---------------------- `Foo` defined here\n LL | \n LL |     let f = Foo();\n+   |             ^^^^^\n+   |\n+help: a function with a similar name exists\n+   |\n+LL |     let f = foo();\n    |             ^^^\n-   |             |\n-   |             did you mean `Foo { /* fields */ }`?\n-   |             help: a function with a similar name exists (notice the capitalization): `foo`\n-...\n-LL | fn foo() {\n-   | -------- similarly named function `foo` defined here\n+help: use struct literal syntax instead\n+   |\n+LL |     let f = Foo { a: val };\n+   |             ^^^^^^^^^^^^^^\n \n error[E0423]: expected value, found struct `T`\n   --> $DIR/E0423.rs:14:8"}, {"sha": "a54f1008e4ba9c9b915f935d38537b79ee42aa48", "filename": "src/test/ui/issues/issue-19086.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19086.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -5,7 +5,7 @@ LL |     FooB { x: i32, y: i32 }\n    |     ----------------------- `FooB` defined here\n ...\n LL |         FooB(a, b) => println!(\"{} {}\", a, b),\n-   |         ^^^^ did you mean `FooB { /* fields */ }`?\n+   |         ^^^^^^^^^^ help: use struct pattern syntax instead: `FooB { x, y }`\n \n error: aborting due to previous error\n "}, {"sha": "5f157f6e3c0895a17630f67fab27be876a45ebf6", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -23,7 +23,7 @@ error[E0423]: expected value, found struct `Vec`\n   --> $DIR/issue-34334.rs:2:13\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |             ^^^ did you mean `Vec { /* fields */ }`?\n+   |             ^^^ help: use struct literal syntax instead: `Vec { buf: val, len: val }`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-34334.rs:2:31"}, {"sha": "771a5c285aff8c578d49770ee811395dd3c4f527", "filename": "src/test/ui/issues/issue-63983.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-63983.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -14,7 +14,7 @@ LL |     Struct{ s: i32 },\n    |     ---------------- `MyEnum::Struct` defined here\n ...\n LL |         MyEnum::Struct => \"\",\n-   |         ^^^^^^^^^^^^^^ did you mean `MyEnum::Struct { /* fields */ }`?\n+   |         ^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `MyEnum::Struct { s }`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "12053d8a1291c3ae8ae3a089e370c7108ce35c3e", "filename": "src/test/ui/issues/issue-64792-bad-unicode-ctor.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -5,11 +5,16 @@ LL | struct X {}\n    | ----------- `X` defined here\n LL | \n LL | const Y: X = X(\"\u00f6\");\n-   | -------------^------\n-   | |            |\n-   | |            did you mean `X { /* fields */ }`?\n-   | |            help: a constant with a similar name exists: `Y`\n-   | similarly named constant `Y` defined here\n+   |              ^^^^^^\n+   |\n+help: a constant with a similar name exists\n+   |\n+LL | const Y: X = Y(\"\u00f6\");\n+   |              ^\n+help: use struct literal syntax instead\n+   |\n+LL | const Y: X = X {};\n+   |              ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "636789c9cc3004714f54843a4af0574e6b5834fc", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -51,12 +51,16 @@ LL |         TV(),\n    |         ---- similarly named tuple variant `TV` defined here\n ...\n LL |     check(m7::V);\n-   |           ^^^^^ did you mean `m7::V { /* fields */ }`?\n+   |           ^^^^^\n    |\n help: a tuple variant with a similar name exists\n    |\n LL |     check(m7::TV);\n    |               ^^\n+help: use struct literal syntax instead\n+   |\n+LL |     check(m7::V {});\n+   |           ^^^^^^^^\n help: consider importing one of these items instead\n    |\n LL | use m8::V;\n@@ -68,7 +72,7 @@ error[E0423]: expected value, found struct variant `xm7::V`\n   --> $DIR/namespace-mix.rs:106:11\n    |\n LL |     check(xm7::V);\n-   |           ^^^^^^ did you mean `xm7::V { /* fields */ }`?\n+   |           ^^^^^^\n    | \n   ::: $DIR/auxiliary/namespace-mix.rs:7:9\n    |\n@@ -79,6 +83,10 @@ help: a tuple variant with a similar name exists\n    |\n LL |     check(xm7::TV);\n    |                ^^\n+help: use struct literal syntax instead\n+   |\n+LL |     check(xm7::V { /* fields */ });\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n help: consider importing one of these items instead\n    |\n LL | use m8::V;"}, {"sha": "6986d966d69ecb9c00754cb45678b567a7dce264", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -16,7 +16,7 @@ LL |     Foo { a: usize, b: usize },\n    |     -------------------------- `Enum::Foo` defined here\n ...\n LL |         Enum::Foo(a, b) => {}\n-   |         ^^^^^^^^^ did you mean `Enum::Foo { /* fields */ }`?\n+   |         ^^^^^^^^^^^^^^^ help: use struct pattern syntax instead: `Enum::Foo { a, b }`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "13e7a59732db1562a16665b127c77a3cfc5ef9ef", "filename": "src/test/ui/resolve/issue-18252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -5,7 +5,7 @@ LL |     Variant { x: usize }\n    |     -------------------- `Foo::Variant` defined here\n ...\n LL |     let f = Foo::Variant(42);\n-   |             ^^^^^^^^^^^^ did you mean `Foo::Variant { /* fields */ }`?\n+   |             ^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `Foo::Variant { x: val }`\n \n error: aborting due to previous error\n "}, {"sha": "d1690d4eef7ef2fcb00b294fc4d362841564990f", "filename": "src/test/ui/resolve/issue-19452.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -5,13 +5,13 @@ LL |     Madoka { age: u32 }\n    |     ------------------- `Homura::Madoka` defined here\n ...\n LL |     let homura = Homura::Madoka;\n-   |                  ^^^^^^^^^^^^^^ did you mean `Homura::Madoka { /* fields */ }`?\n+   |                  ^^^^^^^^^^^^^^ help: use struct literal syntax instead: `Homura::Madoka { age: val }`\n \n error[E0423]: expected value, found struct variant `issue_19452_aux::Homura::Madoka`\n   --> $DIR/issue-19452.rs:13:18\n    |\n LL |     let homura = issue_19452_aux::Homura::Madoka;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `issue_19452_aux::Homura::Madoka { /* fields */ }`?\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `issue_19452_aux::Homura::Madoka { /* fields */ }`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c9b9aeb45ba42c582911f9c89164cfb5d8f34f46", "filename": "src/test/ui/resolve/issue-39226.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -6,9 +6,15 @@ LL | struct Handle {}\n ...\n LL |         handle: Handle\n    |                 ^^^^^^\n-   |                 |\n-   |                 did you mean `Handle { /* fields */ }`?\n-   |                 help: a local variable with a similar name exists: `handle`\n+   |\n+help: a local variable with a similar name exists\n+   |\n+LL |         handle: handle\n+   |                 ^^^^^^\n+help: use struct literal syntax instead\n+   |\n+LL |         handle: Handle {}\n+   |                 ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a118f94191df3647b132c610fb8487d812351e7f", "filename": "src/test/ui/resolve/issue-6702.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -7,7 +7,7 @@ LL | | }\n    | |_- `Monster` defined here\n ...\n LL |       let _m = Monster();\n-   |                ^^^^^^^ did you mean `Monster { /* fields */ }`?\n+   |                ^^^^^^^^^ help: use struct literal syntax instead: `Monster { damage: val }`\n \n error: aborting due to previous error\n "}, {"sha": "3904a00dde1dd5ead0d6271f70163c3e6020e3c8", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -44,7 +44,7 @@ LL | |             },\n    | |_____________- `Z::Struct` defined here\n ...\n LL |           let _: Z = Z::Struct;\n-   |                      ^^^^^^^^^ did you mean `Z::Struct { /* fields */ }`?\n+   |                      ^^^^^^^^^ help: use struct literal syntax instead: `Z::Struct { s: val }`\n \n error[E0423]: expected value, found enum `m::E`\n   --> $DIR/privacy-enum-ctor.rs:41:16\n@@ -83,7 +83,7 @@ LL | |         },\n    | |_________- `m::E::Struct` defined here\n ...\n LL |       let _: E = m::E::Struct;\n-   |                  ^^^^^^^^^^^^ did you mean `m::E::Struct { /* fields */ }`?\n+   |                  ^^^^^^^^^^^^ help: use struct literal syntax instead: `m::E::Struct { s: val }`\n \n error[E0423]: expected value, found enum `E`\n   --> $DIR/privacy-enum-ctor.rs:49:16\n@@ -115,7 +115,7 @@ LL | |         },\n    | |_________- `E::Struct` defined here\n ...\n LL |       let _: E = E::Struct;\n-   |                  ^^^^^^^^^ did you mean `E::Struct { /* fields */ }`?\n+   |                  ^^^^^^^^^ help: use struct literal syntax instead: `E::Struct { s: val }`\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:57:12\n@@ -195,7 +195,7 @@ LL | |             },\n    | |_____________- `m::n::Z::Struct` defined here\n ...\n LL |       let _: Z = m::n::Z::Struct;\n-   |                  ^^^^^^^^^^^^^^^ did you mean `m::n::Z::Struct { /* fields */ }`?\n+   |                  ^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `m::n::Z::Struct { s: val }`\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:68:12"}, {"sha": "a72f69cf1cd8d48a713069f3141e4d0602b684e3", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -25,7 +25,7 @@ LL | |     }\n    | |_____- `S2` defined here\n ...\n LL |       S2;\n-   |       ^^ did you mean `S2 { /* fields */ }`?\n+   |       ^^ help: use struct literal syntax instead: `S2 { s: val }`\n \n error[E0423]: expected value, found struct `xcrate::S`\n   --> $DIR/privacy-struct-ctor.rs:43:5"}, {"sha": "45309486db46ffaed203f1cc96af8407837c3aae", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -7,10 +7,16 @@ LL |     B { a: usize },\n    |     -------------- `E::B` defined here\n ...\n LL |     let _: E = E::B;\n-   |                ^^^-\n-   |                |  |\n-   |                |  help: a tuple variant with a similar name exists: `A`\n-   |                did you mean `E::B { /* fields */ }`?\n+   |                ^^^^\n+   |\n+help: a tuple variant with a similar name exists\n+   |\n+LL |     let _: E = E::A;\n+   |                   ^\n+help: use struct literal syntax instead\n+   |\n+LL |     let _: E = E::B { a: val };\n+   |                ^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:29:20"}, {"sha": "7f6f082d7a8d7ca9762e94a7b4a51aad1f743d61", "filename": "src/test/ui/suggestions/issue-61226.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -5,7 +5,7 @@ LL | struct X {}\n    | ----------- `X` defined here\n LL | fn main() {\n LL |     vec![X]; //\u2026\n-   |          ^ did you mean `X { /* fields */ }`?\n+   |          ^ help: use struct literal syntax instead: `X {}`\n \n error: aborting due to previous error\n "}, {"sha": "813d5d4fdb12b62c24b271fa6457c6d15865f498", "filename": "src/test/ui/xcrate/xcrate-unit-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be5c7abfd6c5d366f90cf5b44543a7af2120852e/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-unit-struct.stderr?ref=be5c7abfd6c5d366f90cf5b44543a7af2120852e", "patch": "@@ -2,7 +2,7 @@ error[E0423]: expected value, found struct `xcrate_unit_struct::StructWithFields\n   --> $DIR/xcrate-unit-struct.rs:9:13\n    |\n LL |     let _ = xcrate_unit_struct::StructWithFields;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `xcrate_unit_struct::StructWithFields { /* fields */ }`?\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `xcrate_unit_struct::StructWithFields { foo: val }`\n \n error: aborting due to previous error\n "}]}