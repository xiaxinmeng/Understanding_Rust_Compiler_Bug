{"sha": "0c34cab3db76d100ea7bbe4cd776f27b5f971d2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMzRjYWIzZGI3NmQxMDBlYTdiYmU0Y2Q3NzZmMjdiNWY5NzFkMmM=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-04-30T15:53:20Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-02T01:32:13Z"}, "message": "Take string slices", "tree": {"sha": "77478228cfd94e12a1384693280896265fe954a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77478228cfd94e12a1384693280896265fe954a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c34cab3db76d100ea7bbe4cd776f27b5f971d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c34cab3db76d100ea7bbe4cd776f27b5f971d2c", "html_url": "https://github.com/rust-lang/rust/commit/0c34cab3db76d100ea7bbe4cd776f27b5f971d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c34cab3db76d100ea7bbe4cd776f27b5f971d2c/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "941154721ef294149710597409a38294db2a6e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/941154721ef294149710597409a38294db2a6e07", "html_url": "https://github.com/rust-lang/rust/commit/941154721ef294149710597409a38294db2a6e07"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "970ee20bfcb76b517357e2059071e791802eedc2", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c34cab3db76d100ea7bbe4cd776f27b5f971d2c/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c34cab3db76d100ea7bbe4cd776f27b5f971d2c/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=0c34cab3db76d100ea7bbe4cd776f27b5f971d2c", "patch": "@@ -175,16 +175,16 @@ pub struct Session_ {\n pub type Session = @Session_;\n \n pub impl Session_ {\n-    fn span_fatal(@self, sp: span, msg: ~str) -> ! {\n+    fn span_fatal(@self, sp: span, msg: &str) -> ! {\n         self.span_diagnostic.span_fatal(sp, msg)\n     }\n-    fn fatal(@self, msg: ~str) -> ! {\n+    fn fatal(@self, msg: &str) -> ! {\n         self.span_diagnostic.handler().fatal(msg)\n     }\n-    fn span_err(@self, sp: span, msg: ~str) {\n+    fn span_err(@self, sp: span, msg: &str) {\n         self.span_diagnostic.span_err(sp, msg)\n     }\n-    fn err(@self, msg: ~str) {\n+    fn err(@self, msg: &str) {\n         self.span_diagnostic.handler().err(msg)\n     }\n     fn has_errors(@self) -> bool {\n@@ -193,31 +193,31 @@ pub impl Session_ {\n     fn abort_if_errors(@self) {\n         self.span_diagnostic.handler().abort_if_errors()\n     }\n-    fn span_warn(@self, sp: span, msg: ~str) {\n+    fn span_warn(@self, sp: span, msg: &str) {\n         self.span_diagnostic.span_warn(sp, msg)\n     }\n-    fn warn(@self, msg: ~str) {\n+    fn warn(@self, msg: &str) {\n         self.span_diagnostic.handler().warn(msg)\n     }\n-    fn span_note(@self, sp: span, msg: ~str) {\n+    fn span_note(@self, sp: span, msg: &str) {\n         self.span_diagnostic.span_note(sp, msg)\n     }\n-    fn note(@self, msg: ~str) {\n+    fn note(@self, msg: &str) {\n         self.span_diagnostic.handler().note(msg)\n     }\n-    fn span_bug(@self, sp: span, msg: ~str) -> ! {\n+    fn span_bug(@self, sp: span, msg: &str) -> ! {\n         self.span_diagnostic.span_bug(sp, msg)\n     }\n-    fn bug(@self, msg: ~str) -> ! {\n+    fn bug(@self, msg: &str) -> ! {\n         self.span_diagnostic.handler().bug(msg)\n     }\n-    fn span_unimpl(@self, sp: span, msg: ~str) -> ! {\n+    fn span_unimpl(@self, sp: span, msg: &str) -> ! {\n         self.span_diagnostic.span_unimpl(sp, msg)\n     }\n-    fn unimpl(@self, msg: ~str) -> ! {\n+    fn unimpl(@self, msg: &str) -> ! {\n         self.span_diagnostic.handler().unimpl(msg)\n     }\n-    fn span_lint_level(@self, level: lint::level, sp: span, msg: ~str) {\n+    fn span_lint_level(@self, level: lint::level, sp: span, msg: &str) {\n         match level {\n           lint::allow => { },\n           lint::warn => self.span_warn(sp, msg),\n@@ -230,7 +230,7 @@ pub impl Session_ {\n                  expr_id: ast::node_id,\n                  item_id: ast::node_id,\n                  span: span,\n-                 msg: ~str) {\n+                 msg: &str) {\n         let level = lint::get_lint_settings_level(\n             self.lint_settings, lint_mode, expr_id, item_id);\n         self.span_lint_level(level, span, msg);"}]}