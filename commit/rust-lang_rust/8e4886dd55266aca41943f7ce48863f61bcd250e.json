{"sha": "8e4886dd55266aca41943f7ce48863f61bcd250e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNDg4NmRkNTUyNjZhY2E0MTk0M2Y3Y2U0ODg2M2Y2MWJjZDI1MGU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-01-03T01:28:21Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-01-03T02:21:02Z"}, "message": "Revert `const_err` lint checking of casts\n\nReverts part of #67676", "tree": {"sha": "9487cb826dee4b0ca504fcf62567ac6b1819ceb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9487cb826dee4b0ca504fcf62567ac6b1819ceb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e4886dd55266aca41943f7ce48863f61bcd250e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4886dd55266aca41943f7ce48863f61bcd250e", "html_url": "https://github.com/rust-lang/rust/commit/8e4886dd55266aca41943f7ce48863f61bcd250e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e4886dd55266aca41943f7ce48863f61bcd250e/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a58f5864659ddfe1d95c122abaa75c88220aed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a58f5864659ddfe1d95c122abaa75c88220aed0", "html_url": "https://github.com/rust-lang/rust/commit/0a58f5864659ddfe1d95c122abaa75c88220aed0"}], "stats": {"total": 109, "additions": 18, "deletions": 91}, "files": [{"sha": "958239b76e488b5f498b46c1ea3586ef39e0c9a2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 63, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8e4886dd55266aca41943f7ce48863f61bcd250e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4886dd55266aca41943f7ce48863f61bcd250e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8e4886dd55266aca41943f7ce48863f61bcd250e", "patch": "@@ -12,10 +12,10 @@ use rustc::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n use rustc::mir::{\n-    read_only, AggregateKind, BasicBlock, BinOp, Body, BodyAndCache, CastKind, ClearCrossCrate,\n-    Constant, Local, LocalDecl, LocalKind, Location, Operand, Place, PlaceBase,\n-    ReadOnlyBodyAndCache, Rvalue, SourceInfo, SourceScope, SourceScopeData, Statement,\n-    StatementKind, Terminator, TerminatorKind, UnOp, RETURN_PLACE,\n+    read_only, AggregateKind, BasicBlock, BinOp, Body, BodyAndCache, ClearCrossCrate, Constant,\n+    Local, LocalDecl, LocalKind, Location, Operand, Place, PlaceBase, ReadOnlyBodyAndCache, Rvalue,\n+    SourceInfo, SourceScope, SourceScopeData, Statement, StatementKind, Terminator, TerminatorKind,\n+    UnOp, RETURN_PLACE,\n };\n use rustc::ty::layout::{\n     HasDataLayout, HasTyCtxt, LayoutError, LayoutOf, Size, TargetDataLayout, TyLayout,\n@@ -29,9 +29,9 @@ use syntax::ast::Mutability;\n \n use crate::const_eval::error_to_const_error;\n use crate::interpret::{\n-    self, intern_const_alloc_recursive, truncate, AllocId, Allocation, Frame, ImmTy, Immediate,\n-    InterpCx, LocalState, LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy,\n-    Pointer, ScalarMaybeUndef, StackPopCleanup,\n+    self, intern_const_alloc_recursive, AllocId, Allocation, Frame, ImmTy, Immediate, InterpCx,\n+    LocalState, LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer,\n+    ScalarMaybeUndef, StackPopCleanup,\n };\n use crate::rustc::ty::subst::Subst;\n use crate::transform::{MirPass, MirSource};\n@@ -539,57 +539,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         Some(())\n     }\n \n-    fn check_cast(\n-        &mut self,\n-        op: &Operand<'tcx>,\n-        ty: Ty<'tcx>,\n-        source_info: SourceInfo,\n-        place_layout: TyLayout<'tcx>,\n-    ) -> Option<()> {\n-        if !ty.is_integral() || !op.ty(&self.local_decls, self.tcx).is_integral() {\n-            return Some(());\n-        }\n-\n-        let value = self.use_ecx(source_info, |this| {\n-            this.ecx.read_immediate(this.ecx.eval_operand(op, None)?)\n-        })?;\n-\n-        // Do not try to read bits for ZSTs. This can occur when casting an enum with one variant\n-        // to an integer. Such enums are represented as ZSTs but still have a discriminant value\n-        // which can be casted.\n-        if value.layout.is_zst() {\n-            return Some(());\n-        }\n-\n-        let value_size = value.layout.size;\n-        let value_bits = value.to_scalar().and_then(|r| r.to_bits(value_size));\n-        if let Ok(value_bits) = value_bits {\n-            let truncated = truncate(value_bits, place_layout.size);\n-            if truncated != value_bits {\n-                let scope = source_info.scope;\n-                let lint_root = match &self.source_scopes[scope].local_data {\n-                    ClearCrossCrate::Set(data) => data.lint_root,\n-                    ClearCrossCrate::Clear => return None,\n-                };\n-                self.tcx.lint_hir(\n-                    ::rustc::lint::builtin::CONST_ERR,\n-                    lint_root,\n-                    source_info.span,\n-                    &format!(\n-                        \"truncating cast: the value {} requires {} bits but the target type is \\\n-                                          only {} bits\",\n-                        value_bits,\n-                        value_size.bits(),\n-                        place_layout.size.bits()\n-                    ),\n-                );\n-                return None;\n-            }\n-        }\n-\n-        Some(())\n-    }\n-\n     fn const_prop(\n         &mut self,\n         rvalue: &Rvalue<'tcx>,\n@@ -651,11 +600,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n             }\n \n-            Rvalue::Cast(CastKind::Misc, op, ty) => {\n-                trace!(\"checking Cast(Misc, {:?}, {:?})\", op, ty);\n-                self.check_cast(op, ty, source_info, place_layout)?;\n-            }\n-\n             _ => {}\n         }\n "}, {"sha": "8cc5b98250b5ae63aab41b3a90248a7dc582db89", "filename": "src/test/ui/consts/const-prop-overflowing-casts.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e4886dd55266aca41943f7ce48863f61bcd250e/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4886dd55266aca41943f7ce48863f61bcd250e/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.rs?ref=8e4886dd55266aca41943f7ce48863f61bcd250e", "patch": "@@ -1,9 +1,15 @@\n-// build-fail\n-// ignore-tidy-linelength\n+// check-pass\n+\n+enum Foo {\n+    Bar = -42,\n+    Baz = 42,\n+}\n \n fn main() {\n     let _ = 0u8 as u32;\n-    let _ = (1u32 << 31) as u16; //~ ERROR truncating cast: the value 2147483648 requires 32 bits but the target type is only 16 bits\n-    let _ = (1u16 << 15) as u8; //~ ERROR truncating cast: the value 32768 requires 16 bits but the target type is only 8 bits\n-    let _ = (!0u16) as u8; //~ ERROR truncating cast: the value 65535 requires 16 bits but the target type is only 8 bits\n+    let _ = (1u32 << 31) as u16;\n+    let _ = (1u16 << 15) as u8;\n+    let _ = (!0u16) as u8;\n+    let _ = (-1i16) as i8;\n+    let _ = (Foo::Bar) as i8;\n }"}, {"sha": "af4e2c7005afb7819e8597221c135ad54a8c8402", "filename": "src/test/ui/consts/const-prop-overflowing-casts.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0a58f5864659ddfe1d95c122abaa75c88220aed0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a58f5864659ddfe1d95c122abaa75c88220aed0/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-overflowing-casts.stderr?ref=0a58f5864659ddfe1d95c122abaa75c88220aed0", "patch": "@@ -1,22 +0,0 @@\n-error: truncating cast: the value 2147483648 requires 32 bits but the target type is only 16 bits\n-  --> $DIR/const-prop-overflowing-casts.rs:6:13\n-   |\n-LL |     let _ = (1u32 << 31) as u16;\n-   |             ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-\n-error: truncating cast: the value 32768 requires 16 bits but the target type is only 8 bits\n-  --> $DIR/const-prop-overflowing-casts.rs:7:13\n-   |\n-LL |     let _ = (1u16 << 15) as u8;\n-   |             ^^^^^^^^^^^^^^^^^^\n-\n-error: truncating cast: the value 65535 requires 16 bits but the target type is only 8 bits\n-  --> $DIR/const-prop-overflowing-casts.rs:8:13\n-   |\n-LL |     let _ = (!0u16) as u8;\n-   |             ^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "15f232e2c0f70cdae745538e4ae59223c25cb2ba", "filename": "src/test/ui/simd/simd-intrinsic-generic-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e4886dd55266aca41943f7ce48863f61bcd250e/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e4886dd55266aca41943f7ce48863f61bcd250e/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-cast.rs?ref=8e4886dd55266aca41943f7ce48863f61bcd250e", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(repr_simd, platform_intrinsics, concat_idents, test)]\n #![allow(non_camel_case_types)]\n-#![allow(const_err)] // the test macro casts i32s to i8 and u8 which causes lots of warnings\n \n extern crate test;\n "}]}