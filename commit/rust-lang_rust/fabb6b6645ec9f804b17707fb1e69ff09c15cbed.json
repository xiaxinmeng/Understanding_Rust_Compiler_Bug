{"sha": "fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYmI2YjY2NDVlYzlmODA0YjE3NzA3ZmIxZTY5ZmYwOWMxNWNiZWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-26T02:04:55Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-26T02:52:29Z"}, "message": "Rustup to rustc 1.22.0-nightly (6c476ce46 2017-09-25)", "tree": {"sha": "97c86373e6b5a39e3246f91b0092bbcae7e35ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97c86373e6b5a39e3246f91b0092bbcae7e35ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlnJwO0ACgkQO79NPi73\nn5gETw/+Pb3m27tN7Vh8f0pwMo5dg3Ela2nqyEACac4+YH2igUomJjTnqhHCIjxB\nF+GLX3pTwB275pU/yuq4IUBNYQS7aJj+3ujhW8A2/7I6pYHHjIYPCwRdObO/Zd7H\naC3J9GMumxsVY29Qi+5X1qyj8epdJZroySXqahgAH6JVUI70ybL9f7TH9YwKT53/\nwpR+vi1Z2h4/glMZTF3NBJywX/iENldFCnocJslWTzjXnBVA0SC8zcQBEF2AeXFo\njFUXcNss5bZMBw98m+TbziPrKFGYa1bOnnQQ8JqiZrrQX7zFDtLToGtfOR+ix6xQ\nUWIzyubSH/9w863X0/cgpnbd5IrQsOlU//GMH42fCADXy2xwZRIt5DL8VCxyGN1e\nrZ6MOLSCZ4nYc/qNULL7WY8ONQ6asrOpocBnkWbK2I6UZaDUJ9HR2voWmxnsM8bW\nAXVnrkRgrXCHTOhkpWq9xdFt96u8W96F9fNRHz3WqGjqoD2zHQmDYoT5f/bQUele\nO54Sf7BH9e+j2eJeQXp01V5AEff3KRlv9NwnSSe1TxZMLuyrcgGMUW/mKzi1qs7Y\n3hYI/34CDbwSVCYWNmMcX2yHgWOQDFeq76WnD6VVYlFwggBKwnr8+2AhZrvza4Ch\nrp44d4rAlu0Bw4vc6FFVqLtytsWWZVGfkuhGkACVDrxu1Nqrhkc=\n=exlU\n-----END PGP SIGNATURE-----", "payload": "tree 97c86373e6b5a39e3246f91b0092bbcae7e35ee3\nparent 8408d486585c9c8757d0e65ace1daabf3b0dfcd9\nauthor Manish Goregaokar <manishsmail@gmail.com> 1506391495 -0700\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1506394349 -0700\n\nRustup to rustc 1.22.0-nightly (6c476ce46 2017-09-25)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "html_url": "https://github.com/rust-lang/rust/commit/fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8408d486585c9c8757d0e65ace1daabf3b0dfcd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8408d486585c9c8757d0e65ace1daabf3b0dfcd9", "html_url": "https://github.com/rust-lang/rust/commit/8408d486585c9c8757d0e65ace1daabf3b0dfcd9"}], "stats": {"total": 113, "additions": 69, "deletions": 44}, "files": [{"sha": "16d636c68ab677a39939d760689e9d5451458f58", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "patch": "@@ -104,19 +104,20 @@ fn check_fn_inner<'a, 'tcx>(\n     for typ in &generics.ty_params {\n         for bound in &typ.bounds {\n             if let TraitTyParamBound(ref trait_ref, _) = *bound {\n-                let bounds = &trait_ref\n+                let params = &trait_ref\n                     .trait_ref\n                     .path\n                     .segments\n                     .last()\n                     .expect(\"a path must have at least one segment\")\n-                    .parameters\n-                    .lifetimes;\n-                for bound in bounds {\n-                    if bound.name.name() != \"'static\" && !bound.is_elided() {\n-                        return;\n+                    .parameters;\n+                if let Some(ref params) = *params {\n+                    for bound in &params.lifetimes {\n+                        if bound.name.name() != \"'static\" && !bound.is_elided() {\n+                            return;\n+                        }\n+                        bounds_lts.push(bound);\n                     }\n-                    bounds_lts.push(bound);\n                 }\n             }\n         }\n@@ -287,23 +288,24 @@ impl<'v, 't> RefVisitor<'v, 't> {\n     }\n \n     fn collect_anonymous_lifetimes(&mut self, qpath: &QPath, ty: &Ty) {\n-        let last_path_segment = &last_path_segment(qpath).parameters;\n-        if !last_path_segment.parenthesized && last_path_segment.lifetimes.is_empty() {\n-            let hir_id = self.cx.tcx.hir.node_to_hir_id(ty.id);\n-            match self.cx.tables.qpath_def(qpath, hir_id) {\n-                Def::TyAlias(def_id) | Def::Struct(def_id) => {\n-                    let generics = self.cx.tcx.generics_of(def_id);\n-                    for _ in generics.regions.as_slice() {\n-                        self.record(&None);\n-                    }\n-                },\n-                Def::Trait(def_id) => {\n-                    let trait_def = self.cx.tcx.trait_def(def_id);\n-                    for _ in &self.cx.tcx.generics_of(trait_def.def_id).regions {\n-                        self.record(&None);\n-                    }\n-                },\n-                _ => (),\n+        if let Some(ref last_path_segment) = last_path_segment(qpath).parameters {\n+            if !last_path_segment.parenthesized && last_path_segment.lifetimes.is_empty() {\n+                let hir_id = self.cx.tcx.hir.node_to_hir_id(ty.id);\n+                match self.cx.tables.qpath_def(qpath, hir_id) {\n+                    Def::TyAlias(def_id) | Def::Struct(def_id) => {\n+                        let generics = self.cx.tcx.generics_of(def_id);\n+                        for _ in generics.regions.as_slice() {\n+                            self.record(&None);\n+                        }\n+                    },\n+                    Def::Trait(def_id) => {\n+                        let trait_def = self.cx.tcx.trait_def(def_id);\n+                        for _ in &self.cx.tcx.generics_of(trait_def.def_id).regions {\n+                            self.record(&None);\n+                        }\n+                    },\n+                    _ => (),\n+                }\n             }\n         }\n     }"}, {"sha": "e35e1ab477c0e979d11896e26303310697ce20d6", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "patch": "@@ -100,7 +100,8 @@ fn expr_eq_name(expr: &Expr, id: ast::Name) -> bool {\n             let arg_segment = [\n                 PathSegment {\n                     name: id,\n-                    parameters: PathParameters::none(),\n+                    parameters: None,\n+                    infer_types: true,\n                 },\n             ];\n             !path.is_global() && path.segments[..] == arg_segment"}, {"sha": "6d3a3f39d1a2413622426412955afe2b7da203b8", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "patch": "@@ -1617,11 +1617,18 @@ fn is_as_ref_or_mut_trait(ty: &hir::Ty, self_ty: &hir::Ty, generics: &hir::Gener\n                         match_path(path, name) &&\n                             path.segments\n                                 .last()\n-                                .map_or(false, |s| if s.parameters.parenthesized {\n-                                    false\n-                                } else {\n-                                    s.parameters.types.len() == 1 &&\n-                                        (is_self_ty(&s.parameters.types[0]) || is_ty(&*s.parameters.types[0], self_ty))\n+                                .map_or(false, |s| {\n+                                    if let Some(ref params) = s.parameters {\n+                                        if params.parenthesized {\n+                                            false\n+                                        } else {\n+                                            params.types.len() == 1 &&\n+                                                (is_self_ty(&params.types[0])\n+                                                  || is_ty(&*params.types[0], self_ty))\n+                                        }\n+                                    } else {\n+                                        false\n+                                    }\n                                 })\n                     } else {\n                         false"}, {"sha": "35cbd6ff3dbfa074287b619f569dfdf3c303f65d", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "patch": "@@ -144,7 +144,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         let TyPath(QPath::Resolved(_, ref path)) = input.node,\n                         let Some(elem_ty) = path.segments.iter()\n                             .find(|seg| seg.name == \"Vec\")\n-                            .map(|ps| &ps.parameters.types[0]),\n+                            .and_then(|ref ps| ps.parameters.as_ref())\n+                            .map(|params| &params.types[0]),\n                     ], {\n                         let slice_ty = format!(\"&[{}]\", snippet(cx, elem_ty.span, \"_\"));\n                         db.span_suggestion(input.span,"}, {"sha": "03c94cbf3fbd747b5db7b51cb9bed6000be33b20", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "patch": "@@ -159,7 +159,7 @@ fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId, opt_body_id: Option<\n                 let mut ty_snippet = None;\n                 if_let_chain!([\n                     let TyPath(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).node,\n-                    let Some(&PathSegment{ref parameters, ..}) = path.segments.last(),\n+                    let Some(&PathSegment{parameters: Some(ref parameters), ..}) = path.segments.last(),\n                     parameters.types.len() == 1,\n                 ], {\n                     ty_snippet = snippet_opt(cx, parameters.types[0].span);"}, {"sha": "76110ecb152b33a3ca3b760e6748ccc0c9043d7d", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "patch": "@@ -194,8 +194,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n fn get_type_snippet(cx: &LateContext, path: &QPath, to_rty: Ty) -> String {\n     let seg = last_path_segment(path);\n     if_let_chain!{[\n-        !seg.parameters.parenthesized,\n-        let Some(to_ty) = seg.parameters.types.get(1),\n+        let Some(ref params) = seg.parameters,\n+        !params.parenthesized,\n+        let Some(to_ty) = params.types.get(1),\n         let TyRptr(_, ref to_ty) = to_ty.node,\n     ], {\n         return snippet(cx, to_ty.ty.span, &to_rty.to_string()).to_string();"}, {"sha": "50683d1fb4023832a7f599eaf9119d4d068caf2c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "patch": "@@ -154,8 +154,9 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                 if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                     let last = last_path_segment(qpath);\n                     if_let_chain! {[\n-                        !last.parameters.parenthesized,\n-                        let Some(vec) = last.parameters.types.get(0),\n+                        let Some(ref params) = last.parameters,\n+                        !params.parenthesized,\n+                        let Some(vec) = params.types.get(0),\n                         let TyPath(ref qpath) = vec.node,\n                         let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(vec.id))),\n                         match_def_path(cx.tcx, did, &paths::VEC),\n@@ -183,21 +184,25 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                     check_ty(cx, ty, is_local);\n                     for ty in p.segments\n                         .iter()\n-                        .flat_map(|seg| seg.parameters.types.iter())\n+                        .filter_map(|ref seg| seg.parameters.as_ref())\n+                        .flat_map(|ref params| params.types.iter())\n                     {\n                         check_ty(cx, ty, is_local);\n                     }\n                 },\n                 QPath::Resolved(None, ref p) => for ty in p.segments\n                     .iter()\n-                    .flat_map(|seg| seg.parameters.types.iter())\n+                    .filter_map(|ref seg| seg.parameters.as_ref())\n+                    .flat_map(|ref params| params.types.iter())\n                 {\n                     check_ty(cx, ty, is_local);\n                 },\n                 QPath::TypeRelative(ref ty, ref seg) => {\n                     check_ty(cx, ty, is_local);\n-                    for ty in seg.parameters.types.iter() {\n-                        check_ty(cx, ty, is_local);\n+                    if let Some(ref params) = seg.parameters {\n+                        for ty in params.types.iter() {\n+                            check_ty(cx, ty, is_local);\n+                        }\n                     }\n                 },\n             }\n@@ -212,8 +217,9 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                         Some(def_id) == cx.tcx.lang_items().owned_box(),\n                         let QPath::Resolved(None, ref path) = *qpath,\n                         let [ref bx] = *path.segments,\n-                        !bx.parameters.parenthesized,\n-                        let [ref inner] = *bx.parameters.types\n+                        let Some(ref params) = bx.parameters,\n+                        !params.parenthesized,\n+                        let [ref inner] = *params.types\n                     ], {\n                         if is_any_trait(inner) {\n                             // Ignore `Box<Any>` types, see #1884 for details."}, {"sha": "d4166f6a2bda423dd03229b573bcdac2adc4153c", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n             let Ty_::TyPath(QPath::Resolved(_, ref item_path)) = item_type.node,\n         ], {\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).parameters;\n-            if !parameters.parenthesized && parameters.lifetimes.len() == 0 {\n+            if parameters.is_none() {\n                 let visitor = &mut UseSelfVisitor {\n                     item_path: item_path,\n                     cx: cx,"}, {"sha": "f7867dfd0bd4ea22c8dfb9929f08afbd048e17d4", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabb6b6645ec9f804b17707fb1e69ff09c15cbed/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "patch": "@@ -214,7 +214,14 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     fn eq_path_segment(&self, left: &PathSegment, right: &PathSegment) -> bool {\n         // The == of idents doesn't work with different contexts,\n         // we have to be explicit about hygiene\n-        left.name.as_str() == right.name.as_str() && self.eq_path_parameters(&left.parameters, &right.parameters)\n+        if left.name.as_str() != right.name.as_str() {\n+            return false;\n+        }\n+        match (&left.parameters, &right.parameters) {\n+            (&None, &None) => true,\n+            (&Some(ref l), &Some(ref r)) => self.eq_path_parameters(l, r),\n+            _ => false\n+        }\n     }\n \n     fn eq_ty(&self, left: &Ty, right: &Ty) -> bool {"}]}