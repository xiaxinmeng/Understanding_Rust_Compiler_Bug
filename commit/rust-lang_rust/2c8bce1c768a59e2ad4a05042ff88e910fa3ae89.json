{"sha": "2c8bce1c768a59e2ad4a05042ff88e910fa3ae89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOGJjZTFjNzY4YTU5ZTJhZDRhMDUwNDJmZjg4ZTkxMGZhM2FlODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-13T11:36:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-13T11:36:36Z"}, "message": "auto merge of #12845 : eddyb/rust/vec-no-drop-flag, r=thestinger", "tree": {"sha": "7533c9c6262c79eaa09612cbee9aa9e0b75891ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7533c9c6262c79eaa09612cbee9aa9e0b75891ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c8bce1c768a59e2ad4a05042ff88e910fa3ae89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8bce1c768a59e2ad4a05042ff88e910fa3ae89", "html_url": "https://github.com/rust-lang/rust/commit/2c8bce1c768a59e2ad4a05042ff88e910fa3ae89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c8bce1c768a59e2ad4a05042ff88e910fa3ae89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b2607572d6233a1d4b4f7592573e49b505771e", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b2607572d6233a1d4b4f7592573e49b505771e", "html_url": "https://github.com/rust-lang/rust/commit/12b2607572d6233a1d4b4f7592573e49b505771e"}, {"sha": "500bade87e48eacf5cf14e236ca46bd434e542d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/500bade87e48eacf5cf14e236ca46bd434e542d6", "html_url": "https://github.com/rust-lang/rust/commit/500bade87e48eacf5cf14e236ca46bd434e542d6"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "33916d0e3bfe7d95c0e19734a165719b3f1a464d", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2c8bce1c768a59e2ad4a05042ff88e910fa3ae89/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8bce1c768a59e2ad4a05042ff88e910fa3ae89/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=2c8bce1c768a59e2ad4a05042ff88e910fa3ae89", "patch": "@@ -32,6 +32,7 @@ use raw::Slice;\n use vec::{ImmutableEqVector, ImmutableVector, Items, MutItems, MutableVector};\n use vec::{RevItems};\n \n+#[unsafe_no_drop_flag]\n pub struct Vec<T> {\n     priv len: uint,\n     priv cap: uint,\n@@ -585,6 +586,8 @@ pub fn append_one<T>(mut lhs: Vec<T>, x: T) -> Vec<T> {\n #[unsafe_destructor]\n impl<T> Drop for Vec<T> {\n     fn drop(&mut self) {\n+        // This is (and should always remain) a no-op if the fields are\n+        // zeroed (when moving out, because of #[unsafe_no_drop_flag]).\n         unsafe {\n             for x in self.as_mut_slice().iter() {\n                 ptr::read(x);\n@@ -649,7 +652,54 @@ impl<T> Drop for MoveItems<T> {\n mod tests {\n     use super::Vec;\n     use iter::{Iterator, range, Extendable};\n+    use mem::{drop, size_of};\n+    use ops::Drop;\n     use option::{Some, None};\n+    use ptr;\n+\n+    #[test]\n+    fn test_small_vec_struct() {\n+        assert!(size_of::<Vec<u8>>() == size_of::<uint>() * 3);\n+    }\n+\n+    #[test]\n+    fn test_double_drop() {\n+        struct TwoVec<T> {\n+            x: Vec<T>,\n+            y: Vec<T>\n+        }\n+\n+        struct DropCounter<'a> {\n+            count: &'a mut int\n+        }\n+\n+        #[unsafe_destructor]\n+        impl<'a> Drop for DropCounter<'a> {\n+            fn drop(&mut self) {\n+                *self.count += 1;\n+            }\n+        }\n+\n+        let mut count_x @ mut count_y = 0;\n+        {\n+            let mut tv = TwoVec {\n+                x: Vec::new(),\n+                y: Vec::new()\n+            };\n+            tv.x.push(DropCounter {count: &mut count_x});\n+            tv.y.push(DropCounter {count: &mut count_y});\n+\n+            // If Vec had a drop flag, here is where it would be zeroed.\n+            // Instead, it should rely on its internal state to prevent\n+            // doing anything significant when dropped multiple times.\n+            drop(tv.x);\n+\n+            // Here tv goes out of scope, tv.y should be dropped, but not tv.x.\n+        }\n+\n+        assert_eq!(count_x, 1);\n+        assert_eq!(count_y, 1);\n+    }\n \n     #[test]\n     fn test_reserve_additional() {"}]}