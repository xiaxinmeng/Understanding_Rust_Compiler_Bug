{"sha": "cea84427e00ad76b8400d45a84347b65d27dcef3", "node_id": "C_kwDOAAsO6NoAKGNlYTg0NDI3ZTAwYWQ3NmI4NDAwZDQ1YTg0MzQ3YjY1ZDI3ZGNlZjM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-26T20:12:22Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-28T11:43:21Z"}, "message": "Allow setting cfgs", "tree": {"sha": "d0d7994efb6c32cfb4523b355c77d4c998806c89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0d7994efb6c32cfb4523b355c77d4c998806c89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cea84427e00ad76b8400d45a84347b65d27dcef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cea84427e00ad76b8400d45a84347b65d27dcef3", "html_url": "https://github.com/rust-lang/rust/commit/cea84427e00ad76b8400d45a84347b65d27dcef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cea84427e00ad76b8400d45a84347b65d27dcef3/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8c18cb6e757e24f968e51b26d39d4a442005aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8c18cb6e757e24f968e51b26d39d4a442005aa", "html_url": "https://github.com/rust-lang/rust/commit/ee8c18cb6e757e24f968e51b26d39d4a442005aa"}], "stats": {"total": 162, "additions": 73, "deletions": 89}, "files": [{"sha": "495119d5519c347bbf76de046397b1d51c9b760b", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=cea84427e00ad76b8400d45a84347b65d27dcef3", "patch": "@@ -86,7 +86,7 @@ impl CfgOptions {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Default, Clone, Debug, PartialEq, Eq)]\n pub struct CfgDiff {\n     // Invariants: No duplicates, no atom that's both in `enable` and `disable`.\n     enable: Vec<CfgAtom>,"}, {"sha": "671760d4deb83f948f93bf844e7625ebcdc8d784", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=cea84427e00ad76b8400d45a84347b65d27dcef3", "patch": "@@ -1,6 +1,5 @@\n //! See [`CargoWorkspace`].\n \n-use std::iter;\n use std::path::PathBuf;\n use std::str::from_utf8;\n use std::{ops, process::Command};\n@@ -58,20 +57,6 @@ pub enum RustLibSource {\n     Discover,\n }\n \n-/// Crates to disable `#[cfg(test)]` on.\n-#[derive(Clone, Debug, PartialEq, Eq)]\n-pub enum UnsetTestCrates {\n-    None,\n-    Only(Vec<String>),\n-    All,\n-}\n-\n-impl Default for UnsetTestCrates {\n-    fn default() -> Self {\n-        Self::None\n-    }\n-}\n-\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum CargoFeatures {\n     All,\n@@ -100,8 +85,7 @@ pub struct CargoConfig {\n     pub sysroot_src: Option<AbsPathBuf>,\n     /// rustc private crate source\n     pub rustc_source: Option<RustLibSource>,\n-    /// crates to disable `#[cfg(test)]` on\n-    pub unset_test_crates: UnsetTestCrates,\n+    pub cfg_overrides: CfgOverrides,\n     /// Invoke `cargo check` through the RUSTC_WRAPPER.\n     pub wrap_rustc_in_build_scripts: bool,\n     /// The command to run instead of `cargo check` for building build scripts.\n@@ -114,27 +98,6 @@ pub struct CargoConfig {\n     pub invocation_location: InvocationLocation,\n }\n \n-impl CargoConfig {\n-    pub fn cfg_overrides(&self) -> CfgOverrides {\n-        match &self.unset_test_crates {\n-            UnsetTestCrates::None => CfgOverrides::Selective(iter::empty().collect()),\n-            UnsetTestCrates::Only(unset_test_crates) => CfgOverrides::Selective(\n-                unset_test_crates\n-                    .iter()\n-                    .cloned()\n-                    .zip(iter::repeat_with(|| {\n-                        cfg::CfgDiff::new(Vec::new(), vec![cfg::CfgAtom::Flag(\"test\".into())])\n-                            .unwrap()\n-                    }))\n-                    .collect(),\n-            ),\n-            UnsetTestCrates::All => CfgOverrides::Wildcard(\n-                cfg::CfgDiff::new(Vec::new(), vec![cfg::CfgAtom::Flag(\"test\".into())]).unwrap(),\n-            ),\n-        }\n-    }\n-}\n-\n pub type Package = Idx<PackageData>;\n \n pub type Target = Idx<TargetData>;"}, {"sha": "61acc646f81017350ac36a9ab55e55a251bd5adc", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=cea84427e00ad76b8400d45a84347b65d27dcef3", "patch": "@@ -44,7 +44,7 @@ pub use crate::{\n     build_scripts::WorkspaceBuildScripts,\n     cargo_workspace::{\n         CargoConfig, CargoFeatures, CargoWorkspace, Package, PackageData, PackageDependency,\n-        RustLibSource, Target, TargetData, TargetKind, UnsetTestCrates,\n+        RustLibSource, Target, TargetData, TargetKind,\n     },\n     manifest_path::ManifestPath,\n     project_json::{ProjectJson, ProjectJsonData},"}, {"sha": "7815b9dda77f2bf2842d1ca4e5f2086fce5681be", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=cea84427e00ad76b8400d45a84347b65d27dcef3", "patch": "@@ -158,9 +158,10 @@ fn check_crate_graph(crate_graph: CrateGraph, expect: ExpectFile) {\n \n #[test]\n fn cargo_hello_world_project_model_with_wildcard_overrides() {\n-    let cfg_overrides = CfgOverrides::Wildcard(\n-        CfgDiff::new(Vec::new(), vec![CfgAtom::Flag(\"test\".into())]).unwrap(),\n-    );\n+    let cfg_overrides = CfgOverrides {\n+        global: CfgDiff::new(Vec::new(), vec![CfgAtom::Flag(\"test\".into())]).unwrap(),\n+        selective: Default::default(),\n+    };\n     let (crate_graph, _proc_macros) =\n         load_cargo_with_overrides(\"hello-world-metadata.json\", cfg_overrides);\n     check_crate_graph(\n@@ -173,14 +174,13 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n \n #[test]\n fn cargo_hello_world_project_model_with_selective_overrides() {\n-    let cfg_overrides = {\n-        CfgOverrides::Selective(\n-            std::iter::once((\n-                \"libc\".to_owned(),\n-                CfgDiff::new(Vec::new(), vec![CfgAtom::Flag(\"test\".into())]).unwrap(),\n-            ))\n-            .collect(),\n-        )\n+    let cfg_overrides = CfgOverrides {\n+        global: Default::default(),\n+        selective: std::iter::once((\n+            \"libc\".to_owned(),\n+            CfgDiff::new(Vec::new(), vec![CfgAtom::Flag(\"test\".into())]).unwrap(),\n+        ))\n+        .collect(),\n     };\n     let (crate_graph, _proc_macros) =\n         load_cargo_with_overrides(\"hello-world-metadata.json\", cfg_overrides);"}, {"sha": "a695bc1cca78c02a728e0ffdc2c7504e85c021eb", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=cea84427e00ad76b8400d45a84347b65d27dcef3", "patch": "@@ -28,29 +28,17 @@ use crate::{\n };\n \n /// A set of cfg-overrides per crate.\n-///\n-/// `Wildcard(..)` is useful e.g. disabling `#[cfg(test)]` on all crates,\n-/// without having to first obtain a list of all crates.\n-#[derive(Debug, Clone, Eq, PartialEq)]\n-pub enum CfgOverrides {\n-    /// A single global set of overrides matching all crates.\n-    Wildcard(CfgDiff),\n+#[derive(Default, Debug, Clone, Eq, PartialEq)]\n+pub struct CfgOverrides {\n+    /// A global set of overrides matching all crates.\n+    pub global: CfgDiff,\n     /// A set of overrides matching specific crates.\n-    Selective(FxHashMap<String, CfgDiff>),\n-}\n-\n-impl Default for CfgOverrides {\n-    fn default() -> Self {\n-        Self::Selective(FxHashMap::default())\n-    }\n+    pub selective: FxHashMap<String, CfgDiff>,\n }\n \n impl CfgOverrides {\n     pub fn len(&self) -> usize {\n-        match self {\n-            CfgOverrides::Wildcard(_) => 1,\n-            CfgOverrides::Selective(hash_map) => hash_map.len(),\n-        }\n+        self.global.len() + self.selective.iter().map(|(_, it)| it.len()).sum::<usize>()\n     }\n }\n \n@@ -292,7 +280,7 @@ impl ProjectWorkspace {\n                 let rustc_cfg =\n                     rustc_cfg::get(Some(&cargo_toml), config.target.as_deref(), &config.extra_env);\n \n-                let cfg_overrides = config.cfg_overrides();\n+                let cfg_overrides = config.cfg_overrides.clone();\n                 let data_layout = target_data_layout::get(\n                     Some(&cargo_toml),\n                     config.target.as_deref(),\n@@ -886,20 +874,18 @@ fn cargo_to_crate_graph(\n                 cfg_options.insert_atom(\"test\".into());\n             }\n \n-            let overrides = match override_cfg {\n-                CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n-                CfgOverrides::Selective(cfg_overrides) => cfg_overrides.get(&cargo[pkg].name),\n+            if !override_cfg.global.is_empty() {\n+                cfg_options.apply_diff(override_cfg.global.clone());\n             };\n-\n-            if let Some(overrides) = overrides {\n+            if let Some(diff) = override_cfg.selective.get(&cargo[pkg].name) {\n                 // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n                 // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n                 // working on rust-lang/rust as that's the only time it appears outside sysroot).\n                 //\n                 // A more ideal solution might be to reanalyze crates based on where the cursor is and\n                 // figure out the set of cfgs that would have to apply to make it active.\n \n-                cfg_options.apply_diff(overrides.clone());\n+                cfg_options.apply_diff(diff.clone());\n             };\n             cfg_options\n         });\n@@ -1109,22 +1095,18 @@ fn handle_rustc_crates(\n \n             let mut cfg_options = cfg_options.clone();\n \n-            let overrides = match override_cfg {\n-                CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n-                CfgOverrides::Selective(cfg_overrides) => {\n-                    cfg_overrides.get(&rustc_workspace[pkg].name)\n-                }\n+            if !override_cfg.global.is_empty() {\n+                cfg_options.apply_diff(override_cfg.global.clone());\n             };\n-\n-            if let Some(overrides) = overrides {\n+            if let Some(diff) = override_cfg.selective.get(&rustc_workspace[pkg].name) {\n                 // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n                 // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n                 // working on rust-lang/rust as that's the only time it appears outside sysroot).\n                 //\n                 // A more ideal solution might be to reanalyze crates based on where the cursor is and\n                 // figure out the set of cfgs that would have to apply to make it active.\n \n-                cfg_options.apply_diff(overrides.clone());\n+                cfg_options.apply_diff(diff.clone());\n             };\n \n             for &tgt in rustc_workspace[pkg].targets.iter() {"}, {"sha": "649ac90fc6e07a8ff978ad64b89fdfc220d3ee4b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cea84427e00ad76b8400d45a84347b65d27dcef3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=cea84427e00ad76b8400d45a84347b65d27dcef3", "patch": "@@ -9,6 +9,7 @@\n \n use std::{fmt, iter, ops::Not, path::PathBuf};\n \n+use cfg::{CfgAtom, CfgDiff};\n use flycheck::FlycheckConfig;\n use ide::{\n     AssistConfig, CallableSnippets, CompletionConfig, DiagnosticsConfig, ExprFillDefaultMode,\n@@ -23,7 +24,6 @@ use itertools::Itertools;\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{\n     CargoConfig, CargoFeatures, ProjectJson, ProjectJsonData, ProjectManifest, RustLibSource,\n-    UnsetTestCrates,\n };\n use rustc_hash::{FxHashMap, FxHashSet};\n use serde::{de::DeserializeOwned, Deserialize};\n@@ -101,6 +101,8 @@ config_data! {\n         /// Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n         /// avoid checking unnecessary things.\n         cargo_buildScripts_useRustcWrapper: bool = \"true\",\n+        /// List of cfg options to enable with the given values.\n+        cargo_cfgs: FxHashMap<String, String> = \"{}\",\n         /// Extra arguments that are passed to every cargo invocation.\n         cargo_extraArgs: Vec<String> = \"[]\",\n         /// Extra environment variables that will be set when running cargo, rustc\n@@ -128,7 +130,7 @@ config_data! {\n         // FIXME(@poliorcetics): move to multiple targets here too, but this will need more work\n         // than `checkOnSave_target`\n         cargo_target: Option<String>     = \"null\",\n-        /// Unsets `#[cfg(test)]` for the specified crates.\n+        /// Unsets the implicit `#[cfg(test)]` for the specified crates.\n         cargo_unsetTest: Vec<String>     = \"[\\\"core\\\"]\",\n \n         /// Run the check command for diagnostics on save.\n@@ -1189,7 +1191,34 @@ impl Config {\n             sysroot,\n             sysroot_src,\n             rustc_source,\n-            unset_test_crates: UnsetTestCrates::Only(self.data.cargo_unsetTest.clone()),\n+            cfg_overrides: project_model::CfgOverrides {\n+                global: CfgDiff::new(\n+                    self.data\n+                        .cargo_cfgs\n+                        .iter()\n+                        .map(|(key, val)| {\n+                            if val.is_empty() {\n+                                CfgAtom::Flag(key.into())\n+                            } else {\n+                                CfgAtom::KeyValue { key: key.into(), value: val.into() }\n+                            }\n+                        })\n+                        .collect(),\n+                    vec![],\n+                )\n+                .unwrap(),\n+                selective: self\n+                    .data\n+                    .cargo_unsetTest\n+                    .iter()\n+                    .map(|it| {\n+                        (\n+                            it.clone(),\n+                            CfgDiff::new(vec![], vec![CfgAtom::Flag(\"test\".into())]).unwrap(),\n+                        )\n+                    })\n+                    .collect(),\n+            },\n             wrap_rustc_in_build_scripts: self.data.cargo_buildScripts_useRustcWrapper,\n             invocation_strategy: match self.data.cargo_buildScripts_invocationStrategy {\n                 InvocationStrategy::Once => project_model::InvocationStrategy::Once,"}, {"sha": "dc97366eef1aaee18d65bdf6415d91a3637a54da", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cea84427e00ad76b8400d45a84347b65d27dcef3/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/cea84427e00ad76b8400d45a84347b65d27dcef3/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=cea84427e00ad76b8400d45a84347b65d27dcef3", "patch": "@@ -71,6 +71,11 @@ cargo check --quiet --workspace --message-format=json --all-targets\n Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\n avoid checking unnecessary things.\n --\n+[[rust-analyzer.cargo.cfgs]]rust-analyzer.cargo.cfgs (default: `{}`)::\n++\n+--\n+List of cfg options to enable with the given values.\n+--\n [[rust-analyzer.cargo.extraArgs]]rust-analyzer.cargo.extraArgs (default: `[]`)::\n +\n --\n@@ -120,7 +125,7 @@ Compilation target override (target triple).\n [[rust-analyzer.cargo.unsetTest]]rust-analyzer.cargo.unsetTest (default: `[\"core\"]`)::\n +\n --\n-Unsets `#[cfg(test)]` for the specified crates.\n+Unsets the implicit `#[cfg(test)]` for the specified crates.\n --\n [[rust-analyzer.checkOnSave]]rust-analyzer.checkOnSave (default: `true`)::\n +"}, {"sha": "aa63c40c0d29994aee2b34b54864c7ea1d77b379", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cea84427e00ad76b8400d45a84347b65d27dcef3/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/cea84427e00ad76b8400d45a84347b65d27dcef3/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=cea84427e00ad76b8400d45a84347b65d27dcef3", "patch": "@@ -553,6 +553,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.cargo.cfgs\": {\n+                    \"markdownDescription\": \"List of cfg options to enable with the given values.\",\n+                    \"default\": {},\n+                    \"type\": \"object\"\n+                },\n                 \"rust-analyzer.cargo.extraArgs\": {\n                     \"markdownDescription\": \"Extra arguments that are passed to every cargo invocation.\",\n                     \"default\": [],\n@@ -617,7 +622,7 @@\n                     ]\n                 },\n                 \"rust-analyzer.cargo.unsetTest\": {\n-                    \"markdownDescription\": \"Unsets `#[cfg(test)]` for the specified crates.\",\n+                    \"markdownDescription\": \"Unsets the implicit `#[cfg(test)]` for the specified crates.\",\n                     \"default\": [\n                         \"core\"\n                     ],"}]}