{"sha": "d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOThmYWE4NTU1ZDQ4YTliYzFkZTM0NTQyZmM2ZDFkZDVhMmFiOWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-21T00:36:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-21T00:36:13Z"}, "message": "tutorial: Clarify description of trait inheritance", "tree": {"sha": "aecc20ba8315bba0d0831420b2494e7a0d50269b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aecc20ba8315bba0d0831420b2494e7a0d50269b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c", "html_url": "https://github.com/rust-lang/rust/commit/d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21c9d0858b1ee0c6fe508a9eb1d229713a2649e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c9d0858b1ee0c6fe508a9eb1d229713a2649e4", "html_url": "https://github.com/rust-lang/rust/commit/21c9d0858b1ee0c6fe508a9eb1d229713a2649e4"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "e9ed83c8c737ff96edf5dfc988b9ee812260fecd", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=d098faa8555d48a9bc1de34542fc6d1dd5a2ab9c", "patch": "@@ -2127,15 +2127,15 @@ This usage of traits is similar to Java interfaces.\n \n We can write a trait declaration that _inherits_ from other traits, called _supertraits_.\n Types that implement a trait must also implement its supertraits.\n-\n-For example, we can define a `Circle` trait that only types that also have the `Shape` trait can have:\n+For example,\n+we can define a `Circle` trait that inherits from `Shape`.\n \n ~~~~\n trait Shape { fn area(&self) -> float; }\n trait Circle : Shape { fn radius(&self) -> float; }\n ~~~~\n \n-Now, implementations of `Circle` methods can call `Shape` methods:\n+Now, we can implement `Circle` on a type only if we also implement `Shape`.\n \n ~~~~\n # trait Shape { fn area(&self) -> float; }\n@@ -2153,6 +2153,8 @@ impl CircleStruct: Shape {\n }   \n ~~~~\n \n+Notice that methods of `Circle` can call methods on `Shape`, as our\n+`radius` implementation calls the `area` method.\n This is a silly way to compute the radius of a circle\n (since we could just return the `circle` field), but you get the idea.\n "}]}