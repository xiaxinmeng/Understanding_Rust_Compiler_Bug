{"sha": "86c2bb3c5be34c502634840da7cc8a147ac0e264", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YzJiYjNjNWJlMzRjNTAyNjM0ODQwZGE3Y2M4YTE0N2FjMGUyNjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-20T14:27:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-20T14:27:08Z"}, "message": "Merge #8602\n\n8602: Fix panic in `replace_derive_with_manual_impl` r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "8a10e6b84630bafb6b01944dff830a2d80add432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a10e6b84630bafb6b01944dff830a2d80add432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86c2bb3c5be34c502634840da7cc8a147ac0e264", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgfuS8CRBK7hj4Ov3rIwAA6wsIABiqzsRrR/NJ9Ks7+M/BcVtX\no9Zr0s305J3Ba8oMWPPJTa64YxSjzOCnGqAa6ZUaRnE9a1N0pyIiCM4EkJ/LUes+\nQOKvNR36kpCXBnVxqTBbRu8GrTZTcWfDYbgGUx8c6qci7fQ/RwHI72nqIkvwv9pT\nH1/ssfT5P7SajWmhwBGFukstHoFtGLHgvVKiAQq+wKEJ9Azq6nfnzkhqMGZsmjXg\n2qSgN/PyWi65oeEHh58NcBpHvCkBn48wmfuhlFw6OCmuyhBbkN8nLwN1X1eEOCLm\ns6fCMj786DTQjsp/fZIsTU2ydpzB+H3kN+IpspIDOIVbrSuXhL3lfMRZ+MRy498=\n=095e\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a10e6b84630bafb6b01944dff830a2d80add432\nparent da6902d1592441f595ab18bdb1cd2fa5fe10b883\nparent c0ad9b35814b6eb29d7cb4f3c38b84d21db4dec8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618928828 +0000\ncommitter GitHub <noreply@github.com> 1618928828 +0000\n\nMerge #8602\n\n8602: Fix panic in `replace_derive_with_manual_impl` r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86c2bb3c5be34c502634840da7cc8a147ac0e264", "html_url": "https://github.com/rust-lang/rust/commit/86c2bb3c5be34c502634840da7cc8a147ac0e264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86c2bb3c5be34c502634840da7cc8a147ac0e264/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da6902d1592441f595ab18bdb1cd2fa5fe10b883", "url": "https://api.github.com/repos/rust-lang/rust/commits/da6902d1592441f595ab18bdb1cd2fa5fe10b883", "html_url": "https://github.com/rust-lang/rust/commit/da6902d1592441f595ab18bdb1cd2fa5fe10b883"}, {"sha": "c0ad9b35814b6eb29d7cb4f3c38b84d21db4dec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ad9b35814b6eb29d7cb4f3c38b84d21db4dec8", "html_url": "https://github.com/rust-lang/rust/commit/c0ad9b35814b6eb29d7cb4f3c38b84d21db4dec8"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "694d897d15b2b30c607ef5c49a977f15031ad4f7", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/86c2bb3c5be34c502634840da7cc8a147ac0e264/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86c2bb3c5be34c502634840da7cc8a147ac0e264/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=86c2bb3c5be34c502634840da7cc8a147ac0e264", "patch": "@@ -47,6 +47,11 @@ pub(crate) fn replace_derive_with_manual_impl(\n         return None;\n     }\n \n+    if !args.syntax().text_range().contains(ctx.offset()) {\n+        cov_mark::hit!(outside_of_attr_args);\n+        return None;\n+    }\n+\n     let trait_token = args.syntax().token_at_offset(ctx.offset()).find(|t| t.kind() == IDENT)?;\n     let trait_name = trait_token.text();\n \n@@ -207,7 +212,7 @@ mod tests {\n     fn add_custom_impl_debug() {\n         check_assist(\n             replace_derive_with_manual_impl,\n-            \"\n+            r#\"\n mod fmt {\n     pub struct Error;\n     pub type Result = Result<(), Error>;\n@@ -221,8 +226,8 @@ mod fmt {\n struct Foo {\n     bar: String,\n }\n-\",\n-            \"\n+\"#,\n+            r#\"\n mod fmt {\n     pub struct Error;\n     pub type Result = Result<(), Error>;\n@@ -241,14 +246,14 @@ impl fmt::Debug for Foo {\n         ${0:todo!()}\n     }\n }\n-\",\n+\"#,\n         )\n     }\n     #[test]\n     fn add_custom_impl_all() {\n         check_assist(\n             replace_derive_with_manual_impl,\n-            \"\n+            r#\"\n mod foo {\n     pub trait Bar {\n         type Qux;\n@@ -263,8 +268,8 @@ mod foo {\n struct Foo {\n     bar: String,\n }\n-\",\n-            \"\n+\"#,\n+            r#\"\n mod foo {\n     pub trait Bar {\n         type Qux;\n@@ -290,110 +295,122 @@ impl foo::Bar for Foo {\n         todo!()\n     }\n }\n-\",\n+\"#,\n         )\n     }\n     #[test]\n     fn add_custom_impl_for_unique_input() {\n         check_assist(\n             replace_derive_with_manual_impl,\n-            \"\n+            r#\"\n #[derive(Debu$0g)]\n struct Foo {\n     bar: String,\n }\n-            \",\n-            \"\n+            \"#,\n+            r#\"\n struct Foo {\n     bar: String,\n }\n \n impl Debug for Foo {\n     $0\n }\n-            \",\n+            \"#,\n         )\n     }\n \n     #[test]\n     fn add_custom_impl_for_with_visibility_modifier() {\n         check_assist(\n             replace_derive_with_manual_impl,\n-            \"\n+            r#\"\n #[derive(Debug$0)]\n pub struct Foo {\n     bar: String,\n }\n-            \",\n-            \"\n+            \"#,\n+            r#\"\n pub struct Foo {\n     bar: String,\n }\n \n impl Debug for Foo {\n     $0\n }\n-            \",\n+            \"#,\n         )\n     }\n \n     #[test]\n     fn add_custom_impl_when_multiple_inputs() {\n         check_assist(\n             replace_derive_with_manual_impl,\n-            \"\n+            r#\"\n #[derive(Display, Debug$0, Serialize)]\n struct Foo {}\n-            \",\n-            \"\n+            \"#,\n+            r#\"\n #[derive(Display, Serialize)]\n struct Foo {}\n \n impl Debug for Foo {\n     $0\n }\n-            \",\n+            \"#,\n         )\n     }\n \n     #[test]\n     fn test_ignore_derive_macro_without_input() {\n         check_assist_not_applicable(\n             replace_derive_with_manual_impl,\n-            \"\n+            r#\"\n #[derive($0)]\n struct Foo {}\n-            \",\n+            \"#,\n         )\n     }\n \n     #[test]\n     fn test_ignore_if_cursor_on_param() {\n         check_assist_not_applicable(\n             replace_derive_with_manual_impl,\n-            \"\n+            r#\"\n #[derive$0(Debug)]\n struct Foo {}\n-            \",\n+            \"#,\n         );\n \n         check_assist_not_applicable(\n             replace_derive_with_manual_impl,\n-            \"\n+            r#\"\n #[derive(Debug)$0]\n struct Foo {}\n-            \",\n+            \"#,\n         )\n     }\n \n     #[test]\n     fn test_ignore_if_not_derive() {\n         check_assist_not_applicable(\n             replace_derive_with_manual_impl,\n-            \"\n+            r#\"\n #[allow(non_camel_$0case_types)]\n struct Foo {}\n-            \",\n+            \"#,\n         )\n     }\n+\n+    #[test]\n+    fn works_at_start_of_file() {\n+        cov_mark::check!(outside_of_attr_args);\n+        check_assist_not_applicable(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+$0#[derive(Debug)]\n+struct S;\n+            \"#,\n+        );\n+    }\n }"}]}