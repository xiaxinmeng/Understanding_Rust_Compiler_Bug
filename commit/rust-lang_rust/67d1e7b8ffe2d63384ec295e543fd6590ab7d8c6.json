{"sha": "67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6", "node_id": "C_kwDOAAsO6NoAKDY3ZDFlN2I4ZmZlMmQ2MzM4NGVjMjk1ZTU0M2ZkNjU5MGFiN2Q4YzY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-09T12:14:06Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-05-04T13:20:02Z"}, "message": "Improve Rc::new_cyclic and Arc::new_cyclic documentation", "tree": {"sha": "28b08cac2ca96fb79c1036fd3da6befad7aeed29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28b08cac2ca96fb79c1036fd3da6befad7aeed29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6", "html_url": "https://github.com/rust-lang/rust/commit/67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4b9a85634c17a60e8802307510c300a35a4b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4b9a85634c17a60e8802307510c300a35a4b9b", "html_url": "https://github.com/rust-lang/rust/commit/1a4b9a85634c17a60e8802307510c300a35a4b9b"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "c5b5ef684efa5670784ef5c57bfde265dd6c48e4", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6", "patch": "@@ -374,19 +374,26 @@ impl<T> Rc<T> {\n         }\n     }\n \n-    /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a\n-    /// weak reference to the constructing `Rc<T>`.\n+    /// Constructs a new `Rc<T>` while giving you a `Weak<T>` to the allocation,\n+    /// to allow you to construct a `T` which holds a weak pointer to itself.\n     ///\n     /// Generally, a structure circularly referencing itself, either directly or\n-    /// indirectly, should not hold a strong reference to prevent a memory leak.\n-    /// In `data_fn`, initialization of `T` can make use of the weak reference\n-    /// by cloning and storing it inside `T` for use at a later time.\n+    /// indirectly, should not hold a strong reference to itself to prevent a memory leak.\n+    /// Using this function, you get access to the weak pointer during the\n+    /// initialization of `T`, before the `Rc<T>` is created, such that you can\n+    /// clone and store it inside the `T`.\n+    ///\n+    /// `new_cyclic` first allocates the managed allocation for the `Rc<T>`,\n+    /// then calls your closure, giving it a `Weak<T>` to this allocation,\n+    /// and only afterwards completes the construction of the `Rc<T>` by placing\n+    /// the `T` returned from your closure into the allocation.\n     ///\n     /// Since the new `Rc<T>` is not fully-constructed until `Rc<T>::new_cyclic`\n-    /// returns, calling [`upgrade`] on the weak reference inside `data_fn` will\n+    /// returns, calling [`upgrade`] on the weak reference inside your closure will\n     /// fail and result in a `None` value.\n     ///\n     /// # Panics\n+    ///\n     /// If `data_fn` panics, the panic is propagated to the caller, and the\n     /// temporary [`Weak<T>`] is dropped normally.\n     ///\n@@ -403,7 +410,12 @@ impl<T> Rc<T> {\n     /// impl Gadget {\n     ///     /// Construct a reference counted Gadget.\n     ///     fn new() -> Rc<Self> {\n-    ///         Rc::new_cyclic(|me| Gadget { me: me.clone() })\n+    ///         // `me` is a `Weak<Gadget>` pointing at the new allocation of the\n+    ///         // `Rc` we're constructing.\n+    ///         Rc::new_cyclic(|me| {\n+    ///             // Create the actual struct here.\n+    ///             Gadget { me: me.clone() }\n+    ///         })\n     ///     }\n     ///\n     ///     /// Return a reference counted pointer to Self."}, {"sha": "83c92aaddca18bf16ffc002d4a3a126c71820bda", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=67d1e7b8ffe2d63384ec295e543fd6590ab7d8c6", "patch": "@@ -351,23 +351,31 @@ impl<T> Arc<T> {\n         unsafe { Self::from_inner(Box::leak(x).into()) }\n     }\n \n-    /// Constructs a new `Arc<T>` using a closure `data_fn` that has access to\n-    /// a weak reference to the constructing `Arc<T>`.\n+    /// Constructs a new `Arc<T>` while giving you a `Weak<T>` to the allocation,\n+    /// to allow you to construct a `T` which holds a weak pointer to itself.\n     ///\n     /// Generally, a structure circularly referencing itself, either directly or\n-    /// indirectly, should not hold a strong reference to prevent a memory leak.\n-    /// In `data_fn`, initialization of `T` can make use of the weak reference\n-    /// by cloning and storing it inside `T` for use at a later time.\n+    /// indirectly, should not hold a strong reference to itself to prevent a memory leak.\n+    /// Using this function, you get access to the weak pointer during the\n+    /// initialization of `T`, before the `Arc<T>` is created, such that you can\n+    /// clone and store it inside the `T`.\n     ///\n-    /// Since the new `Arc<T>` is not fully-constructed until\n-    /// `Arc<T>::new_cyclic` returns, calling [`upgrade`] on the weak\n-    /// reference inside `data_fn` will fail and result in a `None` value.\n+    /// `new_cyclic` first allocates the managed allocation for the `Arc<T>`,\n+    /// then calls your closure, giving it a `Weak<T>` to this allocation,\n+    /// and only afterwards completes the construction of the `Arc<T>` by placing\n+    /// the `T` returned from your closure into the allocation.\n+    ///\n+    /// Since the new `Arc<T>` is not fully-constructed until `Arc<T>::new_cyclic`\n+    /// returns, calling [`upgrade`] on the weak reference inside your closure will\n+    /// fail and result in a `None` value.\n     ///\n     /// # Panics\n+    ///\n     /// If `data_fn` panics, the panic is propagated to the caller, and the\n     /// temporary [`Weak<T>`] is dropped normally.\n     ///\n     /// # Example\n+    ///\n     /// ```\n     /// #![allow(dead_code)]\n     /// use std::sync::{Arc, Weak};\n@@ -379,7 +387,12 @@ impl<T> Arc<T> {\n     /// impl Gadget {\n     ///     /// Construct a reference counted Gadget.\n     ///     fn new() -> Arc<Self> {\n-    ///         Arc::new_cyclic(|me| Gadget { me: me.clone() })\n+    ///         // `me` is a `Weak<Gadget>` pointing at the new allocation of the\n+    ///         // `Arc` we're constructing.\n+    ///         Arc::new_cyclic(|me| {\n+    ///             // Create the actual struct here.\n+    ///             Gadget { me: me.clone() }\n+    ///         })\n     ///     }\n     ///\n     ///     /// Return a reference counted pointer to Self."}]}