{"sha": "2c4df2418c7b7c6d1f23e8d5257183015d4572aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNGRmMjQxOGM3YjdjNmQxZjIzZThkNTI1NzE4MzAxNWQ0NTcyYWE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-01-29T14:45:42Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-01T15:41:19Z"}, "message": "Small refactor of mutable_debug_assertions", "tree": {"sha": "386f36ff509294d39c9d1981f4ffeb7a02595e92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/386f36ff509294d39c9d1981f4ffeb7a02595e92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c4df2418c7b7c6d1f23e8d5257183015d4572aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl41nB8ACgkQaTCGhp1Q\nZjfO9w//fYhMo9yiyXBB9mxZMkdmlEtJPTlMYindWiy1IwTpeReuO5u9JIhmkJxU\nshfbdE1eHUX4Umupg6CGJNgELMJlcEw86W+eOtXC03rMYAIHanFdsTLk0ekrMA9E\ntJK/3Cf9qSBMceyqGuBhmRm2Ne4eU9jut+3Y245117ZRa81BxVWVZVH5kSewYbkQ\n0LOyuYB1AdMbF7rCF5JT6i7Uy2To/076SzLvHv+Pj9i3zqSg6fzWesbRQfoT1RsK\nd4Gsoq8VJk0KST0LhnQ304jk18ZkwFgOKbEkzKpyXyH98MX54K7wHqiYTjSwQNi0\n9WzjI+4KyAdATcNnHapcOixjGV2dRd0M/NXX8VHnJonmKhr5yG99SFJPkmQsx6KC\n03gmxCXwAjOBlNdiBVH9n0Vv5o3ipvr/RGZM5QKxd+Bxkt8K4iONUeTbM+EEhqFl\nPTHRPoaieDS9N8SGlC7U1Gh1Xlu5sa2WfzODyd235ru0iG9APCe68ABmJ+f5FGbl\nFyzC6W09vMaPOclQL6tNMWDGIOwyyJ6h+JO3rOkjQEBFonsAhWBcmO5xkYXBP+VT\nVcVyVxShyLmkCTitxy96RxmA3XRTNeLNkt75QKNXF8P2PuOVO0bZWE6KwP5qWKgB\ndSnU+dlP4so6+1Xf5v4N4r0gx6OE27hPn3B4L4UU02iSmNB9OeY=\n=fDUn\n-----END PGP SIGNATURE-----", "payload": "tree 386f36ff509294d39c9d1981f4ffeb7a02595e92\nparent fa046d2e7f14cda09d14230cc8c772e1565e0757\nauthor flip1995 <hello@philkrones.com> 1580309142 +0100\ncommitter flip1995 <hello@philkrones.com> 1580571679 +0100\n\nSmall refactor of mutable_debug_assertions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4df2418c7b7c6d1f23e8d5257183015d4572aa", "html_url": "https://github.com/rust-lang/rust/commit/2c4df2418c7b7c6d1f23e8d5257183015d4572aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c4df2418c7b7c6d1f23e8d5257183015d4572aa/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa046d2e7f14cda09d14230cc8c772e1565e0757", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa046d2e7f14cda09d14230cc8c772e1565e0757", "html_url": "https://github.com/rust-lang/rust/commit/fa046d2e7f14cda09d14230cc8c772e1565e0757"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "94ef61dcf592281c635cd3e79ed14f7d52cbff73", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2c4df2418c7b7c6d1f23e8d5257183015d4572aa/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4df2418c7b7c6d1f23e8d5257183015d4572aa/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=2c4df2418c7b7c6d1f23e8d5257183015d4572aa", "patch": "@@ -61,38 +61,38 @@ fn extract_call<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, e: &'tcx Expr<'_>) -> O\n         if block.stmts.len() == 1;\n         if let StmtKind::Semi(ref matchexpr) = block.stmts[0].kind;\n         then {\n+            // debug_assert\n             if_chain! {\n                 if let ExprKind::Match(ref ifclause, _, _) = matchexpr.kind;\n                 if let ExprKind::DropTemps(ref droptmp) = ifclause.kind;\n                 if let ExprKind::Unary(UnOp::UnNot, ref condition) = droptmp.kind;\n                 then {\n-                    // debug_assert\n                     let mut visitor = MutArgVisitor::new(cx);\n                     visitor.visit_expr(condition);\n                     return visitor.expr_span();\n-                } else {\n-                    // debug_assert_{eq,ne}\n-                    if_chain! {\n-                        if let ExprKind::Block(ref matchblock, _) = matchexpr.kind;\n-                        if let Some(ref matchheader) = matchblock.expr;\n-                        if let ExprKind::Match(ref headerexpr, _, _) = matchheader.kind;\n-                        if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n-                        if conditions.len() == 2;\n-                        then {\n-                            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref lhs) = conditions[0].kind {\n-                                let mut visitor = MutArgVisitor::new(cx);\n-                                visitor.visit_expr(lhs);\n-                                if let Some(span) = visitor.expr_span() {\n-                                    return Some(span);\n-                                }\n-                            }\n-                            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref rhs) = conditions[1].kind {\n-                                let mut visitor = MutArgVisitor::new(cx);\n-                                visitor.visit_expr(rhs);\n-                                if let Some(span) = visitor.expr_span() {\n-                                    return Some(span);\n-                                }\n-                            }\n+                }\n+            }\n+\n+            // debug_assert_{eq,ne}\n+            if_chain! {\n+                if let ExprKind::Block(ref matchblock, _) = matchexpr.kind;\n+                if let Some(ref matchheader) = matchblock.expr;\n+                if let ExprKind::Match(ref headerexpr, _, _) = matchheader.kind;\n+                if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n+                if conditions.len() == 2;\n+                then {\n+                    if let ExprKind::AddrOf(BorrowKind::Ref, _, ref lhs) = conditions[0].kind {\n+                        let mut visitor = MutArgVisitor::new(cx);\n+                        visitor.visit_expr(lhs);\n+                        if let Some(span) = visitor.expr_span() {\n+                            return Some(span);\n+                        }\n+                    }\n+                    if let ExprKind::AddrOf(BorrowKind::Ref, _, ref rhs) = conditions[1].kind {\n+                        let mut visitor = MutArgVisitor::new(cx);\n+                        visitor.visit_expr(rhs);\n+                        if let Some(span) = visitor.expr_span() {\n+                            return Some(span);\n                         }\n                     }\n                 }"}]}