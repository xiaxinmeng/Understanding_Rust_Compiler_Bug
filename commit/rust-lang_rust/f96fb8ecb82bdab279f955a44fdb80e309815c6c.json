{"sha": "f96fb8ecb82bdab279f955a44fdb80e309815c6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NmZiOGVjYjgyYmRhYjI3OWY5NTVhNDRmZGI4MGUzMDk4MTVjNmM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-15T12:58:36Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-15T12:58:36Z"}, "message": "Rollup merge of #22275 - steveklabnik:gh7538, r=huonw\n\n We use them in some places, but never actually talk about the syntax.", "tree": {"sha": "955af214b28699586507d98e3fa1be81180b5811", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/955af214b28699586507d98e3fa1be81180b5811"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f96fb8ecb82bdab279f955a44fdb80e309815c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f96fb8ecb82bdab279f955a44fdb80e309815c6c", "html_url": "https://github.com/rust-lang/rust/commit/f96fb8ecb82bdab279f955a44fdb80e309815c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f96fb8ecb82bdab279f955a44fdb80e309815c6c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33371bfc41349c4e127e10b71ef2891513079b9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/33371bfc41349c4e127e10b71ef2891513079b9c", "html_url": "https://github.com/rust-lang/rust/commit/33371bfc41349c4e127e10b71ef2891513079b9c"}, {"sha": "65eab6eb979ecaff246d618666151bf5317211fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/65eab6eb979ecaff246d618666151bf5317211fb", "html_url": "https://github.com/rust-lang/rust/commit/65eab6eb979ecaff246d618666151bf5317211fb"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "e212af5194b8e48d55776be1803e3a723f98b491", "filename": "src/doc/trpl/functions.md", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f96fb8ecb82bdab279f955a44fdb80e309815c6c/src%2Fdoc%2Ftrpl%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/f96fb8ecb82bdab279f955a44fdb80e309815c6c/src%2Fdoc%2Ftrpl%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ffunctions.md?ref=f96fb8ecb82bdab279f955a44fdb80e309815c6c", "patch": "@@ -2,7 +2,7 @@\n \n You've already seen one function so far, the `main` function:\n \n-```{rust}\n+```rust\n fn main() {\n }\n ```\n@@ -12,22 +12,22 @@ This is the simplest possible function declaration. As we mentioned before,\n this function takes no arguments, and then some curly braces to indicate the\n body. Here's a function named `foo`:\n \n-```{rust}\n+```rust\n fn foo() {\n }\n ```\n \n So, what about taking arguments? Here's a function that prints a number:\n \n-```{rust}\n+```rust\n fn print_number(x: i32) {\n     println!(\"x is: {}\", x);\n }\n ```\n \n Here's a complete program that uses `print_number`:\n \n-```{rust}\n+```rust\n fn main() {\n     print_number(5);\n }\n@@ -42,7 +42,7 @@ you add a type to the argument name, after a colon.\n \n Here's a complete program that adds two numbers together and prints them:\n \n-```{rust}\n+```rust\n fn main() {\n     print_sum(5, 6);\n }\n@@ -58,7 +58,7 @@ as when you declare it.\n Unlike `let`, you _must_ declare the types of function arguments. This does\n not work:\n \n-```{ignore}\n+```{rust,ignore}\n fn print_sum(x, y) {\n     println!(\"x is: {}\", x + y);\n }\n@@ -79,7 +79,7 @@ sweet spot between full inference and no inference.\n \n What about returning a value? Here's a function that adds one to an integer:\n \n-```{rust}\n+```rust\n fn add_one(x: i32) -> i32 {\n     x + 1\n }\n@@ -90,7 +90,7 @@ Rust functions return exactly one value, and you declare the type after an\n \n You'll note the lack of a semicolon here. If we added it in:\n \n-```{ignore}\n+```{rust,ignore}\n fn add_one(x: i32) -> i32 {\n     x + 1;\n }\n@@ -123,7 +123,7 @@ semicolon in a return position would cause a bug.\n \n But what about early returns? Rust does have a keyword for that, `return`:\n \n-```{rust}\n+```rust\n fn foo(x: i32) -> i32 {\n     if x < 5 { return x; }\n \n@@ -134,7 +134,7 @@ fn foo(x: i32) -> i32 {\n Using a `return` as the last line of a function works, but is considered poor\n style:\n \n-```{rust}\n+```rust\n fn foo(x: i32) -> i32 {\n     if x < 5 { return x; }\n \n@@ -160,5 +160,34 @@ fn foo(x: i32) -> i32 {\n Because `if` is an expression, and it's the only expression in this function,\n the value will be the result of the `if`.\n \n-There are some additional ways to define functions, but they involve features\n-that we haven't learned about yet, so let's just leave it at that for now.\n+## Diverging functions\n+\n+Rust has some special syntax for 'diverging functions', which are functions that\n+do not return:\n+\n+```\n+fn diverges() -> ! {\n+    panic!(\"This function never returns!\");\n+}\n+```\n+\n+`panic!` is a macro, similar to `println!()` that we've already seen. Unlike\n+`println!()`, `panic!()` causes the current thread of execution to crash with\n+the given message.\n+\n+Because this function will cause a crash, it will never return, and so it has\n+the type '`!`', which is read \"diverges.\" A diverging function can be used\n+as any type:\n+\n+```should_fail\n+# fn diverges() -> ! {\n+#    panic!(\"This function never returns!\");\n+# }\n+\n+let x: i32 = diverges();\n+let x: String = diverges();\n+```\n+\n+We don't have a good use for diverging functions yet, because they're used in\n+conjunction with other Rust features. But when you see `-> !` later, you'll\n+know what it's called."}]}