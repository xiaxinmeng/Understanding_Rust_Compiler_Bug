{"sha": "66636939a63237fb7a6d1198dd9f92514807621e", "node_id": "C_kwDOAAsO6NoAKDY2NjM2OTM5YTYzMjM3ZmI3YTZkMTE5OGRkOWY5MjUxNDgwNzYyMWU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-16T15:26:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-16T15:26:19Z"}, "message": "feat: Pop a notification prompting the user to add a Cargo.toml of unlinked file to the linkedProjects", "tree": {"sha": "6c014bbc33ffd5321206b598fd07623270babc15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c014bbc33ffd5321206b598fd07623270babc15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66636939a63237fb7a6d1198dd9f92514807621e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66636939a63237fb7a6d1198dd9f92514807621e", "html_url": "https://github.com/rust-lang/rust/commit/66636939a63237fb7a6d1198dd9f92514807621e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66636939a63237fb7a6d1198dd9f92514807621e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8330f8efc6c79455d9217ba4a9cff16091ca8da5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8330f8efc6c79455d9217ba4a9cff16091ca8da5", "html_url": "https://github.com/rust-lang/rust/commit/8330f8efc6c79455d9217ba4a9cff16091ca8da5"}], "stats": {"total": 92, "additions": 78, "deletions": 14}, "files": [{"sha": "0dc5343f9429d0bccf6888d4298a1e7eabf7d624", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66636939a63237fb7a6d1198dd9f92514807621e/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66636939a63237fb7a6d1198dd9f92514807621e/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=66636939a63237fb7a6d1198dd9f92514807621e", "patch": "@@ -74,6 +74,7 @@ use ide_db::{\n };\n use syntax::{algo::find_node_at_range, ast::AstNode, SyntaxNodePtr, TextRange};\n \n+// FIXME: Make this an enum\n #[derive(Copy, Clone, Debug, PartialEq)]\n pub struct DiagnosticCode(pub &'static str);\n "}, {"sha": "649f856db4f2ac07db96673184d4419893eae51e", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66636939a63237fb7a6d1198dd9f92514807621e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66636939a63237fb7a6d1198dd9f92514807621e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=66636939a63237fb7a6d1198dd9f92514807621e", "patch": "@@ -331,7 +331,7 @@ impl GlobalState {\n     }\n \n     pub(crate) fn send_notification<N: lsp_types::notification::Notification>(\n-        &mut self,\n+        &self,\n         params: N::Params,\n     ) {\n         let not = lsp_server::Notification::new(N::METHOD.to_string(), params);\n@@ -372,7 +372,7 @@ impl GlobalState {\n         self.req_queue.incoming.is_completed(&request.id)\n     }\n \n-    fn send(&mut self, message: lsp_server::Message) {\n+    fn send(&self, message: lsp_server::Message) {\n         self.sender.send(message).unwrap()\n     }\n }"}, {"sha": "247d5b04380181e65126cd562a8ad7790ca4cb12", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66636939a63237fb7a6d1198dd9f92514807621e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66636939a63237fb7a6d1198dd9f92514807621e/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=66636939a63237fb7a6d1198dd9f92514807621e", "patch": "@@ -112,7 +112,8 @@ impl GlobalState {\n             && self.config.notifications().cargo_toml_not_found\n         {\n             status.health = lsp_ext::Health::Warning;\n-            message.push_str(\"Failed to discover workspace.\\n\\n\");\n+            message.push_str(\"Failed to discover workspace.\\n\");\n+            message.push_str(\"Consider adding the `Cargo.toml` of the workspace to the [`linkedProjects`](https://rust-analyzer.github.io/manual.html#rust-analyzer.linkedProjects) setting.\\n\\n\");\n         }\n \n         for ws in self.workspaces.iter() {"}, {"sha": "d0c77db7b87fee80ef5db1e313e45b356097ecbd", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/66636939a63237fb7a6d1198dd9f92514807621e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/66636939a63237fb7a6d1198dd9f92514807621e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=66636939a63237fb7a6d1198dd9f92514807621e", "patch": "@@ -444,6 +444,11 @@\n                         \"type\": \"string\"\n                     }\n                 },\n+                \"rust-analyzer.showUnlinkedFileNotification\": {\n+                    \"markdownDescription\": \"Whether to show a notification for unlinked files asking the user to add the corresponding Cargo.toml to the linked projects setting.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n                 \"$generated-start\": {},\n                 \"rust-analyzer.assist.emitMustUse\": {\n                     \"markdownDescription\": \"Whether to insert #[must_use] when generating `as_` methods\\nfor enum variants.\","}, {"sha": "2a1c757dfefd7ea716d83dde80904116a1cf00f1", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 64, "deletions": 10, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/66636939a63237fb7a6d1198dd9f92514807621e/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/66636939a63237fb7a6d1198dd9f92514807621e/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=66636939a63237fb7a6d1198dd9f92514807621e", "patch": "@@ -8,6 +8,7 @@ import * as diagnostics from \"./diagnostics\";\n import { WorkspaceEdit } from \"vscode\";\n import { Config, prepareVSCodeConfig } from \"./config\";\n import { randomUUID } from \"crypto\";\n+import { sep as pathSeparator } from \"path\";\n \n export interface Env {\n     [name: string]: string;\n@@ -69,7 +70,8 @@ export async function createClient(\n     outputChannel: vscode.OutputChannel,\n     initializationOptions: vscode.WorkspaceConfiguration,\n     serverOptions: lc.ServerOptions,\n-    config: Config\n+    config: Config,\n+    unlinkedFiles: vscode.Uri[]\n ): Promise<lc.LanguageClient> {\n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: \"file\", language: \"rust\" }],\n@@ -119,6 +121,65 @@ export async function createClient(\n                 const preview = config.previewRustcOutput;\n                 const errorCode = config.useRustcErrorCode;\n                 diagnosticList.forEach((diag, idx) => {\n+                    let value =\n+                        typeof diag.code === \"string\" || typeof diag.code === \"number\"\n+                            ? diag.code\n+                            : diag.code?.value;\n+                    if (value === \"unlinked-file\" && !unlinkedFiles.includes(uri)) {\n+                        let config = vscode.workspace.getConfiguration(\"rust-analyzer\");\n+                        if (config.get(\"showUnlinkedFileNotification\")) {\n+                            unlinkedFiles.push(uri);\n+                            let folder = vscode.workspace.getWorkspaceFolder(uri)?.uri.fsPath;\n+                            if (folder) {\n+                                let parent_backslash = uri.fsPath.lastIndexOf(\n+                                    pathSeparator + \"src\"\n+                                );\n+                                let parent = uri.fsPath.substring(0, parent_backslash);\n+\n+                                if (parent.startsWith(folder)) {\n+                                    let path = vscode.Uri.file(\n+                                        parent + pathSeparator + \"Cargo.toml\"\n+                                    );\n+                                    void vscode.workspace.fs.stat(path).then(() => {\n+                                        vscode.window\n+                                            .showInformationMessage(\n+                                                `This rust file does not belong to a loaded cargo project. It looks like it might belong to the workspace at ${path}, do you want to add it to the linked Projects?`,\n+                                                \"Yes\",\n+                                                \"No\",\n+                                                \"Don't show this again\"\n+                                            )\n+                                            .then((choice) => {\n+                                                switch (choice) {\n+                                                    case \"Yes\":\n+                                                        break;\n+                                                    case \"No\":\n+                                                        config.update(\n+                                                            \"linkedProjects\",\n+                                                            config\n+                                                                .get<any[]>(\"linkedProjects\")\n+                                                                ?.concat(\n+                                                                    path.fsPath.substring(\n+                                                                        folder!.length\n+                                                                    )\n+                                                                ),\n+                                                            false\n+                                                        );\n+                                                        break;\n+                                                    case \"Don't show this again\":\n+                                                        config.update(\n+                                                            \"showUnlinkedFileNotification\",\n+                                                            false,\n+                                                            false\n+                                                        );\n+                                                        break;\n+                                                }\n+                                            });\n+                                    });\n+                                }\n+                            }\n+                        }\n+                    }\n+\n                     // Abuse the fact that VSCode leaks the LSP diagnostics data field through the\n                     // Diagnostic class, if they ever break this we are out of luck and have to go\n                     // back to the worst diagnostics experience ever:)\n@@ -138,22 +199,15 @@ export async function createClient(\n                                 .substring(0, index)\n                                 .replace(/^ -->[^\\n]+\\n/m, \"\");\n                         }\n-                        let value;\n-                        if (errorCode) {\n-                            if (typeof diag.code === \"string\" || typeof diag.code === \"number\") {\n-                                value = diag.code;\n-                            } else {\n-                                value = diag.code?.value;\n-                            }\n-                        }\n                         diag.code = {\n                             target: vscode.Uri.from({\n                                 scheme: diagnostics.URI_SCHEME,\n                                 path: `/diagnostic message [${idx.toString()}]`,\n                                 fragment: uri.toString(),\n                                 query: idx.toString(),\n                             }),\n-                            value: value ?? \"Click for full compiler diagnostic\",\n+                            value:\n+                                errorCode && value ? value : \"Click for full compiler diagnostic\",\n                         };\n                     }\n                 });"}, {"sha": "5515921ed14928c1aba013ff8dbe6eda9eed1e6c", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/66636939a63237fb7a6d1198dd9f92514807621e/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/66636939a63237fb7a6d1198dd9f92514807621e/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=66636939a63237fb7a6d1198dd9f92514807621e", "patch": "@@ -82,6 +82,7 @@ export class Ctx {\n     private state: PersistentState;\n     private commandFactories: Record<string, CommandFactory>;\n     private commandDisposables: Disposable[];\n+    private unlinkedFiles: vscode.Uri[];\n \n     get client() {\n         return this._client;\n@@ -99,6 +100,7 @@ export class Ctx {\n         this.clientSubscriptions = [];\n         this.commandDisposables = [];\n         this.commandFactories = commandFactories;\n+        this.unlinkedFiles = [];\n \n         this.state = new PersistentState(extCtx.globalState);\n         this.config = new Config(extCtx);\n@@ -218,7 +220,8 @@ export class Ctx {\n                 this.outputChannel,\n                 initializationOptions,\n                 serverOptions,\n-                this.config\n+                this.config,\n+                this.unlinkedFiles\n             );\n             this.pushClientCleanup(\n                 this._client.onNotification(ra.serverStatus, (params) =>"}]}