{"sha": "b56cec03215e8689f02f3839b3d87afbcf260558", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NmNlYzAzMjE1ZTg2ODlmMDJmMzgzOWIzZDg3YWZiY2YyNjA1NTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-08T22:59:13Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-12-16T17:40:10Z"}, "message": "Add version display for associated consts", "tree": {"sha": "826e4f3599c258841e23c3f4f0aed048731cef64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/826e4f3599c258841e23c3f4f0aed048731cef64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b56cec03215e8689f02f3839b3d87afbcf260558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b56cec03215e8689f02f3839b3d87afbcf260558", "html_url": "https://github.com/rust-lang/rust/commit/b56cec03215e8689f02f3839b3d87afbcf260558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b56cec03215e8689f02f3839b3d87afbcf260558/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "748d354af3145d4292ea84142f73bb8114e3db12", "url": "https://api.github.com/repos/rust-lang/rust/commits/748d354af3145d4292ea84142f73bb8114e3db12", "html_url": "https://github.com/rust-lang/rust/commit/748d354af3145d4292ea84142f73bb8114e3db12"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "138d0ebd92b0dc462c57e0ce1330a35ed67a62b3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b56cec03215e8689f02f3839b3d87afbcf260558/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56cec03215e8689f02f3839b3d87afbcf260558/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b56cec03215e8689f02f3839b3d87afbcf260558", "patch": "@@ -3237,13 +3237,14 @@ fn assoc_type<W: fmt::Write>(w: &mut W, it: &clean::Item,\n     Ok(())\n }\n \n-fn render_stability_since_raw<'a>(w: &mut fmt::Formatter,\n-                                  ver: Option<&'a str>,\n-                                  containing_ver: Option<&'a str>) -> fmt::Result {\n+fn render_stability_since_raw<'a, T: fmt::Write>(\n+    w: &mut T,\n+    ver: Option<&'a str>,\n+    containing_ver: Option<&'a str>,\n+) -> fmt::Result {\n     if let Some(v) = ver {\n         if containing_ver != ver && v.len() > 0 {\n-            write!(w, \"<div class='since' title='Stable since Rust version {0}'>{0}</div>\",\n-                   v)?\n+            write!(w, \"<div class='since' title='Stable since Rust version {0}'>{0}</div>\", v)?\n         }\n     }\n     Ok(())\n@@ -4067,21 +4068,44 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n                 assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id))?;\n-                write!(w, \"</code></span></h4>\\n\")?;\n+                write!(w, \"</code></span></h4>\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n+                let mut version = String::new();\n+\n+                render_stability_since_raw(&mut version, item.stable_since(), outer_version)?;\n+\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n-                write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n+                write!(w, \"<span id='{}' class='invisible'>\", ns_id)?;\n+                if !version.is_empty() {\n+                    write!(w, \"<table class='table-display'><tbody><tr><td><code>\")?;\n+                } else {\n+                    write!(w, \"<code>\")?;\n+                }\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n+                if !version.is_empty() {\n+                    write!(w, \"</code>\")?;\n+                }\n                 let src = if let Some(l) = (Item { cx, item }).src_href() {\n+                    if !version.is_empty() {\n+                        write!(w, \"</span></td><td><span class='out-of-band'>\")?;\n+                        write!(w, \"<div class='ghost'></div>{}\", version)?;\n+                    }\n                     format!(\"<a class='srclink' href='{}' title='{}'>[src]</a>\",\n                             l, \"goto source code\")\n                 } else {\n+                    if !version.is_empty() {\n+                        write!(w, \"</td><td>{}\", version)?;\n+                    }\n                     String::new()\n                 };\n-                write!(w, \"</code>{}</span></h4>\\n\", src)?;\n+                if version.is_empty() {\n+                    write!(w, \"</code>{}</span></h4>\", src)?;\n+                } else {\n+                    write!(w, \"{}</td></tr></tbody></table></span></h4>\", src)?;\n+                }\n             }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));"}]}