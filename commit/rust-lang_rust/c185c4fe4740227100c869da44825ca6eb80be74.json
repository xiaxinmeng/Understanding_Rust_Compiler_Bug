{"sha": "c185c4fe4740227100c869da44825ca6eb80be74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxODVjNGZlNDc0MDIyNzEwMGM4NjlkYTQ0ODI1Y2E2ZWI4MGJlNzQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-05T11:13:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-05T11:13:13Z"}, "message": "Rollup merge of #70776 - RalfJung:raw-vec, r=Dylan-DPC,TimDiekmann\n\nclarify comment in RawVec::into_box\n\nOn first reading I almost thought \"len <= cap\" would be all that there is to check here. Expand the comment to clarify that that is not the case.", "tree": {"sha": "247b9f32cbfe6c6a3a43d8df7810f8ed8df9dd57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247b9f32cbfe6c6a3a43d8df7810f8ed8df9dd57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c185c4fe4740227100c869da44825ca6eb80be74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeib1JCRBK7hj4Ov3rIwAAdHIIAHf1C+pR6Mj5c5Wqvj1T5OFm\nDYQP73Ecp1VhFW9GR11s0tUX2jMhlgL6W0LuXvn9Xqo7d0HmfwZUekHAoKJD3vwa\nFJ1IljbMvjKWRHNMG8kDrpK9bk+VMoTFggv6o0AMOryoVGSYMNyEt8X/SextnGJ5\n118sPinaEQ21/cx0IHl6l2n5zlE1o2g7cMtCTZ1GmdHYDnXdm2pnJKppn0dA0P/A\nIaM6MfIQOGb45hgVWVUx0UFfkIv1yRk9rhTN4yexArutYd+vLExRAscJTKnM5D68\newC9/3Ddp3LHoQgeIB0zsbuGCIX5LNUEwESpYt8pQ56UZvYjAb4Z+tJobfCuiIs=\n=jBuK\n-----END PGP SIGNATURE-----\n", "payload": "tree 247b9f32cbfe6c6a3a43d8df7810f8ed8df9dd57\nparent 2448a235549cbfe063010af1b9ee8dc35eaa626b\nparent 6cbe1726a70bac498bd46dc08c868f094117675c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586085193 +0200\ncommitter GitHub <noreply@github.com> 1586085193 +0200\n\nRollup merge of #70776 - RalfJung:raw-vec, r=Dylan-DPC,TimDiekmann\n\nclarify comment in RawVec::into_box\n\nOn first reading I almost thought \"len <= cap\" would be all that there is to check here. Expand the comment to clarify that that is not the case.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c185c4fe4740227100c869da44825ca6eb80be74", "html_url": "https://github.com/rust-lang/rust/commit/c185c4fe4740227100c869da44825ca6eb80be74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c185c4fe4740227100c869da44825ca6eb80be74/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2448a235549cbfe063010af1b9ee8dc35eaa626b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2448a235549cbfe063010af1b9ee8dc35eaa626b", "html_url": "https://github.com/rust-lang/rust/commit/2448a235549cbfe063010af1b9ee8dc35eaa626b"}, {"sha": "6cbe1726a70bac498bd46dc08c868f094117675c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbe1726a70bac498bd46dc08c868f094117675c", "html_url": "https://github.com/rust-lang/rust/commit/6cbe1726a70bac498bd46dc08c868f094117675c"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "7ac67870eb751c717dd8d91f91fffd010f2e1daf", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c185c4fe4740227100c869da44825ca6eb80be74/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c185c4fe4740227100c869da44825ca6eb80be74/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=c185c4fe4740227100c869da44825ca6eb80be74", "patch": "@@ -570,16 +570,19 @@ impl<T> RawVec<T, Global> {\n     ///\n     /// # Safety\n     ///\n-    /// `shrink_to_fit(len)` must be called immediately prior to calling this function. This\n-    /// implies, that `len` must be smaller than or equal to `self.capacity()`.\n+    /// * `len` must be greater than or equal to the most recently requested capacity, and\n+    /// * `len` must be less than or equal to `self.capacity()`.\n+    ///\n+    /// Note, that the requested capacity and `self.capacity()` could differ, as\n+    /// an allocator could overallocate and return a greater memory block than requested.\n     pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>]> {\n+        // Sanity-check one half of the safety requirement (we cannot check the other half).\n         debug_assert!(\n             len <= self.capacity(),\n             \"`len` must be smaller than or equal to `self.capacity()`\"\n         );\n \n         let me = ManuallyDrop::new(self);\n-        // NOTE: not calling `capacity()` here; actually using the real `cap` field!\n         let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);\n         Box::from_raw(slice)\n     }"}]}