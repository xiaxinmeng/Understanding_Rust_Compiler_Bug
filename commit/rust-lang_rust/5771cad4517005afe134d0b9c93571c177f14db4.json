{"sha": "5771cad4517005afe134d0b9c93571c177f14db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NzFjYWQ0NTE3MDA1YWZlMTM0ZDBiOWM5MzU3MWMxNzdmMTRkYjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-04T12:57:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-04T12:57:28Z"}, "message": "Merge #7149\n\n7149: Implement hovering for TypeParams r=matklad a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "4cd712c52d5b423e2690fc0e003ac9ff7c86ed9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cd712c52d5b423e2690fc0e003ac9ff7c86ed9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5771cad4517005afe134d0b9c93571c177f14db4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf8xC4CRBK7hj4Ov3rIwAAdHIIAIsldOS+mAt9MK+xuPnxD9AO\nrYw0iqZ9rmCrGwNpKSiwy4bxhD4iUNBvwqvzg6Ruy8Pw7zaqvzxf2vxjDCSTfoFc\nCiK8ACrh1YusRlCIgndx13aM9a6QOXGMkHBngTJSfA7uylEfVbECfZj3w3hZvpXS\nk+T0j3r2gpbNA69/6AfzgEy2bwR2KncOoCcqOdtc+Ga1xyDwiQ6cHKm41n6VCyot\n7Tv0Ou2tSmIeusjO/DWvTzonVH1a4TI3k60kdGzPzst5cCRX1ObARP5fjQT92LSv\n258DkDGLb/XrcdrNDG9xeCDRgPk8ai9j0zMPP2sXgNIqETypUfOG5Y27oI2sIRA=\n=DmId\n-----END PGP SIGNATURE-----\n", "payload": "tree 4cd712c52d5b423e2690fc0e003ac9ff7c86ed9e\nparent d53ff4f67b3c003ca4ce3d983af44c8119c0c9cd\nparent 47900dd3bc1cca74e06a3ac1f587e92e352fbd42\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609765048 +0000\ncommitter GitHub <noreply@github.com> 1609765048 +0000\n\nMerge #7149\n\n7149: Implement hovering for TypeParams r=matklad a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5771cad4517005afe134d0b9c93571c177f14db4", "html_url": "https://github.com/rust-lang/rust/commit/5771cad4517005afe134d0b9c93571c177f14db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5771cad4517005afe134d0b9c93571c177f14db4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53ff4f67b3c003ca4ce3d983af44c8119c0c9cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53ff4f67b3c003ca4ce3d983af44c8119c0c9cd", "html_url": "https://github.com/rust-lang/rust/commit/d53ff4f67b3c003ca4ce3d983af44c8119c0c9cd"}, {"sha": "47900dd3bc1cca74e06a3ac1f587e92e352fbd42", "url": "https://api.github.com/repos/rust-lang/rust/commits/47900dd3bc1cca74e06a3ac1f587e92e352fbd42", "html_url": "https://github.com/rust-lang/rust/commit/47900dd3bc1cca74e06a3ac1f587e92e352fbd42"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "a2255508e368342df707ba69eef68997bc25c80b", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5771cad4517005afe134d0b9c93571c177f14db4/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5771cad4517005afe134d0b9c93571c177f14db4/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=5771cad4517005afe134d0b9c93571c177f14db4", "patch": "@@ -5,9 +5,7 @@ use arrayvec::ArrayVec;\n use base_db::{CrateDisplayName, CrateId, Edition, FileId};\n use either::Either;\n use hir_def::{\n-    adt::ReprKind,\n-    adt::StructKind,\n-    adt::VariantData,\n+    adt::{ReprKind, StructKind, VariantData},\n     builtin_type::BuiltinType,\n     expr::{BindingAnnotation, LabelId, Pat, PatId},\n     import_map,\n@@ -31,7 +29,7 @@ use hir_expand::{\n };\n use hir_ty::{\n     autoderef,\n-    display::{HirDisplayError, HirFormatter},\n+    display::{write_bounds_like_dyn_trait, HirDisplayError, HirFormatter},\n     method_resolution,\n     traits::{FnTrait, Solution, SolutionVariables},\n     ApplicationTy, BoundVar, CallableDefId, Canonical, DebruijnIndex, FnSig, GenericPredicate,\n@@ -1293,6 +1291,20 @@ impl TypeParam {\n     }\n }\n \n+impl HirDisplay for TypeParam {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        write!(f, \"{}\", self.name(f.db))?;\n+        let bounds = f.db.generic_predicates_for_param(self.id);\n+        let substs = Substs::type_params(f.db, self.id.parent);\n+        let predicates = bounds.iter().cloned().map(|b| b.subst(&substs)).collect::<Vec<_>>();\n+        if !(predicates.is_empty() || f.omit_verbose_types()) {\n+            write!(f, \": \")?;\n+            write_bounds_like_dyn_trait(&predicates, f)?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct LifetimeParam {\n     pub(crate) id: LifetimeParamId,"}, {"sha": "a54225c18ba61b32579126a5634bb1fde58bc801", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5771cad4517005afe134d0b9c93571c177f14db4/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5771cad4517005afe134d0b9c93571c177f14db4/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=5771cad4517005afe134d0b9c93571c177f14db4", "patch": "@@ -595,7 +595,7 @@ impl HirDisplay for FnSig {\n     }\n }\n \n-fn write_bounds_like_dyn_trait(\n+pub fn write_bounds_like_dyn_trait(\n     predicates: &[GenericPredicate],\n     f: &mut HirFormatter,\n ) -> Result<(), HirDisplayError> {"}, {"sha": "61439ae534179339374fc21b4821e1b4602b3629", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5771cad4517005afe134d0b9c93571c177f14db4/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5771cad4517005afe134d0b9c93571c177f14db4/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=5771cad4517005afe134d0b9c93571c177f14db4", "patch": "@@ -370,8 +370,9 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n         }\n         Definition::Label(it) => Some(Markup::fenced_block(&it.name(db))),\n         Definition::LifetimeParam(it) => Some(Markup::fenced_block(&it.name(db))),\n-        Definition::TypeParam(_) | Definition::ConstParam(_) => {\n-            // FIXME: Hover for generic param\n+        Definition::TypeParam(type_param) => Some(Markup::fenced_block(&type_param.display(db))),\n+        Definition::ConstParam(_) => {\n+            // FIXME: Hover for generic const param\n             None\n         }\n     };\n@@ -3257,4 +3258,51 @@ fn foo() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn hover_type_param() {\n+        check(\n+            r#\"\n+struct Foo<T>(T);\n+trait Copy {}\n+trait Clone {}\n+trait Sized {}\n+impl<T: Copy + Clone> Foo<T<|>> where T: Sized {}\n+\"#,\n+            expect![[r#\"\n+                *T*\n+\n+                ```rust\n+                T: Copy + Clone + Sized\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+struct Foo<T>(T);\n+impl<T> Foo<T<|>> {}\n+\"#,\n+            expect![[r#\"\n+                *T*\n+\n+                ```rust\n+                T\n+                ```\n+                \"#]],\n+        );\n+        // lifetimes aren't being substituted yet\n+        check(\n+            r#\"\n+struct Foo<T>(T);\n+impl<T: 'static> Foo<T<|>> {}\n+\"#,\n+            expect![[r#\"\n+                *T*\n+\n+                ```rust\n+                T: {error}\n+                ```\n+                \"#]],\n+        );\n+    }\n }"}]}