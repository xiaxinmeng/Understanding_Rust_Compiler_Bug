{"sha": "b4d992fec740dc9a6ff42a0500026fe5b25db74a", "node_id": "C_kwDOAAsO6NoAKGI0ZDk5MmZlYzc0MGRjOWE2ZmY0MmEwNTAwMDI2ZmU1YjI1ZGI3NGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-04T06:09:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-04T06:09:07Z"}, "message": "Rollup merge of #111103 - BoxyUwU:normal_fold_with_gce_norm, r=compiler-errors\n\ncorrectly recurse when expanding anon consts\n\nrecursing with `super_fold_with` is wrong in case `bac` is itself normalizable, the test that was supposed to test for this being wrong did not actually test for this in reality because of the usage of `{ (N) }` instead of `{{ N }}`. The former resulting in a simple `ConstKind::Param` instead of `ConstKind::Unevaluated`. Tbh generally this test seems very brittle and it will be a lot easier to test once we have normalization of assoc consts since then we can just test that `T::ASSOC` normalizes to some `U::OTHER` which normalizes to some third thing.\n\nr? `@compiler-errors`", "tree": {"sha": "e564cb140f4a1810a37345ae13ebf069c9969ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e564cb140f4a1810a37345ae13ebf069c9969ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4d992fec740dc9a6ff42a0500026fe5b25db74a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkU0wDCRBK7hj4Ov3rIwAAipoIAEqDmZ81WPS2rV1yLbwq5NyL\ntsGN3aRTrp38SZy1k7FofpSPVoHOYX9BNQn+ZHZ/Dy2tQvNdSLzezBnOM1orqSTw\n834F+ltsOGikf6phVg5lttMwl1ukLIpqnZq554AxGraiHkzDcVvR7HoD5KQ5Koa6\n0hnCIuBnkBTUFdKAw5M2RobrXZXF07VGcPA4+m1LKl9tI9P3iJzIlSJ89ImDNSdH\nb8Mx2hRj/rMaSqlQ2fCco0KRwsleUkI3AhWMQXi56aqeFBq4StAEDZwcs8w0jq4M\nq2FMSOK+UfvtbdD0oE7ayU7zssCx83k2McfgUsHg+u3pgtFuEGz/DgcrDrTB3+8=\n=uaU6\n-----END PGP SIGNATURE-----\n", "payload": "tree e564cb140f4a1810a37345ae13ebf069c9969ff0\nparent f2bc7e0684f1c30dd93b1b18dda1b30037ec3881\nparent 4d0887e1a27ab0f57515bdb01644db597c110bdd\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683180547 +0200\ncommitter GitHub <noreply@github.com> 1683180547 +0200\n\nRollup merge of #111103 - BoxyUwU:normal_fold_with_gce_norm, r=compiler-errors\n\ncorrectly recurse when expanding anon consts\n\nrecursing with `super_fold_with` is wrong in case `bac` is itself normalizable, the test that was supposed to test for this being wrong did not actually test for this in reality because of the usage of `{ (N) }` instead of `{{ N }}`. The former resulting in a simple `ConstKind::Param` instead of `ConstKind::Unevaluated`. Tbh generally this test seems very brittle and it will be a lot easier to test once we have normalization of assoc consts since then we can just test that `T::ASSOC` normalizes to some `U::OTHER` which normalizes to some third thing.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d992fec740dc9a6ff42a0500026fe5b25db74a", "html_url": "https://github.com/rust-lang/rust/commit/b4d992fec740dc9a6ff42a0500026fe5b25db74a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4d992fec740dc9a6ff42a0500026fe5b25db74a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2bc7e0684f1c30dd93b1b18dda1b30037ec3881", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2bc7e0684f1c30dd93b1b18dda1b30037ec3881", "html_url": "https://github.com/rust-lang/rust/commit/f2bc7e0684f1c30dd93b1b18dda1b30037ec3881"}, {"sha": "4d0887e1a27ab0f57515bdb01644db597c110bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0887e1a27ab0f57515bdb01644db597c110bdd", "html_url": "https://github.com/rust-lang/rust/commit/4d0887e1a27ab0f57515bdb01644db597c110bdd"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "bfb740ab3560b7a9acd76349ab41abecab2394b6", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b4d992fec740dc9a6ff42a0500026fe5b25db74a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d992fec740dc9a6ff42a0500026fe5b25db74a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=b4d992fec740dc9a6ff42a0500026fe5b25db74a", "patch": "@@ -63,7 +63,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                         Err(e) => self.tcx.const_error_with_guaranteed(c.ty(), e),\n                         Ok(Some(bac)) => {\n                             let substs = self.tcx.erase_regions(uv.substs);\n-                            bac.subst(self.tcx, substs)\n+                            let bac = bac.subst(self.tcx, substs);\n+                            return bac.fold_with(self);\n                         }\n                         Ok(None) => c,\n                     },"}, {"sha": "18a99398622cacbe5b57b46a9cb84d76a7c3a097", "filename": "tests/ui/const-generics/generic_const_exprs/nested_uneval_unification-2.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4d992fec740dc9a6ff42a0500026fe5b25db74a/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d992fec740dc9a6ff42a0500026fe5b25db74a/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fnested_uneval_unification-2.rs?ref=b4d992fec740dc9a6ff42a0500026fe5b25db74a", "patch": "@@ -2,28 +2,30 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features, unused_parens, unused_braces)]\n \n-fn zero_init<const N: usize>() -> Substs1<{ (N) }>\n+fn zero_init<const N: usize>() -> Substs1<{{ N }}>\n where\n-    [u8; { (N) }]: ,\n+    [u8; {{ N }}]: ,\n {\n-    Substs1([0; { (N) }])\n+    Substs1([0; {{ N }}])\n }\n \n-struct Substs1<const N: usize>([u8; { (N) }])\n+struct Substs1<const N: usize>([u8; {{ N }}])\n where\n-    [(); { (N) }]: ;\n+    [(); {{ N }}]: ;\n \n-fn substs2<const M: usize>() -> Substs1<{ (M) }> {\n-    zero_init::<{ (M) }>()\n+fn substs2<const M: usize>() -> Substs1<{{ M }}> {\n+    zero_init::<{{ M }}>()\n }\n \n-fn substs3<const L: usize>() -> Substs1<{ (L) }> {\n-    substs2::<{ (L) }>()\n+fn substs3<const L: usize>() -> Substs1<{{ L }}> {\n+    substs2::<{{ L }}>()\n }\n \n fn main() {\n     assert_eq!(substs3::<2>().0, [0; 2]);\n }\n \n-// Test that the implicit ``{ (L) }`` bound on ``substs3`` satisfies the\n-// ``{ (N) }`` bound on ``Substs1``\n+// Test that the implicit ``{{ L }}`` bound on ``substs3`` satisfies the\n+// ``{{ N }}`` bound on ``Substs1``\n+// FIXME(generic_const_exprs): come up with a less brittle test for this using assoc consts\n+// once normalization is implemented for them."}]}