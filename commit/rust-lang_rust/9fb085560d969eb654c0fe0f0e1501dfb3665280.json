{"sha": "9fb085560d969eb654c0fe0f0e1501dfb3665280", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYjA4NTU2MGQ5NjllYjY1NGMwZmUwZjBlMTUwMWRmYjM2NjUyODA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T21:42:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:54:46Z"}, "message": "Convert rustc::syntax::ast_util to istrs. Issue #855", "tree": {"sha": "e7d56aad494df8354c57461d9e7d5a33851867d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7d56aad494df8354c57461d9e7d5a33851867d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb085560d969eb654c0fe0f0e1501dfb3665280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb085560d969eb654c0fe0f0e1501dfb3665280", "html_url": "https://github.com/rust-lang/rust/commit/9fb085560d969eb654c0fe0f0e1501dfb3665280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb085560d969eb654c0fe0f0e1501dfb3665280/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbad23a747c282d190e3c264f515765a938b0c98", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbad23a747c282d190e3c264f515765a938b0c98", "html_url": "https://github.com/rust-lang/rust/commit/cbad23a747c282d190e3c264f515765a938b0c98"}], "stats": {"total": 123, "additions": 63, "deletions": 60}, "files": [{"sha": "85e914cb0d983599adc60c3ec3e0318a1c743f82", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=9fb085560d969eb654c0fe0f0e1501dfb3665280", "patch": "@@ -92,7 +92,8 @@ fn fold_item(cx: &test_ctxt, i: &@ast::item, fld: fold::ast_fold) ->\n    @ast::item {\n \n     cx.path += [i.ident];\n-    log #fmt[\"current path: %s\", ast_util::path_name_i(cx.path)];\n+    log #fmt[\"current path: %s\",\n+             istr::to_estr(ast_util::path_name_i(cx.path))];\n \n     if is_test_fn(i) {\n         log \"this is a test function\";\n@@ -248,11 +249,11 @@ fn mk_test_desc_vec(cx: &test_ctxt) -> @ast::expr {\n fn mk_test_desc_rec(cx: &test_ctxt, test: test) -> @ast::expr {\n     let path = test.path;\n \n-    log #fmt[\"encoding %s\", ast_util::path_name_i(path)];\n+    log #fmt[\"encoding %s\",\n+             istr::to_estr(ast_util::path_name_i(path))];\n \n     let name_lit: ast::lit =\n-        nospan(ast::lit_str(\n-            istr::from_estr(ast_util::path_name_i(path)), ast::sk_rc));\n+        nospan(ast::lit_str(ast_util::path_name_i(path), ast::sk_rc));\n     let name_expr: ast::expr =\n         {id: cx.next_node_id(),\n          node: ast::expr_lit(@name_lit),"}, {"sha": "7e517d6edef283fc40c53d5390a4e5e49e349f0d", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=9fb085560d969eb654c0fe0f0e1501dfb3665280", "patch": "@@ -518,16 +518,18 @@ fn test_scope(cx: &ctx, sc: &scope, r: &restrict, p: &ast::path) {\n         let msg =\n             alt prob {\n               overwritten(sp, wpt) {\n-                {span: sp, msg: \"overwriting \" + ast_util::path_name(wpt)}\n+                {span: sp, msg: \"overwriting \" +\n+                    istr::to_estr(ast_util::path_name(wpt))}\n               }\n               val_taken(sp, vpt) {\n                 {span: sp,\n-                 msg: \"taking the value of \" + ast_util::path_name(vpt)}\n+                 msg: \"taking the value of \" +\n+                     istr::to_estr(ast_util::path_name(vpt))}\n               }\n             };\n         cx.tcx.sess.span_err(msg.span,\n                              msg.msg + \" will invalidate alias \" +\n-                             ast_util::path_name(p) +\n+                             istr::to_estr(ast_util::path_name(p)) +\n                              \", which is still used\");\n     }\n }"}, {"sha": "70c88cc005f136337b37618ce832b7d54bc69c1f", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=9fb085560d969eb654c0fe0f0e1501dfb3665280", "patch": "@@ -324,7 +324,7 @@ fn resolve_names(e: &@env, c: &@ast::crate) {\n               _ {\n                 e.sess.span_err(p.span,\n                                 \"not a tag variant: \" +\n-                                ast_util::path_name(p));\n+                                istr::to_estr(ast_util::path_name(p)));\n               }\n             }\n           }"}, {"sha": "a4f1c2c8102c5faa3d4a6a7171465f9f8db03648", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9fb085560d969eb654c0fe0f0e1501dfb3665280", "patch": "@@ -1792,10 +1792,10 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr, unify: &unifier,\n             let binopstr = ast_util::binop_to_str(binop);\n             let t_str = ty_to_str(fcx.ccx.tcx, resolved_t);\n             let errmsg =\n-                \"binary operation \" + binopstr +\n-                    \" cannot be applied to type `\" +\n-                istr::to_estr(t_str) + \"`\";\n-            fcx.ccx.tcx.sess.span_err(span, errmsg);\n+                ~\"binary operation \" + binopstr +\n+                ~\" cannot be applied to type `\" +\n+                t_str + ~\"`\";\n+            fcx.ccx.tcx.sess.span_err(span, istr::to_estr(errmsg));\n         }\n     }\n "}, {"sha": "1aaa4c7a8f334ca6b112912a7ab09754eb36643d", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=9fb085560d969eb654c0fe0f0e1501dfb3665280", "patch": "@@ -14,10 +14,10 @@ fn mk_sp(lo: uint, hi: uint) -> span {\n // make this a const, once the compiler supports it\n fn dummy_sp() -> span { ret mk_sp(0u, 0u); }\n \n-fn path_name(p: &path) -> str { path_name_i(p.node.idents) }\n+fn path_name(p: &path) -> istr { path_name_i(p.node.idents) }\n \n-fn path_name_i(idents: &[ident]) -> str {\n-    istr::to_estr(istr::connect(idents, ~\"::\"))\n+fn path_name_i(idents: &[ident]) -> istr {\n+    istr::connect(idents, ~\"::\")\n }\n \n fn local_def(id: node_id) -> def_id { ret {crate: local_crate, node: id}; }\n@@ -83,59 +83,59 @@ fn pat_binding_ids(pat: &@pat) -> [node_id] {\n     ret found;\n }\n \n-fn binop_to_str(op: binop) -> str {\n+fn binop_to_str(op: binop) -> istr {\n     alt op {\n-      add. { ret \"+\"; }\n-      sub. { ret \"-\"; }\n-      mul. { ret \"*\"; }\n-      div. { ret \"/\"; }\n-      rem. { ret \"%\"; }\n-      and. { ret \"&&\"; }\n-      or. { ret \"||\"; }\n-      bitxor. { ret \"^\"; }\n-      bitand. { ret \"&\"; }\n-      bitor. { ret \"|\"; }\n-      lsl. { ret \"<<\"; }\n-      lsr. { ret \">>\"; }\n-      asr. { ret \">>>\"; }\n-      eq. { ret \"==\"; }\n-      lt. { ret \"<\"; }\n-      le. { ret \"<=\"; }\n-      ne. { ret \"!=\"; }\n-      ge. { ret \">=\"; }\n-      gt. { ret \">\"; }\n+      add. { ret ~\"+\"; }\n+      sub. { ret ~\"-\"; }\n+      mul. { ret ~\"*\"; }\n+      div. { ret ~\"/\"; }\n+      rem. { ret ~\"%\"; }\n+      and. { ret ~\"&&\"; }\n+      or. { ret ~\"||\"; }\n+      bitxor. { ret ~\"^\"; }\n+      bitand. { ret ~\"&\"; }\n+      bitor. { ret ~\"|\"; }\n+      lsl. { ret ~\"<<\"; }\n+      lsr. { ret ~\">>\"; }\n+      asr. { ret ~\">>>\"; }\n+      eq. { ret ~\"==\"; }\n+      lt. { ret ~\"<\"; }\n+      le. { ret ~\"<=\"; }\n+      ne. { ret ~\"!=\"; }\n+      ge. { ret ~\">=\"; }\n+      gt. { ret ~\">\"; }\n     }\n }\n \n pure fn lazy_binop(b: binop) -> bool {\n     alt b { and. { true } or. { true } _ { false } }\n }\n \n-fn unop_to_str(op: unop) -> str {\n+fn unop_to_str(op: unop) -> istr {\n     alt op {\n-      box(mt) { if mt == mut { ret \"@mutable \"; } ret \"@\"; }\n-      deref. { ret \"*\"; }\n-      not. { ret \"!\"; }\n-      neg. { ret \"-\"; }\n+      box(mt) { if mt == mut { ret ~\"@mutable \"; } ret ~\"@\"; }\n+      deref. { ret ~\"*\"; }\n+      not. { ret ~\"!\"; }\n+      neg. { ret ~\"-\"; }\n     }\n }\n \n fn is_path(e: &@expr) -> bool {\n     ret alt e.node { expr_path(_) { true } _ { false } };\n }\n \n-fn ty_mach_to_str(tm: ty_mach) -> str {\n+fn ty_mach_to_str(tm: ty_mach) -> istr {\n     alt tm {\n-      ty_u8. { ret \"u8\"; }\n-      ty_u16. { ret \"u16\"; }\n-      ty_u32. { ret \"u32\"; }\n-      ty_u64. { ret \"u64\"; }\n-      ty_i8. { ret \"i8\"; }\n-      ty_i16. { ret \"i16\"; }\n-      ty_i32. { ret \"i32\"; }\n-      ty_i64. { ret \"i64\"; }\n-      ty_f32. { ret \"f32\"; }\n-      ty_f64. { ret \"f64\"; }\n+      ty_u8. { ret ~\"u8\"; }\n+      ty_u16. { ret ~\"u16\"; }\n+      ty_u32. { ret ~\"u32\"; }\n+      ty_u64. { ret ~\"u64\"; }\n+      ty_i8. { ret ~\"i8\"; }\n+      ty_i16. { ret ~\"i16\"; }\n+      ty_i32. { ret ~\"i32\"; }\n+      ty_i64. { ret ~\"i64\"; }\n+      ty_f32. { ret ~\"f32\"; }\n+      ty_f64. { ret ~\"f64\"; }\n     }\n }\n "}, {"sha": "b83a2f27e31880229df69ac66a67fcb5b119f1fd", "filename": "src/comp/syntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Ftoken.rs?ref=9fb085560d969eb654c0fe0f0e1501dfb3665280", "patch": "@@ -149,12 +149,12 @@ fn to_str(r: lexer::reader, t: token) -> istr {\n       }\n       LIT_UINT(u) { ret uint::to_str(u, 10u); }\n       LIT_MACH_INT(tm, i) {\n-        ret int::to_str(i, 10u) + ~\"_\" + istr::from_estr(ty_mach_to_str(tm));\n+        ret int::to_str(i, 10u) + ~\"_\" + ty_mach_to_str(tm);\n       }\n       LIT_MACH_FLOAT(tm, s) {\n         ret interner::get::<istr>(\n             *r.get_interner(), s) + ~\"_\" +\n-            istr::from_estr(ty_mach_to_str(tm));\n+            ty_mach_to_str(tm);\n       }\n       LIT_FLOAT(s) {\n         ret interner::get::<istr>(*r.get_interner(), s);"}, {"sha": "c01ede9d391f10a7791ade20fa7effdfc7298c97", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=9fb085560d969eb654c0fe0f0e1501dfb3665280", "patch": "@@ -276,7 +276,7 @@ fn print_type(s: &ps, ty: &@ast::ty) {\n       ast::ty_uint. { word(s.s, ~\"uint\"); }\n       ast::ty_float. { word(s.s, ~\"float\"); }\n       ast::ty_machine(tm) {\n-        word(s.s, istr::from_estr(ast_util::ty_mach_to_str(tm)));\n+        word(s.s, ast_util::ty_mach_to_str(tm));\n       }\n       ast::ty_char. { word(s.s, ~\"char\"); }\n       ast::ty_str. { word(s.s, ~\"str\"); }\n@@ -846,11 +846,11 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n         let prec = operator_prec(op);\n         print_maybe_parens(s, lhs, prec);\n         space(s.s);\n-        word_space(s, istr::from_estr(ast_util::binop_to_str(op)));\n+        word_space(s, ast_util::binop_to_str(op));\n         print_maybe_parens(s, rhs, prec + 1);\n       }\n       ast::expr_unary(op, expr) {\n-        word(s.s, istr::from_estr(ast_util::unop_to_str(op)));\n+        word(s.s, ast_util::unop_to_str(op));\n         print_maybe_parens(s, expr, parse::parser::unop_prec);\n       }\n       ast::expr_lit(lit) { print_literal(s, lit); }\n@@ -982,7 +982,7 @@ fn print_expr(s: &ps, expr: &@ast::expr) {\n       ast::expr_assign_op(op, lhs, rhs) {\n         print_expr(s, lhs);\n         space(s.s);\n-        word(s.s, istr::from_estr(ast_util::binop_to_str(op)));\n+        word(s.s, ast_util::binop_to_str(op));\n         word_space(s, ~\"=\");\n         print_expr(s, rhs);\n       }\n@@ -1526,12 +1526,12 @@ fn print_literal(s: &ps, lit: &@ast::lit) {\n       ast::lit_float(fstr) { word(s.s, fstr); }\n       ast::lit_mach_int(mach, val) {\n         word(s.s, int::str(val as int));\n-        word(s.s, istr::from_estr(ast_util::ty_mach_to_str(mach)));\n+        word(s.s, ast_util::ty_mach_to_str(mach));\n       }\n       ast::lit_mach_float(mach, val) {\n         // val is already a str\n         word(s.s, val);\n-        word(s.s, istr::from_estr(ast_util::ty_mach_to_str(mach)));\n+        word(s.s, ast_util::ty_mach_to_str(mach));\n       }\n       ast::lit_nil. { word(s.s, ~\"()\"); }\n       ast::lit_bool(val) {"}, {"sha": "4ef7cfc60a88c57e2f30da6940f3b70784e67f94", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb085560d969eb654c0fe0f0e1501dfb3665280/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=9fb085560d969eb654c0fe0f0e1501dfb3665280", "patch": "@@ -114,7 +114,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> istr {\n           ty_int. { ~\"int\" }\n           ty_float. { ~\"float\" }\n           ty_uint. { ~\"uint\" }\n-          ty_machine(tm) { istr::from_estr(ty_mach_to_str(tm)) }\n+          ty_machine(tm) { ty_mach_to_str(tm) }\n           ty_char. { ~\"char\" }\n           ty_str. { ~\"str\" }\n           ty_istr. { ~\"istr\" }"}]}