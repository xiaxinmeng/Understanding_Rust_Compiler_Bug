{"sha": "103abdb75c39e36457d182e16e4cc81dff42a192", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwM2FiZGI3NWMzOWUzNjQ1N2QxODJlMTZlNGNjODFkZmY0MmExOTI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-26T11:32:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-26T11:32:18Z"}, "message": "Rollup merge of #50987 - estebank:underline-multiple-suggestions, r=petrochencov\n\nUnderline multiple suggested replacements in the same line\n\n<img width=\"685\" alt=\"screen shot 2018-05-22 at 21 06 48\" src=\"https://user-images.githubusercontent.com/1606434/40403051-174f3180-5e04-11e8-86b6-261630c5ff80.png\">\n\nFollow up to #50943.\n\nFix #50977.", "tree": {"sha": "a1aae18e3376d0b9ecba5e38c40186da5db08018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1aae18e3376d0b9ecba5e38c40186da5db08018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/103abdb75c39e36457d182e16e4cc81dff42a192", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbCUXDCRBK7hj4Ov3rIwAAdHIIALH7tj5bv1PKlUfZZWNSlCCI\nxAlJXRV4s9MqO0wQxRV7oIdvLb5glBGxX8Xxb4cWyhD5uN6J2Mm0LrrK8CSDrMRA\nZu9c2WKT5d1MaZIXD9N1k8F7DTkb8LmvsVGlh8uDnPpuw597IO25bMAtA2YRIOVf\n1AJXXLgKCkAcq4HrrHHCE/lhqP0gZOWFdq9HWgWzGb+/85Xzf1S8i1/PgdQRML26\njhPJv8Cu2RQ5BuvK+FpErbimXlEzXhJljSxGvQFdhtAY/pmXgwOYKMHo7jm+40iF\nsN880d7Awmdpr3kT3rE5IiIlUZBYEm6P99EORcz3K8GEMZpxWBj5wGr3h9jF//k=\n=5Nvh\n-----END PGP SIGNATURE-----\n", "payload": "tree a1aae18e3376d0b9ecba5e38c40186da5db08018\nparent 444a9c3f1afad7585e7a65a05dbea8025a67b675\nparent f36c643d4ff76f5d96304d31bdde45152e4e602e\nauthor kennytm <kennytm@gmail.com> 1527334338 +0800\ncommitter GitHub <noreply@github.com> 1527334338 +0800\n\nRollup merge of #50987 - estebank:underline-multiple-suggestions, r=petrochencov\n\nUnderline multiple suggested replacements in the same line\n\n<img width=\"685\" alt=\"screen shot 2018-05-22 at 21 06 48\" src=\"https://user-images.githubusercontent.com/1606434/40403051-174f3180-5e04-11e8-86b6-261630c5ff80.png\">\n\nFollow up to #50943.\n\nFix #50977.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/103abdb75c39e36457d182e16e4cc81dff42a192", "html_url": "https://github.com/rust-lang/rust/commit/103abdb75c39e36457d182e16e4cc81dff42a192", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/103abdb75c39e36457d182e16e4cc81dff42a192/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "444a9c3f1afad7585e7a65a05dbea8025a67b675", "url": "https://api.github.com/repos/rust-lang/rust/commits/444a9c3f1afad7585e7a65a05dbea8025a67b675", "html_url": "https://github.com/rust-lang/rust/commit/444a9c3f1afad7585e7a65a05dbea8025a67b675"}, {"sha": "f36c643d4ff76f5d96304d31bdde45152e4e602e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f36c643d4ff76f5d96304d31bdde45152e4e602e", "html_url": "https://github.com/rust-lang/rust/commit/f36c643d4ff76f5d96304d31bdde45152e4e602e"}], "stats": {"total": 82, "additions": 56, "deletions": 26}, "files": [{"sha": "4d1d33e1325b8b550286205eac062e2675114c9c", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 52, "deletions": 18, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/103abdb75c39e36457d182e16e4cc81dff42a192/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103abdb75c39e36457d182e16e4cc81dff42a192/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=103abdb75c39e36457d182e16e4cc81dff42a192", "patch": "@@ -1215,19 +1215,20 @@ impl EmitterWriter {\n \n             let mut row_num = 2;\n             for &(ref complete, ref parts) in suggestions.iter().take(MAX_SUGGESTIONS) {\n-                let show_underline = parts.len() == 1\n-                    && complete.lines().count() == 1\n-                    && parts[0].snippet.trim() != complete.trim();\n+                // Only show underline if the suggestion spans a single line and doesn't cover the\n+                // entirety of the code output. If you have multiple replacements in the same line\n+                // of code, show the underline.\n+                let show_underline = !(parts.len() == 1\n+                    && parts[0].snippet.trim() == complete.trim())\n+                    && complete.lines().count() == 1;\n \n                 let lines = cm.span_to_lines(parts[0].span).unwrap();\n \n                 assert!(!lines.lines.is_empty());\n \n-                let span_start_pos = cm.lookup_char_pos(parts[0].span.lo());\n-                let line_start = span_start_pos.line;\n+                let line_start = cm.lookup_char_pos(parts[0].span.lo()).line;\n                 draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);\n                 let mut line_pos = 0;\n-                // Only show underline if there's a single suggestion and it is a single line\n                 let mut lines = complete.lines();\n                 for line in lines.by_ref().take(MAX_HIGHLIGHT_LINES) {\n                     // Print the span column to avoid confusion\n@@ -1241,22 +1242,55 @@ impl EmitterWriter {\n                     line_pos += 1;\n                     row_num += 1;\n                 }\n+\n+                // This offset and the ones below need to be signed to account for replacement code\n+                // that is shorter than the original code.\n+                let mut offset: isize = 0;\n                 // Only show an underline in the suggestions if the suggestion is not the\n                 // entirety of the code being shown and the displayed code is not multiline.\n                 if show_underline {\n                     draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n-                    let start = parts[0].snippet.len() - parts[0].snippet.trim_left().len();\n-                    // account for substitutions containing unicode characters\n-                    let sub_len = parts[0].snippet.trim().chars().fold(0, |acc, ch| {\n-                        acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n-                    });\n-                    let underline_start = span_start_pos.col_display + start;\n-                    let underline_end = span_start_pos.col_display + start + sub_len;\n-                    for p in underline_start..underline_end {\n-                        buffer.putc(row_num,\n-                                    max_line_num_len + 3 + p,\n-                                    '^',\n-                                    Style::UnderlinePrimary);\n+                    for part in parts {\n+                        let span_start_pos = cm.lookup_char_pos(part.span.lo()).col_display;\n+                        let span_end_pos = cm.lookup_char_pos(part.span.hi()).col_display;\n+\n+                        // Do not underline the leading...\n+                        let start = part.snippet.len()\n+                            .saturating_sub(part.snippet.trim_left().len());\n+                        // ...or trailing spaces. Account for substitutions containing unicode\n+                        // characters.\n+                        let sub_len = part.snippet.trim().chars().fold(0, |acc, ch| {\n+                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n+                        });\n+\n+                        let underline_start = (span_start_pos + start) as isize + offset;\n+                        let underline_end = (span_start_pos + start + sub_len) as isize + offset;\n+                        for p in underline_start..underline_end {\n+                            buffer.putc(row_num,\n+                                        max_line_num_len + 3 + p as usize,\n+                                        '^',\n+                                        Style::UnderlinePrimary);\n+                        }\n+                        // underline removals too\n+                        if underline_start == underline_end {\n+                            for p in underline_start-1..underline_start+1 {\n+                                buffer.putc(row_num,\n+                                            max_line_num_len + 3 + p as usize,\n+                                            '-',\n+                                            Style::UnderlineSecondary);\n+                            }\n+                        }\n+\n+                        // length of the code after substitution\n+                        let full_sub_len = part.snippet.chars().fold(0, |acc, ch| {\n+                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0) as isize\n+                        });\n+\n+                        // length of the code to be substituted\n+                        let snippet_len = (span_end_pos - span_start_pos) as isize;\n+                        // For multiple substitutions, use the position *after* the previous\n+                        // substitutions have happened.\n+                        offset += full_sub_len - snippet_len;\n                     }\n                     row_num += 1;\n                 }"}, {"sha": "808c134e9944864f964cb85648ee0474fb0e67a0", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/103abdb75c39e36457d182e16e4cc81dff42a192/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/103abdb75c39e36457d182e16e4cc81dff42a192/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=103abdb75c39e36457d182e16e4cc81dff42a192", "patch": "@@ -777,7 +777,7 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         let new_generics_span = tcx\n                             .sess\n                             .codemap()\n-                            .generate_fn_name_span(impl_m.span)?\n+                            .generate_fn_name_span(impl_span)?\n                             .shrink_to_hi();\n                         // in case there are generics, just replace them\n                         let generics_span = impl_m"}, {"sha": "a5f1580b60d2f6ee0290a1a3e3780f9c0ebe868e", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/103abdb75c39e36457d182e16e4cc81dff42a192/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/103abdb75c39e36457d182e16e4cc81dff42a192/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=103abdb75c39e36457d182e16e4cc81dff42a192", "patch": "@@ -9,7 +9,7 @@ LL |     fn foo<U: Debug>(&self, _: &U) { }\n help: try removing the generic parameter and using `impl Trait` instead\n    |\n LL |     fn foo(&self, _: &impl Debug) { }\n-   |\n+   |          --           ^^^^^^^^^^\n \n error[E0643]: method `bar` has incompatible signature for trait\n   --> $DIR/impl-generic-mismatch.rs:27:23\n@@ -21,12 +21,8 @@ LL |     fn bar(&self, _: &impl Debug) { }\n    |                       ^^^^^^^^^^ expected generic parameter, found `impl Trait`\n help: try changing the `impl Trait` argument to a generic parameter\n    |\n-LL |     fn bar<U: Debug><U: Debug>(&self, _: &U);\n-LL | }\n-LL | \n-LL | impl Bar for () {\n-LL |     fn bar(&self, _: &U) { }\n-   |\n+LL |     fn bar<U: Debug>(&self, _: &U) { }\n+   |           ^^^^^^^^^^            ^\n \n error[E0643]: method `hash` has incompatible signature for trait\n   --> $DIR/impl-generic-mismatch.rs:38:33"}]}