{"sha": "dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOTBlMGI1YTVkNGYyMjU1ZDZmMGI4MjIwNGYyNmNiYWFmYmRkNDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-17T15:51:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-17T15:51:46Z"}, "message": "Better encapsulate reverse-mapping of files to cargo targets\n\nWe need to find a better way to do it...\n\nCrateGraph by itself is fine, CargoWorkspace as well, but the mapping\nbetween the two seems arbitrary...", "tree": {"sha": "f1fec822afdef76d83d56918ab5ce12697dd8943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1fec822afdef76d83d56918ab5ce12697dd8943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46", "html_url": "https://github.com/rust-lang/rust/commit/dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "931f3173992df6ac6b728fa9fa9a94d15781027e", "url": "https://api.github.com/repos/rust-lang/rust/commits/931f3173992df6ac6b728fa9fa9a94d15781027e", "html_url": "https://github.com/rust-lang/rust/commit/931f3173992df6ac6b728fa9fa9a94d15781027e"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "5c22dce0d442552e3a273d684cda44f9ff123660", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46", "patch": "@@ -2,7 +2,7 @@\n \n use ra_cfg::CfgExpr;\n use ra_ide::{FileId, RunnableKind, TestId};\n-use ra_project_model::{self, ProjectWorkspace, TargetKind};\n+use ra_project_model::{self, TargetKind};\n \n use crate::{global_state::GlobalStateSnapshot, Result};\n \n@@ -89,27 +89,23 @@ impl CargoTargetSpec {\n     }\n \n     pub(crate) fn for_file(\n-        world: &GlobalStateSnapshot,\n+        global_state_snapshot: &GlobalStateSnapshot,\n         file_id: FileId,\n     ) -> Result<Option<CargoTargetSpec>> {\n-        let &crate_id = match world.analysis().crate_for(file_id)?.first() {\n-            Some(crate_id) => crate_id,\n+        let crate_id = match global_state_snapshot.analysis().crate_for(file_id)?.first() {\n+            Some(crate_id) => *crate_id,\n             None => return Ok(None),\n         };\n-        let file_id = world.analysis().crate_root(crate_id)?;\n-        let path = world.file_id_to_path(file_id);\n-        let res = world.workspaces.iter().find_map(|ws| match ws {\n-            ProjectWorkspace::Cargo { cargo, .. } => {\n-                let tgt = cargo.target_by_root(&path)?;\n-                Some(CargoTargetSpec {\n-                    package: cargo.package_flag(&cargo[cargo[tgt].package]),\n-                    target: cargo[tgt].name.clone(),\n-                    target_kind: cargo[tgt].kind,\n-                })\n-            }\n-            ProjectWorkspace::Json { .. } => None,\n-        });\n-        Ok(res)\n+        let (cargo_ws, target) = match global_state_snapshot.cargo_target_for_crate_root(crate_id) {\n+            Some(it) => it,\n+            None => return Ok(None),\n+        };\n+        let res = CargoTargetSpec {\n+            package: cargo_ws.package_flag(&cargo_ws[cargo_ws[target].package]),\n+            target: cargo_ws[target].name.clone(),\n+            target_kind: cargo_ws[target].kind,\n+        };\n+        Ok(Some(res))\n     }\n \n     pub(crate) fn push_to(self, buf: &mut Vec<String>, kind: &RunnableKind) {"}, {"sha": "ef6c7d44d2ad95346a8708d758931bf845ff9f8e", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=dc90e0b5a5d4f2255d6f0b82204f26cbaafbdd46", "patch": "@@ -15,7 +15,7 @@ use ra_flycheck::{Flycheck, FlycheckConfig};\n use ra_ide::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n-use ra_project_model::{ProcMacroClient, ProjectWorkspace};\n+use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n use stdx::format_to;\n@@ -28,7 +28,7 @@ use crate::{\n     vfs_glob::{Glob, RustPackageFilterBuilder},\n     LspError, Result,\n };\n-use ra_db::ExternSourceId;\n+use ra_db::{CrateId, ExternSourceId};\n use rustc_hash::{FxHashMap, FxHashSet};\n \n fn create_flycheck(workspaces: &[ProjectWorkspace], config: &FlycheckConfig) -> Option<Flycheck> {\n@@ -290,10 +290,6 @@ impl GlobalStateSnapshot {\n         file_id_to_url(&self.vfs.read(), id)\n     }\n \n-    pub fn file_id_to_path(&self, id: FileId) -> PathBuf {\n-        self.vfs.read().file2path(VfsFile(id.0))\n-    }\n-\n     pub fn file_line_endings(&self, id: FileId) -> LineEndings {\n         self.vfs.read().file_line_endings(VfsFile(id.0))\n     }\n@@ -305,6 +301,20 @@ impl GlobalStateSnapshot {\n         url_from_abs_path(&path)\n     }\n \n+    pub(crate) fn cargo_target_for_crate_root(\n+        &self,\n+        crate_id: CrateId,\n+    ) -> Option<(&CargoWorkspace, Target)> {\n+        let file_id = self.analysis().crate_root(crate_id).ok()?;\n+        let path = self.vfs.read().file2path(VfsFile(file_id.0));\n+        self.workspaces.iter().find_map(|ws| match ws {\n+            ProjectWorkspace::Cargo { cargo, .. } => {\n+                cargo.target_by_root(&path).map(|it| (cargo, it))\n+            }\n+            ProjectWorkspace::Json { .. } => None,\n+        })\n+    }\n+\n     pub fn status(&self) -> String {\n         let mut buf = String::new();\n         if self.workspaces.is_empty() {"}]}