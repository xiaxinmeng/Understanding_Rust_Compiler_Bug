{"sha": "3d31a6b8991005525d55226099d8c8457a0739f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMzFhNmI4OTkxMDA1NTI1ZDU1MjI2MDk5ZDhjODQ1N2EwNzM5ZjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-11T00:18:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-11T00:18:12Z"}, "message": "Remove several references to resources; add section for Constants.", "tree": {"sha": "1ce71e1c85a5bc770a174414fe4c2ad54e739060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce71e1c85a5bc770a174414fe4c2ad54e739060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d31a6b8991005525d55226099d8c8457a0739f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d31a6b8991005525d55226099d8c8457a0739f6", "html_url": "https://github.com/rust-lang/rust/commit/3d31a6b8991005525d55226099d8c8457a0739f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d31a6b8991005525d55226099d8c8457a0739f6/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cad6733db5199f35cc64334aa53b635668635931", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad6733db5199f35cc64334aa53b635668635931", "html_url": "https://github.com/rust-lang/rust/commit/cad6733db5199f35cc64334aa53b635668635931"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "9d2e12fde845b30221e59fbbf269665d8c9a4774", "filename": "doc/rust.md", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d31a6b8991005525d55226099d8c8457a0739f6/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d31a6b8991005525d55226099d8c8457a0739f6/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=3d31a6b8991005525d55226099d8c8457a0739f6", "patch": "@@ -706,7 +706,7 @@ There are several kinds of item:\n   * [functions](#functions)\n   * [type definitions](#type-definitions)\n   * [enumerations](#enumerations)\n-  * [resources](#resources)\n+  * [constants](#constants)\n   * [traits](#traits)\n   * [implementations](#implementations)\n \n@@ -1151,6 +1151,18 @@ enum list<T> {\n let a: list<int> = cons(7, @cons(13, @nil));\n ~~~~\n \n+### Constants\n+\n+~~~~~~~~ {.ebnf .gram}\n+const_item : \"const\" ident ':' type '=' expr ';' ;\n+~~~~~~~~\n+\n+A Constant is a named value stored in read-only memory in a crate.\n+The value bound to a constant is evaluated at compile time.\n+Constants are declared with the `const` keyword.\n+A constant item must have an expression giving its definition.\n+The definition expression of a constant is limited to expression forms that can be evaluated at compile time.\n+\n ### Traits\n \n A _trait item_ describes a set of method types. [_implementation\n@@ -1425,7 +1437,7 @@ statement block. The declared name may denote a new slot or a new item.\n \n An _item declaration statement_ has a syntactic form identical to an\n [item](#items) declaration within a module. Declaring an item -- a function,\n-enumeration, type, resource, trait, implementation or module -- locally\n+enumeration, type, constant, trait, implementation or module -- locally\n within a statement block is simply a way of restricting its scope to a narrow\n region containing all of its uses; it is otherwise identical in meaning to\n declaring the item outside the statement block.\n@@ -1629,8 +1641,7 @@ operators, before the expression they apply to.\n `-`\n   : Negation. May only be applied to numeric types.\n `*`\n-  : Dereference. When applied to a [box](#box-types) or\n-    [resource](#resources) type, it accesses the inner value. For\n+  : Dereference. When applied to a [pointer](#pointer-types) it denotes the pointed-to location. For\n     mutable boxes, the resulting [lvalue](#lvalues-rvalues-and-temporaries) can be assigned to. For\n     [enums](#enumerated-types) that have only a single variant,\n     containing a single parameter, the dereference operator accesses\n@@ -2185,7 +2196,7 @@ fail_expr : \"fail\" expr ? ;\n \n Evaluating a `fail` expression causes a task to enter the *failing* state. In\n the *failing* state, a task unwinds its stack, destroying all frames and\n-freeing all resources until it reaches its entry frame, at which point it\n+running all destructors until it reaches its entry frame, at which point it\n halts execution in the *dead* state.\n \n "}]}