{"sha": "70775304cd83bf01bf91d5cf206923064fca68ef", "node_id": "C_kwDOAAsO6NoAKDcwNzc1MzA0Y2Q4M2JmMDFiZjkxZDVjZjIwNjkyMzA2NGZjYTY4ZWY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-02T16:55:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:45Z"}, "message": "Address nits", "tree": {"sha": "92b44a10d78c7770433e8cabeb36f6e90190d5c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92b44a10d78c7770433e8cabeb36f6e90190d5c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70775304cd83bf01bf91d5cf206923064fca68ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70775304cd83bf01bf91d5cf206923064fca68ef", "html_url": "https://github.com/rust-lang/rust/commit/70775304cd83bf01bf91d5cf206923064fca68ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70775304cd83bf01bf91d5cf206923064fca68ef/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "249ede4195a40147c45411f1fa27e376d40f4f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/249ede4195a40147c45411f1fa27e376d40f4f95", "html_url": "https://github.com/rust-lang/rust/commit/249ede4195a40147c45411f1fa27e376d40f4f95"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "8fa2c593193e5be3b7b6b0f6e6c8c5eb0decc33d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70775304cd83bf01bf91d5cf206923064fca68ef/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70775304cd83bf01bf91d5cf206923064fca68ef/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=70775304cd83bf01bf91d5cf206923064fca68ef", "patch": "@@ -1357,7 +1357,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         )\n                     }\n                     ImplTraitContext::InTrait => {\n-                        // FIXME(RPITIT): Should we use def_node_id here?\n                         self.lower_impl_trait_in_trait(span, def_node_id, |lctx| {\n                             lctx.lower_param_bounds(\n                                 bounds,"}, {"sha": "e7c26bd726fbfd69fa45532d5658d752de9a4232", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70775304cd83bf01bf91d5cf206923064fca68ef/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70775304cd83bf01bf91d5cf206923064fca68ef/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=70775304cd83bf01bf91d5cf206923064fca68ef", "patch": "@@ -193,7 +193,6 @@ impl DefKind {\n             | DefKind::Variant\n             | DefKind::Trait\n             | DefKind::OpaqueTy\n-            | DefKind::ImplTraitPlaceholder\n             | DefKind::TyAlias\n             | DefKind::ForeignTy\n             | DefKind::TraitAlias\n@@ -221,7 +220,8 @@ impl DefKind {\n             | DefKind::Use\n             | DefKind::ForeignMod\n             | DefKind::GlobalAsm\n-            | DefKind::Impl => None,\n+            | DefKind::Impl\n+            | DefKind::ImplTraitPlaceholder => None,\n         }\n     }\n "}, {"sha": "8b1ebe34cb00fe9a1fc5788b49aa5e60029cd7d1", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70775304cd83bf01bf91d5cf206923064fca68ef/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70775304cd83bf01bf91d5cf206923064fca68ef/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=70775304cd83bf01bf91d5cf206923064fca68ef", "patch": "@@ -2551,7 +2551,10 @@ pub enum TyKind<'hir> {\n     /// The generic argument list contains the lifetimes (and in the future\n     /// possibly parameters) that are actually bound on the `impl Trait`.\n     OpaqueDef(ItemId, &'hir [GenericArg<'hir>]),\n-    /// The placeholder\n+    /// A type that represents an `impl Trait` in a trait function. This is\n+    /// not an opaque type, since it acts more like an associated type than\n+    /// an opaque, and since it needs no generics since it inherits those\n+    /// from the item's parent.\n     ImplTraitInTrait(ItemId),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime."}, {"sha": "6c9efea8ca87fc31e5e6d76e262b69db96c72023", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70775304cd83bf01bf91d5cf206923064fca68ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70775304cd83bf01bf91d5cf206923064fca68ef/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=70775304cd83bf01bf91d5cf206923064fca68ef", "patch": "@@ -1308,9 +1308,9 @@ fn project<'cx, 'tcx>(\n     }\n }\n \n-/// The first thing we have to do is scan through the parameter\n-/// environment to see whether there are any projection predicates\n-/// there that can answer this question.\n+/// If the predicate's item is an `ImplTraitPlaceholder`, we do a select on the\n+/// corresponding trait ref. If this yields an `impl`, then we're able to project\n+/// to a concrete type, since we have an `impl`'s method  to provide the RPITIT.\n fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,"}]}