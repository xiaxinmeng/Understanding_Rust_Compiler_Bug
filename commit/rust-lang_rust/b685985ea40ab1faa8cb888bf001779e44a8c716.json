{"sha": "b685985ea40ab1faa8cb888bf001779e44a8c716", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODU5ODVlYTQwYWIxZmFhOGNiODg4YmYwMDE3NzllNDRhOGM3MTY=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-02-03T11:50:49Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-02-08T10:10:05Z"}, "message": "Refine and extend benchmarks of mutable BTreeSet methods", "tree": {"sha": "6c66c737be29d2f075129e20ef4aef9a6f35e39a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c66c737be29d2f075129e20ef4aef9a6f35e39a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b685985ea40ab1faa8cb888bf001779e44a8c716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b685985ea40ab1faa8cb888bf001779e44a8c716", "html_url": "https://github.com/rust-lang/rust/commit/b685985ea40ab1faa8cb888bf001779e44a8c716", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b685985ea40ab1faa8cb888bf001779e44a8c716/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bae3d0dfc716ccbe511455275b77ccb3b5b8437b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bae3d0dfc716ccbe511455275b77ccb3b5b8437b", "html_url": "https://github.com/rust-lang/rust/commit/bae3d0dfc716ccbe511455275b77ccb3b5b8437b"}], "stats": {"total": 101, "additions": 85, "deletions": 16}, "files": [{"sha": "d9e75ab7fa4ef6cefd68e85afea59bae35e149ad", "filename": "src/liballoc/benches/btree/set.rs", "status": "modified", "additions": 85, "deletions": 16, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/b685985ea40ab1faa8cb888bf001779e44a8c716/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b685985ea40ab1faa8cb888bf001779e44a8c716/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fbtree%2Fset.rs?ref=b685985ea40ab1faa8cb888bf001779e44a8c716", "patch": "@@ -50,43 +50,112 @@ macro_rules! set_bench {\n     };\n }\n \n-const BUILD_SET_SIZE: usize = 100;\n+#[bench]\n+pub fn clone_100(b: &mut Bencher) {\n+    let src = pos(100);\n+    b.iter(|| src.clone())\n+}\n \n #[bench]\n-pub fn build_and_clear(b: &mut Bencher) {\n-    b.iter(|| pos(BUILD_SET_SIZE).clear())\n+pub fn clone_100_and_clear(b: &mut Bencher) {\n+    let src = pos(100);\n+    b.iter(|| src.clone().clear())\n }\n \n #[bench]\n-pub fn build_and_drop(b: &mut Bencher) {\n-    b.iter(|| pos(BUILD_SET_SIZE))\n+pub fn clone_100_and_into_iter(b: &mut Bencher) {\n+    let src = pos(100);\n+    b.iter(|| src.clone().into_iter().count())\n }\n \n #[bench]\n-pub fn build_and_into_iter(b: &mut Bencher) {\n-    b.iter(|| pos(BUILD_SET_SIZE).into_iter().count())\n+pub fn clone_100_and_pop_all(b: &mut Bencher) {\n+    let src = pos(100);\n+    b.iter(|| {\n+        let mut set = src.clone();\n+        while set.pop_first().is_some() {}\n+        set\n+    });\n }\n \n #[bench]\n-pub fn build_and_pop_all(b: &mut Bencher) {\n+pub fn clone_100_and_remove_all(b: &mut Bencher) {\n+    let src = pos(100);\n     b.iter(|| {\n-        let mut s = pos(BUILD_SET_SIZE);\n-        while s.pop_first().is_some() {}\n-        s\n+        let mut set = src.clone();\n+        while let Some(elt) = set.iter().copied().next() {\n+            set.remove(&elt);\n+        }\n+        set\n     });\n }\n \n #[bench]\n-pub fn build_and_remove_all(b: &mut Bencher) {\n+pub fn clone_100_and_remove_half(b: &mut Bencher) {\n+    let src = pos(100);\n     b.iter(|| {\n-        let mut s = pos(BUILD_SET_SIZE);\n-        while let Some(elt) = s.iter().copied().next() {\n-            s.remove(&elt);\n+        let mut set = src.clone();\n+        for i in (2..=100 as i32).step_by(2) {\n+            set.remove(&i);\n         }\n-        s\n+        assert_eq!(set.len(), 100 / 2);\n+        set\n+    })\n+}\n+\n+#[bench]\n+pub fn clone_10k(b: &mut Bencher) {\n+    let src = pos(10_000);\n+    b.iter(|| src.clone())\n+}\n+\n+#[bench]\n+pub fn clone_10k_and_clear(b: &mut Bencher) {\n+    let src = pos(10_000);\n+    b.iter(|| src.clone().clear())\n+}\n+\n+#[bench]\n+pub fn clone_10k_and_into_iter(b: &mut Bencher) {\n+    let src = pos(10_000);\n+    b.iter(|| src.clone().into_iter().count())\n+}\n+\n+#[bench]\n+pub fn clone_10k_and_pop_all(b: &mut Bencher) {\n+    let src = pos(10_000);\n+    b.iter(|| {\n+        let mut set = src.clone();\n+        while set.pop_first().is_some() {}\n+        set\n+    });\n+}\n+\n+#[bench]\n+pub fn clone_10k_and_remove_all(b: &mut Bencher) {\n+    let src = pos(10_000);\n+    b.iter(|| {\n+        let mut set = src.clone();\n+        while let Some(elt) = set.iter().copied().next() {\n+            set.remove(&elt);\n+        }\n+        set\n     });\n }\n \n+#[bench]\n+pub fn clone_10k_and_remove_half(b: &mut Bencher) {\n+    let src = pos(10_000);\n+    b.iter(|| {\n+        let mut set = src.clone();\n+        for i in (2..=10_000 as i32).step_by(2) {\n+            set.remove(&i);\n+        }\n+        assert_eq!(set.len(), 10_000 / 2);\n+        set\n+    })\n+}\n+\n set_bench! {intersection_100_neg_vs_100_pos, intersection, count, [neg(100), pos(100)]}\n set_bench! {intersection_100_neg_vs_10k_pos, intersection, count, [neg(100), pos(10_000)]}\n set_bench! {intersection_100_pos_vs_100_neg, intersection, count, [pos(100), neg(100)]}"}]}