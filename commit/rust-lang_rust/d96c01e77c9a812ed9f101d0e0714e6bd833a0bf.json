{"sha": "d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NmMwMWU3N2M5YTgxMmVkOWYxMDFkMGUwNzE0ZTZiZDgzM2EwYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-24T09:54:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-24T09:54:17Z"}, "message": "Auto merge of #60803 - varkor:remove-in-place-syntax, r=petrochenkov\n\nRemove `ObsoleteInPlace`\n\nThe in place syntax has been deprecated for over a year. As it is, this is accumulated cruft: the error messages are unlikely to be helpful any more and it conflicts with some useful syntax (e.g. const generics in some instances).\n\nIt may be that removing `Token::LArrow` is backwards-incompatible. We should do a crater run to check.\n\ncc @eddyb", "tree": {"sha": "8f9a8f329b476948241b0d1153afac67731fd237", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f9a8f329b476948241b0d1153afac67731fd237"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "html_url": "https://github.com/rust-lang/rust/commit/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46805805abe58c287fa16963f897fd09d5d97467", "url": "https://api.github.com/repos/rust-lang/rust/commits/46805805abe58c287fa16963f897fd09d5d97467", "html_url": "https://github.com/rust-lang/rust/commit/46805805abe58c287fa16963f897fd09d5d97467"}, {"sha": "36f654262d05a65c41efdbac0ddeffa9bac8ae21", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f654262d05a65c41efdbac0ddeffa9bac8ae21", "html_url": "https://github.com/rust-lang/rust/commit/36f654262d05a65c41efdbac0ddeffa9bac8ae21"}], "stats": {"total": 163, "additions": 55, "deletions": 108}, "files": [{"sha": "3d83918bd0a661989ef1d7a78eac2504ae75e42a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -4062,10 +4062,6 @@ impl<'a> LoweringContext<'a> {\n     fn lower_expr(&mut self, e: &Expr) -> hir::Expr {\n         let kind = match e.node {\n             ExprKind::Box(ref inner) => hir::ExprKind::Box(P(self.lower_expr(inner))),\n-            ExprKind::ObsoleteInPlace(..) => {\n-                self.sess.abort_if_errors();\n-                span_bug!(e.span, \"encountered ObsoleteInPlace expr during lowering\");\n-            }\n             ExprKind::Array(ref exprs) => {\n                 hir::ExprKind::Array(exprs.iter().map(|x| self.lower_expr(x)).collect())\n             }"}, {"sha": "2afcbe8a151373bbc6ca64ae8c155e9d8c554c53", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -454,29 +454,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ExprKind::InlineAsm(..) if !self.session.target.target.options.allow_asm => {\n                 span_err!(self.session, expr.span, E0472, \"asm! is unsupported on this target\");\n             }\n-            ExprKind::ObsoleteInPlace(ref place, ref val) => {\n-                let mut err = self.err_handler().struct_span_err(\n-                    expr.span,\n-                    \"emplacement syntax is obsolete (for now, anyway)\",\n-                );\n-                err.note(\n-                    \"for more information, see \\\n-                     <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\"\n-                );\n-                match val.node {\n-                    ExprKind::Lit(ref v) if v.node.is_numeric() => {\n-                        err.span_suggestion(\n-                            place.span.between(val.span),\n-                            \"if you meant to write a comparison against a negative value, add a \\\n-                             space in between `<` and `-`\",\n-                            \"< -\".to_string(),\n-                            Applicability::MaybeIncorrect\n-                        );\n-                    }\n-                    _ => {}\n-                }\n-                err.emit();\n-            }\n             _ => {}\n         }\n "}, {"sha": "3276f152575f7780e2d888594738d81a8ae9d3c3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -1037,7 +1037,6 @@ impl Expr {\n     pub fn precedence(&self) -> ExprPrecedence {\n         match self.node {\n             ExprKind::Box(_) => ExprPrecedence::Box,\n-            ExprKind::ObsoleteInPlace(..) => ExprPrecedence::ObsoleteInPlace,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n             ExprKind::MethodCall(..) => ExprPrecedence::MethodCall,\n@@ -1099,8 +1098,6 @@ pub enum RangeLimits {\n pub enum ExprKind {\n     /// A `box x` expression.\n     Box(P<Expr>),\n-    /// First expr is the place; second expr is the value.\n-    ObsoleteInPlace(P<Expr>, P<Expr>),\n     /// An array (`[a, b, c, d]`)\n     Array(Vec<P<Expr>>),\n     /// A function call"}, {"sha": "6a049b80acae225c851ab9af390fc92593ce82e3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -2117,9 +2117,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                        \"type ascription is experimental\");\n                 }\n             }\n-            ast::ExprKind::ObsoleteInPlace(..) => {\n-                // these get a hard error in ast-validation\n-            }\n             ast::ExprKind::Yield(..) => {\n                 gate_feature_post!(&self, generators,\n                                   e.span,"}, {"sha": "0016c0d4d7e2b26ade57deeecdd568b5fb016c53", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -1099,10 +1099,6 @@ pub fn noop_visit_anon_const<T: MutVisitor>(AnonConst { id, value }: &mut AnonCo\n pub fn noop_visit_expr<T: MutVisitor>(Expr { node, id, span, attrs }: &mut Expr, vis: &mut T) {\n     match node {\n         ExprKind::Box(expr) => vis.visit_expr(expr),\n-        ExprKind::ObsoleteInPlace(a, b) => {\n-            vis.visit_expr(a);\n-            vis.visit_expr(b);\n-        }\n         ExprKind::Array(exprs) => visit_exprs(exprs, vis),\n         ExprKind::Repeat(expr, count) => {\n             vis.visit_expr(expr);"}, {"sha": "11c566b65e50a0bf237b0eb1aff0001e9424d735", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -3252,17 +3252,6 @@ impl<'a> Parser<'a> {\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n                 (lo.to(span), ExprKind::AddrOf(m, e))\n             }\n-            token::Ident(..) if self.token.is_keyword(kw::In) => {\n-                self.bump();\n-                let place = self.parse_expr_res(\n-                    Restrictions::NO_STRUCT_LITERAL,\n-                    None,\n-                )?;\n-                let blk = self.parse_block()?;\n-                let span = blk.span;\n-                let blk_expr = self.mk_expr(span, ExprKind::Block(blk, None), ThinVec::new());\n-                (lo.to(span), ExprKind::ObsoleteInPlace(place, blk_expr))\n-            }\n             token::Ident(..) if self.token.is_keyword(kw::Box) => {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n@@ -3500,8 +3489,6 @@ impl<'a> Parser<'a> {\n                     self.mk_expr(span, binary, ThinVec::new())\n                 }\n                 AssocOp::Assign => self.mk_expr(span, ExprKind::Assign(lhs, rhs), ThinVec::new()),\n-                AssocOp::ObsoleteInPlace =>\n-                    self.mk_expr(span, ExprKind::ObsoleteInPlace(lhs, rhs), ThinVec::new()),\n                 AssocOp::AssignOp(k) => {\n                     let aop = match k {\n                         token::Plus =>    BinOpKind::Add,\n@@ -3820,9 +3807,6 @@ impl<'a> Parser<'a> {\n                 String::new(),\n                 Applicability::MachineApplicable,\n             );\n-            err.note(\"if you meant to use emplacement syntax, it is obsolete (for now, anyway)\");\n-            err.note(\"for more information on the status of emplacement syntax, see <\\\n-                      https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\");\n             err.emit();\n         }\n         let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;"}, {"sha": "cf546332c2c9dde920ef7b292a05df82cc3c8b45", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -2005,13 +2005,6 @@ impl<'a> State<'a> {\n                 self.word_space(\"box\")?;\n                 self.print_expr_maybe_paren(expr, parser::PREC_PREFIX)?;\n             }\n-            ast::ExprKind::ObsoleteInPlace(ref place, ref expr) => {\n-                let prec = AssocOp::ObsoleteInPlace.precedence() as i8;\n-                self.print_expr_maybe_paren(place, prec + 1)?;\n-                self.s.space()?;\n-                self.word_space(\"<-\")?;\n-                self.print_expr_maybe_paren(expr, prec)?;\n-            }\n             ast::ExprKind::Array(ref exprs) => {\n                 self.print_expr_vec(&exprs[..], attrs)?;\n             }"}, {"sha": "7e306d59e35ce5363fe946b03c24111a87c7fb14", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -45,8 +45,6 @@ pub enum AssocOp {\n     GreaterEqual,\n     /// `=`\n     Assign,\n-    /// `<-`\n-    ObsoleteInPlace,\n     /// `?=` where ? is one of the BinOpToken\n     AssignOp(BinOpToken),\n     /// `as`\n@@ -75,7 +73,6 @@ impl AssocOp {\n         use AssocOp::*;\n         match *t {\n             Token::BinOpEq(k) => Some(AssignOp(k)),\n-            Token::LArrow => Some(ObsoleteInPlace),\n             Token::Eq => Some(Assign),\n             Token::BinOp(BinOpToken::Star) => Some(Multiply),\n             Token::BinOp(BinOpToken::Slash) => Some(Divide),\n@@ -145,7 +142,6 @@ impl AssocOp {\n             LAnd => 6,\n             LOr => 5,\n             DotDot | DotDotEq => 4,\n-            ObsoleteInPlace => 3,\n             Assign | AssignOp(_) => 2,\n         }\n     }\n@@ -155,7 +151,7 @@ impl AssocOp {\n         use AssocOp::*;\n         // NOTE: it is a bug to have an operators that has same precedence but different fixities!\n         match *self {\n-            ObsoleteInPlace | Assign | AssignOp(_) => Fixity::Right,\n+            Assign | AssignOp(_) => Fixity::Right,\n             As | Multiply | Divide | Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd |\n             BitXor | BitOr | Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual |\n             LAnd | LOr | Colon => Fixity::Left,\n@@ -167,7 +163,7 @@ impl AssocOp {\n         use AssocOp::*;\n         match *self {\n             Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual => true,\n-            ObsoleteInPlace | Assign | AssignOp(_) | As | Multiply | Divide | Modulus | Add |\n+            Assign | AssignOp(_) | As | Multiply | Divide | Modulus | Add |\n             Subtract | ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd | LOr |\n             DotDot | DotDotEq | Colon => false\n         }\n@@ -176,7 +172,7 @@ impl AssocOp {\n     pub fn is_assign_like(&self) -> bool {\n         use AssocOp::*;\n         match *self {\n-            Assign | AssignOp(_) | ObsoleteInPlace => true,\n+            Assign | AssignOp(_) => true,\n             Less | Greater | LessEqual | GreaterEqual | Equal | NotEqual | As | Multiply | Divide |\n             Modulus | Add | Subtract | ShiftLeft | ShiftRight | BitAnd | BitXor | BitOr | LAnd |\n             LOr | DotDot | DotDotEq | Colon => false\n@@ -204,7 +200,7 @@ impl AssocOp {\n             BitOr => Some(BinOpKind::BitOr),\n             LAnd => Some(BinOpKind::And),\n             LOr => Some(BinOpKind::Or),\n-            ObsoleteInPlace | Assign | AssignOp(_) | As | DotDot | DotDotEq | Colon => None\n+            Assign | AssignOp(_) | As | DotDot | DotDotEq | Colon => None\n         }\n     }\n \n@@ -256,7 +252,6 @@ pub enum ExprPrecedence {\n \n     Binary(BinOpKind),\n \n-    ObsoleteInPlace,\n     Cast,\n     Type,\n \n@@ -314,7 +309,6 @@ impl ExprPrecedence {\n \n             // Binop-like expr kinds, handled by `AssocOp`.\n             ExprPrecedence::Binary(op) => AssocOp::from_ast_binop(op).precedence() as i8,\n-            ExprPrecedence::ObsoleteInPlace => AssocOp::ObsoleteInPlace.precedence() as i8,\n             ExprPrecedence::Cast => AssocOp::As.precedence() as i8,\n             ExprPrecedence::Type => AssocOp::Colon.precedence() as i8,\n "}, {"sha": "4e096d68235b5c35c9823fc82b1dc0fa7a497731", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -676,10 +676,6 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Box(ref subexpression) => {\n             visitor.visit_expr(subexpression)\n         }\n-        ExprKind::ObsoleteInPlace(ref place, ref subexpression) => {\n-            visitor.visit_expr(place);\n-            visitor.visit_expr(subexpression)\n-        }\n         ExprKind::Array(ref subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }"}, {"sha": "d895981050ae98932ca273ec3df85c576a953f51", "filename": "src/test/ui/obsolete-in-place/bad.bad.stderr", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.bad.stderr?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -1,18 +1,19 @@\n-error: emplacement syntax is obsolete (for now, anyway)\n-  --> $DIR/bad.rs:9:5\n-   |\n-LL |     x <- y;\n-   |     ^^^^^^\n-   |\n-   = note: for more information, see <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\n-\n-error: emplacement syntax is obsolete (for now, anyway)\n+error: expected expression, found keyword `in`\n   --> $DIR/bad.rs:10:5\n    |\n LL |     in(foo) { bar };\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^ expected expression\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/bad.rs:9:8\n+   |\n+LL |     let (x, y, foo, bar);\n+   |         ---------------- consider giving the pattern a type\n+LL |     x <- y;\n+   |        ^^^ cannot infer type\n    |\n-   = note: for more information, see <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\n+   = note: type must be known at this point\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "67676857e8da0046306709f77ec2d1a0f0b3e90d", "filename": "src/test/ui/obsolete-in-place/bad.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -1,15 +1,12 @@\n // Check that `<-` and `in` syntax gets a hard error.\n \n-// revisions: good bad\n-//[good] run-pass\n-\n-#[cfg(bad)]\n-fn main() {\n-    let (x, y, foo, bar);\n-    x <- y; //[bad]~ ERROR emplacement syntax is obsolete\n-    in(foo) { bar }; //[bad]~ ERROR emplacement syntax is obsolete\n+fn foo() {\n+    let (x, y) = (0, 0);\n+    x <- y; //~ ERROR expected one of\n+    //~^ ERROR mismatched types\n }\n \n-#[cfg(good)]\n fn main() {\n+    let (foo, bar) = (0, 0);\n+    in(foo) { bar }; //~ ERROR expected expression, found keyword `in`\n }"}, {"sha": "91ea82a657dc332993e750147a54b2d0b904c67c", "filename": "src/test/ui/obsolete-in-place/bad.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.stderr?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -0,0 +1,27 @@\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `<-`\n+  --> $DIR/bad.rs:5:7\n+   |\n+LL |     x <- y;\n+   |       ^^ expected one of 8 possible tokens here\n+\n+error: expected expression, found keyword `in`\n+  --> $DIR/bad.rs:11:5\n+   |\n+LL |     in(foo) { bar };\n+   |     ^^ expected expression\n+\n+error[E0308]: mismatched types\n+  --> $DIR/bad.rs:5:5\n+   |\n+LL | fn foo() {\n+   |          - possibly return type missing here?\n+LL |     let (x, y) = (0, 0);\n+LL |     x <- y;\n+   |     ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1adb4429ec7d0b426041cc57ddcbcbaad5c84540", "filename": "src/test/ui/parser/if-in-in.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-in-in.stderr?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -5,9 +5,6 @@ LL |     for i in in 1..2 {\n    |           ---^^\n    |           |\n    |           help: remove the duplicated `in`\n-   |\n-   = note: if you meant to use emplacement syntax, it is obsolete (for now, anyway)\n-   = note: for more information on the status of emplacement syntax, see <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\n \n error: aborting due to previous error\n "}, {"sha": "2edd78ec8ab3d3065b2b095293c36beca4b2e805", "filename": "src/test/ui/placement-syntax.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fplacement-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fplacement-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fplacement-syntax.rs?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -1,7 +1,6 @@\n fn main() {\n     let x = -5;\n-    if x<-1 {\n-    //~^ ERROR emplacement syntax is obsolete\n+    if x<-1 { //~ ERROR expected `{`, found `<-`\n         println!(\"ok\");\n     }\n }"}, {"sha": "e90acce168e47a0cd402c43dfe81462436e6e7d8", "filename": "src/test/ui/placement-syntax.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fplacement-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf/src%2Ftest%2Fui%2Fplacement-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fplacement-syntax.stderr?ref=d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "patch": "@@ -1,14 +1,10 @@\n-error: emplacement syntax is obsolete (for now, anyway)\n-  --> $DIR/placement-syntax.rs:3:8\n+error: expected `{`, found `<-`\n+  --> $DIR/placement-syntax.rs:3:9\n    |\n LL |     if x<-1 {\n-   |        ^^^^\n-   |\n-   = note: for more information, see <https://github.com/rust-lang/rust/issues/27779#issuecomment-378416911>\n-help: if you meant to write a comparison against a negative value, add a space in between `<` and `-`\n-   |\n-LL |     if x< -1 {\n-   |         ^^^\n+   |     --  ^^ expected `{`\n+   |     |\n+   |     this `if` statement has a condition, but no block\n \n error: aborting due to previous error\n "}]}