{"sha": "c86a7e5f38e54f4404cc71874316eb0b4dba200b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NmE3ZTVmMzhlNTRmNDQwNGNjNzE4NzQzMTZlYjBiNGRiYTIwMGI=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-06T21:57:24Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-15T08:29:53Z"}, "message": "Misc doc updates", "tree": {"sha": "a6f5e9f7d3cf4e07d2933e727d87c93e237cc604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6f5e9f7d3cf4e07d2933e727d87c93e237cc604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86a7e5f38e54f4404cc71874316eb0b4dba200b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86a7e5f38e54f4404cc71874316eb0b4dba200b", "html_url": "https://github.com/rust-lang/rust/commit/c86a7e5f38e54f4404cc71874316eb0b4dba200b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86a7e5f38e54f4404cc71874316eb0b4dba200b/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "332c2dcb4dfe5151d7c8d44cdf96c4abd06db593", "url": "https://api.github.com/repos/rust-lang/rust/commits/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593", "html_url": "https://github.com/rust-lang/rust/commit/332c2dcb4dfe5151d7c8d44cdf96c4abd06db593"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "0a58231558ede21304bf1ecc9f4b7cd1e60d29b5", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c86a7e5f38e54f4404cc71874316eb0b4dba200b/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86a7e5f38e54f4404cc71874316eb0b4dba200b/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=c86a7e5f38e54f4404cc71874316eb0b4dba200b", "patch": "@@ -51,6 +51,8 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///\n /// The `help` message can be optionally attached to a `Span`.\n ///\n+/// If you change the signature, remember to update the internal lint `CollapsibleCalls`\n+///\n /// # Example\n ///\n /// ```ignore\n@@ -87,6 +89,8 @@ pub fn span_lint_and_help<'a, T: LintContext>(\n /// The `note` message is presented separately from the main lint message\n /// and is attached to a specific span:\n ///\n+/// If you change the signature, remember to update the internal lint `CollapsibleCalls`\n+///\n /// # Example\n ///\n /// ```ignore\n@@ -126,6 +130,7 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n /// Like `span_lint` but allows to add notes, help and suggestions using a closure.\n ///\n /// If you need to customize your lint output a lot, use this function.\n+/// If you change the signature, remember to update the internal lint `CollapsibleCalls`\n pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n where\n     F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n@@ -168,6 +173,10 @@ pub fn span_lint_hir_and_then(\n /// In the example below, `help` is `\"try\"` and `sugg` is the suggested replacement `\".any(|x| x >\n /// 2)\"`.\n ///\n+/// If you change the signature, remember to update the internal lint `CollapsibleCalls`\n+///\n+/// # Example\n+///\n /// ```ignore\n /// error: This `.fold` can be more succinctly expressed as `.any`\n /// --> $DIR/methods.rs:390:13"}, {"sha": "53c3d084dbc98624bbe114172cf5f44ff7e82441", "filename": "doc/common_tools_writing_lints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86a7e5f38e54f4404cc71874316eb0b4dba200b/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/c86a7e5f38e54f4404cc71874316eb0b4dba200b/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=c86a7e5f38e54f4404cc71874316eb0b4dba200b", "patch": "@@ -60,7 +60,7 @@ impl LateLintPass<'_> for MyStructLint {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n             // Check our expr is calling a method\n-            if let hir::ExprKind::MethodCall(path, _, _args) = &expr.kind;\n+            if let hir::ExprKind::MethodCall(path, _, _args, _) = &expr.kind;\n             // Check the name of this method is `some_method`\n             if path.ident.name == sym!(some_method);\n             then {"}]}