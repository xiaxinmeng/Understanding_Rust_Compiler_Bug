{"sha": "b2cc593381aa835b708dfc2df05809e7574be0d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyY2M1OTMzODFhYTgzNWI3MDhkZmMyZGYwNTgwOWU3NTc0YmUwZDY=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-11-18T16:58:42Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-11-18T16:58:42Z"}, "message": "Support hover through macro", "tree": {"sha": "61c352fa2ca5cdb1e2192187a9e29ac6d6e3a5ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c352fa2ca5cdb1e2192187a9e29ac6d6e3a5ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2cc593381aa835b708dfc2df05809e7574be0d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2cc593381aa835b708dfc2df05809e7574be0d6", "html_url": "https://github.com/rust-lang/rust/commit/b2cc593381aa835b708dfc2df05809e7574be0d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2cc593381aa835b708dfc2df05809e7574be0d6/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7614439033bc8b68d3982d93595161ddfda80837", "url": "https://api.github.com/repos/rust-lang/rust/commits/7614439033bc8b68d3982d93595161ddfda80837", "html_url": "https://github.com/rust-lang/rust/commit/7614439033bc8b68d3982d93595161ddfda80837"}], "stats": {"total": 108, "additions": 66, "deletions": 42}, "files": [{"sha": "78210b085fedafeffa5cfa5b9745f2f8b30d584f", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 66, "deletions": 42, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/b2cc593381aa835b708dfc2df05809e7574be0d6/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2cc593381aa835b708dfc2df05809e7574be0d6/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=b2cc593381aa835b708dfc2df05809e7574be0d6", "patch": "@@ -1,11 +1,11 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, HasSource, HirDisplay, Source};\n+use hir::{db::AstDatabase, Adt, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    algo::{ancestors_at_offset, find_covering_element, find_node_at_offset},\n+    algo::find_covering_element,\n     ast::{self, DocCommentsOwner},\n-    AstNode,\n+    match_ast, AstNode,\n };\n \n use crate::{\n@@ -14,6 +14,7 @@ use crate::{\n         description_from_symbol, docs_from_symbol, macro_label, rust_code_markup,\n         rust_code_markup_with_doc, ShortLabel,\n     },\n+    expand::descend_into_macros,\n     references::{classify_name, classify_name_ref, NameKind, NameKind::*},\n     FilePosition, FileRange, RangeInfo,\n };\n@@ -162,55 +163,56 @@ fn hover_text_from_name_kind(\n }\n \n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n-    let parse = db.parse(position.file_id);\n-    let file = parse.tree();\n+    let file = db.parse_or_expand(position.file_id.into())?;\n+    let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+    let token = descend_into_macros(db, position.file_id, token);\n \n     let mut res = HoverResult::new();\n \n-    let mut range = if let Some(name_ref) =\n-        find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)\n-    {\n-        let mut no_fallback = false;\n-        if let Some(name_kind) =\n-            classify_name_ref(db, Source::new(position.file_id.into(), &name_ref)).map(|d| d.kind)\n-        {\n-            res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n-        }\n+    let mut range = match_ast! {\n+        match (token.ast.parent()) {\n+            ast::NameRef(name_ref) => {\n+                let mut no_fallback = false;\n+                if let Some(name_kind) =\n+                    classify_name_ref(db, token.with_ast(&name_ref)).map(|d| d.kind)\n+                {\n+                    res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n+                }\n \n-        if res.is_empty() && !no_fallback {\n-            // Fallback index based approach:\n-            let symbols = crate::symbol_index::index_resolve(db, &name_ref);\n-            for sym in symbols {\n-                let docs = docs_from_symbol(db, &sym);\n-                let desc = description_from_symbol(db, &sym);\n-                res.extend(hover_text(docs, desc));\n-            }\n-        }\n+                if res.is_empty() && !no_fallback {\n+                    // Fallback index based approach:\n+                    let symbols = crate::symbol_index::index_resolve(db, &name_ref);\n+                    for sym in symbols {\n+                        let docs = docs_from_symbol(db, &sym);\n+                        let desc = description_from_symbol(db, &sym);\n+                        res.extend(hover_text(docs, desc));\n+                    }\n+                }\n \n-        if !res.is_empty() {\n-            Some(name_ref.syntax().text_range())\n-        } else {\n-            None\n-        }\n-    } else if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n-        if let Some(name_kind) =\n-            classify_name(db, Source::new(position.file_id.into(), &name)).map(|d| d.kind)\n-        {\n-            let mut _b: bool = true;\n-            res.extend(hover_text_from_name_kind(db, name_kind, &mut _b));\n-        }\n+                if !res.is_empty() {\n+                    Some(name_ref.syntax().text_range())\n+                } else {\n+                    None\n+                }\n+            },\n+            ast::Name(name) => {\n+                if let Some(name_kind) = classify_name(db, token.with_ast(&name)).map(|d| d.kind) {\n+                    let mut _b: bool = true;\n+                    res.extend(hover_text_from_name_kind(db, name_kind, &mut _b));\n+                }\n \n-        if !res.is_empty() {\n-            Some(name.syntax().text_range())\n-        } else {\n-            None\n+                if !res.is_empty() {\n+                    Some(name.syntax().text_range())\n+                } else {\n+                    None\n+                }\n+            },\n+            _ => None,\n         }\n-    } else {\n-        None\n     };\n \n     if range.is_none() {\n-        let node = ancestors_at_offset(file.syntax(), position.offset).find(|n| {\n+        let node = token.ast.ancestors().find(|n| {\n             ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some()\n         })?;\n         let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n@@ -716,4 +718,26 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n+\n+    #[test]\n+    fn test_hover_through_macro() {\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            macro_rules! id {\n+                ($($tt:$tt)*) => { $($tt)* }\n+            }\n+\n+            fn foo() {}\n+\n+            id! {\n+                fn bar() {\n+                    foo<|>();\n+                }\n+            }\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"fn foo()\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+    }\n }"}]}