{"sha": "16fabd8efd416a8b957e369b8be2470e1271af9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZmFiZDhlZmQ0MTZhOGI5NTdlMzY5YjhiZTI0NzBlMTI3MWFmOWU=", "commit": {"author": {"name": "Brian Wignall", "email": "brianwignall@gmail.com", "date": "2019-11-27T03:19:54Z"}, "committer": {"name": "Brian Wignall", "email": "brianwignall@gmail.com", "date": "2019-11-27T03:19:54Z"}, "message": "Fix spelling typos", "tree": {"sha": "56aa5e9a690b55f0d28dd0556d918ddd23475bbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56aa5e9a690b55f0d28dd0556d918ddd23475bbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16fabd8efd416a8b957e369b8be2470e1271af9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16fabd8efd416a8b957e369b8be2470e1271af9e", "html_url": "https://github.com/rust-lang/rust/commit/16fabd8efd416a8b957e369b8be2470e1271af9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16fabd8efd416a8b957e369b8be2470e1271af9e/comments", "author": {"login": "bwignall", "id": 5581066, "node_id": "MDQ6VXNlcjU1ODEwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5581066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwignall", "html_url": "https://github.com/bwignall", "followers_url": "https://api.github.com/users/bwignall/followers", "following_url": "https://api.github.com/users/bwignall/following{/other_user}", "gists_url": "https://api.github.com/users/bwignall/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwignall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwignall/subscriptions", "organizations_url": "https://api.github.com/users/bwignall/orgs", "repos_url": "https://api.github.com/users/bwignall/repos", "events_url": "https://api.github.com/users/bwignall/events{/privacy}", "received_events_url": "https://api.github.com/users/bwignall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bwignall", "id": 5581066, "node_id": "MDQ6VXNlcjU1ODEwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5581066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bwignall", "html_url": "https://github.com/bwignall", "followers_url": "https://api.github.com/users/bwignall/followers", "following_url": "https://api.github.com/users/bwignall/following{/other_user}", "gists_url": "https://api.github.com/users/bwignall/gists{/gist_id}", "starred_url": "https://api.github.com/users/bwignall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bwignall/subscriptions", "organizations_url": "https://api.github.com/users/bwignall/orgs", "repos_url": "https://api.github.com/users/bwignall/repos", "events_url": "https://api.github.com/users/bwignall/events{/privacy}", "received_events_url": "https://api.github.com/users/bwignall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d791b4503a86c1b16b4393ba7998ef8b561a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d791b4503a86c1b16b4393ba7998ef8b561a27", "html_url": "https://github.com/rust-lang/rust/commit/a7d791b4503a86c1b16b4393ba7998ef8b561a27"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "f686dfe71b93733fdb4aff7296914dc76483f51a", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -113,7 +113,7 @@ impl Step for Std {\n     }\n }\n \n-/// Copies third pary objects needed by various targets.\n+/// Copies third party objects needed by various targets.\n fn copy_third_party_objects(builder: &Builder<'_>, compiler: &Compiler, target: Interned<String>)\n     -> Vec<PathBuf>\n {"}, {"sha": "ab010b35f6ad1568eb3233f767abefc0437dde2d", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -596,7 +596,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n             // (We might be one-past-the-end, but that is allowed by LLVM.)\n             // Getting the pointer is tricky though.  `NodeHeader` does not have a `keys`\n             // field because we want its size to not depend on the alignment of `K`\n-            // (needed becuase `as_header` should be safe).  We cannot call `as_leaf`\n+            // (needed because `as_header` should be safe).  We cannot call `as_leaf`\n             // because we might be the shared root.\n             // For this reason, `NodeHeader` has this `K2` parameter (that's usually `()`\n             // and hence just adds a size-0-align-1 field, not affecting layout)."}, {"sha": "0cc8da096f395dec1c2108d1189149761ad119aa", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -985,7 +985,7 @@ fn drain_filter_consumed_panic() {\n         };\n         let drain = data.drain_filter(filter);\n \n-        // NOTE: The DrainFilter is explictly consumed\n+        // NOTE: The DrainFilter is explicitly consumed\n         drain.for_each(drop);\n     });\n "}, {"sha": "3329a48b7c4594b2784bd8a0542e37a282de9a41", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -2837,7 +2837,7 @@ pub struct DrainFilter<'a, T, F>\n     old_len: usize,\n     /// The filter test predicate.\n     pred: F,\n-    /// A flag that indicates a panic has occured in the filter test prodicate.\n+    /// A flag that indicates a panic has occurred in the filter test prodicate.\n     /// This is used as a hint in the drop implmentation to prevent consumption\n     /// of the remainder of the `DrainFilter`. Any unprocessed items will be\n     /// backshifted in the `vec`, but no further items will be dropped or"}, {"sha": "a295e65bb5511cb7de07e0758ac971ea0404271e", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -113,7 +113,7 @@ pub fn spin_loop() {\n pub fn black_box<T>(dummy: T) -> T {\n     // We need to \"use\" the argument in some way LLVM can't introspect, and on\n     // targets that support it we can typically leverage inline assembly to do\n-    // this. LLVM's intepretation of inline assembly is that it's, well, a black\n+    // this. LLVM's interpretation of inline assembly is that it's, well, a black\n     // box. This isn't the greatest implementation since it probably deoptimizes\n     // more than we want, but it's so far good enough.\n     unsafe {"}, {"sha": "e3dc5630c94b4e805d0bd63232b3ebfc540d6cc5", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -1279,7 +1279,7 @@ extern \"rust-intrinsic\" {\n     /// undefined behavior when `x + y > T::max_value()` or `x + y < T::min_value()`.\n     pub fn unchecked_add<T>(x: T, y: T) -> T;\n \n-    /// Returns the result of an unchecked substraction, resulting in\n+    /// Returns the result of an unchecked subtraction, resulting in\n     /// undefined behavior when `x - y > T::max_value()` or `x - y < T::min_value()`.\n     pub fn unchecked_sub<T>(x: T, y: T) -> T;\n "}, {"sha": "242eb6750b3dfdb5a0f163ec009ec8d8e54c11f6", "filename": "src/libpanic_unwind/dwarf/eh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdwarf%2Feh.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -130,7 +130,7 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>, foreign_e\n fn interpret_cs_action(cs_action: u64, lpad: usize, foreign_exception: bool) -> EHAction {\n     if cs_action == 0 {\n         // If cs_action is 0 then this is a cleanup (Drop::drop). We run these\n-        // for both Rust panics and foriegn exceptions.\n+        // for both Rust panics and foreign exceptions.\n         EHAction::Cleanup(lpad)\n     } else if foreign_exception {\n         // catch_unwind should not catch foreign exceptions, only Rust panics."}, {"sha": "7fb669314eba603ca46197aa2e2d31edc3f142a4", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -185,7 +185,7 @@ pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'\n }\n \n /// Packages the kind of error we got from the const code interpreter\n-/// up with a Rust-level backtrace of where the error occured.\n+/// up with a Rust-level backtrace of where the error occurred.\n /// Thsese should always be constructed by calling `.into()` on\n /// a `InterpError`. In `librustc_mir::interpret`, we have `throw_err_*`\n /// macros for this."}, {"sha": "c48298dacf4de02ec1b483b6fd8f64b77d9dd6ba", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -450,7 +450,7 @@ impl<T: Decodable> rustc_serialize::UseSpecializedDecodable for ClearCrossCrate<\n /// Grouped information about the source code origin of a MIR entity.\n /// Intended to be inspected by diagnostics and debuginfo.\n /// Most passes can work with it as a whole, within a single function.\n-// The unoffical Cranelift backend, at least as of #65828, needs `SourceInfo` to implement `Eq` and\n+// The unofficial Cranelift backend, at least as of #65828, needs `SourceInfo` to implement `Eq` and\n // `Hash`. Please ping @bjorn3 if removing them.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, RustcEncodable, RustcDecodable, Hash, HashStable)]\n pub struct SourceInfo {"}, {"sha": "a0d9f52d28ad5eaca6dc146234a84a9a67137a06", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -461,7 +461,7 @@ impl AutoTraitFinder<'tcx> {\n                                     // The old predicate has a region variable where the new\n                                     // predicate has some other kind of region. An region\n                                     // variable isn't something we can actually display to a user,\n-                                    // so we choose ther new predicate (which doesn't have a region\n+                                    // so we choose their new predicate (which doesn't have a region\n                                     // varaible).\n                                     //\n                                     // In both cases, we want to remove the old predicate,\n@@ -703,7 +703,7 @@ impl AutoTraitFinder<'tcx> {\n                     // that we could add to our ParamEnv that would 'fix' this kind\n                     // of error, as it's not caused by an unimplemented type.\n                     //\n-                    // 2. We succesfully project the predicate (Ok(Some(_))), generating\n+                    // 2. We successfully project the predicate (Ok(Some(_))), generating\n                     //  some subobligations. We then process these subobligations\n                     //  like any other generated sub-obligations.\n                     //\n@@ -770,7 +770,7 @@ impl AutoTraitFinder<'tcx> {\n                         Ok(None) => {\n                             // It's ok not to make progress when hvave no inference variables -\n                             // in that case, we were only performing unifcation to check if an\n-                            // error occured (which would indicate that it's impossible for our\n+                            // error occurred (which would indicate that it's impossible for our\n                             // type to implement the auto trait).\n                             // However, we should always make progress (either by generating\n                             // subobligations or getting an error) when we started off with"}, {"sha": "3a55aefe85d3d48b072c56112bb0758988ef88f1", "filename": "src/librustc/ty/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fdiagnostics.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -15,7 +15,7 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    /// Whether the type is succinctly representable as a type instead of just refered to with a\n+    /// Whether the type is succinctly representable as a type instead of just referred to with a\n     /// description in error messages. This is used in the main error message.\n     pub fn is_simple_ty(&self) -> bool {\n         match self.kind {\n@@ -28,7 +28,7 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n-    /// Whether the type is succinctly representable as a type instead of just refered to with a\n+    /// Whether the type is succinctly representable as a type instead of just referred to with a\n     /// description in error messages. This is used in the primary span label. Beyond what\n     /// `is_simple_ty` includes, it also accepts ADTs with no type arguments and references to\n     /// ADTs with no type arguments."}, {"sha": "2a311ea962424f8fba9a971cebedd2a883ad65ce", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -54,7 +54,7 @@ thread_local! {\n }\n \n /// Avoids running any queries during any prints that occur\n-/// during the closure. This may alter the apperance of some\n+/// during the closure. This may alter the appearance of some\n /// types (e.g. forcing verbose printing for opaque types).\n /// This method is used during some queries (e.g. `predicates_of`\n /// for opaque types), to ensure that any debug printing that"}, {"sha": "70492d499222fe89f547ede56f948f4dfd012369", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -149,7 +149,7 @@ impl Hasher for StableHasher {\n ///\n ///   That second condition is usually not required for hash functions\n ///   (e.g. `Hash`). In practice this means that `hash_stable` must feed any\n-///   information into the hasher that a `PartialEq` comparision takes into\n+///   information into the hasher that a `PartialEq` comparison takes into\n ///   account. See [#49300](https://github.com/rust-lang/rust/issues/49300)\n ///   for an example where violating this invariant has caused trouble in the\n ///   past."}, {"sha": "1779e5dbb30e7dbbb68534a442f94399f2db79a1", "filename": "src/librustc_error_codes/error_codes/E0307.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0307.md?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -1,5 +1,5 @@\n This error indicates that the `self` parameter in a method has an invalid\n-\"reciever type\".\n+\"receiver type\".\n \n Methods take a special first parameter, of which there are three variants:\n `self`, `&self`, and `&mut self`. These are syntactic sugar for"}, {"sha": "b52ad6d6500072ab3dd9a99caad6ce58d8facdce", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -937,7 +937,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             self.check_access_for_conflict(location, place_span, sd, rw, flow_state);\n \n         if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {\n-            // Suppress this warning when there's an error being emited for the\n+            // Suppress this warning when there's an error being emitted for the\n             // same borrow: fixing the error is likely to fix the warning.\n             self.reservation_warnings.remove(&borrow_idx);\n         }"}, {"sha": "07c5d640a32c54bee9ba38f61018c72a86f5e62e", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -488,7 +488,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Given that we are performing `test` against `test_place`, this job\n     /// sorts out what the status of `candidate` will be after the test. See\n     /// `test_candidates` for the usage of this function. The returned index is\n-    /// the index that this candiate should be placed in the\n+    /// the index that this candidate should be placed in the\n     /// `target_candidates` vec. The candidate may be modified to update its\n     /// `match_pairs`.\n     ///"}, {"sha": "eb9d04f7d8e16f03966cb5e976906042a673669c", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -55,7 +55,7 @@ fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, 'tcx>,\n     op: OpTy<'tcx>,\n ) -> &'tcx ty::Const<'tcx> {\n-    // We do not have value optmizations for everything.\n+    // We do not have value optimizations for everything.\n     // Only scalars and slices, since they are very common.\n     // Note that further down we turn scalars of undefined bits back to `ByRef`. These can result\n     // from scalar unions that are initialized with one of their zero sized variants. We could"}, {"sha": "b7cde626415a7653f321868b8ce3b807a4dcb109", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -95,7 +95,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     type PointerTag: ::std::fmt::Debug + Copy + Eq + Hash + 'static;\n \n     /// Machines can define extra (non-instance) things that represent values of function pointers.\n-    /// For example, Miri uses this to return a fucntion pointer from `dlsym`\n+    /// For example, Miri uses this to return a function pointer from `dlsym`\n     /// that can later be called to execute the right thing.\n     type ExtraFnVal: ::std::fmt::Debug + Copy;\n "}, {"sha": "9a7f47389bcf057b3953b0d44f05dd59c9092a2e", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -185,7 +185,7 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n \n         // Ignore drops, if the temp gets promoted,\n         // then it's constant and thus drop is noop.\n-        // Non-uses are also irrelevent.\n+        // Non-uses are also irrelevant.\n         if context.is_drop() || !context.is_use() {\n             debug!(\n                 \"visit_local: context.is_drop={:?} context.is_use={:?}\","}, {"sha": "da8bf89ebf33b4724e251e104f467ad0152bc44d", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -1515,11 +1515,11 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Replace duplicated recovered parameters with `_` pattern to avoid unecessary errors.\n+    /// Replace duplicated recovered parameters with `_` pattern to avoid unnecessary errors.\n     ///\n     /// This is necessary because at this point we don't know whether we parsed a function with\n     /// anonymous parameters or a function with names but no types. In order to minimize\n-    /// unecessary errors, we assume the parameters are in the shape of `fn foo(a, b, c)` where\n+    /// unnecessary errors, we assume the parameters are in the shape of `fn foo(a, b, c)` where\n     /// the parameters are *names* (so we don't emit errors about not being able to find `b` in\n     /// the local scope), but if we find the same name multiple times, like in `fn foo(i8, i8)`,\n     /// we deduplicate them to not complain about duplicated parameter names."}, {"sha": "64c03da4e28743edf2a251aab4b30eb1105550e7", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -2028,7 +2028,7 @@ impl<'a> Parser<'a> {\n \n         let mut params: Vec<_> = params.into_iter().filter_map(|x| x).collect();\n \n-        // Replace duplicated recovered params with `_` pattern to avoid unecessary errors.\n+        // Replace duplicated recovered params with `_` pattern to avoid unnecessary errors.\n         self.deduplicate_recovered_params_names(&mut params);\n \n         if c_variadic && params.len() <= 1 {"}, {"sha": "e4b8b667ad0db6d17492bab0b880e0dcac450a5c", "filename": "src/librustc_target/spec/i686_unknown_uefi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_uefi.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -32,7 +32,7 @@ pub fn target() -> TargetResult {\n     // Backgound and Problem:\n     //   If we use i686-unknown-windows, the LLVM IA32 MSVC generates compiler intrinsic\n     //   _alldiv, _aulldiv, _allrem, _aullrem, _allmul, which will cause undefined symbol.\n-    //   A real issue is __aulldiv() is refered by __udivdi3() - udivmod_inner!(), from\n+    //   A real issue is __aulldiv() is referred by __udivdi3() - udivmod_inner!(), from\n     //   https://github.com/rust-lang-nursery/compiler-builtins.\n     //   As result, rust-lld generates link error finally.\n     // Root-cause:"}, {"sha": "4331d441aa0d24983f2db1bcff20750c1566eab2", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -434,7 +434,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             segment.ident.name,\n                         ) {\n                             // If this expression had a clone call when suggesting borrowing\n-                            // we want to suggest removing it because it'd now be unecessary.\n+                            // we want to suggest removing it because it'd now be unnecessary.\n                             sugg_sp = arg.span;\n                         }\n                     }"}, {"sha": "4766360c048977dc4145700b409c478cfb0120c3", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -550,7 +550,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             // Here we want to prevent struct constructors from returning unsized types.\n             // There were two cases this happened: fn pointer coercion in stable\n-            // and usual function call in presense of unsized_locals.\n+            // and usual function call in presence of unsized_locals.\n             // Also, as we just want to check sizedness, instead of introducing\n             // placeholder lifetimes with probing, we just replace higher lifetimes\n             // with fresh vars."}, {"sha": "2a66e0539a10328b3cd5d7d4c896a728feeeacd8", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -916,7 +916,7 @@ fn receiver_is_valid<'fcx, 'tcx>(\n             debug!(\"receiver_is_valid: type `{:?}` does not deref to `{:?}`\",\n                 receiver_ty, self_ty);\n             // If he receiver already has errors reported due to it, consider it valid to avoid\n-            // unecessary errors (#58712).\n+            // unnecessary errors (#58712).\n             return receiver_ty.references_error();\n         }\n "}, {"sha": "ec1c444bcf8c80fee608b20ed02fd2a312789c3a", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -206,7 +206,7 @@ pub trait Error: Debug + Display {\n         TypeId::of::<Self>()\n     }\n \n-    /// Returns a stack backtrace, if available, of where this error ocurred.\n+    /// Returns a stack backtrace, if available, of where this error occurred.\n     ///\n     /// This function allows inspecting the location, in code, of where an error\n     /// happened. The returned `Backtrace` contains information about the stack"}, {"sha": "8669c48e3bb5061566d34efe67baacd9289ee4c5", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -128,7 +128,7 @@ cfg_has_statx! {{\n                 // It is a trick to call `statx` with NULL pointers to check if the syscall\n                 // is available. According to the manual, it is expected to fail with EFAULT.\n                 // We do this mainly for performance, since it is nearly hundreds times\n-                // faster than a normal successfull call.\n+                // faster than a normal successful call.\n                 let err = cvt(statx(0, ptr::null(), 0, libc::STATX_ALL, ptr::null_mut()))\n                     .err()\n                     .and_then(|e| e.raw_os_error());\n@@ -1223,7 +1223,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n             // The code below ensures that `FreeOnDrop` is never a null pointer\n             unsafe {\n                 // `copyfile_state_free` returns -1 if the `to` or `from` files\n-                // cannot be closed. However, this is not considerd this an\n+                // cannot be closed. However, this is not considered this an\n                 // error.\n                 copyfile_state_free(self.0);\n             }"}, {"sha": "3b0993fdb580ea2d5419204aac258dc15ed5d172", "filename": "src/libstd/sys/wasm/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibstd%2Fsys%2Fwasm%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibstd%2Fsys%2Fwasm%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffast_thread_local.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -3,7 +3,7 @@\n pub unsafe fn register_dtor(_t: *mut u8, _dtor: unsafe extern fn(*mut u8)) {\n     // FIXME: right now there is no concept of \"thread exit\", but this is likely\n     // going to show up at some point in the form of an exported symbol that the\n-    // wasm runtime is oging to be expected to call. For now we basically just\n+    // wasm runtime is going to be expected to call. For now we basically just\n     // ignore the arguments, but if such a function starts to exist it will\n     // likely look like the OSX implementation in `unix/fast_thread_local.rs`\n }"}, {"sha": "a1d8b5a53386a06ea4980170f29da15d8357843b", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -190,7 +190,7 @@ fn generic_extension<'cx>(\n \n         // Take a snapshot of the state of pre-expansion gating at this point.\n         // This is used so that if a matcher is not `Success(..)`ful,\n-        // then the spans which became gated when parsing the unsucessful matcher\n+        // then the spans which became gated when parsing the unsuccessful matcher\n         // are not recorded. On the first `Success(..)`ful matcher, the spans are merged.\n         let mut gated_spans_snaphot = mem::take(&mut *cx.parse_sess.gated_spans.spans.borrow_mut());\n "}, {"sha": "a69ba61a283d09ab2d69abdb0531e1a53df449f0", "filename": "src/test/rustdoc/issue-66159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-66159.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -4,7 +4,7 @@\n \n // The issue was an ICE which meant that we never actually generated the docs\n // so if we have generated the docs, we're okay.\n-// Since we don't generate the docs for the auxilliary files, we can't actually\n+// Since we don't generate the docs for the auxiliary files, we can't actually\n // verify that the struct is linked correctly.\n \n // @has issue_66159/index.html"}, {"sha": "1c70624e4a2205a97a9a6b8981bc25117bd821bd", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-c-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -2,7 +2,7 @@\n \n // Show that `homogeneous_aggregate` code ignores zero-length C\n // arrays.  This matches the recent C standard, though not the\n-// behavior of all older compilers, which somtimes consider `T[0]` to\n+// behavior of all older compilers, which sometimes consider `T[0]` to\n // be a \"flexible array member\" (see discussion on #56877 for\n // details).\n "}, {"sha": "39e817168f610cc7c2291ac30333c5a7c3c8681d", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-repeated-supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16fabd8efd416a8b957e369b8be2470e1271af9e/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs?ref=16fabd8efd416a8b957e369b8be2470e1271af9e", "patch": "@@ -4,7 +4,7 @@\n #![crate_name = \"trait_test\"]\n \n // Regression test related to #56288. Check that a supertrait projection (of\n-// `Output`) that references `Self` is ok if there is another occurence of\n+// `Output`) that references `Self` is ok if there is another occurrence of\n // the same supertrait that specifies the projection explicitly, even if\n // the projection's associated type is not explicitly specified in the object type.\n //"}]}