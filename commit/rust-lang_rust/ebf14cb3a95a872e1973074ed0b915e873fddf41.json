{"sha": "ebf14cb3a95a872e1973074ed0b915e873fddf41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZjE0Y2IzYTk1YTg3MmUxOTczMDc0ZWQwYjkxNWU4NzNmZGRmNDE=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-01-31T04:55:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T22:29:11Z"}, "message": "Rename str::iter_chars -> str::chars_iter", "tree": {"sha": "328aa56654ae2ac7b9c8cebd635171d97927265e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/328aa56654ae2ac7b9c8cebd635171d97927265e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf14cb3a95a872e1973074ed0b915e873fddf41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf14cb3a95a872e1973074ed0b915e873fddf41", "html_url": "https://github.com/rust-lang/rust/commit/ebf14cb3a95a872e1973074ed0b915e873fddf41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf14cb3a95a872e1973074ed0b915e873fddf41/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7454f55959584579dc982d38c8432e84c7f8900", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7454f55959584579dc982d38c8432e84c7f8900", "html_url": "https://github.com/rust-lang/rust/commit/c7454f55959584579dc982d38c8432e84c7f8900"}], "stats": {"total": 41, "additions": 6, "deletions": 35}, "files": [{"sha": "cc5de8e91f999bcd8a26df830a1001362d17670e", "filename": "src/libcore/str.rs", "status": "modified", "additions": 6, "deletions": 35, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ebf14cb3a95a872e1973074ed0b915e873fddf41/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf14cb3a95a872e1973074ed0b915e873fddf41/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=ebf14cb3a95a872e1973074ed0b915e873fddf41", "patch": "@@ -64,7 +64,6 @@ export\n    any,\n    map,\n    bytes_iter,\n-   iter_chars,\n    chars_iter,\n    words_iter,\n    lines_iter,\n@@ -591,7 +590,7 @@ fn split_func(ss: str, sepfn: fn(cc: char)->bool) -> [str] {\n     let accum: str = \"\";\n     let ends_with_sep: bool = false;\n \n-    str::iter_chars(ss, {|cc| if sepfn(cc) {\n+    chars_iter(ss, {|cc| if sepfn(cc) {\n             vv += [accum];\n             accum = \"\";\n             ends_with_sep = true;\n@@ -678,7 +677,7 @@ FIXME: rewrite with map\n */\n fn to_lower(s: str) -> str {\n     let outstr = \"\";\n-    iter_chars(s) { |c|\n+    chars_iter(s) { |c|\n         push_char(outstr, char::to_lower(c));\n     }\n     ret outstr;\n@@ -693,7 +692,7 @@ FIXME: rewrite with map\n */\n fn to_upper(s: str) -> str {\n     let outstr = \"\";\n-    iter_chars(s) { |c|\n+    chars_iter(s) { |c|\n         push_char(outstr, char::to_upper(c));\n     }\n     ret outstr;\n@@ -808,7 +807,7 @@ Apply a function to each character\n fn map(ss: str, ff: fn(char) -> char) -> str {\n     let result = \"\";\n \n-    str::iter_chars(ss, {|cc|\n+    chars_iter(ss, {|cc|\n         str::push_char(result, ff(cc));\n     });\n \n@@ -833,13 +832,11 @@ fn bytes_iter(ss: str, it: fn(u8)) {\n }\n \n /*\n-Function: iter_chars\n+Function: chars_iter\n \n Iterate over the characters in a string\n-\n-FIXME: rename to 'chars_iter'\n */\n-fn iter_chars(s: str, it: fn(char)) {\n+fn chars_iter(s: str, it: fn(char)) {\n     let pos = 0u, len = byte_len(s);\n     while (pos < len) {\n         let {ch, next} = char_range_at(s, pos);\n@@ -848,17 +845,6 @@ fn iter_chars(s: str, it: fn(char)) {\n     }\n }\n \n-/*\n-Function: chars_iter\n-\n-Iterate over the characters in a string\n-\n-FIXME: A synonym to iter_chars\n-*/\n-fn chars_iter(ss: str, it: fn(char)) {\n-    iter_chars(ss, it)\n-}\n-\n /*\n Function: words_iter\n \n@@ -1845,21 +1831,6 @@ mod tests {\n         assert !contains(\"\", \"a\");\n     }\n \n-    #[test]\n-    fn test_iter_chars() {\n-        let i = 0;\n-        iter_chars(\"x\\u03c0y\") {|ch|\n-            alt i {\n-              0 { assert ch == 'x'; }\n-              1 { assert ch == '\\u03c0'; }\n-              2 { assert ch == 'y'; }\n-            }\n-            i += 1;\n-        }\n-\n-        iter_chars(\"\") {|_ch| fail; } // should not fail\n-    }\n-\n     #[test]\n     fn test_chars_iter() {\n         let i = 0;"}]}