{"sha": "122219237437ee1deee33df9806a4316194a6f76", "node_id": "C_kwDOAAsO6NoAKDEyMjIxOTIzNzQzN2VlMWRlZWUzM2RmOTgwNmE0MzE2MTk0YTZmNzY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-11-24T18:18:22Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-11-24T18:18:22Z"}, "message": "Use cgu name instead of function name as base for inline asm wrapper name\n\nThis fixes using #[inline] functions containing inline assembly from multiple cgus", "tree": {"sha": "2305fd4bbec57372375382f0c04827fcd92b7244", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2305fd4bbec57372375382f0c04827fcd92b7244"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/122219237437ee1deee33df9806a4316194a6f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/122219237437ee1deee33df9806a4316194a6f76", "html_url": "https://github.com/rust-lang/rust/commit/122219237437ee1deee33df9806a4316194a6f76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/122219237437ee1deee33df9806a4316194a6f76/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfbc7eb6c7e2ae618be8c8d78eaf18b9112be735", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbc7eb6c7e2ae618be8c8d78eaf18b9112be735", "html_url": "https://github.com/rust-lang/rust/commit/dfbc7eb6c7e2ae618be8c8d78eaf18b9112be735"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "a1d06851277539e41332023db11d05ea50f844cf", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/122219237437ee1deee33df9806a4316194a6f76/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/122219237437ee1deee33df9806a4316194a6f76/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=122219237437ee1deee33df9806a4316194a6f76", "patch": "@@ -71,8 +71,6 @@ pub(crate) fn codegen_fn<'tcx>(\n         clif_comments,\n         source_info_set: indexmap::IndexSet::new(),\n         next_ssa_var: 0,\n-\n-        inline_asm_index: 0,\n     };\n \n     let arg_uninhabited = fx"}, {"sha": "2ed497a6f947f28c5b6fbefcea0cd162994aa124", "filename": "src/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/122219237437ee1deee33df9806a4316194a6f76/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/122219237437ee1deee33df9806a4316194a6f76/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=122219237437ee1deee33df9806a4316194a6f76", "patch": "@@ -255,8 +255,6 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n \n     /// This should only be accessed by `CPlace::new_var`.\n     pub(crate) next_ssa_var: u32,\n-\n-    pub(crate) inline_asm_index: u32,\n }\n \n impl<'tcx> LayoutOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {"}, {"sha": "8317f40c7eac94dc85cb2db67e0bf2583dde2f6b", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/122219237437ee1deee33df9806a4316194a6f76/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/122219237437ee1deee33df9806a4316194a6f76/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=122219237437ee1deee33df9806a4316194a6f76", "patch": "@@ -123,6 +123,7 @@ fn module_codegen(\n         backend_config.clone(),\n         module.isa(),\n         tcx.sess.opts.debuginfo != DebugInfo::None,\n+        cgu_name,\n     );\n     super::predefine_mono_items(tcx, &mut module, &mono_items);\n     for (mono_item, _) in mono_items {"}, {"sha": "8c93a15134909db456167acffac7002af4cce97b", "filename": "src/driver/jit.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/122219237437ee1deee33df9806a4316194a6f76/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/122219237437ee1deee33df9806a4316194a6f76/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=122219237437ee1deee33df9806a4316194a6f76", "patch": "@@ -11,6 +11,7 @@ use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n use rustc_session::Session;\n+use rustc_span::Symbol;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -75,7 +76,13 @@ fn create_jit_module<'tcx>(\n     jit_builder.symbols(imported_symbols);\n     let mut jit_module = JITModule::new(jit_builder);\n \n-    let mut cx = crate::CodegenCx::new(tcx, backend_config.clone(), jit_module.isa(), false);\n+    let mut cx = crate::CodegenCx::new(\n+        tcx,\n+        backend_config.clone(),\n+        jit_module.isa(),\n+        false,\n+        Symbol::intern(\"dummy_cgu_name\"),\n+    );\n \n     crate::allocator::codegen(tcx, &mut jit_module, &mut cx.unwind_context);\n     crate::main_shim::maybe_create_entry_wrapper(\n@@ -245,7 +252,13 @@ fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) ->\n \n             jit_module.prepare_for_function_redefine(func_id).unwrap();\n \n-            let mut cx = crate::CodegenCx::new(tcx, backend_config, jit_module.isa(), false);\n+            let mut cx = crate::CodegenCx::new(\n+                tcx,\n+                backend_config,\n+                jit_module.isa(),\n+                false,\n+                Symbol::intern(\"dummy_cgu_name\"),\n+            );\n             tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, jit_module, instance));\n \n             assert!(cx.global_asm.is_empty());"}, {"sha": "1a670c475c76dda267b2f1d44852976d027b3485", "filename": "src/inline_asm.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/122219237437ee1deee33df9806a4316194a6f76/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/122219237437ee1deee33df9806a4316194a6f76/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=122219237437ee1deee33df9806a4316194a6f76", "patch": "@@ -121,9 +121,10 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n     asm_gen.allocate_registers();\n     asm_gen.allocate_stack_slots();\n \n-    let inline_asm_index = fx.inline_asm_index;\n-    fx.inline_asm_index += 1;\n-    let asm_name = format!(\"{}__inline_asm_{}\", fx.symbol_name, inline_asm_index);\n+    let inline_asm_index = fx.cx.inline_asm_index.get();\n+    fx.cx.inline_asm_index.set(inline_asm_index + 1);\n+    let asm_name =\n+        format!(\"{}__inline_asm_{}\", fx.cx.cgu_name.as_str().replace('.', \"__\").replace('-', \"_\"), inline_asm_index);\n \n     let generated_asm = asm_gen.generate_asm_wrapper(&asm_name);\n     fx.cx.global_asm.push_str(&generated_asm);"}, {"sha": "d752dc9e4f7c8d71e213e833f0989b88dca748ea", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/122219237437ee1deee33df9806a4316194a6f76/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/122219237437ee1deee33df9806a4316194a6f76/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=122219237437ee1deee33df9806a4316194a6f76", "patch": "@@ -26,6 +26,7 @@ extern crate rustc_target;\n extern crate rustc_driver;\n \n use std::any::Any;\n+use std::cell::Cell;\n \n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n@@ -34,6 +35,7 @@ use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_session::config::OutputFilenames;\n use rustc_session::Session;\n+use rustc_span::Symbol;\n \n use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::settings::{self, Configurable};\n@@ -123,9 +125,11 @@ impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n struct CodegenCx<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     global_asm: String,\n+    inline_asm_index: Cell<usize>,\n     cached_context: Context,\n     debug_context: Option<DebugContext<'tcx>>,\n     unwind_context: UnwindContext,\n+    cgu_name: Symbol,\n }\n \n impl<'tcx> CodegenCx<'tcx> {\n@@ -134,6 +138,7 @@ impl<'tcx> CodegenCx<'tcx> {\n         backend_config: BackendConfig,\n         isa: &dyn TargetIsa,\n         debug_info: bool,\n+        cgu_name: Symbol,\n     ) -> Self {\n         assert_eq!(pointer_ty(tcx), isa.pointer_type());\n \n@@ -143,9 +148,11 @@ impl<'tcx> CodegenCx<'tcx> {\n         CodegenCx {\n             tcx,\n             global_asm: String::new(),\n+            inline_asm_index: Cell::new(0),\n             cached_context: Context::new(),\n             debug_context,\n             unwind_context,\n+            cgu_name,\n         }\n     }\n }"}]}