{"sha": "5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "node_id": "C_kwDOAAsO6NoAKDVhNGFjMWViZjBlMzBiNDE1YjkwYTU3OTA0ZTRjMmNiMzJmMzUwNjg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T14:30:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T15:01:19Z"}, "message": "work around apfloat bug in FMA by using host floats instead", "tree": {"sha": "e86a29204c0194779164d092aaee55efb0149e63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e86a29204c0194779164d092aaee55efb0149e63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "html_url": "https://github.com/rust-lang/rust/commit/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42087647d6a44808a18d5fac2c750beb4c8a09c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/42087647d6a44808a18d5fac2c750beb4c8a09c8", "html_url": "https://github.com/rust-lang/rust/commit/42087647d6a44808a18d5fac2c750beb4c8a09c8"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "9a985b2450391442a1934e2edab23519432ab2e2", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "patch": "@@ -588,7 +588,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let [f] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n                 let f = f32::from_bits(this.read_scalar(f)?.to_u32()?);\n-                let f = match link_name.as_str() {\n+                let res = match link_name.as_str() {\n                     \"cbrtf\" => f.cbrt(),\n                     \"coshf\" => f.cosh(),\n                     \"sinhf\" => f.sinh(),\n@@ -598,7 +598,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"atanf\" => f.atan(),\n                     _ => bug!(),\n                 };\n-                this.write_scalar(Scalar::from_u32(f.to_bits()), dest)?;\n+                this.write_scalar(Scalar::from_u32(res.to_bits()), dest)?;\n             }\n             #[rustfmt::skip]\n             | \"_hypotf\"\n@@ -611,12 +611,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: Using host floats.\n                 let f1 = f32::from_bits(this.read_scalar(f1)?.to_u32()?);\n                 let f2 = f32::from_bits(this.read_scalar(f2)?.to_u32()?);\n-                let n = match link_name.as_str() {\n+                let res = match link_name.as_str() {\n                     \"_hypotf\" | \"hypotf\" => f1.hypot(f2),\n                     \"atan2f\" => f1.atan2(f2),\n                     _ => bug!(),\n                 };\n-                this.write_scalar(Scalar::from_u32(n.to_bits()), dest)?;\n+                this.write_scalar(Scalar::from_u32(res.to_bits()), dest)?;\n             }\n             #[rustfmt::skip]\n             | \"cbrt\"\n@@ -630,7 +630,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let [f] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 // FIXME: Using host floats.\n                 let f = f64::from_bits(this.read_scalar(f)?.to_u64()?);\n-                let f = match link_name.as_str() {\n+                let res = match link_name.as_str() {\n                     \"cbrt\" => f.cbrt(),\n                     \"cosh\" => f.cosh(),\n                     \"sinh\" => f.sinh(),\n@@ -640,7 +640,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"atan\" => f.atan(),\n                     _ => bug!(),\n                 };\n-                this.write_scalar(Scalar::from_u64(f.to_bits()), dest)?;\n+                this.write_scalar(Scalar::from_u64(res.to_bits()), dest)?;\n             }\n             #[rustfmt::skip]\n             | \"_hypot\"\n@@ -651,12 +651,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: Using host floats.\n                 let f1 = f64::from_bits(this.read_scalar(f1)?.to_u64()?);\n                 let f2 = f64::from_bits(this.read_scalar(f2)?.to_u64()?);\n-                let n = match link_name.as_str() {\n+                let res = match link_name.as_str() {\n                     \"_hypot\" | \"hypot\" => f1.hypot(f2),\n                     \"atan2\" => f1.atan2(f2),\n                     _ => bug!(),\n                 };\n-                this.write_scalar(Scalar::from_u64(n.to_bits()), dest)?;\n+                this.write_scalar(Scalar::from_u64(res.to_bits()), dest)?;\n             }\n             #[rustfmt::skip]\n             | \"_ldexp\"\n@@ -668,7 +668,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let x = this.read_scalar(x)?.to_f64()?;\n                 let exp = this.read_scalar(exp)?.to_i32()?;\n \n-                // Saturating cast to i16. Even those are outside the valid exponent range to\n+                // Saturating cast to i16. Even those are outside the valid exponent range so\n                 // `scalbn` below will do its over/underflow handling.\n                 let exp = if exp > i32::from(i16::MAX) {\n                     i16::MAX"}, {"sha": "08a6e0fcc0eef9070241083f9625a3cc87c589b8", "filename": "src/shims/intrinsics/mod.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/src%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/src%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fmod.rs?ref=5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "patch": "@@ -285,49 +285,55 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: Using host floats.\n                 let f = f32::from_bits(this.read_scalar(f)?.to_u32()?);\n                 let f2 = f32::from_bits(this.read_scalar(f2)?.to_u32()?);\n-                this.write_scalar(Scalar::from_u32(f.powf(f2).to_bits()), dest)?;\n+                let res = f.powf(f2);\n+                this.write_scalar(Scalar::from_u32(res.to_bits()), dest)?;\n             }\n \n             \"powf64\" => {\n                 let [f, f2] = check_arg_count(args)?;\n                 // FIXME: Using host floats.\n                 let f = f64::from_bits(this.read_scalar(f)?.to_u64()?);\n                 let f2 = f64::from_bits(this.read_scalar(f2)?.to_u64()?);\n-                this.write_scalar(Scalar::from_u64(f.powf(f2).to_bits()), dest)?;\n+                let res = f.powf(f2);\n+                this.write_scalar(Scalar::from_u64(res.to_bits()), dest)?;\n             }\n \n             \"fmaf32\" => {\n                 let [a, b, c] = check_arg_count(args)?;\n-                let a = this.read_scalar(a)?.to_f32()?;\n-                let b = this.read_scalar(b)?.to_f32()?;\n-                let c = this.read_scalar(c)?.to_f32()?;\n-                let res = a.mul_add(b, c).value;\n-                this.write_scalar(Scalar::from_f32(res), dest)?;\n+                // FIXME: Using host floats, to work around https://github.com/rust-lang/miri/issues/2468.\n+                let a = f32::from_bits(this.read_scalar(a)?.to_u32()?);\n+                let b = f32::from_bits(this.read_scalar(b)?.to_u32()?);\n+                let c = f32::from_bits(this.read_scalar(c)?.to_u32()?);\n+                let res = a.mul_add(b, c);\n+                this.write_scalar(Scalar::from_u32(res.to_bits()), dest)?;\n             }\n \n             \"fmaf64\" => {\n                 let [a, b, c] = check_arg_count(args)?;\n-                let a = this.read_scalar(a)?.to_f64()?;\n-                let b = this.read_scalar(b)?.to_f64()?;\n-                let c = this.read_scalar(c)?.to_f64()?;\n-                let res = a.mul_add(b, c).value;\n-                this.write_scalar(Scalar::from_f64(res), dest)?;\n+                // FIXME: Using host floats, to work around https://github.com/rust-lang/miri/issues/2468.\n+                let a = f64::from_bits(this.read_scalar(a)?.to_u64()?);\n+                let b = f64::from_bits(this.read_scalar(b)?.to_u64()?);\n+                let c = f64::from_bits(this.read_scalar(c)?.to_u64()?);\n+                let res = a.mul_add(b, c);\n+                this.write_scalar(Scalar::from_u64(res.to_bits()), dest)?;\n             }\n \n             \"powif32\" => {\n                 let [f, i] = check_arg_count(args)?;\n                 // FIXME: Using host floats.\n                 let f = f32::from_bits(this.read_scalar(f)?.to_u32()?);\n                 let i = this.read_scalar(i)?.to_i32()?;\n-                this.write_scalar(Scalar::from_u32(f.powi(i).to_bits()), dest)?;\n+                let res = f.powi(i);\n+                this.write_scalar(Scalar::from_u32(res.to_bits()), dest)?;\n             }\n \n             \"powif64\" => {\n                 let [f, i] = check_arg_count(args)?;\n                 // FIXME: Using host floats.\n                 let f = f64::from_bits(this.read_scalar(f)?.to_u64()?);\n                 let i = this.read_scalar(i)?.to_i32()?;\n-                this.write_scalar(Scalar::from_u64(f.powi(i).to_bits()), dest)?;\n+                let res = f.powi(i);\n+                this.write_scalar(Scalar::from_u64(res.to_bits()), dest)?;\n             }\n \n             \"float_to_int_unchecked\" => {"}, {"sha": "0c3241683a186d64ffd98b6da6cbda77968ab1a4", "filename": "src/shims/intrinsics/simd.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/src%2Fshims%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/src%2Fshims%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fsimd.rs?ref=5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "patch": "@@ -238,14 +238,25 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     let dest = this.mplace_index(&dest, i)?;\n \n                     // Works for f32 and f64.\n+                    // FIXME: using host floats to work around https://github.com/rust-lang/miri/issues/2468.\n                     let ty::Float(float_ty) = dest.layout.ty.kind() else {\n                         span_bug!(this.cur_span(), \"{} operand is not a float\", intrinsic_name)\n                     };\n                     let val = match float_ty {\n-                        FloatTy::F32 =>\n-                            Scalar::from_f32(a.to_f32()?.mul_add(b.to_f32()?, c.to_f32()?).value),\n-                        FloatTy::F64 =>\n-                            Scalar::from_f64(a.to_f64()?.mul_add(b.to_f64()?, c.to_f64()?).value),\n+                        FloatTy::F32 => {\n+                            let a = f32::from_bits(a.to_u32()?);\n+                            let b = f32::from_bits(b.to_u32()?);\n+                            let c = f32::from_bits(c.to_u32()?);\n+                            let res = a.mul_add(b, c);\n+                            Scalar::from_u32(res.to_bits())\n+                        }\n+                        FloatTy::F64 => {\n+                            let a = f64::from_bits(a.to_u64()?);\n+                            let b = f64::from_bits(b.to_u64()?);\n+                            let c = f64::from_bits(c.to_u64()?);\n+                            let res = a.mul_add(b, c);\n+                            Scalar::from_u64(res.to_bits())\n+                        }\n                     };\n                     this.write_scalar(val, &dest.into())?;\n                 }"}, {"sha": "fad01047b9c6e87c237b6048e1d3f4306961dbcc", "filename": "tests/pass/intrinsics-math.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/tests%2Fpass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/tests%2Fpass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fintrinsics-math.rs?ref=5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "patch": "@@ -60,6 +60,8 @@ pub fn main() {\n     assert_eq!(0.0f32.mul_add(-2.0, f32::consts::E), f32::consts::E);\n     assert_approx_eq!(3.0f64.mul_add(2.0, 5.0), 11.0);\n     assert_eq!(0.0f64.mul_add(-2.0f64, f64::consts::E), f64::consts::E);\n+    assert_eq!((-3.2f32).mul_add(2.4, f32::NEG_INFINITY), f32::NEG_INFINITY);\n+    assert_eq!((-3.2f64).mul_add(2.4, f64::NEG_INFINITY), f64::NEG_INFINITY);\n \n     assert_approx_eq!((-1.0f32).abs(), 1.0f32);\n     assert_approx_eq!(34.2f64.abs(), 34.2f64);"}, {"sha": "173ac654b03d5e74aec5e1c9c209483aa5c31119", "filename": "tests/pass/portable-simd.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/tests%2Fpass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4ac1ebf0e30b415b90a57904e4c2cb32f35068/tests%2Fpass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fportable-simd.rs?ref=5a4ac1ebf0e30b415b90a57904e4c2cb32f35068", "patch": "@@ -18,6 +18,11 @@ fn simd_ops_f32() {\n \n     assert_eq!(a.mul_add(b, a), (a * b) + a);\n     assert_eq!(b.mul_add(b, a), (b * b) + a);\n+    assert_eq!(a.mul_add(b, b), (a * b) + b);\n+    assert_eq!(\n+        f32x4::splat(-3.2).mul_add(b, f32x4::splat(f32::NEG_INFINITY)),\n+        f32x4::splat(f32::NEG_INFINITY)\n+    );\n     assert_eq!((a * a).sqrt(), a);\n     assert_eq!((b * b).sqrt(), b.abs());\n \n@@ -67,6 +72,11 @@ fn simd_ops_f64() {\n \n     assert_eq!(a.mul_add(b, a), (a * b) + a);\n     assert_eq!(b.mul_add(b, a), (b * b) + a);\n+    assert_eq!(a.mul_add(b, b), (a * b) + b);\n+    assert_eq!(\n+        f64x4::splat(-3.2).mul_add(b, f64x4::splat(f64::NEG_INFINITY)),\n+        f64x4::splat(f64::NEG_INFINITY)\n+    );\n     assert_eq!((a * a).sqrt(), a);\n     assert_eq!((b * b).sqrt(), b.abs());\n "}]}