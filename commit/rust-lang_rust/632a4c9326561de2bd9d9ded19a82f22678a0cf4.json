{"sha": "632a4c9326561de2bd9d9ded19a82f22678a0cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMmE0YzkzMjY1NjFkZTJiZDlkOWRlZDE5YTgyZjIyNjc4YTBjZjQ=", "commit": {"author": {"name": "Jon Morton", "email": "jonanin@gmail.com", "date": "2012-04-03T03:18:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-03T23:02:38Z"}, "message": "Refactor includes structure, getting rid of rust_internal.h\n\nMany changes to code structure are included:\n- removed TIME_SLICE_IN_MS\n- removed sychronized_indexed_list\n- removed region_owned\n- kernel_owned move to kernel.h, task_owned moved to task.h\n- global configs moved to rust_globals.h\n- changed #pragma once to standard guard in rust_upcall.h\n- got rid of memory.h", "tree": {"sha": "e5c5c509b2679cab824819c1d6340e44986d950d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5c5c509b2679cab824819c1d6340e44986d950d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/632a4c9326561de2bd9d9ded19a82f22678a0cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/632a4c9326561de2bd9d9ded19a82f22678a0cf4", "html_url": "https://github.com/rust-lang/rust/commit/632a4c9326561de2bd9d9ded19a82f22678a0cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/632a4c9326561de2bd9d9ded19a82f22678a0cf4/comments", "author": {"login": "jamorton", "id": 18852, "node_id": "MDQ6VXNlcjE4ODUy", "avatar_url": "https://avatars.githubusercontent.com/u/18852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamorton", "html_url": "https://github.com/jamorton", "followers_url": "https://api.github.com/users/jamorton/followers", "following_url": "https://api.github.com/users/jamorton/following{/other_user}", "gists_url": "https://api.github.com/users/jamorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamorton/subscriptions", "organizations_url": "https://api.github.com/users/jamorton/orgs", "repos_url": "https://api.github.com/users/jamorton/repos", "events_url": "https://api.github.com/users/jamorton/events{/privacy}", "received_events_url": "https://api.github.com/users/jamorton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704ca046a13977175975cb20a77ea2fbac15d77a", "url": "https://api.github.com/repos/rust-lang/rust/commits/704ca046a13977175975cb20a77ea2fbac15d77a", "html_url": "https://github.com/rust-lang/rust/commit/704ca046a13977175975cb20a77ea2fbac15d77a"}], "stats": {"total": 723, "additions": 311, "deletions": 412}, "files": [{"sha": "14dbb3e0db7dc03577b45703faf258a6d663a505", "filename": "src/rt/arch/i386/context.cpp", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Farch%2Fi386%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Farch%2Fi386%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fcontext.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,10 +1,6 @@\n-#include \"context.h\"\n-\n-#include \"../../rust.h\"\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n+#include \"context.h\"\n+#include \"../../rust_globals.h\"\n \n extern \"C\" uint32_t CDECL swap_registers(registers_t *oregs,\n                                          registers_t *regs)"}, {"sha": "aefb1fef2c2ee710cedc51a2ff55f8dde71bad82", "filename": "src/rt/arch/x86_64/context.cpp", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,10 +1,6 @@\n-#include \"context.h\"\n-\n-#include \"../../rust.h\"\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n+#include \"context.h\"\n+#include \"../../rust_globals.h\"\n \n extern \"C\" void CDECL swap_registers(registers_t *oregs,\n                                      registers_t *regs)"}, {"sha": "5eec01730f40f57f7fb54d5746156da80d376795", "filename": "src/rt/boxed_region.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fboxed_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fboxed_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fboxed_region.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,6 +1,8 @@\n-#include <assert.h>\n+\n+\n #include \"boxed_region.h\"\n-#include \"rust_internal.h\"\n+#include \"rust_globals.h\"\n+#include \"rust_task.h\"\n \n // #define DUMP_BOXED_REGION\n "}, {"sha": "93d7d612f0bd5b5cd8b356dc26b0d34e8592d757", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -2,7 +2,9 @@\n  * A simple resizable circular buffer.\n  */\n \n-#include \"rust_internal.h\"\n+#include \"circular_buffer.h\"\n+#include \"rust_globals.h\"\n+#include \"rust_kernel.h\"\n \n circular_buffer::circular_buffer(rust_kernel *kernel, size_t unit_sz) :\n     kernel(kernel),"}, {"sha": "c54ee8a33e41e8587611972739661b1789e5ce69", "filename": "src/rt/circular_buffer.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fcircular_buffer.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fcircular_buffer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -5,6 +5,9 @@\n #ifndef CIRCULAR_BUFFER_H\n #define CIRCULAR_BUFFER_H\n \n+#include \"rust_globals.h\"\n+#include \"rust_kernel.h\"\n+\n class\n circular_buffer : public kernel_owned<circular_buffer> {\n     static const size_t INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS = 8;"}, {"sha": "16662fd7a1428150f2f92a4a5868585964717eae", "filename": "src/rt/memory.h", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fmemory.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fmemory.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -2,40 +2,8 @@\n #ifndef MEMORY_H\n #define MEMORY_H\n \n-// FIXME: It would be really nice to be able to get rid of this.\n-inline void *operator new[](size_t size, rust_task *task, const char *tag) {\n-    return task->malloc(size, tag);\n-}\n+#include \"rust_task.h\"\n \n-template <typename T>\n-inline void *task_owned<T>::operator new(size_t size, rust_task *task,\n-                                         const char *tag) {\n-    return task->malloc(size, tag);\n-}\n-\n-template <typename T>\n-inline void *task_owned<T>::operator new[](size_t size, rust_task *task,\n-                                           const char *tag) {\n-    return task->malloc(size, tag);\n-}\n-\n-template <typename T>\n-inline void *task_owned<T>::operator new(size_t size, rust_task &task,\n-                                         const char *tag) {\n-    return task.malloc(size, tag);\n-}\n-\n-template <typename T>\n-inline void *task_owned<T>::operator new[](size_t size, rust_task &task,\n-                                           const char *tag) {\n-    return task.malloc(size, tag);\n-}\n-\n-template <typename T>\n-inline void *kernel_owned<T>::operator new(size_t size, rust_kernel *kernel,\n-                                           const char *tag) {\n-    return kernel->malloc(size, tag);\n-}\n \n \n #endif /* MEMORY_H */"}, {"sha": "709665799910200c8634adb62870b17da31cfa2b", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,5 +1,7 @@\n-#include \"rust_internal.h\"\n+\n+#include \"sync/sync.h\"\n #include \"memory_region.h\"\n+#include \"rust_env.h\"\n \n #if RUSTRT_TRACK_ALLOCATIONS >= 3\n #include <execinfo.h>"}, {"sha": "145020e3ccaf93197c6e95be7a4646540f5a2f94", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -9,7 +9,9 @@\n #ifndef MEMORY_REGION_H\n #define MEMORY_REGION_H\n \n+#include \"rust_globals.h\"\n #include \"sync/lock_and_signal.h\"\n+#include \"util/array_list.h\"\n \n // There are three levels of debugging:\n //"}, {"sha": "4f9cd3bf7fd9a85c654187982d3bcb0c43ee6226", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,7 +1,8 @@\n-#include \"rust_internal.h\"\n+\n+#include \"rust_globals.h\"\n+#include \"rust_kernel.h\"\n #include \"rust_util.h\"\n #include \"rust_scheduler.h\"\n-#include <cstdio>\n \n struct\n command_line_args : public kernel_owned<command_line_args>"}, {"sha": "fdf95040df83dbc829d741faaa59a745ddae778d", "filename": "src/rt/rust.h", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/704ca046a13977175975cb20a77ea2fbac15d77a/src%2Frt%2Frust.h", "raw_url": "https://github.com/rust-lang/rust/raw/704ca046a13977175975cb20a77ea2fbac15d77a/src%2Frt%2Frust.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.h?ref=704ca046a13977175975cb20a77ea2fbac15d77a", "patch": "@@ -1,41 +0,0 @@\n-#ifndef RUST_H\n-#define RUST_H\n-\n-/*\n- * Include this file after you've defined the ISO C9x stdint\n- * types (size_t, uint8_t, uintptr_t, etc.)\n- */\n-\n-#ifdef __i386__\n-// 'cdecl' ABI only means anything on i386\n-#ifdef __WIN32__\n-#ifndef CDECL\n-#define CDECL __cdecl\n-#endif\n-#ifndef FASTCALL\n-#define FASTCALL __fastcall\n-#endif\n-#else\n-#define CDECL __attribute__((cdecl))\n-#define FASTCALL __attribute__((fastcall))\n-#endif\n-#else\n-#define CDECL\n-#define FASTCALL\n-#endif\n-\n-/* Controls whether claims are turned into checks */\n-/* Variable name must be kept consistent with trans.rs */\n-extern \"C\" int check_claims;\n-\n-/*\n- * Local Variables:\n- * fill-column: 78;\n- * indent-tabs-mode: nil\n- * c-basic-offset: 4\n- * buffer-file-coding-system: utf-8-unix\n- * compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n- * End:\n- */\n-\n-#endif /* RUST_H */"}, {"sha": "21f7b9d2dc37755062d1321ac9162ce50e6e4fd4", "filename": "src/rt/rust_box_annihilator.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_box_annihilator.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_box_annihilator.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_box_annihilator.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,4 +1,6 @@\n-#include \"rust_internal.h\"\n+\n+#include \"rust_globals.h\"\n+#include \"rust_task.h\"\n #include \"rust_shape.h\"\n \n class annihilator : public shape::data<annihilator,shape::ptr> {"}, {"sha": "79e1e880f57839c79133c1b25fe1ebc9e248555c", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,12 +1,12 @@\n /* Native builtins. */\n \n-#include \"rust_internal.h\"\n #include \"rust_sched_loop.h\"\n #include \"rust_task.h\"\n #include \"rust_util.h\"\n #include \"rust_scheduler.h\"\n #include \"sync/timer.h\"\n #include \"rust_abi.h\"\n+#include \"rust_port.h\"\n \n #ifdef __APPLE__\n #include <crt_externs.h>"}, {"sha": "41cc1684290bdb36961e1128156a6d668431653d", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,19 +1,17 @@\n // Rust cycle collector. Temporary, but will probably stick around for some\n // time until LLVM's GC infrastructure is more mature.\n \n-#include \"rust_debug.h\"\n-#include \"rust_internal.h\"\n-#include \"rust_shape.h\"\n-#include \"rust_task.h\"\n-#include <cassert>\n-#include <cstdio>\n-#include <cstdlib>\n #include <map>\n #include <set>\n #include <vector>\n-#include <stdint.h>\n #include <ios>\n \n+#include \"rust_globals.h\"\n+#include \"rust_cc.h\"\n+#include \"rust_debug.h\"\n+#include \"rust_shape.h\"\n+#include \"rust_task.h\"\n+\n // The number of allocations Rust code performs before performing cycle\n // collection.\n #define RUST_CC_FREQUENCY   5000"}, {"sha": "47aaec00087876dc5da59d651d44e52da3c08afa", "filename": "src/rt/rust_debug.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_debug.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_debug.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_debug.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,13 +1,13 @@\n // Routines useful when debugging the Rust runtime.\n \n+#include \"rust_globals.h\"\n #include \"rust_abi.h\"\n #include \"rust_debug.h\"\n-#include \"rust_internal.h\"\n+#include \"rust_task.h\"\n \n #include <iostream>\n #include <string>\n #include <sstream>\n-#include <stdint.h>\n \n namespace {\n "}, {"sha": "a54dc27c71f495abf563bbdd14dd3a23572c88ae", "filename": "src/rt/rust_env.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_env.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_env.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -3,7 +3,7 @@\n // that might come from the environment is loaded here, once, during\n // init.\n \n-#include \"rust_internal.h\"\n+#include \"rust_env.h\"\n \n // The environment variables that the runtime knows about\n #define RUST_THREADS \"RUST_THREADS\""}, {"sha": "007ac9b1e0b192e201db2246f81820617438d5e7", "filename": "src/rt/rust_env.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_env.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_env.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,3 +1,9 @@\n+\n+#ifndef RUST_ENV_H\n+#define RUST_ENV_H\n+\n+#include \"rust_globals.h\"\n+\n struct rust_env {\n     size_t num_sched_threads;\n     size_t min_stack_size;\n@@ -11,3 +17,5 @@ struct rust_env {\n \n rust_env* load_env();\n void free_env(rust_env *rust_env);\n+\n+#endif"}, {"sha": "54b80ee7908c837c16a0cbfe9d41f3d73e6dea73", "filename": "src/rt/rust_globals.h", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_globals.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_globals.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_globals.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -25,11 +25,10 @@\n #include <string.h>\n #include <fcntl.h>\n #include <math.h>\n+#include <assert.h>\n \n-#include \"rust.h\"\n #include \"rand.h\"\n #include \"uthash.h\"\n-#include \"rust_env.h\"\n \n #if defined(__WIN32__)\n extern \"C\" {\n@@ -52,6 +51,28 @@ extern \"C\" {\n #error \"Platform not supported.\"\n #endif\n \n+#ifdef __i386__\n+// 'cdecl' ABI only means anything on i386\n+#ifdef __WIN32__\n+#ifndef CDECL\n+#define CDECL __cdecl\n+#endif\n+#ifndef FASTCALL\n+#define FASTCALL __fastcall\n+#endif\n+#else\n+#define CDECL __attribute__((cdecl))\n+#define FASTCALL __attribute__((fastcall))\n+#endif\n+#else\n+#define CDECL\n+#define FASTCALL\n+#endif\n+\n+/* Controls whether claims are turned into checks */\n+/* Variable name must be kept consistent with trans.rs */\n+extern \"C\" int check_claims;\n+\n #define CHECKED(call)                                               \\\n     {                                                               \\\n     int res = (call);                                               \\\n@@ -64,4 +85,16 @@ extern \"C\" {\n         }                                                           \\\n     }\n \n+#define PTR \"0x%\" PRIxPTR\n+\n+// This accounts for logging buffers.\n+static size_t const BUF_BYTES = 2048;\n+\n+// The error status to use when the process fails\n+#define PROC_FAIL_CODE 101\n+\n+// A cond(ition) is something we can block on. This can be a channel\n+// (writing), a port (reading) or a task (waiting).\n+struct rust_cond { };\n+\n #endif /* RUST_GLOBALS_H */"}, {"sha": "bcf88cfcaf157c44794f5691acb7f934d76a203a", "filename": "src/rt/rust_internal.h", "status": "removed", "additions": 0, "deletions": 183, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/704ca046a13977175975cb20a77ea2fbac15d77a/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/704ca046a13977175975cb20a77ea2fbac15d77a/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=704ca046a13977175975cb20a77ea2fbac15d77a", "patch": "@@ -1,183 +0,0 @@\n-#ifndef RUST_INTERNAL_H\n-#define RUST_INTERNAL_H\n-\n-#include \"rust_globals.h\"\n-#include \"util/array_list.h\"\n-#include \"util/indexed_list.h\"\n-#include \"util/synchronized_indexed_list.h\"\n-#include \"util/hash_map.h\"\n-#include \"sync/sync.h\"\n-#include \"sync/lock_and_signal.h\"\n-#include \"sync/lock_free_queue.h\"\n-\n-struct rust_sched_loop;\n-struct rust_task;\n-class rust_log;\n-class rust_port;\n-class rust_kernel;\n-\n-struct stk_seg;\n-struct type_desc;\n-struct frame_glue_fns;\n-\n-typedef intptr_t rust_sched_id;\n-typedef intptr_t rust_task_id;\n-typedef intptr_t rust_port_id;\n-\n-#define PTR \"0x%\" PRIxPTR\n-\n-// This drives our preemption scheme.\n-\n-static size_t const TIME_SLICE_IN_MS = 10;\n-\n-// This accounts for logging buffers.\n-\n-static size_t const BUF_BYTES = 2048;\n-\n-// The error status to use when the process fails\n-#define PROC_FAIL_CODE 101\n-\n-// Every reference counted object should use this macro and initialize\n-// ref_count.\n-\n-#define RUST_REFCOUNTED(T) \\\n-  RUST_REFCOUNTED_WITH_DTOR(T, delete (T*)this)\n-#define RUST_REFCOUNTED_WITH_DTOR(T, dtor) \\\n-  intptr_t ref_count;      \\\n-  void ref() { ++ref_count; } \\\n-  void deref() { if (--ref_count == 0) { dtor; } }\n-\n-#define RUST_ATOMIC_REFCOUNT()                                             \\\n-private:                                                                   \\\n-   intptr_t ref_count;                                                     \\\n-public:                                                                    \\\n-   void ref() {                                                            \\\n-       intptr_t old = sync::increment(ref_count);                          \\\n-       assert(old > 0);                                                    \\\n-   }                                                                       \\\n-   void deref() { if(0 == sync::decrement(ref_count)) { delete_this(); } } \\\n-   intptr_t get_ref_count() { return sync::read(ref_count); }\n-\n-template <typename T> struct task_owned {\n-    inline void *operator new(size_t size, rust_task *task, const char *tag);\n-\n-    inline void *operator new[](size_t size, rust_task *task,\n-                                const char *tag);\n-\n-    inline void *operator new(size_t size, rust_task &task, const char *tag);\n-\n-    inline void *operator new[](size_t size, rust_task &task,\n-                                const char *tag);\n-\n-    void operator delete(void *ptr) {\n-        ((T *)ptr)->task->free(ptr);\n-    }\n-};\n-\n-template <typename T> struct kernel_owned {\n-    inline void *operator new(size_t size, rust_kernel *kernel,\n-                              const char *tag);\n-\n-    void operator delete(void *ptr) {\n-        ((T *)ptr)->kernel->free(ptr);\n-    }\n-};\n-\n-template <typename T> struct region_owned {\n-    void operator delete(void *ptr) {\n-        ((T *)ptr)->region->free(ptr);\n-    }\n-};\n-\n-// A cond(ition) is something we can block on. This can be a channel\n-// (writing), a port (reading) or a task (waiting).\n-\n-struct rust_cond { };\n-\n-#include \"memory_region.h\"\n-#include \"rust_log.h\"\n-#include \"rust_kernel.h\"\n-#include \"rust_sched_loop.h\"\n-\n-typedef void CDECL (glue_fn)(void *, void *,\n-                             const type_desc **, void *);\n-\n-struct rust_shape_tables {\n-    uint8_t *tags;\n-    uint8_t *resources;\n-};\n-\n-typedef unsigned long ref_cnt_t;\n-\n-// Corresponds to the boxed data in the @ region.  The body follows the\n-// header; you can obtain a ptr via box_body() below.\n-struct rust_opaque_box {\n-    ref_cnt_t ref_count;\n-    type_desc *td;\n-    rust_opaque_box *prev;\n-    rust_opaque_box *next;\n-};\n-\n-// The type of functions that we spawn, which fall into two categories:\n-// - the main function: has a NULL environment, but uses the void* arg\n-// - unique closures of type fn~(): have a non-NULL environment, but\n-//   no arguments (and hence the final void*) is harmless\n-typedef void (*CDECL spawn_fn)(void*, rust_opaque_box*, void *);\n-\n-// corresponds to the layout of a fn(), fn@(), fn~() etc\n-struct fn_env_pair {\n-    spawn_fn f;\n-    rust_opaque_box *env;\n-};\n-\n-static inline void *box_body(rust_opaque_box *box) {\n-    // Here we take advantage of the fact that the size of a box in 32\n-    // (resp. 64) bit is 16 (resp. 32) bytes, and thus always 16-byte aligned.\n-    // If this were to change, we would have to update the method\n-    // rustc::middle::trans::base::opaque_box_body() as well.\n-    return (void*)(box + 1);\n-}\n-\n-struct type_desc {\n-    // First part of type_desc is known to compiler.\n-    // first_param = &descs[1] if dynamic, null if static.\n-    const type_desc **first_param;\n-    size_t size;\n-    size_t align;\n-    glue_fn *take_glue;\n-    glue_fn *drop_glue;\n-    glue_fn *free_glue;\n-    void *UNUSED;\n-    glue_fn *sever_glue;    // For GC.\n-    glue_fn *mark_glue;     // For GC.\n-    uintptr_t unused2;\n-    void *UNUSED_2;\n-    const uint8_t *shape;\n-    const rust_shape_tables *shape_tables;\n-    uintptr_t n_params;\n-    uintptr_t n_obj_params;\n-\n-    // Residual fields past here are known only to runtime.\n-    UT_hash_handle hh;\n-    size_t n_descs;\n-    const type_desc *descs[];\n-};\n-\n-extern \"C\" type_desc *rust_clone_type_desc(type_desc*);\n-\n-#include \"circular_buffer.h\"\n-#include \"rust_task.h\"\n-#include \"rust_port.h\"\n-#include \"memory.h\"\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// End:\n-//\n-\n-#endif"}, {"sha": "259870bcd6987eef16b08ef5625ff97c6cace90a", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,4 +1,7 @@\n-#include \"rust_internal.h\"\n+\n+#include \"rust_kernel.h\"\n+#include \"rust_globals.h\"\n+#include \"rust_port.h\"\n #include \"rust_util.h\"\n #include \"rust_scheduler.h\"\n "}, {"sha": "3683773a7fb3260aeed4590778194adbc3140db8", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -7,9 +7,15 @@\n #include \"memory_region.h\"\n #include \"rust_log.h\"\n #include \"rust_sched_reaper.h\"\n+#include \"util/hash_map.h\"\n \n struct rust_task_thread;\n class rust_scheduler;\n+class rust_port;\n+\n+typedef intptr_t rust_sched_id;\n+typedef intptr_t rust_task_id;\n+typedef intptr_t rust_port_id;\n \n typedef std::map<rust_sched_id, rust_scheduler*> sched_map;\n \n@@ -81,4 +87,19 @@ class rust_kernel {\n     void set_exit_status(int code);\n };\n \n+template <typename T> struct kernel_owned {\n+    inline void *operator new(size_t size, rust_kernel *kernel,\n+                              const char *tag);\n+\n+    void operator delete(void *ptr) {\n+        ((T *)ptr)->kernel->free(ptr);\n+    }\n+};\n+\n+template <typename T>\n+inline void *kernel_owned<T>::operator new(size_t size, rust_kernel *kernel,\n+                                           const char *tag) {\n+    return kernel->malloc(size, tag);\n+}\n+\n #endif /* RUST_KERNEL_H */"}, {"sha": "df1ae6fd47f0523c83f2dd61cb630b4fa5e9d427", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -2,12 +2,11 @@\n  * Logging infrastructure that aims to support multi-threading\n  */\n \n-#include \"rust_internal.h\"\n+\n+#include \"rust_log.h\"\n #include \"util/array_list.h\"\n-#include <stdarg.h>\n-#include <stdlib.h>\n-#include <string.h>\n #include \"rust_util.h\"\n+#include \"rust_task.h\"\n \n /**\n  * Synchronizes access to the underlying logging mechanism."}, {"sha": "423f66fa7cd4686593c6fd089ca116da43731d90", "filename": "src/rt/rust_log.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_log.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_log.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -2,6 +2,8 @@\n #ifndef RUST_LOG_H\n #define RUST_LOG_H\n \n+#include \"rust_globals.h\"\n+\n const uint32_t log_err = 0;\n const uint32_t log_warn = 1;\n const uint32_t log_info = 2;"}, {"sha": "f1a40508acad383cb536f11172e0e7d98e1cb3da", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,6 +1,6 @@\n-#include \"rust_internal.h\"\n-#include \"rust_port.h\"\n \n+#include \"rust_port.h\"\n+#include \"rust_task.h\"\n \n rust_port::rust_port(rust_task *task, size_t unit_sz)\n     : ref_count(1), kernel(task->kernel), task(task),"}, {"sha": "ae160de217f215e85497b264d359920f808223aa", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,7 +1,8 @@\n #ifndef RUST_PORT_H\n #define RUST_PORT_H\n \n-#include \"rust_internal.h\"\n+#include \"rust_globals.h\"\n+#include \"circular_buffer.h\"\n \n class port_detach_cond : public rust_cond { };\n "}, {"sha": "7b3b45788f73bc8c3bbb5455a23754438127bf03", "filename": "src/rt/rust_port_selector.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_port_selector.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_port_selector.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port_selector.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,5 +1,7 @@\n+\n #include \"rust_port.h\"\n #include \"rust_port_selector.h\"\n+#include \"rust_task.h\"\n \n rust_port_selector::rust_port_selector()\n     : ports(NULL), n_ports(0) {"}, {"sha": "8dbf0c403293256dab5f1aa77ac85e313ed1c2d5", "filename": "src/rt/rust_port_selector.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_port_selector.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_port_selector.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port_selector.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,9 +1,8 @@\n #ifndef RUST_PORT_SELECTOR_H\n #define RUST_PORT_SELECTOR_H\n \n-#include \"rust_internal.h\"\n+#include \"rust_globals.h\"\n \n-struct rust_task;\n class rust_port;\n \n class rust_port_selector : public rust_cond {"}, {"sha": "0e70af31aff96a38b0189db03522c027c8467efe", "filename": "src/rt/rust_refcount.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_refcount.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_refcount.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_refcount.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -0,0 +1,31 @@\n+\n+#ifndef RUST_REFCOUNT_H\n+#define RUST_REFCOUNT_H\n+\n+#include \"sync/sync.h\"\n+\n+// Refcounting defines\n+typedef unsigned long ref_cnt_t;\n+\n+#define RUST_REFCOUNTED(T) \\\n+  RUST_REFCOUNTED_WITH_DTOR(T, delete (T*)this)\n+\n+#define RUST_REFCOUNTED_WITH_DTOR(T, dtor)      \\\n+  intptr_t ref_count;      \\\n+  void ref() { ++ref_count; } \\\n+  void deref() { if (--ref_count == 0) { dtor; } }\n+\n+#define RUST_ATOMIC_REFCOUNT()                                             \\\n+private:                                                                   \\\n+   intptr_t ref_count;                                                     \\\n+public:                                                                    \\\n+   void ref() {                                                            \\\n+       intptr_t old = sync::increment(ref_count);                          \\\n+       assert(old > 0);                                                    \\\n+   }                                                                       \\\n+   void deref() { if(0 == sync::decrement(ref_count)) { delete_this(); } } \\\n+   intptr_t get_ref_count() { return sync::read(ref_count); }\n+\n+\n+\n+#endif"}, {"sha": "8d7396aab932755d96859cc06d15753afaaf5f99", "filename": "src/rt/rust_run_program.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_run_program.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_run_program.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_run_program.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,4 +1,5 @@\n-#include \"rust_internal.h\"\n+\n+#include \"rust_kernel.h\"\n \n #ifdef __APPLE__\n #include <crt_externs.h>"}, {"sha": "0da9d580dc3b07d629ca6f348a32d8869eed18da", "filename": "src/rt/rust_sched_driver.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_driver.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_driver.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_driver.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,5 +1,5 @@\n-#include <assert.h>\n-#include \"rust_internal.h\"\n+\n+#include \"rust_globals.h\"\n #include \"rust_sched_driver.h\"\n #include \"rust_sched_loop.h\"\n "}, {"sha": "3406835dfbb7215bdd05b25a915d6da106b1a61a", "filename": "src/rt/rust_sched_launcher.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_launcher.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_launcher.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,3 +1,4 @@\n+\n #include \"rust_sched_launcher.h\"\n #include \"rust_scheduler.h\"\n "}, {"sha": "523a199401e9ad57e9537fc37696ff456c42c20c", "filename": "src/rt/rust_sched_launcher.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_launcher.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_launcher.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,9 +1,10 @@\n #ifndef RUST_SCHED_LAUNCHER_H\n #define RUST_SCHED_LAUNCHER_H\n \n-#include \"rust_internal.h\"\n #include \"sync/rust_thread.h\"\n #include \"rust_sched_driver.h\"\n+#include \"rust_kernel.h\"\n+#include \"rust_sched_loop.h\"\n \n class rust_sched_launcher : public kernel_owned<rust_sched_launcher> {\n public:"}, {"sha": "e8942f37733e5d14801822374b4441a0a1a395f2", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,9 +1,5 @@\n \n-#include <stdarg.h>\n-#include <cassert>\n-#include <pthread.h>\n-#include <vector>\n-#include \"rust_internal.h\"\n+#include \"rust_sched_loop.h\"\n #include \"rust_util.h\"\n #include \"rust_scheduler.h\"\n "}, {"sha": "7f60f7e449d163902f1211d58e790aa45f9c1025", "filename": "src/rt/rust_sched_loop.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_loop.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_loop.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,10 +1,12 @@\n #ifndef RUST_SCHED_LOOP_H\n #define RUST_SCHED_LOOP_H\n \n-#include \"rust_internal.h\"\n+#include \"rust_globals.h\"\n+#include \"rust_log.h\"\n #include \"rust_stack.h\"\n #include \"rust_signal.h\"\n #include \"context.h\"\n+#include \"util/indexed_list.h\"\n \n enum rust_task_state {\n     task_state_newborn,\n@@ -23,6 +25,8 @@ enum rust_sched_loop_state {\n     sched_loop_state_exit\n };\n \n+class rust_kernel;\n+class rust_scheduler;\n struct rust_task;\n \n typedef indexed_list<rust_task> rust_task_list;\n@@ -176,6 +180,8 @@ rust_sched_loop::return_c_stack(stk_seg *stack) {\n     }\n }\n \n+// this is needed to appease the circular dependency gods\n+#include \"rust_task.h\"\n \n //\n // Local Variables:"}, {"sha": "4d5237ac54e1f5af27b982a93c0851c65f8dd064", "filename": "src/rt/rust_sched_reaper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_reaper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_sched_reaper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_reaper.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,4 +1,4 @@\n-#include \"rust_internal.h\"\n+\n #include \"rust_kernel.h\"\n #include \"rust_sched_reaper.h\"\n "}, {"sha": "acf5dfcbe88b834f324ab3a7b7bf31dc0d3e358b", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,4 +1,7 @@\n+\n #include \"rust_scheduler.h\"\n+#include \"rust_task.h\"\n+#include \"rust_globals.h\"\n #include \"rust_util.h\"\n #include \"rust_sched_launcher.h\"\n "}, {"sha": "84f3df195a468252fc15d2edf20ad0e4badf2f7b", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,7 +1,9 @@\n #ifndef RUST_SCHEDULER_H\n #define RUST_SCHEDULER_H\n \n-#include \"rust_internal.h\"\n+#include \"rust_globals.h\"\n+#include \"util/array_list.h\"\n+#include \"rust_kernel.h\"\n \n class rust_sched_launcher;\n "}, {"sha": "9598744aea390f75d2782c99f6390d414c5f05a2", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,16 +1,14 @@\n // Functions that interpret the shape of a type to perform various low-level\n // actions, such as copying, freeing, comparing, and so on.\n \n+\n #include <algorithm>\n #include <iomanip>\n #include <iostream>\n #include <sstream>\n #include <utility>\n-#include <cassert>\n-#include <cctype>\n-#include <cstdio>\n-#include <cstdlib>\n-#include \"rust_internal.h\"\n+\n+#include \"rust_task.h\"\n #include \"rust_shape.h\"\n \n namespace shape {"}, {"sha": "a181a88145714aaff4b1cdb2edbe6d81024c08ec", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -9,7 +9,8 @@\n #undef min\n \n #include <iostream>\n-#include \"rust_internal.h\"\n+\n+#include \"rust_globals.h\"\n #include \"rust_util.h\"\n \n // ISAAC pollutes our namespace."}, {"sha": "5b5cda74828eb542ef8a4689c58536360b9d76c8", "filename": "src/rt/rust_stack.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_stack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_stack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,5 +1,5 @@\n-#include \"rust_internal.h\"\n \n+#include \"rust_stack.h\"\n #include \"vg/valgrind.h\"\n #include \"vg/memcheck.h\"\n "}, {"sha": "4d88868d5586ff1232b0e983dba2cd944789dd28", "filename": "src/rt/rust_stack.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_stack.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_stack.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,8 +1,11 @@\n #ifndef RUST_STACK_H\n #define RUST_STACK_H\n \n+#include \"rust_globals.h\"\n #include \"memory_region.h\"\n \n+struct rust_task;\n+\n struct stk_seg {\n     stk_seg *prev;\n     stk_seg *next;"}, {"sha": "e1bc74e53dfebb6b54c1f4acddd68716ec9b7ba5", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,16 +1,15 @@\n \n-#include \"rust_internal.h\"\n-#include \"rust_cc.h\"\n-\n #ifndef __WIN32__\n #include <execinfo.h>\n #endif\n #include <iostream>\n-#include <cassert>\n-#include <cstring>\n #include <algorithm>\n \n+#include \"rust_task.h\"\n+#include \"rust_cc.h\"\n #include \"rust_upcall.h\"\n+#include \"rust_env.h\"\n+#include \"rust_port.h\"\n \n // Tasks\n rust_task::rust_task(rust_sched_loop *sched_loop, rust_task_state state,"}, {"sha": "2a6ed8fdd44e3428b02baf77baf99ab982e6e99b", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,21 +1,19 @@\n-/*\n- *\n- */\n \n #ifndef RUST_TASK_H\n #define RUST_TASK_H\n \n #include <map>\n \n #include \"util/array_list.h\"\n-\n #include \"context.h\"\n #include \"rust_debug.h\"\n-#include \"rust_internal.h\"\n #include \"rust_kernel.h\"\n #include \"boxed_region.h\"\n #include \"rust_stack.h\"\n #include \"rust_port_selector.h\"\n+#include \"rust_type.h\"\n+#include \"rust_sched_loop.h\"\n+#include \"memory.h\"\n \n // The amount of extra space at the end of each stack segment, available\n // to the rt, compiler and dynamic linker for running small functions\n@@ -272,6 +270,38 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void cleanup_after_turn();\n };\n \n+// FIXME: It would be really nice to be able to get rid of this.\n+inline void *operator new[](size_t size, rust_task *task, const char *tag) {\n+    return task->malloc(size, tag);\n+}\n+\n+\n+template <typename T> struct task_owned {\n+    inline void *operator new(size_t size, rust_task *task,\n+                                             const char *tag) {\n+        return task->malloc(size, tag);\n+    }\n+\n+    inline void *operator new[](size_t size, rust_task *task,\n+                                               const char *tag) {\n+        return task->malloc(size, tag);\n+    }\n+\n+    inline void *operator new(size_t size, rust_task &task,\n+                                             const char *tag) {\n+        return task.malloc(size, tag);\n+    }\n+\n+    inline void *operator new[](size_t size, rust_task &task,\n+                                               const char *tag) {\n+        return task.malloc(size, tag);\n+    }\n+\n+    void operator delete(void *ptr) {\n+        ((T *)ptr)->task->free(ptr);\n+    }\n+};\n+\n // This stuff is on the stack-switching fast path\n \n // Get a rough approximation of the current stack pointer"}, {"sha": "399832d553c4e088531bfa7c13deec991025c738", "filename": "src/rt/rust_type.h", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -0,0 +1,72 @@\n+\n+#ifndef RUST_TYPE_H\n+#define RUST_TYPE_H\n+\n+#include \"rust_refcount.h\"\n+\n+// The type of functions that we spawn, which fall into two categories:\n+// - the main function: has a NULL environment, but uses the void* arg\n+// - unique closures of type fn~(): have a non-NULL environment, but\n+//   no arguments (and hence the final void*) is harmless\n+typedef void (*CDECL spawn_fn)(void*, rust_opaque_box*, void *);\n+\n+struct type_desc;\n+\n+typedef void CDECL (glue_fn)(void *, void *, const type_desc **, void *);\n+\n+struct rust_shape_tables {\n+    uint8_t *tags;\n+    uint8_t *resources;\n+};\n+\n+// Corresponds to the boxed data in the @ region.  The body follows the\n+// header; you can obtain a ptr via box_body() below.\n+struct rust_opaque_box {\n+    ref_cnt_t ref_count;\n+    type_desc *td;\n+    rust_opaque_box *prev;\n+    rust_opaque_box *next;\n+};\n+\n+// corresponds to the layout of a fn(), fn@(), fn~() etc\n+struct fn_env_pair {\n+    spawn_fn f;\n+    rust_opaque_box *env;\n+};\n+\n+static inline void *box_body(rust_opaque_box *box) {\n+    // Here we take advantage of the fact that the size of a box in 32\n+    // (resp. 64) bit is 16 (resp. 32) bytes, and thus always 16-byte aligned.\n+    // If this were to change, we would have to update the method\n+    // rustc::middle::trans::base::opaque_box_body() as well.\n+    return (void*)(box + 1);\n+}\n+\n+struct type_desc {\n+    // First part of type_desc is known to compiler.\n+    // first_param = &descs[1] if dynamic, null if static.\n+    const type_desc **first_param;\n+    size_t size;\n+    size_t align;\n+    glue_fn *take_glue;\n+    glue_fn *drop_glue;\n+    glue_fn *free_glue;\n+    void *UNUSED;\n+    glue_fn *sever_glue;    // For GC.\n+    glue_fn *mark_glue;     // For GC.\n+    uintptr_t unused2;\n+    void *UNUSED_2;\n+    const uint8_t *shape;\n+    const rust_shape_tables *shape_tables;\n+    uintptr_t n_params;\n+    uintptr_t n_obj_params;\n+\n+    // Residual fields past here are known only to runtime.\n+    UT_hash_handle hh;\n+    size_t n_descs;\n+    const type_desc *descs[];\n+};\n+\n+extern \"C\" type_desc *rust_clone_type_desc(type_desc*);\n+\n+#endif"}, {"sha": "a257c031cc09decfa2db7f6e6b274b0b5a780426", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -6,15 +6,15 @@\n   switch to the C stack.\n  */\n \n+#include \"rust_globals.h\"\n+#include \"rust_task.h\"\n #include \"rust_cc.h\"\n-#include \"rust_internal.h\"\n #include \"rust_sched_loop.h\"\n #include \"rust_unwind.h\"\n #include \"rust_upcall.h\"\n #include \"rust_util.h\"\n #include <stdint.h>\n \n-\n #ifdef __GNUC__\n #define LOG_UPCALL_ENTRY(task)                            \\\n     LOG(task, upcall,                                     \\"}, {"sha": "0030ef19b368fed24039df6b3f4de1fe024cb8d5", "filename": "src/rt/rust_upcall.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_upcall.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_upcall.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,6 +1,9 @@\n-#pragma once\n+\n+#ifndef RUST_UPCALL_H\n+#define RUST_UPCALL_H\n \n // Upcalls used from C code on occasion:\n \n extern \"C\" CDECL void upcall_shared_free(void* ptr);\n \n+#endif"}, {"sha": "9928a05c05780e60250fe8bd9c6689b7a489ede4", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,8 +1,9 @@\n #ifndef RUST_UTIL_H\n #define RUST_UTIL_H\n \n-#include \"rust_task.h\"\n #include <limits.h>\n+#include \"rust_task.h\"\n+#include \"rust_env.h\"\n \n // Inline fn used regularly elsewhere.\n "}, {"sha": "7e7486fca621ea33b90ec4d0603460085cbc8bdc", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,4 +1,6 @@\n-#include \"rust_internal.h\"\n+\n+#include \"rust_globals.h\"\n+#include \"rust_task.h\"\n #include \"uv.h\"\n \n // crust fn pointers"}, {"sha": "ccc762c2cc99deee56c8ac7e1c3cf3ff7e664c78", "filename": "src/rt/sync/lock_and_signal.cpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fsync%2Flock_and_signal.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fsync%2Flock_and_signal.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,5 +1,6 @@\n-#include <assert.h>\n+\n #include \"../rust_globals.h\"\n+#include \"lock_and_signal.h\"\n \n /*\n  * A \"lock-and-signal\" pair. These are necessarily coupled on pthreads\n@@ -8,8 +9,6 @@\n  * if you're using a pthreads cvar+mutex pair.\n  */\n \n-#include \"lock_and_signal.h\"\n-\n // FIXME: This is not a portable way of specifying an invalid pthread_t\n #define INVALID_THREAD 0\n "}, {"sha": "927b0c5b0ff211ea97ce64fb57a21425f6a3ac9b", "filename": "src/rt/sync/lock_and_signal.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fsync%2Flock_and_signal.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fsync%2Flock_and_signal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -2,6 +2,8 @@\n #ifndef LOCK_AND_SIGNAL_H\n #define LOCK_AND_SIGNAL_H\n \n+#include \"rust_globals.h\"\n+\n #ifndef RUST_NDEBUG\n #define DEBUG_LOCKS\n #endif"}, {"sha": "3ee15d5d3a6a644b02cc239d91dcf86ed4e4b839", "filename": "src/rt/sync/lock_free_queue.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fsync%2Flock_free_queue.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fsync%2Flock_free_queue.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_free_queue.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -42,6 +42,7 @@\n  */\n \n #include <assert.h>\n+\n template <class T>\n class lock_free_queue {\n "}, {"sha": "5d533acde3db963b170f190000ccf54c65ff2fce", "filename": "src/rt/sync/rust_thread.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fsync%2Frust_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fsync%2Frust_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Frust_thread.cpp?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,4 +1,4 @@\n-#include \"rust_globals.h\"\n+\n #include \"rust_thread.h\"\n \n const size_t default_stack_sz = 1024*1024;"}, {"sha": "56cf85d466085ad7a46cb8fe9220d47516d49b62", "filename": "src/rt/sync/rust_thread.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fsync%2Frust_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Fsync%2Frust_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Frust_thread.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -1,6 +1,8 @@\n #ifndef RUST_THREAD_H\n #define RUST_THREAD_H\n \n+#include \"rust_globals.h\"\n+\n /**\n  * Thread utility class. Derive and implement your own run() method.\n  */"}, {"sha": "6321611c81c98640530ae5a3f4f046edb6fb4d01", "filename": "src/rt/util/array_list.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Futil%2Farray_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/632a4c9326561de2bd9d9ded19a82f22678a0cf4/src%2Frt%2Futil%2Farray_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Farray_list.h?ref=632a4c9326561de2bd9d9ded19a82f22678a0cf4", "patch": "@@ -2,6 +2,9 @@\n #ifndef ARRAY_LIST_H\n #define ARRAY_LIST_H\n \n+#include <inttypes.h>\n+#include <stddef.h>\n+\n /**\n  * A simple, resizable array list.\n  */"}, {"sha": "f7c451ee5b140f4db3ae0b9493c09c397c6ab332", "filename": "src/rt/util/synchronized_indexed_list.h", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/704ca046a13977175975cb20a77ea2fbac15d77a/src%2Frt%2Futil%2Fsynchronized_indexed_list.h", "raw_url": "https://github.com/rust-lang/rust/raw/704ca046a13977175975cb20a77ea2fbac15d77a/src%2Frt%2Futil%2Fsynchronized_indexed_list.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Futil%2Fsynchronized_indexed_list.h?ref=704ca046a13977175975cb20a77ea2fbac15d77a", "patch": "@@ -1,74 +0,0 @@\n-#ifndef SYNCHRONIZED_INDEXED_LIST_H\n-#define SYNCHRONIZED_INDEXED_LIST_H\n-\n-#include \"indexed_list.h\"\n-#include \"../sync/lock_and_signal.h\"\n-\n-template<typename T> class synchronized_indexed_list :\n-    public indexed_list<T> {\n-    lock_and_signal _lock;\n-\n-public:\n-    synchronized_indexed_list() {\n-    }\n-\n-    int32_t append(T *value) {\n-        int32_t index = 0;\n-        _lock.lock();\n-        index = indexed_list<T>::append(value);\n-        _lock.unlock();\n-        return index;\n-    }\n-\n-    bool pop(T **value) {\n-        _lock.lock();\n-        bool result = indexed_list<T>::pop(value);\n-        _lock.unlock();\n-        return result;\n-    }\n-\n-    size_t length() {\n-       size_t length = 0;\n-       _lock.lock();\n-       length = indexed_list<T>::length();\n-       _lock.unlock();\n-       return length;\n-    }\n-\n-    bool is_empty() {\n-        bool empty = false;\n-        _lock.lock();\n-        empty = indexed_list<T>::is_empty();\n-        _lock.unlock();\n-        return empty;\n-    }\n-\n-    int32_t remove(T* value) {\n-        size_t index = 0;\n-        _lock.lock();\n-        index = indexed_list<T>::remove(value);\n-        _lock.unlock();\n-        return index;\n-    }\n-\n-    T *operator[](size_t index) {\n-        T *value = NULL;\n-        _lock.lock();\n-        value = indexed_list<T>::operator[](index);\n-        _lock.unlock();\n-        return value;\n-    }\n-};\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//\n-\n-#endif /* SYNCHRONIZED_INDEXED_LIST_H */"}]}