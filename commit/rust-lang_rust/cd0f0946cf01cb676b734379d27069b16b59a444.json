{"sha": "cd0f0946cf01cb676b734379d27069b16b59a444", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMGYwOTQ2Y2YwMWNiNjc2YjczNDM3OWQyNzA2OWIxNmI1OWE0NDQ=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-04T15:12:51Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-06T18:15:00Z"}, "message": "Move tests to the end of the file in utils mod.rs", "tree": {"sha": "5e5a50f43914a90f44622dcfa222ce0e95f398ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e5a50f43914a90f44622dcfa222ce0e95f398ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd0f0946cf01cb676b734379d27069b16b59a444", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl48V6QACgkQaTCGhp1Q\nZjfLrg/+OmNDx+zf7fyTnkl1wJfyJuG6l10WCLWBjwi+cxvOKAnM4l8haWAyqH6Z\nCicAFszWX/ECOKxIGw+8xMEH/f9lrulUcd4MZSqzXTLF9fjeN8ww9aIQmNQOxJ17\nOWQafnwhvNGgfD9VkQVPMkELUHjwnLNmIwQH9AT/fMWQZx4q29WQw/C4MLtWNuzH\n371JZHHKMCRFhuK0eUa+XEdUk0UVHpLzJH28s0ortmMRqihHEd6CiqLo/h20Mkvb\nIOYTjz1OKGwDYImk4hUXlBmLdrHisfcaCNsc6FzCEO9+5RDVKFmKxXDqjjmMRWPp\nkHEibcQTefNYj/3NWMxor69/hVP+LKkDUVuclikSQdcr6ySpwCleqgROhO2lgxTc\nXEJZRhKPTYKm3+irGJ5v5L4ST6m84UeoLOXdroKrWQaax0bPTkOp8MIWC61oULNh\n3H/NHK2VrOLDnDlHkdJKf6Sob5GWzMaV4A/j9I+xlzDZLHaUkLwemQfIpguoafjf\nxT1BG61USyBdcf98V4NcVFPiKWqtrK5H0CauozssJ1jvfiPkCHFsNglkRXuiKe3L\nWZ40Xpf+H/qbKlZlk8WRy0nhUGKz0dtAUZA4bCobT8UTqqXtAAF0jrJW/1r/jnkJ\nP/nYSWQXUIHw8DRazRmoe7lQXfFcxbgMUuMWXelJ3LDYY+2XwYQ=\n=4cIp\n-----END PGP SIGNATURE-----", "payload": "tree 5e5a50f43914a90f44622dcfa222ce0e95f398ad\nparent f1a72e992d75983e1a2503b4e577971d7e018f1d\nauthor flip1995 <hello@philkrones.com> 1580829171 +0100\ncommitter flip1995 <hello@philkrones.com> 1581012900 +0100\n\nMove tests to the end of the file in utils mod.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd0f0946cf01cb676b734379d27069b16b59a444", "html_url": "https://github.com/rust-lang/rust/commit/cd0f0946cf01cb676b734379d27069b16b59a444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd0f0946cf01cb676b734379d27069b16b59a444/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a72e992d75983e1a2503b4e577971d7e018f1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a72e992d75983e1a2503b4e577971d7e018f1d", "html_url": "https://github.com/rust-lang/rust/commit/f1a72e992d75983e1a2503b4e577971d7e018f1d"}], "stats": {"total": 162, "additions": 81, "deletions": 81}, "files": [{"sha": "b9a62382aa39cbba0c9c7809415dac3ce365d97d", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/cd0f0946cf01cb676b734379d27069b16b59a444/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd0f0946cf01cb676b734379d27069b16b59a444/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=cd0f0946cf01cb676b734379d27069b16b59a444", "patch": "@@ -1198,87 +1198,6 @@ pub fn is_normalizable<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, param_env: ty::Para\n     })\n }\n \n-#[cfg(test)]\n-mod test {\n-    use super::{trim_multiline, without_block_comments};\n-\n-    #[test]\n-    fn test_trim_multiline_single_line() {\n-        assert_eq!(\"\", trim_multiline(\"\".into(), false));\n-        assert_eq!(\"...\", trim_multiline(\"...\".into(), false));\n-        assert_eq!(\"...\", trim_multiline(\"    ...\".into(), false));\n-        assert_eq!(\"...\", trim_multiline(\"\\t...\".into(), false));\n-        assert_eq!(\"...\", trim_multiline(\"\\t\\t...\".into(), false));\n-    }\n-\n-    #[test]\n-    #[rustfmt::skip]\n-    fn test_trim_multiline_block() {\n-        assert_eq!(\"\\\n-    if x {\n-        y\n-    } else {\n-        z\n-    }\", trim_multiline(\"    if x {\n-            y\n-        } else {\n-            z\n-        }\".into(), false));\n-        assert_eq!(\"\\\n-    if x {\n-    \\ty\n-    } else {\n-    \\tz\n-    }\", trim_multiline(\"    if x {\n-        \\ty\n-        } else {\n-        \\tz\n-        }\".into(), false));\n-    }\n-\n-    #[test]\n-    #[rustfmt::skip]\n-    fn test_trim_multiline_empty_line() {\n-        assert_eq!(\"\\\n-    if x {\n-        y\n-\n-    } else {\n-        z\n-    }\", trim_multiline(\"    if x {\n-            y\n-\n-        } else {\n-            z\n-        }\".into(), false));\n-    }\n-\n-    #[test]\n-    fn test_without_block_comments_lines_without_block_comments() {\n-        let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n-        println!(\"result: {:?}\", result);\n-        assert!(result.is_empty());\n-\n-        let result = without_block_comments(vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]);\n-        assert_eq!(result, vec![\"\", \"#[crate_type = \\\"lib\\\"]\", \"\"]);\n-\n-        let result = without_block_comments(vec![\"/* rust\", \"\", \"*/\"]);\n-        assert!(result.is_empty());\n-\n-        let result = without_block_comments(vec![\"/* one-line comment */\"]);\n-        assert!(result.is_empty());\n-\n-        let result = without_block_comments(vec![\"/* nested\", \"/* multi-line\", \"comment\", \"*/\", \"test\", \"*/\"]);\n-        assert!(result.is_empty());\n-\n-        let result = without_block_comments(vec![\"/* nested /* inline /* comment */ test */ */\"]);\n-        assert!(result.is_empty());\n-\n-        let result = without_block_comments(vec![\"foo\", \"bar\", \"baz\"]);\n-        assert_eq!(result, vec![\"foo\", \"bar\", \"baz\"]);\n-    }\n-}\n-\n pub fn match_def_path<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, did: DefId, syms: &[&str]) -> bool {\n     let path = cx.get_def_path(did);\n     path.len() == syms.len() && path.into_iter().zip(syms.iter()).all(|(a, &b)| a.as_str() == b)\n@@ -1426,3 +1345,84 @@ pub fn is_trait_impl_item(cx: &LateContext<'_, '_>, hir_id: HirId) -> bool {\n         false\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::{trim_multiline, without_block_comments};\n+\n+    #[test]\n+    fn test_trim_multiline_single_line() {\n+        assert_eq!(\"\", trim_multiline(\"\".into(), false, None));\n+        assert_eq!(\"...\", trim_multiline(\"...\".into(), false, None));\n+        assert_eq!(\"...\", trim_multiline(\"    ...\".into(), false, None));\n+        assert_eq!(\"...\", trim_multiline(\"\\t...\".into(), false, None));\n+        assert_eq!(\"...\", trim_multiline(\"\\t\\t...\".into(), false, None));\n+    }\n+\n+    #[test]\n+    #[rustfmt::skip]\n+    fn test_trim_multiline_block() {\n+        assert_eq!(\"\\\n+    if x {\n+        y\n+    } else {\n+        z\n+    }\", trim_multiline(\"    if x {\n+            y\n+        } else {\n+            z\n+        }\".into(), false, None));\n+        assert_eq!(\"\\\n+    if x {\n+    \\ty\n+    } else {\n+    \\tz\n+    }\", trim_multiline(\"    if x {\n+        \\ty\n+        } else {\n+        \\tz\n+        }\".into(), false, None));\n+    }\n+\n+    #[test]\n+    #[rustfmt::skip]\n+    fn test_trim_multiline_empty_line() {\n+        assert_eq!(\"\\\n+    if x {\n+        y\n+\n+    } else {\n+        z\n+    }\", trim_multiline(\"    if x {\n+            y\n+\n+        } else {\n+            z\n+        }\".into(), false, None));\n+    }\n+\n+    #[test]\n+    fn test_without_block_comments_lines_without_block_comments() {\n+        let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n+        println!(\"result: {:?}\", result);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]);\n+        assert_eq!(result, vec![\"\", \"#[crate_type = \\\"lib\\\"]\", \"\"]);\n+\n+        let result = without_block_comments(vec![\"/* rust\", \"\", \"*/\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"/* one-line comment */\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"/* nested\", \"/* multi-line\", \"comment\", \"*/\", \"test\", \"*/\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"/* nested /* inline /* comment */ test */ */\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"foo\", \"bar\", \"baz\"]);\n+        assert_eq!(result, vec![\"foo\", \"bar\", \"baz\"]);\n+    }\n+}"}]}