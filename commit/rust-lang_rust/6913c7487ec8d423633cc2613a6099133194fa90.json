{"sha": "6913c7487ec8d423633cc2613a6099133194fa90", "node_id": "C_kwDOAAsO6NoAKDY5MTNjNzQ4N2VjOGQ0MjM2MzNjYzI2MTNhNjA5OTEzMzE5NGZhOTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-19T09:27:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-19T09:27:55Z"}, "message": "Auto merge of #97114 - klensy:cursor-ref, r=petrochenkov\n\nuse CursorRef more\n\nThis allows skipping clone of `TreeAndSpacing` (and `TokenTree`).", "tree": {"sha": "3ab0c1ed10e74514be532dcb1bdc0832176f1332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ab0c1ed10e74514be532dcb1bdc0832176f1332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6913c7487ec8d423633cc2613a6099133194fa90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6913c7487ec8d423633cc2613a6099133194fa90", "html_url": "https://github.com/rust-lang/rust/commit/6913c7487ec8d423633cc2613a6099133194fa90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6913c7487ec8d423633cc2613a6099133194fa90/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67a9bcb31b85e87cc8bb327022632e48a0ca64a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a9bcb31b85e87cc8bb327022632e48a0ca64a8", "html_url": "https://github.com/rust-lang/rust/commit/67a9bcb31b85e87cc8bb327022632e48a0ca64a8"}, {"sha": "05f459ea82276044c0c006c10ea54e450aa574c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f459ea82276044c0c006c10ea54e450aa574c7", "html_url": "https://github.com/rust-lang/rust/commit/05f459ea82276044c0c006c10ea54e450aa574c7"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "b7091ea1864d7b1f0d2fdecd390783ba4d2e131d", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -552,7 +552,7 @@ impl MetaItemKind {\n     ) -> Option<MetaItemKind> {\n         match tokens.next() {\n             Some(TokenTree::Delimited(_, Delimiter::Invisible, inner_tokens)) => {\n-                MetaItemKind::name_value_from_tokens(&mut inner_tokens.trees())\n+                MetaItemKind::name_value_from_tokens(&mut inner_tokens.into_trees())\n             }\n             Some(TokenTree::Token(token)) => {\n                 Lit::from_token(&token).ok().map(MetaItemKind::NameValue)"}, {"sha": "23a039ec868121f4ff0555abfdf2754eb39764e4", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -442,8 +442,8 @@ impl TokenStream {\n         }\n     }\n \n-    pub fn trees(&self) -> Cursor {\n-        self.clone().into_trees()\n+    pub fn trees(&self) -> CursorRef<'_> {\n+        CursorRef::new(self)\n     }\n \n     pub fn into_trees(self) -> Cursor {\n@@ -538,12 +538,21 @@ pub struct CursorRef<'t> {\n }\n \n impl<'t> CursorRef<'t> {\n+    fn new(stream: &'t TokenStream) -> Self {\n+        CursorRef { stream, index: 0 }\n+    }\n+\n+    #[inline]\n     fn next_with_spacing(&mut self) -> Option<&'t TreeAndSpacing> {\n         self.stream.0.get(self.index).map(|tree| {\n             self.index += 1;\n             tree\n         })\n     }\n+\n+    pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {\n+        self.stream.0[self.index..].get(n).map(|(tree, _)| tree)\n+    }\n }\n \n impl<'t> Iterator for CursorRef<'t> {"}, {"sha": "ed0177a5b4da1e1e739e85642edaed6ccdd7b498", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -550,9 +550,9 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     fn print_tts(&mut self, tts: &TokenStream, convert_dollar_crate: bool) {\n         let mut iter = tts.trees().peekable();\n         while let Some(tt) = iter.next() {\n-            self.print_tt(&tt, convert_dollar_crate);\n+            self.print_tt(tt, convert_dollar_crate);\n             if let Some(next) = iter.peek() {\n-                if tt_prepend_space(next, &tt) {\n+                if tt_prepend_space(next, tt) {\n                     self.space();\n                 }\n             }"}, {"sha": "41683db80a314337ba2a0264cbc837f0e1cac81e", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -400,7 +400,7 @@ impl<'a> StripUnconfigured<'a> {\n \n         // Use the `#` in `#[cfg_attr(pred, attr)]` as the `#` token\n         // for `attr` when we expand it to `#[attr]`\n-        let mut orig_trees = orig_tokens.trees();\n+        let mut orig_trees = orig_tokens.into_trees();\n         let TokenTree::Token(pound_token @ Token { kind: TokenKind::Pound, .. }) = orig_trees.next().unwrap() else {\n             panic!(\"Bad tokens for attribute {:?}\", attr);\n         };"}, {"sha": "ceeb9baff4b56e5a58267dafabb6b7e68e0a3e3a", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -1,5 +1,5 @@\n use rustc_ast::token::{self, Delimiter};\n-use rustc_ast::tokenstream::{Cursor, TokenStream, TokenTree};\n+use rustc_ast::tokenstream::{CursorRef, TokenStream, TokenTree};\n use rustc_ast::{LitIntType, LitKind};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{Applicability, PResult};\n@@ -71,12 +71,14 @@ impl MetaVarExpr {\n }\n \n // Checks if there are any remaining tokens. For example, `${ignore(ident ... a b c ...)}`\n-fn check_trailing_token<'sess>(iter: &mut Cursor, sess: &'sess ParseSess) -> PResult<'sess, ()> {\n+fn check_trailing_token<'sess>(\n+    iter: &mut CursorRef<'_>,\n+    sess: &'sess ParseSess,\n+) -> PResult<'sess, ()> {\n     if let Some(tt) = iter.next() {\n-        let mut diag = sess.span_diagnostic.struct_span_err(\n-            tt.span(),\n-            &format!(\"unexpected token: {}\", pprust::tt_to_string(&tt)),\n-        );\n+        let mut diag = sess\n+            .span_diagnostic\n+            .struct_span_err(tt.span(), &format!(\"unexpected token: {}\", pprust::tt_to_string(tt)));\n         diag.span_note(tt.span(), \"meta-variable expression must not have trailing tokens\");\n         Err(diag)\n     } else {\n@@ -86,7 +88,7 @@ fn check_trailing_token<'sess>(iter: &mut Cursor, sess: &'sess ParseSess) -> PRe\n \n /// Parse a meta-variable `count` expression: `count(ident[, depth])`\n fn parse_count<'sess>(\n-    iter: &mut Cursor,\n+    iter: &mut CursorRef<'_>,\n     sess: &'sess ParseSess,\n     span: Span,\n ) -> PResult<'sess, MetaVarExpr> {\n@@ -97,7 +99,7 @@ fn parse_count<'sess>(\n \n /// Parses the depth used by index(depth) and length(depth).\n fn parse_depth<'sess>(\n-    iter: &mut Cursor,\n+    iter: &mut CursorRef<'_>,\n     sess: &'sess ParseSess,\n     span: Span,\n ) -> PResult<'sess, usize> {\n@@ -110,7 +112,7 @@ fn parse_depth<'sess>(\n             \"meta-variable expression depth must be a literal\"\n         ));\n     };\n-    if let Ok(lit_kind) = LitKind::from_lit_token(lit)\n+    if let Ok(lit_kind) = LitKind::from_lit_token(*lit)\n         && let LitKind::Int(n_u128, LitIntType::Unsuffixed) = lit_kind\n         && let Ok(n_usize) = usize::try_from(n_u128)\n     {\n@@ -124,15 +126,15 @@ fn parse_depth<'sess>(\n \n /// Parses an generic ident\n fn parse_ident<'sess>(\n-    iter: &mut Cursor,\n+    iter: &mut CursorRef<'_>,\n     sess: &'sess ParseSess,\n     span: Span,\n ) -> PResult<'sess, Ident> {\n     if let Some(tt) = iter.next() && let TokenTree::Token(token) = tt {\n         if let Some((elem, false)) = token.ident() {\n             return Ok(elem);\n         }\n-        let token_str = pprust::token_to_string(&token);\n+        let token_str = pprust::token_to_string(token);\n         let mut err = sess.span_diagnostic.struct_span_err(\n             span,\n             &format!(\"expected identifier, found `{}`\", &token_str)\n@@ -150,7 +152,7 @@ fn parse_ident<'sess>(\n \n /// Tries to move the iterator forward returning `true` if there is a comma. If not, then the\n /// iterator is not modified and the result is `false`.\n-fn try_eat_comma(iter: &mut Cursor) -> bool {\n+fn try_eat_comma(iter: &mut CursorRef<'_>) -> bool {\n     if let Some(TokenTree::Token(token::Token { kind: token::Comma, .. })) = iter.look_ahead(0) {\n         let _ = iter.next();\n         return true;"}, {"sha": "707cb73f097f87062f999dc9eb8cebbd476af86b", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -48,7 +48,7 @@ pub(super) fn parse(\n \n     // For each token tree in `input`, parse the token into a `self::TokenTree`, consuming\n     // additional trees if need be.\n-    let mut trees = input.trees();\n+    let mut trees = input.into_trees();\n     while let Some(tree) = trees.next() {\n         // Given the parsed tree, if there is a metavar and we are expecting matchers, actually\n         // parse out the matcher (i.e., in `$id:ident` this would parse the `:` and `ident`)."}, {"sha": "8da787927589522523d92cbe78945a4d6c397387", "filename": "compiler/rustc_expand/src/parse/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -61,7 +61,7 @@ fn bad_path_expr_1() {\n fn string_to_tts_macro() {\n     create_default_session_globals_then(|| {\n         let tts: Vec<_> =\n-            string_to_stream(\"macro_rules! zip (($a)=>($a))\".to_string()).trees().collect();\n+            string_to_stream(\"macro_rules! zip (($a)=>($a))\".to_string()).into_trees().collect();\n         let tts: &[TokenTree] = &tts[..];\n \n         match tts {\n@@ -293,7 +293,7 @@ fn ttdelim_span() {\n         .unwrap();\n \n         let tts: Vec<_> = match expr.kind {\n-            ast::ExprKind::MacCall(ref mac) => mac.args.inner_tokens().trees().collect(),\n+            ast::ExprKind::MacCall(ref mac) => mac.args.inner_tokens().into_trees().collect(),\n             _ => panic!(\"not a macro\"),\n         };\n "}, {"sha": "5b4c65a306b9509b1b2a4c6c9a4503753bb779c3", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -484,7 +484,7 @@ impl server::TokenStream for Rustc<'_, '_> {\n         tree.to_internal()\n     }\n     fn into_iter(&mut self, stream: Self::TokenStream) -> Self::TokenStreamIter {\n-        TokenStreamIter { cursor: stream.trees(), stack: vec![] }\n+        TokenStreamIter { cursor: stream.into_trees(), stack: vec![] }\n     }\n }\n "}, {"sha": "270532f8edeec44f4b361714109a467c1e0a17ed", "filename": "compiler/rustc_expand/src/tokenstream/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_expand%2Fsrc%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftokenstream%2Ftests.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -35,7 +35,7 @@ fn test_concat() {\n fn test_to_from_bijection() {\n     create_default_session_globals_then(|| {\n         let test_start = string_to_ts(\"foo::bar(baz)\");\n-        let test_end = test_start.trees().collect();\n+        let test_end = test_start.trees().cloned().collect();\n         assert_eq!(test_start, test_end)\n     })\n }"}, {"sha": "9fda5373fcc1c1bd576d79ffd1185388a765fbcf", "filename": "compiler/rustc_session/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_session%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/compiler%2Frustc_session%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Futils.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -108,7 +108,7 @@ impl<'a> FlattenNonterminals<'a> {\n         fn can_skip(stream: &TokenStream) -> bool {\n             stream.trees().all(|tree| match tree {\n                 TokenTree::Token(token) => !matches!(token.kind, token::Interpolated(_)),\n-                TokenTree::Delimited(_, _, inner) => can_skip(&inner),\n+                TokenTree::Delimited(_, _, inner) => can_skip(inner),\n             })\n         }\n "}, {"sha": "f4b2bcf281577711c89b53f27ea387551c897003", "filename": "src/tools/rustfmt/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6913c7487ec8d423633cc2613a6099133194fa90/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6913c7487ec8d423633cc2613a6099133194fa90/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs?ref=6913c7487ec8d423633cc2613a6099133194fa90", "patch": "@@ -226,7 +226,7 @@ fn rewrite_macro_inner(\n     }\n     // Format well-known macros which cannot be parsed as a valid AST.\n     if macro_name == \"lazy_static!\" && !has_comment {\n-        if let success @ Some(..) = format_lazy_static(context, shape, ts.trees().collect()) {\n+        if let success @ Some(..) = format_lazy_static(context, shape, ts.clone()) {\n             return success;\n         }\n     }\n@@ -855,7 +855,7 @@ impl MacroArgParser {\n \n     /// Returns a collection of parsed macro def's arguments.\n     fn parse(mut self, tokens: TokenStream) -> Option<Vec<ParsedMacroArg>> {\n-        let mut iter = tokens.trees();\n+        let mut iter = tokens.into_trees();\n \n         while let Some(tok) = iter.next() {\n             match tok {"}]}