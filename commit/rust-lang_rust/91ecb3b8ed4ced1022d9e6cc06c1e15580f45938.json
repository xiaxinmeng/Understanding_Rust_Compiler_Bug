{"sha": "91ecb3b8ed4ced1022d9e6cc06c1e15580f45938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZWNiM2I4ZWQ0Y2VkMTAyMmQ5ZTZjYzA2YzFlMTU1ODBmNDU5Mzg=", "commit": {"author": {"name": "Mikko Rantanen", "email": "jubjub@jubjubnest.net", "date": "2018-01-07T03:58:53Z"}, "committer": {"name": "Mikko Rantanen", "email": "jubjub@jubjubnest.net", "date": "2018-01-07T03:58:53Z"}, "message": "Implement nightly libsyntax changes", "tree": {"sha": "fdd88d67b5d2ff53c019b2bdb1f92c7a1293bf92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdd88d67b5d2ff53c019b2bdb1f92c7a1293bf92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ecb3b8ed4ced1022d9e6cc06c1e15580f45938", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJaUZr9AAoJELaA6c4QpVeY5F4H/AsRGbbT4jY433XViPITJyOk\nm0+CUem8EKMPPlGEN6QXUDnZ7GEpAeTBiamNR3IG+EG/jCsLVXKPNkkBq41UqCv7\nMfgY5u5XKblF6HzclMc+Xba4PIxj5WwO9E6hEOnY237qypG0dDv/rGVOYr8o8xuF\niGv0yIZHhEMnCdbjHdDq7nxmYBwlyo7F6q5HBuc+4YB1GUu2JDVv84JpDWrZP96z\naTcxdCDgIC1C0hLYDe10rc0ZhjU2OSmmGEqdfpqo5tf0+zhhY0zyiZHW44CDL7pG\nBT4fOXzPJ7e5DhwhwPbbpVwEZcj070fMVEOs76lHZRD9qaahiOLUPWby0yJISXc=\n=D6t5\n-----END PGP SIGNATURE-----", "payload": "tree fdd88d67b5d2ff53c019b2bdb1f92c7a1293bf92\nparent 5815681b38af9af5b1daa4ae41d9d40c7d3dd115\nauthor Mikko Rantanen <jubjub@jubjubnest.net> 1515297533 +0200\ncommitter Mikko Rantanen <jubjub@jubjubnest.net> 1515297533 +0200\n\nImplement nightly libsyntax changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ecb3b8ed4ced1022d9e6cc06c1e15580f45938", "html_url": "https://github.com/rust-lang/rust/commit/91ecb3b8ed4ced1022d9e6cc06c1e15580f45938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ecb3b8ed4ced1022d9e6cc06c1e15580f45938/comments", "author": {"login": "Rantanen", "id": 385385, "node_id": "MDQ6VXNlcjM4NTM4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/385385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rantanen", "html_url": "https://github.com/Rantanen", "followers_url": "https://api.github.com/users/Rantanen/followers", "following_url": "https://api.github.com/users/Rantanen/following{/other_user}", "gists_url": "https://api.github.com/users/Rantanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rantanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rantanen/subscriptions", "organizations_url": "https://api.github.com/users/Rantanen/orgs", "repos_url": "https://api.github.com/users/Rantanen/repos", "events_url": "https://api.github.com/users/Rantanen/events{/privacy}", "received_events_url": "https://api.github.com/users/Rantanen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rantanen", "id": 385385, "node_id": "MDQ6VXNlcjM4NTM4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/385385?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rantanen", "html_url": "https://github.com/Rantanen", "followers_url": "https://api.github.com/users/Rantanen/followers", "following_url": "https://api.github.com/users/Rantanen/following{/other_user}", "gists_url": "https://api.github.com/users/Rantanen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rantanen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rantanen/subscriptions", "organizations_url": "https://api.github.com/users/Rantanen/orgs", "repos_url": "https://api.github.com/users/Rantanen/repos", "events_url": "https://api.github.com/users/Rantanen/events{/privacy}", "received_events_url": "https://api.github.com/users/Rantanen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5815681b38af9af5b1daa4ae41d9d40c7d3dd115", "url": "https://api.github.com/repos/rust-lang/rust/commits/5815681b38af9af5b1daa4ae41d9d40c7d3dd115", "html_url": "https://github.com/rust-lang/rust/commit/5815681b38af9af5b1daa4ae41d9d40c7d3dd115"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "3a1ecfbefc783cde927904f8ed5efb54ca2e67e4", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91ecb3b8ed4ced1022d9e6cc06c1e15580f45938/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ecb3b8ed4ced1022d9e6cc06c1e15580f45938/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=91ecb3b8ed4ced1022d9e6cc06c1e15580f45938", "patch": "@@ -69,8 +69,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutexAtomic {\n                         atomic_name\n                     );\n                     match mutex_param.sty {\n-                        ty::TyUint(t) if t != ast::UintTy::Us => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n-                        ty::TyInt(t) if t != ast::IntTy::Is => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n+                        ty::TyUint(t) if t != ast::UintTy::Usize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n+                        ty::TyInt(t) if t != ast::IntTy::Isize => span_lint(cx, MUTEX_INTEGER, expr.span, &msg),\n                         _ => span_lint(cx, MUTEX_ATOMIC, expr.span, &msg),\n                     };\n                 }"}, {"sha": "9b58062d7de38c2bf14c32751f514a4c5a51c908", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91ecb3b8ed4ced1022d9e6cc06c1e15580f45938/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ecb3b8ed4ced1022d9e6cc06c1e15580f45938/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=91ecb3b8ed4ced1022d9e6cc06c1e15580f45938", "patch": "@@ -541,15 +541,15 @@ declare_lint! {\n fn int_ty_to_nbits(typ: Ty, tcx: TyCtxt) -> u64 {\n     match typ.sty {\n         ty::TyInt(i) => match i {\n-            IntTy::Is => tcx.data_layout.pointer_size.bits(),\n+            IntTy::Isize => tcx.data_layout.pointer_size.bits(),\n             IntTy::I8 => 8,\n             IntTy::I16 => 16,\n             IntTy::I32 => 32,\n             IntTy::I64 => 64,\n             IntTy::I128 => 128,\n         },\n         ty::TyUint(i) => match i {\n-            UintTy::Us => tcx.data_layout.pointer_size.bits(),\n+            UintTy::Usize => tcx.data_layout.pointer_size.bits(),\n             UintTy::U8 => 8,\n             UintTy::U16 => 16,\n             UintTy::U32 => 32,\n@@ -562,7 +562,7 @@ fn int_ty_to_nbits(typ: Ty, tcx: TyCtxt) -> u64 {\n \n fn is_isize_or_usize(typ: Ty) -> bool {\n     match typ.sty {\n-        ty::TyInt(IntTy::Is) | ty::TyUint(UintTy::Us) => true,\n+        ty::TyInt(IntTy::Isize) | ty::TyUint(UintTy::Usize) => true,\n         _ => false,\n     }\n }\n@@ -1151,31 +1151,31 @@ fn detect_extreme_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -\n \n     let which = match (&ty.sty, cv.val) {\n         (&ty::TyBool, Bool(false)) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is32(::std::i32::MIN)))) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is64(::std::i64::MIN)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is32(::std::i32::MIN)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is64(::std::i64::MIN)))) |\n         (&ty::TyInt(IntTy::I8), Integral(I8(::std::i8::MIN))) |\n         (&ty::TyInt(IntTy::I16), Integral(I16(::std::i16::MIN))) |\n         (&ty::TyInt(IntTy::I32), Integral(I32(::std::i32::MIN))) |\n         (&ty::TyInt(IntTy::I64), Integral(I64(::std::i64::MIN))) |\n         (&ty::TyInt(IntTy::I128), Integral(I128(::std::i128::MIN))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us32(::std::u32::MIN)))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us64(::std::u64::MIN)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us32(::std::u32::MIN)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us64(::std::u64::MIN)))) |\n         (&ty::TyUint(UintTy::U8), Integral(U8(::std::u8::MIN))) |\n         (&ty::TyUint(UintTy::U16), Integral(U16(::std::u16::MIN))) |\n         (&ty::TyUint(UintTy::U32), Integral(U32(::std::u32::MIN))) |\n         (&ty::TyUint(UintTy::U64), Integral(U64(::std::u64::MIN))) |\n         (&ty::TyUint(UintTy::U128), Integral(U128(::std::u128::MIN))) => Minimum,\n \n         (&ty::TyBool, Bool(true)) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is32(::std::i32::MAX)))) |\n-        (&ty::TyInt(IntTy::Is), Integral(Isize(Is64(::std::i64::MAX)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is32(::std::i32::MAX)))) |\n+        (&ty::TyInt(IntTy::Isize), Integral(Isize(Is64(::std::i64::MAX)))) |\n         (&ty::TyInt(IntTy::I8), Integral(I8(::std::i8::MAX))) |\n         (&ty::TyInt(IntTy::I16), Integral(I16(::std::i16::MAX))) |\n         (&ty::TyInt(IntTy::I32), Integral(I32(::std::i32::MAX))) |\n         (&ty::TyInt(IntTy::I64), Integral(I64(::std::i64::MAX))) |\n         (&ty::TyInt(IntTy::I128), Integral(I128(::std::i128::MAX))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us32(::std::u32::MAX)))) |\n-        (&ty::TyUint(UintTy::Us), Integral(Usize(Us64(::std::u64::MAX)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us32(::std::u32::MAX)))) |\n+        (&ty::TyUint(UintTy::Usize), Integral(Usize(Us64(::std::u64::MAX)))) |\n         (&ty::TyUint(UintTy::U8), Integral(U8(::std::u8::MAX))) |\n         (&ty::TyUint(UintTy::U16), Integral(U16(::std::u16::MAX))) |\n         (&ty::TyUint(UintTy::U32), Integral(U32(::std::u32::MAX))) |\n@@ -1329,7 +1329,7 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n                     FullInt::S(i128::from(i64::max_value())),\n                 ),\n                 IntTy::I128 => (FullInt::S(i128::min_value() as i128), FullInt::S(i128::max_value() as i128)),\n-                IntTy::Is => (FullInt::S(isize::min_value() as i128), FullInt::S(isize::max_value() as i128)),\n+                IntTy::Isize => (FullInt::S(isize::min_value() as i128), FullInt::S(isize::max_value() as i128)),\n             }),\n             ty::TyUint(uint_ty) => Some(match uint_ty {\n                 UintTy::U8 => (FullInt::U(u128::from(u8::min_value())), FullInt::U(u128::from(u8::max_value()))),\n@@ -1346,7 +1346,7 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n                     FullInt::U(u128::from(u64::max_value())),\n                 ),\n                 UintTy::U128 => (FullInt::U(u128::min_value() as u128), FullInt::U(u128::max_value() as u128)),\n-                UintTy::Us => (FullInt::U(usize::min_value() as u128), FullInt::U(usize::max_value() as u128)),\n+                UintTy::Usize => (FullInt::U(usize::min_value() as u128), FullInt::U(usize::max_value() as u128)),\n             }),\n             _ => None,\n         }"}]}