{"sha": "d5947d9d487d15eea928ee687286651f6a98a4bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OTQ3ZDlkNDg3ZDE1ZWVhOTI4ZWU2ODcyODY2NTFmNmE5OGE0YmY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-22T17:59:01Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-22T18:03:29Z"}, "message": "Clarify what the outline test module is for", "tree": {"sha": "8d584cde436b0d18191cdfd606a44976853abc28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d584cde436b0d18191cdfd606a44976853abc28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5947d9d487d15eea928ee687286651f6a98a4bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5947d9d487d15eea928ee687286651f6a98a4bf", "html_url": "https://github.com/rust-lang/rust/commit/d5947d9d487d15eea928ee687286651f6a98a4bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5947d9d487d15eea928ee687286651f6a98a4bf/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d696b9c9eb206f69556d7f933c5a7baf5ae3c77", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d696b9c9eb206f69556d7f933c5a7baf5ae3c77", "html_url": "https://github.com/rust-lang/rust/commit/2d696b9c9eb206f69556d7f933c5a7baf5ae3c77"}], "stats": {"total": 234, "additions": 115, "deletions": 119}, "files": [{"sha": "c7cf5e3e4b14ca82c4d3af9da86774d504cd3bbf", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=d5947d9d487d15eea928ee687286651f6a98a4bf", "patch": "@@ -44,3 +44,77 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n \n     Some(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+\n+    use crate::tests::check_edit;\n+\n+    #[test]\n+    fn default_completion_edit() {\n+        check_edit(\n+            \"..Default::default()\",\n+            r#\"\n+//- minicore: default\n+struct Struct { foo: u32, bar: usize }\n+\n+impl Default for Struct {\n+    fn default() -> Self {}\n+}\n+\n+fn foo() {\n+    let other = Struct {\n+        foo: 5,\n+        .$0\n+    };\n+}\n+\"#,\n+            r#\"\n+struct Struct { foo: u32, bar: usize }\n+\n+impl Default for Struct {\n+    fn default() -> Self {}\n+}\n+\n+fn foo() {\n+    let other = Struct {\n+        foo: 5,\n+        ..Default::default()\n+    };\n+}\n+\"#,\n+        );\n+        check_edit(\n+            \"..Default::default()\",\n+            r#\"\n+//- minicore: default\n+struct Struct { foo: u32, bar: usize }\n+\n+impl Default for Struct {\n+    fn default() -> Self {}\n+}\n+\n+fn foo() {\n+    let other = Struct {\n+        foo: 5,\n+        $0\n+    };\n+}\n+\"#,\n+            r#\"\n+struct Struct { foo: u32, bar: usize }\n+\n+impl Default for Struct {\n+    fn default() -> Self {}\n+}\n+\n+fn foo() {\n+    let other = Struct {\n+        foo: 5,\n+        ..Default::default()\n+    };\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "6237a6ef1ef9ab8528a74fe9f2198212f973253e", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=d5947d9d487d15eea928ee687286651f6a98a4bf", "patch": "@@ -108,10 +108,4 @@ mod tests {\n             \"#]],\n         );\n     }\n-\n-    #[test]\n-    fn should_not_complete_snippets_in_path() {\n-        check(r#\"fn foo(x: i32) { ::foo$0 }\"#, expect![[\"\"]]);\n-        check(r#\"fn foo(x: i32) { ::$0 }\"#, expect![[\"\"]]);\n-    }\n }"}, {"sha": "3713be0a17690dafaca00c785fe81b7a7256966e", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=d5947d9d487d15eea928ee687286651f6a98a4bf", "patch": "@@ -299,29 +299,6 @@ mod tests {\n         expect.assert_eq(&actual)\n     }\n \n-    #[test]\n-    fn name_ref_function_type_const() {\n-        check(\n-            r#\"\n-trait Test {\n-    type TestType;\n-    const TEST_CONST: u16;\n-    fn test();\n-}\n-struct T;\n-\n-impl Test for T {\n-    t$0\n-}\n-\"#,\n-            expect![[\"\n-ta type TestType = \\n\\\n-ct const TEST_CONST: u16 = \\n\\\n-fn fn test()\n-\"]],\n-        );\n-    }\n-\n     #[test]\n     fn no_completion_inside_fn() {\n         check(\n@@ -572,27 +549,6 @@ impl Test for T {\n         );\n     }\n \n-    #[test]\n-    fn hide_implemented_fn() {\n-        check(\n-            r#\"\n-trait Test {\n-    fn foo();\n-    fn foo_bar();\n-}\n-struct T;\n-\n-impl Test for T {\n-    fn foo() {}\n-    fn f$0\n-}\n-\"#,\n-            expect![[r#\"\n-                fn fn foo_bar()\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn generic_fn() {\n         check_edit("}, {"sha": "cd812b617ea77eab3dc2ac1e3c0e5578b3c8ae75", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=d5947d9d487d15eea928ee687286651f6a98a4bf", "patch": "@@ -3,6 +3,9 @@\n //! Most tests live in this module or its submodules unless for very specific completions like\n //! `attributes` or `lifetimes` where the completed concept is a distinct thing.\n //! Notable examples for completions that are being tested in this module's submodule are paths.\n+//! Another exception are `check_edit` tests which usually live in the completion modules themselves,\n+//! as the main purpose of this test module here is to give the developer an overview of whats being\n+//! completed where, not how.\n \n mod attribute;\n mod fn_param;"}, {"sha": "1c1915ffbdf7f18741bf60218b44895842e8d0c3", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=d5947d9d487d15eea928ee687286651f6a98a4bf", "patch": "@@ -210,3 +210,40 @@ fn in_trait_assoc_item_list() {\n         \"##]],\n     );\n }\n+\n+#[test]\n+fn in_trait_impl_assoc_item_list() {\n+    check(\n+        r#\"\n+trait Test {\n+    type Type0;\n+    type Type1;\n+    const CONST0: ();\n+    const CONST1: ();\n+    fn function0();\n+    fn function1();\n+}\n+\n+impl Test for () {\n+    type Type0 = ();\n+    const CONST0: () = ();\n+    fn function0() {}\n+    $0\n+}\n+\"#,\n+        expect![[r##\"\n+            kw pub(crate)\n+            kw pub\n+            kw unsafe\n+            kw fn\n+            kw const\n+            kw type\n+            kw self\n+            kw super\n+            kw crate\n+            md module\n+            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n+        \"##]],\n+    );\n+}"}, {"sha": "db3e3153078d534bdb323959be0681d5ee47c52f", "filename": "crates/ide_completion/src/tests/record.rs", "status": "modified", "additions": 1, "deletions": 69, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5947d9d487d15eea928ee687286651f6a98a4bf/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Frecord.rs?ref=d5947d9d487d15eea928ee687286651f6a98a4bf", "patch": "@@ -1,6 +1,6 @@\n use expect_test::{expect, Expect};\n \n-use crate::tests::{check_edit, completion_list};\n+use crate::tests::completion_list;\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(ra_fixture);\n@@ -162,71 +162,3 @@ fn main() {\n         \"#]],\n     );\n }\n-\n-#[test]\n-fn default_completion_edit() {\n-    check_edit(\n-        \"..Default::default()\",\n-        r#\"\n-//- minicore: default\n-struct Struct { foo: u32, bar: usize }\n-\n-impl Default for Struct {\n-    fn default() -> Self {}\n-}\n-\n-fn foo() {\n-    let other = Struct {\n-        foo: 5,\n-        .$0\n-    };\n-}\n-\"#,\n-        r#\"\n-struct Struct { foo: u32, bar: usize }\n-\n-impl Default for Struct {\n-    fn default() -> Self {}\n-}\n-\n-fn foo() {\n-    let other = Struct {\n-        foo: 5,\n-        ..Default::default()\n-    };\n-}\n-\"#,\n-    );\n-    check_edit(\n-        \"..Default::default()\",\n-        r#\"\n-//- minicore: default\n-struct Struct { foo: u32, bar: usize }\n-\n-impl Default for Struct {\n-    fn default() -> Self {}\n-}\n-\n-fn foo() {\n-    let other = Struct {\n-        foo: 5,\n-        $0\n-    };\n-}\n-\"#,\n-        r#\"\n-struct Struct { foo: u32, bar: usize }\n-\n-impl Default for Struct {\n-    fn default() -> Self {}\n-}\n-\n-fn foo() {\n-    let other = Struct {\n-        foo: 5,\n-        ..Default::default()\n-    };\n-}\n-\"#,\n-    );\n-}"}]}