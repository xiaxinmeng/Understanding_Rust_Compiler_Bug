{"sha": "97a6b0935bad25833d2b48352a3f4212c26c9898", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YTZiMDkzNWJhZDI1ODMzZDJiNDgzNTJhM2Y0MjEyYzI2Yzk4OTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-08T22:56:17Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-08T22:56:17Z"}, "message": "More fold caches, cut rustc compile time by 60% again.", "tree": {"sha": "31a31e297a3925967aa423939d6e401a1850987a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a31e297a3925967aa423939d6e401a1850987a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97a6b0935bad25833d2b48352a3f4212c26c9898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97a6b0935bad25833d2b48352a3f4212c26c9898", "html_url": "https://github.com/rust-lang/rust/commit/97a6b0935bad25833d2b48352a3f4212c26c9898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97a6b0935bad25833d2b48352a3f4212c26c9898/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1e2c379cb2bde895e8ed99494651fa577268575", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1e2c379cb2bde895e8ed99494651fa577268575", "html_url": "https://github.com/rust-lang/rust/commit/f1e2c379cb2bde895e8ed99494651fa577268575"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "eb987c9dead9fe1f2fb2b5efa64c6867f38c64d4", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/97a6b0935bad25833d2b48352a3f4212c26c9898/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/97a6b0935bad25833d2b48352a3f4212c26c9898/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=97a6b0935bad25833d2b48352a3f4212c26c9898", "patch": "@@ -188,6 +188,12 @@ type ctxt =\n       ctxt_curr_path: Ast.name_component Stack.t;\n \n       ctxt_rty_cache: (Ast.ty,Il.referent_ty) Hashtbl.t;\n+\n+      ctxt_type_effect_cache: (Ast.ty,Ast.effect) Hashtbl.t;\n+      ctxt_type_points_to_heap_cache: (Ast.ty,bool) Hashtbl.t;\n+      ctxt_type_is_structured_cache: (Ast.ty,bool) Hashtbl.t;\n+      ctxt_type_contains_chan_cache: (Ast.ty,bool) Hashtbl.t;\n+      ctxt_n_used_type_parameters_cache: (Ast.ty,int) Hashtbl.t;\n     }\n ;;\n \n@@ -277,7 +283,13 @@ let new_ctxt sess abi crate =\n     ctxt_main_name = crate.Ast.crate_main;\n \n     ctxt_curr_path = Stack.create ();\n-    ctxt_rty_cache = Hashtbl.create 1024;\n+\n+    ctxt_rty_cache = Hashtbl.create 0;\n+    ctxt_type_effect_cache = Hashtbl.create 0;\n+    ctxt_type_points_to_heap_cache = Hashtbl.create 0;\n+    ctxt_type_is_structured_cache = Hashtbl.create 0;\n+    ctxt_type_contains_chan_cache = Hashtbl.create 0;\n+    ctxt_n_used_type_parameters_cache = Hashtbl.create 0;\n   }\n ;;\n \n@@ -1110,7 +1122,8 @@ let type_is_structured (cx:ctxt) (t:Ast.ty) : bool =\n              }\n \n   in\n-    fold_ty cx fold t\n+    htab_search_or_add cx.ctxt_type_is_structured_cache t\n+      (fun _ -> fold_ty cx fold t)\n ;;\n \n \n@@ -1128,7 +1141,8 @@ let type_points_to_heap (cx:ctxt) (t:Ast.ty) : bool =\n                  ty_fold_task = (fun _ -> true);\n              }\n   in\n-    fold_ty cx fold t\n+    htab_search_or_add cx.ctxt_type_points_to_heap_cache t\n+      (fun _ -> fold_ty cx fold t)\n ;;\n \n (* Effect analysis. *)\n@@ -1152,7 +1166,8 @@ let type_effect (cx:ctxt) (t:Ast.ty) : Ast.effect =\n   let fold_mutable _ = Ast.STATE in\n   let fold = associative_binary_op_ty_fold Ast.PURE lower_effect_of in\n   let fold = { fold with ty_fold_mutable = fold_mutable } in\n-    fold_ty cx fold t\n+    htab_search_or_add cx.ctxt_type_effect_cache t\n+      (fun _ -> fold_ty cx fold t)\n ;;\n \n let type_has_state (cx:ctxt) (t:Ast.ty) : bool =\n@@ -1176,7 +1191,8 @@ let type_contains_chan (cx:ctxt) (t:Ast.ty) : bool =\n   let fold_chan _ = true in\n   let fold = ty_fold_bool_or false in\n   let fold = { fold with ty_fold_chan = fold_chan } in\n-    fold_ty cx fold t\n+    htab_search_or_add cx.ctxt_type_contains_chan_cache t\n+      (fun _ -> fold_ty cx fold t)\n ;;\n \n \n@@ -1214,7 +1230,8 @@ let n_used_type_params (cx:ctxt) t =\n   let fold_param (i,_) = i+1 in\n   let fold = ty_fold_int_max 0 in\n   let fold = { fold with ty_fold_param = fold_param } in\n-  fold_ty cx fold t\n+  htab_search_or_add cx.ctxt_n_used_type_parameters_cache t\n+    (fun _ -> fold_ty cx fold t)\n ;;\n \n let check_concrete params thing ="}, {"sha": "fe61ece016f66dfcb2721dff2f495abd545ec1ec", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97a6b0935bad25833d2b48352a3f4212c26c9898/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/97a6b0935bad25833d2b48352a3f4212c26c9898/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=97a6b0935bad25833d2b48352a3f4212c26c9898", "patch": "@@ -595,13 +595,16 @@ let trans_visitor\n         (ty, queue_to_arr q)\n   in\n \n+  let has_parametric_types_cache = Hashtbl.create 0 in\n   let has_parametric_types (t:Ast.ty) : bool =\n     let base = ty_fold_bool_or false in\n     let ty_fold_param _ =\n       true\n     in\n     let fold = { base with ty_fold_param = ty_fold_param } in\n-      fold_ty cx fold t\n+      htab_search_or_add\n+        has_parametric_types_cache t\n+        (fun _ -> fold_ty cx fold t)\n   in\n \n   let rec calculate_sz (ty_params:Il.cell) (size:size) : Il.operand ="}]}