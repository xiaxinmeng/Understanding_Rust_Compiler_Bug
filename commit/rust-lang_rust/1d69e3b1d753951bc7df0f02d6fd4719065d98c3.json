{"sha": "1d69e3b1d753951bc7df0f02d6fd4719065d98c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjllM2IxZDc1Mzk1MWJjN2RmMGYwMmQ2ZmQ0NzE5MDY1ZDk4YzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-05T09:09:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-05T09:09:17Z"}, "message": "Auto merge of #75124 - nnethercote:clean-up-rustdoc-main, r=oli-obk\n\nClean up rustdoc's `main()`\n\nIt can be simplified and made more similar to rustc's `main()`.\n\nr? @oli-obk", "tree": {"sha": "7321a1b2eb33029adb879c037cf208358895ddd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7321a1b2eb33029adb879c037cf208358895ddd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d69e3b1d753951bc7df0f02d6fd4719065d98c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d69e3b1d753951bc7df0f02d6fd4719065d98c3", "html_url": "https://github.com/rust-lang/rust/commit/1d69e3b1d753951bc7df0f02d6fd4719065d98c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d69e3b1d753951bc7df0f02d6fd4719065d98c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8", "html_url": "https://github.com/rust-lang/rust/commit/7f8ff84b510e3ff04865cfdd5ef95e677227e0c8"}, {"sha": "5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec", "html_url": "https://github.com/rust-lang/rust/commit/5f8a11279d75dc0078edbd8fa9d1fd1184c3f4ec"}], "stats": {"total": 126, "additions": 53, "deletions": 73}, "files": [{"sha": "ad30f5eda4d69f93cb797c362cf648e9534b988f", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d69e3b1d753951bc7df0f02d6fd4719065d98c3/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d69e3b1d753951bc7df0f02d6fd4719065d98c3/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=1d69e3b1d753951bc7df0f02d6fd4719065d98c3", "patch": "@@ -17,7 +17,6 @@ use rustc_session::early_error;\n use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n use rustc_session::{DiagnosticOutput, Session};\n-use rustc_span::edition;\n use rustc_span::source_map::{FileLoader, FileName};\n use std::path::PathBuf;\n use std::result;\n@@ -208,13 +207,3 @@ pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R\n         || create_compiler_and_run(config, f),\n     )\n }\n-\n-pub fn setup_callbacks_and_run_in_default_thread_pool_with_globals<R: Send>(\n-    edition: edition::Edition,\n-    f: impl FnOnce() -> R + Send,\n-) -> R {\n-    // the 1 here is duplicating code in config.opts.debugging_opts.threads\n-    // which also defaults to 1; it ultimately doesn't matter as the default\n-    // isn't threaded, and just ignores this parameter\n-    util::setup_callbacks_and_run_in_thread_pool_with_globals(edition, 1, &None, f)\n-}"}, {"sha": "d5f7ddcbdfbde6d7547aa280b0e272ed6feca84f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 51, "deletions": 60, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/1d69e3b1d753951bc7df0f02d6fd4719065d98c3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d69e3b1d753951bc7df0f02d6fd4719065d98c3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1d69e3b1d753951bc7df0f02d6fd4719065d98c3", "patch": "@@ -47,9 +47,9 @@ extern crate tracing;\n \n use std::default::Default;\n use std::env;\n-use std::panic;\n use std::process;\n \n+use rustc_errors::ErrorReported;\n use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGroup};\n use rustc_session::getopts;\n use rustc_session::{early_error, early_warn};\n@@ -82,22 +82,14 @@ struct Output {\n }\n \n pub fn main() {\n-    let thread_stack_size: usize = if cfg!(target_os = \"haiku\") {\n-        16_000_000 // 16MB on Haiku\n-    } else {\n-        32_000_000 // 32MB on other platforms\n-    };\n     rustc_driver::set_sigpipe_handler();\n     rustc_driver::install_ice_hook();\n     rustc_driver::init_env_logger(\"RUSTDOC_LOG\");\n-\n-    let res = std::thread::Builder::new()\n-        .stack_size(thread_stack_size)\n-        .spawn(move || get_args().map(|args| main_args(&args)).unwrap_or(1))\n-        .unwrap()\n-        .join()\n-        .unwrap_or(rustc_driver::EXIT_FAILURE);\n-    process::exit(res);\n+    let exit_code = rustc_driver::catch_with_exit_code(|| match get_args() {\n+        Some(args) => main_args(&args),\n+        _ => Err(ErrorReported),\n+    });\n+    process::exit(exit_code);\n }\n \n fn get_args() -> Option<Vec<String>> {\n@@ -418,7 +410,10 @@ fn usage(argv0: &str) {\n     println!(\"{}\", options.usage(&format!(\"{} [options] <input>\", argv0)));\n }\n \n-fn main_args(args: &[String]) -> i32 {\n+/// A result type used by several functions under `main()`.\n+type MainResult = Result<(), ErrorReported>;\n+\n+fn main_args(args: &[String]) -> MainResult {\n     let mut options = getopts::Options::new();\n     for option in opts() {\n         (option.apply)(&mut options);\n@@ -429,24 +424,27 @@ fn main_args(args: &[String]) -> i32 {\n             early_error(ErrorOutputType::default(), &err.to_string());\n         }\n     };\n+\n+    // Note that we discard any distinction between different non-zero exit\n+    // codes from `from_matches` here.\n     let options = match config::Options::from_matches(&matches) {\n         Ok(opts) => opts,\n-        Err(code) => return code,\n+        Err(code) => return if code == 0 { Ok(()) } else { Err(ErrorReported) },\n     };\n-    rustc_interface::interface::setup_callbacks_and_run_in_default_thread_pool_with_globals(\n+    rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals(\n         options.edition,\n+        1, // this runs single-threaded, even in a parallel compiler\n+        &None,\n         move || main_options(options),\n     )\n }\n \n-fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> i32 {\n+fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> MainResult {\n     match res {\n-        Ok(()) => 0,\n+        Ok(()) => Ok(()),\n         Err(err) => {\n-            if !err.is_empty() {\n-                diag.struct_err(&err).emit();\n-            }\n-            1\n+            diag.struct_err(&err).emit();\n+            Err(ErrorReported)\n         }\n     }\n }\n@@ -457,9 +455,9 @@ fn run_renderer<T: formats::FormatRenderer>(\n     render_info: config::RenderInfo,\n     diag: &rustc_errors::Handler,\n     edition: rustc_span::edition::Edition,\n-) -> i32 {\n+) -> MainResult {\n     match formats::run_format::<T>(krate, renderopts, render_info, &diag, edition) {\n-        Ok(_) => rustc_driver::EXIT_SUCCESS,\n+        Ok(_) => Ok(()),\n         Err(e) => {\n             let mut msg = diag.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n             let file = e.file.display().to_string();\n@@ -468,17 +466,17 @@ fn run_renderer<T: formats::FormatRenderer>(\n             } else {\n                 msg.note(&format!(\"failed to create or modify \\\"{}\\\"\", file)).emit()\n             }\n-            rustc_driver::EXIT_FAILURE\n+            Err(ErrorReported)\n         }\n     }\n }\n \n-fn main_options(options: config::Options) -> i32 {\n+fn main_options(options: config::Options) -> MainResult {\n     let diag = core::new_handler(options.error_format, None, &options.debugging_options);\n \n     match (options.should_test, options.markdown_input()) {\n         (true, true) => return wrap_return(&diag, markdown::test(options)),\n-        (true, false) => return wrap_return(&diag, test::run(options)),\n+        (true, false) => return test::run(options),\n         (false, true) => {\n             return wrap_return(\n                 &diag,\n@@ -500,44 +498,37 @@ fn main_options(options: config::Options) -> i32 {\n     // compiler all the way through the analysis passes. The rustdoc output is\n     // then generated from the cleaned AST of the crate. This runs all the\n     // plug/cleaning passes.\n-    let result = rustc_driver::catch_fatal_errors(move || {\n-        let crate_name = options.crate_name.clone();\n-        let crate_version = options.crate_version.clone();\n-        let output_format = options.output_format;\n-        let (mut krate, renderinfo, renderopts) = core::run_core(options);\n+    let crate_name = options.crate_name.clone();\n+    let crate_version = options.crate_version.clone();\n+    let output_format = options.output_format;\n+    let (mut krate, renderinfo, renderopts) = core::run_core(options);\n \n-        info!(\"finished with rustc\");\n+    info!(\"finished with rustc\");\n \n-        if let Some(name) = crate_name {\n-            krate.name = name\n-        }\n+    if let Some(name) = crate_name {\n+        krate.name = name\n+    }\n \n-        krate.version = crate_version;\n+    krate.version = crate_version;\n \n-        let out = Output { krate, renderinfo, renderopts };\n+    let out = Output { krate, renderinfo, renderopts };\n \n-        if show_coverage {\n-            // if we ran coverage, bail early, we don't need to also generate docs at this point\n-            // (also we didn't load in any of the useful passes)\n-            return rustc_driver::EXIT_SUCCESS;\n-        }\n+    if show_coverage {\n+        // if we ran coverage, bail early, we don't need to also generate docs at this point\n+        // (also we didn't load in any of the useful passes)\n+        return Ok(());\n+    }\n \n-        let Output { krate, renderinfo, renderopts } = out;\n-        info!(\"going to format\");\n-        let (error_format, edition, debugging_options) = diag_opts;\n-        let diag = core::new_handler(error_format, None, &debugging_options);\n-        match output_format {\n-            None | Some(config::OutputFormat::Html) => {\n-                run_renderer::<html::render::Context>(krate, renderopts, renderinfo, &diag, edition)\n-            }\n-            Some(config::OutputFormat::Json) => {\n-                run_renderer::<json::JsonRenderer>(krate, renderopts, renderinfo, &diag, edition)\n-            }\n+    let Output { krate, renderinfo, renderopts } = out;\n+    info!(\"going to format\");\n+    let (error_format, edition, debugging_options) = diag_opts;\n+    let diag = core::new_handler(error_format, None, &debugging_options);\n+    match output_format {\n+        None | Some(config::OutputFormat::Html) => {\n+            run_renderer::<html::render::Context>(krate, renderopts, renderinfo, &diag, edition)\n+        }\n+        Some(config::OutputFormat::Json) => {\n+            run_renderer::<json::JsonRenderer>(krate, renderopts, renderinfo, &diag, edition)\n         }\n-    });\n-\n-    match result {\n-        Ok(output) => output,\n-        Err(_) => panic::resume_unwind(Box::new(rustc_errors::FatalErrorMarker)),\n     }\n }"}, {"sha": "b86a105ff7664b22b0daca867544ad71236896bb", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d69e3b1d753951bc7df0f02d6fd4719065d98c3/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d69e3b1d753951bc7df0f02d6fd4719065d98c3/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1d69e3b1d753951bc7df0f02d6fd4719065d98c3", "patch": "@@ -42,7 +42,7 @@ pub struct TestOptions {\n     pub attrs: Vec<String>,\n }\n \n-pub fn run(options: Options) -> Result<(), String> {\n+pub fn run(options: Options) -> Result<(), ErrorReported> {\n     let input = config::Input::File(options.input.clone());\n \n     let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n@@ -150,7 +150,7 @@ pub fn run(options: Options) -> Result<(), String> {\n     });\n     let tests = match tests {\n         Ok(tests) => tests,\n-        Err(ErrorReported) => return Err(String::new()),\n+        Err(ErrorReported) => return Err(ErrorReported),\n     };\n \n     test_args.insert(0, \"rustdoctest\".to_string());"}]}