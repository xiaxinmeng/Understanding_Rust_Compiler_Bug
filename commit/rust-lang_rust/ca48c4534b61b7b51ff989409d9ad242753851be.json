{"sha": "ca48c4534b61b7b51ff989409d9ad242753851be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNDhjNDUzNGI2MWI3YjUxZmY5ODk0MDlkOWFkMjQyNzUzODUxYmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-27T17:43:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-27T17:43:28Z"}, "message": "Merge #6027\n\n6027: Spawn a flycheck instance per workspace r=matklad a=jonas-schievink\n\nLimitations:\r\n\r\n- All instances are restarted on every file change\r\n- There's only one configuration used for all of them\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "66fb358443e69ad81bd9a5331b205891a7d5acfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66fb358443e69ad81bd9a5331b205891a7d5acfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca48c4534b61b7b51ff989409d9ad242753851be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfcM9ACRBK7hj4Ov3rIwAAdHIIAINS92i0ZdqbXxCpRvR9dIfq\ny15Tys0ubMvMY0zX/GZ0lsPkBdisqc5UzY9aA4j3SFmRHLDJFF5OtiCYUWeyFMxR\n/GnVZoeDByPr7U4e+r981ZpuebyJMEmXQN7Pu5kgxWiUALGZK8fAk1MiA0mb7wid\nHN44dUVUXkN04ZeKxXyh9bpRa2KvgO8wJCl4QunI38vU0lANK1F5JXffPsfzgTpN\ndyzgssonWD2cEMy7Fic5/hdvvpgi7B/UgCethN0oJ3lY/BxbpOOzbt+435hs5/SO\nUBP3fOz0AwzmU43F2It0AanSbn5jKcJRW36T6jCfF/jOJhZrZBLgXittLJN5vac=\n=oKJL\n-----END PGP SIGNATURE-----\n", "payload": "tree 66fb358443e69ad81bd9a5331b205891a7d5acfc\nparent 662ed41ebcb1cd221b32be95d08b5bf5f10ae525\nparent 1a28f30ba48254fae30a29c2f1053f653d5e687e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1601228608 +0000\ncommitter GitHub <noreply@github.com> 1601228608 +0000\n\nMerge #6027\n\n6027: Spawn a flycheck instance per workspace r=matklad a=jonas-schievink\n\nLimitations:\r\n\r\n- All instances are restarted on every file change\r\n- There's only one configuration used for all of them\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca48c4534b61b7b51ff989409d9ad242753851be", "html_url": "https://github.com/rust-lang/rust/commit/ca48c4534b61b7b51ff989409d9ad242753851be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca48c4534b61b7b51ff989409d9ad242753851be/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "662ed41ebcb1cd221b32be95d08b5bf5f10ae525", "url": "https://api.github.com/repos/rust-lang/rust/commits/662ed41ebcb1cd221b32be95d08b5bf5f10ae525", "html_url": "https://github.com/rust-lang/rust/commit/662ed41ebcb1cd221b32be95d08b5bf5f10ae525"}, {"sha": "1a28f30ba48254fae30a29c2f1053f653d5e687e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a28f30ba48254fae30a29c2f1053f653d5e687e", "html_url": "https://github.com/rust-lang/rust/commit/1a28f30ba48254fae30a29c2f1053f653d5e687e"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "d982c5f29f9560ee59151c9b8ffc3c4fb8b50a20", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca48c4534b61b7b51ff989409d9ad242753851be/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca48c4534b61b7b51ff989409d9ad242753851be/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=ca48c4534b61b7b51ff989409d9ad242753851be", "patch": "@@ -59,11 +59,12 @@ pub struct FlycheckHandle {\n \n impl FlycheckHandle {\n     pub fn spawn(\n+        id: usize,\n         sender: Box<dyn Fn(Message) + Send>,\n         config: FlycheckConfig,\n         workspace_root: PathBuf,\n     ) -> FlycheckHandle {\n-        let actor = FlycheckActor::new(sender, config, workspace_root);\n+        let actor = FlycheckActor::new(id, sender, config, workspace_root);\n         let (sender, receiver) = unbounded::<Restart>();\n         let thread = jod_thread::spawn(move || actor.run(receiver));\n         FlycheckHandle { sender, thread }\n@@ -81,7 +82,11 @@ pub enum Message {\n     AddDiagnostic { workspace_root: PathBuf, diagnostic: Diagnostic },\n \n     /// Request check progress notification to client\n-    Progress(Progress),\n+    Progress {\n+        /// Flycheck instance ID\n+        id: usize,\n+        progress: Progress,\n+    },\n }\n \n #[derive(Debug)]\n@@ -95,6 +100,7 @@ pub enum Progress {\n struct Restart;\n \n struct FlycheckActor {\n+    id: usize,\n     sender: Box<dyn Fn(Message) + Send>,\n     config: FlycheckConfig,\n     workspace_root: PathBuf,\n@@ -113,11 +119,15 @@ enum Event {\n \n impl FlycheckActor {\n     fn new(\n+        id: usize,\n         sender: Box<dyn Fn(Message) + Send>,\n         config: FlycheckConfig,\n         workspace_root: PathBuf,\n     ) -> FlycheckActor {\n-        FlycheckActor { sender, config, workspace_root, cargo_handle: None }\n+        FlycheckActor { id, sender, config, workspace_root, cargo_handle: None }\n+    }\n+    fn progress(&self, progress: Progress) {\n+        self.send(Message::Progress { id: self.id, progress });\n     }\n     fn next_event(&self, inbox: &Receiver<Restart>) -> Option<Event> {\n         let check_chan = self.cargo_handle.as_ref().map(|cargo| &cargo.receiver);\n@@ -139,7 +149,7 @@ impl FlycheckActor {\n                     command.stdout(Stdio::piped()).stderr(Stdio::null()).stdin(Stdio::null());\n                     if let Ok(child) = command.spawn().map(JodChild) {\n                         self.cargo_handle = Some(CargoHandle::spawn(child));\n-                        self.send(Message::Progress(Progress::DidStart));\n+                        self.progress(Progress::DidStart);\n                     }\n                 }\n                 Event::CheckEvent(None) => {\n@@ -153,11 +163,11 @@ impl FlycheckActor {\n                             self.check_command()\n                         )\n                     }\n-                    self.send(Message::Progress(Progress::DidFinish(res)));\n+                    self.progress(Progress::DidFinish(res));\n                 }\n                 Event::CheckEvent(Some(message)) => match message {\n                     cargo_metadata::Message::CompilerArtifact(msg) => {\n-                        self.send(Message::Progress(Progress::DidCheckCrate(msg.target.name)));\n+                        self.progress(Progress::DidCheckCrate(msg.target.name));\n                     }\n \n                     cargo_metadata::Message::CompilerMessage(msg) => {\n@@ -179,7 +189,7 @@ impl FlycheckActor {\n     }\n     fn cancel_check_process(&mut self) {\n         if self.cargo_handle.take().is_some() {\n-            self.send(Message::Progress(Progress::DidCancel));\n+            self.progress(Progress::DidCancel);\n         }\n     }\n     fn check_command(&self) -> Command {"}, {"sha": "96313aaec072758d223fdd62b7a2ca333133dd05", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca48c4534b61b7b51ff989409d9ad242753851be/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca48c4534b61b7b51ff989409d9ad242753851be/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=ca48c4534b61b7b51ff989409d9ad242753851be", "patch": "@@ -63,7 +63,7 @@ pub(crate) struct GlobalState {\n     req_queue: ReqQueue,\n     pub(crate) task_pool: Handle<TaskPool<Task>, Receiver<Task>>,\n     pub(crate) loader: Handle<Box<dyn vfs::loader::Handle>, Receiver<vfs::loader::Message>>,\n-    pub(crate) flycheck: Option<FlycheckHandle>,\n+    pub(crate) flycheck: Vec<FlycheckHandle>,\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,\n     pub(crate) flycheck_receiver: Receiver<flycheck::Message>,\n     pub(crate) config: Config,\n@@ -115,7 +115,7 @@ impl GlobalState {\n             req_queue: ReqQueue::default(),\n             task_pool,\n             loader,\n-            flycheck: None,\n+            flycheck: Vec::new(),\n             flycheck_sender,\n             flycheck_receiver,\n             config,"}, {"sha": "06ab9d508d037abf71d973f78638bfe0ecad03b2", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ca48c4534b61b7b51ff989409d9ad242753851be/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca48c4534b61b7b51ff989409d9ad242753851be/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=ca48c4534b61b7b51ff989409d9ad242753851be", "patch": "@@ -266,8 +266,8 @@ impl GlobalState {\n                     }\n                 }\n \n-                flycheck::Message::Progress(status) => {\n-                    let (state, message) = match status {\n+                flycheck::Message::Progress { id, progress } => {\n+                    let (state, message) = match progress {\n                         flycheck::Progress::DidStart => {\n                             self.diagnostics.clear_check();\n                             (Progress::Begin, None)\n@@ -284,14 +284,21 @@ impl GlobalState {\n                         }\n                     };\n \n-                    self.report_progress(\"cargo check\", state, message, None);\n+                    // When we're running multiple flychecks, we have to include a disambiguator in\n+                    // the title, or the editor complains. Note that this is a user-facing string.\n+                    let title = if self.flycheck.len() == 1 {\n+                        \"cargo check\".to_string()\n+                    } else {\n+                        format!(\"cargo check (#{})\", id + 1)\n+                    };\n+                    self.report_progress(&title, state, message, None);\n                 }\n             },\n         }\n \n         let state_changed = self.process_changes();\n         if prev_status == Status::Loading && self.status == Status::Ready {\n-            if let Some(flycheck) = &self.flycheck {\n+            for flycheck in &self.flycheck {\n                 flycheck.update();\n             }\n         }\n@@ -490,7 +497,7 @@ impl GlobalState {\n                 Ok(())\n             })?\n             .on::<lsp_types::notification::DidSaveTextDocument>(|this, params| {\n-                if let Some(flycheck) = &this.flycheck {\n+                for flycheck in &this.flycheck {\n                     flycheck.update();\n                 }\n                 if let Ok(abs_path) = from_proto::abs_path(&params.text_document.uri) {"}, {"sha": "de0dbcad494b836c3bc13bc23053bf0f6397e7eb", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca48c4534b61b7b51ff989409d9ad242753851be/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca48c4534b61b7b51ff989409d9ad242753851be/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=ca48c4534b61b7b51ff989409d9ad242753851be", "patch": "@@ -235,29 +235,37 @@ impl GlobalState {\n         let config = match self.config.flycheck.clone() {\n             Some(it) => it,\n             None => {\n-                self.flycheck = None;\n+                self.flycheck = Vec::new();\n                 return;\n             }\n         };\n \n         let sender = self.flycheck_sender.clone();\n-        let sender = Box::new(move |msg| sender.send(msg).unwrap());\n         self.flycheck = self\n             .workspaces\n             .iter()\n-            // FIXME: Figure out the multi-workspace situation\n-            .find_map(|w| match w {\n-                ProjectWorkspace::Cargo { cargo, sysroot: _ } => Some(cargo.workspace_root()),\n+            .enumerate()\n+            .filter_map(|(id, w)| match w {\n+                ProjectWorkspace::Cargo { cargo, sysroot: _ } => Some((id, cargo.workspace_root())),\n                 ProjectWorkspace::Json { project, .. } => {\n                     // Enable flychecks for json projects if a custom flycheck command was supplied\n                     // in the workspace configuration.\n                     match config {\n-                        FlycheckConfig::CustomCommand { .. } => Some(project.path()),\n+                        FlycheckConfig::CustomCommand { .. } => Some((id, project.path())),\n                         _ => None,\n                     }\n                 }\n             })\n-            .map(move |root| FlycheckHandle::spawn(sender, config, root.to_path_buf().into()))\n+            .map(|(id, root)| {\n+                let sender = sender.clone();\n+                FlycheckHandle::spawn(\n+                    id,\n+                    Box::new(move |msg| sender.send(msg).unwrap()),\n+                    config.clone(),\n+                    root.to_path_buf().into(),\n+                )\n+            })\n+            .collect();\n     }\n }\n "}]}