{"sha": "8f529aba8688f26b601ef733951379718d345ee7", "node_id": "C_kwDOAAsO6NoAKDhmNTI5YWJhODY4OGYyNmI2MDFlZjczMzk1MTM3OTcxOGQzNDVlZTc", "commit": {"author": {"name": "David Venhoek", "email": "david@venhoek.nl", "date": "2022-06-25T14:36:11Z"}, "committer": {"name": "David Venhoek", "email": "david@venhoek.nl", "date": "2022-06-25T14:36:11Z"}, "message": "Improved naming for copied constant arguments vector.", "tree": {"sha": "def1d26fbde3596ecb9598f5ab66e5b36e6b8d92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/def1d26fbde3596ecb9598f5ab66e5b36e6b8d92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f529aba8688f26b601ef733951379718d345ee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f529aba8688f26b601ef733951379718d345ee7", "html_url": "https://github.com/rust-lang/rust/commit/8f529aba8688f26b601ef733951379718d345ee7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f529aba8688f26b601ef733951379718d345ee7/comments", "author": {"login": "davidv1992", "id": 518970, "node_id": "MDQ6VXNlcjUxODk3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/518970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidv1992", "html_url": "https://github.com/davidv1992", "followers_url": "https://api.github.com/users/davidv1992/followers", "following_url": "https://api.github.com/users/davidv1992/following{/other_user}", "gists_url": "https://api.github.com/users/davidv1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidv1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidv1992/subscriptions", "organizations_url": "https://api.github.com/users/davidv1992/orgs", "repos_url": "https://api.github.com/users/davidv1992/repos", "events_url": "https://api.github.com/users/davidv1992/events{/privacy}", "received_events_url": "https://api.github.com/users/davidv1992/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidv1992", "id": 518970, "node_id": "MDQ6VXNlcjUxODk3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/518970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidv1992", "html_url": "https://github.com/davidv1992", "followers_url": "https://api.github.com/users/davidv1992/followers", "following_url": "https://api.github.com/users/davidv1992/following{/other_user}", "gists_url": "https://api.github.com/users/davidv1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidv1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidv1992/subscriptions", "organizations_url": "https://api.github.com/users/davidv1992/orgs", "repos_url": "https://api.github.com/users/davidv1992/repos", "events_url": "https://api.github.com/users/davidv1992/events{/privacy}", "received_events_url": "https://api.github.com/users/davidv1992/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a174d65709744f9d88fbf8807a605f7ac15c2255", "url": "https://api.github.com/repos/rust-lang/rust/commits/a174d65709744f9d88fbf8807a605f7ac15c2255", "html_url": "https://github.com/rust-lang/rust/commit/a174d65709744f9d88fbf8807a605f7ac15c2255"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "0503d7232405f4dcd783cb7d8179e435893df417", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f529aba8688f26b601ef733951379718d345ee7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f529aba8688f26b601ef733951379718d345ee7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=8f529aba8688f26b601ef733951379718d345ee7", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n         llargs: &[Bx::Value],\n         destination: Option<(ReturnDest<'tcx, Bx::Value>, mir::BasicBlock)>,\n         cleanup: Option<mir::BasicBlock>,\n-        argument_tmps: &[PlaceRef<'tcx, <Bx as BackendTypes>::Value>],\n+        copied_constant_arguments: &[PlaceRef<'tcx, <Bx as BackendTypes>::Value>],\n     ) {\n         // If there is a cleanup block and the function we're calling can unwind, then\n         // do an invoke, otherwise do a call.\n@@ -173,7 +173,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             if let Some((ret_dest, target)) = destination {\n                 bx.switch_to_block(fx.llbb(target));\n                 fx.set_debug_loc(bx, self.terminator.source_info);\n-                for tmp in argument_tmps {\n+                for tmp in copied_constant_arguments {\n                     bx.lifetime_end(tmp.llval, tmp.layout.size);\n                 }\n                 fx.store_return(bx, ret_dest, &fn_abi.ret, invokeret);\n@@ -190,7 +190,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             }\n \n             if let Some((ret_dest, target)) = destination {\n-                for tmp in argument_tmps {\n+                for tmp in copied_constant_arguments {\n                     bx.lifetime_end(tmp.llval, tmp.layout.size);\n                 }\n                 fx.store_return(bx, ret_dest, &fn_abi.ret, llret);\n@@ -795,7 +795,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             (args, None)\n         };\n \n-        let mut argument_tmps = vec![];\n+        let mut copied_constant_arguments = vec![];\n         'make_args: for (i, arg) in first_args.iter().enumerate() {\n             let mut op = self.codegen_operand(&mut bx, arg);\n \n@@ -864,7 +864,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     bx.lifetime_start(tmp.llval, tmp.layout.size);\n                     op.val.store(&mut bx, tmp);\n                     op.val = Ref(tmp.llval, None, tmp.align);\n-                    argument_tmps.push(tmp);\n+                    copied_constant_arguments.push(tmp);\n                 }\n                 _ => {}\n             }\n@@ -937,7 +937,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 &llargs,\n                 target.as_ref().map(|&target| (ret_dest, target)),\n                 cleanup,\n-                &argument_tmps,\n+                &copied_constant_arguments,\n             );\n \n             bx.switch_to_block(bb_fail);\n@@ -955,7 +955,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             &llargs,\n             target.as_ref().map(|&target| (ret_dest, target)),\n             cleanup,\n-            &argument_tmps,\n+            &copied_constant_arguments,\n         );\n     }\n "}]}