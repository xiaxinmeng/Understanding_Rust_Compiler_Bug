{"sha": "e89a321dff569fcc04b9249f7dac589c307e36ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OWEzMjFkZmY1NjlmY2MwNGI5MjQ5ZjdkYWM1ODljMzA3ZTM2ZWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-28T08:49:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T18:01:01Z"}, "message": "rename `MirPassSet` to `MirSuite`\n\nThis seems like a better noun.", "tree": {"sha": "eb1373d42ccaed79168d6cf821e52bf25fa69bee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb1373d42ccaed79168d6cf821e52bf25fa69bee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e89a321dff569fcc04b9249f7dac589c307e36ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e89a321dff569fcc04b9249f7dac589c307e36ed", "html_url": "https://github.com/rust-lang/rust/commit/e89a321dff569fcc04b9249f7dac589c307e36ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e89a321dff569fcc04b9249f7dac589c307e36ed/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b32cb90c72d90c722d56324ca0ea9f748ebf4e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b32cb90c72d90c722d56324ca0ea9f748ebf4e1", "html_url": "https://github.com/rust-lang/rust/commit/2b32cb90c72d90c722d56324ca0ea9f748ebf4e1"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "7c9b86651976c801ce931a2a0082092ef994fb9c", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e89a321dff569fcc04b9249f7dac589c307e36ed/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89a321dff569fcc04b9249f7dac589c307e36ed/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=e89a321dff569fcc04b9249f7dac589c307e36ed", "patch": "@@ -94,15 +94,15 @@ pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n pub trait MirCtxt<'a, 'tcx: 'a> {\n     fn tcx(&self) -> TyCtxt<'a, 'tcx, 'tcx>;\n     fn def_id(&self) -> DefId;\n-    fn pass_set(&self) -> MirPassSet;\n+    fn suite(&self) -> MirSuite;\n     fn pass_num(&self) -> MirPassIndex;\n     fn source(&self) -> MirSource;\n     fn read_previous_mir(&self) -> Ref<'tcx, Mir<'tcx>>;\n     fn steal_previous_mir(&self) -> &'tcx RefCell<Mir<'tcx>>;\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n-pub struct MirPassSet(pub usize);\n+pub struct MirSuite(pub usize);\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct MirPassIndex(pub usize);\n@@ -174,49 +174,49 @@ impl<T: MirPass> DefIdPass for T {\n #[derive(Clone)]\n pub struct Passes {\n     pass_hooks: Vec<Rc<PassHook>>,\n-    sets: Vec<Vec<Rc<DefIdPass>>>,\n+    suites: Vec<Vec<Rc<DefIdPass>>>,\n }\n \n-/// The number of \"pass sets\" that we have:\n+/// The number of \"pass suites\" that we have:\n ///\n /// - ready for constant evaluation\n /// - unopt\n /// - optimized\n-pub const MIR_PASS_SETS: usize = 3;\n+pub const MIR_SUITES: usize = 3;\n \n /// Run the passes we need to do constant qualification and evaluation.\n-pub const MIR_CONST: MirPassSet = MirPassSet(0);\n+pub const MIR_CONST: MirSuite = MirSuite(0);\n \n /// Run the passes we need to consider the MIR validated and ready for borrowck etc.\n-pub const MIR_VALIDATED: MirPassSet = MirPassSet(1);\n+pub const MIR_VALIDATED: MirSuite = MirSuite(1);\n \n /// Run the passes we need to consider the MIR *optimized*.\n-pub const MIR_OPTIMIZED: MirPassSet = MirPassSet(2);\n+pub const MIR_OPTIMIZED: MirSuite = MirSuite(2);\n \n impl<'a, 'tcx> Passes {\n     pub fn new() -> Passes {\n         Passes {\n             pass_hooks: Vec::new(),\n-            sets: (0..MIR_PASS_SETS).map(|_| Vec::new()).collect(),\n+            suites: (0..MIR_SUITES).map(|_| Vec::new()).collect(),\n         }\n     }\n \n     /// Pushes a built-in pass.\n-    pub fn push_pass<T: DefIdPass + 'static>(&mut self, set: MirPassSet, pass: T) {\n-        self.sets[set.0].push(Rc::new(pass));\n+    pub fn push_pass<T: DefIdPass + 'static>(&mut self, suite: MirSuite, pass: T) {\n+        self.suites[suite.0].push(Rc::new(pass));\n     }\n \n     /// Pushes a pass hook.\n     pub fn push_hook<T: PassHook + 'static>(&mut self, hook: T) {\n         self.pass_hooks.push(Rc::new(hook));\n     }\n \n-    pub fn len_passes(&self, set: MirPassSet) -> usize {\n-        self.sets[set.0].len()\n+    pub fn len_passes(&self, suite: MirSuite) -> usize {\n+        self.suites[suite.0].len()\n     }\n \n-    pub fn pass(&self, set: MirPassSet, pass: MirPassIndex) -> &DefIdPass {\n-        &*self.sets[set.0][pass.0]\n+    pub fn pass(&self, suite: MirSuite, pass: MirPassIndex) -> &DefIdPass {\n+        &*self.suites[suite.0][pass.0]\n     }\n \n     pub fn hooks(&self) -> &[Rc<PassHook>] {"}, {"sha": "58a38cc903d3c862d214e1931431061590f5ac6a", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e89a321dff569fcc04b9249f7dac589c307e36ed/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89a321dff569fcc04b9249f7dac589c307e36ed/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=e89a321dff569fcc04b9249f7dac589c307e36ed", "patch": "@@ -16,7 +16,7 @@ use middle::const_val;\n use middle::privacy::AccessLevels;\n use middle::region::RegionMaps;\n use mir;\n-use mir::transform::{MirPassSet, MirPassIndex};\n+use mir::transform::{MirSuite, MirPassIndex};\n use session::CompileResult;\n use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n use ty::item_path;\n@@ -102,7 +102,7 @@ impl<'tcx> Key for (DefId, &'tcx Substs<'tcx>) {\n     }\n }\n \n-impl Key for (MirPassSet, DefId) {\n+impl Key for (MirSuite, DefId) {\n     fn map_crate(&self) -> CrateNum {\n         self.1.map_crate()\n     }\n@@ -111,7 +111,7 @@ impl Key for (MirPassSet, DefId) {\n     }\n }\n \n-impl Key for (MirPassSet, MirPassIndex, DefId) {\n+impl Key for (MirSuite, MirPassIndex, DefId) {\n     fn map_crate(&self) -> CrateNum {\n         self.2.map_crate()\n     }\n@@ -337,14 +337,14 @@ impl<'tcx> QueryDescription for queries::is_item_mir_available<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription for queries::mir_pass_set<'tcx> {\n-    fn describe(_: TyCtxt, (pass_set, _): (MirPassSet, DefId)) -> String {\n-        format!(\"MIR passes #{}.*\", pass_set.0)\n+impl<'tcx> QueryDescription for queries::mir_suite<'tcx> {\n+    fn describe(_: TyCtxt, (suite, _): (MirSuite, DefId)) -> String {\n+        format!(\"MIR passes #{}.*\", suite.0)\n     }\n }\n \n impl<'tcx> QueryDescription for queries::mir_pass<'tcx> {\n-    fn describe(_: TyCtxt, (pass_set, pass_num, _): (MirPassSet, MirPassIndex, DefId)) -> String {\n+    fn describe(_: TyCtxt, (pass_set, pass_num, _): (MirSuite, MirPassIndex, DefId)) -> String {\n         format!(\"MIR pass #{}.{}\", pass_set.0, pass_num.0)\n     }\n }\n@@ -592,12 +592,12 @@ define_maps! { <'tcx>\n     /// applied to it. This is mostly an \"intermediate\" query. Normally, you would\n     /// prefer to use `optimized_mir(def_id)`, which will fetch the MIR after all\n     /// optimizations and so forth.\n-    [] mir_pass_set: mir_pass_set((MirPassSet, DefId)) -> &'tcx RefCell<mir::Mir<'tcx>>,\n+    [] mir_suite: mir_suite((MirSuite, DefId)) -> &'tcx RefCell<mir::Mir<'tcx>>,\n \n     /// Fetch the MIR for a given def-id after a given pass has been executed. This is\n-    /// **only** intended to be used by the `mir_pass_set` provider -- if you are using it\n+    /// **only** intended to be used by the `mir_suite` provider -- if you are using it\n     /// manually, you're doing it wrong.\n-    [] mir_pass: mir_pass((MirPassSet, MirPassIndex, DefId)) -> &'tcx RefCell<mir::Mir<'tcx>>,\n+    [] mir_pass: mir_pass((MirSuite, MirPassIndex, DefId)) -> &'tcx RefCell<mir::Mir<'tcx>>,\n \n     /// MIR after our optimization passes have run. This is MIR that is ready\n     /// for trans. This is also the only query that can fetch non-local MIR, at present.\n@@ -701,10 +701,10 @@ fn mir_keys(_: CrateNum) -> DepNode<DefId> {\n     DepNode::MirKeys\n }\n \n-fn mir_pass_set((_pass_set, def_id): (MirPassSet, DefId)) -> DepNode<DefId> {\n+fn mir_suite((_suite, def_id): (MirSuite, DefId)) -> DepNode<DefId> {\n     DepNode::Mir(def_id)\n }\n \n-fn mir_pass((_pass_set, _pass_num, def_id): (MirPassSet, MirPassIndex, DefId)) -> DepNode<DefId> {\n+fn mir_pass((_suite, _pass_num, def_id): (MirSuite, MirPassIndex, DefId)) -> DepNode<DefId> {\n     DepNode::Mir(def_id)\n }"}, {"sha": "49cb254cdf289e57c89b7b39036196e340ee46dc", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e89a321dff569fcc04b9249f7dac589c307e36ed/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89a321dff569fcc04b9249f7dac589c307e36ed/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e89a321dff569fcc04b9249f7dac589c307e36ed", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::hir::def_id::DefId;\n use rustc::mir::Mir;\n-use rustc::mir::transform::{MirCtxt, MirPassIndex, MirPassSet, MirSource, MIR_OPTIMIZED};\n+use rustc::mir::transform::{MirCtxt, MirPassIndex, MirSuite, MirSource, MIR_OPTIMIZED};\n use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n use std::cell::{Ref, RefCell};\n@@ -34,14 +34,14 @@ pub fn provide(providers: &mut Providers) {\n     self::qualify_consts::provide(providers);\n     *providers = Providers {\n         optimized_mir,\n-        mir_pass_set,\n+        mir_suite,\n         mir_pass,\n         ..*providers\n     };\n }\n \n fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx RefCell<Mir<'tcx>> {\n-    let mir = tcx.mir_pass_set((MIR_OPTIMIZED, def_id));\n+    let mir = tcx.mir_suite((MIR_OPTIMIZED, def_id));\n \n     // \"lock\" the ref cell into read mode; after this point,\n     // there ought to be no more changes to the MIR.\n@@ -50,23 +50,23 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     mir\n }\n \n-fn mir_pass_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          (pass_set, def_id): (MirPassSet, DefId))\n-                          -> &'tcx RefCell<Mir<'tcx>>\n+fn mir_suite<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                       (suite, def_id): (MirSuite, DefId))\n+                       -> &'tcx RefCell<Mir<'tcx>>\n {\n     let passes = &tcx.mir_passes;\n-    let len = passes.len_passes(pass_set);\n-    assert!(len > 0, \"no passes in {:?}\", pass_set);\n-    tcx.mir_pass((pass_set, MirPassIndex(len - 1), def_id))\n+    let len = passes.len_passes(suite);\n+    assert!(len > 0, \"no passes in {:?}\", suite);\n+    tcx.mir_pass((suite, MirPassIndex(len - 1), def_id))\n }\n \n fn mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                      (pass_set, pass_num, def_id): (MirPassSet, MirPassIndex, DefId))\n+                      (suite, pass_num, def_id): (MirSuite, MirPassIndex, DefId))\n                       -> &'tcx RefCell<Mir<'tcx>>\n {\n     let passes = &tcx.mir_passes;\n-    let pass = passes.pass(pass_set, pass_num);\n-    let mir_ctxt = MirCtxtImpl { tcx, pass_num, pass_set, def_id };\n+    let pass = passes.pass(suite, pass_num);\n+    let mir_ctxt = MirCtxtImpl { tcx, pass_num, suite, def_id };\n \n     for hook in passes.hooks() {\n         hook.on_mir_pass(&mir_ctxt, None);\n@@ -84,7 +84,7 @@ fn mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n struct MirCtxtImpl<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pass_num: MirPassIndex,\n-    pass_set: MirPassSet,\n+    suite: MirSuite,\n     def_id: DefId\n }\n \n@@ -93,8 +93,8 @@ impl<'a, 'tcx> MirCtxt<'a, 'tcx> for MirCtxtImpl<'a, 'tcx> {\n         self.tcx\n     }\n \n-    fn pass_set(&self) -> MirPassSet {\n-        self.pass_set\n+    fn suite(&self) -> MirSuite {\n+        self.suite\n     }\n \n     fn pass_num(&self) -> MirPassIndex {\n@@ -116,12 +116,12 @@ impl<'a, 'tcx> MirCtxt<'a, 'tcx> for MirCtxtImpl<'a, 'tcx> {\n     }\n \n     fn steal_previous_mir(&self) -> &'tcx RefCell<Mir<'tcx>> {\n-        let MirPassSet(pass_set) = self.pass_set;\n+        let MirSuite(suite) = self.suite;\n         let MirPassIndex(pass_num) = self.pass_num;\n         if pass_num > 0 {\n-            self.tcx.mir_pass((MirPassSet(pass_set), MirPassIndex(pass_num - 1), self.def_id))\n-        } else if pass_set > 0 {\n-            self.tcx.mir_pass_set((MirPassSet(pass_set - 1), self.def_id))\n+            self.tcx.mir_pass((MirSuite(suite), MirPassIndex(pass_num - 1), self.def_id))\n+        } else if suite > 0 {\n+            self.tcx.mir_suite((MirSuite(suite - 1), self.def_id))\n         } else {\n             self.tcx.mir_build(self.def_id)\n         }"}, {"sha": "c3a30f7b8821368fb45ef147dc98dac061c0661b", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e89a321dff569fcc04b9249f7dac589c307e36ed/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89a321dff569fcc04b9249f7dac589c307e36ed/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=e89a321dff569fcc04b9249f7dac589c307e36ed", "patch": "@@ -11,7 +11,7 @@\n use rustc::hir;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::*;\n-use rustc::mir::transform::{MirPassSet, MirPassIndex, MirSource};\n+use rustc::mir::transform::{MirSuite, MirPassIndex, MirSource};\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx};\n@@ -39,7 +39,7 @@ const ALIGN: usize = 40;\n ///   that can appear in the pass-name or the `item_path_str` for the given\n ///   node-id. If any one of the substrings match, the data is dumped out.\n pub fn dump_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          pass_num: Option<(MirPassSet, MirPassIndex)>,\n+                          pass_num: Option<(MirSuite, MirPassIndex)>,\n                           pass_name: &str,\n                           disambiguator: &Display,\n                           source: MirSource,\n@@ -77,7 +77,7 @@ pub fn dump_enabled<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn dump_matched_mir_node<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                   pass_num: Option<(MirPassSet, MirPassIndex)>,\n+                                   pass_num: Option<(MirSuite, MirPassIndex)>,\n                                    pass_name: &str,\n                                    node_path: &str,\n                                    disambiguator: &Display,"}]}