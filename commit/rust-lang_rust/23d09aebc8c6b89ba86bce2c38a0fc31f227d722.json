{"sha": "23d09aebc8c6b89ba86bce2c38a0fc31f227d722", "node_id": "C_kwDOAAsO6NoAKDIzZDA5YWViYzhjNmI4OWJhODZiY2UyYzM4YTBmYzMxZjIyN2Q3MjI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-03T14:45:42Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2023-05-05T23:00:12Z"}, "message": "Do not use scalar layout if there are ZSTs with alignment > 1", "tree": {"sha": "33b3561379853e88c543efe90c36df9002280ff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33b3561379853e88c543efe90c36df9002280ff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d09aebc8c6b89ba86bce2c38a0fc31f227d722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d09aebc8c6b89ba86bce2c38a0fc31f227d722", "html_url": "https://github.com/rust-lang/rust/commit/23d09aebc8c6b89ba86bce2c38a0fc31f227d722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d09aebc8c6b89ba86bce2c38a0fc31f227d722/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b94c232192b0fa0314b5afa18e366356e210c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b94c232192b0fa0314b5afa18e366356e210c4c", "html_url": "https://github.com/rust-lang/rust/commit/4b94c232192b0fa0314b5afa18e366356e210c4c"}], "stats": {"total": 178, "additions": 157, "deletions": 21}, "files": [{"sha": "1bcc44237a3e636720cb4bce21dbbf48fefd6c33", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 42, "deletions": 20, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/23d09aebc8c6b89ba86bce2c38a0fc31f227d722/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d09aebc8c6b89ba86bce2c38a0fc31f227d722/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=23d09aebc8c6b89ba86bce2c38a0fc31f227d722", "patch": "@@ -731,36 +731,58 @@ pub trait LayoutCalculator {\n \n         let optimize = !repr.inhibit_union_abi_opt();\n         let mut size = Size::ZERO;\n-        let mut abi = Abi::Aggregate { sized: true };\n+        let mut abi = None;\n+        let mut biggest_zst_align = align;\n+        let mut biggest_non_zst_align = align;\n         let only_variant = &variants[FIRST_VARIANT];\n         for field in only_variant {\n-            assert!(field.0.is_sized());\n-            align = align.max(field.align());\n+            assert!(!field.0.is_unsized());\n \n-            // If all non-ZST fields have the same ABI, forward this ABI\n-            if optimize && !field.0.is_zst() {\n-                // Discard valid range information and allow undef\n-                let field_abi = match field.abi() {\n-                    Abi::Scalar(x) => Abi::Scalar(x.to_union()),\n-                    Abi::ScalarPair(x, y) => Abi::ScalarPair(x.to_union(), y.to_union()),\n-                    Abi::Vector { element: x, count } => {\n-                        Abi::Vector { element: x.to_union(), count }\n-                    }\n-                    Abi::Uninhabited | Abi::Aggregate { .. } => Abi::Aggregate { sized: true },\n-                };\n+            if optimize {\n+                // If all non-ZST fields have the same ABI, forward this ABI\n+                if field.0.is_zst() {\n+                    biggest_zst_align = biggest_zst_align.max(field.align());\n+                } else {\n+                    biggest_non_zst_align = biggest_non_zst_align.max(field.align());\n+                    // Discard valid range information and allow undef\n+                    let field_abi = match field.abi() {\n+                        Abi::Scalar(x) => Abi::Scalar(x.to_union()),\n+                        Abi::ScalarPair(x, y) => Abi::ScalarPair(x.to_union(), y.to_union()),\n+                        Abi::Vector { element: x, count } => {\n+                            Abi::Vector { element: x.to_union(), count }\n+                        }\n+                        Abi::Uninhabited | Abi::Aggregate { .. } => Abi::Aggregate { sized: true },\n+                    };\n \n-                if size == Size::ZERO {\n-                    // first non ZST: initialize 'abi'\n-                    abi = field_abi;\n-                } else if abi != field_abi {\n-                    // different fields have different ABI: reset to Aggregate\n-                    abi = Abi::Aggregate { sized: true };\n+                    if let Some(abi) = &mut abi {\n+                        if *abi != field_abi {\n+                            // different fields have different ABI: reset to Aggregate\n+                            *abi = Abi::Aggregate { sized: true };\n+                        }\n+                    } else {\n+                        abi = Some(field_abi);\n+                    }\n                 }\n             }\n \n+            align = align.max(field.align());\n             size = cmp::max(size, field.size());\n         }\n \n+        let abi = match abi {\n+            None => Abi::Aggregate { sized: true },\n+            Some(non_zst_abi) => {\n+                if biggest_zst_align.abi > biggest_non_zst_align.abi {\n+                    // If a zst has a bigger alignment than the non-zst fields,\n+                    // we cannot use scalar layout, because scalar(pair)s can't be\n+                    // more aligned than their primitive.\n+                    Abi::Aggregate { sized: true }\n+                } else {\n+                    non_zst_abi\n+                }\n+            }\n+        };\n+\n         if let Some(pack) = repr.pack {\n             align = align.min(AbiAndPrefAlign::new(pack));\n         }"}, {"sha": "c506b98f16e0fb9ec26663d507759898e4b40183", "filename": "tests/ui/layout/debug.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/23d09aebc8c6b89ba86bce2c38a0fc31f227d722/tests%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d09aebc8c6b89ba86bce2c38a0fc31f227d722/tests%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Fdebug.rs?ref=23d09aebc8c6b89ba86bce2c38a0fc31f227d722", "patch": "@@ -17,6 +17,27 @@ type Test = Result<i32, i32>; //~ ERROR: layout_of\n #[rustc_layout(debug)]\n type T = impl std::fmt::Debug; //~ ERROR: layout_of\n \n+#[rustc_layout(debug)]\n+pub union V { //~ ERROR: layout_of\n+    a: [u16; 0],\n+    b: u8,\n+}\n+\n+#[rustc_layout(debug)]\n+pub union W { //~ ERROR: layout_of\n+    b: u8,\n+    a: [u16; 0],\n+}\n+\n+#[rustc_layout(debug)]\n+pub union Y { //~ ERROR: layout_of\n+    b: [u8; 0],\n+    a: [u16; 0],\n+}\n+\n+#[rustc_layout(debug)]\n+type X = std::mem::MaybeUninit<u8>; //~ ERROR: layout_of\n+\n fn f() -> T {\n     0i32\n }"}, {"sha": "6f6ab13eac583607192eb60610ca6f98a0fd4771", "filename": "tests/ui/layout/debug.stderr", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/23d09aebc8c6b89ba86bce2c38a0fc31f227d722/tests%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23d09aebc8c6b89ba86bce2c38a0fc31f227d722/tests%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Fdebug.stderr?ref=23d09aebc8c6b89ba86bce2c38a0fc31f227d722", "patch": "@@ -307,5 +307,98 @@ error: layout_of(i32) = Layout {\n LL | type T = impl std::fmt::Debug;\n    | ^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: layout_of(V) = Layout {\n+           size: Size(2 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(2 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           fields: Union(\n+               2,\n+           ),\n+           largest_niche: None,\n+           variants: Single {\n+               index: 0,\n+           },\n+       }\n+  --> $DIR/debug.rs:21:1\n+   |\n+LL | pub union V {\n+   | ^^^^^^^^^^^\n+\n+error: layout_of(W) = Layout {\n+           size: Size(2 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(2 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           fields: Union(\n+               2,\n+           ),\n+           largest_niche: None,\n+           variants: Single {\n+               index: 0,\n+           },\n+       }\n+  --> $DIR/debug.rs:27:1\n+   |\n+LL | pub union W {\n+   | ^^^^^^^^^^^\n+\n+error: layout_of(Y) = Layout {\n+           size: Size(0 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(2 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           fields: Union(\n+               2,\n+           ),\n+           largest_niche: None,\n+           variants: Single {\n+               index: 0,\n+           },\n+       }\n+  --> $DIR/debug.rs:33:1\n+   |\n+LL | pub union Y {\n+   | ^^^^^^^^^^^\n+\n+error: layout_of(std::mem::MaybeUninit<u8>) = Layout {\n+           size: Size(1 bytes),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           abi: Scalar(\n+               Union {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+               },\n+           ),\n+           fields: Union(\n+               2,\n+           ),\n+           largest_niche: None,\n+           variants: Single {\n+               index: 0,\n+           },\n+       }\n+  --> $DIR/debug.rs:39:1\n+   |\n+LL | type X = std::mem::MaybeUninit<u8>;\n+   | ^^^^^^\n+\n+error: aborting due to 9 previous errors\n "}]}