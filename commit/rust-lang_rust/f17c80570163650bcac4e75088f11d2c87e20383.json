{"sha": "f17c80570163650bcac4e75088f11d2c87e20383", "node_id": "C_kwDOAAsO6NoAKGYxN2M4MDU3MDE2MzY1MGJjYWM0ZTc1MDg4ZjExZDJjODdlMjAzODM", "commit": {"author": {"name": "Kevin Reid", "email": "kpreid@switchb.org", "date": "2023-04-18T17:47:41Z"}, "committer": {"name": "Kevin Reid", "email": "kpreid@switchb.org", "date": "2023-04-19T15:55:21Z"}, "message": "Make `impl Debug for Span` not panic on not having session globals.", "tree": {"sha": "02a6717a6c121e2390e6d4b1e9a829f1b63dcc26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a6717a6c121e2390e6d4b1e9a829f1b63dcc26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f17c80570163650bcac4e75088f11d2c87e20383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f17c80570163650bcac4e75088f11d2c87e20383", "html_url": "https://github.com/rust-lang/rust/commit/f17c80570163650bcac4e75088f11d2c87e20383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f17c80570163650bcac4e75088f11d2c87e20383/comments", "author": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e28e904d6b3404abaaeb65d33636cc35ca3f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e28e904d6b3404abaaeb65d33636cc35ca3f4b", "html_url": "https://github.com/rust-lang/rust/commit/56e28e904d6b3404abaaeb65d33636cc35ca3f4b"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "74a07a119e77e3b7b4fa6f2fa41108f2b2947179", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f17c80570163650bcac4e75088f11d2c87e20383/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f17c80570163650bcac4e75088f11d2c87e20383/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=f17c80570163650bcac4e75088f11d2c87e20383", "patch": "@@ -1044,17 +1044,26 @@ impl fmt::Debug for Span {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // Use the global `SourceMap` to print the span. If that's not\n         // available, fall back to printing the raw values.\n-        with_session_globals(|session_globals| {\n-            if let Some(source_map) = &*session_globals.source_map.borrow() {\n-                write!(f, \"{} ({:?})\", source_map.span_to_diagnostic_string(*self), self.ctxt())\n-            } else {\n-                f.debug_struct(\"Span\")\n-                    .field(\"lo\", &self.lo())\n-                    .field(\"hi\", &self.hi())\n-                    .field(\"ctxt\", &self.ctxt())\n-                    .finish()\n-            }\n-        })\n+\n+        fn fallback(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            f.debug_struct(\"Span\")\n+                .field(\"lo\", &span.lo())\n+                .field(\"hi\", &span.hi())\n+                .field(\"ctxt\", &span.ctxt())\n+                .finish()\n+        }\n+        \n+        if SESSION_GLOBALS.is_set() {\n+            with_session_globals(|session_globals| {\n+                if let Some(source_map) = &*session_globals.source_map.borrow() {\n+                    write!(f, \"{} ({:?})\", source_map.span_to_diagnostic_string(*self), self.ctxt())\n+                } else {\n+                    fallback(*self, f)\n+                }\n+            })\n+        } else {\n+            fallback(*self, f)\n+        }\n     }\n }\n "}]}