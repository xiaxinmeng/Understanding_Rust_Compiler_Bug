{"sha": "77edbb7defec2cbc011d9b86301dfa28094f1444", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZWRiYjdkZWZlYzJjYmMwMTFkOWI4NjMwMWRmYTI4MDk0ZjE0NDQ=", "commit": {"author": {"name": "Jacob Clark", "email": "jacob.jh.clark@googlemail.com", "date": "2016-06-06T23:03:25Z"}, "committer": {"name": "Jacob Clark", "email": "jacob.jh.clark@googlemail.com", "date": "2016-06-06T23:03:25Z"}, "message": "Refactoring exsisting filter_maps to maps", "tree": {"sha": "90e19e878b0b46580f45ac20db15235277967e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90e19e878b0b46580f45ac20db15235277967e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77edbb7defec2cbc011d9b86301dfa28094f1444", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQIcBAABCgAGBQJXVgE/AAoJENd/CPyAUL2LH60P/2vHPQLrgW5mIiDH3p6aTmRd\nT+BlSht8/42X85fWhb0Vc1RsS3um2pusbTChusBVjpFX/B0Q+5drsrxzuVHLLkAT\nwxIGDKy7z270Rhr8MXGGL1t3j6pU5FYu1suxNO8kpqHRBcgHKqW3xXz6Megnf1aA\n18xEgupm7bACWukDnEIWZVumu5rPQHNjppexp3zH4ThyGQ+cnlVXddfsANdLLXaJ\nMJOazry9YdgE/j9n98Pfh8vIlBG4QCMagCkhHBQZ5fsTXewP1OYgkzX7AX0MQeDS\nBhHF0+UAIDJZHNCw3+SDDcx/hCZLaL6Xjjz4m4+Nc//60NaVhWFvJ2e04rfhqGCu\nrtyWmFr23X5Z73YzswM1MgQy4F3MReL3gKukLvnCbjKUiPbWCaa+dnoLDu8JkthB\nQkUSOuZyBlDyefmo4Xq3c6vgXo9c5R4y1IyzgPGdFADehdtUjP7XhqTdjqbMW/uh\nHD3t0r3SuuEI0IdoORzbBz45YsxYtQoi5JL4YiAfGk6sLp/VBTgDnWIGxiLGSNM1\nziCAykH90flKZ8CYJJcs6H+NRrTzfcW9mG8SWcQpHIvMart6mrI0wopqsLJY4bLa\nFoPLCX5iULeMibzKiiXeQ/fPX0XC87dX1jLdF3FYfQmEltWagtLHZydtlQ/I+otJ\nJTwo8WKUQS7O0POtPmSU\n=ASih\n-----END PGP SIGNATURE-----", "payload": "tree 90e19e878b0b46580f45ac20db15235277967e29\nparent 2ea99869a7372c533c6289ec609b75a430d156ce\nauthor Jacob Clark <jacob.jh.clark@googlemail.com> 1465254205 +0100\ncommitter Jacob Clark <jacob.jh.clark@googlemail.com> 1465254205 +0100\n\nRefactoring exsisting filter_maps to maps\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77edbb7defec2cbc011d9b86301dfa28094f1444", "html_url": "https://github.com/rust-lang/rust/commit/77edbb7defec2cbc011d9b86301dfa28094f1444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77edbb7defec2cbc011d9b86301dfa28094f1444/comments", "author": {"login": "imjacobclark", "id": 1641689, "node_id": "MDQ6VXNlcjE2NDE2ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1641689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imjacobclark", "html_url": "https://github.com/imjacobclark", "followers_url": "https://api.github.com/users/imjacobclark/followers", "following_url": "https://api.github.com/users/imjacobclark/following{/other_user}", "gists_url": "https://api.github.com/users/imjacobclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/imjacobclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imjacobclark/subscriptions", "organizations_url": "https://api.github.com/users/imjacobclark/orgs", "repos_url": "https://api.github.com/users/imjacobclark/repos", "events_url": "https://api.github.com/users/imjacobclark/events{/privacy}", "received_events_url": "https://api.github.com/users/imjacobclark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "imjacobclark", "id": 1641689, "node_id": "MDQ6VXNlcjE2NDE2ODk=", "avatar_url": "https://avatars.githubusercontent.com/u/1641689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imjacobclark", "html_url": "https://github.com/imjacobclark", "followers_url": "https://api.github.com/users/imjacobclark/followers", "following_url": "https://api.github.com/users/imjacobclark/following{/other_user}", "gists_url": "https://api.github.com/users/imjacobclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/imjacobclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imjacobclark/subscriptions", "organizations_url": "https://api.github.com/users/imjacobclark/orgs", "repos_url": "https://api.github.com/users/imjacobclark/repos", "events_url": "https://api.github.com/users/imjacobclark/events{/privacy}", "received_events_url": "https://api.github.com/users/imjacobclark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ea99869a7372c533c6289ec609b75a430d156ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea99869a7372c533c6289ec609b75a430d156ce", "html_url": "https://github.com/rust-lang/rust/commit/2ea99869a7372c533c6289ec609b75a430d156ce"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "1de56220cf4346740966b1c3820616188346edef", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/77edbb7defec2cbc011d9b86301dfa28094f1444/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77edbb7defec2cbc011d9b86301dfa28094f1444/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=77edbb7defec2cbc011d9b86301dfa28094f1444", "patch": "@@ -1055,9 +1055,10 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n \n     let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n         let bounds: &[_] = &ty_param_bounds;\n-        let bound_str = bounds.iter()\n-            .filter_map(|ty_bound| ty_bound.rewrite(context, context.config.max_width, indent))\n-            .join(\" + \");\n+        let bound_str = try_opt!(bounds.iter()\n+            .map(|ty_bound| ty_bound.rewrite(context, context.config.max_width, indent))\n+            .intersperse(Some(\" + \".to_string()))\n+            .collect::<Option<String>>());\n         if bounds.len() > 0 {\n             format!(\": {}\", bound_str)\n         } else {\n@@ -1700,9 +1701,10 @@ fn rewrite_trait_bounds(context: &RewriteContext,\n         return Some(String::new());\n     }\n \n-    let bound_str = bounds.iter()\n-        .filter_map(|ty_bound| ty_bound.rewrite(&context, width, indent))\n-        .join(\" + \");\n+    let bound_str = try_opt!(bounds.iter()\n+        .map(|ty_bound| ty_bound.rewrite(&context, width, indent))\n+        .intersperse(Some(\" + \".to_string()))\n+        .collect::<Option<String>>());\n \n     let mut result = String::new();\n     result.push_str(\": \");"}, {"sha": "8fa24df0caa27a26bbb44ebe76f7ddad4db9f567", "filename": "src/types.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77edbb7defec2cbc011d9b86301dfa28094f1444/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77edbb7defec2cbc011d9b86301dfa28094f1444/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=77edbb7defec2cbc011d9b86301dfa28094f1444", "patch": "@@ -326,40 +326,40 @@ impl Rewrite for ast::WherePredicate {\n                 let type_str = try_opt!(bounded_ty.rewrite(context, width, offset));\n \n                 if !bound_lifetimes.is_empty() {\n-                    let lifetime_str = try_opt!(bound_lifetimes.iter()\n+                    let lifetime_str: String = try_opt!(bound_lifetimes.iter()\n                                                                .map(|lt| {\n                                                                    lt.rewrite(context,\n                                                                               width,\n                                                                               offset)\n                                                                })\n                                                                .intersperse(Some(\", \".to_string()))\n-                                                               .collect::<Option<String>>());\n+                                                               .collect());\n \n                     // 8 = \"for<> : \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + 8;\n                     let budget = try_opt!(width.checked_sub(used_width));\n-                    let bounds_str = try_opt!(bounds.iter()\n+                    let bounds_str: String = try_opt!(bounds.iter()\n                                                     .map(|ty_bound| {\n                                                         ty_bound.rewrite(context,\n                                                                          budget,\n                                                                          offset + used_width)\n                                                     })\n                                                     .intersperse(Some(\" + \".to_string()))\n-                                                    .collect::<Option<String>>());\n+                                                    .collect());\n \n                     format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n                 } else {\n                     // 2 = \": \".len()\n                     let used_width = type_str.len() + 2;\n                     let budget = try_opt!(width.checked_sub(used_width));\n-                    let bounds_str = try_opt!(bounds.iter()\n+                    let bounds_str: String = try_opt!(bounds.iter()\n                                                     .map(|ty_bound| {\n                                                         ty_bound.rewrite(context,\n                                                                          budget,\n                                                                          offset + used_width)\n                                                     })\n                                                     .intersperse(Some(\" + \".to_string()))\n-                                                    .collect::<Option<String>>());\n+                                                    .collect());\n \n                     format!(\"{}: {}\", type_str, bounds_str)\n                 }\n@@ -451,11 +451,11 @@ impl Rewrite for ast::TyParam {\n         if !self.bounds.is_empty() {\n             result.push_str(\": \");\n \n-            let bounds = try_opt!(self.bounds\n+            let bounds: String = try_opt!(self.bounds\n                 .iter()\n                 .map(|ty_bound| ty_bound.rewrite(context, width, offset))\n                 .intersperse(Some(\" + \".to_string()))\n-                .collect::<Option<String>>());\n+                .collect());\n \n             result.push_str(&bounds);\n         }\n@@ -478,11 +478,11 @@ impl Rewrite for ast::TyParam {\n impl Rewrite for ast::PolyTraitRef {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         if !self.bound_lifetimes.is_empty() {\n-            let lifetime_str = try_opt!(self.bound_lifetimes\n+            let lifetime_str: String = try_opt!(self.bound_lifetimes\n                 .iter()\n                 .map(|lt| lt.rewrite(context, width, offset))\n                 .intersperse(Some(\", \".to_string()))\n-                .collect::<Option<String>>());\n+                .collect());\n \n             // 6 is \"for<> \".len()\n             let extra_offset = lifetime_str.len() + 6;"}]}