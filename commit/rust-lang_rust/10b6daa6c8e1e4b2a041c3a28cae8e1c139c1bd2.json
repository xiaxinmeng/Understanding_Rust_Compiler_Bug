{"sha": "10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYjZkYWE2YzhlMWU0YjJhMDQxYzNhMjhjYWU4ZTFjMTM5YzFiZDI=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-05-20T00:08:52Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-05T20:09:27Z"}, "message": "Reblessed tests.", "tree": {"sha": "d00d37721de56756c4b6a2e1f2d15241e35f4119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00d37721de56756c4b6a2e1f2d15241e35f4119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "html_url": "https://github.com/rust-lang/rust/commit/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c105c28de0df081c29a789fb58250eebc48b5eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c105c28de0df081c29a789fb58250eebc48b5eed", "html_url": "https://github.com/rust-lang/rust/commit/c105c28de0df081c29a789fb58250eebc48b5eed"}], "stats": {"total": 931, "additions": 255, "deletions": 676}, "files": [{"sha": "0caf268aa007fb691e9d21f2eab75cde8348faea", "filename": "src/test/run-make-fulldeps/libtest-json/output.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput.json", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput.json?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -2,7 +2,7 @@\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"a\" }\n { \"type\": \"test\", \"name\": \"a\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"b\" }\n-{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:8:5\\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\\n\" }\n+{ \"type\": \"test\", \"name\": \"b\", \"event\": \"failed\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:8:5\\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"c\" }\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }"}, {"sha": "8bc00020652714ac9c4535cfdb5fed2c854078bc", "filename": "src/test/run-pass/multi-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Frun-pass%2Fmulti-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-panic.rs?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -8,7 +8,7 @@ fn check_for_no_backtrace(test: std::process::Output) {\n     let mut it = err.lines();\n \n     assert_eq!(it.next().map(|l| l.starts_with(\"thread '<unnamed>' panicked at\")), Some(true));\n-    assert_eq!(it.next(), Some(\"note: Run with `RUST_BACKTRACE=1` \\\n+    assert_eq!(it.next(), Some(\"note: run with `RUST_BACKTRACE=1` \\\n                                 environment variable to display a backtrace.\"));\n     assert_eq!(it.next().map(|l| l.starts_with(\"thread 'main' panicked at\")), Some(true));\n     assert_eq!(it.next(), None);"}, {"sha": "e362ecf349e459fb2ed40181613dd29c5328f3f3", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -27,7 +27,7 @@ stderr:\n stderr 1\n stderr 2\n thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:7:1\n-note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n \n "}, {"sha": "68367c916546c8fa038e6d3f0ad948eba7806968", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,3 +1,9 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+  --> $DIR/duplicate.rs:7:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:12:36\n    |\n@@ -624,4 +630,3 @@ error: could not find defining uses\n \n error: aborting due to 93 previous errors\n \n-For more information about this error, try `rustc --explain E0719`."}, {"sha": "5fe4818ef8fed9bd60bbcc69f7e232291a9e1ee6", "filename": "src/test/ui/associated-type-bounds/dyn-lcsit.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+  --> $DIR/dyn-lcsit.rs:4:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "9968f3e8bac5ef5b30011efac01feabfef428eb7", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -2,9 +2,7 @@ error[E0623]: lifetime mismatch\n   --> $DIR/implied-region-constraints.rs:19:64\n    |\n LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n-   |                          -------------\n-   |                          |\n-   |                          this type is declared with multiple lifetimes...\n+   |                          ------------- this type is declared with multiple lifetimes...\n ...\n LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    |                                                                ^^^^^ ...but data with one lifetime flows into the other here\n@@ -13,13 +11,10 @@ error[E0623]: lifetime mismatch\n   --> $DIR/implied-region-constraints.rs:40:72\n    |\n LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n-   |                           --------------\n-   |                           |\n-   |                           this type is declared with multiple lifetimes...\n+   |                           -------------- this type is declared with multiple lifetimes...\n ...\n LL |             let _failure_proves_not_implied_outlives_region_b: &'b T = &x;\n    |                                                                        ^^ ...but data with one lifetime flows into the other here\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0623`."}, {"sha": "8fda11beddc4fe356ea610b5256912d8fed73d15", "filename": "src/test/ui/associated-type-bounds/lcsit.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+  --> $DIR/lcsit.rs:4:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "1405cb1b4736cce98af69cf9f6a984f2d7cceb53", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n    |\n LL |     let _: i32 = f2(2i32);\n    |                  ^^^^^^^^ expected i32, found u32\n-help: you can convert an `u32` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "bffb11640744c6bf7b06d900b28db9dbb7dd690b", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 13, "deletions": 91, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,80 +1,5 @@\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:14:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 4);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5);\n-   |                        ^^ - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:26:24\n-   |\n-LL |     let c1 = to_fn_mut(|| set(&mut x));\n-   |                        --          - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x));\n-   |                        ^^          - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:34:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 5);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x));\n-   |                        ^^          - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:42:24\n-   |\n-LL |     let c1 = to_fn_mut(|| x = 5);\n-   |                        -- - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n-   |                        ^^                                  - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n-  --> $DIR/borrowck-closures-two-mut.rs:55:24\n-   |\n-LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n-   |                        --           - previous borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n-   |                        ^^           - borrow occurs due to use of `x` in closure\n-   |                        |\n-   |                        second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:14:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut.rs:12:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - first borrow occurs due to use of `x` in closure\n@@ -84,12 +9,11 @@ LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:26:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut.rs:23:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - first borrow occurs due to use of `x` in closure\n@@ -99,12 +23,11 @@ LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:34:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut.rs:30:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - first borrow occurs due to use of `x` in closure\n@@ -114,12 +37,11 @@ LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:42:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut.rs:37:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - first borrow occurs due to use of `x` in closure\n@@ -129,12 +51,12 @@ LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nes\n    |                        ^^                                  - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-...\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n-  --> $DIR/borrowck-closures-two-mut.rs:55:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut.rs:49:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n    |                        --           - first borrow occurs due to use of `x` in closure\n@@ -144,10 +66,10 @@ LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-...\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0499`."}, {"sha": "f8f14b6435f086a62704a5ff295404e41294d2e3", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,15 +1,5 @@\n-error[E0382]: use of moved value: `x` (Ast)\n-  --> $DIR/borrowck-reinit.rs:8:16\n-   |\n-LL |     drop(x);\n-   |          - value moved here\n-LL |     let _ = (1,x);\n-   |                ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `x` (Mir)\n-  --> $DIR/borrowck-reinit.rs:8:16\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/borrowck-reinit.rs:6:16\n    |\n LL |     let mut x = Box::new(0);\n    |         ----- move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -19,6 +9,6 @@ LL |     drop(x);\n LL |     let _ = (1,x);\n    |                ^ value used here after move\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "5b9f49c2e7c920ad80620ad263b26e4089c3cf15", "filename": "src/test/ui/borrowck/borrowck-storage-dead.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,15 +1,9 @@\n-error[E0381]: use of possibly uninitialized variable: `x` (Ast)\n-  --> $DIR/borrowck-storage-dead.rs:18:17\n+error[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/borrowck-storage-dead.rs:16:17\n    |\n LL |         let _ = x + 1;\n    |                 ^ use of possibly uninitialized `x`\n \n-error[E0381]: use of possibly uninitialized variable: `x` (Mir)\n-  --> $DIR/borrowck-storage-dead.rs:18:17\n-   |\n-LL |         let _ = x + 1;\n-   |                 ^ use of possibly uninitialized `x`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0381`."}, {"sha": "7255ca327e753328a56579e421fc06fe8f9cd0cb", "filename": "src/test/ui/borrowck/immutable-arg.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,19 +1,11 @@\n-error[E0384]: cannot assign twice to immutable variable `_x` (Ast)\n-  --> $DIR/immutable-arg.rs:4:5\n-   |\n-LL | fn foo(_x: u32) {\n-   |        -- first assignment to `_x`\n-LL |     _x = 4;\n-   |     ^^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign to immutable argument `_x` (Mir)\n-  --> $DIR/immutable-arg.rs:4:5\n+error[E0384]: cannot assign to immutable argument `_x`\n+  --> $DIR/immutable-arg.rs:2:5\n    |\n LL | fn foo(_x: u32) {\n    |        -- help: make this binding mutable: `mut _x`\n LL |     _x = 4;\n    |     ^^^^^^ cannot assign to immutable argument\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0384`."}, {"sha": "422d1605aa46b78a2b0fff91d8285f6a80c35336", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,29 +1,11 @@\n-error[E0382]: use of partially moved value: `maybe` (Ast)\n-  --> $DIR/issue-41962.rs:7:30\n-   |\n-LL |         if let Some(thing) = maybe {\n-   |                     -----    ^^^^^ value used here after move\n-   |                     |\n-   |                     value moved here\n-   |\n-   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast)\n-  --> $DIR/issue-41962.rs:7:21\n-   |\n-LL |         if let Some(thing) = maybe {\n-   |                     ^^^^^ value moved here in previous iteration of loop\n-   |\n-   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value (Mir)\n-  --> $DIR/issue-41962.rs:7:21\n+error[E0382]: use of moved value\n+  --> $DIR/issue-41962.rs:5:21\n    |\n LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "33f981d1eba9b38c684b1dbd60095d35b90fa588", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -4,17 +4,17 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n \n-error: type parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:4:21\n    |\n-LL | fn foo<const X: (), T>(_: &T) {\n-   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n+LL | fn bar<const X: (), 'a>(_: &'a ()) {\n+   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n \n-error: lifetime parameters must be declared prior to const parameters\n+error: type parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:8:21\n    |\n-LL | fn bar<const X: (), 'a>(_: &'a ()) {\n-   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n+LL | fn foo<const X: (), T>(_: &T) {\n+   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c6881d5a5735f39b3be48b70863276a412c2df93", "filename": "src/test/ui/deprecation/deprecation-in-staged-api.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,4 +1,4 @@\n-error: `#[deprecated]` cannot be used in staged api, use `#[rustc_deprecated]` instead\n+error: `#[deprecated]` cannot be used in staged API; use `#[rustc_deprecated]` instead\n   --> $DIR/deprecation-in-staged-api.rs:8:1\n    |\n LL | fn main() { }"}, {"sha": "c1513ef9b71573fe21383d6e7e4c70d9ff0102db", "filename": "src/test/ui/generator/yield-while-local-borrowed.stderr", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,39 +1,21 @@\n-error[E0626]: borrow may still be in use when generator yields (Ast)\n-  --> $DIR/yield-while-local-borrowed.rs:15:22\n-   |\n-LL |         let a = &mut 3;\n-   |                      ^\n-...\n-LL |         yield();\n-   |         ------- possible yield occurs here\n-\n-error[E0626]: borrow may still be in use when generator yields (Ast)\n-  --> $DIR/yield-while-local-borrowed.rs:43:22\n-   |\n-LL |             let b = &a;\n-   |                      ^\n-...\n-LL |             yield();\n-   |             ------- possible yield occurs here\n-\n-error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/yield-while-local-borrowed.rs:15:17\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/yield-while-local-borrowed.rs:13:17\n    |\n LL |         let a = &mut 3;\n    |                 ^^^^^^\n-...\n+LL |\n LL |         yield();\n    |         ------- possible yield occurs here\n \n-error[E0626]: borrow may still be in use when generator yields (Mir)\n-  --> $DIR/yield-while-local-borrowed.rs:43:21\n+error[E0626]: borrow may still be in use when generator yields\n+  --> $DIR/yield-while-local-borrowed.rs:40:21\n    |\n LL |             let b = &a;\n    |                     ^^\n-...\n+LL |\n LL |             yield();\n    |             ------- possible yield occurs here\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0626`."}, {"sha": "3300db58d44c3385dfba77eed2cd58c602612d11", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n    |\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n    |                  ^ expected isize, found usize\n-help: you can convert an `usize` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "80b601dc4394b0de8bb8d5b41d4ddc34f02d32dc", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a16);\n    |           ^^^ expected i8, found i16\n-help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(a16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a32);\n    |           ^^^ expected i8, found i32\n-help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(a32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a64);\n    |           ^^^ expected i8, found i64\n-help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(a64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(a32);\n    |            ^^^ expected i16, found i32\n-help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(a32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -52,7 +52,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(a64);\n    |            ^^^ expected i16, found i64\n-help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i32(a64);\n    |            ^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     id_i32(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -117,7 +117,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c16);\n    |           ^^^ expected i8, found i16\n-help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(c16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -127,7 +127,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c32);\n    |           ^^^ expected i8, found i32\n-help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(c32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -137,7 +137,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c64);\n    |           ^^^ expected i8, found i64\n-help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     id_i8(c64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -156,7 +156,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(c32);\n    |            ^^^ expected i16, found i32\n-help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(c32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -166,7 +166,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(c64);\n    |            ^^^ expected i16, found i64\n-help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     id_i16(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -194,7 +194,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i32(c64);\n    |            ^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     id_i32(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -231,7 +231,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b16);\n    |           ^^^ expected u8, found u16\n-help: you can convert an `u16` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -241,7 +241,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b32);\n    |           ^^^ expected u8, found u32\n-help: you can convert an `u32` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -251,7 +251,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b64);\n    |           ^^^ expected u8, found u64\n-help: you can convert an `u64` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     id_u8(b64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +270,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u16(b32);\n    |            ^^^ expected u16, found u32\n-help: you can convert an `u32` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     id_u16(b32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -280,7 +280,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u16(b64);\n    |            ^^^ expected u16, found u64\n-help: you can convert an `u64` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     id_u16(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -308,7 +308,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u32(b64);\n    |            ^^^ expected u32, found u64\n-help: you can convert an `u64` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     id_u32(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7cfd754f72d8e808e08f554484211b26485e2a4d", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo(1*(1 as isize));\n    |         ^^^^^^^^^^^^^^ expected i16, found isize\n-help: you can convert an `isize` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo((1*(1 as isize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     bar(1*(1 as usize));\n    |         ^^^^^^^^^^^^^^ expected u32, found usize\n-help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     bar((1*(1 as usize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e7555b958a3d4473359c7d07afc74071df3f8321", "filename": "src/test/ui/issues/issue-31910.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     X = Trait::Number,\n    |         ^^^^^^^^^^^^^ expected isize, found i32\n-help: you can convert an `i32` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     X = Trait::Number.try_into().unwrap(),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "30c69f19658c84e0240bdc95a22938fd7a16133b", "filename": "src/test/ui/issues/issue-45697-1.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,12 +1,4 @@\n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n-  --> $DIR/issue-45697-1.rs:20:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                        - borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n-\n-error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n   --> $DIR/issue-45697-1.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -17,7 +9,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Mir)\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n   --> $DIR/issue-45697-1.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -28,7 +20,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0503, E0506.\n For more information about an error, try `rustc --explain E0503`."}, {"sha": "26749d36f0b7b69495db9ca915c2068788f1c65f", "filename": "src/test/ui/issues/issue-45697.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-45697.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-45697.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45697.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,12 +1,4 @@\n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n-  --> $DIR/issue-45697.rs:20:9\n-   |\n-LL |         let z = copy_borrowed_ptr(&mut y);\n-   |                                        - borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1;\n-   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n-\n-error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n   --> $DIR/issue-45697.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -17,7 +9,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Mir)\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n   --> $DIR/issue-45697.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -28,7 +20,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0503, E0506.\n For more information about an error, try `rustc --explain E0503`."}, {"sha": "b09f31729a5fdcc366e694af63094c94b9bac1c5", "filename": "src/test/ui/issues/issue-46471-1.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,16 +1,5 @@\n-error[E0597]: `z` does not live long enough (Ast)\n-  --> $DIR/issue-46471-1.rs:6:14\n-   |\n-LL |         &mut z\n-   |              ^ borrowed value does not live long enough\n-LL |     };\n-   |     - `z` dropped here while still borrowed\n-...\n-LL | }\n-   | - borrowed value needs to live until here\n-\n-error[E0597]: `z` does not live long enough (Mir)\n-  --> $DIR/issue-46471-1.rs:6:9\n+error[E0597]: `z` does not live long enough\n+  --> $DIR/issue-46471-1.rs:4:9\n    |\n LL |         &mut z\n    |         ^^^^^^\n@@ -20,6 +9,6 @@ LL |         &mut z\n LL |     };\n    |     - `z` dropped here while still borrowed\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "935414c1f3f9da5dd3aade98b6f1be4dc30607e3", "filename": "src/test/ui/issues/issue-46471.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,21 +1,9 @@\n-error[E0597]: `x` does not live long enough (Ast)\n-  --> $DIR/issue-46471.rs:5:6\n-   |\n-LL |     &x\n-   |      ^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - borrowed value only lives until here\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error[E0515]: cannot return reference to local variable `x` (Mir)\n-  --> $DIR/issue-46471.rs:5:5\n+error[E0515]: cannot return reference to local variable `x`\n+  --> $DIR/issue-46471.rs:3:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0515, E0597.\n-For more information about an error, try `rustc --explain E0515`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "6e561e03a8b7a1068210869dd85737022065a7d2", "filename": "src/test/ui/issues/issue-46472.stderr", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,28 +1,12 @@\n-error[E0597]: borrowed value does not live long enough (Ast)\n-  --> $DIR/issue-46472.rs:4:10\n-   |\n-LL |     &mut 4\n-   |          ^ temporary value does not live long enough\n-...\n-LL | }\n-   | - temporary value only lives until here\n-   |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 3:8...\n-  --> $DIR/issue-46472.rs:3:8\n-   |\n-LL | fn bar<'a>() -> &'a mut u32 {\n-   |        ^^\n-\n-error[E0515]: cannot return reference to temporary value (Mir)\n-  --> $DIR/issue-46472.rs:4:5\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/issue-46472.rs:2:5\n    |\n LL |     &mut 4\n    |     ^^^^^-\n    |     |    |\n    |     |    temporary value created here\n    |     returns a reference to data owned by the current function\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0515, E0597.\n-For more information about an error, try `rustc --explain E0515`.\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "c646912d3b67950583d857964329692d36846745", "filename": "src/test/ui/lifetimes/lifetime-errors/liveness-assign-imm-local-notes.stderr", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,36 +1,5 @@\n-error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:13:9\n-   |\n-LL |         x = 2;\n-   |         ----- first assignment to `x`\n-LL |         x = 3;\n-   |         ^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:25:13\n-   |\n-LL |             x = 2;\n-   |             ----- first assignment to `x`\n-LL |             x = 3;\n-   |             ^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:35:13\n-   |\n-LL |             x = 1;\n-   |             ^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:38:13\n-   |\n-LL |             x = 1;\n-   |             ----- first assignment to `x`\n-...\n-LL |             x = 2;\n-   |             ^^^^^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:13:9\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/liveness-assign-imm-local-notes.rs:10:9\n    |\n LL |     let x;\n    |         - help: make this binding mutable: `mut x`\n@@ -40,8 +9,8 @@ LL |         x = 2;\n LL |         x = 3;\n    |         ^^^^^ cannot assign twice to immutable variable\n \n-error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:25:13\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/liveness-assign-imm-local-notes.rs:21:13\n    |\n LL |         let x;\n    |             - help: make this binding mutable: `mut x`\n@@ -51,27 +20,27 @@ LL |             x = 2;\n LL |             x = 3;\n    |             ^^^^^ cannot assign twice to immutable variable\n \n-error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:35:13\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/liveness-assign-imm-local-notes.rs:30:13\n    |\n LL |     let x;\n    |         - help: make this binding mutable: `mut x`\n ...\n LL |             x = 1;\n    |             ^^^^^ cannot assign twice to immutable variable\n \n-error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n-  --> $DIR/liveness-assign-imm-local-notes.rs:38:13\n+error[E0384]: cannot assign twice to immutable variable `x`\n+  --> $DIR/liveness-assign-imm-local-notes.rs:32:13\n    |\n LL |     let x;\n    |         - help: make this binding mutable: `mut x`\n ...\n LL |             x = 1;\n    |             ----- first assignment to `x`\n-...\n+LL |         } else {\n LL |             x = 2;\n    |             ^^^^^ cannot assign twice to immutable variable\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0384`."}, {"sha": "b1bd749bef4a254e9f121ffcfcd27e61e4ce8f30", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n    |\n LL |     let y: usize = x.foo();\n    |                    ^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     let y: usize = x.foo().try_into().unwrap();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "881d9fd32029eb885f2420a88780d62981f8ef6c", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -6,7 +6,7 @@ LL |                   $arr.len() * size_of($arr[0]));\n ...\n LL |     write!(hello);\n    |     -------------- in this macro invocation\n-help: you can convert an `usize` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "2e1ddbdf57f98cd7a97095713b2d606e60c812b1", "filename": "src/test/ui/moves/moves-based-on-type-tuple.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,15 +1,5 @@\n-error[E0382]: use of moved value: `x` (Ast)\n-  --> $DIR/moves-based-on-type-tuple.rs:6:13\n-   |\n-LL |     box (x, x)\n-   |          -  ^ value used here after move\n-   |          |\n-   |          value moved here\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `x` (Mir)\n-  --> $DIR/moves-based-on-type-tuple.rs:6:13\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/moves-based-on-type-tuple.rs:4:13\n    |\n LL | fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> {\n    |        - move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -18,6 +8,6 @@ LL |     box (x, x)\n    |          |\n    |          value moved here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "af79771e7e1b9acfaffaf421d3bfdb211b300ea5", "filename": "src/test/ui/nll/get_default.stderr", "status": "modified", "additions": 11, "deletions": 47, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,41 +1,5 @@\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:23:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 map.set(String::new()); // Ideally, this would not error.\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:35:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-LL |             Some(v) => {\n-LL |                 map.set(String::new()); // Both AST and MIR error here\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:41:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 map.set(String::new()); // Ideally, just AST would error here\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:23:17\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:21:17\n    |\n LL | fn ok(map: &mut Map) -> &String {\n    |            - let's call the lifetime of this reference `'1`\n@@ -47,10 +11,10 @@ LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`\n ...\n LL |                 map.set(String::new()); // Ideally, this would not error.\n-   |                 ^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n \n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:35:17\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:32:17\n    |\n LL | fn err(map: &mut Map) -> &String {\n    |             - let's call the lifetime of this reference `'1`\n@@ -59,13 +23,13 @@ LL |         match map.get() {\n    |               --- immutable borrow occurs here\n LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n-   |                 ^^^ mutable borrow occurs here\n-...\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |\n LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`\n \n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:41:17\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:37:17\n    |\n LL | fn err(map: &mut Map) -> &String {\n    |             - let's call the lifetime of this reference `'1`\n@@ -77,8 +41,8 @@ LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`\n ...\n LL |                 map.set(String::new()); // Ideally, just AST would error here\n-   |                 ^^^ mutable borrow occurs here\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "eb8442b31d7c73b323076b65fee62c112f77bfa5", "filename": "src/test/ui/nll/loan_ends_mid_block_pair.stderr", "status": "modified", "additions": 3, "deletions": 57, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,59 +1,5 @@\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:14:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-LL |     capitalize(c);\n-LL |     data.0 = 'e';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:17:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-...\n-LL |     data.0 = 'f';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:19:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-...\n-LL |     data.0 = 'g';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:28:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-LL |     capitalize(c);\n-LL |     data.0 = 'e';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:30:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-...\n-LL |     data.0 = 'f';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n-  --> $DIR/loan_ends_mid_block_pair.rs:32:5\n-   |\n-LL |     let c = &mut data.0;\n-   |                  ------ borrow of `data.0` occurs here\n-...\n-LL |     data.0 = 'g';\n-   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n-\n-error[E0506]: cannot assign to `data.0` because it is borrowed (Mir)\n-  --> $DIR/loan_ends_mid_block_pair.rs:14:5\n+error[E0506]: cannot assign to `data.0` because it is borrowed\n+  --> $DIR/loan_ends_mid_block_pair.rs:12:5\n    |\n LL |     let c = &mut data.0;\n    |             ----------- borrow of `data.0` occurs here\n@@ -64,6 +10,6 @@ LL |     data.0 = 'e';\n LL |     capitalize(c);\n    |                - borrow later used here\n \n-error: aborting due to 7 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0506`."}, {"sha": "c0b97bea348c4b99c5b07be4ce1d53635ee7abd1", "filename": "src/test/ui/nll/loan_ends_mid_block_vec.stderr", "status": "modified", "additions": 8, "deletions": 80, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,77 +1,5 @@\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:13:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-LL |     capitalize(slice);\n-LL |     data.push('d');\n-   |     ^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:16:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-...\n-LL |     data.push('e');\n-   |     ^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:19:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-...\n-LL |     data.push('f');\n-   |     ^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:29:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-LL |     capitalize(slice);\n-LL |     data.push('d');\n-   |     ^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:31:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-...\n-LL |     data.push('e');\n-   |     ^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n-  --> $DIR/loan_ends_mid_block_vec.rs:33:5\n-   |\n-LL |     let slice = &mut data;\n-   |                      ---- first mutable borrow occurs here\n-...\n-LL |     data.push('f');\n-   |     ^^^^ second mutable borrow occurs here\n-LL |\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n-  --> $DIR/loan_ends_mid_block_vec.rs:13:5\n+error[E0499]: cannot borrow `data` as mutable more than once at a time\n+  --> $DIR/loan_ends_mid_block_vec.rs:11:5\n    |\n LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n@@ -82,8 +10,8 @@ LL |     data.push('d');\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n \n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n-  --> $DIR/loan_ends_mid_block_vec.rs:16:5\n+error[E0499]: cannot borrow `data` as mutable more than once at a time\n+  --> $DIR/loan_ends_mid_block_vec.rs:13:5\n    |\n LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n@@ -94,18 +22,18 @@ LL |     data.push('e');\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n \n-error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n-  --> $DIR/loan_ends_mid_block_vec.rs:19:5\n+error[E0499]: cannot borrow `data` as mutable more than once at a time\n+  --> $DIR/loan_ends_mid_block_vec.rs:15:5\n    |\n LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n ...\n LL |     data.push('f');\n    |     ^^^^ second mutable borrow occurs here\n-...\n+LL |\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0499`."}, {"sha": "c03e385790616464648a63bd7b34fbac0fa54441", "filename": "src/test/ui/nll/region-ends-after-if-condition.stderr", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,39 +1,15 @@\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/region-ends-after-if-condition.rs:19:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                  --------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/region-ends-after-if-condition.rs:29:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                  --------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/region-ends-after-if-condition.rs:29:9\n+error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable\n+  --> $DIR/region-ends-after-if-condition.rs:26:9\n    |\n LL |     let value = &my_struct.field;\n    |                 ---------------- immutable borrow occurs here\n LL |     if value.is_empty() {\n LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n ...\n LL |     drop(value);\n    |          ----- immutable borrow later used here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "efd56ea2dd5423ff6cf8aaa9ee803f80f89f9eea", "filename": "src/test/ui/nll/return_from_loop.stderr", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,39 +1,15 @@\n-error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time (Ast)\n-  --> $DIR/return_from_loop.rs:22:9\n-   |\n-LL |     let value = &mut my_struct.field;\n-   |                      --------------- first mutable borrow occurs here\n-LL |     loop {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time (Ast)\n-  --> $DIR/return_from_loop.rs:35:9\n-   |\n-LL |     let value = &mut my_struct.field;\n-   |                      --------------- first mutable borrow occurs here\n-LL |     loop {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-...\n-LL | }\n-   | - first borrow ends here\n-\n-error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time (Mir)\n-  --> $DIR/return_from_loop.rs:22:9\n+error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time\n+  --> $DIR/return_from_loop.rs:20:9\n    |\n LL |     let value = &mut my_struct.field;\n    |                 -------------------- first mutable borrow occurs here\n LL |     loop {\n LL |         my_struct.field.push_str(\"Hello, world!\");\n    |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-...\n+LL |\n LL |         value.len();\n    |         ----- first borrow later used here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0499`."}, {"sha": "3f69bcc7d4a2f3a2ced0320c804a25b09bcdc719", "filename": "src/test/ui/numeric/const-scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -37,7 +37,7 @@ error[E0308]: mismatched types\n    |\n LL |     let d: i8 = c;\n    |                 ^ expected i8, found i32\n-help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     let d: i8 = c.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c767bdd9bd5a5ca41fa1f5644ac4238c3451f317", "filename": "src/test/ui/numeric/len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     test(array.len());\n    |          ^^^^^^^^^^^ expected u32, found usize\n-help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     test(array.len().try_into().unwrap());\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f58389ce96c3b6e3fa7fcdfb131bd231f061f861", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     let x: u16 = foo();\n    |                  ^^^^^ expected u16, found i32\n-help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     let x: u16 = foo().try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     let y: i64 = x + x;\n    |                  ^^^^^ expected i64, found u16\n-help: you can convert an `u16` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     let y: i64 = (x + x).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n    |\n LL |     let z: i32 = x + x;\n    |                  ^^^^^ expected i32, found u16\n-help: you can convert an `u16` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     let z: i32 = (x + x).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e66b83f2b39f5c38a7d5fd26fe38788c98041872", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u64);\n    |                  ^^^^^ expected usize, found u64\n-help: you can convert an `u64` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u32);\n    |                  ^^^^^ expected usize, found u32\n-help: you can convert an `u32` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u16);\n    |                  ^^^^^ expected usize, found u16\n-help: you can convert an `u16` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u8);\n    |                  ^^^^ expected usize, found u8\n-help: you can convert an `u8` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_isize);\n    |                  ^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_isize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,7 +53,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i64);\n    |                  ^^^^^ expected usize, found i64\n-help: you can convert an `i64` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -63,7 +63,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i32);\n    |                  ^^^^^ expected usize, found i32\n-help: you can convert an `i32` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -73,7 +73,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i16);\n    |                  ^^^^^ expected usize, found i16\n-help: you can convert an `i16` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -83,7 +83,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i8);\n    |                  ^^^^ expected usize, found i8\n-help: you can convert an `i8` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -93,7 +93,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_usize);\n    |                  ^^^^^^^ expected isize, found usize\n-help: you can convert an `usize` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_usize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -103,7 +103,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u64);\n    |                  ^^^^^ expected isize, found u64\n-help: you can convert an `u64` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -113,7 +113,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u32);\n    |                  ^^^^^ expected isize, found u32\n-help: you can convert an `u32` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -123,7 +123,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u16);\n    |                  ^^^^^ expected isize, found u16\n-help: you can convert an `u16` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -133,7 +133,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u8);\n    |                  ^^^^ expected isize, found u8\n-help: you can convert an `u8` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -143,7 +143,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i64);\n    |                  ^^^^^ expected isize, found i64\n-help: you can convert an `i64` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -153,7 +153,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i32);\n    |                  ^^^^^ expected isize, found i32\n-help: you can convert an `i32` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i16);\n    |                  ^^^^^ expected isize, found i16\n-help: you can convert an `i16` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -173,7 +173,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i8);\n    |                  ^^^^ expected isize, found i8\n-help: you can convert an `i8` to `isize` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `isize` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -183,7 +183,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_usize);\n    |                ^^^^^^^ expected u64, found usize\n-help: you can convert an `usize` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -220,7 +220,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_isize);\n    |                ^^^^^^^ expected u64, found isize\n-help: you can convert an `isize` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -230,7 +230,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i64);\n    |                ^^^^^ expected u64, found i64\n-help: you can convert an `i64` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -240,7 +240,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i32);\n    |                ^^^^^ expected u64, found i32\n-help: you can convert an `i32` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -250,7 +250,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i16);\n    |                ^^^^^ expected u64, found i16\n-help: you can convert an `i16` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -260,7 +260,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i8);\n    |                ^^^^ expected u64, found i8\n-help: you can convert an `i8` to `u64` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `u64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +270,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_usize);\n    |                ^^^^^^^ expected i64, found usize\n-help: you can convert an `usize` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -280,7 +280,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u64);\n    |                ^^^^^ expected i64, found u64\n-help: you can convert an `u64` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -290,7 +290,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u32);\n    |                ^^^^^ expected i64, found u32\n-help: you can convert an `u32` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -300,7 +300,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u16);\n    |                ^^^^^ expected i64, found u16\n-help: you can convert an `u16` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -310,7 +310,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u8);\n    |                ^^^^ expected i64, found u8\n-help: you can convert an `u8` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -320,7 +320,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_isize);\n    |                ^^^^^^^ expected i64, found isize\n-help: you can convert an `isize` to `i64` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `i64` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -357,7 +357,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_usize);\n    |                ^^^^^^^ expected u32, found usize\n-help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -367,7 +367,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_u64);\n    |                ^^^^^ expected u32, found u64\n-help: you can convert an `u64` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -395,7 +395,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_isize);\n    |                ^^^^^^^ expected u32, found isize\n-help: you can convert an `isize` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -405,7 +405,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i64);\n    |                ^^^^^ expected u32, found i64\n-help: you can convert an `i64` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -415,7 +415,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i32);\n    |                ^^^^^ expected u32, found i32\n-help: you can convert an `i32` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -425,7 +425,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i16);\n    |                ^^^^^ expected u32, found i16\n-help: you can convert an `i16` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -435,7 +435,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i8);\n    |                ^^^^ expected u32, found i8\n-help: you can convert an `i8` to `u32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `u32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -445,7 +445,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_usize);\n    |                ^^^^^^^ expected i32, found usize\n-help: you can convert an `usize` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -455,7 +455,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u64);\n    |                ^^^^^ expected i32, found u64\n-help: you can convert an `u64` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -465,7 +465,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u32);\n    |                ^^^^^ expected i32, found u32\n-help: you can convert an `u32` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -475,7 +475,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u16);\n    |                ^^^^^ expected i32, found u16\n-help: you can convert an `u16` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -485,7 +485,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u8);\n    |                ^^^^ expected i32, found u8\n-help: you can convert an `u8` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -495,7 +495,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_isize);\n    |                ^^^^^^^ expected i32, found isize\n-help: you can convert an `isize` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -505,7 +505,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_i64);\n    |                ^^^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -533,7 +533,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_usize);\n    |                ^^^^^^^ expected u16, found usize\n-help: you can convert an `usize` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -543,7 +543,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_u64);\n    |                ^^^^^ expected u16, found u64\n-help: you can convert an `u64` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -553,7 +553,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_u32);\n    |                ^^^^^ expected u16, found u32\n-help: you can convert an `u32` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -572,7 +572,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_isize);\n    |                ^^^^^^^ expected u16, found isize\n-help: you can convert an `isize` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -582,7 +582,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i64);\n    |                ^^^^^ expected u16, found i64\n-help: you can convert an `i64` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -592,7 +592,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i32);\n    |                ^^^^^ expected u16, found i32\n-help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -602,7 +602,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i16);\n    |                ^^^^^ expected u16, found i16\n-help: you can convert an `i16` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -612,7 +612,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i8);\n    |                ^^^^ expected u16, found i8\n-help: you can convert an `i8` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -622,7 +622,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_usize);\n    |                ^^^^^^^ expected i16, found usize\n-help: you can convert an `usize` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -632,7 +632,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u64);\n    |                ^^^^^ expected i16, found u64\n-help: you can convert an `u64` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -642,7 +642,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u32);\n    |                ^^^^^ expected i16, found u32\n-help: you can convert an `u32` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -652,7 +652,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u16);\n    |                ^^^^^ expected i16, found u16\n-help: you can convert an `u16` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -662,7 +662,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u8);\n    |                ^^^^ expected i16, found u8\n-help: you can convert an `u8` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -672,7 +672,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_isize);\n    |                ^^^^^^^ expected i16, found isize\n-help: you can convert an `isize` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -682,7 +682,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_i64);\n    |                ^^^^^ expected i16, found i64\n-help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -692,7 +692,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_i32);\n    |                ^^^^^ expected i16, found i32\n-help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -711,7 +711,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_usize);\n    |               ^^^^^^^ expected u8, found usize\n-help: you can convert an `usize` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -721,7 +721,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u64);\n    |               ^^^^^ expected u8, found u64\n-help: you can convert an `u64` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -731,7 +731,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u32);\n    |               ^^^^^ expected u8, found u32\n-help: you can convert an `u32` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -741,7 +741,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u16);\n    |               ^^^^^ expected u8, found u16\n-help: you can convert an `u16` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -751,7 +751,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_isize);\n    |               ^^^^^^^ expected u8, found isize\n-help: you can convert an `isize` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_isize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -761,7 +761,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i64);\n    |               ^^^^^ expected u8, found i64\n-help: you can convert an `i64` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -771,7 +771,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i32);\n    |               ^^^^^ expected u8, found i32\n-help: you can convert an `i32` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -781,7 +781,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i16);\n    |               ^^^^^ expected u8, found i16\n-help: you can convert an `i16` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -791,7 +791,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i8);\n    |               ^^^^ expected u8, found i8\n-help: you can convert an `i8` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i8` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -801,7 +801,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_usize);\n    |               ^^^^^^^ expected i8, found usize\n-help: you can convert an `usize` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `usize` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -811,7 +811,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u64);\n    |               ^^^^^ expected i8, found u64\n-help: you can convert an `u64` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -821,7 +821,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u32);\n    |               ^^^^^ expected i8, found u32\n-help: you can convert an `u32` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -831,7 +831,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u16);\n    |               ^^^^^ expected i8, found u16\n-help: you can convert an `u16` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -841,7 +841,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u8);\n    |               ^^^^ expected i8, found u8\n-help: you can convert an `u8` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `u8` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -851,7 +851,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_isize);\n    |               ^^^^^^^ expected i8, found isize\n-help: you can convert an `isize` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_isize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -861,7 +861,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i64);\n    |               ^^^^^ expected i8, found i64\n-help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -871,7 +871,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i32);\n    |               ^^^^^ expected i8, found i32\n-help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -881,7 +881,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i16);\n    |               ^^^^^ expected i8, found i16\n-help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c4f6e0212621fba8ae924db16cddf38219ac3ee3", "filename": "src/test/ui/pattern/const-pat-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fconst-pat-ice.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,5 +1,5 @@\n thread 'rustc' panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())', src/librustc_mir/hair/pattern/_match.rs:1085:5\n-note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic\n "}, {"sha": "596264ba16b424ef82d282278f86d1d12766e078", "filename": "src/test/ui/pub/pub-restricted.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -21,7 +21,18 @@ LL | pub (b) fn bfn() {}\n            `pub(in path::to::module)`: visible only on the specified path\n \n error[E0704]: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:22:14\n+  --> $DIR/pub-restricted.rs:7:6\n+   |\n+LL | pub (crate::a) fn cfn() {}\n+   |      ^^^^^^^^ help: make this visible only to module `crate::a` with `in`: `in crate::a`\n+   |\n+   = help: some possible visibility restrictions are:\n+           `pub(crate)`: visible only on the current crate\n+           `pub(super)`: visible only in the current module's parent\n+           `pub(in path::to::module)`: visible only on the specified path\n+\n+error[E0704]: incorrect visibility restriction\n+  --> $DIR/pub-restricted.rs:24:14\n    |\n LL |         pub (a) invalid: usize,\n    |              ^ help: make this visible only to module `a` with `in`: `in a`\n@@ -32,7 +43,7 @@ LL |         pub (a) invalid: usize,\n            `pub(in path::to::module)`: visible only on the specified path\n \n error[E0704]: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:31:6\n+  --> $DIR/pub-restricted.rs:33:6\n    |\n LL | pub (xyz) fn xyz() {}\n    |      ^^^ help: make this visible only to module `xyz` with `in`: `in xyz`\n@@ -43,11 +54,11 @@ LL | pub (xyz) fn xyz() {}\n            `pub(in path::to::module)`: visible only on the specified path\n \n error: visibilities can only be restricted to ancestor modules\n-  --> $DIR/pub-restricted.rs:23:17\n+  --> $DIR/pub-restricted.rs:25:17\n    |\n LL |         pub (in x) non_parent_invalid: usize,\n    |                 ^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0704`."}, {"sha": "df73ac0b182f05d553a5e4ce056cd6fcc1ec9ea4", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0; -4_isize];\n    |                 ^^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     let f = [0; (-4_isize).try_into().unwrap()];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -52,7 +52,7 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0_usize; -1_isize];\n    |                       ^^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n    |\n LL |     let f = [0_usize; (-1_isize).try_into().unwrap()];\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "409fabb951adc644967bdd161f0d5c81a668a2ac", "filename": "src/test/ui/shift-various-bad-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -27,7 +27,7 @@ error[E0308]: mismatched types\n    |\n LL |     let _: i32 = 22_i64 >> 1_i32;\n    |                  ^^^^^^^^^^^^^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n    |\n LL |     let _: i32 = (22_i64 >> 1_i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7539cbada8b7b5a258d4993fc1ad08fedad63372", "filename": "src/test/ui/symbol-names/basic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,4 +1,4 @@\n-error: symbol-name(_ZN5basic4main17h08bcaf310214ed52E)\n+error: symbol-name(_ZN5basic4main17hd72940ef9669d526E)\n   --> $DIR/basic.rs:3:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "20e48782a3a9e5dfeafeab1c854b5cc9234155e6", "filename": "src/test/ui/symbol-names/impl1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -1,4 +1,4 @@\n-error: symbol-name(_ZN5impl13foo3Foo3bar17hc487d6ec13fe9124E)\n+error: symbol-name(_ZN5impl13foo3Foo3bar17he53b9bee7600ed8dE)\n   --> $DIR/impl1.rs:8:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -10,7 +10,7 @@ error: def-path(foo::Foo::bar)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h38577281258e1527E)\n+error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h86c41f0462d901d4E)\n   --> $DIR/impl1.rs:18:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "e9c28248044f9ad0f5038319e9b6b8fbdf3470f7", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -6,7 +6,7 @@ LL | fn global_bound_is_hidden() -> u8\n ...\n LL |     B::get_x()\n    |     ^^^^^^^^^^ expected u8, found i32\n-help: you can convert an `i32` to `u8` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n    |\n LL |     B::get_x().try_into().unwrap()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f3e1cc41cada2343b57511efced86172374a23eb", "filename": "src/test/ui/tutorial-suffix-inference-test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr?ref=10b6daa6c8e1e4b2a041c3a28cae8e1c139c1bd2", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n    |\n LL |     identity_u16(y);\n    |                  ^ expected u16, found i32\n-help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     identity_u16(y.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n    |\n LL |     identity_u16(a);\n    |                  ^ expected u16, found isize\n-help: you can convert an `isize` to `u16` or panic if it the converted value wouldn't fit\n+help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n    |\n LL |     identity_u16(a.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}]}