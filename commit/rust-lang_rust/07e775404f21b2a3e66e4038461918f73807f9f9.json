{"sha": "07e775404f21b2a3e66e4038461918f73807f9f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZTc3NTQwNGYyMWIyYTNlNjZlNDAzODQ2MTkxOGY3MzgwN2Y5Zjk=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-18T17:00:49Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-05-18T17:05:25Z"}, "message": "add #mod[], which expands to the current module path", "tree": {"sha": "9ef5bd22d4eeb343d6ea163353f40289425373fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ef5bd22d4eeb343d6ea163353f40289425373fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07e775404f21b2a3e66e4038461918f73807f9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07e775404f21b2a3e66e4038461918f73807f9f9", "html_url": "https://github.com/rust-lang/rust/commit/07e775404f21b2a3e66e4038461918f73807f9f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07e775404f21b2a3e66e4038461918f73807f9f9/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f4d0694187a451173d40e9c44db4499a6c04f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f4d0694187a451173d40e9c44db4499a6c04f4", "html_url": "https://github.com/rust-lang/rust/commit/88f4d0694187a451173d40e9c44db4499a6c04f4"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "f669db3c47042892431333917cf7ea895dfd2eb8", "filename": "src/librustsyntax/ext/base.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07e775404f21b2a3e66e4038461918f73807f9f9/src%2Flibrustsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e775404f21b2a3e66e4038461918f73807f9f9/src%2Flibrustsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fbase.rs?ref=07e775404f21b2a3e66e4038461918f73807f9f9", "patch": "@@ -53,6 +53,8 @@ fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n                             builtin(ext::source_util::expand_stringify));\n     syntax_expanders.insert(\"include\",\n                             builtin(ext::source_util::expand_include));\n+    syntax_expanders.insert(\"mod\",\n+                            builtin(ext::source_util::expand_mod));\n     ret syntax_expanders;\n }\n \n@@ -62,6 +64,9 @@ iface ext_ctxt {\n     fn cfg() -> ast::crate_cfg;\n     fn print_backtrace();\n     fn backtrace() -> expn_info;\n+    fn mod_push(mod_name: ast::ident);\n+    fn mod_pop();\n+    fn mod_path() -> [ast::ident];\n     fn bt_push(ei: codemap::expn_info_);\n     fn bt_pop();\n     fn span_fatal(sp: span, msg: str) -> !;\n@@ -76,13 +81,17 @@ fn mk_ctxt(parse_sess: parse::parse_sess,\n            cfg: ast::crate_cfg) -> ext_ctxt {\n     type ctxt_repr = {parse_sess: parse::parse_sess,\n                       cfg: ast::crate_cfg,\n-                      mut backtrace: expn_info};\n+                      mut backtrace: expn_info,\n+                      mut mod_path: [ast::ident]};\n     impl of ext_ctxt for ctxt_repr {\n         fn codemap() -> codemap { self.parse_sess.cm }\n         fn parse_sess() -> parse::parse_sess { self.parse_sess }\n         fn cfg() -> ast::crate_cfg { self.cfg }\n         fn print_backtrace() { }\n         fn backtrace() -> expn_info { self.backtrace }\n+        fn mod_push(i: ast::ident) { vec::push(self.mod_path, i); }\n+        fn mod_pop() { vec::pop(self.mod_path); }\n+        fn mod_path() -> [ast::ident] { ret self.mod_path; }\n         fn bt_push(ei: codemap::expn_info_) {\n             alt ei {\n               expanded_from({call_site: cs, callie: callie}) {\n@@ -129,7 +138,8 @@ fn mk_ctxt(parse_sess: parse::parse_sess,\n     let imp : ctxt_repr = {\n         parse_sess: parse_sess,\n         cfg: cfg,\n-        mut backtrace: none\n+        mut backtrace: none,\n+        mut mod_path: []\n     };\n     ret imp as ext_ctxt\n }"}, {"sha": "c9de4d84602792fc3b92db3338777af2447e3b23", "filename": "src/librustsyntax/ext/expand.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/07e775404f21b2a3e66e4038461918f73807f9f9/src%2Flibrustsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e775404f21b2a3e66e4038461918f73807f9f9/src%2Flibrustsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fexpand.rs?ref=07e775404f21b2a3e66e4038461918f73807f9f9", "patch": "@@ -89,6 +89,21 @@ fn expand_mod_items(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n     ret {items: new_items with module};\n }\n \n+/* record module we enter for `#mod` */\n+fn expand_item(cx: ext_ctxt, &&it: @ast::item, fld: ast_fold,\n+               orig: fn@(&&@ast::item, ast_fold) -> @ast::item)\n+    -> @ast::item\n+{\n+    let is_mod = alt it.node {\n+      ast::item_mod(_) | ast::item_native_mod(_) {true}\n+      _ {false}\n+    };\n+    if is_mod { cx.mod_push(it.ident); }\n+    let ret_val = orig(it, fld);\n+    if is_mod { cx.mod_pop(); }\n+    ret ret_val;\n+}\n+\n fn new_span(cx: ext_ctxt, sp: span) -> span {\n     /* this discards information in the case of macro-defining macros */\n     ret {lo: sp.lo, hi: sp.hi, expn_info: cx.backtrace()};\n@@ -117,6 +132,7 @@ fn expand_crate(parse_sess: parse::parse_sess,\n     let f_pre =\n         {fold_expr: bind expand_expr(exts, cx, _, _, _, afp.fold_expr),\n          fold_mod: bind expand_mod_items(exts, cx, _, _, afp.fold_mod),\n+         fold_item: bind expand_item(cx, _, _, afp.fold_item),\n          new_span: bind new_span(cx, _)\n             with *afp};\n     let f = make_fold(f_pre);"}, {"sha": "ba3ab3342c6201c6fd6ad26ac9970aed3557118f", "filename": "src/librustsyntax/ext/source_util.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07e775404f21b2a3e66e4038461918f73807f9f9/src%2Flibrustsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e775404f21b2a3e66e4038461918f73807f9f9/src%2Flibrustsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fext%2Fsource_util.rs?ref=07e775404f21b2a3e66e4038461918f73807f9f9", "patch": "@@ -3,7 +3,6 @@ import ast;\n import codemap::span;\n import print::pprust;\n \n-\n /* #line(): expands to the current line number */\n fn expand_line(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                _body: ast::mac_body) -> @ast::expr {\n@@ -46,3 +45,9 @@ fn expand_include(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                                         parse::parser::SOURCE_FILE);\n     ret parse::parser::parse_expr(p)\n }\n+\n+fn expand_mod(cx: ext_ctxt, sp: span, arg: ast::mac_arg, _body: ast::mac_body)\n+    -> @ast::expr {\n+    get_mac_args(cx, sp, arg, 0u, option::some(0u), \"file\");\n+    ret make_new_lit(cx, sp, ast::lit_str(str::connect(cx.mod_path(), \"::\")));\n+}"}, {"sha": "23943ece409fb79ae62debdeed65b4dada4e6a13", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07e775404f21b2a3e66e4038461918f73807f9f9/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e775404f21b2a3e66e4038461918f73807f9f9/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=07e775404f21b2a3e66e4038461918f73807f9f9", "patch": "@@ -1,11 +1,19 @@\n // This test is brittle! \n // xfail-pretty - the pretty tests lose path information, breaking #include\n \n+mod m1 {\n+    mod m2 {\n+        fn where_am_i() -> str { #mod[] }\n+    }\n+}\n+\n fn main() {\n-    assert(#line[] == 5u);\n+    assert(#line[] == 11u);\n     assert(#col[] == 12u);\n     assert(#file[].ends_with(\"syntax-extension-source-utils.rs\"));\n     assert(#stringify[(2*3) + 5] == \"2 * 3 + 5\");\n     assert(#include[\"syntax-extension-source-utils-files/includeme.fragment\"]\n-           == \"victory robot 6\")\n+           == \"victory robot 6\");\n+    // The Windows tests are wrapped in an extra module for some reason\n+    assert(m1::m2::where_am_i().ends_with(\"m1::m2\"));\n }"}]}