{"sha": "366f97bf8cb6268ae5624c6422f05fd7e8eaf698", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NmY5N2JmOGNiNjI2OGFlNTYyNGM2NDIyZjA1ZmQ3ZThlYWY2OTg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-17T12:24:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-17T12:24:56Z"}, "message": "Rollup merge of #81082 - ssomers:btree_cleanup_comments, r=Mark-Simulacrum\n\nBTreeMap: clean up a few more comments\n\nAnd mark `pop` as unsafe.\nr? ```@Mark-Simulacrum```", "tree": {"sha": "54f0d9e6ca59d81164805df81dae87867a5405ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54f0d9e6ca59d81164805df81dae87867a5405ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/366f97bf8cb6268ae5624c6422f05fd7e8eaf698", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgBCyYCRBK7hj4Ov3rIwAAdHIIAHdgQZkhvAoKNnuoSk/O7DUt\nhVEQGyy0uDdSSi11P3yt0yiUFLO5QCAHkbaIN0nKHr/APYfgBB7a5F7opi//MQZ1\n9GPp4JTHYen4Pvhs+wwRCnAztsLKy8hZmej48fBCiw9TnITMbTdTsXkdMosnoyjd\ng2nR+/vCLOdtvYAUPRtUkyJKrlUSFcAtqesnqlP9GIAL9YqPNVoXF20ZPNgj5wAv\nv/S4zpB7mUuaJc7PQddGbDZN2h806pVctiaGzF4zrIsx7akQvSxqVehxL5ZHU9sj\nKgA92O4kafl5KGU46rZjpethvR33oY4pHVqKW7x4WZ54YKYWxqpNeiU4acxbKwE=\n=Z/IC\n-----END PGP SIGNATURE-----\n", "payload": "tree 54f0d9e6ca59d81164805df81dae87867a5405ba\nparent 19370a486057b1bc7c7911c869640f3bf8d7977d\nparent 50ee0b29862a640526b05646f62fdf3b47e0f8bc\nauthor Mara Bos <m-ou.se@m-ou.se> 1610886296 +0000\ncommitter GitHub <noreply@github.com> 1610886296 +0000\n\nRollup merge of #81082 - ssomers:btree_cleanup_comments, r=Mark-Simulacrum\n\nBTreeMap: clean up a few more comments\n\nAnd mark `pop` as unsafe.\nr? ```@Mark-Simulacrum```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/366f97bf8cb6268ae5624c6422f05fd7e8eaf698", "html_url": "https://github.com/rust-lang/rust/commit/366f97bf8cb6268ae5624c6422f05fd7e8eaf698", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/366f97bf8cb6268ae5624c6422f05fd7e8eaf698/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19370a486057b1bc7c7911c869640f3bf8d7977d", "url": "https://api.github.com/repos/rust-lang/rust/commits/19370a486057b1bc7c7911c869640f3bf8d7977d", "html_url": "https://github.com/rust-lang/rust/commit/19370a486057b1bc7c7911c869640f3bf8d7977d"}, {"sha": "50ee0b29862a640526b05646f62fdf3b47e0f8bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/50ee0b29862a640526b05646f62fdf3b47e0f8bc", "html_url": "https://github.com/rust-lang/rust/commit/50ee0b29862a640526b05646f62fdf3b47e0f8bc"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "928c6f9a3a88d41b35eed9d42880c97662261ed2", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/366f97bf8cb6268ae5624c6422f05fd7e8eaf698/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366f97bf8cb6268ae5624c6422f05fd7e8eaf698/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=366f97bf8cb6268ae5624c6422f05fd7e8eaf698", "patch": "@@ -184,7 +184,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n \n     /// Removes the internal root node, using its first child as the new root node.\n     /// As it is intended only to be called when the root node has only one child,\n-    /// no cleanup is done on any of the other children.\n+    /// no cleanup is done on any of the keys, values and other children.\n     /// This decreases the height by 1 and is the opposite of `push_internal_level`.\n     ///\n     /// Requires exclusive access to the `Root` object but not to the root node;\n@@ -225,7 +225,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n ///    - When this is `Owned`, the `NodeRef` acts roughly like `Box<Node>`,\n ///      but does not have a destructor, and must be cleaned up manually.\n ///   Since any `NodeRef` allows navigating through the tree, `BorrowType`\n-///   effectively applies to the entire tree, not just the node itself.\n+///   effectively applies to the entire tree, not just to the node itself.\n /// - `K` and `V`: These are the types of keys and values stored in the nodes.\n /// - `Type`: This can be `Leaf`, `Internal`, or `LeafOrInternal`. When this is\n ///   `Leaf`, the `NodeRef` points to a leaf node, when this is `Internal` the\n@@ -425,7 +425,7 @@ impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n \n impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n     /// Similar to `ascend`, gets a reference to a node's parent node, but also\n-    /// deallocate the current node in the process. This is unsafe because the\n+    /// deallocates the current node in the process. This is unsafe because the\n     /// current node will still be accessible despite being deallocated.\n     pub unsafe fn deallocate_and_ascend(\n         self,\n@@ -661,7 +661,10 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n     /// Removes a key-value pair from the end of the node and returns the pair.\n     /// Also removes the edge that was to the right of that pair and, if the node\n     /// is internal, returns the orphaned subtree that this edge owned.\n-    fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n+    ///\n+    /// # Safety\n+    /// The node must not be empty.\n+    unsafe fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n         debug_assert!(self.len() > 0);\n \n         let idx = self.len() - 1;"}, {"sha": "efe94ef175ce756204585fc36c3701d14b0e8b9b", "filename": "library/alloc/src/collections/btree/search.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366f97bf8cb6268ae5624c6422f05fd7e8eaf698/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366f97bf8cb6268ae5624c6422f05fd7e8eaf698/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs?ref=366f97bf8cb6268ae5624c6422f05fd7e8eaf698", "patch": "@@ -12,8 +12,7 @@ pub enum SearchResult<BorrowType, K, V, FoundType, GoDownType> {\n \n /// Looks up a given key in a (sub)tree headed by the given node, recursively.\n /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,\n-/// returns a `GoDown` with the handle of the possible leaf edge where the key\n-/// belongs.\n+/// returns a `GoDown` with the handle of the leaf edge where the key belongs.\n ///\n /// The result is meaningful only if the tree is ordered by key, like the tree\n /// in a `BTreeMap` is."}]}