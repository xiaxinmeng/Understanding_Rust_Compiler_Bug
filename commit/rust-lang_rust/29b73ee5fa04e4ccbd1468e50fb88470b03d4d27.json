{"sha": "29b73ee5fa04e4ccbd1468e50fb88470b03d4d27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YjczZWU1ZmEwNGU0Y2NiZDE0NjhlNTBmYjg4NDcwYjAzZDRkMjc=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-08-14T15:24:33Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-08-14T18:59:53Z"}, "message": "Fix `reachable_set` for non-function items in non-library crates", "tree": {"sha": "c54de097386027c21da41d4881a397367148944e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c54de097386027c21da41d4881a397367148944e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b73ee5fa04e4ccbd1468e50fb88470b03d4d27", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYRgSsRUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLhDKgEAxoPUGu3IA0PhJjjnS98cVTsT47SQ\nERoI5fIfl4fzp44BAO+xEEksDCBoKYfryATPrewlxu0COlN8/cONuMYSSaMJ\n=TSJb\n-----END PGP SIGNATURE-----", "payload": "tree c54de097386027c21da41d4881a397367148944e\nparent 9315a0cd4c3b9568e66cf613fecad1bfac214f53\nauthor hyd-dev <yd-huang@outlook.com> 1628954673 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1628967593 +0800\n\nFix `reachable_set` for non-function items in non-library crates\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b73ee5fa04e4ccbd1468e50fb88470b03d4d27", "html_url": "https://github.com/rust-lang/rust/commit/29b73ee5fa04e4ccbd1468e50fb88470b03d4d27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b73ee5fa04e4ccbd1468e50fb88470b03d4d27/comments", "author": null, "committer": null, "parents": [{"sha": "9315a0cd4c3b9568e66cf613fecad1bfac214f53", "url": "https://api.github.com/repos/rust-lang/rust/commits/9315a0cd4c3b9568e66cf613fecad1bfac214f53", "html_url": "https://github.com/rust-lang/rust/commit/9315a0cd4c3b9568e66cf613fecad1bfac214f53"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "5ca098c22878b8d52934b52ae13df55533973499", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/29b73ee5fa04e4ccbd1468e50fb88470b03d4d27/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b73ee5fa04e4ccbd1468e50fb88470b03d4d27/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=29b73ee5fa04e4ccbd1468e50fb88470b03d4d27", "patch": "@@ -211,21 +211,22 @@ impl<'tcx> ReachableContext<'tcx> {\n         if !self.any_library {\n             // If we are building an executable, only explicitly extern\n             // types need to be exported.\n-            if let Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, ..), def_id, .. })\n-            | Node::ImplItem(hir::ImplItem {\n-                kind: hir::ImplItemKind::Fn(sig, ..),\n-                def_id,\n-                ..\n-            }) = *node\n-            {\n-                let reachable = sig.header.abi != Abi::Rust;\n-                let codegen_attrs = self.tcx.codegen_fn_attrs(*def_id);\n-                let is_extern = codegen_attrs.contains_extern_indicator();\n-                let std_internal =\n-                    codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n-                if reachable || is_extern || std_internal {\n-                    self.reachable_symbols.insert(search_item);\n-                }\n+            let reachable =\n+                if let Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, ..), .. })\n+                | Node::ImplItem(hir::ImplItem {\n+                    kind: hir::ImplItemKind::Fn(sig, ..), ..\n+                }) = *node\n+                {\n+                    sig.header.abi != Abi::Rust\n+                } else {\n+                    false\n+                };\n+            let codegen_attrs = self.tcx.codegen_fn_attrs(search_item);\n+            let is_extern = codegen_attrs.contains_extern_indicator();\n+            let std_internal =\n+                codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n+            if reachable || is_extern || std_internal {\n+                self.reachable_symbols.insert(search_item);\n             }\n         } else {\n             // If we are building a library, then reachable symbols will"}, {"sha": "6274434cd8fcc3754c844fd5a38c0b233f061bf0", "filename": "src/test/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29b73ee5fa04e4ccbd1468e50fb88470b03d4d27/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b73ee5fa04e4ccbd1468e50fb88470b03d4d27/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=29b73ee5fa04e4ccbd1468e50fb88470b03d4d27", "patch": "@@ -1,10 +1,11 @@\n+// revisions: lib staticlib\n // ignore-emscripten default visibility is hidden\n // compile-flags: -O\n // `#[no_mangle]`d static variables always have external linkage, i.e., no `internal` in their\n // definitions\n \n-#![crate_type = \"lib\"]\n-#![no_std]\n+#![cfg_attr(lib, crate_type = \"lib\")]\n+#![cfg_attr(staticlib, crate_type = \"staticlib\")]\n \n // CHECK: @A = local_unnamed_addr constant\n #[no_mangle]"}]}