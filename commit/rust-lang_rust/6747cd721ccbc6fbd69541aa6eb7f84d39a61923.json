{"sha": "6747cd721ccbc6fbd69541aa6eb7f84d39a61923", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NDdjZDcyMWNjYmM2ZmJkNjk1NDFhYTZlYjdmODRkMzlhNjE5MjM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-13T01:07:42Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-26T18:37:09Z"}, "message": "Start factoring out an abstract `Item`", "tree": {"sha": "9729b91f9afe4c90f33ad19c8d7c6c142d87fdd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9729b91f9afe4c90f33ad19c8d7c6c142d87fdd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6747cd721ccbc6fbd69541aa6eb7f84d39a61923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6747cd721ccbc6fbd69541aa6eb7f84d39a61923", "html_url": "https://github.com/rust-lang/rust/commit/6747cd721ccbc6fbd69541aa6eb7f84d39a61923", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6747cd721ccbc6fbd69541aa6eb7f84d39a61923/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d3b6784d11b7b3cb96a29795945b742f7a6be1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d3b6784d11b7b3cb96a29795945b742f7a6be1c", "html_url": "https://github.com/rust-lang/rust/commit/3d3b6784d11b7b3cb96a29795945b742f7a6be1c"}], "stats": {"total": 70, "additions": 58, "deletions": 12}, "files": [{"sha": "e8e5dfbc7f5ee1dec06030c1144cce31f56f2bc5", "filename": "src/items.rs", "status": "modified", "additions": 58, "deletions": 12, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6747cd721ccbc6fbd69541aa6eb7f84d39a61923/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6747cd721ccbc6fbd69541aa6eb7f84d39a61923/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6747cd721ccbc6fbd69541aa6eb7f84d39a61923", "patch": "@@ -76,38 +76,84 @@ impl Rewrite for ast::Local {\n     }\n }\n \n+// TODO convert to using rewrite style rather than visitor\n+// TODO format modules in this style\n+struct Item<'a> {\n+    keyword: &'static str,\n+    abi: String,\n+    vis: Option<&'a ast::Visibility>,\n+    body: Vec<BodyElement<'a>>,\n+    span: Span,\n+}\n+\n+impl<'a> Item<'a> {\n+    fn from_foreign_mod(fm: &'a ast::ForeignMod, span: Span, config: &Config) -> Item<'a> {\n+        let abi = if fm.abi == abi::Abi::C && !config.force_explicit_abi {\n+            \"extern\".into()\n+        } else {\n+            format!(\"extern {}\", fm.abi)\n+        };\n+        Item {\n+            keyword: \"\",\n+            abi: abi,\n+            vis: None,\n+            body: fm.items.iter().map(|i| BodyElement::ForeignItem(i)).collect(),\n+            span: span,\n+        }\n+    }\n+}\n+\n+enum BodyElement<'a> {\n+    // Stmt(&'a ast::Stmt),\n+    // Field(&'a ast::Field),\n+    // Variant(&'a ast::Variant),\n+    // Item(&'a ast::Item),\n+    ForeignItem(&'a ast::ForeignItem),\n+}\n+\n impl<'a> FmtVisitor<'a> {\n-    pub fn format_foreign_mod(&mut self, fm: &ast::ForeignMod, span: Span) {\n-        let abi_str = ::utils::format_abi(fm.abi, self.config.force_explicit_abi);\n-        self.buffer.push_str(&abi_str);\n+    fn format_item(&mut self, item: Item) {\n+        self.buffer.push_str(&item.abi);\n+        self.buffer.push_str(\" \");\n \n-        let snippet = self.snippet(span);\n+        let snippet = self.snippet(item.span);\n         let brace_pos = snippet.find_uncommented(\"{\").unwrap();\n \n         self.buffer.push_str(\"{\");\n-        if !fm.items.is_empty() || contains_comment(&snippet[brace_pos..]) {\n+        if !item.body.is_empty() || contains_comment(&snippet[brace_pos..]) {\n             // FIXME: this skips comments between the extern keyword and the opening\n             // brace.\n-            self.last_pos = span.lo + BytePos(brace_pos as u32 + 1);\n+            self.last_pos = item.span.lo + BytePos(brace_pos as u32 + 1);\n             self.block_indent = self.block_indent.block_indent(self.config);\n \n-            if fm.items.is_empty() {\n-                self.format_missing_no_indent(span.hi - BytePos(1));\n+            if item.body.is_empty() {\n+                self.format_missing_no_indent(item.span.hi - BytePos(1));\n                 self.block_indent = self.block_indent.block_unindent(self.config);\n \n                 self.buffer.push_str(&self.block_indent.to_string(self.config));\n             } else {\n-                for item in &fm.items {\n-                    self.format_foreign_item(&*item);\n+                for item in &item.body {\n+                    self.format_body_element(item);\n                 }\n \n                 self.block_indent = self.block_indent.block_unindent(self.config);\n-                self.format_missing_with_indent(span.hi - BytePos(1));\n+                self.format_missing_with_indent(item.span.hi - BytePos(1));\n             }\n         }\n \n         self.buffer.push_str(\"}\");\n-        self.last_pos = span.hi;\n+        self.last_pos = item.span.hi;\n+    }\n+\n+    fn format_body_element(&mut self, element: &BodyElement) {\n+        match *element {\n+            BodyElement::ForeignItem(ref item) => self.format_foreign_item(item),\n+        }\n+    }\n+\n+    pub fn format_foreign_mod(&mut self, fm: &ast::ForeignMod, span: Span) {\n+        let item = Item::from_foreign_mod(fm, span, self.config);\n+        self.format_item(item);\n     }\n \n     fn format_foreign_item(&mut self, item: &ast::ForeignItem) {"}]}