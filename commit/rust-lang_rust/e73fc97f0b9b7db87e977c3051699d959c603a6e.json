{"sha": "e73fc97f0b9b7db87e977c3051699d959c603a6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3M2ZjOTdmMGI5YjdkYjg3ZTk3N2MzMDUxNjk5ZDk1OWM2MDNhNmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T09:52:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-09T09:52:26Z"}, "message": "cargo-miri: honor RUSTC env var", "tree": {"sha": "90540cacb7c8ce16b5740d615a558ec88e69241a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90540cacb7c8ce16b5740d615a558ec88e69241a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e73fc97f0b9b7db87e977c3051699d959c603a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e73fc97f0b9b7db87e977c3051699d959c603a6e", "html_url": "https://github.com/rust-lang/rust/commit/e73fc97f0b9b7db87e977c3051699d959c603a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e73fc97f0b9b7db87e977c3051699d959c603a6e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70f83a342c43da584a029d60f79547b175f28947", "url": "https://api.github.com/repos/rust-lang/rust/commits/70f83a342c43da584a029d60f79547b175f28947", "html_url": "https://github.com/rust-lang/rust/commit/70f83a342c43da584a029d60f79547b175f28947"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "44106955e0f4cb7d2007a7d147ae29c1302c6227", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e73fc97f0b9b7db87e977c3051699d959c603a6e/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73fc97f0b9b7db87e977c3051699d959c603a6e/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=e73fc97f0b9b7db87e977c3051699d959c603a6e", "patch": "@@ -6,6 +6,7 @@ use std::io::{self, BufRead, Write};\n use std::ops::Not;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n+use std::ffi::OsString;\n \n const XARGO_MIN_VERSION: (u32, u32, u32) = (0, 3, 20);\n \n@@ -85,29 +86,23 @@ fn get_arg_flag_value(name: &str) -> Option<String> {\n     }\n }\n \n-/// Returns the path to the `miri` binary\n-fn find_miri() -> PathBuf {\n+/// Returns a command for the right `miri` binary.\n+fn miri() -> Command {\n     let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n     path.set_file_name(\"miri\");\n-    path\n+    Command::new(path)\n }\n \n fn cargo() -> Command {\n-    if let Ok(val) = std::env::var(\"CARGO\") {\n-        // Bootstrap tells us where to find cargo\n-        Command::new(val)\n-    } else {\n-        Command::new(\"cargo\")\n-    }\n+    Command::new(env::var_os(\"CARGO\").unwrap_or_else(|| OsString::from(\"cargo\")))\n }\n \n fn xargo_check() -> Command {\n-    if let Ok(val) = std::env::var(\"XARGO_CHECK\") {\n-        // Bootstrap tells us where to find xargo\n-        Command::new(val)\n-    } else {\n-        Command::new(\"xargo-check\")\n-    }\n+    Command::new(env::var_os(\"XARGO_CHECK\").unwrap_or_else(|| OsString::from(\"xargo-check\")))\n+}\n+\n+fn rustc() -> Command {\n+    Command::new(env::var_os(\"RUSTC\").unwrap_or_else(|| OsString::from(\"rustc\")))\n }\n \n fn list_targets() -> impl Iterator<Item = cargo_metadata::Target> {\n@@ -188,8 +183,8 @@ fn test_sysroot_consistency() {\n         return;\n     }\n \n-    let rustc_sysroot = get_sysroot(Command::new(\"rustc\"));\n-    let miri_sysroot = get_sysroot(Command::new(find_miri()));\n+    let rustc_sysroot = get_sysroot(rustc());\n+    let miri_sysroot = get_sysroot(miri());\n \n     if rustc_sysroot != miri_sysroot {\n         show_error(format!(\n@@ -301,7 +296,7 @@ fn setup(subcommand: MiriCommand) {\n         Ok(val) => PathBuf::from(val),\n         Err(_) => {\n             // Check for `rust-src` rustup component.\n-            let sysroot = Command::new(\"rustc\")\n+            let sysroot = rustc()\n                 .args(&[\"--print\", \"sysroot\"])\n                 .output()\n                 .expect(\"failed to get rustc sysroot\")\n@@ -554,9 +549,9 @@ fn inside_cargo_rustc() {\n             serde_json::from_str(&magic).expect(\"failed to deserialize MIRI_ARGS\");\n         args.append(&mut user_args);\n         // Run this in Miri.\n-        Command::new(find_miri())\n+        miri()\n     } else {\n-        Command::new(\"rustc\")\n+        rustc()\n     };\n \n     // Run it."}]}