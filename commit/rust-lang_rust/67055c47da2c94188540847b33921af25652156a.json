{"sha": "67055c47da2c94188540847b33921af25652156a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MDU1YzQ3ZGEyYzk0MTg4NTQwODQ3YjMzOTIxYWYyNTY1MjE1NmE=", "commit": {"author": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-03-24T21:21:22Z"}, "committer": {"name": "Marco Groppo", "email": "marco.groppo@gmail.com", "date": "2019-03-24T21:21:22Z"}, "message": "Target only the actual operator.\n\nRenamed `BinExpr::op()` and `PrefixExpr::op()` to `op_kind`.\nNow `op()` returns the `SyntaxNode`.", "tree": {"sha": "d13ddcbec7ea7f12796aa06e4e37a6b6bfc7bb30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d13ddcbec7ea7f12796aa06e4e37a6b6bfc7bb30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67055c47da2c94188540847b33921af25652156a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67055c47da2c94188540847b33921af25652156a", "html_url": "https://github.com/rust-lang/rust/commit/67055c47da2c94188540847b33921af25652156a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67055c47da2c94188540847b33921af25652156a/comments", "author": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcogroppo", "id": 2735511, "node_id": "MDQ6VXNlcjI3MzU1MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2735511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcogroppo", "html_url": "https://github.com/marcogroppo", "followers_url": "https://api.github.com/users/marcogroppo/followers", "following_url": "https://api.github.com/users/marcogroppo/following{/other_user}", "gists_url": "https://api.github.com/users/marcogroppo/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcogroppo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcogroppo/subscriptions", "organizations_url": "https://api.github.com/users/marcogroppo/orgs", "repos_url": "https://api.github.com/users/marcogroppo/repos", "events_url": "https://api.github.com/users/marcogroppo/events{/privacy}", "received_events_url": "https://api.github.com/users/marcogroppo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acac7415a6291efe5209c811dbb5b951ecf79198", "url": "https://api.github.com/repos/rust-lang/rust/commits/acac7415a6291efe5209c811dbb5b951ecf79198", "html_url": "https://github.com/rust-lang/rust/commit/acac7415a6291efe5209c811dbb5b951ecf79198"}], "stats": {"total": 105, "additions": 58, "deletions": 47}, "files": [{"sha": "df0bb689da55e5614d565846c8b694391de38ae1", "filename": "crates/ra_assists/src/flip_eq_operands.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/67055c47da2c94188540847b33921af25652156a/crates%2Fra_assists%2Fsrc%2Fflip_eq_operands.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67055c47da2c94188540847b33921af25652156a/crates%2Fra_assists%2Fsrc%2Fflip_eq_operands.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_eq_operands.rs?ref=67055c47da2c94188540847b33921af25652156a", "patch": "@@ -1,24 +1,23 @@\n use hir::db::HirDatabase;\n-use ra_syntax::{\n-    ast::{AstNode, BinExpr, BinOp}\n-};\n+use ra_syntax::ast::{AstNode, BinExpr, BinOp};\n \n use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn flip_eq_operands(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let expr = ctx.node_at_offset::<BinExpr>()?;\n+    let lhs = expr.lhs()?.syntax();\n+    let rhs = expr.rhs()?.syntax();\n+    let op_range = expr.op()?.range();\n+    let cursor_in_range = ctx.frange.range.is_subrange(&op_range);\n     let allowed_ops = [BinOp::EqualityTest, BinOp::NegatedEqualityTest];\n-    let expr_op = expr.op()?;\n-    if !allowed_ops.iter().any(|o| *o == expr_op) {\n+    let expr_op = expr.op_kind()?;\n+    if !cursor_in_range || !allowed_ops.iter().any(|o| *o == expr_op) {\n         return None;\n     }\n-    let node = expr.syntax();\n-    let prev = node.first_child()?;\n-    let next = node.last_child()?;\n     ctx.add_action(AssistId(\"flip_eq_operands\"), \"flip equality operands\", |edit| {\n-        edit.target(node.range());\n-        edit.replace(prev.range(), next.text());\n-        edit.replace(next.range(), prev.text());\n+        edit.target(op_range);\n+        edit.replace(lhs.range(), rhs.text());\n+        edit.replace(rhs.range(), lhs.text());\n     });\n \n     ctx.build()\n@@ -82,6 +81,6 @@ mod tests {\n \n     #[test]\n     fn flip_eq_operands_target() {\n-        check_assist_target(flip_eq_operands, \"fn f() { let res = 1 ==<|> 2; }\", \"1 == 2\")\n+        check_assist_target(flip_eq_operands, \"fn f() { let res = 1 ==<|> 2; }\", \"==\")\n     }\n }"}, {"sha": "c37fd0454bcb1889bf7a740976d1bf8f56c0d93f", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67055c47da2c94188540847b33921af25652156a/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67055c47da2c94188540847b33921af25652156a/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=67055c47da2c94188540847b33921af25652156a", "patch": "@@ -680,7 +680,7 @@ impl ExprCollector {\n             }\n             ast::ExprKind::PrefixExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                if let Some(op) = e.op() {\n+                if let Some(op) = e.op_kind() {\n                     self.alloc_expr(Expr::UnaryOp { expr, op }, syntax_ptr)\n                 } else {\n                     self.alloc_expr(Expr::Missing, syntax_ptr)\n@@ -703,7 +703,7 @@ impl ExprCollector {\n             ast::ExprKind::BinExpr(e) => {\n                 let lhs = self.collect_expr_opt(e.lhs());\n                 let rhs = self.collect_expr_opt(e.rhs());\n-                let op = e.op();\n+                let op = e.op_kind();\n                 self.alloc_expr(Expr::BinaryOp { lhs, rhs, op }, syntax_ptr)\n             }\n             ast::ExprKind::TupleExpr(e) => {"}, {"sha": "226208700eb38d6640d8cea42ce5f7248e311351", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/67055c47da2c94188540847b33921af25652156a/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67055c47da2c94188540847b33921af25652156a/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=67055c47da2c94188540847b33921af25652156a", "patch": "@@ -521,14 +521,18 @@ pub enum PrefixOp {\n }\n \n impl PrefixExpr {\n-    pub fn op(&self) -> Option<PrefixOp> {\n+    pub fn op_kind(&self) -> Option<PrefixOp> {\n         match self.syntax().first_child()?.kind() {\n             STAR => Some(PrefixOp::Deref),\n             EXCL => Some(PrefixOp::Not),\n             MINUS => Some(PrefixOp::Neg),\n             _ => None,\n         }\n     }\n+\n+    pub fn op(&self) -> Option<&SyntaxNode> {\n+        self.syntax().first_child()\n+    }\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n@@ -598,46 +602,54 @@ pub enum BinOp {\n }\n \n impl BinExpr {\n-    pub fn op(&self) -> Option<BinOp> {\n+    fn op_details(&self) -> Option<(&SyntaxNode, BinOp)> {\n         self.syntax()\n             .children()\n             .filter_map(|c| match c.kind() {\n-                PIPEPIPE => Some(BinOp::BooleanOr),\n-                AMPAMP => Some(BinOp::BooleanAnd),\n-                EQEQ => Some(BinOp::EqualityTest),\n-                NEQ => Some(BinOp::NegatedEqualityTest),\n-                LTEQ => Some(BinOp::LesserEqualTest),\n-                GTEQ => Some(BinOp::GreaterEqualTest),\n-                L_ANGLE => Some(BinOp::LesserTest),\n-                R_ANGLE => Some(BinOp::GreaterTest),\n-                PLUS => Some(BinOp::Addition),\n-                STAR => Some(BinOp::Multiplication),\n-                MINUS => Some(BinOp::Subtraction),\n-                SLASH => Some(BinOp::Division),\n-                PERCENT => Some(BinOp::Remainder),\n-                SHL => Some(BinOp::LeftShift),\n-                SHR => Some(BinOp::RightShift),\n-                CARET => Some(BinOp::BitwiseXor),\n-                PIPE => Some(BinOp::BitwiseOr),\n-                AMP => Some(BinOp::BitwiseAnd),\n-                DOTDOT => Some(BinOp::RangeRightOpen),\n-                DOTDOTEQ => Some(BinOp::RangeRightClosed),\n-                EQ => Some(BinOp::Assignment),\n-                PLUSEQ => Some(BinOp::AddAssign),\n-                SLASHEQ => Some(BinOp::DivAssign),\n-                STAREQ => Some(BinOp::MulAssign),\n-                PERCENTEQ => Some(BinOp::RemAssign),\n-                SHREQ => Some(BinOp::ShrAssign),\n-                SHLEQ => Some(BinOp::ShlAssign),\n-                MINUSEQ => Some(BinOp::SubAssign),\n-                PIPEEQ => Some(BinOp::BitOrAssign),\n-                AMPEQ => Some(BinOp::BitAndAssign),\n-                CARETEQ => Some(BinOp::BitXorAssign),\n+                PIPEPIPE => Some((c, BinOp::BooleanOr)),\n+                AMPAMP => Some((c, BinOp::BooleanAnd)),\n+                EQEQ => Some((c, BinOp::EqualityTest)),\n+                NEQ => Some((c, BinOp::NegatedEqualityTest)),\n+                LTEQ => Some((c, BinOp::LesserEqualTest)),\n+                GTEQ => Some((c, BinOp::GreaterEqualTest)),\n+                L_ANGLE => Some((c, BinOp::LesserTest)),\n+                R_ANGLE => Some((c, BinOp::GreaterTest)),\n+                PLUS => Some((c, BinOp::Addition)),\n+                STAR => Some((c, BinOp::Multiplication)),\n+                MINUS => Some((c, BinOp::Subtraction)),\n+                SLASH => Some((c, BinOp::Division)),\n+                PERCENT => Some((c, BinOp::Remainder)),\n+                SHL => Some((c, BinOp::LeftShift)),\n+                SHR => Some((c, BinOp::RightShift)),\n+                CARET => Some((c, BinOp::BitwiseXor)),\n+                PIPE => Some((c, BinOp::BitwiseOr)),\n+                AMP => Some((c, BinOp::BitwiseAnd)),\n+                DOTDOT => Some((c, BinOp::RangeRightOpen)),\n+                DOTDOTEQ => Some((c, BinOp::RangeRightClosed)),\n+                EQ => Some((c, BinOp::Assignment)),\n+                PLUSEQ => Some((c, BinOp::AddAssign)),\n+                SLASHEQ => Some((c, BinOp::DivAssign)),\n+                STAREQ => Some((c, BinOp::MulAssign)),\n+                PERCENTEQ => Some((c, BinOp::RemAssign)),\n+                SHREQ => Some((c, BinOp::ShrAssign)),\n+                SHLEQ => Some((c, BinOp::ShlAssign)),\n+                MINUSEQ => Some((c, BinOp::SubAssign)),\n+                PIPEEQ => Some((c, BinOp::BitOrAssign)),\n+                AMPEQ => Some((c, BinOp::BitAndAssign)),\n+                CARETEQ => Some((c, BinOp::BitXorAssign)),\n                 _ => None,\n             })\n             .next()\n     }\n \n+    pub fn op_kind(&self) -> Option<BinOp> {\n+        self.op_details().map(|t| t.1)\n+    }\n+\n+    pub fn op(&self) -> Option<&SyntaxNode> {\n+        self.op_details().map(|t| t.0)\n+    }\n+\n     pub fn lhs(&self) -> Option<&Expr> {\n         children(self).nth(0)\n     }"}]}