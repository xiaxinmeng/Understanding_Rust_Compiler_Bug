{"sha": "548e3090c20c3353ac6f9b749315d885211ab699", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OGUzMDkwYzIwYzMzNTNhYzZmOWI3NDkzMTVkODg1MjExYWI2OTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T12:53:23Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:42Z"}, "message": "lowering: extract lower_expr_closure", "tree": {"sha": "6cf6e4ed5b1816b0c966ec815686700333fff2a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cf6e4ed5b1816b0c966ec815686700333fff2a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/548e3090c20c3353ac6f9b749315d885211ab699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/548e3090c20c3353ac6f9b749315d885211ab699", "html_url": "https://github.com/rust-lang/rust/commit/548e3090c20c3353ac6f9b749315d885211ab699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/548e3090c20c3353ac6f9b749315d885211ab699/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca19e326a6924a0337b41c8bd16ec3cfa38b1ee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca19e326a6924a0337b41c8bd16ec3cfa38b1ee4", "html_url": "https://github.com/rust-lang/rust/commit/ca19e326a6924a0337b41c8bd16ec3cfa38b1ee4"}], "stats": {"total": 75, "additions": 39, "deletions": 36}, "files": [{"sha": "3bf6402bff5665d203da2bf576f984432e7e6949", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 39, "deletions": 36, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/548e3090c20c3353ac6f9b749315d885211ab699/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/548e3090c20c3353ac6f9b749315d885211ab699/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=548e3090c20c3353ac6f9b749315d885211ab699", "patch": "@@ -266,42 +266,10 @@ impl LoweringContext<'_> {\n             ExprKind::Await(ref expr) => self.lower_await(e.span, expr),\n             ExprKind::Closure(\n                 capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span\n-            ) => {\n-                if let IsAsync::Async { closure_id, .. } = asyncness {\n-                    self.lower_expr_async_closure(\n-                        capture_clause,\n-                        closure_id,\n-                        decl,\n-                        body,\n-                        fn_decl_span,\n-                    )\n-                } else {\n-                    // Lower outside new scope to preserve `is_in_loop_condition`.\n-                    let fn_decl = self.lower_fn_decl(decl, None, false, None);\n-\n-                    self.with_new_scopes(|this| {\n-                        this.current_item = Some(fn_decl_span);\n-                        let mut generator_kind = None;\n-                        let body_id = this.lower_fn_body(decl, |this| {\n-                            let e = this.lower_expr(body);\n-                            generator_kind = this.generator_kind;\n-                            e\n-                        });\n-                        let generator_option = this.generator_movability_for_fn(\n-                            &decl,\n-                            fn_decl_span,\n-                            generator_kind,\n-                            movability,\n-                        );\n-                        hir::ExprKind::Closure(\n-                            this.lower_capture_clause(capture_clause),\n-                            fn_decl,\n-                            body_id,\n-                            fn_decl_span,\n-                            generator_option,\n-                        )\n-                    })\n-                }\n+            ) => if let IsAsync::Async { closure_id, .. } = asyncness {\n+                self.lower_expr_async_closure(capture_clause, closure_id, decl, body, fn_decl_span)\n+            } else {\n+                self.lower_expr_closure(capture_clause, movability, decl, body, fn_decl_span)\n             }\n             ExprKind::Block(ref blk, opt_label) => {\n                 hir::ExprKind::Block(self.lower_block(blk,\n@@ -407,6 +375,41 @@ impl LoweringContext<'_> {\n         }\n     }\n \n+    fn lower_expr_closure(\n+        &mut self,\n+        capture_clause: CaptureBy,\n+        movability: Movability,\n+        decl: &FnDecl,\n+        body: &Expr,\n+        fn_decl_span: Span,\n+    ) -> hir::ExprKind {\n+        // Lower outside new scope to preserve `is_in_loop_condition`.\n+        let fn_decl = self.lower_fn_decl(decl, None, false, None);\n+\n+        self.with_new_scopes(|this| {\n+            this.current_item = Some(fn_decl_span);\n+            let mut generator_kind = None;\n+            let body_id = this.lower_fn_body(decl, |this| {\n+                let e = this.lower_expr(body);\n+                generator_kind = this.generator_kind;\n+                e\n+            });\n+            let generator_option = this.generator_movability_for_fn(\n+                &decl,\n+                fn_decl_span,\n+                generator_kind,\n+                movability,\n+            );\n+            hir::ExprKind::Closure(\n+                this.lower_capture_clause(capture_clause),\n+                fn_decl,\n+                body_id,\n+                fn_decl_span,\n+                generator_option,\n+            )\n+        })\n+    }\n+\n     fn lower_expr_async_closure(\n         &mut self,\n         capture_clause: CaptureBy,"}]}