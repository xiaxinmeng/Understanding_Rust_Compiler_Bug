{"sha": "13a2615883aa28433383a723a764ca9acb43fd48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYTI2MTU4ODNhYTI4NDMzMzgzYTcyM2E3NjRjYTlhY2I0M2ZkNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-25T07:26:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-25T07:26:49Z"}, "message": "Auto merge of #84147 - cuviper:array-method-dispatch, r=nikomatsakis,m-ou-se\n\nCautiously add IntoIterator for arrays by value\n\nAdd the attribute described in #84133, `#[rustc_skip_array_during_method_dispatch]`, which effectively hides a trait from method dispatch when the receiver type is an array.\n\nThen cherry-pick `IntoIterator for [T; N]` from #65819 and gate it with that attribute. Arrays can now be used as `IntoIterator` normally, but `array.into_iter()` has edition-dependent behavior, returning `slice::Iter` for 2015 and 2018 editions, or `array::IntoIter` for 2021 and later.\n\nr? `@nikomatsakis`\ncc `@LukasKalbertodt` `@rust-lang/libs`", "tree": {"sha": "1e1e7abd48cbf74c0b04b24ca611eebc7c555cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e1e7abd48cbf74c0b04b24ca611eebc7c555cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13a2615883aa28433383a723a764ca9acb43fd48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13a2615883aa28433383a723a764ca9acb43fd48", "html_url": "https://github.com/rust-lang/rust/commit/13a2615883aa28433383a723a764ca9acb43fd48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13a2615883aa28433383a723a764ca9acb43fd48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da10c01214a3d3ebec65b8ba6effada92a0673f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da10c01214a3d3ebec65b8ba6effada92a0673f", "html_url": "https://github.com/rust-lang/rust/commit/5da10c01214a3d3ebec65b8ba6effada92a0673f"}, {"sha": "f6a90ca168dfdf198b75bcdc0aba01915a5bd6fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a90ca168dfdf198b75bcdc0aba01915a5bd6fb", "html_url": "https://github.com/rust-lang/rust/commit/f6a90ca168dfdf198b75bcdc0aba01915a5bd6fb"}], "stats": {"total": 408, "additions": 237, "deletions": 171}, "files": [{"sha": "b8a0b8debcd310b46e305f8584af00d44ca77996", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -544,6 +544,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         rustc_main, Normal, template!(Word),\n         \"the `#[rustc_main]` attribute is used internally to specify test entry point function\",\n     ),\n+    rustc_attr!(\n+        rustc_skip_array_during_method_dispatch, Normal, template!(Word),\n+        \"the `#[rustc_skip_array_during_method_dispatch]` attribute is used to exclude a trait \\\n+        from method dispatch when the receiver is an array, for compatibility in editions < 2021.\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Testing:"}, {"sha": "19ae5ce69c1365d33062a679284a29772ff23626", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -757,6 +757,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     data.paren_sugar,\n                     data.has_auto_impl,\n                     data.is_marker,\n+                    data.skip_array_during_method_dispatch,\n                     data.specialization_kind,\n                     self.def_path_hash(item_id),\n                 )\n@@ -767,6 +768,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 false,\n                 false,\n                 false,\n+                false,\n                 ty::trait_def::TraitSpecializationKind::None,\n                 self.def_path_hash(item_id),\n             ),"}, {"sha": "e8f02b8e66f0a9f03caaabd16d90d6c786fba389", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -1422,6 +1422,7 @@ impl EncodeContext<'a, 'tcx> {\n                     paren_sugar: trait_def.paren_sugar,\n                     has_auto_impl: self.tcx.trait_is_auto(def_id),\n                     is_marker: trait_def.is_marker,\n+                    skip_array_during_method_dispatch: trait_def.skip_array_during_method_dispatch,\n                     specialization_kind: trait_def.specialization_kind,\n                 };\n "}, {"sha": "9f665d5daaa032c9b1aabf4c5eca708c4eda1521", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -385,6 +385,7 @@ struct TraitData {\n     paren_sugar: bool,\n     has_auto_impl: bool,\n     is_marker: bool,\n+    skip_array_during_method_dispatch: bool,\n     specialization_kind: ty::trait_def::TraitSpecializationKind,\n }\n "}, {"sha": "e9b8883f29a488e578ae43af77264de178b046a0", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -35,6 +35,11 @@ pub struct TraitDef {\n     /// and thus `impl`s of it are allowed to overlap.\n     pub is_marker: bool,\n \n+    /// If `true`, then this trait has the `#[rustc_skip_array_during_method_dispatch]`\n+    /// attribute, indicating that editions before 2021 should not consider this trait\n+    /// during method dispatch if the receiver is an array.\n+    pub skip_array_during_method_dispatch: bool,\n+\n     /// Used to determine whether the standard library is allowed to specialize\n     /// on this trait.\n     pub specialization_kind: TraitSpecializationKind,\n@@ -82,6 +87,7 @@ impl<'tcx> TraitDef {\n         paren_sugar: bool,\n         has_auto_impl: bool,\n         is_marker: bool,\n+        skip_array_during_method_dispatch: bool,\n         specialization_kind: TraitSpecializationKind,\n         def_path_hash: DefPathHash,\n     ) -> TraitDef {\n@@ -91,6 +97,7 @@ impl<'tcx> TraitDef {\n             paren_sugar,\n             has_auto_impl,\n             is_marker,\n+            skip_array_during_method_dispatch,\n             specialization_kind,\n             def_path_hash,\n         }"}, {"sha": "4be187c5208cd85467956be28dd22c13f7ea6511", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -1033,6 +1033,7 @@ symbols! {\n         rustc_regions,\n         rustc_reservation_impl,\n         rustc_serialize,\n+        rustc_skip_array_during_method_dispatch,\n         rustc_specialization_trait,\n         rustc_stable,\n         rustc_std_internal_symbol,"}, {"sha": "c79743f2d7363d48c862c624409f825327fabd05", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -1461,6 +1461,16 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 }\n \n                 TraitCandidate(trait_ref) => {\n+                    if let Some(method_name) = self.method_name {\n+                        // Some trait methods are excluded for arrays before 2021.\n+                        // (`array.into_iter()` wants a slice iterator for compatibility.)\n+                        if self_ty.is_array() && !method_name.span.rust_2021() {\n+                            let trait_def = self.tcx.trait_def(trait_ref.def_id);\n+                            if trait_def.skip_array_during_method_dispatch {\n+                                return ProbeResult::NoMatch;\n+                            }\n+                        }\n+                    }\n                     let predicate = trait_ref.without_const().to_predicate(self.tcx);\n                     let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {"}, {"sha": "3692642b6e20d1380c2bb5b56afe09d414c48b0a", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -1191,6 +1191,8 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n     }\n \n     let is_marker = tcx.has_attr(def_id, sym::marker);\n+    let skip_array_during_method_dispatch =\n+        tcx.has_attr(def_id, sym::rustc_skip_array_during_method_dispatch);\n     let spec_kind = if tcx.has_attr(def_id, sym::rustc_unsafe_specialization_marker) {\n         ty::trait_def::TraitSpecializationKind::Marker\n     } else if tcx.has_attr(def_id, sym::rustc_specialization_trait) {\n@@ -1199,7 +1201,16 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n         ty::trait_def::TraitSpecializationKind::None\n     };\n     let def_path_hash = tcx.def_path_hash(def_id);\n-    ty::TraitDef::new(def_id, unsafety, paren_sugar, is_auto, is_marker, spec_kind, def_path_hash)\n+    ty::TraitDef::new(\n+        def_id,\n+        unsafety,\n+        paren_sugar,\n+        is_auto,\n+        is_marker,\n+        skip_array_during_method_dispatch,\n+        spec_kind,\n+        def_path_hash,\n+    )\n }\n \n fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<Span> {"}, {"sha": "8b56c9560aacf62af42326b0bf9681d35b987346", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -155,6 +155,28 @@ impl<T: fmt::Debug, const N: usize> fmt::Debug for [T; N] {\n     }\n }\n \n+// Note: the `#[rustc_skip_array_during_method_dispatch]` on `trait IntoIterator`\n+// hides this implementation from explicit `.into_iter()` calls on editions < 2021,\n+// so those calls will still resolve to the slice implementation, by reference.\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"array_into_iter_impl\", since = \"1.53.0\")]\n+impl<T, const N: usize> IntoIterator for [T; N] {\n+    type Item = T;\n+    type IntoIter = IntoIter<T, N>;\n+\n+    /// Creates a consuming iterator, that is, one that moves each value out of\n+    /// the array (from start to end). The array cannot be used after calling\n+    /// this unless `T` implements `Copy`, so the whole array is copied.\n+    ///\n+    /// Arrays have special behavior when calling `.into_iter()` prior to the\n+    /// 2021 edition -- see the [array] Editions section for more information.\n+    ///\n+    /// [array]: prim@array\n+    fn into_iter(self) -> Self::IntoIter {\n+        IntoIter::new(self)\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T, const N: usize> IntoIterator for &'a [T; N] {\n     type Item = &'a T;"}, {"sha": "13a2e24cadd10454ec7a0d9f1efbd968695edc43", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -198,6 +198,7 @@ pub trait FromIterator<A>: Sized {\n /// }\n /// ```\n #[rustc_diagnostic_item = \"IntoIterator\"]\n+#[cfg_attr(not(bootstrap), rustc_skip_array_during_method_dispatch)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait IntoIterator {\n     /// The type of the elements being iterated over."}, {"sha": "c37111f665c4745ce76db1158705db32f2d1ed54", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -498,7 +498,7 @@ mod prim_pointer {}\n /// - [`Copy`]\n /// - [`Clone`]\n /// - [`Debug`]\n-/// - [`IntoIterator`] (implemented for `&[T; N]` and `&mut [T; N]`)\n+/// - [`IntoIterator`] (implemented for `[T; N]`, `&[T; N]` and `&mut [T; N]`)\n /// - [`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`]\n /// - [`Hash`]\n /// - [`AsRef`], [`AsMut`]\n@@ -517,7 +517,8 @@ mod prim_pointer {}\n ///\n /// # Examples\n ///\n-/// ```\n+#[cfg_attr(bootstrap, doc = \"```ignore\")]\n+#[cfg_attr(not(bootstrap), doc = \"```\")]\n /// let mut array: [i32; 3] = [0; 3];\n ///\n /// array[1] = 1;\n@@ -526,31 +527,16 @@ mod prim_pointer {}\n /// assert_eq!([1, 2], &array[1..]);\n ///\n /// // This loop prints: 0 1 2\n-/// for x in &array {\n+/// for x in array {\n ///     print!(\"{} \", x);\n /// }\n /// ```\n ///\n-/// An array itself is not iterable:\n-///\n-/// ```compile_fail,E0277\n-/// let array: [i32; 3] = [0; 3];\n-///\n-/// for x in array { }\n-/// // error: the trait bound `[i32; 3]: std::iter::Iterator` is not satisfied\n-/// ```\n-///\n-/// The solution is to coerce the array to a slice by calling a slice method:\n+/// You can also iterate over reference to the array's elements:\n ///\n /// ```\n-/// # let array: [i32; 3] = [0; 3];\n-/// for x in array.iter() { }\n-/// ```\n-///\n-/// You can also use the array reference's [`IntoIterator`] implementation:\n+/// let array: [i32; 3] = [0; 3];\n ///\n-/// ```\n-/// # let array: [i32; 3] = [0; 3];\n /// for x in &array { }\n /// ```\n ///\n@@ -564,6 +550,57 @@ mod prim_pointer {}\n /// move_away(roa);\n /// ```\n ///\n+/// # Editions\n+///\n+/// Prior to Rust 1.53, arrays did not implement `IntoIterator` by value, so the method call\n+/// `array.into_iter()` auto-referenced into a slice iterator. That behavior is preserved in the\n+/// 2015 and 2018 editions of Rust for compatability, ignoring `IntoIterator` by value.\n+///\n+#[cfg_attr(bootstrap, doc = \"```rust,edition2018,ignore\")]\n+#[cfg_attr(not(bootstrap), doc = \"```rust,edition2018\")]\n+/// # #![allow(array_into_iter)] // override our `deny(warnings)`\n+/// let array: [i32; 3] = [0; 3];\n+///\n+/// // This creates a slice iterator, producing references to each value.\n+/// for item in array.into_iter().enumerate() {\n+///     let (i, x): (usize, &i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+///\n+/// // The `array_into_iter` lint suggests this change for future compatibility:\n+/// for item in array.iter().enumerate() {\n+///     let (i, x): (usize, &i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+///\n+/// // You can explicitly iterate an array by value using\n+/// // `IntoIterator::into_iter` or `std::array::IntoIter::new`:\n+/// for item in IntoIterator::into_iter(array).enumerate() {\n+///     let (i, x): (usize, i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+/// ```\n+///\n+/// Starting in the 2021 edition, `array.into_iter()` will use `IntoIterator` normally to iterate\n+/// by value, and `iter()` should be used to iterate by reference like previous editions.\n+///\n+/// ```rust,edition2021,ignore\n+/// # // FIXME: ignored because 2021 testing is still unstable\n+/// let array: [i32; 3] = [0; 3];\n+///\n+/// // This iterates by reference:\n+/// for item in array.iter().enumerate() {\n+///     let (i, x): (usize, &i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+///\n+/// // This iterates by value:\n+/// for item in array.into_iter().enumerate() {\n+///     let (i, x): (usize, i32) = item;\n+///     println!(\"array[{}] = {}\", i, x);\n+/// }\n+/// ```\n+///\n /// [slice]: prim@slice\n /// [`Debug`]: fmt::Debug\n /// [`Hash`]: hash::Hash"}, {"sha": "037540a3e89e629bad4e92d301ca767f77d04625", "filename": "src/test/ui/iterators/array-of-ranges.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -1,23 +1,16 @@\n+// check-pass\n+\n fn main() {\n     for _ in [0..1] {}\n-//~^ ERROR is not an iterator\n     for _ in [0..=1] {}\n-//~^ ERROR is not an iterator\n     for _ in [0..] {}\n-//~^ ERROR is not an iterator\n     for _ in [..1] {}\n-//~^ ERROR is not an iterator\n     for _ in [..=1] {}\n-//~^ ERROR is not an iterator\n     let start = 0;\n     let end = 0;\n     for _ in [start..end] {}\n-//~^ ERROR is not an iterator\n     let array_of_range = [start..end];\n     for _ in array_of_range {}\n-//~^ ERROR is not an iterator\n     for _ in [0..1, 2..3] {}\n-//~^ ERROR is not an iterator\n     for _ in [0..=1] {}\n-//~^ ERROR is not an iterator\n }"}, {"sha": "7d58eb948ea815991b79245d2e926b075d1fd9c8", "filename": "src/test/ui/iterators/array-of-ranges.stderr", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/5da10c01214a3d3ebec65b8ba6effada92a0673f/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da10c01214a3d3ebec65b8ba6effada92a0673f/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray-of-ranges.stderr?ref=5da10c01214a3d3ebec65b8ba6effada92a0673f", "patch": "@@ -1,102 +0,0 @@\n-error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:2:14\n-   |\n-LL |     for _ in [0..1] {}\n-   |              ^^^^^^ if you meant to iterate between two values, remove the square brackets\n-   |\n-   = help: the trait `Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n-   = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[std::ops::Range<{integer}>; 1]`\n-   = note: required by `into_iter`\n-\n-error[E0277]: `[RangeInclusive<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:4:14\n-   |\n-LL |     for _ in [0..=1] {}\n-   |              ^^^^^^^ if you meant to iterate between two values, remove the square brackets\n-   |\n-   = help: the trait `Iterator` is not implemented for `[RangeInclusive<{integer}>; 1]`\n-   = note: `[start..=end]` is an array of one `RangeInclusive`; you might have meant to have a `RangeInclusive` without the brackets: `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[RangeInclusive<{integer}>; 1]`\n-   = note: required by `into_iter`\n-\n-error[E0277]: `[RangeFrom<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:6:14\n-   |\n-LL |     for _ in [0..] {}\n-   |              ^^^^^ if you meant to iterate from a value onwards, remove the square brackets\n-   |\n-   = help: the trait `Iterator` is not implemented for `[RangeFrom<{integer}>; 1]`\n-   = note: `[start..]` is an array of one `RangeFrom`; you might have meant to have a `RangeFrom` without the brackets: `start..`, keeping in mind that iterating over an unbounded iterator will run forever unless you `break` or `return` from within the loop\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[RangeFrom<{integer}>; 1]`\n-   = note: required by `into_iter`\n-\n-error[E0277]: `[RangeTo<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:8:14\n-   |\n-LL |     for _ in [..1] {}\n-   |              ^^^^^ if you meant to iterate until a value, remove the square brackets and add a starting value\n-   |\n-   = help: the trait `Iterator` is not implemented for `[RangeTo<{integer}>; 1]`\n-   = note: `[..end]` is an array of one `RangeTo`; you might have meant to have a bounded `Range` without the brackets: `0..end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[RangeTo<{integer}>; 1]`\n-   = note: required by `into_iter`\n-\n-error[E0277]: `[RangeToInclusive<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:10:14\n-   |\n-LL |     for _ in [..=1] {}\n-   |              ^^^^^^ if you meant to iterate until a value (including it), remove the square brackets and add a starting value\n-   |\n-   = help: the trait `Iterator` is not implemented for `[RangeToInclusive<{integer}>; 1]`\n-   = note: `[..=end]` is an array of one `RangeToInclusive`; you might have meant to have a bounded `RangeInclusive` without the brackets: `0..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[RangeToInclusive<{integer}>; 1]`\n-   = note: required by `into_iter`\n-\n-error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:14:14\n-   |\n-LL |     for _ in [start..end] {}\n-   |              ^^^^^^^^^^^^ if you meant to iterate between two values, remove the square brackets\n-   |\n-   = help: the trait `Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n-   = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[std::ops::Range<{integer}>; 1]`\n-   = note: required by `into_iter`\n-\n-error[E0277]: `[std::ops::Range<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:17:14\n-   |\n-LL |     for _ in array_of_range {}\n-   |              ^^^^^^^^^^^^^^ if you meant to iterate between two values, remove the square brackets\n-   |\n-   = help: the trait `Iterator` is not implemented for `[std::ops::Range<{integer}>; 1]`\n-   = note: `[start..end]` is an array of one `Range`; you might have meant to have a `Range` without the brackets: `start..end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[std::ops::Range<{integer}>; 1]`\n-   = note: required by `into_iter`\n-\n-error[E0277]: `[std::ops::Range<{integer}>; 2]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:19:14\n-   |\n-LL |     for _ in [0..1, 2..3] {}\n-   |              ^^^^^^^^^^^^ arrays do not yet implement `IntoIterator`; try using `std::array::IntoIter::new(arr)`\n-   |\n-   = help: the trait `Iterator` is not implemented for `[std::ops::Range<{integer}>; 2]`\n-   = note: see <https://github.com/rust-lang/rust/pull/65819> for more details\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[std::ops::Range<{integer}>; 2]`\n-   = note: required by `into_iter`\n-\n-error[E0277]: `[RangeInclusive<{integer}>; 1]` is not an iterator\n-  --> $DIR/array-of-ranges.rs:21:14\n-   |\n-LL |     for _ in [0..=1] {}\n-   |              ^^^^^^^ if you meant to iterate between two values, remove the square brackets\n-   |\n-   = help: the trait `Iterator` is not implemented for `[RangeInclusive<{integer}>; 1]`\n-   = note: `[start..=end]` is an array of one `RangeInclusive`; you might have meant to have a `RangeInclusive` without the brackets: `start..=end`\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[RangeInclusive<{integer}>; 1]`\n-   = note: required by `into_iter`\n-\n-error: aborting due to 9 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "5985c74e11fdf313cf6b3b24d1ab2b635f395e4b", "filename": "src/test/ui/iterators/array.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/src%2Ftest%2Fui%2Fiterators%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/src%2Ftest%2Fui%2Fiterators%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -1,9 +1,8 @@\n+// check-pass\n+\n fn main() {\n     for _ in [1, 2] {}\n-//~^ ERROR is not an iterator\n     let x = [1, 2];\n     for _ in x {}\n-//~^ ERROR is not an iterator\n     for _ in [1.0, 2.0] {}\n-//~^ ERROR is not an iterator\n }"}, {"sha": "7e2b600fb7af2be302796965fe9ca83211932396", "filename": "src/test/ui/iterators/array.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5da10c01214a3d3ebec65b8ba6effada92a0673f/src%2Ftest%2Fui%2Fiterators%2Farray.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da10c01214a3d3ebec65b8ba6effada92a0673f/src%2Ftest%2Fui%2Fiterators%2Farray.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Farray.stderr?ref=5da10c01214a3d3ebec65b8ba6effada92a0673f", "patch": "@@ -1,36 +0,0 @@\n-error[E0277]: `[{integer}; 2]` is not an iterator\n-  --> $DIR/array.rs:2:14\n-   |\n-LL |     for _ in [1, 2] {}\n-   |              ^^^^^^ arrays do not yet implement `IntoIterator`; try using `std::array::IntoIter::new(arr)`\n-   |\n-   = help: the trait `Iterator` is not implemented for `[{integer}; 2]`\n-   = note: see <https://github.com/rust-lang/rust/pull/65819> for more details\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[{integer}; 2]`\n-   = note: required by `into_iter`\n-\n-error[E0277]: `[{integer}; 2]` is not an iterator\n-  --> $DIR/array.rs:5:14\n-   |\n-LL |     for _ in x {}\n-   |              ^ arrays do not yet implement `IntoIterator`; try using `std::array::IntoIter::new(arr)`\n-   |\n-   = help: the trait `Iterator` is not implemented for `[{integer}; 2]`\n-   = note: see <https://github.com/rust-lang/rust/pull/65819> for more details\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[{integer}; 2]`\n-   = note: required by `into_iter`\n-\n-error[E0277]: `[{float}; 2]` is not an iterator\n-  --> $DIR/array.rs:7:14\n-   |\n-LL |     for _ in [1.0, 2.0] {}\n-   |              ^^^^^^^^^^ arrays do not yet implement `IntoIterator`; try using `std::array::IntoIter::new(arr)`\n-   |\n-   = help: the trait `Iterator` is not implemented for `[{float}; 2]`\n-   = note: see <https://github.com/rust-lang/rust/pull/65819> for more details\n-   = note: required because of the requirements on the impl of `IntoIterator` for `[{float}; 2]`\n-   = note: required by `into_iter`\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "5661397b3c17b2e151b71340de63bfca23bfdef0", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// edition:2018\n+\n+use std::array::IntoIter;\n+use std::ops::Deref;\n+use std::rc::Rc;\n+use std::slice::Iter;\n+\n+fn main() {\n+    let array = [0; 10];\n+\n+    // Before 2021, the method dispatched to `IntoIterator for &[T; N]`,\n+    // which we continue to support for compatibility.\n+    let _: Iter<'_, i32> = array.into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+\n+    let _: Iter<'_, i32> = Box::new(array).into_iter();\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n+\n+    // The `array_into_iter` lint doesn't cover other wrappers that deref to an array.\n+    let _: Iter<'_, i32> = Rc::new(array).into_iter();\n+    let _: Iter<'_, i32> = Array(array).into_iter();\n+\n+    // But you can always use the trait method explicitly as an array.\n+    let _: IntoIter<i32, 10> = IntoIterator::into_iter(array);\n+}\n+\n+/// User type that dereferences to an array.\n+struct Array([i32; 10]);\n+\n+impl Deref for Array {\n+    type Target = [i32; 10];\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}"}, {"sha": "b43338382f20c25c547c8c62f863d71ca4f68990", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -0,0 +1,42 @@\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-2018.rs:14:34\n+   |\n+LL |     let _: Iter<'_, i32> = array.into_iter();\n+   |                                  ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = note: `#[warn(array_into_iter)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-2018.rs:18:44\n+   |\n+LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n+   |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+warning: 2 warnings emitted\n+\n+Future incompatibility report: Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-2018.rs:14:34\n+   |\n+LL |     let _: Iter<'_, i32> = array.into_iter();\n+   |                                  ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = note: `#[warn(array_into_iter)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+\n+Future breakage date: None, diagnostic:\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+  --> $DIR/into-iter-on-arrays-2018.rs:18:44\n+   |\n+LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n+   |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+"}, {"sha": "ec54ed005173b148fc37bbe146e4e7736caad086", "filename": "src/test/ui/iterators/into-iter-on-arrays-2021.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/13a2615883aa28433383a723a764ca9acb43fd48/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13a2615883aa28433383a723a764ca9acb43fd48/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2021.rs?ref=13a2615883aa28433383a723a764ca9acb43fd48", "patch": "@@ -0,0 +1,33 @@\n+// check-pass\n+// edition:2021\n+// compile-flags: -Zunstable-options\n+\n+use std::array::IntoIter;\n+use std::ops::Deref;\n+use std::rc::Rc;\n+\n+fn main() {\n+    let array = [0; 10];\n+\n+    // In 2021, the method dispatches to `IntoIterator for [T; N]`.\n+    let _: IntoIter<i32, 10> = array.into_iter();\n+    let _: IntoIter<i32, 10> = Box::new(array).into_iter();\n+\n+    // The `array_into_iter` lint doesn't cover other wrappers that deref to an array.\n+    let _: IntoIter<i32, 10> = Rc::new(array).into_iter();\n+    let _: IntoIter<i32, 10> = Array(array).into_iter();\n+\n+    // You can always use the trait method explicitly as an array.\n+    let _: IntoIter<i32, 10> = IntoIterator::into_iter(array);\n+}\n+\n+/// User type that dereferences to an array.\n+struct Array([i32; 10]);\n+\n+impl Deref for Array {\n+    type Target = [i32; 10];\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}"}]}