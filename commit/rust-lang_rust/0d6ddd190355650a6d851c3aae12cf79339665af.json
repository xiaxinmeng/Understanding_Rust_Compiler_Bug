{"sha": "0d6ddd190355650a6d851c3aae12cf79339665af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNmRkZDE5MDM1NTY1MGE2ZDg1MWMzYWFlMTJjZjc5MzM5NjY1YWY=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-09T10:31:19Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::ForeignItem_ variants", "tree": {"sha": "33c64c714611295faf7c98ebc69e2a26e02cdb36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33c64c714611295faf7c98ebc69e2a26e02cdb36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d6ddd190355650a6d851c3aae12cf79339665af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d6ddd190355650a6d851c3aae12cf79339665af", "html_url": "https://github.com/rust-lang/rust/commit/0d6ddd190355650a6d851c3aae12cf79339665af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d6ddd190355650a6d851c3aae12cf79339665af/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8290c950a8b4cdc70038736abcf29f41dede6e0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8290c950a8b4cdc70038736abcf29f41dede6e0c", "html_url": "https://github.com/rust-lang/rust/commit/8290c950a8b4cdc70038736abcf29f41dede6e0c"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "781008db129d12d9e2722034ed1237983acf3e48", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=0d6ddd190355650a6d851c3aae12cf79339665af", "patch": "@@ -838,10 +838,10 @@ pub fn lower_foreign_item(lctx: &LoweringContext, i: &ForeignItem) -> hir::Forei\n         name: i.ident.name,\n         attrs: lower_attrs(lctx, &i.attrs),\n         node: match i.node {\n-            ForeignItemFn(ref fdec, ref generics) => {\n+            ForeignItemKind::Fn(ref fdec, ref generics) => {\n                 hir::ForeignItemFn(lower_fn_decl(lctx, fdec), lower_generics(lctx, generics))\n             }\n-            ForeignItemStatic(ref t, m) => {\n+            ForeignItemKind::Static(ref t, m) => {\n                 hir::ForeignItemStatic(lower_ty(lctx, t), m)\n             }\n         },"}, {"sha": "f2225ff2c09872bf49ac0a4b339e608a625aa52d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0d6ddd190355650a6d851c3aae12cf79339665af", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::ForeignItem_::*;\n pub use self::Item_::*;\n pub use self::KleeneOp::*;\n pub use self::MacStmtStyle::*;\n@@ -2039,27 +2038,27 @@ impl Item_ {\n pub struct ForeignItem {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n-    pub node: ForeignItem_,\n+    pub node: ForeignItemKind,\n     pub id: NodeId,\n     pub span: Span,\n     pub vis: Visibility,\n }\n \n /// An item within an `extern` block\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum ForeignItem_ {\n+pub enum ForeignItemKind {\n     /// A foreign function\n-    ForeignItemFn(P<FnDecl>, Generics),\n+    Fn(P<FnDecl>, Generics),\n     /// A foreign static item (`static ext: u8`), with optional mutability\n     /// (the boolean is true when mutable)\n-    ForeignItemStatic(P<Ty>, bool),\n+    Static(P<Ty>, bool),\n }\n \n-impl ForeignItem_ {\n+impl ForeignItemKind {\n     pub fn descriptive_variant(&self) -> &str {\n         match *self {\n-            ForeignItemFn(..) => \"foreign function\",\n-            ForeignItemStatic(..) => \"foreign static item\"\n+            ForeignItemKind::Fn(..) => \"foreign function\",\n+            ForeignItemKind::Static(..) => \"foreign static item\"\n         }\n     }\n }"}, {"sha": "8c39c48bbc792d23feaf01ab4745112b2d8eaf8b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0d6ddd190355650a6d851c3aae12cf79339665af", "patch": "@@ -1092,11 +1092,11 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: P<ForeignItem>, folder: &mut T) ->\n         ident: folder.fold_ident(ident),\n         attrs: fold_attrs(attrs, folder),\n         node: match node {\n-            ForeignItemFn(fdec, generics) => {\n-                ForeignItemFn(folder.fold_fn_decl(fdec), folder.fold_generics(generics))\n+            ForeignItemKind::Fn(fdec, generics) => {\n+                ForeignItemKind::Fn(folder.fold_fn_decl(fdec), folder.fold_generics(generics))\n             }\n-            ForeignItemStatic(t, m) => {\n-                ForeignItemStatic(folder.fold_ty(t), m)\n+            ForeignItemKind::Static(t, m) => {\n+                ForeignItemKind::Static(folder.fold_ty(t), m)\n             }\n         },\n         vis: vis,"}, {"sha": "4faad48f5b76e20b72b04ac1e91442993ab59c18", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0d6ddd190355650a6d851c3aae12cf79339665af", "patch": "@@ -22,7 +22,7 @@ use ast::{Decl, DeclKind};\n use ast::{EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, ExprKind};\n use ast::{Field, FnDecl};\n-use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, FunctionRetTy};\n+use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n use ast::{Ident, Inherited, ImplItem, Item, Item_, ItemStatic};\n use ast::{ItemEnum, ItemFn, ItemForeignMod, ItemImpl, ItemConst};\n use ast::{ItemMac, ItemMod, ItemStruct, ItemTrait, ItemTy, ItemDefaultImpl};\n@@ -5256,7 +5256,7 @@ impl<'a> Parser<'a> {\n         Ok(P(ast::ForeignItem {\n             ident: ident,\n             attrs: attrs,\n-            node: ForeignItemFn(decl, generics),\n+            node: ForeignItemKind::Fn(decl, generics),\n             id: ast::DUMMY_NODE_ID,\n             span: mk_sp(lo, hi),\n             vis: vis\n@@ -5277,7 +5277,7 @@ impl<'a> Parser<'a> {\n         Ok(P(ForeignItem {\n             ident: ident,\n             attrs: attrs,\n-            node: ForeignItemStatic(ty, mutbl),\n+            node: ForeignItemKind::Static(ty, mutbl),\n             id: ast::DUMMY_NODE_ID,\n             span: mk_sp(lo, hi),\n             vis: vis"}, {"sha": "becf2d2bc14415b453ae2b48a2531c3a38818e59", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0d6ddd190355650a6d851c3aae12cf79339665af", "patch": "@@ -1046,7 +1046,7 @@ impl<'a> State<'a> {\n         try!(self.maybe_print_comment(item.span.lo));\n         try!(self.print_outer_attributes(&item.attrs));\n         match item.node {\n-            ast::ForeignItemFn(ref decl, ref generics) => {\n+            ast::ForeignItemKind::Fn(ref decl, ref generics) => {\n                 try!(self.head(\"\"));\n                 try!(self.print_fn(decl, ast::Unsafety::Normal,\n                                    ast::Constness::NotConst,\n@@ -1056,7 +1056,7 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \";\"));\n                 self.end() // end the outer fn box\n             }\n-            ast::ForeignItemStatic(ref t, m) => {\n+            ast::ForeignItemKind::Static(ref t, m) => {\n                 try!(self.head(&visibility_qualified(item.vis,\n                                                     \"static\")));\n                 if m {"}, {"sha": "54b3eccefc65fc099602b6adf47ab8a8c0aa1979", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d6ddd190355650a6d851c3aae12cf79339665af/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=0d6ddd190355650a6d851c3aae12cf79339665af", "patch": "@@ -467,11 +467,11 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V,\n     visitor.visit_ident(foreign_item.span, foreign_item.ident);\n \n     match foreign_item.node {\n-        ForeignItemFn(ref function_declaration, ref generics) => {\n+        ForeignItemKind::Fn(ref function_declaration, ref generics) => {\n             walk_fn_decl(visitor, function_declaration);\n             visitor.visit_generics(generics)\n         }\n-        ForeignItemStatic(ref typ, _) => visitor.visit_ty(typ),\n+        ForeignItemKind::Static(ref typ, _) => visitor.visit_ty(typ),\n     }\n \n     walk_list!(visitor, visit_attribute, &foreign_item.attrs);"}]}